/// Auto-generated by Deno Win32: Windows.Win32.Media.Apis

import * as util from "../util.ts";

// Enums
export type MIDI_WAVE_OPEN_TYPE = number;
export type SND_FLAGS = number;
export type MIXERLINE_COMPONENTTYPE = number;
export type OA_BOOL = number;
export type MPEGLAYER3WAVEFORMAT_FLAGS = number;
export type TIMECODE_SAMPLE_FLAGS = number;
export type MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS = number;
export type MPEG2VIDEOINFO_FLAGS = number;
export type MF_Plugin_Type = number;
export type APO_BUFFER_FLAGS = number;
export type APO_CONNECTION_BUFFER_TYPE = number;
export type APO_FLAG = number;
export type AUDIO_FLOW_TYPE = number;
export type EAudioConstriction = number;
export type AUDIO_SYSTEMEFFECT_STATE = number;
export type APO_LOG_LEVEL = number;
export type APO_NOTIFICATION_TYPE = number;
export type AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE = number;
export type DMUS_CLOCKTYPE = number;
export type DSPROPERTY_DIRECTSOUNDDEVICE = number;
export type DIRECTSOUNDDEVICE_TYPE = number;
export type DIRECTSOUNDDEVICE_DATAFLOW = number;
export type EndpointConnectorType = number;
export type RIP_INFO_TYPE = number;
export type AMVP_SELECT_FORMAT_BY = number;
export type AMVP_MODE = number;
export type PIN_DIRECTION = number;
export type FILTER_STATE = number;
export type AM_SAMPLE_PROPERTY_FLAGS = number;
export type AM_SEEKING_SEEKING_FLAGS = number;
export type AM_SEEKING_SEEKING_CAPABILITIES = number;
export type AM_MEDIAEVENT_FLAGS = number;
export type IFILTERMAPPER_MERIT = number;
export type REG_PINFLAG = number;
export type QualityMessageType = number;
export type COLORKEY_TYPE = number;
export type ADVISE_TYPE = number;
export type AM_FILESINK_FLAGS = number;
export type _AM_RENSDEREXFLAGS = number;
export type AM_STREAM_INFO_FLAGS = number;
export type InterleavingMode = number;
export type CompressionCaps = number;
export type VfwCaptureDialogs = number;
export type VfwCompressDialogs = number;
export type AnalogVideoStandard = number;
export type TunerInputType = number;
export type VideoCopyProtectionType = number;
export type PhysicalConnectorType = number;
export type VideoProcAmpProperty = number;
export type VideoProcAmpFlags = number;
export type CameraControlProperty = number;
export type CameraControlFlags = number;
export type VideoControlFlags = number;
export type AMTunerSubChannel = number;
export type AMTunerSignalStrength = number;
export type AMTunerModeType = number;
export type AMTunerEventType = number;
export type TVAudioMode = number;
export type AMTVAudioEventType = number;
export type AMPROPERTY_PIN = number;
export type _AMSTREAMSELECTINFOFLAGS = number;
export type _AMSTREAMSELECTENABLEFLAGS = number;
export type _AMRESCTL_RESERVEFLAGS = number;
export type _AM_FILTER_MISC_FLAGS = number;
export type DECIMATION_USAGE = number;
export type _AM_PUSHSOURCE_FLAGS = number;
export type _DVENCODERRESOLUTION = number;
export type _DVENCODERVIDEOFORMAT = number;
export type _DVENCODERFORMAT = number;
export type _DVDECODERRESOLUTION = number;
export type _DVRESOLUTION = number;
export type _AM_AUDIO_RENDERER_STAT_PARAM = number;
export type _AM_INTF_SEARCH_FLAGS = number;
export type AMOVERLAYFX = number;
export type _AM_PIN_FLOW_CONTROL_BLOCK_FLAGS = number;
export type AM_GRAPH_CONFIG_RECONNECT_FLAGS = number;
export type _REM_FILTER_FLAGS = number;
export type AM_FILTER_FLAGS = number;
export type VMRPresentationFlags = number;
export type VMRSurfaceAllocationFlags = number;
export type VMR_ASPECT_RATIO_MODE = number;
export type VMRMixerPrefs = number;
export type VMRRenderPrefs = number;
export type VMRMode = number;
export type STREAMIF_CONSTANTS = number;
export type VMRDeinterlacePrefs = number;
export type VMRDeinterlaceTech = number;
export type DVD_DOMAIN = number;
export type DVD_MENU_ID = number;
export type DVD_DISC_SIDE = number;
export type DVD_PREFERRED_DISPLAY_MODE = number;
export type DVD_FRAMERATE = number;
export type DVD_NavCmdType = number;
export type DVD_TIMECODE_FLAGS = number;
export type VALID_UOP_FLAG = number;
export type DVD_CMD_FLAGS = number;
export type DVD_OPTION_FLAG = number;
export type DVD_RELATIVE_BUTTON = number;
export type DVD_PARENTAL_LEVEL = number;
export type DVD_AUDIO_LANG_EXT = number;
export type DVD_SUBPICTURE_LANG_EXT = number;
export type DVD_AUDIO_APPMODE = number;
export type DVD_AUDIO_FORMAT = number;
export type DVD_KARAOKE_DOWNMIX = number;
export type DVD_KARAOKE_CONTENTS = number;
export type DVD_KARAOKE_ASSIGNMENT = number;
export type DVD_VIDEO_COMPRESSION = number;
export type DVD_SUBPICTURE_TYPE = number;
export type DVD_SUBPICTURE_CODING = number;
export type DVD_TITLE_APPMODE = number;
export type DVD_TextStringType = number;
export type DVD_TextCharSet = number;
export type AM_DVD_GRAPH_FLAGS = number;
export type AM_DVD_STREAM_FLAGS = number;
export type _AM_OVERLAY_NOTIFY_FLAGS = number;
export type BDA_EVENT_ID = number;
export type BDA_MULTICAST_MODE = number;
export type BDA_SIGNAL_STATE = number;
export type BDA_CHANGE_STATE = number;
export type MEDIA_SAMPLE_CONTENT = number;
export type ISDBCAS_REQUEST_ID = number;
export type MUX_PID_TYPE = number;
export type DVBSystemType = number;
export type BDA_Channel = number;
export type ComponentCategory = number;
export type ComponentStatus = number;
export type MPEG2StreamType = number;
export type ATSCComponentTypeFlags = number;
export type BinaryConvolutionCodeRate = number;
export type FECMethod = number;
export type ModulationType = number;
export type ScanModulationTypes = number;
export type SpectralInversion = number;
export type Polarisation = number;
export type LNB_Source = number;
export type GuardInterval = number;
export type HierarchyAlpha = number;
export type TransmissionMode = number;
export type RollOff = number;
export type Pilot = number;
export type BDA_Frequency = number;
export type BDA_Range = number;
export type BDA_Channel_Bandwidth = number;
export type BDA_Frequency_Multiplier = number;
export type BDA_Comp_Flags = number;
export type ApplicationTypeType = number;
export type BDA_CONDITIONALACCESS_REQUESTTYPE = number;
export type BDA_CONDITIONALACCESS_MMICLOSEREASON = number;
export type BDA_CONDITIONALACCESS_SESSION_RESULT = number;
export type BDA_DISCOVERY_STATE = number;
export type SmartCardStatusType = number;
export type SmartCardAssociationType = number;
export type LocationCodeSchemeType = number;
export type EntitlementType = number;
export type UICloseReasonType = number;
export type BDA_DrmPairingError = number;
export type KSPROPERTY_IPSINK = number;
export type AMExtendedSeekingCapabilities = number;
export type AM_LINE21_CCLEVEL = number;
export type AM_LINE21_CCSERVICE = number;
export type AM_LINE21_CCSTATE = number;
export type AM_LINE21_CCSTYLE = number;
export type AM_LINE21_DRAWBGMODE = number;
export type AM_WST_LEVEL = number;
export type AM_WST_SERVICE = number;
export type AM_WST_STATE = number;
export type AM_WST_STYLE = number;
export type AM_WST_DRAWBGMODE = number;
export type STREAM_TYPE = number;
export type STREAM_STATE = number;
export type COMPLETION_STATUS_FLAGS = number;
export type MMSSF_GET_INFORMATION_FLAGS = number;
export type SSUPDATE_TYPE = number;
export type DDSFF_FLAGS = number;
export type AMMSF_MMS_INIT_FLAGS = number;
export type AMMSF_MS_FLAGS = number;
export type AMMSF_RENDER_FLAGS = number;
export type OUTPUT_STATE = number;
export type BI_COMPRESSION = number;
export type AM_PROPERTY_FRAMESTEP = number;
export type AM_ASPECT_RATIO_MODE = number;
export type VMR9PresentationFlags = number;
export type VMR9SurfaceAllocationFlags = number;
export type D3DFORMAT = number;
export type D3DPOOL = number;
export type VMR9AspectRatioMode = number;
export type VMR9MixerPrefs = number;
export type VMR9ProcAmpControlFlags = number;
export type VMR9AlphaBitmapFlags = number;
export type VMR9RenderPrefs = number;
export type VMR9Mode = number;
export type VMR9DeinterlacePrefs = number;
export type VMR9DeinterlaceTech = number;
export type VMR9_SampleFormat = number;
export type AM_PROPERTY_AC3 = number;
export type AM_PROPERTY_DVDSUBPIC = number;
export type AM_PROPERTY_DVDCOPYPROT = number;
export type AM_DIGITAL_CP = number;
export type AM_DVDCOPYSTATE = number;
export type AM_COPY_MACROVISION_LEVEL = number;
export type AM_MPEG2Level = number;
export type AM_MPEG2Profile = number;
export type AM_PROPERTY_DVDKARAOKE = number;
export type AM_PROPERTY_TS_RATE_CHANGE = number;
export type AM_PROPERTY_DVD_RATE_CHANGE = number;
export type DVD_PLAY_DIRECTION = number;
export type DVD_ERROR = number;
export type DVD_WARNING = number;
export type DVD_PB_STOPPED = number;
export type SNDDEV_ERR = number;
export type MP_TYPE = number;
export type MP_CURVE_TYPE = number;
export type DXVA2_SampleFlags = number;
export type DXVA2_DestinationFlags = number;
export type AMPlayListItemFlags = number;
export type AMPlayListFlags = number;
export type AMPlayListEventFlags = number;
export type _AM_ASFWRITERCONFIG_PARAM = number;
export type _DMO_INPUT_DATA_BUFFER_FLAGS = number;
export type _DMO_OUTPUT_DATA_BUFFER_FLAGS = number;
export type _DMO_INPUT_STATUS_FLAGS = number;
export type _DMO_INPUT_STREAM_INFO_FLAGS = number;
export type _DMO_OUTPUT_STREAM_INFO_FLAGS = number;
export type _DMO_SET_TYPE_FLAGS = number;
export type _DMO_PROCESS_OUTPUT_FLAGS = number;
export type _DMO_INPLACE_PROCESS_FLAGS = number;
export type _DMO_QUALITY_STATUS_FLAGS = number;
export type _DMO_VIDEO_OUTPUT_STREAM_FLAGS = number;
export type DMO_REGISTER_FLAGS = number;
export type DMO_ENUM_FLAGS = number;
export type DISPID_TUNER = number;
export type EnTvRat_System = number;
export type EnTvRat_GenericLevel = number;
export type EnTvRat_MPAA = number;
export type EnTvRat_US_TV = number;
export type EnTvRat_CAE_TV = number;
export type EnTvRat_CAF_TV = number;
export type BfEnTvRat_GenericAttributes = number;
export type BfEnTvRat_Attributes_US_TV = number;
export type BfEnTvRat_Attributes_MPAA = number;
export type BfEnTvRat_Attributes_CAE_TV = number;
export type BfEnTvRat_Attributes_CAF_TV = number;
export type FormatNotSupportedEvents = number;
export type ProtType = number;
export type EncDecEvents = number;
export type CPRecordingStatus = number;
export type CPEventBitShift = number;
export type CPEvents = number;
export type RevokedComponent = number;
export type EnTag_Mode = number;
export type COPPEventBlockReason = number;
export type LicenseEventBlockReason = number;
export type DownResEventParam = number;
export type SegDispidList = number;
export type SegEventidList = number;
export type PositionModeList = number;
export type RecordingType = number;
export type MSVidCCService = number;
export type MSVidSinkStreams = number;
export type MSVidSegmentType = number;
export type MSVidCtlButtonstate = number;
export type DVDMenuIDConstants = number;
export type DVDFilterState = number;
export type DVDTextStringType = number;
export type DVDSPExt = number;
export type SourceSizeList = number;
export type MSViddispidList = number;
export type DisplaySizeList = number;
export type MSVidCtlStateList = number;
export type RECORDING_TYPE = number;
export type STREAMBUFFER_ATTR_DATATYPE = number;
export type CROSSBAR_DEFAULT_FLAGS = number;
export type MPEG_CURRENT_NEXT_BIT = number;
export type MPEG_CONTEXT_TYPE = number;
export type MPEG_REQUEST_TYPE = number;
export type VA_VIDEO_FORMAT = number;
export type VA_COLOR_PRIMARIES = number;
export type VA_TRANSFER_CHARACTERISTICS = number;
export type VA_MATRIX_COEFFICIENTS = number;
export type DVB_STRCONV_MODE = number;
export type CRID_LOCATION = number;
export type DESC_LINKAGE_TYPE = number;
export type ChannelChangeSpanningEvent_State = number;
export type ChannelType = number;
export type SignalAndServiceStatusSpanningEvent_State = number;
export type KSPROPERTY_BDA_ETHERNET_FILTER = number;
export type KSPROPERTY_BDA_IPv4_FILTER = number;
export type KSPROPERTY_BDA_IPv6_FILTER = number;
export type KSPROPERTY_BDA_SIGNAL_STATS = number;
export type BDA_LockType = number;
export type KSMETHOD_BDA_CHANGE_SYNC = number;
export type KSMETHOD_BDA_DEVICE_CONFIGURATION = number;
export type KSPROPERTY_BDA_TOPOLOGY = number;
export type KSPROPERTY_BDA_PIN_CONTROL = number;
export type KSPROPERTY_BDA_PIN_EVENT = number;
export type KSPROPERTY_BDA_VOID_TRANSFORM = number;
export type KSPROPERTY_BDA_NULL_TRANSFORM = number;
export type KSPROPERTY_BDA_FREQUENCY_FILTER = number;
export type BDA_SignalType = number;
export type BDA_DigitalSignalStandard = number;
export type KSEVENT_BDA_TUNER = number;
export type KSPROPERTY_BDA_LNB_INFO = number;
export type KSPROPERTY_BDA_DISEQC_COMMAND = number;
export type KSPROPERTY_BDA_DISEQC_EVENT = number;
export type KSPROPERTY_BDA_DIGITAL_DEMODULATOR = number;
export type KSPROPERTY_BDA_AUTODEMODULATE = number;
export type KSPROPERTY_IDS_BDA_TABLE = number;
export type KSPROPERTY_BDA_PIDFILTER = number;
export type KSPROPERTY_BDA_CA = number;
export type KSPROPERTY_BDA_CA_EVENT = number;
export type KSMETHOD_BDA_DRM = number;
export type KSMETHOD_BDA_WMDRM = number;
export type KSMETHOD_BDA_WMDRM_TUNER = number;
export type KSMETHOD_BDA_EVENTING_SERVICE = number;
export type KSEVENT_BDA_EVENT_TYPE = number;
export type KSMETHOD_BDA_DEBUG_SERVICE = number;
export type KSMETHOD_BDA_TUNER_SERVICE = number;
export type KSMETHOD_BDA_GPNV_SERVICE = number;
export type KSMETHOD_BDA_MUX_SERVICE = number;
export type KSMETHOD_BDA_SCAN_SERVICE = number;
export type KSMETHOD_BDA_GDDS_SERVICE = number;
export type KSMETHOD_BDA_CAS_SERVICE = number;
export type KSMETHOD_BDA_ISDB_CAS = number;
export type KSMETHOD_BDA_TS_SELECTOR = number;
export type KSMETHOD_BDA_USERACTIVITY_SERVICE = number;
export type USER_INPUT_STRING_TYPE = number;
export type ERROR_ADVISE_MESSAGE_TYPE = number;
export type ERROR_ADVISE_RESULT = number;
export type PROGRESS_DIALOG_IMAGE_TYPE = number;
export type PROGRESS_DIALOG_CHECKBOX_ID = number;
export type DEVICE_SELECTION_DEVICE_TYPE = number;
export type SPDATAKEYLOCATION = number;
export type SPSTREAMFORMAT = number;
export type SPEVENTLPARAMTYPE = number;
export type SPEVENTENUM = number;
export type SPINTERFERENCE = number;
export type SPENDSRSTREAMFLAGS = number;
export type SPVFEATURE = number;
export type SPVISEMES = number;
export type SPFILEMODE = number;
export type SPAUDIOSTATE = number;
export type SPDISPLAYATTRIBUTES = number;
export type SPPHRASEPROPERTYUNIONTYPE = number;
export type SPSEMANTICFORMAT = number;
export type SPVALUETYPE = number;
export type SPPHRASERNG = number;
export type SPRECOEVENTFLAGS = number;
export type SPPARTOFSPEECH = number;
export type SPLEXICONTYPE = number;
export type SPWORDTYPE = number;
export type SPPRONUNCIATIONFLAGS = number;
export type SPSHORTCUTTYPE = number;
export type SPVACTIONS = number;
export type SPRUNSTATE = number;
export type SPVLIMITS = number;
export type SPVPRIORITY = number;
export type SPEAKFLAGS = number;
export type SPXMLRESULTOPTIONS = number;
export type SPCOMMITFLAGS = number;
export type SPWORDPRONOUNCEABLE = number;
export type SPGRAMMARSTATE = number;
export type SPCONTEXTSTATE = number;
export type SPRULESTATE = number;
export type SPGRAMMARWORDTYPE = number;
export type SPCFGRULEATTRIBUTES = number;
export type SPLOADOPTIONS = number;
export type SPMATCHINGMODE = number;
export type PHONETICALPHABET = number;
export type SPBOOKMARKOPTIONS = number;
export type SPAUDIOOPTIONS = number;
export type SPGRAMMAROPTIONS = number;
export type SPADAPTATIONSETTINGS = number;
export type SPADAPTATIONRELEVANCE = number;
export type SPSTREAMFORMATTYPE = number;
export type SPRECOSTATE = number;
export type DISPID_SpeechDataKey = number;
export type DISPID_SpeechObjectToken = number;
export type SpeechDataKeyLocation = number;
export type SpeechTokenContext = number;
export type SpeechTokenShellFolder = number;
export type DISPID_SpeechObjectTokens = number;
export type DISPID_SpeechObjectTokenCategory = number;
export type SpeechAudioFormatType = number;
export type DISPID_SpeechAudioFormat = number;
export type DISPID_SpeechBaseStream = number;
export type SpeechStreamSeekPositionType = number;
export type DISPID_SpeechAudio = number;
export type SpeechAudioState = number;
export type DISPID_SpeechMMSysAudio = number;
export type DISPID_SpeechFileStream = number;
export type SpeechStreamFileMode = number;
export type DISPID_SpeechCustomStream = number;
export type DISPID_SpeechMemoryStream = number;
export type DISPID_SpeechAudioStatus = number;
export type DISPID_SpeechAudioBufferInfo = number;
export type DISPID_SpeechWaveFormatEx = number;
export type DISPID_SpeechVoice = number;
export type SpeechVoicePriority = number;
export type SpeechVoiceSpeakFlags = number;
export type SpeechVoiceEvents = number;
export type DISPID_SpeechVoiceStatus = number;
export type SpeechRunState = number;
export type SpeechVisemeType = number;
export type SpeechVisemeFeature = number;
export type DISPID_SpeechVoiceEvent = number;
export type DISPID_SpeechRecognizer = number;
export type SpeechRecognizerState = number;
export type SpeechDisplayAttributes = number;
export type SpeechFormatType = number;
export type SpeechEmulationCompareFlags = number;
export type DISPID_SpeechRecognizerStatus = number;
export type DISPID_SpeechRecoContext = number;
export type SpeechRetainedAudioOptions = number;
export type SpeechBookmarkOptions = number;
export type SpeechInterference = number;
export type SpeechRecoEvents = number;
export type SpeechRecoContextState = number;
export type DISPIDSPRG = number;
export type SpeechLoadOption = number;
export type SpeechWordPronounceable = number;
export type SpeechGrammarState = number;
export type SpeechRuleState = number;
export type SpeechRuleAttributes = number;
export type SpeechGrammarWordType = number;
export type DISPID_SpeechRecoContextEvents = number;
export type SpeechRecognitionType = number;
export type DISPID_SpeechGrammarRule = number;
export type DISPID_SpeechGrammarRules = number;
export type DISPID_SpeechGrammarRuleState = number;
export type SpeechSpecialTransitionType = number;
export type DISPID_SpeechGrammarRuleStateTransitions = number;
export type DISPID_SpeechGrammarRuleStateTransition = number;
export type SpeechGrammarRuleStateTransitionType = number;
export type DISPIDSPTSI = number;
export type DISPID_SpeechRecoResult = number;
export type SpeechDiscardType = number;
export type DISPID_SpeechXMLRecoResult = number;
export type DISPID_SpeechRecoResult2 = number;
export type DISPID_SpeechPhraseBuilder = number;
export type DISPID_SpeechRecoResultTimes = number;
export type DISPID_SpeechPhraseAlternate = number;
export type DISPID_SpeechPhraseAlternates = number;
export type DISPID_SpeechPhraseInfo = number;
export type DISPID_SpeechPhraseElement = number;
export type SpeechEngineConfidence = number;
export type DISPID_SpeechPhraseElements = number;
export type DISPID_SpeechPhraseReplacement = number;
export type DISPID_SpeechPhraseReplacements = number;
export type DISPID_SpeechPhraseProperty = number;
export type DISPID_SpeechPhraseProperties = number;
export type DISPID_SpeechPhraseRule = number;
export type DISPID_SpeechPhraseRules = number;
export type DISPID_SpeechLexicon = number;
export type SpeechLexiconType = number;
export type SpeechPartOfSpeech = number;
export type DISPID_SpeechLexiconWords = number;
export type SpeechWordType = number;
export type DISPID_SpeechLexiconWord = number;
export type DISPID_SpeechLexiconProns = number;
export type DISPID_SpeechLexiconPronunciation = number;
export type DISPID_SpeechPhoneConverter = number;
export type WMDM_TAG_DATATYPE = number;
export type WMDM_SESSION_TYPE = number;
export type WMDM_STORAGE_ENUM_MODE = number;
export type WMDM_FORMATCODE = number;
export type WMDM_ENUM_PROP_VALID_VALUES_FORM = number;
export type WMDM_FIND_SCOPE = number;
export type WMDMMessage = number;
export type WEBSTREAM_SAMPLE_TYPE = number;
export type WM_SF_TYPE = number;
export type WM_SFEX_TYPE = number;
export type WMT_STATUS = number;
export type WMT_STREAM_SELECTION = number;
export type WMT_IMAGE_TYPE = number;
export type WMT_ATTR_DATATYPE = number;
export type WMT_ATTR_IMAGETYPE = number;
export type WMT_VERSION = number;
export type WMT_STORAGE_FORMAT = number;
export type WMT_DRMLA_TRUST = number;
export type WMT_TRANSPORT_TYPE = number;
export type WMT_NET_PROTOCOL = number;
export type WMT_PLAY_MODE = number;
export type WMT_PROXY_SETTINGS = number;
export type WMT_CODEC_INFO_TYPE = number;
export type WM_DM_INTERLACED_TYPE = number;
export type WM_DM_IT_FIRST_FRAME_COHERENCY = number;
export type WMT_OFFSET_FORMAT = number;
export type WMT_INDEXER_TYPE = number;
export type WMT_INDEX_TYPE = number;
export type WMT_FILESINK_MODE = number;
export type WMT_MUSICSPEECH_CLASS_MODE = number;
export type WMT_WATERMARK_ENTRY_TYPE = number;
export type WM_PLAYBACK_DRC_LEVEL = number;
export type WMT_TIMECODE_FRAMERATE = number;
export type WMT_CREDENTIAL_FLAGS = number;
export type WM_AETYPE = number;
export type WMT_RIGHTS = number;
export type NETSOURCE_URLCREDPOLICY_SETTINGS = number;
export type WindowsMediaLibrarySharingDeviceAuthorizationStatus = number;
export type WMPOpenState = number;
export type WMPPlayState = number;
export type WMPPlaylistChangeEventType = number;
export type WMPSyncState = number;
export type WMPDeviceStatus = number;
export type WMPRipState = number;
export type WMPBurnFormat = number;
export type WMPBurnState = number;
export type WMPStringCollectionChangeEventType = number;
export type WMPLibraryType = number;
export type WMPFolderScanState = number;
export type WMPServices_StreamState = number;
export type WMPPlugin_Caps = number;
export type FEEDS_BACKGROUNDSYNC_ACTION = number;
export type FEEDS_BACKGROUNDSYNC_STATUS = number;
export type FEEDS_EVENTS_SCOPE = number;
export type FEEDS_EVENTS_MASK = number;
export type FEEDS_XML_SORT_PROPERTY = number;
export type FEEDS_XML_SORT_ORDER = number;
export type FEEDS_XML_FILTER_FLAGS = number;
export type FEEDS_XML_INCLUDE_FLAGS = number;
export type FEEDS_DOWNLOAD_STATUS = number;
export type FEEDS_SYNC_SETTING = number;
export type FEEDS_DOWNLOAD_ERROR = number;
export type FEEDS_EVENTS_ITEM_COUNT_FLAGS = number;
export type FEEDS_ERROR_CODE = number;
export type PlayerState = number;
export type WMPPartnerNotification = number;
export type WMPCallbackNotification = number;
export type WMPTaskType = number;
export type WMPTransactionType = number;
export type WMPTemplateSize = number;
export type WMPStreamingType = number;
export type WMPAccountType = number;
export type WMPSubscriptionServiceEvent = number;
export type WMPSubscriptionDownloadState = number;
export type XAPO_BUFFER_FLAGS = number;
export type XAUDIO2_FILTER_TYPE = number;
export type HrtfDirectivityType = number;
export type HrtfEnvironment = number;
export type HrtfDistanceDecayType = number;
export type AUDCLNT_SHAREMODE = number;
export type AUDIO_STREAM_CATEGORY = number;
export type AudioSessionState = number;
export type _AUDCLNT_BUFFERFLAGS = number;
export type AUDCLNT_STREAMOPTIONS = number;
export type AUDIO_DUCKING_OPTIONS = number;
export type AUDIO_EFFECT_STATE = number;
export type AMBISONICS_TYPE = number;
export type AMBISONICS_CHANNEL_ORDERING = number;
export type AMBISONICS_NORMALIZATION = number;
export type AudioObjectType = number;
export type SPATIAL_AUDIO_STREAM_OPTIONS = number;
export type SpatialAudioHrtfDirectivityType = number;
export type SpatialAudioHrtfEnvironmentType = number;
export type SpatialAudioHrtfDistanceDecayType = number;
export type EDataFlow = number;
export type ERole = number;
export type EndpointFormFactor = number;
export type DataFlow = number;
export type PartType = number;
export type ConnectorType = number;
export type AudioSessionDisconnectReason = number;
export type SpatialAudioMetadataWriterOverflowMode = number;
export type SpatialAudioMetadataCopyMode = number;
export type PROCESS_LOOPBACK_MODE = number;
export type AUDIOCLIENT_ACTIVATION_TYPE = number;
export type AudioStateMonitorSoundLevel = number;
export type KSRESET = number;
export type KSSTATE = number;
export type KSPROPERTY_GENERAL = number;
export type KSMETHOD_STREAMIO = number;
export type KSPROPERTY_MEDIASEEKING = number;
export type KS_SEEKING_FLAGS = number;
export type KS_SEEKING_CAPABILITIES = number;
export type KSPROPERTY_TOPOLOGY = number;
export type KSINTERFACE_STANDARD = number;
export type KSINTERFACE_FILEIO = number;
export type KSPROPERTY_PIN = number;
export type KSPIN_DATAFLOW = number;
export type KSPIN_COMMUNICATION = number;
export type KSEVENT_PINCAPS_CHANGENOTIFICATIONS = number;
export type KSEVENT_VOLUMELIMIT = number;
export type KSPROPERTY_QUALITY = number;
export type KSPROPERTY_CONNECTION = number;
export type KSEVENT_STREAMALLOCATOR = number;
export type KSMETHOD_STREAMALLOCATOR = number;
export type KSPIN_MDL_CACHING_EVENT = number;
export type KSPROPERTY_STREAMINTERFACE = number;
export type KSPROPERTY_STREAM = number;
export type KSPPROPERTY_ALLOCATOR_MDLCACHING = number;
export type KSPROPERTY_CLOCK = number;
export type KSEVENT_CLOCK_POSITION = number;
export type KSEVENT_CONNECTION = number;
export type KSDEVICE_THERMAL_STATE = number;
export type KSEVENT_DEVICE = number;
export type KSDEGRADE_STANDARD = number;
export type KSINTERFACE_MEDIA = number;
export type CONSTRICTOR_OPTION = number;
export type KSMICARRAY_MICTYPE = number;
export type KSMICARRAY_MICARRAYTYPE = number;
export type KSPROPERTY_DIRECTSOUND3DLISTENER = number;
export type KSPROPERTY_DIRECTSOUND3DBUFFER = number;
export type KSDS3D_HRTF_FILTER_QUALITY = number;
export type KSDS3D_HRTF_COEFF_FORMAT = number;
export type KSDS3D_HRTF_FILTER_METHOD = number;
export type KSDS3D_HRTF_FILTER_VERSION = number;
export type KSPROPERTY_HRTF3D = number;
export type KSPROPERTY_ITD3D = number;
export type KSPROPERTY_BIBLIOGRAPHIC = number;
export type KSPROPERTY_TOPOLOGYNODE = number;
export type KSPROPERTY_RTAUDIO = number;
export type KSPROPERTY_BTAUDIO = number;
export type KSPROPERTY_DRMAUDIOSTREAM = number;
export type KSPROPERTY_INTERLEAVEDAUDIO = number;
export type KSPROPERTY_SOUNDDETECTOR = number;
export type KSEVENT_SOUNDDETECTOR = number;
export type KSPROPERTY_AUDIO = number;
export type KSPROPERTY_TELEPHONY_CONTROL = number;
export type TELEPHONY_CALLTYPE = number;
export type TELEPHONY_CALLCONTROLOP = number;
export type TELEPHONY_PROVIDERCHANGEOP = number;
export type TELEPHONY_CALLSTATE = number;
export type KSPROPERTY_TELEPHONY_TOPOLOGY = number;
export type KSPROPERTY_FMRX_TOPOLOGY = number;
export type KSPROPERTY_FMRX_CONTROL = number;
export type KSEVENT_TELEPHONY = number;
export type KSMETHOD_WAVETABLE = number;
export type KSPROPERTY_WAVE = number;
export type KSPROPERTY_CYCLIC = number;
export type KSEVENT_AUDIO_CONTROL_CHANGE = number;
export type KSEVENT_LOOPEDSTREAMING = number;
export type KSPROPERTY_MPEG2VID = number;
export type KSPROPERTY_AC3 = number;
export type KSPROPERTY_AUDDECOUT = number;
export type KSPROPERTY_DVDSUBPIC = number;
export type KSPROPERTY_COPYPROT = number;
export type KS_DVDCOPYSTATE = number;
export type KS_COPY_MACROVISION_LEVEL = number;
export type KS_MPEG2Level = number;
export type KS_MPEG2Profile = number;
export type KSPROPERTY_VBICAP = number;
export type KSPROPERTY_VBICODECFILTERING = number;
export type CAPTURE_MEMORY_ALLOCATION_FLAGS = number;
export type KSPROPERTY_VIDMEM_TRANSPORT = number;
export type KSPROPERTY_MPEG4_MEDIATYPE_ATTRIBUTES = number;
export type KSEVENT_DYNAMICFORMATCHANGE = number;
export type KS_AnalogVideoStandard = number;
export type KSPROPERTY_ALLOCATOR_CONTROL = number;
export type KSPROPERTY_VIDCAP_VIDEOPROCAMP = number;
export type KSPROPERTY_VIDCAP_SELECTOR = number;
export type KSPROPERTY_TUNER = number;
export type KSPROPERTY_TUNER_MODES = number;
export type KS_TUNER_TUNING_FLAGS = number;
export type KS_TUNER_STRATEGY = number;
export type TunerLockType = number;
export type KSEVENT_TUNER = number;
export type KSPROPERTY_VIDCAP_VIDEOENCODER = number;
export type KSPROPERTY_VIDCAP_VIDEODECODER = number;
export type KS_VIDEODECODER_FLAGS = number;
export type KSEVENT_VIDEODECODER = number;
export type KSEVENT_CAMERACONTROL = number;
export type KSPROPERTY_VIDCAP_CAMERACONTROL = number;
export type KS_CameraControlAsyncOperation = number;
export type KSPROPERTY_CAMERACONTROL_FLASH = number;
export type KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE = number;
export type KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST = number;
export type KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY = number;
export type KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY = number;
export type KSEVENT_CAMERAEVENT = number;
export type KSCAMERA_EXTENDEDPROP_WHITEBALANCE_MODE = number;
export type KSCAMERA_EXTENDEDPROP_WBPRESET = number;
export type KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_FLAGS = number;
export type KSCAMERA_EXTENDEDPROP_MetadataAlignment = number;
export type KSCAMERA_MetadataId = number;
export type KSCAMERA_EXTENDEDPROP_FOCUSSTATE = number;
export type KSCAMERA_EXTENDEDPROP_ROITYPE = number;
export type KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY = number;
export type KSCAMERA_PERFRAMESETTING_ITEM_TYPE = number;
export type KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE = number;
export type KSPROPERTY_NETWORKCAMERACONTROL_PROPERTY = number;
export type KSPROPERTY_NETWORKCAMERACONTROL_METADATA_TYPE = number;
export type KSPROPERTY_EXTDEVICE = number;
export type KSPROPERTY_EXTXPORT = number;
export type KSPROPERTY_TIMECODE = number;
export type KSEVENT_DEVCMD = number;
export type KSPROPERTY_VIDCAP_CROSSBAR = number;
export type KSEVENT_CROSSBAR = number;
export type KS_PhysicalConnectorType = number;
export type KSPROPERTY_VIDCAP_TVAUDIO = number;
export type KSEVENT_TVAUDIO = number;
export type KSPROPERTY_VIDCAP_VIDEOCOMPRESSION = number;
export type KS_CompressionCaps = number;
export type KS_VideoStreamingHints = number;
export type KSPROPERTY_OVERLAYUPDATE = number;
export type KSPROPERTY_VIDCAP_VIDEOCONTROL = number;
export type KS_VideoControlFlags = number;
export type KSPROPERTY_VIDCAP_DROPPEDFRAMES = number;
export type KSPROPERTY_VPCONFIG = number;
export type KS_AMPixAspectRatio = number;
export type KS_AMVP_SELECTFORMATBY = number;
export type KS_AMVP_MODE = number;
export type KSEVENT_VPNOTIFY = number;
export type KSEVENT_VIDCAPTOSTI = number;
export type KSPROPERTY_EXTENSION_UNIT = number;
export type KSEVENT_VPVBINOTIFY = number;
export type KS_AM_PROPERTY_TS_RATE_CHANGE = number;
export type KSPROPERTY_JACK = number;
export type EPcxConnectionType = number;
export type EPcxGeoLocation = number;
export type EPcxGenLocation = number;
export type EPxcPortConnection = number;
export type KSJACK_SINK_CONNECTIONTYPE = number;
export type KSPROPERTY_AUDIOPOSTURE = number;
export type AUDIOPOSTURE_ORIENTATION = number;
export type KSPROPERTY_AUDIOENGINE = number;
export type AUDIO_CURVE_TYPE = number;
export type KSPROPERTY_AUDIOSIGNALPROCESSING = number;
export type KSPROPERTY_AUDIORESOURCEMANAGEMENT = number;
export type KSPROPERTY_AUDIOMODULE = number;
export type KSALLOCATORMODE = number;
export type FRAMING_PROP = number;
export type FRAMING_CACHE_OPS = number;
export type PIPE_STATE = number;
export type PIPE_ALLOCATOR_PLACE = number;
export type KS_LogicalMemoryType = number;
export type VIDEOENCODER_BITRATE_MODE = number;
export type D3D12_VIDEO_FIELD_TYPE = number;
export type D3D12_VIDEO_FRAME_STEREO_FORMAT = number;
export type DXGI_FORMAT = number;
export type DXGI_COLOR_SPACE_TYPE = number;
export type D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE = number;
export type D3D12_FEATURE_VIDEO = number;
export type D3D12_BITSTREAM_ENCRYPTION_TYPE = number;
export type D3D12_VIDEO_PROCESS_FILTER = number;
export type D3D12_VIDEO_PROCESS_FILTER_FLAGS = number;
export type D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS = number;
export type D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE = number;
export type D3D12_VIDEO_DECODE_TIER = number;
export type D3D12_VIDEO_DECODE_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = number;
export type D3D12_VIDEO_DECODE_STATUS = number;
export type D3D12_VIDEO_DECODE_ARGUMENT_TYPE = number;
export type D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = number;
export type D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = number;
export type D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_SCALE_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_PROCESS_FEATURE_FLAGS = number;
export type D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = number;
export type D3D12_VIDEO_PROCESS_ORIENTATION = number;
export type D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS = number;
export type D3D12_VIDEO_PROCESS_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE = number;
export type D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS = number;
export type D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION = number;
export type D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS = number;
export type D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = number;
export type D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = number;
export type D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS = number;
export type D3D12_COMMAND_LIST_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE = number;
export type D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC = number;
export type D3D12_VIDEO_ENCODER_PROFILE_H264 = number;
export type D3D12_VIDEO_ENCODER_PROFILE_HEVC = number;
export type D3D12_VIDEO_ENCODER_LEVELS_H264 = number;
export type D3D12_VIDEO_ENCODER_TIER_HEVC = number;
export type D3D12_VIDEO_ENCODER_LEVELS_HEVC = number;
export type D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE = number;
export type D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = number;
export type D3D12_VIDEO_ENCODER_HEAP_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE = number;
export type D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = number;
export type D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE = number;
export type D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = number;
export type D3D12_VIDEO_ENCODER_FLAGS = number;
export type D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 = number;
export type D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS = number;
export type D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC = number;
export type D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS = number;
export type D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS = number;
export type D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = number;
export type D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = number;
export type WMT_PROP_DATATYPE = number;
export type WMV_DYNAMIC_FLAGS = number;
export type MF_AUVRHP_ROOMMODEL = number;
export type AEC_SYSTEM_MODE = number;
export type AEC_VAD_MODE = number;
export type AEC_INPUT_STREAM = number;
export type MIC_ARRAY_MODE = number;
export type MFVideoDSPMode = number;
export type TOC_POS_TYPE = number;
export type FILE_OPENMODE = number;
export type SEEK_ORIGIN = number;
export type FILE_ACCESSMODE = number;
export type DXVA_SampleFormat = number;
export type DXVA_VideoTransferFunction = number;
export type DXVA_VideoPrimaries = number;
export type DXVA_VideoLighting = number;
export type DXVA_VideoTransferMatrix = number;
export type DXVA_NominalRange = number;
export type DXVA_VideoChromaSubsampling = number;
export type DXVA_VideoProcessCaps = number;
export type DXVA_DeinterlaceTech = number;
export type DXVA_SampleFlags = number;
export type DXVA_DestinationFlags = number;
export type DXVA_ProcAmpControlProp = number;
export type eAVEncCommonRateControlMode = number;
export type eAVEncCommonStreamEndHandling = number;
export type eAVEncVideoOutputFrameRateConversion = number;
export type eAVDecVideoSoftwareDeinterlaceMode = number;
export type eAVFastDecodeMode = number;
export type eAVDecVideoH264ErrorConcealment = number;
export type eAVDecVideoMPEG2ErrorConcealment = number;
export type eAVDecVideoCodecType = number;
export type eAVDecVideoDXVAMode = number;
export type eAVDecVideoDXVABusEncryption = number;
export type eAVEncVideoSourceScanType = number;
export type eAVEncVideoOutputScanType = number;
export type eAVEncVideoFilmContent = number;
export type eAVEncVideoChromaResolution = number;
export type eAVEncVideoChromaSubsampling = number;
export type eAVEncVideoColorPrimaries = number;
export type eAVEncVideoColorTransferFunction = number;
export type eAVEncVideoColorTransferMatrix = number;
export type eAVEncVideoColorLighting = number;
export type eAVEncVideoColorNominalRange = number;
export type eAVEncInputVideoSystem = number;
export type eAVEncVideoContentType = number;
export type eAVEncAdaptiveMode = number;
export type eAVScenarioInfo = number;
export type eVideoEncoderDisplayContentType = number;
export type eAVEncMuxOutput = number;
export type eAVEncAudioDualMono = number;
export type eAVEncAudioInputContent = number;
export type eAVEncMPVProfile = number;
export type eAVEncMPVLevel = number;
export type eAVEncH263VProfile = number;
export type eAVEncH264VProfile = number;
export type eAVEncH265VProfile = number;
export type eAVEncVP9VProfile = number;
export type eAVEncH263PictureType = number;
export type eAVEncH264PictureType = number;
export type eAVEncH263VLevel = number;
export type eAVEncH264VLevel = number;
export type eAVEncH265VLevel = number;
export type eAVEncMPVFrameFieldMode = number;
export type eAVEncMPVSceneDetection = number;
export type eAVEncMPVScanPattern = number;
export type eAVEncMPVQScaleType = number;
export type eAVEncMPVIntraVLCTable = number;
export type eAVEncMPALayer = number;
export type eAVEncMPACodingMode = number;
export type eAVEncMPAEmphasisType = number;
export type eAVEncDDService = number;
export type eAVEncDDProductionRoomType = number;
export type eAVEncDDDynamicRangeCompressionControl = number;
export type eAVEncDDSurroundExMode = number;
export type eAVEncDDPreferredStereoDownMixMode = number;
export type eAVEncDDAtoDConverterType = number;
export type eAVEncDDHeadphoneMode = number;
export type eAVDecVideoInputScanType = number;
export type eAVDecVideoSWPowerLevel = number;
export type eAVDecAACDownmixMode = number;
export type eAVDecHEAACDynamicRangeControl = number;
export type eAVDecAudioDualMono = number;
export type eAVDecAudioDualMonoReproMode = number;
export type eAVAudioChannelConfig = number;
export type eAVDDSurroundMode = number;
export type eAVDecDDOperationalMode = number;
export type eAVDecDDMatrixDecodingMode = number;
export type eAVDecDDStereoDownMixMode = number;
export type eAVDSPLoudnessEqualization = number;
export type eAVDSPSpeakerFill = number;
export type eAVEncChromaEncodeMode = number;
export type DXVAHD_FRAME_FORMAT = number;
export type DXVAHD_DEVICE_USAGE = number;
export type DXVAHD_SURFACE_TYPE = number;
export type DXVAHD_DEVICE_TYPE = number;
export type DXVAHD_DEVICE_CAPS = number;
export type DXVAHD_FEATURE_CAPS = number;
export type DXVAHD_FILTER_CAPS = number;
export type DXVAHD_INPUT_FORMAT_CAPS = number;
export type DXVAHD_PROCESSOR_CAPS = number;
export type DXVAHD_ITELECINE_CAPS = number;
export type DXVAHD_FILTER = number;
export type DXVAHD_BLT_STATE = number;
export type DXVAHD_ALPHA_FILL_MODE = number;
export type DXVAHD_STREAM_STATE = number;
export type DXVAHD_OUTPUT_RATE = number;
export type DXVA2_SampleFormat = number;
export type DXVA2_VideoChromaSubSampling = number;
export type DXVA2_NominalRange = number;
export type DXVA2_VideoTransferMatrix = number;
export type DXVA2_VideoLighting = number;
export type DXVA2_VideoPrimaries = number;
export type DXVA2_VideoTransferFunction = number;
export type DXVA2_DeinterlaceTech = number;
export type DXVA2_FilterType = number;
export type DXVA2_NoiseFilterTech = number;
export type DXVA2_DetailFilterTech = number;
export type DXVA2_ProcAmp = number;
export type DXVA2_VideoProcess = number;
export type DXVA2_VPDev = number;
export type DXVA2_SampleData = number;
export type DXVA2_DestData = number;
export type DXVA2_BufferfType = number;
export type DXVA2_VideoRenderTargetType = number;
export type DXVA2_SurfaceType = number;
export type OPM_TYPE = number;
export type OPM_VIDEO_OUTPUT_SEMANTICS = number;
export type OPM_HDCP_FLAGS = number;
export type OPM_STATUS = number;
export type OPM_CONNECTOR_TYPE = number;
export type OPM_DVI_CHARACTERISTIC = number;
export type OPM_OUTPUT_HARDWARE_PROTECTION = number;
export type OPM_BUS_TYPE = number;
export type OPM_DPCP_PROTECTION_LEVEL = number;
export type OPM_HDCP_PROTECTION_LEVEL = number;
export type OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL = number;
export type OPM_CGMSA = number;
export type OPM_ACP_PROTECTION_LEVEL = number;
export type OPM_PROTECTION_TYPE = number;
export type OPM_PROTECTION_STANDARD_TYPE = number;
export type OPM_IMAGE_ASPECT_RATIO_EN300294 = number;
export type KSMETHOD_OPMVIDEOOUTPUT = number;
export type MF_ATTRIBUTE_TYPE = number;
export type MF_ATTRIBUTES_MATCH_TYPE = number;
export type MF_ATTRIBUTE_SERIALIZE_OPTIONS = number;
export type MF2DBuffer_LockFlags = number;
export type MFVideoInterlaceMode = number;
export type MFVideoTransferFunction = number;
export type MFVideoPrimaries = number;
export type MFVideoLighting = number;
export type MFVideoTransferMatrix = number;
export type MFVideoChromaSubsampling = number;
export type MFNominalRange = number;
export type MFVideoFlags = number;
export type MFStandardVideoFormat = number;
export type MF_EVENT_TYPE = number;
export type MFBYTESTREAM_SEEK_ORIGIN = number;
export type MF_FILE_ACCESSMODE = number;
export type MF_FILE_OPENMODE = number;
export type MF_FILE_FLAGS = number;
export type MF_PLUGIN_CONTROL_POLICY = number;
export type MF_STREAM_STATE = number;
export type _MFT_INPUT_DATA_BUFFER_FLAGS = number;
export type _MFT_OUTPUT_DATA_BUFFER_FLAGS = number;
export type _MFT_INPUT_STATUS_FLAGS = number;
export type _MFT_OUTPUT_STATUS_FLAGS = number;
export type _MFT_INPUT_STREAM_INFO_FLAGS = number;
export type _MFT_OUTPUT_STREAM_INFO_FLAGS = number;
export type _MFT_SET_TYPE_FLAGS = number;
export type _MFT_PROCESS_OUTPUT_FLAGS = number;
export type _MFT_PROCESS_OUTPUT_STATUS = number;
export type MFT_DRAIN_TYPE = number;
export type MFT_MESSAGE_TYPE = number;
export type DeviceStreamState = number;
export type MF3DVideoOutputType = number;
export type MFT_AUDIO_DECODER_DEGRADATION_REASON = number;
export type MFT_AUDIO_DECODER_DEGRADATION_TYPE = number;
export type MFSESSION_SETTOPOLOGY_FLAGS = number;
export type MFSESSION_GETFULLTOPOLOGY_FLAGS = number;
export type MFPMPSESSION_CREATION_FLAGS = number;
export type MF_OBJECT_TYPE = number;
export type MF_RESOLUTION_FLAGS = number;
export type MF_CONNECT_METHOD = number;
export type MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS = number;
export type MFMEDIASOURCE_CHARACTERISTICS = number;
export type MFSTREAMSINK_MARKER_TYPE = number;
export type MF_VIDEO_PROCESSOR_ROTATION = number;
export type MF_VIDEO_PROCESSOR_MIRROR = number;
export type MFVideoSphericalFormat = number;
export type MFVideoSphericalProjectionMode = number;
export type MFTOPOLOGY_DXVA_MODE = number;
export type MFTOPOLOGY_HARDWARE_MODE = number;
export type MF_TOPOLOGY_TYPE = number;
export type MF_TOPONODE_FLUSH_MODE = number;
export type MF_TOPONODE_DRAIN_MODE = number;
export type MFCLOCK_CHARACTERISTICS_FLAGS = number;
export type MFCLOCK_STATE = number;
export type MFCLOCK_RELATIONAL_FLAGS = number;
export type MFTIMER_FLAGS = number;
export type MF_ACTIVATE_CUSTOM_MIXER = number;
export type MF_ACTIVATE_CUSTOM_PRESENTER = number;
export type MFSHUTDOWN_STATUS = number;
export type MF_URL_TRUST_STATUS = number;
export type MFRATE_DIRECTION = number;
export type MF_QUALITY_DROP_MODE = number;
export type MF_QUALITY_LEVEL = number;
export type MF_QUALITY_ADVISE_FLAGS = number;
export type MFSequencerTopologyFlags = number;
export type MFNetCredentialRequirements = number;
export type MFNetCredentialOptions = number;
export type MFNetAuthenticationFlags = number;
export type MFNETSOURCE_PROTOCOL_TYPE = number;
export type MFNETSOURCE_TRANSPORT_TYPE = number;
export type MFNETSOURCE_CACHE_STATE = number;
export type MFNETSOURCE_STATISTICS_IDS = number;
export type MFNET_PROXYSETTINGS = number;
export type MFPOLICYMANAGER_ACTION = number;
export type MF_OPM_CGMSA_PROTECTION_LEVEL = number;
export type MF_OPM_ACP_PROTECTION_LEVEL = number;
export type MFAudioConstriction = number;
export type SAMPLE_PROTECTION_VERSION = number;
export type MF_TRANSCODE_TOPOLOGYMODE_FLAGS = number;
export type MF_TRANSCODE_ADJUST_PROFILE_FLAGS = number;
export type MF_VIDEO_PROCESSOR_ALGORITHM_TYPE = number;
export type MF_MEDIAKEYSESSION_TYPE = number;
export type MF_MEDIAKEY_STATUS = number;
export type MF_MEDIAKEYSESSION_MESSAGETYPE = number;
export type MF_CROSS_ORIGIN_POLICY = number;
export type MFSensorDeviceType = number;
export type MFSensorStreamType = number;
export type MFSensorDeviceMode = number;
export type MFCameraIntrinsic_DistortionModelType = number;
export type MFCameraOcclusionState = number;
export type MFSampleAllocatorUsage = number;
export type MFASF_INDEXER_FLAGS = number;
export type MFASF_SPLITTERFLAGS = number;
export type ASF_STATUSFLAGS = number;
export type MFASF_MULTIPLEXERFLAGS = number;
export type MFASF_STREAMSELECTOR_FLAGS = number;
export type ASF_SELECTION_STATUS = number;
export type MFSINK_WMDRMACTION = number;
export type MF_CAPTURE_ENGINE_DEVICE_TYPE = number;
export type MF_CAPTURE_ENGINE_SINK_TYPE = number;
export type MF_CAPTURE_ENGINE_SOURCE = number;
export type MF_CAPTURE_ENGINE_STREAM_CATEGORY = number;
export type MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = number;
export type MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE = number;
export type MF_MT_D3D_RESOURCE_VERSION_ENUM = number;
export type MFASYNC_WORKQUEUE_TYPE = number;
export type MF_TOPOSTATUS = number;
export type MFSampleEncryptionProtectionScheme = number;
export type MFT_ENUM_FLAG = number;
export type MFFrameSourceTypes = number;
export type MFVideo3DFormat = number;
export type MFVideo3DSampleFormat = number;
export type MFVideoRotationFormat = number;
export type MFDepthMeasurement = number;
export type MF_CUSTOM_DECODE_UNIT_TYPE = number;
export type MFVideoDRMFlags = number;
export type MFVideoPadFlags = number;
export type MFVideoSrcContentHintFlags = number;
export type MFWaveFormatExConvertFlags = number;
export type EAllocationType = number;
export type MF_MEDIA_ENGINE_ERR = number;
export type MF_MEDIA_ENGINE_EVENT = number;
export type MF_MEDIA_ENGINE_NETWORK = number;
export type MF_MEDIA_ENGINE_READY = number;
export type MF_MEDIA_ENGINE_CANPLAY = number;
export type MF_MEDIA_ENGINE_PRELOAD = number;
export type MF_MEDIA_ENGINE_S3D_PACKING_MODE = number;
export type MF_MEDIA_ENGINE_STATISTIC = number;
export type MF_MEDIA_ENGINE_SEEK_MODE = number;
export type MF_MEDIA_ENGINE_EXTENSION_TYPE = number;
export type MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS = number;
export type MF_MSE_VP9_SUPPORT_TYPE = number;
export type MF_MSE_OPUS_SUPPORT_TYPE = number;
export type MF_MSE_APPEND_MODE = number;
export type MF_MSE_READY = number;
export type MF_MSE_ERROR = number;
export type MF_MEDIA_ENGINE_KEYERR = number;
export type MF_HDCP_STATUS = number;
export type MF_MEDIA_ENGINE_OPM_STATUS = number;
export type MF_MEDIA_ENGINE_CREATEFLAGS = number;
export type MF_MEDIA_ENGINE_PROTECTION_FLAGS = number;
export type MF_TIMED_TEXT_TRACK_KIND = number;
export type MF_TIMED_TEXT_UNIT_TYPE = number;
export type MF_TIMED_TEXT_FONT_STYLE = number;
export type MF_TIMED_TEXT_ALIGNMENT = number;
export type MF_TIMED_TEXT_DISPLAY_ALIGNMENT = number;
export type MF_TIMED_TEXT_DECORATION = number;
export type MF_TIMED_TEXT_WRITING_MODE = number;
export type MF_TIMED_TEXT_SCROLL_MODE = number;
export type MF_TIMED_TEXT_ERROR_CODE = number;
export type MF_TIMED_TEXT_CUE_EVENT = number;
export type MF_TIMED_TEXT_TRACK_READY_STATE = number;
export type MF_TIMED_TEXT_RUBY_POSITION = number;
export type MF_TIMED_TEXT_RUBY_ALIGN = number;
export type MF_TIMED_TEXT_RUBY_RESERVE = number;
export type MF_TIMED_TEXT_BOUTEN_TYPE = number;
export type MF_TIMED_TEXT_BOUTEN_POSITION = number;
export type MF_MEDIA_ENGINE_STREAMTYPE_FAILED = number;
export type MF_MEDIAKEYS_REQUIREMENT = number;
export type MF_SOURCE_READER_FLAG = number;
export type MF_SOURCE_READER_CONTROL_FLAG = number;
export type MF_SOURCE_READER_CONSTANTS = number;
export type MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS = number;
export type MF_SINK_WRITER_CONSTANTS = number;
export type MFVideoAspectRatioMode = number;
export type MFVideoRenderPrefs = number;
export type MFVP_MESSAGE_TYPE = number;
export type MFVideoMixPrefs = number;
export type EVRFilterConfigPrefs = number;
export type MF_SERVICE_LOOKUP_TYPE = number;
export type MFP_CREATION_OPTIONS = number;
export type MFP_MEDIAPLAYER_STATE = number;
export type _MFP_MEDIAITEM_CHARACTERISTICS = number;
export type _MFP_CREDENTIAL_FLAGS = number;
export type MFP_EVENT_TYPE = number;
export type MF_SHARING_ENGINE_EVENT = number;
export type MF_MEDIA_SHARING_ENGINE_EVENT = number;
export type PLAYTO_SOURCE_CREATEFLAGS = number;
export type MFVideoAlphaBitmapFlags = number;
export type MFVirtualCameraType = number;
export type MFVirtualCameraLifetime = number;
export type MFVirtualCameraAccess = number;
export type OPM_HDCP_TYPE = number;
export type OPM_HDCP_STATUS = number;
export type COPP_HDCP_Protection_Level = number;
export type COPP_CGMSA_Protection_Level = number;
export type COPP_ACP_Protection_Level = number;
export type COPP_TVProtectionStandard = number;
export type COPP_ImageAspectRatio_EN300294 = number;
export type COPP_StatusFlags = number;
export type COPP_StatusHDCPFlags = number;
export type COPP_ConnectorType = number;
export type COPP_BusType = number;
export type MF_TRANSFER_VIDEO_FRAME_FLAGS = number;
export type MF_MEDIASOURCE_STATUS_INFO = number;

// Constants
export const MIXERCONTROL_CONTROLTYPE_CUSTOM = 0;
export const MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = 268500992;
export const MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = 268566528;
export const MIXERCONTROL_CONTROLTYPE_PEAKMETER = 268566529;
export const MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = 268632064;
export const MIXERCONTROL_CONTROLTYPE_BOOLEAN = 536936448;
export const MIXERCONTROL_CONTROLTYPE_ONOFF = 536936449;
export const MIXERCONTROL_CONTROLTYPE_MUTE = 536936450;
export const MIXERCONTROL_CONTROLTYPE_MONO = 536936451;
export const MIXERCONTROL_CONTROLTYPE_LOUDNESS = 536936452;
export const MIXERCONTROL_CONTROLTYPE_STEREOENH = 536936453;
export const MIXERCONTROL_CONTROLTYPE_BASS_BOOST = 536945271;
export const MIXERCONTROL_CONTROLTYPE_BUTTON = 553713664;
export const MIXERCONTROL_CONTROLTYPE_DECIBELS = 805568512;
export const MIXERCONTROL_CONTROLTYPE_SIGNED = 805437440;
export const MIXERCONTROL_CONTROLTYPE_UNSIGNED = 805502976;
export const MIXERCONTROL_CONTROLTYPE_PERCENT = 805634048;
export const MIXERCONTROL_CONTROLTYPE_SLIDER = 1073872896;
export const MIXERCONTROL_CONTROLTYPE_PAN = 1073872897;
export const MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = 1073872898;
export const MIXERCONTROL_CONTROLTYPE_FADER = 1342373888;
export const MIXERCONTROL_CONTROLTYPE_VOLUME = 1342373889;
export const MIXERCONTROL_CONTROLTYPE_BASS = 1342373890;
export const MIXERCONTROL_CONTROLTYPE_TREBLE = 1342373891;
export const MIXERCONTROL_CONTROLTYPE_EQUALIZER = 1342373892;
export const MIXERCONTROL_CONTROLTYPE_SINGLESELECT = 1879113728;
export const MIXERCONTROL_CONTROLTYPE_MUX = 1879113729;
export const MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = 1895890944;
export const MIXERCONTROL_CONTROLTYPE_MIXER = 1895890945;
export const MIXERCONTROL_CONTROLTYPE_MICROTIME = 1610809344;
export const MIXERCONTROL_CONTROLTYPE_MILLITIME = 1627586560;
export const WAVE_MAPPER = 4294967295;
export const ENDPOINT_FORMAT_RESET_MIX_ONLY = 1;
export const ENDPOINT_HARDWARE_SUPPORT_VOLUME = 1;
export const ENDPOINT_HARDWARE_SUPPORT_MUTE = 2;
export const ENDPOINT_HARDWARE_SUPPORT_METER = 4;
export const AUDIOCLOCK_CHARACTERISTIC_FIXED_FREQ = 1;
export const AMBISONICS_PARAM_VERSION_1 = 1;
export const AUDCLNT_E_NOT_INITIALIZED = 9871892601689931777n;
export const AUDCLNT_E_ALREADY_INITIALIZED = 9871893701201559554n;
export const AUDCLNT_E_WRONG_ENDPOINT_TYPE = 9871894800713187331n;
export const AUDCLNT_E_DEVICE_INVALIDATED = 9871895900224815108n;
export const AUDCLNT_E_NOT_STOPPED = 9871896999736442885n;
export const AUDCLNT_E_BUFFER_TOO_LARGE = 9871898099248070662n;
export const AUDCLNT_E_OUT_OF_ORDER = 9871899198759698439n;
export const AUDCLNT_E_UNSUPPORTED_FORMAT = 9871900298271326216n;
export const AUDCLNT_E_INVALID_SIZE = 9871901397782953993n;
export const AUDCLNT_E_DEVICE_IN_USE = 9871902497294581770n;
export const AUDCLNT_E_BUFFER_OPERATION_PENDING = 9871903596806209547n;
export const AUDCLNT_E_THREAD_NOT_REGISTERED = 9871905795829465100n;
export const AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED = 9871906895341092878n;
export const AUDCLNT_E_ENDPOINT_CREATE_FAILED = 9871907994852720655n;
export const AUDCLNT_E_SERVICE_NOT_RUNNING = 9871909094364348432n;
export const AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED = 9871910193875976209n;
export const AUDCLNT_E_EXCLUSIVE_MODE_ONLY = 9871911293387603986n;
export const AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL = 9871912392899231763n;
export const AUDCLNT_E_EVENTHANDLE_NOT_SET = 9871913492410859540n;
export const AUDCLNT_E_INCORRECT_BUFFER_SIZE = 9871914591922487317n;
export const AUDCLNT_E_BUFFER_SIZE_ERROR = 9871915691434115094n;
export const AUDCLNT_E_CPUUSAGE_EXCEEDED = 9871916790945742871n;
export const AUDCLNT_E_BUFFER_ERROR = 9871917890457370648n;
export const AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED = 9871925587038765081n;
export const AUDCLNT_E_INVALID_DEVICE_PERIOD = 9871926686550392864n;
export const AUDCLNT_E_INVALID_STREAM_FLAG = 9871927786062020641n;
export const AUDCLNT_E_ENDPOINT_OFFLOAD_NOT_CAPABLE = 9871928885573648418n;
export const AUDCLNT_E_OUT_OF_OFFLOAD_RESOURCES = 9871929985085276195n;
export const AUDCLNT_E_OFFLOAD_MODE_ONLY = 9871931084596903972n;
export const AUDCLNT_E_NONOFFLOAD_MODE_ONLY = 9871932184108531749n;
export const AUDCLNT_E_RESOURCES_INVALIDATED = 9871933283620159526n;
export const AUDCLNT_E_RAW_MODE_UNSUPPORTED = 9871934383131787303n;
export const AUDCLNT_E_ENGINE_PERIODICITY_LOCKED = 9871935482643415080n;
export const AUDCLNT_E_ENGINE_FORMAT_LOCKED = 9871943179224809513n;
export const AUDCLNT_E_HEADTRACKING_ENABLED = 9871960771410853936n;
export const AUDCLNT_E_HEADTRACKING_UNSUPPORTED = 9871961870922481728n;
export const AUDCLNT_E_EFFECT_NOT_AVAILABLE = 9871962970434109505n;
export const AUDCLNT_E_EFFECT_STATE_READ_ONLY = 9871891502178304066n;
export const AUDCLNT_S_BUFFER_EMPTY = 9871892599542448129n;
export const AUDCLNT_S_THREAD_ALREADY_REGISTERED = 9871893699054075906n;
export const AUDCLNT_S_POSITION_STALLED = 72057611360993283n;
export const AUDCLNT_STREAMFLAGS_CROSSPROCESS = 65536;
export const AUDCLNT_STREAMFLAGS_LOOPBACK = 131072;
export const AUDCLNT_STREAMFLAGS_EVENTCALLBACK = 262144;
export const AUDCLNT_STREAMFLAGS_NOPERSIST = 524288;
export const AUDCLNT_STREAMFLAGS_RATEADJUST = 1048576;
export const AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY = 134217728;
export const AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM = 2147483648;
export const AUDCLNT_SESSIONFLAGS_EXPIREWHENUNOWNED = 268435456;
export const AUDCLNT_SESSIONFLAGS_DISPLAY_HIDE = 536870912;
export const AUDCLNT_SESSIONFLAGS_DISPLAY_HIDEWHENEXPIRED = 1073741824;
export const SPTLAUDCLNT_E_DESTROYED = 9872172977155014912n;
export const SPTLAUDCLNT_E_OUT_OF_ORDER = 9872174076666642689n;
export const SPTLAUDCLNT_E_RESOURCES_INVALIDATED = 9872175176178270466n;
export const SPTLAUDCLNT_E_NO_MORE_OBJECTS = 9872176275689898243n;
export const SPTLAUDCLNT_E_PROPERTY_NOT_SUPPORTED = 9872177375201526020n;
export const SPTLAUDCLNT_E_ERRORS_IN_OBJECT_CALLS = 9872178474713153797n;
export const SPTLAUDCLNT_E_METADATA_FORMAT_NOT_SUPPORTED = 9872179574224781574n;
export const SPTLAUDCLNT_E_STREAM_NOT_AVAILABLE = 9872180673736409351n;
export const SPTLAUDCLNT_E_INVALID_LICENSE = 9872182872759664904n;
export const SPTLAUDCLNT_E_STREAM_NOT_STOPPED = 9872183972271292682n;
export const SPTLAUDCLNT_E_STATIC_OBJECT_NOT_AVAILABLE = 9872185071782920459n;
export const SPTLAUDCLNT_E_OBJECT_ALREADY_ACTIVE = 9872186171294548236n;
export const SPTLAUDCLNT_E_INTERNAL = 8815563571469;
export const DEVICE_STATE_ACTIVE = 1;
export const DEVICE_STATE_DISABLED = 2;
export const DEVICE_STATE_NOTPRESENT = 4;
export const DEVICE_STATE_UNPLUGGED = 8;
export const DEVICE_STATEMASK_ALL = 15;
export const ENDPOINT_SYSFX_ENABLED = 0;
export const ENDPOINT_SYSFX_DISABLED = 1;
export const SPATIAL_AUDIO_STANDARD_COMMANDS_START = 200;
export const SPATIAL_AUDIO_POSITION = 200;
export const SPTLAUD_MD_CLNT_E_COMMAND_NOT_FOUND = 9872454452131725824n;
export const SPTLAUD_MD_CLNT_E_OBJECT_NOT_INITIALIZED = 9872455551643353601n;
export const SPTLAUD_MD_CLNT_E_INVALID_ARGS = 9872456651154981378n;
export const SPTLAUD_MD_CLNT_E_METADATA_FORMAT_NOT_FOUND = 9872457750666609155n;
export const SPTLAUD_MD_CLNT_E_VALUE_BUFFER_INCORRECT_SIZE = 9872458850178236932n;
export const SPTLAUD_MD_CLNT_E_MEMORY_BOUNDS = 9872459949689864709n;
export const SPTLAUD_MD_CLNT_E_NO_MORE_COMMANDS = 9872461049201492486n;
export const SPTLAUD_MD_CLNT_E_BUFFER_ALREADY_ATTACHED = 9872462148713120263n;
export const SPTLAUD_MD_CLNT_E_BUFFER_NOT_ATTACHED = 9872463248224748040n;
export const SPTLAUD_MD_CLNT_E_FRAMECOUNT_OUT_OF_RANGE = 9872470944806142473n;
export const SPTLAUD_MD_CLNT_E_NO_ITEMS_FOUND = 9872472044317770256n;
export const SPTLAUD_MD_CLNT_E_ITEM_COPY_OVERFLOW = 9872473143829398033n;
export const SPTLAUD_MD_CLNT_E_NO_ITEMS_OPEN = 9872474243341025810n;
export const SPTLAUD_MD_CLNT_E_ITEMS_ALREADY_OPEN = 9872475342852653587n;
export const SPTLAUD_MD_CLNT_E_ATTACH_FAILED_INTERNAL_BUFFER = 9872476442364281364n;
export const SPTLAUD_MD_CLNT_E_DETACH_FAILED_INTERNAL_BUFFER = 9872477541875909141n;
export const SPTLAUD_MD_CLNT_E_NO_BUFFER_ATTACHED = 9872478641387536918n;
export const SPTLAUD_MD_CLNT_E_NO_MORE_ITEMS = 9872479740899164695n;
export const SPTLAUD_MD_CLNT_E_FRAMEOFFSET_OUT_OF_RANGE = 9872480840410792472n;
export const SPTLAUD_MD_CLNT_E_ITEM_MUST_HAVE_COMMANDS = 9872488536992186905n;
export const SPTLAUD_MD_CLNT_E_NO_ITEMOFFSET_WRITTEN = 9872489636503814688n;
export const SPTLAUD_MD_CLNT_E_NO_ITEMS_WRITTEN = 9872490736015442465n;
export const SPTLAUD_MD_CLNT_E_COMMAND_ALREADY_WRITTEN = 9872491835527070242n;
export const SPTLAUD_MD_CLNT_E_FORMAT_MISMATCH = 9872492935038698019n;
export const SPTLAUD_MD_CLNT_E_BUFFER_STILL_ATTACHED = 9872494034550325796n;
export const SPTLAUD_MD_CLNT_E_ITEMS_LOCKED_FOR_WRITING = 2886251019141448229n;
export const VIRTUAL_AUDIO_DEVICE_PROCESS_LOOPBACK = "VAD\Process_Loopback";
export const WAVERR_BADFORMAT = 32;
export const WAVERR_STILLPLAYING = 33;
export const WAVERR_UNPREPARED = 34;
export const WAVERR_SYNC = 35;
export const WAVERR_LASTERROR = 35;
export const WHDR_DONE = 1;
export const WHDR_PREPARED = 2;
export const WHDR_BEGINLOOP = 4;
export const WHDR_ENDLOOP = 8;
export const WHDR_INQUEUE = 16;
export const WAVECAPS_PITCH = 1;
export const WAVECAPS_PLAYBACKRATE = 2;
export const WAVECAPS_VOLUME = 4;
export const WAVECAPS_LRVOLUME = 8;
export const WAVECAPS_SYNC = 16;
export const WAVECAPS_SAMPLEACCURATE = 32;
export const WAVE_INVALIDFORMAT = 0;
export const WAVE_FORMAT_1M08 = 1;
export const WAVE_FORMAT_1S08 = 2;
export const WAVE_FORMAT_1M16 = 4;
export const WAVE_FORMAT_1S16 = 8;
export const WAVE_FORMAT_2M08 = 16;
export const WAVE_FORMAT_2S08 = 32;
export const WAVE_FORMAT_2M16 = 64;
export const WAVE_FORMAT_2S16 = 128;
export const WAVE_FORMAT_4M08 = 256;
export const WAVE_FORMAT_4S08 = 512;
export const WAVE_FORMAT_4M16 = 1024;
export const WAVE_FORMAT_4S16 = 2048;
export const WAVE_FORMAT_44M08 = 256;
export const WAVE_FORMAT_44S08 = 512;
export const WAVE_FORMAT_44M16 = 1024;
export const WAVE_FORMAT_44S16 = 2048;
export const WAVE_FORMAT_48M08 = 4096;
export const WAVE_FORMAT_48S08 = 8192;
export const WAVE_FORMAT_48M16 = 16384;
export const WAVE_FORMAT_48S16 = 32768;
export const WAVE_FORMAT_96M08 = 65536;
export const WAVE_FORMAT_96S08 = 131072;
export const WAVE_FORMAT_96M16 = 262144;
export const WAVE_FORMAT_96S16 = 524288;
export const WAVE_FORMAT_PCM = 1;
export const MIDIERR_UNPREPARED = 64;
export const MIDIERR_STILLPLAYING = 65;
export const MIDIERR_NOMAP = 66;
export const MIDIERR_NOTREADY = 67;
export const MIDIERR_NODEVICE = 68;
export const MIDIERR_INVALIDSETUP = 69;
export const MIDIERR_BADOPENMODE = 70;
export const MIDIERR_DONT_CONTINUE = 71;
export const MIDIERR_LASTERROR = 71;
export const MIDIPATCHSIZE = 128;
export const MIDI_CACHE_ALL = 1;
export const MIDI_CACHE_BESTFIT = 2;
export const MIDI_CACHE_QUERY = 3;
export const MIDI_UNCACHE = 4;
export const MOD_MIDIPORT = 1;
export const MOD_SYNTH = 2;
export const MOD_SQSYNTH = 3;
export const MOD_FMSYNTH = 4;
export const MOD_MAPPER = 5;
export const MOD_WAVETABLE = 6;
export const MOD_SWSYNTH = 7;
export const MIDICAPS_VOLUME = 1;
export const MIDICAPS_LRVOLUME = 2;
export const MIDICAPS_CACHE = 4;
export const MIDICAPS_STREAM = 8;
export const MHDR_DONE = 1;
export const MHDR_PREPARED = 2;
export const MHDR_INQUEUE = 4;
export const MHDR_ISSTRM = 8;
export const MEVT_F_SHORT = 0;
export const MEVT_F_LONG = "-2147483648";
export const MEVT_F_CALLBACK = 1073741824;
export const MIDISTRM_ERROR = "-2";
export const MIDIPROP_SET = "-2147483648";
export const MIDIPROP_GET = 1073741824;
export const MIDIPROP_TIMEDIV = 1;
export const MIDIPROP_TEMPO = 2;
export const AUXCAPS_CDAUDIO = 1;
export const AUXCAPS_AUXIN = 2;
export const AUXCAPS_VOLUME = 1;
export const AUXCAPS_LRVOLUME = 2;
export const MIXER_SHORT_NAME_CHARS = 16;
export const MIXER_LONG_NAME_CHARS = 64;
export const MIXERR_INVALLINE = 1024;
export const MIXERR_INVALCONTROL = 1025;
export const MIXERR_INVALVALUE = 1026;
export const MIXERR_LASTERROR = 1026;
export const MIXER_OBJECTF_HANDLE = "-2147483648";
export const MIXER_OBJECTF_MIXER = 0;
export const MIXER_OBJECTF_WAVEOUT = 268435456;
export const MIXER_OBJECTF_WAVEIN = 536870912;
export const MIXER_OBJECTF_MIDIOUT = 805306368;
export const MIXER_OBJECTF_MIDIIN = 1073741824;
export const MIXER_OBJECTF_AUX = 1342177280;
export const MIXERLINE_LINEF_ACTIVE = 1;
export const MIXERLINE_LINEF_DISCONNECTED = 32768;
export const MIXERLINE_LINEF_SOURCE = "-2147483648";
export const MIXERLINE_COMPONENTTYPE_DST_FIRST = 0;
export const MIXERLINE_COMPONENTTYPE_DST_LAST = 8;
export const MIXERLINE_COMPONENTTYPE_SRC_FIRST = 4096;
export const MIXERLINE_COMPONENTTYPE_SRC_LAST = 4106;
export const MIXERLINE_TARGETTYPE_UNDEFINED = 0;
export const MIXERLINE_TARGETTYPE_WAVEOUT = 1;
export const MIXERLINE_TARGETTYPE_WAVEIN = 2;
export const MIXERLINE_TARGETTYPE_MIDIOUT = 3;
export const MIXERLINE_TARGETTYPE_MIDIIN = 4;
export const MIXERLINE_TARGETTYPE_AUX = 5;
export const MIXER_GETLINEINFOF_DESTINATION = 0;
export const MIXER_GETLINEINFOF_SOURCE = 1;
export const MIXER_GETLINEINFOF_LINEID = 2;
export const MIXER_GETLINEINFOF_COMPONENTTYPE = 3;
export const MIXER_GETLINEINFOF_TARGETTYPE = 4;
export const MIXER_GETLINEINFOF_QUERYMASK = 15;
export const MIXERCONTROL_CONTROLF_UNIFORM = 1;
export const MIXERCONTROL_CONTROLF_MULTIPLE = 2;
export const MIXERCONTROL_CONTROLF_DISABLED = "-2147483648";
export const MIXERCONTROL_CT_CLASS_MASK = "-268435456";
export const MIXERCONTROL_CT_CLASS_CUSTOM = 0;
export const MIXERCONTROL_CT_CLASS_METER = 268435456;
export const MIXERCONTROL_CT_CLASS_SWITCH = 536870912;
export const MIXERCONTROL_CT_CLASS_NUMBER = 805306368;
export const MIXERCONTROL_CT_CLASS_SLIDER = 1073741824;
export const MIXERCONTROL_CT_CLASS_FADER = 1342177280;
export const MIXERCONTROL_CT_CLASS_TIME = 1610612736;
export const MIXERCONTROL_CT_CLASS_LIST = 1879048192;
export const MIXERCONTROL_CT_SUBCLASS_MASK = 251658240;
export const MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0;
export const MIXERCONTROL_CT_SC_SWITCH_BUTTON = 16777216;
export const MIXERCONTROL_CT_SC_METER_POLLED = 0;
export const MIXERCONTROL_CT_SC_TIME_MICROSECS = 0;
export const MIXERCONTROL_CT_SC_TIME_MILLISECS = 16777216;
export const MIXERCONTROL_CT_SC_LIST_SINGLE = 0;
export const MIXERCONTROL_CT_SC_LIST_MULTIPLE = 16777216;
export const MIXERCONTROL_CT_UNITS_MASK = 16711680;
export const MIXERCONTROL_CT_UNITS_CUSTOM = 0;
export const MIXERCONTROL_CT_UNITS_BOOLEAN = 65536;
export const MIXERCONTROL_CT_UNITS_SIGNED = 131072;
export const MIXERCONTROL_CT_UNITS_UNSIGNED = 196608;
export const MIXERCONTROL_CT_UNITS_DECIBELS = 262144;
export const MIXERCONTROL_CT_UNITS_PERCENT = 327680;
export const MIXER_GETLINECONTROLSF_ALL = 0;
export const MIXER_GETLINECONTROLSF_ONEBYID = 1;
export const MIXER_GETLINECONTROLSF_ONEBYTYPE = 2;
export const MIXER_GETLINECONTROLSF_QUERYMASK = 15;
export const MIXER_GETCONTROLDETAILSF_VALUE = 0;
export const MIXER_GETCONTROLDETAILSF_LISTTEXT = 1;
export const MIXER_GETCONTROLDETAILSF_QUERYMASK = 15;
export const MIXER_SETCONTROLDETAILSF_VALUE = 0;
export const MIXER_SETCONTROLDETAILSF_CUSTOM = 1;
export const MIXER_SETCONTROLDETAILSF_QUERYMASK = 15;
export const DRV_MAPPER_PREFERRED_INPUT_GET = 16384;
export const DRV_MAPPER_PREFERRED_OUTPUT_GET = 16386;
export const DRVM_MAPPER = 8192;
export const DRVM_MAPPER_STATUS = 8192;
export const WIDM_MAPPER_STATUS = 8192;
export const WAVEIN_MAPPER_STATUS_DEVICE = 0;
export const WAVEIN_MAPPER_STATUS_MAPPED = 1;
export const WAVEIN_MAPPER_STATUS_FORMAT = 2;
export const WODM_MAPPER_STATUS = 8192;
export const WAVEOUT_MAPPER_STATUS_DEVICE = 0;
export const WAVEOUT_MAPPER_STATUS_MAPPED = 1;
export const WAVEOUT_MAPPER_STATUS_FORMAT = 2;
export const ACMERR_BASE = 512;
export const ACMERR_NOTPOSSIBLE = 512;
export const ACMERR_BUSY = 513;
export const ACMERR_UNPREPARED = 514;
export const ACMERR_CANCELED = 515;
export const ACM_METRIC_COUNT_DRIVERS = 1;
export const ACM_METRIC_COUNT_CODECS = 2;
export const ACM_METRIC_COUNT_CONVERTERS = 3;
export const ACM_METRIC_COUNT_FILTERS = 4;
export const ACM_METRIC_COUNT_DISABLED = 5;
export const ACM_METRIC_COUNT_HARDWARE = 6;
export const ACM_METRIC_COUNT_LOCAL_DRIVERS = 20;
export const ACM_METRIC_COUNT_LOCAL_CODECS = 21;
export const ACM_METRIC_COUNT_LOCAL_CONVERTERS = 22;
export const ACM_METRIC_COUNT_LOCAL_FILTERS = 23;
export const ACM_METRIC_COUNT_LOCAL_DISABLED = 24;
export const ACM_METRIC_HARDWARE_WAVE_INPUT = 30;
export const ACM_METRIC_HARDWARE_WAVE_OUTPUT = 31;
export const ACM_METRIC_MAX_SIZE_FORMAT = 50;
export const ACM_METRIC_MAX_SIZE_FILTER = 51;
export const ACM_METRIC_DRIVER_SUPPORT = 100;
export const ACM_METRIC_DRIVER_PRIORITY = 101;
export const ACM_DRIVERENUMF_NOLOCAL = 1073741824;
export const ACM_DRIVERENUMF_DISABLED = "-2147483648";
export const ACM_DRIVERADDF_NAME = 1;
export const ACM_DRIVERADDF_FUNCTION = 3;
export const ACM_DRIVERADDF_NOTIFYHWND = 4;
export const ACM_DRIVERADDF_TYPEMASK = 7;
export const ACM_DRIVERADDF_LOCAL = 0;
export const ACM_DRIVERADDF_GLOBAL = 8;
export const ACMDM_USER = 16384;
export const ACMDM_RESERVED_LOW = 24576;
export const ACMDM_RESERVED_HIGH = 28671;
export const ACMDM_DRIVER_ABOUT = 24587;
export const ACM_DRIVERPRIORITYF_ENABLE = 1;
export const ACM_DRIVERPRIORITYF_DISABLE = 2;
export const ACM_DRIVERPRIORITYF_ABLEMASK = 3;
export const ACM_DRIVERPRIORITYF_BEGIN = 65536;
export const ACM_DRIVERPRIORITYF_END = 131072;
export const ACM_DRIVERPRIORITYF_DEFERMASK = 196608;
export const ACMDRIVERDETAILS_SHORTNAME_CHARS = 32;
export const ACMDRIVERDETAILS_LONGNAME_CHARS = 128;
export const ACMDRIVERDETAILS_COPYRIGHT_CHARS = 80;
export const ACMDRIVERDETAILS_LICENSING_CHARS = 128;
export const ACMDRIVERDETAILS_FEATURES_CHARS = 512;
export const ACMDRIVERDETAILS_SUPPORTF_CODEC = 1;
export const ACMDRIVERDETAILS_SUPPORTF_CONVERTER = 2;
export const ACMDRIVERDETAILS_SUPPORTF_FILTER = 4;
export const ACMDRIVERDETAILS_SUPPORTF_HARDWARE = 8;
export const ACMDRIVERDETAILS_SUPPORTF_ASYNC = 16;
export const ACMDRIVERDETAILS_SUPPORTF_LOCAL = 1073741824;
export const ACMDRIVERDETAILS_SUPPORTF_DISABLED = "-2147483648";
export const ACMFORMATTAGDETAILS_FORMATTAG_CHARS = 48;
export const ACM_FORMATTAGDETAILSF_INDEX = 0;
export const ACM_FORMATTAGDETAILSF_FORMATTAG = 1;
export const ACM_FORMATTAGDETAILSF_LARGESTSIZE = 2;
export const ACM_FORMATTAGDETAILSF_QUERYMASK = 15;
export const ACMFORMATDETAILS_FORMAT_CHARS = 128;
export const ACM_FORMATDETAILSF_INDEX = 0;
export const ACM_FORMATDETAILSF_FORMAT = 1;
export const ACM_FORMATDETAILSF_QUERYMASK = 15;
export const ACM_FORMATENUMF_WFORMATTAG = 65536;
export const ACM_FORMATENUMF_NCHANNELS = 131072;
export const ACM_FORMATENUMF_NSAMPLESPERSEC = 262144;
export const ACM_FORMATENUMF_WBITSPERSAMPLE = 524288;
export const ACM_FORMATENUMF_CONVERT = 1048576;
export const ACM_FORMATENUMF_SUGGEST = 2097152;
export const ACM_FORMATENUMF_HARDWARE = 4194304;
export const ACM_FORMATENUMF_INPUT = 8388608;
export const ACM_FORMATENUMF_OUTPUT = 16777216;
export const ACM_FORMATSUGGESTF_WFORMATTAG = 65536;
export const ACM_FORMATSUGGESTF_NCHANNELS = 131072;
export const ACM_FORMATSUGGESTF_NSAMPLESPERSEC = 262144;
export const ACM_FORMATSUGGESTF_WBITSPERSAMPLE = 524288;
export const ACM_FORMATSUGGESTF_TYPEMASK = 16711680;
export const ACMHELPMSGSTRINGA = "acmchoose_help";
export const ACMHELPMSGSTRINGW = "acmchoose_help";
export const ACMHELPMSGCONTEXTMENUA = "acmchoose_contextmenu";
export const ACMHELPMSGCONTEXTMENUW = "acmchoose_contextmenu";
export const ACMHELPMSGCONTEXTHELPA = "acmchoose_contexthelp";
export const ACMHELPMSGCONTEXTHELPW = "acmchoose_contexthelp";
export const ACMHELPMSGSTRING = "acmchoose_help";
export const ACMHELPMSGCONTEXTMENU = "acmchoose_contextmenu";
export const ACMHELPMSGCONTEXTHELP = "acmchoose_contexthelp";
export const MM_ACM_FORMATCHOOSE = 32768;
export const FORMATCHOOSE_MESSAGE = 0;
export const FORMATCHOOSE_FORMATTAG_VERIFY = 0;
export const FORMATCHOOSE_FORMAT_VERIFY = 1;
export const FORMATCHOOSE_CUSTOM_VERIFY = 2;
export const ACMFORMATCHOOSE_STYLEF_SHOWHELP = 4;
export const ACMFORMATCHOOSE_STYLEF_ENABLEHOOK = 8;
export const ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE = 16;
export const ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 32;
export const ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT = 64;
export const ACMFORMATCHOOSE_STYLEF_CONTEXTHELP = 128;
export const ACMFILTERTAGDETAILS_FILTERTAG_CHARS = 48;
export const ACM_FILTERTAGDETAILSF_INDEX = 0;
export const ACM_FILTERTAGDETAILSF_FILTERTAG = 1;
export const ACM_FILTERTAGDETAILSF_LARGESTSIZE = 2;
export const ACM_FILTERTAGDETAILSF_QUERYMASK = 15;
export const ACMFILTERDETAILS_FILTER_CHARS = 128;
export const ACM_FILTERDETAILSF_INDEX = 0;
export const ACM_FILTERDETAILSF_FILTER = 1;
export const ACM_FILTERDETAILSF_QUERYMASK = 15;
export const ACM_FILTERENUMF_DWFILTERTAG = 65536;
export const MM_ACM_FILTERCHOOSE = 32768;
export const FILTERCHOOSE_MESSAGE = 0;
export const FILTERCHOOSE_FILTERTAG_VERIFY = 0;
export const FILTERCHOOSE_FILTER_VERIFY = 1;
export const FILTERCHOOSE_CUSTOM_VERIFY = 2;
export const ACMFILTERCHOOSE_STYLEF_SHOWHELP = 4;
export const ACMFILTERCHOOSE_STYLEF_ENABLEHOOK = 8;
export const ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE = 16;
export const ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 32;
export const ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT = 64;
export const ACMFILTERCHOOSE_STYLEF_CONTEXTHELP = 128;
export const ACMSTREAMHEADER_STATUSF_DONE = 65536;
export const ACMSTREAMHEADER_STATUSF_PREPARED = 131072;
export const ACMSTREAMHEADER_STATUSF_INQUEUE = 1048576;
export const ACM_STREAMOPENF_QUERY = 1;
export const ACM_STREAMOPENF_ASYNC = 2;
export const ACM_STREAMOPENF_NONREALTIME = 4;
export const ACM_STREAMSIZEF_SOURCE = 0;
export const ACM_STREAMSIZEF_DESTINATION = 1;
export const ACM_STREAMSIZEF_QUERYMASK = 15;
export const ACM_STREAMCONVERTF_BLOCKALIGN = 4;
export const ACM_STREAMCONVERTF_START = 16;
export const ACM_STREAMCONVERTF_END = 32;
export const SND_RING = 1048576;
export const SND_ALIAS_START = 0;
export const ACMDM_DRIVER_NOTIFY = 24577;
export const ACMDM_DRIVER_DETAILS = 24586;
export const ACMDM_HARDWARE_WAVE_CAPS_INPUT = 24596;
export const ACMDM_HARDWARE_WAVE_CAPS_OUTPUT = 24597;
export const ACMDM_FORMATTAG_DETAILS = 24601;
export const ACMDM_FORMAT_DETAILS = 24602;
export const ACMDM_FORMAT_SUGGEST = 24603;
export const ACMDM_FILTERTAG_DETAILS = 24626;
export const ACMDM_FILTER_DETAILS = 24627;
export const ACMDM_STREAM_OPEN = 24652;
export const ACMDM_STREAM_CLOSE = 24653;
export const ACMDM_STREAM_SIZE = 24654;
export const ACMDM_STREAM_CONVERT = 24655;
export const ACMDM_STREAM_RESET = 24656;
export const ACMDM_STREAM_PREPARE = 24657;
export const ACMDM_STREAM_UNPREPARE = 24658;
export const ACMDM_STREAM_UPDATE = 24659;
export const CALLBACK_TYPEMASK = 458752;
export const CALLBACK_NULL = 0;
export const CALLBACK_WINDOW = 65536;
export const CALLBACK_TASK = 131072;
export const CALLBACK_FUNCTION = 196608;
export const CALLBACK_THREAD = 131072;
export const CALLBACK_EVENT = 327680;
export const WAVE_FORMAT_QUERY = 1;
export const WAVE_ALLOWSYNC = 2;
export const WAVE_MAPPED = 4;
export const WAVE_FORMAT_DIRECT = 8;
export const WAVE_FORMAT_DIRECT_QUERY = 9;
export const WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE = 16;
export const MIDI_IO_STATUS = 32;
export const SND_APPLICATION = 128;
export const SND_ALIAS = 65536;
export const SND_ALIAS_ID = 1114112;
export const SND_FILENAME = 131072;
export const SND_RESOURCE = 262148;
export const SND_ASYNC = 1;
export const SND_NODEFAULT = 2;
export const SND_LOOP = 8;
export const SND_MEMORY = 4;
export const SND_NOSTOP = 16;
export const SND_NOWAIT = 8192;
export const SND_PURGE = 64;
export const SND_SENTRY = 524288;
export const SND_SYNC = 0;
export const SND_SYSTEM = 2097152;
export const MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 1;
export const MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 5;
export const MIXERLINE_COMPONENTTYPE_DST_LINE = 2;
export const MIXERLINE_COMPONENTTYPE_DST_MONITOR = 3;
export const MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 4;
export const MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 6;
export const MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0;
export const MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 8;
export const MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 7;
export const MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 4106;
export const MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 4105;
export const MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 4101;
export const MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 4097;
export const MIXERLINE_COMPONENTTYPE_SRC_LINE = 4098;
export const MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 4099;
export const MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 4103;
export const MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 4100;
export const MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 4102;
export const MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 4096;
export const MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 4104;
export const OATRUE = "-1";
export const OAFALSE = 0;
export const MPEGLAYER3_FLAG_PADDING_ISO = 0;
export const MPEGLAYER3_FLAG_PADDING_ON = 1;
export const MPEGLAYER3_FLAG_PADDING_OFF = 2;
export const ED_DEVCAP_TIMECODE_READ = 4121;
export const ED_DEVCAP_ATN_READ = 5047;
export const ED_DEVCAP_RTC_READ = 5050;
export const MF_EVENT_FLAG_NONE = 0;
export const MF_EVENT_FLAG_NO_WAIT = 1;
export const AMMPEG2_DoPanScan = 1;
export const AMMPEG2_DVDLine21Field1 = 2;
export const AMMPEG2_DVDLine21Field2 = 4;
export const AMMPEG2_SourceIsLetterboxed = 8;
export const AMMPEG2_FilmCameraMode = 16;
export const AMMPEG2_LetterboxAnalogOut = 32;
export const AMMPEG2_DSS_UserData = 64;
export const AMMPEG2_DVB_UserData = 128;
export const AMMPEG2_27MhzTimebase = 256;
export const AMMPEG2_WidescreenAnalogOut = 512;
export const MF_Plugin_Type_MFT = 0;
export const MF_Plugin_Type_MediaSource = 1;
export const MF_Plugin_Type_MFT_MatchOutputType = 2;
export const MF_Plugin_Type_Other = "-1";
export const WM_CAP_START = 1024;
export const MODM_USER = 16384;
export const MIDM_USER = 16384;
export const MODM_MAPPER = 8192;
export const MIDM_MAPPER = 8192;
export const MODM_INIT = 100;
export const MIDM_INIT = 100;
export const MODM_INIT_EX = 104;
export const MIDM_INIT_EX = 104;
export const DRV_MCI_FIRST = 2048;
export const ACMDM_BASE = 24576;
export const ICM_RESERVED = 20480;
export const MCI_TEST = 32;
export const MCI_CAPTURE = 2160;
export const MCI_MONITOR = 2161;
export const MCI_RESERVE = 2162;
export const MCI_SETAUDIO = 2163;
export const MCI_SIGNAL = 2165;
export const MCI_SETVIDEO = 2166;
export const MCI_QUALITY = 2167;
export const MCI_LIST = 2168;
export const MCI_UNDO = 2169;
export const MCI_CONFIGURE = 2170;
export const MCI_RESTORE = 2171;
export const MCI_ON = 1;
export const MCI_OFF = 0;
export const MCI_DGV_FILE_MODE_SAVING = 1;
export const MCI_DGV_FILE_MODE_LOADING = 2;
export const MCI_DGV_FILE_MODE_EDITING = 3;
export const MCI_DGV_FILE_MODE_IDLE = 4;
export const MCI_ON_S = 32768;
export const MCI_OFF_S = 32769;
export const MCI_DGV_FILE_S = 32770;
export const MCI_DGV_INPUT_S = 32771;
export const MCI_DGV_FILE_MODE_SAVING_S = 32772;
export const MCI_DGV_FILE_MODE_LOADING_S = 32773;
export const MCI_DGV_FILE_MODE_EDITING_S = 32774;
export const MCI_DGV_FILE_MODE_IDLE_S = 32775;
export const MCI_DGV_SETVIDEO_SRC_NTSC_S = 32784;
export const MCI_DGV_SETVIDEO_SRC_RGB_S = 32785;
export const MCI_DGV_SETVIDEO_SRC_SVIDEO_S = 32786;
export const MCI_DGV_SETVIDEO_SRC_PAL_S = 32787;
export const MCI_DGV_SETVIDEO_SRC_SECAM_S = 32788;
export const MCI_DGV_SETVIDEO_SRC_GENERIC_S = 32789;
export const MCI_DGV_SETAUDIO_SRC_LEFT_S = 32800;
export const MCI_DGV_SETAUDIO_SRC_RIGHT_S = 32801;
export const MCI_DGV_SETAUDIO_SRC_AVERAGE_S = 32802;
export const MCI_DGV_SETAUDIO_SRC_STEREO_S = 32803;
export const MCIERR_DGV_DEVICE_LIMIT = 512;
export const MCIERR_DGV_IOERR = 513;
export const MCIERR_DGV_WORKSPACE_EMPTY = 514;
export const MCIERR_DGV_DISK_FULL = 515;
export const MCIERR_DGV_DEVICE_MEMORY_FULL = 516;
export const MCIERR_DGV_BAD_CLIPBOARD_RANGE = 517;
export const MCI_DGV_METHOD_PRE = 40960;
export const MCI_DGV_METHOD_POST = 40961;
export const MCI_DGV_METHOD_DIRECT = 40962;
export const MCI_DGV_FF_AVSS = 16384;
export const MCI_DGV_FF_AVI = 16385;
export const MCI_DGV_FF_DIB = 16386;
export const MCI_DGV_FF_RDIB = 16387;
export const MCI_DGV_FF_JPEG = 16388;
export const MCI_DGV_FF_RJPEG = 16389;
export const MCI_DGV_FF_JFIF = 16390;
export const MCI_DGV_FF_MPEG = 16391;
export const MCI_DGV_GETDEVCAPS_CAN_LOCK = 16384;
export const MCI_DGV_GETDEVCAPS_CAN_STRETCH = 16385;
export const MCI_DGV_GETDEVCAPS_CAN_FREEZE = 16386;
export const MCI_DGV_GETDEVCAPS_MAX_WINDOWS = 16387;
export const MCI_DGV_GETDEVCAPS_CAN_REVERSE = 16388;
export const MCI_DGV_GETDEVCAPS_HAS_STILL = 16389;
export const MCI_DGV_GETDEVCAPS_PALETTES = 16390;
export const MCI_DGV_GETDEVCAPS_CAN_STR_IN = 16392;
export const MCI_DGV_GETDEVCAPS_CAN_TEST = 16393;
export const MCI_DGV_GETDEVCAPS_MAXIMUM_RATE = 16394;
export const MCI_DGV_GETDEVCAPS_MINIMUM_RATE = 16395;
export const MCI_DGV_CAPTURE_AS = 65536;
export const MCI_DGV_CAPTURE_AT = 131072;
export const MCI_DGV_COPY_AT = 65536;
export const MCI_DGV_COPY_AUDIO_STREAM = 131072;
export const MCI_DGV_COPY_VIDEO_STREAM = 262144;
export const MCI_DGV_CUE_INPUT = 65536;
export const MCI_DGV_CUE_OUTPUT = 131072;
export const MCI_DGV_CUE_NOSHOW = 262144;
export const MCI_DGV_CUT_AT = 65536;
export const MCI_DGV_CUT_AUDIO_STREAM = 131072;
export const MCI_DGV_CUT_VIDEO_STREAM = 262144;
export const MCI_DGV_DELETE_AT = 65536;
export const MCI_DGV_DELETE_AUDIO_STREAM = 131072;
export const MCI_DGV_DELETE_VIDEO_STREAM = 262144;
export const MCI_DGV_FREEZE_AT = 65536;
export const MCI_DGV_FREEZE_OUTSIDE = 131072;
export const MCI_DGV_INFO_TEXT = 65536;
export const MCI_DGV_INFO_ITEM = 131072;
export const MCI_INFO_VERSION = 1024;
export const MCI_DGV_INFO_USAGE = 16384;
export const MCI_DGV_INFO_AUDIO_QUALITY = 16385;
export const MCI_DGV_INFO_STILL_QUALITY = 16386;
export const MCI_DGV_INFO_VIDEO_QUALITY = 16387;
export const MCI_DGV_INFO_AUDIO_ALG = 16388;
export const MCI_DGV_INFO_STILL_ALG = 16389;
export const MCI_DGV_INFO_VIDEO_ALG = 16390;
export const MCI_DGV_LIST_ITEM = 65536;
export const MCI_DGV_LIST_COUNT = 131072;
export const MCI_DGV_LIST_NUMBER = 262144;
export const MCI_DGV_LIST_ALG = 524288;
export const MCI_DGV_LIST_AUDIO_ALG = 16384;
export const MCI_DGV_LIST_AUDIO_QUALITY = 16385;
export const MCI_DGV_LIST_AUDIO_STREAM = 16386;
export const MCI_DGV_LIST_STILL_ALG = 16387;
export const MCI_DGV_LIST_STILL_QUALITY = 16388;
export const MCI_DGV_LIST_VIDEO_ALG = 16389;
export const MCI_DGV_LIST_VIDEO_QUALITY = 16390;
export const MCI_DGV_LIST_VIDEO_STREAM = 16391;
export const MCI_DGV_LIST_VIDEO_SOURCE = 16392;
export const MCI_DGV_MONITOR_METHOD = 65536;
export const MCI_DGV_MONITOR_SOURCE = 131072;
export const MCI_DGV_MONITOR_INPUT = 16384;
export const MCI_DGV_MONITOR_FILE = 16385;
export const MCI_DGV_OPEN_WS = 65536;
export const MCI_DGV_OPEN_PARENT = 131072;
export const MCI_DGV_OPEN_NOSTATIC = 262144;
export const MCI_DGV_OPEN_16BIT = 524288;
export const MCI_DGV_OPEN_32BIT = 1048576;
export const MCI_DGV_PASTE_AT = 65536;
export const MCI_DGV_PASTE_AUDIO_STREAM = 131072;
export const MCI_DGV_PASTE_VIDEO_STREAM = 262144;
export const MCI_DGV_PASTE_INSERT = 524288;
export const MCI_DGV_PASTE_OVERWRITE = 1048576;
export const MCI_DGV_PLAY_REPEAT = 65536;
export const MCI_DGV_PLAY_REVERSE = 131072;
export const MCI_DGV_RECT = 65536;
export const MCI_DGV_PUT_SOURCE = 131072;
export const MCI_DGV_PUT_DESTINATION = 262144;
export const MCI_DGV_PUT_FRAME = 524288;
export const MCI_DGV_PUT_VIDEO = 1048576;
export const MCI_DGV_PUT_WINDOW = 2097152;
export const MCI_DGV_PUT_CLIENT = 4194304;
export const MCI_QUALITY_ITEM = 65536;
export const MCI_QUALITY_NAME = 131072;
export const MCI_QUALITY_ALG = 262144;
export const MCI_QUALITY_DIALOG = 524288;
export const MCI_QUALITY_HANDLE = 1048576;
export const MCI_QUALITY_ITEM_AUDIO = 16384;
export const MCI_QUALITY_ITEM_STILL = 16385;
export const MCI_QUALITY_ITEM_VIDEO = 16386;
export const MCI_DGV_REALIZE_NORM = 65536;
export const MCI_DGV_REALIZE_BKGD = 131072;
export const MCI_DGV_RECORD_HOLD = 131072;
export const MCI_DGV_RECORD_AUDIO_STREAM = 262144;
export const MCI_DGV_RECORD_VIDEO_STREAM = 524288;
export const MCI_DGV_RESERVE_IN = 65536;
export const MCI_DGV_RESERVE_SIZE = 131072;
export const MCI_DGV_RESTORE_FROM = 65536;
export const MCI_DGV_RESTORE_AT = 131072;
export const MCI_DGV_SAVE_ABORT = 131072;
export const MCI_DGV_SAVE_KEEPRESERVE = 262144;
export const MCI_DGV_SET_SEEK_EXACTLY = 65536;
export const MCI_DGV_SET_SPEED = 131072;
export const MCI_DGV_SET_STILL = 262144;
export const MCI_DGV_SET_FILEFORMAT = 524288;
export const MCI_DGV_SETAUDIO_OVER = 65536;
export const MCI_DGV_SETAUDIO_CLOCKTIME = 131072;
export const MCI_DGV_SETAUDIO_ALG = 262144;
export const MCI_DGV_SETAUDIO_QUALITY = 524288;
export const MCI_DGV_SETAUDIO_RECORD = 1048576;
export const MCI_DGV_SETAUDIO_LEFT = 2097152;
export const MCI_DGV_SETAUDIO_RIGHT = 4194304;
export const MCI_DGV_SETAUDIO_ITEM = 8388608;
export const MCI_DGV_SETAUDIO_VALUE = 16777216;
export const MCI_DGV_SETAUDIO_INPUT = 33554432;
export const MCI_DGV_SETAUDIO_OUTPUT = 67108864;
export const MCI_DGV_SETAUDIO_TREBLE = 16384;
export const MCI_DGV_SETAUDIO_BASS = 16385;
export const MCI_DGV_SETAUDIO_VOLUME = 16386;
export const MCI_DGV_SETAUDIO_STREAM = 16387;
export const MCI_DGV_SETAUDIO_SOURCE = 16388;
export const MCI_DGV_SETAUDIO_SAMPLESPERSEC = 16389;
export const MCI_DGV_SETAUDIO_AVGBYTESPERSEC = 16390;
export const MCI_DGV_SETAUDIO_BLOCKALIGN = 16391;
export const MCI_DGV_SETAUDIO_BITSPERSAMPLE = 16392;
export const MCI_DGV_SETAUDIO_SOURCE_STEREO = 0;
export const MCI_DGV_SETAUDIO_SOURCE_LEFT = 1;
export const MCI_DGV_SETAUDIO_SOURCE_RIGHT = 2;
export const MCI_DGV_SETAUDIO_SOURCE_AVERAGE = 16384;
export const MCI_DGV_SETVIDEO_QUALITY = 65536;
export const MCI_DGV_SETVIDEO_ALG = 131072;
export const MCI_DGV_SETVIDEO_CLOCKTIME = 262144;
export const MCI_DGV_SETVIDEO_SRC_NUMBER = 524288;
export const MCI_DGV_SETVIDEO_ITEM = 1048576;
export const MCI_DGV_SETVIDEO_OVER = 2097152;
export const MCI_DGV_SETVIDEO_RECORD = 4194304;
export const MCI_DGV_SETVIDEO_STILL = 8388608;
export const MCI_DGV_SETVIDEO_VALUE = 16777216;
export const MCI_DGV_SETVIDEO_INPUT = 33554432;
export const MCI_DGV_SETVIDEO_OUTPUT = 67108864;
export const MCI_DGV_SETVIDEO_SRC_NTSC = 16384;
export const MCI_DGV_SETVIDEO_SRC_RGB = 16385;
export const MCI_DGV_SETVIDEO_SRC_SVIDEO = 16386;
export const MCI_DGV_SETVIDEO_SRC_PAL = 16387;
export const MCI_DGV_SETVIDEO_SRC_SECAM = 16388;
export const MCI_DGV_SETVIDEO_SRC_GENERIC = 16389;
export const MCI_DGV_SETVIDEO_BRIGHTNESS = 16384;
export const MCI_DGV_SETVIDEO_COLOR = 16385;
export const MCI_DGV_SETVIDEO_CONTRAST = 16386;
export const MCI_DGV_SETVIDEO_TINT = 16387;
export const MCI_DGV_SETVIDEO_SHARPNESS = 16388;
export const MCI_DGV_SETVIDEO_GAMMA = 16389;
export const MCI_DGV_SETVIDEO_STREAM = 16390;
export const MCI_DGV_SETVIDEO_PALHANDLE = 16391;
export const MCI_DGV_SETVIDEO_FRAME_RATE = 16392;
export const MCI_DGV_SETVIDEO_SOURCE = 16393;
export const MCI_DGV_SETVIDEO_KEY_INDEX = 16394;
export const MCI_DGV_SETVIDEO_KEY_COLOR = 16395;
export const MCI_DGV_SETVIDEO_BITSPERPEL = 16396;
export const MCI_DGV_SIGNAL_AT = 65536;
export const MCI_DGV_SIGNAL_EVERY = 131072;
export const MCI_DGV_SIGNAL_USERVAL = 262144;
export const MCI_DGV_SIGNAL_CANCEL = 524288;
export const MCI_DGV_SIGNAL_POSITION = 1048576;
export const MCI_DGV_STATUS_NOMINAL = 131072;
export const MCI_DGV_STATUS_REFERENCE = 262144;
export const MCI_DGV_STATUS_LEFT = 524288;
export const MCI_DGV_STATUS_RIGHT = 1048576;
export const MCI_DGV_STATUS_DISKSPACE = 2097152;
export const MCI_DGV_STATUS_INPUT = 4194304;
export const MCI_DGV_STATUS_OUTPUT = 8388608;
export const MCI_DGV_STATUS_RECORD = 16777216;
export const MCI_DGV_STATUS_AUDIO_INPUT = 16384;
export const MCI_DGV_STATUS_HWND = 16385;
export const MCI_DGV_STATUS_SPEED = 16387;
export const MCI_DGV_STATUS_HPAL = 16388;
export const MCI_DGV_STATUS_BRIGHTNESS = 16389;
export const MCI_DGV_STATUS_COLOR = 16390;
export const MCI_DGV_STATUS_CONTRAST = 16391;
export const MCI_DGV_STATUS_FILEFORMAT = 16392;
export const MCI_DGV_STATUS_AUDIO_SOURCE = 16393;
export const MCI_DGV_STATUS_GAMMA = 16394;
export const MCI_DGV_STATUS_MONITOR = 16395;
export const MCI_DGV_STATUS_MONITOR_METHOD = 16396;
export const MCI_DGV_STATUS_FRAME_RATE = 16398;
export const MCI_DGV_STATUS_BASS = 16399;
export const MCI_DGV_STATUS_SIZE = 16400;
export const MCI_DGV_STATUS_SEEK_EXACTLY = 16401;
export const MCI_DGV_STATUS_SHARPNESS = 16402;
export const MCI_DGV_STATUS_SMPTE = 16403;
export const MCI_DGV_STATUS_AUDIO = 16404;
export const MCI_DGV_STATUS_TINT = 16405;
export const MCI_DGV_STATUS_TREBLE = 16406;
export const MCI_DGV_STATUS_UNSAVED = 16407;
export const MCI_DGV_STATUS_VIDEO = 16408;
export const MCI_DGV_STATUS_VOLUME = 16409;
export const MCI_DGV_STATUS_AUDIO_RECORD = 16410;
export const MCI_DGV_STATUS_VIDEO_SOURCE = 16411;
export const MCI_DGV_STATUS_VIDEO_RECORD = 16412;
export const MCI_DGV_STATUS_STILL_FILEFORMAT = 16413;
export const MCI_DGV_STATUS_VIDEO_SRC_NUM = 16414;
export const MCI_DGV_STATUS_FILE_MODE = 16415;
export const MCI_DGV_STATUS_FILE_COMPLETION = 16416;
export const MCI_DGV_STATUS_WINDOW_VISIBLE = 16417;
export const MCI_DGV_STATUS_WINDOW_MINIMIZED = 16418;
export const MCI_DGV_STATUS_WINDOW_MAXIMIZED = 16419;
export const MCI_DGV_STATUS_KEY_INDEX = 16420;
export const MCI_DGV_STATUS_KEY_COLOR = 16421;
export const MCI_DGV_STATUS_PAUSE_MODE = 16422;
export const MCI_DGV_STATUS_SAMPLESPERSEC = 16423;
export const MCI_DGV_STATUS_AVGBYTESPERSEC = 16424;
export const MCI_DGV_STATUS_BLOCKALIGN = 16425;
export const MCI_DGV_STATUS_BITSPERSAMPLE = 16426;
export const MCI_DGV_STATUS_BITSPERPEL = 16427;
export const MCI_DGV_STATUS_FORWARD = 16428;
export const MCI_DGV_STATUS_AUDIO_STREAM = 16429;
export const MCI_DGV_STATUS_VIDEO_STREAM = 16430;
export const MCI_DGV_STEP_REVERSE = 65536;
export const MCI_DGV_STEP_FRAMES = 131072;
export const MCI_DGV_STOP_HOLD = 65536;
export const MCI_DGV_UPDATE_HDC = 131072;
export const MCI_DGV_UPDATE_PAINT = 262144;
export const MCI_DGV_WHERE_SOURCE = 131072;
export const MCI_DGV_WHERE_DESTINATION = 262144;
export const MCI_DGV_WHERE_FRAME = 524288;
export const MCI_DGV_WHERE_VIDEO = 1048576;
export const MCI_DGV_WHERE_WINDOW = 2097152;
export const MCI_DGV_WHERE_MAX = 4194304;
export const MCI_DGV_WINDOW_HWND = 65536;
export const MCI_DGV_WINDOW_STATE = 262144;
export const MCI_DGV_WINDOW_TEXT = 524288;
export const MCI_DGV_WINDOW_DEFAULT = 0;
export const MM_CREATIVE = 2;
export const MM_MEDIAVISION = 3;
export const MM_FUJITSU = 4;
export const MM_PRAGMATRAX = 5;
export const MM_CYRIX = 6;
export const MM_PHILIPS_SPEECH_PROCESSING = 7;
export const MM_NETXL = 8;
export const MM_ZYXEL = 9;
export const MM_BECUBED = 10;
export const MM_AARDVARK = 11;
export const MM_BINTEC = 12;
export const MM_HEWLETT_PACKARD = 13;
export const MM_ACULAB = 14;
export const MM_FAITH = 15;
export const MM_MITEL = 16;
export const MM_QUANTUM3D = 17;
export const MM_SNI = 18;
export const MM_EMU = 19;
export const MM_ARTISOFT = 20;
export const MM_TURTLE_BEACH = 21;
export const MM_IBM = 22;
export const MM_VOCALTEC = 23;
export const MM_ROLAND = 24;
export const MM_DSP_SOLUTIONS = 25;
export const MM_NEC = 26;
export const MM_ATI = 27;
export const MM_WANGLABS = 28;
export const MM_TANDY = 29;
export const MM_VOYETRA = 30;
export const MM_ANTEX = 31;
export const MM_ICL_PS = 32;
export const MM_INTEL = 33;
export const MM_GRAVIS = 34;
export const MM_VAL = 35;
export const MM_INTERACTIVE = 36;
export const MM_YAMAHA = 37;
export const MM_EVEREX = 38;
export const MM_ECHO = 39;
export const MM_SIERRA = 40;
export const MM_CAT = 41;
export const MM_APPS = 42;
export const MM_DSP_GROUP = 43;
export const MM_MELABS = 44;
export const MM_COMPUTER_FRIENDS = 45;
export const MM_ESS = 46;
export const MM_AUDIOFILE = 47;
export const MM_MOTOROLA = 48;
export const MM_CANOPUS = 49;
export const MM_EPSON = 50;
export const MM_TRUEVISION = 51;
export const MM_AZTECH = 52;
export const MM_VIDEOLOGIC = 53;
export const MM_SCALACS = 54;
export const MM_KORG = 55;
export const MM_APT = 56;
export const MM_ICS = 57;
export const MM_ITERATEDSYS = 58;
export const MM_METHEUS = 59;
export const MM_LOGITECH = 60;
export const MM_WINNOV = 61;
export const MM_NCR = 62;
export const MM_EXAN = 63;
export const MM_AST = 64;
export const MM_WILLOWPOND = 65;
export const MM_SONICFOUNDRY = 66;
export const MM_VITEC = 67;
export const MM_MOSCOM = 68;
export const MM_SILICONSOFT = 69;
export const MM_TERRATEC = 70;
export const MM_MEDIASONIC = 71;
export const MM_SANYO = 72;
export const MM_SUPERMAC = 73;
export const MM_AUDIOPT = 74;
export const MM_NOGATECH = 75;
export const MM_SPEECHCOMP = 76;
export const MM_AHEAD = 77;
export const MM_DOLBY = 78;
export const MM_OKI = 79;
export const MM_AURAVISION = 80;
export const MM_OLIVETTI = 81;
export const MM_IOMAGIC = 82;
export const MM_MATSUSHITA = 83;
export const MM_CONTROLRES = 84;
export const MM_XEBEC = 85;
export const MM_NEWMEDIA = 86;
export const MM_NMS = 87;
export const MM_LYRRUS = 88;
export const MM_COMPUSIC = 89;
export const MM_OPTI = 90;
export const MM_ADLACC = 91;
export const MM_COMPAQ = 92;
export const MM_DIALOGIC = 93;
export const MM_INSOFT = 94;
export const MM_MPTUS = 95;
export const MM_WEITEK = 96;
export const MM_LERNOUT_AND_HAUSPIE = 97;
export const MM_QCIAR = 98;
export const MM_APPLE = 99;
export const MM_DIGITAL = 100;
export const MM_MOTU = 101;
export const MM_WORKBIT = 102;
export const MM_OSITECH = 103;
export const MM_MIRO = 104;
export const MM_CIRRUSLOGIC = 105;
export const MM_ISOLUTION = 106;
export const MM_HORIZONS = 107;
export const MM_CONCEPTS = 108;
export const MM_VTG = 109;
export const MM_RADIUS = 110;
export const MM_ROCKWELL = 111;
export const MM_XYZ = 112;
export const MM_OPCODE = 113;
export const MM_VOXWARE = 114;
export const MM_NORTHERN_TELECOM = 115;
export const MM_APICOM = 116;
export const MM_GRANDE = 117;
export const MM_ADDX = 118;
export const MM_WILDCAT = 119;
export const MM_RHETOREX = 120;
export const MM_BROOKTREE = 121;
export const MM_ENSONIQ = 125;
export const MM_FAST = 126;
export const MM_NVIDIA = 127;
export const MM_OKSORI = 128;
export const MM_DIACOUSTICS = 129;
export const MM_GULBRANSEN = 130;
export const MM_KAY_ELEMETRICS = 131;
export const MM_CRYSTAL = 132;
export const MM_SPLASH_STUDIOS = 133;
export const MM_QUARTERDECK = 134;
export const MM_TDK = 135;
export const MM_DIGITAL_AUDIO_LABS = 136;
export const MM_SEERSYS = 137;
export const MM_PICTURETEL = 138;
export const MM_ATT_MICROELECTRONICS = 139;
export const MM_OSPREY = 140;
export const MM_MEDIATRIX = 141;
export const MM_SOUNDESIGNS = 142;
export const MM_ALDIGITAL = 143;
export const MM_SPECTRUM_SIGNAL_PROCESSING = 144;
export const MM_ECS = 145;
export const MM_AMD = 146;
export const MM_COREDYNAMICS = 147;
export const MM_CANAM = 148;
export const MM_SOFTSOUND = 149;
export const MM_NORRIS = 150;
export const MM_DDD = 151;
export const MM_EUPHONICS = 152;
export const MM_PRECEPT = 153;
export const MM_CRYSTAL_NET = 154;
export const MM_CHROMATIC = 155;
export const MM_VOICEINFO = 156;
export const MM_VIENNASYS = 157;
export const MM_CONNECTIX = 158;
export const MM_GADGETLABS = 159;
export const MM_FRONTIER = 160;
export const MM_VIONA = 161;
export const MM_CASIO = 162;
export const MM_DIAMONDMM = 163;
export const MM_S3 = 164;
export const MM_DVISION = 165;
export const MM_NETSCAPE = 166;
export const MM_SOUNDSPACE = 167;
export const MM_VANKOEVERING = 168;
export const MM_QTEAM = 169;
export const MM_ZEFIRO = 170;
export const MM_STUDER = 171;
export const MM_FRAUNHOFER_IIS = 172;
export const MM_QUICKNET = 173;
export const MM_ALARIS = 174;
export const MM_SICRESOURCE = 175;
export const MM_NEOMAGIC = 176;
export const MM_MERGING_TECHNOLOGIES = 177;
export const MM_XIRLINK = 178;
export const MM_COLORGRAPH = 179;
export const MM_OTI = 180;
export const MM_AUREAL = 181;
export const MM_VIVO = 182;
export const MM_SHARP = 183;
export const MM_LUCENT = 184;
export const MM_ATT = 185;
export const MM_SUNCOM = 186;
export const MM_SORVIS = 187;
export const MM_INVISION = 188;
export const MM_BERKOM = 189;
export const MM_MARIAN = 190;
export const MM_DPSINC = 191;
export const MM_BCB = 192;
export const MM_MOTIONPIXELS = 193;
export const MM_QDESIGN = 194;
export const MM_NMP = 195;
export const MM_DATAFUSION = 196;
export const MM_DUCK = 197;
export const MM_FTR = 198;
export const MM_BERCOS = 199;
export const MM_ONLIVE = 200;
export const MM_SIEMENS_SBC = 201;
export const MM_TERALOGIC = 202;
export const MM_PHONET = 203;
export const MM_WINBOND = 204;
export const MM_VIRTUALMUSIC = 205;
export const MM_ENET = 206;
export const MM_GUILLEMOT = 207;
export const MM_EMAGIC = 208;
export const MM_MWM = 209;
export const MM_PACIFICRESEARCH = 210;
export const MM_SIPROLAB = 211;
export const MM_LYNX = 212;
export const MM_SPECTRUM_PRODUCTIONS = 213;
export const MM_DICTAPHONE = 214;
export const MM_QUALCOMM = 215;
export const MM_RZS = 216;
export const MM_AUDIOSCIENCE = 217;
export const MM_PINNACLE = 218;
export const MM_EES = 219;
export const MM_HAFTMANN = 220;
export const MM_LUCID = 221;
export const MM_HEADSPACE = 222;
export const MM_UNISYS = 223;
export const MM_LUMINOSITI = 224;
export const MM_ACTIVEVOICE = 225;
export const MM_DTS = 226;
export const MM_DIGIGRAM = 227;
export const MM_SOFTLAB_NSK = 228;
export const MM_FORTEMEDIA = 229;
export const MM_SONORUS = 230;
export const MM_ARRAY = 231;
export const MM_DATARAN = 232;
export const MM_I_LINK = 233;
export const MM_SELSIUS_SYSTEMS = 234;
export const MM_ADMOS = 235;
export const MM_LEXICON = 236;
export const MM_SGI = 237;
export const MM_IPI = 238;
export const MM_ICE = 239;
export const MM_VQST = 240;
export const MM_ETEK = 241;
export const MM_CS = 242;
export const MM_ALESIS = 243;
export const MM_INTERNET = 244;
export const MM_SONY = 245;
export const MM_HYPERACTIVE = 246;
export const MM_UHER_INFORMATIC = 247;
export const MM_SYDEC_NV = 248;
export const MM_FLEXION = 249;
export const MM_VIA = 250;
export const MM_MICRONAS = 251;
export const MM_ANALOGDEVICES = 252;
export const MM_HP = 253;
export const MM_MATROX_DIV = 254;
export const MM_QUICKAUDIO = 255;
export const MM_YOUCOM = 256;
export const MM_RICHMOND = 257;
export const MM_IODD = 258;
export const MM_ICCC = 259;
export const MM_3COM = 260;
export const MM_MALDEN = 261;
export const MM_3DFX = 262;
export const MM_MINDMAKER = 263;
export const MM_TELEKOL = 264;
export const MM_ST_MICROELECTRONICS = 265;
export const MM_ALGOVISION = 266;
export const MM_UNMAPPED = 65535;
export const MM_PID_UNMAPPED = 65535;
export const MM_PCSPEAKER_WAVEOUT = 13;
export const MM_MSFT_WSS_WAVEIN = 14;
export const MM_MSFT_WSS_WAVEOUT = 15;
export const MM_MSFT_WSS_FMSYNTH_STEREO = 16;
export const MM_MSFT_WSS_MIXER = 17;
export const MM_MSFT_WSS_OEM_WAVEIN = 18;
export const MM_MSFT_WSS_OEM_WAVEOUT = 19;
export const MM_MSFT_WSS_OEM_FMSYNTH_STEREO = 20;
export const MM_MSFT_WSS_AUX = 21;
export const MM_MSFT_WSS_OEM_AUX = 22;
export const MM_MSFT_GENERIC_WAVEIN = 23;
export const MM_MSFT_GENERIC_WAVEOUT = 24;
export const MM_MSFT_GENERIC_MIDIIN = 25;
export const MM_MSFT_GENERIC_MIDIOUT = 26;
export const MM_MSFT_GENERIC_MIDISYNTH = 27;
export const MM_MSFT_GENERIC_AUX_LINE = 28;
export const MM_MSFT_GENERIC_AUX_MIC = 29;
export const MM_MSFT_GENERIC_AUX_CD = 30;
export const MM_MSFT_WSS_OEM_MIXER = 31;
export const MM_MSFT_MSACM = 32;
export const MM_MSFT_ACM_MSADPCM = 33;
export const MM_MSFT_ACM_IMAADPCM = 34;
export const MM_MSFT_ACM_MSFILTER = 35;
export const MM_MSFT_ACM_GSM610 = 36;
export const MM_MSFT_ACM_G711 = 37;
export const MM_MSFT_ACM_PCM = 38;
export const MM_WSS_SB16_WAVEIN = 39;
export const MM_WSS_SB16_WAVEOUT = 40;
export const MM_WSS_SB16_MIDIIN = 41;
export const MM_WSS_SB16_MIDIOUT = 42;
export const MM_WSS_SB16_SYNTH = 43;
export const MM_WSS_SB16_AUX_LINE = 44;
export const MM_WSS_SB16_AUX_CD = 45;
export const MM_WSS_SB16_MIXER = 46;
export const MM_WSS_SBPRO_WAVEIN = 47;
export const MM_WSS_SBPRO_WAVEOUT = 48;
export const MM_WSS_SBPRO_MIDIIN = 49;
export const MM_WSS_SBPRO_MIDIOUT = 50;
export const MM_WSS_SBPRO_SYNTH = 51;
export const MM_WSS_SBPRO_AUX_LINE = 52;
export const MM_WSS_SBPRO_AUX_CD = 53;
export const MM_WSS_SBPRO_MIXER = 54;
export const MM_MSFT_WSS_NT_WAVEIN = 55;
export const MM_MSFT_WSS_NT_WAVEOUT = 56;
export const MM_MSFT_WSS_NT_FMSYNTH_STEREO = 57;
export const MM_MSFT_WSS_NT_MIXER = 58;
export const MM_MSFT_WSS_NT_AUX = 59;
export const MM_MSFT_SB16_WAVEIN = 60;
export const MM_MSFT_SB16_WAVEOUT = 61;
export const MM_MSFT_SB16_MIDIIN = 62;
export const MM_MSFT_SB16_MIDIOUT = 63;
export const MM_MSFT_SB16_SYNTH = 64;
export const MM_MSFT_SB16_AUX_LINE = 65;
export const MM_MSFT_SB16_AUX_CD = 66;
export const MM_MSFT_SB16_MIXER = 67;
export const MM_MSFT_SBPRO_WAVEIN = 68;
export const MM_MSFT_SBPRO_WAVEOUT = 69;
export const MM_MSFT_SBPRO_MIDIIN = 70;
export const MM_MSFT_SBPRO_MIDIOUT = 71;
export const MM_MSFT_SBPRO_SYNTH = 72;
export const MM_MSFT_SBPRO_AUX_LINE = 73;
export const MM_MSFT_SBPRO_AUX_CD = 74;
export const MM_MSFT_SBPRO_MIXER = 75;
export const MM_MSFT_MSOPL_SYNTH = 76;
export const MM_MSFT_VMDMS_LINE_WAVEIN = 80;
export const MM_MSFT_VMDMS_LINE_WAVEOUT = 81;
export const MM_MSFT_VMDMS_HANDSET_WAVEIN = 82;
export const MM_MSFT_VMDMS_HANDSET_WAVEOUT = 83;
export const MM_MSFT_VMDMW_LINE_WAVEIN = 84;
export const MM_MSFT_VMDMW_LINE_WAVEOUT = 85;
export const MM_MSFT_VMDMW_HANDSET_WAVEIN = 86;
export const MM_MSFT_VMDMW_HANDSET_WAVEOUT = 87;
export const MM_MSFT_VMDMW_MIXER = 88;
export const MM_MSFT_VMDM_GAME_WAVEOUT = 89;
export const MM_MSFT_VMDM_GAME_WAVEIN = 90;
export const MM_MSFT_ACM_MSNAUDIO = 91;
export const MM_MSFT_ACM_MSG723 = 92;
export const MM_MSFT_ACM_MSRT24 = 93;
export const MM_MSFT_WDMAUDIO_WAVEOUT = 100;
export const MM_MSFT_WDMAUDIO_WAVEIN = 101;
export const MM_MSFT_WDMAUDIO_MIDIOUT = 102;
export const MM_MSFT_WDMAUDIO_MIDIIN = 103;
export const MM_MSFT_WDMAUDIO_MIXER = 104;
export const MM_MSFT_WDMAUDIO_AUX = 105;
export const MM_CREATIVE_SB15_WAVEIN = 1;
export const MM_CREATIVE_SB20_WAVEIN = 2;
export const MM_CREATIVE_SBPRO_WAVEIN = 3;
export const MM_CREATIVE_SBP16_WAVEIN = 4;
export const MM_CREATIVE_PHNBLST_WAVEIN = 5;
export const MM_CREATIVE_SB15_WAVEOUT = 101;
export const MM_CREATIVE_SB20_WAVEOUT = 102;
export const MM_CREATIVE_SBPRO_WAVEOUT = 103;
export const MM_CREATIVE_SBP16_WAVEOUT = 104;
export const MM_CREATIVE_PHNBLST_WAVEOUT = 105;
export const MM_CREATIVE_MIDIOUT = 201;
export const MM_CREATIVE_MIDIIN = 202;
export const MM_CREATIVE_FMSYNTH_MONO = 301;
export const MM_CREATIVE_FMSYNTH_STEREO = 302;
export const MM_CREATIVE_MIDI_AWE32 = 303;
export const MM_CREATIVE_AUX_CD = 401;
export const MM_CREATIVE_AUX_LINE = 402;
export const MM_CREATIVE_AUX_MIC = 403;
export const MM_CREATIVE_AUX_MASTER = 404;
export const MM_CREATIVE_AUX_PCSPK = 405;
export const MM_CREATIVE_AUX_WAVE = 406;
export const MM_CREATIVE_AUX_MIDI = 407;
export const MM_CREATIVE_SBPRO_MIXER = 408;
export const MM_CREATIVE_SB16_MIXER = 409;
export const MM_MEDIAVISION_PROAUDIO = 16;
export const MM_PROAUD_MIDIOUT = 17;
export const MM_PROAUD_MIDIIN = 18;
export const MM_PROAUD_SYNTH = 19;
export const MM_PROAUD_WAVEOUT = 20;
export const MM_PROAUD_WAVEIN = 21;
export const MM_PROAUD_MIXER = 22;
export const MM_PROAUD_AUX = 23;
export const MM_MEDIAVISION_THUNDER = 32;
export const MM_THUNDER_SYNTH = 35;
export const MM_THUNDER_WAVEOUT = 36;
export const MM_THUNDER_WAVEIN = 37;
export const MM_THUNDER_AUX = 39;
export const MM_MEDIAVISION_TPORT = 64;
export const MM_TPORT_WAVEOUT = 65;
export const MM_TPORT_WAVEIN = 66;
export const MM_TPORT_SYNTH = 67;
export const MM_MEDIAVISION_PROAUDIO_PLUS = 80;
export const MM_PROAUD_PLUS_MIDIOUT = 81;
export const MM_PROAUD_PLUS_MIDIIN = 82;
export const MM_PROAUD_PLUS_SYNTH = 83;
export const MM_PROAUD_PLUS_WAVEOUT = 84;
export const MM_PROAUD_PLUS_WAVEIN = 85;
export const MM_PROAUD_PLUS_MIXER = 86;
export const MM_PROAUD_PLUS_AUX = 87;
export const MM_MEDIAVISION_PROAUDIO_16 = 96;
export const MM_PROAUD_16_MIDIOUT = 97;
export const MM_PROAUD_16_MIDIIN = 98;
export const MM_PROAUD_16_SYNTH = 99;
export const MM_PROAUD_16_WAVEOUT = 100;
export const MM_PROAUD_16_WAVEIN = 101;
export const MM_PROAUD_16_MIXER = 102;
export const MM_PROAUD_16_AUX = 103;
export const MM_MEDIAVISION_PROSTUDIO_16 = 96;
export const MM_STUDIO_16_MIDIOUT = 97;
export const MM_STUDIO_16_MIDIIN = 98;
export const MM_STUDIO_16_SYNTH = 99;
export const MM_STUDIO_16_WAVEOUT = 100;
export const MM_STUDIO_16_WAVEIN = 101;
export const MM_STUDIO_16_MIXER = 102;
export const MM_STUDIO_16_AUX = 103;
export const MM_MEDIAVISION_CDPC = 112;
export const MM_CDPC_MIDIOUT = 113;
export const MM_CDPC_MIDIIN = 114;
export const MM_CDPC_SYNTH = 115;
export const MM_CDPC_WAVEOUT = 116;
export const MM_CDPC_WAVEIN = 117;
export const MM_CDPC_MIXER = 118;
export const MM_CDPC_AUX = 119;
export const MM_MEDIAVISION_OPUS1208 = 128;
export const MM_OPUS401_MIDIOUT = 129;
export const MM_OPUS401_MIDIIN = 130;
export const MM_OPUS1208_SYNTH = 131;
export const MM_OPUS1208_WAVEOUT = 132;
export const MM_OPUS1208_WAVEIN = 133;
export const MM_OPUS1208_MIXER = 134;
export const MM_OPUS1208_AUX = 135;
export const MM_MEDIAVISION_OPUS1216 = 144;
export const MM_OPUS1216_MIDIOUT = 145;
export const MM_OPUS1216_MIDIIN = 146;
export const MM_OPUS1216_SYNTH = 147;
export const MM_OPUS1216_WAVEOUT = 148;
export const MM_OPUS1216_WAVEIN = 149;
export const MM_OPUS1216_MIXER = 150;
export const MM_OPUS1216_AUX = 151;
export const MM_CYRIX_XASYNTH = 1;
export const MM_CYRIX_XAMIDIIN = 2;
export const MM_CYRIX_XAMIDIOUT = 3;
export const MM_CYRIX_XAWAVEIN = 4;
export const MM_CYRIX_XAWAVEOUT = 5;
export const MM_CYRIX_XAAUX = 6;
export const MM_CYRIX_XAMIXER = 7;
export const MM_PHILIPS_ACM_LPCBB = 1;
export const MM_NETXL_XLVIDEO = 1;
export const MM_ZYXEL_ACM_ADPCM = 1;
export const MM_AARDVARK_STUDIO12_WAVEOUT = 1;
export const MM_AARDVARK_STUDIO12_WAVEIN = 2;
export const MM_AARDVARK_STUDIO88_WAVEOUT = 3;
export const MM_AARDVARK_STUDIO88_WAVEIN = 4;
export const MM_BINTEC_TAPI_WAVE = 1;
export const MM_HEWLETT_PACKARD_CU_CODEC = 1;
export const MM_MITEL_TALKTO_LINE_WAVEOUT = 100;
export const MM_MITEL_TALKTO_LINE_WAVEIN = 101;
export const MM_MITEL_TALKTO_HANDSET_WAVEOUT = 102;
export const MM_MITEL_TALKTO_HANDSET_WAVEIN = 103;
export const MM_MITEL_TALKTO_BRIDGED_WAVEOUT = 104;
export const MM_MITEL_TALKTO_BRIDGED_WAVEIN = 105;
export const MM_MITEL_MPA_HANDSET_WAVEOUT = 200;
export const MM_MITEL_MPA_HANDSET_WAVEIN = 201;
export const MM_MITEL_MPA_HANDSFREE_WAVEOUT = 202;
export const MM_MITEL_MPA_HANDSFREE_WAVEIN = 203;
export const MM_MITEL_MPA_LINE1_WAVEOUT = 204;
export const MM_MITEL_MPA_LINE1_WAVEIN = 205;
export const MM_MITEL_MPA_LINE2_WAVEOUT = 206;
export const MM_MITEL_MPA_LINE2_WAVEIN = 207;
export const MM_MITEL_MEDIAPATH_WAVEOUT = 300;
export const MM_MITEL_MEDIAPATH_WAVEIN = 301;
export const MM_SNI_ACM_G721 = 1;
export const MM_EMU_APSSYNTH = 1;
export const MM_EMU_APSMIDIIN = 2;
export const MM_EMU_APSMIDIOUT = 3;
export const MM_EMU_APSWAVEIN = 4;
export const MM_EMU_APSWAVEOUT = 5;
export const MM_ARTISOFT_SBWAVEIN = 1;
export const MM_ARTISOFT_SBWAVEOUT = 2;
export const MM_TBS_TROPEZ_WAVEIN = 37;
export const MM_TBS_TROPEZ_WAVEOUT = 38;
export const MM_TBS_TROPEZ_AUX1 = 39;
export const MM_TBS_TROPEZ_AUX2 = 40;
export const MM_TBS_TROPEZ_LINE = 41;
export const MM_MMOTION_WAVEAUX = 1;
export const MM_MMOTION_WAVEOUT = 2;
export const MM_MMOTION_WAVEIN = 3;
export const MM_IBM_PCMCIA_WAVEIN = 11;
export const MM_IBM_PCMCIA_WAVEOUT = 12;
export const MM_IBM_PCMCIA_SYNTH = 13;
export const MM_IBM_PCMCIA_MIDIIN = 14;
export const MM_IBM_PCMCIA_MIDIOUT = 15;
export const MM_IBM_PCMCIA_AUX = 16;
export const MM_IBM_THINKPAD200 = 17;
export const MM_IBM_MWAVE_WAVEIN = 18;
export const MM_IBM_MWAVE_WAVEOUT = 19;
export const MM_IBM_MWAVE_MIXER = 20;
export const MM_IBM_MWAVE_MIDIIN = 21;
export const MM_IBM_MWAVE_MIDIOUT = 22;
export const MM_IBM_MWAVE_AUX = 23;
export const MM_IBM_WC_MIDIOUT = 30;
export const MM_IBM_WC_WAVEOUT = 31;
export const MM_IBM_WC_MIXEROUT = 33;
export const MM_VOCALTEC_WAVEOUT = 1;
export const MM_VOCALTEC_WAVEIN = 2;
export const MM_ROLAND_RAP10_MIDIOUT = 10;
export const MM_ROLAND_RAP10_MIDIIN = 11;
export const MM_ROLAND_RAP10_SYNTH = 12;
export const MM_ROLAND_RAP10_WAVEOUT = 13;
export const MM_ROLAND_RAP10_WAVEIN = 14;
export const MM_ROLAND_MPU401_MIDIOUT = 15;
export const MM_ROLAND_MPU401_MIDIIN = 16;
export const MM_ROLAND_SMPU_MIDIOUTA = 17;
export const MM_ROLAND_SMPU_MIDIOUTB = 18;
export const MM_ROLAND_SMPU_MIDIINA = 19;
export const MM_ROLAND_SMPU_MIDIINB = 20;
export const MM_ROLAND_SC7_MIDIOUT = 21;
export const MM_ROLAND_SC7_MIDIIN = 22;
export const MM_ROLAND_SERIAL_MIDIOUT = 23;
export const MM_ROLAND_SERIAL_MIDIIN = 24;
export const MM_ROLAND_SCP_MIDIOUT = 38;
export const MM_ROLAND_SCP_MIDIIN = 39;
export const MM_ROLAND_SCP_WAVEOUT = 40;
export const MM_ROLAND_SCP_WAVEIN = 41;
export const MM_ROLAND_SCP_MIXER = 42;
export const MM_ROLAND_SCP_AUX = 48;
export const MM_DSP_SOLUTIONS_WAVEOUT = 1;
export const MM_DSP_SOLUTIONS_WAVEIN = 2;
export const MM_DSP_SOLUTIONS_SYNTH = 3;
export const MM_DSP_SOLUTIONS_AUX = 4;
export const MM_NEC_73_86_SYNTH = 5;
export const MM_NEC_73_86_WAVEOUT = 6;
export const MM_NEC_73_86_WAVEIN = 7;
export const MM_NEC_26_SYNTH = 9;
export const MM_NEC_MPU401_MIDIOUT = 10;
export const MM_NEC_MPU401_MIDIIN = 11;
export const MM_NEC_JOYSTICK = 12;
export const MM_WANGLABS_WAVEIN1 = 1;
export const MM_WANGLABS_WAVEOUT1 = 2;
export const MM_TANDY_VISWAVEIN = 1;
export const MM_TANDY_VISWAVEOUT = 2;
export const MM_TANDY_VISBIOSSYNTH = 3;
export const MM_TANDY_SENS_MMAWAVEIN = 4;
export const MM_TANDY_SENS_MMAWAVEOUT = 5;
export const MM_TANDY_SENS_MMAMIDIIN = 6;
export const MM_TANDY_SENS_MMAMIDIOUT = 7;
export const MM_TANDY_SENS_VISWAVEOUT = 8;
export const MM_TANDY_PSSJWAVEIN = 9;
export const MM_TANDY_PSSJWAVEOUT = 10;
export const MM_ANTEX_SX12_WAVEIN = 1;
export const MM_ANTEX_SX12_WAVEOUT = 2;
export const MM_ANTEX_SX15_WAVEIN = 3;
export const MM_ANTEX_SX15_WAVEOUT = 4;
export const MM_ANTEX_VP625_WAVEIN = 5;
export const MM_ANTEX_VP625_WAVEOUT = 6;
export const MM_ANTEX_AUDIOPORT22_WAVEIN = 7;
export const MM_ANTEX_AUDIOPORT22_WAVEOUT = 8;
export const MM_ANTEX_AUDIOPORT22_FEEDTHRU = 9;
export const MM_INTELOPD_WAVEIN = 1;
export const MM_INTELOPD_WAVEOUT = 101;
export const MM_INTELOPD_AUX = 401;
export const MM_INTEL_NSPMODEMLINEIN = 501;
export const MM_INTEL_NSPMODEMLINEOUT = 502;
export const MM_VAL_MICROKEY_AP_WAVEIN = 1;
export const MM_VAL_MICROKEY_AP_WAVEOUT = 2;
export const MM_INTERACTIVE_WAVEIN = 69;
export const MM_INTERACTIVE_WAVEOUT = 69;
export const MM_YAMAHA_GSS_SYNTH = 1;
export const MM_YAMAHA_GSS_WAVEOUT = 2;
export const MM_YAMAHA_GSS_WAVEIN = 3;
export const MM_YAMAHA_GSS_MIDIOUT = 4;
export const MM_YAMAHA_GSS_MIDIIN = 5;
export const MM_YAMAHA_GSS_AUX = 6;
export const MM_YAMAHA_SERIAL_MIDIOUT = 7;
export const MM_YAMAHA_SERIAL_MIDIIN = 8;
export const MM_YAMAHA_OPL3SA_WAVEOUT = 16;
export const MM_YAMAHA_OPL3SA_WAVEIN = 17;
export const MM_YAMAHA_OPL3SA_FMSYNTH = 18;
export const MM_YAMAHA_OPL3SA_YSYNTH = 19;
export const MM_YAMAHA_OPL3SA_MIDIOUT = 20;
export const MM_YAMAHA_OPL3SA_MIDIIN = 21;
export const MM_YAMAHA_OPL3SA_MIXER = 23;
export const MM_YAMAHA_OPL3SA_JOYSTICK = 24;
export const MM_YAMAHA_YMF724LEG_MIDIOUT = 25;
export const MM_YAMAHA_YMF724LEG_MIDIIN = 26;
export const MM_YAMAHA_YMF724_WAVEOUT = 27;
export const MM_YAMAHA_YMF724_WAVEIN = 28;
export const MM_YAMAHA_YMF724_MIDIOUT = 29;
export const MM_YAMAHA_YMF724_AUX = 30;
export const MM_YAMAHA_YMF724_MIXER = 31;
export const MM_YAMAHA_YMF724LEG_FMSYNTH = 32;
export const MM_YAMAHA_YMF724LEG_MIXER = 33;
export const MM_YAMAHA_SXG_MIDIOUT = 34;
export const MM_YAMAHA_SXG_WAVEOUT = 35;
export const MM_YAMAHA_SXG_MIXER = 36;
export const MM_YAMAHA_ACXG_WAVEIN = 37;
export const MM_YAMAHA_ACXG_WAVEOUT = 38;
export const MM_YAMAHA_ACXG_MIDIOUT = 39;
export const MM_YAMAHA_ACXG_MIXER = 40;
export const MM_YAMAHA_ACXG_AUX = 41;
export const MM_EVEREX_CARRIER = 1;
export const MM_ECHO_SYNTH = 1;
export const MM_ECHO_WAVEOUT = 2;
export const MM_ECHO_WAVEIN = 3;
export const MM_ECHO_MIDIOUT = 4;
export const MM_ECHO_MIDIIN = 5;
export const MM_ECHO_AUX = 6;
export const MM_SIERRA_ARIA_MIDIOUT = 20;
export const MM_SIERRA_ARIA_MIDIIN = 21;
export const MM_SIERRA_ARIA_SYNTH = 22;
export const MM_SIERRA_ARIA_WAVEOUT = 23;
export const MM_SIERRA_ARIA_WAVEIN = 24;
export const MM_SIERRA_ARIA_AUX = 25;
export const MM_SIERRA_ARIA_AUX2 = 32;
export const MM_SIERRA_QUARTET_WAVEIN = 80;
export const MM_SIERRA_QUARTET_WAVEOUT = 81;
export const MM_SIERRA_QUARTET_MIDIIN = 82;
export const MM_SIERRA_QUARTET_MIDIOUT = 83;
export const MM_SIERRA_QUARTET_SYNTH = 84;
export const MM_SIERRA_QUARTET_AUX_CD = 85;
export const MM_SIERRA_QUARTET_AUX_LINE = 86;
export const MM_SIERRA_QUARTET_AUX_MODEM = 87;
export const MM_SIERRA_QUARTET_MIXER = 88;
export const MM_CAT_WAVEOUT = 1;
export const MM_DSP_GROUP_TRUESPEECH = 1;
export const MM_MELABS_MIDI2GO = 1;
export const MM_ESS_AMWAVEOUT = 1;
export const MM_ESS_AMWAVEIN = 2;
export const MM_ESS_AMAUX = 3;
export const MM_ESS_AMSYNTH = 4;
export const MM_ESS_AMMIDIOUT = 5;
export const MM_ESS_AMMIDIIN = 6;
export const MM_ESS_MIXER = 7;
export const MM_ESS_AUX_CD = 8;
export const MM_ESS_MPU401_MIDIOUT = 9;
export const MM_ESS_MPU401_MIDIIN = 10;
export const MM_ESS_ES488_WAVEOUT = 16;
export const MM_ESS_ES488_WAVEIN = 17;
export const MM_ESS_ES488_MIXER = 18;
export const MM_ESS_ES688_WAVEOUT = 19;
export const MM_ESS_ES688_WAVEIN = 20;
export const MM_ESS_ES688_MIXER = 21;
export const MM_ESS_ES1488_WAVEOUT = 22;
export const MM_ESS_ES1488_WAVEIN = 23;
export const MM_ESS_ES1488_MIXER = 24;
export const MM_ESS_ES1688_WAVEOUT = 25;
export const MM_ESS_ES1688_WAVEIN = 26;
export const MM_ESS_ES1688_MIXER = 27;
export const MM_ESS_ES1788_WAVEOUT = 28;
export const MM_ESS_ES1788_WAVEIN = 29;
export const MM_ESS_ES1788_MIXER = 30;
export const MM_ESS_ES1888_WAVEOUT = 31;
export const MM_ESS_ES1888_WAVEIN = 32;
export const MM_ESS_ES1888_MIXER = 33;
export const MM_ESS_ES1868_WAVEOUT = 34;
export const MM_ESS_ES1868_WAVEIN = 35;
export const MM_ESS_ES1868_MIXER = 36;
export const MM_ESS_ES1878_WAVEOUT = 37;
export const MM_ESS_ES1878_WAVEIN = 38;
export const MM_ESS_ES1878_MIXER = 39;
export const MM_CANOPUS_ACM_DVREX = 1;
export const MM_EPS_FMSND = 1;
export const MM_TRUEVISION_WAVEIN1 = 1;
export const MM_TRUEVISION_WAVEOUT1 = 2;
export const MM_AZTECH_MIDIOUT = 3;
export const MM_AZTECH_MIDIIN = 4;
export const MM_AZTECH_WAVEIN = 17;
export const MM_AZTECH_WAVEOUT = 18;
export const MM_AZTECH_FMSYNTH = 20;
export const MM_AZTECH_MIXER = 21;
export const MM_AZTECH_PRO16_WAVEIN = 33;
export const MM_AZTECH_PRO16_WAVEOUT = 34;
export const MM_AZTECH_PRO16_FMSYNTH = 38;
export const MM_AZTECH_DSP16_WAVEIN = 65;
export const MM_AZTECH_DSP16_WAVEOUT = 66;
export const MM_AZTECH_DSP16_FMSYNTH = 68;
export const MM_AZTECH_DSP16_WAVESYNTH = 70;
export const MM_AZTECH_NOVA16_WAVEIN = 71;
export const MM_AZTECH_NOVA16_WAVEOUT = 72;
export const MM_AZTECH_NOVA16_MIXER = 73;
export const MM_AZTECH_WASH16_WAVEIN = 74;
export const MM_AZTECH_WASH16_WAVEOUT = 75;
export const MM_AZTECH_WASH16_MIXER = 76;
export const MM_AZTECH_AUX_CD = 401;
export const MM_AZTECH_AUX_LINE = 402;
export const MM_AZTECH_AUX_MIC = 403;
export const MM_AZTECH_AUX = 404;
export const MM_VIDEOLOGIC_MSWAVEIN = 1;
export const MM_VIDEOLOGIC_MSWAVEOUT = 2;
export const MM_KORG_PCIF_MIDIOUT = 1;
export const MM_KORG_PCIF_MIDIIN = 2;
export const MM_KORG_1212IO_MSWAVEIN = 3;
export const MM_KORG_1212IO_MSWAVEOUT = 4;
export const MM_APT_ACE100CD = 1;
export const MM_ICS_WAVEDECK_WAVEOUT = 1;
export const MM_ICS_WAVEDECK_WAVEIN = 2;
export const MM_ICS_WAVEDECK_MIXER = 3;
export const MM_ICS_WAVEDECK_AUX = 4;
export const MM_ICS_WAVEDECK_SYNTH = 5;
export const MM_ICS_WAVEDEC_SB_WAVEOUT = 6;
export const MM_ICS_WAVEDEC_SB_WAVEIN = 7;
export const MM_ICS_WAVEDEC_SB_FM_MIDIOUT = 8;
export const MM_ICS_WAVEDEC_SB_MPU401_MIDIOUT = 9;
export const MM_ICS_WAVEDEC_SB_MPU401_MIDIIN = 10;
export const MM_ICS_WAVEDEC_SB_MIXER = 11;
export const MM_ICS_WAVEDEC_SB_AUX = 12;
export const MM_ICS_2115_LITE_MIDIOUT = 13;
export const MM_ICS_2120_LITE_MIDIOUT = 14;
export const MM_ITERATEDSYS_FUFCODEC = 1;
export const MM_METHEUS_ZIPPER = 1;
export const MM_WINNOV_CAVIAR_WAVEIN = 1;
export const MM_WINNOV_CAVIAR_WAVEOUT = 2;
export const MM_WINNOV_CAVIAR_VIDC = 3;
export const MM_WINNOV_CAVIAR_CHAMPAGNE = 4;
export const MM_WINNOV_CAVIAR_YUV8 = 5;
export const MM_NCR_BA_WAVEIN = 1;
export const MM_NCR_BA_WAVEOUT = 2;
export const MM_NCR_BA_SYNTH = 3;
export const MM_NCR_BA_AUX = 4;
export const MM_NCR_BA_MIXER = 5;
export const MM_AST_MODEMWAVE_WAVEIN = 13;
export const MM_AST_MODEMWAVE_WAVEOUT = 14;
export const MM_WILLOWPOND_FMSYNTH_STEREO = 20;
export const MM_WILLOWPOND_MPU401 = 21;
export const MM_WILLOWPOND_SNDPORT_WAVEIN = 100;
export const MM_WILLOWPOND_SNDPORT_WAVEOUT = 101;
export const MM_WILLOWPOND_SNDPORT_MIXER = 102;
export const MM_WILLOWPOND_SNDPORT_AUX = 103;
export const MM_WILLOWPOND_PH_WAVEIN = 104;
export const MM_WILLOWPOND_PH_WAVEOUT = 105;
export const MM_WILLOWPOND_PH_MIXER = 106;
export const MM_WILLOWPOND_PH_AUX = 107;
export const MM_WILLOPOND_SNDCOMM_WAVEIN = 108;
export const MM_WILLOWPOND_SNDCOMM_WAVEOUT = 109;
export const MM_WILLOWPOND_SNDCOMM_MIXER = 110;
export const MM_WILLOWPOND_SNDCOMM_AUX = 111;
export const MM_WILLOWPOND_GENERIC_WAVEIN = 112;
export const MM_WILLOWPOND_GENERIC_WAVEOUT = 113;
export const MM_WILLOWPOND_GENERIC_MIXER = 114;
export const MM_WILLOWPOND_GENERIC_AUX = 115;
export const MM_VITEC_VMAKER = 1;
export const MM_VITEC_VMPRO = 2;
export const MM_MOSCOM_VPC2400_IN = 1;
export const MM_MOSCOM_VPC2400_OUT = 2;
export const MM_SILICONSOFT_SC1_WAVEIN = 1;
export const MM_SILICONSOFT_SC1_WAVEOUT = 2;
export const MM_SILICONSOFT_SC2_WAVEIN = 3;
export const MM_SILICONSOFT_SC2_WAVEOUT = 4;
export const MM_SILICONSOFT_SOUNDJR2_WAVEOUT = 5;
export const MM_SILICONSOFT_SOUNDJR2PR_WAVEIN = 6;
export const MM_SILICONSOFT_SOUNDJR2PR_WAVEOUT = 7;
export const MM_SILICONSOFT_SOUNDJR3_WAVEOUT = 8;
export const MM_TTEWS_WAVEIN = 1;
export const MM_TTEWS_WAVEOUT = 2;
export const MM_TTEWS_MIDIIN = 3;
export const MM_TTEWS_MIDIOUT = 4;
export const MM_TTEWS_MIDISYNTH = 5;
export const MM_TTEWS_MIDIMONITOR = 6;
export const MM_TTEWS_VMIDIIN = 7;
export const MM_TTEWS_VMIDIOUT = 8;
export const MM_TTEWS_AUX = 9;
export const MM_TTEWS_MIXER = 10;
export const MM_MEDIASONIC_ACM_G723 = 1;
export const MM_MEDIASONIC_ICOM = 2;
export const MM_ICOM_WAVEIN = 3;
export const MM_ICOM_WAVEOUT = 4;
export const MM_ICOM_MIXER = 5;
export const MM_ICOM_AUX = 6;
export const MM_ICOM_LINE = 7;
export const MM_SANYO_ACM_LD_ADPCM = 1;
export const MM_AHEAD_MULTISOUND = 1;
export const MM_AHEAD_SOUNDBLASTER = 2;
export const MM_AHEAD_PROAUDIO = 3;
export const MM_AHEAD_GENERIC = 4;
export const MM_OLIVETTI_WAVEIN = 1;
export const MM_OLIVETTI_WAVEOUT = 2;
export const MM_OLIVETTI_MIXER = 3;
export const MM_OLIVETTI_AUX = 4;
export const MM_OLIVETTI_MIDIIN = 5;
export const MM_OLIVETTI_MIDIOUT = 6;
export const MM_OLIVETTI_SYNTH = 7;
export const MM_OLIVETTI_JOYSTICK = 8;
export const MM_OLIVETTI_ACM_GSM = 9;
export const MM_OLIVETTI_ACM_ADPCM = 10;
export const MM_OLIVETTI_ACM_CELP = 11;
export const MM_OLIVETTI_ACM_SBC = 12;
export const MM_OLIVETTI_ACM_OPR = 13;
export const MM_IOMAGIC_TEMPO_WAVEOUT = 1;
export const MM_IOMAGIC_TEMPO_WAVEIN = 2;
export const MM_IOMAGIC_TEMPO_SYNTH = 3;
export const MM_IOMAGIC_TEMPO_MIDIOUT = 4;
export const MM_IOMAGIC_TEMPO_MXDOUT = 5;
export const MM_IOMAGIC_TEMPO_AUXOUT = 6;
export const MM_MATSUSHITA_WAVEIN = 1;
export const MM_MATSUSHITA_WAVEOUT = 2;
export const MM_MATSUSHITA_FMSYNTH_STEREO = 3;
export const MM_MATSUSHITA_MIXER = 4;
export const MM_MATSUSHITA_AUX = 5;
export const MM_NEWMEDIA_WAVJAMMER = 1;
export const MM_LYRRUS_BRIDGE_GUITAR = 1;
export const MM_OPTI_M16_FMSYNTH_STEREO = 1;
export const MM_OPTI_M16_MIDIIN = 2;
export const MM_OPTI_M16_MIDIOUT = 3;
export const MM_OPTI_M16_WAVEIN = 4;
export const MM_OPTI_M16_WAVEOUT = 5;
export const MM_OPTI_M16_MIXER = 6;
export const MM_OPTI_M16_AUX = 7;
export const MM_OPTI_P16_FMSYNTH_STEREO = 16;
export const MM_OPTI_P16_MIDIIN = 17;
export const MM_OPTI_P16_MIDIOUT = 18;
export const MM_OPTI_P16_WAVEIN = 19;
export const MM_OPTI_P16_WAVEOUT = 20;
export const MM_OPTI_P16_MIXER = 21;
export const MM_OPTI_P16_AUX = 22;
export const MM_OPTI_M32_WAVEIN = 32;
export const MM_OPTI_M32_WAVEOUT = 33;
export const MM_OPTI_M32_MIDIIN = 34;
export const MM_OPTI_M32_MIDIOUT = 35;
export const MM_OPTI_M32_SYNTH_STEREO = 36;
export const MM_OPTI_M32_MIXER = 37;
export const MM_OPTI_M32_AUX = 38;
export const MM_COMPAQ_BB_WAVEIN = 1;
export const MM_COMPAQ_BB_WAVEOUT = 2;
export const MM_COMPAQ_BB_WAVEAUX = 3;
export const MM_MPTUS_SPWAVEOUT = 1;
export const MM_LERNOUT_ANDHAUSPIE_LHCODECACM = 1;
export const MM_DIGITAL_AV320_WAVEIN = 1;
export const MM_DIGITAL_AV320_WAVEOUT = 2;
export const MM_DIGITAL_ACM_G723 = 3;
export const MM_DIGITAL_ICM_H263 = 4;
export const MM_DIGITAL_ICM_H261 = 5;
export const MM_MOTU_MTP_MIDIOUT_ALL = 100;
export const MM_MOTU_MTP_MIDIIN_1 = 101;
export const MM_MOTU_MTP_MIDIOUT_1 = 101;
export const MM_MOTU_MTP_MIDIIN_2 = 102;
export const MM_MOTU_MTP_MIDIOUT_2 = 102;
export const MM_MOTU_MTP_MIDIIN_3 = 103;
export const MM_MOTU_MTP_MIDIOUT_3 = 103;
export const MM_MOTU_MTP_MIDIIN_4 = 104;
export const MM_MOTU_MTP_MIDIOUT_4 = 104;
export const MM_MOTU_MTP_MIDIIN_5 = 105;
export const MM_MOTU_MTP_MIDIOUT_5 = 105;
export const MM_MOTU_MTP_MIDIIN_6 = 106;
export const MM_MOTU_MTP_MIDIOUT_6 = 106;
export const MM_MOTU_MTP_MIDIIN_7 = 107;
export const MM_MOTU_MTP_MIDIOUT_7 = 107;
export const MM_MOTU_MTP_MIDIIN_8 = 108;
export const MM_MOTU_MTP_MIDIOUT_8 = 108;
export const MM_MOTU_MTPII_MIDIOUT_ALL = 200;
export const MM_MOTU_MTPII_MIDIIN_SYNC = 200;
export const MM_MOTU_MTPII_MIDIIN_1 = 201;
export const MM_MOTU_MTPII_MIDIOUT_1 = 201;
export const MM_MOTU_MTPII_MIDIIN_2 = 202;
export const MM_MOTU_MTPII_MIDIOUT_2 = 202;
export const MM_MOTU_MTPII_MIDIIN_3 = 203;
export const MM_MOTU_MTPII_MIDIOUT_3 = 203;
export const MM_MOTU_MTPII_MIDIIN_4 = 204;
export const MM_MOTU_MTPII_MIDIOUT_4 = 204;
export const MM_MOTU_MTPII_MIDIIN_5 = 205;
export const MM_MOTU_MTPII_MIDIOUT_5 = 205;
export const MM_MOTU_MTPII_MIDIIN_6 = 206;
export const MM_MOTU_MTPII_MIDIOUT_6 = 206;
export const MM_MOTU_MTPII_MIDIIN_7 = 207;
export const MM_MOTU_MTPII_MIDIOUT_7 = 207;
export const MM_MOTU_MTPII_MIDIIN_8 = 208;
export const MM_MOTU_MTPII_MIDIOUT_8 = 208;
export const MM_MOTU_MTPII_NET_MIDIIN_1 = 209;
export const MM_MOTU_MTPII_NET_MIDIOUT_1 = 209;
export const MM_MOTU_MTPII_NET_MIDIIN_2 = 210;
export const MM_MOTU_MTPII_NET_MIDIOUT_2 = 210;
export const MM_MOTU_MTPII_NET_MIDIIN_3 = 211;
export const MM_MOTU_MTPII_NET_MIDIOUT_3 = 211;
export const MM_MOTU_MTPII_NET_MIDIIN_4 = 212;
export const MM_MOTU_MTPII_NET_MIDIOUT_4 = 212;
export const MM_MOTU_MTPII_NET_MIDIIN_5 = 213;
export const MM_MOTU_MTPII_NET_MIDIOUT_5 = 213;
export const MM_MOTU_MTPII_NET_MIDIIN_6 = 214;
export const MM_MOTU_MTPII_NET_MIDIOUT_6 = 214;
export const MM_MOTU_MTPII_NET_MIDIIN_7 = 215;
export const MM_MOTU_MTPII_NET_MIDIOUT_7 = 215;
export const MM_MOTU_MTPII_NET_MIDIIN_8 = 216;
export const MM_MOTU_MTPII_NET_MIDIOUT_8 = 216;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_ALL = 300;
export const MM_MOTU_MXP_MIDIIN_SYNC = 300;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_1 = 301;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_1 = 301;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_2 = 302;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_2 = 302;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_3 = 303;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_3 = 303;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_4 = 304;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_4 = 304;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_5 = 305;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_5 = 305;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_6 = 306;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_6 = 306;
export const MM_MOTU_MXPMPU_MIDIOUT_ALL = 400;
export const MM_MOTU_MXPMPU_MIDIIN_SYNC = 400;
export const MM_MOTU_MXPMPU_MIDIIN_1 = 401;
export const MM_MOTU_MXPMPU_MIDIOUT_1 = 401;
export const MM_MOTU_MXPMPU_MIDIIN_2 = 402;
export const MM_MOTU_MXPMPU_MIDIOUT_2 = 402;
export const MM_MOTU_MXPMPU_MIDIIN_3 = 403;
export const MM_MOTU_MXPMPU_MIDIOUT_3 = 403;
export const MM_MOTU_MXPMPU_MIDIIN_4 = 404;
export const MM_MOTU_MXPMPU_MIDIOUT_4 = 404;
export const MM_MOTU_MXPMPU_MIDIIN_5 = 405;
export const MM_MOTU_MXPMPU_MIDIOUT_5 = 405;
export const MM_MOTU_MXPMPU_MIDIIN_6 = 406;
export const MM_MOTU_MXPMPU_MIDIOUT_6 = 406;
export const MM_MOTU_MXN_MIDIOUT_ALL = 500;
export const MM_MOTU_MXN_MIDIIN_SYNC = 500;
export const MM_MOTU_MXN_MIDIIN_1 = 501;
export const MM_MOTU_MXN_MIDIOUT_1 = 501;
export const MM_MOTU_MXN_MIDIIN_2 = 502;
export const MM_MOTU_MXN_MIDIOUT_2 = 502;
export const MM_MOTU_MXN_MIDIIN_3 = 503;
export const MM_MOTU_MXN_MIDIOUT_3 = 503;
export const MM_MOTU_MXN_MIDIIN_4 = 504;
export const MM_MOTU_MXN_MIDIOUT_4 = 504;
export const MM_MOTU_FLYER_MIDI_IN_SYNC = 600;
export const MM_MOTU_FLYER_MIDI_IN_A = 601;
export const MM_MOTU_FLYER_MIDI_OUT_A = 601;
export const MM_MOTU_FLYER_MIDI_IN_B = 602;
export const MM_MOTU_FLYER_MIDI_OUT_B = 602;
export const MM_MOTU_PKX_MIDI_IN_SYNC = 700;
export const MM_MOTU_PKX_MIDI_IN_A = 701;
export const MM_MOTU_PKX_MIDI_OUT_A = 701;
export const MM_MOTU_PKX_MIDI_IN_B = 702;
export const MM_MOTU_PKX_MIDI_OUT_B = 702;
export const MM_MOTU_DTX_MIDI_IN_SYNC = 800;
export const MM_MOTU_DTX_MIDI_IN_A = 801;
export const MM_MOTU_DTX_MIDI_OUT_A = 801;
export const MM_MOTU_DTX_MIDI_IN_B = 802;
export const MM_MOTU_DTX_MIDI_OUT_B = 802;
export const MM_MOTU_MTPAV_MIDIOUT_ALL = 900;
export const MM_MOTU_MTPAV_MIDIIN_SYNC = 900;
export const MM_MOTU_MTPAV_MIDIIN_1 = 901;
export const MM_MOTU_MTPAV_MIDIOUT_1 = 901;
export const MM_MOTU_MTPAV_MIDIIN_2 = 902;
export const MM_MOTU_MTPAV_MIDIOUT_2 = 902;
export const MM_MOTU_MTPAV_MIDIIN_3 = 903;
export const MM_MOTU_MTPAV_MIDIOUT_3 = 903;
export const MM_MOTU_MTPAV_MIDIIN_4 = 904;
export const MM_MOTU_MTPAV_MIDIOUT_4 = 904;
export const MM_MOTU_MTPAV_MIDIIN_5 = 905;
export const MM_MOTU_MTPAV_MIDIOUT_5 = 905;
export const MM_MOTU_MTPAV_MIDIIN_6 = 906;
export const MM_MOTU_MTPAV_MIDIOUT_6 = 906;
export const MM_MOTU_MTPAV_MIDIIN_7 = 907;
export const MM_MOTU_MTPAV_MIDIOUT_7 = 907;
export const MM_MOTU_MTPAV_MIDIIN_8 = 908;
export const MM_MOTU_MTPAV_MIDIOUT_8 = 908;
export const MM_MOTU_MTPAV_NET_MIDIIN_1 = 909;
export const MM_MOTU_MTPAV_NET_MIDIOUT_1 = 909;
export const MM_MOTU_MTPAV_NET_MIDIIN_2 = 910;
export const MM_MOTU_MTPAV_NET_MIDIOUT_2 = 910;
export const MM_MOTU_MTPAV_NET_MIDIIN_3 = 911;
export const MM_MOTU_MTPAV_NET_MIDIOUT_3 = 911;
export const MM_MOTU_MTPAV_NET_MIDIIN_4 = 912;
export const MM_MOTU_MTPAV_NET_MIDIOUT_4 = 912;
export const MM_MOTU_MTPAV_NET_MIDIIN_5 = 913;
export const MM_MOTU_MTPAV_NET_MIDIOUT_5 = 913;
export const MM_MOTU_MTPAV_NET_MIDIIN_6 = 914;
export const MM_MOTU_MTPAV_NET_MIDIOUT_6 = 914;
export const MM_MOTU_MTPAV_NET_MIDIIN_7 = 915;
export const MM_MOTU_MTPAV_NET_MIDIOUT_7 = 915;
export const MM_MOTU_MTPAV_NET_MIDIIN_8 = 916;
export const MM_MOTU_MTPAV_NET_MIDIOUT_8 = 916;
export const MM_MOTU_MTPAV_MIDIIN_ADAT = 917;
export const MM_MOTU_MTPAV_MIDIOUT_ADAT = 917;
export const MM_MOTU_MXPXT_MIDIIN_SYNC = 1000;
export const MM_MOTU_MXPXT_MIDIOUT_ALL = 1000;
export const MM_MOTU_MXPXT_MIDIIN_1 = 1001;
export const MM_MOTU_MXPXT_MIDIOUT_1 = 1001;
export const MM_MOTU_MXPXT_MIDIOUT_2 = 1002;
export const MM_MOTU_MXPXT_MIDIIN_2 = 1002;
export const MM_MOTU_MXPXT_MIDIIN_3 = 1003;
export const MM_MOTU_MXPXT_MIDIOUT_3 = 1003;
export const MM_MOTU_MXPXT_MIDIIN_4 = 1004;
export const MM_MOTU_MXPXT_MIDIOUT_4 = 1004;
export const MM_MOTU_MXPXT_MIDIIN_5 = 1005;
export const MM_MOTU_MXPXT_MIDIOUT_5 = 1005;
export const MM_MOTU_MXPXT_MIDIOUT_6 = 1006;
export const MM_MOTU_MXPXT_MIDIIN_6 = 1006;
export const MM_MOTU_MXPXT_MIDIOUT_7 = 1007;
export const MM_MOTU_MXPXT_MIDIIN_7 = 1007;
export const MM_MOTU_MXPXT_MIDIOUT_8 = 1008;
export const MM_MOTU_MXPXT_MIDIIN_8 = 1008;
export const MM_WORKBIT_MIXER = 1;
export const MM_WORKBIT_WAVEOUT = 2;
export const MM_WORKBIT_WAVEIN = 3;
export const MM_WORKBIT_MIDIIN = 4;
export const MM_WORKBIT_MIDIOUT = 5;
export const MM_WORKBIT_FMSYNTH = 6;
export const MM_WORKBIT_AUX = 7;
export const MM_WORKBIT_JOYSTICK = 8;
export const MM_OSITECH_TRUMPCARD = 1;
export const MM_MIRO_MOVIEPRO = 1;
export const MM_MIRO_VIDEOD1 = 2;
export const MM_MIRO_VIDEODC1TV = 3;
export const MM_MIRO_VIDEOTD = 4;
export const MM_MIRO_DC30_WAVEOUT = 5;
export const MM_MIRO_DC30_WAVEIN = 6;
export const MM_MIRO_DC30_MIX = 7;
export const MM_ISOLUTION_PASCAL = 1;
export const MM_VOICEMIXER = 1;
export const ROCKWELL_WA1_WAVEIN = 100;
export const ROCKWELL_WA1_WAVEOUT = 101;
export const ROCKWELL_WA1_SYNTH = 102;
export const ROCKWELL_WA1_MIXER = 103;
export const ROCKWELL_WA1_MPU401_IN = 104;
export const ROCKWELL_WA1_MPU401_OUT = 105;
export const ROCKWELL_WA2_WAVEIN = 200;
export const ROCKWELL_WA2_WAVEOUT = 201;
export const ROCKWELL_WA2_SYNTH = 202;
export const ROCKWELL_WA2_MIXER = 203;
export const ROCKWELL_WA2_MPU401_IN = 204;
export const ROCKWELL_WA2_MPU401_OUT = 205;
export const MM_VOXWARE_CODEC = 1;
export const MM_NORTEL_MPXAC_WAVEIN = 1;
export const MM_NORTEL_MPXAC_WAVEOUT = 2;
export const MM_ADDX_PCTV_DIGITALMIX = 1;
export const MM_ADDX_PCTV_WAVEIN = 2;
export const MM_ADDX_PCTV_WAVEOUT = 3;
export const MM_ADDX_PCTV_MIXER = 4;
export const MM_ADDX_PCTV_AUX_CD = 5;
export const MM_ADDX_PCTV_AUX_LINE = 6;
export const MM_WILDCAT_AUTOSCOREMIDIIN = 1;
export const MM_RHETOREX_WAVEIN = 1;
export const MM_RHETOREX_WAVEOUT = 2;
export const MM_BTV_WAVEIN = 1;
export const MM_BTV_WAVEOUT = 2;
export const MM_BTV_MIDIIN = 3;
export const MM_BTV_MIDIOUT = 4;
export const MM_BTV_MIDISYNTH = 5;
export const MM_BTV_AUX_LINE = 6;
export const MM_BTV_AUX_MIC = 7;
export const MM_BTV_AUX_CD = 8;
export const MM_BTV_DIGITALIN = 9;
export const MM_BTV_DIGITALOUT = 10;
export const MM_BTV_MIDIWAVESTREAM = 11;
export const MM_BTV_MIXER = 12;
export const MM_ENSONIQ_SOUNDSCAPE = 16;
export const MM_SOUNDSCAPE_WAVEOUT = 17;
export const MM_SOUNDSCAPE_WAVEOUT_AUX = 18;
export const MM_SOUNDSCAPE_WAVEIN = 19;
export const MM_SOUNDSCAPE_MIDIOUT = 20;
export const MM_SOUNDSCAPE_MIDIIN = 21;
export const MM_SOUNDSCAPE_SYNTH = 22;
export const MM_SOUNDSCAPE_MIXER = 23;
export const MM_SOUNDSCAPE_AUX = 24;
export const MM_NVIDIA_WAVEOUT = 1;
export const MM_NVIDIA_WAVEIN = 2;
export const MM_NVIDIA_MIDIOUT = 3;
export const MM_NVIDIA_MIDIIN = 4;
export const MM_NVIDIA_GAMEPORT = 5;
export const MM_NVIDIA_MIXER = 6;
export const MM_NVIDIA_AUX = 7;
export const MM_OKSORI_BASE = 0;
export const MM_OKSORI_OSR8_WAVEOUT = 1;
export const MM_OKSORI_OSR8_WAVEIN = 2;
export const MM_OKSORI_OSR16_WAVEOUT = 3;
export const MM_OKSORI_OSR16_WAVEIN = 4;
export const MM_OKSORI_FM_OPL4 = 5;
export const MM_OKSORI_MIX_MASTER = 6;
export const MM_OKSORI_MIX_WAVE = 7;
export const MM_OKSORI_MIX_FM = 8;
export const MM_OKSORI_MIX_LINE = 9;
export const MM_OKSORI_MIX_CD = 10;
export const MM_OKSORI_MIX_MIC = 11;
export const MM_OKSORI_MIX_ECHO = 12;
export const MM_OKSORI_MIX_AUX1 = 13;
export const MM_OKSORI_MIX_LINE1 = 14;
export const MM_OKSORI_EXT_MIC1 = 15;
export const MM_OKSORI_EXT_MIC2 = 16;
export const MM_OKSORI_MIDIOUT = 17;
export const MM_OKSORI_MIDIIN = 18;
export const MM_OKSORI_MPEG_CDVISION = 19;
export const MM_DIACOUSTICS_DRUM_ACTION = 1;
export const MM_KAY_ELEMETRICS_CSL = 17152;
export const MM_KAY_ELEMETRICS_CSL_DAT = 17160;
export const MM_KAY_ELEMETRICS_CSL_4CHANNEL = 17161;
export const MM_CRYSTAL_CS4232_WAVEIN = 1;
export const MM_CRYSTAL_CS4232_WAVEOUT = 2;
export const MM_CRYSTAL_CS4232_WAVEMIXER = 3;
export const MM_CRYSTAL_CS4232_WAVEAUX_AUX1 = 4;
export const MM_CRYSTAL_CS4232_WAVEAUX_AUX2 = 5;
export const MM_CRYSTAL_CS4232_WAVEAUX_LINE = 6;
export const MM_CRYSTAL_CS4232_WAVEAUX_MONO = 7;
export const MM_CRYSTAL_CS4232_WAVEAUX_MASTER = 8;
export const MM_CRYSTAL_CS4232_MIDIIN = 9;
export const MM_CRYSTAL_CS4232_MIDIOUT = 10;
export const MM_CRYSTAL_CS4232_INPUTGAIN_AUX1 = 13;
export const MM_CRYSTAL_CS4232_INPUTGAIN_LOOP = 14;
export const MM_CRYSTAL_SOUND_FUSION_WAVEIN = 21;
export const MM_CRYSTAL_SOUND_FUSION_WAVEOUT = 22;
export const MM_CRYSTAL_SOUND_FUSION_MIXER = 23;
export const MM_CRYSTAL_SOUND_FUSION_MIDIIN = 24;
export const MM_CRYSTAL_SOUND_FUSION_MIDIOUT = 25;
export const MM_CRYSTAL_SOUND_FUSION_JOYSTICK = 26;
export const MM_QUARTERDECK_LHWAVEIN = 0;
export const MM_QUARTERDECK_LHWAVEOUT = 1;
export const MM_TDK_MW_MIDI_SYNTH = 1;
export const MM_TDK_MW_MIDI_IN = 2;
export const MM_TDK_MW_MIDI_OUT = 3;
export const MM_TDK_MW_WAVE_IN = 4;
export const MM_TDK_MW_WAVE_OUT = 5;
export const MM_TDK_MW_AUX = 6;
export const MM_TDK_MW_MIXER = 10;
export const MM_TDK_MW_AUX_MASTER = 100;
export const MM_TDK_MW_AUX_BASS = 101;
export const MM_TDK_MW_AUX_TREBLE = 102;
export const MM_TDK_MW_AUX_MIDI_VOL = 103;
export const MM_TDK_MW_AUX_WAVE_VOL = 104;
export const MM_TDK_MW_AUX_WAVE_RVB = 105;
export const MM_TDK_MW_AUX_WAVE_CHR = 106;
export const MM_TDK_MW_AUX_VOL = 107;
export const MM_TDK_MW_AUX_RVB = 108;
export const MM_TDK_MW_AUX_CHR = 109;
export const MM_DIGITAL_AUDIO_LABS_TC = 1;
export const MM_DIGITAL_AUDIO_LABS_DOC = 2;
export const MM_DIGITAL_AUDIO_LABS_V8 = 16;
export const MM_DIGITAL_AUDIO_LABS_CPRO = 17;
export const MM_DIGITAL_AUDIO_LABS_VP = 18;
export const MM_DIGITAL_AUDIO_LABS_CDLX = 19;
export const MM_DIGITAL_AUDIO_LABS_CTDIF = 20;
export const MM_SEERSYS_SEERSYNTH = 1;
export const MM_SEERSYS_SEERWAVE = 2;
export const MM_SEERSYS_SEERMIX = 3;
export const MM_SEERSYS_WAVESYNTH = 4;
export const MM_SEERSYS_WAVESYNTH_WG = 5;
export const MM_SEERSYS_REALITY = 6;
export const MM_OSPREY_1000WAVEIN = 1;
export const MM_OSPREY_1000WAVEOUT = 2;
export const MM_SOUNDESIGNS_WAVEIN = 1;
export const MM_SOUNDESIGNS_WAVEOUT = 2;
export const MM_SSP_SNDFESWAVEIN = 1;
export const MM_SSP_SNDFESWAVEOUT = 2;
export const MM_SSP_SNDFESMIDIIN = 3;
export const MM_SSP_SNDFESMIDIOUT = 4;
export const MM_SSP_SNDFESSYNTH = 5;
export const MM_SSP_SNDFESMIX = 6;
export const MM_SSP_SNDFESAUX = 7;
export const MM_ECS_AADF_MIDI_IN = 10;
export const MM_ECS_AADF_MIDI_OUT = 11;
export const MM_ECS_AADF_WAVE2MIDI_IN = 12;
export const MM_AMD_INTERWAVE_WAVEIN = 1;
export const MM_AMD_INTERWAVE_WAVEOUT = 2;
export const MM_AMD_INTERWAVE_SYNTH = 3;
export const MM_AMD_INTERWAVE_MIXER1 = 4;
export const MM_AMD_INTERWAVE_MIXER2 = 5;
export const MM_AMD_INTERWAVE_JOYSTICK = 6;
export const MM_AMD_INTERWAVE_EX_CD = 7;
export const MM_AMD_INTERWAVE_MIDIIN = 8;
export const MM_AMD_INTERWAVE_MIDIOUT = 9;
export const MM_AMD_INTERWAVE_AUX1 = 10;
export const MM_AMD_INTERWAVE_AUX2 = 11;
export const MM_AMD_INTERWAVE_AUX_MIC = 12;
export const MM_AMD_INTERWAVE_AUX_CD = 13;
export const MM_AMD_INTERWAVE_MONO_IN = 14;
export const MM_AMD_INTERWAVE_MONO_OUT = 15;
export const MM_AMD_INTERWAVE_EX_TELEPHONY = 16;
export const MM_AMD_INTERWAVE_WAVEOUT_BASE = 17;
export const MM_AMD_INTERWAVE_WAVEOUT_TREBLE = 18;
export const MM_AMD_INTERWAVE_STEREO_ENHANCED = 19;
export const MM_COREDYNAMICS_DYNAMIXHR = 1;
export const MM_COREDYNAMICS_DYNASONIX_SYNTH = 2;
export const MM_COREDYNAMICS_DYNASONIX_MIDI_IN = 3;
export const MM_COREDYNAMICS_DYNASONIX_MIDI_OUT = 4;
export const MM_COREDYNAMICS_DYNASONIX_WAVE_IN = 5;
export const MM_COREDYNAMICS_DYNASONIX_WAVE_OUT = 6;
export const MM_COREDYNAMICS_DYNASONIX_AUDIO_IN = 7;
export const MM_COREDYNAMICS_DYNASONIX_AUDIO_OUT = 8;
export const MM_COREDYNAMICS_DYNAGRAFX_VGA = 9;
export const MM_COREDYNAMICS_DYNAGRAFX_WAVE_IN = 10;
export const MM_COREDYNAMICS_DYNAGRAFX_WAVE_OUT = 11;
export const MM_CANAM_CBXWAVEOUT = 1;
export const MM_CANAM_CBXWAVEIN = 2;
export const MM_SOFTSOUND_CODEC = 1;
export const MM_NORRIS_VOICELINK = 1;
export const MM_DDD_MIDILINK_MIDIIN = 1;
export const MM_DDD_MIDILINK_MIDIOUT = 2;
export const MM_EUPHONICS_AUX_CD = 1;
export const MM_EUPHONICS_AUX_LINE = 2;
export const MM_EUPHONICS_AUX_MASTER = 3;
export const MM_EUPHONICS_AUX_MIC = 4;
export const MM_EUPHONICS_AUX_MIDI = 5;
export const MM_EUPHONICS_AUX_WAVE = 6;
export const MM_EUPHONICS_FMSYNTH_MONO = 7;
export const MM_EUPHONICS_FMSYNTH_STEREO = 8;
export const MM_EUPHONICS_MIDIIN = 9;
export const MM_EUPHONICS_MIDIOUT = 10;
export const MM_EUPHONICS_MIXER = 11;
export const MM_EUPHONICS_WAVEIN = 12;
export const MM_EUPHONICS_WAVEOUT = 13;
export const MM_EUPHONICS_EUSYNTH = 14;
export const CRYSTAL_NET_SFM_CODEC = 1;
export const MM_CHROMATIC_M1 = 1;
export const MM_CHROMATIC_M1_WAVEIN = 2;
export const MM_CHROMATIC_M1_WAVEOUT = 3;
export const MM_CHROMATIC_M1_FMSYNTH = 4;
export const MM_CHROMATIC_M1_MIXER = 5;
export const MM_CHROMATIC_M1_AUX = 6;
export const MM_CHROMATIC_M1_AUX_CD = 7;
export const MM_CHROMATIC_M1_MIDIIN = 8;
export const MM_CHROMATIC_M1_MIDIOUT = 9;
export const MM_CHROMATIC_M1_WTSYNTH = 16;
export const MM_CHROMATIC_M1_MPEGWAVEIN = 17;
export const MM_CHROMATIC_M1_MPEGWAVEOUT = 18;
export const MM_CHROMATIC_M2 = 19;
export const MM_CHROMATIC_M2_WAVEIN = 20;
export const MM_CHROMATIC_M2_WAVEOUT = 21;
export const MM_CHROMATIC_M2_FMSYNTH = 22;
export const MM_CHROMATIC_M2_MIXER = 23;
export const MM_CHROMATIC_M2_AUX = 24;
export const MM_CHROMATIC_M2_AUX_CD = 25;
export const MM_CHROMATIC_M2_MIDIIN = 32;
export const MM_CHROMATIC_M2_MIDIOUT = 33;
export const MM_CHROMATIC_M2_WTSYNTH = 34;
export const MM_CHROMATIC_M2_MPEGWAVEIN = 35;
export const MM_CHROMATIC_M2_MPEGWAVEOUT = 36;
export const MM_VIENNASYS_TSP_WAVE_DRIVER = 1;
export const MM_CONNECTIX_VIDEC_CODEC = 1;
export const MM_GADGETLABS_WAVE44_WAVEIN = 1;
export const MM_GADGETLABS_WAVE44_WAVEOUT = 2;
export const MM_GADGETLABS_WAVE42_WAVEIN = 3;
export const MM_GADGETLABS_WAVE42_WAVEOUT = 4;
export const MM_GADGETLABS_WAVE4_MIDIIN = 5;
export const MM_GADGETLABS_WAVE4_MIDIOUT = 6;
export const MM_FRONTIER_WAVECENTER_MIDIIN = 1;
export const MM_FRONTIER_WAVECENTER_MIDIOUT = 2;
export const MM_FRONTIER_WAVECENTER_WAVEIN = 3;
export const MM_FRONTIER_WAVECENTER_WAVEOUT = 4;
export const MM_VIONA_QVINPCI_MIXER = 1;
export const MM_VIONA_QVINPCI_WAVEIN = 2;
export const MM_VIONAQVINPCI_WAVEOUT = 3;
export const MM_VIONA_BUSTER_MIXER = 4;
export const MM_VIONA_CINEMASTER_MIXER = 5;
export const MM_VIONA_CONCERTO_MIXER = 6;
export const MM_CASIO_WP150_MIDIOUT = 1;
export const MM_CASIO_WP150_MIDIIN = 2;
export const MM_CASIO_LSG_MIDIOUT = 3;
export const MM_DIMD_PLATFORM = 0;
export const MM_DIMD_DIRSOUND = 1;
export const MM_DIMD_VIRTMPU = 2;
export const MM_DIMD_VIRTSB = 3;
export const MM_DIMD_VIRTJOY = 4;
export const MM_DIMD_WAVEIN = 5;
export const MM_DIMD_WAVEOUT = 6;
export const MM_DIMD_MIDIIN = 7;
export const MM_DIMD_MIDIOUT = 8;
export const MM_DIMD_AUX_LINE = 9;
export const MM_DIMD_MIXER = 10;
export const MM_DIMD_WSS_WAVEIN = 14;
export const MM_DIMD_WSS_WAVEOUT = 15;
export const MM_DIMD_WSS_MIXER = 17;
export const MM_DIMD_WSS_AUX = 21;
export const MM_DIMD_WSS_SYNTH = 76;
export const MM_S3_WAVEOUT = 1;
export const MM_S3_WAVEIN = 2;
export const MM_S3_MIDIOUT = 3;
export const MM_S3_MIDIIN = 4;
export const MM_S3_FMSYNTH = 5;
export const MM_S3_MIXER = 6;
export const MM_S3_AUX = 7;
export const MM_VKC_MPU401_MIDIIN = 256;
export const MM_VKC_SERIAL_MIDIIN = 257;
export const MM_VKC_MPU401_MIDIOUT = 512;
export const MM_VKC_SERIAL_MIDIOUT = 513;
export const MM_ZEFIRO_ZA2 = 2;
export const MM_FHGIIS_MPEGLAYER3_DECODE = 9;
export const MM_FHGIIS_MPEGLAYER3 = 10;
export const MM_FHGIIS_MPEGLAYER3_LITE = 10;
export const MM_FHGIIS_MPEGLAYER3_BASIC = 11;
export const MM_FHGIIS_MPEGLAYER3_ADVANCED = 12;
export const MM_FHGIIS_MPEGLAYER3_PROFESSIONAL = 13;
export const MM_FHGIIS_MPEGLAYER3_ADVANCEDPLUS = 14;
export const MM_QUICKNET_PJWAVEIN = 1;
export const MM_QUICKNET_PJWAVEOUT = 2;
export const MM_SICRESOURCE_SSO3D = 2;
export const MM_SICRESOURCE_SSOW3DI = 3;
export const MM_NEOMAGIC_SYNTH = 1;
export const MM_NEOMAGIC_WAVEOUT = 2;
export const MM_NEOMAGIC_WAVEIN = 3;
export const MM_NEOMAGIC_MIDIOUT = 4;
export const MM_NEOMAGIC_MIDIIN = 5;
export const MM_NEOMAGIC_AUX = 6;
export const MM_NEOMAGIC_MW3DX_WAVEOUT = 10;
export const MM_NEOMAGIC_MW3DX_WAVEIN = 11;
export const MM_NEOMAGIC_MW3DX_MIDIOUT = 12;
export const MM_NEOMAGIC_MW3DX_MIDIIN = 13;
export const MM_NEOMAGIC_MW3DX_FMSYNTH = 14;
export const MM_NEOMAGIC_MW3DX_GMSYNTH = 15;
export const MM_NEOMAGIC_MW3DX_MIXER = 16;
export const MM_NEOMAGIC_MW3DX_AUX = 17;
export const MM_NEOMAGIC_MWAVE_WAVEOUT = 20;
export const MM_NEOMAGIC_MWAVE_WAVEIN = 21;
export const MM_NEOMAGIC_MWAVE_MIDIOUT = 22;
export const MM_NEOMAGIC_MWAVE_MIDIIN = 23;
export const MM_NEOMAGIC_MWAVE_MIXER = 24;
export const MM_NEOMAGIC_MWAVE_AUX = 25;
export const MM_MERGING_MPEGL3 = 1;
export const MM_XIRLINK_VISIONLINK = 1;
export const MM_OTI_611WAVEIN = 5;
export const MM_OTI_611WAVEOUT = 6;
export const MM_OTI_611MIXER = 7;
export const MM_OTI_611MIDIN = 18;
export const MM_OTI_611MIDIOUT = 19;
export const MM_AUREAL_AU8820 = 16;
export const MM_AU8820_SYNTH = 17;
export const MM_AU8820_WAVEOUT = 18;
export const MM_AU8820_WAVEIN = 19;
export const MM_AU8820_MIXER = 20;
export const MM_AU8820_AUX = 21;
export const MM_AU8820_MIDIOUT = 22;
export const MM_AU8820_MIDIIN = 23;
export const MM_AUREAL_AU8830 = 32;
export const MM_AU8830_SYNTH = 33;
export const MM_AU8830_WAVEOUT = 34;
export const MM_AU8830_WAVEIN = 35;
export const MM_AU8830_MIXER = 36;
export const MM_AU8830_AUX = 37;
export const MM_AU8830_MIDIOUT = 38;
export const MM_AU8830_MIDIIN = 39;
export const MM_VIVO_AUDIO_CODEC = 1;
export const MM_SHARP_MDC_MIDI_SYNTH = 1;
export const MM_SHARP_MDC_MIDI_IN = 2;
export const MM_SHARP_MDC_MIDI_OUT = 3;
export const MM_SHARP_MDC_WAVE_IN = 4;
export const MM_SHARP_MDC_WAVE_OUT = 5;
export const MM_SHARP_MDC_AUX = 6;
export const MM_SHARP_MDC_MIXER = 10;
export const MM_SHARP_MDC_AUX_MASTER = 100;
export const MM_SHARP_MDC_AUX_BASS = 101;
export const MM_SHARP_MDC_AUX_TREBLE = 102;
export const MM_SHARP_MDC_AUX_MIDI_VOL = 103;
export const MM_SHARP_MDC_AUX_WAVE_VOL = 104;
export const MM_SHARP_MDC_AUX_WAVE_RVB = 105;
export const MM_SHARP_MDC_AUX_WAVE_CHR = 106;
export const MM_SHARP_MDC_AUX_VOL = 107;
export const MM_SHARP_MDC_AUX_RVB = 108;
export const MM_SHARP_MDC_AUX_CHR = 109;
export const MM_LUCENT_ACM_G723 = 0;
export const MM_ATT_G729A = 1;
export const MM_MARIAN_ARC44WAVEIN = 1;
export const MM_MARIAN_ARC44WAVEOUT = 2;
export const MM_MARIAN_PRODIF24WAVEIN = 3;
export const MM_MARIAN_PRODIF24WAVEOUT = 4;
export const MM_MARIAN_ARC88WAVEIN = 5;
export const MM_MARIAN_ARC88WAVEOUT = 6;
export const MM_BCB_NETBOARD_10 = 1;
export const MM_BCB_TT75_10 = 2;
export const MM_MOTIONPIXELS_MVI2 = 1;
export const MM_QDESIGN_ACM_MPEG = 1;
export const MM_QDESIGN_ACM_QDESIGN_MUSIC = 2;
export const MM_NMP_CCP_WAVEIN = 1;
export const MM_NMP_CCP_WAVEOUT = 2;
export const MM_NMP_ACM_AMR = 10;
export const MM_DF_ACM_G726 = 1;
export const MM_DF_ACM_GSM610 = 2;
export const MM_BERCOS_WAVEIN = 1;
export const MM_BERCOS_MIXER = 2;
export const MM_BERCOS_WAVEOUT = 3;
export const MM_ONLIVE_MPCODEC = 1;
export const MM_PHONET_PP_WAVEOUT = 1;
export const MM_PHONET_PP_WAVEIN = 2;
export const MM_PHONET_PP_MIXER = 3;
export const MM_FTR_ENCODER_WAVEIN = 1;
export const MM_FTR_ACM = 2;
export const MM_ENET_T2000_LINEIN = 1;
export const MM_ENET_T2000_LINEOUT = 2;
export const MM_ENET_T2000_HANDSETIN = 3;
export const MM_ENET_T2000_HANDSETOUT = 4;
export const MM_EMAGIC_UNITOR8 = 1;
export const MM_SIPROLAB_ACELPNET = 1;
export const MM_DICTAPHONE_G726 = 1;
export const MM_RZS_ACM_TUBGSM = 1;
export const MM_EES_PCMIDI14 = 1;
export const MM_EES_PCMIDI14_IN = 2;
export const MM_EES_PCMIDI14_OUT1 = 3;
export const MM_EES_PCMIDI14_OUT2 = 4;
export const MM_EES_PCMIDI14_OUT3 = 5;
export const MM_EES_PCMIDI14_OUT4 = 6;
export const MM_HAFTMANN_LPTDAC2 = 1;
export const MM_LUCID_PCI24WAVEIN = 1;
export const MM_LUCID_PCI24WAVEOUT = 2;
export const MM_HEADSPACE_HAESYNTH = 1;
export const MM_HEADSPACE_HAEWAVEOUT = 2;
export const MM_HEADSPACE_HAEWAVEIN = 3;
export const MM_HEADSPACE_HAEMIXER = 4;
export const MM_UNISYS_ACM_NAP = 1;
export const MM_LUMINOSITI_SCWAVEIN = 1;
export const MM_LUMINOSITI_SCWAVEOUT = 2;
export const MM_LUMINOSITI_SCWAVEMIX = 3;
export const MM_ACTIVEVOICE_ACM_VOXADPCM = 1;
export const MM_DTS_DS = 1;
export const MM_SOFTLAB_NSK_FRW_WAVEIN = 1;
export const MM_SOFTLAB_NSK_FRW_WAVEOUT = 2;
export const MM_SOFTLAB_NSK_FRW_MIXER = 3;
export const MM_SOFTLAB_NSK_FRW_AUX = 4;
export const MM_FORTEMEDIA_WAVEIN = 1;
export const MM_FORTEMEDIA_WAVEOUT = 2;
export const MM_FORTEMEDIA_FMSYNC = 3;
export const MM_FORTEMEDIA_MIXER = 4;
export const MM_FORTEMEDIA_AUX = 5;
export const MM_SONORUS_STUDIO = 1;
export const MM_I_LINK_VOICE_CODER = 1;
export const MM_SELSIUS_SYSTEMS_RTPWAVEOUT = 1;
export const MM_SELSIUS_SYSTEMS_RTPWAVEIN = 2;
export const MM_ADMOS_FM_SYNTH = 1;
export const MM_ADMOS_QS3AMIDIOUT = 2;
export const MM_ADMOS_QS3AMIDIIN = 3;
export const MM_ADMOS_QS3AWAVEOUT = 4;
export const MM_ADMOS_QS3AWAVEIN = 5;
export const MM_LEXICON_STUDIO_WAVE_OUT = 1;
export const MM_LEXICON_STUDIO_WAVE_IN = 2;
export const MM_SGI_320_WAVEIN = 1;
export const MM_SGI_320_WAVEOUT = 2;
export const MM_SGI_320_MIXER = 3;
export const MM_SGI_540_WAVEIN = 4;
export const MM_SGI_540_WAVEOUT = 5;
export const MM_SGI_540_MIXER = 6;
export const MM_SGI_RAD_ADATMONO1_WAVEIN = 7;
export const MM_SGI_RAD_ADATMONO2_WAVEIN = 8;
export const MM_SGI_RAD_ADATMONO3_WAVEIN = 9;
export const MM_SGI_RAD_ADATMONO4_WAVEIN = 10;
export const MM_SGI_RAD_ADATMONO5_WAVEIN = 11;
export const MM_SGI_RAD_ADATMONO6_WAVEIN = 12;
export const MM_SGI_RAD_ADATMONO7_WAVEIN = 13;
export const MM_SGI_RAD_ADATMONO8_WAVEIN = 14;
export const MM_SGI_RAD_ADATSTEREO12_WAVEIN = 15;
export const MM_SGI_RAD_ADATSTEREO34_WAVEIN = 16;
export const MM_SGI_RAD_ADATSTEREO56_WAVEIN = 17;
export const MM_SGI_RAD_ADATSTEREO78_WAVEIN = 18;
export const MM_SGI_RAD_ADAT8CHAN_WAVEIN = 19;
export const MM_SGI_RAD_ADATMONO1_WAVEOUT = 20;
export const MM_SGI_RAD_ADATMONO2_WAVEOUT = 21;
export const MM_SGI_RAD_ADATMONO3_WAVEOUT = 22;
export const MM_SGI_RAD_ADATMONO4_WAVEOUT = 23;
export const MM_SGI_RAD_ADATMONO5_WAVEOUT = 24;
export const MM_SGI_RAD_ADATMONO6_WAVEOUT = 25;
export const MM_SGI_RAD_ADATMONO7_WAVEOUT = 26;
export const MM_SGI_RAD_ADATMONO8_WAVEOUT = 27;
export const MM_SGI_RAD_ADATSTEREO12_WAVEOUT = 28;
export const MM_SGI_RAD_ADATSTEREO32_WAVEOUT = 29;
export const MM_SGI_RAD_ADATSTEREO56_WAVEOUT = 30;
export const MM_SGI_RAD_ADATSTEREO78_WAVEOUT = 31;
export const MM_SGI_RAD_ADAT8CHAN_WAVEOUT = 32;
export const MM_SGI_RAD_AESMONO1_WAVEIN = 33;
export const MM_SGI_RAD_AESMONO2_WAVEIN = 34;
export const MM_SGI_RAD_AESSTEREO_WAVEIN = 35;
export const MM_SGI_RAD_AESMONO1_WAVEOUT = 36;
export const MM_SGI_RAD_AESMONO2_WAVEOUT = 37;
export const MM_SGI_RAD_AESSTEREO_WAVEOUT = 38;
export const MM_IPI_ACM_HSX = 1;
export const MM_IPI_ACM_RPELP = 2;
export const MM_IPI_WF_ASSS = 3;
export const MM_IPI_AT_WAVEOUT = 4;
export const MM_IPI_AT_WAVEIN = 5;
export const MM_IPI_AT_MIXER = 6;
export const MM_ICE_WAVEOUT = 1;
export const MM_ICE_WAVEIN = 2;
export const MM_ICE_MTWAVEOUT = 3;
export const MM_ICE_MTWAVEIN = 4;
export const MM_ICE_MIDIOUT1 = 5;
export const MM_ICE_MIDIIN1 = 6;
export const MM_ICE_MIDIOUT2 = 7;
export const MM_ICE_MIDIIN2 = 8;
export const MM_ICE_SYNTH = 9;
export const MM_ICE_MIXER = 10;
export const MM_ICE_AUX = 11;
export const MM_VQST_VQC1 = 1;
export const MM_VQST_VQC2 = 2;
export const MM_ETEK_KWIKMIDI_MIDIIN = 1;
export const MM_ETEK_KWIKMIDI_MIDIOUT = 2;
export const MM_INTERNET_SSW_MIDIOUT = 10;
export const MM_INTERNET_SSW_MIDIIN = 11;
export const MM_INTERNET_SSW_WAVEOUT = 12;
export const MM_INTERNET_SSW_WAVEIN = 13;
export const MM_SONY_ACM_SCX = 1;
export const MM_UH_ACM_ADPCM = 1;
export const MM_SYDEC_NV_WAVEIN = 1;
export const MM_SYDEC_NV_WAVEOUT = 2;
export const MM_FLEXION_X300_WAVEIN = 1;
export const MM_FLEXION_X300_WAVEOUT = 2;
export const MM_VIA_WAVEOUT = 1;
export const MM_VIA_WAVEIN = 2;
export const MM_VIA_MIXER = 3;
export const MM_VIA_AUX = 4;
export const MM_VIA_MPU401_MIDIOUT = 5;
export const MM_VIA_MPU401_MIDIIN = 6;
export const MM_VIA_SWFM_SYNTH = 7;
export const MM_VIA_WDM_WAVEOUT = 8;
export const MM_VIA_WDM_WAVEIN = 9;
export const MM_VIA_WDM_MIXER = 10;
export const MM_VIA_WDM_MPU401_MIDIOUT = 11;
export const MM_VIA_WDM_MPU401_MIDIIN = 12;
export const MM_MICRONAS_SC4 = 1;
export const MM_MICRONAS_CLP833 = 2;
export const MM_HP_WAVEOUT = 1;
export const MM_HP_WAVEIN = 2;
export const MM_QUICKAUDIO_MINIMIDI = 1;
export const MM_QUICKAUDIO_MAXIMIDI = 2;
export const MM_ICCC_UNA3_WAVEIN = 1;
export const MM_ICCC_UNA3_WAVEOUT = 2;
export const MM_ICCC_UNA3_AUX = 3;
export const MM_ICCC_UNA3_MIXER = 4;
export const MM_3COM_CB_MIXER = 1;
export const MM_3COM_CB_WAVEIN = 2;
export const MM_3COM_CB_WAVEOUT = 3;
export const MM_MINDMAKER_GC_WAVEIN = 1;
export const MM_MINDMAKER_GC_WAVEOUT = 2;
export const MM_MINDMAKER_GC_MIXER = 3;
export const MM_TELEKOL_WAVEOUT = 1;
export const MM_TELEKOL_WAVEIN = 2;
export const MM_ALGOVISION_VB80WAVEOUT = 1;
export const MM_ALGOVISION_VB80WAVEIN = 2;
export const MM_ALGOVISION_VB80MIXER = 3;
export const MM_ALGOVISION_VB80AUX = 4;
export const MM_ALGOVISION_VB80AUX2 = 5;
export const WAVE_FORMAT_UNKNOWN = 0;
export const WAVE_FORMAT_ADPCM = 2;
export const WAVE_FORMAT_IEEE_FLOAT = 3;
export const WAVE_FORMAT_VSELP = 4;
export const WAVE_FORMAT_IBM_CVSD = 5;
export const WAVE_FORMAT_ALAW = 6;
export const WAVE_FORMAT_MULAW = 7;
export const WAVE_FORMAT_DTS = 8;
export const WAVE_FORMAT_DRM = 9;
export const WAVE_FORMAT_WMAVOICE9 = 10;
export const WAVE_FORMAT_WMAVOICE10 = 11;
export const WAVE_FORMAT_OKI_ADPCM = 16;
export const WAVE_FORMAT_DVI_ADPCM = 17;
export const WAVE_FORMAT_IMA_ADPCM = 17;
export const WAVE_FORMAT_MEDIASPACE_ADPCM = 18;
export const WAVE_FORMAT_SIERRA_ADPCM = 19;
export const WAVE_FORMAT_G723_ADPCM = 20;
export const WAVE_FORMAT_DIGISTD = 21;
export const WAVE_FORMAT_DIGIFIX = 22;
export const WAVE_FORMAT_DIALOGIC_OKI_ADPCM = 23;
export const WAVE_FORMAT_MEDIAVISION_ADPCM = 24;
export const WAVE_FORMAT_CU_CODEC = 25;
export const WAVE_FORMAT_HP_DYN_VOICE = 26;
export const WAVE_FORMAT_YAMAHA_ADPCM = 32;
export const WAVE_FORMAT_SONARC = 33;
export const WAVE_FORMAT_DSPGROUP_TRUESPEECH = 34;
export const WAVE_FORMAT_ECHOSC1 = 35;
export const WAVE_FORMAT_AUDIOFILE_AF36 = 36;
export const WAVE_FORMAT_APTX = 37;
export const WAVE_FORMAT_AUDIOFILE_AF10 = 38;
export const WAVE_FORMAT_PROSODY_1612 = 39;
export const WAVE_FORMAT_LRC = 40;
export const WAVE_FORMAT_DOLBY_AC2 = 48;
export const WAVE_FORMAT_GSM610 = 49;
export const WAVE_FORMAT_MSNAUDIO = 50;
export const WAVE_FORMAT_ANTEX_ADPCME = 51;
export const WAVE_FORMAT_CONTROL_RES_VQLPC = 52;
export const WAVE_FORMAT_DIGIREAL = 53;
export const WAVE_FORMAT_DIGIADPCM = 54;
export const WAVE_FORMAT_CONTROL_RES_CR10 = 55;
export const WAVE_FORMAT_NMS_VBXADPCM = 56;
export const WAVE_FORMAT_CS_IMAADPCM = 57;
export const WAVE_FORMAT_ECHOSC3 = 58;
export const WAVE_FORMAT_ROCKWELL_ADPCM = 59;
export const WAVE_FORMAT_ROCKWELL_DIGITALK = 60;
export const WAVE_FORMAT_XEBEC = 61;
export const WAVE_FORMAT_G721_ADPCM = 64;
export const WAVE_FORMAT_G728_CELP = 65;
export const WAVE_FORMAT_MSG723 = 66;
export const WAVE_FORMAT_INTEL_G723_1 = 67;
export const WAVE_FORMAT_INTEL_G729 = 68;
export const WAVE_FORMAT_SHARP_G726 = 69;
export const WAVE_FORMAT_MPEG = 80;
export const WAVE_FORMAT_RT24 = 82;
export const WAVE_FORMAT_PAC = 83;
export const WAVE_FORMAT_MPEGLAYER3 = 85;
export const WAVE_FORMAT_LUCENT_G723 = 89;
export const WAVE_FORMAT_CIRRUS = 96;
export const WAVE_FORMAT_ESPCM = 97;
export const WAVE_FORMAT_VOXWARE = 98;
export const WAVE_FORMAT_CANOPUS_ATRAC = 99;
export const WAVE_FORMAT_G726_ADPCM = 100;
export const WAVE_FORMAT_G722_ADPCM = 101;
export const WAVE_FORMAT_DSAT = 102;
export const WAVE_FORMAT_DSAT_DISPLAY = 103;
export const WAVE_FORMAT_VOXWARE_BYTE_ALIGNED = 105;
export const WAVE_FORMAT_VOXWARE_AC8 = 112;
export const WAVE_FORMAT_VOXWARE_AC10 = 113;
export const WAVE_FORMAT_VOXWARE_AC16 = 114;
export const WAVE_FORMAT_VOXWARE_AC20 = 115;
export const WAVE_FORMAT_VOXWARE_RT24 = 116;
export const WAVE_FORMAT_VOXWARE_RT29 = 117;
export const WAVE_FORMAT_VOXWARE_RT29HW = 118;
export const WAVE_FORMAT_VOXWARE_VR12 = 119;
export const WAVE_FORMAT_VOXWARE_VR18 = 120;
export const WAVE_FORMAT_VOXWARE_TQ40 = 121;
export const WAVE_FORMAT_VOXWARE_SC3 = 122;
export const WAVE_FORMAT_VOXWARE_SC3_1 = 123;
export const WAVE_FORMAT_SOFTSOUND = 128;
export const WAVE_FORMAT_VOXWARE_TQ60 = 129;
export const WAVE_FORMAT_MSRT24 = 130;
export const WAVE_FORMAT_G729A = 131;
export const WAVE_FORMAT_MVI_MVI2 = 132;
export const WAVE_FORMAT_DF_G726 = 133;
export const WAVE_FORMAT_DF_GSM610 = 134;
export const WAVE_FORMAT_ISIAUDIO = 136;
export const WAVE_FORMAT_ONLIVE = 137;
export const WAVE_FORMAT_MULTITUDE_FT_SX20 = 138;
export const WAVE_FORMAT_INFOCOM_ITS_G721_ADPCM = 139;
export const WAVE_FORMAT_CONVEDIA_G729 = 140;
export const WAVE_FORMAT_CONGRUENCY = 141;
export const WAVE_FORMAT_SBC24 = 145;
export const WAVE_FORMAT_DOLBY_AC3_SPDIF = 146;
export const WAVE_FORMAT_MEDIASONIC_G723 = 147;
export const WAVE_FORMAT_PROSODY_8KBPS = 148;
export const WAVE_FORMAT_ZYXEL_ADPCM = 151;
export const WAVE_FORMAT_PHILIPS_LPCBB = 152;
export const WAVE_FORMAT_PACKED = 153;
export const WAVE_FORMAT_MALDEN_PHONYTALK = 160;
export const WAVE_FORMAT_RACAL_RECORDER_GSM = 161;
export const WAVE_FORMAT_RACAL_RECORDER_G720_A = 162;
export const WAVE_FORMAT_RACAL_RECORDER_G723_1 = 163;
export const WAVE_FORMAT_RACAL_RECORDER_TETRA_ACELP = 164;
export const WAVE_FORMAT_NEC_AAC = 176;
export const WAVE_FORMAT_RAW_AAC1 = 255;
export const WAVE_FORMAT_RHETOREX_ADPCM = 256;
export const WAVE_FORMAT_IRAT = 257;
export const WAVE_FORMAT_VIVO_G723 = 273;
export const WAVE_FORMAT_VIVO_SIREN = 274;
export const WAVE_FORMAT_PHILIPS_CELP = 288;
export const WAVE_FORMAT_PHILIPS_GRUNDIG = 289;
export const WAVE_FORMAT_DIGITAL_G723 = 291;
export const WAVE_FORMAT_SANYO_LD_ADPCM = 293;
export const WAVE_FORMAT_SIPROLAB_ACEPLNET = 304;
export const WAVE_FORMAT_SIPROLAB_ACELP4800 = 305;
export const WAVE_FORMAT_SIPROLAB_ACELP8V3 = 306;
export const WAVE_FORMAT_SIPROLAB_G729 = 307;
export const WAVE_FORMAT_SIPROLAB_G729A = 308;
export const WAVE_FORMAT_SIPROLAB_KELVIN = 309;
export const WAVE_FORMAT_VOICEAGE_AMR = 310;
export const WAVE_FORMAT_G726ADPCM = 320;
export const WAVE_FORMAT_DICTAPHONE_CELP68 = 321;
export const WAVE_FORMAT_DICTAPHONE_CELP54 = 322;
export const WAVE_FORMAT_QUALCOMM_PUREVOICE = 336;
export const WAVE_FORMAT_QUALCOMM_HALFRATE = 337;
export const WAVE_FORMAT_TUBGSM = 341;
export const WAVE_FORMAT_MSAUDIO1 = 352;
export const WAVE_FORMAT_WMAUDIO2 = 353;
export const WAVE_FORMAT_WMAUDIO3 = 354;
export const WAVE_FORMAT_WMAUDIO_LOSSLESS = 355;
export const WAVE_FORMAT_WMASPDIF = 356;
export const WAVE_FORMAT_UNISYS_NAP_ADPCM = 368;
export const WAVE_FORMAT_UNISYS_NAP_ULAW = 369;
export const WAVE_FORMAT_UNISYS_NAP_ALAW = 370;
export const WAVE_FORMAT_UNISYS_NAP_16K = 371;
export const WAVE_FORMAT_SYCOM_ACM_SYC008 = 372;
export const WAVE_FORMAT_SYCOM_ACM_SYC701_G726L = 373;
export const WAVE_FORMAT_SYCOM_ACM_SYC701_CELP54 = 374;
export const WAVE_FORMAT_SYCOM_ACM_SYC701_CELP68 = 375;
export const WAVE_FORMAT_KNOWLEDGE_ADVENTURE_ADPCM = 376;
export const WAVE_FORMAT_FRAUNHOFER_IIS_MPEG2_AAC = 384;
export const WAVE_FORMAT_DTS_DS = 400;
export const WAVE_FORMAT_CREATIVE_ADPCM = 512;
export const WAVE_FORMAT_CREATIVE_FASTSPEECH8 = 514;
export const WAVE_FORMAT_CREATIVE_FASTSPEECH10 = 515;
export const WAVE_FORMAT_UHER_ADPCM = 528;
export const WAVE_FORMAT_ULEAD_DV_AUDIO = 533;
export const WAVE_FORMAT_ULEAD_DV_AUDIO_1 = 534;
export const WAVE_FORMAT_QUARTERDECK = 544;
export const WAVE_FORMAT_ILINK_VC = 560;
export const WAVE_FORMAT_RAW_SPORT = 576;
export const WAVE_FORMAT_ESST_AC3 = 577;
export const WAVE_FORMAT_GENERIC_PASSTHRU = 585;
export const WAVE_FORMAT_IPI_HSX = 592;
export const WAVE_FORMAT_IPI_RPELP = 593;
export const WAVE_FORMAT_CS2 = 608;
export const WAVE_FORMAT_SONY_SCX = 624;
export const WAVE_FORMAT_SONY_SCY = 625;
export const WAVE_FORMAT_SONY_ATRAC3 = 626;
export const WAVE_FORMAT_SONY_SPC = 627;
export const WAVE_FORMAT_TELUM_AUDIO = 640;
export const WAVE_FORMAT_TELUM_IA_AUDIO = 641;
export const WAVE_FORMAT_NORCOM_VOICE_SYSTEMS_ADPCM = 645;
export const WAVE_FORMAT_FM_TOWNS_SND = 768;
export const WAVE_FORMAT_MICRONAS = 848;
export const WAVE_FORMAT_MICRONAS_CELP833 = 849;
export const WAVE_FORMAT_BTV_DIGITAL = 1024;
export const WAVE_FORMAT_INTEL_MUSIC_CODER = 1025;
export const WAVE_FORMAT_INDEO_AUDIO = 1026;
export const WAVE_FORMAT_QDESIGN_MUSIC = 1104;
export const WAVE_FORMAT_ON2_VP7_AUDIO = 1280;
export const WAVE_FORMAT_ON2_VP6_AUDIO = 1281;
export const WAVE_FORMAT_VME_VMPCM = 1664;
export const WAVE_FORMAT_TPC = 1665;
export const WAVE_FORMAT_LIGHTWAVE_LOSSLESS = 2222;
export const WAVE_FORMAT_OLIGSM = 4096;
export const WAVE_FORMAT_OLIADPCM = 4097;
export const WAVE_FORMAT_OLICELP = 4098;
export const WAVE_FORMAT_OLISBC = 4099;
export const WAVE_FORMAT_OLIOPR = 4100;
export const WAVE_FORMAT_LH_CODEC = 4352;
export const WAVE_FORMAT_LH_CODEC_CELP = 4353;
export const WAVE_FORMAT_LH_CODEC_SBC8 = 4354;
export const WAVE_FORMAT_LH_CODEC_SBC12 = 4355;
export const WAVE_FORMAT_LH_CODEC_SBC16 = 4356;
export const WAVE_FORMAT_NORRIS = 5120;
export const WAVE_FORMAT_ISIAUDIO_2 = 5121;
export const WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS = 5376;
export const WAVE_FORMAT_MPEG_ADTS_AAC = 5632;
export const WAVE_FORMAT_MPEG_RAW_AAC = 5633;
export const WAVE_FORMAT_MPEG_LOAS = 5634;
export const WAVE_FORMAT_NOKIA_MPEG_ADTS_AAC = 5640;
export const WAVE_FORMAT_NOKIA_MPEG_RAW_AAC = 5641;
export const WAVE_FORMAT_VODAFONE_MPEG_ADTS_AAC = 5642;
export const WAVE_FORMAT_VODAFONE_MPEG_RAW_AAC = 5643;
export const WAVE_FORMAT_MPEG_HEAAC = 5648;
export const WAVE_FORMAT_VOXWARE_RT24_SPEECH = 6172;
export const WAVE_FORMAT_SONICFOUNDRY_LOSSLESS = 6513;
export const WAVE_FORMAT_INNINGS_TELECOM_ADPCM = 6521;
export const WAVE_FORMAT_LUCENT_SX8300P = 7175;
export const WAVE_FORMAT_LUCENT_SX5363S = 7180;
export const WAVE_FORMAT_CUSEEME = 7939;
export const WAVE_FORMAT_NTCSOFT_ALF2CM_ACM = 8132;
export const WAVE_FORMAT_DVM = 8192;
export const WAVE_FORMAT_DTS2 = 8193;
export const WAVE_FORMAT_MAKEAVIS = 13075;
export const WAVE_FORMAT_DIVIO_MPEG4_AAC = 16707;
export const WAVE_FORMAT_NOKIA_ADAPTIVE_MULTIRATE = 16897;
export const WAVE_FORMAT_DIVIO_G726 = 16963;
export const WAVE_FORMAT_LEAD_SPEECH = 17228;
export const WAVE_FORMAT_LEAD_VORBIS = 22092;
export const WAVE_FORMAT_WAVPACK_AUDIO = 22358;
export const WAVE_FORMAT_ALAC = 27745;
export const WAVE_FORMAT_OGG_VORBIS_MODE_1 = 26447;
export const WAVE_FORMAT_OGG_VORBIS_MODE_2 = 26448;
export const WAVE_FORMAT_OGG_VORBIS_MODE_3 = 26449;
export const WAVE_FORMAT_OGG_VORBIS_MODE_1_PLUS = 26479;
export const WAVE_FORMAT_OGG_VORBIS_MODE_2_PLUS = 26480;
export const WAVE_FORMAT_OGG_VORBIS_MODE_3_PLUS = 26481;
export const WAVE_FORMAT_3COM_NBX = 28672;
export const WAVE_FORMAT_OPUS = 28751;
export const WAVE_FORMAT_FAAD_AAC = 28781;
export const WAVE_FORMAT_AMR_NB = 29537;
export const WAVE_FORMAT_AMR_WB = 29538;
export const WAVE_FORMAT_AMR_WP = 29539;
export const WAVE_FORMAT_GSM_AMR_CBR = 31265;
export const WAVE_FORMAT_GSM_AMR_VBR_SID = 31266;
export const WAVE_FORMAT_COMVERSE_INFOSYS_G723_1 = 41216;
export const WAVE_FORMAT_COMVERSE_INFOSYS_AVQSBC = 41217;
export const WAVE_FORMAT_COMVERSE_INFOSYS_SBC = 41218;
export const WAVE_FORMAT_SYMBOL_G729_A = 41219;
export const WAVE_FORMAT_VOICEAGE_AMR_WB = 41220;
export const WAVE_FORMAT_INGENIENT_G726 = 41221;
export const WAVE_FORMAT_MPEG4_AAC = 41222;
export const WAVE_FORMAT_ENCORE_G726 = 41223;
export const WAVE_FORMAT_ZOLL_ASAO = 41224;
export const WAVE_FORMAT_SPEEX_VOICE = 41225;
export const WAVE_FORMAT_VIANIX_MASC = 41226;
export const WAVE_FORMAT_WM9_SPECTRUM_ANALYZER = 41227;
export const WAVE_FORMAT_WMF_SPECTRUM_ANAYZER = 41228;
export const WAVE_FORMAT_GSM_610 = 41229;
export const WAVE_FORMAT_GSM_620 = 41230;
export const WAVE_FORMAT_GSM_660 = 41231;
export const WAVE_FORMAT_GSM_690 = 41232;
export const WAVE_FORMAT_GSM_ADAPTIVE_MULTIRATE_WB = 41233;
export const WAVE_FORMAT_POLYCOM_G722 = 41234;
export const WAVE_FORMAT_POLYCOM_G728 = 41235;
export const WAVE_FORMAT_POLYCOM_G729_A = 41236;
export const WAVE_FORMAT_POLYCOM_SIREN = 41237;
export const WAVE_FORMAT_GLOBAL_IP_ILBC = 41238;
export const WAVE_FORMAT_RADIOTIME_TIME_SHIFT_RADIO = 41239;
export const WAVE_FORMAT_NICE_ACA = 41240;
export const WAVE_FORMAT_NICE_ADPCM = 41241;
export const WAVE_FORMAT_VOCORD_G721 = 41242;
export const WAVE_FORMAT_VOCORD_G726 = 41243;
export const WAVE_FORMAT_VOCORD_G722_1 = 41244;
export const WAVE_FORMAT_VOCORD_G728 = 41245;
export const WAVE_FORMAT_VOCORD_G729 = 41246;
export const WAVE_FORMAT_VOCORD_G729_A = 41247;
export const WAVE_FORMAT_VOCORD_G723_1 = 41248;
export const WAVE_FORMAT_VOCORD_LBC = 41249;
export const WAVE_FORMAT_NICE_G728 = 41250;
export const WAVE_FORMAT_FRACE_TELECOM_G729 = 41251;
export const WAVE_FORMAT_CODIAN = 41252;
export const WAVE_FORMAT_DOLBY_AC4 = 44096;
export const WAVE_FORMAT_FLAC = 61868;
export const WAVE_FORMAT_DEVELOPMENT = 65535;
export const ACM_MPEG_LAYER1 = 1;
export const ACM_MPEG_LAYER2 = 2;
export const ACM_MPEG_LAYER3 = 4;
export const ACM_MPEG_STEREO = 1;
export const ACM_MPEG_JOINTSTEREO = 2;
export const ACM_MPEG_DUALCHANNEL = 4;
export const ACM_MPEG_SINGLECHANNEL = 8;
export const ACM_MPEG_PRIVATEBIT = 1;
export const ACM_MPEG_COPYRIGHT = 2;
export const ACM_MPEG_ORIGINALHOME = 4;
export const ACM_MPEG_PROTECTIONBIT = 8;
export const ACM_MPEG_ID_MPEG1 = 16;
export const MPEGLAYER3_WFX_EXTRA_BYTES = 12;
export const MPEGLAYER3_ID_UNKNOWN = 0;
export const MPEGLAYER3_ID_MPEG = 1;
export const MPEGLAYER3_ID_CONSTANTFRAMESIZE = 2;
export const MM_MSFT_ACM_WMAUDIO = 39;
export const WMAUDIO_BITS_PER_SAMPLE = 16;
export const WMAUDIO_MAX_CHANNELS = 2;
export const MM_MSFT_ACM_MSAUDIO1 = 39;
export const MSAUDIO1_BITS_PER_SAMPLE = 16;
export const MSAUDIO1_MAX_CHANNELS = 2;
export const MM_MSFT_ACM_WMAUDIO2 = 101;
export const WMAUDIO2_BITS_PER_SAMPLE = 16;
export const WMAUDIO2_MAX_CHANNELS = 2;
export const WAVE_FILTER_UNKNOWN = 0;
export const WAVE_FILTER_DEVELOPMENT = 65535;
export const WAVE_FILTER_VOLUME = 1;
export const WAVE_FILTER_ECHO = 2;
export const JPEG_PROCESS_BASELINE = 0;
export const AVIIF_CONTROLFRAME = 512;
export const JIFMK_SOF0 = 65472;
export const JIFMK_SOF1 = 65473;
export const JIFMK_SOF2 = 65474;
export const JIFMK_SOF3 = 65475;
export const JIFMK_SOF5 = 65477;
export const JIFMK_SOF6 = 65478;
export const JIFMK_SOF7 = 65479;
export const JIFMK_JPG = 65480;
export const JIFMK_SOF9 = 65481;
export const JIFMK_SOF10 = 65482;
export const JIFMK_SOF11 = 65483;
export const JIFMK_SOF13 = 65485;
export const JIFMK_SOF14 = 65486;
export const JIFMK_SOF15 = 65487;
export const JIFMK_DHT = 65476;
export const JIFMK_DAC = 65484;
export const JIFMK_RST0 = 65488;
export const JIFMK_RST1 = 65489;
export const JIFMK_RST2 = 65490;
export const JIFMK_RST3 = 65491;
export const JIFMK_RST4 = 65492;
export const JIFMK_RST5 = 65493;
export const JIFMK_RST6 = 65494;
export const JIFMK_RST7 = 65495;
export const JIFMK_SOI = 65496;
export const JIFMK_EOI = 65497;
export const JIFMK_SOS = 65498;
export const JIFMK_DQT = 65499;
export const JIFMK_DNL = 65500;
export const JIFMK_DRI = 65501;
export const JIFMK_DHP = 65502;
export const JIFMK_EXP = 65503;
export const JIFMK_APP0 = 65504;
export const JIFMK_APP1 = 65505;
export const JIFMK_APP2 = 65506;
export const JIFMK_APP3 = 65507;
export const JIFMK_APP4 = 65508;
export const JIFMK_APP5 = 65509;
export const JIFMK_APP6 = 65510;
export const JIFMK_APP7 = 65511;
export const JIFMK_JPG0 = 65520;
export const JIFMK_JPG1 = 65521;
export const JIFMK_JPG2 = 65522;
export const JIFMK_JPG3 = 65523;
export const JIFMK_JPG4 = 65524;
export const JIFMK_JPG5 = 65525;
export const JIFMK_JPG6 = 65526;
export const JIFMK_JPG7 = 65527;
export const JIFMK_JPG8 = 65528;
export const JIFMK_JPG9 = 65529;
export const JIFMK_JPG10 = 65530;
export const JIFMK_JPG11 = 65531;
export const JIFMK_JPG12 = 65532;
export const JIFMK_JPG13 = 65533;
export const JIFMK_COM = 65534;
export const JIFMK_TEM = 65281;
export const JIFMK_RES = 65282;
export const JIFMK_00 = 65280;
export const JIFMK_FF = 65535;
export const JPEG_Y = 1;
export const JPEG_YCbCr = 2;
export const JPEG_RGB = 3;
export const MIXERCONTROL_CONTROLTYPE_SRS_MTS = 536936454;
export const MIXERCONTROL_CONTROLTYPE_SRS_ONOFF = 536936455;
export const MIXERCONTROL_CONTROLTYPE_SRS_SYNTHSELECT = 536936456;
export const VP_COMMAND_GET = 1;
export const VP_COMMAND_SET = 2;
export const VP_FLAGS_TV_MODE = 1;
export const VP_FLAGS_TV_STANDARD = 2;
export const VP_FLAGS_FLICKER = 4;
export const VP_FLAGS_OVERSCAN = 8;
export const VP_FLAGS_MAX_UNSCALED = 16;
export const VP_FLAGS_POSITION = 32;
export const VP_FLAGS_BRIGHTNESS = 64;
export const VP_FLAGS_CONTRAST = 128;
export const VP_FLAGS_COPYPROTECT = 256;
export const VP_MODE_WIN_GRAPHICS = 1;
export const VP_MODE_TV_PLAYBACK = 2;
export const VP_TV_STANDARD_NTSC_M = 1;
export const VP_TV_STANDARD_NTSC_M_J = 2;
export const VP_TV_STANDARD_PAL_B = 4;
export const VP_TV_STANDARD_PAL_D = 8;
export const VP_TV_STANDARD_PAL_H = 16;
export const VP_TV_STANDARD_PAL_I = 32;
export const VP_TV_STANDARD_PAL_M = 64;
export const VP_TV_STANDARD_PAL_N = 128;
export const VP_TV_STANDARD_SECAM_B = 256;
export const VP_TV_STANDARD_SECAM_D = 512;
export const VP_TV_STANDARD_SECAM_G = 1024;
export const VP_TV_STANDARD_SECAM_H = 2048;
export const VP_TV_STANDARD_SECAM_K = 4096;
export const VP_TV_STANDARD_SECAM_K1 = 8192;
export const VP_TV_STANDARD_SECAM_L = 16384;
export const VP_TV_STANDARD_WIN_VGA = 32768;
export const VP_TV_STANDARD_NTSC_433 = 65536;
export const VP_TV_STANDARD_PAL_G = 131072;
export const VP_TV_STANDARD_PAL_60 = 262144;
export const VP_TV_STANDARD_SECAM_L1 = 524288;
export const VP_CP_TYPE_APS_TRIGGER = 1;
export const VP_CP_TYPE_MACROVISION = 2;
export const VP_CP_CMD_ACTIVATE = 1;
export const VP_CP_CMD_DEACTIVATE = 2;
export const VP_CP_CMD_CHANGE = 4;
export const ICVERSION = 260;
export const BI_1632 = 842217009;
export const ICERR_OK = 0;
export const ICERR_DONTDRAW = 1;
export const ICERR_NEWPALETTE = 2;
export const ICERR_GOTOKEYFRAME = 3;
export const ICERR_STOPDRAWING = 4;
export const ICERR_UNSUPPORTED = "-1";
export const ICERR_BADFORMAT = "-2";
export const ICERR_MEMORY = "-3";
export const ICERR_INTERNAL = "-4";
export const ICERR_BADFLAGS = "-5";
export const ICERR_BADPARAM = "-6";
export const ICERR_BADSIZE = "-7";
export const ICERR_BADHANDLE = "-8";
export const ICERR_CANTUPDATE = "-9";
export const ICERR_ABORT = "-10";
export const ICERR_ERROR = "-100";
export const ICERR_BADBITDEPTH = "-200";
export const ICERR_BADIMAGESIZE = "-201";
export const ICERR_CUSTOM = "-400";
export const ICMODE_COMPRESS = 1;
export const ICMODE_DECOMPRESS = 2;
export const ICMODE_FASTDECOMPRESS = 3;
export const ICMODE_QUERY = 4;
export const ICMODE_FASTCOMPRESS = 5;
export const ICMODE_DRAW = 8;
export const ICMODE_INTERNALF_FUNCTION32 = 32768;
export const ICMODE_INTERNALF_MASK = 32768;
export const AVIIF_TWOCC = 2;
export const ICQUALITY_LOW = 0;
export const ICQUALITY_HIGH = 10000;
export const ICQUALITY_DEFAULT = "-1";
export const ICM_USER = 16384;
export const ICM_RESERVED_LOW = 20480;
export const ICM_RESERVED_HIGH = 24576;
export const ICM_GETSTATE = 20480;
export const ICM_SETSTATE = 20481;
export const ICM_GETINFO = 20482;
export const ICM_CONFIGURE = 20490;
export const ICM_ABOUT = 20491;
export const ICM_GETERRORTEXT = 20492;
export const ICM_GETFORMATNAME = 20500;
export const ICM_ENUMFORMATS = 20501;
export const ICM_GETDEFAULTQUALITY = 20510;
export const ICM_GETQUALITY = 20511;
export const ICM_SETQUALITY = 20512;
export const ICM_SET = 20520;
export const ICM_GET = 20521;
export const ICM_COMPRESS_GET_FORMAT = 16388;
export const ICM_COMPRESS_GET_SIZE = 16389;
export const ICM_COMPRESS_QUERY = 16390;
export const ICM_COMPRESS_BEGIN = 16391;
export const ICM_COMPRESS = 16392;
export const ICM_COMPRESS_END = 16393;
export const ICM_DECOMPRESS_GET_FORMAT = 16394;
export const ICM_DECOMPRESS_QUERY = 16395;
export const ICM_DECOMPRESS_BEGIN = 16396;
export const ICM_DECOMPRESS = 16397;
export const ICM_DECOMPRESS_END = 16398;
export const ICM_DECOMPRESS_SET_PALETTE = 16413;
export const ICM_DECOMPRESS_GET_PALETTE = 16414;
export const ICM_DRAW_QUERY = 16415;
export const ICM_DRAW_BEGIN = 16399;
export const ICM_DRAW_GET_PALETTE = 16400;
export const ICM_DRAW_UPDATE = 16401;
export const ICM_DRAW_START = 16402;
export const ICM_DRAW_STOP = 16403;
export const ICM_DRAW_BITS = 16404;
export const ICM_DRAW_END = 16405;
export const ICM_DRAW_GETTIME = 16416;
export const ICM_DRAW = 16417;
export const ICM_DRAW_WINDOW = 16418;
export const ICM_DRAW_SETTIME = 16419;
export const ICM_DRAW_REALIZE = 16420;
export const ICM_DRAW_FLUSH = 16421;
export const ICM_DRAW_RENDERBUFFER = 16422;
export const ICM_DRAW_START_PLAY = 16423;
export const ICM_DRAW_STOP_PLAY = 16424;
export const ICM_DRAW_SUGGESTFORMAT = 16434;
export const ICM_DRAW_CHANGEPALETTE = 16435;
export const ICM_DRAW_IDLE = 16436;
export const ICM_GETBUFFERSWANTED = 16425;
export const ICM_GETDEFAULTKEYFRAMERATE = 16426;
export const ICM_DECOMPRESSEX_BEGIN = 16444;
export const ICM_DECOMPRESSEX_QUERY = 16445;
export const ICM_DECOMPRESSEX = 16446;
export const ICM_DECOMPRESSEX_END = 16447;
export const ICM_COMPRESS_FRAMES_INFO = 16454;
export const ICM_COMPRESS_FRAMES = 16455;
export const ICM_SET_STATUS_PROC = 16456;
export const VIDCF_QUALITY = 1;
export const VIDCF_CRUNCH = 2;
export const VIDCF_TEMPORAL = 4;
export const VIDCF_COMPRESSFRAMES = 8;
export const VIDCF_DRAW = 16;
export const VIDCF_FASTTEMPORALC = 32;
export const VIDCF_FASTTEMPORALD = 128;
export const ICCOMPRESS_KEYFRAME = 1;
export const ICCOMPRESSFRAMES_PADDING = 1;
export const ICSTATUS_START = 0;
export const ICSTATUS_STATUS = 1;
export const ICSTATUS_END = 2;
export const ICSTATUS_ERROR = 3;
export const ICSTATUS_YIELD = 4;
export const ICDECOMPRESS_HURRYUP = "-2147483648";
export const ICDECOMPRESS_UPDATE = 1073741824;
export const ICDECOMPRESS_PREROLL = 536870912;
export const ICDECOMPRESS_NULLFRAME = 268435456;
export const ICDECOMPRESS_NOTKEYFRAME = 134217728;
export const ICDRAW_QUERY = 1;
export const ICDRAW_FULLSCREEN = 2;
export const ICDRAW_HDC = 4;
export const ICDRAW_ANIMATE = 8;
export const ICDRAW_CONTINUE = 16;
export const ICDRAW_MEMORYDC = 32;
export const ICDRAW_UPDATING = 64;
export const ICDRAW_RENDER = 128;
export const ICDRAW_BUFFER = 256;
export const ICDRAW_HURRYUP = "-2147483648";
export const ICDRAW_UPDATE = 1073741824;
export const ICDRAW_PREROLL = 536870912;
export const ICDRAW_NULLFRAME = 268435456;
export const ICDRAW_NOTKEYFRAME = 134217728;
export const ICINSTALL_UNICODE = 32768;
export const ICINSTALL_FUNCTION = 1;
export const ICINSTALL_DRIVER = 2;
export const ICINSTALL_HDRV = 4;
export const ICINSTALL_DRIVERW = 32770;
export const ICMF_CONFIGURE_QUERY = 1;
export const ICMF_ABOUT_QUERY = 1;
export const ICMF_COMPVARS_VALID = 1;
export const ICMF_CHOOSE_KEYFRAME = 1;
export const ICMF_CHOOSE_DATARATE = 2;
export const ICMF_CHOOSE_PREVIEW = 4;
export const ICMF_CHOOSE_ALLCOMPRESSORS = 8;
export const DDF_0001 = 1;
export const DDF_UPDATE = 2;
export const DDF_SAME_HDC = 4;
export const DDF_SAME_DRAW = 8;
export const DDF_DONTDRAW = 16;
export const DDF_ANIMATE = 32;
export const DDF_BUFFER = 64;
export const DDF_JUSTDRAWIT = 128;
export const DDF_FULLSCREEN = 256;
export const DDF_BACKGROUNDPAL = 512;
export const DDF_NOTKEYFRAME = 1024;
export const DDF_HURRYUP = 2048;
export const DDF_HALFTONE = 4096;
export const DDF_2000 = 8192;
export const DDF_PREROLL = 16;
export const DDF_SAME_DIB = 8;
export const DDF_SAME_SIZE = 8;
export const PD_CAN_DRAW_DIB = 1;
export const PD_CAN_STRETCHDIB = 2;
export const PD_STRETCHDIB_1_1_OK = 4;
export const PD_STRETCHDIB_1_2_OK = 8;
export const PD_STRETCHDIB_1_N_OK = 16;
export const AVIGETFRAMEF_BESTDISPLAYFMT = 1;
export const AVISTREAMINFO_DISABLED = 1;
export const AVISTREAMINFO_FORMATCHANGES = 65536;
export const AVIFILEINFO_HASINDEX = 16;
export const AVIFILEINFO_MUSTUSEINDEX = 32;
export const AVIFILEINFO_ISINTERLEAVED = 256;
export const AVIFILEINFO_WASCAPTUREFILE = 65536;
export const AVIFILEINFO_COPYRIGHTED = 131072;
export const AVIFILECAPS_CANREAD = 1;
export const AVIFILECAPS_CANWRITE = 2;
export const AVIFILECAPS_ALLKEYFRAMES = 16;
export const AVIFILECAPS_NOCOMPRESSION = 32;
export const AVICOMPRESSF_INTERLEAVE = 1;
export const AVICOMPRESSF_DATARATE = 2;
export const AVICOMPRESSF_KEYFRAMES = 4;
export const AVICOMPRESSF_VALID = 8;
export const AVIFILEHANDLER_CANREAD = 1;
export const AVIFILEHANDLER_CANWRITE = 2;
export const AVIFILEHANDLER_CANACCEPTNONRGB = 4;
export const AVISTREAMREAD_CONVENIENT = "-1";
export const FIND_DIR = 15;
export const FIND_NEXT = 1;
export const FIND_PREV = 4;
export const FIND_FROM_START = 8;
export const FIND_TYPE = 240;
export const FIND_KEY = 16;
export const FIND_ANY = 32;
export const FIND_FORMAT = 64;
export const FIND_RET = 61440;
export const FIND_POS = 0;
export const FIND_LENGTH = 4096;
export const FIND_OFFSET = 8192;
export const FIND_SIZE = 12288;
export const FIND_INDEX = 16384;
export const SEARCH_NEAREST = 4;
export const SEARCH_BACKWARD = 4;
export const SEARCH_FORWARD = 1;
export const SEARCH_KEY = 16;
export const SEARCH_ANY = 32;
export const AVIERR_OK = 0;
export const MCIWND_WINDOW_CLASS = "MCIWndClass";
export const MCIWNDOPENF_NEW = 1;
export const MCIWNDF_NOAUTOSIZEWINDOW = 1;
export const MCIWNDF_NOPLAYBAR = 2;
export const MCIWNDF_NOAUTOSIZEMOVIE = 4;
export const MCIWNDF_NOMENU = 8;
export const MCIWNDF_SHOWNAME = 16;
export const MCIWNDF_SHOWPOS = 32;
export const MCIWNDF_SHOWMODE = 64;
export const MCIWNDF_SHOWALL = 112;
export const MCIWNDF_NOTIFYMODE = 256;
export const MCIWNDF_NOTIFYPOS = 512;
export const MCIWNDF_NOTIFYSIZE = 1024;
export const MCIWNDF_NOTIFYERROR = 4096;
export const MCIWNDF_NOTIFYALL = 7936;
export const MCIWNDF_NOTIFYANSI = 128;
export const MCIWNDF_NOTIFYMEDIAA = 2176;
export const MCIWNDF_NOTIFYMEDIAW = 2048;
export const MCIWNDF_NOTIFYMEDIA = 2048;
export const MCIWNDF_RECORD = 8192;
export const MCIWNDF_NOERRORDLG = 16384;
export const MCIWNDF_NOOPEN = 32768;
export const MCIWNDM_GETDEVICEID = 1124;
export const MCIWNDM_GETSTART = 1127;
export const MCIWNDM_GETLENGTH = 1128;
export const MCIWNDM_GETEND = 1129;
export const MCIWNDM_EJECT = 1131;
export const MCIWNDM_SETZOOM = 1132;
export const MCIWNDM_GETZOOM = 1133;
export const MCIWNDM_SETVOLUME = 1134;
export const MCIWNDM_GETVOLUME = 1135;
export const MCIWNDM_SETSPEED = 1136;
export const MCIWNDM_GETSPEED = 1137;
export const MCIWNDM_SETREPEAT = 1138;
export const MCIWNDM_GETREPEAT = 1139;
export const MCIWNDM_REALIZE = 1142;
export const MCIWNDM_VALIDATEMEDIA = 1145;
export const MCIWNDM_PLAYFROM = 1146;
export const MCIWNDM_PLAYTO = 1147;
export const MCIWNDM_GETPALETTE = 1150;
export const MCIWNDM_SETPALETTE = 1151;
export const MCIWNDM_SETTIMERS = 1153;
export const MCIWNDM_SETACTIVETIMER = 1154;
export const MCIWNDM_SETINACTIVETIMER = 1155;
export const MCIWNDM_GETACTIVETIMER = 1156;
export const MCIWNDM_GETINACTIVETIMER = 1157;
export const MCIWNDM_CHANGESTYLES = 1159;
export const MCIWNDM_GETSTYLES = 1160;
export const MCIWNDM_GETALIAS = 1161;
export const MCIWNDM_PLAYREVERSE = 1163;
export const MCIWNDM_GET_SOURCE = 1164;
export const MCIWNDM_PUT_SOURCE = 1165;
export const MCIWNDM_GET_DEST = 1166;
export const MCIWNDM_PUT_DEST = 1167;
export const MCIWNDM_CAN_PLAY = 1168;
export const MCIWNDM_CAN_WINDOW = 1169;
export const MCIWNDM_CAN_RECORD = 1170;
export const MCIWNDM_CAN_SAVE = 1171;
export const MCIWNDM_CAN_EJECT = 1172;
export const MCIWNDM_CAN_CONFIG = 1173;
export const MCIWNDM_PALETTEKICK = 1174;
export const MCIWNDM_OPENINTERFACE = 1175;
export const MCIWNDM_SETOWNER = 1176;
export const MCIWNDM_SENDSTRINGA = 1125;
export const MCIWNDM_GETPOSITIONA = 1126;
export const MCIWNDM_GETMODEA = 1130;
export const MCIWNDM_SETTIMEFORMATA = 1143;
export const MCIWNDM_GETTIMEFORMATA = 1144;
export const MCIWNDM_GETFILENAMEA = 1148;
export const MCIWNDM_GETDEVICEA = 1149;
export const MCIWNDM_GETERRORA = 1152;
export const MCIWNDM_NEWA = 1158;
export const MCIWNDM_RETURNSTRINGA = 1162;
export const MCIWNDM_OPENA = 1177;
export const MCIWNDM_SENDSTRINGW = 1225;
export const MCIWNDM_GETPOSITIONW = 1226;
export const MCIWNDM_GETMODEW = 1230;
export const MCIWNDM_SETTIMEFORMATW = 1243;
export const MCIWNDM_GETTIMEFORMATW = 1244;
export const MCIWNDM_GETFILENAMEW = 1248;
export const MCIWNDM_GETDEVICEW = 1249;
export const MCIWNDM_GETERRORW = 1252;
export const MCIWNDM_NEWW = 1258;
export const MCIWNDM_RETURNSTRINGW = 1262;
export const MCIWNDM_OPENW = 1276;
export const MCIWNDM_SENDSTRING = 1225;
export const MCIWNDM_GETPOSITION = 1226;
export const MCIWNDM_GETMODE = 1230;
export const MCIWNDM_SETTIMEFORMAT = 1243;
export const MCIWNDM_GETTIMEFORMAT = 1244;
export const MCIWNDM_GETFILENAME = 1248;
export const MCIWNDM_GETDEVICE = 1249;
export const MCIWNDM_GETERROR = 1252;
export const MCIWNDM_NEW = 1258;
export const MCIWNDM_RETURNSTRING = 1262;
export const MCIWNDM_OPEN = 1276;
export const MCIWNDM_NOTIFYMODE = 1224;
export const MCIWNDM_NOTIFYPOS = 1225;
export const MCIWNDM_NOTIFYSIZE = 1226;
export const MCIWNDM_NOTIFYMEDIA = 1227;
export const MCIWNDM_NOTIFYERROR = 1229;
export const MCIWND_START = "-1";
export const MCIWND_END = "-2";
export const MCI_OPEN = 2051;
export const MCI_CLOSE = 2052;
export const MCI_PLAY = 2054;
export const MCI_SEEK = 2055;
export const MCI_STOP = 2056;
export const MCI_PAUSE = 2057;
export const MCI_STEP = 2062;
export const MCI_RECORD = 2063;
export const MCI_SAVE = 2067;
export const MCI_CUT = 2129;
export const MCI_COPY = 2130;
export const MCI_PASTE = 2131;
export const MCI_RESUME = 2133;
export const MCI_DELETE = 2134;
export const MCI_MODE_NOT_READY = 524;
export const MCI_MODE_STOP = 525;
export const MCI_MODE_PLAY = 526;
export const MCI_MODE_RECORD = 527;
export const MCI_MODE_SEEK = 528;
export const MCI_MODE_PAUSE = 529;
export const MCI_MODE_OPEN = 530;
export const DV_ERR_OK = 0;
export const DV_ERR_BASE = 1;
export const DV_ERR_NONSPECIFIC = 1;
export const DV_ERR_BADFORMAT = 2;
export const DV_ERR_STILLPLAYING = 3;
export const DV_ERR_UNPREPARED = 4;
export const DV_ERR_SYNC = 5;
export const DV_ERR_TOOMANYCHANNELS = 6;
export const DV_ERR_NOTDETECTED = 7;
export const DV_ERR_BADINSTALL = 8;
export const DV_ERR_CREATEPALETTE = 9;
export const DV_ERR_SIZEFIELD = 10;
export const DV_ERR_PARAM1 = 11;
export const DV_ERR_PARAM2 = 12;
export const DV_ERR_CONFIG1 = 13;
export const DV_ERR_CONFIG2 = 14;
export const DV_ERR_FLAGS = 15;
export const DV_ERR_13 = 16;
export const DV_ERR_NOTSUPPORTED = 17;
export const DV_ERR_NOMEM = 18;
export const DV_ERR_ALLOCATED = 19;
export const DV_ERR_BADDEVICEID = 20;
export const DV_ERR_INVALHANDLE = 21;
export const DV_ERR_BADERRNUM = 22;
export const DV_ERR_NO_BUFFERS = 23;
export const DV_ERR_MEM_CONFLICT = 24;
export const DV_ERR_IO_CONFLICT = 25;
export const DV_ERR_DMA_CONFLICT = 26;
export const DV_ERR_INT_CONFLICT = 27;
export const DV_ERR_PROTECT_ONLY = 28;
export const DV_ERR_LASTERROR = 28;
export const DV_ERR_USER_MSG = 1001;
export const DV_VM_OPEN = 976;
export const DV_VM_CLOSE = 977;
export const DV_VM_DATA = 978;
export const DV_VM_ERROR = 979;
export const VHDR_DONE = 1;
export const VHDR_PREPARED = 2;
export const VHDR_INQUEUE = 4;
export const VHDR_KEYFRAME = 8;
export const VHDR_VALID = 15;
export const VCAPS_OVERLAY = 1;
export const VCAPS_SRC_CAN_CLIP = 2;
export const VCAPS_DST_CAN_CLIP = 4;
export const VCAPS_CAN_SCALE = 8;
export const VIDEO_EXTERNALIN = 1;
export const VIDEO_EXTERNALOUT = 2;
export const VIDEO_IN = 4;
export const VIDEO_OUT = 8;
export const VIDEO_DLG_QUERY = 16;
export const VIDEO_CONFIGURE_QUERY = 32768;
export const VIDEO_CONFIGURE_SET = 4096;
export const VIDEO_CONFIGURE_GET = 8192;
export const VIDEO_CONFIGURE_QUERYSIZE = 1;
export const VIDEO_CONFIGURE_CURRENT = 16;
export const VIDEO_CONFIGURE_NOMINAL = 32;
export const VIDEO_CONFIGURE_MIN = 64;
export const VIDEO_CONFIGURE_MAX = 128;
export const DVM_USER = 16384;
export const DVM_CONFIGURE_START = 4096;
export const DVM_CONFIGURE_END = 8191;
export const DVM_PALETTE = 4097;
export const DVM_FORMAT = 4098;
export const DVM_PALETTERGB555 = 4099;
export const DVM_SRC_RECT = 4100;
export const DVM_DST_RECT = 4101;
export const WM_CAP_UNICODE_START = 1124;
export const WM_CAP_GET_CAPSTREAMPTR = 1025;
export const WM_CAP_SET_CALLBACK_ERRORW = 1126;
export const WM_CAP_SET_CALLBACK_STATUSW = 1127;
export const WM_CAP_SET_CALLBACK_ERRORA = 1026;
export const WM_CAP_SET_CALLBACK_STATUSA = 1027;
export const WM_CAP_SET_CALLBACK_ERROR = 1126;
export const WM_CAP_SET_CALLBACK_STATUS = 1127;
export const WM_CAP_SET_CALLBACK_YIELD = 1028;
export const WM_CAP_SET_CALLBACK_FRAME = 1029;
export const WM_CAP_SET_CALLBACK_VIDEOSTREAM = 1030;
export const WM_CAP_SET_CALLBACK_WAVESTREAM = 1031;
export const WM_CAP_GET_USER_DATA = 1032;
export const WM_CAP_SET_USER_DATA = 1033;
export const WM_CAP_DRIVER_CONNECT = 1034;
export const WM_CAP_DRIVER_DISCONNECT = 1035;
export const WM_CAP_DRIVER_GET_NAMEA = 1036;
export const WM_CAP_DRIVER_GET_VERSIONA = 1037;
export const WM_CAP_DRIVER_GET_NAMEW = 1136;
export const WM_CAP_DRIVER_GET_VERSIONW = 1137;
export const WM_CAP_DRIVER_GET_NAME = 1136;
export const WM_CAP_DRIVER_GET_VERSION = 1137;
export const WM_CAP_DRIVER_GET_CAPS = 1038;
export const WM_CAP_FILE_SET_CAPTURE_FILEA = 1044;
export const WM_CAP_FILE_GET_CAPTURE_FILEA = 1045;
export const WM_CAP_FILE_SAVEASA = 1047;
export const WM_CAP_FILE_SAVEDIBA = 1049;
export const WM_CAP_FILE_SET_CAPTURE_FILEW = 1144;
export const WM_CAP_FILE_GET_CAPTURE_FILEW = 1145;
export const WM_CAP_FILE_SAVEASW = 1147;
export const WM_CAP_FILE_SAVEDIBW = 1149;
export const WM_CAP_FILE_SET_CAPTURE_FILE = 1144;
export const WM_CAP_FILE_GET_CAPTURE_FILE = 1145;
export const WM_CAP_FILE_SAVEAS = 1147;
export const WM_CAP_FILE_SAVEDIB = 1149;
export const WM_CAP_FILE_ALLOCATE = 1046;
export const WM_CAP_FILE_SET_INFOCHUNK = 1048;
export const WM_CAP_EDIT_COPY = 1054;
export const WM_CAP_SET_AUDIOFORMAT = 1059;
export const WM_CAP_GET_AUDIOFORMAT = 1060;
export const WM_CAP_DLG_VIDEOFORMAT = 1065;
export const WM_CAP_DLG_VIDEOSOURCE = 1066;
export const WM_CAP_DLG_VIDEODISPLAY = 1067;
export const WM_CAP_GET_VIDEOFORMAT = 1068;
export const WM_CAP_SET_VIDEOFORMAT = 1069;
export const WM_CAP_DLG_VIDEOCOMPRESSION = 1070;
export const WM_CAP_SET_PREVIEW = 1074;
export const WM_CAP_SET_OVERLAY = 1075;
export const WM_CAP_SET_PREVIEWRATE = 1076;
export const WM_CAP_SET_SCALE = 1077;
export const WM_CAP_GET_STATUS = 1078;
export const WM_CAP_SET_SCROLL = 1079;
export const WM_CAP_GRAB_FRAME = 1084;
export const WM_CAP_GRAB_FRAME_NOSTOP = 1085;
export const WM_CAP_SEQUENCE = 1086;
export const WM_CAP_SEQUENCE_NOFILE = 1087;
export const WM_CAP_SET_SEQUENCE_SETUP = 1088;
export const WM_CAP_GET_SEQUENCE_SETUP = 1089;
export const WM_CAP_SET_MCI_DEVICEA = 1090;
export const WM_CAP_GET_MCI_DEVICEA = 1091;
export const WM_CAP_SET_MCI_DEVICEW = 1190;
export const WM_CAP_GET_MCI_DEVICEW = 1191;
export const WM_CAP_SET_MCI_DEVICE = 1190;
export const WM_CAP_GET_MCI_DEVICE = 1191;
export const WM_CAP_STOP = 1092;
export const WM_CAP_ABORT = 1093;
export const WM_CAP_SINGLE_FRAME_OPEN = 1094;
export const WM_CAP_SINGLE_FRAME_CLOSE = 1095;
export const WM_CAP_SINGLE_FRAME = 1096;
export const WM_CAP_PAL_OPENA = 1104;
export const WM_CAP_PAL_SAVEA = 1105;
export const WM_CAP_PAL_OPENW = 1204;
export const WM_CAP_PAL_SAVEW = 1205;
export const WM_CAP_PAL_OPEN = 1204;
export const WM_CAP_PAL_SAVE = 1205;
export const WM_CAP_PAL_PASTE = 1106;
export const WM_CAP_PAL_AUTOCREATE = 1107;
export const WM_CAP_PAL_MANUALCREATE = 1108;
export const WM_CAP_SET_CALLBACK_CAPCONTROL = 1109;
export const WM_CAP_UNICODE_END = 1205;
export const WM_CAP_END = 1205;
export const AVSTREAMMASTER_AUDIO = 0;
export const AVSTREAMMASTER_NONE = 1;
export const CONTROLCALLBACK_PREROLL = 1;
export const CONTROLCALLBACK_CAPTURING = 2;
export const IDS_CAP_BEGIN = 300;
export const IDS_CAP_END = 301;
export const IDS_CAP_INFO = 401;
export const IDS_CAP_OUTOFMEM = 402;
export const IDS_CAP_FILEEXISTS = 403;
export const IDS_CAP_ERRORPALOPEN = 404;
export const IDS_CAP_ERRORPALSAVE = 405;
export const IDS_CAP_ERRORDIBSAVE = 406;
export const IDS_CAP_DEFAVIEXT = 407;
export const IDS_CAP_DEFPALEXT = 408;
export const IDS_CAP_CANTOPEN = 409;
export const IDS_CAP_SEQ_MSGSTART = 410;
export const IDS_CAP_SEQ_MSGSTOP = 411;
export const IDS_CAP_VIDEDITERR = 412;
export const IDS_CAP_READONLYFILE = 413;
export const IDS_CAP_WRITEERROR = 414;
export const IDS_CAP_NODISKSPACE = 415;
export const IDS_CAP_SETFILESIZE = 416;
export const IDS_CAP_SAVEASPERCENT = 417;
export const IDS_CAP_DRIVER_ERROR = 418;
export const IDS_CAP_WAVE_OPEN_ERROR = 419;
export const IDS_CAP_WAVE_ALLOC_ERROR = 420;
export const IDS_CAP_WAVE_PREPARE_ERROR = 421;
export const IDS_CAP_WAVE_ADD_ERROR = 422;
export const IDS_CAP_WAVE_SIZE_ERROR = 423;
export const IDS_CAP_VIDEO_OPEN_ERROR = 424;
export const IDS_CAP_VIDEO_ALLOC_ERROR = 425;
export const IDS_CAP_VIDEO_PREPARE_ERROR = 426;
export const IDS_CAP_VIDEO_ADD_ERROR = 427;
export const IDS_CAP_VIDEO_SIZE_ERROR = 428;
export const IDS_CAP_FILE_OPEN_ERROR = 429;
export const IDS_CAP_FILE_WRITE_ERROR = 430;
export const IDS_CAP_RECORDING_ERROR = 431;
export const IDS_CAP_RECORDING_ERROR2 = 432;
export const IDS_CAP_AVI_INIT_ERROR = 433;
export const IDS_CAP_NO_FRAME_CAP_ERROR = 434;
export const IDS_CAP_NO_PALETTE_WARN = 435;
export const IDS_CAP_MCI_CONTROL_ERROR = 436;
export const IDS_CAP_MCI_CANT_STEP_ERROR = 437;
export const IDS_CAP_NO_AUDIO_CAP_ERROR = 438;
export const IDS_CAP_AVI_DRAWDIB_ERROR = 439;
export const IDS_CAP_COMPRESSOR_ERROR = 440;
export const IDS_CAP_AUDIO_DROP_ERROR = 441;
export const IDS_CAP_AUDIO_DROP_COMPERROR = 442;
export const IDS_CAP_STAT_LIVE_MODE = 500;
export const IDS_CAP_STAT_OVERLAY_MODE = 501;
export const IDS_CAP_STAT_CAP_INIT = 502;
export const IDS_CAP_STAT_CAP_FINI = 503;
export const IDS_CAP_STAT_PALETTE_BUILD = 504;
export const IDS_CAP_STAT_OPTPAL_BUILD = 505;
export const IDS_CAP_STAT_I_FRAMES = 506;
export const IDS_CAP_STAT_L_FRAMES = 507;
export const IDS_CAP_STAT_CAP_L_FRAMES = 508;
export const IDS_CAP_STAT_CAP_AUDIO = 509;
export const IDS_CAP_STAT_VIDEOCURRENT = 510;
export const IDS_CAP_STAT_VIDEOAUDIO = 511;
export const IDS_CAP_STAT_VIDEOONLY = 512;
export const IDS_CAP_STAT_FRAMESDROPPED = 513;
export const JOYERR_NOERROR = 0;
export const JOYERR_PARMS = 165;
export const JOYERR_NOCANDO = 166;
export const JOYERR_UNPLUGGED = 167;
export const JOY_BUTTON1 = 1;
export const JOY_BUTTON2 = 2;
export const JOY_BUTTON3 = 4;
export const JOY_BUTTON4 = 8;
export const JOY_BUTTON1CHG = 256;
export const JOY_BUTTON2CHG = 512;
export const JOY_BUTTON3CHG = 1024;
export const JOY_BUTTON4CHG = 2048;
export const JOY_BUTTON5 = 16;
export const JOY_BUTTON6 = 32;
export const JOY_BUTTON7 = 64;
export const JOY_BUTTON8 = 128;
export const JOY_BUTTON9 = 256;
export const JOY_BUTTON10 = 512;
export const JOY_BUTTON11 = 1024;
export const JOY_BUTTON12 = 2048;
export const JOY_BUTTON13 = 4096;
export const JOY_BUTTON14 = 8192;
export const JOY_BUTTON15 = 16384;
export const JOY_BUTTON16 = 32768;
export const JOY_BUTTON17 = 65536;
export const JOY_BUTTON18 = 131072;
export const JOY_BUTTON19 = 262144;
export const JOY_BUTTON20 = 524288;
export const JOY_BUTTON21 = 1048576;
export const JOY_BUTTON22 = 2097152;
export const JOY_BUTTON23 = 4194304;
export const JOY_BUTTON24 = 8388608;
export const JOY_BUTTON25 = 16777216;
export const JOY_BUTTON26 = 33554432;
export const JOY_BUTTON27 = 67108864;
export const JOY_BUTTON28 = 134217728;
export const JOY_BUTTON29 = 268435456;
export const JOY_BUTTON30 = 536870912;
export const JOY_BUTTON31 = 1073741824;
export const JOY_BUTTON32 = "-2147483648";
export const JOY_POVFORWARD = 0;
export const JOY_POVRIGHT = 9000;
export const JOY_POVBACKWARD = 18000;
export const JOY_POVLEFT = 27000;
export const JOY_RETURNX = 1;
export const JOY_RETURNY = 2;
export const JOY_RETURNZ = 4;
export const JOY_RETURNR = 8;
export const JOY_RETURNU = 16;
export const JOY_RETURNV = 32;
export const JOY_RETURNPOV = 64;
export const JOY_RETURNBUTTONS = 128;
export const JOY_RETURNRAWDATA = 256;
export const JOY_RETURNPOVCTS = 512;
export const JOY_RETURNCENTERED = 1024;
export const JOY_USEDEADZONE = 2048;
export const JOY_CAL_READALWAYS = 65536;
export const JOY_CAL_READXYONLY = 131072;
export const JOY_CAL_READ3 = 262144;
export const JOY_CAL_READ4 = 524288;
export const JOY_CAL_READXONLY = 1048576;
export const JOY_CAL_READYONLY = 2097152;
export const JOY_CAL_READ5 = 4194304;
export const JOY_CAL_READ6 = 8388608;
export const JOY_CAL_READZONLY = 16777216;
export const JOY_CAL_READRONLY = 33554432;
export const JOY_CAL_READUONLY = 67108864;
export const JOY_CAL_READVONLY = 134217728;
export const JOYSTICKID1 = 0;
export const JOYSTICKID2 = 1;
export const JOYCAPS_HASZ = 1;
export const JOYCAPS_HASR = 2;
export const JOYCAPS_HASU = 4;
export const JOYCAPS_HASV = 8;
export const JOYCAPS_HASPOV = 16;
export const JOYCAPS_POV4DIR = 32;
export const JOYCAPS_POVCTS = 64;
export const DRV_LOAD = 1;
export const DRV_ENABLE = 2;
export const DRV_OPEN = 3;
export const DRV_CLOSE = 4;
export const DRV_DISABLE = 5;
export const DRV_FREE = 6;
export const DRV_CONFIGURE = 7;
export const DRV_QUERYCONFIGURE = 8;
export const DRV_INSTALL = 9;
export const DRV_REMOVE = 10;
export const DRV_RESERVED = 2048;
export const DRV_USER = 16384;
export const DRIVERS_SECTION = "DRIVERS32";
export const MCI_SECTION = "MCI32";
export const DCB_NOSWITCH = 8;
export const DCB_TYPEMASK = 7;
export const DCB_NULL = 0;
export const DCB_WINDOW = 1;
export const DCB_TASK = 2;
export const DCB_FUNCTION = 3;
export const DCB_EVENT = 5;
export const DRVM_INIT = 100;
export const DRVM_EXIT = 101;
export const DRVM_DISABLE = 102;
export const DRVM_ENABLE = 103;
export const DRVM_INIT_EX = 104;
export const DRVM_USER = 16384;
export const DRVM_MAPPER_RECONFIGURE = 8193;
export const DRVM_MAPPER_PREFERRED_GET = 8213;
export const DRVM_MAPPER_CONSOLEVOICECOM_GET = 8215;
export const DRV_QUERYDEVNODE = 2050;
export const DRV_QUERYMAPPABLE = 2053;
export const DRV_QUERYMODULE = 2057;
export const DRV_PNPINSTALL = 2059;
export const DRV_QUERYDEVICEINTERFACE = 2060;
export const DRV_QUERYDEVICEINTERFACESIZE = 2061;
export const DRV_QUERYSTRINGID = 2062;
export const DRV_QUERYSTRINGIDSIZE = 2063;
export const DRV_QUERYIDFROMSTRINGID = 2064;
export const DRV_QUERYFUNCTIONINSTANCEID = 2065;
export const DRV_QUERYFUNCTIONINSTANCEIDSIZE = 2066;
export const DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY = 1;
export const DRVM_IOCTL = 256;
export const DRVM_ADD_THRU = 257;
export const DRVM_REMOVE_THRU = 258;
export const DRVM_IOCTL_LAST = 261;
export const DRVM_IOCTL_CMD_USER = 0;
export const DRVM_IOCTL_CMD_SYSTEM = "-2147483648";
export const VADMAD_Device_ID = 1092;
export const WODM_INIT = 100;
export const WIDM_INIT = 100;
export const WODM_INIT_EX = 104;
export const WIDM_INIT_EX = 104;
export const WODM_GETNUMDEVS = 3;
export const WODM_GETDEVCAPS = 4;
export const WODM_OPEN = 5;
export const WODM_CLOSE = 6;
export const WODM_PREPARE = 7;
export const WODM_UNPREPARE = 8;
export const WODM_WRITE = 9;
export const WODM_PAUSE = 10;
export const WODM_RESTART = 11;
export const WODM_RESET = 12;
export const WODM_GETPOS = 13;
export const WODM_GETPITCH = 14;
export const WODM_SETPITCH = 15;
export const WODM_GETVOLUME = 16;
export const WODM_SETVOLUME = 17;
export const WODM_GETPLAYBACKRATE = 18;
export const WODM_SETPLAYBACKRATE = 19;
export const WODM_BREAKLOOP = 20;
export const WODM_PREFERRED = 21;
export const WODM_BUSY = 21;
export const WIDM_GETNUMDEVS = 50;
export const WIDM_GETDEVCAPS = 51;
export const WIDM_OPEN = 52;
export const WIDM_CLOSE = 53;
export const WIDM_PREPARE = 54;
export const WIDM_UNPREPARE = 55;
export const WIDM_ADDBUFFER = 56;
export const WIDM_START = 57;
export const WIDM_STOP = 58;
export const WIDM_RESET = 59;
export const WIDM_GETPOS = 60;
export const WIDM_PREFERRED = 61;
export const MIDI_IO_PACKED = 0;
export const MIDI_IO_COOKED = 2;
export const MODM_GETNUMDEVS = 1;
export const MODM_GETDEVCAPS = 2;
export const MODM_OPEN = 3;
export const MODM_CLOSE = 4;
export const MODM_PREPARE = 5;
export const MODM_UNPREPARE = 6;
export const MODM_DATA = 7;
export const MODM_LONGDATA = 8;
export const MODM_RESET = 9;
export const MODM_GETVOLUME = 10;
export const MODM_SETVOLUME = 11;
export const MODM_CACHEPATCHES = 12;
export const MODM_CACHEDRUMPATCHES = 13;
export const MODM_STRMDATA = 14;
export const MODM_GETPOS = 17;
export const MODM_PAUSE = 18;
export const MODM_RESTART = 19;
export const MODM_STOP = 20;
export const MODM_PROPERTIES = 21;
export const MODM_PREFERRED = 22;
export const MODM_RECONFIGURE = 18280;
export const MIDM_GETNUMDEVS = 53;
export const MIDM_GETDEVCAPS = 54;
export const MIDM_OPEN = 55;
export const MIDM_CLOSE = 56;
export const MIDM_PREPARE = 57;
export const MIDM_UNPREPARE = 58;
export const MIDM_ADDBUFFER = 59;
export const MIDM_START = 60;
export const MIDM_STOP = 61;
export const MIDM_RESET = 62;
export const AUXM_INIT = 100;
export const AUXM_INIT_EX = 104;
export const AUXDM_GETNUMDEVS = 3;
export const AUXDM_GETDEVCAPS = 4;
export const AUXDM_GETVOLUME = 5;
export const AUXDM_SETVOLUME = 6;
export const MXDM_INIT = 100;
export const MXDM_INIT_EX = 104;
export const MXDM_USER = 16384;
export const MXDM_BASE = 1;
export const MXDM_GETNUMDEVS = 1;
export const MXDM_GETDEVCAPS = 2;
export const MXDM_OPEN = 3;
export const MXDM_CLOSE = 4;
export const MXDM_GETLINEINFO = 5;
export const MXDM_GETLINECONTROLS = 6;
export const MXDM_GETCONTROLDETAILS = 7;
export const MXDM_SETCONTROLDETAILS = 8;
export const TDD_KILLTIMEREVENT = 2048;
export const TDD_SETTIMEREVENT = 2052;
export const TDD_GETSYSTEMTIME = 2056;
export const TDD_GETDEVCAPS = 2060;
export const TDD_BEGINMINPERIOD = 2064;
export const TDD_ENDMINPERIOD = 2068;
export const JOY_CONFIGCHANGED_MSGSTRING = "MSJSTICK_VJOYD_MSGSTR";
export const JDD_GETNUMDEVS = 2049;
export const JDD_GETDEVCAPS = 2050;
export const JDD_GETPOS = 2305;
export const JDD_SETCALIBRATION = 2306;
export const JDD_CONFIGCHANGED = 2307;
export const JDD_GETPOSEX = 2308;
export const MCI_OPEN_DRIVER = 2049;
export const MCI_CLOSE_DRIVER = 2050;
export const MCI_FALSE = 531;
export const MCI_TRUE = 532;
export const MCI_FORMAT_MILLISECONDS_S = 533;
export const MCI_FORMAT_HMS_S = 534;
export const MCI_FORMAT_MSF_S = 535;
export const MCI_FORMAT_FRAMES_S = 536;
export const MCI_FORMAT_SMPTE_24_S = 537;
export const MCI_FORMAT_SMPTE_25_S = 538;
export const MCI_FORMAT_SMPTE_30_S = 539;
export const MCI_FORMAT_SMPTE_30DROP_S = 540;
export const MCI_FORMAT_BYTES_S = 541;
export const MCI_FORMAT_SAMPLES_S = 542;
export const MCI_FORMAT_TMSF_S = 543;
export const MCI_VD_FORMAT_TRACK_S = 1029;
export const WAVE_FORMAT_PCM_S = 1152;
export const WAVE_MAPPER_S = 1153;
export const MCI_SEQ_MAPPER_S = 1221;
export const MCI_SEQ_FILE_S = 1222;
export const MCI_SEQ_MIDI_S = 1223;
export const MCI_SEQ_SMPTE_S = 1224;
export const MCI_SEQ_FORMAT_SONGPTR_S = 1225;
export const MCI_SEQ_NONE_S = 1226;
export const MIDIMAPPER_S = 1227;
export const MCI_MAX_DEVICE_TYPE_LENGTH = 80;
export const MCI_RESOURCE_RETURNED = 65536;
export const MCI_COLONIZED3_RETURN = 131072;
export const MCI_COLONIZED4_RETURN = 262144;
export const MCI_INTEGER_RETURNED = 524288;
export const MCI_RESOURCE_DRIVER = 1048576;
export const MCI_COMMAND_HEAD = 0;
export const MCI_STRING = 1;
export const MCI_INTEGER = 2;
export const MCI_END_COMMAND = 3;
export const MCI_RETURN = 4;
export const MCI_FLAG = 5;
export const MCI_END_COMMAND_LIST = 6;
export const MCI_RECT = 7;
export const MCI_CONSTANT = 8;
export const MCI_END_CONSTANT = 9;
export const MCI_HWND = 10;
export const MCI_HPAL = 11;
export const MCI_HDC = 12;
export const MCI_INTEGER64 = 13;
export const TASKERR_NOTASKSUPPORT = 1;
export const TASKERR_OUTOFMEMORY = 2;
export const DRV_EXITSESSION = 11;
export const DRV_POWER = 15;
export const DRVCNF_CANCEL = 0;
export const DRVCNF_OK = 1;
export const DRVCNF_RESTART = 2;
export const DRV_CANCEL = 0;
export const DRV_OK = 1;
export const DRV_RESTART = 2;
export const DRV_MCI_LAST = 6143;
export const MMIOERR_BASE = 256;
export const MMIOERR_FILENOTFOUND = 257;
export const MMIOERR_OUTOFMEMORY = 258;
export const MMIOERR_CANNOTOPEN = 259;
export const MMIOERR_CANNOTCLOSE = 260;
export const MMIOERR_CANNOTREAD = 261;
export const MMIOERR_CANNOTWRITE = 262;
export const MMIOERR_CANNOTSEEK = 263;
export const MMIOERR_CANNOTEXPAND = 264;
export const MMIOERR_CHUNKNOTFOUND = 265;
export const MMIOERR_UNBUFFERED = 266;
export const MMIOERR_PATHNOTFOUND = 267;
export const MMIOERR_ACCESSDENIED = 268;
export const MMIOERR_SHARINGVIOLATION = 269;
export const MMIOERR_NETWORKERROR = 270;
export const MMIOERR_TOOMANYOPENFILES = 271;
export const MMIOERR_INVALIDFILE = 272;
export const MMIO_RWMODE = 3;
export const MMIO_SHAREMODE = 112;
export const MMIO_CREATE = 4096;
export const MMIO_PARSE = 256;
export const MMIO_DELETE = 512;
export const MMIO_EXIST = 16384;
export const MMIO_ALLOCBUF = 65536;
export const MMIO_GETTEMP = 131072;
export const MMIO_DIRTY = 268435456;
export const MMIO_READ = 0;
export const MMIO_WRITE = 1;
export const MMIO_READWRITE = 2;
export const MMIO_COMPAT = 0;
export const MMIO_EXCLUSIVE = 16;
export const MMIO_DENYWRITE = 32;
export const MMIO_DENYREAD = 48;
export const MMIO_DENYNONE = 64;
export const MMIO_FHOPEN = 16;
export const MMIO_EMPTYBUF = 16;
export const MMIO_TOUPPER = 16;
export const MMIO_INSTALLPROC = 65536;
export const MMIO_GLOBALPROC = 268435456;
export const MMIO_REMOVEPROC = 131072;
export const MMIO_UNICODEPROC = 16777216;
export const MMIO_FINDPROC = 262144;
export const MMIO_FINDCHUNK = 16;
export const MMIO_FINDRIFF = 32;
export const MMIO_FINDLIST = 64;
export const MMIO_CREATERIFF = 32;
export const MMIO_CREATELIST = 64;
export const MMIOM_READ = 0;
export const MMIOM_WRITE = 1;
export const MMIOM_SEEK = 2;
export const MMIOM_OPEN = 3;
export const MMIOM_CLOSE = 4;
export const MMIOM_WRITEFLUSH = 5;
export const MMIOM_RENAME = 6;
export const MMIOM_USER = 32768;
export const SEEK_SET = 0;
export const SEEK_CUR = 1;
export const SEEK_END = 2;
export const MMIO_DEFAULTBUFFER = 8192;
export const FACILITY_NS = 13;
export const MCI_MCIAVI_PLAY_WINDOW = 16777216;
export const MCI_MCIAVI_PLAY_FULLSCREEN = 33554432;
export const MCI_MCIAVI_PLAY_FULLBY2 = 67108864;
export const MCI_AVI_STATUS_FRAMES_SKIPPED = 32769;
export const MCI_AVI_STATUS_LAST_PLAY_SPEED = 32770;
export const MCI_AVI_STATUS_AUDIO_BREAKS = 32771;
export const MCI_AVI_SETVIDEO_DRAW_PROCEDURE = 32768;
export const MCI_AVI_SETVIDEO_PALETTE_COLOR = 33024;
export const MCI_AVI_SETVIDEO_PALETTE_HALFTONE = 65535;
export const MCIERR_AVI_OLDAVIFORMAT = 612;
export const MCIERR_AVI_NOTINTERLEAVED = 613;
export const MCIERR_AVI_NODISPDIB = 614;
export const MCIERR_AVI_CANTPLAYFULLSCREEN = 615;
export const MCIERR_AVI_TOOBIGFORVGA = 616;
export const MCIERR_AVI_NOCOMPRESSOR = 617;
export const MCIERR_AVI_DISPLAYERROR = 618;
export const MCIERR_AVI_AUDIOERROR = 619;
export const MCIERR_AVI_BADPALETTE = 620;
export const DLG_ACMFORMATCHOOSE_ID = 70;
export const IDD_ACMFORMATCHOOSE_BTN_HELP = 9;
export const IDD_ACMFORMATCHOOSE_CMB_CUSTOM = 100;
export const IDD_ACMFORMATCHOOSE_CMB_FORMATTAG = 101;
export const IDD_ACMFORMATCHOOSE_CMB_FORMAT = 102;
export const IDD_ACMFORMATCHOOSE_BTN_SETNAME = 103;
export const IDD_ACMFORMATCHOOSE_BTN_DELNAME = 104;
export const DLG_ACMFILTERCHOOSE_ID = 71;
export const IDD_ACMFILTERCHOOSE_BTN_HELP = 9;
export const IDD_ACMFILTERCHOOSE_CMB_CUSTOM = 100;
export const IDD_ACMFILTERCHOOSE_CMB_FILTERTAG = 101;
export const IDD_ACMFILTERCHOOSE_CMB_FILTER = 102;
export const IDD_ACMFILTERCHOOSE_BTN_SETNAME = 103;
export const IDD_ACMFILTERCHOOSE_BTN_DELNAME = 104;
export const FACILITY_NS_WIN32 = 7;
export const NS_S_CALLPENDING = 936749839185412096n;
export const NS_S_CALLABORTED = 936750938697039873n;
export const NS_S_STREAM_TRUNCATED = 936752038208667650n;
export const NS_W_SERVER_BANDWIDTH_LIMIT = 936753139867779075n;
export const NS_W_FILE_BANDWIDTH_LIMIT = 936754239379406852n;
export const NS_E_NOCONNECTION = 936755339964776453n;
export const NS_E_CANNOTCONNECT = 936756439476404230n;
export const NS_E_CANNOTDESTROYTITLE = 936757538988032007n;
export const NS_E_CANNOTRENAMETITLE = 936758638499659784n;
export const NS_E_CANNOTOFFLINEDISK = 936759738011287561n;
export const NS_E_CANNOTONLINEDISK = 936760837522915338n;
export const NS_E_NOREGISTEREDWALKER = 936761937034543115n;
export const NS_E_NOFUNNEL = 936763036546170892n;
export const NS_E_NO_LOCALPLAY = 936764136057798669n;
export const NS_E_NETWORK_BUSY = 936765235569426446n;
export const NS_E_TOO_MANY_SESS = 936766335081054223n;
export const NS_E_ALREADY_CONNECTED = 936767434592682000n;
export const NS_E_INVALID_INDEX = 936768534104309777n;
export const NS_E_PROTOCOL_MISMATCH = 936769633615937554n;
export const NS_E_TIMEOUT = 936770733127565331n;
export const NS_E_NET_WRITE = 936771832639193108n;
export const NS_E_NET_READ = 936772932150820885n;
export const NS_E_DISK_WRITE = 936774031662448662n;
export const NS_E_DISK_READ = 936775131174076439n;
export const NS_E_FILE_WRITE = 936776230685704216n;
export const NS_E_FILE_READ = 936777330197331993n;
export const NS_E_FILE_NOT_FOUND = 936778429708959770n;
export const NS_E_FILE_EXISTS = 936779529220587547n;
export const NS_E_INVALID_NAME = 936780628732215324n;
export const NS_E_FILE_OPEN_FAILED = 936781728243843101n;
export const NS_E_FILE_ALLOCATION_FAILED = 936782827755470878n;
export const NS_E_FILE_INIT_FAILED = 936783927267098655n;
export const NS_E_FILE_PLAY_FAILED = 936785026778726432n;
export const NS_E_SET_DISK_UID_FAILED = 936786126290354209n;
export const NS_E_INDUCED = 936787225801981986n;
export const NS_E_CCLINK_DOWN = 936788325313609763n;
export const NS_E_INTERNAL = 936789424825237540n;
export const NS_E_BUSY = 936790524336865317n;
export const NS_E_UNRECOGNIZED_STREAM_TYPE = 936791623848493094n;
export const NS_E_NETWORK_SERVICE_FAILURE = 936792723360120871n;
export const NS_E_NETWORK_RESOURCE_FAILURE = 936793822871748648n;
export const NS_E_CONNECTION_FAILURE = 936794922383376425n;
export const NS_E_SHUTDOWN = 936796021895004202n;
export const NS_E_INVALID_REQUEST = 936797121406631979n;
export const NS_E_INSUFFICIENT_BANDWIDTH = 936798220918259756n;
export const NS_E_NOT_REBUILDING = 936799320429887533n;
export const NS_E_LATE_OPERATION = 936800419941515310n;
export const NS_E_INVALID_DATA = 936801519453143087n;
export const NS_E_FILE_BANDWIDTH_LIMIT = 936802618964770864n;
export const NS_E_OPEN_FILE_LIMIT = 936803718476398641n;
export const NS_E_BAD_CONTROL_DATA = 936804817988026418n;
export const NS_E_NO_STREAM = 936805917499654195n;
export const NS_E_STREAM_END = 936807017011281972n;
export const NS_E_SERVER_NOT_FOUND = 936808116522909749n;
export const NS_E_DUPLICATE_NAME = 936809216034537526n;
export const NS_E_DUPLICATE_ADDRESS = 936810315546165303n;
export const NS_E_BAD_MULTICAST_ADDRESS = 936811415057793080n;
export const NS_E_BAD_ADAPTER_ADDRESS = 936812514569420857n;
export const NS_E_BAD_DELIVERY_MODE = 936813614081048634n;
export const NS_E_INVALID_CHANNEL = 936814713592676411n;
export const NS_E_INVALID_STREAM = 936815813104304188n;
export const NS_E_INVALID_ARCHIVE = 936816912615931965n;
export const NS_E_NOTITLES = 936818012127559742n;
export const NS_E_INVALID_CLIENT = 936819111639187519n;
export const NS_E_INVALID_BLACKHOLE_ADDRESS = 936820211150815296n;
export const NS_E_INCOMPATIBLE_FORMAT = 936821310662443073n;
export const NS_E_INVALID_KEY = 936822410174070850n;
export const NS_E_INVALID_PORT = 936823509685698627n;
export const NS_E_INVALID_TTL = 936824609197326404n;
export const NS_E_STRIDE_REFUSED = 936825708708954181n;
export const NS_E_MMSAUTOSERVER_CANTFINDWALKER = 936826808220581958n;
export const NS_E_MAX_BITRATE = 936827907732209735n;
export const NS_E_LOGFILEPERIOD = 936829007243837512n;
export const NS_E_MAX_CLIENTS = 936830106755465289n;
export const NS_E_LOG_FILE_SIZE = 936831206267093066n;
export const NS_E_MAX_FILERATE = 936832305778720843n;
export const NS_E_WALKER_UNKNOWN = 936833405290348620n;
export const NS_E_WALKER_SERVER = 936834504801976397n;
export const NS_E_WALKER_USAGE = 936835604313604174n;
export const NS_I_TIGER_START = 936836701677748303n;
export const NS_E_TIGER_FAIL = 936837803336859728n;
export const NS_I_CUB_START = 936838900701003857n;
export const NS_I_CUB_RUNNING = 936840000212631634n;
export const NS_E_CUB_FAIL = 936841101871743059n;
export const NS_I_DISK_START = 936842199235887188n;
export const NS_E_DISK_FAIL = 936843300894998613n;
export const NS_I_DISK_REBUILD_STARTED = 936844398259142742n;
export const NS_I_DISK_REBUILD_FINISHED = 936845497770770519n;
export const NS_I_DISK_REBUILD_ABORTED = 936846597282398296n;
export const NS_I_LIMIT_FUNNELS = 936847696794026073n;
export const NS_I_START_DISK = 936848796305653850n;
export const NS_I_STOP_DISK = 936849895817281627n;
export const NS_I_STOP_CUB = 936850995328909404n;
export const NS_I_KILL_USERSESSION = 936852094840537181n;
export const NS_I_KILL_CONNECTION = 936853194352164958n;
export const NS_I_REBUILD_DISK = 936854293863792735n;
export const NS_W_UNKNOWN_EVENT = 936854294937534560n;
export const NS_E_MAX_FUNNELS_ALERT = 936855395522904160n;
export const NS_E_ALLOCATE_FILE_FAIL = 936856495034531937n;
export const NS_E_PAGING_ERROR = 936857594546159714n;
export const NS_E_BAD_BLOCK0_VERSION = 936858694057787491n;
export const NS_E_BAD_DISK_UID = 936859793569415268n;
export const NS_E_BAD_FSMAJOR_VERSION = 936860893081043045n;
export const NS_E_BAD_STAMPNUMBER = 936861992592670822n;
export const NS_E_PARTIALLY_REBUILT_DISK = 936863092104298599n;
export const NS_E_ENACTPLAN_GIVEUP = 936864191615926376n;
export const MCMADM_I_NO_EVENTS = 936865288980070505n;
export const MCMADM_E_REGKEY_NOT_FOUND = 936866390639181930n;
export const NS_E_NO_FORMATS = 936867490150809707n;
export const NS_E_NO_REFERENCES = 936868589662437484n;
export const NS_E_WAVE_OPEN = 936869689174065261n;
export const NS_I_LOGGING_FAILED = 936870786538209390n;
export const NS_E_CANNOTCONNECTEVENTS = 936871888197320815n;
export const NS_I_LIMIT_BANDWIDTH = 936872985561464944n;
export const NS_E_NO_DEVICE = 936874087220576369n;
export const NS_E_NO_SPECIFIED_DEVICE = 938984050034278514n;
export const NS_E_NOTHING_TO_DO = 938985149545908209n;
export const NS_E_NO_MULTICAST = 936968645220567026n;
export const NS_E_MONITOR_GIVEUP = 936969744732192968n;
export const NS_E_REMIRRORED_DISK = 936970844243820745n;
export const NS_E_INSUFFICIENT_DATA = 936971943755448522n;
export const NS_E_ASSERT = 936973043267076299n;
export const NS_E_BAD_ADAPTER_NAME = 936974142778704076n;
export const NS_E_NOT_LICENSED = 936975242290331853n;
export const NS_E_NO_SERVER_CONTACT = 936976341801959630n;
export const NS_E_TOO_MANY_TITLES = 936977441313587407n;
export const NS_E_TITLE_SIZE_EXCEEDED = 936978540825215184n;
export const NS_E_UDP_DISABLED = 936979640336842961n;
export const NS_E_TCP_DISABLED = 936980739848470738n;
export const NS_E_HTTP_DISABLED = 936981839360098515n;
export const NS_E_LICENSE_EXPIRED = 936982938871726292n;
export const NS_E_TITLE_BITRATE = 936984038383354069n;
export const NS_E_EMPTY_PROGRAM_NAME = 936985137894981846n;
export const NS_E_MISSING_CHANNEL = 936986237406609623n;
export const NS_E_NO_CHANNELS = 936987336918237400n;
export const NS_E_INVALID_INDEX2 = 937188547546120409n;
export const NS_E_CUB_FAIL_LINK = 937189647057748368n;
export const NS_I_CUB_UNFAIL_LINK = 937190744421892497n;
export const NS_E_BAD_CUB_UID = 937191846081003922n;
export const NS_I_RESTRIPE_START = 937192943445148051n;
export const NS_I_RESTRIPE_DONE = 937194042956775828n;
export const NS_E_GLITCH_MODE = 937195144615887253n;
export const NS_I_RESTRIPE_DISK_OUT = 937196241980031382n;
export const NS_I_RESTRIPE_CUB_OUT = 937197341491659159n;
export const NS_I_DISK_STOP = 937198441003286936n;
export const NS_I_CATATONIC_FAILURE = 937199541588656537n;
export const NS_I_CATATONIC_AUTO_UNFAIL = 937200641100284314n;
export const NS_E_NO_MEDIA_PROTOCOL = 940047277778338203n;
export const NS_E_INVALID_INPUT_FORMAT = 940048377289968568n;
export const NS_E_MSAUDIO_NOT_INSTALLED = 940049476801596345n;
export const NS_E_UNEXPECTED_MSAUDIO_ERROR = 940050576313224122n;
export const NS_E_INVALID_OUTPUT_FORMAT = 940051675824851899n;
export const NS_E_NOT_CONFIGURED = 940052775336479676n;
export const NS_E_PROTECTED_CONTENT = 940053874848107453n;
export const NS_E_LICENSE_REQUIRED = 940054974359735230n;
export const NS_E_TAMPERED_CONTENT = 940056073871363007n;
export const NS_E_LICENSE_OUTOFDATE = 940057173382990784n;
export const NS_E_LICENSE_INCORRECT_RIGHTS = 940058272894618561n;
export const NS_E_AUDIO_CODEC_NOT_INSTALLED = 940059372406246338n;
export const NS_E_AUDIO_CODEC_ERROR = 940060471917874115n;
export const NS_E_VIDEO_CODEC_NOT_INSTALLED = 940061571429501892n;
export const NS_E_VIDEO_CODEC_ERROR = 940062670941129669n;
export const NS_E_INVALIDPROFILE = 940063770452757446n;
export const NS_E_INCOMPATIBLE_VERSION = 940064869964385223n;
export const NS_S_REBUFFERING = 940065966254787528n;
export const NS_S_DEGRADING_QUALITY = 940067065766415305n;
export const NS_E_OFFLINE_MODE = 940068168499268554n;
export const NS_E_NOT_CONNECTED = 940069268010896331n;
export const NS_E_TOO_MUCH_DATA = 940070367522524108n;
export const NS_E_UNSUPPORTED_PROPERTY = 940071467034151885n;
export const NS_E_8BIT_WAVE_UNSUPPORTED = 940072566545779662n;
export const NS_E_NO_MORE_SAMPLES = 940073666057407439n;
export const NS_E_INVALID_SAMPLING_RATE = 940074765569035216n;
export const NS_E_MAX_PACKET_SIZE_TOO_SMALL = 940075865080662993n;
export const NS_E_LATE_PACKET = 940076964592290770n;
export const NS_E_DUPLICATE_PACKET = 940078064103918547n;
export const NS_E_SDK_BUFFERTOOSMALL = 940079163615546324n;
export const NS_E_INVALID_NUM_PASSES = 940080263127174101n;
export const NS_E_ATTRIBUTE_READ_ONLY = 940081362638801878n;
export const NS_E_ATTRIBUTE_NOT_ALLOWED = 940082462150429655n;
export const NS_E_INVALID_EDL = 940083561662057432n;
export const NS_E_DATA_UNIT_EXTENSION_TOO_LARGE = 940084661173685209n;
export const NS_E_CODEC_DMO_ERROR = 940085760685312986n;
export const NS_S_TRANSCRYPTOR_EOF = 940086856975715291n;
export const NS_E_FEATURE_DISABLED_BY_GROUP_POLICY = 940087959708568540n;
export const NS_E_FEATURE_DISABLED_IN_SKU = 940089059220196317n;
export const NS_E_WMDRM_DEPRECATED = 941146789406116830n;
export const NS_E_NO_CD = 941147888917745568n;
export const NS_E_CANT_READ_DIGITAL = 941148988429373345n;
export const NS_E_DEVICE_DISCONNECTED = 941150087941001122n;
export const NS_E_DEVICE_NOT_SUPPORT_FORMAT = 941151187452628899n;
export const NS_E_SLOW_READ_DIGITAL = 941152286964256676n;
export const NS_E_MIXER_INVALID_LINE = 941153386475884453n;
export const NS_E_MIXER_INVALID_CONTROL = 941154485987512230n;
export const NS_E_MIXER_INVALID_VALUE = 941155585499140007n;
export const NS_E_MIXER_UNKNOWN_MMRESULT = 941156685010767784n;
export const NS_E_USER_STOP = 941157784522395561n;
export const NS_E_MP3_FORMAT_NOT_FOUND = 941158884034023338n;
export const NS_E_CD_READ_ERROR_NO_CORRECTION = 941159983545651115n;
export const NS_E_CD_READ_ERROR = 941161083057278892n;
export const NS_E_CD_SLOW_COPY = 941162182568906669n;
export const NS_E_CD_COPYTO_CD = 941163282080534446n;
export const NS_E_MIXER_NODRIVER = 941164381592162223n;
export const NS_E_REDBOOK_ENABLED_WHILE_COPYING = 941165481103790000n;
export const NS_E_CD_REFRESH = 941166580615417777n;
export const NS_E_CD_DRIVER_PROBLEM = 941167680127045554n;
export const NS_E_WONT_DO_DIGITAL = 941168779638673331n;
export const NS_E_WMPXML_NOERROR = 941169879150301108n;
export const NS_E_WMPXML_ENDOFDATA = 941170978661928885n;
export const NS_E_WMPXML_PARSEERROR = 941172078173556662n;
export const NS_E_WMPXML_ATTRIBUTENOTFOUND = 941173177685184439n;
export const NS_E_WMPXML_PINOTFOUND = 941174277196812216n;
export const NS_E_WMPXML_EMPTYDOC = 941175376708439993n;
export const NS_E_WMP_PATH_ALREADY_IN_LIBRARY = 941179774754951098n;
export const NS_E_WMP_FILESCANALREADYSTARTED = 941180874266578878n;
export const NS_E_WMP_HME_INVALIDOBJECTID = 941181973778206655n;
export const NS_E_WMP_MF_CODE_EXPIRED = 941183073289834432n;
export const NS_E_WMP_HME_NOTSEARCHABLEFORITEMS = 941184172801462209n;
export const NS_E_WMP_HME_STALEREQUEST = 941189670359601090n;
export const NS_E_WMP_ADDTOLIBRARY_FAILED = 941190769871228871n;
export const NS_E_WMP_WINDOWSAPIFAILURE = 941191869382856648n;
export const NS_E_WMP_RECORDING_NOT_ALLOWED = 941192968894484425n;
export const NS_E_DEVICE_NOT_READY = 941194068406112202n;
export const NS_E_DAMAGED_FILE = 941195167917739979n;
export const NS_E_MPDB_GENERIC = 941196267429367756n;
export const NS_E_FILE_FAILED_CHECKS = 941197366940995533n;
export const NS_E_MEDIA_LIBRARY_FAILED = 941198466452623310n;
export const NS_E_SHARING_VIOLATION = 941199565964251087n;
export const NS_E_NO_ERROR_STRING_FOUND = 941200665475878864n;
export const NS_E_WMPOCX_NO_REMOTE_CORE = 941201764987506641n;
export const NS_E_WMPOCX_NO_ACTIVE_CORE = 941202864499134418n;
export const NS_E_WMPOCX_NOT_RUNNING_REMOTELY = 941203964010762195n;
export const NS_E_WMPOCX_NO_REMOTE_WINDOW = 941205063522389972n;
export const NS_E_WMPOCX_ERRORMANAGERNOTAVAILABLE = 941206163034017749n;
export const NS_E_PLUGIN_NOTSHUTDOWN = 941207262545645526n;
export const NS_E_WMP_CANNOT_FIND_FOLDER = 941208362057273303n;
export const NS_E_WMP_STREAMING_RECORDING_NOT_ALLOWED = 941209461568901080n;
export const NS_E_WMP_PLUGINDLL_NOTFOUND = 941210561080528857n;
export const NS_E_NEED_TO_ASK_USER = 941211660592156634n;
export const NS_E_WMPOCX_PLAYER_NOT_DOCKED = 941212760103784411n;
export const NS_E_WMP_EXTERNAL_NOTREADY = 941213859615412188n;
export const NS_E_WMP_MLS_STALE_DATA = 941214959127039965n;
export const NS_E_WMP_UI_SUBCONTROLSNOTSUPPORTED = 941216058638667742n;
export const NS_E_WMP_UI_VERSIONMISMATCH = 941217158150295519n;
export const NS_E_WMP_UI_NOTATHEMEFILE = 941218257661923296n;
export const NS_E_WMP_UI_SUBELEMENTNOTFOUND = 941219357173551073n;
export const NS_E_WMP_UI_VERSIONPARSE = 941220456685178850n;
export const NS_E_WMP_UI_VIEWIDNOTFOUND = 941221556196806627n;
export const NS_E_WMP_UI_PASSTHROUGH = 941222655708434404n;
export const NS_E_WMP_UI_OBJECTNOTFOUND = 941223755220062181n;
export const NS_E_WMP_UI_SECONDHANDLER = 941224854731689958n;
export const NS_E_WMP_UI_NOSKININZIP = 941225954243317735n;
export const NS_S_WMP_UI_VERSIONMISMATCH = 941227050533720040n;
export const NS_S_WMP_EXCEPTION = 941228150045347817n;
export const NS_E_WMP_URLDOWNLOADFAILED = 941229252778201066n;
export const NS_E_WMPOCX_UNABLE_TO_LOAD_SKIN = 941230352289828843n;
export const NS_E_WMP_INVALID_SKIN = 941231451801456620n;
export const NS_E_WMP_SENDMAILFAILED = 941232551313084397n;
export const NS_E_WMP_LOCKEDINSKINMODE = 941233650824712174n;
export const NS_E_WMP_FAILED_TO_SAVE_FILE = 941234750336339951n;
export const NS_E_WMP_SAVEAS_READONLY = 941235849847967728n;
export const NS_E_WMP_FAILED_TO_SAVE_PLAYLIST = 941236949359595505n;
export const NS_E_WMP_FAILED_TO_OPEN_WMD = 941238048871223282n;
export const NS_E_WMP_CANT_PLAY_PROTECTED = 941239148382851059n;
export const NS_E_SHARING_STATE_OUT_OF_SYNC = 941245745452617716n;
export const NS_E_WMPOCX_REMOTE_PLAYER_ALREADY_RUNNING = 941256740568895482n;
export const NS_E_WMP_RBC_JPGMAPPINGIMAGE = 941257840080523268n;
export const NS_E_WMP_JPGTRANSPARENCY = 941262238127034373n;
export const NS_E_WMP_INVALID_MAX_VAL = 941263337638662153n;
export const NS_E_WMP_INVALID_MIN_VAL = 941267735685173258n;
export const NS_E_WMP_CS_JPGPOSITIONIMAGE = 941268835196801038n;
export const NS_E_WMP_CS_NOTEVENLYDIVISIBLE = 941278730801451023n;
export const NS_E_WMPZIP_NOTAZIPFILE = 941279830313078808n;
export const NS_E_WMPZIP_CORRUPT = 941280929824706585n;
export const NS_E_WMPZIP_FILENOTFOUND = 941289725917728794n;
export const NS_E_WMP_IMAGE_FILETYPE_UNSUPPORTED = 941290825429356578n;
export const NS_E_WMP_IMAGE_INVALID_FORMAT = 941291924940984355n;
export const NS_E_WMP_GIF_UNEXPECTED_ENDOFFILE = 941293024452612132n;
export const NS_E_WMP_GIF_INVALID_FORMAT = 941294123964239909n;
export const NS_E_WMP_GIF_BAD_VERSION_NUMBER = 941295223475867686n;
export const NS_E_WMP_GIF_NO_IMAGE_IN_FILE = 941296322987495463n;
export const NS_E_WMP_PNG_INVALIDFORMAT = 941297422499123240n;
export const NS_E_WMP_PNG_UNSUPPORTED_BITDEPTH = 941298522010751017n;
export const NS_E_WMP_PNG_UNSUPPORTED_COMPRESSION = 941299621522378794n;
export const NS_E_WMP_PNG_UNSUPPORTED_FILTER = 941300721034006571n;
export const NS_E_WMP_PNG_UNSUPPORTED_INTERLACE = 941301820545634348n;
export const NS_E_WMP_PNG_UNSUPPORTED_BAD_CRC = 941302920057262125n;
export const NS_E_WMP_BMP_INVALID_BITMASK = 941304019568889902n;
export const NS_E_WMP_BMP_TOPDOWN_DIB_UNSUPPORTED = 941305119080517679n;
export const NS_E_WMP_BMP_BITMAP_NOT_CREATED = 941306218592145456n;
export const NS_E_WMP_BMP_COMPRESSION_UNSUPPORTED = 941307318103773233n;
export const NS_E_WMP_BMP_INVALID_FORMAT = 941308417615401010n;
export const NS_E_WMP_JPG_JERR_ARITHCODING_NOTIMPL = 941309517127028787n;
export const NS_E_WMP_JPG_INVALID_FORMAT = 941310616638656564n;
export const NS_E_WMP_JPG_BAD_DCTSIZE = 941311716150284341n;
export const NS_E_WMP_JPG_BAD_VERSION_NUMBER = 941312815661912118n;
export const NS_E_WMP_JPG_BAD_PRECISION = 941313915173539895n;
export const NS_E_WMP_JPG_CCIR601_NOTIMPL = 941315014685167672n;
export const NS_E_WMP_JPG_NO_IMAGE_IN_FILE = 941316114196795449n;
export const NS_E_WMP_JPG_READ_ERROR = 941317213708423226n;
export const NS_E_WMP_JPG_FRACT_SAMPLE_NOTIMPL = 941318313220051003n;
export const NS_E_WMP_JPG_IMAGE_TOO_BIG = 941319412731678780n;
export const NS_E_WMP_JPG_UNEXPECTED_ENDOFFILE = 941320512243306557n;
export const NS_E_WMP_JPG_SOF_UNSUPPORTED = 941321611754934334n;
export const NS_E_WMP_JPG_UNKNOWN_MARKER = 941322711266562111n;
export const NS_S_WMP_LOADED_GIF_IMAGE = 941323807556964416n;
export const NS_S_WMP_LOADED_PNG_IMAGE = 941324907068592193n;
export const NS_S_WMP_LOADED_BMP_IMAGE = 941326006580219970n;
export const NS_S_WMP_LOADED_JPG_IMAGE = 941327106091847747n;
export const NS_E_WMP_FAILED_TO_OPEN_IMAGE = 941332606871212100n;
export const NS_E_WMP_DAI_SONGTOOSHORT = 941333706382839881n;
export const NS_E_WMG_RATEUNAVAILABLE = 941334805894467658n;
export const NS_E_WMG_PLUGINUNAVAILABLE = 941335905406095435n;
export const NS_E_WMG_CANNOTQUEUE = 941337004917723212n;
export const NS_E_WMG_PREROLLLICENSEACQUISITIONNOTALLOWED = 941338104429350989n;
export const NS_E_WMG_UNEXPECTEDPREROLLSTATUS = 941339203940978766n;
export const NS_S_WMG_FORCE_DROP_FRAME = 941341399743008847n;
export const NS_E_WMG_INVALID_COPP_CERTIFICATE = 941342502475862097n;
export const NS_E_WMG_COPP_SECURITY_INVALID = 941343601987489874n;
export const NS_E_WMG_COPP_UNSUPPORTED = 941344701499117651n;
export const NS_E_WMG_INVALIDSTATE = 941345801010745428n;
export const NS_E_WMG_SINKALREADYEXISTS = 941346900522373205n;
export const NS_E_WMG_NOSDKINTERFACE = 941348000034000982n;
export const NS_E_WMG_NOTALLOUTPUTSRENDERED = 941349099545628759n;
export const NS_E_WMG_FILETRANSFERNOTALLOWED = 941350199057256536n;
export const NS_E_WMR_UNSUPPORTEDSTREAM = 941351298568884313n;
export const NS_E_WMR_PINNOTFOUND = 941352398080512090n;
export const NS_E_WMR_WAITINGONFORMATSWITCH = 941353497592139867n;
export const NS_E_WMR_NOSOURCEFILTER = 941354597103767644n;
export const NS_E_WMR_PINTYPENOMATCH = 941355696615395421n;
export const NS_E_WMR_NOCALLBACKAVAILABLE = 941356796127023198n;
export const NS_S_WMR_ALREADYRENDERED = 941357892417425503n;
export const NS_S_WMR_PINTYPEPARTIALMATCH = 941358991929053280n;
export const NS_S_WMR_PINTYPEFULLMATCH = 941360091440681057n;
export const NS_E_WMR_SAMPLEPROPERTYNOTSET = 941361194173534306n;
export const NS_E_WMR_CANNOT_RENDER_BINARY_STREAM = 941362293685162083n;
export const NS_E_WMG_LICENSE_TAMPERED = 941363393196789860n;
export const NS_E_WMR_WILLNOT_RENDER_BINARY_STREAM = 941364492708417637n;
export const NS_S_WMG_ADVISE_DROP_FRAME = 941365588998819942n;
export const NS_S_WMG_ADVISE_DROP_TO_KEYFRAME = 941366688510447719n;
export const NS_E_WMX_UNRECOGNIZED_PLAYLIST_FORMAT = 941367791243300968n;
export const NS_E_ASX_INVALIDFORMAT = 941368890754928745n;
export const NS_E_ASX_INVALIDVERSION = 941369990266556522n;
export const NS_E_ASX_INVALID_REPEAT_BLOCK = 941371089778184299n;
export const NS_E_ASX_NOTHING_TO_WRITE = 941372189289812076n;
export const NS_E_URLLIST_INVALIDFORMAT = 941373288801439853n;
export const NS_E_WMX_ATTRIBUTE_DOES_NOT_EXIST = 941374388313067630n;
export const NS_E_WMX_ATTRIBUTE_ALREADY_EXISTS = 941375487824695407n;
export const NS_E_WMX_ATTRIBUTE_UNRETRIEVABLE = 941376587336323184n;
export const NS_E_WMX_ITEM_DOES_NOT_EXIST = 941377686847950961n;
export const NS_E_WMX_ITEM_TYPE_ILLEGAL = 941378786359578738n;
export const NS_E_WMX_ITEM_UNSETTABLE = 941379885871206515n;
export const NS_E_WMX_PLAYLIST_EMPTY = 941380985382834292n;
export const NS_E_MLS_SMARTPLAYLIST_FILTER_NOT_REGISTERED = 941382084894462069n;
export const NS_E_WMX_INVALID_FORMAT_OVER_NESTING = 941388681964228726n;
export const NS_E_WMPCORE_NOSOURCEURLSTRING = 941389781475856508n;
export const NS_E_WMPCORE_COCREATEFAILEDFORGITOBJECT = 941390880987484285n;
export const NS_E_WMPCORE_FAILEDTOGETMARSHALLEDEVENTHANDLERINTERFACE = 941391980499112062n;
export const NS_E_WMPCORE_BUFFERTOOSMALL = 941393080010739839n;
export const NS_E_WMPCORE_UNAVAILABLE = 941394179522367616n;
export const NS_E_WMPCORE_INVALIDPLAYLISTMODE = 941399677080506497n;
export const NS_E_WMPCORE_ITEMNOTINPLAYLIST = 941400776592134278n;
export const NS_E_WMPCORE_PLAYLISTEMPTY = 941401876103762055n;
export const NS_E_WMPCORE_NOBROWSER = 941402975615389832n;
export const NS_E_WMPCORE_UNRECOGNIZED_MEDIA_URL = 941404075127017609n;
export const NS_E_WMPCORE_GRAPH_NOT_IN_LIST = 941405174638645386n;
export const NS_E_WMPCORE_PLAYLIST_EMPTY_OR_SINGLE_MEDIA = 941406274150273163n;
export const NS_E_WMPCORE_ERRORSINKNOTREGISTERED = 941407373661900940n;
export const NS_E_WMPCORE_ERRORMANAGERNOTAVAILABLE = 941408473173528717n;
export const NS_E_WMPCORE_WEBHELPFAILED = 941409572685156494n;
export const NS_E_WMPCORE_MEDIA_ERROR_RESUME_FAILED = 941410672196784271n;
export const NS_E_WMPCORE_NO_REF_IN_ENTRY = 941411771708412048n;
export const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_EMPTY = 941412871220039825n;
export const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_ILLEGAL = 941413970731667602n;
export const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_EMPTY = 941415070243295379n;
export const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_ILLEGAL = 941416169754923156n;
export const NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_EMPTY = 941417269266550933n;
export const NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_ILLEGAL = 941418368778178710n;
export const NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_VALUE_EMPTY = 941419468289806487n;
export const NS_E_WMPCORE_LIST_ENTRY_NO_REF = 941420567801434264n;
export const NS_E_WMPCORE_MISNAMED_FILE = 941421667313062041n;
export const NS_E_WMPCORE_CODEC_NOT_TRUSTED = 941422766824689818n;
export const NS_E_WMPCORE_CODEC_NOT_FOUND = 941423866336317595n;
export const NS_E_WMPCORE_CODEC_DOWNLOAD_NOT_ALLOWED = 941424965847945372n;
export const NS_E_WMPCORE_ERROR_DOWNLOADING_PLAYLIST = 941426065359573149n;
export const NS_E_WMPCORE_FAILED_TO_BUILD_PLAYLIST = 941427164871200926n;
export const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NONE = 941428264382828703n;
export const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_EXHAUSTED = 941429363894456480n;
export const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NAME_NOT_FOUND = 941430463406084257n;
export const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_MORPH_FAILED = 941431562917712034n;
export const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_INIT_FAILED = 941432662429339811n;
export const NS_E_WMPCORE_MEDIA_ALTERNATE_REF_EMPTY = 941433761940967588n;
export const NS_E_WMPCORE_PLAYLIST_NO_EVENT_NAME = 941434861452595365n;
export const NS_E_WMPCORE_PLAYLIST_EVENT_ATTRIBUTE_ABSENT = 941435960964223142n;
export const NS_E_WMPCORE_PLAYLIST_EVENT_EMPTY = 941437060475850919n;
export const NS_E_WMPCORE_PLAYLIST_STACK_EMPTY = 941438159987478696n;
export const NS_E_WMPCORE_CURRENT_MEDIA_NOT_ACTIVE = 941440359010734249n;
export const NS_E_WMPCORE_USER_CANCEL = 941441458522362027n;
export const NS_E_WMPCORE_PLAYLIST_REPEAT_EMPTY = 941442558033989804n;
export const NS_E_WMPCORE_PLAYLIST_REPEAT_START_MEDIA_NONE = 941443657545617581n;
export const NS_E_WMPCORE_PLAYLIST_REPEAT_END_MEDIA_NONE = 941444757057245358n;
export const NS_E_WMPCORE_INVALID_PLAYLIST_URL = 941445856568873135n;
export const NS_E_WMPCORE_MISMATCHED_RUNTIME = 941446956080500912n;
export const NS_E_WMPCORE_PLAYLIST_IMPORT_FAILED_NO_ITEMS = 941448055592128689n;
export const NS_E_WMPCORE_VIDEO_TRANSFORM_FILTER_INSERTION = 941449155103756466n;
export const NS_E_WMPCORE_MEDIA_UNAVAILABLE = 941450254615384243n;
export const NS_E_WMPCORE_WMX_ENTRYREF_NO_REF = 941451354127012020n;
export const NS_E_WMPCORE_NO_PLAYABLE_MEDIA_IN_PLAYLIST = 941452453638639797n;
export const NS_E_WMPCORE_PLAYLIST_EMPTY_NESTED_PLAYLIST_SKIPPED_ITEMS = 941453553150267574n;
export const NS_E_WMPCORE_BUSY = 941454652661895351n;
export const NS_E_WMPCORE_MEDIA_CHILD_PLAYLIST_UNAVAILABLE = 941455752173523128n;
export const NS_E_WMPCORE_MEDIA_NO_CHILD_PLAYLIST = 941456851685150905n;
export const NS_E_WMPCORE_FILE_NOT_FOUND = 941457951196778682n;
export const NS_E_WMPCORE_TEMP_FILE_NOT_FOUND = 941459050708406459n;
export const NS_E_WMDM_REVOKED = 941460150220034236n;
export const NS_E_DDRAW_GENERIC = 941461249731662013n;
export const NS_E_DISPLAY_MODE_CHANGE_FAILED = 941462349243289790n;
export const NS_E_PLAYLIST_CONTAINS_ERRORS = 941463448754917567n;
export const NS_E_CHANGING_PROXY_NAME = 941464548266545344n;
export const NS_E_CHANGING_PROXY_PORT = 941465647778173121n;
export const NS_E_CHANGING_PROXY_EXCEPTIONLIST = 941466747289800898n;
export const NS_E_CHANGING_PROXYBYPASS = 941467846801428675n;
export const NS_E_CHANGING_PROXY_PROTOCOL_NOT_FOUND = 941468946313056452n;
export const NS_E_GRAPH_NOAUDIOLANGUAGE = 941470045824684229n;
export const NS_E_GRAPH_NOAUDIOLANGUAGESELECTED = 941471145336312006n;
export const NS_E_CORECD_NOTAMEDIACD = 941472244847939783n;
export const NS_E_WMPCORE_MEDIA_URL_TOO_LONG = 941473344359567560n;
export const NS_E_WMPFLASH_CANT_FIND_COM_SERVER = 941474443871195337n;
export const NS_E_WMPFLASH_INCOMPATIBLEVERSION = 941475543382823114n;
export const NS_E_WMPOCXGRAPH_IE_DISALLOWS_ACTIVEX_CONTROLS = 941476642894450891n;
export const NS_E_NEED_CORE_REFERENCE = 941477742406078668n;
export const NS_E_MEDIACD_READ_ERROR = 941478841917706445n;
export const NS_E_IE_DISALLOWS_ACTIVEX_CONTROLS = 941479941429334222n;
export const NS_E_FLASH_PLAYBACK_NOT_ALLOWED = 941481040940961999n;
export const NS_E_UNABLE_TO_CREATE_RIP_LOCATION = 941482140452589776n;
export const NS_E_WMPCORE_SOME_CODECS_MISSING = 941483239964217553n;
export const NS_E_WMP_RIP_FAILED = 941484339475845330n;
export const NS_E_WMP_FAILED_TO_RIP_TRACK = 941485438987473107n;
export const NS_E_WMP_ERASE_FAILED = 941486538499100884n;
export const NS_E_WMP_FORMAT_FAILED = 941487638010728661n;
export const NS_E_WMP_CANNOT_BURN_NON_LOCAL_FILE = 941488737522356438n;
export const NS_E_WMP_FILE_TYPE_CANNOT_BURN_TO_AUDIO_CD = 941489837033984215n;
export const NS_E_WMP_FILE_DOES_NOT_FIT_ON_CD = 941490936545611992n;
export const NS_E_WMP_FILE_NO_DURATION = 941492036057239769n;
export const NS_E_PDA_FAILED_TO_BURN = 941493135568867546n;
export const NS_S_NEED_TO_BUY_BURN_RIGHTS = 941494231859269851n;
export const NS_E_FAILED_DOWNLOAD_ABORT_BURN = 941495334592123100n;
export const NS_E_WMPCORE_DEVICE_DRIVERS_MISSING = 941531618475839709n;
export const NS_S_WMPCORE_PLAYLISTCLEARABORT = 941532714766242046n;
export const NS_S_WMPCORE_PLAYLISTREMOVEITEMABORT = 941536013301125375n;
export const NS_S_WMPCORE_PLAYLIST_CREATION_PENDING = 941537112812753154n;
export const NS_S_WMPCORE_MEDIA_VALIDATION_PENDING = 941538212324380931n;
export const NS_S_WMPCORE_PLAYLIST_REPEAT_SECONDARY_SEGMENTS_IGNORED = 941539311836008708n;
export const NS_S_WMPCORE_COMMAND_NOT_AVAILABLE = 941540411347636485n;
export const NS_S_WMPCORE_PLAYLIST_NAME_AUTO_GENERATED = 941541510859264262n;
export const NS_S_WMPCORE_PLAYLIST_IMPORT_MISSING_ITEMS = 941542610370892039n;
export const NS_S_WMPCORE_PLAYLIST_COLLAPSED_TO_SINGLE_MEDIA = 941543709882519816n;
export const NS_S_WMPCORE_MEDIA_CHILD_PLAYLIST_OPEN_PENDING = 941544809394147593n;
export const NS_S_WMPCORE_MORE_NODES_AVAIABLE = 941575595719725322n;
export const NS_E_WMPIM_USEROFFLINE = 941576698452578598n;
export const NS_E_WMPIM_USERCANCELED = 941577797964206375n;
export const NS_E_WMPIM_DIALUPFAILED = 941578897475834152n;
export const NS_E_WINSOCK_ERROR_STRING = 941586594057228585n;
export const NS_E_WMPBR_NOLISTENER = 941587693568856368n;
export const NS_E_WMPBR_BACKUPCANCEL = 941588793080484145n;
export const NS_E_WMPBR_RESTORECANCEL = 941589892592111922n;
export const NS_E_WMPBR_ERRORWITHURL = 941590992103739699n;
export const NS_E_WMPBR_NAMECOLLISION = 941592091615367476n;
export const NS_S_WMPBR_SUCCESS = 941593187905769781n;
export const NS_S_WMPBR_PARTIALSUCCESS = 941594287417397558n;
export const NS_E_WMPBR_DRIVE_INVALID = 941595390150250807n;
export const NS_E_WMPBR_BACKUPRESTOREFAILED = 941608584289784120n;
export const NS_S_WMPEFFECT_TRANSPARENT = 941609680580186436n;
export const NS_S_WMPEFFECT_OPAQUE = 941619576184836421n;
export const NS_S_OPERATION_PENDING = 941630571301114190n;
export const NS_E_WMP_CONVERT_FILE_FAILED = 941631674033967448n;
export const NS_E_WMP_CONVERT_NO_RIGHTS_ERRORURL = 941632773545595225n;
export const NS_E_WMP_CONVERT_NO_RIGHTS_NOERRORURL = 941633873057223002n;
export const NS_E_WMP_CONVERT_FILE_CORRUPT = 941634972568850779n;
export const NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_ERRORURL = 941636072080478556n;
export const NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_NOERRORURL = 941637171592106333n;
export const NS_E_WMP_CONVERT_PLUGIN_UNKNOWN_FILE_OWNER = 941639370615361886n;
export const NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_NS = 941640470126989664n;
export const NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_FAILED = 941641569638617441n;
export const NS_E_DVD_NO_SUBPICTURE_STREAM = 941642669150245218n;
export const NS_E_DVD_COPY_PROTECT = 941643768661872995n;
export const NS_E_DVD_AUTHORING_PROBLEM = 941644868173500772n;
export const NS_E_DVD_INVALID_DISC_REGION = 941645967685128549n;
export const NS_E_DVD_COMPATIBLE_VIDEO_CARD = 941647067196756326n;
export const NS_E_DVD_MACROVISION = 941648166708384103n;
export const NS_E_DVD_SYSTEM_DECODER_REGION = 941649266220011880n;
export const NS_E_DVD_DISC_DECODER_REGION = 941650365731639657n;
export const NS_E_DVD_NO_VIDEO_STREAM = 941651465243267434n;
export const NS_E_DVD_NO_AUDIO_STREAM = 941652564754895211n;
export const NS_E_DVD_GRAPH_BUILDING = 941653664266522988n;
export const NS_E_DVD_NO_DECODER = 941654763778150765n;
export const NS_E_DVD_PARENTAL = 941655863289778542n;
export const NS_E_DVD_CANNOT_JUMP = 941656962801406319n;
export const NS_E_DVD_DEVICE_CONTENTION = 941658062313034096n;
export const NS_E_DVD_NO_VIDEO_MEMORY = 941659161824661873n;
export const NS_E_DVD_CANNOT_COPY_PROTECTED = 941660261336289650n;
export const NS_E_DVD_REQUIRED_PROPERTY_NOT_SET = 941661360847917427n;
export const NS_E_DVD_INVALID_TITLE_CHAPTER = 941663559871172980n;
export const NS_E_NO_CD_BURNER = 941664659382800758n;
export const NS_E_DEVICE_IS_NOT_READY = 941665758894428535n;
export const NS_E_PDA_UNSUPPORTED_FORMAT = 941666858406056312n;
export const NS_E_NO_PDA = 941667957917684089n;
export const NS_E_PDA_UNSPECIFIED_ERROR = 941669057429311866n;
export const NS_E_MEMSTORAGE_BAD_DATA = 941670156940939643n;
export const NS_E_PDA_FAIL_SELECT_DEVICE = 941671256452567420n;
export const NS_E_PDA_FAIL_READ_WAVE_FILE = 941672355964195197n;
export const NS_E_IMAPI_LOSSOFSTREAMING = 941673455475822974n;
export const NS_E_PDA_DEVICE_FULL = 941674554987450751n;
export const NS_E_FAIL_LAUNCH_ROXIO_PLUGIN = 941675654499078528n;
export const NS_E_PDA_DEVICE_FULL_IN_SESSION = 941676754010706305n;
export const NS_E_IMAPI_MEDIUM_INVALIDTYPE = 941677853522334082n;
export const NS_E_PDA_MANUALDEVICE = 941678953033961859n;
export const NS_E_PDA_PARTNERSHIPNOTEXIST = 941680052545589636n;
export const NS_E_PDA_CANNOT_CREATE_ADDITIONAL_SYNC_RELATIONSHIP = 941681152057217413n;
export const NS_E_PDA_NO_TRANSCODE_OF_DRM = 941682251568845190n;
export const NS_E_PDA_TRANSCODECACHEFULL = 941683351080472967n;
export const NS_E_PDA_TOO_MANY_FILE_COLLISIONS = 941684450592100744n;
export const NS_E_PDA_CANNOT_TRANSCODE = 941685550103728521n;
export const NS_E_PDA_TOO_MANY_FILES_IN_DIRECTORY = 941686649615356298n;
export const NS_E_PROCESSINGSHOWSYNCWIZARD = 941687749126984075n;
export const NS_E_PDA_TRANSCODE_NOT_PERMITTED = 941688848638611852n;
export const NS_E_PDA_INITIALIZINGDEVICES = 941689948150239629n;
export const NS_E_PDA_OBSOLETE_SP = 941691047661867406n;
export const NS_E_PDA_TITLE_COLLISION = 941692147173495183n;
export const NS_E_PDA_DEVICESUPPORTDISABLED = 941693246685122960n;
export const NS_E_PDA_NO_LONGER_AVAILABLE = 941694346196750737n;
export const NS_E_PDA_ENCODER_NOT_RESPONDING = 941695445708378514n;
export const NS_E_PDA_CANNOT_SYNC_FROM_LOCATION = 941696545220006291n;
export const NS_E_WMP_PROTOCOL_PROBLEM = 941697644731634068n;
export const NS_E_WMP_NO_DISK_SPACE = 941698744243261845n;
export const NS_E_WMP_LOGON_FAILURE = 941699843754889622n;
export const NS_E_WMP_CANNOT_FIND_FILE = 941700943266517399n;
export const NS_E_WMP_SERVER_INACCESSIBLE = 941702042778145176n;
export const NS_E_WMP_UNSUPPORTED_FORMAT = 941703142289772953n;
export const NS_E_WMP_DSHOW_UNSUPPORTED_FORMAT = 941704241801400730n;
export const NS_E_WMP_PLAYLIST_EXISTS = 941705341313028507n;
export const NS_E_WMP_NONMEDIA_FILES = 941706440824656284n;
export const NS_E_WMP_INVALID_ASX = 941707540336284061n;
export const NS_E_WMP_ALREADY_IN_USE = 941708639847911838n;
export const NS_E_WMP_IMAPI_FAILURE = 941709739359539615n;
export const NS_E_WMP_WMDM_FAILURE = 941710838871167392n;
export const NS_E_WMP_CODEC_NEEDED_WITH_4CC = 941711938382795169n;
export const NS_E_WMP_CODEC_NEEDED_WITH_FORMATTAG = 941713037894422946n;
export const NS_E_WMP_MSSAP_NOT_AVAILABLE = 941714137406050723n;
export const NS_E_WMP_WMDM_INTERFACEDEAD = 941715236917678500n;
export const NS_E_WMP_WMDM_NOTCERTIFIED = 941716336429306277n;
export const NS_E_WMP_WMDM_LICENSE_NOTEXIST = 941717435940934054n;
export const NS_E_WMP_WMDM_LICENSE_EXPIRED = 941718535452561831n;
export const NS_E_WMP_WMDM_BUSY = 941719634964189608n;
export const NS_E_WMP_WMDM_NORIGHTS = 941720734475817385n;
export const NS_E_WMP_WMDM_INCORRECT_RIGHTS = 941721833987445162n;
export const NS_E_WMP_IMAPI_GENERIC = 941724033010700715n;
export const NS_E_WMP_IMAPI_DEVICE_NOTPRESENT = 941725132522328493n;
export const NS_E_WMP_IMAPI_DEVICE_BUSY = 941726232033956270n;
export const NS_E_WMP_IMAPI_LOSS_OF_STREAMING = 941727331545584047n;
export const NS_E_WMP_SERVER_UNAVAILABLE = 941728431057211824n;
export const NS_E_WMP_FILE_OPEN_FAILED = 941729530568839601n;
export const NS_E_WMP_VERIFY_ONLINE = 941730630080467378n;
export const NS_E_WMP_SERVER_NOT_RESPONDING = 941731729592095155n;
export const NS_E_WMP_DRM_CORRUPT_BACKUP = 941732829103722932n;
export const NS_E_WMP_DRM_LICENSE_SERVER_UNAVAILABLE = 941733928615350709n;
export const NS_E_WMP_NETWORK_FIREWALL = 941735028126978486n;
export const NS_E_WMP_NO_REMOVABLE_MEDIA = 941736127638606263n;
export const NS_E_WMP_PROXY_CONNECT_TIMEOUT = 941737227150234040n;
export const NS_E_WMP_NEED_UPGRADE = 941738326661861817n;
export const NS_E_WMP_AUDIO_HW_PROBLEM = 941739426173489594n;
export const NS_E_WMP_INVALID_PROTOCOL = 941740525685117371n;
export const NS_E_WMP_INVALID_LIBRARY_ADD = 941741625196745148n;
export const NS_E_WMP_MMS_NOT_SUPPORTED = 941742724708372925n;
export const NS_E_WMP_NO_PROTOCOLS_SELECTED = 941743824220000702n;
export const NS_E_WMP_GOFULLSCREEN_FAILED = 941744923731628479n;
export const NS_E_WMP_NETWORK_ERROR = 941746023243256256n;
export const NS_E_WMP_CONNECT_TIMEOUT = 941747122754884033n;
export const NS_E_WMP_MULTICAST_DISABLED = 941748222266511810n;
export const NS_E_WMP_SERVER_DNS_TIMEOUT = 941749321778139587n;
export const NS_E_WMP_PROXY_NOT_FOUND = 941750421289767364n;
export const NS_E_WMP_TAMPERED_CONTENT = 941751520801395141n;
export const NS_E_WMP_OUTOFMEMORY = 941752620313022918n;
export const NS_E_WMP_AUDIO_CODEC_NOT_INSTALLED = 941753719824650695n;
export const NS_E_WMP_VIDEO_CODEC_NOT_INSTALLED = 941754819336278472n;
export const NS_E_WMP_IMAPI_DEVICE_INVALIDTYPE = 941755918847906249n;
export const NS_E_WMP_DRM_DRIVER_AUTH_FAILURE = 941757018359534026n;
export const NS_E_WMP_NETWORK_RESOURCE_FAILURE = 941758117871161803n;
export const NS_E_WMP_UPGRADE_APPLICATION = 941759217382789580n;
export const NS_E_WMP_UNKNOWN_ERROR = 941760316894417357n;
export const NS_E_WMP_INVALID_KEY = 941761416406045134n;
export const NS_E_WMP_CD_ANOTHER_USER = 941762515917672911n;
export const NS_E_WMP_DRM_NEEDS_AUTHORIZATION = 941763615429300688n;
export const NS_E_WMP_BAD_DRIVER = 941764714940928465n;
export const NS_E_WMP_ACCESS_DENIED = 941765814452556242n;
export const NS_E_WMP_LICENSE_RESTRICTS = 941766913964184019n;
export const NS_E_WMP_INVALID_REQUEST = 941768013475811796n;
export const NS_E_WMP_CD_STASH_NO_SPACE = 941769112987439573n;
export const NS_E_WMP_DRM_NEW_HARDWARE = 941770212499067350n;
export const NS_E_WMP_DRM_INVALID_SIG = 941771312010695127n;
export const NS_E_WMP_DRM_CANNOT_RESTORE = 941772411522322904n;
export const NS_E_WMP_BURN_DISC_OVERFLOW = 941773511033950681n;
export const NS_E_WMP_DRM_GENERIC_LICENSE_FAILURE = 941774610545578458n;
export const NS_E_WMP_DRM_NO_SECURE_CLOCK = 941775710057206235n;
export const NS_E_WMP_DRM_NO_RIGHTS = 941776809568834012n;
export const NS_E_WMP_DRM_INDIV_FAILED = 941777909080461789n;
export const NS_E_WMP_SERVER_NONEWCONNECTIONS = 941779008592089566n;
export const NS_E_WMP_MULTIPLE_ERROR_IN_PLAYLIST = 941780108103717343n;
export const NS_E_WMP_IMAPI2_ERASE_FAIL = 941781207615345120n;
export const NS_E_WMP_IMAPI2_ERASE_DEVICE_BUSY = 941782307126972897n;
export const NS_E_WMP_DRM_COMPONENT_FAILURE = 941783406638600674n;
export const NS_E_WMP_DRM_NO_DEVICE_CERT = 941784506150228451n;
export const NS_E_WMP_SERVER_SECURITY_ERROR = 941785605661856228n;
export const NS_E_WMP_AUDIO_DEVICE_LOST = 941786705173484005n;
export const NS_E_WMP_IMAPI_MEDIA_INCOMPATIBLE = 941795501266506214n;
export const NS_E_SYNCWIZ_DEVICE_FULL = 941796600778133998n;
export const NS_E_SYNCWIZ_CANNOT_CHANGE_SETTINGS = 941797700289761775n;
export const NS_E_TRANSCODE_DELETECACHEERROR = 941806496382783984n;
export const NS_E_CD_NO_BUFFERS_READ = 941807595894411768n;
export const NS_E_CD_EMPTY_TRACK_QUEUE = 941808695406039545n;
export const NS_E_CD_NO_READER = 941809794917667322n;
export const NS_E_CD_ISRC_INVALID = 941810894429295099n;
export const NS_E_CD_MEDIA_CATALOG_NUMBER_INVALID = 941811993940922876n;
export const NS_E_SLOW_READ_DIGITAL_WITH_ERRORCORRECTION = 941813093452550653n;
export const NS_E_CD_SPEEDDETECT_NOT_ENOUGH_READS = 941814192964178430n;
export const NS_E_CD_QUEUEING_DISABLED = 941817491499061759n;
export const NS_E_WMP_DRM_ACQUIRING_LICENSE = 941818591010689538n;
export const NS_E_WMP_DRM_LICENSE_EXPIRED = 941819690522317315n;
export const NS_E_WMP_DRM_LICENSE_NOTACQUIRED = 941820790033945092n;
export const NS_E_WMP_DRM_LICENSE_NOTENABLED = 941821889545572869n;
export const NS_E_WMP_DRM_LICENSE_UNUSABLE = 941822989057200646n;
export const NS_E_WMP_DRM_LICENSE_CONTENT_REVOKED = 941824088568828423n;
export const NS_E_WMP_DRM_LICENSE_NOSAP = 941825188080456200n;
export const NS_E_WMP_DRM_UNABLE_TO_ACQUIRE_LICENSE = 941826287592083977n;
export const NS_E_WMP_LICENSE_REQUIRED = 941827387103711754n;
export const NS_E_WMP_PROTECTED_CONTENT = 941861471964172811n;
export const NS_E_WMP_POLICY_VALUE_NOT_CONFIGURED = 941872467080450602n;
export const NS_E_PDA_CANNOT_SYNC_FROM_INTERNET = 941873566592078388n;
export const NS_E_PDA_CANNOT_SYNC_INVALID_PLAYLIST = 941874666103706165n;
export const NS_E_PDA_FAILED_TO_SYNCHRONIZE_FILE = 941875765615333942n;
export const NS_E_PDA_SYNC_FAILED = 941876865126961719n;
export const NS_E_PDA_DELETE_FAILED = 941877964638589496n;
export const NS_E_PDA_FAILED_TO_RETRIEVE_FILE = 941879064150217273n;
export const NS_E_PDA_DEVICE_NOT_RESPONDING = 941880163661845050n;
export const NS_E_PDA_FAILED_TO_TRANSCODE_PHOTO = 941881263173472827n;
export const NS_E_PDA_FAILED_TO_ENCRYPT_TRANSCODED_FILE = 941882362685100604n;
export const NS_E_PDA_CANNOT_TRANSCODE_TO_AUDIO = 941883462196728381n;
export const NS_E_PDA_CANNOT_TRANSCODE_TO_VIDEO = 941884561708356158n;
export const NS_E_PDA_CANNOT_TRANSCODE_TO_IMAGE = 941885661219983935n;
export const NS_E_PDA_RETRIEVED_FILE_FILENAME_TOO_LONG = 941886760731611712n;
export const NS_E_PDA_CEWMDM_DRM_ERROR = 941887860243239489n;
export const NS_E_INCOMPLETE_PLAYLIST = 941888959754867266n;
export const NS_E_PDA_SYNC_RUNNING = 941890059266495043n;
export const NS_E_PDA_SYNC_LOGIN_ERROR = 941891158778122820n;
export const NS_E_PDA_TRANSCODE_CODEC_NOT_FOUND = 941892258289750597n;
export const NS_E_CANNOT_SYNC_DRM_TO_NON_JANUS_DEVICE = 941893357801378374n;
export const NS_E_CANNOT_SYNC_PREVIOUS_SYNC_RUNNING = 941916447545561671n;
export const NS_E_WMP_HWND_NOTFOUND = 941917547057189468n;
export const NS_E_BKGDOWNLOAD_WRONG_NO_FILES = 941918646568817245n;
export const NS_E_BKGDOWNLOAD_COMPLETECANCELLEDJOB = 941919746080445022n;
export const NS_E_BKGDOWNLOAD_CANCELCOMPLETEDJOB = 941920845592072799n;
export const NS_E_BKGDOWNLOAD_NOJOBPOINTER = 941921945103700576n;
export const NS_E_BKGDOWNLOAD_INVALIDJOBSIGNATURE = 941923044615328353n;
export const NS_E_BKGDOWNLOAD_FAILED_TO_CREATE_TEMPFILE = 941924144126956130n;
export const NS_E_BKGDOWNLOAD_PLUGIN_FAILEDINITIALIZE = 941925243638583907n;
export const NS_E_BKGDOWNLOAD_PLUGIN_FAILEDTOMOVEFILE = 941926343150211684n;
export const NS_E_BKGDOWNLOAD_CALLFUNCFAILED = 941927442661839461n;
export const NS_E_BKGDOWNLOAD_CALLFUNCTIMEOUT = 941928542173467238n;
export const NS_E_BKGDOWNLOAD_CALLFUNCENDED = 941929641685095015n;
export const NS_E_BKGDOWNLOAD_WMDUNPACKFAILED = 941930741196722792n;
export const NS_E_BKGDOWNLOAD_FAILEDINITIALIZE = 941931840708350569n;
export const NS_E_INTERFACE_NOT_REGISTERED_IN_GIT = 941932940219978346n;
export const NS_E_BKGDOWNLOAD_INVALID_FILE_NAME = 941971423126950507n;
export const NS_E_IMAGE_DOWNLOAD_FAILED = 942026398708339342n;
export const NS_E_WMP_UDRM_NOUSERLIST = 942027498219967168n;
export const NS_E_WMP_DRM_NOT_ACQUIRING = 942081374289728193n;
export const NS_E_WMP_BSTR_TOO_LONG = 942092369406006002n;
export const NS_E_WMP_AUTOPLAY_INVALID_STATE = 942103364522283772n;
export const NS_E_WMP_COMPONENT_REVOKED = 942136349871117062n;
export const NS_E_CURL_NOTSAFE = 942137449382744868n;
export const NS_E_CURL_INVALIDCHAR = 942138548894372645n;
export const NS_E_CURL_INVALIDHOSTNAME = 942139648406000422n;
export const NS_E_CURL_INVALIDPATH = 942140747917628199n;
export const NS_E_CURL_INVALIDSCHEME = 942141847429255976n;
export const NS_E_CURL_INVALIDURL = 942144046452511529n;
export const NS_E_CURL_CANTWALK = 942145145964139307n;
export const NS_E_CURL_INVALIDPORT = 942146245475767084n;
export const NS_E_CURLHELPER_NOTADIRECTORY = 942147344987394861n;
export const NS_E_CURLHELPER_NOTAFILE = 942148444499022638n;
export const NS_E_CURL_CANTDECODE = 942149544010650415n;
export const NS_E_CURLHELPER_NOTRELATIVE = 942150643522278192n;
export const NS_E_CURL_INVALIDBUFFERSIZE = 942191325452505905n;
export const NS_E_SUBSCRIPTIONSERVICE_PLAYBACK_DISALLOWED = 942192424964133718n;
export const NS_E_CANNOT_BUY_OR_DOWNLOAD_FROM_MULTIPLE_SERVICES = 942193524475761495n;
export const NS_E_CANNOT_BUY_OR_DOWNLOAD_CONTENT = 942194623987389272n;
export const NS_S_TRACK_BUY_REQUIRES_ALBUM_PURCHASE = 942195720277791577n;
export const NS_E_NOT_CONTENT_PARTNER_TRACK = 942196823010644826n;
export const NS_E_TRACK_DOWNLOAD_REQUIRES_ALBUM_PURCHASE = 942197922522272603n;
export const NS_E_TRACK_DOWNLOAD_REQUIRES_PURCHASE = 942199022033900380n;
export const NS_E_TRACK_PURCHASE_MAXIMUM_EXCEEDED = 942200121545528157n;
export const NS_S_NAVIGATION_COMPLETE_WITH_ERRORS = 942201217835930462n;
export const NS_E_SUBSCRIPTIONSERVICE_LOGIN_FAILED = 942202320568783711n;
export const NS_E_SUBSCRIPTIONSERVICE_DOWNLOAD_TIMEOUT = 942203420080411488n;
export const NS_S_TRACK_ALREADY_DOWNLOADED = 942204516370813793n;
export const NS_E_CONTENT_PARTNER_STILL_INITIALIZING = 942205619103667042n;
export const NS_E_OPEN_CONTAINING_FOLDER_FAILED = 942213315685061475n;
export const NS_E_ADVANCEDEDIT_TOO_MANY_PICTURES = 942246301033894762n;
export const NS_E_REDIRECT = 942247400545522568n;
export const NS_E_STALE_PRESENTATION = 942248500057150345n;
export const NS_E_NAMESPACE_WRONG_PERSIST = 942249599568778122n;
export const NS_E_NAMESPACE_WRONG_TYPE = 942250699080405899n;
export const NS_E_NAMESPACE_NODE_CONFLICT = 942251798592033676n;
export const NS_E_NAMESPACE_NODE_NOT_FOUND = 942252898103661453n;
export const NS_E_NAMESPACE_BUFFER_TOO_SMALL = 942253997615289230n;
export const NS_E_NAMESPACE_TOO_MANY_CALLBACKS = 942255097126917007n;
export const NS_E_NAMESPACE_DUPLICATE_CALLBACK = 942256196638544784n;
export const NS_E_NAMESPACE_CALLBACK_NOT_FOUND = 942257296150172561n;
export const NS_E_NAMESPACE_NAME_TOO_LONG = 942258395661800338n;
export const NS_E_NAMESPACE_DUPLICATE_NAME = 942259495173428115n;
export const NS_E_NAMESPACE_EMPTY_NAME = 942260594685055892n;
export const NS_E_NAMESPACE_INDEX_TOO_LARGE = 942261694196683669n;
export const NS_E_NAMESPACE_BAD_NAME = 942262793708311446n;
export const NS_E_NAMESPACE_WRONG_SECURITY = 942356252196672407n;
export const NS_E_CACHE_ARCHIVE_CONFLICT = 942357351708300268n;
export const NS_E_CACHE_ORIGIN_SERVER_NOT_FOUND = 942358451219928045n;
export const NS_E_CACHE_ORIGIN_SERVER_TIMEOUT = 942359550731555822n;
export const NS_E_CACHE_NOT_BROADCAST = 942360650243183599n;
export const NS_E_CACHE_CANNOT_BE_CACHED = 942361749754811376n;
export const NS_E_CACHE_NOT_MODIFIED = 942466203359450097n;
export const NS_E_CANNOT_REMOVE_PUBLISHING_POINT = 942467302871077968n;
export const NS_E_CANNOT_REMOVE_PLUGIN = 942468402382705745n;
export const NS_E_WRONG_PUBLISHING_POINT_TYPE = 942469501894333522n;
export const NS_E_UNSUPPORTED_LOAD_TYPE = 942470601405961299n;
export const NS_E_INVALID_PLUGIN_LOAD_TYPE_CONFIGURATION = 942471700917589076n;
export const NS_E_INVALID_PUBLISHING_POINT_NAME = 942472800429216853n;
export const NS_E_TOO_MANY_MULTICAST_SINKS = 942473899940844630n;
export const NS_E_PUBLISHING_POINT_INVALID_REQUEST_WHILE_STARTED = 942474999452472407n;
export const NS_E_MULTICAST_PLUGIN_NOT_ENABLED = 942476098964100184n;
export const NS_E_INVALID_OPERATING_SYSTEM_VERSION = 942477198475727961n;
export const NS_E_PUBLISHING_POINT_REMOVED = 942478297987355738n;
export const NS_E_INVALID_PUSH_PUBLISHING_POINT_START_REQUEST = 942479397498983515n;
export const NS_E_UNSUPPORTED_LANGUAGE = 942480497010611292n;
export const NS_E_WRONG_OS_VERSION = 942481596522239069n;
export const NS_E_PUBLISHING_POINT_STOPPED = 942576154522227806n;
export const NS_E_PLAYLIST_ENTRY_ALREADY_PLAYING = 942577254033855668n;
export const NS_E_EMPTY_PLAYLIST = 942578353545483445n;
export const NS_E_PLAYLIST_PARSE_FAILURE = 942579453057111222n;
export const NS_E_PLAYLIST_UNSUPPORTED_ENTRY = 942580552568738999n;
export const NS_E_PLAYLIST_ENTRY_NOT_IN_PLAYLIST = 942581652080366776n;
export const NS_E_PLAYLIST_ENTRY_SEEK = 942582751591994553n;
export const NS_E_PLAYLIST_RECURSIVE_PLAYLISTS = 942583851103622330n;
export const NS_E_PLAYLIST_TOO_MANY_NESTED_PLAYLISTS = 942584950615250107n;
export const NS_E_PLAYLIST_SHUTDOWN = 942586050126877884n;
export const NS_E_PLAYLIST_END_RECEDING = 942587149638505661n;
export const NS_I_PLAYLIST_CHANGE_RECEDING = 942686103537521854n;
export const NS_E_DATAPATH_NO_SINK = 942687205196633368n;
export const NS_S_PUBLISHING_POINT_STARTED_WITH_FAILED_SINKS = 942688301487035673n;
export const NS_E_INVALID_PUSH_TEMPLATE = 942689404219888922n;
export const NS_E_INVALID_PUSH_PUBLISHING_POINT = 942690503731516699n;
export const NS_E_CRITICAL_ERROR = 942691603243144476n;
export const NS_E_NO_NEW_CONNECTIONS = 942692702754772253n;
export const NS_E_WSX_INVALID_VERSION = 942693802266400030n;
export const NS_E_HEADER_MISMATCH = 942694901778027807n;
export const NS_E_PUSH_DUPLICATE_PUBLISHING_POINT_NAME = 942796056847783200n;
export const NS_E_NO_SCRIPT_ENGINE = 942797156359411068n;
export const NS_E_PLUGIN_ERROR_REPORTED = 942798255871038845n;
export const NS_E_SOURCE_PLUGIN_NOT_FOUND = 942799355382666622n;
export const NS_E_PLAYLIST_PLUGIN_NOT_FOUND = 942800454894294399n;
export const NS_E_DATA_SOURCE_ENUMERATION_NOT_SUPPORTED = 942801554405922176n;
export const NS_E_MEDIA_PARSER_INVALID_FORMAT = 942802653917549953n;
export const NS_E_SCRIPT_DEBUGGER_NOT_INSTALLED = 942803753429177730n;
export const NS_E_FEATURE_REQUIRES_ENTERPRISE_SERVER = 942804852940805507n;
export const NS_E_WIZARD_RUNNING = 942805952452433284n;
export const NS_E_INVALID_LOG_URL = 942807051964061061n;
export const NS_E_INVALID_MTU_RANGE = 942808151475688838n;
export const NS_E_INVALID_PLAY_STATISTICS = 942809250987316615n;
export const NS_E_LOG_NEED_TO_BE_SKIPPED = 942810350498944392n;
export const NS_E_HTTP_TEXT_DATACONTAINER_SIZE_LIMIT_EXCEEDED = 942811450010572169n;
export const NS_E_PORT_IN_USE = 942812549522199946n;
export const NS_E_PORT_IN_USE_HTTP = 942813649033827723n;
export const NS_E_HTTP_TEXT_DATACONTAINER_INVALID_SERVER_RESPONSE = 942814748545455500n;
export const NS_E_ARCHIVE_REACH_QUOTA = 942815848057083277n;
export const NS_E_ARCHIVE_ABORT_DUE_TO_BCAST = 942816947568711054n;
export const NS_E_ARCHIVE_GAP_DETECTED = 942818047080338831n;
export const NS_E_AUTHORIZATION_FILE_NOT_FOUND = 944445324289447312n;
export const NS_E_BAD_MARKIN = 944446423801076568n;
export const NS_E_BAD_MARKOUT = 944447523312704345n;
export const NS_E_NOMATCHING_MEDIASOURCE = 944448622824332122n;
export const NS_E_UNSUPPORTED_SOURCETYPE = 944449722335959899n;
export const NS_E_TOO_MANY_AUDIO = 944450821847587676n;
export const NS_E_TOO_MANY_VIDEO = 944451921359215453n;
export const NS_E_NOMATCHING_ELEMENT = 944453020870843230n;
export const NS_E_MISMATCHED_MEDIACONTENT = 944454120382471007n;
export const NS_E_CANNOT_DELETE_ACTIVE_SOURCEGROUP = 944455219894098784n;
export const NS_E_AUDIODEVICE_BUSY = 944456319405726561n;
export const NS_E_AUDIODEVICE_UNEXPECTED = 944457418917354338n;
export const NS_E_AUDIODEVICE_BADFORMAT = 944458518428982115n;
export const NS_E_VIDEODEVICE_BUSY = 944459617940609892n;
export const NS_E_VIDEODEVICE_UNEXPECTED = 944460717452237669n;
export const NS_E_INVALIDCALL_WHILE_ENCODER_RUNNING = 944461816963865446n;
export const NS_E_NO_PROFILE_IN_SOURCEGROUP = 944462916475493223n;
export const NS_E_VIDEODRIVER_UNSTABLE = 944464015987121000n;
export const NS_E_VIDCAPSTARTFAILED = 944465115498748777n;
export const NS_E_VIDSOURCECOMPRESSION = 944466215010376554n;
export const NS_E_VIDSOURCESIZE = 944467314522004331n;
export const NS_E_ICMQUERYFORMAT = 944468414033632108n;
export const NS_E_VIDCAPCREATEWINDOW = 944469513545259885n;
export const NS_E_VIDCAPDRVINUSE = 944470613056887662n;
export const NS_E_NO_MEDIAFORMAT_IN_SOURCE = 944471712568515439n;
export const NS_E_NO_VALID_OUTPUT_STREAM = 944472812080143216n;
export const NS_E_NO_VALID_SOURCE_PLUGIN = 944473911591770993n;
export const NS_E_NO_ACTIVE_SOURCEGROUP = 944475011103398770n;
export const NS_E_NO_SCRIPT_STREAM = 944476110615026547n;
export const NS_E_INVALIDCALL_WHILE_ARCHIVAL_RUNNING = 944477210126654324n;
export const NS_E_INVALIDPACKETSIZE = 944478309638282101n;
export const NS_E_PLUGIN_CLSID_INVALID = 944479409149909878n;
export const NS_E_UNSUPPORTED_ARCHIVETYPE = 944480508661537655n;
export const NS_E_UNSUPPORTED_ARCHIVEOPERATION = 944481608173165432n;
export const NS_E_ARCHIVE_FILENAME_NOTSET = 944482707684793209n;
export const NS_E_SOURCEGROUP_NOTPREPARED = 944483807196420986n;
export const NS_E_PROFILE_MISMATCH = 944484906708048763n;
export const NS_E_INCORRECTCLIPSETTINGS = 944486006219676540n;
export const NS_E_NOSTATSAVAILABLE = 944487105731304317n;
export const NS_E_NOTARCHIVING = 944488205242932094n;
export const NS_E_INVALIDCALL_WHILE_ENCODER_STOPPED = 944489304754559871n;
export const NS_E_NOSOURCEGROUPS = 944490404266187648n;
export const NS_E_INVALIDINPUTFPS = 944491503777815425n;
export const NS_E_NO_DATAVIEW_SUPPORT = 944492603289443202n;
export const NS_E_CODEC_UNAVAILABLE = 944493702801070979n;
export const NS_E_ARCHIVE_SAME_AS_INPUT = 944494802312698756n;
export const NS_E_SOURCE_NOTSPECIFIED = 944495901824326533n;
export const NS_E_NO_REALTIME_TIMECOMPRESSION = 944497001335954310n;
export const NS_E_UNSUPPORTED_ENCODER_DEVICE = 944498100847582087n;
export const NS_E_UNEXPECTED_DISPLAY_SETTINGS = 944499200359209864n;
export const NS_E_NO_AUDIODATA = 944500299870837641n;
export const NS_E_INPUTSOURCE_PROBLEM = 944501399382465418n;
export const NS_E_WME_VERSION_MISMATCH = 944502498894093195n;
export const NS_E_NO_REALTIME_PREPROCESS = 944503598405720972n;
export const NS_E_NO_REPEAT_PREPROCESS = 944504697917348749n;
export const NS_E_CANNOT_PAUSE_LIVEBROADCAST = 944505797428976526n;
export const NS_E_DRM_PROFILE_NOT_SET = 944506896940604303n;
export const NS_E_DUPLICATE_DRMPROFILE = 944507996452232080n;
export const NS_E_INVALID_DEVICE = 944509095963859857n;
export const NS_E_SPEECHEDL_ON_NON_MIXEDMODE = 944510195475487634n;
export const NS_E_DRM_PASSWORD_TOO_LONG = 944511294987115411n;
export const NS_E_DEVCONTROL_FAILED_SEEK = 944512394498743188n;
export const NS_E_INTERLACE_REQUIRE_SAMESIZE = 944513494010370965n;
export const NS_E_TOO_MANY_DEVICECONTROL = 944514593521998742n;
export const NS_E_NO_MULTIPASS_FOR_LIVEDEVICE = 944515693033626519n;
export const NS_E_MISSING_AUDIENCE = 944516792545254296n;
export const NS_E_AUDIENCE_CONTENTTYPE_MISMATCH = 944517892056882073n;
export const NS_E_MISSING_SOURCE_INDEX = 944518991568509850n;
export const NS_E_NUM_LANGUAGE_MISMATCH = 944520091080137627n;
export const NS_E_LANGUAGE_MISMATCH = 944521190591765404n;
export const NS_E_VBRMODE_MISMATCH = 944522290103393181n;
export const NS_E_INVALID_INPUT_AUDIENCE_INDEX = 944523389615020958n;
export const NS_E_INVALID_INPUT_LANGUAGE = 944524489126648735n;
export const NS_E_INVALID_INPUT_STREAM = 944525588638276512n;
export const NS_E_EXPECT_MONO_WAV_INPUT = 944526688149904289n;
export const NS_E_INPUT_WAVFORMAT_MISMATCH = 944527787661532066n;
export const NS_E_RECORDQ_DISK_FULL = 944528887173159843n;
export const NS_E_NO_PAL_INVERSE_TELECINE = 944529986684787620n;
export const NS_E_ACTIVE_SG_DEVICE_DISCONNECTED = 944531086196415397n;
export const NS_E_ACTIVE_SG_DEVICE_CONTROL_DISCONNECTED = 944532185708043174n;
export const NS_E_NO_FRAMES_SUBMITTED_TO_ANALYZER = 944533285219670951n;
export const NS_E_INPUT_DOESNOT_SUPPORT_SMPTE = 944534384731298728n;
export const NS_E_NO_SMPTE_WITH_MULTIPLE_SOURCEGROUPS = 944535484242926505n;
export const NS_E_BAD_CONTENTEDL = 944536583754554282n;
export const NS_E_INTERLACEMODE_MISMATCH = 944537683266182059n;
export const NS_E_NONSQUAREPIXELMODE_MISMATCH = 944538782777809836n;
export const NS_E_SMPTEMODE_MISMATCH = 944539882289437613n;
export const NS_E_END_OF_TAPE = 944540981801065390n;
export const NS_E_NO_MEDIA_IN_AUDIENCE = 944542081312693167n;
export const NS_E_NO_AUDIENCES = 944543180824320944n;
export const NS_E_NO_AUDIO_COMPAT = 944544280335948721n;
export const NS_E_INVALID_VBR_COMPAT = 944545379847576498n;
export const NS_E_NO_PROFILE_NAME = 944546479359204275n;
export const NS_E_INVALID_VBR_WITH_UNCOMP = 944547578870832052n;
export const NS_E_MULTIPLE_VBR_AUDIENCES = 944548678382459829n;
export const NS_E_UNCOMP_COMP_COMBINATION = 944549777894087606n;
export const NS_E_MULTIPLE_AUDIO_CODECS = 944550877405715383n;
export const NS_E_MULTIPLE_AUDIO_FORMATS = 944551976917343160n;
export const NS_E_AUDIO_BITRATE_STEPDOWN = 944553076428970937n;
export const NS_E_INVALID_AUDIO_PEAKRATE = 944554175940598714n;
export const NS_E_INVALID_AUDIO_PEAKRATE_2 = 944555275452226491n;
export const NS_E_INVALID_AUDIO_BUFFERMAX = 944556374963854268n;
export const NS_E_MULTIPLE_VIDEO_CODECS = 944557474475482045n;
export const NS_E_MULTIPLE_VIDEO_SIZES = 944558573987109822n;
export const NS_E_INVALID_VIDEO_BITRATE = 944559673498737599n;
export const NS_E_VIDEO_BITRATE_STEPDOWN = 944560773010365376n;
export const NS_E_INVALID_VIDEO_PEAKRATE = 944561872521993153n;
export const NS_E_INVALID_VIDEO_PEAKRATE_2 = 944562972033620930n;
export const NS_E_INVALID_VIDEO_WIDTH = 944564071545248707n;
export const NS_E_INVALID_VIDEO_HEIGHT = 944565171056876484n;
export const NS_E_INVALID_VIDEO_FPS = 944566270568504261n;
export const NS_E_INVALID_VIDEO_KEYFRAME = 944567370080132038n;
export const NS_E_INVALID_VIDEO_IQUALITY = 944568469591759815n;
export const NS_E_INVALID_VIDEO_CQUALITY = 944569569103387592n;
export const NS_E_INVALID_VIDEO_BUFFER = 944570668615015369n;
export const NS_E_INVALID_VIDEO_BUFFERMAX = 944571768126643146n;
export const NS_E_INVALID_VIDEO_BUFFERMAX_2 = 944572867638270923n;
export const NS_E_INVALID_VIDEO_WIDTH_ALIGN = 944573967149898700n;
export const NS_E_INVALID_VIDEO_HEIGHT_ALIGN = 944575066661526477n;
export const NS_E_MULTIPLE_SCRIPT_BITRATES = 944576166173154254n;
export const NS_E_INVALID_SCRIPT_BITRATE = 944577265684782031n;
export const NS_E_MULTIPLE_FILE_BITRATES = 944578365196409808n;
export const NS_E_INVALID_FILE_BITRATE = 944579464708037585n;
export const NS_E_SAME_AS_INPUT_COMBINATION = 944580564219665362n;
export const NS_E_SOURCE_CANNOT_LOOP = 944581663731293139n;
export const NS_E_INVALID_FOLDDOWN_COEFFICIENTS = 944582763242920916n;
export const NS_E_DRMPROFILE_NOTFOUND = 944583862754548693n;
export const NS_E_INVALID_TIMECODE = 944584962266176470n;
export const NS_E_NO_AUDIO_TIMECOMPRESSION = 944586061777804247n;
export const NS_E_NO_TWOPASS_TIMECOMPRESSION = 944587161289432024n;
export const NS_E_TIMECODE_REQUIRES_VIDEOSTREAM = 944588260801059801n;
export const NS_E_NO_MBR_WITH_TIMECODE = 944589360312687578n;
export const NS_E_INVALID_INTERLACEMODE = 944590459824315355n;
export const NS_E_INVALID_INTERLACE_COMPAT = 944591559335943132n;
export const NS_E_INVALID_NONSQUAREPIXEL_COMPAT = 944592658847570909n;
export const NS_E_INVALID_SOURCE_WITH_DEVICE_CONTROL = 944593758359198686n;
export const NS_E_CANNOT_GENERATE_BROADCAST_INFO_FOR_QUALITYVBR = 944594857870826463n;
export const NS_E_EXCEED_MAX_DRM_PROFILE_LIMIT = 944595957382454240n;
export const NS_E_DEVICECONTROL_UNSTABLE = 944597056894082017n;
export const NS_E_INVALID_PIXEL_ASPECT_RATIO = 944598156405709794n;
export const NS_E_AUDIENCE__LANGUAGE_CONTENTTYPE_MISMATCH = 944599255917337571n;
export const NS_E_INVALID_PROFILE_CONTENTTYPE = 944600355428965348n;
export const NS_E_TRANSFORM_PLUGIN_NOT_FOUND = 944601454940593125n;
export const NS_E_TRANSFORM_PLUGIN_INVALID = 944602554452220902n;
export const NS_E_EDL_REQUIRED_FOR_DEVICE_MULTIPASS = 944603653963848679n;
export const NS_E_INVALID_VIDEO_WIDTH_FOR_INTERLACED_ENCODING = 944604753475476456n;
export const NS_E_MARKIN_UNSUPPORTED = 947744958684404713n;
export const NS_E_DRM_INVALID_APPLICATION = 947746058196035345n;
export const NS_E_DRM_LICENSE_STORE_ERROR = 947747157707663122n;
export const NS_E_DRM_SECURE_STORE_ERROR = 947748257219290899n;
export const NS_E_DRM_LICENSE_STORE_SAVE_ERROR = 947749356730918676n;
export const NS_E_DRM_SECURE_STORE_UNLOCK_ERROR = 947750456242546453n;
export const NS_E_DRM_INVALID_CONTENT = 947751555754174230n;
export const NS_E_DRM_UNABLE_TO_OPEN_LICENSE = 947752655265802007n;
export const NS_E_DRM_INVALID_LICENSE = 947753754777429784n;
export const NS_E_DRM_INVALID_MACHINE = 947755953800685337n;
export const NS_E_DRM_ENUM_LICENSE_FAILED = 947757053312313115n;
export const NS_E_DRM_INVALID_LICENSE_REQUEST = 947758152823940892n;
export const NS_E_DRM_UNABLE_TO_INITIALIZE = 947759252335568669n;
export const NS_E_DRM_UNABLE_TO_ACQUIRE_LICENSE = 947760351847196446n;
export const NS_E_DRM_INVALID_LICENSE_ACQUIRED = 947761451358824223n;
export const NS_E_DRM_NO_RIGHTS = 947762550870452000n;
export const NS_E_DRM_KEY_ERROR = 947763650382079777n;
export const NS_E_DRM_ENCRYPT_ERROR = 947764749893707554n;
export const NS_E_DRM_DECRYPT_ERROR = 947766948916963107n;
export const NS_E_DRM_LICENSE_INVALID_XML = 947768048428590885n;
export const NS_S_DRM_LICENSE_ACQUIRED = 947769144718993190n;
export const NS_S_DRM_INDIVIDUALIZED = 947770244230620967n;
export const NS_E_DRM_NEEDS_INDIVIDUALIZATION = 947771346963474216n;
export const NS_E_DRM_ALREADY_INDIVIDUALIZED = 947772446475101993n;
export const NS_E_DRM_ACTION_NOT_QUERIED = 947773545986729770n;
export const NS_E_DRM_ACQUIRING_LICENSE = 947774645498357547n;
export const NS_E_DRM_INDIVIDUALIZING = 947775745009985324n;
export const NS_E_BACKUP_RESTORE_FAILURE = 947776844521613101n;
export const NS_E_BACKUP_RESTORE_BAD_REQUEST_ID = 947777944033240878n;
export const NS_E_DRM_PARAMETERS_MISMATCHED = 947779043544868655n;
export const NS_E_DRM_UNABLE_TO_CREATE_LICENSE_OBJECT = 947780143056496432n;
export const NS_E_DRM_UNABLE_TO_CREATE_INDI_OBJECT = 947781242568124209n;
export const NS_E_DRM_UNABLE_TO_CREATE_ENCRYPT_OBJECT = 947782342079751986n;
export const NS_E_DRM_UNABLE_TO_CREATE_DECRYPT_OBJECT = 947783441591379763n;
export const NS_E_DRM_UNABLE_TO_CREATE_PROPERTIES_OBJECT = 947784541103007540n;
export const NS_E_DRM_UNABLE_TO_CREATE_BACKUP_OBJECT = 947785640614635317n;
export const NS_E_DRM_INDIVIDUALIZE_ERROR = 947786740126263094n;
export const NS_E_DRM_LICENSE_OPEN_ERROR = 947787839637890871n;
export const NS_E_DRM_LICENSE_CLOSE_ERROR = 947788939149518648n;
export const NS_E_DRM_GET_LICENSE_ERROR = 947790038661146425n;
export const NS_E_DRM_QUERY_ERROR = 947791138172774202n;
export const NS_E_DRM_REPORT_ERROR = 947792237684401979n;
export const NS_E_DRM_GET_LICENSESTRING_ERROR = 947793337196029756n;
export const NS_E_DRM_GET_CONTENTSTRING_ERROR = 947794436707657533n;
export const NS_E_DRM_MONITOR_ERROR = 947795536219285310n;
export const NS_E_DRM_UNABLE_TO_SET_PARAMETER = 947796635730913087n;
export const NS_E_DRM_INVALID_APPDATA = 947797735242540864n;
export const NS_E_DRM_INVALID_APPDATA_VERSION = 947798834754168641n;
export const NS_E_DRM_BACKUP_EXISTS = 947799934265796418n;
export const NS_E_DRM_BACKUP_CORRUPT = 947801033777424195n;
export const NS_E_DRM_BACKUPRESTORE_BUSY = 947802133289051972n;
export const NS_E_BACKUP_RESTORE_BAD_DATA = 947803232800679749n;
export const NS_S_DRM_MONITOR_CANCELLED = 947804329091082054n;
export const NS_S_DRM_ACQUIRE_CANCELLED = 947805428602709831n;
export const NS_E_DRM_LICENSE_UNUSABLE = 947806531335563080n;
export const NS_E_DRM_INVALID_PROPERTY = 947807630847190857n;
export const NS_E_DRM_SECURE_STORE_NOT_FOUND = 947808730358818634n;
export const NS_E_DRM_CACHED_CONTENT_ERROR = 947809829870446411n;
export const NS_E_DRM_INDIVIDUALIZATION_INCOMPLETE = 947810929382074188n;
export const NS_E_DRM_DRIVER_AUTH_FAILURE = 947812028893701965n;
export const NS_E_DRM_NEED_UPGRADE_MSSAP = 947813128405329742n;
export const NS_E_DRM_REOPEN_CONTENT = 947814227916957519n;
export const NS_E_DRM_DRIVER_DIGIOUT_FAILURE = 947815327428585296n;
export const NS_E_DRM_INVALID_SECURESTORE_PASSWORD = 947816426940213073n;
export const NS_E_DRM_APPCERT_REVOKED = 947817526451840850n;
export const NS_E_DRM_RESTORE_FRAUD = 947818625963468627n;
export const NS_E_DRM_HARDWARE_INCONSISTENT = 947819725475096404n;
export const NS_E_DRM_SDMI_TRIGGER = 947820824986724181n;
export const NS_E_DRM_SDMI_NOMORECOPIES = 947821924498351958n;
export const NS_E_DRM_UNABLE_TO_CREATE_HEADER_OBJECT = 947823024009979735n;
export const NS_E_DRM_UNABLE_TO_CREATE_KEYS_OBJECT = 947824123521607512n;
export const NS_E_DRM_LICENSE_NOTACQUIRED = 947825223033235289n;
export const NS_E_DRM_UNABLE_TO_CREATE_CODING_OBJECT = 947826322544863066n;
export const NS_E_DRM_UNABLE_TO_CREATE_STATE_DATA_OBJECT = 947827422056490843n;
export const NS_E_DRM_BUFFER_TOO_SMALL = 947828521568118620n;
export const NS_E_DRM_UNSUPPORTED_PROPERTY = 947829621079746397n;
export const NS_E_DRM_ERROR_BAD_NET_RESP = 947830720591374174n;
export const NS_E_DRM_STORE_NOTALLSTORED = 947831820103001951n;
export const NS_E_DRM_SECURITY_COMPONENT_SIGNATURE_INVALID = 947832919614629728n;
export const NS_E_DRM_INVALID_DATA = 947834019126257505n;
export const NS_E_DRM_POLICY_DISABLE_ONLINE = 947835118637885282n;
export const NS_E_DRM_UNABLE_TO_CREATE_AUTHENTICATION_OBJECT = 947836218149513059n;
export const NS_E_DRM_NOT_CONFIGURED = 947837317661140836n;
export const NS_E_DRM_DEVICE_ACTIVATION_CANCELED = 947838417172768613n;
export const NS_E_BACKUP_RESTORE_TOO_MANY_RESETS = 947839516684396390n;
export const NS_E_DRM_DEBUGGING_NOT_ALLOWED = 947840616196024167n;
export const NS_E_DRM_OPERATION_CANCELED = 947841715707651944n;
export const NS_E_DRM_RESTRICTIONS_NOT_RETRIEVED = 947842815219279721n;
export const NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_OBJECT = 947843914730907498n;
export const NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_BURN_OBJECT = 947845014242535275n;
export const NS_E_DRM_UNABLE_TO_CREATE_DEVICE_REGISTRATION_OBJECT = 947846113754163052n;
export const NS_E_DRM_UNABLE_TO_CREATE_METERING_OBJECT = 947847213265790829n;
export const NS_S_DRM_BURNABLE_TRACK = 947848309556193134n;
export const NS_S_DRM_BURNABLE_TRACK_WITH_PLAYLIST_RESTRICTION = 947849409067820911n;
export const NS_E_DRM_TRACK_EXCEEDED_PLAYLIST_RESTICTION = 947850511800674160n;
export const NS_E_DRM_TRACK_EXCEEDED_TRACKBURN_RESTRICTION = 947851611312301937n;
export const NS_E_DRM_UNABLE_TO_GET_DEVICE_CERT = 947852710823929714n;
export const NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK = 947853810335557491n;
export const NS_E_DRM_UNABLE_TO_SET_SECURE_CLOCK = 947854909847185268n;
export const NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK_FROM_SERVER = 947856009358813045n;
export const NS_E_DRM_POLICY_METERING_DISABLED = 947857108870440822n;
export const NS_E_DRM_TRANSFER_CHAINED_LICENSES_UNSUPPORTED = 947858208382068599n;
export const NS_E_DRM_SDK_VERSIONMISMATCH = 947859307893696376n;
export const NS_E_DRM_LIC_NEEDS_DEVICE_CLOCK_SET = 947860407405324153n;
export const NS_E_LICENSE_HEADER_MISSING_URL = 947861506916951930n;
export const NS_E_DEVICE_NOT_WMDRM_DEVICE = 947862606428579707n;
export const NS_E_DRM_INVALID_APPCERT = 947863705940207484n;
export const NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_PETITION = 947864805451835261n;
export const NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_CHALLENGE = 947865904963463038n;
export const NS_E_DRM_CHECKPOINT_FAILED = 947867004475090815n;
export const NS_E_DRM_BB_UNABLE_TO_INITIALIZE = 947868103986718592n;
export const NS_E_DRM_UNABLE_TO_LOAD_HARDWARE_ID = 947869203498346369n;
export const NS_E_DRM_UNABLE_TO_OPEN_DATA_STORE = 947870303009974146n;
export const NS_E_DRM_DATASTORE_CORRUPT = 947871402521601923n;
export const NS_E_DRM_UNABLE_TO_CREATE_INMEMORYSTORE_OBJECT = 947872502033229700n;
export const NS_E_DRM_STUBLIB_REQUIRED = 947873601544857477n;
export const NS_E_DRM_UNABLE_TO_CREATE_CERTIFICATE_OBJECT = 947874701056485254n;
export const NS_E_DRM_MIGRATION_TARGET_NOT_ONLINE = 947875800568113031n;
export const NS_E_DRM_INVALID_MIGRATION_IMAGE = 947876900079740808n;
export const NS_E_DRM_MIGRATION_TARGET_STATES_CORRUPTED = 947877999591368585n;
export const NS_E_DRM_MIGRATION_IMPORTER_NOT_AVAILABLE = 947879099102996362n;
export const NS_DRM_E_MIGRATION_UPGRADE_WITH_DIFF_SID = 947880198614624139n;
export const NS_DRM_E_MIGRATION_SOURCE_MACHINE_IN_USE = 947881298126251916n;
export const NS_DRM_E_MIGRATION_TARGET_MACHINE_LESS_THAN_LH = 947882397637879693n;
export const NS_DRM_E_MIGRATION_IMAGE_ALREADY_EXISTS = 947883497149507470n;
export const NS_E_DRM_HARDWAREID_MISMATCH = 947884596661135247n;
export const NS_E_INVALID_DRMV2CLT_STUBLIB = 947885696172763024n;
export const NS_E_DRM_MIGRATION_INVALID_LEGACYV2_DATA = 947886795684390801n;
export const NS_E_DRM_MIGRATION_LICENSE_ALREADY_EXISTS = 947887895196018578n;
export const NS_E_DRM_MIGRATION_INVALID_LEGACYV2_SST_PASSWORD = 947888994707646355n;
export const NS_E_DRM_MIGRATION_NOT_SUPPORTED = 947890094219274132n;
export const NS_E_DRM_UNABLE_TO_CREATE_MIGRATION_IMPORTER_OBJECT = 947891193730901909n;
export const NS_E_DRM_CHECKPOINT_MISMATCH = 947892293242529686n;
export const NS_E_DRM_CHECKPOINT_CORRUPT = 947893392754157463n;
export const NS_E_REG_FLUSH_FAILURE = 947894492265785240n;
export const NS_E_HDS_KEY_MISMATCH = 947895591777413017n;
export const NS_E_DRM_MIGRATION_OPERATION_CANCELLED = 947896691289040794n;
export const NS_E_DRM_MIGRATION_OBJECT_IN_USE = 947897790800668571n;
export const NS_E_DRM_MALFORMED_CONTENT_HEADER = 947963761498335132n;
export const NS_E_DRM_LICENSE_EXPIRED = 947964861009962968n;
export const NS_E_DRM_LICENSE_NOTENABLED = 947965960521590745n;
export const NS_E_DRM_LICENSE_APPSECLOW = 947967060033218522n;
export const NS_E_DRM_STORE_NEEDINDI = 947968159544846299n;
export const NS_E_DRM_STORE_NOTALLOWED = 947969259056474076n;
export const NS_E_DRM_LICENSE_APP_NOTALLOWED = 947970358568101853n;
export const NS_S_DRM_NEEDS_INDIVIDUALIZATION = 947971454858504158n;
export const NS_E_DRM_LICENSE_CERT_EXPIRED = 947972557591357407n;
export const NS_E_DRM_LICENSE_SECLOW = 947973657102985184n;
export const NS_E_DRM_LICENSE_CONTENT_REVOKED = 947974756614612961n;
export const NS_E_DRM_DEVICE_NOT_REGISTERED = 948018737079724002n;
export const NS_E_DRM_LICENSE_NOSAP = 948019836591351818n;
export const NS_E_DRM_LICENSE_NOSVP = 948020936102979595n;
export const NS_E_DRM_LICENSE_NOWDM = 948022035614607372n;
export const NS_E_DRM_LICENSE_NOTRUSTEDCODEC = 948023135126235149n;
export const NS_E_DRM_SOURCEID_NOT_SUPPORTED = 948074812172740622n;
export const NS_E_DRM_NEEDS_UPGRADE_TEMPFILE = 948075911684368445n;
export const NS_E_DRM_NEED_UPGRADE_PD = 948077011195996222n;
export const NS_E_DRM_SIGNATURE_FAILURE = 948078110707623999n;
export const NS_E_DRM_LICENSE_SERVER_INFO_MISSING = 948079210219251776n;
export const NS_E_DRM_BUSY = 948080309730879553n;
export const NS_E_DRM_PD_TOO_MANY_DEVICES = 948081409242507330n;
export const NS_E_DRM_INDIV_FRAUD = 948082508754135107n;
export const NS_E_DRM_INDIV_NO_CABS = 948083608265762884n;
export const NS_E_DRM_INDIV_SERVICE_UNAVAILABLE = 948084707777390661n;
export const NS_E_DRM_RESTORE_SERVICE_UNAVAILABLE = 948085807289018438n;
export const NS_E_DRM_CLIENT_CODE_EXPIRED = 948086906800646215n;
export const NS_E_DRM_NO_UPLINK_LICENSE = 948088006312273992n;
export const NS_E_DRM_INVALID_KID = 948089105823901769n;
export const NS_E_DRM_LICENSE_INITIALIZATION_ERROR = 948091304847157322n;
export const NS_E_DRM_CHAIN_TOO_LONG = 948092404358785100n;
export const NS_E_DRM_UNSUPPORTED_ALGORITHM = 948093503870412877n;
export const NS_E_DRM_LICENSE_DELETION_ERROR = 948183663823890510n;
export const NS_E_DRM_INVALID_CERTIFICATE = 948184763335518368n;
export const NS_E_DRM_CERTIFICATE_REVOKED = 948185862847146145n;
export const NS_E_DRM_LICENSE_UNAVAILABLE = 948186962358773922n;
export const NS_E_DRM_DEVICE_LIMIT_REACHED = 948188061870401699n;
export const NS_E_DRM_UNABLE_TO_VERIFY_PROXIMITY = 948189161382029476n;
export const NS_E_DRM_MUST_REGISTER = 948190260893657253n;
export const NS_E_DRM_MUST_APPROVE = 948191360405285030n;
export const NS_E_DRM_MUST_REVALIDATE = 948192459916912807n;
export const NS_E_DRM_INVALID_PROXIMITY_RESPONSE = 948193559428540584n;
export const NS_E_DRM_INVALID_SESSION = 948194658940168361n;
export const NS_E_DRM_DEVICE_NOT_OPEN = 948195758451796138n;
export const NS_E_DRM_DEVICE_ALREADY_REGISTERED = 948196857963423915n;
export const NS_E_DRM_UNSUPPORTED_PROTOCOL_VERSION = 948197957475051692n;
export const NS_E_DRM_UNSUPPORTED_ACTION = 948199056986679469n;
export const NS_E_DRM_CERTIFICATE_SECURITY_LEVEL_INADEQUATE = 948200156498307246n;
export const NS_E_DRM_UNABLE_TO_OPEN_PORT = 948201256009935023n;
export const NS_E_DRM_BAD_REQUEST = 948202355521562800n;
export const NS_E_DRM_INVALID_CRL = 948203455033190577n;
export const NS_E_DRM_ATTRIBUTE_TOO_LONG = 948204554544818354n;
export const NS_E_DRM_EXPIRED_LICENSEBLOB = 948205654056446131n;
export const NS_E_DRM_INVALID_LICENSEBLOB = 948206753568073908n;
export const NS_E_DRM_INCLUSION_LIST_REQUIRED = 948207853079701685n;
export const NS_E_DRM_DRMV2CLT_REVOKED = 948208952591329462n;
export const NS_E_DRM_RIV_TOO_SMALL = 948293614986668215n;
export const NS_E_OUTPUT_PROTECTION_LEVEL_UNSUPPORTED = 948294714498296068n;
export const NS_E_COMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = 948295814009923845n;
export const NS_E_UNCOMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = 948296913521551622n;
export const NS_E_ANALOG_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = 948298013033179399n;
export const NS_E_COMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED = 948299112544807176n;
export const NS_E_UNCOMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED = 948300212056434953n;
export const NS_E_OUTPUT_PROTECTION_SCHEME_UNSUPPORTED = 948843370800556298n;
export const NS_S_REBOOT_RECOMMENDED = 948844467090959096n;
export const NS_S_REBOOT_REQUIRED = 948845566602586873n;
export const NS_E_REBOOT_RECOMMENDED = 948846669335440122n;
export const NS_E_REBOOT_REQUIRED = 948847768847067899n;
export const NS_E_SETUP_INCOMPLETE = 948848868358695676n;
export const NS_E_SETUP_DRM_MIGRATION_FAILED = 948849967870323453n;
export const NS_E_SETUP_IGNORABLE_FAILURE = 948851067381951230n;
export const NS_E_SETUP_DRM_MIGRATION_FAILED_AND_IGNORABLE_FAILURE = 948852166893579007n;
export const NS_E_SETUP_BLOCKED = 949942882428332800n;
export const NS_E_UNKNOWN_PROTOCOL = 949943981939961568n;
export const NS_E_REDIRECT_TO_PROXY = 949945081451589345n;
export const NS_E_INTERNAL_SERVER_ERROR = 949946180963217122n;
export const NS_E_BAD_REQUEST = 949947280474844899n;
export const NS_E_ERROR_FROM_PROXY = 949948379986472676n;
export const NS_E_PROXY_TIMEOUT = 949949479498100453n;
export const NS_E_SERVER_UNAVAILABLE = 949950579009728230n;
export const NS_E_REFUSED_BY_SERVER = 949951678521356007n;
export const NS_E_INCOMPATIBLE_SERVER = 949952778032983784n;
export const NS_E_MULTICAST_DISABLED = 949953877544611561n;
export const NS_E_INVALID_REDIRECT = 949954977056239338n;
export const NS_E_ALL_PROTOCOLS_DISABLED = 949956076567867115n;
export const NS_E_MSBD_NO_LONGER_SUPPORTED = 949957176079494892n;
export const NS_E_PROXY_NOT_FOUND = 949958275591122669n;
export const NS_E_CANNOT_CONNECT_TO_PROXY = 949959375102750446n;
export const NS_E_SERVER_DNS_TIMEOUT = 949960474614378223n;
export const NS_E_PROXY_DNS_TIMEOUT = 949961574126006000n;
export const NS_E_CLOSED_ON_SUSPEND = 949962673637633777n;
export const NS_E_CANNOT_READ_PLAYLIST_FROM_MEDIASERVER = 949963773149261554n;
export const NS_E_SESSION_NOT_FOUND = 949964872660889331n;
export const NS_E_REQUIRE_STREAMING_CLIENT = 949965972172517108n;
export const NS_E_PLAYLIST_ENTRY_HAS_CHANGED = 949967071684144885n;
export const NS_E_PROXY_ACCESSDENIED = 949968171195772662n;
export const NS_E_PROXY_SOURCE_ACCESSDENIED = 949969270707400439n;
export const NS_E_NETWORK_SINK_WRITE = 949970370219028216n;
export const NS_E_FIREWALL = 949971469730655993n;
export const NS_E_MMS_NOT_SUPPORTED = 949972569242283770n;
export const NS_E_SERVER_ACCESSDENIED = 949973668753911547n;
export const NS_E_RESOURCE_GONE = 949974768265539324n;
export const NS_E_NO_EXISTING_PACKETIZER = 949975867777167101n;
export const NS_E_BAD_SYNTAX_IN_SERVER_RESPONSE = 949976967288794878n;
export const NS_I_RECONNECTED = 949978064652939007n;
export const NS_E_RESET_SOCKET_CONNECTION = 949979166312050432n;
export const NS_I_NOLOG_STOP = 949980263676194561n;
export const NS_E_TOO_MANY_HOPS = 949981365335305986n;
export const NS_I_EXISTING_PACKETIZER = 949982462699450115n;
export const NS_I_MANUAL_PROXY = 949983562211077892n;
export const NS_E_TOO_MUCH_DATA_FROM_SERVER = 949984663870189317n;
export const NS_E_CONNECT_TIMEOUT = 949985763381817094n;
export const NS_E_PROXY_CONNECT_TIMEOUT = 949986862893444871n;
export const NS_E_SESSION_INVALID = 949987962405072648n;
export const NS_S_EOSRECEDING = 949989058695474953n;
export const NS_E_PACKETSINK_UNKNOWN_FEC_STREAM = 949990161428328202n;
export const NS_E_PUSH_CANNOTCONNECT = 949991260939955979n;
export const NS_E_INCOMPATIBLE_PUSH_SERVER = 949992360451583756n;
export const NS_S_CHANGENOTICE = 951042390834884365n;
export const NS_E_END_OF_PLAYLIST = 951043493567738568n;
export const NS_E_USE_FILE_SOURCE = 951044593079366345n;
export const NS_E_PROPERTY_NOT_FOUND = 951046792102621898n;
export const NS_E_PROPERTY_READ_ONLY = 951047891614249676n;
export const NS_E_TABLE_KEY_NOT_FOUND = 951050090637505229n;
export const NS_E_INVALID_QUERY_OPERATOR = 951051190149133007n;
export const NS_E_INVALID_QUERY_PROPERTY = 951053389172388560n;
export const NS_E_PROPERTY_NOT_SUPPORTED = 951055588195644114n;
export const NS_E_SCHEMA_CLASSIFY_FAILURE = 951056687707271892n;
export const NS_E_METADATA_FORMAT_NOT_SUPPORTED = 951057787218899669n;
export const NS_E_METADATA_NO_EDITING_CAPABILITY = 951058886730527446n;
export const NS_E_METADATA_CANNOT_SET_LOCALE = 951059986242155223n;
export const NS_E_METADATA_LANGUAGE_NOT_SUPORTED = 951061085753783000n;
export const NS_E_METADATA_NO_RFC1766_NAME_FOR_LOCALE = 951062185265410777n;
export const NS_E_METADATA_NOT_AVAILABLE = 951063284777038554n;
export const NS_E_METADATA_CACHE_DATA_NOT_AVAILABLE = 951064384288666331n;
export const NS_E_METADATA_INVALID_DOCUMENT_TYPE = 951065483800294108n;
export const NS_E_METADATA_IDENTIFIER_NOT_AVAILABLE = 951066583311921885n;
export const NS_E_METADATA_CANNOT_RETRIEVE_FROM_OFFLINE_CACHE = 6989679190036263646n;
export const VFW_HIDE_SETTINGS_PAGE = 1;
export const VFW_HIDE_VIDEOSRC_PAGE = 2;
export const VFW_HIDE_CAMERACONTROL_PAGE = 4;
export const VFW_OEM_ADD_PAGE = 2147483648;
export const VFW_USE_DEVICE_HANDLE = 1;
export const VFW_USE_STREAM_HANDLE = 2;
export const VFW_QUERY_DEV_CHANGED = 256;
export const TARGET_DEVICE_FRIENDLY_NAME = "TargetDeviceFriendlyName";
export const TARGET_DEVICE_OPEN_EXCLUSIVELY = "TargetDeviceOpenExclusively";
export const MCIERR_INVALID_DEVICE_ID = 257;
export const MCIERR_UNRECOGNIZED_KEYWORD = 259;
export const MCIERR_UNRECOGNIZED_COMMAND = 261;
export const MCIERR_HARDWARE = 262;
export const MCIERR_INVALID_DEVICE_NAME = 263;
export const MCIERR_OUT_OF_MEMORY = 264;
export const MCIERR_DEVICE_OPEN = 265;
export const MCIERR_CANNOT_LOAD_DRIVER = 266;
export const MCIERR_MISSING_COMMAND_STRING = 267;
export const MCIERR_PARAM_OVERFLOW = 268;
export const MCIERR_MISSING_STRING_ARGUMENT = 269;
export const MCIERR_BAD_INTEGER = 270;
export const MCIERR_PARSER_INTERNAL = 271;
export const MCIERR_DRIVER_INTERNAL = 272;
export const MCIERR_MISSING_PARAMETER = 273;
export const MCIERR_UNSUPPORTED_FUNCTION = 274;
export const MCIERR_FILE_NOT_FOUND = 275;
export const MCIERR_DEVICE_NOT_READY = 276;
export const MCIERR_INTERNAL = 277;
export const MCIERR_DRIVER = 278;
export const MCIERR_CANNOT_USE_ALL = 279;
export const MCIERR_MULTIPLE = 280;
export const MCIERR_EXTENSION_NOT_FOUND = 281;
export const MCIERR_OUTOFRANGE = 282;
export const MCIERR_FLAGS_NOT_COMPATIBLE = 284;
export const MCIERR_FILE_NOT_SAVED = 286;
export const MCIERR_DEVICE_TYPE_REQUIRED = 287;
export const MCIERR_DEVICE_LOCKED = 288;
export const MCIERR_DUPLICATE_ALIAS = 289;
export const MCIERR_BAD_CONSTANT = 290;
export const MCIERR_MUST_USE_SHAREABLE = 291;
export const MCIERR_MISSING_DEVICE_NAME = 292;
export const MCIERR_BAD_TIME_FORMAT = 293;
export const MCIERR_NO_CLOSING_QUOTE = 294;
export const MCIERR_DUPLICATE_FLAGS = 295;
export const MCIERR_INVALID_FILE = 296;
export const MCIERR_NULL_PARAMETER_BLOCK = 297;
export const MCIERR_UNNAMED_RESOURCE = 298;
export const MCIERR_NEW_REQUIRES_ALIAS = 299;
export const MCIERR_NOTIFY_ON_AUTO_OPEN = 300;
export const MCIERR_NO_ELEMENT_ALLOWED = 301;
export const MCIERR_NONAPPLICABLE_FUNCTION = 302;
export const MCIERR_ILLEGAL_FOR_AUTO_OPEN = 303;
export const MCIERR_FILENAME_REQUIRED = 304;
export const MCIERR_EXTRA_CHARACTERS = 305;
export const MCIERR_DEVICE_NOT_INSTALLED = 306;
export const MCIERR_GET_CD = 307;
export const MCIERR_SET_CD = 308;
export const MCIERR_SET_DRIVE = 309;
export const MCIERR_DEVICE_LENGTH = 310;
export const MCIERR_DEVICE_ORD_LENGTH = 311;
export const MCIERR_NO_INTEGER = 312;
export const MCIERR_WAVE_OUTPUTSINUSE = 320;
export const MCIERR_WAVE_SETOUTPUTINUSE = 321;
export const MCIERR_WAVE_INPUTSINUSE = 322;
export const MCIERR_WAVE_SETINPUTINUSE = 323;
export const MCIERR_WAVE_OUTPUTUNSPECIFIED = 324;
export const MCIERR_WAVE_INPUTUNSPECIFIED = 325;
export const MCIERR_WAVE_OUTPUTSUNSUITABLE = 326;
export const MCIERR_WAVE_SETOUTPUTUNSUITABLE = 327;
export const MCIERR_WAVE_INPUTSUNSUITABLE = 328;
export const MCIERR_WAVE_SETINPUTUNSUITABLE = 329;
export const MCIERR_SEQ_DIV_INCOMPATIBLE = 336;
export const MCIERR_SEQ_PORT_INUSE = 337;
export const MCIERR_SEQ_PORT_NONEXISTENT = 338;
export const MCIERR_SEQ_PORT_MAPNODEVICE = 339;
export const MCIERR_SEQ_PORT_MISCERROR = 340;
export const MCIERR_SEQ_TIMER = 341;
export const MCIERR_SEQ_PORTUNSPECIFIED = 342;
export const MCIERR_SEQ_NOMIDIPRESENT = 343;
export const MCIERR_NO_WINDOW = 346;
export const MCIERR_CREATEWINDOW = 347;
export const MCIERR_FILE_READ = 348;
export const MCIERR_FILE_WRITE = 349;
export const MCIERR_NO_IDENTITY = 350;
export const MCIERR_CUSTOM_DRIVER_BASE = 512;
export const MCI_FIRST = 2048;
export const MCI_ESCAPE = 2053;
export const MCI_INFO = 2058;
export const MCI_GETDEVCAPS = 2059;
export const MCI_SPIN = 2060;
export const MCI_SET = 2061;
export const MCI_SYSINFO = 2064;
export const MCI_BREAK = 2065;
export const MCI_STATUS = 2068;
export const MCI_CUE = 2096;
export const MCI_REALIZE = 2112;
export const MCI_WINDOW = 2113;
export const MCI_PUT = 2114;
export const MCI_WHERE = 2115;
export const MCI_FREEZE = 2116;
export const MCI_UNFREEZE = 2117;
export const MCI_LOAD = 2128;
export const MCI_UPDATE = 2132;
export const MCI_USER_MESSAGES = 3072;
export const MCI_LAST = 4095;
export const MCI_DEVTYPE_VCR = 513;
export const MCI_DEVTYPE_VIDEODISC = 514;
export const MCI_DEVTYPE_OVERLAY = 515;
export const MCI_DEVTYPE_CD_AUDIO = 516;
export const MCI_DEVTYPE_DAT = 517;
export const MCI_DEVTYPE_SCANNER = 518;
export const MCI_DEVTYPE_ANIMATION = 519;
export const MCI_DEVTYPE_DIGITAL_VIDEO = 520;
export const MCI_DEVTYPE_OTHER = 521;
export const MCI_DEVTYPE_WAVEFORM_AUDIO = 522;
export const MCI_DEVTYPE_SEQUENCER = 523;
export const MCI_DEVTYPE_FIRST = 513;
export const MCI_DEVTYPE_LAST = 523;
export const MCI_DEVTYPE_FIRST_USER = 4096;
export const MCI_FORMAT_MILLISECONDS = 0;
export const MCI_FORMAT_HMS = 1;
export const MCI_FORMAT_MSF = 2;
export const MCI_FORMAT_FRAMES = 3;
export const MCI_FORMAT_SMPTE_24 = 4;
export const MCI_FORMAT_SMPTE_25 = 5;
export const MCI_FORMAT_SMPTE_30 = 6;
export const MCI_FORMAT_SMPTE_30DROP = 7;
export const MCI_FORMAT_BYTES = 8;
export const MCI_FORMAT_SAMPLES = 9;
export const MCI_FORMAT_TMSF = 10;
export const MCI_NOTIFY_SUCCESSFUL = 1;
export const MCI_NOTIFY_SUPERSEDED = 2;
export const MCI_NOTIFY_ABORTED = 4;
export const MCI_NOTIFY_FAILURE = 8;
export const MCI_NOTIFY = 1;
export const MCI_WAIT = 2;
export const MCI_FROM = 4;
export const MCI_TO = 8;
export const MCI_TRACK = 16;
export const MCI_OPEN_SHAREABLE = 256;
export const MCI_OPEN_ELEMENT = 512;
export const MCI_OPEN_ALIAS = 1024;
export const MCI_OPEN_ELEMENT_ID = 2048;
export const MCI_OPEN_TYPE_ID = 4096;
export const MCI_OPEN_TYPE = 8192;
export const MCI_SEEK_TO_START = 256;
export const MCI_SEEK_TO_END = 512;
export const MCI_STATUS_ITEM = 256;
export const MCI_STATUS_START = 512;
export const MCI_STATUS_LENGTH = 1;
export const MCI_STATUS_POSITION = 2;
export const MCI_STATUS_NUMBER_OF_TRACKS = 3;
export const MCI_STATUS_MODE = 4;
export const MCI_STATUS_MEDIA_PRESENT = 5;
export const MCI_STATUS_TIME_FORMAT = 6;
export const MCI_STATUS_READY = 7;
export const MCI_STATUS_CURRENT_TRACK = 8;
export const MCI_INFO_PRODUCT = 256;
export const MCI_INFO_FILE = 512;
export const MCI_INFO_MEDIA_UPC = 1024;
export const MCI_INFO_MEDIA_IDENTITY = 2048;
export const MCI_INFO_NAME = 4096;
export const MCI_INFO_COPYRIGHT = 8192;
export const MCI_GETDEVCAPS_ITEM = 256;
export const MCI_GETDEVCAPS_CAN_RECORD = 1;
export const MCI_GETDEVCAPS_HAS_AUDIO = 2;
export const MCI_GETDEVCAPS_HAS_VIDEO = 3;
export const MCI_GETDEVCAPS_DEVICE_TYPE = 4;
export const MCI_GETDEVCAPS_USES_FILES = 5;
export const MCI_GETDEVCAPS_COMPOUND_DEVICE = 6;
export const MCI_GETDEVCAPS_CAN_EJECT = 7;
export const MCI_GETDEVCAPS_CAN_PLAY = 8;
export const MCI_GETDEVCAPS_CAN_SAVE = 9;
export const MCI_SYSINFO_QUANTITY = 256;
export const MCI_SYSINFO_OPEN = 512;
export const MCI_SYSINFO_NAME = 1024;
export const MCI_SYSINFO_INSTALLNAME = 2048;
export const MCI_SET_DOOR_OPEN = 256;
export const MCI_SET_DOOR_CLOSED = 512;
export const MCI_SET_TIME_FORMAT = 1024;
export const MCI_SET_AUDIO = 2048;
export const MCI_SET_VIDEO = 4096;
export const MCI_SET_ON = 8192;
export const MCI_SET_OFF = 16384;
export const MCI_SET_AUDIO_ALL = 0;
export const MCI_SET_AUDIO_LEFT = 1;
export const MCI_SET_AUDIO_RIGHT = 2;
export const MCI_BREAK_KEY = 256;
export const MCI_BREAK_HWND = 512;
export const MCI_BREAK_OFF = 1024;
export const MCI_RECORD_INSERT = 256;
export const MCI_RECORD_OVERWRITE = 512;
export const MCI_SAVE_FILE = 256;
export const MCI_LOAD_FILE = 256;
export const MCI_VD_MODE_PARK = 1025;
export const MCI_VD_MEDIA_CLV = 1026;
export const MCI_VD_MEDIA_CAV = 1027;
export const MCI_VD_MEDIA_OTHER = 1028;
export const MCI_VD_FORMAT_TRACK = 16385;
export const MCI_VD_PLAY_REVERSE = 65536;
export const MCI_VD_PLAY_FAST = 131072;
export const MCI_VD_PLAY_SPEED = 262144;
export const MCI_VD_PLAY_SCAN = 524288;
export const MCI_VD_PLAY_SLOW = 1048576;
export const MCI_VD_SEEK_REVERSE = 65536;
export const MCI_VD_STATUS_SPEED = 16386;
export const MCI_VD_STATUS_FORWARD = 16387;
export const MCI_VD_STATUS_MEDIA_TYPE = 16388;
export const MCI_VD_STATUS_SIDE = 16389;
export const MCI_VD_STATUS_DISC_SIZE = 16390;
export const MCI_VD_GETDEVCAPS_CLV = 65536;
export const MCI_VD_GETDEVCAPS_CAV = 131072;
export const MCI_VD_SPIN_UP = 65536;
export const MCI_VD_SPIN_DOWN = 131072;
export const MCI_VD_GETDEVCAPS_CAN_REVERSE = 16386;
export const MCI_VD_GETDEVCAPS_FAST_RATE = 16387;
export const MCI_VD_GETDEVCAPS_SLOW_RATE = 16388;
export const MCI_VD_GETDEVCAPS_NORMAL_RATE = 16389;
export const MCI_VD_STEP_FRAMES = 65536;
export const MCI_VD_STEP_REVERSE = 131072;
export const MCI_VD_ESCAPE_STRING = 256;
export const MCI_CDA_STATUS_TYPE_TRACK = 16385;
export const MCI_CDA_TRACK_AUDIO = 1088;
export const MCI_CDA_TRACK_OTHER = 1089;
export const MCI_WAVE_PCM = 1152;
export const MCI_WAVE_MAPPER = 1153;
export const MCI_WAVE_OPEN_BUFFER = 65536;
export const MCI_WAVE_SET_FORMATTAG = 65536;
export const MCI_WAVE_SET_CHANNELS = 131072;
export const MCI_WAVE_SET_SAMPLESPERSEC = 262144;
export const MCI_WAVE_SET_AVGBYTESPERSEC = 524288;
export const MCI_WAVE_SET_BLOCKALIGN = 1048576;
export const MCI_WAVE_SET_BITSPERSAMPLE = 2097152;
export const MCI_WAVE_INPUT = 4194304;
export const MCI_WAVE_OUTPUT = 8388608;
export const MCI_WAVE_STATUS_FORMATTAG = 16385;
export const MCI_WAVE_STATUS_CHANNELS = 16386;
export const MCI_WAVE_STATUS_SAMPLESPERSEC = 16387;
export const MCI_WAVE_STATUS_AVGBYTESPERSEC = 16388;
export const MCI_WAVE_STATUS_BLOCKALIGN = 16389;
export const MCI_WAVE_STATUS_BITSPERSAMPLE = 16390;
export const MCI_WAVE_STATUS_LEVEL = 16391;
export const MCI_WAVE_SET_ANYINPUT = 67108864;
export const MCI_WAVE_SET_ANYOUTPUT = 134217728;
export const MCI_WAVE_GETDEVCAPS_INPUTS = 16385;
export const MCI_WAVE_GETDEVCAPS_OUTPUTS = 16386;
export const MCI_SEQ_FORMAT_SONGPTR = 16385;
export const MCI_SEQ_FILE = 16386;
export const MCI_SEQ_MIDI = 16387;
export const MCI_SEQ_SMPTE = 16388;
export const MCI_SEQ_NONE = 65533;
export const MCI_SEQ_MAPPER = 65535;
export const MCI_SEQ_STATUS_TEMPO = 16386;
export const MCI_SEQ_STATUS_PORT = 16387;
export const MCI_SEQ_STATUS_SLAVE = 16391;
export const MCI_SEQ_STATUS_MASTER = 16392;
export const MCI_SEQ_STATUS_OFFSET = 16393;
export const MCI_SEQ_STATUS_DIVTYPE = 16394;
export const MCI_SEQ_STATUS_NAME = 16395;
export const MCI_SEQ_STATUS_COPYRIGHT = 16396;
export const MCI_SEQ_SET_TEMPO = 65536;
export const MCI_SEQ_SET_PORT = 131072;
export const MCI_SEQ_SET_SLAVE = 262144;
export const MCI_SEQ_SET_MASTER = 524288;
export const MCI_SEQ_SET_OFFSET = 16777216;
export const MCI_ANIM_OPEN_WS = 65536;
export const MCI_ANIM_OPEN_PARENT = 131072;
export const MCI_ANIM_OPEN_NOSTATIC = 262144;
export const MCI_ANIM_PLAY_SPEED = 65536;
export const MCI_ANIM_PLAY_REVERSE = 131072;
export const MCI_ANIM_PLAY_FAST = 262144;
export const MCI_ANIM_PLAY_SLOW = 524288;
export const MCI_ANIM_PLAY_SCAN = 1048576;
export const MCI_ANIM_STEP_REVERSE = 65536;
export const MCI_ANIM_STEP_FRAMES = 131072;
export const MCI_ANIM_STATUS_SPEED = 16385;
export const MCI_ANIM_STATUS_FORWARD = 16386;
export const MCI_ANIM_STATUS_HWND = 16387;
export const MCI_ANIM_STATUS_HPAL = 16388;
export const MCI_ANIM_STATUS_STRETCH = 16389;
export const MCI_ANIM_INFO_TEXT = 65536;
export const MCI_ANIM_GETDEVCAPS_CAN_REVERSE = 16385;
export const MCI_ANIM_GETDEVCAPS_FAST_RATE = 16386;
export const MCI_ANIM_GETDEVCAPS_SLOW_RATE = 16387;
export const MCI_ANIM_GETDEVCAPS_NORMAL_RATE = 16388;
export const MCI_ANIM_GETDEVCAPS_PALETTES = 16390;
export const MCI_ANIM_GETDEVCAPS_CAN_STRETCH = 16391;
export const MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = 16392;
export const MCI_ANIM_REALIZE_NORM = 65536;
export const MCI_ANIM_REALIZE_BKGD = 131072;
export const MCI_ANIM_WINDOW_HWND = 65536;
export const MCI_ANIM_WINDOW_STATE = 262144;
export const MCI_ANIM_WINDOW_TEXT = 524288;
export const MCI_ANIM_WINDOW_ENABLE_STRETCH = 1048576;
export const MCI_ANIM_WINDOW_DISABLE_STRETCH = 2097152;
export const MCI_ANIM_WINDOW_DEFAULT = 0;
export const MCI_ANIM_RECT = 65536;
export const MCI_ANIM_PUT_SOURCE = 131072;
export const MCI_ANIM_PUT_DESTINATION = 262144;
export const MCI_ANIM_WHERE_SOURCE = 131072;
export const MCI_ANIM_WHERE_DESTINATION = 262144;
export const MCI_ANIM_UPDATE_HDC = 131072;
export const MCI_OVLY_OPEN_WS = 65536;
export const MCI_OVLY_OPEN_PARENT = 131072;
export const MCI_OVLY_STATUS_HWND = 16385;
export const MCI_OVLY_STATUS_STRETCH = 16386;
export const MCI_OVLY_INFO_TEXT = 65536;
export const MCI_OVLY_GETDEVCAPS_CAN_STRETCH = 16385;
export const MCI_OVLY_GETDEVCAPS_CAN_FREEZE = 16386;
export const MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = 16387;
export const MCI_OVLY_WINDOW_HWND = 65536;
export const MCI_OVLY_WINDOW_STATE = 262144;
export const MCI_OVLY_WINDOW_TEXT = 524288;
export const MCI_OVLY_WINDOW_ENABLE_STRETCH = 1048576;
export const MCI_OVLY_WINDOW_DISABLE_STRETCH = 2097152;
export const MCI_OVLY_WINDOW_DEFAULT = 0;
export const MCI_OVLY_RECT = 65536;
export const MCI_OVLY_PUT_SOURCE = 131072;
export const MCI_OVLY_PUT_DESTINATION = 262144;
export const MCI_OVLY_PUT_FRAME = 524288;
export const MCI_OVLY_PUT_VIDEO = 1048576;
export const MCI_OVLY_WHERE_SOURCE = 131072;
export const MCI_OVLY_WHERE_DESTINATION = 262144;
export const MCI_OVLY_WHERE_FRAME = 524288;
export const MCI_OVLY_WHERE_VIDEO = 1048576;
export const APOERR_ALREADY_INITIALIZED = 9007201473234010113n;
export const APOERR_NOT_INITIALIZED = 9007202572745637890n;
export const APOERR_FORMAT_NOT_SUPPORTED = 9007203672257265667n;
export const APOERR_INVALID_APO_CLSID = 9007204771768893444n;
export const APOERR_BUFFERS_OVERLAP = 9007205871280521221n;
export const APOERR_ALREADY_UNLOCKED = 9007206970792148998n;
export const APOERR_NUM_CONNECTIONS_INVALID = 9007208070303776775n;
export const APOERR_INVALID_OUTPUT_MAXFRAMECOUNT = 9007209169815404552n;
export const APOERR_INVALID_CONNECTION_FORMAT = 9007210269327032329n;
export const APOERR_APO_LOCKED = 9007211368838660106n;
export const APOERR_INVALID_COEFFCOUNT = 9007212468350287883n;
export const APOERR_INVALID_COEFFICIENT = 9007213567861915660n;
export const APOERR_INVALID_CURVE_PARAM = 9007214667373543437n;
export const APOERR_INVALID_INPUTID = 36649631758;
export const AUDIO_MIN_FRAMERATE = 10;
export const AUDIO_MAX_FRAMERATE = 384000;
export const AUDIO_MIN_CHANNELS = 1;
export const AUDIO_MAX_CHANNELS = 4096;
export const AUDIOMEDIATYPE_EQUAL_FORMAT_TYPES = 2;
export const AUDIOMEDIATYPE_EQUAL_FORMAT_DATA = 4;
export const AUDIOMEDIATYPE_EQUAL_FORMAT_USER_DATA = 8;
export const DMUS_MAX_DESCRIPTION = 128;
export const DMUS_MAX_DRIVER = 128;
export const DMUS_EFFECT_NONE = 0;
export const DMUS_EFFECT_REVERB = 1;
export const DMUS_EFFECT_CHORUS = 2;
export const DMUS_EFFECT_DELAY = 4;
export const DMUS_PC_INPUTCLASS = 0;
export const DMUS_PC_OUTPUTCLASS = 1;
export const DMUS_PC_DLS = 1;
export const DMUS_PC_EXTERNAL = 2;
export const DMUS_PC_SOFTWARESYNTH = 4;
export const DMUS_PC_MEMORYSIZEFIXED = 8;
export const DMUS_PC_GMINHARDWARE = 16;
export const DMUS_PC_GSINHARDWARE = 32;
export const DMUS_PC_XGINHARDWARE = 64;
export const DMUS_PC_DIRECTSOUND = 128;
export const DMUS_PC_SHAREABLE = 256;
export const DMUS_PC_DLS2 = 512;
export const DMUS_PC_AUDIOPATH = 1024;
export const DMUS_PC_WAVE = 2048;
export const DMUS_PC_SYSTEMMEMORY = 2147483647;
export const DMUS_PORT_WINMM_DRIVER = 0;
export const DMUS_PORT_USER_MODE_SYNTH = 1;
export const DMUS_PORT_KERNEL_MODE = 2;
export const DMUS_PORTPARAMS_VOICES = 1;
export const DMUS_PORTPARAMS_CHANNELGROUPS = 2;
export const DMUS_PORTPARAMS_AUDIOCHANNELS = 4;
export const DMUS_PORTPARAMS_SAMPLERATE = 8;
export const DMUS_PORTPARAMS_EFFECTS = 32;
export const DMUS_PORTPARAMS_SHARE = 64;
export const DMUS_PORTPARAMS_FEATURES = 128;
export const DMUS_PORT_FEATURE_AUDIOPATH = 1;
export const DMUS_PORT_FEATURE_STREAMING = 2;
export const DMUS_SYNTHSTATS_VOICES = 1;
export const DMUS_SYNTHSTATS_TOTAL_CPU = 2;
export const DMUS_SYNTHSTATS_CPU_PER_VOICE = 4;
export const DMUS_SYNTHSTATS_LOST_NOTES = 8;
export const DMUS_SYNTHSTATS_PEAK_VOLUME = 16;
export const DMUS_SYNTHSTATS_FREE_MEMORY = 32;
export const DMUS_SYNTHSTATS_SYSTEMMEMORY = 2147483647;
export const DMUS_CLOCKF_GLOBAL = 1;
export const DSBUSID_FIRST_SPKR_LOC = 0;
export const DSBUSID_FRONT_LEFT = 0;
export const DSBUSID_LEFT = 0;
export const DSBUSID_FRONT_RIGHT = 1;
export const DSBUSID_RIGHT = 1;
export const DSBUSID_FRONT_CENTER = 2;
export const DSBUSID_LOW_FREQUENCY = 3;
export const DSBUSID_BACK_LEFT = 4;
export const DSBUSID_BACK_RIGHT = 5;
export const DSBUSID_FRONT_LEFT_OF_CENTER = 6;
export const DSBUSID_FRONT_RIGHT_OF_CENTER = 7;
export const DSBUSID_BACK_CENTER = 8;
export const DSBUSID_SIDE_LEFT = 9;
export const DSBUSID_SIDE_RIGHT = 10;
export const DSBUSID_TOP_CENTER = 11;
export const DSBUSID_TOP_FRONT_LEFT = 12;
export const DSBUSID_TOP_FRONT_CENTER = 13;
export const DSBUSID_TOP_FRONT_RIGHT = 14;
export const DSBUSID_TOP_BACK_LEFT = 15;
export const DSBUSID_TOP_BACK_CENTER = 16;
export const DSBUSID_TOP_BACK_RIGHT = 17;
export const DSBUSID_LAST_SPKR_LOC = 17;
export const DSBUSID_REVERB_SEND = 64;
export const DSBUSID_CHORUS_SEND = 65;
export const DSBUSID_DYNAMIC_0 = 512;
export const DSBUSID_NULL = 4294967295;
export const DAUD_CRITICAL_VOICE_PRIORITY = 4026531840;
export const DAUD_HIGH_VOICE_PRIORITY = 3221225472;
export const DAUD_STANDARD_VOICE_PRIORITY = 2147483648;
export const DAUD_LOW_VOICE_PRIORITY = 1073741824;
export const DAUD_PERSIST_VOICE_PRIORITY = 268435456;
export const DAUD_CHAN1_VOICE_PRIORITY_OFFSET = 14;
export const DAUD_CHAN2_VOICE_PRIORITY_OFFSET = 13;
export const DAUD_CHAN3_VOICE_PRIORITY_OFFSET = 12;
export const DAUD_CHAN4_VOICE_PRIORITY_OFFSET = 11;
export const DAUD_CHAN5_VOICE_PRIORITY_OFFSET = 10;
export const DAUD_CHAN6_VOICE_PRIORITY_OFFSET = 9;
export const DAUD_CHAN7_VOICE_PRIORITY_OFFSET = 8;
export const DAUD_CHAN8_VOICE_PRIORITY_OFFSET = 7;
export const DAUD_CHAN9_VOICE_PRIORITY_OFFSET = 6;
export const DAUD_CHAN10_VOICE_PRIORITY_OFFSET = 15;
export const DAUD_CHAN11_VOICE_PRIORITY_OFFSET = 5;
export const DAUD_CHAN12_VOICE_PRIORITY_OFFSET = 4;
export const DAUD_CHAN13_VOICE_PRIORITY_OFFSET = 3;
export const DAUD_CHAN14_VOICE_PRIORITY_OFFSET = 2;
export const DAUD_CHAN15_VOICE_PRIORITY_OFFSET = 1;
export const DAUD_CHAN16_VOICE_PRIORITY_OFFSET = 0;
export const DMUS_VOLUME_MAX = 2000;
export const DMUS_VOLUME_MIN = "-20000";
export const DMUS_EVENT_STRUCTURED = 1;
export const DMUS_DOWNLOADINFO_INSTRUMENT = 1;
export const DMUS_DOWNLOADINFO_WAVE = 2;
export const DMUS_DOWNLOADINFO_INSTRUMENT2 = 3;
export const DMUS_DOWNLOADINFO_WAVEARTICULATION = 4;
export const DMUS_DOWNLOADINFO_STREAMINGWAVE = 5;
export const DMUS_DOWNLOADINFO_ONESHOTWAVE = 6;
export const DMUS_DEFAULT_SIZE_OFFSETTABLE = 1;
export const DMUS_INSTRUMENT_GM_INSTRUMENT = 1;
export const DMUS_MIN_DATA_SIZE = 4;
export const CONN_SRC_NONE = 0;
export const CONN_SRC_LFO = 1;
export const CONN_SRC_KEYONVELOCITY = 2;
export const CONN_SRC_KEYNUMBER = 3;
export const CONN_SRC_EG1 = 4;
export const CONN_SRC_EG2 = 5;
export const CONN_SRC_PITCHWHEEL = 6;
export const CONN_SRC_CC1 = 129;
export const CONN_SRC_CC7 = 135;
export const CONN_SRC_CC10 = 138;
export const CONN_SRC_CC11 = 139;
export const CONN_DST_NONE = 0;
export const CONN_DST_ATTENUATION = 1;
export const CONN_DST_PITCH = 3;
export const CONN_DST_PAN = 4;
export const CONN_DST_LFO_FREQUENCY = 260;
export const CONN_DST_LFO_STARTDELAY = 261;
export const CONN_DST_EG1_ATTACKTIME = 518;
export const CONN_DST_EG1_DECAYTIME = 519;
export const CONN_DST_EG1_RELEASETIME = 521;
export const CONN_DST_EG1_SUSTAINLEVEL = 522;
export const CONN_DST_EG2_ATTACKTIME = 778;
export const CONN_DST_EG2_DECAYTIME = 779;
export const CONN_DST_EG2_RELEASETIME = 781;
export const CONN_DST_EG2_SUSTAINLEVEL = 782;
export const CONN_TRN_NONE = 0;
export const CONN_TRN_CONCAVE = 1;
export const F_INSTRUMENT_DRUMS = 2147483648;
export const F_RGN_OPTION_SELFNONEXCLUSIVE = 1;
export const WAVELINK_CHANNEL_LEFT = 1;
export const WAVELINK_CHANNEL_RIGHT = 2;
export const F_WAVELINK_PHASE_MASTER = 1;
export const POOL_CUE_NULL = "-1";
export const F_WSMP_NO_TRUNCATION = 1;
export const F_WSMP_NO_COMPRESSION = 2;
export const WLOOP_TYPE_FORWARD = 0;
export const CONN_SRC_POLYPRESSURE = 7;
export const CONN_SRC_CHANNELPRESSURE = 8;
export const CONN_SRC_VIBRATO = 9;
export const CONN_SRC_MONOPRESSURE = 10;
export const CONN_SRC_CC91 = 219;
export const CONN_SRC_CC93 = 221;
export const CONN_DST_GAIN = 1;
export const CONN_DST_KEYNUMBER = 5;
export const CONN_DST_LEFT = 16;
export const CONN_DST_RIGHT = 17;
export const CONN_DST_CENTER = 18;
export const CONN_DST_LEFTREAR = 19;
export const CONN_DST_RIGHTREAR = 20;
export const CONN_DST_LFE_CHANNEL = 21;
export const CONN_DST_CHORUS = 128;
export const CONN_DST_REVERB = 129;
export const CONN_DST_VIB_FREQUENCY = 276;
export const CONN_DST_VIB_STARTDELAY = 277;
export const CONN_DST_EG1_DELAYTIME = 523;
export const CONN_DST_EG1_HOLDTIME = 524;
export const CONN_DST_EG1_SHUTDOWNTIME = 525;
export const CONN_DST_EG2_DELAYTIME = 783;
export const CONN_DST_EG2_HOLDTIME = 784;
export const CONN_DST_FILTER_CUTOFF = 1280;
export const CONN_DST_FILTER_Q = 1281;
export const CONN_TRN_CONVEX = 2;
export const CONN_TRN_SWITCH = 3;
export const DLS_CDL_AND = 1;
export const DLS_CDL_OR = 2;
export const DLS_CDL_XOR = 3;
export const DLS_CDL_ADD = 4;
export const DLS_CDL_SUBTRACT = 5;
export const DLS_CDL_MULTIPLY = 6;
export const DLS_CDL_DIVIDE = 7;
export const DLS_CDL_LOGICAL_AND = 8;
export const DLS_CDL_LOGICAL_OR = 9;
export const DLS_CDL_LT = 10;
export const DLS_CDL_LE = 11;
export const DLS_CDL_GT = 12;
export const DLS_CDL_GE = 13;
export const DLS_CDL_EQ = 14;
export const DLS_CDL_NOT = 15;
export const DLS_CDL_CONST = 16;
export const DLS_CDL_QUERY = 17;
export const DLS_CDL_QUERYSUPPORTED = 18;
export const WLOOP_TYPE_RELEASE = 2;
export const F_WAVELINK_MULTICHANNEL = 2;
export const REGSTR_PATH_SOFTWARESYNTHS = "Software\Microsoft\DirectMusic\SoftwareSynths";
export const REFRESH_F_LASTBUFFER = 1;
export const DV_DVSD_NTSC_FRAMESIZE = 120000;
export const DV_DVSD_PAL_FRAMESIZE = 144000;
export const DV_SMCHN = 57344;
export const DV_AUDIOMODE = 3840;
export const DV_AUDIOSMP = 939524096;
export const DV_AUDIOQU = 117440512;
export const DV_NTSCPAL = 2097152;
export const DV_STYPE = 2031616;
export const DV_NTSC = 0;
export const DV_PAL = 1;
export const DV_SD = 0;
export const DV_HD = 1;
export const DV_SL = 2;
export const DV_CAP_AUD16Bits = 0;
export const DV_CAP_AUD12Bits = 1;
export const SIZE_DVINFO = 32;
export const DIRECTSOUND_VERSION = 1792;
export const _FACDS = 2168;
export const DSFX_LOCHARDWARE = 1;
export const DSFX_LOCSOFTWARE = 2;
export const DSCFX_LOCHARDWARE = 1;
export const DSCFX_LOCSOFTWARE = 2;
export const DSCFXR_LOCHARDWARE = 16;
export const DSCFXR_LOCSOFTWARE = 32;
export const KSPROPERTY_SUPPORT_GET = 1;
export const KSPROPERTY_SUPPORT_SET = 2;
export const DSFXGARGLE_WAVE_TRIANGLE = 0;
export const DSFXGARGLE_WAVE_SQUARE = 1;
export const DSFXGARGLE_RATEHZ_MIN = 1;
export const DSFXGARGLE_RATEHZ_MAX = 1000;
export const DSFXCHORUS_WAVE_TRIANGLE = 0;
export const DSFXCHORUS_WAVE_SIN = 1;
export const DSFXCHORUS_WETDRYMIX_MIN = 0;
export const DSFXCHORUS_WETDRYMIX_MAX = 100;
export const DSFXCHORUS_DEPTH_MIN = 0;
export const DSFXCHORUS_DEPTH_MAX = 100;
export const DSFXCHORUS_FEEDBACK_MIN = "-99";
export const DSFXCHORUS_FEEDBACK_MAX = 99;
export const DSFXCHORUS_FREQUENCY_MIN = 0;
export const DSFXCHORUS_FREQUENCY_MAX = 10;
export const DSFXCHORUS_DELAY_MIN = 0;
export const DSFXCHORUS_DELAY_MAX = 20;
export const DSFXCHORUS_PHASE_MIN = 0;
export const DSFXCHORUS_PHASE_MAX = 4;
export const DSFXCHORUS_PHASE_NEG_180 = 0;
export const DSFXCHORUS_PHASE_NEG_90 = 1;
export const DSFXCHORUS_PHASE_ZERO = 2;
export const DSFXCHORUS_PHASE_90 = 3;
export const DSFXCHORUS_PHASE_180 = 4;
export const DSFXFLANGER_WAVE_TRIANGLE = 0;
export const DSFXFLANGER_WAVE_SIN = 1;
export const DSFXFLANGER_WETDRYMIX_MIN = 0;
export const DSFXFLANGER_WETDRYMIX_MAX = 100;
export const DSFXFLANGER_FREQUENCY_MIN = 0;
export const DSFXFLANGER_FREQUENCY_MAX = 10;
export const DSFXFLANGER_DEPTH_MIN = 0;
export const DSFXFLANGER_DEPTH_MAX = 100;
export const DSFXFLANGER_PHASE_MIN = 0;
export const DSFXFLANGER_PHASE_MAX = 4;
export const DSFXFLANGER_FEEDBACK_MIN = "-99";
export const DSFXFLANGER_FEEDBACK_MAX = 99;
export const DSFXFLANGER_DELAY_MIN = 0;
export const DSFXFLANGER_DELAY_MAX = 4;
export const DSFXFLANGER_PHASE_NEG_180 = 0;
export const DSFXFLANGER_PHASE_NEG_90 = 1;
export const DSFXFLANGER_PHASE_ZERO = 2;
export const DSFXFLANGER_PHASE_90 = 3;
export const DSFXFLANGER_PHASE_180 = 4;
export const DSFXECHO_WETDRYMIX_MIN = 0;
export const DSFXECHO_WETDRYMIX_MAX = 100;
export const DSFXECHO_FEEDBACK_MIN = 0;
export const DSFXECHO_FEEDBACK_MAX = 100;
export const DSFXECHO_LEFTDELAY_MIN = 1;
export const DSFXECHO_LEFTDELAY_MAX = 2000;
export const DSFXECHO_RIGHTDELAY_MIN = 1;
export const DSFXECHO_RIGHTDELAY_MAX = 2000;
export const DSFXECHO_PANDELAY_MIN = 0;
export const DSFXECHO_PANDELAY_MAX = 1;
export const DSFXDISTORTION_GAIN_MIN = "-60";
export const DSFXDISTORTION_GAIN_MAX = 0;
export const DSFXDISTORTION_EDGE_MIN = 0;
export const DSFXDISTORTION_EDGE_MAX = 100;
export const DSFXDISTORTION_POSTEQCENTERFREQUENCY_MIN = 100;
export const DSFXDISTORTION_POSTEQCENTERFREQUENCY_MAX = 8000;
export const DSFXDISTORTION_POSTEQBANDWIDTH_MIN = 100;
export const DSFXDISTORTION_POSTEQBANDWIDTH_MAX = 8000;
export const DSFXDISTORTION_PRELOWPASSCUTOFF_MIN = 100;
export const DSFXDISTORTION_PRELOWPASSCUTOFF_MAX = 8000;
export const DSFXCOMPRESSOR_GAIN_MIN = "-60";
export const DSFXCOMPRESSOR_GAIN_MAX = 60;
export const DSFXCOMPRESSOR_ATTACK_MIN = "0.009999999776482582";
export const DSFXCOMPRESSOR_ATTACK_MAX = 500;
export const DSFXCOMPRESSOR_RELEASE_MIN = 50;
export const DSFXCOMPRESSOR_RELEASE_MAX = 3000;
export const DSFXCOMPRESSOR_THRESHOLD_MIN = "-60";
export const DSFXCOMPRESSOR_THRESHOLD_MAX = 0;
export const DSFXCOMPRESSOR_RATIO_MIN = 1;
export const DSFXCOMPRESSOR_RATIO_MAX = 100;
export const DSFXCOMPRESSOR_PREDELAY_MIN = 0;
export const DSFXCOMPRESSOR_PREDELAY_MAX = 4;
export const DSFXPARAMEQ_CENTER_MIN = 80;
export const DSFXPARAMEQ_CENTER_MAX = 16000;
export const DSFXPARAMEQ_BANDWIDTH_MIN = 1;
export const DSFXPARAMEQ_BANDWIDTH_MAX = 36;
export const DSFXPARAMEQ_GAIN_MIN = "-15";
export const DSFXPARAMEQ_GAIN_MAX = 15;
export const DSFX_I3DL2REVERB_ROOM_MIN = "-10000";
export const DSFX_I3DL2REVERB_ROOM_MAX = 0;
export const DSFX_I3DL2REVERB_ROOM_DEFAULT = "-1000";
export const DSFX_I3DL2REVERB_ROOMHF_MIN = "-10000";
export const DSFX_I3DL2REVERB_ROOMHF_MAX = 0;
export const DSFX_I3DL2REVERB_ROOMHF_DEFAULT = "-100";
export const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MIN = 0;
export const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MAX = 10;
export const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_DEFAULT = 0;
export const DSFX_I3DL2REVERB_DECAYTIME_MIN = "0.10000000149011612";
export const DSFX_I3DL2REVERB_DECAYTIME_MAX = 20;
export const DSFX_I3DL2REVERB_DECAYTIME_DEFAULT = "1.4900000095367432";
export const DSFX_I3DL2REVERB_DECAYHFRATIO_MIN = "0.10000000149011612";
export const DSFX_I3DL2REVERB_DECAYHFRATIO_MAX = 2;
export const DSFX_I3DL2REVERB_DECAYHFRATIO_DEFAULT = "0.8299999833106995";
export const DSFX_I3DL2REVERB_REFLECTIONS_MIN = "-10000";
export const DSFX_I3DL2REVERB_REFLECTIONS_MAX = 1000;
export const DSFX_I3DL2REVERB_REFLECTIONS_DEFAULT = "-2602";
export const DSFX_I3DL2REVERB_REFLECTIONSDELAY_MIN = 0;
export const DSFX_I3DL2REVERB_REFLECTIONSDELAY_MAX = "0.30000001192092896";
export const DSFX_I3DL2REVERB_REFLECTIONSDELAY_DEFAULT = "0.007000000216066837";
export const DSFX_I3DL2REVERB_REVERB_MIN = "-10000";
export const DSFX_I3DL2REVERB_REVERB_MAX = 2000;
export const DSFX_I3DL2REVERB_REVERB_DEFAULT = 200;
export const DSFX_I3DL2REVERB_REVERBDELAY_MIN = 0;
export const DSFX_I3DL2REVERB_REVERBDELAY_MAX = "0.10000000149011612";
export const DSFX_I3DL2REVERB_REVERBDELAY_DEFAULT = "0.010999999940395355";
export const DSFX_I3DL2REVERB_DIFFUSION_MIN = 0;
export const DSFX_I3DL2REVERB_DIFFUSION_MAX = 100;
export const DSFX_I3DL2REVERB_DIFFUSION_DEFAULT = 100;
export const DSFX_I3DL2REVERB_DENSITY_MIN = 0;
export const DSFX_I3DL2REVERB_DENSITY_MAX = 100;
export const DSFX_I3DL2REVERB_DENSITY_DEFAULT = 100;
export const DSFX_I3DL2REVERB_HFREFERENCE_MIN = 20;
export const DSFX_I3DL2REVERB_HFREFERENCE_MAX = 20000;
export const DSFX_I3DL2REVERB_HFREFERENCE_DEFAULT = 5000;
export const DSFX_I3DL2REVERB_QUALITY_MIN = 0;
export const DSFX_I3DL2REVERB_QUALITY_MAX = 3;
export const DSFX_I3DL2REVERB_QUALITY_DEFAULT = 2;
export const DSFX_WAVESREVERB_INGAIN_MIN = "-96";
export const DSFX_WAVESREVERB_INGAIN_MAX = 0;
export const DSFX_WAVESREVERB_INGAIN_DEFAULT = 0;
export const DSFX_WAVESREVERB_REVERBMIX_MIN = "-96";
export const DSFX_WAVESREVERB_REVERBMIX_MAX = 0;
export const DSFX_WAVESREVERB_REVERBMIX_DEFAULT = 0;
export const DSFX_WAVESREVERB_REVERBTIME_MIN = "0.0010000000474974513";
export const DSFX_WAVESREVERB_REVERBTIME_MAX = 3000;
export const DSFX_WAVESREVERB_REVERBTIME_DEFAULT = 1000;
export const DSFX_WAVESREVERB_HIGHFREQRTRATIO_MIN = "0.0010000000474974513";
export const DSFX_WAVESREVERB_HIGHFREQRTRATIO_MAX = "0.9990000128746033";
export const DSFX_WAVESREVERB_HIGHFREQRTRATIO_DEFAULT = "0.0010000000474974513";
export const DSCFX_AEC_MODE_PASS_THROUGH = 0;
export const DSCFX_AEC_MODE_HALF_DUPLEX = 1;
export const DSCFX_AEC_MODE_FULL_DUPLEX = 2;
export const DSCFX_AEC_STATUS_HISTORY_UNINITIALIZED = 0;
export const DSCFX_AEC_STATUS_HISTORY_CONTINUOUSLY_CONVERGED = 1;
export const DSCFX_AEC_STATUS_HISTORY_PREVIOUSLY_DIVERGED = 2;
export const DSCFX_AEC_STATUS_CURRENTLY_CONVERGED = 8;
export const DS_NO_VIRTUALIZATION = 219902342877151242n;
export const DSCAPS_PRIMARYMONO = 1;
export const DSCAPS_PRIMARYSTEREO = 2;
export const DSCAPS_PRIMARY8BIT = 4;
export const DSCAPS_PRIMARY16BIT = 8;
export const DSCAPS_CONTINUOUSRATE = 16;
export const DSCAPS_EMULDRIVER = 32;
export const DSCAPS_CERTIFIED = 64;
export const DSCAPS_SECONDARYMONO = 256;
export const DSCAPS_SECONDARYSTEREO = 512;
export const DSCAPS_SECONDARY8BIT = 1024;
export const DSCAPS_SECONDARY16BIT = 2048;
export const DSSCL_NORMAL = 1;
export const DSSCL_PRIORITY = 2;
export const DSSCL_EXCLUSIVE = 3;
export const DSSCL_WRITEPRIMARY = 4;
export const DSSPEAKER_DIRECTOUT = 0;
export const DSSPEAKER_HEADPHONE = 1;
export const DSSPEAKER_MONO = 2;
export const DSSPEAKER_QUAD = 3;
export const DSSPEAKER_STEREO = 4;
export const DSSPEAKER_SURROUND = 5;
export const DSSPEAKER_5POINT1 = 6;
export const DSSPEAKER_7POINT1 = 7;
export const DSSPEAKER_7POINT1_SURROUND = 8;
export const DSSPEAKER_5POINT1_SURROUND = 9;
export const DSSPEAKER_7POINT1_WIDE = 7;
export const DSSPEAKER_5POINT1_BACK = 6;
export const DSSPEAKER_GEOMETRY_MIN = 5;
export const DSSPEAKER_GEOMETRY_NARROW = 10;
export const DSSPEAKER_GEOMETRY_WIDE = 20;
export const DSSPEAKER_GEOMETRY_MAX = 180;
export const DSBCAPS_PRIMARYBUFFER = 1;
export const DSBCAPS_STATIC = 2;
export const DSBCAPS_LOCHARDWARE = 4;
export const DSBCAPS_LOCSOFTWARE = 8;
export const DSBCAPS_CTRL3D = 16;
export const DSBCAPS_CTRLFREQUENCY = 32;
export const DSBCAPS_CTRLPAN = 64;
export const DSBCAPS_CTRLVOLUME = 128;
export const DSBCAPS_CTRLPOSITIONNOTIFY = 256;
export const DSBCAPS_CTRLFX = 512;
export const DSBCAPS_STICKYFOCUS = 16384;
export const DSBCAPS_GLOBALFOCUS = 32768;
export const DSBCAPS_GETCURRENTPOSITION2 = 65536;
export const DSBCAPS_MUTE3DATMAXDISTANCE = 131072;
export const DSBCAPS_LOCDEFER = 262144;
export const DSBCAPS_TRUEPLAYPOSITION = 524288;
export const DSBPLAY_LOOPING = 1;
export const DSBPLAY_LOCHARDWARE = 2;
export const DSBPLAY_LOCSOFTWARE = 4;
export const DSBPLAY_TERMINATEBY_TIME = 8;
export const DSBPLAY_TERMINATEBY_DISTANCE = 16;
export const DSBPLAY_TERMINATEBY_PRIORITY = 32;
export const DSBSTATUS_PLAYING = 1;
export const DSBSTATUS_BUFFERLOST = 2;
export const DSBSTATUS_LOOPING = 4;
export const DSBSTATUS_LOCHARDWARE = 8;
export const DSBSTATUS_LOCSOFTWARE = 16;
export const DSBSTATUS_TERMINATED = 32;
export const DSBLOCK_FROMWRITECURSOR = 1;
export const DSBLOCK_ENTIREBUFFER = 2;
export const DSBFREQUENCY_ORIGINAL = 0;
export const DSBFREQUENCY_MIN = 100;
export const DSBFREQUENCY_MAX = 200000;
export const DSBPAN_LEFT = "-10000";
export const DSBPAN_CENTER = 0;
export const DSBPAN_RIGHT = 10000;
export const DSBVOLUME_MIN = "-10000";
export const DSBVOLUME_MAX = 0;
export const DSBSIZE_MIN = 4;
export const DSBSIZE_MAX = 268435455;
export const DSBSIZE_FX_MIN = 150;
export const DSBNOTIFICATIONS_MAX = 100000;
export const DS3DMODE_NORMAL = 0;
export const DS3DMODE_HEADRELATIVE = 1;
export const DS3DMODE_DISABLE = 2;
export const DS3D_IMMEDIATE = 0;
export const DS3D_DEFERRED = 1;
export const DS3D_DEFAULTDISTANCEFACTOR = 1;
export const DS3D_MINROLLOFFFACTOR = 0;
export const DS3D_MAXROLLOFFFACTOR = 10;
export const DS3D_DEFAULTROLLOFFFACTOR = 1;
export const DS3D_MINDOPPLERFACTOR = 0;
export const DS3D_MAXDOPPLERFACTOR = 10;
export const DS3D_DEFAULTDOPPLERFACTOR = 1;
export const DS3D_DEFAULTMINDISTANCE = 1;
export const DS3D_DEFAULTMAXDISTANCE = 1000000000;
export const DS3D_MINCONEANGLE = 0;
export const DS3D_MAXCONEANGLE = 360;
export const DS3D_DEFAULTCONEANGLE = 360;
export const DS3D_DEFAULTCONEOUTSIDEVOLUME = 0;
export const DSCCAPS_EMULDRIVER = 32;
export const DSCCAPS_CERTIFIED = 64;
export const DSCCAPS_MULTIPLECAPTURE = 1;
export const DSCBCAPS_WAVEMAPPED = 2147483648;
export const DSCBCAPS_CTRLFX = 512;
export const DSCBLOCK_ENTIREBUFFER = 1;
export const DSCBSTATUS_CAPTURING = 1;
export const DSCBSTATUS_LOOPING = 2;
export const DSCBSTART_LOOPING = 1;
export const DSBPN_OFFSETSTOP = 4294967295;
export const DS_CERTIFIED = 0;
export const DS_UNCERTIFIED = 1;
export const DSFXR_PRESENT = 0;
export const DSFXR_LOCHARDWARE = 1;
export const DSFXR_LOCSOFTWARE = 2;
export const DSFXR_UNALLOCATED = 3;
export const DSFXR_FAILED = 4;
export const DSFXR_UNKNOWN = 5;
export const DSFXR_SENDLOOP = 6;
export const DSFX_I3DL2_MATERIAL_PRESET_SINGLEWINDOW = 0;
export const DSFX_I3DL2_MATERIAL_PRESET_DOUBLEWINDOW = 1;
export const DSFX_I3DL2_MATERIAL_PRESET_THINDOOR = 2;
export const DSFX_I3DL2_MATERIAL_PRESET_THICKDOOR = 3;
export const DSFX_I3DL2_MATERIAL_PRESET_WOODWALL = 4;
export const DSFX_I3DL2_MATERIAL_PRESET_BRICKWALL = 5;
export const DSFX_I3DL2_MATERIAL_PRESET_STONEWALL = 6;
export const DSFX_I3DL2_MATERIAL_PRESET_CURTAIN = 7;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_DEFAULT = 0;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_GENERIC = 1;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL = 2;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_ROOM = 3;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_BATHROOM = 4;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM = 5;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_STONEROOM = 6;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM = 7;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL = 8;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CAVE = 9;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_ARENA = 10;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_HANGAR = 11;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY = 12;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_HALLWAY = 13;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR = 14;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_ALLEY = 15;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_FOREST = 16;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CITY = 17;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS = 18;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_QUARRY = 19;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PLAIN = 20;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT = 21;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE = 22;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_UNDERWATER = 23;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_SMALLROOM = 24;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM = 25;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEROOM = 26;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL = 27;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEHALL = 28;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PLATE = 29;
export const FXEQ_MIN_FRAMERATE = 22000;
export const FXEQ_MAX_FRAMERATE = 48000;
export const FXEQ_MIN_FREQUENCY_CENTER = 20;
export const FXEQ_MAX_FREQUENCY_CENTER = 20000;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_0 = 100;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_1 = 800;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_2 = 2000;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_3 = 10000;
export const FXEQ_MIN_GAIN = "0.12600000202655792";
export const FXEQ_MAX_GAIN = "7.940000057220459";
export const FXEQ_DEFAULT_GAIN = 1;
export const FXEQ_MIN_BANDWIDTH = "0.10000000149011612";
export const FXEQ_MAX_BANDWIDTH = 2;
export const FXEQ_DEFAULT_BANDWIDTH = 1;
export const FXMASTERINGLIMITER_MIN_RELEASE = 1;
export const FXMASTERINGLIMITER_MAX_RELEASE = 20;
export const FXMASTERINGLIMITER_DEFAULT_RELEASE = 6;
export const FXMASTERINGLIMITER_MIN_LOUDNESS = 1;
export const FXMASTERINGLIMITER_MAX_LOUDNESS = 1800;
export const FXMASTERINGLIMITER_DEFAULT_LOUDNESS = 1000;
export const FXREVERB_MIN_DIFFUSION = 0;
export const FXREVERB_MAX_DIFFUSION = 1;
export const FXREVERB_DEFAULT_DIFFUSION = "0.8999999761581421";
export const FXREVERB_MIN_ROOMSIZE = "0.00009999999747378752";
export const FXREVERB_MAX_ROOMSIZE = 1;
export const FXREVERB_DEFAULT_ROOMSIZE = "0.6000000238418579";
export const FXLOUDNESS_DEFAULT_MOMENTARY_MS = 400;
export const FXLOUDNESS_DEFAULT_SHORTTERM_MS = 3000;
export const FXECHO_MIN_WETDRYMIX = 0;
export const FXECHO_MAX_WETDRYMIX = 1;
export const FXECHO_DEFAULT_WETDRYMIX = "0.5";
export const FXECHO_MIN_FEEDBACK = 0;
export const FXECHO_MAX_FEEDBACK = 1;
export const FXECHO_DEFAULT_FEEDBACK = "0.5";
export const FXECHO_MIN_DELAY = 1;
export const FXECHO_MAX_DELAY = 2000;
export const FXECHO_DEFAULT_DELAY = 500;
export const XAUDIO2_DLL_A = "xaudio2_9.dll";
export const XAUDIO2_DLL_W = "xaudio2_9.dll";
export const XAUDIO2D_DLL_A = "xaudio2_9d.dll";
export const XAUDIO2D_DLL_W = "xaudio2_9d.dll";
export const XAUDIO2_DLL = "xaudio2_9.dll";
export const XAUDIO2D_DLL = "xaudio2_9d.dll";
export const XAUDIO2_MAX_BUFFER_BYTES = 2147483648;
export const XAUDIO2_MAX_QUEUED_BUFFERS = 64;
export const XAUDIO2_MAX_BUFFERS_SYSTEM = 2;
export const XAUDIO2_MAX_AUDIO_CHANNELS = 64;
export const XAUDIO2_MIN_SAMPLE_RATE = 1000;
export const XAUDIO2_MAX_SAMPLE_RATE = 200000;
export const XAUDIO2_MAX_VOLUME_LEVEL = 16777216;
export const XAUDIO2_MAX_FREQ_RATIO = 1024;
export const XAUDIO2_DEFAULT_FREQ_RATIO = 2;
export const XAUDIO2_MAX_FILTER_ONEOVERQ = "1.5";
export const XAUDIO2_MAX_FILTER_FREQUENCY = 1;
export const XAUDIO2_MAX_LOOP_COUNT = 254;
export const XAUDIO2_MAX_INSTANCES = 8;
export const XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MONO = 600000;
export const XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MULTICHANNEL = 300000;
export const XAUDIO2_COMMIT_NOW = 0;
export const XAUDIO2_COMMIT_ALL = 0;
export const XAUDIO2_NO_LOOP_REGION = 0;
export const XAUDIO2_LOOP_INFINITE = 255;
export const XAUDIO2_DEFAULT_CHANNELS = 0;
export const XAUDIO2_DEFAULT_SAMPLERATE = 0;
export const XAUDIO2_DEBUG_ENGINE = 1;
export const XAUDIO2_VOICE_NOPITCH = 2;
export const XAUDIO2_VOICE_NOSRC = 4;
export const XAUDIO2_VOICE_USEFILTER = 8;
export const XAUDIO2_PLAY_TAILS = 32;
export const XAUDIO2_END_OF_STREAM = 64;
export const XAUDIO2_SEND_USEFILTER = 128;
export const XAUDIO2_VOICE_NOSAMPLESPLAYED = 256;
export const XAUDIO2_STOP_ENGINE_WHEN_IDLE = 8192;
export const XAUDIO2_1024_QUANTUM = 32768;
export const XAUDIO2_NO_VIRTUAL_AUDIO_CLIENT = 65536;
export const XAUDIO2_DEFAULT_FILTER_FREQUENCY = 1;
export const XAUDIO2_DEFAULT_FILTER_ONEOVERQ = 1;
export const XAUDIO2_QUANTUM_NUMERATOR = 1;
export const XAUDIO2_QUANTUM_DENOMINATOR = 100;
export const FACILITY_XAUDIO2 = 2198;
export const XAUDIO2_E_INVALID_CALL = 10808641324183846913n;
export const XAUDIO2_E_XMA_DECODER_ERROR = 10808642423695474690n;
export const XAUDIO2_E_XAPO_CREATION_FAILED = 10808643523207102467n;
export const XAUDIO2_E_DEVICE_INVALIDATED = 14411518827056988164n;
export const Processor1 = 1;
export const Processor2 = 2;
export const Processor3 = 4;
export const Processor4 = 8;
export const Processor5 = 16;
export const Processor6 = 32;
export const Processor7 = 64;
export const Processor8 = 128;
export const Processor9 = 256;
export const Processor10 = 512;
export const Processor11 = 1024;
export const Processor12 = 2048;
export const Processor13 = 4096;
export const Processor14 = 8192;
export const Processor15 = 16384;
export const Processor16 = 32768;
export const Processor17 = 65536;
export const Processor18 = 131072;
export const Processor19 = 262144;
export const Processor20 = 524288;
export const Processor21 = 1048576;
export const Processor22 = 2097152;
export const Processor23 = 4194304;
export const Processor24 = 8388608;
export const Processor25 = 16777216;
export const Processor26 = 33554432;
export const Processor27 = 67108864;
export const Processor28 = 134217728;
export const Processor29 = 268435456;
export const Processor30 = 536870912;
export const Processor31 = 1073741824;
export const Processor32 = 2147483648;
export const XAUDIO2_ANY_PROCESSOR = 4294967295;
export const XAUDIO2_USE_DEFAULT_PROCESSOR = 0;
export const XAUDIO2_DEFAULT_PROCESSOR = 1;
export const XAUDIO2_LOG_ERRORS = 1;
export const XAUDIO2_LOG_WARNINGS = 2;
export const XAUDIO2_LOG_INFO = 4;
export const XAUDIO2_LOG_DETAIL = 8;
export const XAUDIO2_LOG_API_CALLS = 16;
export const XAUDIO2_LOG_FUNC_CALLS = 32;
export const XAUDIO2_LOG_TIMING = 64;
export const XAUDIO2_LOG_LOCKS = 128;
export const XAUDIO2_LOG_MEMORY = 256;
export const XAUDIO2_LOG_STREAMING = 4096;
export const XAUDIO2FX_REVERB_MIN_FRAMERATE = 20000;
export const XAUDIO2FX_REVERB_MAX_FRAMERATE = 48000;
export const XAUDIO2FX_REVERB_MIN_WET_DRY_MIX = 0;
export const XAUDIO2FX_REVERB_MIN_REFLECTIONS_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_REVERB_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_REAR_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_7POINT1_SIDE_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_7POINT1_REAR_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_POSITION = 0;
export const XAUDIO2FX_REVERB_MIN_DIFFUSION = 0;
export const XAUDIO2FX_REVERB_MIN_LOW_EQ_GAIN = 0;
export const XAUDIO2FX_REVERB_MIN_LOW_EQ_CUTOFF = 0;
export const XAUDIO2FX_REVERB_MIN_HIGH_EQ_GAIN = 0;
export const XAUDIO2FX_REVERB_MIN_HIGH_EQ_CUTOFF = 0;
export const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_FREQ = 20;
export const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_MAIN = "-100";
export const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_HF = "-100";
export const XAUDIO2FX_REVERB_MIN_REFLECTIONS_GAIN = "-100";
export const XAUDIO2FX_REVERB_MIN_REVERB_GAIN = "-100";
export const XAUDIO2FX_REVERB_MIN_DECAY_TIME = "0.10000000149011612";
export const XAUDIO2FX_REVERB_MIN_DENSITY = 0;
export const XAUDIO2FX_REVERB_MIN_ROOM_SIZE = 0;
export const XAUDIO2FX_REVERB_MAX_WET_DRY_MIX = 100;
export const XAUDIO2FX_REVERB_MAX_REFLECTIONS_DELAY = 300;
export const XAUDIO2FX_REVERB_MAX_REVERB_DELAY = 85;
export const XAUDIO2FX_REVERB_MAX_REAR_DELAY = 5;
export const XAUDIO2FX_REVERB_MAX_7POINT1_SIDE_DELAY = 5;
export const XAUDIO2FX_REVERB_MAX_7POINT1_REAR_DELAY = 20;
export const XAUDIO2FX_REVERB_MAX_POSITION = 30;
export const XAUDIO2FX_REVERB_MAX_DIFFUSION = 15;
export const XAUDIO2FX_REVERB_MAX_LOW_EQ_GAIN = 12;
export const XAUDIO2FX_REVERB_MAX_LOW_EQ_CUTOFF = 9;
export const XAUDIO2FX_REVERB_MAX_HIGH_EQ_GAIN = 8;
export const XAUDIO2FX_REVERB_MAX_HIGH_EQ_CUTOFF = 14;
export const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_FREQ = 20000;
export const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_MAIN = 0;
export const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_HF = 0;
export const XAUDIO2FX_REVERB_MAX_REFLECTIONS_GAIN = 20;
export const XAUDIO2FX_REVERB_MAX_REVERB_GAIN = 20;
export const XAUDIO2FX_REVERB_MAX_DENSITY = 100;
export const XAUDIO2FX_REVERB_MAX_ROOM_SIZE = 100;
export const XAUDIO2FX_REVERB_DEFAULT_WET_DRY_MIX = 100;
export const XAUDIO2FX_REVERB_DEFAULT_REFLECTIONS_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_REVERB_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_REAR_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_7POINT1_SIDE_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_7POINT1_REAR_DELAY = 20;
export const XAUDIO2FX_REVERB_DEFAULT_POSITION = 6;
export const XAUDIO2FX_REVERB_DEFAULT_POSITION_MATRIX = 27;
export const XAUDIO2FX_REVERB_DEFAULT_EARLY_DIFFUSION = 8;
export const XAUDIO2FX_REVERB_DEFAULT_LATE_DIFFUSION = 8;
export const XAUDIO2FX_REVERB_DEFAULT_LOW_EQ_GAIN = 8;
export const XAUDIO2FX_REVERB_DEFAULT_LOW_EQ_CUTOFF = 4;
export const XAUDIO2FX_REVERB_DEFAULT_HIGH_EQ_GAIN = 8;
export const XAUDIO2FX_REVERB_DEFAULT_HIGH_EQ_CUTOFF = 4;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_FREQ = 5000;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_MAIN = 0;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_HF = 0;
export const XAUDIO2FX_REVERB_DEFAULT_REFLECTIONS_GAIN = 0;
export const XAUDIO2FX_REVERB_DEFAULT_REVERB_GAIN = 0;
export const XAUDIO2FX_REVERB_DEFAULT_DECAY_TIME = 1;
export const XAUDIO2FX_REVERB_DEFAULT_DENSITY = 100;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_SIZE = 100;
export const XAUDIO2FX_REVERB_DEFAULT_DISABLE_LATE_FIELD = 0;
export const HRTF_MAX_GAIN_LIMIT = 12;
export const HRTF_MIN_GAIN_LIMIT = "-96";
export const HRTF_MIN_UNITY_GAIN_DISTANCE = "0.05000000074505806";
export const HRTF_DEFAULT_UNITY_GAIN_DISTANCE = 1;
export const FACILITY_XAPO = 2199;
export const XAPO_E_FORMAT_UNSUPPORTED = 5264667301937348609n;
export const XAPO_MIN_CHANNELS = 1;
export const XAPO_MAX_CHANNELS = 64;
export const XAPO_MIN_FRAMERATE = 1000;
export const XAPO_MAX_FRAMERATE = 200000;
export const XAPO_REGISTRATION_STRING_LENGTH = 256;
export const XAPO_FLAG_CHANNELS_MUST_MATCH = 1;
export const XAPO_FLAG_FRAMERATE_MUST_MATCH = 2;
export const XAPO_FLAG_BITSPERSAMPLE_MUST_MATCH = 4;
export const XAPO_FLAG_BUFFERCOUNT_MUST_MATCH = 8;
export const XAPO_FLAG_INPLACE_REQUIRED = 32;
export const XAPO_FLAG_INPLACE_SUPPORTED = 16;
export const SPEAKER_MONO = 4;
export const X3DAUDIO_HANDLE_BYTESIZE = 20;
export const X3DAUDIO_PI = "3.1415927410125732";
export const X3DAUDIO_2PI = "6.2831854820251465";
export const X3DAUDIO_SPEED_OF_SOUND = "343.5";
export const X3DAUDIO_CALCULATE_MATRIX = 1;
export const X3DAUDIO_CALCULATE_DELAY = 2;
export const X3DAUDIO_CALCULATE_LPF_DIRECT = 4;
export const X3DAUDIO_CALCULATE_LPF_REVERB = 8;
export const X3DAUDIO_CALCULATE_REVERB = 16;
export const X3DAUDIO_CALCULATE_DOPPLER = 32;
export const X3DAUDIO_CALCULATE_EMITTER_ANGLE = 64;
export const X3DAUDIO_CALCULATE_ZEROCENTER = 65536;
export const X3DAUDIO_CALCULATE_REDIRECT_TO_LFE = 131072;
export const TIMERR_NOERROR = 0;
export const TIMERR_NOCANDO = 97;
export const TIMERR_STRUCT = 129;
export const MAXPNAMELEN = 32;
export const MAXERRORLENGTH = 256;
export const MM_MICROSOFT = 1;
export const MM_MIDI_MAPPER = 1;
export const MM_WAVE_MAPPER = 2;
export const MM_SNDBLST_MIDIOUT = 3;
export const MM_SNDBLST_MIDIIN = 4;
export const MM_SNDBLST_SYNTH = 5;
export const MM_SNDBLST_WAVEOUT = 6;
export const MM_SNDBLST_WAVEIN = 7;
export const MM_ADLIB = 9;
export const MM_MPU401_MIDIOUT = 10;
export const MM_MPU401_MIDIIN = 11;
export const MM_PC_JOYSTICK = 12;
export const TIME_MS = 1;
export const TIME_SAMPLES = 2;
export const TIME_BYTES = 4;
export const TIME_SMPTE = 8;
export const TIME_MIDI = 16;
export const TIME_TICKS = 32;
export const MM_JOY1MOVE = 928;
export const MM_JOY2MOVE = 929;
export const MM_JOY1ZMOVE = 930;
export const MM_JOY2ZMOVE = 931;
export const MM_JOY1BUTTONDOWN = 949;
export const MM_JOY2BUTTONDOWN = 950;
export const MM_JOY1BUTTONUP = 951;
export const MM_JOY2BUTTONUP = 952;
export const MM_MCINOTIFY = 953;
export const MM_WOM_OPEN = 955;
export const MM_WOM_CLOSE = 956;
export const MM_WOM_DONE = 957;
export const MM_WIM_OPEN = 958;
export const MM_WIM_CLOSE = 959;
export const MM_WIM_DATA = 960;
export const MM_MIM_OPEN = 961;
export const MM_MIM_CLOSE = 962;
export const MM_MIM_DATA = 963;
export const MM_MIM_LONGDATA = 964;
export const MM_MIM_ERROR = 965;
export const MM_MIM_LONGERROR = 966;
export const MM_MOM_OPEN = 967;
export const MM_MOM_CLOSE = 968;
export const MM_MOM_DONE = 969;
export const MM_DRVM_OPEN = 976;
export const MM_DRVM_CLOSE = 977;
export const MM_DRVM_DATA = 978;
export const MM_DRVM_ERROR = 979;
export const MM_STREAM_OPEN = 980;
export const MM_STREAM_CLOSE = 981;
export const MM_STREAM_DONE = 982;
export const MM_STREAM_ERROR = 983;
export const MM_MOM_POSITIONCB = 970;
export const MM_MCISIGNAL = 971;
export const MM_MIM_MOREDATA = 972;
export const MM_MIXM_LINE_CHANGE = 976;
export const MM_MIXM_CONTROL_CHANGE = 977;
export const MMSYSERR_BASE = 0;
export const WAVERR_BASE = 32;
export const MIDIERR_BASE = 64;
export const TIMERR_BASE = 96;
export const JOYERR_BASE = 160;
export const MCIERR_BASE = 256;
export const MIXERR_BASE = 1024;
export const MCI_STRING_OFFSET = 512;
export const MCI_VD_OFFSET = 1024;
export const MCI_CD_OFFSET = 1088;
export const MCI_WAVE_OFFSET = 1152;
export const MCI_SEQ_OFFSET = 1216;
export const MMSYSERR_NOERROR = 0;
export const MMSYSERR_ERROR = 1;
export const MMSYSERR_BADDEVICEID = 2;
export const MMSYSERR_NOTENABLED = 3;
export const MMSYSERR_ALLOCATED = 4;
export const MMSYSERR_INVALHANDLE = 5;
export const MMSYSERR_NODRIVER = 6;
export const MMSYSERR_NOMEM = 7;
export const MMSYSERR_NOTSUPPORTED = 8;
export const MMSYSERR_BADERRNUM = 9;
export const MMSYSERR_INVALFLAG = 10;
export const MMSYSERR_INVALPARAM = 11;
export const MMSYSERR_HANDLEBUSY = 12;
export const MMSYSERR_INVALIDALIAS = 13;
export const MMSYSERR_BADDB = 14;
export const MMSYSERR_KEYNOTFOUND = 15;
export const MMSYSERR_READERROR = 16;
export const MMSYSERR_WRITEERROR = 17;
export const MMSYSERR_DELETEERROR = 18;
export const MMSYSERR_VALNOTFOUND = 19;
export const MMSYSERR_NODRIVERCB = 20;
export const MMSYSERR_MOREDATA = 21;
export const MMSYSERR_LASTERROR = 21;
export const TIME_ONESHOT = 0;
export const TIME_PERIODIC = 1;
export const TIME_CALLBACK_FUNCTION = 0;
export const TIME_CALLBACK_EVENT_SET = 16;
export const TIME_CALLBACK_EVENT_PULSE = 32;
export const TIME_KILL_SYNCHRONOUS = 256;
export const IOCTL_MTP_CUSTOM_COMMAND = 827348045;
export const MTP_NEXTPHASE_READ_DATA = 1;
export const MTP_NEXTPHASE_WRITE_DATA = 2;
export const MTP_NEXTPHASE_NO_DATA = 3;
export const RSA_KEY_LEN = 64;
export const SAC_SESSION_KEYLEN = 8;
export const SAC_PROTOCOL_WMDM = 1;
export const SAC_PROTOCOL_V1 = 2;
export const SAC_CERT_X509 = 1;
export const SAC_CERT_V1 = 2;
export const WMDMID_LENGTH = 128;
export const WMDM_MAC_LENGTH = 8;
export const WMDM_S_NOT_ALL_PROPERTIES_APPLIED = 282625;
export const WMDM_S_NOT_ALL_PROPERTIES_RETRIEVED = 282626;
export const WMDM_E_BUSY = "-2147201024";
export const WMDM_E_INTERFACEDEAD = "-2147201023";
export const WMDM_E_INVALIDTYPE = "-2147201022";
export const WMDM_E_PROCESSFAILED = "-2147201021";
export const WMDM_E_NOTSUPPORTED = "-2147201020";
export const WMDM_E_NOTCERTIFIED = "-2147201019";
export const WMDM_E_NORIGHTS = "-2147201018";
export const WMDM_E_CALL_OUT_OF_SEQUENCE = "-2147201017";
export const WMDM_E_BUFFERTOOSMALL = "-2147201016";
export const WMDM_E_MOREDATA = "-2147201015";
export const WMDM_E_MAC_CHECK_FAILED = "-2147201014";
export const WMDM_E_USER_CANCELLED = "-2147201013";
export const WMDM_E_SDMI_TRIGGER = "-2147201012";
export const WMDM_E_SDMI_NOMORECOPIES = "-2147201011";
export const WMDM_E_REVOKED = "-2147201010";
export const WMDM_E_LICENSE_NOTEXIST = "-2147201009";
export const WMDM_E_INCORRECT_APPSEC = "-2147201008";
export const WMDM_E_INCORRECT_RIGHTS = "-2147201007";
export const WMDM_E_LICENSE_EXPIRED = "-2147201006";
export const WMDM_E_CANTOPEN_PMSN_SERVICE_PIPE = "-2147201005";
export const WMDM_E_TOO_MANY_SESSIONS = "-2147201005";
export const WMDM_WMDM_REVOKED = 1;
export const WMDM_APP_REVOKED = 2;
export const WMDM_SP_REVOKED = 4;
export const WMDM_SCP_REVOKED = 8;
export const WMDM_GET_FORMAT_SUPPORT_AUDIO = 1;
export const WMDM_GET_FORMAT_SUPPORT_VIDEO = 2;
export const WMDM_GET_FORMAT_SUPPORT_FILE = 4;
export const WMDM_RIGHTS_PLAYBACKCOUNT = 1;
export const WMDM_RIGHTS_EXPIRATIONDATE = 2;
export const WMDM_RIGHTS_GROUPID = 4;
export const WMDM_RIGHTS_FREESERIALIDS = 8;
export const WMDM_RIGHTS_NAMEDSERIALIDS = 16;
export const WMDM_DEVICE_TYPE_PLAYBACK = 1;
export const WMDM_DEVICE_TYPE_RECORD = 2;
export const WMDM_DEVICE_TYPE_DECODE = 4;
export const WMDM_DEVICE_TYPE_ENCODE = 8;
export const WMDM_DEVICE_TYPE_STORAGE = 16;
export const WMDM_DEVICE_TYPE_VIRTUAL = 32;
export const WMDM_DEVICE_TYPE_SDMI = 64;
export const WMDM_DEVICE_TYPE_NONSDMI = 128;
export const WMDM_DEVICE_TYPE_NONREENTRANT = 256;
export const WMDM_DEVICE_TYPE_FILELISTRESYNC = 512;
export const WMDM_DEVICE_TYPE_VIEW_PREF_METADATAVIEW = 1024;
export const WMDM_POWER_CAP_BATTERY = 1;
export const WMDM_POWER_CAP_EXTERNAL = 2;
export const WMDM_POWER_IS_BATTERY = 4;
export const WMDM_POWER_IS_EXTERNAL = 8;
export const WMDM_POWER_PERCENT_AVAILABLE = 16;
export const WMDM_STATUS_READY = 1;
export const WMDM_STATUS_BUSY = 2;
export const WMDM_STATUS_DEVICE_NOTPRESENT = 4;
export const WMDM_STATUS_DEVICECONTROL_PLAYING = 8;
export const WMDM_STATUS_DEVICECONTROL_RECORDING = 16;
export const WMDM_STATUS_DEVICECONTROL_PAUSED = 32;
export const WMDM_STATUS_DEVICECONTROL_REMOTE = 64;
export const WMDM_STATUS_DEVICECONTROL_STREAM = 128;
export const WMDM_STATUS_STORAGE_NOTPRESENT = 256;
export const WMDM_STATUS_STORAGE_INITIALIZING = 512;
export const WMDM_STATUS_STORAGE_BROKEN = 1024;
export const WMDM_STATUS_STORAGE_NOTSUPPORTED = 2048;
export const WMDM_STATUS_STORAGE_UNFORMATTED = 4096;
export const WMDM_STATUS_STORAGECONTROL_INSERTING = 8192;
export const WMDM_STATUS_STORAGECONTROL_DELETING = 16384;
export const WMDM_STATUS_STORAGECONTROL_APPENDING = 32768;
export const WMDM_STATUS_STORAGECONTROL_MOVING = 65536;
export const WMDM_STATUS_STORAGECONTROL_READING = 131072;
export const WMDM_DEVICECAP_CANPLAY = 1;
export const WMDM_DEVICECAP_CANSTREAMPLAY = 2;
export const WMDM_DEVICECAP_CANRECORD = 4;
export const WMDM_DEVICECAP_CANSTREAMRECORD = 8;
export const WMDM_DEVICECAP_CANPAUSE = 16;
export const WMDM_DEVICECAP_CANRESUME = 32;
export const WMDM_DEVICECAP_CANSTOP = 64;
export const WMDM_DEVICECAP_CANSEEK = 128;
export const WMDM_DEVICECAP_HASSECURECLOCK = 256;
export const WMDM_SEEK_REMOTECONTROL = 1;
export const WMDM_SEEK_STREAMINGAUDIO = 2;
export const WMDM_STORAGE_ATTR_FILESYSTEM = 1;
export const WMDM_STORAGE_ATTR_REMOVABLE = 2;
export const WMDM_STORAGE_ATTR_NONREMOVABLE = 4;
export const WMDM_FILE_ATTR_FOLDER = 8;
export const WMDM_FILE_ATTR_LINK = 16;
export const WMDM_FILE_ATTR_FILE = 32;
export const WMDM_FILE_ATTR_VIDEO = 64;
export const WMDM_STORAGE_ATTR_CANEDITMETADATA = 128;
export const WMDM_STORAGE_ATTR_FOLDERS = 256;
export const WMDM_FILE_ATTR_AUDIO = 4096;
export const WMDM_FILE_ATTR_DATA = 8192;
export const WMDM_FILE_ATTR_CANPLAY = 16384;
export const WMDM_FILE_ATTR_CANDELETE = 32768;
export const WMDM_FILE_ATTR_CANMOVE = 65536;
export const WMDM_FILE_ATTR_CANRENAME = 131072;
export const WMDM_FILE_ATTR_CANREAD = 262144;
export const WMDM_FILE_ATTR_MUSIC = 524288;
export const WMDM_FILE_CREATE_OVERWRITE = 1048576;
export const WMDM_FILE_ATTR_AUDIOBOOK = 2097152;
export const WMDM_FILE_ATTR_HIDDEN = 4194304;
export const WMDM_FILE_ATTR_SYSTEM = 8388608;
export const WMDM_FILE_ATTR_READONLY = 16777216;
export const WMDM_STORAGE_ATTR_HAS_FOLDERS = 33554432;
export const WMDM_STORAGE_ATTR_HAS_FILES = 67108864;
export const WMDM_STORAGE_IS_DEFAULT = 134217728;
export const WMDM_STORAGE_CONTAINS_DEFAULT = 268435456;
export const WMDM_STORAGE_ATTR_VIRTUAL = 536870912;
export const WMDM_STORAGECAP_FOLDERSINROOT = 1;
export const WMDM_STORAGECAP_FILESINROOT = 2;
export const WMDM_STORAGECAP_FOLDERSINFOLDERS = 4;
export const WMDM_STORAGECAP_FILESINFOLDERS = 8;
export const WMDM_STORAGECAP_FOLDERLIMITEXISTS = 16;
export const WMDM_STORAGECAP_FILELIMITEXISTS = 32;
export const WMDM_STORAGECAP_NOT_INITIALIZABLE = 64;
export const WMDM_MODE_BLOCK = 1;
export const WMDM_MODE_THREAD = 2;
export const WMDM_CONTENT_FILE = 4;
export const WMDM_CONTENT_FOLDER = 8;
export const WMDM_CONTENT_OPERATIONINTERFACE = 16;
export const WMDM_MODE_QUERY = 32;
export const WMDM_MODE_PROGRESS = 64;
export const WMDM_MODE_TRANSFER_PROTECTED = 128;
export const WMDM_MODE_TRANSFER_UNPROTECTED = 256;
export const WMDM_STORAGECONTROL_INSERTBEFORE = 512;
export const WMDM_STORAGECONTROL_INSERTAFTER = 1024;
export const WMDM_STORAGECONTROL_INSERTINTO = 2048;
export const WMDM_MODE_RECURSIVE = 4096;
export const WMDM_RIGHTS_PLAY_ON_PC = 1;
export const WMDM_RIGHTS_COPY_TO_NON_SDMI_DEVICE = 2;
export const WMDM_RIGHTS_COPY_TO_CD = 8;
export const WMDM_RIGHTS_COPY_TO_SDMI_DEVICE = 16;
export const WMDM_SEEK_BEGIN = 1;
export const WMDM_SEEK_CURRENT = 2;
export const WMDM_SEEK_END = 8;
export const DO_NOT_VIRTUALIZE_STORAGES_AS_DEVICES = 1;
export const ALLOW_OUTOFBAND_NOTIFICATION = 2;
export const MDSP_READ = 1;
export const MDSP_WRITE = 2;
export const MDSP_SEEK_BOF = 1;
export const MDSP_SEEK_CUR = 2;
export const MDSP_SEEK_EOF = 4;
export const WMDM_SCP_EXAMINE_EXTENSION = 1;
export const WMDM_SCP_EXAMINE_DATA = 2;
export const WMDM_SCP_DECIDE_DATA = 8;
export const WMDM_SCP_PROTECTED_OUTPUT = 16;
export const WMDM_SCP_UNPROTECTED_OUTPUT = 32;
export const WMDM_SCP_RIGHTS_DATA = 64;
export const WMDM_SCP_TRANSFER_OBJECTDATA = 32;
export const WMDM_SCP_NO_MORE_CHANGES = 64;
export const WMDM_SCP_DRMINFO_NOT_DRMPROTECTED = 0;
export const WMDM_SCP_DRMINFO_V1HEADER = 1;
export const WMDM_SCP_DRMINFO_V2HEADER = 2;
export const SAC_MAC_LEN = 8;
export const WMDM_LOG_SEV_INFO = 1;
export const WMDM_LOG_SEV_WARN = 2;
export const WMDM_LOG_SEV_ERROR = 4;
export const WMDM_LOG_NOTIMESTAMP = 16;
export const g_wszWMDMFileName = "WMDM/FileName";
export const g_wszWMDMFormatCode = "WMDM/FormatCode";
export const g_wszWMDMLastModifiedDate = "WMDM/LastModifiedDate";
export const g_wszWMDMFileCreationDate = "WMDM/FileCreationDate";
export const g_wszWMDMFileSize = "WMDM/FileSize";
export const g_wszWMDMFileAttributes = "WMDM/FileAttributes";
export const g_wszAudioWAVECodec = "WMDM/AudioWAVECodec";
export const g_wszVideoFourCCCodec = "WMDM/VideoFourCCCodec";
export const g_wszWMDMTitle = "WMDM/Title";
export const g_wszWMDMAuthor = "WMDM/Author";
export const g_wszWMDMDescription = "WMDM/Description";
export const g_wszWMDMIsProtected = "WMDM/IsProtected";
export const g_wszWMDMAlbumTitle = "WMDM/AlbumTitle";
export const g_wszWMDMAlbumArtist = "WMDM/AlbumArtist";
export const g_wszWMDMTrack = "WMDM/Track";
export const g_wszWMDMGenre = "WMDM/Genre";
export const g_wszWMDMTrackMood = "WMDM/TrackMood";
export const g_wszWMDMAlbumCoverFormat = "WMDM/AlbumCoverFormat";
export const g_wszWMDMAlbumCoverSize = "WMDM/AlbumCoverSize";
export const g_wszWMDMAlbumCoverHeight = "WMDM/AlbumCoverHeight";
export const g_wszWMDMAlbumCoverWidth = "WMDM/AlbumCoverWidth";
export const g_wszWMDMAlbumCoverDuration = "WMDM/AlbumCoverDuration";
export const g_wszWMDMAlbumCoverData = "WMDM/AlbumCoverData";
export const g_wszWMDMYear = "WMDM/Year";
export const g_wszWMDMComposer = "WMDM/Composer";
export const g_wszWMDMCodec = "WMDM/Codec";
export const g_wszWMDMDRMId = "WMDM/DRMId";
export const g_wszWMDMBitrate = "WMDM/Bitrate";
export const g_wszWMDMBitRateType = "WMDM/BitRateType";
export const g_wszWMDMSampleRate = "WMDM/SampleRate";
export const g_wszWMDMNumChannels = "WMDM/NumChannels";
export const g_wszWMDMBlockAlignment = "WMDM/BlockAlignment";
export const g_wszWMDMAudioBitDepth = "WMDM/AudioBitDepth";
export const g_wszWMDMTotalBitrate = "WMDM/TotalBitrate";
export const g_wszWMDMVideoBitrate = "WMDM/VideoBitrate";
export const g_wszWMDMFrameRate = "WMDM/FrameRate";
export const g_wszWMDMScanType = "WMDM/ScanType";
export const g_wszWMDMKeyFrameDistance = "WMDM/KeyFrameDistance";
export const g_wszWMDMBufferSize = "WMDM/BufferSize";
export const g_wszWMDMQualitySetting = "WMDM/QualitySetting";
export const g_wszWMDMEncodingProfile = "WMDM/EncodingProfile";
export const g_wszWMDMDuration = "WMDM/Duration";
export const g_wszWMDMAlbumArt = "WMDM/AlbumArt";
export const g_wszWMDMBuyNow = "WMDM/BuyNow";
export const g_wszWMDMNonConsumable = "WMDM/NonConsumable";
export const g_wszWMDMediaClassPrimaryID = "WMDM/MediaClassPrimaryID";
export const g_wszWMDMMediaClassSecondaryID = "WMDM/MediaClassSecondaryID";
export const g_wszWMDMUserEffectiveRating = "WMDM/UserEffectiveRating";
export const g_wszWMDMUserRating = "WMDM/UserRating";
export const g_wszWMDMUserRatingOnDevice = "WMDM/UserRatingOnDevice";
export const g_wszWMDMPlayCount = "WMDM/PlayCount";
export const g_wszWMDMDevicePlayCount = "WMDM/DevicePlayCount";
export const g_wszWMDMAuthorDate = "WMDM/AuthorDate";
export const g_wszWMDMUserLastPlayTime = "WMDM/UserLastPlayTime";
export const g_wszWMDMSubTitle = "WMDM/SubTitle";
export const g_wszWMDMSubTitleDescription = "WMDM/SubTitleDescription";
export const g_wszWMDMMediaCredits = "WMDM/MediaCredits";
export const g_wszWMDMMediaStationName = "WMDM/MediaStationName";
export const g_wszWMDMMediaOriginalChannel = "WMDM/MediaOriginalChannel";
export const g_wszWMDMMediaOriginalBroadcastDateTime = "WMDM/MediaOriginalBroadcastDateTime";
export const g_wszWMDMProviderCopyright = "WMDM/ProviderCopyright";
export const g_wszWMDMSyncID = "WMDM/SyncID";
export const g_wszWMDMPersistentUniqueID = "WMDM/PersistentUniqueID";
export const g_wszWMDMWidth = "WMDM/Width";
export const g_wszWMDMHeight = "WMDM/Height";
export const g_wszWMDMSyncTime = "WMDM/SyncTime";
export const g_wszWMDMParentalRating = "WMDM/ParentalRating";
export const g_wszWMDMMetaGenre = "WMDM/MetaGenre";
export const g_wszWMDMIsRepeat = "WMDM/IsRepeat";
export const g_wszWMDMSupportedDeviceProperties = "WMDM/SupportedDeviceProperties";
export const g_wszWMDMDeviceFriendlyName = "WMDM/DeviceFriendlyName";
export const g_wszWMDMFormatsSupported = "WMDM/FormatsSupported";
export const g_wszWMDMFormatsSupportedAreOrdered = "WMDM/FormatsSupportedAreOrdered";
export const g_wszWMDMSyncRelationshipID = "WMDM/SyncRelationshipID";
export const g_wszWMDMDeviceModelName = "WMDM/DeviceModelName";
export const g_wszWMDMDeviceFirmwareVersion = "WMDM/DeviceFirmwareVersion";
export const g_wszWMDMDeviceVendorExtension = "WMDM/DeviceVendorExtension";
export const g_wszWMDMDeviceProtocol = "WMDM/DeviceProtocol";
export const g_wszWMDMDeviceServiceProviderVendor = "WMDM/DeviceServiceProviderVendor";
export const g_wszWMDMDeviceRevocationInfo = "WMDM/DeviceRevocationInfo";
export const g_wszWMDMCollectionID = "WMDM/CollectionID";
export const g_wszWMDMOwner = "WMDM/Owner";
export const g_wszWMDMEditor = "WMDM/Editor";
export const g_wszWMDMWebmaster = "WMDM/Webmaster";
export const g_wszWMDMSourceURL = "WMDM/SourceURL";
export const g_wszWMDMDestinationURL = "WMDM/DestinationURL";
export const g_wszWMDMCategory = "WMDM/Category";
export const g_wszWMDMTimeBookmark = "WMDM/TimeBookmark";
export const g_wszWMDMObjectBookmark = "WMDM/ObjectBookmark";
export const g_wszWMDMByteBookmark = "WMDM/ByteBookmark";
export const g_wszWMDMDataOffset = "WMDM/DataOffset";
export const g_wszWMDMDataLength = "WMDM/DataLength";
export const g_wszWMDMDataUnits = "WMDM/DataUnits";
export const g_wszWMDMTimeToLive = "WMDM/TimeToLive";
export const g_wszWMDMMediaGuid = "WMDM/MediaGuid";
export const g_wszWPDPassthroughPropertyValues = "WPD/PassthroughPropertyValues";
export const MTP_COMMAND_MAX_PARAMS = 5;
export const MTP_RESPONSE_MAX_PARAMS = 5;
export const MTP_RESPONSE_OK = 8193;
export const EC_SND_DEVICE_ERROR_BASE = 512;
export const EC_SNDDEV_IN_ERROR = 512;
export const EC_SNDDEV_OUT_ERROR = 513;
export const EC_SYSTEMBASE = 0;
export const EC_USER = 32768;
export const EC_COMPLETE = 1;
export const EC_USERABORT = 2;
export const EC_ERRORABORT = 3;
export const EC_TIME = 4;
export const EC_REPAINT = 5;
export const EC_STREAM_ERROR_STOPPED = 6;
export const EC_STREAM_ERROR_STILLPLAYING = 7;
export const EC_ERROR_STILLPLAYING = 8;
export const EC_PALETTE_CHANGED = 9;
export const EC_VIDEO_SIZE_CHANGED = 10;
export const EC_QUALITY_CHANGE = 11;
export const EC_SHUTTING_DOWN = 12;
export const EC_CLOCK_CHANGED = 13;
export const EC_PAUSED = 14;
export const EC_OPENING_FILE = 16;
export const EC_BUFFERING_DATA = 17;
export const EC_FULLSCREEN_LOST = 18;
export const EC_ACTIVATE = 19;
export const EC_NEED_RESTART = 20;
export const EC_WINDOW_DESTROYED = 21;
export const EC_DISPLAY_CHANGED = 22;
export const EC_STARVATION = 23;
export const EC_OLE_EVENT = 24;
export const EC_NOTIFY_WINDOW = 25;
export const EC_STREAM_CONTROL_STOPPED = 26;
export const EC_STREAM_CONTROL_STARTED = 27;
export const EC_END_OF_SEGMENT = 28;
export const EC_SEGMENT_STARTED = 29;
export const EC_LENGTH_CHANGED = 30;
export const EC_DEVICE_LOST = 31;
export const EC_SAMPLE_NEEDED = 32;
export const EC_PROCESSING_LATENCY = 33;
export const EC_SAMPLE_LATENCY = 34;
export const EC_SCRUB_TIME = 35;
export const EC_STEP_COMPLETE = 36;
export const EC_TIMECODE_AVAILABLE = 48;
export const EC_EXTDEVICE_MODE_CHANGE = 49;
export const EC_STATE_CHANGE = 50;
export const EC_GRAPH_CHANGED = 80;
export const EC_CLOCK_UNSET = 81;
export const EC_VMR_RENDERDEVICE_SET = 83;
export const VMR_RENDER_DEVICE_OVERLAY = 1;
export const VMR_RENDER_DEVICE_VIDMEM = 2;
export const VMR_RENDER_DEVICE_SYSMEM = 4;
export const EC_VMR_SURFACE_FLIPPED = 84;
export const EC_VMR_RECONNECTION_FAILED = 85;
export const EC_PREPROCESS_COMPLETE = 86;
export const EC_CODECAPI_EVENT = 87;
export const EC_WMT_EVENT_BASE = 593;
export const EC_WMT_INDEX_EVENT = 593;
export const EC_WMT_EVENT = 594;
export const EC_BUILT = 768;
export const EC_UNBUILT = 769;
export const EC_SKIP_FRAMES = 37;
export const EC_PLEASE_REOPEN = 64;
export const EC_STATUS = 65;
export const EC_MARKER_HIT = 66;
export const EC_LOADSTATUS = 67;
export const EC_FILE_CLOSED = 68;
export const EC_ERRORABORTEX = 69;
export const AM_LOADSTATUS_CLOSED = 0;
export const AM_LOADSTATUS_LOADINGDESCR = 1;
export const AM_LOADSTATUS_LOADINGMCAST = 2;
export const AM_LOADSTATUS_LOCATING = 3;
export const AM_LOADSTATUS_CONNECTING = 4;
export const AM_LOADSTATUS_OPENING = 5;
export const AM_LOADSTATUS_OPEN = 6;
export const EC_NEW_PIN = 32;
export const EC_RENDER_FINISHED = 33;
export const EC_EOS_SOON = 70;
export const EC_CONTENTPROPERTY_CHANGED = 71;
export const AM_CONTENTPROPERTY_TITLE = 1;
export const AM_CONTENTPROPERTY_AUTHOR = 2;
export const AM_CONTENTPROPERTY_COPYRIGHT = 4;
export const AM_CONTENTPROPERTY_DESCRIPTION = 8;
export const EC_BANDWIDTHCHANGE = 72;
export const EC_VIDEOFRAMEREADY = 73;
export const EC_DVDBASE = 256;
export const EC_DVD_DOMAIN_CHANGE = 257;
export const EC_DVD_TITLE_CHANGE = 258;
export const EC_DVD_CHAPTER_START = 259;
export const EC_DVD_AUDIO_STREAM_CHANGE = 260;
export const EC_DVD_SUBPICTURE_STREAM_CHANGE = 261;
export const EC_DVD_ANGLE_CHANGE = 262;
export const EC_DVD_BUTTON_CHANGE = 263;
export const EC_DVD_VALID_UOPS_CHANGE = 264;
export const EC_DVD_STILL_ON = 265;
export const EC_DVD_STILL_OFF = 266;
export const EC_DVD_CURRENT_TIME = 267;
export const EC_DVD_ERROR = 268;
export const EC_DVD_WARNING = 269;
export const EC_DVD_CHAPTER_AUTOSTOP = 270;
export const EC_DVD_NO_FP_PGC = 271;
export const EC_DVD_PLAYBACK_RATE_CHANGE = 272;
export const EC_DVD_PARENTAL_LEVEL_CHANGE = 273;
export const EC_DVD_PLAYBACK_STOPPED = 274;
export const EC_DVD_ANGLES_AVAILABLE = 275;
export const EC_DVD_PLAYPERIOD_AUTOSTOP = 276;
export const EC_DVD_BUTTON_AUTO_ACTIVATED = 277;
export const EC_DVD_CMD_START = 278;
export const EC_DVD_CMD_END = 279;
export const EC_DVD_DISC_EJECTED = 280;
export const EC_DVD_DISC_INSERTED = 281;
export const EC_DVD_CURRENT_HMSF_TIME = 282;
export const EC_DVD_KARAOKE_MODE = 283;
export const EC_DVD_PROGRAM_CELL_CHANGE = 284;
export const EC_DVD_TITLE_SET_CHANGE = 285;
export const EC_DVD_PROGRAM_CHAIN_CHANGE = 286;
export const EC_DVD_VOBU_Offset = 287;
export const EC_DVD_VOBU_Timestamp = 288;
export const EC_DVD_GPRM_Change = 289;
export const EC_DVD_SPRM_Change = 290;
export const EC_DVD_BeginNavigationCommands = 291;
export const EC_DVD_NavigationCommand = 292;
export const AM_AC3_ALTERNATE_AUDIO_1 = 1;
export const AM_AC3_ALTERNATE_AUDIO_2 = 2;
export const AM_AC3_ALTERNATE_AUDIO_BOTH = 3;
export const AM_AC3_SERVICE_MAIN_AUDIO = 0;
export const AM_AC3_SERVICE_NO_DIALOG = 1;
export const AM_AC3_SERVICE_VISUALLY_IMPAIRED = 2;
export const AM_AC3_SERVICE_HEARING_IMPAIRED = 3;
export const AM_AC3_SERVICE_DIALOG_ONLY = 4;
export const AM_AC3_SERVICE_COMMENTARY = 5;
export const AM_AC3_SERVICE_EMERGENCY_FLASH = 6;
export const AM_AC3_SERVICE_VOICE_OVER = 7;
export const AM_UseNewCSSKey = 1;
export const AM_ReverseBlockStart = 2;
export const AM_ReverseBlockEnd = 4;
export const AM_DVD_CGMS_RESERVED_MASK = 120;
export const AM_DVD_CGMS_COPY_PROTECT_MASK = 24;
export const AM_DVD_CGMS_COPY_PERMITTED = 0;
export const AM_DVD_CGMS_COPY_ONCE = 16;
export const AM_DVD_CGMS_NO_COPY = 24;
export const AM_DVD_COPYRIGHT_MASK = 64;
export const AM_DVD_NOT_COPYRIGHTED = 0;
export const AM_DVD_COPYRIGHTED = 64;
export const AM_DVD_SECTOR_PROTECT_MASK = 32;
export const AM_DVD_SECTOR_NOT_PROTECTED = 0;
export const AM_DVD_SECTOR_PROTECTED = 32;
export const AMINTERLACE_IsInterlaced = 1;
export const AMINTERLACE_1FieldPerSample = 2;
export const AMINTERLACE_Field1First = 4;
export const AMINTERLACE_UNUSED = 8;
export const AMINTERLACE_FieldPatternMask = 48;
export const AMINTERLACE_FieldPatField1Only = 0;
export const AMINTERLACE_FieldPatField2Only = 16;
export const AMINTERLACE_FieldPatBothRegular = 32;
export const AMINTERLACE_FieldPatBothIrregular = 48;
export const AMINTERLACE_DisplayModeMask = 192;
export const AMINTERLACE_DisplayModeBobOnly = 0;
export const AMINTERLACE_DisplayModeWeaveOnly = 64;
export const AMINTERLACE_DisplayModeBobOrWeave = 128;
export const AMCOPYPROTECT_RestrictDuplication = 1;
export const AMCONTROL_USED = 1;
export const AMCONTROL_PAD_TO_4x3 = 2;
export const AMCONTROL_PAD_TO_16x9 = 4;
export const AMCONTROL_COLORINFO_PRESENT = 128;
export const AM_VIDEO_FLAG_FIELD_MASK = 3;
export const AM_VIDEO_FLAG_INTERLEAVED_FRAME = 0;
export const AM_VIDEO_FLAG_FIELD1 = 1;
export const AM_VIDEO_FLAG_FIELD2 = 2;
export const AM_VIDEO_FLAG_FIELD1FIRST = 4;
export const AM_VIDEO_FLAG_WEAVE = 8;
export const AM_VIDEO_FLAG_IPB_MASK = 48;
export const AM_VIDEO_FLAG_I_SAMPLE = 0;
export const AM_VIDEO_FLAG_P_SAMPLE = 16;
export const AM_VIDEO_FLAG_B_SAMPLE = 32;
export const AM_VIDEO_FLAG_REPEAT_FIELD = 64;
export const AVIF_HASINDEX = 16;
export const AVIF_MUSTUSEINDEX = 32;
export const AVIF_ISINTERLEAVED = 256;
export const AVIF_TRUSTCKTYPE = 2048;
export const AVIF_WASCAPTUREFILE = 65536;
export const AVIF_COPYRIGHTED = 131072;
export const AVI_HEADERSIZE = 2048;
export const AVISF_DISABLED = 1;
export const AVISF_VIDEO_PALCHANGES = 65536;
export const AVIIF_LIST = 1;
export const AVIIF_KEYFRAME = 16;
export const AVIIF_FIRSTPART = 32;
export const AVIIF_LASTPART = 64;
export const AVIIF_NOTIME = 256;
export const AVIIF_COMPUSE = 268369920;
export const AVIIF_NO_TIME = 256;
export const AVIIF_COMPRESSOR = 268369920;
export const TIMECODE_RATE_30DROP = 0;
export const TIMECODE_SMPTE_BINARY_GROUP = 7;
export const TIMECODE_SMPTE_COLOR_FRAME = 8;
export const AVI_INDEX_OF_INDEXES = 0;
export const AVI_INDEX_OF_CHUNKS = 1;
export const AVI_INDEX_OF_TIMED_CHUNKS = 2;
export const AVI_INDEX_OF_SUB_2FIELD = 3;
export const AVI_INDEX_IS_DATA = 128;
export const AVI_INDEX_SUB_DEFAULT = 0;
export const AVI_INDEX_SUB_2FIELD = 1;
export const STDINDEXSIZE = 16384;
export const AVISTDINDEX_DELTAFRAME = 2147483648;
export const AMVA_TYPEINDEX_OUTPUTFRAME = 4294967295;
export const AMVA_QUERYRENDERSTATUSF_READ = 1;
export const MIN_DIMENSION = 1;
export const BDA_PLP_ID_NOT_SET = "-1";
export const CDEF_CLASS_DEFAULT = 1;
export const CDEF_BYPASS_CLASS_MANAGER = 2;
export const CDEF_MERIT_ABOVE_DO_NOT_USE = 8;
export const CDEF_DEVMON_CMGR_DEVICE = 16;
export const CDEF_DEVMON_DMO = 32;
export const CDEF_DEVMON_PNP_DEVICE = 64;
export const CDEF_DEVMON_FILTER = 128;
export const CDEF_DEVMON_SELECTIVE_MASK = 240;
export const CHARS_IN_GUID = 39;
export const MAX_PIN_NAME = 128;
export const MAX_FILTER_NAME = 128;
export const AM_GBF_PREVFRAMESKIPPED = 1;
export const AM_GBF_NOTASYNCPOINT = 2;
export const AM_GBF_NOWAIT = 4;
export const AM_GBF_NODDSURFACELOCK = 8;
export const AMF_AUTOMATICGAIN = "-1";
export const AnalogVideo_NTSC_Mask = 7;
export const AnalogVideo_PAL_Mask = 1052656;
export const AnalogVideo_SECAM_Mask = 1044480;
export const MPEG2_PROGRAM_STREAM_MAP = 0;
export const MPEG2_PROGRAM_ELEMENTARY_STREAM = 1;
export const MPEG2_PROGRAM_DIRECTORY_PES_PACKET = 2;
export const MPEG2_PROGRAM_PACK_HEADER = 3;
export const MPEG2_PROGRAM_PES_STREAM = 4;
export const MPEG2_PROGRAM_SYSTEM_HEADER = 5;
export const SUBSTREAM_FILTER_VAL_NONE = 268435456;
export const AM_GETDECODERCAP_QUERY_VMR_SUPPORT = 1;
export const VMR_NOTSUPPORTED = 0;
export const VMR_SUPPORTED = 1;
export const AM_QUERY_DECODER_VMR_SUPPORT = 1;
export const AM_QUERY_DECODER_DXVA_1_SUPPORT = 2;
export const AM_QUERY_DECODER_DVD_SUPPORT = 3;
export const AM_QUERY_DECODER_ATSC_SD_SUPPORT = 4;
export const AM_QUERY_DECODER_ATSC_HD_SUPPORT = 5;
export const AM_GETDECODERCAP_QUERY_VMR9_SUPPORT = 6;
export const AM_GETDECODERCAP_QUERY_EVR_SUPPORT = 7;
export const DECODER_CAP_NOTSUPPORTED = 0;
export const DECODER_CAP_SUPPORTED = 1;
export const VMRBITMAP_DISABLE = 1;
export const VMRBITMAP_HDC = 2;
export const VMRBITMAP_ENTIREDDS = 4;
export const VMRBITMAP_SRCCOLORKEY = 8;
export const VMRBITMAP_SRCRECT = 16;
export const DVD_TITLE_MENU = 0;
export const DVD_STREAM_DATA_CURRENT = 2048;
export const DVD_STREAM_DATA_VMGM = 1024;
export const DVD_STREAM_DATA_VTSM = 1025;
export const DVD_DEFAULT_AUDIO_STREAM = 15;
export const DVD_AUDIO_CAPS_AC3 = 1;
export const DVD_AUDIO_CAPS_MPEG2 = 2;
export const DVD_AUDIO_CAPS_LPCM = 4;
export const DVD_AUDIO_CAPS_DTS = 8;
export const DVD_AUDIO_CAPS_SDDS = 16;
export const PBDA_Encoder_Audio_AlgorithmType_MPEG1LayerII = 0;
export const PBDA_Encoder_Audio_AlgorithmType_AC3 = 1;
export const PBDA_Encoder_Video_MPEG2PartII = 0;
export const PBDA_Encoder_Video_MPEG4Part10 = 1;
export const PBDA_Encoder_Video_AVC = 1;
export const PBDA_Encoder_Video_H264 = 1;
export const PBDA_Encoder_BitrateMode_Constant = 1;
export const PBDA_Encoder_BitrateMode_Variable = 2;
export const PBDA_Encoder_BitrateMode_Average = 3;
export const AMDDS_NONE = 0;
export const AMDDS_DCIPS = 1;
export const AMDDS_PS = 2;
export const AMDDS_RGBOVR = 4;
export const AMDDS_YUVOVR = 8;
export const AMDDS_RGBOFF = 16;
export const AMDDS_YUVOFF = 32;
export const AMDDS_RGBFLP = 64;
export const AMDDS_YUVFLP = 128;
export const AMDDS_ALL = 255;
export const AMDDS_DEFAULT = 255;
export const iPALETTE_COLORS = 256;
export const iEGA_COLORS = 16;
export const iMASK_COLORS = 3;
export const iTRUECOLOR = 16;
export const iRED = 0;
export const iGREEN = 1;
export const iBLUE = 2;
export const iPALETTE = 8;
export const iMAXBITS = 8;
export const MAX_SIZE_MPEG1_SEQUENCE_INFO = 140;
export const AM_MPEG_AUDIO_DUAL_MERGE = 0;
export const AM_MPEG_AUDIO_DUAL_LEFT = 1;
export const AM_MPEG_AUDIO_DUAL_RIGHT = 2;
export const VFW_FIRST_CODE = 512;
export const MAX_ERROR_TEXT_LEN = 160;
export const MPBOOL_TRUE = 1;
export const MPBOOL_FALSE = 0;
export const DWORD_ALLPARAMS = "-1";
export const MPF_ENVLP_STANDARD = 0;
export const MPF_ENVLP_BEGIN_CURRENTVAL = 1;
export const MPF_ENVLP_BEGIN_NEUTRALVAL = 2;
export const MPF_PUNCHIN_REFTIME = 0;
export const MPF_PUNCHIN_NOW = 1;
export const MPF_PUNCHIN_STOPPED = 2;
export const VFW_E_INVALIDMEDIATYPE = 288827430293209600n;
export const VFW_E_INVALIDSUBTYPE = 288795544456004097n;
export const VFW_E_NEED_OWNER = 1187558720002;
export const VFW_E_ENUM_OUT_OF_SYNC = 288797743479259651n;
export const VFW_E_ALREADY_CONNECTED = 288798842990887428n;
export const VFW_E_FILTER_ACTIVE = 288799942502515205n;
export const VFW_E_NO_TYPES = 288801042014142982n;
export const VFW_E_NO_ACCEPTABLE_TYPES = 288802141525770759n;
export const VFW_E_INVALID_DIRECTION = 288803241037398536n;
export const VFW_E_NOT_CONNECTED = 288804340549026313n;
export const VFW_E_NO_ALLOCATOR = 288805440060654090n;
export const VFW_E_RUNTIME_ERROR = 288806539572281867n;
export const VFW_E_BUFFER_NOTSET = 288807639083909644n;
export const VFW_E_BUFFER_OVERFLOW = 288808738595537421n;
export const VFW_E_BADALIGN = 288809838107165198n;
export const VFW_E_ALREADY_COMMITTED = 288810937618792975n;
export const VFW_E_BUFFERS_OUTSTANDING = 288864813688554000n;
export const VFW_E_NOT_COMMITTED = 288814236153676305n;
export const VFW_E_SIZENOTSET = 288823032246698514n;
export const VFW_E_NO_CLOCK = 288815335665304083n;
export const VFW_E_NO_SINK = 288816435176931860n;
export const VFW_E_NO_INTERFACE = 288817534688559637n;
export const VFW_E_NOT_FOUND = 288818634200187414n;
export const VFW_E_CANNOT_CONNECT = 988480280986135;
export const VFW_E_CANNOT_RENDER = 288821932735070744n;
export const VFW_E_CHANGING_FORMAT = 288830728828092953n;
export const VFW_E_NO_COLOR_KEY_SET = 288824131758326298n;
export const VFW_E_NOT_OVERLAY_CONNECTION = 288820833223442971n;
export const VFW_E_NOT_SAMPLE_CONNECTION = 288825231269954076n;
export const VFW_E_PALETTE_SET = 288826330781581853n;
export const VFW_E_COLOR_KEY_SET = 288828529804837406n;
export const VFW_E_NO_COLOR_KEY_FOUND = 288793345432748575n;
export const VFW_E_NO_PALETTE_AVAILABLE = 288829629316465184n;
export const VFW_E_NO_DISPLAY_PALETTE = 288832927851348513n;
export const VFW_E_TOO_MANY_COLORS = 288831828339720738n;
export const VFW_E_STATE_CHANGED = 288848321014137379n;
export const VFW_E_NOT_STOPPED = 288834027362976292n;
export const VFW_E_NOT_PAUSED = 288835126874604069n;
export const VFW_E_NOT_RUNNING = 288836226386231846n;
export const VFW_E_WRONG_STATE = 288837325897859623n;
export const VFW_E_START_TIME_AFTER_END = 288838425409487400n;
export const VFW_E_INVALID_RECT = 288839524921115177n;
export const VFW_E_TYPE_NOT_ACCEPTED = 288840624432742954n;
export const VFW_E_SAMPLE_REJECTED = 288841723944370731n;
export const VFW_E_SAMPLE_REJECTED_EOS = 288842823455998508n;
export const VFW_E_DUPLICATE_NAME = 288842823455998509n;
export const VFW_S_DUPLICATE_NAME = 288843920820142637n;
export const VFW_E_TIMEOUT = 288845022479254062n;
export const VFW_E_INVALID_FILE_FORMAT = 288846121990881839n;
export const VFW_E_ENUM_OUT_OF_RANGE = 288847221502509616n;
export const VFW_E_CIRCULAR_GRAPH = 288850520037392945n;
export const VFW_E_NOT_ALLOWED_TO_SAVE = 288849420525765170n;
export const VFW_E_TIME_ALREADY_PASSED = 288851619549020723n;
export const VFW_E_ALREADY_CANCELLED = 288853818572276276n;
export const VFW_E_CORRUPT_GRAPH_FILE = 288852719060648501n;
export const VFW_E_ADVISE_ALREADY_SET = 288853818572276278n;
export const VFW_S_STATE_INTERMEDIATE = 288858214471303735n;
export const VFW_E_NO_MODEX_AVAILABLE = 288856017595531832n;
export const VFW_E_NO_ADVISE_SET = 288857117107159609n;
export const VFW_E_NO_FULLSCREEN = 288883505386226234n;
export const VFW_E_IN_FULLSCREEN_MODE = 288863714176926267n;
export const VFW_E_UNKNOWN_FILE_TYPE = 288865913200181824n;
export const VFW_E_CANNOT_LOAD_SOURCE_FILTER = 288813136642048577n;
export const VFW_S_PARTIAL_RENDER = 288867010564325954n;
export const VFW_E_FILE_TOO_SHORT = 288868112223437379n;
export const VFW_E_INVALID_FILE_VERSION = 288869211735065156n;
export const VFW_S_SOME_DATA_IGNORED = 288870309099209285n;
export const VFW_S_CONNECTIONS_DEFERRED = 288871408610837062n;
export const VFW_E_INVALID_CLSID = 288872510269948487n;
export const VFW_E_INVALID_MEDIA_TYPE = 289340902223381064n;
export const VFW_E_BAD_KEY = 288515168990921714n;
export const VFW_S_NO_MORE_ITEMS = 288873607634092291n;
export const VFW_E_SAMPLE_TIME_NOT_SET = 288881306362970697n;
export const VFW_S_RESOURCE_NOT_NEEDED = 288882403727114832n;
export const VFW_E_MEDIA_TIME_NOT_SET = 288883505386226257n;
export const VFW_E_NO_TIME_FORMAT_SET = 288884604897854034n;
export const VFW_E_MONO_AUDIO_HW = 288886803921109587n;
export const VFW_S_MEDIA_TYPE_IGNORED = 346777188487660116n;
export const VFW_E_NO_DECOMPRESSOR = 288887903432737365n;
export const VFW_E_NO_AUDIO_HARDWARE = 288889002944365142n;
export const VFW_S_VIDEO_NOT_RENDERED = 288890100308509271n;
export const VFW_S_AUDIO_NOT_RENDERED = 288891199820137048n;
export const VFW_E_RPZA = 288892301479248473n;
export const VFW_S_RPZA = 288893398843392602n;
export const VFW_E_PROCESSOR_NOT_SUITABLE = 288894500502504027n;
export const VFW_E_UNSUPPORTED_AUDIO = 288895600014131804n;
export const VFW_E_UNSUPPORTED_VIDEO = 288896699525759581n;
export const VFW_E_MPEG_NOT_CONSTRAINED = 288897799037387358n;
export const VFW_E_NOT_IN_GRAPH = 288898898549015135n;
export const VFW_S_ESTIMATED = 288899995913159264n;
export const VFW_E_NO_TIME_FORMAT = 288901097572270689n;
export const VFW_E_READ_ONLY = 288902197083898466n;
export const VFW_S_RESERVED = 288903294448042595n;
export const VFW_E_BUFFER_UNDERFLOW = 288904396107154020n;
export const VFW_E_UNSUPPORTED_STREAM = 288905495618781797n;
export const VFW_E_NO_TRANSPORT = 288906595130409574n;
export const VFW_S_STREAM_OFF = 288907692494553703n;
export const VFW_S_CANT_CUE = 288908792006181480n;
export const VFW_E_BAD_VIDEOCD = 288916490735059561n;
export const VFW_S_NO_STOP_TIME = 288917588099203696n;
export const VFW_E_OUT_OF_VIDEO_MEMORY = 288918689758315121n;
export const VFW_E_VP_NEGOTIATION_FAILED = 288919789269942898n;
export const VFW_E_DDRAW_CAPS_NOT_SUITABLE = 288920888781570675n;
export const VFW_E_NO_VP_HARDWARE = 288921988293198452n;
export const VFW_E_NO_CAPTURE_HARDWARE = 288923087804826229n;
export const VFW_E_DVD_OPERATION_INHIBITED = 288924187316454006n;
export const VFW_E_DVD_INVALIDDOMAIN = 288925286828081783n;
export const VFW_E_DVD_NO_BUTTON = 288926386339709560n;
export const VFW_E_DVD_GRAPHNOTREADY = 288927485851337337n;
export const VFW_E_DVD_RENDERFAIL = 288928585362965114n;
export const VFW_E_DVD_DECNOTENOUGH = 288929684874592891n;
export const VFW_E_DDRAW_VERSION_NOT_SUITABLE = 288930784386220668n;
export const VFW_E_COPYPROT_FAILED = 288931883897848445n;
export const VFW_S_NOPREVIEWPIN = 288932981261992574n;
export const VFW_E_TIME_EXPIRED = 288934082921103999n;
export const VFW_S_DVD_NON_ONE_SEQUENTIAL = 288935180285248128n;
export const VFW_E_DVD_WRONG_SPEED = 288936281944359553n;
export const VFW_E_DVD_MENU_DOES_NOT_EXIST = 288937381455987330n;
export const VFW_E_DVD_CMD_CANCELLED = 288938480967615107n;
export const VFW_E_DVD_STATE_WRONG_VERSION = 288939580479242884n;
export const VFW_E_DVD_STATE_CORRUPT = 288940679990870661n;
export const VFW_E_DVD_STATE_WRONG_DISC = 288941779502498438n;
export const VFW_E_DVD_INCOMPATIBLE_REGION = 288942879014126215n;
export const VFW_E_DVD_NO_ATTRIBUTES = 288943978525753992n;
export const VFW_E_DVD_NO_GOUP_PGC = 288945078037381769n;
export const VFW_E_DVD_LOW_PARENTAL_LEVEL = 288946177549009546n;
export const VFW_E_DVD_NOT_IN_KARAOKE_MODE = 288947277060637323n;
export const VFW_S_DVD_CHANNEL_CONTENTS_NOT_AVAILABLE = 288948374424781452n;
export const VFW_S_DVD_NOT_ACCURATE = 288949473936409229n;
export const VFW_E_FRAME_STEP_UNSUPPORTED = 288950575595520654n;
export const VFW_E_DVD_STREAM_DISABLED = 288951675107148431n;
export const VFW_E_DVD_TITLE_UNKNOWN = 288952774618776208n;
export const VFW_E_DVD_INVALID_DISC = 288953874130403985n;
export const VFW_E_DVD_NO_RESUME_INFORMATION = 288954973642031762n;
export const VFW_E_PIN_ALREADY_BLOCKED_ON_THIS_THREAD = 288956073153659539n;
export const VFW_E_PIN_ALREADY_BLOCKED = 288957172665287316n;
export const VFW_E_CERTIFICATION_FAILURE = 288958272176915093n;
export const VFW_E_VMR_NOT_IN_MIXER_MODE = 288959371688542870n;
export const VFW_E_VMR_NO_AP_SUPPLIED = 288960471200170647n;
export const VFW_E_VMR_NO_DEINTERLACE_HW = 288961570711798424n;
export const VFW_E_VMR_NO_PROCAMP_HW = 288962670223426201n;
export const VFW_E_DVD_VMR9_INCOMPATIBLEDEC = 288963769735053978n;
export const VFW_E_NO_COPP_HW = 288964869246681755n;
export const VFW_E_DVD_NONBLOCKING = 288965968758309532n;
export const VFW_E_DVD_TOO_MANY_RENDERERS_IN_FILTER_GRAPH = 288967068269937309n;
export const VFW_E_DVD_NON_EVR_RENDERER_IN_FILTER_GRAPH = 288968167781565086n;
export const VFW_E_DVD_RESOLUTION_ERROR = 505689606197609119n;
export const E_PROP_SET_UNSUPPORTED = 505687407174550674n;
export const E_PROP_ID_UNSUPPORTED = 289092412595700880n;
export const VFW_E_CODECAPI_LINEAR_RANGE = 289093512107131664n;
export const VFW_E_CODECAPI_ENUMERATED = 289095711130387217n;
export const VFW_E_CODECAPI_NO_DEFAULT = 289096810642014995n;
export const VFW_E_CODECAPI_NO_CURRENT_VALUE = 289097910153642772n;
export const VFW_E_DVD_CHAPTER_DOES_NOT_EXIST = 289110004781548309n;
export const VFW_S_DVD_RENDER_STATUS = 7566142163910918944n;
export const CFSTR_VFW_FILTERLIST = "Video for Windows 4 Filters";
export const DXVA_RESTRICTED_MODE_UNRESTRICTED = 65535;
export const DXVA_RESTRICTED_MODE_H261_A = 1;
export const DXVA_RESTRICTED_MODE_H261_B = 2;
export const DXVA_RESTRICTED_MODE_H263_A = 3;
export const DXVA_RESTRICTED_MODE_H263_B = 4;
export const DXVA_RESTRICTED_MODE_H263_C = 5;
export const DXVA_RESTRICTED_MODE_H263_D = 6;
export const DXVA_RESTRICTED_MODE_H263_E = 7;
export const DXVA_RESTRICTED_MODE_H263_F = 8;
export const DXVA_RESTRICTED_MODE_MPEG1_A = 9;
export const DXVA_RESTRICTED_MODE_MPEG2_A = 10;
export const DXVA_RESTRICTED_MODE_MPEG2_B = 11;
export const DXVA_RESTRICTED_MODE_MPEG2_C = 12;
export const DXVA_RESTRICTED_MODE_MPEG2_D = 13;
export const DXVA_RESTRICTED_MODE_MPEG1_VLD = 16;
export const DXVA_RESTRICTED_MODE_MPEG2and1_VLD = 17;
export const DXVA_RESTRICTED_MODE_H264_A = 100;
export const DXVA_RESTRICTED_MODE_H264_B = 101;
export const DXVA_RESTRICTED_MODE_H264_C = 102;
export const DXVA_RESTRICTED_MODE_H264_D = 103;
export const DXVA_RESTRICTED_MODE_H264_E = 104;
export const DXVA_RESTRICTED_MODE_H264_F = 105;
export const DXVA_RESTRICTED_MODE_H264_VLD_WITHFMOASO_NOFGT = 112;
export const DXVA_RESTRICTED_MODE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = 113;
export const DXVA_RESTRICTED_MODE_H264_VLD_STEREO_NOFGT = 114;
export const DXVA_RESTRICTED_MODE_H264_VLD_MULTIVIEW_NOFGT = 115;
export const DXVA_RESTRICTED_MODE_WMV8_A = 128;
export const DXVA_RESTRICTED_MODE_WMV8_B = 129;
export const DXVA_RESTRICTED_MODE_WMV9_A = 144;
export const DXVA_RESTRICTED_MODE_WMV9_B = 145;
export const DXVA_RESTRICTED_MODE_WMV9_C = 148;
export const DXVA_RESTRICTED_MODE_VC1_A = 160;
export const DXVA_RESTRICTED_MODE_VC1_B = 161;
export const DXVA_RESTRICTED_MODE_VC1_C = 162;
export const DXVA_RESTRICTED_MODE_VC1_D = 163;
export const DXVA_RESTRICTED_MODE_VC1_D2010 = 164;
export const DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_SIMPLE = 176;
export const DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_NOGMC = 177;
export const DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_GMC = 178;
export const DXVA_RESTRICTED_MODE_WMV8_POSTPROC = 128;
export const DXVA_RESTRICTED_MODE_WMV8_MOCOMP = 129;
export const DXVA_RESTRICTED_MODE_WMV9_POSTPROC = 144;
export const DXVA_RESTRICTED_MODE_WMV9_MOCOMP = 145;
export const DXVA_RESTRICTED_MODE_WMV9_IDCT = 148;
export const DXVA_RESTRICTED_MODE_VC1_POSTPROC = 160;
export const DXVA_RESTRICTED_MODE_VC1_MOCOMP = 161;
export const DXVA_RESTRICTED_MODE_VC1_IDCT = 162;
export const DXVA_RESTRICTED_MODE_VC1_VLD = 163;
export const DXVA_RESTRICTED_MODE_H264_MOCOMP_NOFGT = 100;
export const DXVA_RESTRICTED_MODE_H264_MOCOMP_FGT = 101;
export const DXVA_RESTRICTED_MODE_H264_IDCT_NOFGT = 102;
export const DXVA_RESTRICTED_MODE_H264_IDCT_FGT = 103;
export const DXVA_RESTRICTED_MODE_H264_VLD_NOFGT = 104;
export const DXVA_RESTRICTED_MODE_H264_VLD_FGT = 105;
export const DXVA_COMPBUFFER_TYPE_THAT_IS_NOT_USED = 0;
export const DXVA_PICTURE_DECODE_BUFFER = 1;
export const DXVA_MACROBLOCK_CONTROL_BUFFER = 2;
export const DXVA_RESIDUAL_DIFFERENCE_BUFFER = 3;
export const DXVA_DEBLOCKING_CONTROL_BUFFER = 4;
export const DXVA_INVERSE_QUANTIZATION_MATRIX_BUFFER = 5;
export const DXVA_SLICE_CONTROL_BUFFER = 6;
export const DXVA_BITSTREAM_DATA_BUFFER = 7;
export const DXVA_AYUV_BUFFER = 8;
export const DXVA_IA44_SURFACE_BUFFER = 9;
export const DXVA_DPXD_SURFACE_BUFFER = 10;
export const DXVA_HIGHLIGHT_BUFFER = 11;
export const DXVA_DCCMD_SURFACE_BUFFER = 12;
export const DXVA_ALPHA_BLEND_COMBINATION_BUFFER = 13;
export const DXVA_PICTURE_RESAMPLE_BUFFER = 14;
export const DXVA_READ_BACK_BUFFER = 15;
export const DXVA_MOTION_VECTOR_BUFFER = 16;
export const DXVA_FILM_GRAIN_BUFFER = 17;
export const DXVA_NUM_TYPES_COMP_BUFFERS = 18;
export const DXVA_PICTURE_DECODING_FUNCTION = 1;
export const DXVA_ALPHA_BLEND_DATA_LOAD_FUNCTION = 2;
export const DXVA_ALPHA_BLEND_COMBINATION_FUNCTION = 3;
export const DXVA_PICTURE_RESAMPLE_FUNCTION = 4;
export const DXVA_DEBLOCKING_FILTER_FUNCTION = 5;
export const DXVA_FILM_GRAIN_SYNTHESIS_FUNCTION = 6;
export const DXVA_STATUS_REPORTING_FUNCTION = 7;
export const DXVA_EXECUTE_RETURN_OK = 0;
export const DXVA_EXECUTE_RETURN_DATA_ERROR_MINOR = 1;
export const DXVA_EXECUTE_RETURN_DATA_ERROR_SIGNIF = 2;
export const DXVA_EXECUTE_RETURN_DATA_ERROR_SEVERE = 3;
export const DXVA_EXECUTE_RETURN_OTHER_ERROR_SEVERE = 4;
export const DXVA_QUERYORREPLYFUNCFLAG_DECODER_PROBE_QUERY = 16777201;
export const DXVA_QUERYORREPLYFUNCFLAG_DECODER_LOCK_QUERY = 16777205;
export const DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_COPY = 16777208;
export const DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_PLUS = 16777209;
export const DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_OK_COPY = 16777212;
export const DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_FALSE_PLUS = 16777211;
export const DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_FALSE_PLUS = 16777215;
export const DXVA_ENCRYPTPROTOCOLFUNCFLAG_HOST = 16776960;
export const DXVA_ENCRYPTPROTOCOLFUNCFLAG_ACCEL = 16776968;
export const DXVA_CHROMA_FORMAT_420 = 1;
export const DXVA_CHROMA_FORMAT_422 = 2;
export const DXVA_CHROMA_FORMAT_444 = 3;
export const DXVA_PICTURE_STRUCTURE_TOP_FIELD = 1;
export const DXVA_PICTURE_STRUCTURE_BOTTOM_FIELD = 2;
export const DXVA_PICTURE_STRUCTURE_FRAME = 3;
export const DXVA_BIDIRECTIONAL_AVERAGING_MPEG2_ROUND = 0;
export const DXVA_BIDIRECTIONAL_AVERAGING_H263_TRUNC = 1;
export const DXVA_MV_PRECISION_AND_CHROMA_RELATION_MPEG2 = 0;
export const DXVA_MV_PRECISION_AND_CHROMA_RELATION_H263 = 1;
export const DXVA_MV_PRECISION_AND_CHROMA_RELATION_H261 = 2;
export const DXVA_SCAN_METHOD_ZIG_ZAG = 0;
export const DXVA_SCAN_METHOD_ALTERNATE_VERTICAL = 1;
export const DXVA_SCAN_METHOD_ALTERNATE_HORIZONTAL = 2;
export const DXVA_SCAN_METHOD_ARBITRARY = 3;
export const DXVA_BITSTREAM_CONCEALMENT_NEED_UNLIKELY = 0;
export const DXVA_BITSTREAM_CONCEALMENT_NEED_MILD = 1;
export const DXVA_BITSTREAM_CONCEALMENT_NEED_LIKELY = 2;
export const DXVA_BITSTREAM_CONCEALMENT_NEED_SEVERE = 3;
export const DXVA_BITSTREAM_CONCEALMENT_METHOD_UNSPECIFIED = 0;
export const DXVA_BITSTREAM_CONCEALMENT_METHOD_INTRA = 1;
export const DXVA_BITSTREAM_CONCEALMENT_METHOD_FORWARD = 2;
export const DXVA_BITSTREAM_CONCEALMENT_METHOD_BACKWARD = 3;
export const DXVA_USUAL_BLOCK_WIDTH = 8;
export const DXVA_USUAL_BLOCK_HEIGHT = 8;
export const DXVA_NumMV_OBMC_off_BinPBwith4MV_off = 4;
export const DXVA_NumMV_OBMC_off_BinPBwith4MV_on = 5;
export const DXVA_NumMV_OBMC_on__BinPB_off = 10;
export const DXVA_NumMV_OBMC_on__BinPB_on = 11;
export const DXVA_CONFIG_DATA_TYPE_IA44 = 0;
export const DXVA_CONFIG_DATA_TYPE_AI44 = 1;
export const DXVA_CONFIG_DATA_TYPE_DPXD = 2;
export const DXVA_CONFIG_DATA_TYPE_AYUV = 3;
export const DXVA_CONFIG_BLEND_TYPE_FRONT_BUFFER = 0;
export const DXVA_CONFIG_BLEND_TYPE_BACK_HARDWARE = 1;
export const DXVA_ExtColorData_ShiftBase = 8;
export const MAX_DEINTERLACE_SURFACES = 32;
export const DXVA_DeinterlaceBltFnCode = 1;
export const DXVA_DeinterlaceBltExFnCode = 2;
export const MAX_DEINTERLACE_DEVICE_GUIDS = 32;
export const DXVA_DeinterlaceQueryAvailableModesFnCode = 1;
export const DXVA_DeinterlaceQueryModeCapsFnCode = 2;
export const DXVA_ProcAmpControlQueryCapsFnCode = 3;
export const DXVA_ProcAmpControlQueryRangeFnCode = 4;
export const DXVA_ProcAmpControlBltFnCode = 1;
export const DXVA_COPPGetCertificateLengthFnCode = 1;
export const DXVA_COPPKeyExchangeFnCode = 2;
export const DXVA_COPPSequenceStartFnCode = 3;
export const DXVA_COPPCommandFnCode = 4;
export const COPP_NoProtectionLevelAvailable = "-1";
export const COPP_DefaultProtectionLevel = 0;
export const COPP_ImageAspectRatio_EN300294_Mask = 7;
export const DXVA_COPPQueryStatusFnCode = 5;
export const DTV_CardStatus_Inserted = 0;
export const DTV_CardStatus_Removed = 1;
export const DTV_CardStatus_Error = 2;
export const DTV_CardStatus_FirmwareDownload = 3;
export const OCUR_PAIRING_PROTOCOL_VERSION = 2;
export const PBDA_PAIRING_PROTOCOL_VERSION = 3;
export const DTV_MMIMessage_Open = 0;
export const DTV_MMIMessage_Close = 1;
export const DTV_Entitlement_CanDecrypt = 0;
export const DTV_Entitlement_NotEntitled = 1;
export const DTV_Entitlement_TechnicalFailure = 2;
export const AudioType_Standard = 0;
export const AudioType_Music_And_Effects = 1;
export const AudioType_Visually_Impaired = 2;
export const AudioType_Hearing_Impaired = 3;
export const AudioType_Dialogue = 4;
export const AudioType_Commentary = 5;
export const AudioType_Emergency = 6;
export const AudioType_Voiceover = 7;
export const AudioType_Reserved = "-1";
export const MAX_COUNTRY_CODE_STRING = 3;
export const PARENTAL_CONTROL_TIME_RANGE = 1;
export const REQUIRED_PARENTAL_CONTROL_TIME_RANGE = 2;
export const PARENTAL_CONTROL_CONTENT_RATING = 256;
export const PARENTAL_CONTROL_ATTRIB_VIOLENCE = 512;
export const PARENTAL_CONTROL_ATTRIB_LANGUAGE = 513;
export const PARENTAL_CONTROL_ATTRIB_SEXUAL = 514;
export const PARENTAL_CONTROL_ATTRIB_DIALOGUE = 515;
export const PARENTAL_CONTROL_ATTRIB_FANTASY = 516;
export const PARENTAL_CONTROL_VALUE_UNDEFINED = 0;
export const MPEG2_FILTER_VERSION_1_SIZE = 124;
export const MPEG2_FILTER_VERSION_2_SIZE = 133;
export const STREAMBUFFER_EC_BASE = 806;
export const SBE2_STREAM_DESC_VERSION = 1;
export const MPEG_PAT_PID = 0;
export const MPEG_PAT_TID = 0;
export const MPEG_CAT_PID = 1;
export const MPEG_CAT_TID = 1;
export const MPEG_PMT_TID = 2;
export const MPEG_TSDT_PID = 2;
export const MPEG_TSDT_TID = 3;
export const ATSC_MGT_PID = 8187;
export const ATSC_MGT_TID = 199;
export const ATSC_VCT_PID = 8187;
export const ATSC_VCT_TERR_TID = 200;
export const ATSC_VCT_CABL_TID = 201;
export const ATSC_EIT_TID = 203;
export const ATSC_ETT_TID = 204;
export const ATSC_RRT_TID = 202;
export const ATSC_RRT_PID = 8187;
export const ATSC_STT_PID = 8187;
export const ATSC_STT_TID = 205;
export const ATSC_PIT_TID = 208;
export const DVB_NIT_PID = 16;
export const DVB_NIT_ACTUAL_TID = 64;
export const DVB_NIT_OTHER_TID = 65;
export const DVB_SDT_PID = 17;
export const DVB_SDT_ACTUAL_TID = 66;
export const DVB_SDT_OTHER_TID = 70;
export const DVB_BAT_PID = 17;
export const DVB_BAT_TID = 74;
export const DVB_EIT_PID = 18;
export const DVB_EIT_ACTUAL_TID = 78;
export const DVB_EIT_OTHER_TID = 79;
export const DVB_RST_PID = 19;
export const DVB_RST_TID = 113;
export const DVB_TDT_PID = 20;
export const DVB_TDT_TID = 112;
export const DVB_ST_PID_16 = 16;
export const DVB_ST_PID_17 = 17;
export const DVB_ST_PID_18 = 18;
export const DVB_ST_PID_19 = 19;
export const DVB_ST_PID_20 = 20;
export const DVB_ST_TID = 114;
export const ISDB_ST_TID = 114;
export const DVB_TOT_PID = 20;
export const DVB_TOT_TID = 115;
export const DVB_DIT_PID = 30;
export const DVB_DIT_TID = 126;
export const DVB_SIT_PID = 31;
export const DVB_SIT_TID = 127;
export const ISDB_EMM_TID = 133;
export const ISDB_BIT_PID = 36;
export const ISDB_BIT_TID = 196;
export const ISDB_NBIT_PID = 37;
export const ISDB_NBIT_MSG_TID = 197;
export const ISDB_NBIT_REF_TID = 198;
export const ISDB_LDT_PID = 37;
export const ISDB_LDT_TID = 199;
export const ISDB_SDTT_PID = 35;
export const ISDB_SDTT_ALT_PID = 40;
export const ISDB_SDTT_TID = 195;
export const ISDB_CDT_PID = 41;
export const ISDB_CDT_TID = 200;
export const SCTE_EAS_TID = 216;
export const SCTE_EAS_IB_PID = 8187;
export const SCTE_EAS_OOB_PID = 8188;
export const ATSC_ETM_LOCATION_NOT_PRESENT = 0;
export const ATSC_ETM_LOCATION_IN_PTC_FOR_PSIP = 1;
export const ATSC_ETM_LOCATION_IN_PTC_FOR_EVENT = 2;
export const ATSC_ETM_LOCATION_RESERVED = 3;
export const SAMPLE_SEQ_SEQUENCE_HEADER = 1;
export const SAMPLE_SEQ_GOP_HEADER = 2;
export const SAMPLE_SEQ_PICTURE_HEADER = 3;
export const SAMPLE_SEQ_SEQUENCE_START = 1;
export const SAMPLE_SEQ_SEEK_POINT = 2;
export const SAMPLE_SEQ_FRAME_START = 3;
export const SAMPLE_SEQ_CONTENT_UNKNOWN = 0;
export const SAMPLE_SEQ_CONTENT_I_FRAME = 1;
export const SAMPLE_SEQ_CONTENT_P_FRAME = 2;
export const SAMPLE_SEQ_CONTENT_B_FRAME = 3;
export const SAMPLE_SEQ_CONTENT_STANDALONE_FRAME = 1;
export const SAMPLE_SEQ_CONTENT_REF_FRAME = 2;
export const SAMPLE_SEQ_CONTENT_NONREF_FRAME = 3;
export const COMPONENT_TAG_CAPTION_MIN = 48;
export const COMPONENT_TAG_CAPTION_MAX = 55;
export const COMPONENT_TAG_SUPERIMPOSE_MIN = 56;
export const COMPONENT_TAG_SUPERIMPOSE_MAX = 63;
export const DVBS_SCAN_TABLE_MAX_SIZE = 400;
export const g_wszExcludeScriptStreamDeliverySynchronization = "ExcludeScriptStreamDeliverySynchronization";
export const MPEG2_BASE = 512;
export const MPEG2_S_MORE_DATA_AVAILABLE = 288827428145725952n;
export const MPEG2_S_NO_MORE_DATA_AVAILABLE = 288796641820148225n;
export const MPEG2_S_SG_INFO_FOUND = 288796641820148226n;
export const MPEG2_S_SG_INFO_NOT_FOUND = 288797741331776003n;
export const MPEG2_S_MPE_INFO_FOUND = 288810935471309316n;
export const MPEG2_S_MPE_INFO_NOT_FOUND = 288799940355031557n;
export const MPEG2_S_NEW_MODULE_VERSION = 288231492843471366n;
export const MPEG2_E_UNINITIALIZED = 288827430293209600n;
export const MPEG2_E_ALREADY_INITIALIZED = 288795544456004097n;
export const MPEG2_E_OUT_OF_BOUNDS = 1187558720002;
export const MPEG2_E_MALFORMED_TABLE = 288797743479259651n;
export const MPEG2_E_UNDEFINED = 288798842990887428n;
export const MPEG2_E_NOT_PRESENT = 288799942502515205n;
export const MPEG2_E_SECTION_NOT_FOUND = 288801042014142982n;
export const MPEG2_E_TX_STREAM_UNAVAILABLE = 288802141525770759n;
export const MPEG2_E_SERVICE_ID_NOT_FOUND = 288803241037398536n;
export const MPEG2_E_SERVICE_PMT_NOT_FOUND = 288804340549026313n;
export const MPEG2_E_DSI_NOT_FOUND = 288805440060654090n;
export const MPEG2_E_SERVER_UNAVAILABLE = 288806539572281867n;
export const MPEG2_E_INVALID_CAROUSEL_ID = 288807639083909644n;
export const MPEG2_E_MALFORMED_DSMCC_MESSAGE = 288808738595537421n;
export const MPEG2_E_INVALID_SG_OBJECT_KIND = 288809838107165198n;
export const MPEG2_E_OBJECT_NOT_FOUND = 288810937618792975n;
export const MPEG2_E_OBJECT_KIND_NOT_A_DIRECTORY = 288864813688554000n;
export const MPEG2_E_OBJECT_KIND_NOT_A_FILE = 288814236153676305n;
export const MPEG2_E_FILE_OFFSET_TOO_BIG = 288823032246698514n;
export const MPEG2_E_STREAM_STOPPED = 288815335665304083n;
export const MPEG2_E_REGISTRY_ACCESS_FAILED = 288816435176931860n;
export const MPEG2_E_INVALID_UDP_PORT = 288817534688559637n;
export const MPEG2_E_DATA_SOURCE_FAILED = 288818634200187414n;
export const MPEG2_E_DII_NOT_FOUND = 988480280986135;
export const MPEG2_E_DSHOW_PIN_NOT_FOUND = 288821932735070744n;
export const MPEG2_E_BUFFER_TOO_SMALL = 288830728828092953n;
export const MPEG2_E_MISSING_SECTIONS = 288824131758326298n;
export const MPEG2_E_TOO_MANY_SECTIONS = 288820833223442971n;
export const MPEG2_E_NEXT_TABLE_OPS_NOT_AVAILABLE = 288825231269954076n;
export const MPEG2_E_INCORRECT_DESCRIPTOR_TAG = 288826330781581853n;
export const MSDRI_S_MMI_PENDING = 4415226380290;
export const MSDRI_S_PENDING = 2216203124737;
export const BDA_E_FAILURE = 292735095692066817n;
export const BDA_E_NOT_IMPLEMENTED = 288234794599579650n;
export const BDA_E_NO_SUCH_COMMAND = 288235894111207427n;
export const BDA_E_OUT_OF_BOUNDS = 288236993622835204n;
export const BDA_E_INVALID_SCHEMA = 288239192646090757n;
export const BDA_E_INVALID_HANDLE = 288238093134462982n;
export const BDA_E_INVALID_TYPE = 288240292157718535n;
export const BDA_E_READ_ONLY = 288241391669346312n;
export const BDA_E_ACCESS_DENIED = 288242491180974089n;
export const BDA_E_NOT_FOUND = 288243590692601866n;
export const BDA_E_BUFFER_TOO_SMALL = 288246889227485195n;
export const BDA_E_OUT_OF_RESOURCES = 288244690204229644n;
export const BDA_E_OUT_OF_MEMORY = 288245789715857421n;
export const BDA_E_DISABLED = 288249088250740750n;
export const BDA_E_NO_HANDLER = 288247988739112975n;
export const BDA_E_INVALID_LANGUAGE = 288251287273996304n;
export const BDA_E_TIMEOUT_ELAPSED = 288250187762368529n;
export const BDA_E_NO_MORE_EVENTS = 292736195203698689n;
export const BDA_E_NO_MORE_DATA = 301742294946811906n;
export const BDA_E_TUNER_INITIALIZING = 301743394458447873n;
export const BDA_E_TUNER_REQUIRED = 301744493970075650n;
export const BDA_E_TUNER_CONFLICT = 301745593481703427n;
export const BDA_E_INVALID_TUNE_REQUEST = 306245894574190596n;
export const BDA_E_INVALID_ENTITLEMENT_TOKEN = 306246994085822465n;
export const BDA_E_INVALID_CAPTURE_TOKEN = 306248093597450242n;
export const BDA_E_WOULD_DISRUPT_STREAMING = 306249193109078019n;
export const BDA_E_INVALID_PURCHASE_TOKEN = 310749494201565188n;
export const BDA_E_IPNETWORK_ERROR = 310750593713197057n;
export const BDA_E_IPNETWORK_ADDRESS_NOT_FOUND = 310751693224824834n;
export const BDA_E_IPNETWORK_TIMEOUT = 310752792736452611n;
export const BDA_E_IPNETWORK_UNAVAILABLE = 315253093828939780n;
export const BDA_E_TUNE_FAILED_SDV01 = 315254193340571649n;
export const BDA_E_TUNE_FAILED_SDV02 = 315255292852199426n;
export const BDA_E_TUNE_FAILED_SDV03 = 315256392363827203n;
export const BDA_E_TUNE_FAILED_SDV04 = 315257491875454980n;
export const BDA_E_TUNE_FAILED_SDV05 = 315258591387082757n;
export const BDA_E_TUNE_FAILED_SDV06 = 315259690898710534n;
export const BDA_E_TUNE_FAILED_SDV07 = 315260790410338311n;
export const BDA_E_TUNE_FAILED_SDV08 = 315532369782398984n;
export const BDA_E_TUNE_FAILED_SDVFF = 355785490475278591n;
export const BDA_E_WMDRM_INVALID_SIGNATURE = 355786589986942977n;
export const BDA_E_WMDRM_INVALID_CERTIFICATE = 355788789010198530n;
export const BDA_E_WMDRM_INVALID_VERSION = 355789888521826308n;
export const BDA_E_WMDRM_INVALID_DATE = 355790988033454085n;
export const BDA_E_WMDRM_INVALID_PROXIMITY = 355793187056709638n;
export const BDA_E_WMDRM_KEY_ID_NOT_FOUND = 10520409918170001416n;
export const g_wszStreamBufferRecordingDuration = "Duration";
export const g_wszStreamBufferRecordingBitrate = "Bitrate";
export const g_wszStreamBufferRecordingSeekable = "Seekable";
export const g_wszStreamBufferRecordingStridable = "Stridable";
export const g_wszStreamBufferRecordingBroadcast = "Broadcast";
export const g_wszStreamBufferRecordingProtected = "Is_Protected";
export const g_wszStreamBufferRecordingTrusted = "Is_Trusted";
export const g_wszStreamBufferRecordingSignature_Name = "Signature_Name";
export const g_wszStreamBufferRecordingHasAudio = "HasAudio";
export const g_wszStreamBufferRecordingHasImage = "HasImage";
export const g_wszStreamBufferRecordingHasScript = "HasScript";
export const g_wszStreamBufferRecordingHasVideo = "HasVideo";
export const g_wszStreamBufferRecordingCurrentBitrate = "CurrentBitrate";
export const g_wszStreamBufferRecordingOptimalBitrate = "OptimalBitrate";
export const g_wszStreamBufferRecordingHasAttachedImages = "HasAttachedImages";
export const g_wszStreamBufferRecordingSkipBackward = "Can_Skip_Backward";
export const g_wszStreamBufferRecordingSkipForward = "Can_Skip_Forward";
export const g_wszStreamBufferRecordingNumberOfFrames = "NumberOfFrames";
export const g_wszStreamBufferRecordingFileSize = "FileSize";
export const g_wszStreamBufferRecordingHasArbitraryDataStream = "HasArbitraryDataStream";
export const g_wszStreamBufferRecordingHasFileTransferStream = "HasFileTransferStream";
export const g_wszStreamBufferRecordingTitle = "Title";
export const g_wszStreamBufferRecordingAuthor = "Author";
export const g_wszStreamBufferRecordingDescription = "Description";
export const g_wszStreamBufferRecordingRating = "Rating";
export const g_wszStreamBufferRecordingCopyright = "Copyright";
export const g_wszStreamBufferRecordingUse_DRM = "Use_DRM";
export const g_wszStreamBufferRecordingDRM_Flags = "DRM_Flags";
export const g_wszStreamBufferRecordingDRM_Level = "DRM_Level";
export const g_wszStreamBufferRecordingAlbumTitle = "WM/AlbumTitle";
export const g_wszStreamBufferRecordingTrack = "WM/Track";
export const g_wszStreamBufferRecordingPromotionURL = "WM/PromotionURL";
export const g_wszStreamBufferRecordingAlbumCoverURL = "WM/AlbumCoverURL";
export const g_wszStreamBufferRecordingGenre = "WM/Genre";
export const g_wszStreamBufferRecordingYear = "WM/Year";
export const g_wszStreamBufferRecordingGenreID = "WM/GenreID";
export const g_wszStreamBufferRecordingMCDI = "WM/MCDI";
export const g_wszStreamBufferRecordingComposer = "WM/Composer";
export const g_wszStreamBufferRecordingLyrics = "WM/Lyrics";
export const g_wszStreamBufferRecordingTrackNumber = "WM/TrackNumber";
export const g_wszStreamBufferRecordingToolName = "WM/ToolName";
export const g_wszStreamBufferRecordingToolVersion = "WM/ToolVersion";
export const g_wszStreamBufferRecordingIsVBR = "IsVBR";
export const g_wszStreamBufferRecordingAlbumArtist = "WM/AlbumArtist";
export const g_wszStreamBufferRecordingBannerImageType = "BannerImageType";
export const g_wszStreamBufferRecordingBannerImageData = "BannerImageData";
export const g_wszStreamBufferRecordingBannerImageURL = "BannerImageURL";
export const g_wszStreamBufferRecordingCopyrightURL = "CopyrightURL";
export const g_wszStreamBufferRecordingAspectRatioX = "AspectRatioX";
export const g_wszStreamBufferRecordingAspectRatioY = "AspectRatioY";
export const g_wszStreamBufferRecordingNSCName = "NSC_Name";
export const g_wszStreamBufferRecordingNSCAddress = "NSC_Address";
export const g_wszStreamBufferRecordingNSCPhone = "NSC_Phone";
export const g_wszStreamBufferRecordingNSCEmail = "NSC_Email";
export const g_wszStreamBufferRecordingNSCDescription = "NSC_Description";
export const STREAMBUFFER_EC_TIMEHOLE = 806;
export const STREAMBUFFER_EC_STALE_DATA_READ = 807;
export const STREAMBUFFER_EC_STALE_FILE_DELETED = 808;
export const STREAMBUFFER_EC_CONTENT_BECOMING_STALE = 809;
export const STREAMBUFFER_EC_WRITE_FAILURE = 810;
export const STREAMBUFFER_EC_WRITE_FAILURE_CLEAR = 811;
export const STREAMBUFFER_EC_READ_FAILURE = 812;
export const STREAMBUFFER_EC_RATE_CHANGED = 813;
export const STREAMBUFFER_EC_PRIMARY_AUDIO = 814;
export const STREAMBUFFER_EC_RATE_CHANGING_FOR_SETPOSITIONS = 815;
export const STREAMBUFFER_EC_SETPOSITIONS_EVENTS_DONE = 816;
export const DMO_E_INVALIDSTREAMINDEX = 288795544456004097n;
export const DMO_E_INVALIDTYPE = 1187558720002;
export const DMO_E_TYPE_NOT_SET = 288797743479259651n;
export const DMO_E_NOTACCEPTING = 288798842990887428n;
export const DMO_E_TYPE_NOT_ACCEPTED = 288799942502515205n;
export const DMO_E_NO_MORE_ITEMS = 288801042014142982n;
export const IOCTL_KS_PROPERTY = 3080195;
export const IOCTL_KS_ENABLE_EVENT = 3080199;
export const IOCTL_KS_DISABLE_EVENT = 3080203;
export const IOCTL_KS_METHOD = 3080207;
export const IOCTL_KS_WRITE_STREAM = 3112979;
export const IOCTL_KS_READ_STREAM = 3096599;
export const IOCTL_KS_RESET_STATE = 3080219;
export const KSPRIORITY_LOW = 1;
export const KSPRIORITY_NORMAL = 1073741824;
export const KSPRIORITY_HIGH = 2147483648;
export const KSPRIORITY_EXCLUSIVE = 4294967295;
export const KSMETHOD_TYPE_NONE = 0;
export const KSMETHOD_TYPE_READ = 1;
export const KSMETHOD_TYPE_WRITE = 2;
export const KSMETHOD_TYPE_MODIFY = 3;
export const KSMETHOD_TYPE_SOURCE = 4;
export const KSMETHOD_TYPE_SEND = 1;
export const KSMETHOD_TYPE_SETSUPPORT = 256;
export const KSMETHOD_TYPE_BASICSUPPORT = 512;
export const KSMETHOD_TYPE_TOPOLOGY = 268435456;
export const KSPROPERTY_TYPE_GET = 1;
export const KSPROPERTY_TYPE_GETPAYLOADSIZE = 4;
export const KSPROPERTY_TYPE_SET = 2;
export const KSPROPERTY_TYPE_SETSUPPORT = 256;
export const KSPROPERTY_TYPE_BASICSUPPORT = 512;
export const KSPROPERTY_TYPE_RELATIONS = 1024;
export const KSPROPERTY_TYPE_SERIALIZESET = 2048;
export const KSPROPERTY_TYPE_UNSERIALIZESET = 4096;
export const KSPROPERTY_TYPE_SERIALIZERAW = 8192;
export const KSPROPERTY_TYPE_UNSERIALIZERAW = 16384;
export const KSPROPERTY_TYPE_SERIALIZESIZE = 32768;
export const KSPROPERTY_TYPE_DEFAULTVALUES = 65536;
export const KSPROPERTY_TYPE_TOPOLOGY = 268435456;
export const KSPROPERTY_TYPE_HIGHPRIORITY = 134217728;
export const KSPROPERTY_TYPE_FSFILTERSCOPE = 1073741824;
export const KSPROPERTY_TYPE_COPYPAYLOAD = 2147483648;
export const KSPROPERTY_MEMBER_RANGES = 1;
export const KSPROPERTY_MEMBER_STEPPEDRANGES = 2;
export const KSPROPERTY_MEMBER_VALUES = 3;
export const KSPROPERTY_MEMBER_FLAG_DEFAULT = 1;
export const KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_MULTICHANNEL = 2;
export const KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_UNIFORM = 4;
export const KSEVENTF_EVENT_HANDLE = 1;
export const KSEVENTF_SEMAPHORE_HANDLE = 2;
export const KSEVENTF_EVENT_OBJECT = 4;
export const KSEVENTF_SEMAPHORE_OBJECT = 8;
export const KSEVENTF_DPC = 16;
export const KSEVENTF_WORKITEM = 32;
export const KSEVENTF_KSWORKITEM = 128;
export const KSEVENT_TYPE_ENABLE = 1;
export const KSEVENT_TYPE_ONESHOT = 2;
export const KSEVENT_TYPE_ENABLEBUFFERED = 4;
export const KSEVENT_TYPE_SETSUPPORT = 256;
export const KSEVENT_TYPE_BASICSUPPORT = 512;
export const KSEVENT_TYPE_QUERYBUFFER = 1024;
export const KSEVENT_TYPE_TOPOLOGY = 268435456;
export const KSRELATIVEEVENT_FLAG_HANDLE = 1;
export const KSRELATIVEEVENT_FLAG_POINTER = 2;
export const KSMEDIUM_TYPE_ANYINSTANCE = 0;
export const KSMEDIUM_STANDARD_DEVIO = 0;
export const KSPROPERTY_PIN_FLAGS_ATTRIBUTE_RANGE_AWARE = 1;
export const KSPROPERTY_PIN_FLAGS_MASK = 1;
export const KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION = 0;
export const KSDATAFORMAT_BIT_ATTRIBUTES = 1;
export const KSDATARANGE_BIT_ATTRIBUTES = 1;
export const KSDATARANGE_BIT_REQUIRED_ATTRIBUTES = 2;
export const KSATTRIBUTE_REQUIRED = 1;
export const KSSTRING_Filter = "{9B365890-165F-11D0-A195-0020AFD156E4}";
export const KSSTRING_Pin = "{146F1A80-4791-11D0-A5D6-28DB04C10000}";
export const KSSTRING_Clock = "{53172480-4791-11D0-A5D6-28DB04C10000}";
export const KSSTRING_Allocator = "{642F5D00-4791-11D0-A5D6-28DB04C10000}";
export const KSSTRING_AllocatorEx = "{091BB63B-603F-11D1-B067-00A0C9062802}";
export const KSSTRING_TopologyNode = "{0621061A-EE75-11D0-B915-00A0C9223196}";
export const KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER = 1;
export const KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY = 2;
export const KSALLOCATOR_REQUIREMENTF_FRAME_INTEGRITY = 4;
export const KSALLOCATOR_REQUIREMENTF_MUST_ALLOCATE = 8;
export const KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY_CUSTOM_ALLOCATION = 16;
export const KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY = 2147483648;
export const KSALLOCATOR_OPTIONF_COMPATIBLE = 1;
export const KSALLOCATOR_OPTIONF_SYSTEM_MEMORY = 2;
export const KSALLOCATOR_OPTIONF_VALID = 3;
export const KSALLOCATOR_FLAG_PARTIAL_READ_SUPPORT = 16;
export const KSALLOCATOR_FLAG_DEVICE_SPECIFIC = 32;
export const KSALLOCATOR_FLAG_CAN_ALLOCATE = 64;
export const KSALLOCATOR_FLAG_INSIST_ON_FRAMESIZE_RATIO = 128;
export const KSALLOCATOR_FLAG_NO_FRAME_INTEGRITY = 256;
export const KSALLOCATOR_FLAG_MULTIPLE_OUTPUT = 512;
export const KSALLOCATOR_FLAG_CYCLE = 1024;
export const KSALLOCATOR_FLAG_ALLOCATOR_EXISTS = 2048;
export const KSALLOCATOR_FLAG_INDEPENDENT_RANGES = 4096;
export const KSALLOCATOR_FLAG_ATTENTION_STEPPING = 8192;
export const KSALLOCATOR_FLAG_ENABLE_CACHED_MDL = 16384;
export const KSALLOCATOR_FLAG_2D_BUFFER_REQUIRED = 32768;
export const KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT = 1;
export const KSSTREAM_HEADER_OPTIONSF_PREROLL = 2;
export const KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY = 4;
export const KSSTREAM_HEADER_OPTIONSF_TYPECHANGED = 8;
export const KSSTREAM_HEADER_OPTIONSF_TIMEVALID = 16;
export const KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY = 64;
export const KSSTREAM_HEADER_OPTIONSF_FLUSHONPAUSE = 128;
export const KSSTREAM_HEADER_OPTIONSF_DURATIONVALID = 256;
export const KSSTREAM_HEADER_OPTIONSF_ENDOFSTREAM = 512;
export const KSSTREAM_HEADER_OPTIONSF_BUFFEREDTRANSFER = 1024;
export const KSSTREAM_HEADER_OPTIONSF_VRAM_DATA_TRANSFER = 2048;
export const KSSTREAM_HEADER_OPTIONSF_METADATA = 4096;
export const KSSTREAM_HEADER_OPTIONSF_ENDOFPHOTOSEQUENCE = 8192;
export const KSSTREAM_HEADER_OPTIONSF_FRAMEINFO = 16384;
export const KSSTREAM_HEADER_OPTIONSF_PERSIST_SAMPLE = 32768;
export const KSSTREAM_HEADER_OPTIONSF_SAMPLE_PERSISTED = 65536;
export const KSSTREAM_HEADER_TRACK_COMPLETION_NUMBERS = 131072;
export const KSSTREAM_HEADER_OPTIONSF_SECUREBUFFERTRANSFER = 262144;
export const KSSTREAM_HEADER_OPTIONSF_LOOPEDDATA = 2147483648;
export const KSSTREAM_UVC_SECURE_ATTRIBUTE_SIZE = 8192;
export const KSFRAMETIME_VARIABLESIZE = 1;
export const KSRATE_NOPRESENTATIONSTART = 1;
export const KSRATE_NOPRESENTATIONDURATION = 2;
export const NANOSECONDS = 10000000;
export const KSPROBE_STREAMREAD = 0;
export const KSPROBE_STREAMWRITE = 1;
export const KSPROBE_ALLOCATEMDL = 16;
export const KSPROBE_PROBEANDLOCK = 32;
export const KSPROBE_SYSTEMADDRESS = 64;
export const KSPROBE_MODIFY = 512;
export const KSPROBE_ALLOWFORMATCHANGE = 128;
export const KSSTREAM_READ = 0;
export const KSSTREAM_WRITE = 1;
export const KSSTREAM_PAGED_DATA = 0;
export const KSSTREAM_NONPAGED_DATA = 256;
export const KSSTREAM_SYNCHRONOUS = 4096;
export const KSSTREAM_FAILUREEXCEPTION = 8192;
export const KSEVENT_ENTRY_DELETED = 1;
export const KSEVENT_ENTRY_ONESHOT = 2;
export const KSEVENT_ENTRY_BUFFERED = 4;
export const KSDISPATCH_FASTIO = 2147483648;
export const KSCREATE_ITEM_SECURITYCHANGED = 1;
export const KSCREATE_ITEM_WILDCARD = 2;
export const KSCREATE_ITEM_NOPARAMETERS = 4;
export const KSCREATE_ITEM_FREEONSTOP = 8;
export const BUS_INTERFACE_REFERENCE_VERSION = 256;
export const IOCTL_KS_HANDSHAKE = 3080223;
export const MIN_DEV_VER_FOR_QI = 256;
export const KSDEVICE_DESCRIPTOR_VERSION = 256;
export const KSDEVICE_DESCRIPTOR_VERSION_2 = 272;
export const MIN_DEV_VER_FOR_FLAGS = 272;
export const KSDEVICE_FLAG_ENABLE_REMOTE_WAKEUP = 1;
export const KSDEVICE_FLAG_LOWPOWER_PASSTHROUGH = 2;
export const KSDEVICE_FLAG_ENABLE_QUERYINTERFACE = 4;
export const KSFILTER_FLAG_DISPATCH_LEVEL_PROCESSING = 1;
export const KSFILTER_FLAG_CRITICAL_PROCESSING = 2;
export const KSFILTER_FLAG_HYPERCRITICAL_PROCESSING = 4;
export const KSFILTER_FLAG_RECEIVE_ZERO_LENGTH_SAMPLES = 8;
export const KSFILTER_FLAG_DENY_USERMODE_ACCESS = 2147483648;
export const KSFILTER_FLAG_PRIORITIZE_REFERENCEGUID = 16;
export const KSPIN_FLAG_DISPATCH_LEVEL_PROCESSING = 1;
export const KSPIN_FLAG_CRITICAL_PROCESSING = 2;
export const KSPIN_FLAG_HYPERCRITICAL_PROCESSING = 4;
export const KSPIN_FLAG_ASYNCHRONOUS_PROCESSING = 8;
export const KSPIN_FLAG_DO_NOT_INITIATE_PROCESSING = 16;
export const KSPIN_FLAG_INITIATE_PROCESSING_ON_EVERY_ARRIVAL = 32;
export const KSPIN_FLAG_FRAMES_NOT_REQUIRED_FOR_PROCESSING = 64;
export const KSPIN_FLAG_ENFORCE_FIFO = 128;
export const KSPIN_FLAG_GENERATE_MAPPINGS = 256;
export const KSPIN_FLAG_DISTINCT_TRAILING_EDGE = 512;
export const KSPIN_FLAG_PROCESS_IN_RUN_STATE_ONLY = 65536;
export const KSPIN_FLAG_SPLITTER = 131072;
export const KSPIN_FLAG_USE_STANDARD_TRANSPORT = 262144;
export const KSPIN_FLAG_DO_NOT_USE_STANDARD_TRANSPORT = 524288;
export const KSPIN_FLAG_FIXED_FORMAT = 1048576;
export const KSPIN_FLAG_GENERATE_EOS_EVENTS = 2097152;
export const KSPIN_FLAG_IMPLEMENT_CLOCK = 4194304;
export const KSPIN_FLAG_SOME_FRAMES_REQUIRED_FOR_PROCESSING = 8388608;
export const KSPIN_FLAG_PROCESS_IF_ANY_IN_RUN_STATE = 16777216;
export const KSPIN_FLAG_DENY_USERMODE_ACCESS = 2147483648;
export const RT_STRING = 7713761263622;
export const RT_RCDATA = 12111807774730;
export const WAVE_FORMAT_EXTENSIBLE = 65534;
export const KSDSOUND_BUFFER_PRIMARY = 1;
export const KSDSOUND_BUFFER_STATIC = 2;
export const KSDSOUND_BUFFER_LOCHARDWARE = 4;
export const KSDSOUND_BUFFER_LOCSOFTWARE = 8;
export const KSDSOUND_BUFFER_CTRL_3D = 1;
export const KSDSOUND_BUFFER_CTRL_FREQUENCY = 2;
export const KSDSOUND_BUFFER_CTRL_PAN = 4;
export const KSDSOUND_BUFFER_CTRL_VOLUME = 8;
export const KSDSOUND_BUFFER_CTRL_POSITIONNOTIFY = 16;
export const KSAUDIO_STEREO_SPEAKER_GEOMETRY_HEADPHONE = "-1";
export const KSAUDIO_STEREO_SPEAKER_GEOMETRY_MIN = 5;
export const KSAUDIO_STEREO_SPEAKER_GEOMETRY_NARROW = 10;
export const KSAUDIO_STEREO_SPEAKER_GEOMETRY_WIDE = 20;
export const KSAUDIO_STEREO_SPEAKER_GEOMETRY_MAX = 180;
export const KSDSOUND_3D_MODE_NORMAL = 0;
export const KSDSOUND_3D_MODE_HEADRELATIVE = 1;
export const KSDSOUND_3D_MODE_DISABLE = 2;
export const KSDSOUND_BUFFER_CTRL_HRTF_3D = 1073741824;
export const KSAUDIO_QUALITY_WORST = 0;
export const KSAUDIO_QUALITY_PC = 1;
export const KSAUDIO_QUALITY_BASIC = 2;
export const KSAUDIO_QUALITY_ADVANCED = 3;
export const KSAUDIO_CPU_RESOURCES_NOT_HOST_CPU = 0;
export const KSAUDIO_CPU_RESOURCES_HOST_CPU = 2147483647;
export const SPEAKER_FRONT_LEFT = 1;
export const SPEAKER_FRONT_RIGHT = 2;
export const SPEAKER_FRONT_CENTER = 4;
export const SPEAKER_LOW_FREQUENCY = 8;
export const SPEAKER_BACK_LEFT = 16;
export const SPEAKER_BACK_RIGHT = 32;
export const SPEAKER_FRONT_LEFT_OF_CENTER = 64;
export const SPEAKER_FRONT_RIGHT_OF_CENTER = 128;
export const SPEAKER_BACK_CENTER = 256;
export const SPEAKER_SIDE_LEFT = 512;
export const SPEAKER_SIDE_RIGHT = 1024;
export const SPEAKER_TOP_CENTER = 2048;
export const SPEAKER_TOP_FRONT_LEFT = 4096;
export const SPEAKER_TOP_FRONT_CENTER = 8192;
export const SPEAKER_TOP_FRONT_RIGHT = 16384;
export const SPEAKER_TOP_BACK_LEFT = 32768;
export const SPEAKER_TOP_BACK_CENTER = 65536;
export const SPEAKER_TOP_BACK_RIGHT = 131072;
export const SPEAKER_RESERVED = 2147221504;
export const SPEAKER_ALL = 2147483648;
export const KSAUDIO_SPEAKER_DIRECTOUT = 0;
export const KSAUDIO_SPEAKER_MONO = 4;
export const KSAUDIO_SPEAKER_GROUND_FRONT_LEFT = 1;
export const KSAUDIO_SPEAKER_GROUND_FRONT_CENTER = 4;
export const KSAUDIO_SPEAKER_GROUND_FRONT_RIGHT = 2;
export const KSAUDIO_SPEAKER_GROUND_REAR_LEFT = 16;
export const KSAUDIO_SPEAKER_GROUND_REAR_RIGHT = 32;
export const KSAUDIO_SPEAKER_TOP_MIDDLE = 2048;
export const KSAUDIO_SPEAKER_SUPER_WOOFER = 8;
export const KSNODEPIN_STANDARD_IN = 1;
export const KSNODEPIN_STANDARD_OUT = 0;
export const KSNODEPIN_SUM_MUX_IN = 1;
export const KSNODEPIN_SUM_MUX_OUT = 0;
export const KSNODEPIN_DEMUX_IN = 0;
export const KSNODEPIN_DEMUX_OUT = 1;
export const KSNODEPIN_AEC_RENDER_IN = 1;
export const KSNODEPIN_AEC_RENDER_OUT = 0;
export const KSNODEPIN_AEC_CAPTURE_IN = 2;
export const KSNODEPIN_AEC_CAPTURE_OUT = 3;
export const AEC_STATUS_FD_HISTORY_UNINITIALIZED = 0;
export const AEC_STATUS_FD_HISTORY_CONTINUOUSLY_CONVERGED = 1;
export const AEC_STATUS_FD_HISTORY_PREVIOUSLY_DIVERGED = 2;
export const AEC_STATUS_FD_CURRENTLY_CONVERGED = 8;
export const AEC_MODE_PASS_THROUGH = 0;
export const AEC_MODE_HALF_DUPLEX = 1;
export const AEC_MODE_FULL_DUPLEX = 2;
export const KSPROPERTY_WAVE_QUEUED_POSITION = 1;
export const KSMETHOD_WAVE_QUEUED_BREAKLOOP = 1;
export const KSWAVE_COMPATCAPS_INPUT = 0;
export const KSWAVE_COMPATCAPS_OUTPUT = 1;
export const KSWAVE_BUFFER_ATTRIBUTEF_LOOPING = 1;
export const KSWAVE_BUFFER_ATTRIBUTEF_STATIC = 2;
export const SYSAUDIO_FLAGS_DONT_COMBINE_PINS = 1;
export const SYSAUDIO_FLAGS_CLEAR_PREFERRED = 2;
export const KSMPEGVIDMODE_PANSCAN = 1;
export const KSMPEGVIDMODE_LTRBOX = 2;
export const KSMPEGVIDMODE_SCALE = 4;
export const KSAC3_ALTERNATE_AUDIO_1 = 1;
export const KSAC3_ALTERNATE_AUDIO_2 = 2;
export const KSAC3_ALTERNATE_AUDIO_BOTH = 3;
export const KSAC3_SERVICE_MAIN_AUDIO = 0;
export const KSAC3_SERVICE_NO_DIALOG = 1;
export const KSAC3_SERVICE_VISUALLY_IMPAIRED = 2;
export const KSAC3_SERVICE_HEARING_IMPAIRED = 3;
export const KSAC3_SERVICE_DIALOG_ONLY = 4;
export const KSAC3_SERVICE_COMMENTARY = 5;
export const KSAC3_SERVICE_EMERGENCY_FLASH = 6;
export const KSAC3_SERVICE_VOICE_OVER = 7;
export const KSAUDDECOUTMODE_STEREO_ANALOG = 1;
export const KSAUDDECOUTMODE_PCM_51 = 2;
export const KSAUDDECOUTMODE_SPDIFF = 4;
export const KS_DVD_CGMS_RESERVED_MASK = 120;
export const KS_DVD_CGMS_COPY_PROTECT_MASK = 24;
export const KS_DVD_CGMS_COPY_PERMITTED = 0;
export const KS_DVD_CGMS_COPY_ONCE = 16;
export const KS_DVD_CGMS_NO_COPY = 24;
export const KS_DVD_COPYRIGHT_MASK = 64;
export const KS_DVD_NOT_COPYRIGHTED = 0;
export const KS_DVD_COPYRIGHTED = 64;
export const KS_DVD_SECTOR_PROTECT_MASK = 32;
export const KS_DVD_SECTOR_NOT_PROTECTED = 0;
export const KS_DVD_SECTOR_PROTECTED = 32;
export const KS_BI_RGB = 0;
export const KS_BI_RLE8 = 1;
export const KS_BI_RLE4 = 2;
export const KS_BI_BITFIELDS = 3;
export const KS_BI_JPEG = 4;
export const KS_iPALETTE_COLORS = 256;
export const KS_iEGA_COLORS = 16;
export const KS_iMASK_COLORS = 3;
export const KS_iTRUECOLOR = 16;
export const KS_iRED = 0;
export const KS_iGREEN = 1;
export const KS_iBLUE = 2;
export const KS_iPALETTE = 8;
export const KS_iMAXBITS = 8;
export const KS_VBIDATARATE_NABTS = 5727272;
export const KS_VBIDATARATE_CC = 503493;
export const KS_TVTUNER_CHANGE_BEGIN_TUNE = 1;
export const KS_TVTUNER_CHANGE_END_TUNE = 2;
export const KS_INTERLACE_IsInterlaced = 1;
export const KS_INTERLACE_1FieldPerSample = 2;
export const KS_INTERLACE_Field1First = 4;
export const KS_INTERLACE_UNUSED = 8;
export const KS_INTERLACE_FieldPatternMask = 48;
export const KS_INTERLACE_FieldPatField1Only = 0;
export const KS_INTERLACE_FieldPatField2Only = 16;
export const KS_INTERLACE_FieldPatBothRegular = 32;
export const KS_INTERLACE_FieldPatBothIrregular = 48;
export const KS_INTERLACE_DisplayModeMask = 192;
export const KS_INTERLACE_DisplayModeBobOnly = 0;
export const KS_INTERLACE_DisplayModeWeaveOnly = 64;
export const KS_INTERLACE_DisplayModeBobOrWeave = 128;
export const KS_COPYPROTECT_RestrictDuplication = 1;
export const KS_MPEG2_DoPanScan = 1;
export const KS_MPEG2_DVDLine21Field1 = 2;
export const KS_MPEG2_DVDLine21Field2 = 4;
export const KS_MPEG2_SourceIsLetterboxed = 8;
export const KS_MPEG2_FilmCameraMode = 16;
export const KS_MPEG2_LetterboxAnalogOut = 32;
export const KS_MPEG2_DSS_UserData = 64;
export const KS_MPEG2_DVB_UserData = 128;
export const KS_MPEG2_27MhzTimebase = 256;
export const KS_MPEG2_WidescreenAnalogOut = 512;
export const KS_AMCONTROL_USED = 1;
export const KS_AMCONTROL_PAD_TO_4x3 = 2;
export const KS_AMCONTROL_PAD_TO_16x9 = 4;
export const KS_AMCONTROL_COLORINFO_PRESENT = 128;
export const KS_MAX_SIZE_MPEG1_SEQUENCE_INFO = 140;
export const KS_MPEGAUDIOINFO_27MhzTimebase = 1;
export const KS_VIDEOSTREAM_PREVIEW = 1;
export const KS_VIDEOSTREAM_CAPTURE = 2;
export const KS_VIDEOSTREAM_VBI = 16;
export const KS_VIDEOSTREAM_NABTS = 32;
export const KS_VIDEOSTREAM_CC = 256;
export const KS_VIDEOSTREAM_EDS = 512;
export const KS_VIDEOSTREAM_TELETEXT = 1024;
export const KS_VIDEOSTREAM_STILL = 4096;
export const KS_VIDEOSTREAM_IS_VPE = 32768;
export const KS_VIDEO_ALLOC_VPE_SYSTEM = 1;
export const KS_VIDEO_ALLOC_VPE_DISPLAY = 2;
export const KS_VIDEO_ALLOC_VPE_AGP = 4;
export const KS_VBICAP_PROTECTION_MV_PRESENT = 1;
export const KS_VBICAP_PROTECTION_MV_HARDWARE = 2;
export const KS_VBICAP_PROTECTION_MV_DETECTED = 4;
export const KS_NABTS_GROUPID_ORIGINAL_CONTENT_BASE = 2048;
export const KS_NABTS_GROUPID_ORIGINAL_CONTENT_ADVERTISER_BASE = 2064;
export const KS_NABTS_GROUPID_PRODUCTION_COMPANY_CONTENT_BASE = 2080;
export const KS_NABTS_GROUPID_PRODUCTION_COMPANY_ADVERTISER_BASE = 2096;
export const KS_NABTS_GROUPID_SYNDICATED_SHOW_CONTENT_BASE = 2112;
export const KS_NABTS_GROUPID_SYNDICATED_SHOW_ADVERTISER_BASE = 2128;
export const KS_NABTS_GROUPID_NETWORK_WIDE_CONTENT_BASE = 2144;
export const KS_NABTS_GROUPID_NETWORK_WIDE_ADVERTISER_BASE = 2160;
export const KS_NABTS_GROUPID_TELEVISION_STATION_CONTENT_BASE = 2176;
export const KS_NABTS_GROUPID_TELEVISION_STATION_ADVERTISER_BASE = 2192;
export const KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_CONTENT_BASE = 2208;
export const KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_ADVERTISER_BASE = 2224;
export const KS_NABTS_GROUPID_MICROSOFT_RESERVED_TEST_DATA_BASE = 2288;
export const MAX_NABTS_VBI_LINES_PER_FIELD = 11;
export const NABTS_LINES_PER_BUNDLE = 16;
export const NABTS_PAYLOAD_PER_LINE = 28;
export const NABTS_BYTES_PER_LINE = 36;
export const KS_CC_SUBSTREAM_ODD = 1;
export const KS_CC_SUBSTREAM_EVEN = 2;
export const KS_CC_SUBSTREAM_FIELD1_MASK = 240;
export const KS_CC_SUBSTREAM_SERVICE_CC1 = 16;
export const KS_CC_SUBSTREAM_SERVICE_CC2 = 32;
export const KS_CC_SUBSTREAM_SERVICE_T1 = 64;
export const KS_CC_SUBSTREAM_SERVICE_T2 = 128;
export const KS_CC_SUBSTREAM_FIELD2_MASK = 7936;
export const KS_CC_SUBSTREAM_SERVICE_CC3 = 256;
export const KS_CC_SUBSTREAM_SERVICE_CC4 = 512;
export const KS_CC_SUBSTREAM_SERVICE_T3 = 1024;
export const KS_CC_SUBSTREAM_SERVICE_T4 = 2048;
export const KS_CC_SUBSTREAM_SERVICE_XDS = 4096;
export const CC_MAX_HW_DECODE_LINES = 12;
export const NABTS_BUFFER_PICTURENUMBER_SUPPORT = 1;
export const WST_TVTUNER_CHANGE_BEGIN_TUNE = 4096;
export const WST_TVTUNER_CHANGE_END_TUNE = 8192;
export const MAX_WST_VBI_LINES_PER_FIELD = 17;
export const WST_BYTES_PER_LINE = 42;
export const KS_VIDEO_FLAG_FIELD_MASK = 3;
export const KS_VIDEO_FLAG_FRAME = 0;
export const KS_VIDEO_FLAG_FIELD1 = 1;
export const KS_VIDEO_FLAG_FIELD2 = 2;
export const KS_VIDEO_FLAG_FIELD1FIRST = 4;
export const KS_VIDEO_FLAG_WEAVE = 8;
export const KS_VIDEO_FLAG_IPB_MASK = 48;
export const KS_VIDEO_FLAG_I_FRAME = 0;
export const KS_VIDEO_FLAG_P_FRAME = 16;
export const KS_VIDEO_FLAG_B_FRAME = 32;
export const KS_VIDEO_FLAG_REPEAT_FIELD = 64;
export const KS_VBI_FLAG_FRAME = 0;
export const KS_VBI_FLAG_FIELD1 = 1;
export const KS_VBI_FLAG_FIELD2 = 2;
export const KS_VBI_FLAG_MV_PRESENT = 256;
export const KS_VBI_FLAG_MV_HARDWARE = 512;
export const KS_VBI_FLAG_MV_DETECTED = 1024;
export const KS_VBI_FLAG_TVTUNER_CHANGE = 16;
export const KS_VBI_FLAG_VBIINFOHEADER_CHANGE = 32;
export const KS_AnalogVideo_NTSC_Mask = 7;
export const KS_AnalogVideo_PAL_Mask = 1052656;
export const KS_AnalogVideo_SECAM_Mask = 1044480;
export const KSPROPERTY_VIDEOPROCAMP_FLAGS_AUTO = 1;
export const KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL = 2;
export const KSPROPERTY_CAMERACONTROL_FLAGS_AUTO = 1;
export const KSPROPERTY_CAMERACONTROL_FLAGS_MANUAL = 2;
export const KSPROPERTY_CAMERACONTROL_FLAGS_ASYNCHRONOUS = 4;
export const KSPROPERTY_CAMERACONTROL_FLAGS_ABSOLUTE = 0;
export const KSPROPERTY_CAMERACONTROL_FLAGS_RELATIVE = 16;
export const KSPROPERTY_CAMERACONTROL_FLASH_OFF = 0;
export const KSPROPERTY_CAMERACONTROL_FLASH_ON = 1;
export const KSPROPERTY_CAMERACONTROL_FLASH_AUTO = 2;
export const KSPROPERTY_CAMERACONTROL_FLASH_FLAGS_AUTO = 1;
export const KSPROPERTY_CAMERACONTROL_FLASH_FLAGS_MANUAL = 2;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_OFF = 0;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_HIGH = 1;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_MEDIUM = 2;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_LOW = 3;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_AUTO = 4;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_FLAGS_AUTO = 1;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_FLAGS_MANUAL = 2;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_AUTO = 1;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_MANUAL = 2;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_ASYNC = "-2147483648";
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_FOCUS = 256;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_EXPOSURE = 512;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_WB = 1024;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONVERGEMODE = 1073741824;
export const KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_EXCLUSIVE_WITH_RECORD = 1;
export const KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_SEQUENCE_EXCLUSIVE_WITH_RECORD = 2;
export const KSCAMERA_EXTENDEDPROP_FILTERSCOPE = 4294967295;
export const KSCAMERA_EXTENDEDPROP_CAPS_RESERVED = 18374686479671623680n;
export const KSCAMERA_EXTENDEDPROP_CAPS_ASYNCCONTROL = 9223372036854775808n;
export const KSCAMERA_EXTENDEDPROP_CAPS_CANCELLABLE = 4611686018427387904n;
export const KSCAMERA_EXTENDEDPROP_FLAG_CANCELOPERATION = 9223372036854775808n;
export const KSCAMERA_EXTENDEDPROP_CAPS_MASK = 18374686479671623680n;
export const KSCAMERA_EXTENDEDPROP_FLAG_MASK = 18374686479671623680n;
export const KSCAMERA_EXTENDEDPROP_PHOTOMODE_NORMAL = 0;
export const KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE = 1;
export const KSCAMERA_EXTENDEDPROP_WARMSTART_MODE_DISABLED = 0;
export const KSCAMERA_EXTENDEDPROP_WARMSTART_MODE_ENABLED = 1;
export const KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_DISABLE = 0;
export const KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_2X = 1;
export const KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_4X = 2;
export const KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_8X = 4;
export const KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_16X = 8;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_AUTO = 0;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_MACRO = 1;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_PORTRAIT = 2;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_SPORT = 4;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_SNOW = 8;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_NIGHT = 16;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_BEACH = 32;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_SUNSET = 64;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_CANDLELIGHT = 128;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_LANDSCAPE = 256;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_NIGHTPORTRAIT = 512;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_BACKLIT = 1024;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_MANUAL = 36028797018963968n;
export const KSCAMERA_EXTENDEDPROP_VIDEOTORCH_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_VIDEOTORCH_ON = 1;
export const KSCAMERA_EXTENDEDPROP_VIDEOTORCH_ON_ADJUSTABLEPOWER = 2;
export const KSCAMERA_EXTENDEDPROP_FLASH_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_FLASH_ON = 1;
export const KSCAMERA_EXTENDEDPROP_FLASH_ON_ADJUSTABLEPOWER = 2;
export const KSCAMERA_EXTENDEDPROP_FLASH_AUTO = 4;
export const KSCAMERA_EXTENDEDPROP_FLASH_AUTO_ADJUSTABLEPOWER = 8;
export const KSCAMERA_EXTENDEDPROP_FLASH_REDEYEREDUCTION = 16;
export const KSCAMERA_EXTENDEDPROP_FLASH_SINGLEFLASH = 32;
export const KSCAMERA_EXTENDEDPROP_FLASH_MULTIFLASHSUPPORTED = 64;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_PHOTO = 1;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_VIDEO = 2;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_DEFAULT = 0;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_QUALITY = 4;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_LATENCY = 8;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_POWER = 16;
export const KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_AUTO = 1;
export const KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_MANUAL = 2;
export const KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_LOCK = 4;
export const KSCAMERA_EXTENDEDPROP_FOCUS_CONTINUOUS = 256;
export const KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_MACRO = 65536;
export const KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_NORMAL = 131072;
export const KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_FULLRANGE = 262144;
export const KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_INFINITY = 524288;
export const KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_HYPERFOCAL = 1048576;
export const KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_INFINITY = 16777216;
export const KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_HYPERFOCAL = 33554432;
export const KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_NEAREST = 67108864;
export const KSCAMERA_EXTENDEDPROP_ISO_AUTO = 1;
export const KSCAMERA_EXTENDEDPROP_ISO_50 = 2;
export const KSCAMERA_EXTENDEDPROP_ISO_80 = 4;
export const KSCAMERA_EXTENDEDPROP_ISO_100 = 8;
export const KSCAMERA_EXTENDEDPROP_ISO_200 = 16;
export const KSCAMERA_EXTENDEDPROP_ISO_400 = 32;
export const KSCAMERA_EXTENDEDPROP_ISO_800 = 64;
export const KSCAMERA_EXTENDEDPROP_ISO_1600 = 128;
export const KSCAMERA_EXTENDEDPROP_ISO_3200 = 256;
export const KSCAMERA_EXTENDEDPROP_ISO_6400 = 512;
export const KSCAMERA_EXTENDEDPROP_ISO_12800 = 1024;
export const KSCAMERA_EXTENDEDPROP_ISO_25600 = 2048;
export const KSCAMERA_EXTENDEDPROP_FOCUS_CONTINUOUSLOCK = 512;
export const KSCAMERA_EXTENDEDPROP_FOCUS_UNLOCK = 1024;
export const KSCAMERA_EXTENDEDPROP_FOCUS_DRIVERFALLBACK_OFF = 2048;
export const KSCAMERA_EXTENDEDPROP_FOCUS_REGIONBASED = 4096;
export const KSCAMERA_EXTENDEDPROP_ISO_MANUAL = 36028797018963968n;
export const KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_ON = 128;
export const KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_AUTO = 256;
export const KSCAMERA_EXTENDEDPROP_EVCOMP_SIXTHSTEP = 1;
export const KSCAMERA_EXTENDEDPROP_EVCOMP_QUARTERSTEP = 2;
export const KSCAMERA_EXTENDEDPROP_EVCOMP_THIRDSTEP = 4;
export const KSCAMERA_EXTENDEDPROP_EVCOMP_HALFSTEP = 8;
export const KSCAMERA_EXTENDEDPROP_EVCOMP_FULLSTEP = 16;
export const KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE_SUB_NONE = 0;
export const KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE_SUB_VARIABLE = 1;
export const KSCAMERA_EXTENDEDPROP_METADATA_MEMORYTYPE_MASK = 255;
export const KSCAMERA_EXTENDEDPROP_METADATA_SYSTEMMEMORY = 1;
export const KSCAMERA_EXTENDEDPROP_METADATA_ALIGNMENTREQUIRED = 256;
export const KSCAMERA_METADATA_FRAMEILLUMINATION_FLAG_ON = 1;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_EXPOSURETIME = 1;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_EXPOSURECOMPENSATION = 2;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_ISOSPEED = 4;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_FOCUSSTATE = 8;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_LENSPOSITION = 16;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_WHITEBALANCE = 32;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_FLASH = 64;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_FLASHPOWER = 128;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_ZOOMFACTOR = 256;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_SCENEMODE = 512;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_SENSORFRAMERATE = 1024;
export const KSCAMERA_EXTENDEDPROP_FOCUSPRIORITY_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_FOCUSPRIORITY_ON = 1;
export const KSCAMERA_EXTENDEDPROP_PHOTOCONFIRMATION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_PHOTOCONFIRMATION_ON = 1;
export const KSCAMERA_PERFRAMESETTING_AUTO = 4294967296;
export const KSCAMERA_PERFRAMESETTING_MANUAL = 8589934592;
export const KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_ON = 1;
export const KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_AUTO = 2;
export const KSCAMERA_EXTENDEDPROP_VFR_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_VFR_ON = 1;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_ON = 1;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_PREVIEW = 1;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_VIDEO = 2;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_PHOTO = 4;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_BLINK = 8;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_SMILE = 16;
export const KSCAMERA_EXTENDEDPROP_VIDEOHDR_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_VIDEOHDR_ON = 1;
export const KSCAMERA_EXTENDEDPROP_VIDEOHDR_AUTO = 2;
export const KSCAMERA_EXTENDEDPROP_HISTOGRAM_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_HISTOGRAM_ON = 1;
export const KSCAMERA_EXTENDEDPROP_OIS_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_OIS_ON = 1;
export const KSCAMERA_EXTENDEDPROP_OIS_AUTO = 2;
export const KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_AUTO = 1;
export const KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_HDR = 2;
export const KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_FNF = 4;
export const KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_ULTRALOWLIGHT = 8;
export const KSCAMERA_EXTENDEDPROP_ZOOM_DEFAULT = 0;
export const KSCAMERA_EXTENDEDPROP_ZOOM_DIRECT = 1;
export const KSCAMERA_EXTENDEDPROP_ZOOM_SMOOTH = 2;
export const KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_DISABLED = 1;
export const KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_ALTERNATIVE_FRAME_ILLUMINATION = 2;
export const KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_BACKGROUND_SUBTRACTION = 4;
export const KSCAMERA_EXTENDEDPROP_SECUREMODE_DISABLED = 1;
export const KSCAMERA_EXTENDEDPROP_SECUREMODE_ENABLED = 2;
export const KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_AUTO = 1;
export const KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_OFF = 2;
export const KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_ON = 4;
export const KSCAMERA_EXTENDEDPROP_IRTORCHMODE_OFF = 1;
export const KSCAMERA_EXTENDEDPROP_IRTORCHMODE_ALWAYS_ON = 2;
export const KSCAMERA_EXTENDEDPROP_IRTORCHMODE_ALTERNATING_FRAME_ILLUMINATION = 4;
export const KSCAMERA_EXTENDEDPROP_RELATIVEPANELOPTIMIZATION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_RELATIVEPANELOPTIMIZATION_ON = 1;
export const KSCAMERA_EXTENDEDPROP_RELATIVEPANELOPTIMIZATION_DYNAMIC = 2;
export const KSCAMERA_EXTENDEDPROP_EYEGAZECORRECTION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_EYEGAZECORRECTION_ON = 1;
export const KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_BLUR = 1;
export const KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_MASK = 2;
export const KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_MANUAL = 0;
export const KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_AUTOFACEFRAMING = 1;
export const KSCAMERAPROFILE_FLAGS_VIDEOSTABLIZATION = 1;
export const KSCAMERAPROFILE_FLAGS_VIDEOHDR = 2;
export const KSCAMERAPROFILE_FLAGS_PHOTOHDR = 4;
export const KSCAMERAPROFILE_FLAGS_FACEDETECTION = 8;
export const KSCAMERAPROFILE_FLAGS_VARIABLEPHOTOSEQUENCE = 16;
export const KSCAMERAPROFILE_FLAGS_PREVIEW_RES_MUSTMATCH = 32;
export const KSDEVICE_PROFILE_TYPE_UNKNOWN = 0;
export const KSDEVICE_PROFILE_TYPE_CAMERA = 1;
export const KSCameraProfileSensorType_RGB = 1;
export const KSCameraProfileSensorType_Infrared = 2;
export const KSCameraProfileSensorType_Depth = 4;
export const KSCameraProfileSensorType_PoseTracking = 8;
export const KSCameraProfileSensorType_ImageSegmentation = 16;
export const KSCameraProfileSensorType_Custom = 128;
export const KS_TVAUDIO_MODE_MONO = 1;
export const KS_TVAUDIO_MODE_STEREO = 2;
export const KS_TVAUDIO_MODE_LANG_A = 16;
export const KS_TVAUDIO_MODE_LANG_B = 32;
export const KS_TVAUDIO_MODE_LANG_C = 64;
export const KS_TVAUDIO_PRESET_STEREO = 512;
export const KS_TVAUDIO_PRESET_LANG_A = 4096;
export const KS_TVAUDIO_PRESET_LANG_B = 8192;
export const KS_TVAUDIO_PRESET_LANG_C = 16384;
export const KS_AM_UseNewCSSKey = 1;
export const MAX_SINK_DESCRIPTION_NAME_LENGTH = 32;
export const JACKDESC2_PRESENCE_DETECT_CAPABILITY = 1;
export const JACKDESC2_DYNAMIC_FORMAT_CHANGE_CAPABILITY = 2;
export const KSPROPERTY_AUDIO_BUFFER_DURATION = 1;
export const MAX_RESOURCEGROUPID_LENGTH = 256;
export const AUDIOMODULE_MAX_DATA_SIZE = 64000;
export const AUDIOMODULE_MAX_NAME_CCH_SIZE = 128;
export const AllocatorStrategy_DontCare = 0;
export const AllocatorStrategy_MinimizeNumberOfFrames = 1;
export const AllocatorStrategy_MinimizeFrameSize = 2;
export const AllocatorStrategy_MinimizeNumberOfAllocators = 4;
export const AllocatorStrategy_MaximizeSpeed = 8;
export const PipeFactor_None = 0;
export const PipeFactor_UserModeUpstream = 1;
export const PipeFactor_UserModeDownstream = 2;
export const PipeFactor_MemoryTypes = 4;
export const PipeFactor_Flags = 8;
export const PipeFactor_PhysicalRanges = 16;
export const PipeFactor_OptimalRanges = 32;
export const PipeFactor_FixedCompression = 64;
export const PipeFactor_UnknownCompression = 128;
export const PipeFactor_Buffers = 256;
export const PipeFactor_Align = 512;
export const PipeFactor_PhysicalEnd = 1024;
export const PipeFactor_LogicalEnd = 2048;
export const KSPROPERTY_MEMORY_TRANSPORT = 1;
export const AVENC_H263V_LEVELCOUNT = 8;
export const AVENC_H264V_LEVELCOUNT = 16;
export const AVENC_H264V_MAX_MBBITS = 3200;
export const DXVA2_E_NOT_INITIALIZED = 297239793757327360n;
export const DXVA2_E_NEW_VIDEO_DEVICE = 292736194129956865n;
export const DXVA2_E_VIDEO_DEVICE_LOCKED = 2810247286318436354n;
export const DXVA2_E_NOT_AVAILABLE = 4323456829834399747n;
export const MAX_SUBSTREAMS = 15;
export const DXVA2_DECODE_GET_DRIVER_HANDLE = 1829;
export const DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS = 1828;
export const MFEVRDLL = 0;
export const MF_SDK_VERSION = 2;
export const MF_API_VERSION = 112;
export const MFSTARTUP_NOSOCKET = 1;
export const MFSTARTUP_LITE = 1;
export const MFSTARTUP_FULL = 0;
export const MF_E_DXGI_DEVICE_NOT_INITIALIZED = 297239793757327360n;
export const MF_E_DXGI_NEW_VIDEO_DEVICE = 292736194129956865n;
export const MF_E_DXGI_VIDEO_DEVICE_LOCKED = 2810247286318436354n;
export const MF_1_BYTE_ALIGNMENT = 0;
export const MF_2_BYTE_ALIGNMENT = 1;
export const MF_4_BYTE_ALIGNMENT = 3;
export const MF_8_BYTE_ALIGNMENT = 7;
export const MF_16_BYTE_ALIGNMENT = 15;
export const MF_32_BYTE_ALIGNMENT = 31;
export const MF_64_BYTE_ALIGNMENT = 63;
export const MF_128_BYTE_ALIGNMENT = 127;
export const MF_256_BYTE_ALIGNMENT = 255;
export const MF_512_BYTE_ALIGNMENT = 511;
export const MF_1024_BYTE_ALIGNMENT = 1023;
export const MF_2048_BYTE_ALIGNMENT = 2047;
export const MF_4096_BYTE_ALIGNMENT = 4095;
export const MF_8192_BYTE_ALIGNMENT = 8191;
export const MFSESSIONCAP_START = 1;
export const MFSESSIONCAP_SEEK = 2;
export const MFSESSIONCAP_PAUSE = 4;
export const MFSESSIONCAP_RATE_FORWARD = 16;
export const MFSESSIONCAP_RATE_REVERSE = 32;
export const MFSESSIONCAP_DOES_NOT_USE_NETWORK = 64;
export const MFSampleExtension_ClosedCaption_CEA708_MAX_SIZE = 256;
export const MACROBLOCK_FLAG_SKIP = 1;
export const MACROBLOCK_FLAG_DIRTY = 2;
export const MACROBLOCK_FLAG_MOTION = 4;
export const MACROBLOCK_FLAG_VIDEO = 8;
export const MACROBLOCK_FLAG_HAS_MOTION_VECTOR = 16;
export const MACROBLOCK_FLAG_HAS_QP = 32;
export const MFCAPTURE_METADATA_SCAN_RIGHT_LEFT = 1;
export const MFCAPTURE_METADATA_SCAN_BOTTOM_TOP = 2;
export const MFCAPTURE_METADATA_SCANLINE_VERTICAL = 4;
export const MF_METADATAFACIALEXPRESSION_SMILE = 1;
export const MF_METADATATIMESTAMPS_DEVICE = 1;
export const MF_METADATATIMESTAMPS_PRESENTATION = 2;
export const MF_HISTOGRAM_CHANNEL_Y = 1;
export const MF_HISTOGRAM_CHANNEL_R = 2;
export const MF_HISTOGRAM_CHANNEL_G = 4;
export const MF_HISTOGRAM_CHANNEL_B = 8;
export const MF_HISTOGRAM_CHANNEL_Cb = 16;
export const MF_HISTOGRAM_CHANNEL_Cr = 32;
export const LOCAL_D3DFMT_DEFINES = 1;
export const MEDIASINK_FIXED_STREAMS = 1;
export const MEDIASINK_CANNOT_MATCH_CLOCK = 2;
export const MEDIASINK_RATELESS = 4;
export const MEDIASINK_CLOCK_REQUIRED = 8;
export const MEDIASINK_CAN_PREROLL = 16;
export const MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE = 32;
export const MFCLOCK_FREQUENCY_HNS = 10000000;
export const MFCLOCK_TOLERANCE_UNKNOWN = 50000;
export const MFCLOCK_JITTER_ISR = 1000;
export const MFCLOCK_JITTER_DPC = 4000;
export const MFCLOCK_JITTER_PASSIVE = 10000;
export const PRESENTATION_CURRENT_POSITION = 9223372036854775807n;
export const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS = 1;
export const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST = 2;
export const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_DONT_ALLOW_FORMAT_CHANGES = 4;
export const MFRR_INFO_VERSION = 0;
export const MF_USER_MODE_COMPONENT_LOAD = 1;
export const MF_KERNEL_MODE_COMPONENT_LOAD = 2;
export const MF_GRL_LOAD_FAILED = 16;
export const MF_INVALID_GRL_SIGNATURE = 32;
export const MF_GRL_ABSENT = 4096;
export const MF_COMPONENT_REVOKED = 8192;
export const MF_COMPONENT_INVALID_EKU = 16384;
export const MF_COMPONENT_CERT_REVOKED = 32768;
export const MF_COMPONENT_INVALID_ROOT = 65536;
export const MF_COMPONENT_HS_CERT_REVOKED = 131072;
export const MF_COMPONENT_LS_CERT_REVOKED = 262144;
export const MF_BOOT_DRIVER_VERIFICATION_FAILED = 1048576;
export const MF_TEST_SIGNED_COMPONENT_LOADING = 16777216;
export const MF_MINCRYPT_FAILURE = 268435456;
export const SHA_HASH_LEN = 20;
export const MFSEQUENCER_INVALID_ELEMENT_ID = 4294967295;
export const MFCONTENTPROTECTIONDEVICE_FUNCTIONID_START = 67108864;
export const MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_FUNCTIONID = 67108864;
export const MF_UNKNOWN_DURATION = 0;
export const MF_INVALID_PRESENTATION_TIME = 9223372036854775808n;
export const MF_MEDIATYPE_EQUAL_MAJOR_TYPES = 1;
export const MF_MEDIATYPE_EQUAL_FORMAT_TYPES = 2;
export const MF_MEDIATYPE_EQUAL_FORMAT_DATA = 4;
export const MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA = 8;
export const MFASYNC_FAST_IO_PROCESSING_CALLBACK = 1;
export const MFASYNC_SIGNAL_CALLBACK = 2;
export const MFASYNC_BLOCKING_CALLBACK = 4;
export const MFASYNC_REPLY_CALLBACK = 8;
export const MFASYNC_LOCALIZE_REMOTE_CALLBACK = 16;
export const MFASYNC_CALLBACK_QUEUE_UNDEFINED = 0;
export const MFASYNC_CALLBACK_QUEUE_STANDARD = 1;
export const MFASYNC_CALLBACK_QUEUE_RT = 2;
export const MFASYNC_CALLBACK_QUEUE_IO = 3;
export const MFASYNC_CALLBACK_QUEUE_TIMER = 4;
export const MFASYNC_CALLBACK_QUEUE_MULTITHREADED = 5;
export const MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION = 7;
export const MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK = 4294901760;
export const MFASYNC_CALLBACK_QUEUE_ALL = 4294967295;
export const MFBYTESTREAM_IS_READABLE = 1;
export const MFBYTESTREAM_IS_WRITABLE = 2;
export const MFBYTESTREAM_IS_SEEKABLE = 4;
export const MFBYTESTREAM_IS_REMOTE = 8;
export const MFBYTESTREAM_IS_DIRECTORY = 128;
export const MFBYTESTREAM_HAS_SLOW_SEEK = 256;
export const MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED = 512;
export const MFBYTESTREAM_SHARE_WRITE = 1024;
export const MFBYTESTREAM_DOES_NOT_USE_NETWORK = 2048;
export const MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO = 1;
export const MFT_STREAMS_UNLIMITED = 4294967295;
export const MFT_OUTPUT_BOUND_UPPER_UNBOUNDED = 9223372036854775807n;
export const WM_CODEC_ONEPASS_CBR = 1;
export const WM_CODEC_ONEPASS_VBR = 2;
export const WM_CODEC_TWOPASS_CBR = 4;
export const WM_CODEC_TWOPASS_VBR_UNCONSTRAINED = 8;
export const WM_CODEC_TWOPASS_VBR_PEAKCONSTRAINED = 16;
export const SYSFXUI_DONOTSHOW_LOUDNESSEQUALIZATION = 1;
export const SYSFXUI_DONOTSHOW_ROOMCORRECTION = 2;
export const SYSFXUI_DONOTSHOW_BASSMANAGEMENT = 4;
export const SYSFXUI_DONOTSHOW_BASSBOOST = 8;
export const SYSFXUI_DONOTSHOW_HEADPHONEVIRTUALIZATION = 16;
export const SYSFXUI_DONOTSHOW_VIRTUALSURROUND = 32;
export const SYSFXUI_DONOTSHOW_SPEAKERFILLING = 64;
export const SYSFXUI_DONOTSHOW_CHANNELPHANTOMING = 128;
export const AEC_MAX_SYSTEM_MODES = 6;
export const WMAAECMA_E_NO_ACTIVE_RENDER_STREAM = 2278293514;
export const E_TOCPARSER_INVALIDASFFILE = 2218770038785;
export const E_TOCPARSER_INVALIDRIFFFILE = 952141905028710402n;
export const TOC_MAX_DESCRIPTION_SIZE = 65535;
export const TOC_ENTRY_MAX_TITLE_SIZE = 65535;
export const MFASFINDEXER_PER_ENTRY_BYTES_DYNAMIC = 65535;
export const MFASFINDEXER_NO_FIXED_INTERVAL = 4294967295;
export const MFASFINDEXER_READ_FOR_REVERSEPLAYBACK_OUTOFDATASEGMENT = 18446744073709551615n;
export const MFASFINDEXER_APPROX_SEEK_TIME_UNKNOWN = 18446744073709551615n;
export const MFASF_MAX_STREAM_NUMBER = 127;
export const MFASF_INVALID_STREAM_NUMBER = 128;
export const MFASF_PAYLOADEXTENSION_MAX_SIZE = 255;
export const MFASF_PAYLOADEXTENSION_VARIABLE_SIZE = 65535;
export const MFASF_DEFAULT_BUFFER_WINDOW_MS = 3000;
export const FACILITY_MF = 13;
export const FACILITY_MF_WIN32 = 7;
export const MF_E_PLATFORM_NOT_INITIALIZED = 952143005195515568n;
export const MF_E_BUFFERTOOSMALL = 952144104707143345n;
export const MF_E_INVALIDREQUEST = 952145204218771122n;
export const MF_E_INVALIDSTREAMNUMBER = 952146303730398899n;
export const MF_E_INVALIDMEDIATYPE = 952147403242026676n;
export const MF_E_NOTACCEPTING = 952148502753654453n;
export const MF_E_NOT_INITIALIZED = 952149602265282230n;
export const MF_E_UNSUPPORTED_REPRESENTATION = 952151801288537783n;
export const MF_E_NO_MORE_TYPES = 952152900800165561n;
export const MF_E_UNSUPPORTED_SERVICE = 952154000311793338n;
export const MF_E_UNEXPECTED = 952155099823421115n;
export const MF_E_INVALIDNAME = 952156199335048892n;
export const MF_E_INVALIDTYPE = 952157298846676669n;
export const MF_E_INVALID_FILE_FORMAT = 952158398358304446n;
export const MF_E_INVALIDINDEX = 952159497869932223n;
export const MF_E_INVALID_TIMESTAMP = 952162796404815552n;
export const MF_E_UNSUPPORTED_SCHEME = 952163895916443331n;
export const MF_E_UNSUPPORTED_BYTESTREAM_TYPE = 952164995428071108n;
export const MF_E_UNSUPPORTED_TIME_FORMAT = 952168293962954437n;
export const MF_E_NO_SAMPLE_TIMESTAMP = 952169393474582216n;
export const MF_E_NO_SAMPLE_DURATION = 952171592497837769n;
export const MF_E_INVALID_STREAM_DATA = 952175990544348875n;
export const MF_E_RT_UNAVAILABLE = 952177090055976655n;
export const MF_E_UNSUPPORTED_RATE = 952178189567604432n;
export const MF_E_THINNING_UNSUPPORTED = 952179289079232209n;
export const MF_E_REVERSE_UNSUPPORTED = 952180388590859986n;
export const MF_E_UNSUPPORTED_RATE_TRANSITION = 952181488102487763n;
export const MF_E_RATE_CHANGE_PREEMPTED = 952182587614115540n;
export const MF_E_NOT_FOUND = 952183687125743317n;
export const MF_E_NOT_AVAILABLE = 952184786637371094n;
export const MF_E_NO_CLOCK = 952185886148998871n;
export const MF_S_MULTIPLE_BEGIN = 952186982439401176n;
export const MF_E_MULTIPLE_BEGIN = 952188085172254425n;
export const MF_E_MULTIPLE_SUBSCRIBERS = 952189184683882202n;
export const MF_E_TIMER_ORPHANED = 952190284195509979n;
export const MF_E_STATE_TRANSITION_PENDING = 952191383707137756n;
export const MF_E_UNSUPPORTED_STATE_TRANSITION = 952192483218765533n;
export const MF_E_UNRECOVERABLE_ERROR_OCCURRED = 952193582730393310n;
export const MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS = 952194682242021087n;
export const MF_E_SAMPLE_NOT_WRITABLE = 952196881265276640n;
export const MF_E_INVALID_KEY = 952197980776904418n;
export const MF_E_BAD_STARTUP_VERSION = 952199080288532195n;
export const MF_E_UNSUPPORTED_CAPTION = 952200179800159972n;
export const MF_E_INVALID_POSITION = 952201279311787749n;
export const MF_E_ATTRIBUTENOTFOUND = 952202378823415526n;
export const MF_E_PROPERTY_TYPE_NOT_ALLOWED = 952203478335043303n;
export const MF_E_PROPERTY_TYPE_NOT_SUPPORTED = 952204577846671080n;
export const MF_E_PROPERTY_EMPTY = 952205677358298857n;
export const MF_E_PROPERTY_NOT_EMPTY = 952206776869926634n;
export const MF_E_PROPERTY_VECTOR_NOT_ALLOWED = 952207876381554411n;
export const MF_E_PROPERTY_VECTOR_REQUIRED = 952208975893182188n;
export const MF_E_OPERATION_CANCELLED = 952210075404809965n;
export const MF_E_BYTESTREAM_NOT_SEEKABLE = 952211174916437742n;
export const MF_E_DISABLED_IN_SAFEMODE = 952212274428065519n;
export const MF_E_CANNOT_PARSE_BYTESTREAM = 952213373939693296n;
export const MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS = 952214473451321073n;
export const MF_E_MEDIAPROC_WRONGSTATE = 952215572962948850n;
export const MF_E_RT_THROUGHPUT_NOT_AVAILABLE = 952216672474576627n;
export const MF_E_RT_TOO_MANY_CLASSES = 952217771986204404n;
export const MF_E_RT_WOULDBLOCK = 952218871497832181n;
export const MF_E_NO_BITPUMP = 952219971009459958n;
export const MF_E_RT_OUTOFMEMORY = 952221070521087735n;
export const MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED = 968678560565638904n;
export const MF_E_INSUFFICIENT_BUFFER = 952223269544358256n;
export const MF_E_CANNOT_CREATE_SINK = 952224369055971066n;
export const MF_E_BYTESTREAM_UNKNOWN_LENGTH = 952225468567598843n;
export const MF_E_SESSION_PAUSEWHILESTOPPED = 952226568079226620n;
export const MF_S_ACTIVATE_REPLACED = 952227664369628925n;
export const MF_E_FORMAT_CHANGE_NOT_SUPPORTED = 952228767102482174n;
export const MF_E_INVALID_WORKQUEUE = 952229866614109951n;
export const MF_E_DRM_UNSUPPORTED = 952230966125737728n;
export const MF_E_UNAUTHORIZED = 952232065637365505n;
export const MF_E_OUT_OF_RANGE = 952233165148993282n;
export const MF_E_INVALID_CODEC_MERIT = 952234264660621059n;
export const MF_E_HW_MFT_FAILED_START_STREAMING = 952235364172248836n;
export const MF_E_OPERATION_IN_PROGRESS = 952236463683876613n;
export const MF_E_HARDWARE_DRM_UNSUPPORTED = 952237563195504390n;
export const MF_E_DURATION_TOO_LONG = 952238662707132167n;
export const MF_E_OPERATION_UNSUPPORTED_AT_D3D_FEATURE_LEVEL = 952239762218759944n;
export const MF_E_UNSUPPORTED_MEDIATYPE_AT_D3D_FEATURE_LEVEL = 953241417311663881n;
export const MF_S_ASF_PARSEINPROGRESS = 953241415164181144n;
export const MF_E_ASF_PARSINGINCOMPLETE = 953242516823292568n;
export const MF_E_ASF_MISSINGDATA = 953243616334920345n;
export const MF_E_ASF_INVALIDDATA = 953244715846548122n;
export const MF_E_ASF_OPAQUEPACKET = 953245815358175899n;
export const MF_E_ASF_NOINDEX = 953246914869803676n;
export const MF_E_ASF_OUTOFRANGE = 953248014381431453n;
export const MF_E_ASF_INDEXNOTLOADED = 953249113893059230n;
export const MF_E_ASF_TOO_MANY_PAYLOADS = 953250213404687007n;
export const MF_E_ASF_UNSUPPORTED_STREAM_TYPE = 953251312916314784n;
export const MF_E_ASF_DROPPED_PACKET = 954340928939440801n;
export const MF_E_NO_EVENTS_AVAILABLE = 954343127962697344n;
export const MF_E_INVALID_STATE_TRANSITION = 954345326985952898n;
export const MF_E_END_OF_STREAM = 954346426497580676n;
export const MF_E_SHUTDOWN = 954347526009208453n;
export const MF_E_MP3_NOTFOUND = 954348625520836230n;
export const MF_E_MP3_OUTOFDATA = 954349725032464007n;
export const MF_E_MP3_NOTMP3 = 954350824544091784n;
export const MF_E_MP3_NOTSUPPORTED = 954351924055719561n;
export const MF_E_NO_DURATION = 954354123078975114n;
export const MF_E_INVALID_FORMAT = 954355222590602892n;
export const MF_E_PROPERTY_NOT_FOUND = 954356322102230669n;
export const MF_E_PROPERTY_READ_ONLY = 954357421613858446n;
export const MF_E_PROPERTY_NOT_ALLOWED = 954359620637113999n;
export const MF_E_MEDIA_SOURCE_NOT_STARTED = 954367317218508433n;
export const MF_E_UNSUPPORTED_FORMAT = 954368416730136216n;
export const MF_E_MP3_BAD_CRC = 954369516241763993n;
export const MF_E_NOT_PROTECTED = 954370615753391770n;
export const MF_E_MEDIA_SOURCE_WRONGSTATE = 954371715265019547n;
export const MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED = 954372814776647324n;
export const MF_E_CANNOT_FIND_KEYFRAME_SAMPLE = 954373914288275101n;
export const MF_E_UNSUPPORTED_CHARACTERISTICS = 954375013799902878n;
export const MF_E_NO_AUDIO_RECORDING_DEVICE = 954376113311530655n;
export const MF_E_AUDIO_RECORDING_DEVICE_IN_USE = 954377212823158432n;
export const MF_E_AUDIO_RECORDING_DEVICE_INVALIDATED = 954378312334786209n;
export const MF_E_VIDEO_RECORDING_DEVICE_INVALIDATED = 954379411846413986n;
export const MF_E_VIDEO_RECORDING_DEVICE_PREEMPTED = 955440440567217827n;
export const MF_E_NETWORK_RESOURCE_FAILURE = 955441540078846568n;
export const MF_E_NET_WRITE = 955442639590474345n;
export const MF_E_NET_READ = 955443739102102122n;
export const MF_E_NET_REQUIRE_NETWORK = 955444838613729899n;
export const MF_E_NET_REQUIRE_ASYNC = 955445938125357676n;
export const MF_E_NET_BWLEVEL_NOT_SUPPORTED = 955447037636985453n;
export const MF_E_NET_STREAMGROUPS_NOT_SUPPORTED = 955448137148613230n;
export const MF_E_NET_MANUALSS_NOT_SUPPORTED = 955449236660241007n;
export const MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR = 955450336171868784n;
export const MF_E_NET_CACHESTREAM_NOT_FOUND = 955451435683496561n;
export const MF_I_MANUAL_PROXY = 955453632559268466n;
export const MF_E_NET_REQUIRE_INPUT = 955454734218379892n;
export const MF_E_NET_REDIRECT = 955455833730007669n;
export const MF_E_NET_REDIRECT_TO_PROXY = 955456933241635446n;
export const MF_E_NET_TOO_MANY_REDIRECTS = 955458032753263223n;
export const MF_E_NET_TIMEOUT = 955459132264891000n;
export const MF_E_NET_CLIENT_CLOSE = 955460231776518777n;
export const MF_E_NET_BAD_CONTROL_DATA = 955461331288146554n;
export const MF_E_NET_INCOMPATIBLE_SERVER = 955462430799774331n;
export const MF_E_NET_UNSAFE_URL = 955463530311402108n;
export const MF_E_NET_CACHE_NO_DATA = 955464629823029885n;
export const MF_E_NET_EOL = 955465729334657662n;
export const MF_E_NET_BAD_REQUEST = 955466828846285439n;
export const MF_E_NET_INTERNAL_SERVER_ERROR = 955467928357913216n;
export const MF_E_NET_SESSION_NOT_FOUND = 955469027869540993n;
export const MF_E_NET_NOCONNECTION = 955470127381168770n;
export const MF_E_NET_CONNECTION_FAILURE = 955471226892796547n;
export const MF_E_NET_INCOMPATIBLE_PUSHSERVER = 955472326404424324n;
export const MF_E_NET_SERVER_ACCESSDENIED = 955473425916052101n;
export const MF_E_NET_PROXY_ACCESSDENIED = 955474525427679878n;
export const MF_E_NET_CANNOTCONNECT = 955475624939307655n;
export const MF_E_NET_INVALID_PUSH_TEMPLATE = 955476724450935432n;
export const MF_E_NET_INVALID_PUSH_PUBLISHING_POINT = 955477823962563209n;
export const MF_E_NET_BUSY = 955478923474190986n;
export const MF_E_NET_RESOURCE_GONE = 955480022985818763n;
export const MF_E_NET_ERROR_FROM_PROXY = 955481122497446540n;
export const MF_E_NET_PROXY_TIMEOUT = 955482222009074317n;
export const MF_E_NET_SERVER_UNAVAILABLE = 955483321520702094n;
export const MF_E_NET_TOO_MUCH_DATA = 955484421032329871n;
export const MF_E_NET_SESSION_INVALID = 955485520543957648n;
export const MF_E_OFFLINE_MODE = 955486620055585425n;
export const MF_E_NET_UDP_BLOCKED = 955487719567213202n;
export const MF_E_NET_UNSUPPORTED_CONFIGURATION = 955488819078840979n;
export const MF_E_NET_PROTOCOL_DISABLED = 955489918590468756n;
export const MF_E_NET_COMPANION_DRIVER_DISCONNECT = 956539952194994837n;
export const MF_E_ALREADY_INITIALIZED = 956541051706623568n;
export const MF_E_BANDWIDTH_OVERRUN = 956542151218251345n;
export const MF_E_LATE_SAMPLE = 956543250729879122n;
export const MF_E_FLUSH_NEEDED = 956544350241506899n;
export const MF_E_INVALID_PROFILE = 956545449753134676n;
export const MF_E_INDEX_NOT_COMMITTED = 956546549264762453n;
export const MF_E_NO_INDEX = 956547648776390230n;
export const MF_E_CANNOT_INDEX_IN_PLACE = 956548748288018007n;
export const MF_E_MISSING_ASF_LEAKYBUCKET = 956549847799645784n;
export const MF_E_INVALID_ASF_STREAMID = 957639463822771801n;
export const MF_E_STREAMSINK_REMOVED = 957641662846028344n;
export const MF_E_STREAMSINKS_OUT_OF_SYNC = 957642762357656122n;
export const MF_E_STREAMSINKS_FIXED = 957643861869283899n;
export const MF_E_STREAMSINK_EXISTS = 957644961380911676n;
export const MF_E_SAMPLEALLOCATOR_CANCELED = 957646060892539453n;
export const MF_E_SAMPLEALLOCATOR_EMPTY = 957647160404167230n;
export const MF_E_SINK_ALREADYSTOPPED = 957648259915795007n;
export const MF_E_ASF_FILESINK_BITRATE_UNKNOWN = 957649359427422784n;
export const MF_E_SINK_NO_STREAMS = 957650458939050561n;
export const MF_S_SINK_NOT_FINALIZED = 957651555229452866n;
export const MF_E_METADATA_TOO_LONG = 957652657962306115n;
export const MF_E_SINK_NO_SAMPLES_PROCESSED = 957653757473933892n;
export const MF_E_SINK_HEADERS_NOT_FOUND = 958738975450548805n;
export const MF_E_VIDEO_REN_NO_PROCAMP_HW = 958740074962177568n;
export const MF_E_VIDEO_REN_NO_DEINTERLACE_HW = 958741174473805345n;
export const MF_E_VIDEO_REN_COPYPROT_FAILED = 958742273985433122n;
export const MF_E_VIDEO_REN_SURFACE_NOT_SHARED = 958743373497060899n;
export const MF_E_VIDEO_DEVICE_LOCKED = 958744473008688676n;
export const MF_E_NEW_VIDEO_DEVICE = 958745572520316453n;
export const MF_E_NO_VIDEO_SAMPLE_AVAILABLE = 958848926613327398n;
export const MF_E_NO_AUDIO_PLAYBACK_DEVICE = 958850026124955268n;
export const MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE = 958851125636583045n;
export const MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED = 958852225148210822n;
export const MF_E_AUDIO_SERVICE_NOT_RUNNING = 958853324659838599n;
export const MF_E_AUDIO_BUFFER_SIZE_ERROR = 958854424171466376n;
export const MF_E_AUDIO_CLIENT_WRAPPER_SPOOF_ERROR = 959845084148092553n;
export const MF_E_TOPO_INVALID_OPTIONAL_NODE = 959848382682976782n;
export const MF_E_TOPO_CANNOT_FIND_DECRYPTOR = 959849482194604561n;
export const MF_E_TOPO_CODEC_NOT_FOUND = 959850581706232338n;
export const MF_E_TOPO_CANNOT_CONNECT = 959851681217860115n;
export const MF_E_TOPO_UNSUPPORTED = 959852780729487892n;
export const MF_E_TOPO_INVALID_TIME_ATTRIBUTES = 959853880241115669n;
export const MF_E_TOPO_LOOPS_IN_TOPOLOGY = 959854979752743446n;
export const MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR = 959856079264371223n;
export const MF_E_TOPO_MISSING_STREAM_DESCRIPTOR = 959857178775999000n;
export const MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED = 959858278287626777n;
export const MF_E_TOPO_MISSING_SOURCE = 959859377799254554n;
export const MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED = 964240931635941915n;
export const MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID = 964242031147573676n;
export const MF_S_SEQUENCER_CONTEXT_CANCELED = 964243127437975981n;
export const MF_E_NO_SOURCE_IN_CACHE = 964244230170829230n;
export const MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM = 967535065251537327n;
export const MF_E_TRANSFORM_TYPE_NOT_SET = 967536167984393568n;
export const MF_E_TRANSFORM_STREAM_CHANGE = 967537267496021345n;
export const MF_E_TRANSFORM_INPUT_REMAINING = 967538367007649122n;
export const MF_E_TRANSFORM_PROFILE_MISSING = 967539466519276899n;
export const MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT = 967540566030904676n;
export const MF_E_TRANSFORM_PROFILE_TRUNCATED = 967541665542532453n;
export const MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED = 967542765054160230n;
export const MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG = 967543864565788007n;
export const MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE = 967544964077415784n;
export const MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM = 967546063589043561n;
export const MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG = 967547163100671338n;
export const MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE = 967548262612299115n;
export const MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE = 967549362123926892n;
export const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE = 967550461635554669n;
export const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE = 967551561147182446n;
export const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION = 967552660658810223n;
export const MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES = 967554859682065776n;
export const MF_E_TRANSFORM_NEED_MORE_INPUT = 967555959193693554n;
export const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG = 967557058705321331n;
export const MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING = 967558158216949108n;
export const MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT = 967559254507351413n;
export const MF_E_UNSUPPORTED_D3D_TYPE = 967560357240204662n;
export const MF_E_TRANSFORM_ASYNC_LOCKED = 967561456751832439n;
export const MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER = 967562556263460216n;
export const MF_E_TRANSFORM_STREAM_INVALID_RESOLUTION = 967563655775087993n;
export const MF_E_TRANSFORM_ASYNC_MFT_NOT_SUPPORTED = 967565854798343546n;
export const MF_E_TRANSFORM_EXATTRIBUTE_NOT_SUPPORTED = 968634580100541820n;
export const MF_E_LICENSE_INCORRECT_RIGHTS = 968635679612170568n;
export const MF_E_LICENSE_OUTOFDATE = 968636779123798345n;
export const MF_E_LICENSE_REQUIRED = 968637878635426122n;
export const MF_E_DRM_HARDWARE_INCONSISTENT = 968638978147053899n;
export const MF_E_NO_CONTENT_PROTECTION_MANAGER = 968640077658681676n;
export const MF_E_LICENSE_RESTORE_NO_RIGHTS = 968641177170309453n;
export const MF_E_BACKUP_RESTRICTED_LICENSE = 968642276681937230n;
export const MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION = 968643376193565007n;
export const MF_S_PROTECTION_NOT_REQUIRED = 968644472483967312n;
export const MF_E_COMPONENT_REVOKED = 968645575216820561n;
export const MF_E_TRUST_DISABLED = 968646674728448338n;
export const MF_E_WMDRMOTA_NO_ACTION = 968647774240076115n;
export const MF_E_WMDRMOTA_ACTION_ALREADY_SET = 968648873751703892n;
export const MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE = 968649973263331669n;
export const MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED = 968651072774959446n;
export const MF_E_WMDRMOTA_ACTION_MISMATCH = 968652172286587223n;
export const MF_E_WMDRMOTA_INVALID_POLICY = 968653271798215000n;
export const MF_E_POLICY_UNSUPPORTED = 968654371309842777n;
export const MF_E_OPL_NOT_SUPPORTED = 968655470821470554n;
export const MF_E_TOPOLOGY_VERIFICATION_FAILED = 968656570333098331n;
export const MF_E_SIGNATURE_VERIFICATION_FAILED = 968657669844726108n;
export const MF_E_DEBUGGING_NOT_ALLOWED = 968658769356353885n;
export const MF_E_CODE_EXPIRED = 968659868867981662n;
export const MF_E_GRL_VERSION_TOO_LOW = 968660968379609439n;
export const MF_E_GRL_RENEWAL_NOT_FOUND = 968662067891237216n;
export const MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND = 968663167402864993n;
export const MF_E_KERNEL_UNTRUSTED = 968664266914492770n;
export const MF_E_PEAUTH_UNTRUSTED = 968666465937748323n;
export const MF_E_NON_PE_PROCESS = 968668664961003877n;
export const MF_E_REBOOT_REQUIRED = 968669764472631655n;
export const MF_S_WAIT_FOR_POLICY_SET = 968670860763033960n;
export const MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT = 968671960274661737n;
export const MF_E_GRL_INVALID_FORMAT = 968673063007514986n;
export const MF_E_GRL_UNRECOGNIZED_FORMAT = 968674162519142763n;
export const MF_E_ALL_PROCESS_RESTART_REQUIRED = 968675262030770540n;
export const MF_E_PROCESS_RESTART_REQUIRED = 968676361542398317n;
export const MF_E_USERMODE_UNTRUSTED = 968677461054026094n;
export const MF_E_PEAUTH_SESSION_NOT_STARTED = 968679660077281647n;
export const MF_E_PEAUTH_PUBLICKEY_REVOKED = 968680759588909425n;
export const MF_E_GRL_ABSENT = 968681859100537202n;
export const MF_S_PE_TRUSTED = 968682955390939507n;
export const MF_E_PE_UNTRUSTED = 968684058123792756n;
export const MF_E_PEAUTH_NOT_STARTED = 968685157635420533n;
export const MF_E_INCOMPATIBLE_SAMPLE_PROTECTION = 968686257147048310n;
export const MF_E_PE_SESSIONS_MAXED = 968687356658676087n;
export const MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED = 968688456170303864n;
export const MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED = 968689555681931641n;
export const MF_E_ITA_UNSUPPORTED_ACTION = 968690655193559418n;
export const MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS = 968691754705187195n;
export const MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS = 968692854216814972n;
export const MF_E_BAD_OPL_STRUCTURE_FORMAT = 968693953728442749n;
export const MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID = 968695053240070526n;
export const MF_E_NO_PMP_HOST = 968696152751698303n;
export const MF_E_ITA_OPL_DATA_NOT_INITIALIZED = 968697252263326080n;
export const MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT = 968698351774953857n;
export const MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT = 968699451286581634n;
export const MF_E_RESOLUTION_REQUIRES_PMP_CREATION_CALLBACK = 968700550798209411n;
export const MF_E_INVALID_AKE_CHANNEL_PARAMETERS = 968701650309837188n;
export const MF_E_CONTENT_PROTECTION_SYSTEM_NOT_ENABLED = 968702749821464965n;
export const MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM = 968703849333092742n;
export const MF_E_DRM_MIGRATION_NOT_SUPPORTED = 968704948844720519n;
export const MF_E_HDCP_AUTHENTICATION_FAILURE = 968706048356348296n;
export const MF_E_HDCP_LINK_FAILURE = 980729208006078857n;
export const MF_E_CLOCK_INVALID_CONTINUITY_KEY = 980730307517717568n;
export const MF_E_CLOCK_NO_TIME_SOURCE = 980731407029345345n;
export const MF_E_CLOCK_STATE_ALREADY_SET = 980732506540973122n;
export const MF_E_CLOCK_NOT_SIMPLE = 980733606052600899n;
export const MF_S_CLOCK_STOPPED = 980734702343003204n;
export const MF_E_CLOCK_AUDIO_DEVICE_POSITION_UNEXPECTED = 980735801854630981n;
export const MF_E_CLOCK_AUDIO_RENDER_POSITION_UNEXPECTED = 980736901366258758n;
export const MF_E_CLOCK_AUDIO_RENDER_TIME_UNEXPECTED = 981828716412640327n;
export const MF_E_NO_MORE_DROP_MODES = 981829819145494568n;
export const MF_E_NO_MORE_QUALITY_LEVELS = 981830918657122345n;
export const MF_E_DROPTIME_NOT_SUPPORTED = 981832018168750122n;
export const MF_E_QUALITYKNOB_WAIT_LONGER = 981833117680377899n;
export const MF_E_QM_INVALIDSTATE = 982928231261642796n;
export const MF_E_TRANSCODE_NO_CONTAINERTYPE = 982929330773271568n;
export const MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS = 982930430284899345n;
export const MF_E_TRANSCODE_NO_MATCHING_ENCODER = 982931529796527122n;
export const MF_E_TRANSCODE_INVALID_PROFILE = 984027742889419795n;
export const MF_E_ALLOCATOR_NOT_INITIALIZED = 984028842401048568n;
export const MF_E_ALLOCATOR_NOT_COMMITED = 984029941912676345n;
export const MF_E_ALLOCATOR_ALREADY_COMMITED = 984031041424304122n;
export const MF_E_STREAM_ERROR = 984032140935931899n;
export const MF_E_INVALID_STREAM_STATE = 984033240447559676n;
export const MF_E_HW_STREAM_NOT_CONNECTED = 985127254517196797n;
export const MF_E_NO_CAPTURE_DEVICES_AVAILABLE = 985128354028825568n;
export const MF_E_CAPTURE_SINK_OUTPUT_NOT_SET = 985129453540453345n;
export const MF_E_CAPTURE_SINK_MIRROR_ERROR = 985130553052081122n;
export const MF_E_CAPTURE_SINK_ROTATE_ERROR = 985131652563708899n;
export const MF_E_CAPTURE_ENGINE_INVALID_OP = 985132752075336676n;
export const MF_E_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED = 985133851586964453n;
export const MF_E_CAPTURE_SOURCE_NO_INDEPENDENT_PHOTO_STREAM_PRESENT = 985134951098592230n;
export const MF_E_CAPTURE_SOURCE_NO_VIDEO_STREAM_PRESENT = 985136050610220007n;
export const MF_E_CAPTURE_SOURCE_NO_AUDIO_STREAM_PRESENT = 985137150121847784n;
export const MF_E_CAPTURE_SOURCE_DEVICE_EXTENDEDPROP_OP_IN_PROGRESS = 985138249633475561n;
export const MF_E_CAPTURE_PROPERTY_SET_DURING_PHOTO = 985139349145103338n;
export const MF_E_CAPTURE_NO_SAMPLES_IN_QUEUE = 985140448656731115n;
export const MF_E_HW_ACCELERATED_THUMBNAIL_NOT_SUPPORTED = 985141548168358892n;
export const MF_E_UNSUPPORTED_CAPTURE_DEVICE_PRESENT = 986226766144973805n;
export const MF_E_TIMELINECONTROLLER_UNSUPPORTED_SOURCE_TYPE = 986227865656602568n;
export const MF_E_TIMELINECONTROLLER_NOT_ALLOWED = 986228965168230345n;
export const MF_E_TIMELINECONTROLLER_CANNOT_ATTACH = 987326277772750794n;
export const MF_E_MEDIA_EXTENSION_APPSERVICE_CONNECTION_FAILED = 987327377284379568n;
export const MF_E_MEDIA_EXTENSION_APPSERVICE_REQUEST_FAILED = 987328476796007345n;
export const MF_E_MEDIA_EXTENSION_PACKAGE_INTEGRITY_CHECK_FAILED = 987329576307635122n;
export const MF_E_MEDIA_EXTENSION_PACKAGE_LICENSE_INVALID = 8070451652161549235n;
export const MF_INDEX_SIZE_ERR = 2154823681;
export const MF_NOT_FOUND_ERR = 2154823688;
export const MF_NOT_SUPPORTED_ERR = 2154823689;
export const MF_INVALID_STATE_ERR = 2154823691;
export const MF_SYNTAX_ERR = 2154823692;
export const MF_INVALID_ACCESS_ERR = 2154823695;
export const MF_QUOTA_EXCEEDED_ERR = 2154823702;
export const MF_PARSE_ERR = 2154823761;
export const MF_TYPE_ERR = 2154840069;
export const g_wszSpeechFormatCaps = "SpeechFormatCap";
export const g_wszWMCPCodecName = "_CODECNAME";
export const g_wszWMCPSupportedVBRModes = "_SUPPORTEDVBRMODES";
export const g_wszWMCPAudioVBRSupported = "_VBRENABLED";
export const g_wszWMCPAudioVBRQuality = "_VBRQUALITY";
export const g_wszWMCPMaxPasses = "_PASSESRECOMMENDED";
export const g_wszWMCPDefaultCrisp = "_DEFAULTCRISP";
export const COPP_ProtectionType_Unknown = "-2147483648";
export const COPP_ProtectionType_None = 0;
export const COPP_ProtectionType_HDCP = 1;
export const COPP_ProtectionType_ACP = 2;
export const COPP_ProtectionType_CGMSA = 4;
export const COPP_ProtectionType_Mask = "-2147483641";
export const COPP_ProtectionType_Reserved = 2147483640;
export const WMPGC_FLAGS_ALLOW_PREROLL = 1;
export const WMPGC_FLAGS_SUPPRESS_DIALOGS = 2;
export const WMPGC_FLAGS_IGNORE_AV_SYNC = 4;
export const WMPGC_FLAGS_DISABLE_PLUGINS = 8;
export const WMPGC_FLAGS_USE_CUSTOM_GRAPH = 16;
export const WMPUE_EC_USER = 33024;
export const WMP_MDRT_FLAGS_UNREPORTED_DELETED_ITEMS = 1;
export const WMP_MDRT_FLAGS_UNREPORTED_ADDED_ITEMS = 2;
export const IOCTL_WMP_METADATA_ROUND_TRIP = 827346263;
export const IOCTL_WMP_DEVICE_CAN_SYNC = 844123479;
export const EFFECT_CANGOFULLSCREEN = 1;
export const EFFECT_HASPROPERTYPAGE = 2;
export const EFFECT_VARIABLEFREQSTEP = 4;
export const EFFECT_WINDOWEDONLY = 8;
export const EFFECT2_FULLSCREENEXCLUSIVE = 16;
export const SA_BUFFER_SIZE = 1024;
export const PLUGIN_INSTALLREGKEY = "Software\Microsoft\MediaPlayer\UIPlugins";
export const PLUGIN_INSTALLREGKEY_FRIENDLYNAME = "FriendlyName";
export const PLUGIN_INSTALLREGKEY_DESCRIPTION = "Description";
export const PLUGIN_INSTALLREGKEY_CAPABILITIES = "Capabilities";
export const PLUGIN_INSTALLREGKEY_UNINSTALL = "UninstallPath";
export const PLUGIN_TYPE_BACKGROUND = 1;
export const PLUGIN_TYPE_SEPARATEWINDOW = 2;
export const PLUGIN_TYPE_DISPLAYAREA = 3;
export const PLUGIN_TYPE_SETTINGSAREA = 4;
export const PLUGIN_TYPE_METADATAAREA = 5;
export const PLUGIN_FLAGS_HASPROPERTYPAGE = 2147483648;
export const PLUGIN_FLAGS_INSTALLAUTORUN = 1073741824;
export const PLUGIN_FLAGS_LAUNCHPROPERTYPAGE = 536870912;
export const PLUGIN_FLAGS_ACCEPTSMEDIA = 268435456;
export const PLUGIN_FLAGS_ACCEPTSPLAYLISTS = 134217728;
export const PLUGIN_FLAGS_HASPRESETS = 67108864;
export const PLUGIN_FLAGS_HIDDEN = 33554432;
export const PLUGIN_MISC_PRESETCOUNT = "PresetCount";
export const PLUGIN_MISC_PRESETNAMES = "PresetNames";
export const PLUGIN_MISC_CURRENTPRESET = "CurrentPreset";
export const PLUGIN_SEPARATEWINDOW_RESIZABLE = "Resizable";
export const PLUGIN_SEPARATEWINDOW_DEFAULTWIDTH = "DefaultWidth";
export const PLUGIN_SEPARATEWINDOW_DEFAULTHEIGHT = "DefaultHeight";
export const PLUGIN_SEPARATEWINDOW_MINWIDTH = "MinWidth";
export const PLUGIN_SEPARATEWINDOW_MINHEIGHT = "MinHeight";
export const PLUGIN_SEPARATEWINDOW_MAXWIDTH = "MaxWidth";
export const PLUGIN_SEPARATEWINDOW_MAXHEIGHT = "MaxHeight";
export const PLUGIN_MISC_QUERYDESTROY = "QueryDestroy";
export const PLUGIN_ALL_MEDIASENDTO = "MediaSendTo";
export const PLUGIN_ALL_PLAYLISTSENDTO = "PlaylistSendTo";
export const SUBSCRIPTION_CAP_DEVICEAVAILABLE = 16;
export const SUBSCRIPTION_CAP_BACKGROUNDPROCESSING = 8;
export const SUBSCRIPTION_CAP_IS_CONTENTPARTNER = 64;
export const SUBSCRIPTION_CAP_ALTLOGIN = 128;
export const SUBSCRIPTION_CAP_ALLOWPLAY = 1;
export const SUBSCRIPTION_CAP_ALLOWCDBURN = 2;
export const SUBSCRIPTION_CAP_ALLOWPDATRANSFER = 4;
export const SUBSCRIPTION_CAP_PREPAREFORSYNC = 32;
export const SUBSCRIPTION_V1_CAPS = 15;
export const SUBSCRIPTION_CAP_UILESSMODE_ALLOWPLAY = 256;
export const WMP_SUBSCR_DL_TYPE_BACKGROUND = "background";
export const WMP_SUBSCR_DL_TYPE_REALTIME = "real time";
export const DISPID_FEEDS_RootFolder = 4096;
export const DISPID_FEEDS_IsSubscribed = 4097;
export const DISPID_FEEDS_ExistsFeed = 4098;
export const DISPID_FEEDS_GetFeed = 4099;
export const DISPID_FEEDS_ExistsFolder = 4100;
export const DISPID_FEEDS_GetFolder = 4101;
export const DISPID_FEEDS_DeleteFeed = 4102;
export const DISPID_FEEDS_DeleteFolder = 4103;
export const DISPID_FEEDS_GetFeedByUrl = 4104;
export const DISPID_FEEDS_BackgroundSync = 4105;
export const DISPID_FEEDS_BackgroundSyncStatus = 4106;
export const DISPID_FEEDS_DefaultInterval = 4107;
export const DISPID_FEEDS_AsyncSyncAll = 4108;
export const DISPID_FEEDS_Normalize = 4109;
export const DISPID_FEEDS_ItemCountLimit = 4110;
export const DISPID_FEEDSENUM_Count = 8192;
export const DISPID_FEEDSENUM_Item = 8193;
export const DISPID_FEEDFOLDER_Feeds = 12288;
export const DISPID_FEEDFOLDER_Subfolders = 12289;
export const DISPID_FEEDFOLDER_CreateFeed = 12290;
export const DISPID_FEEDFOLDER_CreateSubfolder = 12291;
export const DISPID_FEEDFOLDER_ExistsFeed = 12292;
export const DISPID_FEEDFOLDER_GetFeed = 12293;
export const DISPID_FEEDFOLDER_ExistsSubfolder = 12294;
export const DISPID_FEEDFOLDER_GetSubfolder = 12295;
export const DISPID_FEEDFOLDER_Delete = 12296;
export const DISPID_FEEDFOLDER_Name = 12297;
export const DISPID_FEEDFOLDER_Rename = 12298;
export const DISPID_FEEDFOLDER_Path = 12299;
export const DISPID_FEEDFOLDER_Move = 12300;
export const DISPID_FEEDFOLDER_Parent = 12301;
export const DISPID_FEEDFOLDER_IsRoot = 12302;
export const DISPID_FEEDFOLDER_TotalUnreadItemCount = 12303;
export const DISPID_FEEDFOLDER_TotalItemCount = 12304;
export const DISPID_FEEDFOLDER_GetWatcher = 12305;
export const DISPID_FEED_Xml = 16384;
export const DISPID_FEED_Name = 16385;
export const DISPID_FEED_Rename = 16386;
export const DISPID_FEED_Url = 16387;
export const DISPID_FEED_LocalId = 16388;
export const DISPID_FEED_Path = 16389;
export const DISPID_FEED_Move = 16390;
export const DISPID_FEED_Parent = 16391;
export const DISPID_FEED_LastWriteTime = 16392;
export const DISPID_FEED_Delete = 16393;
export const DISPID_FEED_Download = 16394;
export const DISPID_FEED_AsyncDownload = 16395;
export const DISPID_FEED_CancelAsyncDownload = 16396;
export const DISPID_FEED_Interval = 16397;
export const DISPID_FEED_SyncSetting = 16398;
export const DISPID_FEED_LastDownloadTime = 16399;
export const DISPID_FEED_LocalEnclosurePath = 16400;
export const DISPID_FEED_Items = 16401;
export const DISPID_FEED_GetItem = 16402;
export const DISPID_FEED_Title = 16403;
export const DISPID_FEED_Description = 16404;
export const DISPID_FEED_Link = 16405;
export const DISPID_FEED_Image = 16406;
export const DISPID_FEED_LastBuildDate = 16407;
export const DISPID_FEED_PubDate = 16408;
export const DISPID_FEED_Ttl = 16409;
export const DISPID_FEED_Language = 16410;
export const DISPID_FEED_Copyright = 16411;
export const DISPID_FEED_DownloadEnclosuresAutomatically = 16412;
export const DISPID_FEED_DownloadStatus = 16413;
export const DISPID_FEED_LastDownloadError = 16414;
export const DISPID_FEED_Merge = 16415;
export const DISPID_FEED_DownloadUrl = 16416;
export const DISPID_FEED_IsList = 16417;
export const DISPID_FEED_MarkAllItemsRead = 16418;
export const DISPID_FEED_GetWatcher = 16419;
export const DISPID_FEED_UnreadItemCount = 16420;
export const DISPID_FEED_ItemCount = 16421;
export const DISPID_FEED_MaxItemCount = 16422;
export const DISPID_FEED_GetItemByEffectiveId = 16423;
export const DISPID_FEED_LastItemDownloadTime = 16424;
export const DISPID_FEED_Username = 16425;
export const DISPID_FEED_Password = 16426;
export const DISPID_FEED_SetCredentials = 16427;
export const DISPID_FEED_ClearCredentials = 16428;
export const DISPID_FEEDITEM_Xml = 20480;
export const DISPID_FEEDITEM_Title = 20481;
export const DISPID_FEEDITEM_Link = 20482;
export const DISPID_FEEDITEM_Guid = 20483;
export const DISPID_FEEDITEM_Description = 20484;
export const DISPID_FEEDITEM_PubDate = 20485;
export const DISPID_FEEDITEM_Comments = 20486;
export const DISPID_FEEDITEM_Author = 20487;
export const DISPID_FEEDITEM_Enclosure = 20488;
export const DISPID_FEEDITEM_IsRead = 20489;
export const DISPID_FEEDITEM_LocalId = 20490;
export const DISPID_FEEDITEM_Parent = 20491;
export const DISPID_FEEDITEM_Delete = 20492;
export const DISPID_FEEDITEM_DownloadUrl = 20493;
export const DISPID_FEEDITEM_LastDownloadTime = 20494;
export const DISPID_FEEDITEM_Modified = 20495;
export const DISPID_FEEDITEM_EffectiveId = 20496;
export const DISPID_FEEDENCLOSURE_Url = 24576;
export const DISPID_FEEDENCLOSURE_Type = 24577;
export const DISPID_FEEDENCLOSURE_Length = 24578;
export const DISPID_FEEDENCLOSURE_AsyncDownload = 24579;
export const DISPID_FEEDENCLOSURE_CancelAsyncDownload = 24580;
export const DISPID_FEEDENCLOSURE_DownloadStatus = 24581;
export const DISPID_FEEDENCLOSURE_LastDownloadError = 24582;
export const DISPID_FEEDENCLOSURE_LocalPath = 24583;
export const DISPID_FEEDENCLOSURE_Parent = 24584;
export const DISPID_FEEDENCLOSURE_DownloadUrl = 24585;
export const DISPID_FEEDENCLOSURE_DownloadMimeType = 24586;
export const DISPID_FEEDENCLOSURE_RemoveFile = 24587;
export const DISPID_FEEDENCLOSURE_SetFile = 24588;
export const DISPID_FEEDFOLDEREVENTS_Error = 28672;
export const DISPID_FEEDFOLDEREVENTS_FolderAdded = 28673;
export const DISPID_FEEDFOLDEREVENTS_FolderDeleted = 28674;
export const DISPID_FEEDFOLDEREVENTS_FolderRenamed = 28675;
export const DISPID_FEEDFOLDEREVENTS_FolderMovedFrom = 28676;
export const DISPID_FEEDFOLDEREVENTS_FolderMovedTo = 28677;
export const DISPID_FEEDFOLDEREVENTS_FolderItemCountChanged = 28678;
export const DISPID_FEEDFOLDEREVENTS_FeedAdded = 28679;
export const DISPID_FEEDFOLDEREVENTS_FeedDeleted = 28680;
export const DISPID_FEEDFOLDEREVENTS_FeedRenamed = 28681;
export const DISPID_FEEDFOLDEREVENTS_FeedUrlChanged = 28682;
export const DISPID_FEEDFOLDEREVENTS_FeedMovedFrom = 28683;
export const DISPID_FEEDFOLDEREVENTS_FeedMovedTo = 28684;
export const DISPID_FEEDFOLDEREVENTS_FeedDownloading = 28685;
export const DISPID_FEEDFOLDEREVENTS_FeedDownloadCompleted = 28686;
export const DISPID_FEEDFOLDEREVENTS_FeedItemCountChanged = 28687;
export const DISPID_FEEDEVENTS_Error = 32768;
export const DISPID_FEEDEVENTS_FeedDeleted = 32769;
export const DISPID_FEEDEVENTS_FeedRenamed = 32770;
export const DISPID_FEEDEVENTS_FeedUrlChanged = 32771;
export const DISPID_FEEDEVENTS_FeedMoved = 32772;
export const DISPID_FEEDEVENTS_FeedDownloading = 32773;
export const DISPID_FEEDEVENTS_FeedDownloadCompleted = 32774;
export const DISPID_FEEDEVENTS_FeedItemCountChanged = 32775;
export const DISPID_DELTA = 50;
export const DISPID_WMPCORE_BASE = 0;
export const DISPID_WMPCORE_URL = 1;
export const DISPID_WMPCORE_OPENSTATE = 2;
export const DISPID_WMPCORE_CLOSE = 3;
export const DISPID_WMPCORE_CONTROLS = 4;
export const DISPID_WMPCORE_SETTINGS = 5;
export const DISPID_WMPCORE_CURRENTMEDIA = 6;
export const DISPID_WMPCORE_NETWORK = 7;
export const DISPID_WMPCORE_MEDIACOLLECTION = 8;
export const DISPID_WMPCORE_PLAYLISTCOLLECTION = 9;
export const DISPID_WMPCORE_PLAYSTATE = 10;
export const DISPID_WMPCORE_VERSIONINFO = 11;
export const DISPID_WMPCORE_LAUNCHURL = 12;
export const DISPID_WMPCORE_CURRENTPLAYLIST = 13;
export const DISPID_WMPCORE_CDROMCOLLECTION = 14;
export const DISPID_WMPCORE_CLOSEDCAPTION = 15;
export const DISPID_WMPCORE_ISONLINE = 16;
export const DISPID_WMPCORE_ERROR = 17;
export const DISPID_WMPCORE_STATUS = 18;
export const DISPID_WMPCORE_LAST = 18;
export const DISPID_WMPOCX_BASE = 18;
export const DISPID_WMPOCX_ENABLED = 19;
export const DISPID_WMPOCX_TRANSPARENTATSTART = 20;
export const DISPID_WMPOCX_FULLSCREEN = 21;
export const DISPID_WMPOCX_ENABLECONTEXTMENU = 22;
export const DISPID_WMPOCX_UIMODE = 23;
export const DISPID_WMPOCX_LAST = 23;
export const DISPID_WMPOCX2_BASE = 23;
export const DISPID_WMPOCX2_STRETCHTOFIT = 24;
export const DISPID_WMPOCX2_WINDOWLESSVIDEO = 25;
export const DISPID_WMPOCX4_ISREMOTE = 26;
export const DISPID_WMPOCX4_PLAYERAPPLICATION = 27;
export const DISPID_WMPOCX4_OPENPLAYER = 28;
export const DISPID_WMPCORE2_BASE = 39;
export const DISPID_WMPCORE2_DVD = 40;
export const DISPID_WMPCORE3_NEWPLAYLIST = 41;
export const DISPID_WMPCORE3_NEWMEDIA = 42;
export const DISPID_WMPCONTROLS_PLAY = 51;
export const DISPID_WMPCONTROLS_STOP = 52;
export const DISPID_WMPCONTROLS_PAUSE = 53;
export const DISPID_WMPCONTROLS_FASTFORWARD = 54;
export const DISPID_WMPCONTROLS_FASTREVERSE = 55;
export const DISPID_WMPCONTROLS_CURRENTPOSITION = 56;
export const DISPID_WMPCONTROLS_CURRENTPOSITIONSTRING = 57;
export const DISPID_WMPCONTROLS_NEXT = 58;
export const DISPID_WMPCONTROLS_PREVIOUS = 59;
export const DISPID_WMPCONTROLS_CURRENTITEM = 60;
export const DISPID_WMPCONTROLS_CURRENTMARKER = 61;
export const DISPID_WMPCONTROLS_ISAVAILABLE = 62;
export const DISPID_WMPCONTROLS_PLAYITEM = 63;
export const DISPID_WMPCONTROLS2_STEP = 64;
export const DISPID_WMPCONTROLS3_AUDIOLANGUAGECOUNT = 65;
export const DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEID = 66;
export const DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEDESC = 67;
export const DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGE = 68;
export const DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGEINDEX = 69;
export const DISPID_WMPCONTROLS3_GETLANGUAGENAME = 70;
export const DISPID_WMPCONTROLS3_CURRENTPOSITIONTIMECODE = 71;
export const DISPID_WMPCONTROLSFAKE_TIMECOMPRESSION = 72;
export const DISPID_WMPSETTINGS_AUTOSTART = 101;
export const DISPID_WMPSETTINGS_BALANCE = 102;
export const DISPID_WMPSETTINGS_INVOKEURLS = 103;
export const DISPID_WMPSETTINGS_MUTE = 104;
export const DISPID_WMPSETTINGS_PLAYCOUNT = 105;
export const DISPID_WMPSETTINGS_RATE = 106;
export const DISPID_WMPSETTINGS_VOLUME = 107;
export const DISPID_WMPSETTINGS_BASEURL = 108;
export const DISPID_WMPSETTINGS_DEFAULTFRAME = 109;
export const DISPID_WMPSETTINGS_GETMODE = 110;
export const DISPID_WMPSETTINGS_SETMODE = 111;
export const DISPID_WMPSETTINGS_ENABLEERRORDIALOGS = 112;
export const DISPID_WMPSETTINGS_ISAVAILABLE = 113;
export const DISPID_WMPSETTINGS2_DEFAULTAUDIOLANGUAGE = 114;
export const DISPID_WMPSETTINGS2_LIBRARYACCESSRIGHTS = 115;
export const DISPID_WMPSETTINGS2_REQUESTLIBRARYACCESSRIGHTS = 116;
export const DISPID_WMPPLAYLIST_COUNT = 201;
export const DISPID_WMPPLAYLIST_NAME = 202;
export const DISPID_WMPPLAYLIST_GETITEMINFO = 203;
export const DISPID_WMPPLAYLIST_SETITEMINFO = 204;
export const DISPID_WMPPLAYLIST_CLEAR = 205;
export const DISPID_WMPPLAYLIST_INSERTITEM = 206;
export const DISPID_WMPPLAYLIST_APPENDITEM = 207;
export const DISPID_WMPPLAYLIST_REMOVEITEM = 208;
export const DISPID_WMPPLAYLIST_MOVEITEM = 209;
export const DISPID_WMPPLAYLIST_ATTRIBUTECOUNT = 210;
export const DISPID_WMPPLAYLIST_ATTRIBUTENAME = 211;
export const DISPID_WMPPLAYLIST_ITEM = 212;
export const DISPID_WMPPLAYLIST_ISIDENTICAL = 213;
export const DISPID_WMPCDROM_DRIVESPECIFIER = 251;
export const DISPID_WMPCDROM_PLAYLIST = 252;
export const DISPID_WMPCDROM_EJECT = 253;
export const DISPID_WMPCDROMCOLLECTION_COUNT = 301;
export const DISPID_WMPCDROMCOLLECTION_ITEM = 302;
export const DISPID_WMPCDROMCOLLECTION_GETBYDRIVESPECIFIER = 303;
export const DISPID_WMPCDROMCOLLECTION_STARTMONITORINGCDROMS = 304;
export const DISPID_WMPCDROMCOLLECTION_STOPMONITORINGCDROMS = 305;
export const DISPID_WMPSTRINGCOLLECTION_COUNT = 401;
export const DISPID_WMPSTRINGCOLLECTION_ITEM = 402;
export const DISPID_WMPMEDIACOLLECTION_ADD = 452;
export const DISPID_WMPMEDIACOLLECTION_GETALL = 453;
export const DISPID_WMPMEDIACOLLECTION_GETBYNAME = 454;
export const DISPID_WMPMEDIACOLLECTION_GETBYGENRE = 455;
export const DISPID_WMPMEDIACOLLECTION_GETBYAUTHOR = 456;
export const DISPID_WMPMEDIACOLLECTION_GETBYALBUM = 457;
export const DISPID_WMPMEDIACOLLECTION_GETBYATTRIBUTE = 458;
export const DISPID_WMPMEDIACOLLECTION_REMOVE = 459;
export const DISPID_WMPMEDIACOLLECTION_GETATTRIBUTESTRINGCOLLECTION = 461;
export const DISPID_WMPMEDIACOLLECTION_NEWQUERY = 462;
export const DISPID_WMPMEDIACOLLECTION_STARTMONITORING = 463;
export const DISPID_WMPMEDIACOLLECTION_STOPMONITORING = 464;
export const DISPID_WMPMEDIACOLLECTION_STARTCONTENTSCAN = 465;
export const DISPID_WMPMEDIACOLLECTION_STOPCONTENTSCAN = 466;
export const DISPID_WMPMEDIACOLLECTION_STARTSEARCH = 467;
export const DISPID_WMPMEDIACOLLECTION_STOPSEARCH = 468;
export const DISPID_WMPMEDIACOLLECTION_UPDATEMETADATA = 469;
export const DISPID_WMPMEDIACOLLECTION_GETMEDIAATOM = 470;
export const DISPID_WMPMEDIACOLLECTION_SETDELETED = 471;
export const DISPID_WMPMEDIACOLLECTION_ISDELETED = 472;
export const DISPID_WMPMEDIACOLLECTION_GETBYQUERYDESCRIPTION = 473;
export const DISPID_WMPMEDIACOLLECTION_FREEZECOLLECTIONCHANGE = 474;
export const DISPID_WMPMEDIACOLLECTION_UNFREEZECOLLECTIONCHANGE = 475;
export const DISPID_WMPMEDIACOLLECTION_POSTCOLLECTIONCHANGE = 476;
export const DISPID_WMPPLAYLISTARRAY_COUNT = 501;
export const DISPID_WMPPLAYLISTARRAY_ITEM = 502;
export const DISPID_WMPPLAYLISTCOLLECTION_NEWPLAYLIST = 552;
export const DISPID_WMPPLAYLISTCOLLECTION_GETALL = 553;
export const DISPID_WMPPLAYLISTCOLLECTION_GETBYNAME = 554;
export const DISPID_WMPPLAYLISTCOLLECTION_GETBYQUERYDESCRIPTION = 555;
export const DISPID_WMPPLAYLISTCOLLECTION_REMOVE = 556;
export const DISPID_WMPPLAYLISTCOLLECTION_NEWQUERY = 557;
export const DISPID_WMPPLAYLISTCOLLECTION_STARTMONITORING = 558;
export const DISPID_WMPPLAYLISTCOLLECTION_STOPMONITORING = 559;
export const DISPID_WMPPLAYLISTCOLLECTION_SETDELETED = 560;
export const DISPID_WMPPLAYLISTCOLLECTION_ISDELETED = 561;
export const DISPID_WMPPLAYLISTCOLLECTION_IMPORTPLAYLIST = 562;
export const DISPID_WMPMEDIA_SOURCEURL = 751;
export const DISPID_WMPMEDIA_IMAGESOURCEWIDTH = 752;
export const DISPID_WMPMEDIA_IMAGESOURCEHEIGHT = 753;
export const DISPID_WMPMEDIA_MARKERCOUNT = 754;
export const DISPID_WMPMEDIA_GETMARKERTIME = 755;
export const DISPID_WMPMEDIA_GETMARKERNAME = 756;
export const DISPID_WMPMEDIA_DURATION = 757;
export const DISPID_WMPMEDIA_DURATIONSTRING = 758;
export const DISPID_WMPMEDIA_ATTRIBUTECOUNT = 759;
export const DISPID_WMPMEDIA_GETATTRIBUTENAME = 760;
export const DISPID_WMPMEDIA_GETITEMINFO = 761;
export const DISPID_WMPMEDIA_SETITEMINFO = 762;
export const DISPID_WMPMEDIA_ISIDENTICAL = 763;
export const DISPID_WMPMEDIA_NAME = 764;
export const DISPID_WMPMEDIA_GETITEMINFOBYATOM = 765;
export const DISPID_WMPMEDIA_ISMEMBEROF = 766;
export const DISPID_WMPMEDIA_ISREADONLYITEM = 767;
export const DISPID_WMPMEDIA2_ERROR = 768;
export const DISPID_WMPMEDIA3_GETATTRIBUTECOUNTBYTYPE = 769;
export const DISPID_WMPMEDIA3_GETITEMINFOBYTYPE = 770;
export const DISPID_WMPNETWORK_BANDWIDTH = 801;
export const DISPID_WMPNETWORK_RECOVEREDPACKETS = 802;
export const DISPID_WMPNETWORK_SOURCEPROTOCOL = 803;
export const DISPID_WMPNETWORK_RECEIVEDPACKETS = 804;
export const DISPID_WMPNETWORK_LOSTPACKETS = 805;
export const DISPID_WMPNETWORK_RECEPTIONQUALITY = 806;
export const DISPID_WMPNETWORK_BUFFERINGCOUNT = 807;
export const DISPID_WMPNETWORK_BUFFERINGPROGRESS = 808;
export const DISPID_WMPNETWORK_BUFFERINGTIME = 809;
export const DISPID_WMPNETWORK_FRAMERATE = 810;
export const DISPID_WMPNETWORK_MAXBITRATE = 811;
export const DISPID_WMPNETWORK_BITRATE = 812;
export const DISPID_WMPNETWORK_GETPROXYSETTINGS = 813;
export const DISPID_WMPNETWORK_SETPROXYSETTINGS = 814;
export const DISPID_WMPNETWORK_GETPROXYNAME = 815;
export const DISPID_WMPNETWORK_SETPROXYNAME = 816;
export const DISPID_WMPNETWORK_GETPROXYPORT = 817;
export const DISPID_WMPNETWORK_SETPROXYPORT = 818;
export const DISPID_WMPNETWORK_GETPROXYEXCEPTIONLIST = 819;
export const DISPID_WMPNETWORK_SETPROXYEXCEPTIONLIST = 820;
export const DISPID_WMPNETWORK_GETPROXYBYPASSFORLOCAL = 821;
export const DISPID_WMPNETWORK_SETPROXYBYPASSFORLOCAL = 822;
export const DISPID_WMPNETWORK_MAXBANDWIDTH = 823;
export const DISPID_WMPNETWORK_DOWNLOADPROGRESS = 824;
export const DISPID_WMPNETWORK_ENCODEDFRAMERATE = 825;
export const DISPID_WMPNETWORK_FRAMESSKIPPED = 826;
export const DISPID_WMPERROR_CLEARERRORQUEUE = 851;
export const DISPID_WMPERROR_ERRORCOUNT = 852;
export const DISPID_WMPERROR_ITEM = 853;
export const DISPID_WMPERROR_WEBHELP = 854;
export const DISPID_WMPERRORITEM_ERRORCODE = 901;
export const DISPID_WMPERRORITEM_ERRORDESCRIPTION = 902;
export const DISPID_WMPERRORITEM_ERRORCONTEXT = 903;
export const DISPID_WMPERRORITEM_REMEDY = 904;
export const DISPID_WMPERRORITEM_CUSTOMURL = 905;
export const DISPID_WMPERRORITEM2_CONDITION = 906;
export const DISPID_WMPCLOSEDCAPTION_SAMISTYLE = 951;
export const DISPID_WMPCLOSEDCAPTION_SAMILANG = 952;
export const DISPID_WMPCLOSEDCAPTION_SAMIFILENAME = 953;
export const DISPID_WMPCLOSEDCAPTION_CAPTIONINGID = 954;
export const DISPID_WMPCLOSEDCAPTION2_GETLANGCOUNT = 955;
export const DISPID_WMPCLOSEDCAPTION2_GETLANGNAME = 956;
export const DISPID_WMPCLOSEDCAPTION2_GETLANGID = 957;
export const DISPID_WMPCLOSEDCAPTION2_GETSTYLECOUNT = 958;
export const DISPID_WMPCLOSEDCAPTION2_GETSTYLENAME = 959;
export const DISPID_WMPDVD_ISAVAILABLE = 1001;
export const DISPID_WMPDVD_DOMAIN = 1002;
export const DISPID_WMPDVD_TOPMENU = 1003;
export const DISPID_WMPDVD_TITLEMENU = 1004;
export const DISPID_WMPDVD_BACK = 1005;
export const DISPID_WMPDVD_RESUME = 1006;
export const DISPID_WMPMETADATA_PICTURE_MIMETYPE = 1051;
export const DISPID_WMPMETADATA_PICTURE_PICTURETYPE = 1052;
export const DISPID_WMPMETADATA_PICTURE_DESCRIPTION = 1053;
export const DISPID_WMPMETADATA_PICTURE_URL = 1054;
export const DISPID_WMPMETADATA_TEXT_TEXT = 1055;
export const DISPID_WMPMETADATA_TEXT_DESCRIPTION = 1056;
export const DISPID_WMPPLAYERAPP_SWITCHTOPLAYERAPPLICATION = 1101;
export const DISPID_WMPPLAYERAPP_SWITCHTOCONTROL = 1102;
export const DISPID_WMPPLAYERAPP_PLAYERDOCKED = 1103;
export const DISPID_WMPPLAYERAPP_HASDISPLAY = 1104;
export const DISPID_WMPPLAYERAPP_REMOTESTATUS = 1105;
export const DISPID_WMPDOWNLOADMANAGER_GETDOWNLOADCOLLECTION = 1151;
export const DISPID_WMPDOWNLOADMANAGER_CREATEDOWNLOADCOLLECTION = 1152;
export const DISPID_WMPDOWNLOADCOLLECTION_ID = 1201;
export const DISPID_WMPDOWNLOADCOLLECTION_COUNT = 1202;
export const DISPID_WMPDOWNLOADCOLLECTION_ITEM = 1203;
export const DISPID_WMPDOWNLOADCOLLECTION_STARTDOWNLOAD = 1204;
export const DISPID_WMPDOWNLOADCOLLECTION_REMOVEITEM = 1205;
export const DISPID_WMPDOWNLOADCOLLECTION_CLEAR = 1206;
export const DISPID_WMPDOWNLOADITEM_SOURCEURL = 1251;
export const DISPID_WMPDOWNLOADITEM_SIZE = 1252;
export const DISPID_WMPDOWNLOADITEM_TYPE = 1253;
export const DISPID_WMPDOWNLOADITEM_PROGRESS = 1254;
export const DISPID_WMPDOWNLOADITEM_DOWNLOADSTATE = 1255;
export const DISPID_WMPDOWNLOADITEM_PAUSE = 1256;
export const DISPID_WMPDOWNLOADITEM_RESUME = 1257;
export const DISPID_WMPDOWNLOADITEM_CANCEL = 1258;
export const DISPID_WMPDOWNLOADITEM2_GETITEMINFO = 1301;
export const DISPID_WMPQUERY_ADDCONDITION = 1351;
export const DISPID_WMPQUERY_BEGINNEXTGROUP = 1352;
export const DISPID_WMPMEDIACOLLECTION2_CREATEQUERY = 1401;
export const DISPID_WMPMEDIACOLLECTION2_GETPLAYLISTBYQUERY = 1402;
export const DISPID_WMPMEDIACOLLECTION2_GETSTRINGCOLLBYQUERY = 1403;
export const DISPID_WMPMEDIACOLLECTION2_GETBYATTRANDMEDIATYPE = 1404;
export const DISPID_WMPSTRINGCOLLECTION2_ISIDENTICAL = 1451;
export const DISPID_WMPSTRINGCOLLECTION2_GETITEMINFO = 1452;
export const DISPID_WMPSTRINGCOLLECTION2_GETATTRCOUNTBYTYPE = 1453;
export const DISPID_WMPSTRINGCOLLECTION2_GETITEMINFOBYTYPE = 1454;
export const DISPID_WMPCORE_MIN = 1;
export const DISPID_WMPCORE_MAX = 1454;
export const WMPCOREEVENT_BASE = 5000;
export const DISPID_WMPCOREEVENT_OPENSTATECHANGE = 5001;
export const DISPID_WMPCOREEVENT_STATUSCHANGE = 5002;
export const WMPCOREEVENT_CONTROL_BASE = 5100;
export const DISPID_WMPCOREEVENT_PLAYSTATECHANGE = 5101;
export const DISPID_WMPCOREEVENT_AUDIOLANGUAGECHANGE = 5102;
export const WMPCOREEVENT_SEEK_BASE = 5200;
export const DISPID_WMPCOREEVENT_ENDOFSTREAM = 5201;
export const DISPID_WMPCOREEVENT_POSITIONCHANGE = 5202;
export const DISPID_WMPCOREEVENT_MARKERHIT = 5203;
export const DISPID_WMPCOREEVENT_DURATIONUNITCHANGE = 5204;
export const WMPCOREEVENT_CONTENT_BASE = 5300;
export const DISPID_WMPCOREEVENT_SCRIPTCOMMAND = 5301;
export const WMPCOREEVENT_NETWORK_BASE = 5400;
export const DISPID_WMPCOREEVENT_DISCONNECT = 5401;
export const DISPID_WMPCOREEVENT_BUFFERING = 5402;
export const DISPID_WMPCOREEVENT_NEWSTREAM = 5403;
export const WMPCOREEVENT_ERROR_BASE = 5500;
export const DISPID_WMPCOREEVENT_ERROR = 5501;
export const WMPCOREEVENT_WARNING_BASE = 5600;
export const DISPID_WMPCOREEVENT_WARNING = 5601;
export const WMPCOREEVENT_CDROM_BASE = 5700;
export const DISPID_WMPCOREEVENT_CDROMMEDIACHANGE = 5701;
export const WMPCOREEVENT_PLAYLIST_BASE = 5800;
export const DISPID_WMPCOREEVENT_PLAYLISTCHANGE = 5801;
export const DISPID_WMPCOREEVENT_MEDIACHANGE = 5802;
export const DISPID_WMPCOREEVENT_CURRENTMEDIAITEMAVAILABLE = 5803;
export const DISPID_WMPCOREEVENT_CURRENTPLAYLISTCHANGE = 5804;
export const DISPID_WMPCOREEVENT_CURRENTPLAYLISTITEMAVAILABLE = 5805;
export const DISPID_WMPCOREEVENT_CURRENTITEMCHANGE = 5806;
export const DISPID_WMPCOREEVENT_MEDIACOLLECTIONCHANGE = 5807;
export const DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGADDED = 5808;
export const DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGREMOVED = 5809;
export const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONCHANGE = 5810;
export const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTADDED = 5811;
export const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTREMOVED = 5812;
export const DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANADDEDITEM = 5813;
export const DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANPROGRESS = 5814;
export const DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHFOUNDITEM = 5815;
export const DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHPROGRESS = 5816;
export const DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHCOMPLETE = 5817;
export const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTSETASDELETED = 5818;
export const DISPID_WMPCOREEVENT_MODECHANGE = 5819;
export const DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGCHANGED = 5820;
export const DISPID_WMPCOREEVENT_MEDIAERROR = 5821;
export const DISPID_WMPCOREEVENT_DOMAINCHANGE = 5822;
export const DISPID_WMPCOREEVENT_OPENPLAYLISTSWITCH = 5823;
export const DISPID_WMPCOREEVENT_STRINGCOLLECTIONCHANGE = 5824;
export const DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAADDED = 5825;
export const DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAREMOVED = 5826;
export const WMPOCXEVENT_BASE = 6500;
export const DISPID_WMPOCXEVENT_SWITCHEDTOPLAYERAPPLICATION = 6501;
export const DISPID_WMPOCXEVENT_SWITCHEDTOCONTROL = 6502;
export const DISPID_WMPOCXEVENT_PLAYERDOCKEDSTATECHANGE = 6503;
export const DISPID_WMPOCXEVENT_PLAYERRECONNECT = 6504;
export const DISPID_WMPOCXEVENT_CLICK = 6505;
export const DISPID_WMPOCXEVENT_DOUBLECLICK = 6506;
export const DISPID_WMPOCXEVENT_KEYDOWN = 6507;
export const DISPID_WMPOCXEVENT_KEYPRESS = 6508;
export const DISPID_WMPOCXEVENT_KEYUP = 6509;
export const DISPID_WMPOCXEVENT_MOUSEDOWN = 6510;
export const DISPID_WMPOCXEVENT_MOUSEMOVE = 6511;
export const DISPID_WMPOCXEVENT_MOUSEUP = 6512;
export const DISPID_WMPOCXEVENT_DEVICECONNECT = 6513;
export const DISPID_WMPOCXEVENT_DEVICEDISCONNECT = 6514;
export const DISPID_WMPOCXEVENT_DEVICESTATUSCHANGE = 6515;
export const DISPID_WMPOCXEVENT_DEVICESYNCSTATECHANGE = 6516;
export const DISPID_WMPOCXEVENT_DEVICESYNCERROR = 6517;
export const DISPID_WMPOCXEVENT_CREATEPARTNERSHIPCOMPLETE = 6518;
export const DISPID_WMPOCXEVENT_CDROMRIPSTATECHANGE = 6519;
export const DISPID_WMPOCXEVENT_CDROMRIPMEDIAERROR = 6520;
export const DISPID_WMPOCXEVENT_CDROMBURNSTATECHANGE = 6521;
export const DISPID_WMPOCXEVENT_CDROMBURNMEDIAERROR = 6522;
export const DISPID_WMPOCXEVENT_CDROMBURNERROR = 6523;
export const DISPID_WMPOCXEVENT_LIBRARYCONNECT = 6524;
export const DISPID_WMPOCXEVENT_LIBRARYDISCONNECT = 6525;
export const DISPID_WMPOCXEVENT_FOLDERSCANSTATECHANGE = 6526;
export const DISPID_WMPOCXEVENT_DEVICEESTIMATION = 6527;
export const DISPID_WMPCONTROLS_BASE = 50;
export const DISPID_WMPSETTINGS_BASE = 100;
export const DISPID_WMPPLAYLIST_BASE = 200;
export const DISPID_WMPCDROM_BASE = 250;
export const DISPID_WMPCDROMCOLLECTION_BASE = 300;
export const DISPID_WMPSTRINGCOLLECTION_BASE = 400;
export const DISPID_WMPMEDIACOLLECTION_BASE = 450;
export const DISPID_WMPPLAYLISTARRAY_BASE = 500;
export const DISPID_WMPPLAYLISTCOLLECTION_BASE = 550;
export const DISPID_WMPMEDIA_BASE = 750;
export const DISPID_WMPNETWORK_BASE = 800;
export const DISPID_WMPERROR_BASE = 850;
export const DISPID_WMPERRORITEM_BASE = 900;
export const DISPID_WMPCLOSEDCAPTION_BASE = 950;
export const DISPID_WMPDVD_BASE = 1000;
export const DISPID_WMPMETADATA_BASE = 1050;
export const DISPID_WMPPLAYERAPP_BASE = 1100;
export const DISPID_WMPDOWNLOADMANAGER_BASE = 1150;
export const DISPID_WMPDOWNLOADCOLLECTION_BASE = 1200;
export const DISPID_WMPDOWNLOADITEM_BASE = 1250;
export const DISPID_WMPDOWNLOADITEM2_BASE = 1300;
export const DISPID_WMPQUERY_BASE = 1350;
export const DISPID_WMPMEDIACOLLECTION2_BASE = 1400;
export const DISPID_WMPSTRINGCOLLECTION2_BASE = 1450;
export const kfltTimedLevelMaximumFrequency = 22050;
export const kfltTimedLevelMinimumFrequency = 20;
export const g_szContentPartnerInfo_LoginState = "LoginState";
export const g_szContentPartnerInfo_MediaPlayerAccountType = "MediaPlayerAccountType";
export const g_szContentPartnerInfo_AccountType = "AccountType";
export const g_szContentPartnerInfo_HasCachedCredentials = "HasCachedCredentials";
export const g_szContentPartnerInfo_LicenseRefreshAdvanceWarning = "LicenseRefreshAdvanceWarning";
export const g_szContentPartnerInfo_PurchasedTrackRequiresReDownload = "PurchasedTrackRequiresReDownload";
export const g_szContentPartnerInfo_MaximumTrackPurchasePerPurchase = "MaximumNumberOfTracksPerPurchase";
export const g_szContentPartnerInfo_AccountBalance = "AccountBalance";
export const g_szContentPartnerInfo_UserName = "UserName";
export const g_szMediaPlayerTask_Burn = "Burn";
export const g_szMediaPlayerTask_Browse = "Browse";
export const g_szMediaPlayerTask_Sync = "Sync";
export const g_szItemInfo_PopupURL = "Popup";
export const g_szItemInfo_AuthenticationSuccessURL = "AuthenticationSuccessURL";
export const g_szItemInfo_LoginFailureURL = "LoginFailureURL";
export const g_szItemInfo_HTMLViewURL = "HTMLViewURL";
export const g_szItemInfo_PopupCaption = "PopupCaption";
export const g_szItemInfo_ALTLoginURL = "ALTLoginURL";
export const g_szItemInfo_ALTLoginCaption = "ALTLoginCaption";
export const g_szItemInfo_ForgetPasswordURL = "ForgotPassword";
export const g_szItemInfo_CreateAccountURL = "CreateAccount";
export const g_szItemInfo_ArtistArtURL = "ArtistArt";
export const g_szItemInfo_AlbumArtURL = "AlbumArt";
export const g_szItemInfo_ListArtURL = "ListArt";
export const g_szItemInfo_GenreArtURL = "GenreArt";
export const g_szItemInfo_SubGenreArtURL = "SubGenreArt";
export const g_szItemInfo_RadioArtURL = "RadioArt";
export const g_szItemInfo_TreeListIconURL = "CPListIDIcon";
export const g_szItemInfo_ErrorDescription = "CPErrorDescription";
export const g_szItemInfo_ErrorURL = "CPErrorURL";
export const g_szItemInfo_ErrorURLLinkText = "CPErrorURLLinkText";
export const g_szUnknownLocation = "UnknownLocation";
export const g_szRootLocation = "RootLocation";
export const g_szFlyoutMenu = "FlyoutMenu";
export const g_szOnlineStore = "OnlineStore";
export const g_szVideoRecent = "VideoRecent";
export const g_szVideoRoot = "VideoRoot";
export const g_szCPListID = "CPListID";
export const g_szAllCPListIDs = "AllCPListIDs";
export const g_szCPTrackID = "CPTrackID";
export const g_szAllCPTrackIDs = "AllCPTrackIDs";
export const g_szCPArtistID = "CPArtistID";
export const g_szAllCPArtistIDs = "AllCPArtistIDs";
export const g_szCPAlbumID = "CPAlbumID";
export const g_szAllCPAlbumIDs = "AllCPAlbumIDs";
export const g_szCPGenreID = "CPGenreID";
export const g_szAllCPGenreIDs = "AllCPGenreIDs";
export const g_szCPAlbumSubGenreID = "CPAlbumSubGenreID";
export const g_szAllCPAlbumSubGenreIDs = "AllCPAlbumSubGenreIDs";
export const g_szReleaseDateYear = "ReleaseDateYear";
export const g_szAllReleaseDateYears = "AllReleaseDateYears";
export const g_szCPRadioID = "CPRadioID";
export const g_szAllCPRadioIDs = "AllCPRadioIDs";
export const g_szAuthor = "Author";
export const g_szAllAuthors = "AllAuthors";
export const g_szWMParentalRating = "WMParentalRating";
export const g_szAllWMParentalRatings = "AllWMParentalRatings";
export const g_szAllUserEffectiveRatingStarss = "AllUserEffectiveRatingStarss";
export const g_szUserEffectiveRatingStars = "UserEffectiveRatingStars";
export const g_szUserPlaylist = "UserPlaylist";
export const g_szViewMode_Report = "ViewModeReport";
export const g_szViewMode_Details = "ViewModeDetails";
export const g_szViewMode_Icon = "ViewModeIcon";
export const g_szViewMode_Tile = "ViewModeTile";
export const g_szViewMode_OrderedList = "ViewModeOrderedList";
export const g_szContentPrice_Unknown = "PriceUnknown";
export const g_szContentPrice_CannotBuy = "PriceCannotBuy";
export const g_szContentPrice_Free = "PriceFree";
export const g_szRefreshLicensePlay = "RefreshForPlay";
export const g_szRefreshLicenseBurn = "RefreshForBurn";
export const g_szRefreshLicenseSync = "RefreshForSync";
export const g_szVerifyPermissionSync = "VerifyPermissionSync";
export const g_szStationEvent_Started = "TrackStarted";
export const g_szStationEvent_Complete = "TrackComplete";
export const g_szStationEvent_Skipped = "TrackSkipped";
export const PROGRESS_INDETERMINATE = "-1";
export const PHOTOACQ_ERROR_RESTART_REQUIRED = 7926411350061129729n;
export const PHOTOACQ_RUN_DEFAULT = 0;
export const PHOTOACQ_NO_GALLERY_LAUNCH = 1;
export const PHOTOACQ_DISABLE_AUTO_ROTATE = 2;
export const PHOTOACQ_DISABLE_PLUGINS = 4;
export const PHOTOACQ_DISABLE_GROUP_TAG_PROMPT = 8;
export const PHOTOACQ_DISABLE_DB_INTEGRATION = 16;
export const PHOTOACQ_DELETE_AFTER_ACQUIRE = 32;
export const PHOTOACQ_DISABLE_DUPLICATE_DETECTION = 64;
export const PHOTOACQ_ENABLE_THUMBNAIL_CACHING = 128;
export const PHOTOACQ_DISABLE_METADATA_WRITE = 256;
export const PHOTOACQ_DISABLE_THUMBNAIL_PROGRESS = 512;
export const PHOTOACQ_DISABLE_SETTINGS_LINK = 1024;
export const PHOTOACQ_ABORT_ON_SETTINGS_UPDATE = 2048;
export const PHOTOACQ_IMPORT_VIDEO_AS_MULTIPLE_FILES = 4096;
export const DSF_WPD_DEVICES = 1;
export const DSF_WIA_CAMERAS = 2;
export const DSF_WIA_SCANNERS = 4;
export const DSF_STI_DEVICES = 8;
export const DSF_TWAIN_DEVICES = 16;
export const DSF_FS_DEVICES = 32;
export const DSF_DV_DEVICES = 64;
export const DSF_ALL_DEVICES = 65535;
export const DSF_CPL_MODE = 65536;
export const DSF_SHOW_OFFLINE = 131072;
export const PAPS_PRESAVE = 0;
export const PAPS_POSTSAVE = 1;
export const PAPS_CLEANUP = 2;
export const SPDUI_EngineProperties = "EngineProperties";
export const SPDUI_AddRemoveWord = "AddRemoveWord";
export const SPDUI_UserTraining = "UserTraining";
export const SPDUI_MicTraining = "MicTraining";
export const SPDUI_RecoProfileProperties = "RecoProfileProperties";
export const SPDUI_AudioProperties = "AudioProperties";
export const SPDUI_AudioVolume = "AudioVolume";
export const SPDUI_UserEnrollment = "UserEnrollment";
export const SPDUI_ShareData = "ShareData";
export const SPDUI_Tutorial = "Tutorial";
export const SPREG_USER_ROOT = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech";
export const SPREG_LOCAL_MACHINE_ROOT = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech";
export const SPCAT_AUDIOOUT = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioOutput";
export const SPCAT_AUDIOIN = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioInput";
export const SPCAT_VOICES = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices";
export const SPCAT_RECOGNIZERS = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Recognizers";
export const SPCAT_APPLEXICONS = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AppLexicons";
export const SPCAT_PHONECONVERTERS = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\PhoneConverters";
export const SPCAT_TEXTNORMALIZERS = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\TextNormalizers";
export const SPCAT_RECOPROFILES = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech\RecoProfiles";
export const SPMMSYS_AUDIO_IN_TOKEN_ID = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioInput\TokenEnums\MMAudioIn\";
export const SPMMSYS_AUDIO_OUT_TOKEN_ID = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioOutput\TokenEnums\MMAudioOut\";
export const SPCURRENT_USER_LEXICON_TOKEN_ID = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech\CurrentUserLexicon";
export const SPCURRENT_USER_SHORTCUT_TOKEN_ID = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech\CurrentUserShortcut";
export const SPTOKENVALUE_CLSID = "CLSID";
export const SPTOKENKEY_FILES = "Files";
export const SPTOKENKEY_UI = "UI";
export const SPTOKENKEY_ATTRIBUTES = "Attributes";
export const SPTOKENKEY_RETAINEDAUDIO = "SecondsPerRetainedAudioEvent";
export const SPTOKENKEY_AUDIO_LATENCY_WARNING = "LatencyWarningThreshold";
export const SPTOKENKEY_AUDIO_LATENCY_TRUNCATE = "LatencyTruncateThreshold";
export const SPTOKENKEY_AUDIO_LATENCY_UPDATE_INTERVAL = "LatencyUpdateInterval";
export const SPVOICECATEGORY_TTSRATE = "DefaultTTSRate";
export const SPPROP_RESOURCE_USAGE = "ResourceUsage";
export const SPPROP_HIGH_CONFIDENCE_THRESHOLD = "HighConfidenceThreshold";
export const SPPROP_NORMAL_CONFIDENCE_THRESHOLD = "NormalConfidenceThreshold";
export const SPPROP_LOW_CONFIDENCE_THRESHOLD = "LowConfidenceThreshold";
export const SPPROP_RESPONSE_SPEED = "ResponseSpeed";
export const SPPROP_COMPLEX_RESPONSE_SPEED = "ComplexResponseSpeed";
export const SPPROP_ADAPTATION_ON = "AdaptationOn";
export const SPPROP_PERSISTED_BACKGROUND_ADAPTATION = "PersistedBackgroundAdaptation";
export const SPPROP_PERSISTED_LANGUAGE_MODEL_ADAPTATION = "PersistedLanguageModelAdaptation";
export const SPPROP_UX_IS_LISTENING = "UXIsListening";
export const SPTOPIC_SPELLING = "Spelling";
export const SPWILDCARD = "...";
export const SPDICTATION = "*";
export const SPINFDICTATION = "*+";
export const SPREG_SAFE_USER_TOKENS = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\UserTokens";
export const SP_LOW_CONFIDENCE = "-1";
export const SP_NORMAL_CONFIDENCE = 0;
export const DEFAULT_WEIGHT = 1;
export const SP_MAX_WORD_LENGTH = 128;
export const SP_MAX_PRON_LENGTH = 384;
export const SP_EMULATE_RESULT = 1073741824;
export const SP_STREAMPOS_ASAP = 0;
export const SP_STREAMPOS_REALTIME = "-1";
export const SPRP_NORMAL = 0;
export const SP_MAX_LANGIDS = 20;
export const SPRECOEXTENSION = "RecoExtension";
export const SPALTERNATESCLSID = "AlternatesCLSID";
export const SR_LOCALIZED_DESCRIPTION = "Description";
export const SAPI_ERROR_BASE = 20480;
export const Speech_Default_Weight = 1;
export const Speech_Max_Word_Length = 128;
export const Speech_Max_Pron_Length = 384;
export const Speech_StreamPos_Asap = 0;
export const Speech_StreamPos_RealTime = "-1";
export const SpeechAllElements = "-1";
export const WMT_VIDEOIMAGE_SAMPLE_INPUT_FRAME = 1;
export const WMT_VIDEOIMAGE_SAMPLE_OUTPUT_FRAME = 2;
export const WMT_VIDEOIMAGE_SAMPLE_USES_CURRENT_INPUT_FRAME = 4;
export const WMT_VIDEOIMAGE_SAMPLE_USES_PREVIOUS_INPUT_FRAME = 8;
export const WMT_VIDEOIMAGE_SAMPLE_MOTION = 1;
export const WMT_VIDEOIMAGE_SAMPLE_ROTATION = 2;
export const WMT_VIDEOIMAGE_SAMPLE_BLENDING = 4;
export const WMT_VIDEOIMAGE_SAMPLE_ADV_BLENDING = 8;
export const WMT_VIDEOIMAGE_INTEGER_DENOMINATOR = 65536;
export const WMT_VIDEOIMAGE_MAGIC_NUMBER = 491406834;
export const WMT_VIDEOIMAGE_MAGIC_NUMBER_2 = 491406835;
export const WMT_VIDEOIMAGE_TRANSITION_BOW_TIE = 11;
export const WMT_VIDEOIMAGE_TRANSITION_CIRCLE = 12;
export const WMT_VIDEOIMAGE_TRANSITION_CROSS_FADE = 13;
export const WMT_VIDEOIMAGE_TRANSITION_DIAGONAL = 14;
export const WMT_VIDEOIMAGE_TRANSITION_DIAMOND = 15;
export const WMT_VIDEOIMAGE_TRANSITION_FADE_TO_COLOR = 16;
export const WMT_VIDEOIMAGE_TRANSITION_FILLED_V = 17;
export const WMT_VIDEOIMAGE_TRANSITION_FLIP = 18;
export const WMT_VIDEOIMAGE_TRANSITION_INSET = 19;
export const WMT_VIDEOIMAGE_TRANSITION_IRIS = 20;
export const WMT_VIDEOIMAGE_TRANSITION_PAGE_ROLL = 21;
export const WMT_VIDEOIMAGE_TRANSITION_RECTANGLE = 23;
export const WMT_VIDEOIMAGE_TRANSITION_REVEAL = 24;
export const WMT_VIDEOIMAGE_TRANSITION_SLIDE = 27;
export const WMT_VIDEOIMAGE_TRANSITION_SPLIT = 29;
export const WMT_VIDEOIMAGE_TRANSITION_STAR = 30;
export const WMT_VIDEOIMAGE_TRANSITION_WHEEL = 31;
export const WM_SampleExtension_ContentType_Size = 1;
export const WM_SampleExtension_PixelAspectRatio_Size = 2;
export const WM_SampleExtension_Timecode_Size = 14;
export const WM_SampleExtension_SampleDuration_Size = 2;
export const WM_SampleExtension_ChromaLocation_Size = 1;
export const WM_SampleExtension_ColorSpaceInfo_Size = 3;
export const WM_CT_REPEAT_FIRST_FIELD = 16;
export const WM_CT_BOTTOM_FIELD_FIRST = 32;
export const WM_CT_TOP_FIELD_FIRST = 64;
export const WM_CT_INTERLACED = 128;
export const WM_CL_INTERLACED420 = 0;
export const WM_CL_PROGRESSIVE420 = 1;
export const WM_MAX_VIDEO_STREAMS = 63;
export const WM_MAX_STREAMS = 63;
export const WMDRM_IMPORT_INIT_STRUCT_DEFINED = 1;
export const DRM_OPL_TYPES = 1;
export const g_dwWMSpecialAttributes = 20;
export const g_wszWMDuration = "Duration";
export const g_wszWMBitrate = "Bitrate";
export const g_wszWMSeekable = "Seekable";
export const g_wszWMStridable = "Stridable";
export const g_wszWMBroadcast = "Broadcast";
export const g_wszWMProtected = "Is_Protected";
export const g_wszWMTrusted = "Is_Trusted";
export const g_wszWMSignature_Name = "Signature_Name";
export const g_wszWMHasAudio = "HasAudio";
export const g_wszWMHasImage = "HasImage";
export const g_wszWMHasScript = "HasScript";
export const g_wszWMHasVideo = "HasVideo";
export const g_wszWMCurrentBitrate = "CurrentBitrate";
export const g_wszWMOptimalBitrate = "OptimalBitrate";
export const g_wszWMHasAttachedImages = "HasAttachedImages";
export const g_wszWMSkipBackward = "Can_Skip_Backward";
export const g_wszWMSkipForward = "Can_Skip_Forward";
export const g_wszWMNumberOfFrames = "NumberOfFrames";
export const g_wszWMFileSize = "FileSize";
export const g_wszWMHasArbitraryDataStream = "HasArbitraryDataStream";
export const g_wszWMHasFileTransferStream = "HasFileTransferStream";
export const g_wszWMContainerFormat = "WM/ContainerFormat";
export const g_dwWMContentAttributes = 5;
export const g_wszWMTitle = "Title";
export const g_wszWMTitleSort = "TitleSort";
export const g_wszWMAuthor = "Author";
export const g_wszWMAuthorSort = "AuthorSort";
export const g_wszWMDescription = "Description";
export const g_wszWMRating = "Rating";
export const g_wszWMCopyright = "Copyright";
export const g_wszWMUse_DRM = "Use_DRM";
export const g_wszWMDRM_Flags = "DRM_Flags";
export const g_wszWMDRM_Level = "DRM_Level";
export const g_wszWMUse_Advanced_DRM = "Use_Advanced_DRM";
export const g_wszWMDRM_KeySeed = "DRM_KeySeed";
export const g_wszWMDRM_KeyID = "DRM_KeyID";
export const g_wszWMDRM_ContentID = "DRM_ContentID";
export const g_wszWMDRM_SourceID = "DRM_SourceID";
export const g_wszWMDRM_IndividualizedVersion = "DRM_IndividualizedVersion";
export const g_wszWMDRM_LicenseAcqURL = "DRM_LicenseAcqURL";
export const g_wszWMDRM_V1LicenseAcqURL = "DRM_V1LicenseAcqURL";
export const g_wszWMDRM_HeaderSignPrivKey = "DRM_HeaderSignPrivKey";
export const g_wszWMDRM_LASignaturePrivKey = "DRM_LASignaturePrivKey";
export const g_wszWMDRM_LASignatureCert = "DRM_LASignatureCert";
export const g_wszWMDRM_LASignatureLicSrvCert = "DRM_LASignatureLicSrvCert";
export const g_wszWMDRM_LASignatureRootCert = "DRM_LASignatureRootCert";
export const g_wszWMAlbumTitle = "WM/AlbumTitle";
export const g_wszWMAlbumTitleSort = "WM/AlbumTitleSort";
export const g_wszWMTrack = "WM/Track";
export const g_wszWMPromotionURL = "WM/PromotionURL";
export const g_wszWMAlbumCoverURL = "WM/AlbumCoverURL";
export const g_wszWMGenre = "WM/Genre";
export const g_wszWMYear = "WM/Year";
export const g_wszWMGenreID = "WM/GenreID";
export const g_wszWMMCDI = "WM/MCDI";
export const g_wszWMComposer = "WM/Composer";
export const g_wszWMComposerSort = "WM/ComposerSort";
export const g_wszWMLyrics = "WM/Lyrics";
export const g_wszWMTrackNumber = "WM/TrackNumber";
export const g_wszWMToolName = "WM/ToolName";
export const g_wszWMToolVersion = "WM/ToolVersion";
export const g_wszWMIsVBR = "IsVBR";
export const g_wszWMAlbumArtist = "WM/AlbumArtist";
export const g_wszWMAlbumArtistSort = "WM/AlbumArtistSort";
export const g_wszWMBannerImageType = "BannerImageType";
export const g_wszWMBannerImageData = "BannerImageData";
export const g_wszWMBannerImageURL = "BannerImageURL";
export const g_wszWMCopyrightURL = "CopyrightURL";
export const g_wszWMAspectRatioX = "AspectRatioX";
export const g_wszWMAspectRatioY = "AspectRatioY";
export const g_wszASFLeakyBucketPairs = "ASFLeakyBucketPairs";
export const g_dwWMNSCAttributes = 5;
export const g_wszWMNSCName = "NSC_Name";
export const g_wszWMNSCAddress = "NSC_Address";
export const g_wszWMNSCPhone = "NSC_Phone";
export const g_wszWMNSCEmail = "NSC_Email";
export const g_wszWMNSCDescription = "NSC_Description";
export const g_wszWMWriter = "WM/Writer";
export const g_wszWMConductor = "WM/Conductor";
export const g_wszWMProducer = "WM/Producer";
export const g_wszWMDirector = "WM/Director";
export const g_wszWMContentGroupDescription = "WM/ContentGroupDescription";
export const g_wszWMSubTitle = "WM/SubTitle";
export const g_wszWMPartOfSet = "WM/PartOfSet";
export const g_wszWMProtectionType = "WM/ProtectionType";
export const g_wszWMVideoHeight = "WM/VideoHeight";
export const g_wszWMVideoWidth = "WM/VideoWidth";
export const g_wszWMVideoFrameRate = "WM/VideoFrameRate";
export const g_wszWMMediaClassPrimaryID = "WM/MediaClassPrimaryID";
export const g_wszWMMediaClassSecondaryID = "WM/MediaClassSecondaryID";
export const g_wszWMPeriod = "WM/Period";
export const g_wszWMCategory = "WM/Category";
export const g_wszWMPicture = "WM/Picture";
export const g_wszWMLyrics_Synchronised = "WM/Lyrics_Synchronised";
export const g_wszWMOriginalLyricist = "WM/OriginalLyricist";
export const g_wszWMOriginalArtist = "WM/OriginalArtist";
export const g_wszWMOriginalAlbumTitle = "WM/OriginalAlbumTitle";
export const g_wszWMOriginalReleaseYear = "WM/OriginalReleaseYear";
export const g_wszWMOriginalFilename = "WM/OriginalFilename";
export const g_wszWMPublisher = "WM/Publisher";
export const g_wszWMEncodedBy = "WM/EncodedBy";
export const g_wszWMEncodingSettings = "WM/EncodingSettings";
export const g_wszWMEncodingTime = "WM/EncodingTime";
export const g_wszWMAuthorURL = "WM/AuthorURL";
export const g_wszWMUserWebURL = "WM/UserWebURL";
export const g_wszWMAudioFileURL = "WM/AudioFileURL";
export const g_wszWMAudioSourceURL = "WM/AudioSourceURL";
export const g_wszWMLanguage = "WM/Language";
export const g_wszWMParentalRating = "WM/ParentalRating";
export const g_wszWMBeatsPerMinute = "WM/BeatsPerMinute";
export const g_wszWMInitialKey = "WM/InitialKey";
export const g_wszWMMood = "WM/Mood";
export const g_wszWMText = "WM/Text";
export const g_wszWMDVDID = "WM/DVDID";
export const g_wszWMWMContentID = "WM/WMContentID";
export const g_wszWMWMCollectionID = "WM/WMCollectionID";
export const g_wszWMWMCollectionGroupID = "WM/WMCollectionGroupID";
export const g_wszWMUniqueFileIdentifier = "WM/UniqueFileIdentifier";
export const g_wszWMModifiedBy = "WM/ModifiedBy";
export const g_wszWMRadioStationName = "WM/RadioStationName";
export const g_wszWMRadioStationOwner = "WM/RadioStationOwner";
export const g_wszWMPlaylistDelay = "WM/PlaylistDelay";
export const g_wszWMCodec = "WM/Codec";
export const g_wszWMDRM = "WM/DRM";
export const g_wszWMISRC = "WM/ISRC";
export const g_wszWMProvider = "WM/Provider";
export const g_wszWMProviderRating = "WM/ProviderRating";
export const g_wszWMProviderStyle = "WM/ProviderStyle";
export const g_wszWMContentDistributor = "WM/ContentDistributor";
export const g_wszWMSubscriptionContentID = "WM/SubscriptionContentID";
export const g_wszWMWMADRCPeakReference = "WM/WMADRCPeakReference";
export const g_wszWMWMADRCPeakTarget = "WM/WMADRCPeakTarget";
export const g_wszWMWMADRCAverageReference = "WM/WMADRCAverageReference";
export const g_wszWMWMADRCAverageTarget = "WM/WMADRCAverageTarget";
export const g_wszWMStreamTypeInfo = "WM/StreamTypeInfo";
export const g_wszWMPeakBitrate = "WM/PeakBitrate";
export const g_wszWMASFPacketCount = "WM/ASFPacketCount";
export const g_wszWMASFSecurityObjectsSize = "WM/ASFSecurityObjectsSize";
export const g_wszWMSharedUserRating = "WM/SharedUserRating";
export const g_wszWMSubTitleDescription = "WM/SubTitleDescription";
export const g_wszWMMediaCredits = "WM/MediaCredits";
export const g_wszWMParentalRatingReason = "WM/ParentalRatingReason";
export const g_wszWMOriginalReleaseTime = "WM/OriginalReleaseTime";
export const g_wszWMMediaStationCallSign = "WM/MediaStationCallSign";
export const g_wszWMMediaStationName = "WM/MediaStationName";
export const g_wszWMMediaNetworkAffiliation = "WM/MediaNetworkAffiliation";
export const g_wszWMMediaOriginalChannel = "WM/MediaOriginalChannel";
export const g_wszWMMediaOriginalBroadcastDateTime = "WM/MediaOriginalBroadcastDateTime";
export const g_wszWMMediaIsStereo = "WM/MediaIsStereo";
export const g_wszWMVideoClosedCaptioning = "WM/VideoClosedCaptioning";
export const g_wszWMMediaIsRepeat = "WM/MediaIsRepeat";
export const g_wszWMMediaIsLive = "WM/MediaIsLive";
export const g_wszWMMediaIsTape = "WM/MediaIsTape";
export const g_wszWMMediaIsDelay = "WM/MediaIsDelay";
export const g_wszWMMediaIsSubtitled = "WM/MediaIsSubtitled";
export const g_wszWMMediaIsPremiere = "WM/MediaIsPremiere";
export const g_wszWMMediaIsFinale = "WM/MediaIsFinale";
export const g_wszWMMediaIsSAP = "WM/MediaIsSAP";
export const g_wszWMProviderCopyright = "WM/ProviderCopyright";
export const g_wszWMISAN = "WM/ISAN";
export const g_wszWMADID = "WM/ADID";
export const g_wszWMWMShadowFileSourceFileType = "WM/WMShadowFileSourceFileType";
export const g_wszWMWMShadowFileSourceDRMType = "WM/WMShadowFileSourceDRMType";
export const g_wszWMWMCPDistributor = "WM/WMCPDistributor";
export const g_wszWMWMCPDistributorID = "WM/WMCPDistributorID";
export const g_wszWMSeasonNumber = "WM/SeasonNumber";
export const g_wszWMEpisodeNumber = "WM/EpisodeNumber";
export const g_wszEarlyDataDelivery = "EarlyDataDelivery";
export const g_wszJustInTimeDecode = "JustInTimeDecode";
export const g_wszSingleOutputBuffer = "SingleOutputBuffer";
export const g_wszSoftwareScaling = "SoftwareScaling";
export const g_wszDeliverOnReceive = "DeliverOnReceive";
export const g_wszScrambledAudio = "ScrambledAudio";
export const g_wszDedicatedDeliveryThread = "DedicatedDeliveryThread";
export const g_wszEnableDiscreteOutput = "EnableDiscreteOutput";
export const g_wszSpeakerConfig = "SpeakerConfig";
export const g_wszDynamicRangeControl = "DynamicRangeControl";
export const g_wszAllowInterlacedOutput = "AllowInterlacedOutput";
export const g_wszVideoSampleDurations = "VideoSampleDurations";
export const g_wszStreamLanguage = "StreamLanguage";
export const g_wszEnableWMAProSPDIFOutput = "EnableWMAProSPDIFOutput";
export const g_wszDeinterlaceMode = "DeinterlaceMode";
export const g_wszInitialPatternForInverseTelecine = "InitialPatternForInverseTelecine";
export const g_wszJPEGCompressionQuality = "JPEGCompressionQuality";
export const g_wszWatermarkCLSID = "WatermarkCLSID";
export const g_wszWatermarkConfig = "WatermarkConfig";
export const g_wszInterlacedCoding = "InterlacedCoding";
export const g_wszFixedFrameRate = "FixedFrameRate";
export const g_wszOriginalSourceFormatTag = "_SOURCEFORMATTAG";
export const g_wszOriginalWaveFormat = "_ORIGINALWAVEFORMAT";
export const g_wszEDL = "_EDL";
export const g_wszComplexity = "_COMPLEXITYEX";
export const g_wszDecoderComplexityRequested = "_DECODERCOMPLEXITYPROFILE";
export const g_wszReloadIndexOnSeek = "ReloadIndexOnSeek";
export const g_wszStreamNumIndexObjects = "StreamNumIndexObjects";
export const g_wszFailSeekOnError = "FailSeekOnError";
export const g_wszPermitSeeksBeyondEndOfStream = "PermitSeeksBeyondEndOfStream";
export const g_wszUsePacketAtSeekPoint = "UsePacketAtSeekPoint";
export const g_wszSourceBufferTime = "SourceBufferTime";
export const g_wszSourceMaxBytesAtOnce = "SourceMaxBytesAtOnce";
export const g_wszVBREnabled = "_VBRENABLED";
export const g_wszVBRQuality = "_VBRQUALITY";
export const g_wszVBRBitrateMax = "_RMAX";
export const g_wszVBRBufferWindowMax = "_BMAX";
export const g_wszVBRPeak = "VBR Peak";
export const g_wszBufferAverage = "Buffer Average";
export const g_wszComplexityMax = "_COMPLEXITYEXMAX";
export const g_wszComplexityOffline = "_COMPLEXITYEXOFFLINE";
export const g_wszComplexityLive = "_COMPLEXITYEXLIVE";
export const g_wszIsVBRSupported = "_ISVBRSUPPORTED";
export const g_wszNumPasses = "_PASSESUSED";
export const g_wszMusicSpeechClassMode = "MusicSpeechClassMode";
export const g_wszMusicClassMode = "MusicClassMode";
export const g_wszSpeechClassMode = "SpeechClassMode";
export const g_wszMixedClassMode = "MixedClassMode";
export const g_wszSpeechCaps = "SpeechFormatCap";
export const g_wszPeakValue = "PeakValue";
export const g_wszAverageLevel = "AverageLevel";
export const g_wszFold6To2Channels3 = "Fold6To2Channels3";
export const g_wszFoldToChannelsTemplate = "Fold%luTo%luChannels%lu";
export const g_wszDeviceConformanceTemplate = "DeviceConformanceTemplate";
export const g_wszEnableFrameInterpolation = "EnableFrameInterpolation";
export const g_wszNeedsPreviousSample = "NeedsPreviousSample";
export const g_wszWMIsCompilation = "WM/IsCompilation";
export const BUFFER_INVALID = 0;
export const BUFFER_VALID = 1;
export const BUFFER_SILENT = 2;
export const APO_CONNECTION_BUFFER_TYPE_ALLOCATED = 0;
export const APO_CONNECTION_BUFFER_TYPE_EXTERNAL = 1;
export const APO_CONNECTION_BUFFER_TYPE_DEPENDANT = 2;
export const APO_FLAG_NONE = 0;
export const APO_FLAG_INPLACE = 1;
export const APO_FLAG_SAMPLESPERFRAME_MUST_MATCH = 2;
export const APO_FLAG_FRAMESPERSECOND_MUST_MATCH = 4;
export const APO_FLAG_BITSPERSAMPLE_MUST_MATCH = 8;
export const APO_FLAG_MIXER = 16;
export const APO_FLAG_DEFAULT = 14;
export const AUDIO_FLOW_PULL = 0;
export const AUDIO_FLOW_PUSH = 1;
export const eAudioConstrictionOff = 0;
export const eAudioConstriction48_16 = 1;
export const eAudioConstriction44_16 = 2;
export const eAudioConstriction14_14 = 3;
export const eAudioConstrictionMute = 4;
export const AUDIO_SYSTEMEFFECT_STATE_OFF = 0;
export const AUDIO_SYSTEMEFFECT_STATE_ON = 1;
export const APO_LOG_LEVEL_ALWAYS = 0;
export const APO_LOG_LEVEL_CRITICAL = 1;
export const APO_LOG_LEVEL_ERROR = 2;
export const APO_LOG_LEVEL_WARNING = 3;
export const APO_LOG_LEVEL_INFO = 4;
export const APO_LOG_LEVEL_VERBOSE = 5;
export const APO_NOTIFICATION_TYPE_NONE = 0;
export const APO_NOTIFICATION_TYPE_ENDPOINT_VOLUME = 1;
export const APO_NOTIFICATION_TYPE_ENDPOINT_PROPERTY_CHANGE = 2;
export const APO_NOTIFICATION_TYPE_SYSTEM_EFFECTS_PROPERTY_CHANGE = 3;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_DEFAULT = 0;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_USER = 1;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_VOLATILE = 2;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_ENUM_COUNT = 3;
export const DMUS_CLOCK_SYSTEM = 0;
export const DMUS_CLOCK_WAVE = 1;
export const DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A = 1;
export const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1 = 2;
export const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1 = 3;
export const DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W = 4;
export const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A = 5;
export const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W = 6;
export const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A = 7;
export const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W = 8;
export const DIRECTSOUNDDEVICE_TYPE_EMULATED = 0;
export const DIRECTSOUNDDEVICE_TYPE_VXD = 1;
export const DIRECTSOUNDDEVICE_TYPE_WDM = 2;
export const DIRECTSOUNDDEVICE_DATAFLOW_RENDER = 0;
export const DIRECTSOUNDDEVICE_DATAFLOW_CAPTURE = 1;
export const eHostProcessConnector = 0;
export const eOffloadConnector = 1;
export const eLoopbackConnector = 2;
export const eKeywordDetectorConnector = 3;
export const eConnectorCount = 4;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const AMVP_DO_NOT_CARE = 0;
export const AMVP_BEST_BANDWIDTH = 1;
export const AMVP_INPUT_SAME_AS_OUTPUT = 2;
export const AMVP_MODE_WEAVE = 0;
export const AMVP_MODE_BOBINTERLEAVED = 1;
export const AMVP_MODE_BOBNONINTERLEAVED = 2;
export const AMVP_MODE_SKIPEVEN = 3;
export const AMVP_MODE_SKIPODD = 4;
export const PINDIR_INPUT = 0;
export const PINDIR_OUTPUT = 1;
export const State_Stopped = 0;
export const State_Paused = 1;
export const State_Running = 2;
export const AM_SAMPLE_SPLICEPOINT = 1;
export const AM_SAMPLE_PREROLL = 2;
export const AM_SAMPLE_DATADISCONTINUITY = 4;
export const AM_SAMPLE_TYPECHANGED = 8;
export const AM_SAMPLE_TIMEVALID = 16;
export const AM_SAMPLE_TIMEDISCONTINUITY = 64;
export const AM_SAMPLE_FLUSH_ON_PAUSE = 128;
export const AM_SAMPLE_STOPVALID = 256;
export const AM_SAMPLE_ENDOFSTREAM = 512;
export const AM_STREAM_MEDIA = 0;
export const AM_STREAM_CONTROL = 1;
export const AM_SEEKING_NoPositioning = 0;
export const AM_SEEKING_AbsolutePositioning = 1;
export const AM_SEEKING_RelativePositioning = 2;
export const AM_SEEKING_IncrementalPositioning = 3;
export const AM_SEEKING_PositioningBitsMask = 3;
export const AM_SEEKING_SeekToKeyFrame = 4;
export const AM_SEEKING_ReturnTime = 8;
export const AM_SEEKING_Segment = 16;
export const AM_SEEKING_NoFlush = 32;
export const AM_SEEKING_CanSeekAbsolute = 1;
export const AM_SEEKING_CanSeekForwards = 2;
export const AM_SEEKING_CanSeekBackwards = 4;
export const AM_SEEKING_CanGetCurrentPos = 8;
export const AM_SEEKING_CanGetStopPos = 16;
export const AM_SEEKING_CanGetDuration = 32;
export const AM_SEEKING_CanPlayBackwards = 64;
export const AM_SEEKING_CanDoSegments = 128;
export const AM_SEEKING_Source = 256;
export const AM_MEDIAEVENT_NONOTIFY = 1;
export const MERIT_PREFERRED = 8388608;
export const MERIT_NORMAL = 6291456;
export const MERIT_UNLIKELY = 4194304;
export const MERIT_DO_NOT_USE = 2097152;
export const MERIT_SW_COMPRESSOR = 1048576;
export const MERIT_HW_COMPRESSOR = 1048656;
export const REG_PINFLAG_B_ZERO = 1;
export const REG_PINFLAG_B_RENDERER = 2;
export const REG_PINFLAG_B_MANY = 4;
export const REG_PINFLAG_B_OUTPUT = 8;
export const Famine = 0;
export const Flood = 1;
export const CK_NOCOLORKEY = 0;
export const CK_INDEX = 1;
export const CK_RGB = 2;
export const ADVISE_NONE = 0;
export const ADVISE_CLIPPING = 1;
export const ADVISE_PALETTE = 2;
export const ADVISE_COLORKEY = 4;
export const ADVISE_POSITION = 8;
export const ADVISE_DISPLAY_CHANGE = 16;
export const AM_FILE_OVERWRITE = 1;
export const AM_RENDEREX_RENDERTOEXISTINGRENDERERS = 1;
export const AM_STREAM_INFO_START_DEFINED = 1;
export const AM_STREAM_INFO_STOP_DEFINED = 2;
export const AM_STREAM_INFO_DISCARDING = 4;
export const AM_STREAM_INFO_STOP_SEND_EXTRA = 16;
export const INTERLEAVE_NONE = 0;
export const INTERLEAVE_CAPTURE = 1;
export const INTERLEAVE_FULL = 2;
export const INTERLEAVE_NONE_BUFFERED = 3;
export const CompressionCaps_CanQuality = 1;
export const CompressionCaps_CanCrunch = 2;
export const CompressionCaps_CanKeyFrame = 4;
export const CompressionCaps_CanBFrame = 8;
export const CompressionCaps_CanWindow = 16;
export const VfwCaptureDialog_Source = 1;
export const VfwCaptureDialog_Format = 2;
export const VfwCaptureDialog_Display = 4;
export const VfwCompressDialog_Config = 1;
export const VfwCompressDialog_About = 2;
export const VfwCompressDialog_QueryConfig = 4;
export const VfwCompressDialog_QueryAbout = 8;
export const AnalogVideo_None = 0;
export const AnalogVideo_NTSC_M = 1;
export const AnalogVideo_NTSC_M_J = 2;
export const AnalogVideo_NTSC_433 = 4;
export const AnalogVideo_PAL_B = 16;
export const AnalogVideo_PAL_D = 32;
export const AnalogVideo_PAL_G = 64;
export const AnalogVideo_PAL_H = 128;
export const AnalogVideo_PAL_I = 256;
export const AnalogVideo_PAL_M = 512;
export const AnalogVideo_PAL_N = 1024;
export const AnalogVideo_PAL_60 = 2048;
export const AnalogVideo_SECAM_B = 4096;
export const AnalogVideo_SECAM_D = 8192;
export const AnalogVideo_SECAM_G = 16384;
export const AnalogVideo_SECAM_H = 32768;
export const AnalogVideo_SECAM_K = 65536;
export const AnalogVideo_SECAM_K1 = 131072;
export const AnalogVideo_SECAM_L = 262144;
export const AnalogVideo_SECAM_L1 = 524288;
export const AnalogVideo_PAL_N_COMBO = 1048576;
export const AnalogVideoMask_MCE_NTSC = 1052167;
export const AnalogVideoMask_MCE_PAL = 496;
export const AnalogVideoMask_MCE_SECAM = 1044480;
export const TunerInputCable = 0;
export const TunerInputAntenna = 1;
export const VideoCopyProtectionMacrovisionBasic = 0;
export const VideoCopyProtectionMacrovisionCBI = 1;
export const PhysConn_Video_Tuner = 1;
export const PhysConn_Video_Composite = 2;
export const PhysConn_Video_SVideo = 3;
export const PhysConn_Video_RGB = 4;
export const PhysConn_Video_YRYBY = 5;
export const PhysConn_Video_SerialDigital = 6;
export const PhysConn_Video_ParallelDigital = 7;
export const PhysConn_Video_SCSI = 8;
export const PhysConn_Video_AUX = 9;
export const PhysConn_Video_1394 = 10;
export const PhysConn_Video_USB = 11;
export const PhysConn_Video_VideoDecoder = 12;
export const PhysConn_Video_VideoEncoder = 13;
export const PhysConn_Video_SCART = 14;
export const PhysConn_Video_Black = 15;
export const PhysConn_Audio_Tuner = 4096;
export const PhysConn_Audio_Line = 4097;
export const PhysConn_Audio_Mic = 4098;
export const PhysConn_Audio_AESDigital = 4099;
export const PhysConn_Audio_SPDIFDigital = 4100;
export const PhysConn_Audio_SCSI = 4101;
export const PhysConn_Audio_AUX = 4102;
export const PhysConn_Audio_1394 = 4103;
export const PhysConn_Audio_USB = 4104;
export const PhysConn_Audio_AudioDecoder = 4105;
export const VideoProcAmp_Brightness = 0;
export const VideoProcAmp_Contrast = 1;
export const VideoProcAmp_Hue = 2;
export const VideoProcAmp_Saturation = 3;
export const VideoProcAmp_Sharpness = 4;
export const VideoProcAmp_Gamma = 5;
export const VideoProcAmp_ColorEnable = 6;
export const VideoProcAmp_WhiteBalance = 7;
export const VideoProcAmp_BacklightCompensation = 8;
export const VideoProcAmp_Gain = 9;
export const VideoProcAmp_Flags_Auto = 1;
export const VideoProcAmp_Flags_Manual = 2;
export const CameraControl_Pan = 0;
export const CameraControl_Tilt = 1;
export const CameraControl_Roll = 2;
export const CameraControl_Zoom = 3;
export const CameraControl_Exposure = 4;
export const CameraControl_Iris = 5;
export const CameraControl_Focus = 6;
export const CameraControl_Flags_Auto = 1;
export const CameraControl_Flags_Manual = 2;
export const VideoControlFlag_FlipHorizontal = 1;
export const VideoControlFlag_FlipVertical = 2;
export const VideoControlFlag_ExternalTriggerEnable = 4;
export const VideoControlFlag_Trigger = 8;
export const AMTUNER_SUBCHAN_NO_TUNE = "-2";
export const AMTUNER_SUBCHAN_DEFAULT = "-1";
export const AMTUNER_HASNOSIGNALSTRENGTH = "-1";
export const AMTUNER_NOSIGNAL = 0;
export const AMTUNER_SIGNALPRESENT = 1;
export const AMTUNER_MODE_DEFAULT = 0;
export const AMTUNER_MODE_TV = 1;
export const AMTUNER_MODE_FM_RADIO = 2;
export const AMTUNER_MODE_AM_RADIO = 4;
export const AMTUNER_MODE_DSS = 8;
export const AMTUNER_EVENT_CHANGED = 1;
export const AMTVAUDIO_MODE_MONO = 1;
export const AMTVAUDIO_MODE_STEREO = 2;
export const AMTVAUDIO_MODE_LANG_A = 16;
export const AMTVAUDIO_MODE_LANG_B = 32;
export const AMTVAUDIO_MODE_LANG_C = 64;
export const AMTVAUDIO_PRESET_STEREO = 512;
export const AMTVAUDIO_PRESET_LANG_A = 4096;
export const AMTVAUDIO_PRESET_LANG_B = 8192;
export const AMTVAUDIO_PRESET_LANG_C = 16384;
export const AMTVAUDIO_EVENT_CHANGED = 1;
export const AMPROPERTY_PIN_CATEGORY = 0;
export const AMPROPERTY_PIN_MEDIUM = 1;
export const AMSTREAMSELECTINFO_ENABLED = 1;
export const AMSTREAMSELECTINFO_EXCLUSIVE = 2;
export const AMSTREAMSELECTENABLE_ENABLE = 1;
export const AMSTREAMSELECTENABLE_ENABLEALL = 2;
export const AMRESCTL_RESERVEFLAGS_RESERVE = 0;
export const AMRESCTL_RESERVEFLAGS_UNRESERVE = 1;
export const AM_FILTER_MISC_FLAGS_IS_RENDERER = 1;
export const AM_FILTER_MISC_FLAGS_IS_SOURCE = 2;
export const DECIMATION_LEGACY = 0;
export const DECIMATION_USE_DECODER_ONLY = 1;
export const DECIMATION_USE_VIDEOPORT_ONLY = 2;
export const DECIMATION_USE_OVERLAY_ONLY = 3;
export const DECIMATION_DEFAULT = 4;
export const AM_PUSHSOURCECAPS_INTERNAL_RM = 1;
export const AM_PUSHSOURCECAPS_NOT_LIVE = 2;
export const AM_PUSHSOURCECAPS_PRIVATE_CLOCK = 4;
export const AM_PUSHSOURCEREQS_USE_STREAM_CLOCK = 65536;
export const AM_PUSHSOURCEREQS_USE_CLOCK_CHAIN = 131072;
export const DVENCODERRESOLUTION_720x480 = 2012;
export const DVENCODERRESOLUTION_360x240 = 2013;
export const DVENCODERRESOLUTION_180x120 = 2014;
export const DVENCODERRESOLUTION_88x60 = 2015;
export const DVENCODERVIDEOFORMAT_NTSC = 2000;
export const DVENCODERVIDEOFORMAT_PAL = 2001;
export const DVENCODERFORMAT_DVSD = 2007;
export const DVENCODERFORMAT_DVHD = 2008;
export const DVENCODERFORMAT_DVSL = 2009;
export const DVDECODERRESOLUTION_720x480 = 1000;
export const DVDECODERRESOLUTION_360x240 = 1001;
export const DVDECODERRESOLUTION_180x120 = 1002;
export const DVDECODERRESOLUTION_88x60 = 1003;
export const DVRESOLUTION_FULL = 1000;
export const DVRESOLUTION_HALF = 1001;
export const DVRESOLUTION_QUARTER = 1002;
export const DVRESOLUTION_DC = 1003;
export const AM_AUDREND_STAT_PARAM_BREAK_COUNT = 1;
export const AM_AUDREND_STAT_PARAM_SLAVE_MODE = 2;
export const AM_AUDREND_STAT_PARAM_SILENCE_DUR = 3;
export const AM_AUDREND_STAT_PARAM_LAST_BUFFER_DUR = 4;
export const AM_AUDREND_STAT_PARAM_DISCONTINUITIES = 5;
export const AM_AUDREND_STAT_PARAM_SLAVE_RATE = 6;
export const AM_AUDREND_STAT_PARAM_SLAVE_DROPWRITE_DUR = 7;
export const AM_AUDREND_STAT_PARAM_SLAVE_HIGHLOWERROR = 8;
export const AM_AUDREND_STAT_PARAM_SLAVE_LASTHIGHLOWERROR = 9;
export const AM_AUDREND_STAT_PARAM_SLAVE_ACCUMERROR = 10;
export const AM_AUDREND_STAT_PARAM_BUFFERFULLNESS = 11;
export const AM_AUDREND_STAT_PARAM_JITTER = 12;
export const AM_INTF_SEARCH_INPUT_PIN = 1;
export const AM_INTF_SEARCH_OUTPUT_PIN = 2;
export const AM_INTF_SEARCH_FILTER = 4;
export const AMOVERFX_NOFX = 0;
export const AMOVERFX_MIRRORLEFTRIGHT = 2;
export const AMOVERFX_MIRRORUPDOWN = 4;
export const AMOVERFX_DEINTERLACE = 8;
export const AM_PIN_FLOW_CONTROL_BLOCK = 1;
export const AM_GRAPH_CONFIG_RECONNECT_DIRECTCONNECT = 1;
export const AM_GRAPH_CONFIG_RECONNECT_CACHE_REMOVED_FILTERS = 2;
export const AM_GRAPH_CONFIG_RECONNECT_USE_ONLY_CACHED_FILTERS = 4;
export const REMFILTERF_LEAVECONNECTED = 1;
export const AM_FILTER_FLAGS_REMOVABLE = 1;
export const VMRSample_SyncPoint = 1;
export const VMRSample_Preroll = 2;
export const VMRSample_Discontinuity = 4;
export const VMRSample_TimeValid = 8;
export const VMRSample_SrcDstRectsValid = 16;
export const AMAP_PIXELFORMAT_VALID = 1;
export const AMAP_3D_TARGET = 2;
export const AMAP_ALLOW_SYSMEM = 4;
export const AMAP_FORCE_SYSMEM = 8;
export const AMAP_DIRECTED_FLIP = 16;
export const AMAP_DXVA_TARGET = 32;
export const VMR_ARMODE_NONE = 0;
export const VMR_ARMODE_LETTER_BOX = 1;
export const MixerPref_NoDecimation = 1;
export const MixerPref_DecimateOutput = 2;
export const MixerPref_ARAdjustXorY = 4;
export const MixerPref_DecimationReserved = 8;
export const MixerPref_DecimateMask = 15;
export const MixerPref_BiLinearFiltering = 16;
export const MixerPref_PointFiltering = 32;
export const MixerPref_FilteringMask = 240;
export const MixerPref_RenderTargetRGB = 256;
export const MixerPref_RenderTargetYUV = 4096;
export const MixerPref_RenderTargetYUV420 = 512;
export const MixerPref_RenderTargetYUV422 = 1024;
export const MixerPref_RenderTargetYUV444 = 2048;
export const MixerPref_RenderTargetReserved = 57344;
export const MixerPref_RenderTargetMask = 65280;
export const MixerPref_DynamicSwitchToBOB = 65536;
export const MixerPref_DynamicDecimateBy2 = 131072;
export const MixerPref_DynamicReserved = 786432;
export const MixerPref_DynamicMask = 983040;
export const RenderPrefs_RestrictToInitialMonitor = 0;
export const RenderPrefs_ForceOffscreen = 1;
export const RenderPrefs_ForceOverlays = 2;
export const RenderPrefs_AllowOverlays = 0;
export const RenderPrefs_AllowOffscreen = 0;
export const RenderPrefs_DoNotRenderColorKeyAndBorder = 8;
export const RenderPrefs_Reserved = 16;
export const RenderPrefs_PreferAGPMemWhenMixing = 32;
export const RenderPrefs_Mask = 63;
export const VMRMode_Windowed = 1;
export const VMRMode_Windowless = 2;
export const VMRMode_Renderless = 4;
export const VMRMode_Mask = 7;
export const MAX_NUMBER_OF_STREAMS = 16;
export const DeinterlacePref_NextBest = 1;
export const DeinterlacePref_BOB = 2;
export const DeinterlacePref_Weave = 4;
export const DeinterlacePref_Mask = 7;
export const DeinterlaceTech_Unknown = 0;
export const DeinterlaceTech_BOBLineReplicate = 1;
export const DeinterlaceTech_BOBVerticalStretch = 2;
export const DeinterlaceTech_MedianFiltering = 4;
export const DeinterlaceTech_EdgeFiltering = 16;
export const DeinterlaceTech_FieldAdaptive = 32;
export const DeinterlaceTech_PixelAdaptive = 64;
export const DeinterlaceTech_MotionVectorSteered = 128;
export const DVD_DOMAIN_FirstPlay = 1;
export const DVD_DOMAIN_VideoManagerMenu = 2;
export const DVD_DOMAIN_VideoTitleSetMenu = 3;
export const DVD_DOMAIN_Title = 4;
export const DVD_DOMAIN_Stop = 5;
export const DVD_MENU_Title = 2;
export const DVD_MENU_Root = 3;
export const DVD_MENU_Subpicture = 4;
export const DVD_MENU_Audio = 5;
export const DVD_MENU_Angle = 6;
export const DVD_MENU_Chapter = 7;
export const DVD_SIDE_A = 1;
export const DVD_SIDE_B = 2;
export const DISPLAY_CONTENT_DEFAULT = 0;
export const DISPLAY_16x9 = 1;
export const DISPLAY_4x3_PANSCAN_PREFERRED = 2;
export const DISPLAY_4x3_LETTERBOX_PREFERRED = 3;
export const DVD_FPS_25 = 1;
export const DVD_FPS_30NonDrop = 3;
export const DVD_NavCmdType_Pre = 1;
export const DVD_NavCmdType_Post = 2;
export const DVD_NavCmdType_Cell = 3;
export const DVD_NavCmdType_Button = 4;
export const DVD_TC_FLAG_25fps = 1;
export const DVD_TC_FLAG_30fps = 2;
export const DVD_TC_FLAG_DropFrame = 4;
export const DVD_TC_FLAG_Interpolated = 8;
export const UOP_FLAG_Play_Title_Or_AtTime = 1;
export const UOP_FLAG_Play_Chapter = 2;
export const UOP_FLAG_Play_Title = 4;
export const UOP_FLAG_Stop = 8;
export const UOP_FLAG_ReturnFromSubMenu = 16;
export const UOP_FLAG_Play_Chapter_Or_AtTime = 32;
export const UOP_FLAG_PlayPrev_Or_Replay_Chapter = 64;
export const UOP_FLAG_PlayNext_Chapter = 128;
export const UOP_FLAG_Play_Forwards = 256;
export const UOP_FLAG_Play_Backwards = 512;
export const UOP_FLAG_ShowMenu_Title = 1024;
export const UOP_FLAG_ShowMenu_Root = 2048;
export const UOP_FLAG_ShowMenu_SubPic = 4096;
export const UOP_FLAG_ShowMenu_Audio = 8192;
export const UOP_FLAG_ShowMenu_Angle = 16384;
export const UOP_FLAG_ShowMenu_Chapter = 32768;
export const UOP_FLAG_Resume = 65536;
export const UOP_FLAG_Select_Or_Activate_Button = 131072;
export const UOP_FLAG_Still_Off = 262144;
export const UOP_FLAG_Pause_On = 524288;
export const UOP_FLAG_Select_Audio_Stream = 1048576;
export const UOP_FLAG_Select_SubPic_Stream = 2097152;
export const UOP_FLAG_Select_Angle = 4194304;
export const UOP_FLAG_Select_Karaoke_Audio_Presentation_Mode = 8388608;
export const UOP_FLAG_Select_Video_Mode_Preference = 16777216;
export const DVD_CMD_FLAG_None = 0;
export const DVD_CMD_FLAG_Flush = 1;
export const DVD_CMD_FLAG_SendEvents = 2;
export const DVD_CMD_FLAG_Block = 4;
export const DVD_CMD_FLAG_StartWhenRendered = 8;
export const DVD_CMD_FLAG_EndAfterRendered = 16;
export const DVD_ResetOnStop = 1;
export const DVD_NotifyParentalLevelChange = 2;
export const DVD_HMSF_TimeCodeEvents = 3;
export const DVD_AudioDuringFFwdRew = 4;
export const DVD_EnableNonblockingAPIs = 5;
export const DVD_CacheSizeInMB = 6;
export const DVD_EnablePortableBookmarks = 7;
export const DVD_EnableExtendedCopyProtectErrors = 8;
export const DVD_NotifyPositionChange = 9;
export const DVD_IncreaseOutputControl = 10;
export const DVD_EnableStreaming = 11;
export const DVD_EnableESOutput = 12;
export const DVD_EnableTitleLength = 13;
export const DVD_DisableStillThrottle = 14;
export const DVD_EnableLoggingEvents = 15;
export const DVD_MaxReadBurstInKB = 16;
export const DVD_ReadBurstPeriodInMS = 17;
export const DVD_RestartDisc = 18;
export const DVD_EnableCC = 19;
export const DVD_Relative_Upper = 1;
export const DVD_Relative_Lower = 2;
export const DVD_Relative_Left = 3;
export const DVD_Relative_Right = 4;
export const DVD_PARENTAL_LEVEL_8 = 32768;
export const DVD_PARENTAL_LEVEL_7 = 16384;
export const DVD_PARENTAL_LEVEL_6 = 8192;
export const DVD_PARENTAL_LEVEL_5 = 4096;
export const DVD_PARENTAL_LEVEL_4 = 2048;
export const DVD_PARENTAL_LEVEL_3 = 1024;
export const DVD_PARENTAL_LEVEL_2 = 512;
export const DVD_PARENTAL_LEVEL_1 = 256;
export const DVD_AUD_EXT_NotSpecified = 0;
export const DVD_AUD_EXT_Captions = 1;
export const DVD_AUD_EXT_VisuallyImpaired = 2;
export const DVD_AUD_EXT_DirectorComments1 = 3;
export const DVD_AUD_EXT_DirectorComments2 = 4;
export const DVD_SP_EXT_NotSpecified = 0;
export const DVD_SP_EXT_Caption_Normal = 1;
export const DVD_SP_EXT_Caption_Big = 2;
export const DVD_SP_EXT_Caption_Children = 3;
export const DVD_SP_EXT_CC_Normal = 5;
export const DVD_SP_EXT_CC_Big = 6;
export const DVD_SP_EXT_CC_Children = 7;
export const DVD_SP_EXT_Forced = 9;
export const DVD_SP_EXT_DirectorComments_Normal = 13;
export const DVD_SP_EXT_DirectorComments_Big = 14;
export const DVD_SP_EXT_DirectorComments_Children = 15;
export const DVD_AudioMode_None = 0;
export const DVD_AudioMode_Karaoke = 1;
export const DVD_AudioMode_Surround = 2;
export const DVD_AudioMode_Other = 3;
export const DVD_AudioFormat_AC3 = 0;
export const DVD_AudioFormat_MPEG1 = 1;
export const DVD_AudioFormat_MPEG1_DRC = 2;
export const DVD_AudioFormat_MPEG2 = 3;
export const DVD_AudioFormat_MPEG2_DRC = 4;
export const DVD_AudioFormat_LPCM = 5;
export const DVD_AudioFormat_DTS = 6;
export const DVD_AudioFormat_SDDS = 7;
export const DVD_AudioFormat_Other = 8;
export const DVD_Mix_0to0 = 1;
export const DVD_Mix_1to0 = 2;
export const DVD_Mix_2to0 = 4;
export const DVD_Mix_3to0 = 8;
export const DVD_Mix_4to0 = 16;
export const DVD_Mix_Lto0 = 32;
export const DVD_Mix_Rto0 = 64;
export const DVD_Mix_0to1 = 256;
export const DVD_Mix_1to1 = 512;
export const DVD_Mix_2to1 = 1024;
export const DVD_Mix_3to1 = 2048;
export const DVD_Mix_4to1 = 4096;
export const DVD_Mix_Lto1 = 8192;
export const DVD_Mix_Rto1 = 16384;
export const DVD_Karaoke_GuideVocal1 = 1;
export const DVD_Karaoke_GuideVocal2 = 2;
export const DVD_Karaoke_GuideMelody1 = 4;
export const DVD_Karaoke_GuideMelody2 = 8;
export const DVD_Karaoke_GuideMelodyA = 16;
export const DVD_Karaoke_GuideMelodyB = 32;
export const DVD_Karaoke_SoundEffectA = 64;
export const DVD_Karaoke_SoundEffectB = 128;
export const DVD_Assignment_reserved0 = 0;
export const DVD_Assignment_reserved1 = 1;
export const DVD_Assignment_LR = 2;
export const DVD_Assignment_LRM = 3;
export const DVD_Assignment_LR1 = 4;
export const DVD_Assignment_LRM1 = 5;
export const DVD_Assignment_LR12 = 6;
export const DVD_Assignment_LRM12 = 7;
export const DVD_VideoCompression_Other = 0;
export const DVD_VideoCompression_MPEG1 = 1;
export const DVD_VideoCompression_MPEG2 = 2;
export const DVD_SPType_NotSpecified = 0;
export const DVD_SPType_Language = 1;
export const DVD_SPType_Other = 2;
export const DVD_SPCoding_RunLength = 0;
export const DVD_SPCoding_Extended = 1;
export const DVD_SPCoding_Other = 2;
export const DVD_AppMode_Not_Specified = 0;
export const DVD_AppMode_Karaoke = 1;
export const DVD_AppMode_Other = 3;
export const DVD_Struct_Volume = 1;
export const DVD_Struct_Title = 2;
export const DVD_Struct_ParentalID = 3;
export const DVD_Struct_PartOfTitle = 4;
export const DVD_Struct_Cell = 5;
export const DVD_Stream_Audio = 16;
export const DVD_Stream_Subpicture = 17;
export const DVD_Stream_Angle = 18;
export const DVD_Channel_Audio = 32;
export const DVD_General_Name = 48;
export const DVD_General_Comments = 49;
export const DVD_Title_Series = 56;
export const DVD_Title_Movie = 57;
export const DVD_Title_Video = 58;
export const DVD_Title_Album = 59;
export const DVD_Title_Song = 60;
export const DVD_Title_Other = 63;
export const DVD_Title_Sub_Series = 64;
export const DVD_Title_Sub_Movie = 65;
export const DVD_Title_Sub_Video = 66;
export const DVD_Title_Sub_Album = 67;
export const DVD_Title_Sub_Song = 68;
export const DVD_Title_Sub_Other = 71;
export const DVD_Title_Orig_Series = 72;
export const DVD_Title_Orig_Movie = 73;
export const DVD_Title_Orig_Video = 74;
export const DVD_Title_Orig_Album = 75;
export const DVD_Title_Orig_Song = 76;
export const DVD_Title_Orig_Other = 79;
export const DVD_Other_Scene = 80;
export const DVD_Other_Cut = 81;
export const DVD_Other_Take = 82;
export const DVD_CharSet_Unicode = 0;
export const DVD_CharSet_ISO646 = 1;
export const DVD_CharSet_JIS_Roman_Kanji = 2;
export const DVD_CharSet_ISO8859_1 = 3;
export const DVD_CharSet_ShiftJIS_Kanji_Roman_Katakana = 4;
export const AM_DVD_HWDEC_PREFER = 1;
export const AM_DVD_HWDEC_ONLY = 2;
export const AM_DVD_SWDEC_PREFER = 4;
export const AM_DVD_SWDEC_ONLY = 8;
export const AM_DVD_NOVPE = 256;
export const AM_DVD_DO_NOT_CLEAR = 512;
export const AM_DVD_VMR9_ONLY = 2048;
export const AM_DVD_EVR_ONLY = 4096;
export const AM_DVD_EVR_QOS = 8192;
export const AM_DVD_ADAPT_GRAPH = 16384;
export const AM_DVD_MASK = 65535;
export const AM_DVD_STREAM_VIDEO = 1;
export const AM_DVD_STREAM_AUDIO = 2;
export const AM_DVD_STREAM_SUBPIC = 4;
export const AM_OVERLAY_NOTIFY_VISIBLE_CHANGE = 1;
export const AM_OVERLAY_NOTIFY_SOURCE_CHANGE = 2;
export const AM_OVERLAY_NOTIFY_DEST_CHANGE = 4;
export const BDA_EVENT_SIGNAL_LOSS = 0;
export const BDA_EVENT_SIGNAL_LOCK = 1;
export const BDA_EVENT_DATA_START = 2;
export const BDA_EVENT_DATA_STOP = 3;
export const BDA_EVENT_CHANNEL_ACQUIRED = 4;
export const BDA_EVENT_CHANNEL_LOST = 5;
export const BDA_EVENT_CHANNEL_SOURCE_CHANGED = 6;
export const BDA_EVENT_CHANNEL_ACTIVATED = 7;
export const BDA_EVENT_CHANNEL_DEACTIVATED = 8;
export const BDA_EVENT_SUBCHANNEL_ACQUIRED = 9;
export const BDA_EVENT_SUBCHANNEL_LOST = 10;
export const BDA_EVENT_SUBCHANNEL_SOURCE_CHANGED = 11;
export const BDA_EVENT_SUBCHANNEL_ACTIVATED = 12;
export const BDA_EVENT_SUBCHANNEL_DEACTIVATED = 13;
export const BDA_EVENT_ACCESS_GRANTED = 14;
export const BDA_EVENT_ACCESS_DENIED = 15;
export const BDA_EVENT_OFFER_EXTENDED = 16;
export const BDA_EVENT_PURCHASE_COMPLETED = 17;
export const BDA_EVENT_SMART_CARD_INSERTED = 18;
export const BDA_EVENT_SMART_CARD_REMOVED = 19;
export const BDA_PROMISCUOUS_MULTICAST = 0;
export const BDA_FILTERED_MULTICAST = 1;
export const BDA_NO_MULTICAST = 2;
export const BDA_SIGNAL_UNAVAILABLE = 0;
export const BDA_SIGNAL_INACTIVE = 1;
export const BDA_SIGNAL_ACTIVE = 2;
export const BDA_CHANGES_COMPLETE = 0;
export const BDA_CHANGES_PENDING = 1;
export const MEDIA_TRANSPORT_PACKET = 0;
export const MEDIA_ELEMENTARY_STREAM = 1;
export const MEDIA_MPEG2_PSI = 2;
export const MEDIA_TRANSPORT_PAYLOAD = 3;
export const ISDBCAS_REQUEST_ID_EMG = 56;
export const ISDBCAS_REQUEST_ID_EMD = 58;
export const PID_OTHER = "-1";
export const PID_ELEMENTARY_STREAM = 0;
export const PID_MPEG2_SECTION_PSI_SI = 1;
export const DVB_Cable = 0;
export const DVB_Terrestrial = 1;
export const DVB_Satellite = 2;
export const ISDB_Terrestrial = 3;
export const ISDB_Satellite = 4;
export const BDA_UNDEFINED_CHANNEL = "-1";
export const CategoryNotSet = "-1";
export const CategoryOther = 0;
export const CategoryVideo = 1;
export const CategoryAudio = 2;
export const CategoryText = 3;
export const CategorySubtitles = 4;
export const CategoryCaptions = 5;
export const CategorySuperimpose = 6;
export const CategoryData = 7;
export const CATEGORY_COUNT = 8;
export const StatusActive = 0;
export const StatusInactive = 1;
export const StatusUnavailable = 2;
export const BDA_UNITIALIZED_MPEG2STREAMTYPE = "-1";
export const Reserved1 = 0;
export const ISO_IEC_11172_2_VIDEO = 1;
export const ISO_IEC_13818_2_VIDEO = 2;
export const ISO_IEC_11172_3_AUDIO = 3;
export const ISO_IEC_13818_3_AUDIO = 4;
export const ISO_IEC_13818_1_PRIVATE_SECTION = 5;
export const ISO_IEC_13818_1_PES = 6;
export const ISO_IEC_13522_MHEG = 7;
export const ANNEX_A_DSM_CC = 8;
export const ITU_T_REC_H_222_1 = 9;
export const ISO_IEC_13818_6_TYPE_A = 10;
export const ISO_IEC_13818_6_TYPE_B = 11;
export const ISO_IEC_13818_6_TYPE_C = 12;
export const ISO_IEC_13818_6_TYPE_D = 13;
export const ISO_IEC_13818_1_AUXILIARY = 14;
export const ISO_IEC_13818_7_AUDIO = 15;
export const ISO_IEC_14496_2_VISUAL = 16;
export const ISO_IEC_14496_3_AUDIO = 17;
export const ISO_IEC_14496_1_IN_PES = 18;
export const ISO_IEC_14496_1_IN_SECTION = 19;
export const ISO_IEC_13818_6_DOWNLOAD = 20;
export const METADATA_IN_PES = 21;
export const METADATA_IN_SECTION = 22;
export const METADATA_IN_DATA_CAROUSEL = 23;
export const METADATA_IN_OBJECT_CAROUSEL = 24;
export const METADATA_IN_DOWNLOAD_PROTOCOL = 25;
export const IRPM_STREAMM = 26;
export const ITU_T_H264 = 27;
export const ISO_IEC_13818_1_RESERVED = 28;
export const USER_PRIVATE = 16;
export const HEVC_VIDEO_OR_TEMPORAL_VIDEO = 36;
export const HEVC_TEMPORAL_VIDEO_SUBSET = 37;
export const ISO_IEC_USER_PRIVATE = 128;
export const DOLBY_AC3_AUDIO = 129;
export const DOLBY_DIGITAL_PLUS_AUDIO_ATSC = 135;
export const ATSCCT_AC3 = 1;
export const BDA_BCC_RATE_NOT_SET = "-1";
export const BDA_BCC_RATE_NOT_DEFINED = 0;
export const BDA_BCC_RATE_1_2 = 1;
export const BDA_BCC_RATE_2_3 = 2;
export const BDA_BCC_RATE_3_4 = 3;
export const BDA_BCC_RATE_3_5 = 4;
export const BDA_BCC_RATE_4_5 = 5;
export const BDA_BCC_RATE_5_6 = 6;
export const BDA_BCC_RATE_5_11 = 7;
export const BDA_BCC_RATE_7_8 = 8;
export const BDA_BCC_RATE_1_4 = 9;
export const BDA_BCC_RATE_1_3 = 10;
export const BDA_BCC_RATE_2_5 = 11;
export const BDA_BCC_RATE_6_7 = 12;
export const BDA_BCC_RATE_8_9 = 13;
export const BDA_BCC_RATE_9_10 = 14;
export const BDA_BCC_RATE_MAX = 15;
export const BDA_FEC_METHOD_NOT_SET = "-1";
export const BDA_FEC_METHOD_NOT_DEFINED = 0;
export const BDA_FEC_VITERBI = 1;
export const BDA_FEC_RS_204_188 = 2;
export const BDA_FEC_LDPC = 3;
export const BDA_FEC_BCH = 4;
export const BDA_FEC_RS_147_130 = 5;
export const BDA_FEC_MAX = 6;
export const BDA_MOD_NOT_SET = "-1";
export const BDA_MOD_NOT_DEFINED = 0;
export const BDA_MOD_16QAM = 1;
export const BDA_MOD_32QAM = 2;
export const BDA_MOD_64QAM = 3;
export const BDA_MOD_80QAM = 4;
export const BDA_MOD_96QAM = 5;
export const BDA_MOD_112QAM = 6;
export const BDA_MOD_128QAM = 7;
export const BDA_MOD_160QAM = 8;
export const BDA_MOD_192QAM = 9;
export const BDA_MOD_224QAM = 10;
export const BDA_MOD_256QAM = 11;
export const BDA_MOD_320QAM = 12;
export const BDA_MOD_384QAM = 13;
export const BDA_MOD_448QAM = 14;
export const BDA_MOD_512QAM = 15;
export const BDA_MOD_640QAM = 16;
export const BDA_MOD_768QAM = 17;
export const BDA_MOD_896QAM = 18;
export const BDA_MOD_1024QAM = 19;
export const BDA_MOD_QPSK = 20;
export const BDA_MOD_BPSK = 21;
export const BDA_MOD_OQPSK = 22;
export const BDA_MOD_8VSB = 23;
export const BDA_MOD_16VSB = 24;
export const BDA_MOD_ANALOG_AMPLITUDE = 25;
export const BDA_MOD_ANALOG_FREQUENCY = 26;
export const BDA_MOD_8PSK = 27;
export const BDA_MOD_RF = 28;
export const BDA_MOD_16APSK = 29;
export const BDA_MOD_32APSK = 30;
export const BDA_MOD_NBC_QPSK = 31;
export const BDA_MOD_NBC_8PSK = 32;
export const BDA_MOD_DIRECTV = 33;
export const BDA_MOD_ISDB_T_TMCC = 34;
export const BDA_MOD_ISDB_S_TMCC = 35;
export const BDA_MOD_MAX = 36;
export const BDA_SCAN_MOD_16QAM = 1;
export const BDA_SCAN_MOD_32QAM = 2;
export const BDA_SCAN_MOD_64QAM = 4;
export const BDA_SCAN_MOD_80QAM = 8;
export const BDA_SCAN_MOD_96QAM = 16;
export const BDA_SCAN_MOD_112QAM = 32;
export const BDA_SCAN_MOD_128QAM = 64;
export const BDA_SCAN_MOD_160QAM = 128;
export const BDA_SCAN_MOD_192QAM = 256;
export const BDA_SCAN_MOD_224QAM = 512;
export const BDA_SCAN_MOD_256QAM = 1024;
export const BDA_SCAN_MOD_320QAM = 2048;
export const BDA_SCAN_MOD_384QAM = 4096;
export const BDA_SCAN_MOD_448QAM = 8192;
export const BDA_SCAN_MOD_512QAM = 16384;
export const BDA_SCAN_MOD_640QAM = 32768;
export const BDA_SCAN_MOD_768QAM = 65536;
export const BDA_SCAN_MOD_896QAM = 131072;
export const BDA_SCAN_MOD_1024QAM = 262144;
export const BDA_SCAN_MOD_QPSK = 524288;
export const BDA_SCAN_MOD_BPSK = 1048576;
export const BDA_SCAN_MOD_OQPSK = 2097152;
export const BDA_SCAN_MOD_8VSB = 4194304;
export const BDA_SCAN_MOD_16VSB = 8388608;
export const BDA_SCAN_MOD_AM_RADIO = 16777216;
export const BDA_SCAN_MOD_FM_RADIO = 33554432;
export const BDA_SCAN_MOD_8PSK = 67108864;
export const BDA_SCAN_MOD_RF = 134217728;
export const ScanModulationTypesMask_MCE_DigitalCable = 11;
export const ScanModulationTypesMask_MCE_TerrestrialATSC = 23;
export const ScanModulationTypesMask_MCE_AnalogTv = 28;
export const ScanModulationTypesMask_MCE_All_TV = "-1";
export const ScanModulationTypesMask_DVBC = 75;
export const BDA_SCAN_MOD_16APSK = 268435456;
export const BDA_SCAN_MOD_32APSK = 536870912;
export const BDA_SPECTRAL_INVERSION_NOT_SET = "-1";
export const BDA_SPECTRAL_INVERSION_NOT_DEFINED = 0;
export const BDA_SPECTRAL_INVERSION_AUTOMATIC = 1;
export const BDA_SPECTRAL_INVERSION_NORMAL = 2;
export const BDA_SPECTRAL_INVERSION_INVERTED = 3;
export const BDA_SPECTRAL_INVERSION_MAX = 4;
export const BDA_POLARISATION_NOT_SET = "-1";
export const BDA_POLARISATION_NOT_DEFINED = 0;
export const BDA_POLARISATION_LINEAR_H = 1;
export const BDA_POLARISATION_LINEAR_V = 2;
export const BDA_POLARISATION_CIRCULAR_L = 3;
export const BDA_POLARISATION_CIRCULAR_R = 4;
export const BDA_POLARISATION_MAX = 5;
export const BDA_LNB_SOURCE_NOT_SET = "-1";
export const BDA_LNB_SOURCE_NOT_DEFINED = 0;
export const BDA_LNB_SOURCE_A = 1;
export const BDA_LNB_SOURCE_B = 2;
export const BDA_LNB_SOURCE_C = 3;
export const BDA_LNB_SOURCE_D = 4;
export const BDA_LNB_SOURCE_MAX = 5;
export const BDA_GUARD_NOT_SET = "-1";
export const BDA_GUARD_NOT_DEFINED = 0;
export const BDA_GUARD_1_32 = 1;
export const BDA_GUARD_1_16 = 2;
export const BDA_GUARD_1_8 = 3;
export const BDA_GUARD_1_4 = 4;
export const BDA_GUARD_1_128 = 5;
export const BDA_GUARD_19_128 = 6;
export const BDA_GUARD_19_256 = 7;
export const BDA_GUARD_MAX = 8;
export const BDA_HALPHA_NOT_SET = "-1";
export const BDA_HALPHA_NOT_DEFINED = 0;
export const BDA_HALPHA_1 = 1;
export const BDA_HALPHA_2 = 2;
export const BDA_HALPHA_4 = 3;
export const BDA_HALPHA_MAX = 4;
export const BDA_XMIT_MODE_NOT_SET = "-1";
export const BDA_XMIT_MODE_NOT_DEFINED = 0;
export const BDA_XMIT_MODE_2K = 1;
export const BDA_XMIT_MODE_8K = 2;
export const BDA_XMIT_MODE_4K = 3;
export const BDA_XMIT_MODE_2K_INTERLEAVED = 4;
export const BDA_XMIT_MODE_4K_INTERLEAVED = 5;
export const BDA_XMIT_MODE_1K = 6;
export const BDA_XMIT_MODE_16K = 7;
export const BDA_XMIT_MODE_32K = 8;
export const BDA_XMIT_MODE_MAX = 9;
export const BDA_ROLL_OFF_NOT_SET = "-1";
export const BDA_ROLL_OFF_NOT_DEFINED = 0;
export const BDA_ROLL_OFF_20 = 1;
export const BDA_ROLL_OFF_25 = 2;
export const BDA_ROLL_OFF_35 = 3;
export const BDA_ROLL_OFF_MAX = 4;
export const BDA_PILOT_NOT_SET = "-1";
export const BDA_PILOT_NOT_DEFINED = 0;
export const BDA_PILOT_OFF = 1;
export const BDA_PILOT_ON = 2;
export const BDA_PILOT_MAX = 3;
export const BDA_FREQUENCY_NOT_SET = "-1";
export const BDA_FREQUENCY_NOT_DEFINED = 0;
export const BDA_RANGE_NOT_SET = "-1";
export const BDA_RANGE_NOT_DEFINED = 0;
export const BDA_CHAN_BANDWITH_NOT_SET = "-1";
export const BDA_CHAN_BANDWITH_NOT_DEFINED = 0;
export const BDA_FREQUENCY_MULTIPLIER_NOT_SET = "-1";
export const BDA_FREQUENCY_MULTIPLIER_NOT_DEFINED = 0;
export const BDACOMP_NOT_DEFINED = 0;
export const BDACOMP_EXCLUDE_TS_FROM_TR = 1;
export const BDACOMP_INCLUDE_LOCATOR_IN_TR = 2;
export const BDACOMP_INCLUDE_COMPONENTS_IN_TR = 4;
export const SCTE28_ConditionalAccess = 0;
export const SCTE28_POD_Host_Binding_Information = 1;
export const SCTE28_IPService = 2;
export const SCTE28_NetworkInterface_SCTE55_2 = 3;
export const SCTE28_NetworkInterface_SCTE55_1 = 4;
export const SCTE28_CopyProtection = 5;
export const SCTE28_Diagnostic = 6;
export const SCTE28_Undesignated = 7;
export const SCTE28_Reserved = 8;
export const CONDITIONALACCESS_ACCESS_UNSPECIFIED = 0;
export const CONDITIONALACCESS_ACCESS_NOT_POSSIBLE = 1;
export const CONDITIONALACCESS_ACCESS_POSSIBLE = 2;
export const CONDITIONALACCESS_ACCESS_POSSIBLE_NO_STREAMING_DISRUPTION = 3;
export const CONDITIONALACCESS_UNSPECIFIED = 0;
export const CONDITIONALACCESS_CLOSED_ITSELF = 1;
export const CONDITIONALACCESS_TUNER_REQUESTED_CLOSE = 2;
export const CONDITIONALACCESS_DIALOG_TIMEOUT = 3;
export const CONDITIONALACCESS_DIALOG_FOCUS_CHANGE = 4;
export const CONDITIONALACCESS_DIALOG_USER_DISMISSED = 5;
export const CONDITIONALACCESS_DIALOG_USER_NOT_AVAILABLE = 6;
export const CONDITIONALACCESS_SUCCESSFULL = 0;
export const CONDITIONALACCESS_ENDED_NOCHANGE = 1;
export const CONDITIONALACCESS_ABORTED = 2;
export const BDA_DISCOVERY_UNSPECIFIED = 0;
export const BDA_DISCOVERY_REQUIRED = 1;
export const BDA_DISCOVERY_COMPLETE = 2;
export const CardInserted = 0;
export const CardRemoved = 1;
export const CardError = 2;
export const CardDataChanged = 3;
export const CardFirmwareUpgrade = 4;
export const NotAssociated = 0;
export const Associated = 1;
export const AssociationUnknown = 2;
export const SCTE_18 = 0;
export const Entitled = 0;
export const NotEntitled = 1;
export const TechnicalFailure = 2;
export const NotReady = 0;
export const UserClosed = 1;
export const SystemClosed = 2;
export const DeviceClosed = 3;
export const ErrorClosed = 4;
export const BDA_DrmPairing_Succeeded = 0;
export const BDA_DrmPairing_HardwareFailure = 1;
export const BDA_DrmPairing_NeedRevocationData = 2;
export const BDA_DrmPairing_NeedIndiv = 3;
export const BDA_DrmPairing_Other = 4;
export const BDA_DrmPairing_DrmInitFailed = 5;
export const BDA_DrmPairing_DrmNotPaired = 6;
export const BDA_DrmPairing_DrmRePairSoon = 7;
export const BDA_DrmPairing_Aborted = 8;
export const BDA_DrmPairing_NeedSDKUpdate = 9;
export const KSPROPERTY_IPSINK_MULTICASTLIST = 0;
export const KSPROPERTY_IPSINK_ADAPTER_DESCRIPTION = 1;
export const KSPROPERTY_IPSINK_ADAPTER_ADDRESS = 2;
export const AM_EXSEEK_CANSEEK = 1;
export const AM_EXSEEK_CANSCAN = 2;
export const AM_EXSEEK_MARKERSEEK = 4;
export const AM_EXSEEK_SCANWITHOUTCLOCK = 8;
export const AM_EXSEEK_NOSTANDARDREPAINT = 16;
export const AM_EXSEEK_BUFFERING = 32;
export const AM_EXSEEK_SENDS_VIDEOFRAMEREADY = 64;
export const AM_L21_CCLEVEL_TC2 = 0;
export const AM_L21_CCSERVICE_None = 0;
export const AM_L21_CCSERVICE_Caption1 = 1;
export const AM_L21_CCSERVICE_Caption2 = 2;
export const AM_L21_CCSERVICE_Text1 = 3;
export const AM_L21_CCSERVICE_Text2 = 4;
export const AM_L21_CCSERVICE_XDS = 5;
export const AM_L21_CCSERVICE_DefChannel = 10;
export const AM_L21_CCSERVICE_Invalid = 11;
export const AM_L21_CCSTATE_Off = 0;
export const AM_L21_CCSTATE_On = 1;
export const AM_L21_CCSTYLE_None = 0;
export const AM_L21_CCSTYLE_PopOn = 1;
export const AM_L21_CCSTYLE_PaintOn = 2;
export const AM_L21_CCSTYLE_RollUp = 3;
export const AM_L21_DRAWBGMODE_Opaque = 0;
export const AM_L21_DRAWBGMODE_Transparent = 1;
export const AM_WST_LEVEL_1_5 = 0;
export const AM_WST_SERVICE_None = 0;
export const AM_WST_SERVICE_Text = 1;
export const AM_WST_SERVICE_IDS = 2;
export const AM_WST_SERVICE_Invalid = 3;
export const AM_WST_STATE_Off = 0;
export const AM_WST_STATE_On = 1;
export const AM_WST_STYLE_None = 0;
export const AM_WST_STYLE_Invers = 1;
export const AM_WST_DRAWBGMODE_Opaque = 0;
export const AM_WST_DRAWBGMODE_Transparent = 1;
export const STREAMTYPE_READ = 0;
export const STREAMTYPE_WRITE = 1;
export const STREAMTYPE_TRANSFORM = 2;
export const STREAMSTATE_STOP = 0;
export const STREAMSTATE_RUN = 1;
export const COMPSTAT_NOUPDATEOK = 1;
export const COMPSTAT_WAIT = 2;
export const COMPSTAT_ABORT = 4;
export const MMSSF_HASCLOCK = 1;
export const MMSSF_SUPPORTSEEK = 2;
export const MMSSF_ASYNCHRONOUS = 4;
export const SSUPDATE_ASYNC = 1;
export const SSUPDATE_CONTINUOUS = 2;
export const DDSFF_PROGRESSIVERENDER = 1;
export const AMMSF_NOGRAPHTHREAD = 1;
export const AMMSF_ADDDEFAULTRENDERER = 1;
export const AMMSF_CREATEPEER = 2;
export const AMMSF_STOPIFNOSAMPLES = 4;
export const AMMSF_NOSTALL = 8;
export const AMMSF_RENDERTYPEMASK = 3;
export const AMMSF_RENDERTOEXISTING = 0;
export const AMMSF_RENDERALLSTREAMS = 1;
export const AMMSF_NORENDER = 2;
export const AMMSF_NOCLOCK = 4;
export const AMMSF_RUN = 8;
export const Disabled = 0;
export const ReadData = 1;
export const RenderData = 2;
export const BI_RGB = 0;
export const BI_RLE8 = 1;
export const BI_RLE4 = 2;
export const BI_BITFIELDS = 3;
export const BI_JPEG = 4;
export const BI_PNG = 5;
export const AM_PROPERTY_FRAMESTEP_STEP = 1;
export const AM_PROPERTY_FRAMESTEP_CANCEL = 2;
export const AM_PROPERTY_FRAMESTEP_CANSTEP = 3;
export const AM_PROPERTY_FRAMESTEP_CANSTEPMULTIPLE = 4;
export const AM_ARMODE_STRETCHED = 0;
export const AM_ARMODE_LETTER_BOX = 1;
export const AM_ARMODE_CROP = 2;
export const AM_ARMODE_STRETCHED_AS_PRIMARY = 3;
export const VMR9Sample_SyncPoint = 1;
export const VMR9Sample_Preroll = 2;
export const VMR9Sample_Discontinuity = 4;
export const VMR9Sample_TimeValid = 8;
export const VMR9Sample_SrcDstRectsValid = 16;
export const VMR9AllocFlag_3DRenderTarget = 1;
export const VMR9AllocFlag_DXVATarget = 2;
export const VMR9AllocFlag_TextureSurface = 4;
export const VMR9AllocFlag_OffscreenSurface = 8;
export const VMR9AllocFlag_RGBDynamicSwitch = 16;
export const VMR9AllocFlag_UsageReserved = 224;
export const VMR9AllocFlag_UsageMask = 255;
export const D3DFMT_UNKNOWN = 0;
export const D3DFMT_R8G8B8 = 20;
export const D3DFMT_A8R8G8B8 = 21;
export const D3DFMT_X8R8G8B8 = 22;
export const D3DFMT_R5G6B5 = 23;
export const D3DFMT_X1R5G5B5 = 24;
export const D3DFMT_A1R5G5B5 = 25;
export const D3DFMT_A4R4G4B4 = 26;
export const D3DFMT_R3G3B2 = 27;
export const D3DFMT_A8 = 28;
export const D3DFMT_A8R3G3B2 = 29;
export const D3DFMT_X4R4G4B4 = 30;
export const D3DFMT_A2B10G10R10 = 31;
export const D3DFMT_A8B8G8R8 = 32;
export const D3DFMT_X8B8G8R8 = 33;
export const D3DFMT_G16R16 = 34;
export const D3DFMT_A2R10G10B10 = 35;
export const D3DFMT_A16B16G16R16 = 36;
export const D3DFMT_A8P8 = 40;
export const D3DFMT_P8 = 41;
export const D3DFMT_L8 = 50;
export const D3DFMT_A8L8 = 51;
export const D3DFMT_A4L4 = 52;
export const D3DFMT_V8U8 = 60;
export const D3DFMT_L6V5U5 = 61;
export const D3DFMT_X8L8V8U8 = 62;
export const D3DFMT_Q8W8V8U8 = 63;
export const D3DFMT_V16U16 = 64;
export const D3DFMT_A2W10V10U10 = 67;
export const D3DFMT_UYVY = 1498831189;
export const D3DFMT_R8G8_B8G8 = 1195525970;
export const D3DFMT_YUY2 = 844715353;
export const D3DFMT_G8R8_G8B8 = 1111970375;
export const D3DFMT_DXT1 = 827611204;
export const D3DFMT_DXT2 = 844388420;
export const D3DFMT_DXT3 = 861165636;
export const D3DFMT_DXT4 = 877942852;
export const D3DFMT_DXT5 = 894720068;
export const D3DFMT_D16_LOCKABLE = 70;
export const D3DFMT_D32 = 71;
export const D3DFMT_D15S1 = 73;
export const D3DFMT_D24S8 = 75;
export const D3DFMT_D24X8 = 77;
export const D3DFMT_D24X4S4 = 79;
export const D3DFMT_D16 = 80;
export const D3DFMT_D32F_LOCKABLE = 82;
export const D3DFMT_D24FS8 = 83;
export const D3DFMT_D32_LOCKABLE = 84;
export const D3DFMT_S8_LOCKABLE = 85;
export const D3DFMT_L16 = 81;
export const D3DFMT_VERTEXDATA = 100;
export const D3DFMT_INDEX16 = 101;
export const D3DFMT_INDEX32 = 102;
export const D3DFMT_Q16W16V16U16 = 110;
export const D3DFMT_MULTI2_ARGB8 = 827606349;
export const D3DFMT_R16F = 111;
export const D3DFMT_G16R16F = 112;
export const D3DFMT_A16B16G16R16F = 113;
export const D3DFMT_R32F = 114;
export const D3DFMT_G32R32F = 115;
export const D3DFMT_A32B32G32R32F = 116;
export const D3DFMT_CxV8U8 = 117;
export const D3DFMT_A1 = 118;
export const D3DFMT_A2B10G10R10_XR_BIAS = 119;
export const D3DFMT_BINARYBUFFER = 199;
export const D3DFMT_FORCE_DWORD = 2147483647;
export const D3DPOOL_DEFAULT = 0;
export const D3DPOOL_MANAGED = 1;
export const D3DPOOL_SYSTEMMEM = 2;
export const D3DPOOL_SCRATCH = 3;
export const D3DPOOL_FORCE_DWORD = 2147483647;
export const VMR9ARMode_None = 0;
export const VMR9ARMode_LetterBox = 1;
export const MixerPref9_NoDecimation = 1;
export const MixerPref9_DecimateOutput = 2;
export const MixerPref9_ARAdjustXorY = 4;
export const MixerPref9_NonSquareMixing = 8;
export const MixerPref9_DecimateMask = 15;
export const MixerPref9_BiLinearFiltering = 16;
export const MixerPref9_PointFiltering = 32;
export const MixerPref9_AnisotropicFiltering = 64;
export const MixerPref9_PyramidalQuadFiltering = 128;
export const MixerPref9_GaussianQuadFiltering = 256;
export const MixerPref9_FilteringReserved = 3584;
export const MixerPref9_FilteringMask = 4080;
export const MixerPref9_RenderTargetRGB = 4096;
export const MixerPref9_RenderTargetYUV = 8192;
export const MixerPref9_RenderTargetReserved = 1032192;
export const MixerPref9_RenderTargetMask = 1044480;
export const MixerPref9_DynamicSwitchToBOB = 1048576;
export const MixerPref9_DynamicDecimateBy2 = 2097152;
export const MixerPref9_DynamicReserved = 12582912;
export const MixerPref9_DynamicMask = 15728640;
export const ProcAmpControl9_Brightness = 1;
export const ProcAmpControl9_Contrast = 2;
export const ProcAmpControl9_Hue = 4;
export const ProcAmpControl9_Saturation = 8;
export const ProcAmpControl9_Mask = 15;
export const VMR9AlphaBitmap_Disable = 1;
export const VMR9AlphaBitmap_hDC = 2;
export const VMR9AlphaBitmap_EntireDDS = 4;
export const VMR9AlphaBitmap_SrcColorKey = 8;
export const VMR9AlphaBitmap_SrcRect = 16;
export const VMR9AlphaBitmap_FilterMode = 32;
export const RenderPrefs9_DoNotRenderBorder = 1;
export const RenderPrefs9_Mask = 1;
export const VMR9Mode_Windowed = 1;
export const VMR9Mode_Windowless = 2;
export const VMR9Mode_Renderless = 4;
export const VMR9Mode_Mask = 7;
export const DeinterlacePref9_NextBest = 1;
export const DeinterlacePref9_BOB = 2;
export const DeinterlacePref9_Weave = 4;
export const DeinterlacePref9_Mask = 7;
export const DeinterlaceTech9_Unknown = 0;
export const DeinterlaceTech9_BOBLineReplicate = 1;
export const DeinterlaceTech9_BOBVerticalStretch = 2;
export const DeinterlaceTech9_MedianFiltering = 4;
export const DeinterlaceTech9_EdgeFiltering = 16;
export const DeinterlaceTech9_FieldAdaptive = 32;
export const DeinterlaceTech9_PixelAdaptive = 64;
export const DeinterlaceTech9_MotionVectorSteered = 128;
export const VMR9_SampleReserved = 1;
export const VMR9_SampleProgressiveFrame = 2;
export const VMR9_SampleFieldInterleavedEvenFirst = 3;
export const VMR9_SampleFieldInterleavedOddFirst = 4;
export const VMR9_SampleFieldSingleEven = 5;
export const VMR9_SampleFieldSingleOdd = 6;
export const AM_PROPERTY_AC3_ERROR_CONCEALMENT = 1;
export const AM_PROPERTY_AC3_ALTERNATE_AUDIO = 2;
export const AM_PROPERTY_AC3_DOWNMIX = 3;
export const AM_PROPERTY_AC3_BIT_STREAM_MODE = 4;
export const AM_PROPERTY_AC3_DIALOGUE_LEVEL = 5;
export const AM_PROPERTY_AC3_LANGUAGE_CODE = 6;
export const AM_PROPERTY_AC3_ROOM_TYPE = 7;
export const AM_PROPERTY_DVDSUBPIC_PALETTE = 0;
export const AM_PROPERTY_DVDSUBPIC_HLI = 1;
export const AM_PROPERTY_DVDSUBPIC_COMPOSIT_ON = 2;
export const AM_PROPERTY_DVDCOPY_CHLG_KEY = 1;
export const AM_PROPERTY_DVDCOPY_DVD_KEY1 = 2;
export const AM_PROPERTY_DVDCOPY_DEC_KEY2 = 3;
export const AM_PROPERTY_DVDCOPY_TITLE_KEY = 4;
export const AM_PROPERTY_COPY_MACROVISION = 5;
export const AM_PROPERTY_DVDCOPY_REGION = 6;
export const AM_PROPERTY_DVDCOPY_SET_COPY_STATE = 7;
export const AM_PROPERTY_COPY_ANALOG_COMPONENT = 8;
export const AM_PROPERTY_COPY_DIGITAL_CP = 9;
export const AM_PROPERTY_COPY_DVD_SRM = 10;
export const AM_PROPERTY_DVDCOPY_SUPPORTS_NEW_KEYCOUNT = 11;
export const AM_PROPERTY_DVDCOPY_DISC_KEY = 128;
export const AM_DIGITAL_CP_OFF = 0;
export const AM_DIGITAL_CP_ON = 1;
export const AM_DIGITAL_CP_DVD_COMPLIANT = 2;
export const AM_DVDCOPYSTATE_INITIALIZE = 0;
export const AM_DVDCOPYSTATE_INITIALIZE_TITLE = 1;
export const AM_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 2;
export const AM_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 3;
export const AM_DVDCOPYSTATE_DONE = 4;
export const AM_MACROVISION_DISABLED = 0;
export const AM_MACROVISION_LEVEL1 = 1;
export const AM_MACROVISION_LEVEL2 = 2;
export const AM_MACROVISION_LEVEL3 = 3;
export const AM_MPEG2Level_Low = 1;
export const AM_MPEG2Level_Main = 2;
export const AM_MPEG2Level_High1440 = 3;
export const AM_MPEG2Level_High = 4;
export const AM_MPEG2Profile_Simple = 1;
export const AM_MPEG2Profile_Main = 2;
export const AM_MPEG2Profile_SNRScalable = 3;
export const AM_MPEG2Profile_SpatiallyScalable = 4;
export const AM_MPEG2Profile_High = 5;
export const AM_PROPERTY_DVDKARAOKE_ENABLE = 0;
export const AM_PROPERTY_DVDKARAOKE_DATA = 1;
export const AM_RATE_SimpleRateChange = 1;
export const AM_RATE_ExactRateChange = 2;
export const AM_RATE_MaxFullDataRate = 3;
export const AM_RATE_Step = 4;
export const AM_RATE_UseRateVersion = 5;
export const AM_RATE_QueryFullFrameRate = 6;
export const AM_RATE_QueryLastRateSegPTS = 7;
export const AM_RATE_CorrectTS = 8;
export const AM_RATE_ReverseMaxFullDataRate = 9;
export const AM_RATE_ResetOnTimeDisc = 10;
export const AM_RATE_QueryMapping = 11;
export const AM_RATE_ChangeRate = 1;
export const AM_RATE_FullDataRateMax = 2;
export const AM_RATE_ReverseDecode = 3;
export const AM_RATE_DecoderPosition = 4;
export const AM_RATE_DecoderVersion = 5;
export const DVD_DIR_FORWARD = 0;
export const DVD_DIR_BACKWARD = 1;
export const DVD_ERROR_Unexpected = 1;
export const DVD_ERROR_CopyProtectFail = 2;
export const DVD_ERROR_InvalidDVD1_0Disc = 3;
export const DVD_ERROR_InvalidDiscRegion = 4;
export const DVD_ERROR_LowParentalLevel = 5;
export const DVD_ERROR_MacrovisionFail = 6;
export const DVD_ERROR_IncompatibleSystemAndDecoderRegions = 7;
export const DVD_ERROR_IncompatibleDiscAndDecoderRegions = 8;
export const DVD_ERROR_CopyProtectOutputFail = 9;
export const DVD_ERROR_CopyProtectOutputNotSupported = 10;
export const DVD_WARNING_InvalidDVD1_0Disc = 1;
export const DVD_WARNING_FormatNotSupported = 2;
export const DVD_WARNING_IllegalNavCommand = 3;
export const DVD_WARNING_Open = 4;
export const DVD_WARNING_Seek = 5;
export const DVD_WARNING_Read = 6;
export const DVD_PB_STOPPED_Other = 0;
export const DVD_PB_STOPPED_NoBranch = 1;
export const DVD_PB_STOPPED_NoFirstPlayDomain = 2;
export const DVD_PB_STOPPED_StopCommand = 3;
export const DVD_PB_STOPPED_Reset = 4;
export const DVD_PB_STOPPED_DiscEjected = 5;
export const DVD_PB_STOPPED_IllegalNavCommand = 6;
export const DVD_PB_STOPPED_PlayPeriodAutoStop = 7;
export const DVD_PB_STOPPED_PlayChapterAutoStop = 8;
export const DVD_PB_STOPPED_ParentalFailure = 9;
export const DVD_PB_STOPPED_RegionFailure = 10;
export const DVD_PB_STOPPED_MacrovisionFailure = 11;
export const DVD_PB_STOPPED_DiscReadError = 12;
export const DVD_PB_STOPPED_CopyProtectFailure = 13;
export const DVD_PB_STOPPED_CopyProtectOutputFailure = 14;
export const DVD_PB_STOPPED_CopyProtectOutputNotSupported = 15;
export const SNDDEV_ERROR_Open = 1;
export const SNDDEV_ERROR_Close = 2;
export const SNDDEV_ERROR_GetCaps = 3;
export const SNDDEV_ERROR_PrepareHeader = 4;
export const SNDDEV_ERROR_UnprepareHeader = 5;
export const SNDDEV_ERROR_Reset = 6;
export const SNDDEV_ERROR_Restart = 7;
export const SNDDEV_ERROR_GetPosition = 8;
export const SNDDEV_ERROR_Write = 9;
export const SNDDEV_ERROR_Pause = 10;
export const SNDDEV_ERROR_Stop = 11;
export const SNDDEV_ERROR_Start = 12;
export const SNDDEV_ERROR_AddBuffer = 13;
export const SNDDEV_ERROR_Query = 14;
export const MPT_INT = 0;
export const MPT_FLOAT = 1;
export const MPT_BOOL = 2;
export const MPT_ENUM = 3;
export const MPT_MAX = 4;
export const MP_CURVE_JUMP = 1;
export const MP_CURVE_LINEAR = 2;
export const MP_CURVE_SQUARE = 4;
export const MP_CURVE_INVSQUARE = 8;
export const MP_CURVE_SINE = 16;
export const DXVA2_SampleFlag_Palette_Changed = 1;
export const DXVA2_SampleFlag_SrcRect_Changed = 2;
export const DXVA2_SampleFlag_DstRect_Changed = 4;
export const DXVA2_SampleFlag_ColorData_Changed = 8;
export const DXVA2_SampleFlag_PlanarAlpha_Changed = 16;
export const DXVA2_SampleFlag_RFF = 65536;
export const DXVA2_SampleFlag_TFF = 131072;
export const DXVA2_SampleFlag_RFF_TFF_Present = 262144;
export const DXVA2_SampleFlagsMask = "-65505";
export const DXVA2_DestinationFlag_Background_Changed = 1;
export const DXVA2_DestinationFlag_TargetRect_Changed = 2;
export const DXVA2_DestinationFlag_ColorData_Changed = 4;
export const DXVA2_DestinationFlag_Alpha_Changed = 8;
export const DXVA2_DestinationFlag_RFF = 65536;
export const DXVA2_DestinationFlag_TFF = 131072;
export const DXVA2_DestinationFlag_RFF_TFF_Present = 262144;
export const DXVA2_DestinationFlagMask = "-65521";
export const AMPLAYLISTITEM_CANSKIP = 1;
export const AMPLAYLISTITEM_CANBIND = 2;
export const AMPLAYLIST_STARTINSCANMODE = 1;
export const AMPLAYLIST_FORCEBANNER = 2;
export const AMPLAYLISTEVENT_RESUME = 0;
export const AMPLAYLISTEVENT_BREAK = 1;
export const AMPLAYLISTEVENT_NEXT = 2;
export const AMPLAYLISTEVENT_MASK = 15;
export const AMPLAYLISTEVENT_REFRESH = 16;
export const AM_CONFIGASFWRITER_PARAM_AUTOINDEX = 1;
export const AM_CONFIGASFWRITER_PARAM_MULTIPASS = 2;
export const AM_CONFIGASFWRITER_PARAM_DONTCOMPRESS = 3;
export const DMO_INPUT_DATA_BUFFERF_SYNCPOINT = 1;
export const DMO_INPUT_DATA_BUFFERF_TIME = 2;
export const DMO_INPUT_DATA_BUFFERF_TIMELENGTH = 4;
export const DMO_INPUT_DATA_BUFFERF_DISCONTINUITY = 8;
export const DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT = 1;
export const DMO_OUTPUT_DATA_BUFFERF_TIME = 2;
export const DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH = 4;
export const DMO_OUTPUT_DATA_BUFFERF_DISCONTINUITY = 8;
export const DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE = 16777216;
export const DMO_INPUT_STATUSF_ACCEPT_DATA = 1;
export const DMO_INPUT_STREAMF_WHOLE_SAMPLES = 1;
export const DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 2;
export const DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE = 4;
export const DMO_INPUT_STREAMF_HOLDS_BUFFERS = 8;
export const DMO_OUTPUT_STREAMF_WHOLE_SAMPLES = 1;
export const DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 2;
export const DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE = 4;
export const DMO_OUTPUT_STREAMF_DISCARDABLE = 8;
export const DMO_OUTPUT_STREAMF_OPTIONAL = 16;
export const DMO_SET_TYPEF_TEST_ONLY = 1;
export const DMO_SET_TYPEF_CLEAR = 2;
export const DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1;
export const DMO_INPLACE_NORMAL = 0;
export const DMO_INPLACE_ZERO = 1;
export const DMO_QUALITY_STATUS_ENABLED = 1;
export const DMO_VOSF_NEEDS_PREVIOUS_SAMPLE = 1;
export const DMO_REGISTERF_IS_KEYED = 1;
export const DMO_ENUMF_INCLUDE_KEYED = 1;
export const DISPID_TUNER_TS_UNIQUENAME = 1;
export const DISPID_TUNER_TS_FRIENDLYNAME = 2;
export const DISPID_TUNER_TS_CLSID = 3;
export const DISPID_TUNER_TS_NETWORKTYPE = 4;
export const DISPID_TUNER_TS__NETWORKTYPE = 5;
export const DISPID_TUNER_TS_CREATETUNEREQUEST = 6;
export const DISPID_TUNER_TS_ENUMCATEGORYGUIDS = 7;
export const DISPID_TUNER_TS_ENUMDEVICEMONIKERS = 8;
export const DISPID_TUNER_TS_DEFAULTPREFERREDCOMPONENTTYPES = 9;
export const DISPID_TUNER_TS_FREQMAP = 10;
export const DISPID_TUNER_TS_DEFLOCATOR = 11;
export const DISPID_TUNER_TS_CLONE = 12;
export const DISPID_TUNER_TR_TUNINGSPACE = 1;
export const DISPID_TUNER_TR_COMPONENTS = 2;
export const DISPID_TUNER_TR_CLONE = 3;
export const DISPID_TUNER_TR_LOCATOR = 4;
export const DISPID_TUNER_CT_CATEGORY = 1;
export const DISPID_TUNER_CT_MEDIAMAJORTYPE = 2;
export const DISPID_TUNER_CT__MEDIAMAJORTYPE = 3;
export const DISPID_TUNER_CT_MEDIASUBTYPE = 4;
export const DISPID_TUNER_CT__MEDIASUBTYPE = 5;
export const DISPID_TUNER_CT_MEDIAFORMATTYPE = 6;
export const DISPID_TUNER_CT__MEDIAFORMATTYPE = 7;
export const DISPID_TUNER_CT_MEDIATYPE = 8;
export const DISPID_TUNER_CT_CLONE = 9;
export const DISPID_TUNER_LCT_LANGID = 100;
export const DISPID_TUNER_MP2CT_TYPE = 200;
export const DISPID_TUNER_ATSCCT_FLAGS = 300;
export const DISPID_TUNER_L_CARRFREQ = 1;
export const DISPID_TUNER_L_INNERFECMETHOD = 2;
export const DISPID_TUNER_L_INNERFECRATE = 3;
export const DISPID_TUNER_L_OUTERFECMETHOD = 4;
export const DISPID_TUNER_L_OUTERFECRATE = 5;
export const DISPID_TUNER_L_MOD = 6;
export const DISPID_TUNER_L_SYMRATE = 7;
export const DISPID_TUNER_L_CLONE = 8;
export const DISPID_TUNER_L_ATSC_PHYS_CHANNEL = 201;
export const DISPID_TUNER_L_ATSC_TSID = 202;
export const DISPID_TUNER_L_ATSC_MP2_PROGNO = 203;
export const DISPID_TUNER_L_DVBT_BANDWIDTH = 301;
export const DISPID_TUNER_L_DVBT_LPINNERFECMETHOD = 302;
export const DISPID_TUNER_L_DVBT_LPINNERFECRATE = 303;
export const DISPID_TUNER_L_DVBT_GUARDINTERVAL = 304;
export const DISPID_TUNER_L_DVBT_HALPHA = 305;
export const DISPID_TUNER_L_DVBT_TRANSMISSIONMODE = 306;
export const DISPID_TUNER_L_DVBT_INUSE = 307;
export const DISPID_TUNER_L_DVBT2_PHYSICALLAYERPIPEID = 351;
export const DISPID_TUNER_L_DVBS_POLARISATION = 401;
export const DISPID_TUNER_L_DVBS_WEST = 402;
export const DISPID_TUNER_L_DVBS_ORBITAL = 403;
export const DISPID_TUNER_L_DVBS_AZIMUTH = 404;
export const DISPID_TUNER_L_DVBS_ELEVATION = 405;
export const DISPID_TUNER_L_DVBS2_DISEQ_LNB_SOURCE = 406;
export const DISPID_TUNER_TS_DVBS2_LOW_OSC_FREQ_OVERRIDE = 407;
export const DISPID_TUNER_TS_DVBS2_HI_OSC_FREQ_OVERRIDE = 408;
export const DISPID_TUNER_TS_DVBS2_LNB_SWITCH_FREQ_OVERRIDE = 409;
export const DISPID_TUNER_TS_DVBS2_SPECTRAL_INVERSION_OVERRIDE = 410;
export const DISPID_TUNER_L_DVBS2_ROLLOFF = 411;
export const DISPID_TUNER_L_DVBS2_PILOT = 412;
export const DISPID_TUNER_L_ANALOG_STANDARD = 601;
export const DISPID_TUNER_L_DTV_O_MAJOR_CHANNEL = 701;
export const DISPID_TUNER_C_TYPE = 1;
export const DISPID_TUNER_C_STATUS = 2;
export const DISPID_TUNER_C_LANGID = 3;
export const DISPID_TUNER_C_DESCRIPTION = 4;
export const DISPID_TUNER_C_CLONE = 5;
export const DISPID_TUNER_C_MP2_PID = 101;
export const DISPID_TUNER_C_MP2_PCRPID = 102;
export const DISPID_TUNER_C_MP2_PROGNO = 103;
export const DISPID_TUNER_C_ANALOG_AUDIO = 201;
export const DISPID_TUNER_TS_DVB_SYSTEMTYPE = 101;
export const DISPID_TUNER_TS_DVB2_NETWORK_ID = 102;
export const DISPID_TUNER_TS_DVBS_LOW_OSC_FREQ = 1001;
export const DISPID_TUNER_TS_DVBS_HI_OSC_FREQ = 1002;
export const DISPID_TUNER_TS_DVBS_LNB_SWITCH_FREQ = 1003;
export const DISPID_TUNER_TS_DVBS_INPUT_RANGE = 1004;
export const DISPID_TUNER_TS_DVBS_SPECTRAL_INVERSION = 1005;
export const DISPID_TUNER_TS_AR_MINFREQUENCY = 101;
export const DISPID_TUNER_TS_AR_MAXFREQUENCY = 102;
export const DISPID_TUNER_TS_AR_STEP = 103;
export const DISPID_TUNER_TS_AR_COUNTRYCODE = 104;
export const DISPID_TUNER_TS_AUX_COUNTRYCODE = 101;
export const DISPID_TUNER_TS_ATV_MINCHANNEL = 101;
export const DISPID_TUNER_TS_ATV_MAXCHANNEL = 102;
export const DISPID_TUNER_TS_ATV_INPUTTYPE = 103;
export const DISPID_TUNER_TS_ATV_COUNTRYCODE = 104;
export const DISPID_TUNER_TS_ATSC_MINMINORCHANNEL = 201;
export const DISPID_TUNER_TS_ATSC_MAXMINORCHANNEL = 202;
export const DISPID_TUNER_TS_ATSC_MINPHYSCHANNEL = 203;
export const DISPID_TUNER_TS_ATSC_MAXPHYSCHANNEL = 204;
export const DISPID_TUNER_TS_DC_MINMAJORCHANNEL = 301;
export const DISPID_TUNER_TS_DC_MAXMAJORCHANNEL = 302;
export const DISPID_TUNER_TS_DC_MINSOURCEID = 303;
export const DISPID_TUNER_TS_DC_MAXSOURCEID = 304;
export const DISPID_CHTUNER_ATVAC_CHANNEL = 101;
export const DISPID_CHTUNER_ATVDC_SYSTEM = 101;
export const DISPID_CHTUNER_ATVDC_CONTENT = 102;
export const DISPID_CHTUNER_CIDTR_CHANNELID = 101;
export const DISPID_CHTUNER_CTR_CHANNEL = 101;
export const DISPID_CHTUNER_ACTR_MINOR_CHANNEL = 201;
export const DISPID_CHTUNER_DCTR_MAJOR_CHANNEL = 301;
export const DISPID_CHTUNER_DCTR_SRCID = 302;
export const DISPID_DVBTUNER_DVBC_ATTRIBUTESVALID = 101;
export const DISPID_DVBTUNER_DVBC_PID = 102;
export const DISPID_DVBTUNER_DVBC_TAG = 103;
export const DISPID_DVBTUNER_DVBC_COMPONENTTYPE = 104;
export const DISPID_DVBTUNER_ONID = 101;
export const DISPID_DVBTUNER_TSID = 102;
export const DISPID_DVBTUNER_SID = 103;
export const DISPID_MP2TUNER_TSID = 101;
export const DISPID_MP2TUNER_PROGNO = 102;
export const DISPID_MP2TUNERFACTORY_CREATETUNEREQUEST = 1;
export const MPAA = 0;
export const US_TV = 1;
export const Canadian_English = 2;
export const Canadian_French = 3;
export const Reserved4 = 4;
export const System5 = 5;
export const System6 = 6;
export const Reserved7 = 7;
export const PBDA = 8;
export const AgeBased = 9;
export const TvRat_kSystems = 10;
export const TvRat_SystemDontKnow = 255;
export const TvRat_0 = 0;
export const TvRat_1 = 1;
export const TvRat_2 = 2;
export const TvRat_3 = 3;
export const TvRat_4 = 4;
export const TvRat_5 = 5;
export const TvRat_6 = 6;
export const TvRat_7 = 7;
export const TvRat_8 = 8;
export const TvRat_9 = 9;
export const TvRat_10 = 10;
export const TvRat_11 = 11;
export const TvRat_12 = 12;
export const TvRat_13 = 13;
export const TvRat_14 = 14;
export const TvRat_15 = 15;
export const TvRat_16 = 16;
export const TvRat_17 = 17;
export const TvRat_18 = 18;
export const TvRat_19 = 19;
export const TvRat_20 = 20;
export const TvRat_21 = 21;
export const TvRat_kLevels = 22;
export const TvRat_Unblock = "-1";
export const TvRat_LevelDontKnow = 255;
export const MPAA_NotApplicable = 0;
export const MPAA_G = 1;
export const MPAA_PG = 2;
export const MPAA_PG13 = 3;
export const MPAA_R = 4;
export const MPAA_NC17 = 5;
export const MPAA_X = 6;
export const MPAA_NotRated = 7;
export const US_TV_None = 0;
export const US_TV_Y = 1;
export const US_TV_Y7 = 2;
export const US_TV_G = 3;
export const US_TV_PG = 4;
export const US_TV_14 = 5;
export const US_TV_MA = 6;
export const US_TV_None7 = 7;
export const CAE_TV_Exempt = 0;
export const CAE_TV_C = 1;
export const CAE_TV_C8 = 2;
export const CAE_TV_G = 3;
export const CAE_TV_PG = 4;
export const CAE_TV_14 = 5;
export const CAE_TV_18 = 6;
export const CAE_TV_Reserved = 7;
export const CAF_TV_Exempt = 0;
export const CAF_TV_G = 1;
export const CAF_TV_8 = 2;
export const CAF_TV_13 = 3;
export const CAF_TV_16 = 4;
export const CAF_TV_18 = 5;
export const CAF_TV_Reserved6 = 6;
export const CAF_TV_Reserved = 7;
export const BfAttrNone = 0;
export const BfIsBlocked = 1;
export const BfIsAttr_1 = 2;
export const BfIsAttr_2 = 4;
export const BfIsAttr_3 = 8;
export const BfIsAttr_4 = 16;
export const BfIsAttr_5 = 32;
export const BfIsAttr_6 = 64;
export const BfIsAttr_7 = 128;
export const BfValidAttrSubmask = 255;
export const US_TV_IsBlocked = 1;
export const US_TV_IsViolent = 2;
export const US_TV_IsSexualSituation = 4;
export const US_TV_IsAdultLanguage = 8;
export const US_TV_IsSexuallySuggestiveDialog = 16;
export const US_TV_ValidAttrSubmask = 31;
export const MPAA_IsBlocked = 1;
export const MPAA_ValidAttrSubmask = 1;
export const CAE_IsBlocked = 1;
export const CAE_ValidAttrSubmask = 1;
export const CAF_IsBlocked = 1;
export const CAF_ValidAttrSubmask = 1;
export const FORMATNOTSUPPORTED_CLEAR = 0;
export const FORMATNOTSUPPORTED_NOTSUPPORTED = 1;
export const PROT_COPY_FREE = 1;
export const PROT_COPY_ONCE = 2;
export const PROT_COPY_NEVER = 3;
export const PROT_COPY_NEVER_REALLY = 4;
export const PROT_COPY_NO_MORE = 5;
export const PROT_COPY_FREE_CIT = 6;
export const PROT_COPY_BF = 7;
export const PROT_COPY_CN_RECORDING_STOP = 8;
export const PROT_COPY_FREE_SECURE = 9;
export const PROT_COPY_INVALID = 50;
export const ENCDEC_CPEVENT = 0;
export const ENCDEC_RECORDING_STATUS = 1;
export const RECORDING_STOPPED = 0;
export const RECORDING_STARTED = 1;
export const CPEVENT_BITSHIFT_RATINGS = 0;
export const CPEVENT_BITSHIFT_COPP = 1;
export const CPEVENT_BITSHIFT_LICENSE = 2;
export const CPEVENT_BITSHIFT_ROLLBACK = 3;
export const CPEVENT_BITSHIFT_SAC = 4;
export const CPEVENT_BITSHIFT_DOWNRES = 5;
export const CPEVENT_BITSHIFT_STUBLIB = 6;
export const CPEVENT_BITSHIFT_UNTRUSTEDGRAPH = 7;
export const CPEVENT_BITSHIFT_PENDING_CERTIFICATE = 8;
export const CPEVENT_BITSHIFT_NO_PLAYREADY = 9;
export const CPEVENT_NONE = 0;
export const CPEVENT_RATINGS = 1;
export const CPEVENT_COPP = 2;
export const CPEVENT_LICENSE = 3;
export const CPEVENT_ROLLBACK = 4;
export const CPEVENT_SAC = 5;
export const CPEVENT_DOWNRES = 6;
export const CPEVENT_STUBLIB = 7;
export const CPEVENT_UNTRUSTEDGRAPH = 8;
export const CPEVENT_PROTECTWINDOWED = 9;
export const REVOKED_COPP = 0;
export const REVOKED_SAC = 1;
export const REVOKED_APP_STUB = 2;
export const REVOKED_SECURE_PIPELINE = 3;
export const REVOKED_MAX_TYPES = 4;
export const EnTag_Remove = 0;
export const EnTag_Once = 1;
export const EnTag_Repeat = 2;
export const COPP_Unknown = "-1";
export const COPP_BadDriver = 0;
export const COPP_NoCardHDCPSupport = 1;
export const COPP_NoMonitorHDCPSupport = 2;
export const COPP_BadCertificate = 3;
export const COPP_InvalidBusProtection = 4;
export const COPP_AeroGlassOff = 5;
export const COPP_RogueApp = 6;
export const COPP_ForbiddenVideo = 7;
export const COPP_Activate = 8;
export const COPP_DigitalAudioUnprotected = 9;
export const LIC_BadLicense = 0;
export const LIC_NeedIndiv = 1;
export const LIC_Expired = 2;
export const LIC_NeedActivation = 3;
export const LIC_ExtenderBlocked = 4;
export const DOWNRES_Always = 0;
export const DOWNRES_InWindowOnly = 1;
export const DOWNRES_Undefined = 2;
export const dispidName = 0;
export const dispidStatus = 1;
export const dispidDevImageSourceWidth = 2;
export const dispidDevImageSourceHeight = 3;
export const dispidDevCountryCode = 4;
export const dispidDevOverScan = 5;
export const dispidSegment = 6;
export const dispidDevVolume = 7;
export const dispidDevBalance = 8;
export const dispidDevPower = 9;
export const dispidTuneChan = 10;
export const dispidDevVideoSubchannel = 11;
export const dispidDevAudioSubchannel = 12;
export const dispidChannelAvailable = 13;
export const dispidDevVideoFrequency = 14;
export const dispidDevAudioFrequency = 15;
export const dispidCount = 16;
export const dispidDevFileName = 17;
export const dispidVisible = 18;
export const dispidOwner = 19;
export const dispidMessageDrain = 20;
export const dispidViewable = 21;
export const dispidDevView = 22;
export const dispidKSCat = 23;
export const dispidCLSID = 24;
export const dispid_KSCat = 25;
export const dispid_CLSID = 26;
export const dispidTune = 27;
export const dispidTS = 28;
export const dispidDevSAP = 29;
export const dispidClip = 30;
export const dispidRequestedClipRect = 31;
export const dispidClippedSourceRect = 32;
export const dispidAvailableSourceRect = 33;
export const dispidMediaPosition = 34;
export const dispidDevRun = 35;
export const dispidDevPause = 36;
export const dispidDevStop = 37;
export const dispidCCEnable = 38;
export const dispidDevStep = 39;
export const dispidDevCanStep = 40;
export const dispidSourceSize = 41;
export const dispid_playtitle = 42;
export const dispid_playchapterintitle = 43;
export const dispid_playchapter = 44;
export const dispid_playchaptersautostop = 45;
export const dispid_playattime = 46;
export const dispid_playattimeintitle = 47;
export const dispid_playperiodintitleautostop = 48;
export const dispid_replaychapter = 49;
export const dispid_playprevchapter = 50;
export const dispid_playnextchapter = 51;
export const dispid_playforwards = 52;
export const dispid_playbackwards = 53;
export const dispid_stilloff = 54;
export const dispid_audiolanguage = 55;
export const dispid_showmenu = 56;
export const dispid_resume = 57;
export const dispid_returnfromsubmenu = 58;
export const dispid_buttonsavailable = 59;
export const dispid_currentbutton = 60;
export const dispid_SelectAndActivateButton = 61;
export const dispid_ActivateButton = 62;
export const dispid_SelectRightButton = 63;
export const dispid_SelectLeftButton = 64;
export const dispid_SelectLowerButton = 65;
export const dispid_SelectUpperButton = 66;
export const dispid_ActivateAtPosition = 67;
export const dispid_SelectAtPosition = 68;
export const dispid_ButtonAtPosition = 69;
export const dispid_NumberOfChapters = 70;
export const dispid_TotalTitleTime = 71;
export const dispid_TitlesAvailable = 72;
export const dispid_VolumesAvailable = 73;
export const dispid_CurrentVolume = 74;
export const dispid_CurrentDiscSide = 75;
export const dispid_CurrentDomain = 76;
export const dispid_CurrentChapter = 77;
export const dispid_CurrentTitle = 78;
export const dispid_CurrentTime = 79;
export const dispid_FramesPerSecond = 80;
export const dispid_DVDTimeCode2bstr = 81;
export const dispid_DVDDirectory = 82;
export const dispid_IsSubpictureStreamEnabled = 83;
export const dispid_IsAudioStreamEnabled = 84;
export const dispid_CurrentSubpictureStream = 85;
export const dispid_SubpictureLanguage = 86;
export const dispid_CurrentAudioStream = 87;
export const dispid_AudioStreamsAvailable = 88;
export const dispid_AnglesAvailable = 89;
export const dispid_CurrentAngle = 90;
export const dispid_CCActive = 91;
export const dispid_CurrentCCService = 92;
export const dispid_SubpictureStreamsAvailable = 93;
export const dispid_SubpictureOn = 94;
export const dispid_DVDUniqueID = 95;
export const dispid_EnableResetOnStop = 96;
export const dispid_AcceptParentalLevelChange = 97;
export const dispid_NotifyParentalLevelChange = 98;
export const dispid_SelectParentalCountry = 99;
export const dispid_SelectParentalLevel = 100;
export const dispid_TitleParentalLevels = 101;
export const dispid_PlayerParentalCountry = 102;
export const dispid_PlayerParentalLevel = 103;
export const dispid_Eject = 104;
export const dispid_UOPValid = 105;
export const dispid_SPRM = 106;
export const dispid_GPRM = 107;
export const dispid_DVDTextStringType = 108;
export const dispid_DVDTextString = 109;
export const dispid_DVDTextNumberOfStrings = 110;
export const dispid_DVDTextNumberOfLanguages = 111;
export const dispid_DVDTextLanguageLCID = 112;
export const dispid_RegionChange = 113;
export const dispid_DVDAdm = 114;
export const dispid_DeleteBookmark = 115;
export const dispid_RestoreBookmark = 116;
export const dispid_SaveBookmark = 117;
export const dispid_SelectDefaultAudioLanguage = 118;
export const dispid_SelectDefaultSubpictureLanguage = 119;
export const dispid_PreferredSubpictureStream = 120;
export const dispid_DefaultMenuLanguage = 121;
export const dispid_DefaultSubpictureLanguage = 122;
export const dispid_DefaultAudioLanguage = 123;
export const dispid_DefaultSubpictureLanguageExt = 124;
export const dispid_DefaultAudioLanguageExt = 125;
export const dispid_LanguageFromLCID = 126;
export const dispid_KaraokeAudioPresentationMode = 127;
export const dispid_KaraokeChannelContent = 128;
export const dispid_KaraokeChannelAssignment = 129;
export const dispid_RestorePreferredSettings = 130;
export const dispid_ButtonRect = 131;
export const dispid_DVDScreenInMouseCoordinates = 132;
export const dispid_CustomCompositorClass = 133;
export const dispidCustomCompositorClass = 134;
export const dispid_CustomCompositor = 135;
export const dispidMixerBitmap = 136;
export const dispid_MixerBitmap = 137;
export const dispidMixerBitmapOpacity = 138;
export const dispidMixerBitmapRect = 139;
export const dispidSetupMixerBitmap = 140;
export const dispidUsingOverlay = 141;
export const dispidDisplayChange = 142;
export const dispidRePaint = 143;
export const dispid_IsEqualDevice = 144;
export const dispidrate = 145;
export const dispidposition = 146;
export const dispidpositionmode = 147;
export const dispidlength = 148;
export const dispidChangePassword = 149;
export const dispidSaveParentalLevel = 150;
export const dispidSaveParentalCountry = 151;
export const dispidConfirmPassword = 152;
export const dispidGetParentalLevel = 153;
export const dispidGetParentalCountry = 154;
export const dispidDefaultAudioLCID = 155;
export const dispidDefaultSubpictureLCID = 156;
export const dispidDefaultMenuLCID = 157;
export const dispidBookmarkOnStop = 158;
export const dispidMaxVidRect = 159;
export const dispidMinVidRect = 160;
export const dispidCapture = 161;
export const dispid_DecimateInput = 162;
export const dispidAlloctor = 163;
export const dispid_Allocator = 164;
export const dispidAllocPresentID = 165;
export const dispidSetAllocator = 166;
export const dispid_SetAllocator = 167;
export const dispidStreamBufferSinkName = 168;
export const dispidStreamBufferSourceName = 169;
export const dispidStreamBufferContentRecording = 170;
export const dispidStreamBufferReferenceRecording = 171;
export const dispidstarttime = 172;
export const dispidstoptime = 173;
export const dispidrecordingstopped = 174;
export const dispidrecordingstarted = 175;
export const dispidNameSetLock = 176;
export const dispidrecordingtype = 177;
export const dispidstart = 178;
export const dispidRecordingAttribute = 179;
export const dispid_RecordingAttribute = 180;
export const dispidSBEConfigure = 181;
export const dispid_CurrentRatings = 182;
export const dispid_MaxRatingsLevel = 183;
export const dispid_audioencoderint = 184;
export const dispid_videoencoderint = 185;
export const dispidService = 186;
export const dispid_BlockUnrated = 187;
export const dispid_UnratedDelay = 188;
export const dispid_SuppressEffects = 189;
export const dispidsbesource = 190;
export const dispidSetSinkFilter = 191;
export const dispid_SinkStreams = 192;
export const dispidTVFormats = 193;
export const dispidModes = 194;
export const dispidAuxInputs = 195;
export const dispidTeleTextFilter = 196;
export const dispid_channelchangeint = 197;
export const dispidUnlockProfile = 198;
export const dispid_AddFilter = 199;
export const dispidSetMinSeek = 200;
export const dispidRateEx = 201;
export const dispidaudiocounter = 202;
export const dispidvideocounter = 203;
export const dispidcccounter = 204;
export const dispidwstcounter = 205;
export const dispid_audiocounter = 206;
export const dispid_videocounter = 207;
export const dispid_cccounter = 208;
export const dispid_wstcounter = 209;
export const dispidaudioanalysis = 210;
export const dispidvideoanalysis = 211;
export const dispiddataanalysis = 212;
export const dispidaudio_analysis = 213;
export const dispidvideo_analysis = 214;
export const dispiddata_analysis = 215;
export const dispid_resetFilterList = 216;
export const dispidDevicePath = 217;
export const dispid_SourceFilter = 218;
export const dispid__SourceFilter = 219;
export const dispidUserEvent = 220;
export const dispid_Bookmark = 221;
export const LastReservedDeviceDispid = 16383;
export const eventidStateChange = 0;
export const eventidOnTuneChanged = 1;
export const eventidEndOfMedia = 2;
export const eventidDVDNotify = 3;
export const eventidPlayForwards = 4;
export const eventidPlayBackwards = 5;
export const eventidShowMenu = 6;
export const eventidResume = 7;
export const eventidSelectOrActivateButton = 8;
export const eventidStillOff = 9;
export const eventidPauseOn = 10;
export const eventidChangeCurrentAudioStream = 11;
export const eventidChangeCurrentSubpictureStream = 12;
export const eventidChangeCurrentAngle = 13;
export const eventidPlayAtTimeInTitle = 14;
export const eventidPlayAtTime = 15;
export const eventidPlayChapterInTitle = 16;
export const eventidPlayChapter = 17;
export const eventidReplayChapter = 18;
export const eventidPlayNextChapter = 19;
export const eventidStop = 20;
export const eventidReturnFromSubmenu = 21;
export const eventidPlayTitle = 22;
export const eventidPlayPrevChapter = 23;
export const eventidChangeKaraokePresMode = 24;
export const eventidChangeVideoPresMode = 25;
export const eventidOverlayUnavailable = 26;
export const eventidSinkCertificateFailure = 27;
export const eventidSinkCertificateSuccess = 28;
export const eventidSourceCertificateFailure = 29;
export const eventidSourceCertificateSuccess = 30;
export const eventidRatingsBlocked = 31;
export const eventidRatingsUnlocked = 32;
export const eventidRatingsChanged = 33;
export const eventidWriteFailure = 34;
export const eventidTimeHole = 35;
export const eventidStaleDataRead = 36;
export const eventidContentBecomingStale = 37;
export const eventidStaleFileDeleted = 38;
export const eventidEncryptionOn = 39;
export const eventidEncryptionOff = 40;
export const eventidRateChange = 41;
export const eventidLicenseChange = 42;
export const eventidCOPPBlocked = 43;
export const eventidCOPPUnblocked = 44;
export const dispidlicenseerrorcode = 45;
export const eventidBroadcastEvent = 46;
export const eventidBroadcastEventEx = 47;
export const eventidContentPrimarilyAudio = 48;
export const dispidAVDecAudioDualMonoEvent = 49;
export const dispidAVAudioSampleRateEvent = 50;
export const dispidAVAudioChannelConfigEvent = 51;
export const dispidAVAudioChannelCountEvent = 52;
export const dispidAVDecCommonMeanBitRateEvent = 53;
export const dispidAVDDSurroundModeEvent = 54;
export const dispidAVDecCommonInputFormatEvent = 55;
export const dispidAVDecCommonOutputFormatEvent = 56;
export const eventidWriteFailureClear = 57;
export const LastReservedDeviceEvent = 16383;
export const FrameMode = 0;
export const TenthsSecondsMode = 1;
export const CONTENT = 0;
export const REFERENCE = 1;
export const None = 0;
export const Caption1 = 1;
export const Caption2 = 2;
export const Text1 = 3;
export const Text2 = 4;
export const XDS = 5;
export const MSVidSink_Video = 1;
export const MSVidSink_Audio = 2;
export const MSVidSink_Other = 4;
export const MSVidSEG_SOURCE = 0;
export const MSVidSEG_XFORM = 1;
export const MSVidSEG_DEST = 2;
export const MSVIDCTL_LEFT_BUTTON = 1;
export const MSVIDCTL_RIGHT_BUTTON = 2;
export const MSVIDCTL_MIDDLE_BUTTON = 4;
export const MSVIDCTL_X_BUTTON1 = 8;
export const MSVIDCTL_X_BUTTON2 = 16;
export const MSVIDCTL_SHIFT = 1;
export const MSVIDCTL_CTRL = 2;
export const MSVIDCTL_ALT = 4;
export const dvdMenu_Title = 2;
export const dvdMenu_Root = 3;
export const dvdMenu_Subpicture = 4;
export const dvdMenu_Audio = 5;
export const dvdMenu_Angle = 6;
export const dvdMenu_Chapter = 7;
export const dvdState_Undefined = "-2";
export const dvdState_Unitialized = "-1";
export const dvdState_Stopped = 0;
export const dvdState_Paused = 1;
export const dvdState_Running = 2;
export const dvdStruct_Volume = 1;
export const dvdStruct_Title = 2;
export const dvdStruct_ParentalID = 3;
export const dvdStruct_PartOfTitle = 4;
export const dvdStruct_Cell = 5;
export const dvdStream_Audio = 16;
export const dvdStream_Subpicture = 17;
export const dvdStream_Angle = 18;
export const dvdChannel_Audio = 32;
export const dvdGeneral_Name = 48;
export const dvdGeneral_Comments = 49;
export const dvdTitle_Series = 56;
export const dvdTitle_Movie = 57;
export const dvdTitle_Video = 58;
export const dvdTitle_Album = 59;
export const dvdTitle_Song = 60;
export const dvdTitle_Other = 63;
export const dvdTitle_Sub_Series = 64;
export const dvdTitle_Sub_Movie = 65;
export const dvdTitle_Sub_Video = 66;
export const dvdTitle_Sub_Album = 67;
export const dvdTitle_Sub_Song = 68;
export const dvdTitle_Sub_Other = 71;
export const dvdTitle_Orig_Series = 72;
export const dvdTitle_Orig_Movie = 73;
export const dvdTitle_Orig_Video = 74;
export const dvdTitle_Orig_Album = 75;
export const dvdTitle_Orig_Song = 76;
export const dvdTitle_Orig_Other = 79;
export const dvdOther_Scene = 80;
export const dvdOther_Cut = 81;
export const dvdOther_Take = 82;
export const dvdSPExt_NotSpecified = 0;
export const dvdSPExt_Caption_Normal = 1;
export const dvdSPExt_Caption_Big = 2;
export const dvdSPExt_Caption_Children = 3;
export const dvdSPExt_CC_Normal = 5;
export const dvdSPExt_CC_Big = 6;
export const dvdSPExt_CC_Children = 7;
export const dvdSPExt_Forced = 9;
export const dvdSPExt_DirectorComments_Normal = 13;
export const dvdSPExt_DirectorComments_Big = 14;
export const dvdSPExt_DirectorComments_Children = 15;
export const sslFullSize = 0;
export const sslClipByOverScan = 1;
export const sslClipByClipRect = 2;
export const dispidInputs = 0;
export const dispidOutputs = 1;
export const dispid_Inputs = 2;
export const dispid_Outputs = 3;
export const dispidVideoRenderers = 4;
export const dispidAudioRenderers = 5;
export const dispidFeatures = 6;
export const dispidInput = 7;
export const dispidOutput = 8;
export const dispidVideoRenderer = 9;
export const dispidAudioRenderer = 10;
export const dispidSelectedFeatures = 11;
export const dispidView = 12;
export const dispidBuild = 13;
export const dispidPause = 14;
export const dispidRun = 15;
export const dispidStop = 16;
export const dispidDecompose = 17;
export const dispidDisplaySize = 18;
export const dispidMaintainAspectRatio = 19;
export const dispidColorKey = 20;
export const dispidStateChange = 21;
export const dispidgetState = 22;
export const dispidunbind = 23;
export const dispidbind = 24;
export const dispidDisableVideo = 25;
export const dispidDisableAudio = 26;
export const dispidViewNext = 27;
export const dispidServiceP = 28;
export const dslDefaultSize = 0;
export const dslSourceSize = 0;
export const dslHalfSourceSize = 1;
export const dslDoubleSourceSize = 2;
export const dslFullScreen = 3;
export const dslHalfScreen = 4;
export const dslQuarterScreen = 5;
export const dslSixteenthScreen = 6;
export const STATE_UNBUILT = "-1";
export const STATE_STOP = 0;
export const STATE_PAUSE = 1;
export const STATE_PLAY = 2;
export const RECORDING_TYPE_CONTENT = 0;
export const RECORDING_TYPE_REFERENCE = 1;
export const STREAMBUFFER_TYPE_DWORD = 0;
export const STREAMBUFFER_TYPE_STRING = 1;
export const STREAMBUFFER_TYPE_BINARY = 2;
export const STREAMBUFFER_TYPE_BOOL = 3;
export const STREAMBUFFER_TYPE_QWORD = 4;
export const STREAMBUFFER_TYPE_WORD = 5;
export const STREAMBUFFER_TYPE_GUID = 6;
export const DEF_MODE_PROFILE = 1;
export const DEF_MODE_STREAMS = 2;
export const MPEG_SECTION_IS_NEXT = 0;
export const MPEG_SECTION_IS_CURRENT = 1;
export const MPEG_CONTEXT_BCS_DEMUX = 0;
export const MPEG_CONTEXT_WINSOCK = 1;
export const MPEG_RQST_UNKNOWN = 0;
export const MPEG_RQST_GET_SECTION = 1;
export const MPEG_RQST_GET_SECTION_ASYNC = 2;
export const MPEG_RQST_GET_TABLE = 3;
export const MPEG_RQST_GET_TABLE_ASYNC = 4;
export const MPEG_RQST_GET_SECTIONS_STREAM = 5;
export const MPEG_RQST_GET_PES_STREAM = 6;
export const MPEG_RQST_GET_TS_STREAM = 7;
export const MPEG_RQST_START_MPE_STREAM = 8;
export const VA_VIDEO_COMPONENT = 0;
export const VA_VIDEO_PAL = 1;
export const VA_VIDEO_NTSC = 2;
export const VA_VIDEO_SECAM = 3;
export const VA_VIDEO_MAC = 4;
export const VA_VIDEO_UNSPECIFIED = 5;
export const VA_PRIMARIES_ITU_R_BT_709 = 1;
export const VA_PRIMARIES_UNSPECIFIED = 2;
export const VA_PRIMARIES_ITU_R_BT_470_SYSTEM_M = 4;
export const VA_PRIMARIES_ITU_R_BT_470_SYSTEM_B_G = 5;
export const VA_PRIMARIES_SMPTE_170M = 6;
export const VA_PRIMARIES_SMPTE_240M = 7;
export const VA_PRIMARIES_H264_GENERIC_FILM = 8;
export const VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_709 = 1;
export const VA_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2;
export const VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_M = 4;
export const VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_B_G = 5;
export const VA_TRANSFER_CHARACTERISTICS_SMPTE_170M = 6;
export const VA_TRANSFER_CHARACTERISTICS_SMPTE_240M = 7;
export const VA_TRANSFER_CHARACTERISTICS_LINEAR = 8;
export const VA_TRANSFER_CHARACTERISTICS_H264_LOG_100_TO_1 = 9;
export const VA_TRANSFER_CHARACTERISTICS_H264_LOG_316_TO_1 = 10;
export const VA_MATRIX_COEFF_H264_RGB = 0;
export const VA_MATRIX_COEFF_ITU_R_BT_709 = 1;
export const VA_MATRIX_COEFF_UNSPECIFIED = 2;
export const VA_MATRIX_COEFF_FCC = 4;
export const VA_MATRIX_COEFF_ITU_R_BT_470_SYSTEM_B_G = 5;
export const VA_MATRIX_COEFF_SMPTE_170M = 6;
export const VA_MATRIX_COEFF_SMPTE_240M = 7;
export const VA_MATRIX_COEFF_H264_YCgCo = 8;
export const STRCONV_MODE_DVB = 0;
export const STRCONV_MODE_DVB_EMPHASIS = 1;
export const STRCONV_MODE_DVB_WITHOUT_EMPHASIS = 2;
export const STRCONV_MODE_ISDB = 3;
export const CRID_LOCATION_IN_DESCRIPTOR = 0;
export const CRID_LOCATION_IN_CIT = 1;
export const CRID_LOCATION_DVB_RESERVED1 = 2;
export const CRID_LOCATION_DVB_RESERVED2 = 3;
export const DESC_LINKAGE_RESERVED0 = 0;
export const DESC_LINKAGE_INFORMATION = 1;
export const DESC_LINKAGE_EPG = 2;
export const DESC_LINKAGE_CA_REPLACEMENT = 3;
export const DESC_LINKAGE_COMPLETE_NET_BOUQUET_SI = 4;
export const DESC_LINKAGE_REPLACEMENT = 5;
export const DESC_LINKAGE_DATA = 6;
export const DESC_LINKAGE_RESERVED1 = 7;
export const DESC_LINKAGE_USER = 8;
export const DESC_LINKAGE_RESERVED2 = 255;
export const ChannelChangeSpanningEvent_Start = 0;
export const ChannelChangeSpanningEvent_End = 2;
export const ChannelTypeNone = 0;
export const ChannelTypeOther = 1;
export const ChannelTypeVideo = 2;
export const ChannelTypeAudio = 4;
export const ChannelTypeText = 8;
export const ChannelTypeSubtitles = 16;
export const ChannelTypeCaptions = 32;
export const ChannelTypeSuperimpose = 64;
export const ChannelTypeData = 128;
export const SignalAndServiceStatusSpanningEvent_None = "-1";
export const SignalAndServiceStatusSpanningEvent_Clear = 0;
export const SignalAndServiceStatusSpanningEvent_NoTVSignal = 1;
export const SignalAndServiceStatusSpanningEvent_ServiceOffAir = 2;
export const SignalAndServiceStatusSpanningEvent_WeakTVSignal = 3;
export const SignalAndServiceStatusSpanningEvent_NoSubscription = 4;
export const SignalAndServiceStatusSpanningEvent_AllAVScrambled = 5;
export const KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST_SIZE = 0;
export const KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST = 1;
export const KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_MODE = 2;
export const KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST_SIZE = 0;
export const KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST = 1;
export const KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_MODE = 2;
export const KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST_SIZE = 0;
export const KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST = 1;
export const KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_MODE = 2;
export const KSPROPERTY_BDA_SIGNAL_STRENGTH = 0;
export const KSPROPERTY_BDA_SIGNAL_QUALITY = 1;
export const KSPROPERTY_BDA_SIGNAL_PRESENT = 2;
export const KSPROPERTY_BDA_SIGNAL_LOCKED = 3;
export const KSPROPERTY_BDA_SAMPLE_TIME = 4;
export const KSPROPERTY_BDA_SIGNAL_LOCK_CAPS = 5;
export const KSPROPERTY_BDA_SIGNAL_LOCK_TYPE = 6;
export const Bda_LockType_None = 0;
export const Bda_LockType_PLL = 1;
export const Bda_LockType_DecoderDemod = 2;
export const Bda_LockType_Complete = 128;
export const KSMETHOD_BDA_START_CHANGES = 0;
export const KSMETHOD_BDA_CHECK_CHANGES = 1;
export const KSMETHOD_BDA_COMMIT_CHANGES = 2;
export const KSMETHOD_BDA_GET_CHANGE_STATE = 3;
export const KSMETHOD_BDA_CREATE_PIN_FACTORY = 0;
export const KSMETHOD_BDA_DELETE_PIN_FACTORY = 1;
export const KSMETHOD_BDA_CREATE_TOPOLOGY = 2;
export const KSPROPERTY_BDA_NODE_TYPES = 0;
export const KSPROPERTY_BDA_PIN_TYPES = 1;
export const KSPROPERTY_BDA_TEMPLATE_CONNECTIONS = 2;
export const KSPROPERTY_BDA_NODE_METHODS = 3;
export const KSPROPERTY_BDA_NODE_PROPERTIES = 4;
export const KSPROPERTY_BDA_NODE_EVENTS = 5;
export const KSPROPERTY_BDA_CONTROLLING_PIN_ID = 6;
export const KSPROPERTY_BDA_NODE_DESCRIPTORS = 7;
export const KSPROPERTY_BDA_PIN_ID = 0;
export const KSPROPERTY_BDA_PIN_TYPE = 1;
export const KSEVENT_BDA_PIN_CONNECTED = 0;
export const KSEVENT_BDA_PIN_DISCONNECTED = 1;
export const KSPROPERTY_BDA_VOID_TRANSFORM_START = 0;
export const KSPROPERTY_BDA_VOID_TRANSFORM_STOP = 1;
export const KSPROPERTY_BDA_NULL_TRANSFORM_START = 0;
export const KSPROPERTY_BDA_NULL_TRANSFORM_STOP = 1;
export const KSPROPERTY_BDA_RF_TUNER_FREQUENCY = 0;
export const KSPROPERTY_BDA_RF_TUNER_POLARITY = 1;
export const KSPROPERTY_BDA_RF_TUNER_RANGE = 2;
export const KSPROPERTY_BDA_RF_TUNER_TRANSPONDER = 3;
export const KSPROPERTY_BDA_RF_TUNER_BANDWIDTH = 4;
export const KSPROPERTY_BDA_RF_TUNER_FREQUENCY_MULTIPLIER = 5;
export const KSPROPERTY_BDA_RF_TUNER_CAPS = 6;
export const KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS = 7;
export const KSPROPERTY_BDA_RF_TUNER_STANDARD = 8;
export const KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE = 9;
export const Bda_SignalType_Unknown = 0;
export const Bda_SignalType_Analog = 1;
export const Bda_SignalType_Digital = 2;
export const Bda_DigitalStandard_None = 0;
export const Bda_DigitalStandard_DVB_T = 1;
export const Bda_DigitalStandard_DVB_S = 2;
export const Bda_DigitalStandard_DVB_C = 4;
export const Bda_DigitalStandard_ATSC = 8;
export const Bda_DigitalStandard_ISDB_T = 16;
export const Bda_DigitalStandard_ISDB_S = 32;
export const Bda_DigitalStandard_ISDB_C = 64;
export const KSEVENT_BDA_TUNER_SCAN = 0;
export const KSPROPERTY_BDA_LNB_LOF_LOW_BAND = 0;
export const KSPROPERTY_BDA_LNB_LOF_HIGH_BAND = 1;
export const KSPROPERTY_BDA_LNB_SWITCH_FREQUENCY = 2;
export const KSPROPERTY_BDA_DISEQC_ENABLE = 0;
export const KSPROPERTY_BDA_DISEQC_LNB_SOURCE = 1;
export const KSPROPERTY_BDA_DISEQC_USETONEBURST = 2;
export const KSPROPERTY_BDA_DISEQC_REPEATS = 3;
export const KSPROPERTY_BDA_DISEQC_SEND = 4;
export const KSPROPERTY_BDA_DISEQC_RESPONSE = 5;
export const KSEVENT_BDA_DISEQC_DATA_RECEIVED = 0;
export const KSPROPERTY_BDA_MODULATION_TYPE = 0;
export const KSPROPERTY_BDA_INNER_FEC_TYPE = 1;
export const KSPROPERTY_BDA_INNER_FEC_RATE = 2;
export const KSPROPERTY_BDA_OUTER_FEC_TYPE = 3;
export const KSPROPERTY_BDA_OUTER_FEC_RATE = 4;
export const KSPROPERTY_BDA_SYMBOL_RATE = 5;
export const KSPROPERTY_BDA_SPECTRAL_INVERSION = 6;
export const KSPROPERTY_BDA_GUARD_INTERVAL = 7;
export const KSPROPERTY_BDA_TRANSMISSION_MODE = 8;
export const KSPROPERTY_BDA_ROLL_OFF = 9;
export const KSPROPERTY_BDA_PILOT = 10;
export const KSPROPERTY_BDA_SIGNALTIMEOUTS = 11;
export const KSPROPERTY_BDA_PLP_NUMBER = 12;
export const KSPROPERTY_BDA_AUTODEMODULATE_START = 0;
export const KSPROPERTY_BDA_AUTODEMODULATE_STOP = 1;
export const KSPROPERTY_BDA_TABLE_SECTION = 0;
export const KSPROPERTY_BDA_PIDFILTER_MAP_PIDS = 0;
export const KSPROPERTY_BDA_PIDFILTER_UNMAP_PIDS = 1;
export const KSPROPERTY_BDA_PIDFILTER_LIST_PIDS = 2;
export const KSPROPERTY_BDA_ECM_MAP_STATUS = 0;
export const KSPROPERTY_BDA_CA_MODULE_STATUS = 1;
export const KSPROPERTY_BDA_CA_SMART_CARD_STATUS = 2;
export const KSPROPERTY_BDA_CA_MODULE_UI = 3;
export const KSPROPERTY_BDA_CA_SET_PROGRAM_PIDS = 4;
export const KSPROPERTY_BDA_CA_REMOVE_PROGRAM = 5;
export const KSEVENT_BDA_PROGRAM_FLOW_STATUS_CHANGED = 0;
export const KSEVENT_BDA_CA_MODULE_STATUS_CHANGED = 1;
export const KSEVENT_BDA_CA_SMART_CARD_STATUS_CHANGED = 2;
export const KSEVENT_BDA_CA_MODULE_UI_REQUESTED = 3;
export const KSMETHOD_BDA_DRM_CURRENT = 0;
export const KSMETHOD_BDA_DRM_DRMSTATUS = 1;
export const KSMETHOD_BDA_WMDRM_STATUS = 0;
export const KSMETHOD_BDA_WMDRM_REVINFO = 1;
export const KSMETHOD_BDA_WMDRM_CRL = 2;
export const KSMETHOD_BDA_WMDRM_MESSAGE = 3;
export const KSMETHOD_BDA_WMDRM_REISSUELICENSE = 4;
export const KSMETHOD_BDA_WMDRM_RENEWLICENSE = 5;
export const KSMETHOD_BDA_WMDRM_LICENSE = 6;
export const KSMETHOD_BDA_WMDRM_KEYINFO = 7;
export const KSMETHOD_BDA_WMDRMTUNER_CANCELCAPTURETOKEN = 0;
export const KSMETHOD_BDA_WMDRMTUNER_SETPIDPROTECTION = 1;
export const KSMETHOD_BDA_WMDRMTUNER_GETPIDPROTECTION = 2;
export const KSMETHOD_BDA_WMDRMTUNER_SETSYNCVALUE = 3;
export const KSMETHOD_BDA_WMDRMTUNER_STARTCODEPROFILE = 4;
export const KSMETHOD_BDA_WMDRMTUNER_PURCHASE_ENTITLEMENT = 5;
export const KSMETHOD_BDA_EVENT_DATA = 0;
export const KSMETHOD_BDA_EVENT_COMPLETE = 1;
export const KSEVENT_BDA_EVENT_PENDINGEVENT = 0;
export const KSMETHOD_BDA_DEBUG_LEVEL = 0;
export const KSMETHOD_BDA_DEBUG_DATA = 1;
export const KSMETHOD_BDA_TUNER_SETTUNER = 0;
export const KSMETHOD_BDA_TUNER_GETTUNERSTATE = 1;
export const KSMETHOD_BDA_TUNER_SIGNALNOISERATIO = 2;
export const KSMETHOD_BDA_GPNV_GETVALUE = 0;
export const KSMETHOD_BDA_GPNV_SETVALUE = 1;
export const KSMETHOD_BDA_GPNV_NAMEFROMINDEX = 2;
export const KSMETHOD_BDA_GPNV_GETVALUEUPDATENAME = 3;
export const KSMETHOD_BDA_MUX_GETPIDLIST = 0;
export const KSMETHOD_BDA_MUX_SETPIDLIST = 1;
export const KSMETHOD_BDA_SCAN_CAPABILTIES = 0;
export const KSMETHOD_BDA_SCANNING_STATE = 1;
export const KSMETHOD_BDA_SCAN_FILTER = 2;
export const KSMETHOD_BDA_SCAN_START = 3;
export const KSMETHOD_BDA_SCAN_RESUME = 4;
export const KSMETHOD_BDA_SCAN_STOP = 5;
export const KSMETHOD_BDA_GDDS_DATATYPE = 0;
export const KSMETHOD_BDA_GDDS_DATA = 1;
export const KSMETHOD_BDA_GDDS_TUNEXMLFROMIDX = 2;
export const KSMETHOD_BDA_GDDS_GETSERVICES = 3;
export const KSMETHOD_BDA_GDDS_SERVICEFROMTUNEXML = 4;
export const KSMETHOD_BDA_GDDS_DATAUPDATE = 5;
export const KSMETHOD_BDA_CAS_CHECKENTITLEMENTTOKEN = 0;
export const KSMETHOD_BDA_CAS_SETCAPTURETOKEN = 1;
export const KSMETHOD_BDA_CAS_OPENBROADCASTMMI = 2;
export const KSMETHOD_BDA_CAS_CLOSEMMIDIALOG = 3;
export const KSMETHOD_BDA_ISDBCAS_SETREQUEST = 0;
export const KSMETHOD_BDA_ISDBCAS_RESPONSEDATA = 1;
export const KSMETHOD_BDA_TS_SELECTOR_SETTSID = 0;
export const KSMETHOD_BDA_TS_SELECTOR_GETTSINFORMATION = 1;
export const KSMETHOD_BDA_USERACTIVITY_USEREASON = 0;
export const KSMETHOD_BDA_USERACTIVITY_INTERVAL = 1;
export const KSMETHOD_BDA_USERACTIVITY_DETECTED = 2;
export const USER_INPUT_DEFAULT = 0;
export const USER_INPUT_PATH_ELEMENT = 1;
export const PHOTOACQUIRE_ERROR_SKIPRETRYCANCEL = 0;
export const PHOTOACQUIRE_ERROR_RETRYCANCEL = 1;
export const PHOTOACQUIRE_ERROR_YESNO = 2;
export const PHOTOACQUIRE_ERROR_OK = 3;
export const PHOTOACQUIRE_RESULT_YES = 0;
export const PHOTOACQUIRE_RESULT_NO = 1;
export const PHOTOACQUIRE_RESULT_OK = 2;
export const PHOTOACQUIRE_RESULT_SKIP = 3;
export const PHOTOACQUIRE_RESULT_SKIP_ALL = 4;
export const PHOTOACQUIRE_RESULT_RETRY = 5;
export const PHOTOACQUIRE_RESULT_ABORT = 6;
export const PROGRESS_DIALOG_ICON_SMALL = 0;
export const PROGRESS_DIALOG_ICON_LARGE = 1;
export const PROGRESS_DIALOG_ICON_THUMBNAIL = 2;
export const PROGRESS_DIALOG_BITMAP_THUMBNAIL = 3;
export const PROGRESS_DIALOG_CHECKBOX_ID_DEFAULT = 0;
export const DST_UNKNOWN_DEVICE = 0;
export const DST_WPD_DEVICE = 1;
export const DST_WIA_DEVICE = 2;
export const DST_STI_DEVICE = 3;
export const DSF_TWAIN_DEVICE = 4;
export const DST_FS_DEVICE = 5;
export const DST_DV_DEVICE = 6;
export const SPDKL_DefaultLocation = 0;
export const SPDKL_CurrentUser = 1;
export const SPDKL_LocalMachine = 2;
export const SPDKL_CurrentConfig = 5;
export const SPSF_Default = "-1";
export const SPSF_NoAssignedFormat = 0;
export const SPSF_Text = 1;
export const SPSF_NonStandardFormat = 2;
export const SPSF_ExtendedAudioFormat = 3;
export const SPSF_8kHz8BitMono = 4;
export const SPSF_8kHz8BitStereo = 5;
export const SPSF_8kHz16BitMono = 6;
export const SPSF_8kHz16BitStereo = 7;
export const SPSF_11kHz8BitMono = 8;
export const SPSF_11kHz8BitStereo = 9;
export const SPSF_11kHz16BitMono = 10;
export const SPSF_11kHz16BitStereo = 11;
export const SPSF_12kHz8BitMono = 12;
export const SPSF_12kHz8BitStereo = 13;
export const SPSF_12kHz16BitMono = 14;
export const SPSF_12kHz16BitStereo = 15;
export const SPSF_16kHz8BitMono = 16;
export const SPSF_16kHz8BitStereo = 17;
export const SPSF_16kHz16BitMono = 18;
export const SPSF_16kHz16BitStereo = 19;
export const SPSF_22kHz8BitMono = 20;
export const SPSF_22kHz8BitStereo = 21;
export const SPSF_22kHz16BitMono = 22;
export const SPSF_22kHz16BitStereo = 23;
export const SPSF_24kHz8BitMono = 24;
export const SPSF_24kHz8BitStereo = 25;
export const SPSF_24kHz16BitMono = 26;
export const SPSF_24kHz16BitStereo = 27;
export const SPSF_32kHz8BitMono = 28;
export const SPSF_32kHz8BitStereo = 29;
export const SPSF_32kHz16BitMono = 30;
export const SPSF_32kHz16BitStereo = 31;
export const SPSF_44kHz8BitMono = 32;
export const SPSF_44kHz8BitStereo = 33;
export const SPSF_44kHz16BitMono = 34;
export const SPSF_44kHz16BitStereo = 35;
export const SPSF_48kHz8BitMono = 36;
export const SPSF_48kHz8BitStereo = 37;
export const SPSF_48kHz16BitMono = 38;
export const SPSF_48kHz16BitStereo = 39;
export const SPSF_TrueSpeech_8kHz1BitMono = 40;
export const SPSF_CCITT_ALaw_8kHzMono = 41;
export const SPSF_CCITT_ALaw_8kHzStereo = 42;
export const SPSF_CCITT_ALaw_11kHzMono = 43;
export const SPSF_CCITT_ALaw_11kHzStereo = 44;
export const SPSF_CCITT_ALaw_22kHzMono = 45;
export const SPSF_CCITT_ALaw_22kHzStereo = 46;
export const SPSF_CCITT_ALaw_44kHzMono = 47;
export const SPSF_CCITT_ALaw_44kHzStereo = 48;
export const SPSF_CCITT_uLaw_8kHzMono = 49;
export const SPSF_CCITT_uLaw_8kHzStereo = 50;
export const SPSF_CCITT_uLaw_11kHzMono = 51;
export const SPSF_CCITT_uLaw_11kHzStereo = 52;
export const SPSF_CCITT_uLaw_22kHzMono = 53;
export const SPSF_CCITT_uLaw_22kHzStereo = 54;
export const SPSF_CCITT_uLaw_44kHzMono = 55;
export const SPSF_CCITT_uLaw_44kHzStereo = 56;
export const SPSF_ADPCM_8kHzMono = 57;
export const SPSF_ADPCM_8kHzStereo = 58;
export const SPSF_ADPCM_11kHzMono = 59;
export const SPSF_ADPCM_11kHzStereo = 60;
export const SPSF_ADPCM_22kHzMono = 61;
export const SPSF_ADPCM_22kHzStereo = 62;
export const SPSF_ADPCM_44kHzMono = 63;
export const SPSF_ADPCM_44kHzStereo = 64;
export const SPSF_GSM610_8kHzMono = 65;
export const SPSF_GSM610_11kHzMono = 66;
export const SPSF_GSM610_22kHzMono = 67;
export const SPSF_GSM610_44kHzMono = 68;
export const SPSF_NUM_FORMATS = 69;
export const SPET_LPARAM_IS_UNDEFINED = 0;
export const SPET_LPARAM_IS_TOKEN = 1;
export const SPET_LPARAM_IS_OBJECT = 2;
export const SPET_LPARAM_IS_POINTER = 3;
export const SPET_LPARAM_IS_STRING = 4;
export const SPEI_UNDEFINED = 0;
export const SPEI_START_INPUT_STREAM = 1;
export const SPEI_END_INPUT_STREAM = 2;
export const SPEI_VOICE_CHANGE = 3;
export const SPEI_TTS_BOOKMARK = 4;
export const SPEI_WORD_BOUNDARY = 5;
export const SPEI_PHONEME = 6;
export const SPEI_SENTENCE_BOUNDARY = 7;
export const SPEI_VISEME = 8;
export const SPEI_TTS_AUDIO_LEVEL = 9;
export const SPEI_TTS_PRIVATE = 15;
export const SPEI_MIN_TTS = 1;
export const SPEI_MAX_TTS = 15;
export const SPEI_END_SR_STREAM = 34;
export const SPEI_SOUND_START = 35;
export const SPEI_SOUND_END = 36;
export const SPEI_PHRASE_START = 37;
export const SPEI_RECOGNITION = 38;
export const SPEI_HYPOTHESIS = 39;
export const SPEI_SR_BOOKMARK = 40;
export const SPEI_PROPERTY_NUM_CHANGE = 41;
export const SPEI_PROPERTY_STRING_CHANGE = 42;
export const SPEI_FALSE_RECOGNITION = 43;
export const SPEI_INTERFERENCE = 44;
export const SPEI_REQUEST_UI = 45;
export const SPEI_RECO_STATE_CHANGE = 46;
export const SPEI_ADAPTATION = 47;
export const SPEI_START_SR_STREAM = 48;
export const SPEI_RECO_OTHER_CONTEXT = 49;
export const SPEI_SR_AUDIO_LEVEL = 50;
export const SPEI_SR_RETAINEDAUDIO = 51;
export const SPEI_SR_PRIVATE = 52;
export const SPEI_RESERVED4 = 53;
export const SPEI_RESERVED5 = 54;
export const SPEI_RESERVED6 = 55;
export const SPEI_MIN_SR = 34;
export const SPEI_MAX_SR = 55;
export const SPEI_RESERVED1 = 30;
export const SPEI_RESERVED2 = 33;
export const SPEI_RESERVED3 = 63;
export const SPINTERFERENCE_NONE = 0;
export const SPINTERFERENCE_NOISE = 1;
export const SPINTERFERENCE_NOSIGNAL = 2;
export const SPINTERFERENCE_TOOLOUD = 3;
export const SPINTERFERENCE_TOOQUIET = 4;
export const SPINTERFERENCE_TOOFAST = 5;
export const SPINTERFERENCE_TOOSLOW = 6;
export const SPINTERFERENCE_LATENCY_WARNING = 7;
export const SPINTERFERENCE_LATENCY_TRUNCATE_BEGIN = 8;
export const SPINTERFERENCE_LATENCY_TRUNCATE_END = 9;
export const SPESF_NONE = 0;
export const SPESF_STREAM_RELEASED = 1;
export const SPESF_EMULATED = 2;
export const SPVFEATURE_STRESSED = 1;
export const SPVFEATURE_EMPHASIS = 2;
export const SP_VISEME_0 = 0;
export const SP_VISEME_1 = 1;
export const SP_VISEME_2 = 2;
export const SP_VISEME_3 = 3;
export const SP_VISEME_4 = 4;
export const SP_VISEME_5 = 5;
export const SP_VISEME_6 = 6;
export const SP_VISEME_7 = 7;
export const SP_VISEME_8 = 8;
export const SP_VISEME_9 = 9;
export const SP_VISEME_10 = 10;
export const SP_VISEME_11 = 11;
export const SP_VISEME_12 = 12;
export const SP_VISEME_13 = 13;
export const SP_VISEME_14 = 14;
export const SP_VISEME_15 = 15;
export const SP_VISEME_16 = 16;
export const SP_VISEME_17 = 17;
export const SP_VISEME_18 = 18;
export const SP_VISEME_19 = 19;
export const SP_VISEME_20 = 20;
export const SP_VISEME_21 = 21;
export const SPFM_OPEN_READONLY = 0;
export const SPFM_OPEN_READWRITE = 1;
export const SPFM_CREATE = 2;
export const SPFM_CREATE_ALWAYS = 3;
export const SPFM_NUM_MODES = 4;
export const SPAS_CLOSED = 0;
export const SPAS_STOP = 1;
export const SPAS_PAUSE = 2;
export const SPAS_RUN = 3;
export const SPAF_ONE_TRAILING_SPACE = 2;
export const SPAF_TWO_TRAILING_SPACES = 4;
export const SPAF_CONSUME_LEADING_SPACES = 8;
export const SPAF_BUFFER_POSITION = 16;
export const SPAF_ALL = 31;
export const SPAF_USER_SPECIFIED = 128;
export const SPPPUT_UNUSED = 0;
export const SPPPUT_ARRAY_INDEX = 1;
export const SPSMF_SAPI_PROPERTIES = 0;
export const SPSMF_SRGS_SEMANTICINTERPRETATION_MS = 1;
export const SPSMF_SRGS_SAPIPROPERTIES = 2;
export const SPSMF_UPS = 4;
export const SPSMF_SRGS_SEMANTICINTERPRETATION_W3C = 8;
export const SPDF_PROPERTY = 1;
export const SPDF_REPLACEMENT = 2;
export const SPDF_RULE = 4;
export const SPDF_DISPLAYTEXT = 8;
export const SPDF_LEXICALFORM = 16;
export const SPDF_PRONUNCIATION = 32;
export const SPDF_AUDIO = 64;
export const SPDF_ALTERNATES = 128;
export const SPDF_ALL = 255;
export const SPPR_ALL_ELEMENTS = "-1";
export const SPREF_AutoPause = 1;
export const SPREF_Emulated = 2;
export const SPREF_SMLTimeout = 4;
export const SPREF_ExtendableParse = 8;
export const SPREF_ReSent = 16;
export const SPREF_Hypothesis = 32;
export const SPREF_FalseRecognition = 64;
export const SPPS_NotOverriden = "-1";
export const SPPS_Unknown = 0;
export const SPPS_Noun = 4096;
export const SPPS_Verb = 8192;
export const SPPS_Modifier = 12288;
export const SPPS_Function = 16384;
export const SPPS_Interjection = 20480;
export const SPPS_Noncontent = 24576;
export const SPPS_LMA = 28672;
export const SPPS_SuppressWord = 61440;
export const eLEXTYPE_USER = 1;
export const eLEXTYPE_APP = 2;
export const eLEXTYPE_VENDORLEXICON = 4;
export const eLEXTYPE_LETTERTOSOUND = 8;
export const eLEXTYPE_MORPHOLOGY = 16;
export const eLEXTYPE_RESERVED4 = 32;
export const eLEXTYPE_USER_SHORTCUT = 64;
export const eLEXTYPE_RESERVED6 = 128;
export const eLEXTYPE_RESERVED7 = 256;
export const eLEXTYPE_RESERVED8 = 512;
export const eLEXTYPE_RESERVED9 = 1024;
export const eLEXTYPE_RESERVED10 = 2048;
export const eLEXTYPE_PRIVATE1 = 4096;
export const eLEXTYPE_PRIVATE2 = 8192;
export const eLEXTYPE_PRIVATE3 = 16384;
export const eLEXTYPE_PRIVATE4 = 32768;
export const eLEXTYPE_PRIVATE5 = 65536;
export const eLEXTYPE_PRIVATE6 = 131072;
export const eLEXTYPE_PRIVATE7 = 262144;
export const eLEXTYPE_PRIVATE8 = 524288;
export const eLEXTYPE_PRIVATE9 = 1048576;
export const eLEXTYPE_PRIVATE10 = 2097152;
export const eLEXTYPE_PRIVATE11 = 4194304;
export const eLEXTYPE_PRIVATE12 = 8388608;
export const eLEXTYPE_PRIVATE13 = 16777216;
export const eLEXTYPE_PRIVATE14 = 33554432;
export const eLEXTYPE_PRIVATE15 = 67108864;
export const eLEXTYPE_PRIVATE16 = 134217728;
export const eLEXTYPE_PRIVATE17 = 268435456;
export const eLEXTYPE_PRIVATE18 = 536870912;
export const eLEXTYPE_PRIVATE19 = 1073741824;
export const eLEXTYPE_PRIVATE20 = "-2147483648";
export const eWORDTYPE_ADDED = 1;
export const eWORDTYPE_DELETED = 2;
export const ePRONFLAG_USED = 1;
export const SPSHT_NotOverriden = "-1";
export const SPSHT_Unknown = 0;
export const SPSHT_EMAIL = 4096;
export const SPSHT_OTHER = 8192;
export const SPPS_RESERVED1 = 12288;
export const SPPS_RESERVED2 = 16384;
export const SPPS_RESERVED3 = 20480;
export const SPPS_RESERVED4 = 61440;
export const SPVA_Speak = 0;
export const SPVA_Silence = 1;
export const SPVA_Pronounce = 2;
export const SPVA_Bookmark = 3;
export const SPVA_SpellOut = 4;
export const SPVA_Section = 5;
export const SPVA_ParseUnknownTag = 6;
export const SPRS_DONE = 1;
export const SPRS_IS_SPEAKING = 2;
export const SPMIN_VOLUME = 0;
export const SPMAX_VOLUME = 100;
export const SPMIN_RATE = "-10";
export const SPMAX_RATE = 10;
export const SPVPRI_NORMAL = 0;
export const SPVPRI_ALERT = 1;
export const SPVPRI_OVER = 2;
export const SPF_DEFAULT = 0;
export const SPF_ASYNC = 1;
export const SPF_PURGEBEFORESPEAK = 2;
export const SPF_IS_FILENAME = 4;
export const SPF_IS_XML = 8;
export const SPF_IS_NOT_XML = 16;
export const SPF_PERSIST_XML = 32;
export const SPF_NLP_SPEAK_PUNC = 64;
export const SPF_PARSE_SAPI = 128;
export const SPF_PARSE_SSML = 256;
export const SPF_PARSE_AUTODETECT = 0;
export const SPF_NLP_MASK = 64;
export const SPF_PARSE_MASK = 384;
export const SPF_VOICE_MASK = 511;
export const SPF_UNUSED_FLAGS = "-512";
export const SPXRO_SML = 0;
export const SPXRO_Alternates_SML = 1;
export const SPCF_NONE = 0;
export const SPCF_ADD_TO_USER_LEXICON = 1;
export const SPCF_DEFINITE_CORRECTION = 2;
export const SPWP_UNKNOWN_WORD_UNPRONOUNCEABLE = 0;
export const SPWP_UNKNOWN_WORD_PRONOUNCEABLE = 1;
export const SPWP_KNOWN_WORD_PRONOUNCEABLE = 2;
export const SPGS_DISABLED = 0;
export const SPGS_ENABLED = 1;
export const SPGS_EXCLUSIVE = 3;
export const SPCS_DISABLED = 0;
export const SPCS_ENABLED = 1;
export const SPRS_INACTIVE = 0;
export const SPRS_ACTIVE = 1;
export const SPRS_ACTIVE_WITH_AUTO_PAUSE = 3;
export const SPRS_ACTIVE_USER_DELIMITED = 4;
export const SPWT_DISPLAY = 0;
export const SPWT_LEXICAL = 1;
export const SPWT_PRONUNCIATION = 2;
export const SPWT_LEXICAL_NO_SPECIAL_CHARS = 3;
export const SPRAF_TopLevel = 1;
export const SPRAF_Active = 2;
export const SPRAF_Export = 4;
export const SPRAF_Import = 8;
export const SPRAF_Interpreter = 16;
export const SPRAF_Dynamic = 32;
export const SPRAF_Root = 64;
export const SPRAF_AutoPause = 65536;
export const SPRAF_UserDelimited = 131072;
export const SPLO_STATIC = 0;
export const SPLO_DYNAMIC = 1;
export const AllWords = 0;
export const Subsequence = 1;
export const OrderedSubset = 3;
export const SubsequenceContentRequired = 5;
export const OrderedSubsetContentRequired = 7;
export const PA_Ipa = 0;
export const PA_Ups = 1;
export const PA_Sapi = 2;
export const SPBO_NONE = 0;
export const SPBO_PAUSE = 1;
export const SPBO_AHEAD = 2;
export const SPBO_TIME_UNITS = 4;
export const SPAO_NONE = 0;
export const SPAO_RETAIN_AUDIO = 1;
export const SPGO_SAPI = 1;
export const SPGO_SRGS = 2;
export const SPGO_UPS = 4;
export const SPGO_SRGS_MS_SCRIPT = 8;
export const SPGO_SRGS_W3C_SCRIPT = 256;
export const SPGO_SRGS_STG_SCRIPT = 512;
export const SPGO_SRGS_SCRIPT = 778;
export const SPGO_FILE = 16;
export const SPGO_HTTP = 32;
export const SPGO_RES = 64;
export const SPGO_OBJECT = 128;
export const SPGO_DEFAULT = 1019;
export const SPGO_ALL = 1023;
export const SPADS_Default = 0;
export const SPADS_CurrentRecognizer = 1;
export const SPADS_RecoProfile = 2;
export const SPADS_Immediate = 4;
export const SPADS_Reset = 8;
export const SPADS_HighVolumeDataSource = 16;
export const SPAR_Unknown = 0;
export const SPAR_Low = 1;
export const SPAR_Medium = 2;
export const SPAR_High = 3;
export const SPWF_INPUT = 0;
export const SPWF_SRENGINE = 1;
export const SPRST_INACTIVE = 0;
export const SPRST_ACTIVE = 1;
export const SPRST_ACTIVE_ALWAYS = 2;
export const SPRST_INACTIVE_WITH_PURGE = 3;
export const SPRST_NUM_STATES = 4;
export const DISPID_SDKSetBinaryValue = 1;
export const DISPID_SDKGetBinaryValue = 2;
export const DISPID_SDKSetStringValue = 3;
export const DISPID_SDKGetStringValue = 4;
export const DISPID_SDKSetLongValue = 5;
export const DISPID_SDKGetlongValue = 6;
export const DISPID_SDKOpenKey = 7;
export const DISPID_SDKCreateKey = 8;
export const DISPID_SDKDeleteKey = 9;
export const DISPID_SDKDeleteValue = 10;
export const DISPID_SDKEnumKeys = 11;
export const DISPID_SDKEnumValues = 12;
export const DISPID_SOTId = 1;
export const DISPID_SOTDataKey = 2;
export const DISPID_SOTCategory = 3;
export const DISPID_SOTGetDescription = 4;
export const DISPID_SOTSetId = 5;
export const DISPID_SOTGetAttribute = 6;
export const DISPID_SOTCreateInstance = 7;
export const DISPID_SOTRemove = 8;
export const DISPID_SOTGetStorageFileName = 9;
export const DISPID_SOTRemoveStorageFileName = 10;
export const DISPID_SOTIsUISupported = 11;
export const DISPID_SOTDisplayUI = 12;
export const DISPID_SOTMatchesAttributes = 13;
export const SDKLDefaultLocation = 0;
export const SDKLCurrentUser = 1;
export const SDKLLocalMachine = 2;
export const SDKLCurrentConfig = 5;
export const STCInprocServer = 1;
export const STCInprocHandler = 2;
export const STCLocalServer = 4;
export const STCRemoteServer = 16;
export const STCAll = 23;
export const STSF_AppData = 26;
export const STSF_LocalAppData = 28;
export const STSF_CommonAppData = 35;
export const STSF_FlagCreate = 32768;
export const DISPID_SOTsCount = 1;
export const DISPID_SOTsItem = 0;
export const DISPID_SOTs_NewEnum = "-4";
export const DISPID_SOTCId = 1;
export const DISPID_SOTCDefault = 2;
export const DISPID_SOTCSetId = 3;
export const DISPID_SOTCGetDataKey = 4;
export const DISPID_SOTCEnumerateTokens = 5;
export const SAFTDefault = "-1";
export const SAFTNoAssignedFormat = 0;
export const SAFTText = 1;
export const SAFTNonStandardFormat = 2;
export const SAFTExtendedAudioFormat = 3;
export const SAFT8kHz8BitMono = 4;
export const SAFT8kHz8BitStereo = 5;
export const SAFT8kHz16BitMono = 6;
export const SAFT8kHz16BitStereo = 7;
export const SAFT11kHz8BitMono = 8;
export const SAFT11kHz8BitStereo = 9;
export const SAFT11kHz16BitMono = 10;
export const SAFT11kHz16BitStereo = 11;
export const SAFT12kHz8BitMono = 12;
export const SAFT12kHz8BitStereo = 13;
export const SAFT12kHz16BitMono = 14;
export const SAFT12kHz16BitStereo = 15;
export const SAFT16kHz8BitMono = 16;
export const SAFT16kHz8BitStereo = 17;
export const SAFT16kHz16BitMono = 18;
export const SAFT16kHz16BitStereo = 19;
export const SAFT22kHz8BitMono = 20;
export const SAFT22kHz8BitStereo = 21;
export const SAFT22kHz16BitMono = 22;
export const SAFT22kHz16BitStereo = 23;
export const SAFT24kHz8BitMono = 24;
export const SAFT24kHz8BitStereo = 25;
export const SAFT24kHz16BitMono = 26;
export const SAFT24kHz16BitStereo = 27;
export const SAFT32kHz8BitMono = 28;
export const SAFT32kHz8BitStereo = 29;
export const SAFT32kHz16BitMono = 30;
export const SAFT32kHz16BitStereo = 31;
export const SAFT44kHz8BitMono = 32;
export const SAFT44kHz8BitStereo = 33;
export const SAFT44kHz16BitMono = 34;
export const SAFT44kHz16BitStereo = 35;
export const SAFT48kHz8BitMono = 36;
export const SAFT48kHz8BitStereo = 37;
export const SAFT48kHz16BitMono = 38;
export const SAFT48kHz16BitStereo = 39;
export const SAFTTrueSpeech_8kHz1BitMono = 40;
export const SAFTCCITT_ALaw_8kHzMono = 41;
export const SAFTCCITT_ALaw_8kHzStereo = 42;
export const SAFTCCITT_ALaw_11kHzMono = 43;
export const SAFTCCITT_ALaw_11kHzStereo = 44;
export const SAFTCCITT_ALaw_22kHzMono = 45;
export const SAFTCCITT_ALaw_22kHzStereo = 46;
export const SAFTCCITT_ALaw_44kHzMono = 47;
export const SAFTCCITT_ALaw_44kHzStereo = 48;
export const SAFTCCITT_uLaw_8kHzMono = 49;
export const SAFTCCITT_uLaw_8kHzStereo = 50;
export const SAFTCCITT_uLaw_11kHzMono = 51;
export const SAFTCCITT_uLaw_11kHzStereo = 52;
export const SAFTCCITT_uLaw_22kHzMono = 53;
export const SAFTCCITT_uLaw_22kHzStereo = 54;
export const SAFTCCITT_uLaw_44kHzMono = 55;
export const SAFTCCITT_uLaw_44kHzStereo = 56;
export const SAFTADPCM_8kHzMono = 57;
export const SAFTADPCM_8kHzStereo = 58;
export const SAFTADPCM_11kHzMono = 59;
export const SAFTADPCM_11kHzStereo = 60;
export const SAFTADPCM_22kHzMono = 61;
export const SAFTADPCM_22kHzStereo = 62;
export const SAFTADPCM_44kHzMono = 63;
export const SAFTADPCM_44kHzStereo = 64;
export const SAFTGSM610_8kHzMono = 65;
export const SAFTGSM610_11kHzMono = 66;
export const SAFTGSM610_22kHzMono = 67;
export const SAFTGSM610_44kHzMono = 68;
export const DISPID_SAFType = 1;
export const DISPID_SAFGuid = 2;
export const DISPID_SAFGetWaveFormatEx = 3;
export const DISPID_SAFSetWaveFormatEx = 4;
export const DISPID_SBSFormat = 1;
export const DISPID_SBSRead = 2;
export const DISPID_SBSWrite = 3;
export const DISPID_SBSSeek = 4;
export const SSSPTRelativeToStart = 0;
export const SSSPTRelativeToCurrentPosition = 1;
export const SSSPTRelativeToEnd = 2;
export const DISPID_SAStatus = 200;
export const DISPID_SABufferInfo = 201;
export const DISPID_SADefaultFormat = 202;
export const DISPID_SAVolume = 203;
export const DISPID_SABufferNotifySize = 204;
export const DISPID_SAEventHandle = 205;
export const DISPID_SASetState = 206;
export const SASClosed = 0;
export const SASStop = 1;
export const SASPause = 2;
export const SASRun = 3;
export const DISPID_SMSADeviceId = 300;
export const DISPID_SMSALineId = 301;
export const DISPID_SMSAMMHandle = 302;
export const DISPID_SFSOpen = 100;
export const DISPID_SFSClose = 101;
export const SSFMOpenForRead = 0;
export const SSFMOpenReadWrite = 1;
export const SSFMCreate = 2;
export const SSFMCreateForWrite = 3;
export const DISPID_SCSBaseStream = 100;
export const DISPID_SMSSetData = 100;
export const DISPID_SMSGetData = 101;
export const DISPID_SASFreeBufferSpace = 1;
export const DISPID_SASNonBlockingIO = 2;
export const DISPID_SASState = 3;
export const DISPID_SASCurrentSeekPosition = 4;
export const DISPID_SASCurrentDevicePosition = 5;
export const DISPID_SABIMinNotification = 1;
export const DISPID_SABIBufferSize = 2;
export const DISPID_SABIEventBias = 3;
export const DISPID_SWFEFormatTag = 1;
export const DISPID_SWFEChannels = 2;
export const DISPID_SWFESamplesPerSec = 3;
export const DISPID_SWFEAvgBytesPerSec = 4;
export const DISPID_SWFEBlockAlign = 5;
export const DISPID_SWFEBitsPerSample = 6;
export const DISPID_SWFEExtraData = 7;
export const DISPID_SVStatus = 1;
export const DISPID_SVVoice = 2;
export const DISPID_SVAudioOutput = 3;
export const DISPID_SVAudioOutputStream = 4;
export const DISPID_SVRate = 5;
export const DISPID_SVVolume = 6;
export const DISPID_SVAllowAudioOuputFormatChangesOnNextSet = 7;
export const DISPID_SVEventInterests = 8;
export const DISPID_SVPriority = 9;
export const DISPID_SVAlertBoundary = 10;
export const DISPID_SVSyncronousSpeakTimeout = 11;
export const DISPID_SVSpeak = 12;
export const DISPID_SVSpeakStream = 13;
export const DISPID_SVPause = 14;
export const DISPID_SVResume = 15;
export const DISPID_SVSkip = 16;
export const DISPID_SVGetVoices = 17;
export const DISPID_SVGetAudioOutputs = 18;
export const DISPID_SVWaitUntilDone = 19;
export const DISPID_SVSpeakCompleteEvent = 20;
export const DISPID_SVIsUISupported = 21;
export const DISPID_SVDisplayUI = 22;
export const SVPNormal = 0;
export const SVPAlert = 1;
export const SVPOver = 2;
export const SVSFDefault = 0;
export const SVSFlagsAsync = 1;
export const SVSFPurgeBeforeSpeak = 2;
export const SVSFIsFilename = 4;
export const SVSFIsXML = 8;
export const SVSFIsNotXML = 16;
export const SVSFPersistXML = 32;
export const SVSFNLPSpeakPunc = 64;
export const SVSFParseSapi = 128;
export const SVSFParseSsml = 256;
export const SVSFParseAutodetect = 0;
export const SVSFNLPMask = 64;
export const SVSFParseMask = 384;
export const SVSFVoiceMask = 511;
export const SVSFUnusedFlags = "-512";
export const SVEStartInputStream = 2;
export const SVEEndInputStream = 4;
export const SVEVoiceChange = 8;
export const SVEBookmark = 16;
export const SVEWordBoundary = 32;
export const SVEPhoneme = 64;
export const SVESentenceBoundary = 128;
export const SVEViseme = 256;
export const SVEAudioLevel = 512;
export const SVEPrivate = 32768;
export const SVEAllEvents = 33790;
export const DISPID_SVSCurrentStreamNumber = 1;
export const DISPID_SVSLastStreamNumberQueued = 2;
export const DISPID_SVSLastResult = 3;
export const DISPID_SVSRunningState = 4;
export const DISPID_SVSInputWordPosition = 5;
export const DISPID_SVSInputWordLength = 6;
export const DISPID_SVSInputSentencePosition = 7;
export const DISPID_SVSInputSentenceLength = 8;
export const DISPID_SVSLastBookmark = 9;
export const DISPID_SVSLastBookmarkId = 10;
export const DISPID_SVSPhonemeId = 11;
export const DISPID_SVSVisemeId = 12;
export const SRSEDone = 1;
export const SRSEIsSpeaking = 2;
export const SVP_0 = 0;
export const SVP_1 = 1;
export const SVP_2 = 2;
export const SVP_3 = 3;
export const SVP_4 = 4;
export const SVP_5 = 5;
export const SVP_6 = 6;
export const SVP_7 = 7;
export const SVP_8 = 8;
export const SVP_9 = 9;
export const SVP_10 = 10;
export const SVP_11 = 11;
export const SVP_12 = 12;
export const SVP_13 = 13;
export const SVP_14 = 14;
export const SVP_15 = 15;
export const SVP_16 = 16;
export const SVP_17 = 17;
export const SVP_18 = 18;
export const SVP_19 = 19;
export const SVP_20 = 20;
export const SVP_21 = 21;
export const SVF_None = 0;
export const SVF_Stressed = 1;
export const SVF_Emphasis = 2;
export const DISPID_SVEStreamStart = 1;
export const DISPID_SVEStreamEnd = 2;
export const DISPID_SVEVoiceChange = 3;
export const DISPID_SVEBookmark = 4;
export const DISPID_SVEWord = 5;
export const DISPID_SVEPhoneme = 6;
export const DISPID_SVESentenceBoundary = 7;
export const DISPID_SVEViseme = 8;
export const DISPID_SVEAudioLevel = 9;
export const DISPID_SVEEnginePrivate = 10;
export const DISPID_SRRecognizer = 1;
export const DISPID_SRAllowAudioInputFormatChangesOnNextSet = 2;
export const DISPID_SRAudioInput = 3;
export const DISPID_SRAudioInputStream = 4;
export const DISPID_SRIsShared = 5;
export const DISPID_SRState = 6;
export const DISPID_SRStatus = 7;
export const DISPID_SRProfile = 8;
export const DISPID_SREmulateRecognition = 9;
export const DISPID_SRCreateRecoContext = 10;
export const DISPID_SRGetFormat = 11;
export const DISPID_SRSetPropertyNumber = 12;
export const DISPID_SRGetPropertyNumber = 13;
export const DISPID_SRSetPropertyString = 14;
export const DISPID_SRGetPropertyString = 15;
export const DISPID_SRIsUISupported = 16;
export const DISPID_SRDisplayUI = 17;
export const DISPID_SRGetRecognizers = 18;
export const DISPID_SVGetAudioInputs = 19;
export const DISPID_SVGetProfiles = 20;
export const SRSInactive = 0;
export const SRSActive = 1;
export const SRSActiveAlways = 2;
export const SRSInactiveWithPurge = 3;
export const SDA_No_Trailing_Space = 0;
export const SDA_One_Trailing_Space = 2;
export const SDA_Two_Trailing_Spaces = 4;
export const SDA_Consume_Leading_Spaces = 8;
export const SFTInput = 0;
export const SFTSREngine = 1;
export const SECFIgnoreCase = 1;
export const SECFIgnoreKanaType = 65536;
export const SECFIgnoreWidth = 131072;
export const SECFNoSpecialChars = 536870912;
export const SECFEmulateResult = 1073741824;
export const SECFDefault = 196609;
export const DISPID_SRSAudioStatus = 1;
export const DISPID_SRSCurrentStreamPosition = 2;
export const DISPID_SRSCurrentStreamNumber = 3;
export const DISPID_SRSNumberOfActiveRules = 4;
export const DISPID_SRSClsidEngine = 5;
export const DISPID_SRSSupportedLanguages = 6;
export const DISPID_SRCRecognizer = 1;
export const DISPID_SRCAudioInInterferenceStatus = 2;
export const DISPID_SRCRequestedUIType = 3;
export const DISPID_SRCVoice = 4;
export const DISPID_SRAllowVoiceFormatMatchingOnNextSet = 5;
export const DISPID_SRCVoicePurgeEvent = 6;
export const DISPID_SRCEventInterests = 7;
export const DISPID_SRCCmdMaxAlternates = 8;
export const DISPID_SRCState = 9;
export const DISPID_SRCRetainedAudio = 10;
export const DISPID_SRCRetainedAudioFormat = 11;
export const DISPID_SRCPause = 12;
export const DISPID_SRCResume = 13;
export const DISPID_SRCCreateGrammar = 14;
export const DISPID_SRCCreateResultFromMemory = 15;
export const DISPID_SRCBookmark = 16;
export const DISPID_SRCSetAdaptationData = 17;
export const SRAONone = 0;
export const SRAORetainAudio = 1;
export const SBONone = 0;
export const SBOPause = 1;
export const SINone = 0;
export const SINoise = 1;
export const SINoSignal = 2;
export const SITooLoud = 3;
export const SITooQuiet = 4;
export const SITooFast = 5;
export const SITooSlow = 6;
export const SREStreamEnd = 1;
export const SRESoundStart = 2;
export const SRESoundEnd = 4;
export const SREPhraseStart = 8;
export const SRERecognition = 16;
export const SREHypothesis = 32;
export const SREBookmark = 64;
export const SREPropertyNumChange = 128;
export const SREPropertyStringChange = 256;
export const SREFalseRecognition = 512;
export const SREInterference = 1024;
export const SRERequestUI = 2048;
export const SREStateChange = 4096;
export const SREAdaptation = 8192;
export const SREStreamStart = 16384;
export const SRERecoOtherContext = 32768;
export const SREAudioLevel = 65536;
export const SREPrivate = 262144;
export const SREAllEvents = 393215;
export const SRCS_Disabled = 0;
export const SRCS_Enabled = 1;
export const DISPID_SRGId = 1;
export const DISPID_SRGRecoContext = 2;
export const DISPID_SRGState = 3;
export const DISPID_SRGRules = 4;
export const DISPID_SRGReset = 5;
export const DISPID_SRGCommit = 6;
export const DISPID_SRGCmdLoadFromFile = 7;
export const DISPID_SRGCmdLoadFromObject = 8;
export const DISPID_SRGCmdLoadFromResource = 9;
export const DISPID_SRGCmdLoadFromMemory = 10;
export const DISPID_SRGCmdLoadFromProprietaryGrammar = 11;
export const DISPID_SRGCmdSetRuleState = 12;
export const DISPID_SRGCmdSetRuleIdState = 13;
export const DISPID_SRGDictationLoad = 14;
export const DISPID_SRGDictationUnload = 15;
export const DISPID_SRGDictationSetState = 16;
export const DISPID_SRGSetWordSequenceData = 17;
export const DISPID_SRGSetTextSelection = 18;
export const DISPID_SRGIsPronounceable = 19;
export const SLOStatic = 0;
export const SLODynamic = 1;
export const SWPUnknownWordUnpronounceable = 0;
export const SWPUnknownWordPronounceable = 1;
export const SWPKnownWordPronounceable = 2;
export const SGSEnabled = 1;
export const SGSDisabled = 0;
export const SGSExclusive = 3;
export const SGDSInactive = 0;
export const SGDSActive = 1;
export const SGDSActiveWithAutoPause = 3;
export const SGDSActiveUserDelimited = 4;
export const SRATopLevel = 1;
export const SRADefaultToActive = 2;
export const SRAExport = 4;
export const SRAImport = 8;
export const SRAInterpreter = 16;
export const SRADynamic = 32;
export const SRARoot = 64;
export const SGDisplay = 0;
export const SGLexical = 1;
export const SGPronounciation = 2;
export const SGLexicalNoSpecialChars = 3;
export const DISPID_SRCEStartStream = 1;
export const DISPID_SRCEEndStream = 2;
export const DISPID_SRCEBookmark = 3;
export const DISPID_SRCESoundStart = 4;
export const DISPID_SRCESoundEnd = 5;
export const DISPID_SRCEPhraseStart = 6;
export const DISPID_SRCERecognition = 7;
export const DISPID_SRCEHypothesis = 8;
export const DISPID_SRCEPropertyNumberChange = 9;
export const DISPID_SRCEPropertyStringChange = 10;
export const DISPID_SRCEFalseRecognition = 11;
export const DISPID_SRCEInterference = 12;
export const DISPID_SRCERequestUI = 13;
export const DISPID_SRCERecognizerStateChange = 14;
export const DISPID_SRCEAdaptation = 15;
export const DISPID_SRCERecognitionForOtherContext = 16;
export const DISPID_SRCEAudioLevel = 17;
export const DISPID_SRCEEnginePrivate = 18;
export const SRTStandard = 0;
export const SRTAutopause = 1;
export const SRTEmulated = 2;
export const SRTSMLTimeout = 4;
export const SRTExtendableParse = 8;
export const SRTReSent = 16;
export const DISPID_SGRAttributes = 1;
export const DISPID_SGRInitialState = 2;
export const DISPID_SGRName = 3;
export const DISPID_SGRId = 4;
export const DISPID_SGRClear = 5;
export const DISPID_SGRAddResource = 6;
export const DISPID_SGRAddState = 7;
export const DISPID_SGRsCount = 1;
export const DISPID_SGRsDynamic = 2;
export const DISPID_SGRsAdd = 3;
export const DISPID_SGRsCommit = 4;
export const DISPID_SGRsCommitAndSave = 5;
export const DISPID_SGRsFindRule = 6;
export const DISPID_SGRsItem = 0;
export const DISPID_SGRs_NewEnum = "-4";
export const DISPID_SGRSRule = 1;
export const DISPID_SGRSTransitions = 2;
export const DISPID_SGRSAddWordTransition = 3;
export const DISPID_SGRSAddRuleTransition = 4;
export const DISPID_SGRSAddSpecialTransition = 5;
export const SSTTWildcard = 1;
export const SSTTDictation = 2;
export const SSTTTextBuffer = 3;
export const DISPID_SGRSTsCount = 1;
export const DISPID_SGRSTsItem = 0;
export const DISPID_SGRSTs_NewEnum = "-4";
export const DISPID_SGRSTType = 1;
export const DISPID_SGRSTText = 2;
export const DISPID_SGRSTRule = 3;
export const DISPID_SGRSTWeight = 4;
export const DISPID_SGRSTPropertyName = 5;
export const DISPID_SGRSTPropertyId = 6;
export const DISPID_SGRSTPropertyValue = 7;
export const DISPID_SGRSTNextState = 8;
export const SGRSTTEpsilon = 0;
export const SGRSTTWord = 1;
export const SGRSTTRule = 2;
export const SGRSTTDictation = 3;
export const SGRSTTWildcard = 4;
export const SGRSTTTextBuffer = 5;
export const DISPIDSPTSI_ActiveOffset = 1;
export const DISPIDSPTSI_ActiveLength = 2;
export const DISPIDSPTSI_SelectionOffset = 3;
export const DISPIDSPTSI_SelectionLength = 4;
export const DISPID_SRRRecoContext = 1;
export const DISPID_SRRTimes = 2;
export const DISPID_SRRAudioFormat = 3;
export const DISPID_SRRPhraseInfo = 4;
export const DISPID_SRRAlternates = 5;
export const DISPID_SRRAudio = 6;
export const DISPID_SRRSpeakAudio = 7;
export const DISPID_SRRSaveToMemory = 8;
export const DISPID_SRRDiscardResultInfo = 9;
export const SDTProperty = 1;
export const SDTReplacement = 2;
export const SDTRule = 4;
export const SDTDisplayText = 8;
export const SDTLexicalForm = 16;
export const SDTPronunciation = 32;
export const SDTAudio = 64;
export const SDTAlternates = 128;
export const SDTAll = 255;
export const DISPID_SRRGetXMLResult = 10;
export const DISPID_SRRGetXMLErrorInfo = 11;
export const DISPID_SRRSetTextFeedback = 12;
export const DISPID_SPPBRestorePhraseFromMemory = 1;
export const DISPID_SRRTStreamTime = 1;
export const DISPID_SRRTLength = 2;
export const DISPID_SRRTTickCount = 3;
export const DISPID_SRRTOffsetFromStart = 4;
export const DISPID_SPARecoResult = 1;
export const DISPID_SPAStartElementInResult = 2;
export const DISPID_SPANumberOfElementsInResult = 3;
export const DISPID_SPAPhraseInfo = 4;
export const DISPID_SPACommit = 5;
export const DISPID_SPAsCount = 1;
export const DISPID_SPAsItem = 0;
export const DISPID_SPAs_NewEnum = "-4";
export const DISPID_SPILanguageId = 1;
export const DISPID_SPIGrammarId = 2;
export const DISPID_SPIStartTime = 3;
export const DISPID_SPIAudioStreamPosition = 4;
export const DISPID_SPIAudioSizeBytes = 5;
export const DISPID_SPIRetainedSizeBytes = 6;
export const DISPID_SPIAudioSizeTime = 7;
export const DISPID_SPIRule = 8;
export const DISPID_SPIProperties = 9;
export const DISPID_SPIElements = 10;
export const DISPID_SPIReplacements = 11;
export const DISPID_SPIEngineId = 12;
export const DISPID_SPIEnginePrivateData = 13;
export const DISPID_SPISaveToMemory = 14;
export const DISPID_SPIGetText = 15;
export const DISPID_SPIGetDisplayAttributes = 16;
export const DISPID_SPEAudioTimeOffset = 1;
export const DISPID_SPEAudioSizeTime = 2;
export const DISPID_SPEAudioStreamOffset = 3;
export const DISPID_SPEAudioSizeBytes = 4;
export const DISPID_SPERetainedStreamOffset = 5;
export const DISPID_SPERetainedSizeBytes = 6;
export const DISPID_SPEDisplayText = 7;
export const DISPID_SPELexicalForm = 8;
export const DISPID_SPEPronunciation = 9;
export const DISPID_SPEDisplayAttributes = 10;
export const DISPID_SPERequiredConfidence = 11;
export const DISPID_SPEActualConfidence = 12;
export const DISPID_SPEEngineConfidence = 13;
export const SECLowConfidence = "-1";
export const SECNormalConfidence = 0;
export const SECHighConfidence = 1;
export const DISPID_SPEsCount = 1;
export const DISPID_SPEsItem = 0;
export const DISPID_SPEs_NewEnum = "-4";
export const DISPID_SPRDisplayAttributes = 1;
export const DISPID_SPRText = 2;
export const DISPID_SPRFirstElement = 3;
export const DISPID_SPRNumberOfElements = 4;
export const DISPID_SPRsCount = 1;
export const DISPID_SPRsItem = 0;
export const DISPID_SPRs_NewEnum = "-4";
export const DISPID_SPPName = 1;
export const DISPID_SPPId = 2;
export const DISPID_SPPValue = 3;
export const DISPID_SPPFirstElement = 4;
export const DISPID_SPPNumberOfElements = 5;
export const DISPID_SPPEngineConfidence = 6;
export const DISPID_SPPConfidence = 7;
export const DISPID_SPPParent = 8;
export const DISPID_SPPChildren = 9;
export const DISPID_SPPsCount = 1;
export const DISPID_SPPsItem = 0;
export const DISPID_SPPs_NewEnum = "-4";
export const DISPID_SPRuleName = 1;
export const DISPID_SPRuleId = 2;
export const DISPID_SPRuleFirstElement = 3;
export const DISPID_SPRuleNumberOfElements = 4;
export const DISPID_SPRuleParent = 5;
export const DISPID_SPRuleChildren = 6;
export const DISPID_SPRuleConfidence = 7;
export const DISPID_SPRuleEngineConfidence = 8;
export const DISPID_SPRulesCount = 1;
export const DISPID_SPRulesItem = 0;
export const DISPID_SPRules_NewEnum = "-4";
export const DISPID_SLGenerationId = 1;
export const DISPID_SLGetWords = 2;
export const DISPID_SLAddPronunciation = 3;
export const DISPID_SLAddPronunciationByPhoneIds = 4;
export const DISPID_SLRemovePronunciation = 5;
export const DISPID_SLRemovePronunciationByPhoneIds = 6;
export const DISPID_SLGetPronunciations = 7;
export const DISPID_SLGetGenerationChange = 8;
export const SLTUser = 1;
export const SLTApp = 2;
export const SPSNotOverriden = "-1";
export const SPSUnknown = 0;
export const SPSNoun = 4096;
export const SPSVerb = 8192;
export const SPSModifier = 12288;
export const SPSFunction = 16384;
export const SPSInterjection = 20480;
export const SPSLMA = 28672;
export const SPSSuppressWord = 61440;
export const DISPID_SLWsCount = 1;
export const DISPID_SLWsItem = 0;
export const DISPID_SLWs_NewEnum = "-4";
export const SWTAdded = 1;
export const SWTDeleted = 2;
export const DISPID_SLWLangId = 1;
export const DISPID_SLWType = 2;
export const DISPID_SLWWord = 3;
export const DISPID_SLWPronunciations = 4;
export const DISPID_SLPsCount = 1;
export const DISPID_SLPsItem = 0;
export const DISPID_SLPs_NewEnum = "-4";
export const DISPID_SLPType = 1;
export const DISPID_SLPLangId = 2;
export const DISPID_SLPPartOfSpeech = 3;
export const DISPID_SLPPhoneIds = 4;
export const DISPID_SLPSymbolic = 5;
export const DISPID_SPCLangId = 1;
export const DISPID_SPCPhoneToId = 2;
export const DISPID_SPCIdToPhone = 3;
export const WMDM_TYPE_DWORD = 0;
export const WMDM_TYPE_STRING = 1;
export const WMDM_TYPE_BINARY = 2;
export const WMDM_TYPE_BOOL = 3;
export const WMDM_TYPE_QWORD = 4;
export const WMDM_TYPE_WORD = 5;
export const WMDM_TYPE_GUID = 6;
export const WMDM_TYPE_DATE = 7;
export const WMDM_SESSION_NONE = 0;
export const WMDM_SESSION_TRANSFER_TO_DEVICE = 1;
export const WMDM_SESSION_TRANSFER_FROM_DEVICE = 16;
export const WMDM_SESSION_DELETE = 256;
export const WMDM_SESSION_CUSTOM = 4096;
export const ENUM_MODE_RAW = 0;
export const ENUM_MODE_USE_DEVICE_PREF = 1;
export const ENUM_MODE_METADATA_VIEWS = 2;
export const WMDM_FORMATCODE_NOTUSED = 0;
export const WMDM_FORMATCODE_ALLIMAGES = "-1";
export const WMDM_FORMATCODE_UNDEFINED = 12288;
export const WMDM_FORMATCODE_ASSOCIATION = 12289;
export const WMDM_FORMATCODE_SCRIPT = 12290;
export const WMDM_FORMATCODE_EXECUTABLE = 12291;
export const WMDM_FORMATCODE_TEXT = 12292;
export const WMDM_FORMATCODE_HTML = 12293;
export const WMDM_FORMATCODE_DPOF = 12294;
export const WMDM_FORMATCODE_AIFF = 12295;
export const WMDM_FORMATCODE_WAVE = 12296;
export const WMDM_FORMATCODE_MP3 = 12297;
export const WMDM_FORMATCODE_AVI = 12298;
export const WMDM_FORMATCODE_MPEG = 12299;
export const WMDM_FORMATCODE_ASF = 12300;
export const WMDM_FORMATCODE_RESERVED_FIRST = 12301;
export const WMDM_FORMATCODE_RESERVED_LAST = 14335;
export const WMDM_FORMATCODE_IMAGE_UNDEFINED = 14336;
export const WMDM_FORMATCODE_IMAGE_EXIF = 14337;
export const WMDM_FORMATCODE_IMAGE_TIFFEP = 14338;
export const WMDM_FORMATCODE_IMAGE_FLASHPIX = 14339;
export const WMDM_FORMATCODE_IMAGE_BMP = 14340;
export const WMDM_FORMATCODE_IMAGE_CIFF = 14341;
export const WMDM_FORMATCODE_IMAGE_GIF = 14343;
export const WMDM_FORMATCODE_IMAGE_JFIF = 14344;
export const WMDM_FORMATCODE_IMAGE_PCD = 14345;
export const WMDM_FORMATCODE_IMAGE_PICT = 14346;
export const WMDM_FORMATCODE_IMAGE_PNG = 14347;
export const WMDM_FORMATCODE_IMAGE_TIFF = 14349;
export const WMDM_FORMATCODE_IMAGE_TIFFIT = 14350;
export const WMDM_FORMATCODE_IMAGE_JP2 = 14351;
export const WMDM_FORMATCODE_IMAGE_JPX = 14352;
export const WMDM_FORMATCODE_IMAGE_RESERVED_FIRST = 14353;
export const WMDM_FORMATCODE_IMAGE_RESERVED_LAST = 16383;
export const WMDM_FORMATCODE_UNDEFINEDFIRMWARE = 47106;
export const WMDM_FORMATCODE_WBMP = 47107;
export const WMDM_FORMATCODE_JPEGXR = 47108;
export const WMDM_FORMATCODE_WINDOWSIMAGEFORMAT = 47233;
export const WMDM_FORMATCODE_UNDEFINEDAUDIO = 47360;
export const WMDM_FORMATCODE_WMA = 47361;
export const WMDM_FORMATCODE_OGG = 47362;
export const WMDM_FORMATCODE_AAC = 47363;
export const WMDM_FORMATCODE_AUDIBLE = 47364;
export const WMDM_FORMATCODE_FLAC = 47366;
export const WMDM_FORMATCODE_QCELP = 47367;
export const WMDM_FORMATCODE_AMR = 47368;
export const WMDM_FORMATCODE_UNDEFINEDVIDEO = 47488;
export const WMDM_FORMATCODE_WMV = 47489;
export const WMDM_FORMATCODE_MP4 = 47490;
export const WMDM_FORMATCODE_MP2 = 47491;
export const WMDM_FORMATCODE_3GP = 47492;
export const WMDM_FORMATCODE_3G2 = 47493;
export const WMDM_FORMATCODE_AVCHD = 47494;
export const WMDM_FORMATCODE_ATSCTS = 47495;
export const WMDM_FORMATCODE_DVBTS = 47496;
export const WMDM_FORMATCODE_MKV = 47497;
export const WMDM_FORMATCODE_MKA = 47498;
export const WMDM_FORMATCODE_MK3D = 47499;
export const WMDM_FORMATCODE_UNDEFINEDCOLLECTION = 47616;
export const WMDM_FORMATCODE_ABSTRACTMULTIMEDIAALBUM = 47617;
export const WMDM_FORMATCODE_ABSTRACTIMAGEALBUM = 47618;
export const WMDM_FORMATCODE_ABSTRACTAUDIOALBUM = 47619;
export const WMDM_FORMATCODE_ABSTRACTVIDEOALBUM = 47620;
export const WMDM_FORMATCODE_ABSTRACTAUDIOVIDEOPLAYLIST = 47621;
export const WMDM_FORMATCODE_ABSTRACTCONTACTGROUP = 47622;
export const WMDM_FORMATCODE_ABSTRACTMESSAGEFOLDER = 47623;
export const WMDM_FORMATCODE_ABSTRACTCHAPTEREDPRODUCTION = 47624;
export const WMDM_FORMATCODE_MEDIA_CAST = 47627;
export const WMDM_FORMATCODE_WPLPLAYLIST = 47632;
export const WMDM_FORMATCODE_M3UPLAYLIST = 47633;
export const WMDM_FORMATCODE_MPLPLAYLIST = 47634;
export const WMDM_FORMATCODE_ASXPLAYLIST = 47635;
export const WMDM_FORMATCODE_PLSPLAYLIST = 47636;
export const WMDM_FORMATCODE_UNDEFINEDDOCUMENT = 47744;
export const WMDM_FORMATCODE_ABSTRACTDOCUMENT = 47745;
export const WMDM_FORMATCODE_XMLDOCUMENT = 47746;
export const WMDM_FORMATCODE_MICROSOFTWORDDOCUMENT = 47747;
export const WMDM_FORMATCODE_MHTCOMPILEDHTMLDOCUMENT = 47748;
export const WMDM_FORMATCODE_MICROSOFTEXCELSPREADSHEET = 47749;
export const WMDM_FORMATCODE_MICROSOFTPOWERPOINTDOCUMENT = 47750;
export const WMDM_FORMATCODE_UNDEFINEDMESSAGE = 47872;
export const WMDM_FORMATCODE_ABSTRACTMESSAGE = 47873;
export const WMDM_FORMATCODE_UNDEFINEDCONTACT = 48000;
export const WMDM_FORMATCODE_ABSTRACTCONTACT = 48001;
export const WMDM_FORMATCODE_VCARD2 = 48002;
export const WMDM_FORMATCODE_VCARD3 = 48003;
export const WMDM_FORMATCODE_UNDEFINEDCALENDARITEM = 48640;
export const WMDM_FORMATCODE_ABSTRACTCALENDARITEM = 48641;
export const WMDM_FORMATCODE_VCALENDAR1 = 48642;
export const WMDM_FORMATCODE_VCALENDAR2 = 48643;
export const WMDM_FORMATCODE_UNDEFINEDWINDOWSEXECUTABLE = 48768;
export const WMDM_FORMATCODE_M4A = 1297101889;
export const WMDM_FORMATCODE_3GPA = 860311617;
export const WMDM_FORMATCODE_3G2A = 860303937;
export const WMDM_FORMATCODE_SECTION = 48770;
export const WMDM_ENUM_PROP_VALID_VALUES_ANY = 0;
export const WMDM_ENUM_PROP_VALID_VALUES_RANGE = 1;
export const WMDM_ENUM_PROP_VALID_VALUES_ENUM = 2;
export const WMDM_FIND_SCOPE_GLOBAL = 0;
export const WMDM_FIND_SCOPE_IMMEDIATE_CHILDREN = 1;
export const WMDM_MSG_DEVICE_ARRIVAL = 0;
export const WMDM_MSG_DEVICE_REMOVAL = 1;
export const WMDM_MSG_MEDIA_ARRIVAL = 2;
export const WMDM_MSG_MEDIA_REMOVAL = 3;
export const WEBSTREAM_SAMPLE_TYPE_FILE = 1;
export const WEBSTREAM_SAMPLE_TYPE_RENDER = 2;
export const WM_SF_CLEANPOINT = 1;
export const WM_SF_DISCONTINUITY = 2;
export const WM_SF_DATALOSS = 4;
export const WM_SFEX_NOTASYNCPOINT = 2;
export const WM_SFEX_DATALOSS = 4;
export const WMT_ERROR = 0;
export const WMT_OPENED = 1;
export const WMT_BUFFERING_START = 2;
export const WMT_BUFFERING_STOP = 3;
export const WMT_EOF = 4;
export const WMT_END_OF_FILE = 4;
export const WMT_END_OF_SEGMENT = 5;
export const WMT_END_OF_STREAMING = 6;
export const WMT_LOCATING = 7;
export const WMT_CONNECTING = 8;
export const WMT_NO_RIGHTS = 9;
export const WMT_MISSING_CODEC = 10;
export const WMT_STARTED = 11;
export const WMT_STOPPED = 12;
export const WMT_CLOSED = 13;
export const WMT_STRIDING = 14;
export const WMT_TIMER = 15;
export const WMT_INDEX_PROGRESS = 16;
export const WMT_SAVEAS_START = 17;
export const WMT_SAVEAS_STOP = 18;
export const WMT_NEW_SOURCEFLAGS = 19;
export const WMT_NEW_METADATA = 20;
export const WMT_BACKUPRESTORE_BEGIN = 21;
export const WMT_SOURCE_SWITCH = 22;
export const WMT_ACQUIRE_LICENSE = 23;
export const WMT_INDIVIDUALIZE = 24;
export const WMT_NEEDS_INDIVIDUALIZATION = 25;
export const WMT_NO_RIGHTS_EX = 26;
export const WMT_BACKUPRESTORE_END = 27;
export const WMT_BACKUPRESTORE_CONNECTING = 28;
export const WMT_BACKUPRESTORE_DISCONNECTING = 29;
export const WMT_ERROR_WITHURL = 30;
export const WMT_RESTRICTED_LICENSE = 31;
export const WMT_CLIENT_CONNECT = 32;
export const WMT_CLIENT_DISCONNECT = 33;
export const WMT_NATIVE_OUTPUT_PROPS_CHANGED = 34;
export const WMT_RECONNECT_START = 35;
export const WMT_RECONNECT_END = 36;
export const WMT_CLIENT_CONNECT_EX = 37;
export const WMT_CLIENT_DISCONNECT_EX = 38;
export const WMT_SET_FEC_SPAN = 39;
export const WMT_PREROLL_READY = 40;
export const WMT_PREROLL_COMPLETE = 41;
export const WMT_CLIENT_PROPERTIES = 42;
export const WMT_LICENSEURL_SIGNATURE_STATE = 43;
export const WMT_INIT_PLAYLIST_BURN = 44;
export const WMT_TRANSCRYPTOR_INIT = 45;
export const WMT_TRANSCRYPTOR_SEEKED = 46;
export const WMT_TRANSCRYPTOR_READ = 47;
export const WMT_TRANSCRYPTOR_CLOSED = 48;
export const WMT_PROXIMITY_RESULT = 49;
export const WMT_PROXIMITY_COMPLETED = 50;
export const WMT_CONTENT_ENABLER = 51;
export const WMT_OFF = 0;
export const WMT_CLEANPOINT_ONLY = 1;
export const WMT_ON = 2;
export const WMT_IT_NONE = 0;
export const WMT_IT_BITMAP = 1;
export const WMT_IT_JPEG = 2;
export const WMT_IT_GIF = 3;
export const WMT_TYPE_DWORD = 0;
export const WMT_TYPE_STRING = 1;
export const WMT_TYPE_BINARY = 2;
export const WMT_TYPE_BOOL = 3;
export const WMT_TYPE_QWORD = 4;
export const WMT_TYPE_WORD = 5;
export const WMT_TYPE_GUID = 6;
export const WMT_IMAGETYPE_BITMAP = 1;
export const WMT_IMAGETYPE_JPEG = 2;
export const WMT_IMAGETYPE_GIF = 3;
export const WMT_VER_4_0 = 262144;
export const WMT_VER_7_0 = 458752;
export const WMT_VER_8_0 = 524288;
export const WMT_VER_9_0 = 589824;
export const WMT_Storage_Format_MP3 = 0;
export const WMT_Storage_Format_V1 = 1;
export const WMT_DRMLA_UNTRUSTED = 0;
export const WMT_DRMLA_TRUSTED = 1;
export const WMT_DRMLA_TAMPERED = 2;
export const WMT_Transport_Type_Unreliable = 0;
export const WMT_Transport_Type_Reliable = 1;
export const WMT_PROTOCOL_HTTP = 0;
export const WMT_PLAY_MODE_AUTOSELECT = 0;
export const WMT_PLAY_MODE_LOCAL = 1;
export const WMT_PLAY_MODE_DOWNLOAD = 2;
export const WMT_PLAY_MODE_STREAMING = 3;
export const WMT_PROXY_SETTING_NONE = 0;
export const WMT_PROXY_SETTING_MANUAL = 1;
export const WMT_PROXY_SETTING_AUTO = 2;
export const WMT_PROXY_SETTING_BROWSER = 3;
export const WMT_PROXY_SETTING_MAX = 4;
export const WMT_CODECINFO_AUDIO = 0;
export const WMT_CODECINFO_VIDEO = 1;
export const WMT_CODECINFO_UNKNOWN = "-1";
export const WM_DM_NOTINTERLACED = 0;
export const WM_DM_DEINTERLACE_NORMAL = 1;
export const WM_DM_DEINTERLACE_HALFSIZE = 2;
export const WM_DM_DEINTERLACE_HALFSIZEDOUBLERATE = 3;
export const WM_DM_DEINTERLACE_INVERSETELECINE = 4;
export const WM_DM_DEINTERLACE_VERTICALHALFSIZEDOUBLERATE = 5;
export const WM_DM_IT_DISABLE_COHERENT_MODE = 0;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_AA_TOP = 1;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BB_TOP = 2;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BC_TOP = 3;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_CD_TOP = 4;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_DD_TOP = 5;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_AA_BOTTOM = 6;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BB_BOTTOM = 7;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BC_BOTTOM = 8;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_CD_BOTTOM = 9;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_DD_BOTTOM = 10;
export const WMT_OFFSET_FORMAT_100NS = 0;
export const WMT_OFFSET_FORMAT_FRAME_NUMBERS = 1;
export const WMT_OFFSET_FORMAT_PLAYLIST_OFFSET = 2;
export const WMT_OFFSET_FORMAT_TIMECODE = 3;
export const WMT_OFFSET_FORMAT_100NS_APPROXIMATE = 4;
export const WMT_IT_PRESENTATION_TIME = 0;
export const WMT_IT_FRAME_NUMBERS = 1;
export const WMT_IT_TIMECODE = 2;
export const WMT_IT_NEAREST_DATA_UNIT = 1;
export const WMT_IT_NEAREST_OBJECT = 2;
export const WMT_IT_NEAREST_CLEAN_POINT = 3;
export const WMT_FM_SINGLE_BUFFERS = 1;
export const WMT_FM_FILESINK_DATA_UNITS = 2;
export const WMT_FM_FILESINK_UNBUFFERED = 4;
export const WMT_MS_CLASS_MUSIC = 0;
export const WMT_MS_CLASS_SPEECH = 1;
export const WMT_MS_CLASS_MIXED = 2;
export const WMT_WMETYPE_AUDIO = 1;
export const WMT_WMETYPE_VIDEO = 2;
export const WM_PLAYBACK_DRC_HIGH = 0;
export const WM_PLAYBACK_DRC_MEDIUM = 1;
export const WM_PLAYBACK_DRC_LOW = 2;
export const WMT_TIMECODE_FRAMERATE_30 = 0;
export const WMT_TIMECODE_FRAMERATE_30DROP = 1;
export const WMT_TIMECODE_FRAMERATE_25 = 2;
export const WMT_TIMECODE_FRAMERATE_24 = 3;
export const WMT_CREDENTIAL_SAVE = 1;
export const WMT_CREDENTIAL_DONT_CACHE = 2;
export const WMT_CREDENTIAL_CLEAR_TEXT = 4;
export const WMT_CREDENTIAL_PROXY = 8;
export const WMT_CREDENTIAL_ENCRYPT = 16;
export const WM_AETYPE_INCLUDE = 105;
export const WM_AETYPE_EXCLUDE = 101;
export const WMT_RIGHT_PLAYBACK = 1;
export const WMT_RIGHT_COPY_TO_NON_SDMI_DEVICE = 2;
export const WMT_RIGHT_COPY_TO_CD = 8;
export const WMT_RIGHT_COPY_TO_SDMI_DEVICE = 16;
export const WMT_RIGHT_ONE_TIME = 32;
export const WMT_RIGHT_SAVE_STREAM_PROTECTED = 64;
export const WMT_RIGHT_COPY = 128;
export const WMT_RIGHT_COLLABORATIVE_PLAY = 256;
export const WMT_RIGHT_SDMI_TRIGGER = 65536;
export const WMT_RIGHT_SDMI_NOMORECOPIES = 131072;
export const NETSOURCE_URLCREDPOLICY_SETTING_SILENTLOGONOK = 0;
export const NETSOURCE_URLCREDPOLICY_SETTING_MUSTPROMPTUSER = 1;
export const NETSOURCE_URLCREDPOLICY_SETTING_ANONYMOUSONLY = 2;
export const DEVICE_AUTHORIZATION_UNKNOWN = 0;
export const DEVICE_AUTHORIZATION_ALLOWED = 1;
export const DEVICE_AUTHORIZATION_DENIED = 2;
export const wmposUndefined = 0;
export const wmposPlaylistChanging = 1;
export const wmposPlaylistLocating = 2;
export const wmposPlaylistConnecting = 3;
export const wmposPlaylistLoading = 4;
export const wmposPlaylistOpening = 5;
export const wmposPlaylistOpenNoMedia = 6;
export const wmposPlaylistChanged = 7;
export const wmposMediaChanging = 8;
export const wmposMediaLocating = 9;
export const wmposMediaConnecting = 10;
export const wmposMediaLoading = 11;
export const wmposMediaOpening = 12;
export const wmposMediaOpen = 13;
export const wmposBeginCodecAcquisition = 14;
export const wmposEndCodecAcquisition = 15;
export const wmposBeginLicenseAcquisition = 16;
export const wmposEndLicenseAcquisition = 17;
export const wmposBeginIndividualization = 18;
export const wmposEndIndividualization = 19;
export const wmposMediaWaiting = 20;
export const wmposOpeningUnknownURL = 21;
export const wmppsUndefined = 0;
export const wmppsStopped = 1;
export const wmppsPaused = 2;
export const wmppsPlaying = 3;
export const wmppsScanForward = 4;
export const wmppsScanReverse = 5;
export const wmppsBuffering = 6;
export const wmppsWaiting = 7;
export const wmppsMediaEnded = 8;
export const wmppsTransitioning = 9;
export const wmppsReady = 10;
export const wmppsReconnecting = 11;
export const wmppsLast = 12;
export const wmplcUnknown = 0;
export const wmplcClear = 1;
export const wmplcInfoChange = 2;
export const wmplcMove = 3;
export const wmplcDelete = 4;
export const wmplcInsert = 5;
export const wmplcAppend = 6;
export const wmplcPrivate = 7;
export const wmplcNameChange = 8;
export const wmplcMorph = 9;
export const wmplcSort = 10;
export const wmplcLast = 11;
export const wmpssUnknown = 0;
export const wmpssSynchronizing = 1;
export const wmpssStopped = 2;
export const wmpssEstimating = 3;
export const wmpssLast = 4;
export const wmpdsUnknown = 0;
export const wmpdsPartnershipExists = 1;
export const wmpdsPartnershipDeclined = 2;
export const wmpdsPartnershipAnother = 3;
export const wmpdsManualDevice = 4;
export const wmpdsNewDevice = 5;
export const wmpdsLast = 6;
export const wmprsUnknown = 0;
export const wmprsRipping = 1;
export const wmprsStopped = 2;
export const wmpbfAudioCD = 0;
export const wmpbfDataCD = 1;
export const wmpbsUnknown = 0;
export const wmpbsBusy = 1;
export const wmpbsReady = 2;
export const wmpbsWaitingForDisc = 3;
export const wmpbsRefreshStatusPending = 4;
export const wmpbsPreparingToBurn = 5;
export const wmpbsBurning = 6;
export const wmpbsStopped = 7;
export const wmpbsErasing = 8;
export const wmpbsDownloading = 9;
export const wmpsccetUnknown = 0;
export const wmpsccetInsert = 1;
export const wmpsccetChange = 2;
export const wmpsccetDelete = 3;
export const wmpsccetClear = 4;
export const wmpsccetBeginUpdates = 5;
export const wmpsccetEndUpdates = 6;
export const wmpltUnknown = 0;
export const wmpltAll = 1;
export const wmpltLocal = 2;
export const wmpltRemote = 3;
export const wmpltDisc = 4;
export const wmpltPortableDevice = 5;
export const wmpfssUnknown = 0;
export const wmpfssScanning = 1;
export const wmpfssUpdating = 2;
export const wmpfssStopped = 3;
export const WMPServices_StreamState_Stop = 0;
export const WMPServices_StreamState_Pause = 1;
export const WMPServices_StreamState_Play = 2;
export const WMPPlugin_Caps_CannotConvertFormats = 1;
export const FBSA_DISABLE = 0;
export const FBSA_ENABLE = 1;
export const FBSA_RUNNOW = 2;
export const FBSS_DISABLED = 0;
export const FBSS_ENABLED = 1;
export const FES_ALL = 0;
export const FES_SELF_ONLY = 1;
export const FES_SELF_AND_CHILDREN_ONLY = 2;
export const FEM_FOLDEREVENTS = 1;
export const FEM_FEEDEVENTS = 2;
export const FXSP_NONE = 0;
export const FXSP_PUBDATE = 1;
export const FXSP_DOWNLOADTIME = 2;
export const FXSO_NONE = 0;
export const FXSO_ASCENDING = 1;
export const FXSO_DESCENDING = 2;
export const FXFF_ALL = 0;
export const FXFF_UNREAD = 1;
export const FXFF_READ = 2;
export const FXIF_NONE = 0;
export const FXIF_CF_EXTENSIONS = 1;
export const FDS_NONE = 0;
export const FDS_PENDING = 1;
export const FDS_DOWNLOADING = 2;
export const FDS_DOWNLOADED = 3;
export const FDS_DOWNLOAD_FAILED = 4;
export const FSS_DEFAULT = 0;
export const FSS_INTERVAL = 1;
export const FSS_MANUAL = 2;
export const FSS_SUGGESTED = 3;
export const FDE_NONE = 0;
export const FDE_DOWNLOAD_FAILED = 1;
export const FDE_INVALID_FEED_FORMAT = 2;
export const FDE_NORMALIZATION_FAILED = 3;
export const FDE_PERSISTENCE_FAILED = 4;
export const FDE_DOWNLOAD_BLOCKED = 5;
export const FDE_CANCELED = 6;
export const FDE_UNSUPPORTED_AUTH = 7;
export const FDE_BACKGROUND_DOWNLOAD_DISABLED = 8;
export const FDE_NOT_EXIST = 9;
export const FDE_UNSUPPORTED_MSXML = 10;
export const FDE_UNSUPPORTED_DTD = 11;
export const FDE_DOWNLOAD_SIZE_LIMIT_EXCEEDED = 12;
export const FDE_ACCESS_DENIED = 13;
export const FDE_AUTH_FAILED = 14;
export const FDE_INVALID_AUTH = 15;
export const FEICF_READ_ITEM_COUNT_CHANGED = 1;
export const FEICF_UNREAD_ITEM_COUNT_CHANGED = 2;
export const FEC_E_ERRORBASE = "-1073479168";
export const FEC_E_INVALIDMSXMLPROPERTY = "-1073479168";
export const FEC_E_DOWNLOADSIZELIMITEXCEEDED = "-1073479167";
export const stop_state = 0;
export const pause_state = 1;
export const play_state = 2;
export const wmpsnBackgroundProcessingBegin = 1;
export const wmpsnBackgroundProcessingEnd = 2;
export const wmpsnCatalogDownloadFailure = 3;
export const wmpsnCatalogDownloadComplete = 4;
export const wmpcnLoginStateChange = 1;
export const wmpcnAuthResult = 2;
export const wmpcnLicenseUpdated = 3;
export const wmpcnNewCatalogAvailable = 4;
export const wmpcnNewPluginAvailable = 5;
export const wmpcnDisableRadioSkipping = 6;
export const wmpttBrowse = 1;
export const wmpttSync = 2;
export const wmpttBurn = 3;
export const wmpttCurrent = 4;
export const wmpttNoTransaction = 0;
export const wmpttDownload = 1;
export const wmpttBuy = 2;
export const wmptsSmall = 0;
export const wmptsMedium = 1;
export const wmptsLarge = 2;
export const wmpstUnknown = 0;
export const wmpstMusic = 1;
export const wmpstVideo = 2;
export const wmpstRadio = 3;
export const wmpatBuyOnly = 1;
export const wmpatSubscription = 2;
export const wmpatJanus = 3;
export const wmpsseCurrentBegin = 1;
export const wmpsseCurrentEnd = 2;
export const wmpsseFullBegin = 3;
export const wmpsseFullEnd = 4;
export const wmpsdlsDownloading = 0;
export const wmpsdlsPaused = 1;
export const wmpsdlsProcessing = 2;
export const wmpsdlsCompleted = 3;
export const wmpsdlsCancelled = 4;
export const XAPO_BUFFER_SILENT = 0;
export const XAPO_BUFFER_VALID = 1;
export const LowPassFilter = 0;
export const BandPassFilter = 1;
export const HighPassFilter = 2;
export const NotchFilter = 3;
export const LowPassOnePoleFilter = 4;
export const HighPassOnePoleFilter = 5;
export const OmniDirectional = 0;
export const Cardioid = 1;
export const Cone = 2;
export const Small = 0;
export const Medium = 1;
export const Large = 2;
export const Outdoors = 3;
export const NaturalDecay = 0;
export const CustomDecay = 1;
export const AUDCLNT_SHAREMODE_SHARED = 0;
export const AUDCLNT_SHAREMODE_EXCLUSIVE = 1;
export const AudioCategory_Other = 0;
export const AudioCategory_ForegroundOnlyMedia = 1;
export const AudioCategory_Communications = 3;
export const AudioCategory_Alerts = 4;
export const AudioCategory_SoundEffects = 5;
export const AudioCategory_GameEffects = 6;
export const AudioCategory_GameMedia = 7;
export const AudioCategory_GameChat = 8;
export const AudioCategory_Speech = 9;
export const AudioCategory_Movie = 10;
export const AudioCategory_Media = 11;
export const AudioCategory_FarFieldSpeech = 12;
export const AudioCategory_UniformSpeech = 13;
export const AudioCategory_VoiceTyping = 14;
export const AudioSessionStateInactive = 0;
export const AudioSessionStateActive = 1;
export const AudioSessionStateExpired = 2;
export const AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY = 1;
export const AUDCLNT_BUFFERFLAGS_SILENT = 2;
export const AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR = 4;
export const AUDCLNT_STREAMOPTIONS_NONE = 0;
export const AUDCLNT_STREAMOPTIONS_RAW = 1;
export const AUDCLNT_STREAMOPTIONS_MATCH_FORMAT = 2;
export const AUDCLNT_STREAMOPTIONS_AMBISONICS = 4;
export const AUDIO_DUCKING_OPTIONS_DEFAULT = 0;
export const AUDIO_DUCKING_OPTIONS_DO_NOT_DUCK_OTHER_STREAMS = 1;
export const AUDIO_EFFECT_STATE_OFF = 0;
export const AUDIO_EFFECT_STATE_ON = 1;
export const AMBISONICS_TYPE_FULL3D = 0;
export const AMBISONICS_CHANNEL_ORDERING_ACN = 0;
export const AMBISONICS_NORMALIZATION_SN3D = 0;
export const AMBISONICS_NORMALIZATION_N3D = 1;
export const AudioObjectType_None = 0;
export const AudioObjectType_Dynamic = 1;
export const AudioObjectType_FrontLeft = 2;
export const AudioObjectType_FrontRight = 4;
export const AudioObjectType_FrontCenter = 8;
export const AudioObjectType_LowFrequency = 16;
export const AudioObjectType_SideLeft = 32;
export const AudioObjectType_SideRight = 64;
export const AudioObjectType_BackLeft = 128;
export const AudioObjectType_BackRight = 256;
export const AudioObjectType_TopFrontLeft = 512;
export const AudioObjectType_TopFrontRight = 1024;
export const AudioObjectType_TopBackLeft = 2048;
export const AudioObjectType_TopBackRight = 4096;
export const AudioObjectType_BottomFrontLeft = 8192;
export const AudioObjectType_BottomFrontRight = 16384;
export const AudioObjectType_BottomBackLeft = 32768;
export const AudioObjectType_BottomBackRight = 65536;
export const AudioObjectType_BackCenter = 131072;
export const SPATIAL_AUDIO_STREAM_OPTIONS_NONE = 0;
export const SPATIAL_AUDIO_STREAM_OPTIONS_OFFLOAD = 1;
export const SpatialAudioHrtfDirectivity_OmniDirectional = 0;
export const SpatialAudioHrtfDirectivity_Cardioid = 1;
export const SpatialAudioHrtfDirectivity_Cone = 2;
export const SpatialAudioHrtfEnvironment_Small = 0;
export const SpatialAudioHrtfEnvironment_Medium = 1;
export const SpatialAudioHrtfEnvironment_Large = 2;
export const SpatialAudioHrtfEnvironment_Outdoors = 3;
export const SpatialAudioHrtfEnvironment_Average = 4;
export const SpatialAudioHrtfDistanceDecay_NaturalDecay = 0;
export const SpatialAudioHrtfDistanceDecay_CustomDecay = 1;
export const eRender = 0;
export const eCapture = 1;
export const eAll = 2;
export const EDataFlow_enum_count = 3;
export const eConsole = 0;
export const eMultimedia = 1;
export const eCommunications = 2;
export const ERole_enum_count = 3;
export const RemoteNetworkDevice = 0;
export const Speakers = 1;
export const LineLevel = 2;
export const Headphones = 3;
export const Microphone = 4;
export const Headset = 5;
export const Handset = 6;
export const UnknownDigitalPassthrough = 7;
export const SPDIF = 8;
export const DigitalAudioDisplayDevice = 9;
export const UnknownFormFactor = 10;
export const EndpointFormFactor_enum_count = 11;
export const In = 0;
export const Out = 1;
export const Connector = 0;
export const Subunit = 1;
export const Unknown_Connector = 0;
export const Physical_Internal = 1;
export const Physical_External = 2;
export const Software_IO = 3;
export const Software_Fixed = 4;
export const Network = 5;
export const DisconnectReasonDeviceRemoval = 0;
export const DisconnectReasonServerShutdown = 1;
export const DisconnectReasonFormatChanged = 2;
export const DisconnectReasonSessionLogoff = 3;
export const DisconnectReasonSessionDisconnected = 4;
export const DisconnectReasonExclusiveModeOverride = 5;
export const SpatialAudioMetadataWriterOverflow_Fail = 0;
export const SpatialAudioMetadataWriterOverflow_MergeWithNew = 1;
export const SpatialAudioMetadataWriterOverflow_MergeWithLast = 2;
export const SpatialAudioMetadataCopy_Overwrite = 0;
export const SpatialAudioMetadataCopy_Append = 1;
export const SpatialAudioMetadataCopy_AppendMergeWithLast = 2;
export const SpatialAudioMetadataCopy_AppendMergeWithFirst = 3;
export const PROCESS_LOOPBACK_MODE_INCLUDE_TARGET_PROCESS_TREE = 0;
export const PROCESS_LOOPBACK_MODE_EXCLUDE_TARGET_PROCESS_TREE = 1;
export const AUDIOCLIENT_ACTIVATION_TYPE_DEFAULT = 0;
export const AUDIOCLIENT_ACTIVATION_TYPE_PROCESS_LOOPBACK = 1;
export const Muted = 0;
export const Low = 1;
export const Full = 2;
export const KSRESET_BEGIN = 0;
export const KSRESET_END = 1;
export const KSSTATE_STOP = 0;
export const KSSTATE_ACQUIRE = 1;
export const KSSTATE_PAUSE = 2;
export const KSSTATE_RUN = 3;
export const KSPROPERTY_GENERAL_COMPONENTID = 0;
export const KSMETHOD_STREAMIO_READ = 0;
export const KSMETHOD_STREAMIO_WRITE = 1;
export const KSPROPERTY_MEDIASEEKING_CAPABILITIES = 0;
export const KSPROPERTY_MEDIASEEKING_FORMATS = 1;
export const KSPROPERTY_MEDIASEEKING_TIMEFORMAT = 2;
export const KSPROPERTY_MEDIASEEKING_POSITION = 3;
export const KSPROPERTY_MEDIASEEKING_STOPPOSITION = 4;
export const KSPROPERTY_MEDIASEEKING_POSITIONS = 5;
export const KSPROPERTY_MEDIASEEKING_DURATION = 6;
export const KSPROPERTY_MEDIASEEKING_AVAILABLE = 7;
export const KSPROPERTY_MEDIASEEKING_PREROLL = 8;
export const KSPROPERTY_MEDIASEEKING_CONVERTTIMEFORMAT = 9;
export const KS_SEEKING_NoPositioning = 0;
export const KS_SEEKING_AbsolutePositioning = 1;
export const KS_SEEKING_RelativePositioning = 2;
export const KS_SEEKING_IncrementalPositioning = 3;
export const KS_SEEKING_PositioningBitsMask = 3;
export const KS_SEEKING_SeekToKeyFrame = 4;
export const KS_SEEKING_ReturnTime = 8;
export const KS_SEEKING_CanSeekAbsolute = 1;
export const KS_SEEKING_CanSeekForwards = 2;
export const KS_SEEKING_CanSeekBackwards = 4;
export const KS_SEEKING_CanGetCurrentPos = 8;
export const KS_SEEKING_CanGetStopPos = 16;
export const KS_SEEKING_CanGetDuration = 32;
export const KS_SEEKING_CanPlayBackwards = 64;
export const KSPROPERTY_TOPOLOGY_CATEGORIES = 0;
export const KSPROPERTY_TOPOLOGY_NODES = 1;
export const KSPROPERTY_TOPOLOGY_CONNECTIONS = 2;
export const KSPROPERTY_TOPOLOGY_NAME = 3;
export const KSINTERFACE_STANDARD_STREAMING = 0;
export const KSINTERFACE_STANDARD_LOOPED_STREAMING = 1;
export const KSINTERFACE_STANDARD_CONTROL = 2;
export const KSINTERFACE_FILEIO_STREAMING = 0;
export const KSPROPERTY_PIN_CINSTANCES = 0;
export const KSPROPERTY_PIN_CTYPES = 1;
export const KSPROPERTY_PIN_DATAFLOW = 2;
export const KSPROPERTY_PIN_DATARANGES = 3;
export const KSPROPERTY_PIN_DATAINTERSECTION = 4;
export const KSPROPERTY_PIN_INTERFACES = 5;
export const KSPROPERTY_PIN_MEDIUMS = 6;
export const KSPROPERTY_PIN_COMMUNICATION = 7;
export const KSPROPERTY_PIN_GLOBALCINSTANCES = 8;
export const KSPROPERTY_PIN_NECESSARYINSTANCES = 9;
export const KSPROPERTY_PIN_PHYSICALCONNECTION = 10;
export const KSPROPERTY_PIN_CATEGORY = 11;
export const KSPROPERTY_PIN_NAME = 12;
export const KSPROPERTY_PIN_CONSTRAINEDDATARANGES = 13;
export const KSPROPERTY_PIN_PROPOSEDATAFORMAT = 14;
export const KSPROPERTY_PIN_PROPOSEDATAFORMAT2 = 15;
export const KSPROPERTY_PIN_MODEDATAFORMATS = 16;
export const KSPIN_DATAFLOW_IN = 1;
export const KSPIN_DATAFLOW_OUT = 2;
export const KSPIN_COMMUNICATION_NONE = 0;
export const KSPIN_COMMUNICATION_SINK = 1;
export const KSPIN_COMMUNICATION_SOURCE = 2;
export const KSPIN_COMMUNICATION_BOTH = 3;
export const KSPIN_COMMUNICATION_BRIDGE = 4;
export const KSEVENT_PINCAPS_FORMATCHANGE = 0;
export const KSEVENT_PINCAPS_JACKINFOCHANGE = 1;
export const KSEVENT_VOLUMELIMIT_CHANGED = 0;
export const KSPROPERTY_QUALITY_REPORT = 0;
export const KSPROPERTY_QUALITY_ERROR = 1;
export const KSPROPERTY_CONNECTION_STATE = 0;
export const KSPROPERTY_CONNECTION_PRIORITY = 1;
export const KSPROPERTY_CONNECTION_DATAFORMAT = 2;
export const KSPROPERTY_CONNECTION_ALLOCATORFRAMING = 3;
export const KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT = 4;
export const KSPROPERTY_CONNECTION_ACQUIREORDERING = 5;
export const KSPROPERTY_CONNECTION_ALLOCATORFRAMING_EX = 6;
export const KSPROPERTY_CONNECTION_STARTAT = 7;
export const KSEVENT_STREAMALLOCATOR_INTERNAL_FREEFRAME = 0;
export const KSEVENT_STREAMALLOCATOR_FREEFRAME = 1;
export const KSMETHOD_STREAMALLOCATOR_ALLOC = 0;
export const KSMETHOD_STREAMALLOCATOR_FREE = 1;
export const KSPIN_MDL_CACHING_NOTIFY_CLEANUP = 0;
export const KSPIN_MDL_CACHING_NOTIFY_CLEANALL_WAIT = 1;
export const KSPIN_MDL_CACHING_NOTIFY_CLEANALL_NOWAIT = 2;
export const KSPIN_MDL_CACHING_NOTIFY_ADDSAMPLE = 3;
export const KSPROPERTY_STREAMINTERFACE_HEADERSIZE = 0;
export const KSPROPERTY_STREAM_ALLOCATOR = 0;
export const KSPROPERTY_STREAM_QUALITY = 1;
export const KSPROPERTY_STREAM_DEGRADATION = 2;
export const KSPROPERTY_STREAM_MASTERCLOCK = 3;
export const KSPROPERTY_STREAM_TIMEFORMAT = 4;
export const KSPROPERTY_STREAM_PRESENTATIONTIME = 5;
export const KSPROPERTY_STREAM_PRESENTATIONEXTENT = 6;
export const KSPROPERTY_STREAM_FRAMETIME = 7;
export const KSPROPERTY_STREAM_RATECAPABILITY = 8;
export const KSPROPERTY_STREAM_RATE = 9;
export const KSPROPERTY_STREAM_PIPE_ID = 10;
export const KSPROPERTY_ALLOCATOR_CLEANUP_CACHEDMDLPAGES = 1;
export const KSPROPERTY_CLOCK_TIME = 0;
export const KSPROPERTY_CLOCK_PHYSICALTIME = 1;
export const KSPROPERTY_CLOCK_CORRELATEDTIME = 2;
export const KSPROPERTY_CLOCK_CORRELATEDPHYSICALTIME = 3;
export const KSPROPERTY_CLOCK_RESOLUTION = 4;
export const KSPROPERTY_CLOCK_STATE = 5;
export const KSEVENT_CLOCK_INTERVAL_MARK = 0;
export const KSEVENT_CLOCK_POSITION_MARK = 1;
export const KSEVENT_CONNECTION_POSITIONUPDATE = 0;
export const KSEVENT_CONNECTION_DATADISCONTINUITY = 1;
export const KSEVENT_CONNECTION_TIMEDISCONTINUITY = 2;
export const KSEVENT_CONNECTION_PRIORITY = 3;
export const KSEVENT_CONNECTION_ENDOFSTREAM = 4;
export const KSDEVICE_THERMAL_STATE_LOW = 0;
export const KSDEVICE_THERMAL_STATE_HIGH = 1;
export const KSEVENT_DEVICE_LOST = 0;
export const KSEVENT_DEVICE_PREEMPTED = 1;
export const KSEVENT_DEVICE_THERMAL_HIGH = 2;
export const KSEVENT_DEVICE_THERMAL_LOW = 3;
export const KSDEGRADE_STANDARD_SAMPLE = 0;
export const KSDEGRADE_STANDARD_QUALITY = 1;
export const KSDEGRADE_STANDARD_COMPUTATION = 2;
export const KSDEGRADE_STANDARD_SKIP = 3;
export const KSINTERFACE_MEDIA_MUSIC = 0;
export const KSINTERFACE_MEDIA_WAVE_BUFFERED = 1;
export const KSINTERFACE_MEDIA_WAVE_QUEUED = 2;
export const CONSTRICTOR_OPTION_DISABLE = 0;
export const CONSTRICTOR_OPTION_MUTE = 1;
export const KSMICARRAY_MICTYPE_OMNIDIRECTIONAL = 0;
export const KSMICARRAY_MICTYPE_SUBCARDIOID = 1;
export const KSMICARRAY_MICTYPE_CARDIOID = 2;
export const KSMICARRAY_MICTYPE_SUPERCARDIOID = 3;
export const KSMICARRAY_MICTYPE_HYPERCARDIOID = 4;
export const KSMICARRAY_MICTYPE_8SHAPED = 5;
export const KSMICARRAY_MICTYPE_VENDORDEFINED = 15;
export const KSMICARRAY_MICARRAYTYPE_LINEAR = 0;
export const KSMICARRAY_MICARRAYTYPE_PLANAR = 1;
export const KSMICARRAY_MICARRAYTYPE_3D = 2;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_ALL = 0;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_POSITION = 1;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_VELOCITY = 2;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_ORIENTATION = 3;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_DISTANCEFACTOR = 4;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_ROLLOFFFACTOR = 5;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_DOPPLERFACTOR = 6;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_BATCH = 7;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_ALLOCATION = 8;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_ALL = 0;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_POSITION = 1;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_VELOCITY = 2;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_CONEANGLES = 3;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_CONEORIENTATION = 4;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_CONEOUTSIDEVOLUME = 5;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_MINDISTANCE = 6;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_MAXDISTANCE = 7;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_MODE = 8;
export const FULL_FILTER = 0;
export const LIGHT_FILTER = 1;
export const KSDS3D_FILTER_QUALITY_COUNT = 2;
export const FLOAT_COEFF = 0;
export const SHORT_COEFF = 1;
export const KSDS3D_COEFF_COUNT = 2;
export const DIRECT_FORM = 0;
export const CASCADE_FORM = 1;
export const KSDS3D_FILTER_METHOD_COUNT = 2;
export const DS3D_HRTF_VERSION_1 = 0;
export const KSPROPERTY_HRTF3D_PARAMS = 0;
export const KSPROPERTY_HRTF3D_INITIALIZE = 1;
export const KSPROPERTY_HRTF3D_FILTER_FORMAT = 2;
export const KSPROPERTY_ITD3D_PARAMS = 0;
export const KSPROPERTY_BIBLIOGRAPHIC_LEADER = 1380207648;
export const KSPROPERTY_BIBLIOGRAPHIC_LCCN = 808529952;
export const KSPROPERTY_BIBLIOGRAPHIC_ISBN = 808595488;
export const KSPROPERTY_BIBLIOGRAPHIC_ISSN = 842149920;
export const KSPROPERTY_BIBLIOGRAPHIC_CATALOGINGSOURCE = 808726560;
export const KSPROPERTY_BIBLIOGRAPHIC_MAINPERSONALNAME = 808464672;
export const KSPROPERTY_BIBLIOGRAPHIC_MAINCORPORATEBODY = 808530208;
export const KSPROPERTY_BIBLIOGRAPHIC_MAINMEETINGNAME = 825307424;
export const KSPROPERTY_BIBLIOGRAPHIC_MAINUNIFORMTITLE = 808661280;
export const KSPROPERTY_BIBLIOGRAPHIC_UNIFORMTITLE = 808727072;
export const KSPROPERTY_BIBLIOGRAPHIC_TITLESTATEMENT = 892613152;
export const KSPROPERTY_BIBLIOGRAPHIC_VARYINGFORMTITLE = 909390368;
export const KSPROPERTY_BIBLIOGRAPHIC_PUBLICATION = 808858144;
export const KSPROPERTY_BIBLIOGRAPHIC_PHYSICALDESCRIPTION = 808465184;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTITLE = 808727584;
export const KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENT = 809055264;
export const KSPROPERTY_BIBLIOGRAPHIC_GENERALNOTE = 808465696;
export const KSPROPERTY_BIBLIOGRAPHIC_BIBLIOGRAPHYNOTE = 875574560;
export const KSPROPERTY_BIBLIOGRAPHIC_CONTENTSNOTE = 892351776;
export const KSPROPERTY_BIBLIOGRAPHIC_CREATIONCREDIT = 942683424;
export const KSPROPERTY_BIBLIOGRAPHIC_CITATION = 808531232;
export const KSPROPERTY_BIBLIOGRAPHIC_PARTICIPANT = 825308448;
export const KSPROPERTY_BIBLIOGRAPHIC_SUMMARY = 808596768;
export const KSPROPERTY_BIBLIOGRAPHIC_TARGETAUDIENCE = 825373984;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDFORMAVAILABLE = 808662304;
export const KSPROPERTY_BIBLIOGRAPHIC_SYSTEMDETAILS = 942880032;
export const KSPROPERTY_BIBLIOGRAPHIC_AWARDS = 909653280;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYPERSONALNAME = 808465952;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTOPICALTERM = 808793632;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYGEOGRAPHIC = 825570848;
export const KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMGENRE = 892679712;
export const KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMCURRICULUM = 943011360;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYUNIFORMTITLE = 808662816;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYRELATED = 808728352;
export const KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTPERSONALNAME = 808466464;
export const KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTUNIFORMTITLE = 808663072;
export const KSPROPERTY_TOPOLOGYNODE_ENABLE = 1;
export const KSPROPERTY_TOPOLOGYNODE_RESET = 2;
export const KSPROPERTY_RTAUDIO_GETPOSITIONFUNCTION = 0;
export const KSPROPERTY_RTAUDIO_BUFFER = 1;
export const KSPROPERTY_RTAUDIO_HWLATENCY = 2;
export const KSPROPERTY_RTAUDIO_POSITIONREGISTER = 3;
export const KSPROPERTY_RTAUDIO_CLOCKREGISTER = 4;
export const KSPROPERTY_RTAUDIO_BUFFER_WITH_NOTIFICATION = 5;
export const KSPROPERTY_RTAUDIO_REGISTER_NOTIFICATION_EVENT = 6;
export const KSPROPERTY_RTAUDIO_UNREGISTER_NOTIFICATION_EVENT = 7;
export const KSPROPERTY_RTAUDIO_QUERY_NOTIFICATION_SUPPORT = 8;
export const KSPROPERTY_RTAUDIO_PACKETCOUNT = 9;
export const KSPROPERTY_RTAUDIO_PRESENTATION_POSITION = 10;
export const KSPROPERTY_RTAUDIO_GETREADPACKET = 11;
export const KSPROPERTY_RTAUDIO_SETWRITEPACKET = 12;
export const KSPROPERTY_RTAUDIO_PACKETVREGISTER = 13;
export const KSPROPERTY_ONESHOT_RECONNECT = 0;
export const KSPROPERTY_ONESHOT_DISCONNECT = 1;
export const KSPROPERTY_DRMAUDIOSTREAM_CONTENTID = 0;
export const KSPROPERTY_INTERLEAVEDAUDIO_FORMATINFORMATION = 1;
export const KSPROPERTY_SOUNDDETECTOR_SUPPORTEDPATTERNS = 1;
export const KSPROPERTY_SOUNDDETECTOR_PATTERNS = 2;
export const KSPROPERTY_SOUNDDETECTOR_ARMED = 3;
export const KSPROPERTY_SOUNDDETECTOR_MATCHRESULT = 4;
export const KSPROPERTY_SOUNDDETECTOR_RESET = 5;
export const KSPROPERTY_SOUNDDETECTOR_STREAMINGSUPPORT = 6;
export const KSEVENT_SOUNDDETECTOR_MATCHDETECTED = 1;
export const KSPROPERTY_AUDIO_LATENCY = 1;
export const KSPROPERTY_AUDIO_COPY_PROTECTION = 2;
export const KSPROPERTY_AUDIO_CHANNEL_CONFIG = 3;
export const KSPROPERTY_AUDIO_VOLUMELEVEL = 4;
export const KSPROPERTY_AUDIO_POSITION = 5;
export const KSPROPERTY_AUDIO_DYNAMIC_RANGE = 6;
export const KSPROPERTY_AUDIO_QUALITY = 7;
export const KSPROPERTY_AUDIO_SAMPLING_RATE = 8;
export const KSPROPERTY_AUDIO_DYNAMIC_SAMPLING_RATE = 9;
export const KSPROPERTY_AUDIO_MIX_LEVEL_TABLE = 10;
export const KSPROPERTY_AUDIO_MIX_LEVEL_CAPS = 11;
export const KSPROPERTY_AUDIO_MUX_SOURCE = 12;
export const KSPROPERTY_AUDIO_MUTE = 13;
export const KSPROPERTY_AUDIO_BASS = 14;
export const KSPROPERTY_AUDIO_MID = 15;
export const KSPROPERTY_AUDIO_TREBLE = 16;
export const KSPROPERTY_AUDIO_BASS_BOOST = 17;
export const KSPROPERTY_AUDIO_EQ_LEVEL = 18;
export const KSPROPERTY_AUDIO_NUM_EQ_BANDS = 19;
export const KSPROPERTY_AUDIO_EQ_BANDS = 20;
export const KSPROPERTY_AUDIO_AGC = 21;
export const KSPROPERTY_AUDIO_DELAY = 22;
export const KSPROPERTY_AUDIO_LOUDNESS = 23;
export const KSPROPERTY_AUDIO_WIDE_MODE = 24;
export const KSPROPERTY_AUDIO_WIDENESS = 25;
export const KSPROPERTY_AUDIO_REVERB_LEVEL = 26;
export const KSPROPERTY_AUDIO_CHORUS_LEVEL = 27;
export const KSPROPERTY_AUDIO_DEV_SPECIFIC = 28;
export const KSPROPERTY_AUDIO_DEMUX_DEST = 29;
export const KSPROPERTY_AUDIO_STEREO_ENHANCE = 30;
export const KSPROPERTY_AUDIO_MANUFACTURE_GUID = 31;
export const KSPROPERTY_AUDIO_PRODUCT_GUID = 32;
export const KSPROPERTY_AUDIO_CPU_RESOURCES = 33;
export const KSPROPERTY_AUDIO_STEREO_SPEAKER_GEOMETRY = 34;
export const KSPROPERTY_AUDIO_SURROUND_ENCODE = 35;
export const KSPROPERTY_AUDIO_3D_INTERFACE = 36;
export const KSPROPERTY_AUDIO_PEAKMETER = 37;
export const KSPROPERTY_AUDIO_ALGORITHM_INSTANCE = 38;
export const KSPROPERTY_AUDIO_FILTER_STATE = 39;
export const KSPROPERTY_AUDIO_PREFERRED_STATUS = 40;
export const KSPROPERTY_AUDIO_PEQ_MAX_BANDS = 41;
export const KSPROPERTY_AUDIO_PEQ_NUM_BANDS = 42;
export const KSPROPERTY_AUDIO_PEQ_BAND_CENTER_FREQ = 43;
export const KSPROPERTY_AUDIO_PEQ_BAND_Q_FACTOR = 44;
export const KSPROPERTY_AUDIO_PEQ_BAND_LEVEL = 45;
export const KSPROPERTY_AUDIO_CHORUS_MODULATION_RATE = 46;
export const KSPROPERTY_AUDIO_CHORUS_MODULATION_DEPTH = 47;
export const KSPROPERTY_AUDIO_REVERB_TIME = 48;
export const KSPROPERTY_AUDIO_REVERB_DELAY_FEEDBACK = 49;
export const KSPROPERTY_AUDIO_POSITIONEX = 50;
export const KSPROPERTY_AUDIO_MIC_ARRAY_GEOMETRY = 51;
export const KSPROPERTY_AUDIO_PRESENTATION_POSITION = 52;
export const KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_POSITION = 53;
export const KSPROPERTY_AUDIO_LINEAR_BUFFER_POSITION = 54;
export const KSPROPERTY_AUDIO_PEAKMETER2 = 55;
export const KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_LASTBUFFER_POSITION = 56;
export const KSPROPERTY_AUDIO_VOLUMELIMIT_ENGAGED = 57;
export const KSPROPERTY_AUDIO_MIC_SENSITIVITY = 58;
export const KSPROPERTY_AUDIO_MIC_SNR = 59;
export const KSPROPERTY_AUDIO_MIC_SENSITIVITY2 = 60;
export const KSPROPERTY_TELEPHONY_PROVIDERID = 0;
export const KSPROPERTY_TELEPHONY_CALLINFO = 1;
export const KSPROPERTY_TELEPHONY_CALLCONTROL = 2;
export const KSPROPERTY_TELEPHONY_PROVIDERCHANGE = 3;
export const KSPROPERTY_TELEPHONY_CALLHOLD = 4;
export const KSPROPERTY_TELEPHONY_MUTE_TX = 5;
export const TELEPHONY_CALLTYPE_CIRCUITSWITCHED = 0;
export const TELEPHONY_CALLTYPE_PACKETSWITCHED_LTE = 1;
export const TELEPHONY_CALLTYPE_PACKETSWITCHED_WLAN = 2;
export const TELEPHONY_CALLCONTROLOP_DISABLE = 0;
export const TELEPHONY_CALLCONTROLOP_ENABLE = 1;
export const TELEPHONY_PROVIDERCHANGEOP_END = 0;
export const TELEPHONY_PROVIDERCHANGEOP_BEGIN = 1;
export const TELEPHONY_PROVIDERCHANGEOP_CANCEL = 2;
export const TELEPHONY_CALLSTATE_DISABLED = 0;
export const TELEPHONY_CALLSTATE_ENABLED = 1;
export const TELEPHONY_CALLSTATE_HOLD = 2;
export const TELEPHONY_CALLSTATE_PROVIDERTRANSITION = 3;
export const KSPROPERTY_TELEPHONY_ENDPOINTIDPAIR = 0;
export const KSPROPERTY_TELEPHONY_VOLUME = 1;
export const KSPROPERTY_FMRX_ENDPOINTID = 0;
export const KSPROPERTY_FMRX_VOLUME = 1;
export const KSPROPERTY_FMRX_ANTENNAENDPOINTID = 2;
export const KSPROPERTY_FMRX_STATE = 0;
export const KSEVENT_TELEPHONY_ENDPOINTPAIRS_CHANGED = 0;
export const KSMETHOD_WAVETABLE_WAVE_ALLOC = 0;
export const KSMETHOD_WAVETABLE_WAVE_FREE = 1;
export const KSMETHOD_WAVETABLE_WAVE_FIND = 2;
export const KSMETHOD_WAVETABLE_WAVE_WRITE = 3;
export const KSPROPERTY_WAVE_COMPATIBLE_CAPABILITIES = 0;
export const KSPROPERTY_WAVE_INPUT_CAPABILITIES = 1;
export const KSPROPERTY_WAVE_OUTPUT_CAPABILITIES = 2;
export const KSPROPERTY_WAVE_BUFFER = 3;
export const KSPROPERTY_WAVE_FREQUENCY = 4;
export const KSPROPERTY_WAVE_VOLUME = 5;
export const KSPROPERTY_WAVE_PAN = 6;
export const KSPROPERTY_CYCLIC_POSITION = 0;
export const KSEVENT_CONTROL_CHANGE = 0;
export const KSEVENT_LOOPEDSTREAMING_POSITION = 0;
export const KSPROPERTY_MPEG2VID_MODES = 0;
export const KSPROPERTY_MPEG2VID_CUR_MODE = 1;
export const KSPROPERTY_MPEG2VID_4_3_RECT = 2;
export const KSPROPERTY_MPEG2VID_16_9_RECT = 3;
export const KSPROPERTY_MPEG2VID_16_9_PANSCAN = 4;
export const KSPROPERTY_AC3_ERROR_CONCEALMENT = 1;
export const KSPROPERTY_AC3_ALTERNATE_AUDIO = 2;
export const KSPROPERTY_AC3_DOWNMIX = 3;
export const KSPROPERTY_AC3_BIT_STREAM_MODE = 4;
export const KSPROPERTY_AC3_DIALOGUE_LEVEL = 5;
export const KSPROPERTY_AC3_LANGUAGE_CODE = 6;
export const KSPROPERTY_AC3_ROOM_TYPE = 7;
export const KSPROPERTY_AUDDECOUT_MODES = 0;
export const KSPROPERTY_AUDDECOUT_CUR_MODE = 1;
export const KSPROPERTY_DVDSUBPIC_PALETTE = 0;
export const KSPROPERTY_DVDSUBPIC_HLI = 1;
export const KSPROPERTY_DVDSUBPIC_COMPOSIT_ON = 2;
export const KSPROPERTY_DVDCOPY_CHLG_KEY = 1;
export const KSPROPERTY_DVDCOPY_DVD_KEY1 = 2;
export const KSPROPERTY_DVDCOPY_DEC_KEY2 = 3;
export const KSPROPERTY_DVDCOPY_TITLE_KEY = 4;
export const KSPROPERTY_COPY_MACROVISION = 5;
export const KSPROPERTY_DVDCOPY_REGION = 6;
export const KSPROPERTY_DVDCOPY_SET_COPY_STATE = 7;
export const KSPROPERTY_DVDCOPY_DISC_KEY = 128;
export const KS_DVDCOPYSTATE_INITIALIZE = 0;
export const KS_DVDCOPYSTATE_INITIALIZE_TITLE = 1;
export const KS_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 2;
export const KS_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 3;
export const KS_DVDCOPYSTATE_DONE = 4;
export const KS_MACROVISION_DISABLED = 0;
export const KS_MACROVISION_LEVEL1 = 1;
export const KS_MACROVISION_LEVEL2 = 2;
export const KS_MACROVISION_LEVEL3 = 3;
export const KS_MPEG2Level_Low = 0;
export const KS_MPEG2Level_Main = 1;
export const KS_MPEG2Level_High1440 = 2;
export const KS_MPEG2Level_High = 3;
export const KS_MPEG2Profile_Simple = 0;
export const KS_MPEG2Profile_Main = 1;
export const KS_MPEG2Profile_SNRScalable = 2;
export const KS_MPEG2Profile_SpatiallyScalable = 3;
export const KS_MPEG2Profile_High = 4;
export const KSPROPERTY_VBICAP_PROPERTIES_PROTECTION = 1;
export const KSPROPERTY_VBICODECFILTERING_SCANLINES_REQUESTED_BIT_ARRAY = 1;
export const KSPROPERTY_VBICODECFILTERING_SCANLINES_DISCOVERED_BIT_ARRAY = 2;
export const KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_REQUESTED_BIT_ARRAY = 3;
export const KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_DISCOVERED_BIT_ARRAY = 4;
export const KSPROPERTY_VBICODECFILTERING_STATISTICS = 5;
export const KS_CAPTURE_ALLOC_INVALID = 0;
export const KS_CAPTURE_ALLOC_SYSTEM = 1;
export const KS_CAPTURE_ALLOC_VRAM = 2;
export const KS_CAPTURE_ALLOC_SYSTEM_AGP = 4;
export const KS_CAPTURE_ALLOC_VRAM_MAPPED = 8;
export const KS_CAPTURE_ALLOC_SECURE_BUFFER = 16;
export const KSPROPERTY_DISPLAY_ADAPTER_GUID = 1;
export const KSPROPERTY_PREFERRED_CAPTURE_SURFACE = 2;
export const KSPROPERTY_CURRENT_CAPTURE_SURFACE = 3;
export const KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS = 4;
export const KSPROPERTY_MPEG4_MEDIATYPE_SD_BOX = 1;
export const KSEVENT_DYNAMIC_FORMAT_CHANGE = 0;
export const KS_AnalogVideo_None = 0;
export const KS_AnalogVideo_NTSC_M = 1;
export const KS_AnalogVideo_NTSC_M_J = 2;
export const KS_AnalogVideo_NTSC_433 = 4;
export const KS_AnalogVideo_PAL_B = 16;
export const KS_AnalogVideo_PAL_D = 32;
export const KS_AnalogVideo_PAL_G = 64;
export const KS_AnalogVideo_PAL_H = 128;
export const KS_AnalogVideo_PAL_I = 256;
export const KS_AnalogVideo_PAL_M = 512;
export const KS_AnalogVideo_PAL_N = 1024;
export const KS_AnalogVideo_PAL_60 = 2048;
export const KS_AnalogVideo_SECAM_B = 4096;
export const KS_AnalogVideo_SECAM_D = 8192;
export const KS_AnalogVideo_SECAM_G = 16384;
export const KS_AnalogVideo_SECAM_H = 32768;
export const KS_AnalogVideo_SECAM_K = 65536;
export const KS_AnalogVideo_SECAM_K1 = 131072;
export const KS_AnalogVideo_SECAM_L = 262144;
export const KS_AnalogVideo_SECAM_L1 = 524288;
export const KS_AnalogVideo_PAL_N_COMBO = 1048576;
export const KSPROPERTY_ALLOCATOR_CONTROL_HONOR_COUNT = 0;
export const KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE = 1;
export const KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS = 2;
export const KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE = 3;
export const KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS = 0;
export const KSPROPERTY_VIDEOPROCAMP_CONTRAST = 1;
export const KSPROPERTY_VIDEOPROCAMP_HUE = 2;
export const KSPROPERTY_VIDEOPROCAMP_SATURATION = 3;
export const KSPROPERTY_VIDEOPROCAMP_SHARPNESS = 4;
export const KSPROPERTY_VIDEOPROCAMP_GAMMA = 5;
export const KSPROPERTY_VIDEOPROCAMP_COLORENABLE = 6;
export const KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE = 7;
export const KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION = 8;
export const KSPROPERTY_VIDEOPROCAMP_GAIN = 9;
export const KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER = 10;
export const KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER_LIMIT = 11;
export const KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE_COMPONENT = 12;
export const KSPROPERTY_VIDEOPROCAMP_POWERLINE_FREQUENCY = 13;
export const KSPROPERTY_SELECTOR_SOURCE_NODE_ID = 0;
export const KSPROPERTY_SELECTOR_NUM_SOURCES = 1;
export const KSPROPERTY_TUNER_CAPS = 0;
export const KSPROPERTY_TUNER_MODE_CAPS = 1;
export const KSPROPERTY_TUNER_MODE = 2;
export const KSPROPERTY_TUNER_STANDARD = 3;
export const KSPROPERTY_TUNER_FREQUENCY = 4;
export const KSPROPERTY_TUNER_INPUT = 5;
export const KSPROPERTY_TUNER_STATUS = 6;
export const KSPROPERTY_TUNER_IF_MEDIUM = 7;
export const KSPROPERTY_TUNER_SCAN_CAPS = 8;
export const KSPROPERTY_TUNER_SCAN_STATUS = 9;
export const KSPROPERTY_TUNER_STANDARD_MODE = 10;
export const KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS = 11;
export const KSPROPERTY_TUNER_MODE_TV = 1;
export const KSPROPERTY_TUNER_MODE_FM_RADIO = 2;
export const KSPROPERTY_TUNER_MODE_AM_RADIO = 4;
export const KSPROPERTY_TUNER_MODE_DSS = 8;
export const KSPROPERTY_TUNER_MODE_ATSC = 16;
export const KS_TUNER_TUNING_EXACT = 1;
export const KS_TUNER_TUNING_FINE = 2;
export const KS_TUNER_TUNING_COARSE = 3;
export const KS_TUNER_STRATEGY_PLL = 1;
export const KS_TUNER_STRATEGY_SIGNAL_STRENGTH = 2;
export const KS_TUNER_STRATEGY_DRIVER_TUNES = 4;
export const Tuner_LockType_None = 0;
export const Tuner_LockType_Within_Scan_Sensing_Range = 1;
export const Tuner_LockType_Locked = 2;
export const KSEVENT_TUNER_CHANGED = 0;
export const KSEVENT_TUNER_INITIATE_SCAN = 1;
export const KSPROPERTY_VIDEOENCODER_CAPS = 0;
export const KSPROPERTY_VIDEOENCODER_STANDARD = 1;
export const KSPROPERTY_VIDEOENCODER_COPYPROTECTION = 2;
export const KSPROPERTY_VIDEOENCODER_CC_ENABLE = 3;
export const KSPROPERTY_VIDEODECODER_CAPS = 0;
export const KSPROPERTY_VIDEODECODER_STANDARD = 1;
export const KSPROPERTY_VIDEODECODER_STATUS = 2;
export const KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE = 3;
export const KSPROPERTY_VIDEODECODER_VCR_TIMING = 4;
export const KSPROPERTY_VIDEODECODER_STATUS2 = 5;
export const KS_VIDEODECODER_FLAGS_CAN_DISABLE_OUTPUT = 1;
export const KS_VIDEODECODER_FLAGS_CAN_USE_VCR_LOCKING = 2;
export const KS_VIDEODECODER_FLAGS_CAN_INDICATE_LOCKED = 4;
export const KSEVENT_VIDEODECODER_CHANGED = 0;
export const KSEVENT_CAMERACONTROL_FOCUS = 0;
export const KSEVENT_CAMERACONTROL_ZOOM = 1;
export const KSPROPERTY_CAMERACONTROL_PAN = 0;
export const KSPROPERTY_CAMERACONTROL_TILT = 1;
export const KSPROPERTY_CAMERACONTROL_ROLL = 2;
export const KSPROPERTY_CAMERACONTROL_ZOOM = 3;
export const KSPROPERTY_CAMERACONTROL_EXPOSURE = 4;
export const KSPROPERTY_CAMERACONTROL_IRIS = 5;
export const KSPROPERTY_CAMERACONTROL_FOCUS = 6;
export const KSPROPERTY_CAMERACONTROL_SCANMODE = 7;
export const KSPROPERTY_CAMERACONTROL_PRIVACY = 8;
export const KSPROPERTY_CAMERACONTROL_PANTILT = 9;
export const KSPROPERTY_CAMERACONTROL_PAN_RELATIVE = 10;
export const KSPROPERTY_CAMERACONTROL_TILT_RELATIVE = 11;
export const KSPROPERTY_CAMERACONTROL_ROLL_RELATIVE = 12;
export const KSPROPERTY_CAMERACONTROL_ZOOM_RELATIVE = 13;
export const KSPROPERTY_CAMERACONTROL_EXPOSURE_RELATIVE = 14;
export const KSPROPERTY_CAMERACONTROL_IRIS_RELATIVE = 15;
export const KSPROPERTY_CAMERACONTROL_FOCUS_RELATIVE = 16;
export const KSPROPERTY_CAMERACONTROL_PANTILT_RELATIVE = 17;
export const KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH = 18;
export const KSPROPERTY_CAMERACONTROL_AUTO_EXPOSURE_PRIORITY = 19;
export const KS_CAMERACONTROL_ASYNC_START = 1;
export const KS_CAMERACONTROL_ASYNC_STOP = 2;
export const KS_CAMERACONTROL_ASYNC_RESET = 3;
export const KSPROPERTY_CAMERACONTROL_FLASH_PROPERTY_ID = 0;
export const KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE_PROPERTY_ID = 0;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_PROPERTY_ID = 0;
export const KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_PROPERTY_ID = 0;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMODE = 0;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOFRAMERATE = 1;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMAXFRAMERATE = 2;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTRIGGERTIME = 3;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_WARMSTART = 4;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_MAXVIDFPS_PHOTORES = 5;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTHUMBNAIL = 6;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_SCENEMODE = 7;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_TORCHMODE = 8;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FLASHMODE = 9;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_OPTIMIZATIONHINT = 10;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_WHITEBALANCEMODE = 11;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_EXPOSUREMODE = 12;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSMODE = 13;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ISO = 14;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FIELDOFVIEW = 15;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_EVCOMPENSATION = 16;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_CAMERAANGLEOFFSET = 17;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_METADATA = 18;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSPRIORITY = 19;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSSTATE = 20;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_CONFIGCAPS = 21;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_ISPCONTROL = 22;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOCONFIRMATION = 23;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ZOOM = 24;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_MCC = 25;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ISO_ADVANCED = 26;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOSTABILIZATION = 27;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_VFR = 28;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FACEDETECTION = 29;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOHDR = 30;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_HISTOGRAM = 31;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_OIS = 32;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ADVANCEDPHOTO = 33;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PROFILE = 34;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FACEAUTH_MODE = 35;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_SECURE_MODE = 36;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOTEMPORALDENOISING = 37;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_IRTORCHMODE = 38;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_RELATIVEPANELOPTIMIZATION = 39;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_EYEGAZECORRECTION = 40;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_BACKGROUNDSEGMENTATION = 41;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_DIGITALWINDOW_CONFIGCAPS = 42;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_DIGITALWINDOW = 43;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_END = 44;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_END2 = 44;
export const KSEVENT_PHOTO_SAMPLE_SCANNED = 0;
export const KSCAMERA_EXTENDEDPROP_WHITEBALANCE_TEMPERATURE = 1;
export const KSCAMERA_EXTENDEDPROP_WHITEBALANCE_PRESET = 2;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_CLOUDY = 1;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_DAYLIGHT = 2;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_FLASH = 3;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_FLUORESCENT = 4;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_TUNGSTEN = 5;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_CANDLELIGHT = 6;
export const KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_CLEAR = 0;
export const KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_SET = 1;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_16 = 4;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_32 = 5;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_64 = 6;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_128 = 7;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_256 = 8;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_512 = 9;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_1024 = 10;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_2048 = 11;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_4096 = 12;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_8192 = 13;
export const MetadataId_Standard_Start = 1;
export const MetadataId_PhotoConfirmation = 1;
export const MetadataId_UsbVideoHeader = 2;
export const MetadataId_CaptureStats = 3;
export const MetadataId_CameraExtrinsics = 4;
export const MetadataId_CameraIntrinsics = 5;
export const MetadataId_FrameIllumination = 6;
export const MetadataId_DigitalWindow = 7;
export const MetadataId_BackgroundSegmentationMask = 8;
export const MetadataId_Standard_End = 8;
export const MetadataId_Custom_Start = "-2147483648";
export const KSCAMERA_EXTENDEDPROP_FOCUSSTATE_UNINITIALIZED = 0;
export const KSCAMERA_EXTENDEDPROP_FOCUSSTATE_LOST = 1;
export const KSCAMERA_EXTENDEDPROP_FOCUSSTATE_SEARCHING = 2;
export const KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FOCUSED = 3;
export const KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FAILED = 4;
export const KSCAMERA_EXTENDEDPROP_ROITYPE_UNKNOWN = 0;
export const KSCAMERA_EXTENDEDPROP_ROITYPE_FACE = 1;
export const KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CAPABILITY = 0;
export const KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_SET = 1;
export const KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CLEAR = 2;
export const KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_TIME = 1;
export const KSCAMERA_PERFRAMESETTING_ITEM_FLASH = 2;
export const KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_COMPENSATION = 3;
export const KSCAMERA_PERFRAMESETTING_ITEM_ISO = 4;
export const KSCAMERA_PERFRAMESETTING_ITEM_FOCUS = 5;
export const KSCAMERA_PERFRAMESETTING_ITEM_PHOTOCONFIRMATION = 6;
export const KSCAMERA_PERFRAMESETTING_ITEM_CUSTOM = 7;
export const KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE_DISABLE = 0;
export const KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE_HOSTNTP = 1;
export const KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE_CUSTOM = 2;
export const KSPROPERTY_NETWORKCAMERACONTROL_NTP = 0;
export const KSPROPERTY_NETWORKCAMERACONTROL_URI = 1;
export const KSPROPERTY_NETWORKCAMERACONTROL_METADATA = 2;
export const KSPROPERTY_NETWORKCAMERACONTROL_EVENTTOPICS_XML = 3;
export const KSPROPERTY_NETWORKCAMERACONTROL_METADATA_TYPE_EVENTSINFO = 0;
export const KSPROPERTY_EXTDEVICE_ID = 0;
export const KSPROPERTY_EXTDEVICE_VERSION = 1;
export const KSPROPERTY_EXTDEVICE_POWER_STATE = 2;
export const KSPROPERTY_EXTDEVICE_PORT = 3;
export const KSPROPERTY_EXTDEVICE_CAPABILITIES = 4;
export const KSPROPERTY_EXTXPORT_CAPABILITIES = 0;
export const KSPROPERTY_EXTXPORT_INPUT_SIGNAL_MODE = 1;
export const KSPROPERTY_EXTXPORT_OUTPUT_SIGNAL_MODE = 2;
export const KSPROPERTY_EXTXPORT_LOAD_MEDIUM = 3;
export const KSPROPERTY_EXTXPORT_MEDIUM_INFO = 4;
export const KSPROPERTY_EXTXPORT_STATE = 5;
export const KSPROPERTY_EXTXPORT_STATE_NOTIFY = 6;
export const KSPROPERTY_EXTXPORT_TIMECODE_SEARCH = 7;
export const KSPROPERTY_EXTXPORT_ATN_SEARCH = 8;
export const KSPROPERTY_EXTXPORT_RTC_SEARCH = 9;
export const KSPROPERTY_RAW_AVC_CMD = 10;
export const KSPROPERTY_TIMECODE_READER = 0;
export const KSPROPERTY_ATN_READER = 1;
export const KSPROPERTY_RTC_READER = 2;
export const KSEVENT_EXTDEV_COMMAND_NOTIFY_INTERIM_READY = 0;
export const KSEVENT_EXTDEV_COMMAND_CONTROL_INTERIM_READY = 1;
export const KSEVENT_EXTDEV_COMMAND_BUSRESET = 2;
export const KSEVENT_EXTDEV_TIMECODE_UPDATE = 3;
export const KSEVENT_EXTDEV_OPERATION_MODE_UPDATE = 4;
export const KSEVENT_EXTDEV_TRANSPORT_STATE_UPDATE = 5;
export const KSEVENT_EXTDEV_NOTIFY_REMOVAL = 6;
export const KSEVENT_EXTDEV_NOTIFY_MEDIUM_CHANGE = 7;
export const KSPROPERTY_CROSSBAR_CAPS = 0;
export const KSPROPERTY_CROSSBAR_PININFO = 1;
export const KSPROPERTY_CROSSBAR_CAN_ROUTE = 2;
export const KSPROPERTY_CROSSBAR_ROUTE = 3;
export const KSPROPERTY_CROSSBAR_INPUT_ACTIVE = 4;
export const KSEVENT_CROSSBAR_CHANGED = 0;
export const KS_PhysConn_Video_Tuner = 1;
export const KS_PhysConn_Video_Composite = 2;
export const KS_PhysConn_Video_SVideo = 3;
export const KS_PhysConn_Video_RGB = 4;
export const KS_PhysConn_Video_YRYBY = 5;
export const KS_PhysConn_Video_SerialDigital = 6;
export const KS_PhysConn_Video_ParallelDigital = 7;
export const KS_PhysConn_Video_SCSI = 8;
export const KS_PhysConn_Video_AUX = 9;
export const KS_PhysConn_Video_1394 = 10;
export const KS_PhysConn_Video_USB = 11;
export const KS_PhysConn_Video_VideoDecoder = 12;
export const KS_PhysConn_Video_VideoEncoder = 13;
export const KS_PhysConn_Video_SCART = 14;
export const KS_PhysConn_Audio_Tuner = 4096;
export const KS_PhysConn_Audio_Line = 4097;
export const KS_PhysConn_Audio_Mic = 4098;
export const KS_PhysConn_Audio_AESDigital = 4099;
export const KS_PhysConn_Audio_SPDIFDigital = 4100;
export const KS_PhysConn_Audio_SCSI = 4101;
export const KS_PhysConn_Audio_AUX = 4102;
export const KS_PhysConn_Audio_1394 = 4103;
export const KS_PhysConn_Audio_USB = 4104;
export const KS_PhysConn_Audio_AudioDecoder = 4105;
export const KSPROPERTY_TVAUDIO_CAPS = 0;
export const KSPROPERTY_TVAUDIO_MODE = 1;
export const KSPROPERTY_TVAUDIO_CURRENTLY_AVAILABLE_MODES = 2;
export const KSEVENT_TVAUDIO_CHANGED = 0;
export const KSPROPERTY_VIDEOCOMPRESSION_GETINFO = 0;
export const KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE = 1;
export const KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME = 2;
export const KSPROPERTY_VIDEOCOMPRESSION_QUALITY = 3;
export const KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_KEYFRAME = 4;
export const KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_FRAME_SIZE = 5;
export const KSPROPERTY_VIDEOCOMPRESSION_WINDOWSIZE = 6;
export const KS_CompressionCaps_CanQuality = 1;
export const KS_CompressionCaps_CanCrunch = 2;
export const KS_CompressionCaps_CanKeyFrame = 4;
export const KS_CompressionCaps_CanBFrame = 8;
export const KS_CompressionCaps_CanWindow = 16;
export const KS_StreamingHint_FrameInterval = 256;
export const KS_StreamingHint_KeyFrameRate = 512;
export const KS_StreamingHint_PFrameRate = 1024;
export const KS_StreamingHint_CompQuality = 2048;
export const KS_StreamingHint_CompWindowSize = 4096;
export const KSPROPERTY_OVERLAYUPDATE_INTERESTS = 0;
export const KSPROPERTY_OVERLAYUPDATE_CLIPLIST = 1;
export const KSPROPERTY_OVERLAYUPDATE_PALETTE = 2;
export const KSPROPERTY_OVERLAYUPDATE_COLORKEY = 4;
export const KSPROPERTY_OVERLAYUPDATE_VIDEOPOSITION = 8;
export const KSPROPERTY_OVERLAYUPDATE_DISPLAYCHANGE = 16;
export const KSPROPERTY_OVERLAYUPDATE_COLORREF = 268435456;
export const KSPROPERTY_VIDEOCONTROL_CAPS = 0;
export const KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE = 1;
export const KSPROPERTY_VIDEOCONTROL_FRAME_RATES = 2;
export const KSPROPERTY_VIDEOCONTROL_MODE = 3;
export const KS_VideoControlFlag_FlipHorizontal = 1;
export const KS_VideoControlFlag_FlipVertical = 2;
export const KS_Obsolete_VideoControlFlag_ExternalTriggerEnable = 16;
export const KS_Obsolete_VideoControlFlag_Trigger = 32;
export const KS_VideoControlFlag_ExternalTriggerEnable = 4;
export const KS_VideoControlFlag_Trigger = 8;
export const KS_VideoControlFlag_IndependentImagePin = 64;
export const KS_VideoControlFlag_StillCapturePreviewFrame = 128;
export const KS_VideoControlFlag_StartPhotoSequenceCapture = 256;
export const KS_VideoControlFlag_StopPhotoSequenceCapture = 512;
export const KSPROPERTY_DROPPEDFRAMES_CURRENT = 0;
export const KSPROPERTY_VPCONFIG_NUMCONNECTINFO = 0;
export const KSPROPERTY_VPCONFIG_GETCONNECTINFO = 1;
export const KSPROPERTY_VPCONFIG_SETCONNECTINFO = 2;
export const KSPROPERTY_VPCONFIG_VPDATAINFO = 3;
export const KSPROPERTY_VPCONFIG_MAXPIXELRATE = 4;
export const KSPROPERTY_VPCONFIG_INFORMVPINPUT = 5;
export const KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT = 6;
export const KSPROPERTY_VPCONFIG_GETVIDEOFORMAT = 7;
export const KSPROPERTY_VPCONFIG_SETVIDEOFORMAT = 8;
export const KSPROPERTY_VPCONFIG_INVERTPOLARITY = 9;
export const KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY = 10;
export const KSPROPERTY_VPCONFIG_SCALEFACTOR = 11;
export const KSPROPERTY_VPCONFIG_DDRAWHANDLE = 12;
export const KSPROPERTY_VPCONFIG_VIDEOPORTID = 13;
export const KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE = 14;
export const KSPROPERTY_VPCONFIG_SURFACEPARAMS = 15;
export const KS_PixAspectRatio_NTSC4x3 = 0;
export const KS_PixAspectRatio_NTSC16x9 = 1;
export const KS_PixAspectRatio_PAL4x3 = 2;
export const KS_PixAspectRatio_PAL16x9 = 3;
export const KS_AMVP_DO_NOT_CARE = 0;
export const KS_AMVP_BEST_BANDWIDTH = 1;
export const KS_AMVP_INPUT_SAME_AS_OUTPUT = 2;
export const KS_AMVP_MODE_WEAVE = 0;
export const KS_AMVP_MODE_BOBINTERLEAVED = 1;
export const KS_AMVP_MODE_BOBNONINTERLEAVED = 2;
export const KS_AMVP_MODE_SKIPEVEN = 3;
export const KS_AMVP_MODE_SKIPODD = 4;
export const KSEVENT_VPNOTIFY_FORMATCHANGE = 0;
export const KSEVENT_VIDCAPTOSTI_EXT_TRIGGER = 0;
export const KSEVENT_VIDCAP_AUTO_UPDATE = 1;
export const KSEVENT_VIDCAP_SEARCH = 2;
export const KSPROPERTY_EXTENSION_UNIT_INFO = 0;
export const KSPROPERTY_EXTENSION_UNIT_CONTROL = 1;
export const KSPROPERTY_EXTENSION_UNIT_PASS_THROUGH = 65535;
export const KSEVENT_VPVBINOTIFY_FORMATCHANGE = 0;
export const KS_AM_RATE_SimpleRateChange = 1;
export const KS_AM_RATE_ExactRateChange = 2;
export const KS_AM_RATE_MaxFullDataRate = 3;
export const KS_AM_RATE_Step = 4;
export const KSPROPERTY_JACK_DESCRIPTION = 1;
export const KSPROPERTY_JACK_DESCRIPTION2 = 2;
export const KSPROPERTY_JACK_SINK_INFO = 3;
export const KSPROPERTY_JACK_CONTAINERID = 4;
export const eConnTypeUnknown = 0;
export const eConnType3Point5mm = 1;
export const eConnTypeQuarter = 2;
export const eConnTypeAtapiInternal = 3;
export const eConnTypeRCA = 4;
export const eConnTypeOptical = 5;
export const eConnTypeOtherDigital = 6;
export const eConnTypeOtherAnalog = 7;
export const eConnTypeMultichannelAnalogDIN = 8;
export const eConnTypeXlrProfessional = 9;
export const eConnTypeRJ11Modem = 10;
export const eConnTypeCombination = 11;
export const eGeoLocRear = 1;
export const eGeoLocFront = 2;
export const eGeoLocLeft = 3;
export const eGeoLocRight = 4;
export const eGeoLocTop = 5;
export const eGeoLocBottom = 6;
export const eGeoLocRearPanel = 7;
export const eGeoLocRiser = 8;
export const eGeoLocInsideMobileLid = 9;
export const eGeoLocDrivebay = 10;
export const eGeoLocHDMI = 11;
export const eGeoLocOutsideMobileLid = 12;
export const eGeoLocATAPI = 13;
export const eGeoLocNotApplicable = 14;
export const eGeoLocReserved6 = 15;
export const EPcxGeoLocation_enum_count = 16;
export const eGenLocPrimaryBox = 0;
export const eGenLocInternal = 1;
export const eGenLocSeparate = 2;
export const eGenLocOther = 3;
export const EPcxGenLocation_enum_count = 4;
export const ePortConnJack = 0;
export const ePortConnIntegratedDevice = 1;
export const ePortConnBothIntegratedAndJack = 2;
export const ePortConnUnknown = 3;
export const KSJACK_SINK_CONNECTIONTYPE_HDMI = 0;
export const KSJACK_SINK_CONNECTIONTYPE_DISPLAYPORT = 1;
export const KSPROPERTY_AUDIOPOSTURE_ORIENTATION = 1;
export const AUDIOPOSTURE_ORIENTATION_NOTROTATED = 0;
export const AUDIOPOSTURE_ORIENTATION_ROTATED90DEGREESCOUNTERCLOCKWISE = 1;
export const AUDIOPOSTURE_ORIENTATION_ROTATED180DEGREESCOUNTERCLOCKWISE = 2;
export const AUDIOPOSTURE_ORIENTATION_ROTATED270DEGREESCOUNTERCLOCKWISE = 3;
export const KSPROPERTY_AUDIOENGINE_LFXENABLE = 0;
export const KSPROPERTY_AUDIOENGINE_GFXENABLE = 1;
export const KSPROPERTY_AUDIOENGINE_MIXFORMAT = 2;
export const KSPROPERTY_AUDIOENGINE_DEVICEFORMAT = 4;
export const KSPROPERTY_AUDIOENGINE_SUPPORTEDDEVICEFORMATS = 5;
export const KSPROPERTY_AUDIOENGINE_DESCRIPTOR = 6;
export const KSPROPERTY_AUDIOENGINE_BUFFER_SIZE_RANGE = 7;
export const KSPROPERTY_AUDIOENGINE_LOOPBACK_PROTECTION = 8;
export const KSPROPERTY_AUDIOENGINE_VOLUMELEVEL = 9;
export const AUDIO_CURVE_TYPE_NONE = 0;
export const AUDIO_CURVE_TYPE_WINDOWS_FADE = 1;
export const KSPROPERTY_AUDIOSIGNALPROCESSING_MODES = 0;
export const KSPROPERTY_AUDIORESOURCEMANAGEMENT_RESOURCEGROUP = 0;
export const KSPROPERTY_AUDIOMODULE_DESCRIPTORS = 1;
export const KSPROPERTY_AUDIOMODULE_COMMAND = 2;
export const KSPROPERTY_AUDIOMODULE_NOTIFICATION_DEVICE_ID = 3;
export const KsAllocatorMode_User = 0;
export const KsAllocatorMode_Kernel = 1;
export const FramingProp_Uninitialized = 0;
export const FramingProp_None = 1;
export const FramingProp_Old = 2;
export const FramingProp_Ex = 3;
export const Framing_Cache_Update = 0;
export const Framing_Cache_ReadLast = 1;
export const Framing_Cache_ReadOrig = 2;
export const Framing_Cache_Write = 3;
export const PipeState_DontCare = 0;
export const PipeState_RangeNotFixed = 1;
export const PipeState_RangeFixed = 2;
export const PipeState_CompressionUnknown = 3;
export const PipeState_Finalized = 4;
export const Pipe_Allocator_None = 0;
export const Pipe_Allocator_FirstPin = 1;
export const Pipe_Allocator_LastPin = 2;
export const Pipe_Allocator_MiddlePin = 3;
export const KS_MemoryTypeDontCare = 0;
export const KS_MemoryTypeKernelPaged = 1;
export const KS_MemoryTypeKernelNonPaged = 2;
export const KS_MemoryTypeDeviceHostMapped = 3;
export const KS_MemoryTypeDeviceSpecific = 4;
export const KS_MemoryTypeUser = 5;
export const KS_MemoryTypeAnyHost = 6;
export const ConstantBitRate = 0;
export const VariableBitRateAverage = 1;
export const VariableBitRatePeak = 2;
export const D3D12_VIDEO_FIELD_TYPE_NONE = 0;
export const D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST = 1;
export const D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST = 2;
export const D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE = 0;
export const D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO = 1;
export const D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL = 2;
export const D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL = 3;
export const D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE = 4;
export const DXGI_FORMAT_UNKNOWN = 0;
export const DXGI_FORMAT_R32G32B32A32_TYPELESS = 1;
export const DXGI_FORMAT_R32G32B32A32_FLOAT = 2;
export const DXGI_FORMAT_R32G32B32A32_UINT = 3;
export const DXGI_FORMAT_R32G32B32A32_SINT = 4;
export const DXGI_FORMAT_R32G32B32_TYPELESS = 5;
export const DXGI_FORMAT_R32G32B32_FLOAT = 6;
export const DXGI_FORMAT_R32G32B32_UINT = 7;
export const DXGI_FORMAT_R32G32B32_SINT = 8;
export const DXGI_FORMAT_R16G16B16A16_TYPELESS = 9;
export const DXGI_FORMAT_R16G16B16A16_FLOAT = 10;
export const DXGI_FORMAT_R16G16B16A16_UNORM = 11;
export const DXGI_FORMAT_R16G16B16A16_UINT = 12;
export const DXGI_FORMAT_R16G16B16A16_SNORM = 13;
export const DXGI_FORMAT_R16G16B16A16_SINT = 14;
export const DXGI_FORMAT_R32G32_TYPELESS = 15;
export const DXGI_FORMAT_R32G32_FLOAT = 16;
export const DXGI_FORMAT_R32G32_UINT = 17;
export const DXGI_FORMAT_R32G32_SINT = 18;
export const DXGI_FORMAT_R32G8X24_TYPELESS = 19;
export const DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20;
export const DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21;
export const DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22;
export const DXGI_FORMAT_R10G10B10A2_TYPELESS = 23;
export const DXGI_FORMAT_R10G10B10A2_UNORM = 24;
export const DXGI_FORMAT_R10G10B10A2_UINT = 25;
export const DXGI_FORMAT_R11G11B10_FLOAT = 26;
export const DXGI_FORMAT_R8G8B8A8_TYPELESS = 27;
export const DXGI_FORMAT_R8G8B8A8_UNORM = 28;
export const DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29;
export const DXGI_FORMAT_R8G8B8A8_UINT = 30;
export const DXGI_FORMAT_R8G8B8A8_SNORM = 31;
export const DXGI_FORMAT_R8G8B8A8_SINT = 32;
export const DXGI_FORMAT_R16G16_TYPELESS = 33;
export const DXGI_FORMAT_R16G16_FLOAT = 34;
export const DXGI_FORMAT_R16G16_UNORM = 35;
export const DXGI_FORMAT_R16G16_UINT = 36;
export const DXGI_FORMAT_R16G16_SNORM = 37;
export const DXGI_FORMAT_R16G16_SINT = 38;
export const DXGI_FORMAT_R32_TYPELESS = 39;
export const DXGI_FORMAT_D32_FLOAT = 40;
export const DXGI_FORMAT_R32_FLOAT = 41;
export const DXGI_FORMAT_R32_UINT = 42;
export const DXGI_FORMAT_R32_SINT = 43;
export const DXGI_FORMAT_R24G8_TYPELESS = 44;
export const DXGI_FORMAT_D24_UNORM_S8_UINT = 45;
export const DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46;
export const DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47;
export const DXGI_FORMAT_R8G8_TYPELESS = 48;
export const DXGI_FORMAT_R8G8_UNORM = 49;
export const DXGI_FORMAT_R8G8_UINT = 50;
export const DXGI_FORMAT_R8G8_SNORM = 51;
export const DXGI_FORMAT_R8G8_SINT = 52;
export const DXGI_FORMAT_R16_TYPELESS = 53;
export const DXGI_FORMAT_R16_FLOAT = 54;
export const DXGI_FORMAT_D16_UNORM = 55;
export const DXGI_FORMAT_R16_UNORM = 56;
export const DXGI_FORMAT_R16_UINT = 57;
export const DXGI_FORMAT_R16_SNORM = 58;
export const DXGI_FORMAT_R16_SINT = 59;
export const DXGI_FORMAT_R8_TYPELESS = 60;
export const DXGI_FORMAT_R8_UNORM = 61;
export const DXGI_FORMAT_R8_UINT = 62;
export const DXGI_FORMAT_R8_SNORM = 63;
export const DXGI_FORMAT_R8_SINT = 64;
export const DXGI_FORMAT_A8_UNORM = 65;
export const DXGI_FORMAT_R1_UNORM = 66;
export const DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67;
export const DXGI_FORMAT_R8G8_B8G8_UNORM = 68;
export const DXGI_FORMAT_G8R8_G8B8_UNORM = 69;
export const DXGI_FORMAT_BC1_TYPELESS = 70;
export const DXGI_FORMAT_BC1_UNORM = 71;
export const DXGI_FORMAT_BC1_UNORM_SRGB = 72;
export const DXGI_FORMAT_BC2_TYPELESS = 73;
export const DXGI_FORMAT_BC2_UNORM = 74;
export const DXGI_FORMAT_BC2_UNORM_SRGB = 75;
export const DXGI_FORMAT_BC3_TYPELESS = 76;
export const DXGI_FORMAT_BC3_UNORM = 77;
export const DXGI_FORMAT_BC3_UNORM_SRGB = 78;
export const DXGI_FORMAT_BC4_TYPELESS = 79;
export const DXGI_FORMAT_BC4_UNORM = 80;
export const DXGI_FORMAT_BC4_SNORM = 81;
export const DXGI_FORMAT_BC5_TYPELESS = 82;
export const DXGI_FORMAT_BC5_UNORM = 83;
export const DXGI_FORMAT_BC5_SNORM = 84;
export const DXGI_FORMAT_B5G6R5_UNORM = 85;
export const DXGI_FORMAT_B5G5R5A1_UNORM = 86;
export const DXGI_FORMAT_B8G8R8A8_UNORM = 87;
export const DXGI_FORMAT_B8G8R8X8_UNORM = 88;
export const DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89;
export const DXGI_FORMAT_B8G8R8A8_TYPELESS = 90;
export const DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91;
export const DXGI_FORMAT_B8G8R8X8_TYPELESS = 92;
export const DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93;
export const DXGI_FORMAT_BC6H_TYPELESS = 94;
export const DXGI_FORMAT_BC6H_UF16 = 95;
export const DXGI_FORMAT_BC6H_SF16 = 96;
export const DXGI_FORMAT_BC7_TYPELESS = 97;
export const DXGI_FORMAT_BC7_UNORM = 98;
export const DXGI_FORMAT_BC7_UNORM_SRGB = 99;
export const DXGI_FORMAT_AYUV = 100;
export const DXGI_FORMAT_Y410 = 101;
export const DXGI_FORMAT_Y416 = 102;
export const DXGI_FORMAT_NV12 = 103;
export const DXGI_FORMAT_P010 = 104;
export const DXGI_FORMAT_P016 = 105;
export const DXGI_FORMAT_420_OPAQUE = 106;
export const DXGI_FORMAT_YUY2 = 107;
export const DXGI_FORMAT_Y210 = 108;
export const DXGI_FORMAT_Y216 = 109;
export const DXGI_FORMAT_NV11 = 110;
export const DXGI_FORMAT_AI44 = 111;
export const DXGI_FORMAT_IA44 = 112;
export const DXGI_FORMAT_P8 = 113;
export const DXGI_FORMAT_A8P8 = 114;
export const DXGI_FORMAT_B4G4R4A4_UNORM = 115;
export const DXGI_FORMAT_P208 = 130;
export const DXGI_FORMAT_V208 = 131;
export const DXGI_FORMAT_V408 = 132;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190;
export const DXGI_FORMAT_FORCE_UINT = 4294967295;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0;
export const DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3;
export const DXGI_COLOR_SPACE_RESERVED = 4;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11;
export const DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020 = 18;
export const DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020 = 19;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P709 = 20;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P2020 = 21;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P709 = 22;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P2020 = 23;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_TOPLEFT_P2020 = 24;
export const DXGI_COLOR_SPACE_CUSTOM = "-1";
export const D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE = 0;
export const D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED = 1;
export const D3D12_FEATURE_VIDEO_DECODE_SUPPORT = 0;
export const D3D12_FEATURE_VIDEO_DECODE_PROFILES = 1;
export const D3D12_FEATURE_VIDEO_DECODE_FORMATS = 2;
export const D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT = 3;
export const D3D12_FEATURE_VIDEO_PROCESS_SUPPORT = 5;
export const D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS = 6;
export const D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO = 7;
export const D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE = 8;
export const D3D12_FEATURE_VIDEO_PROCESSOR_SIZE = 9;
export const D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT = 10;
export const D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT = 11;
export const D3D12_FEATURE_VIDEO_ARCHITECTURE = 17;
export const D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM = 18;
export const D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT = 19;
export const D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR = 20;
export const D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE = 21;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT = 22;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS = 23;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = 24;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS = 25;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT = 26;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE = 27;
export const D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES = 28;
export const D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES = 29;
export const D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = 30;
export const D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1 = 31;
export const D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1 = 32;
export const D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE = 0;
export const D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS = 0;
export const D3D12_VIDEO_PROCESS_FILTER_CONTRAST = 1;
export const D3D12_VIDEO_PROCESS_FILTER_HUE = 2;
export const D3D12_VIDEO_PROCESS_FILTER_SATURATION = 3;
export const D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION = 4;
export const D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT = 5;
export const D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING = 6;
export const D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT = 7;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS = 1;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST = 2;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE = 4;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION = 8;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION = 16;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT = 32;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING = 64;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT = 128;
export const D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB = 1;
export const D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM = 2147483648;
export const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE = 0;
export const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND = 1;
export const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION = 2;
export const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM = 3;
export const D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED = 0;
export const D3D12_VIDEO_DECODE_TIER_1 = 1;
export const D3D12_VIDEO_DECODE_TIER_2 = 2;
export const D3D12_VIDEO_DECODE_TIER_3 = 3;
export const D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED = 1;
export const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE = 0;
export const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED = 1;
export const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED = 2;
export const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED = 4;
export const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME = 8;
export const D3D12_VIDEO_DECODE_STATUS_OK = 0;
export const D3D12_VIDEO_DECODE_STATUS_CONTINUE = 1;
export const D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY = 2;
export const D3D12_VIDEO_DECODE_STATUS_RESTART = 3;
export const D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED = 4;
export const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS = 0;
export const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX = 1;
export const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL = 2;
export const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID = 3;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y = 0;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U = 1;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V = 2;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R = 0;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G = 1;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B = 2;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A = 3;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE = 0;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y = 1;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U = 2;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V = 4;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R = 1;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G = 2;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B = 4;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A = 8;
export const D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED = 1;
export const D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY = 1;
export const D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY = 2;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL = 1;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY = 2;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO = 4;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION = 8;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP = 16;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING = 32;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO = 64;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE = 1;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING = 2;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT = 4;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION = 8;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING = 16;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION = 32;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION = 64;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING = 128;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM = 2147483648;
export const D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT = 0;
export const D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL = 1;
export const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90 = 2;
export const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL = 3;
export const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180 = 4;
export const D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL = 5;
export const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270 = 6;
export const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL = 7;
export const D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY = 1;
export const D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT = 2;
export const D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED = 1;
export const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8 = 0;
export const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16 = 1;
export const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE = 0;
export const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8 = 1;
export const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16 = 2;
export const D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL = 0;
export const D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE = 0;
export const D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL = 1;
export const D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED = 1;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION = 0;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION = 2;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT = 3;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT = 4;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT = 5;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT = 6;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8 = 0;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16 = 1;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32 = 2;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64 = 3;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8 = 4;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16 = 5;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32 = 6;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64 = 7;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT = 8;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE = 9;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE = 10;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE = 0;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ = 1;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE = 2;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE = 0;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT = 1;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE = 2;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE = 4;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY = 8;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE = 16;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS = 32;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE = 64;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP = 0;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP = 1;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR = 2;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR = 3;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR = 4;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP = 1;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS = 2;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE = 4;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP = 8;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE = 16;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES = 32;
export const D3D12_VIDEO_ENCODER_CODEC_H264 = 0;
export const D3D12_VIDEO_ENCODER_CODEC_HEVC = 1;
export const D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN = 0;
export const D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH = 1;
export const D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10 = 2;
export const D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN = 0;
export const D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10 = 1;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_1 = 0;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_1b = 1;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_11 = 2;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_12 = 3;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_13 = 4;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_2 = 5;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_21 = 6;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_22 = 7;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_3 = 8;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_31 = 9;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_32 = 10;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_4 = 11;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_41 = 12;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_42 = 13;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_5 = 14;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_51 = 15;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_52 = 16;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_6 = 17;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_61 = 18;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_62 = 19;
export const D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN = 0;
export const D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH = 1;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_1 = 0;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_2 = 1;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_21 = 2;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_3 = 3;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_31 = 4;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_4 = 5;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_41 = 6;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_5 = 7;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_51 = 8;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_52 = 9;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_6 = 10;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_61 = 11;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_62 = 12;
export const D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE = 0;
export const D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED = 1;
export const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME = 0;
export const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION = 1;
export const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED = 2;
export const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION = 3;
export const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME = 4;
export const D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT = 8;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT = 16;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT = 32;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 64;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING = 3;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 5;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 6;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING = 8;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES = 16;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 32;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 64;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT = 8;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT = 16;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED = 32;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT = 64;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT = 128;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES = 256;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8 = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16 = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32 = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64 = 3;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4 = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8 = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16 = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32 = 3;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK = 1;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE = 2;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE = 4;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE = 8;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE = 16;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS = 32;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE = 64;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE = 128;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE = 256;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE = 512;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE = 1024;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE = 2048;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE = 4096;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 8;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES = 8;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION = 16;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING = 32;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 64;
export const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM = 0;
export const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL = 1;
export const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL = 2;
export const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL = 3;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED = 1;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED = 8;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED = 16;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED = 32;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED = 64;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED = 128;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED = 256;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST = 512;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED = 2048;
export const D3D12_VIDEO_ENCODER_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME = 0;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME = 1;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME = 2;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME = 3;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME = 0;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME = 1;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME = 2;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME = 3;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE = 1;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE = 1;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE = 2;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE = 4;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH = 8;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE = 16;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR = 0;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED = 1;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED = 2;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES = 4;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED = 8;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE = 16;
export const WMT_PROP_TYPE_DWORD = 0;
export const WMT_PROP_TYPE_STRING = 1;
export const WMT_PROP_TYPE_BINARY = 2;
export const WMT_PROP_TYPE_BOOL = 3;
export const WMT_PROP_TYPE_QWORD = 4;
export const WMT_PROP_TYPE_WORD = 5;
export const WMT_PROP_TYPE_GUID = 6;
export const WMV_DYNAMIC_BITRATE = 1;
export const WMV_DYNAMIC_RESOLUTION = 2;
export const WMV_DYNAMIC_COMPLEXITY = 4;
export const VRHP_SMALLROOM = 0;
export const VRHP_MEDIUMROOM = 1;
export const VRHP_BIGROOM = 2;
export const VRHP_CUSTUMIZEDROOM = 3;
export const SINGLE_CHANNEL_AEC = 0;
export const ADAPTIVE_ARRAY_ONLY = 1;
export const OPTIBEAM_ARRAY_ONLY = 2;
export const ADAPTIVE_ARRAY_AND_AEC = 3;
export const OPTIBEAM_ARRAY_AND_AEC = 4;
export const SINGLE_CHANNEL_NSAGC = 5;
export const MODE_NOT_SET = 6;
export const AEC_VAD_DISABLED = 0;
export const AEC_VAD_NORMAL = 1;
export const AEC_VAD_FOR_AGC = 2;
export const AEC_VAD_FOR_SILENCE_SUPPRESSION = 3;
export const AEC_CAPTURE_STREAM = 0;
export const AEC_REFERENCE_STREAM = 1;
export const MICARRAY_SINGLE_CHAN = 0;
export const MICARRAY_SIMPLE_SUM = 256;
export const MICARRAY_SINGLE_BEAM = 512;
export const MICARRAY_FIXED_BEAM = 1024;
export const MICARRAY_EXTERN_BEAM = 2048;
export const MFVideoDSPMode_Passthrough = 1;
export const MFVideoDSPMode_Stabilization = 4;
export const TOC_POS_INHEADER = 0;
export const TOC_POS_TOPLEVELOBJECT = 1;
export const OPENMODE_FAIL_IF_NOT_EXIST = 0;
export const OPENMODE_FAIL_IF_EXIST = 1;
export const OPENMODE_RESET_IF_EXIST = 2;
export const OPENMODE_APPEND_IF_EXIST = 3;
export const OPENMODE_DELETE_IF_EXIST = 4;
export const _msoBegin = 0;
export const _msoCurrent = 1;
export const ACCESSMODE_READ = 1;
export const ACCESSMODE_WRITE = 2;
export const ACCESSMODE_READWRITE = 3;
export const ACCESSMODE_WRITE_EXCLUSIVE = 4;
export const DXVA_SampleFormatMask = 255;
export const DXVA_SampleUnknown = 0;
export const DXVA_SamplePreviousFrame = 1;
export const DXVA_SampleProgressiveFrame = 2;
export const DXVA_SampleFieldInterleavedEvenFirst = 3;
export const DXVA_SampleFieldInterleavedOddFirst = 4;
export const DXVA_SampleFieldSingleEven = 5;
export const DXVA_SampleFieldSingleOdd = 6;
export const DXVA_SampleSubStream = 7;
export const DXVA_VideoTransFuncShift = 27;
export const DXVA_VideoTransFuncMask = "-134217728";
export const DXVA_VideoTransFunc_Unknown = 0;
export const DXVA_VideoTransFunc_10 = 1;
export const DXVA_VideoTransFunc_18 = 2;
export const DXVA_VideoTransFunc_20 = 3;
export const DXVA_VideoTransFunc_22 = 4;
export const DXVA_VideoTransFunc_22_709 = 5;
export const DXVA_VideoTransFunc_22_240M = 6;
export const DXVA_VideoTransFunc_22_8bit_sRGB = 7;
export const DXVA_VideoTransFunc_28 = 8;
export const DXVA_VideoPrimariesShift = 22;
export const DXVA_VideoPrimariesMask = 130023424;
export const DXVA_VideoPrimaries_Unknown = 0;
export const DXVA_VideoPrimaries_reserved = 1;
export const DXVA_VideoPrimaries_BT709 = 2;
export const DXVA_VideoPrimaries_BT470_2_SysM = 3;
export const DXVA_VideoPrimaries_BT470_2_SysBG = 4;
export const DXVA_VideoPrimaries_SMPTE170M = 5;
export const DXVA_VideoPrimaries_SMPTE240M = 6;
export const DXVA_VideoPrimaries_EBU3213 = 7;
export const DXVA_VideoPrimaries_SMPTE_C = 8;
export const DXVA_VideoLightingShift = 18;
export const DXVA_VideoLightingMask = 3932160;
export const DXVA_VideoLighting_Unknown = 0;
export const DXVA_VideoLighting_bright = 1;
export const DXVA_VideoLighting_office = 2;
export const DXVA_VideoLighting_dim = 3;
export const DXVA_VideoLighting_dark = 4;
export const DXVA_VideoTransferMatrixShift = 15;
export const DXVA_VideoTransferMatrixMask = 229376;
export const DXVA_VideoTransferMatrix_Unknown = 0;
export const DXVA_VideoTransferMatrix_BT709 = 1;
export const DXVA_VideoTransferMatrix_BT601 = 2;
export const DXVA_VideoTransferMatrix_SMPTE240M = 3;
export const DXVA_NominalRangeShift = 12;
export const DXVA_NominalRangeMask = 28672;
export const DXVA_NominalRange_Unknown = 0;
export const DXVA_NominalRange_Normal = 1;
export const DXVA_NominalRange_Wide = 2;
export const DXVA_NominalRange_0_255 = 1;
export const DXVA_NominalRange_16_235 = 2;
export const DXVA_NominalRange_48_208 = 3;
export const DXVA_VideoChromaSubsamplingShift = 8;
export const DXVA_VideoChromaSubsamplingMask = 3840;
export const DXVA_VideoChromaSubsampling_Unknown = 0;
export const DXVA_VideoChromaSubsampling_ProgressiveChroma = 8;
export const DXVA_VideoChromaSubsampling_Horizontally_Cosited = 4;
export const DXVA_VideoChromaSubsampling_Vertically_Cosited = 2;
export const DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1;
export const DXVA_VideoChromaSubsampling_MPEG2 = 5;
export const DXVA_VideoChromaSubsampling_MPEG1 = 1;
export const DXVA_VideoChromaSubsampling_DV_PAL = 6;
export const DXVA_VideoChromaSubsampling_Cosited = 7;
export const DXVA_VideoProcess_None = 0;
export const DXVA_VideoProcess_YUV2RGB = 1;
export const DXVA_VideoProcess_StretchX = 2;
export const DXVA_VideoProcess_StretchY = 4;
export const DXVA_VideoProcess_AlphaBlend = 8;
export const DXVA_VideoProcess_SubRects = 16;
export const DXVA_VideoProcess_SubStreams = 32;
export const DXVA_VideoProcess_SubStreamsExtended = 64;
export const DXVA_VideoProcess_YUV2RGBExtended = 128;
export const DXVA_VideoProcess_AlphaBlendExtended = 256;
export const DXVA_DeinterlaceTech_Unknown = 0;
export const DXVA_DeinterlaceTech_BOBLineReplicate = 1;
export const DXVA_DeinterlaceTech_BOBVerticalStretch = 2;
export const DXVA_DeinterlaceTech_BOBVerticalStretch4Tap = 256;
export const DXVA_DeinterlaceTech_MedianFiltering = 4;
export const DXVA_DeinterlaceTech_EdgeFiltering = 16;
export const DXVA_DeinterlaceTech_FieldAdaptive = 32;
export const DXVA_DeinterlaceTech_PixelAdaptive = 64;
export const DXVA_DeinterlaceTech_MotionVectorSteered = 128;
export const DXVA_SampleFlagsMask = 15;
export const DXVA_SampleFlag_Palette_Changed = 1;
export const DXVA_SampleFlag_SrcRect_Changed = 2;
export const DXVA_SampleFlag_DstRect_Changed = 4;
export const DXVA_SampleFlag_ColorData_Changed = 8;
export const DXVA_DestinationFlagMask = 15;
export const DXVA_DestinationFlag_Background_Changed = 1;
export const DXVA_DestinationFlag_TargetRect_Changed = 2;
export const DXVA_DestinationFlag_ColorData_Changed = 4;
export const DXVA_DestinationFlag_Alpha_Changed = 8;
export const DXVA_ProcAmp_None = 0;
export const DXVA_ProcAmp_Brightness = 1;
export const DXVA_ProcAmp_Contrast = 2;
export const DXVA_ProcAmp_Hue = 4;
export const DXVA_ProcAmp_Saturation = 8;
export const eAVEncCommonRateControlMode_CBR = 0;
export const eAVEncCommonRateControlMode_PeakConstrainedVBR = 1;
export const eAVEncCommonRateControlMode_UnconstrainedVBR = 2;
export const eAVEncCommonRateControlMode_Quality = 3;
export const eAVEncCommonRateControlMode_LowDelayVBR = 4;
export const eAVEncCommonRateControlMode_GlobalVBR = 5;
export const eAVEncCommonRateControlMode_GlobalLowDelayVBR = 6;
export const eAVEncCommonStreamEndHandling_DiscardPartial = 0;
export const eAVEncCommonStreamEndHandling_EnsureComplete = 1;
export const eAVEncVideoOutputFrameRateConversion_Disable = 0;
export const eAVEncVideoOutputFrameRateConversion_Enable = 1;
export const eAVEncVideoOutputFrameRateConversion_Alias = 2;
export const eAVDecVideoSoftwareDeinterlaceMode_NoDeinterlacing = 0;
export const eAVDecVideoSoftwareDeinterlaceMode_ProgressiveDeinterlacing = 1;
export const eAVDecVideoSoftwareDeinterlaceMode_BOBDeinterlacing = 2;
export const eAVDecVideoSoftwareDeinterlaceMode_SmartBOBDeinterlacing = 3;
export const eVideoDecodeCompliant = 0;
export const eVideoDecodeOptimalLF = 1;
export const eVideoDecodeDisableLF = 2;
export const eVideoDecodeFastest = 32;
export const eErrorConcealmentTypeDrop = 0;
export const eErrorConcealmentTypeBasic = 1;
export const eErrorConcealmentTypeAdvanced = 2;
export const eErrorConcealmentTypeDXVASetBlack = 3;
export const eErrorConcealmentOff = 0;
export const eErrorConcealmentOn = 1;
export const eAVDecVideoCodecType_NOTPLAYING = 0;
export const eAVDecVideoCodecType_MPEG2 = 1;
export const eAVDecVideoCodecType_H264 = 2;
export const eAVDecVideoDXVAMode_NOTPLAYING = 0;
export const eAVDecVideoDXVAMode_SW = 1;
export const eAVDecVideoDXVAMode_MC = 2;
export const eAVDecVideoDXVAMode_IDCT = 3;
export const eAVDecVideoDXVAMode_VLD = 4;
export const eAVDecVideoDXVABusEncryption_NONE = 0;
export const eAVDecVideoDXVABusEncryption_PRIVATE = 1;
export const eAVDecVideoDXVABusEncryption_AES = 2;
export const eAVEncVideoSourceScan_Automatic = 0;
export const eAVEncVideoSourceScan_Interlaced = 1;
export const eAVEncVideoSourceScan_Progressive = 2;
export const eAVEncVideoOutputScan_Progressive = 0;
export const eAVEncVideoOutputScan_Interlaced = 1;
export const eAVEncVideoOutputScan_SameAsInput = 2;
export const eAVEncVideoOutputScan_Automatic = 3;
export const eAVEncVideoFilmContent_VideoOnly = 0;
export const eAVEncVideoFilmContent_FilmOnly = 1;
export const eAVEncVideoFilmContent_Mixed = 2;
export const eAVEncVideoChromaResolution_SameAsSource = 0;
export const eAVEncVideoChromaResolution_444 = 1;
export const eAVEncVideoChromaResolution_422 = 2;
export const eAVEncVideoChromaResolution_420 = 3;
export const eAVEncVideoChromaResolution_411 = 4;
export const eAVEncVideoChromaSubsamplingFormat_SameAsSource = 0;
export const eAVEncVideoChromaSubsamplingFormat_ProgressiveChroma = 8;
export const eAVEncVideoChromaSubsamplingFormat_Horizontally_Cosited = 4;
export const eAVEncVideoChromaSubsamplingFormat_Vertically_Cosited = 2;
export const eAVEncVideoChromaSubsamplingFormat_Vertically_AlignedChromaPlanes = 1;
export const eAVEncVideoColorPrimaries_SameAsSource = 0;
export const eAVEncVideoColorPrimaries_Reserved = 1;
export const eAVEncVideoColorPrimaries_BT709 = 2;
export const eAVEncVideoColorPrimaries_BT470_2_SysM = 3;
export const eAVEncVideoColorPrimaries_BT470_2_SysBG = 4;
export const eAVEncVideoColorPrimaries_SMPTE170M = 5;
export const eAVEncVideoColorPrimaries_SMPTE240M = 6;
export const eAVEncVideoColorPrimaries_EBU3231 = 7;
export const eAVEncVideoColorPrimaries_SMPTE_C = 8;
export const eAVEncVideoColorTransferFunction_SameAsSource = 0;
export const eAVEncVideoColorTransferFunction_10 = 1;
export const eAVEncVideoColorTransferFunction_18 = 2;
export const eAVEncVideoColorTransferFunction_20 = 3;
export const eAVEncVideoColorTransferFunction_22 = 4;
export const eAVEncVideoColorTransferFunction_22_709 = 5;
export const eAVEncVideoColorTransferFunction_22_240M = 6;
export const eAVEncVideoColorTransferFunction_22_8bit_sRGB = 7;
export const eAVEncVideoColorTransferFunction_28 = 8;
export const eAVEncVideoColorTransferMatrix_SameAsSource = 0;
export const eAVEncVideoColorTransferMatrix_BT709 = 1;
export const eAVEncVideoColorTransferMatrix_BT601 = 2;
export const eAVEncVideoColorTransferMatrix_SMPTE240M = 3;
export const eAVEncVideoColorLighting_SameAsSource = 0;
export const eAVEncVideoColorLighting_Unknown = 1;
export const eAVEncVideoColorLighting_Bright = 2;
export const eAVEncVideoColorLighting_Office = 3;
export const eAVEncVideoColorLighting_Dim = 4;
export const eAVEncVideoColorLighting_Dark = 5;
export const eAVEncVideoColorNominalRange_SameAsSource = 0;
export const eAVEncVideoColorNominalRange_0_255 = 1;
export const eAVEncVideoColorNominalRange_16_235 = 2;
export const eAVEncVideoColorNominalRange_48_208 = 3;
export const eAVEncInputVideoSystem_Unspecified = 0;
export const eAVEncInputVideoSystem_PAL = 1;
export const eAVEncInputVideoSystem_NTSC = 2;
export const eAVEncInputVideoSystem_SECAM = 3;
export const eAVEncInputVideoSystem_MAC = 4;
export const eAVEncInputVideoSystem_HDV = 5;
export const eAVEncInputVideoSystem_Component = 6;
export const eAVEncVideoContentType_Unknown = 0;
export const eAVEncVideoContentType_FixedCameraAngle = 1;
export const eAVEncAdaptiveMode_None = 0;
export const eAVEncAdaptiveMode_Resolution = 1;
export const eAVEncAdaptiveMode_FrameRate = 2;
export const eAVScenarioInfo_Unknown = 0;
export const eAVScenarioInfo_DisplayRemoting = 1;
export const eAVScenarioInfo_VideoConference = 2;
export const eAVScenarioInfo_Archive = 3;
export const eAVScenarioInfo_LiveStreaming = 4;
export const eAVScenarioInfo_CameraRecord = 5;
export const eAVScenarioInfo_DisplayRemotingWithFeatureMap = 6;
export const eVideoEncoderDisplayContent_Unknown = 0;
export const eVideoEncoderDisplayContent_FullScreenVideo = 1;
export const eAVEncMuxOutputAuto = 0;
export const eAVEncMuxOutputPS = 1;
export const eAVEncMuxOutputTS = 2;
export const eAVEncAudioDualMono_SameAsInput = 0;
export const eAVEncAudioDualMono_Off = 1;
export const eAVEncAudioDualMono_On = 2;
export const AVEncAudioInputContent_Unknown = 0;
export const AVEncAudioInputContent_Voice = 1;
export const AVEncAudioInputContent_Music = 2;
export const eAVEncMPVProfile_unknown = 0;
export const eAVEncMPVProfile_Simple = 1;
export const eAVEncMPVProfile_Main = 2;
export const eAVEncMPVProfile_High = 3;
export const eAVEncMPVProfile_422 = 4;
export const eAVEncMPVLevel_Low = 1;
export const eAVEncMPVLevel_Main = 2;
export const eAVEncMPVLevel_High1440 = 3;
export const eAVEncMPVLevel_High = 4;
export const eAVEncH263VProfile_Base = 0;
export const eAVEncH263VProfile_CompatibilityV2 = 1;
export const eAVEncH263VProfile_CompatibilityV1 = 2;
export const eAVEncH263VProfile_WirelessV2 = 3;
export const eAVEncH263VProfile_WirelessV3 = 4;
export const eAVEncH263VProfile_HighCompression = 5;
export const eAVEncH263VProfile_Internet = 6;
export const eAVEncH263VProfile_Interlace = 7;
export const eAVEncH263VProfile_HighLatency = 8;
export const eAVEncH264VProfile_unknown = 0;
export const eAVEncH264VProfile_Simple = 66;
export const eAVEncH264VProfile_Base = 66;
export const eAVEncH264VProfile_Main = 77;
export const eAVEncH264VProfile_High = 100;
export const eAVEncH264VProfile_422 = 122;
export const eAVEncH264VProfile_High10 = 110;
export const eAVEncH264VProfile_444 = 244;
export const eAVEncH264VProfile_Extended = 88;
export const eAVEncH264VProfile_ScalableBase = 83;
export const eAVEncH264VProfile_ScalableHigh = 86;
export const eAVEncH264VProfile_MultiviewHigh = 118;
export const eAVEncH264VProfile_StereoHigh = 128;
export const eAVEncH264VProfile_ConstrainedBase = 256;
export const eAVEncH264VProfile_UCConstrainedHigh = 257;
export const eAVEncH264VProfile_UCScalableConstrainedBase = 258;
export const eAVEncH264VProfile_UCScalableConstrainedHigh = 259;
export const eAVEncH265VProfile_unknown = 0;
export const eAVEncH265VProfile_Main_420_8 = 1;
export const eAVEncH265VProfile_Main_420_10 = 2;
export const eAVEncH265VProfile_Main_420_12 = 3;
export const eAVEncH265VProfile_Main_422_10 = 4;
export const eAVEncH265VProfile_Main_422_12 = 5;
export const eAVEncH265VProfile_Main_444_8 = 6;
export const eAVEncH265VProfile_Main_444_10 = 7;
export const eAVEncH265VProfile_Main_444_12 = 8;
export const eAVEncH265VProfile_Monochrome_12 = 9;
export const eAVEncH265VProfile_Monochrome_16 = 10;
export const eAVEncH265VProfile_MainIntra_420_8 = 11;
export const eAVEncH265VProfile_MainIntra_420_10 = 12;
export const eAVEncH265VProfile_MainIntra_420_12 = 13;
export const eAVEncH265VProfile_MainIntra_422_10 = 14;
export const eAVEncH265VProfile_MainIntra_422_12 = 15;
export const eAVEncH265VProfile_MainIntra_444_8 = 16;
export const eAVEncH265VProfile_MainIntra_444_10 = 17;
export const eAVEncH265VProfile_MainIntra_444_12 = 18;
export const eAVEncH265VProfile_MainIntra_444_16 = 19;
export const eAVEncH265VProfile_MainStill_420_8 = 20;
export const eAVEncH265VProfile_MainStill_444_8 = 21;
export const eAVEncH265VProfile_MainStill_444_16 = 22;
export const eAVEncVP9VProfile_unknown = 0;
export const eAVEncVP9VProfile_420_8 = 1;
export const eAVEncVP9VProfile_420_10 = 2;
export const eAVEncVP9VProfile_420_12 = 3;
export const eAVEncH263PictureType_I = 0;
export const eAVEncH263PictureType_P = 1;
export const eAVEncH263PictureType_B = 2;
export const eAVEncH264PictureType_IDR = 0;
export const eAVEncH264PictureType_P = 1;
export const eAVEncH264PictureType_B = 2;
export const eAVEncH263VLevel1 = 10;
export const eAVEncH263VLevel2 = 20;
export const eAVEncH263VLevel3 = 30;
export const eAVEncH263VLevel4 = 40;
export const eAVEncH263VLevel4_5 = 45;
export const eAVEncH263VLevel5 = 50;
export const eAVEncH263VLevel6 = 60;
export const eAVEncH263VLevel7 = 70;
export const eAVEncH264VLevel1 = 10;
export const eAVEncH264VLevel1_b = 11;
export const eAVEncH264VLevel1_1 = 11;
export const eAVEncH264VLevel1_2 = 12;
export const eAVEncH264VLevel1_3 = 13;
export const eAVEncH264VLevel2 = 20;
export const eAVEncH264VLevel2_1 = 21;
export const eAVEncH264VLevel2_2 = 22;
export const eAVEncH264VLevel3 = 30;
export const eAVEncH264VLevel3_1 = 31;
export const eAVEncH264VLevel3_2 = 32;
export const eAVEncH264VLevel4 = 40;
export const eAVEncH264VLevel4_1 = 41;
export const eAVEncH264VLevel4_2 = 42;
export const eAVEncH264VLevel5 = 50;
export const eAVEncH264VLevel5_1 = 51;
export const eAVEncH264VLevel5_2 = 52;
export const eAVEncH265VLevel1 = 30;
export const eAVEncH265VLevel2 = 60;
export const eAVEncH265VLevel2_1 = 63;
export const eAVEncH265VLevel3 = 90;
export const eAVEncH265VLevel3_1 = 93;
export const eAVEncH265VLevel4 = 120;
export const eAVEncH265VLevel4_1 = 123;
export const eAVEncH265VLevel5 = 150;
export const eAVEncH265VLevel5_1 = 153;
export const eAVEncH265VLevel5_2 = 156;
export const eAVEncH265VLevel6 = 180;
export const eAVEncH265VLevel6_1 = 183;
export const eAVEncH265VLevel6_2 = 186;
export const eAVEncMPVFrameFieldMode_FieldMode = 0;
export const eAVEncMPVFrameFieldMode_FrameMode = 1;
export const eAVEncMPVSceneDetection_None = 0;
export const eAVEncMPVSceneDetection_InsertIPicture = 1;
export const eAVEncMPVSceneDetection_StartNewGOP = 2;
export const eAVEncMPVSceneDetection_StartNewLocatableGOP = 3;
export const eAVEncMPVScanPattern_Auto = 0;
export const eAVEncMPVScanPattern_ZigZagScan = 1;
export const eAVEncMPVScanPattern_AlternateScan = 2;
export const eAVEncMPVQScaleType_Auto = 0;
export const eAVEncMPVQScaleType_Linear = 1;
export const eAVEncMPVQScaleType_NonLinear = 2;
export const eAVEncMPVIntraVLCTable_Auto = 0;
export const eAVEncMPVIntraVLCTable_MPEG1 = 1;
export const eAVEncMPVIntraVLCTable_Alternate = 2;
export const eAVEncMPALayer_1 = 1;
export const eAVEncMPALayer_2 = 2;
export const eAVEncMPALayer_3 = 3;
export const eAVEncMPACodingMode_Mono = 0;
export const eAVEncMPACodingMode_Stereo = 1;
export const eAVEncMPACodingMode_DualChannel = 2;
export const eAVEncMPACodingMode_JointStereo = 3;
export const eAVEncMPACodingMode_Surround = 4;
export const eAVEncMPAEmphasisType_None = 0;
export const eAVEncMPAEmphasisType_50_15 = 1;
export const eAVEncMPAEmphasisType_Reserved = 2;
export const eAVEncMPAEmphasisType_CCITT_J17 = 3;
export const eAVEncDDService_CM = 0;
export const eAVEncDDService_ME = 1;
export const eAVEncDDService_VI = 2;
export const eAVEncDDService_HI = 3;
export const eAVEncDDService_D = 4;
export const eAVEncDDService_C = 5;
export const eAVEncDDService_E = 6;
export const eAVEncDDService_VO = 7;
export const eAVEncDDProductionRoomType_NotIndicated = 0;
export const eAVEncDDProductionRoomType_Large = 1;
export const eAVEncDDProductionRoomType_Small = 2;
export const eAVEncDDDynamicRangeCompressionControl_None = 0;
export const eAVEncDDDynamicRangeCompressionControl_FilmStandard = 1;
export const eAVEncDDDynamicRangeCompressionControl_FilmLight = 2;
export const eAVEncDDDynamicRangeCompressionControl_MusicStandard = 3;
export const eAVEncDDDynamicRangeCompressionControl_MusicLight = 4;
export const eAVEncDDDynamicRangeCompressionControl_Speech = 5;
export const eAVEncDDSurroundExMode_NotIndicated = 0;
export const eAVEncDDSurroundExMode_No = 1;
export const eAVEncDDSurroundExMode_Yes = 2;
export const eAVEncDDPreferredStereoDownMixMode_LtRt = 0;
export const eAVEncDDPreferredStereoDownMixMode_LoRo = 1;
export const eAVEncDDAtoDConverterType_Standard = 0;
export const eAVEncDDAtoDConverterType_HDCD = 1;
export const eAVEncDDHeadphoneMode_NotIndicated = 0;
export const eAVEncDDHeadphoneMode_NotEncoded = 1;
export const eAVEncDDHeadphoneMode_Encoded = 2;
export const eAVDecVideoInputScan_Unknown = 0;
export const eAVDecVideoInputScan_Progressive = 1;
export const eAVDecVideoInputScan_Interlaced_UpperFieldFirst = 2;
export const eAVDecVideoInputScan_Interlaced_LowerFieldFirst = 3;
export const eAVDecVideoSWPowerLevel_BatteryLife = 0;
export const eAVDecVideoSWPowerLevel_Balanced = 50;
export const eAVDecVideoSWPowerLevel_VideoQuality = 100;
export const eAVDecAACUseISODownmix = 0;
export const eAVDecAACUseARIBDownmix = 1;
export const eAVDecHEAACDynamicRangeControl_OFF = 0;
export const eAVDecHEAACDynamicRangeControl_ON = 1;
export const eAVDecAudioDualMono_IsNotDualMono = 0;
export const eAVDecAudioDualMono_IsDualMono = 1;
export const eAVDecAudioDualMono_UnSpecified = 2;
export const eAVDecAudioDualMonoReproMode_STEREO = 0;
export const eAVDecAudioDualMonoReproMode_LEFT_MONO = 1;
export const eAVDecAudioDualMonoReproMode_RIGHT_MONO = 2;
export const eAVDecAudioDualMonoReproMode_MIX_MONO = 3;
export const eAVAudioChannelConfig_FRONT_LEFT = 1;
export const eAVAudioChannelConfig_FRONT_RIGHT = 2;
export const eAVAudioChannelConfig_FRONT_CENTER = 4;
export const eAVAudioChannelConfig_LOW_FREQUENCY = 8;
export const eAVAudioChannelConfig_BACK_LEFT = 16;
export const eAVAudioChannelConfig_BACK_RIGHT = 32;
export const eAVAudioChannelConfig_FRONT_LEFT_OF_CENTER = 64;
export const eAVAudioChannelConfig_FRONT_RIGHT_OF_CENTER = 128;
export const eAVAudioChannelConfig_BACK_CENTER = 256;
export const eAVAudioChannelConfig_SIDE_LEFT = 512;
export const eAVAudioChannelConfig_SIDE_RIGHT = 1024;
export const eAVAudioChannelConfig_TOP_CENTER = 2048;
export const eAVAudioChannelConfig_TOP_FRONT_LEFT = 4096;
export const eAVAudioChannelConfig_TOP_FRONT_CENTER = 8192;
export const eAVAudioChannelConfig_TOP_FRONT_RIGHT = 16384;
export const eAVAudioChannelConfig_TOP_BACK_LEFT = 32768;
export const eAVAudioChannelConfig_TOP_BACK_CENTER = 65536;
export const eAVAudioChannelConfig_TOP_BACK_RIGHT = 131072;
export const eAVDDSurroundMode_NotIndicated = 0;
export const eAVDDSurroundMode_No = 1;
export const eAVDDSurroundMode_Yes = 2;
export const eAVDecDDOperationalMode_NONE = 0;
export const eAVDecDDOperationalMode_LINE = 1;
export const eAVDecDDOperationalMode_RF = 2;
export const eAVDecDDOperationalMode_CUSTOM0 = 3;
export const eAVDecDDOperationalMode_CUSTOM1 = 4;
export const eAVDecDDOperationalMode_PORTABLE8 = 5;
export const eAVDecDDOperationalMode_PORTABLE11 = 6;
export const eAVDecDDOperationalMode_PORTABLE14 = 7;
export const eAVDecDDMatrixDecodingMode_OFF = 0;
export const eAVDecDDMatrixDecodingMode_ON = 1;
export const eAVDecDDMatrixDecodingMode_AUTO = 2;
export const eAVDecDDStereoDownMixMode_Auto = 0;
export const eAVDecDDStereoDownMixMode_LtRt = 1;
export const eAVDecDDStereoDownMixMode_LoRo = 2;
export const eAVDSPLoudnessEqualization_OFF = 0;
export const eAVDSPLoudnessEqualization_ON = 1;
export const eAVDSPLoudnessEqualization_AUTO = 2;
export const eAVDSPSpeakerFill_OFF = 0;
export const eAVDSPSpeakerFill_ON = 1;
export const eAVDSPSpeakerFill_AUTO = 2;
export const eAVEncChromaEncodeMode_420 = 0;
export const eAVEncChromaEncodeMode_444 = 1;
export const eAVEncChromaEncodeMode_444_v2 = 2;
export const DXVAHD_FRAME_FORMAT_PROGRESSIVE = 0;
export const DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1;
export const DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2;
export const DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL = 0;
export const DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED = 1;
export const DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY = 2;
export const DXVAHD_SURFACE_TYPE_VIDEO_INPUT = 0;
export const DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE = 1;
export const DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT = 2;
export const DXVAHD_DEVICE_TYPE_HARDWARE = 0;
export const DXVAHD_DEVICE_TYPE_SOFTWARE = 1;
export const DXVAHD_DEVICE_TYPE_REFERENCE = 2;
export const DXVAHD_DEVICE_TYPE_OTHER = 3;
export const DXVAHD_DEVICE_CAPS_LINEAR_SPACE = 1;
export const DXVAHD_DEVICE_CAPS_xvYCC = 2;
export const DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4;
export const DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8;
export const DXVAHD_FEATURE_CAPS_ALPHA_FILL = 1;
export const DXVAHD_FEATURE_CAPS_CONSTRICTION = 2;
export const DXVAHD_FEATURE_CAPS_LUMA_KEY = 4;
export const DXVAHD_FEATURE_CAPS_ALPHA_PALETTE = 8;
export const DXVAHD_FILTER_CAPS_BRIGHTNESS = 1;
export const DXVAHD_FILTER_CAPS_CONTRAST = 2;
export const DXVAHD_FILTER_CAPS_HUE = 4;
export const DXVAHD_FILTER_CAPS_SATURATION = 8;
export const DXVAHD_FILTER_CAPS_NOISE_REDUCTION = 16;
export const DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT = 32;
export const DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING = 64;
export const DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED = 1;
export const DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP = 2;
export const DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY = 4;
export const DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED = 8;
export const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1;
export const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB = 2;
export const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4;
export const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8;
export const DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE = 16;
export const DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32;
export const DXVAHD_ITELECINE_CAPS_32 = 1;
export const DXVAHD_ITELECINE_CAPS_22 = 2;
export const DXVAHD_ITELECINE_CAPS_2224 = 4;
export const DXVAHD_ITELECINE_CAPS_2332 = 8;
export const DXVAHD_ITELECINE_CAPS_32322 = 16;
export const DXVAHD_ITELECINE_CAPS_55 = 32;
export const DXVAHD_ITELECINE_CAPS_64 = 64;
export const DXVAHD_ITELECINE_CAPS_87 = 128;
export const DXVAHD_ITELECINE_CAPS_222222222223 = 256;
export const DXVAHD_ITELECINE_CAPS_OTHER = "-2147483648";
export const DXVAHD_FILTER_BRIGHTNESS = 0;
export const DXVAHD_FILTER_CONTRAST = 1;
export const DXVAHD_FILTER_HUE = 2;
export const DXVAHD_FILTER_SATURATION = 3;
export const DXVAHD_FILTER_NOISE_REDUCTION = 4;
export const DXVAHD_FILTER_EDGE_ENHANCEMENT = 5;
export const DXVAHD_FILTER_ANAMORPHIC_SCALING = 6;
export const DXVAHD_BLT_STATE_TARGET_RECT = 0;
export const DXVAHD_BLT_STATE_BACKGROUND_COLOR = 1;
export const DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE = 2;
export const DXVAHD_BLT_STATE_ALPHA_FILL = 3;
export const DXVAHD_BLT_STATE_CONSTRICTION = 4;
export const DXVAHD_BLT_STATE_PRIVATE = 1000;
export const DXVAHD_ALPHA_FILL_MODE_OPAQUE = 0;
export const DXVAHD_ALPHA_FILL_MODE_BACKGROUND = 1;
export const DXVAHD_ALPHA_FILL_MODE_DESTINATION = 2;
export const DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM = 3;
export const DXVAHD_STREAM_STATE_D3DFORMAT = 0;
export const DXVAHD_STREAM_STATE_FRAME_FORMAT = 1;
export const DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE = 2;
export const DXVAHD_STREAM_STATE_OUTPUT_RATE = 3;
export const DXVAHD_STREAM_STATE_SOURCE_RECT = 4;
export const DXVAHD_STREAM_STATE_DESTINATION_RECT = 5;
export const DXVAHD_STREAM_STATE_ALPHA = 6;
export const DXVAHD_STREAM_STATE_PALETTE = 7;
export const DXVAHD_STREAM_STATE_LUMA_KEY = 8;
export const DXVAHD_STREAM_STATE_ASPECT_RATIO = 9;
export const DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS = 100;
export const DXVAHD_STREAM_STATE_FILTER_CONTRAST = 101;
export const DXVAHD_STREAM_STATE_FILTER_HUE = 102;
export const DXVAHD_STREAM_STATE_FILTER_SATURATION = 103;
export const DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION = 104;
export const DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT = 105;
export const DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING = 106;
export const DXVAHD_STREAM_STATE_PRIVATE = 1000;
export const DXVAHD_OUTPUT_RATE_NORMAL = 0;
export const DXVAHD_OUTPUT_RATE_HALF = 1;
export const DXVAHD_OUTPUT_RATE_CUSTOM = 2;
export const DXVA2_SampleFormatMask = 255;
export const DXVA2_SampleUnknown = 0;
export const DXVA2_SampleProgressiveFrame = 2;
export const DXVA2_SampleFieldInterleavedEvenFirst = 3;
export const DXVA2_SampleFieldInterleavedOddFirst = 4;
export const DXVA2_SampleFieldSingleEven = 5;
export const DXVA2_SampleFieldSingleOdd = 6;
export const DXVA2_SampleSubStream = 7;
export const DXVA2_VideoChromaSubsamplingMask = 15;
export const DXVA2_VideoChromaSubsampling_Unknown = 0;
export const DXVA2_VideoChromaSubsampling_ProgressiveChroma = 8;
export const DXVA2_VideoChromaSubsampling_Horizontally_Cosited = 4;
export const DXVA2_VideoChromaSubsampling_Vertically_Cosited = 2;
export const DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1;
export const DXVA2_VideoChromaSubsampling_MPEG2 = 5;
export const DXVA2_VideoChromaSubsampling_MPEG1 = 1;
export const DXVA2_VideoChromaSubsampling_DV_PAL = 6;
export const DXVA2_VideoChromaSubsampling_Cosited = 7;
export const DXVA2_NominalRangeMask = 7;
export const DXVA2_NominalRange_Unknown = 0;
export const DXVA2_NominalRange_Normal = 1;
export const DXVA2_NominalRange_Wide = 2;
export const DXVA2_NominalRange_0_255 = 1;
export const DXVA2_NominalRange_16_235 = 2;
export const DXVA2_NominalRange_48_208 = 3;
export const DXVA2_VideoTransferMatrixMask = 7;
export const DXVA2_VideoTransferMatrix_Unknown = 0;
export const DXVA2_VideoTransferMatrix_BT709 = 1;
export const DXVA2_VideoTransferMatrix_BT601 = 2;
export const DXVA2_VideoTransferMatrix_SMPTE240M = 3;
export const DXVA2_VideoLightingMask = 15;
export const DXVA2_VideoLighting_Unknown = 0;
export const DXVA2_VideoLighting_bright = 1;
export const DXVA2_VideoLighting_office = 2;
export const DXVA2_VideoLighting_dim = 3;
export const DXVA2_VideoLighting_dark = 4;
export const DXVA2_VideoPrimariesMask = 31;
export const DXVA2_VideoPrimaries_Unknown = 0;
export const DXVA2_VideoPrimaries_reserved = 1;
export const DXVA2_VideoPrimaries_BT709 = 2;
export const DXVA2_VideoPrimaries_BT470_2_SysM = 3;
export const DXVA2_VideoPrimaries_BT470_2_SysBG = 4;
export const DXVA2_VideoPrimaries_SMPTE170M = 5;
export const DXVA2_VideoPrimaries_SMPTE240M = 6;
export const DXVA2_VideoPrimaries_EBU3213 = 7;
export const DXVA2_VideoPrimaries_SMPTE_C = 8;
export const DXVA2_VideoTransFuncMask = 31;
export const DXVA2_VideoTransFunc_Unknown = 0;
export const DXVA2_VideoTransFunc_10 = 1;
export const DXVA2_VideoTransFunc_18 = 2;
export const DXVA2_VideoTransFunc_20 = 3;
export const DXVA2_VideoTransFunc_22 = 4;
export const DXVA2_VideoTransFunc_709 = 5;
export const DXVA2_VideoTransFunc_240M = 6;
export const DXVA2_VideoTransFunc_sRGB = 7;
export const DXVA2_VideoTransFunc_28 = 8;
export const DXVA2_DeinterlaceTech_Unknown = 0;
export const DXVA2_DeinterlaceTech_BOBLineReplicate = 1;
export const DXVA2_DeinterlaceTech_BOBVerticalStretch = 2;
export const DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap = 4;
export const DXVA2_DeinterlaceTech_MedianFiltering = 8;
export const DXVA2_DeinterlaceTech_EdgeFiltering = 16;
export const DXVA2_DeinterlaceTech_FieldAdaptive = 32;
export const DXVA2_DeinterlaceTech_PixelAdaptive = 64;
export const DXVA2_DeinterlaceTech_MotionVectorSteered = 128;
export const DXVA2_DeinterlaceTech_InverseTelecine = 256;
export const DXVA2_DeinterlaceTech_Mask = 511;
export const DXVA2_NoiseFilterLumaLevel = 1;
export const DXVA2_NoiseFilterLumaThreshold = 2;
export const DXVA2_NoiseFilterLumaRadius = 3;
export const DXVA2_NoiseFilterChromaLevel = 4;
export const DXVA2_NoiseFilterChromaThreshold = 5;
export const DXVA2_NoiseFilterChromaRadius = 6;
export const DXVA2_DetailFilterLumaLevel = 7;
export const DXVA2_DetailFilterLumaThreshold = 8;
export const DXVA2_DetailFilterLumaRadius = 9;
export const DXVA2_DetailFilterChromaLevel = 10;
export const DXVA2_DetailFilterChromaThreshold = 11;
export const DXVA2_DetailFilterChromaRadius = 12;
export const DXVA2_NoiseFilterTech_Unsupported = 0;
export const DXVA2_NoiseFilterTech_Unknown = 1;
export const DXVA2_NoiseFilterTech_Median = 2;
export const DXVA2_NoiseFilterTech_Temporal = 4;
export const DXVA2_NoiseFilterTech_BlockNoise = 8;
export const DXVA2_NoiseFilterTech_MosquitoNoise = 16;
export const DXVA2_NoiseFilterTech_Mask = 31;
export const DXVA2_DetailFilterTech_Unsupported = 0;
export const DXVA2_DetailFilterTech_Unknown = 1;
export const DXVA2_DetailFilterTech_Edge = 2;
export const DXVA2_DetailFilterTech_Sharpening = 4;
export const DXVA2_DetailFilterTech_Mask = 7;
export const DXVA2_ProcAmp_None = 0;
export const DXVA2_ProcAmp_Brightness = 1;
export const DXVA2_ProcAmp_Contrast = 2;
export const DXVA2_ProcAmp_Hue = 4;
export const DXVA2_ProcAmp_Saturation = 8;
export const DXVA2_ProcAmp_Mask = 15;
export const DXVA2_VideoProcess_None = 0;
export const DXVA2_VideoProcess_YUV2RGB = 1;
export const DXVA2_VideoProcess_StretchX = 2;
export const DXVA2_VideoProcess_StretchY = 4;
export const DXVA2_VideoProcess_AlphaBlend = 8;
export const DXVA2_VideoProcess_SubRects = 16;
export const DXVA2_VideoProcess_SubStreams = 32;
export const DXVA2_VideoProcess_SubStreamsExtended = 64;
export const DXVA2_VideoProcess_YUV2RGBExtended = 128;
export const DXVA2_VideoProcess_AlphaBlendExtended = 256;
export const DXVA2_VideoProcess_Constriction = 512;
export const DXVA2_VideoProcess_NoiseFilter = 1024;
export const DXVA2_VideoProcess_DetailFilter = 2048;
export const DXVA2_VideoProcess_PlanarAlpha = 4096;
export const DXVA2_VideoProcess_LinearScaling = 8192;
export const DXVA2_VideoProcess_GammaCompensated = 16384;
export const DXVA2_VideoProcess_MaintainsOriginalFieldData = 32768;
export const DXVA2_VideoProcess_Mask = 65535;
export const DXVA2_VPDev_HardwareDevice = 1;
export const DXVA2_VPDev_EmulatedDXVA1 = 2;
export const DXVA2_VPDev_SoftwareDevice = 4;
export const DXVA2_VPDev_Mask = 7;
export const DXVA2_SampleData_RFF = 1;
export const DXVA2_SampleData_TFF = 2;
export const DXVA2_SampleData_RFF_TFF_Present = 4;
export const DXVA2_SampleData_Mask = 65535;
export const DXVA2_DestData_RFF = 1;
export const DXVA2_DestData_TFF = 2;
export const DXVA2_DestData_RFF_TFF_Present = 4;
export const DXVA2_DestData_Mask = 65535;
export const DXVA2_PictureParametersBufferType = 0;
export const DXVA2_MacroBlockControlBufferType = 1;
export const DXVA2_ResidualDifferenceBufferType = 2;
export const DXVA2_DeblockingControlBufferType = 3;
export const DXVA2_InverseQuantizationMatrixBufferType = 4;
export const DXVA2_SliceControlBufferType = 5;
export const DXVA2_BitStreamDateBufferType = 6;
export const DXVA2_MotionVectorBuffer = 7;
export const DXVA2_FilmGrainBuffer = 8;
export const DXVA2_VideoDecoderRenderTarget = 0;
export const DXVA2_VideoProcessorRenderTarget = 1;
export const DXVA2_VideoSoftwareRenderTarget = 2;
export const DXVA2_SurfaceType_DecoderRenderTarget = 0;
export const DXVA2_SurfaceType_ProcessorRenderTarget = 1;
export const DXVA2_SurfaceType_D3DRenderTargetTexture = 2;
export const OPM_OMAC_SIZE = 16;
export const OPM_128_BIT_RANDOM_NUMBER_SIZE = 16;
export const OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE = 256;
export const OPM_CONFIGURE_SETTING_DATA_SIZE = 4056;
export const OPM_GET_INFORMATION_PARAMETERS_SIZE = 4056;
export const OPM_REQUESTED_INFORMATION_SIZE = 4076;
export const OPM_HDCP_KEY_SELECTION_VECTOR_SIZE = 5;
export const OPM_PROTECTION_TYPE_SIZE = 4;
export const OPM_BUS_TYPE_MASK = 65535;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_MASK = 32767;
export const OPM_VOS_COPP_SEMANTICS = 0;
export const OPM_VOS_OPM_SEMANTICS = 1;
export const OPM_VOS_OPM_INDIRECT_DISPLAY = 2;
export const OPM_HDCP_FLAG_NONE = 0;
export const OPM_HDCP_FLAG_REPEATER = 1;
export const OPM_STATUS_NORMAL = 0;
export const OPM_STATUS_LINK_LOST = 1;
export const OPM_STATUS_RENEGOTIATION_REQUIRED = 2;
export const OPM_STATUS_TAMPERING_DETECTED = 4;
export const OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED = 8;
export const OPM_CONNECTOR_TYPE_OTHER = "-1";
export const OPM_CONNECTOR_TYPE_VGA = 0;
export const OPM_CONNECTOR_TYPE_SVIDEO = 1;
export const OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO = 2;
export const OPM_CONNECTOR_TYPE_COMPONENT_VIDEO = 3;
export const OPM_CONNECTOR_TYPE_DVI = 4;
export const OPM_CONNECTOR_TYPE_HDMI = 5;
export const OPM_CONNECTOR_TYPE_LVDS = 6;
export const OPM_CONNECTOR_TYPE_D_JPN = 8;
export const OPM_CONNECTOR_TYPE_SDI = 9;
export const OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL = 10;
export const OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED = 11;
export const OPM_CONNECTOR_TYPE_UDI_EXTERNAL = 12;
export const OPM_CONNECTOR_TYPE_UDI_EMBEDDED = 13;
export const OPM_CONNECTOR_TYPE_RESERVED = 14;
export const OPM_CONNECTOR_TYPE_MIRACAST = 15;
export const OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = 16;
export const OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = 17;
export const OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL = "-2147483648";
export const OPM_DVI_CHARACTERISTIC_1_0 = 1;
export const OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE = 2;
export const OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED = 0;
export const OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED = 1;
export const OPM_BUS_TYPE_OTHER = 0;
export const OPM_BUS_TYPE_PCI = 1;
export const OPM_BUS_TYPE_PCIX = 2;
export const OPM_BUS_TYPE_PCIEXPRESS = 3;
export const OPM_BUS_TYPE_AGP = 4;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET = 65536;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD = "-2147483648";
export const OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED = "-2147483648";
export const OPM_DPCP_OFF = 0;
export const OPM_DPCP_ON = 1;
export const OPM_DPCP_FORCE_ULONG = 2147483647;
export const OPM_HDCP_OFF = 0;
export const OPM_HDCP_ON = 1;
export const OPM_HDCP_FORCE_ULONG = 2147483647;
export const OPM_TYPE_ENFORCEMENT_HDCP_OFF = 0;
export const OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION = 1;
export const OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION = 2;
export const OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG = 2147483647;
export const OPM_CGMSA_OFF = 0;
export const OPM_CGMSA_COPY_FREELY = 1;
export const OPM_CGMSA_COPY_NO_MORE = 2;
export const OPM_CGMSA_COPY_ONE_GENERATION = 3;
export const OPM_CGMSA_COPY_NEVER = 4;
export const OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8;
export const OPM_ACP_OFF = 0;
export const OPM_ACP_LEVEL_ONE = 1;
export const OPM_ACP_LEVEL_TWO = 2;
export const OPM_ACP_LEVEL_THREE = 3;
export const OPM_ACP_FORCE_ULONG = 2147483647;
export const OPM_PROTECTION_TYPE_OTHER = "-2147483648";
export const OPM_PROTECTION_TYPE_NONE = 0;
export const OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP = 1;
export const OPM_PROTECTION_TYPE_ACP = 2;
export const OPM_PROTECTION_TYPE_CGMSA = 4;
export const OPM_PROTECTION_TYPE_HDCP = 8;
export const OPM_PROTECTION_TYPE_DPCP = 16;
export const OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP = 32;
export const OPM_PROTECTION_STANDARD_OTHER = 2147483648;
export const OPM_PROTECTION_STANDARD_NONE = 0;
export const OPM_PROTECTION_STANDARD_IEC61880_525I = 1;
export const OPM_PROTECTION_STANDARD_IEC61880_2_525I = 2;
export const OPM_PROTECTION_STANDARD_IEC62375_625P = 4;
export const OPM_PROTECTION_STANDARD_EIA608B_525 = 8;
export const OPM_PROTECTION_STANDARD_EN300294_625I = 16;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P = 32;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P = 64;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I = 128;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P = 256;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P = 512;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I = 1024;
export const OPM_PROTECTION_STANDARD_ARIBTRB15_525I = 2048;
export const OPM_PROTECTION_STANDARD_ARIBTRB15_525P = 4096;
export const OPM_PROTECTION_STANDARD_ARIBTRB15_750P = 8192;
export const OPM_PROTECTION_STANDARD_ARIBTRB15_1125I = 16384;
export const OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3 = 0;
export const OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER = 1;
export const OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP = 2;
export const OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER = 3;
export const OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP = 4;
export const OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER = 5;
export const OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER = 6;
export const OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC = 7;
export const OPM_ASPECT_RATIO_FORCE_ULONG = 2147483647;
export const KSMETHOD_OPMVIDEOOUTPUT_STARTINITIALIZATION = 0;
export const KSMETHOD_OPMVIDEOOUTPUT_FINISHINITIALIZATION = 1;
export const KSMETHOD_OPMVIDEOOUTPUT_GETINFORMATION = 2;
export const MF_ATTRIBUTE_UINT32 = 19;
export const MF_ATTRIBUTE_UINT64 = 21;
export const MF_ATTRIBUTE_DOUBLE = 5;
export const MF_ATTRIBUTE_GUID = 72;
export const MF_ATTRIBUTE_STRING = 31;
export const MF_ATTRIBUTE_BLOB = 4113;
export const MF_ATTRIBUTE_IUNKNOWN = 13;
export const MF_ATTRIBUTES_MATCH_OUR_ITEMS = 0;
export const MF_ATTRIBUTES_MATCH_THEIR_ITEMS = 1;
export const MF_ATTRIBUTES_MATCH_ALL_ITEMS = 2;
export const MF_ATTRIBUTES_MATCH_INTERSECTION = 3;
export const MF_ATTRIBUTES_MATCH_SMALLER = 4;
export const MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = 1;
export const MF2DBuffer_LockFlags_LockTypeMask = 3;
export const MF2DBuffer_LockFlags_Read = 1;
export const MF2DBuffer_LockFlags_Write = 2;
export const MF2DBuffer_LockFlags_ReadWrite = 3;
export const MF2DBuffer_LockFlags_ForceDWORD = 2147483647;
export const MFVideoInterlace_Unknown = 0;
export const MFVideoInterlace_Progressive = 2;
export const MFVideoInterlace_FieldInterleavedUpperFirst = 3;
export const MFVideoInterlace_FieldInterleavedLowerFirst = 4;
export const MFVideoInterlace_FieldSingleUpper = 5;
export const MFVideoInterlace_FieldSingleLower = 6;
export const MFVideoInterlace_MixedInterlaceOrProgressive = 7;
export const MFVideoInterlace_Last = 8;
export const MFVideoInterlace_ForceDWORD = 2147483647;
export const MFVideoTransFunc_Unknown = 0;
export const MFVideoTransFunc_10 = 1;
export const MFVideoTransFunc_18 = 2;
export const MFVideoTransFunc_20 = 3;
export const MFVideoTransFunc_22 = 4;
export const MFVideoTransFunc_709 = 5;
export const MFVideoTransFunc_240M = 6;
export const MFVideoTransFunc_sRGB = 7;
export const MFVideoTransFunc_28 = 8;
export const MFVideoTransFunc_Log_100 = 9;
export const MFVideoTransFunc_Log_316 = 10;
export const MFVideoTransFunc_709_sym = 11;
export const MFVideoTransFunc_2020_const = 12;
export const MFVideoTransFunc_2020 = 13;
export const MFVideoTransFunc_26 = 14;
export const MFVideoTransFunc_2084 = 15;
export const MFVideoTransFunc_HLG = 16;
export const MFVideoTransFunc_10_rel = 17;
export const MFVideoTransFunc_Last = 18;
export const MFVideoTransFunc_ForceDWORD = 2147483647;
export const MFVideoPrimaries_Unknown = 0;
export const MFVideoPrimaries_reserved = 1;
export const MFVideoPrimaries_BT709 = 2;
export const MFVideoPrimaries_BT470_2_SysM = 3;
export const MFVideoPrimaries_BT470_2_SysBG = 4;
export const MFVideoPrimaries_SMPTE170M = 5;
export const MFVideoPrimaries_SMPTE240M = 6;
export const MFVideoPrimaries_EBU3213 = 7;
export const MFVideoPrimaries_SMPTE_C = 8;
export const MFVideoPrimaries_BT2020 = 9;
export const MFVideoPrimaries_XYZ = 10;
export const MFVideoPrimaries_DCI_P3 = 11;
export const MFVideoPrimaries_ACES = 12;
export const MFVideoPrimaries_Last = 13;
export const MFVideoPrimaries_ForceDWORD = 2147483647;
export const MFVideoLighting_Unknown = 0;
export const MFVideoLighting_bright = 1;
export const MFVideoLighting_office = 2;
export const MFVideoLighting_dim = 3;
export const MFVideoLighting_dark = 4;
export const MFVideoLighting_Last = 5;
export const MFVideoLighting_ForceDWORD = 2147483647;
export const MFVideoTransferMatrix_Unknown = 0;
export const MFVideoTransferMatrix_BT709 = 1;
export const MFVideoTransferMatrix_BT601 = 2;
export const MFVideoTransferMatrix_SMPTE240M = 3;
export const MFVideoTransferMatrix_BT2020_10 = 4;
export const MFVideoTransferMatrix_BT2020_12 = 5;
export const MFVideoTransferMatrix_Last = 6;
export const MFVideoTransferMatrix_ForceDWORD = 2147483647;
export const MFVideoChromaSubsampling_Unknown = 0;
export const MFVideoChromaSubsampling_ProgressiveChroma = 8;
export const MFVideoChromaSubsampling_Horizontally_Cosited = 4;
export const MFVideoChromaSubsampling_Vertically_Cosited = 2;
export const MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1;
export const MFVideoChromaSubsampling_MPEG2 = 5;
export const MFVideoChromaSubsampling_MPEG1 = 1;
export const MFVideoChromaSubsampling_DV_PAL = 6;
export const MFVideoChromaSubsampling_Cosited = 7;
export const MFVideoChromaSubsampling_Last = 8;
export const MFVideoChromaSubsampling_ForceDWORD = 2147483647;
export const MFNominalRange_Unknown = 0;
export const MFNominalRange_Normal = 1;
export const MFNominalRange_Wide = 2;
export const MFNominalRange_0_255 = 1;
export const MFNominalRange_16_235 = 2;
export const MFNominalRange_48_208 = 3;
export const MFNominalRange_64_127 = 4;
export const MFNominalRange_Last = 5;
export const MFNominalRange_ForceDWORD = 2147483647;
export const MFVideoFlag_PAD_TO_Mask = 3;
export const MFVideoFlag_PAD_TO_None = 0;
export const MFVideoFlag_PAD_TO_4x3 = 1;
export const MFVideoFlag_PAD_TO_16x9 = 2;
export const MFVideoFlag_SrcContentHintMask = 28;
export const MFVideoFlag_SrcContentHintNone = 0;
export const MFVideoFlag_SrcContentHint16x9 = 4;
export const MFVideoFlag_SrcContentHint235_1 = 8;
export const MFVideoFlag_AnalogProtected = 32;
export const MFVideoFlag_DigitallyProtected = 64;
export const MFVideoFlag_ProgressiveContent = 128;
export const MFVideoFlag_FieldRepeatCountMask = 1792;
export const MFVideoFlag_FieldRepeatCountShift = 8;
export const MFVideoFlag_ProgressiveSeqReset = 2048;
export const MFVideoFlag_PanScanEnabled = 131072;
export const MFVideoFlag_LowerFieldFirst = 262144;
export const MFVideoFlag_BottomUpLinearRep = 524288;
export const MFVideoFlags_DXVASurface = 1048576;
export const MFVideoFlags_RenderTargetSurface = 4194304;
export const MFVideoFlags_ForceQWORD = 2147483647;
export const MFStdVideoFormat_reserved = 0;
export const MFStdVideoFormat_NTSC = 1;
export const MFStdVideoFormat_PAL = 2;
export const MFStdVideoFormat_DVD_NTSC = 3;
export const MFStdVideoFormat_DVD_PAL = 4;
export const MFStdVideoFormat_DV_PAL = 5;
export const MFStdVideoFormat_DV_NTSC = 6;
export const MFStdVideoFormat_ATSC_SD480i = 7;
export const MFStdVideoFormat_ATSC_HD1080i = 8;
export const MFStdVideoFormat_ATSC_HD720p = 9;
export const MEUnknown = 0;
export const MEError = 1;
export const MEExtendedType = 2;
export const MENonFatalError = 3;
export const MEGenericV1Anchor = 3;
export const MESessionUnknown = 100;
export const MESessionTopologySet = 101;
export const MESessionTopologiesCleared = 102;
export const MESessionStarted = 103;
export const MESessionPaused = 104;
export const MESessionStopped = 105;
export const MESessionClosed = 106;
export const MESessionEnded = 107;
export const MESessionRateChanged = 108;
export const MESessionScrubSampleComplete = 109;
export const MESessionCapabilitiesChanged = 110;
export const MESessionTopologyStatus = 111;
export const MESessionNotifyPresentationTime = 112;
export const MENewPresentation = 113;
export const MELicenseAcquisitionStart = 114;
export const MELicenseAcquisitionCompleted = 115;
export const MEIndividualizationStart = 116;
export const MEIndividualizationCompleted = 117;
export const MEEnablerProgress = 118;
export const MEEnablerCompleted = 119;
export const MEPolicyError = 120;
export const MEPolicyReport = 121;
export const MEBufferingStarted = 122;
export const MEBufferingStopped = 123;
export const MEConnectStart = 124;
export const MEConnectEnd = 125;
export const MEReconnectStart = 126;
export const MEReconnectEnd = 127;
export const MERendererEvent = 128;
export const MESessionStreamSinkFormatChanged = 129;
export const MESessionV1Anchor = 129;
export const MESourceUnknown = 200;
export const MESourceStarted = 201;
export const MEStreamStarted = 202;
export const MESourceSeeked = 203;
export const MEStreamSeeked = 204;
export const MENewStream = 205;
export const MEUpdatedStream = 206;
export const MESourceStopped = 207;
export const MEStreamStopped = 208;
export const MESourcePaused = 209;
export const MEStreamPaused = 210;
export const MEEndOfPresentation = 211;
export const MEEndOfStream = 212;
export const MEMediaSample = 213;
export const MEStreamTick = 214;
export const MEStreamThinMode = 215;
export const MEStreamFormatChanged = 216;
export const MESourceRateChanged = 217;
export const MEEndOfPresentationSegment = 218;
export const MESourceCharacteristicsChanged = 219;
export const MESourceRateChangeRequested = 220;
export const MESourceMetadataChanged = 221;
export const MESequencerSourceTopologyUpdated = 222;
export const MESourceV1Anchor = 222;
export const MESinkUnknown = 300;
export const MEStreamSinkStarted = 301;
export const MEStreamSinkStopped = 302;
export const MEStreamSinkPaused = 303;
export const MEStreamSinkRateChanged = 304;
export const MEStreamSinkRequestSample = 305;
export const MEStreamSinkMarker = 306;
export const MEStreamSinkPrerolled = 307;
export const MEStreamSinkScrubSampleComplete = 308;
export const MEStreamSinkFormatChanged = 309;
export const MEStreamSinkDeviceChanged = 310;
export const MEQualityNotify = 311;
export const MESinkInvalidated = 312;
export const MEAudioSessionNameChanged = 313;
export const MEAudioSessionVolumeChanged = 314;
export const MEAudioSessionDeviceRemoved = 315;
export const MEAudioSessionServerShutdown = 316;
export const MEAudioSessionGroupingParamChanged = 317;
export const MEAudioSessionIconChanged = 318;
export const MEAudioSessionFormatChanged = 319;
export const MEAudioSessionDisconnected = 320;
export const MEAudioSessionExclusiveModeOverride = 321;
export const MESinkV1Anchor = 321;
export const MECaptureAudioSessionVolumeChanged = 322;
export const MECaptureAudioSessionDeviceRemoved = 323;
export const MECaptureAudioSessionFormatChanged = 324;
export const MECaptureAudioSessionDisconnected = 325;
export const MECaptureAudioSessionExclusiveModeOverride = 326;
export const MECaptureAudioSessionServerShutdown = 327;
export const MESinkV2Anchor = 327;
export const METrustUnknown = 400;
export const MEPolicyChanged = 401;
export const MEContentProtectionMessage = 402;
export const MEPolicySet = 403;
export const METrustV1Anchor = 403;
export const MEWMDRMLicenseBackupCompleted = 500;
export const MEWMDRMLicenseBackupProgress = 501;
export const MEWMDRMLicenseRestoreCompleted = 502;
export const MEWMDRMLicenseRestoreProgress = 503;
export const MEWMDRMLicenseAcquisitionCompleted = 506;
export const MEWMDRMIndividualizationCompleted = 508;
export const MEWMDRMIndividualizationProgress = 513;
export const MEWMDRMProximityCompleted = 514;
export const MEWMDRMLicenseStoreCleaned = 515;
export const MEWMDRMRevocationDownloadCompleted = 516;
export const MEWMDRMV1Anchor = 516;
export const METransformUnknown = 600;
export const METransformNeedInput = 601;
export const METransformHaveOutput = 602;
export const METransformDrainComplete = 603;
export const METransformMarker = 604;
export const METransformInputStreamStateChanged = 605;
export const MEByteStreamCharacteristicsChanged = 700;
export const MEVideoCaptureDeviceRemoved = 800;
export const MEVideoCaptureDevicePreempted = 801;
export const MEStreamSinkFormatInvalidated = 802;
export const MEEncodingParameters = 803;
export const MEContentProtectionMetadata = 900;
export const MEDeviceThermalStateChanged = 950;
export const MEReservedMax = 10000;
export const msoBegin = 0;
export const msoCurrent = 1;
export const MF_ACCESSMODE_READ = 1;
export const MF_ACCESSMODE_WRITE = 2;
export const MF_ACCESSMODE_READWRITE = 3;
export const MF_OPENMODE_FAIL_IF_NOT_EXIST = 0;
export const MF_OPENMODE_FAIL_IF_EXIST = 1;
export const MF_OPENMODE_RESET_IF_EXIST = 2;
export const MF_OPENMODE_APPEND_IF_EXIST = 3;
export const MF_OPENMODE_DELETE_IF_EXIST = 4;
export const MF_FILEFLAGS_NONE = 0;
export const MF_FILEFLAGS_NOBUFFERING = 1;
export const MF_FILEFLAGS_ALLOW_WRITE_SHARING = 2;
export const MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS = 0;
export const MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS = 1;
export const MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS = 2;
export const MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE = 3;
export const MF_STREAM_STATE_STOPPED = 0;
export const MF_STREAM_STATE_PAUSED = 1;
export const MF_STREAM_STATE_RUNNING = 2;
export const MFT_INPUT_DATA_BUFFER_PLACEHOLDER = "-1";
export const MFT_OUTPUT_DATA_BUFFER_INCOMPLETE = 16777216;
export const MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE = 256;
export const MFT_OUTPUT_DATA_BUFFER_STREAM_END = 512;
export const MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE = 768;
export const MFT_INPUT_STATUS_ACCEPT_DATA = 1;
export const MFT_OUTPUT_STATUS_SAMPLE_READY = 1;
export const MFT_INPUT_STREAM_WHOLE_SAMPLES = 1;
export const MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2;
export const MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE = 4;
export const MFT_INPUT_STREAM_HOLDS_BUFFERS = 8;
export const MFT_INPUT_STREAM_DOES_NOT_ADDREF = 256;
export const MFT_INPUT_STREAM_REMOVABLE = 512;
export const MFT_INPUT_STREAM_OPTIONAL = 1024;
export const MFT_INPUT_STREAM_PROCESSES_IN_PLACE = 2048;
export const MFT_OUTPUT_STREAM_WHOLE_SAMPLES = 1;
export const MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2;
export const MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE = 4;
export const MFT_OUTPUT_STREAM_DISCARDABLE = 8;
export const MFT_OUTPUT_STREAM_OPTIONAL = 16;
export const MFT_OUTPUT_STREAM_PROVIDES_SAMPLES = 256;
export const MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES = 512;
export const MFT_OUTPUT_STREAM_LAZY_READ = 1024;
export const MFT_OUTPUT_STREAM_REMOVABLE = 2048;
export const MFT_SET_TYPE_TEST_ONLY = 1;
export const MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1;
export const MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT = 2;
export const MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS = 256;
export const MFT_DRAIN_PRODUCE_TAILS = 0;
export const MFT_DRAIN_NO_TAILS = 1;
export const MFT_MESSAGE_COMMAND_FLUSH = 0;
export const MFT_MESSAGE_COMMAND_DRAIN = 1;
export const MFT_MESSAGE_SET_D3D_MANAGER = 2;
export const MFT_MESSAGE_DROP_SAMPLES = 3;
export const MFT_MESSAGE_COMMAND_TICK = 4;
export const MFT_MESSAGE_NOTIFY_BEGIN_STREAMING = 268435456;
export const MFT_MESSAGE_NOTIFY_END_STREAMING = 268435457;
export const MFT_MESSAGE_NOTIFY_END_OF_STREAM = 268435458;
export const MFT_MESSAGE_NOTIFY_START_OF_STREAM = 268435459;
export const MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES = 268435460;
export const MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES = 268435461;
export const MFT_MESSAGE_NOTIFY_EVENT = 268435462;
export const MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE = 268435463;
export const MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM = 268435464;
export const MFT_MESSAGE_COMMAND_MARKER = 536870912;
export const DeviceStreamState_Stop = 0;
export const DeviceStreamState_Pause = 1;
export const DeviceStreamState_Run = 2;
export const DeviceStreamState_Disabled = 3;
export const MF3DVideoOutputType_BaseView = 0;
export const MF3DVideoOutputType_Stereo = 1;
export const MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE = 0;
export const MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT = 1;
export const MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE = 0;
export const MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL = 1;
export const MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL = 2;
export const MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL = 3;
export const MFSESSION_SETTOPOLOGY_IMMEDIATE = 1;
export const MFSESSION_SETTOPOLOGY_NORESOLUTION = 2;
export const MFSESSION_SETTOPOLOGY_CLEAR_CURRENT = 4;
export const MFSESSION_GETFULLTOPOLOGY_CURRENT = 1;
export const MFPMPSESSION_UNPROTECTED_PROCESS = 1;
export const MFPMPSESSION_IN_PROCESS = 2;
export const MF_OBJECT_MEDIASOURCE = 0;
export const MF_OBJECT_BYTESTREAM = 1;
export const MF_OBJECT_INVALID = 2;
export const MF_RESOLUTION_MEDIASOURCE = 1;
export const MF_RESOLUTION_BYTESTREAM = 2;
export const MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE = 16;
export const MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL = 32;
export const MF_RESOLUTION_DISABLE_LOCAL_PLUGINS = 64;
export const MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY = 128;
export const MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY = 256;
export const MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE = 512;
export const MF_RESOLUTION_ENABLE_STORE_PLUGINS = 1024;
export const MF_RESOLUTION_READ = 65536;
export const MF_RESOLUTION_WRITE = 131072;
export const MF_CONNECT_DIRECT = 0;
export const MF_CONNECT_ALLOW_CONVERTER = 1;
export const MF_CONNECT_ALLOW_DECODER = 3;
export const MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES = 4;
export const MF_CONNECT_AS_OPTIONAL = 65536;
export const MF_CONNECT_AS_OPTIONAL_BRANCH = 131072;
export const MF_TOPOLOGY_RESOLUTION_SUCCEEDED = 0;
export const MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE = 1;
export const MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS = 2;
export const MFMEDIASOURCE_IS_LIVE = 1;
export const MFMEDIASOURCE_CAN_SEEK = 2;
export const MFMEDIASOURCE_CAN_PAUSE = 4;
export const MFMEDIASOURCE_HAS_SLOW_SEEK = 8;
export const MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS = 16;
export const MFMEDIASOURCE_CAN_SKIPFORWARD = 32;
export const MFMEDIASOURCE_CAN_SKIPBACKWARD = 64;
export const MFMEDIASOURCE_DOES_NOT_USE_NETWORK = 128;
export const MFSTREAMSINK_MARKER_DEFAULT = 0;
export const MFSTREAMSINK_MARKER_ENDOFSEGMENT = 1;
export const MFSTREAMSINK_MARKER_TICK = 2;
export const MFSTREAMSINK_MARKER_EVENT = 3;
export const ROTATION_NONE = 0;
export const ROTATION_NORMAL = 1;
export const MIRROR_NONE = 0;
export const MIRROR_HORIZONTAL = 1;
export const MIRROR_VERTICAL = 2;
export const MFVideoSphericalFormat_Unsupported = 0;
export const MFVideoSphericalFormat_Equirectangular = 1;
export const MFVideoSphericalFormat_CubeMap = 2;
export const MFVideoSphericalFormat_3DMesh = 3;
export const MFVideoSphericalProjectionMode_Spherical = 0;
export const MFVideoSphericalProjectionMode_Flat = 1;
export const MFTOPOLOGY_DXVA_DEFAULT = 0;
export const MFTOPOLOGY_DXVA_NONE = 1;
export const MFTOPOLOGY_DXVA_FULL = 2;
export const MFTOPOLOGY_HWMODE_SOFTWARE_ONLY = 0;
export const MFTOPOLOGY_HWMODE_USE_HARDWARE = 1;
export const MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE = 2;
export const MF_TOPOLOGY_OUTPUT_NODE = 0;
export const MF_TOPOLOGY_SOURCESTREAM_NODE = 1;
export const MF_TOPOLOGY_TRANSFORM_NODE = 2;
export const MF_TOPOLOGY_TEE_NODE = 3;
export const MF_TOPOLOGY_MAX = "-1";
export const MF_TOPONODE_FLUSH_ALWAYS = 0;
export const MF_TOPONODE_FLUSH_SEEK = 1;
export const MF_TOPONODE_FLUSH_NEVER = 2;
export const MF_TOPONODE_DRAIN_DEFAULT = 0;
export const MF_TOPONODE_DRAIN_ALWAYS = 1;
export const MF_TOPONODE_DRAIN_NEVER = 2;
export const MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ = 2;
export const MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING = 4;
export const MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK = 8;
export const MFCLOCK_STATE_INVALID = 0;
export const MFCLOCK_STATE_RUNNING = 1;
export const MFCLOCK_STATE_STOPPED = 2;
export const MFCLOCK_STATE_PAUSED = 3;
export const MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD = 1;
export const MFTIMER_RELATIVE = 1;
export const MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL = 1;
export const MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL = 1;
export const MFSHUTDOWN_INITIATED = 0;
export const MFSHUTDOWN_COMPLETED = 1;
export const MF_LICENSE_URL_UNTRUSTED = 0;
export const MF_LICENSE_URL_TRUSTED = 1;
export const MF_LICENSE_URL_TAMPERED = 2;
export const MFRATE_FORWARD = 0;
export const MFRATE_REVERSE = 1;
export const MF_DROP_MODE_NONE = 0;
export const MF_DROP_MODE_1 = 1;
export const MF_DROP_MODE_2 = 2;
export const MF_DROP_MODE_3 = 3;
export const MF_DROP_MODE_4 = 4;
export const MF_DROP_MODE_5 = 5;
export const MF_NUM_DROP_MODES = 6;
export const MF_QUALITY_NORMAL = 0;
export const MF_QUALITY_NORMAL_MINUS_1 = 1;
export const MF_QUALITY_NORMAL_MINUS_2 = 2;
export const MF_QUALITY_NORMAL_MINUS_3 = 3;
export const MF_QUALITY_NORMAL_MINUS_4 = 4;
export const MF_QUALITY_NORMAL_MINUS_5 = 5;
export const MF_NUM_QUALITY_LEVELS = 6;
export const MF_QUALITY_CANNOT_KEEP_UP = 1;
export const SequencerTopologyFlags_Last = 1;
export const REQUIRE_PROMPT = 1;
export const REQUIRE_SAVE_SELECTED = 2;
export const MFNET_CREDENTIAL_SAVE = 1;
export const MFNET_CREDENTIAL_DONT_CACHE = 2;
export const MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT = 4;
export const MFNET_AUTHENTICATION_PROXY = 1;
export const MFNET_AUTHENTICATION_CLEAR_TEXT = 2;
export const MFNET_AUTHENTICATION_LOGGED_ON_USER = 4;
export const MFNETSOURCE_UNDEFINED = 0;
export const MFNETSOURCE_HTTP = 1;
export const MFNETSOURCE_RTSP = 2;
export const MFNETSOURCE_FILE = 3;
export const MFNETSOURCE_MULTICAST = 4;
export const MFNETSOURCE_UDP = 0;
export const MFNETSOURCE_TCP = 1;
export const MFNETSOURCE_CACHE_UNAVAILABLE = 0;
export const MFNETSOURCE_CACHE_ACTIVE_WRITING = 1;
export const MFNETSOURCE_CACHE_ACTIVE_COMPLETE = 2;
export const MFNETSOURCE_RECVPACKETS_ID = 0;
export const MFNETSOURCE_LOSTPACKETS_ID = 1;
export const MFNETSOURCE_RESENDSREQUESTED_ID = 2;
export const MFNETSOURCE_RESENDSRECEIVED_ID = 3;
export const MFNETSOURCE_RECOVEREDBYECCPACKETS_ID = 4;
export const MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID = 5;
export const MFNETSOURCE_OUTPACKETS_ID = 6;
export const MFNETSOURCE_RECVRATE_ID = 7;
export const MFNETSOURCE_AVGBANDWIDTHBPS_ID = 8;
export const MFNETSOURCE_BYTESRECEIVED_ID = 9;
export const MFNETSOURCE_PROTOCOL_ID = 10;
export const MFNETSOURCE_TRANSPORT_ID = 11;
export const MFNETSOURCE_CACHE_STATE_ID = 12;
export const MFNETSOURCE_LINKBANDWIDTH_ID = 13;
export const MFNETSOURCE_CONTENTBITRATE_ID = 14;
export const MFNETSOURCE_SPEEDFACTOR_ID = 15;
export const MFNETSOURCE_BUFFERSIZE_ID = 16;
export const MFNETSOURCE_BUFFERPROGRESS_ID = 17;
export const MFNETSOURCE_LASTBWSWITCHTS_ID = 18;
export const MFNETSOURCE_SEEKRANGESTART_ID = 19;
export const MFNETSOURCE_SEEKRANGEEND_ID = 20;
export const MFNETSOURCE_BUFFERINGCOUNT_ID = 21;
export const MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID = 22;
export const MFNETSOURCE_SIGNEDSESSION_ID = 23;
export const MFNETSOURCE_MAXBITRATE_ID = 24;
export const MFNETSOURCE_RECEPTION_QUALITY_ID = 25;
export const MFNETSOURCE_RECOVEREDPACKETS_ID = 26;
export const MFNETSOURCE_VBR_ID = 27;
export const MFNETSOURCE_DOWNLOADPROGRESS_ID = 28;
export const MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID = 29;
export const MFNET_PROXYSETTING_NONE = 0;
export const MFNET_PROXYSETTING_MANUAL = 1;
export const MFNET_PROXYSETTING_AUTO = 2;
export const MFNET_PROXYSETTING_BROWSER = 3;
export const PEACTION_NO = 0;
export const PEACTION_PLAY = 1;
export const PEACTION_COPY = 2;
export const PEACTION_EXPORT = 3;
export const PEACTION_EXTRACT = 4;
export const PEACTION_RESERVED1 = 5;
export const PEACTION_RESERVED2 = 6;
export const PEACTION_RESERVED3 = 7;
export const PEACTION_LAST = 7;
export const MF_OPM_CGMSA_OFF = 0;
export const MF_OPM_CGMSA_COPY_FREELY = 1;
export const MF_OPM_CGMSA_COPY_NO_MORE = 2;
export const MF_OPM_CGMSA_COPY_ONE_GENERATION = 3;
export const MF_OPM_CGMSA_COPY_NEVER = 4;
export const MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8;
export const MF_OPM_ACP_OFF = 0;
export const MF_OPM_ACP_LEVEL_ONE = 1;
export const MF_OPM_ACP_LEVEL_TWO = 2;
export const MF_OPM_ACP_LEVEL_THREE = 3;
export const MF_OPM_ACP_FORCE_ULONG = 2147483647;
export const MFaudioConstrictionOff = 0;
export const MFaudioConstriction48_16 = 1;
export const MFaudioConstriction44_16 = 2;
export const MFaudioConstriction14_14 = 3;
export const MFaudioConstrictionMute = 4;
export const SAMPLE_PROTECTION_VERSION_NO = 0;
export const SAMPLE_PROTECTION_VERSION_BASIC_LOKI = 1;
export const SAMPLE_PROTECTION_VERSION_SCATTER = 2;
export const SAMPLE_PROTECTION_VERSION_RC4 = 3;
export const SAMPLE_PROTECTION_VERSION_AES128CTR = 4;
export const MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY = 0;
export const MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED = 1;
export const MF_TRANSCODE_ADJUST_PROFILE_DEFAULT = 0;
export const MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES = 1;
export const MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT = 0;
export const MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444 = 1;
export const MF_MEDIAKEYSESSION_TYPE_TEMPORARY = 0;
export const MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE = 1;
export const MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE = 2;
export const MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD = 3;
export const MF_MEDIAKEY_STATUS_USABLE = 0;
export const MF_MEDIAKEY_STATUS_EXPIRED = 1;
export const MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED = 2;
export const MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED = 3;
export const MF_MEDIAKEY_STATUS_STATUS_PENDING = 4;
export const MF_MEDIAKEY_STATUS_INTERNAL_ERROR = 5;
export const MF_MEDIAKEY_STATUS_RELEASED = 6;
export const MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED = 7;
export const MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST = 0;
export const MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL = 1;
export const MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE = 2;
export const MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST = 3;
export const MF_CROSS_ORIGIN_POLICY_NONE = 0;
export const MF_CROSS_ORIGIN_POLICY_ANONYMOUS = 1;
export const MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS = 2;
export const MFSensorDeviceType_Unknown = 0;
export const MFSensorDeviceType_Device = 1;
export const MFSensorDeviceType_MediaSource = 2;
export const MFSensorDeviceType_FrameProvider = 3;
export const MFSensorDeviceType_SensorTransform = 4;
export const MFSensorStreamType_Unknown = 0;
export const MFSensorStreamType_Input = 1;
export const MFSensorStreamType_Output = 2;
export const MFSensorDeviceMode_Controller = 0;
export const MFSensorDeviceMode_Shared = 1;
export const MFCameraIntrinsic_DistortionModelType_6KT = 0;
export const MFCameraIntrinsic_DistortionModelType_ArcTan = 1;
export const MFCameraOcclusionState_Open = 0;
export const MFCameraOcclusionState_OccludedByLid = 1;
export const MFCameraOcclusionState_OccludedByCameraHardware = 2;
export const MFSampleAllocatorUsage_UsesProvidedAllocator = 0;
export const MFSampleAllocatorUsage_UsesCustomAllocator = 1;
export const MFSampleAllocatorUsage_DoesNotAllocate = 2;
export const MFASF_INDEXER_WRITE_NEW_INDEX = 1;
export const MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK = 2;
export const MFASF_INDEXER_WRITE_FOR_LIVEREAD = 4;
export const MFASF_SPLITTER_REVERSE = 1;
export const MFASF_SPLITTER_WMDRM = 2;
export const ASF_STATUSFLAGS_INCOMPLETE = 1;
export const ASF_STATUSFLAGS_NONFATAL_ERROR = 2;
export const MFASF_MULTIPLEXER_AUTOADJUST_BITRATE = 1;
export const MFASF_STREAMSELECTOR_DISABLE_THINNING = 1;
export const MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE = 2;
export const ASF_STATUS_NOTSELECTED = 0;
export const ASF_STATUS_CLEANPOINTSONLY = 1;
export const ASF_STATUS_ALLDATAUNITS = 2;
export const MFSINK_WMDRMACTION_UNDEFINED = 0;
export const MFSINK_WMDRMACTION_ENCODE = 1;
export const MFSINK_WMDRMACTION_TRANSCODE = 2;
export const MFSINK_WMDRMACTION_TRANSCRYPT = 3;
export const MFSINK_WMDRMACTION_LAST = 3;
export const MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO = 0;
export const MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO = 1;
export const MF_CAPTURE_ENGINE_SINK_TYPE_RECORD = 0;
export const MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW = 1;
export const MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO = 2;
export const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW = 4294967290;
export const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD = 4294967289;
export const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO = 4294967288;
export const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO = 4294967287;
export const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA = 4294967286;
export const MF_CAPTURE_ENGINE_MEDIASOURCE = 4294967295;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW = 0;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE = 1;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT = 2;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT = 3;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO = 4;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED = 5;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA = 6;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER = 0;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS = 1;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA = 2;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT = 3;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH = 4;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH = 5;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH = 6;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING = 7;
export const MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT = 0;
export const MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW = 1;
export const MF_D3D11_RESOURCE = 0;
export const MF_D3D12_RESOURCE = 1;
export const MF_STANDARD_WORKQUEUE = 0;
export const MF_WINDOW_WORKQUEUE = 1;
export const MF_MULTITHREADED_WORKQUEUE = 2;
export const MF_TOPOSTATUS_INVALID = 0;
export const MF_TOPOSTATUS_READY = 100;
export const MF_TOPOSTATUS_STARTED_SOURCE = 200;
export const MF_TOPOSTATUS_DYNAMIC_CHANGED = 210;
export const MF_TOPOSTATUS_SINK_SWITCHED = 300;
export const MF_TOPOSTATUS_ENDED = 400;
export const MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_NONE = 0;
export const MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CTR = 1;
export const MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CBC = 2;
export const MFT_ENUM_FLAG_SYNCMFT = 1;
export const MFT_ENUM_FLAG_ASYNCMFT = 2;
export const MFT_ENUM_FLAG_HARDWARE = 4;
export const MFT_ENUM_FLAG_FIELDOFUSE = 8;
export const MFT_ENUM_FLAG_LOCALMFT = 16;
export const MFT_ENUM_FLAG_TRANSCODE_ONLY = 32;
export const MFT_ENUM_FLAG_SORTANDFILTER = 64;
export const MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY = 192;
export const MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY = 320;
export const MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE = 576;
export const MFT_ENUM_FLAG_UNTRUSTED_STOREMFT = 1024;
export const MFT_ENUM_FLAG_ALL = 63;
export const MFFrameSourceTypes_Color = 1;
export const MFFrameSourceTypes_Infrared = 2;
export const MFFrameSourceTypes_Depth = 4;
export const MFFrameSourceTypes_Image = 8;
export const MFFrameSourceTypes_Custom = 128;
export const MFVideo3DSampleFormat_BaseView = 0;
export const MFVideo3DSampleFormat_MultiView = 1;
export const MFVideo3DSampleFormat_Packed_LeftRight = 2;
export const MFVideo3DSampleFormat_Packed_TopBottom = 3;
export const MFSampleExtension_3DVideo_MultiView = 1;
export const MFSampleExtension_3DVideo_Packed = 0;
export const MFVideoRotationFormat_0 = 0;
export const MFVideoRotationFormat_90 = 90;
export const MFVideoRotationFormat_180 = 180;
export const MFVideoRotationFormat_270 = 270;
export const DistanceToFocalPlane = 0;
export const DistanceToOpticalCenter = 1;
export const MF_DECODE_UNIT_NAL = 0;
export const MF_DECODE_UNIT_SEI = 1;
export const MFVideoDRMFlag_None = 0;
export const MFVideoDRMFlag_AnalogProtected = 1;
export const MFVideoDRMFlag_DigitallyProtected = 2;
export const MFVideoPadFlag_PAD_TO_None = 0;
export const MFVideoPadFlag_PAD_TO_4x3 = 1;
export const MFVideoPadFlag_PAD_TO_16x9 = 2;
export const MFVideoSrcContentHintFlag_None = 0;
export const MFVideoSrcContentHintFlag_16x9 = 1;
export const MFVideoSrcContentHintFlag_235_1 = 2;
export const MFWaveFormatExConvertFlag_Normal = 0;
export const MFWaveFormatExConvertFlag_ForceExtensible = 1;
export const eAllocationTypeDynamic = 0;
export const eAllocationTypeRT = 1;
export const eAllocationTypePageable = 2;
export const eAllocationTypeIgnore = 3;
export const MF_MEDIA_ENGINE_ERR_NOERROR = 0;
export const MF_MEDIA_ENGINE_ERR_ABORTED = 1;
export const MF_MEDIA_ENGINE_ERR_NETWORK = 2;
export const MF_MEDIA_ENGINE_ERR_DECODE = 3;
export const MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED = 4;
export const MF_MEDIA_ENGINE_ERR_ENCRYPTED = 5;
export const MF_MEDIA_ENGINE_EVENT_LOADSTART = 1;
export const MF_MEDIA_ENGINE_EVENT_PROGRESS = 2;
export const MF_MEDIA_ENGINE_EVENT_SUSPEND = 3;
export const MF_MEDIA_ENGINE_EVENT_ABORT = 4;
export const MF_MEDIA_ENGINE_EVENT_ERROR = 5;
export const MF_MEDIA_ENGINE_EVENT_EMPTIED = 6;
export const MF_MEDIA_ENGINE_EVENT_STALLED = 7;
export const MF_MEDIA_ENGINE_EVENT_PLAY = 8;
export const MF_MEDIA_ENGINE_EVENT_PAUSE = 9;
export const MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA = 10;
export const MF_MEDIA_ENGINE_EVENT_LOADEDDATA = 11;
export const MF_MEDIA_ENGINE_EVENT_WAITING = 12;
export const MF_MEDIA_ENGINE_EVENT_PLAYING = 13;
export const MF_MEDIA_ENGINE_EVENT_CANPLAY = 14;
export const MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH = 15;
export const MF_MEDIA_ENGINE_EVENT_SEEKING = 16;
export const MF_MEDIA_ENGINE_EVENT_SEEKED = 17;
export const MF_MEDIA_ENGINE_EVENT_TIMEUPDATE = 18;
export const MF_MEDIA_ENGINE_EVENT_ENDED = 19;
export const MF_MEDIA_ENGINE_EVENT_RATECHANGE = 20;
export const MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE = 21;
export const MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE = 22;
export const MF_MEDIA_ENGINE_EVENT_FORMATCHANGE = 1000;
export const MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS = 1001;
export const MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER = 1002;
export const MF_MEDIA_ENGINE_EVENT_BALANCECHANGE = 1003;
export const MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE = 1004;
export const MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED = 1005;
export const MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED = 1006;
export const MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED = 1007;
export const MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE = 1008;
export const MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY = 1009;
export const MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE = 1010;
export const MF_MEDIA_ENGINE_EVENT_OPMINFO = 1011;
export const MF_MEDIA_ENGINE_EVENT_RESOURCELOST = 1012;
export const MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED = 1013;
export const MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR = 1014;
export const MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED = 1015;
export const MF_MEDIA_ENGINE_EVENT_AUDIOENDPOINTCHANGE = 1016;
export const MF_MEDIA_ENGINE_NETWORK_EMPTY = 0;
export const MF_MEDIA_ENGINE_NETWORK_IDLE = 1;
export const MF_MEDIA_ENGINE_NETWORK_LOADING = 2;
export const MF_MEDIA_ENGINE_NETWORK_NO_SOURCE = 3;
export const MF_MEDIA_ENGINE_READY_HAVE_NOTHING = 0;
export const MF_MEDIA_ENGINE_READY_HAVE_METADATA = 1;
export const MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA = 2;
export const MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA = 3;
export const MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA = 4;
export const MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED = 0;
export const MF_MEDIA_ENGINE_CANPLAY_MAYBE = 1;
export const MF_MEDIA_ENGINE_CANPLAY_PROBABLY = 2;
export const MF_MEDIA_ENGINE_PRELOAD_MISSING = 0;
export const MF_MEDIA_ENGINE_PRELOAD_EMPTY = 1;
export const MF_MEDIA_ENGINE_PRELOAD_NONE = 2;
export const MF_MEDIA_ENGINE_PRELOAD_METADATA = 3;
export const MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC = 4;
export const MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE = 0;
export const MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE = 1;
export const MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM = 2;
export const MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED = 0;
export const MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED = 1;
export const MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED = 2;
export const MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS = 3;
export const MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND = 4;
export const MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER = 5;
export const MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED = 6;
export const MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY = 7;
export const MF_MEDIA_ENGINE_SEEK_MODE_NORMAL = 0;
export const MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE = 1;
export const MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE = 0;
export const MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM = 1;
export const MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED = 1;
export const MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION = 2;
export const MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION = 4;
export const MF_MSE_VP9_SUPPORT_DEFAULT = 0;
export const MF_MSE_VP9_SUPPORT_ON = 1;
export const MF_MSE_VP9_SUPPORT_OFF = 2;
export const MF_MSE_OPUS_SUPPORT_ON = 0;
export const MF_MSE_OPUS_SUPPORT_OFF = 1;
export const MF_MSE_APPEND_MODE_SEGMENTS = 0;
export const MF_MSE_APPEND_MODE_SEQUENCE = 1;
export const MF_MSE_READY_CLOSED = 1;
export const MF_MSE_READY_OPEN = 2;
export const MF_MSE_READY_ENDED = 3;
export const MF_MSE_ERROR_NOERROR = 0;
export const MF_MSE_ERROR_NETWORK = 1;
export const MF_MSE_ERROR_DECODE = 2;
export const MF_MSE_ERROR_UNKNOWN_ERROR = 3;
export const MF_MEDIAENGINE_KEYERR_UNKNOWN = 1;
export const MF_MEDIAENGINE_KEYERR_CLIENT = 2;
export const MF_MEDIAENGINE_KEYERR_SERVICE = 3;
export const MF_MEDIAENGINE_KEYERR_OUTPUT = 4;
export const MF_MEDIAENGINE_KEYERR_HARDWARECHANGE = 5;
export const MF_MEDIAENGINE_KEYERR_DOMAIN = 6;
export const MF_HDCP_STATUS_ON = 0;
export const MF_HDCP_STATUS_OFF = 1;
export const MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT = 2;
export const MF_MEDIA_ENGINE_OPM_NOT_REQUESTED = 0;
export const MF_MEDIA_ENGINE_OPM_ESTABLISHED = 1;
export const MF_MEDIA_ENGINE_OPM_FAILED_VM = 2;
export const MF_MEDIA_ENGINE_OPM_FAILED_BDA = 3;
export const MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER = 4;
export const MF_MEDIA_ENGINE_OPM_FAILED = 5;
export const MF_MEDIA_ENGINE_AUDIOONLY = 1;
export const MF_MEDIA_ENGINE_WAITFORSTABLE_STATE = 2;
export const MF_MEDIA_ENGINE_FORCEMUTE = 4;
export const MF_MEDIA_ENGINE_REAL_TIME_MODE = 8;
export const MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS = 16;
export const MF_MEDIA_ENGINE_CREATEFLAGS_MASK = 31;
export const MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT = 1;
export const MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT = 2;
export const MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP = 4;
export const MF_TIMED_TEXT_TRACK_KIND_UNKNOWN = 0;
export const MF_TIMED_TEXT_TRACK_KIND_SUBTITLES = 1;
export const MF_TIMED_TEXT_TRACK_KIND_CAPTIONS = 2;
export const MF_TIMED_TEXT_TRACK_KIND_METADATA = 3;
export const MF_TIMED_TEXT_UNIT_TYPE_PIXELS = 0;
export const MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE = 1;
export const MF_TIMED_TEXT_FONT_STYLE_NORMAL = 0;
export const MF_TIMED_TEXT_FONT_STYLE_OBLIQUE = 1;
export const MF_TIMED_TEXT_FONT_STYLE_ITALIC = 2;
export const MF_TIMED_TEXT_ALIGNMENT_START = 0;
export const MF_TIMED_TEXT_ALIGNMENT_END = 1;
export const MF_TIMED_TEXT_ALIGNMENT_CENTER = 2;
export const MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE = 0;
export const MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER = 1;
export const MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER = 2;
export const MF_TIMED_TEXT_DECORATION_NONE = 0;
export const MF_TIMED_TEXT_DECORATION_UNDERLINE = 1;
export const MF_TIMED_TEXT_DECORATION_LINE_THROUGH = 2;
export const MF_TIMED_TEXT_DECORATION_OVERLINE = 4;
export const MF_TIMED_TEXT_WRITING_MODE_LRTB = 0;
export const MF_TIMED_TEXT_WRITING_MODE_RLTB = 1;
export const MF_TIMED_TEXT_WRITING_MODE_TBRL = 2;
export const MF_TIMED_TEXT_WRITING_MODE_TBLR = 3;
export const MF_TIMED_TEXT_WRITING_MODE_LR = 4;
export const MF_TIMED_TEXT_WRITING_MODE_RL = 5;
export const MF_TIMED_TEXT_WRITING_MODE_TB = 6;
export const MF_TIMED_TEXT_SCROLL_MODE_POP_ON = 0;
export const MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP = 1;
export const MF_TIMED_TEXT_ERROR_CODE_NOERROR = 0;
export const MF_TIMED_TEXT_ERROR_CODE_FATAL = 1;
export const MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT = 2;
export const MF_TIMED_TEXT_ERROR_CODE_NETWORK = 3;
export const MF_TIMED_TEXT_ERROR_CODE_INTERNAL = 4;
export const MF_TIMED_TEXT_CUE_EVENT_ACTIVE = 0;
export const MF_TIMED_TEXT_CUE_EVENT_INACTIVE = 1;
export const MF_TIMED_TEXT_CUE_EVENT_CLEAR = 2;
export const MF_TIMED_TEXT_TRACK_READY_STATE_NONE = 0;
export const MF_TIMED_TEXT_TRACK_READY_STATE_LOADING = 1;
export const MF_TIMED_TEXT_TRACK_READY_STATE_LOADED = 2;
export const MF_TIMED_TEXT_TRACK_READY_STATE_ERROR = 3;
export const MF_TIMED_TEXT_RUBY_POSITION_BEFORE = 0;
export const MF_TIMED_TEXT_RUBY_POSITION_AFTER = 1;
export const MF_TIMED_TEXT_RUBY_POSITION_OUTSIDE = 2;
export const MF_TIMED_TEXT_RUBY_ALIGN_CENTER = 0;
export const MF_TIMED_TEXT_RUBY_ALIGN_START = 1;
export const MF_TIMED_TEXT_RUBY_ALIGN_END = 2;
export const MF_TIMED_TEXT_RUBY_ALIGN_SPACEAROUND = 3;
export const MF_TIMED_TEXT_RUBY_ALIGN_SPACEBETWEEN = 4;
export const MF_TIMED_TEXT_RUBY_ALIGN_WITHBASE = 5;
export const MF_TIMED_TEXT_RUBY_RESERVE_NONE = 0;
export const MF_TIMED_TEXT_RUBY_RESERVE_BEFORE = 1;
export const MF_TIMED_TEXT_RUBY_RESERVE_AFTER = 2;
export const MF_TIMED_TEXT_RUBY_RESERVE_BOTH = 3;
export const MF_TIMED_TEXT_RUBY_RESERVE_OUTSIDE = 4;
export const MF_TIMED_TEXT_BOUTEN_TYPE_NONE = 0;
export const MF_TIMED_TEXT_BOUTEN_TYPE_AUTO = 1;
export const MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDCIRCLE = 2;
export const MF_TIMED_TEXT_BOUTEN_TYPE_OPENCIRCLE = 3;
export const MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDDOT = 4;
export const MF_TIMED_TEXT_BOUTEN_TYPE_OPENDOT = 5;
export const MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDSESAME = 6;
export const MF_TIMED_TEXT_BOUTEN_TYPE_OPENSESAME = 7;
export const MF_TIMED_TEXT_BOUTEN_POSITION_BEFORE = 0;
export const MF_TIMED_TEXT_BOUTEN_POSITION_AFTER = 1;
export const MF_TIMED_TEXT_BOUTEN_POSITION_OUTSIDE = 2;
export const MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN = 0;
export const MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO = 1;
export const MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO = 2;
export const MF_MEDIAKEYS_REQUIREMENT_REQUIRED = 1;
export const MF_MEDIAKEYS_REQUIREMENT_OPTIONAL = 2;
export const MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED = 3;
export const MF_SOURCE_READERF_ERROR = 1;
export const MF_SOURCE_READERF_ENDOFSTREAM = 2;
export const MF_SOURCE_READERF_NEWSTREAM = 4;
export const MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED = 16;
export const MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED = 32;
export const MF_SOURCE_READERF_STREAMTICK = 256;
export const MF_SOURCE_READERF_ALLEFFECTSREMOVED = 512;
export const MF_SOURCE_READER_CONTROLF_DRAIN = 1;
export const MF_SOURCE_READER_INVALID_STREAM_INDEX = "-1";
export const MF_SOURCE_READER_ALL_STREAMS = "-2";
export const MF_SOURCE_READER_ANY_STREAM = "-2";
export const MF_SOURCE_READER_FIRST_AUDIO_STREAM = "-3";
export const MF_SOURCE_READER_FIRST_VIDEO_STREAM = "-4";
export const MF_SOURCE_READER_MEDIASOURCE = "-1";
export const MF_SOURCE_READER_CURRENT_TYPE_INDEX = "-1";
export const MF_SINK_WRITER_INVALID_STREAM_INDEX = 4294967295;
export const MF_SINK_WRITER_ALL_STREAMS = 4294967294;
export const MF_SINK_WRITER_MEDIASINK = 4294967295;
export const MFVideoARMode_None = 0;
export const MFVideoARMode_PreservePicture = 1;
export const MFVideoARMode_PreservePixel = 2;
export const MFVideoARMode_NonLinearStretch = 4;
export const MFVideoARMode_Mask = 7;
export const MFVideoRenderPrefs_DoNotRenderBorder = 1;
export const MFVideoRenderPrefs_DoNotClipToDevice = 2;
export const MFVideoRenderPrefs_AllowOutputThrottling = 4;
export const MFVideoRenderPrefs_ForceOutputThrottling = 8;
export const MFVideoRenderPrefs_ForceBatching = 16;
export const MFVideoRenderPrefs_AllowBatching = 32;
export const MFVideoRenderPrefs_ForceScaling = 64;
export const MFVideoRenderPrefs_AllowScaling = 128;
export const MFVideoRenderPrefs_DoNotRepaintOnStop = 256;
export const MFVideoRenderPrefs_Mask = 511;
export const MFVP_MESSAGE_FLUSH = 0;
export const MFVP_MESSAGE_INVALIDATEMEDIATYPE = 1;
export const MFVP_MESSAGE_PROCESSINPUTNOTIFY = 2;
export const MFVP_MESSAGE_BEGINSTREAMING = 3;
export const MFVP_MESSAGE_ENDSTREAMING = 4;
export const MFVP_MESSAGE_ENDOFSTREAM = 5;
export const MFVP_MESSAGE_STEP = 6;
export const MFVP_MESSAGE_CANCELSTEP = 7;
export const MFVideoMixPrefs_ForceHalfInterlace = 1;
export const MFVideoMixPrefs_AllowDropToHalfInterlace = 2;
export const MFVideoMixPrefs_AllowDropToBob = 4;
export const MFVideoMixPrefs_ForceBob = 8;
export const MFVideoMixPrefs_EnableRotation = 16;
export const MFVideoMixPrefs_Mask = 31;
export const EVRFilterConfigPrefs_EnableQoS = 1;
export const EVRFilterConfigPrefs_Mask = 1;
export const MF_SERVICE_LOOKUP_UPSTREAM = 0;
export const MF_SERVICE_LOOKUP_UPSTREAM_DIRECT = 1;
export const MF_SERVICE_LOOKUP_DOWNSTREAM = 2;
export const MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT = 3;
export const MF_SERVICE_LOOKUP_ALL = 4;
export const MF_SERVICE_LOOKUP_GLOBAL = 5;
export const MFP_OPTION_NONE = 0;
export const MFP_OPTION_FREE_THREADED_CALLBACK = 1;
export const MFP_OPTION_NO_MMCSS = 2;
export const MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION = 4;
export const MFP_MEDIAPLAYER_STATE_EMPTY = 0;
export const MFP_MEDIAPLAYER_STATE_STOPPED = 1;
export const MFP_MEDIAPLAYER_STATE_PLAYING = 2;
export const MFP_MEDIAPLAYER_STATE_PAUSED = 3;
export const MFP_MEDIAPLAYER_STATE_SHUTDOWN = 4;
export const MFP_MEDIAITEM_IS_LIVE = 1;
export const MFP_MEDIAITEM_CAN_SEEK = 2;
export const MFP_MEDIAITEM_CAN_PAUSE = 4;
export const MFP_MEDIAITEM_HAS_SLOW_SEEK = 8;
export const MFP_CREDENTIAL_PROMPT = 1;
export const MFP_CREDENTIAL_SAVE = 2;
export const MFP_CREDENTIAL_DO_NOT_CACHE = 4;
export const MFP_CREDENTIAL_CLEAR_TEXT = 8;
export const MFP_CREDENTIAL_PROXY = 16;
export const MFP_CREDENTIAL_LOGGED_ON_USER = 32;
export const MFP_EVENT_TYPE_PLAY = 0;
export const MFP_EVENT_TYPE_PAUSE = 1;
export const MFP_EVENT_TYPE_STOP = 2;
export const MFP_EVENT_TYPE_POSITION_SET = 3;
export const MFP_EVENT_TYPE_RATE_SET = 4;
export const MFP_EVENT_TYPE_MEDIAITEM_CREATED = 5;
export const MFP_EVENT_TYPE_MEDIAITEM_SET = 6;
export const MFP_EVENT_TYPE_FRAME_STEP = 7;
export const MFP_EVENT_TYPE_MEDIAITEM_CLEARED = 8;
export const MFP_EVENT_TYPE_MF = 9;
export const MFP_EVENT_TYPE_ERROR = 10;
export const MFP_EVENT_TYPE_PLAYBACK_ENDED = 11;
export const MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL = 12;
export const MF_SHARING_ENGINE_EVENT_DISCONNECT = 2000;
export const MF_SHARING_ENGINE_EVENT_LOCALRENDERINGSTARTED = 2001;
export const MF_SHARING_ENGINE_EVENT_LOCALRENDERINGENDED = 2002;
export const MF_SHARING_ENGINE_EVENT_STOPPED = 2003;
export const MF_SHARING_ENGINE_EVENT_ERROR = 2501;
export const MF_MEDIA_SHARING_ENGINE_EVENT_DISCONNECT = 2000;
export const PLAYTO_SOURCE_NONE = 0;
export const PLAYTO_SOURCE_IMAGE = 1;
export const PLAYTO_SOURCE_AUDIO = 2;
export const PLAYTO_SOURCE_VIDEO = 4;
export const PLAYTO_SOURCE_PROTECTED = 8;
export const MFVideoAlphaBitmap_EntireDDS = 1;
export const MFVideoAlphaBitmap_SrcColorKey = 2;
export const MFVideoAlphaBitmap_SrcRect = 4;
export const MFVideoAlphaBitmap_DestRect = 8;
export const MFVideoAlphaBitmap_FilterMode = 16;
export const MFVideoAlphaBitmap_Alpha = 32;
export const MFVideoAlphaBitmap_BitMask = 63;
export const MFVirtualCameraType_SoftwareCameraSource = 0;
export const MFVirtualCameraLifetime_Session = 0;
export const MFVirtualCameraLifetime_System = 1;
export const MFVirtualCameraAccess_CurrentUser = 0;
export const MFVirtualCameraAccess_AllUsers = 1;
export const OPM_HDCP_TYPE_0 = 0;
export const OPM_HDCP_TYPE_1 = 1;
export const OPM_HDCP_STATUS_ON = 0;
export const OPM_HDCP_STATUS_OFF = 1;
export const COPP_HDCP_Level0 = 0;
export const COPP_HDCP_LevelMin = 0;
export const COPP_HDCP_Level1 = 1;
export const COPP_HDCP_LevelMax = 1;
export const COPP_HDCP_ForceDWORD = 2147483647;
export const COPP_CGMSA_Disabled = 0;
export const COPP_CGMSA_LevelMin = 0;
export const COPP_CGMSA_CopyFreely = 1;
export const COPP_CGMSA_CopyNoMore = 2;
export const COPP_CGMSA_CopyOneGeneration = 3;
export const COPP_CGMSA_CopyNever = 4;
export const COPP_CGMSA_RedistributionControlRequired = 8;
export const COPP_CGMSA_LevelMax = 12;
export const COPP_CGMSA_ForceDWORD = 2147483647;
export const COPP_ACP_Level0 = 0;
export const COPP_ACP_LevelMin = 0;
export const COPP_ACP_Level1 = 1;
export const COPP_ACP_Level2 = 2;
export const COPP_ACP_Level3 = 3;
export const COPP_ACP_LevelMax = 3;
export const COPP_ACP_ForceDWORD = 2147483647;
export const COPP_ProtectionStandard_Unknown = "-2147483648";
export const COPP_ProtectionStandard_None = 0;
export const COPP_ProtectionStandard_IEC61880_525i = 1;
export const COPP_ProtectionStandard_IEC61880_2_525i = 2;
export const COPP_ProtectionStandard_IEC62375_625p = 4;
export const COPP_ProtectionStandard_EIA608B_525 = 8;
export const COPP_ProtectionStandard_EN300294_625i = 16;
export const COPP_ProtectionStandard_CEA805A_TypeA_525p = 32;
export const COPP_ProtectionStandard_CEA805A_TypeA_750p = 64;
export const COPP_ProtectionStandard_CEA805A_TypeA_1125i = 128;
export const COPP_ProtectionStandard_CEA805A_TypeB_525p = 256;
export const COPP_ProtectionStandard_CEA805A_TypeB_750p = 512;
export const COPP_ProtectionStandard_CEA805A_TypeB_1125i = 1024;
export const COPP_ProtectionStandard_ARIBTRB15_525i = 2048;
export const COPP_ProtectionStandard_ARIBTRB15_525p = 4096;
export const COPP_ProtectionStandard_ARIBTRB15_750p = 8192;
export const COPP_ProtectionStandard_ARIBTRB15_1125i = 16384;
export const COPP_ProtectionStandard_Mask = "-2147450881";
export const COPP_ProtectionStandard_Reserved = 2147450880;
export const COPP_AspectRatio_EN300294_FullFormat4by3 = 0;
export const COPP_AspectRatio_EN300294_Box14by9Center = 1;
export const COPP_AspectRatio_EN300294_Box14by9Top = 2;
export const COPP_AspectRatio_EN300294_Box16by9Center = 3;
export const COPP_AspectRatio_EN300294_Box16by9Top = 4;
export const COPP_AspectRatio_EN300294_BoxGT16by9Center = 5;
export const COPP_AspectRatio_EN300294_FullFormat4by3ProtectedCenter = 6;
export const COPP_AspectRatio_EN300294_FullFormat16by9Anamorphic = 7;
export const COPP_AspectRatio_ForceDWORD = 2147483647;
export const COPP_StatusNormal = 0;
export const COPP_LinkLost = 1;
export const COPP_RenegotiationRequired = 2;
export const COPP_StatusFlagsReserved = "-4";
export const COPP_HDCPRepeater = 1;
export const COPP_HDCPFlagsReserved = "-2";
export const COPP_ConnectorType_Unknown = "-1";
export const COPP_ConnectorType_VGA = 0;
export const COPP_ConnectorType_SVideo = 1;
export const COPP_ConnectorType_CompositeVideo = 2;
export const COPP_ConnectorType_ComponentVideo = 3;
export const COPP_ConnectorType_DVI = 4;
export const COPP_ConnectorType_HDMI = 5;
export const COPP_ConnectorType_LVDS = 6;
export const COPP_ConnectorType_TMDS = 7;
export const COPP_ConnectorType_D_JPN = 8;
export const COPP_ConnectorType_Internal = "-2147483648";
export const COPP_ConnectorType_ForceDWORD = 2147483647;
export const COPP_BusType_Unknown = 0;
export const COPP_BusType_PCI = 1;
export const COPP_BusType_PCIX = 2;
export const COPP_BusType_PCIExpress = 3;
export const COPP_BusType_AGP = 4;
export const COPP_BusType_Integrated = "-2147483648";
export const COPP_BusType_ForceDWORD = 2147483647;
export const MF_TRANSFER_VIDEO_FRAME_DEFAULT = 0;
export const MF_TRANSFER_VIDEO_FRAME_STRETCH = 1;
export const MF_TRANSFER_VIDEO_FRAME_IGNORE_PAR = 2;
export const MF_MEDIASOURCE_STATUS_INFO_FULLYSUPPORTED = 0;
export const MF_MEDIASOURCE_STATUS_INFO_UNKNOWN = 1;

// Structs

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY (size: 16)
 */
export interface PROPERTYKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofPROPERTYKEY = 16;

export function allocPROPERTYKEY(data?: Partial<PROPERTYKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTYKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Properties.DEVPROPKEY (size: 16)
 */
export interface DEVPROPKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofDEVPROPKEY = 16;

export function allocDEVPROPKEY(data?: Partial<DEVPROPKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPROPKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.UNCOMPRESSEDAUDIOFORMAT (size: 32)
 */
export interface UNCOMPRESSEDAUDIOFORMAT {
  /** System.Guid */
  guidFormatType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSamplesPerFrame: number;
  /** u32 */
  dwBytesPerSampleContainer: number;
  /** u32 */
  dwValidBitsPerSample: number;
  /** f32 */
  fFramesPerSecond: number;
  /** u32 */
  dwChannelMask: number;
}

export const sizeofUNCOMPRESSEDAUDIOFORMAT = 32;

export function allocUNCOMPRESSEDAUDIOFORMAT(data?: Partial<UNCOMPRESSEDAUDIOFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofUNCOMPRESSEDAUDIOFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidFormatType !== undefined) view.setBigUint64(0, data.guidFormatType === null ? 0n : BigInt(util.toPointer(data.guidFormatType)), true);
  // 0x08: u32
  if (data?.dwSamplesPerFrame !== undefined) view.setUint32(8, Number(data.dwSamplesPerFrame), true);
  // 0x0c: u32
  if (data?.dwBytesPerSampleContainer !== undefined) view.setUint32(12, Number(data.dwBytesPerSampleContainer), true);
  // 0x10: u32
  if (data?.dwValidBitsPerSample !== undefined) view.setUint32(16, Number(data.dwValidBitsPerSample), true);
  // 0x14: f32
  if (data?.fFramesPerSecond !== undefined) view.setFloat32(20, Number(data.fFramesPerSecond), true);
  // 0x18: u32
  if (data?.dwChannelMask !== undefined) view.setUint32(24, Number(data.dwChannelMask), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_CONNECTION_PROPERTY (size: 24)
 */
export interface APO_CONNECTION_PROPERTY {
  /** usize */
  pBuffer: Deno.PointerValue;
  /** u32 */
  u32ValidFrameCount: number;
  /** Windows.Win32.Media.Audio.Apo.APO_BUFFER_FLAGS */
  u32BufferFlags: APO_BUFFER_FLAGS;
  /** u32 */
  u32Signature: number;
}

export const sizeofAPO_CONNECTION_PROPERTY = 24;

export function allocAPO_CONNECTION_PROPERTY(data?: Partial<APO_CONNECTION_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_CONNECTION_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.pBuffer !== undefined) view.setBigUint64(0, BigInt(data.pBuffer), true);
  // 0x08: u32
  if (data?.u32ValidFrameCount !== undefined) view.setUint32(8, Number(data.u32ValidFrameCount), true);
  // 0x0c: i32
  if (data?.u32BufferFlags !== undefined) view.setInt32(12, Number(data.u32BufferFlags), true);
  // 0x10: u32
  if (data?.u32Signature !== undefined) view.setUint32(16, Number(data.u32Signature), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_CONNECTION_PROPERTY_V2 (size: 16)
 */
export interface APO_CONNECTION_PROPERTY_V2 {
  /** Windows.Win32.Media.Audio.Apo.APO_CONNECTION_PROPERTY */
  property: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  u64QPCTime: Deno.PointerValue;
}

export const sizeofAPO_CONNECTION_PROPERTY_V2 = 16;

export function allocAPO_CONNECTION_PROPERTY_V2(data?: Partial<APO_CONNECTION_PROPERTY_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_CONNECTION_PROPERTY_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.property !== undefined) view.setBigUint64(0, data.property === null ? 0n : BigInt(util.toPointer(data.property)), true);
  // 0x08: u64
  if (data?.u64QPCTime !== undefined) view.setBigUint64(8, BigInt(data.u64QPCTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_CONNECTION_DESCRIPTOR (size: 40)
 */
export interface APO_CONNECTION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.Apo.APO_CONNECTION_BUFFER_TYPE */
  Type: APO_CONNECTION_BUFFER_TYPE;
  /** usize */
  pBuffer: Deno.PointerValue;
  /** u32 */
  u32MaxFrameCount: number;
  /** Windows.Win32.Media.Audio.Apo.IAudioMediaType */
  pFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  u32Signature: number;
}

export const sizeofAPO_CONNECTION_DESCRIPTOR = 40;

export function allocAPO_CONNECTION_DESCRIPTOR(data?: Partial<APO_CONNECTION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_CONNECTION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.pBuffer !== undefined) view.setBigUint64(8, BigInt(data.pBuffer), true);
  // 0x10: u32
  if (data?.u32MaxFrameCount !== undefined) view.setUint32(16, Number(data.u32MaxFrameCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pFormat !== undefined) view.setBigUint64(24, data.pFormat === null ? 0n : BigInt(util.toPointer(data.pFormat)), true);
  // 0x20: u32
  if (data?.u32Signature !== undefined) view.setUint32(32, Number(data.u32Signature), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_REG_PROPERTIES (size: 72)
 */
export interface APO_REG_PROPERTIES {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.Apo.APO_FLAG */
  Flags: APO_FLAG;
  /** array */
  szFriendlyName: Deno.PointerValue | null;
  /** array */
  szCopyrightInfo: Deno.PointerValue | null;
  /** u32 */
  u32MajorVersion: number;
  /** u32 */
  u32MinorVersion: number;
  /** u32 */
  u32MinInputConnections: number;
  /** u32 */
  u32MaxInputConnections: number;
  /** u32 */
  u32MinOutputConnections: number;
  /** u32 */
  u32MaxOutputConnections: number;
  /** u32 */
  u32MaxInstances: number;
  /** u32 */
  u32NumAPOInterfaces: number;
  /** array */
  iidAPOInterfaceList: Deno.PointerValue | null;
}

export const sizeofAPO_REG_PROPERTIES = 72;

export function allocAPO_REG_PROPERTIES(data?: Partial<APO_REG_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_REG_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x08: i32
  if (data?.Flags !== undefined) view.setInt32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szFriendlyName !== undefined) view.setBigUint64(16, data.szFriendlyName === null ? 0n : BigInt(util.toPointer(data.szFriendlyName)), true);
  // 0x18: pointer
  if (data?.szCopyrightInfo !== undefined) view.setBigUint64(24, data.szCopyrightInfo === null ? 0n : BigInt(util.toPointer(data.szCopyrightInfo)), true);
  // 0x20: u32
  if (data?.u32MajorVersion !== undefined) view.setUint32(32, Number(data.u32MajorVersion), true);
  // 0x24: u32
  if (data?.u32MinorVersion !== undefined) view.setUint32(36, Number(data.u32MinorVersion), true);
  // 0x28: u32
  if (data?.u32MinInputConnections !== undefined) view.setUint32(40, Number(data.u32MinInputConnections), true);
  // 0x2c: u32
  if (data?.u32MaxInputConnections !== undefined) view.setUint32(44, Number(data.u32MaxInputConnections), true);
  // 0x30: u32
  if (data?.u32MinOutputConnections !== undefined) view.setUint32(48, Number(data.u32MinOutputConnections), true);
  // 0x34: u32
  if (data?.u32MaxOutputConnections !== undefined) view.setUint32(52, Number(data.u32MaxOutputConnections), true);
  // 0x38: u32
  if (data?.u32MaxInstances !== undefined) view.setUint32(56, Number(data.u32MaxInstances), true);
  // 0x3c: u32
  if (data?.u32NumAPOInterfaces !== undefined) view.setUint32(60, Number(data.u32NumAPOInterfaces), true);
  // 0x40: pointer
  if (data?.iidAPOInterfaceList !== undefined) view.setBigUint64(64, data.iidAPOInterfaceList === null ? 0n : BigInt(util.toPointer(data.iidAPOInterfaceList)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APOInitBaseStruct (size: 16)
 */
export interface APOInitBaseStruct {
  /** u32 */
  cbSize: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPOInitBaseStruct = 16;

export function allocAPOInitBaseStruct(data?: Partial<APOInitBaseStruct>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitBaseStruct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APOInitSystemEffects (size: 40)
 */
export interface APOInitSystemEffects {
  /** Windows.Win32.Media.Audio.Apo.APOInitBaseStruct */
  APOInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOEndpointProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOSystemEffectsProperties: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.IMMDeviceCollection */
  pDeviceCollection: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPOInitSystemEffects = 40;

export function allocAPOInitSystemEffects(data?: Partial<APOInitSystemEffects>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitSystemEffects);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.APOInit !== undefined) view.setBigUint64(0, data.APOInit === null ? 0n : BigInt(util.toPointer(data.APOInit)), true);
  // 0x08: pointer
  if (data?.pAPOEndpointProperties !== undefined) view.setBigUint64(8, data.pAPOEndpointProperties === null ? 0n : BigInt(util.toPointer(data.pAPOEndpointProperties)), true);
  // 0x10: pointer
  if (data?.pAPOSystemEffectsProperties !== undefined) view.setBigUint64(16, data.pAPOSystemEffectsProperties === null ? 0n : BigInt(util.toPointer(data.pAPOSystemEffectsProperties)), true);
  // 0x18: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(24, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  // 0x20: pointer
  if (data?.pDeviceCollection !== undefined) view.setBigUint64(32, data.pDeviceCollection === null ? 0n : BigInt(util.toPointer(data.pDeviceCollection)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Media.Audio.Apo.APOInitSystemEffects2 (size: 64)
 */
export interface APOInitSystemEffects2 {
  /** Windows.Win32.Media.Audio.Apo.APOInitBaseStruct */
  APOInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOEndpointProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOSystemEffectsProperties: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.IMMDeviceCollection */
  pDeviceCollection: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nSoftwareIoDeviceInCollection: number;
  /** u32 */
  nSoftwareIoConnectorIndex: number;
  /** System.Guid */
  AudioProcessingMode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  InitializeForDiscoveryOnly: boolean;
}

export const sizeofAPOInitSystemEffects2 = 64;

export function allocAPOInitSystemEffects2(data?: Partial<APOInitSystemEffects2>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitSystemEffects2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.APOInit !== undefined) view.setBigUint64(0, data.APOInit === null ? 0n : BigInt(util.toPointer(data.APOInit)), true);
  // 0x08: pointer
  if (data?.pAPOEndpointProperties !== undefined) view.setBigUint64(8, data.pAPOEndpointProperties === null ? 0n : BigInt(util.toPointer(data.pAPOEndpointProperties)), true);
  // 0x10: pointer
  if (data?.pAPOSystemEffectsProperties !== undefined) view.setBigUint64(16, data.pAPOSystemEffectsProperties === null ? 0n : BigInt(util.toPointer(data.pAPOSystemEffectsProperties)), true);
  // 0x18: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(24, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  // 0x20: pointer
  if (data?.pDeviceCollection !== undefined) view.setBigUint64(32, data.pDeviceCollection === null ? 0n : BigInt(util.toPointer(data.pDeviceCollection)), true);
  // 0x28: u32
  if (data?.nSoftwareIoDeviceInCollection !== undefined) view.setUint32(40, Number(data.nSoftwareIoDeviceInCollection), true);
  // 0x2c: u32
  if (data?.nSoftwareIoConnectorIndex !== undefined) view.setUint32(44, Number(data.nSoftwareIoConnectorIndex), true);
  // 0x30: pointer
  if (data?.AudioProcessingMode !== undefined) view.setBigUint64(48, data.AudioProcessingMode === null ? 0n : BigInt(util.toPointer(data.AudioProcessingMode)), true);
  // 0x38: i32
  if (data?.InitializeForDiscoveryOnly !== undefined) view.setInt32(56, Number(data.InitializeForDiscoveryOnly), true);
  // 0x3c: pad4
  return buf;
}

export type LPARAM = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.Audio.Apo.AudioFXExtensionParams (size: 24)
 */
export interface AudioFXExtensionParams {
  /** Windows.Win32.Foundation.LPARAM */
  AddPageParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwstrEndpointID: string | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pFxProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAudioFXExtensionParams = 24;

export function allocAudioFXExtensionParams(data?: Partial<AudioFXExtensionParams>): Uint8Array {
  const buf = new Uint8Array(sizeofAudioFXExtensionParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AddPageParam !== undefined) view.setBigUint64(0, data.AddPageParam === null ? 0n : BigInt(util.toPointer(data.AddPageParam)), true);
  // 0x08: buffer
  if (data?.pwstrEndpointID !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwstrEndpointID);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pFxProperties !== undefined) view.setBigUint64(16, data.pFxProperties === null ? 0n : BigInt(util.toPointer(data.pFxProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECT (size: 16)
 */
export interface AUDIO_SYSTEMEFFECT {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  canSetState: boolean;
  /** Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECT_STATE */
  state: AUDIO_SYSTEMEFFECT_STATE;
}

export const sizeofAUDIO_SYSTEMEFFECT = 16;

export function allocAUDIO_SYSTEMEFFECT(data?: Partial<AUDIO_SYSTEMEFFECT>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_SYSTEMEFFECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: i32
  if (data?.canSetState !== undefined) view.setInt32(8, Number(data.canSetState), true);
  // 0x0c: i32
  if (data?.state !== undefined) view.setInt32(12, Number(data.state), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APOInitSystemEffects3 (size: 56)
 */
export interface APOInitSystemEffects3 {
  /** Windows.Win32.Media.Audio.Apo.APOInitBaseStruct */
  APOInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOEndpointProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IServiceProvider */
  pServiceProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.IMMDeviceCollection */
  pDeviceCollection: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nSoftwareIoDeviceInCollection: number;
  /** u32 */
  nSoftwareIoConnectorIndex: number;
  /** System.Guid */
  AudioProcessingMode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  InitializeForDiscoveryOnly: boolean;
}

export const sizeofAPOInitSystemEffects3 = 56;

export function allocAPOInitSystemEffects3(data?: Partial<APOInitSystemEffects3>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitSystemEffects3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.APOInit !== undefined) view.setBigUint64(0, data.APOInit === null ? 0n : BigInt(util.toPointer(data.APOInit)), true);
  // 0x08: pointer
  if (data?.pAPOEndpointProperties !== undefined) view.setBigUint64(8, data.pAPOEndpointProperties === null ? 0n : BigInt(util.toPointer(data.pAPOEndpointProperties)), true);
  // 0x10: pointer
  if (data?.pServiceProvider !== undefined) view.setBigUint64(16, data.pServiceProvider === null ? 0n : BigInt(util.toPointer(data.pServiceProvider)), true);
  // 0x18: pointer
  if (data?.pDeviceCollection !== undefined) view.setBigUint64(24, data.pDeviceCollection === null ? 0n : BigInt(util.toPointer(data.pDeviceCollection)), true);
  // 0x20: u32
  if (data?.nSoftwareIoDeviceInCollection !== undefined) view.setUint32(32, Number(data.nSoftwareIoDeviceInCollection), true);
  // 0x24: u32
  if (data?.nSoftwareIoConnectorIndex !== undefined) view.setUint32(36, Number(data.nSoftwareIoConnectorIndex), true);
  // 0x28: pointer
  if (data?.AudioProcessingMode !== undefined) view.setBigUint64(40, data.AudioProcessingMode === null ? 0n : BigInt(util.toPointer(data.AudioProcessingMode)), true);
  // 0x30: i32
  if (data?.InitializeForDiscoveryOnly !== undefined) view.setInt32(48, Number(data.InitializeForDiscoveryOnly), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION (size: 16)
 */
export interface AUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION {
  /** Windows.Win32.Media.Audio.IMMDevice */
  endpoint: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  volume: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION = 16;

export function allocAUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION(data?: Partial<AUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.endpoint !== undefined) view.setBigUint64(0, data.endpoint === null ? 0n : BigInt(util.toPointer(data.endpoint)), true);
  // 0x08: pointer
  if (data?.volume !== undefined) view.setBigUint64(8, data.volume === null ? 0n : BigInt(util.toPointer(data.volume)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION (size: 24)
 */
export interface AUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION {
  /** Windows.Win32.Media.Audio.IMMDevice */
  endpoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  propertyStore: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  propertyKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION = 24;

export function allocAUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION(data?: Partial<AUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.endpoint !== undefined) view.setBigUint64(0, data.endpoint === null ? 0n : BigInt(util.toPointer(data.endpoint)), true);
  // 0x08: pointer
  if (data?.propertyStore !== undefined) view.setBigUint64(8, data.propertyStore === null ? 0n : BigInt(util.toPointer(data.propertyStore)), true);
  // 0x10: pointer
  if (data?.propertyKey !== undefined) view.setBigUint64(16, data.propertyKey === null ? 0n : BigInt(util.toPointer(data.propertyKey)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION (size: 40)
 */
export interface AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION {
  /** Windows.Win32.Media.Audio.IMMDevice */
  endpoint: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  propertyStoreContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE */
  propertyStoreType: AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  propertyStore: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  propertyKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION = 40;

export function allocAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION(data?: Partial<AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.endpoint !== undefined) view.setBigUint64(0, data.endpoint === null ? 0n : BigInt(util.toPointer(data.endpoint)), true);
  // 0x08: pointer
  if (data?.propertyStoreContext !== undefined) view.setBigUint64(8, data.propertyStoreContext === null ? 0n : BigInt(util.toPointer(data.propertyStoreContext)), true);
  // 0x10: i32
  if (data?.propertyStoreType !== undefined) view.setInt32(16, Number(data.propertyStoreType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.propertyStore !== undefined) view.setBigUint64(24, data.propertyStore === null ? 0n : BigInt(util.toPointer(data.propertyStore)), true);
  // 0x20: pointer
  if (data?.propertyKey !== undefined) view.setBigUint64(32, data.propertyKey === null ? 0n : BigInt(util.toPointer(data.propertyKey)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION (size: 16)
 */
export interface APO_NOTIFICATION {
  /** Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION_TYPE */
  type: APO_NOTIFICATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPO_NOTIFICATION = 16;

export function allocAPO_NOTIFICATION(data?: Partial<APO_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR (size: 8)
 */
export interface AUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.IMMDevice */
  device: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR = 8;

export function allocAUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR(data?: Partial<AUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.device !== undefined) view.setBigUint64(0, data.device === null ? 0n : BigInt(util.toPointer(data.device)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR (size: 8)
 */
export interface AUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.IMMDevice */
  device: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR = 8;

export function allocAUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR(data?: Partial<AUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.device !== undefined) view.setBigUint64(0, data.device === null ? 0n : BigInt(util.toPointer(data.device)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR (size: 16)
 */
export interface AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.IMMDevice */
  device: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  propertyStoreContext: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR = 16;

export function allocAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR(data?: Partial<AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.device !== undefined) view.setBigUint64(0, data.device === null ? 0n : BigInt(util.toPointer(data.device)), true);
  // 0x08: pointer
  if (data?.propertyStoreContext !== undefined) view.setBigUint64(8, data.propertyStoreContext === null ? 0n : BigInt(util.toPointer(data.propertyStoreContext)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION_DESCRIPTOR (size: 16)
 */
export interface APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION_TYPE */
  type: APO_NOTIFICATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPO_NOTIFICATION_DESCRIPTOR = 16;

export function allocAPO_NOTIFICATION_DESCRIPTOR(data?: Partial<APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DLSID (size: 16)
 */
export interface DLSID {
  /** u32 */
  ulData1: number;
  /** u16 */
  usData2: number;
  /** u16 */
  usData3: number;
  /** array */
  abData4: Deno.PointerValue | null;
}

export const sizeofDLSID = 16;

export function allocDLSID(data?: Partial<DLSID>): Uint8Array {
  const buf = new Uint8Array(sizeofDLSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulData1 !== undefined) view.setUint32(0, Number(data.ulData1), true);
  // 0x04: u16
  if (data?.usData2 !== undefined) view.setUint16(4, Number(data.usData2), true);
  // 0x06: u16
  if (data?.usData3 !== undefined) view.setUint16(6, Number(data.usData3), true);
  // 0x08: pointer
  if (data?.abData4 !== undefined) view.setBigUint64(8, data.abData4 === null ? 0n : BigInt(util.toPointer(data.abData4)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DLSVERSION (size: 8)
 */
export interface DLSVERSION {
  /** u32 */
  dwVersionMS: number;
  /** u32 */
  dwVersionLS: number;
}

export const sizeofDLSVERSION = 8;

export function allocDLSVERSION(data?: Partial<DLSVERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofDLSVERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersionMS !== undefined) view.setUint32(0, Number(data.dwVersionMS), true);
  // 0x04: u32
  if (data?.dwVersionLS !== undefined) view.setUint32(4, Number(data.dwVersionLS), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.CONNECTION (size: 16)
 */
export interface CONNECTION {
  /** u16 */
  usSource: number;
  /** u16 */
  usControl: number;
  /** u16 */
  usDestination: number;
  /** u16 */
  usTransform: number;
  /** i32 */
  lScale: number;
}

export const sizeofCONNECTION = 16;

export function allocCONNECTION(data?: Partial<CONNECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofCONNECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usSource !== undefined) view.setUint16(0, Number(data.usSource), true);
  // 0x02: u16
  if (data?.usControl !== undefined) view.setUint16(2, Number(data.usControl), true);
  // 0x04: u16
  if (data?.usDestination !== undefined) view.setUint16(4, Number(data.usDestination), true);
  // 0x06: u16
  if (data?.usTransform !== undefined) view.setUint16(6, Number(data.usTransform), true);
  // 0x08: i32
  if (data?.lScale !== undefined) view.setInt32(8, Number(data.lScale), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.CONNECTIONLIST (size: 8)
 */
export interface CONNECTIONLIST {
  /** u32 */
  cbSize: number;
  /** u32 */
  cConnections: number;
}

export const sizeofCONNECTIONLIST = 8;

export function allocCONNECTIONLIST(data?: Partial<CONNECTIONLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofCONNECTIONLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cConnections !== undefined) view.setUint32(4, Number(data.cConnections), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.RGNRANGE (size: 8)
 */
export interface RGNRANGE {
  /** u16 */
  usLow: number;
  /** u16 */
  usHigh: number;
}

export const sizeofRGNRANGE = 8;

export function allocRGNRANGE(data?: Partial<RGNRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofRGNRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usLow !== undefined) view.setUint16(0, Number(data.usLow), true);
  // 0x02: u16
  if (data?.usHigh !== undefined) view.setUint16(2, Number(data.usHigh), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.MIDILOCALE (size: 8)
 */
export interface MIDILOCALE {
  /** u32 */
  ulBank: number;
  /** u32 */
  ulInstrument: number;
}

export const sizeofMIDILOCALE = 8;

export function allocMIDILOCALE(data?: Partial<MIDILOCALE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDILOCALE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulBank !== undefined) view.setUint32(0, Number(data.ulBank), true);
  // 0x04: u32
  if (data?.ulInstrument !== undefined) view.setUint32(4, Number(data.ulInstrument), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.RGNHEADER (size: 24)
 */
export interface RGNHEADER {
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeVelocity: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  fusOptions: number;
  /** u16 */
  usKeyGroup: number;
}

export const sizeofRGNHEADER = 24;

export function allocRGNHEADER(data?: Partial<RGNHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofRGNHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RangeKey !== undefined) view.setBigUint64(0, data.RangeKey === null ? 0n : BigInt(util.toPointer(data.RangeKey)), true);
  // 0x08: pointer
  if (data?.RangeVelocity !== undefined) view.setBigUint64(8, data.RangeVelocity === null ? 0n : BigInt(util.toPointer(data.RangeVelocity)), true);
  // 0x10: u16
  if (data?.fusOptions !== undefined) view.setUint16(16, Number(data.fusOptions), true);
  // 0x12: u16
  if (data?.usKeyGroup !== undefined) view.setUint16(18, Number(data.usKeyGroup), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.INSTHEADER (size: 16)
 */
export interface INSTHEADER {
  /** u32 */
  cRegions: number;
  /** Windows.Win32.Media.Audio.DirectMusic.MIDILOCALE */
  Locale: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINSTHEADER = 16;

export function allocINSTHEADER(data?: Partial<INSTHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofINSTHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cRegions !== undefined) view.setUint32(0, Number(data.cRegions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Locale !== undefined) view.setBigUint64(8, data.Locale === null ? 0n : BigInt(util.toPointer(data.Locale)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DLSHEADER (size: 8)
 */
export interface DLSHEADER {
  /** u32 */
  cInstruments: number;
}

export const sizeofDLSHEADER = 8;

export function allocDLSHEADER(data?: Partial<DLSHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDLSHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cInstruments !== undefined) view.setUint32(0, Number(data.cInstruments), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.WAVELINK (size: 16)
 */
export interface WAVELINK {
  /** u16 */
  fusOptions: number;
  /** u16 */
  usPhaseGroup: number;
  /** u32 */
  ulChannel: number;
  /** u32 */
  ulTableIndex: number;
}

export const sizeofWAVELINK = 16;

export function allocWAVELINK(data?: Partial<WAVELINK>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVELINK);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.fusOptions !== undefined) view.setUint16(0, Number(data.fusOptions), true);
  // 0x02: u16
  if (data?.usPhaseGroup !== undefined) view.setUint16(2, Number(data.usPhaseGroup), true);
  // 0x04: u32
  if (data?.ulChannel !== undefined) view.setUint32(4, Number(data.ulChannel), true);
  // 0x08: u32
  if (data?.ulTableIndex !== undefined) view.setUint32(8, Number(data.ulTableIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.POOLCUE (size: 8)
 */
export interface POOLCUE {
  /** u32 */
  ulOffset: number;
}

export const sizeofPOOLCUE = 8;

export function allocPOOLCUE(data?: Partial<POOLCUE>): Uint8Array {
  const buf = new Uint8Array(sizeofPOOLCUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulOffset !== undefined) view.setUint32(0, Number(data.ulOffset), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.POOLTABLE (size: 8)
 */
export interface POOLTABLE {
  /** u32 */
  cbSize: number;
  /** u32 */
  cCues: number;
}

export const sizeofPOOLTABLE = 8;

export function allocPOOLTABLE(data?: Partial<POOLTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofPOOLTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cCues !== undefined) view.setUint32(4, Number(data.cCues), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.WSMPL (size: 24)
 */
export interface WSMPL {
  /** u32 */
  cbSize: number;
  /** u16 */
  usUnityNote: number;
  /** i16 */
  sFineTune: number;
  /** i32 */
  lAttenuation: number;
  /** u32 */
  fulOptions: number;
  /** u32 */
  cSampleLoops: number;
}

export const sizeofWSMPL = 24;

export function allocWSMPL(data?: Partial<WSMPL>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMPL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u16
  if (data?.usUnityNote !== undefined) view.setUint16(4, Number(data.usUnityNote), true);
  // 0x06: i16
  if (data?.sFineTune !== undefined) view.setInt16(6, Number(data.sFineTune), true);
  // 0x08: i32
  if (data?.lAttenuation !== undefined) view.setInt32(8, Number(data.lAttenuation), true);
  // 0x0c: u32
  if (data?.fulOptions !== undefined) view.setUint32(12, Number(data.fulOptions), true);
  // 0x10: u32
  if (data?.cSampleLoops !== undefined) view.setUint32(16, Number(data.cSampleLoops), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.WLOOP (size: 16)
 */
export interface WLOOP {
  /** u32 */
  cbSize: number;
  /** u32 */
  ulType: number;
  /** u32 */
  ulStart: number;
  /** u32 */
  ulLength: number;
}

export const sizeofWLOOP = 16;

export function allocWLOOP(data?: Partial<WLOOP>): Uint8Array {
  const buf = new Uint8Array(sizeofWLOOP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.ulType !== undefined) view.setUint32(4, Number(data.ulType), true);
  // 0x08: u32
  if (data?.ulStart !== undefined) view.setUint32(8, Number(data.ulStart), true);
  // 0x0c: u32
  if (data?.ulLength !== undefined) view.setUint32(12, Number(data.ulLength), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_DOWNLOADINFO (size: 16)
 */
export interface DMUS_DOWNLOADINFO {
  /** u32 */
  dwDLType: number;
  /** u32 */
  dwDLId: number;
  /** u32 */
  dwNumOffsetTableEntries: number;
  /** u32 */
  cbSize: number;
}

export const sizeofDMUS_DOWNLOADINFO = 16;

export function allocDMUS_DOWNLOADINFO(data?: Partial<DMUS_DOWNLOADINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_DOWNLOADINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDLType !== undefined) view.setUint32(0, Number(data.dwDLType), true);
  // 0x04: u32
  if (data?.dwDLId !== undefined) view.setUint32(4, Number(data.dwDLId), true);
  // 0x08: u32
  if (data?.dwNumOffsetTableEntries !== undefined) view.setUint32(8, Number(data.dwNumOffsetTableEntries), true);
  // 0x0c: u32
  if (data?.cbSize !== undefined) view.setUint32(12, Number(data.cbSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_OFFSETTABLE (size: 8)
 */
export interface DMUS_OFFSETTABLE {
  /** array */
  ulOffsetTable: Deno.PointerValue | null;
}

export const sizeofDMUS_OFFSETTABLE = 8;

export function allocDMUS_OFFSETTABLE(data?: Partial<DMUS_OFFSETTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_OFFSETTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ulOffsetTable !== undefined) view.setBigUint64(0, data.ulOffsetTable === null ? 0n : BigInt(util.toPointer(data.ulOffsetTable)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_INSTRUMENT (size: 24)
 */
export interface DMUS_INSTRUMENT {
  /** u32 */
  ulPatch: number;
  /** u32 */
  ulFirstRegionIdx: number;
  /** u32 */
  ulGlobalArtIdx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
  /** u32 */
  ulCopyrightIdx: number;
  /** u32 */
  ulFlags: number;
}

export const sizeofDMUS_INSTRUMENT = 24;

export function allocDMUS_INSTRUMENT(data?: Partial<DMUS_INSTRUMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_INSTRUMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulPatch !== undefined) view.setUint32(0, Number(data.ulPatch), true);
  // 0x04: u32
  if (data?.ulFirstRegionIdx !== undefined) view.setUint32(4, Number(data.ulFirstRegionIdx), true);
  // 0x08: u32
  if (data?.ulGlobalArtIdx !== undefined) view.setUint32(8, Number(data.ulGlobalArtIdx), true);
  // 0x0c: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(12, Number(data.ulFirstExtCkIdx), true);
  // 0x10: u32
  if (data?.ulCopyrightIdx !== undefined) view.setUint32(16, Number(data.ulCopyrightIdx), true);
  // 0x14: u32
  if (data?.ulFlags !== undefined) view.setUint32(20, Number(data.ulFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_REGION (size: 56)
 */
export interface DMUS_REGION {
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeVelocity: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  fusOptions: number;
  /** u16 */
  usKeyGroup: number;
  /** u32 */
  ulRegionArtIdx: number;
  /** u32 */
  ulNextRegionIdx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
  /** Windows.Win32.Media.Audio.DirectMusic.WAVELINK */
  WaveLink: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.WSMPL */
  WSMP: Uint8Array | Deno.PointerValue | null;
  /** array */
  WLOOP: Deno.PointerValue | null;
}

export const sizeofDMUS_REGION = 56;

export function allocDMUS_REGION(data?: Partial<DMUS_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RangeKey !== undefined) view.setBigUint64(0, data.RangeKey === null ? 0n : BigInt(util.toPointer(data.RangeKey)), true);
  // 0x08: pointer
  if (data?.RangeVelocity !== undefined) view.setBigUint64(8, data.RangeVelocity === null ? 0n : BigInt(util.toPointer(data.RangeVelocity)), true);
  // 0x10: u16
  if (data?.fusOptions !== undefined) view.setUint16(16, Number(data.fusOptions), true);
  // 0x12: u16
  if (data?.usKeyGroup !== undefined) view.setUint16(18, Number(data.usKeyGroup), true);
  // 0x14: u32
  if (data?.ulRegionArtIdx !== undefined) view.setUint32(20, Number(data.ulRegionArtIdx), true);
  // 0x18: u32
  if (data?.ulNextRegionIdx !== undefined) view.setUint32(24, Number(data.ulNextRegionIdx), true);
  // 0x1c: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(28, Number(data.ulFirstExtCkIdx), true);
  // 0x20: pointer
  if (data?.WaveLink !== undefined) view.setBigUint64(32, data.WaveLink === null ? 0n : BigInt(util.toPointer(data.WaveLink)), true);
  // 0x28: pointer
  if (data?.WSMP !== undefined) view.setBigUint64(40, data.WSMP === null ? 0n : BigInt(util.toPointer(data.WSMP)), true);
  // 0x30: pointer
  if (data?.WLOOP !== undefined) view.setBigUint64(48, data.WLOOP === null ? 0n : BigInt(util.toPointer(data.WLOOP)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_LFOPARAMS (size: 24)
 */
export interface DMUS_LFOPARAMS {
  /** i32 */
  pcFrequency: number;
  /** i32 */
  tcDelay: number;
  /** i32 */
  gcVolumeScale: number;
  /** i32 */
  pcPitchScale: number;
  /** i32 */
  gcMWToVolume: number;
  /** i32 */
  pcMWToPitch: number;
}

export const sizeofDMUS_LFOPARAMS = 24;

export function allocDMUS_LFOPARAMS(data?: Partial<DMUS_LFOPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_LFOPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.pcFrequency !== undefined) view.setInt32(0, Number(data.pcFrequency), true);
  // 0x04: i32
  if (data?.tcDelay !== undefined) view.setInt32(4, Number(data.tcDelay), true);
  // 0x08: i32
  if (data?.gcVolumeScale !== undefined) view.setInt32(8, Number(data.gcVolumeScale), true);
  // 0x0c: i32
  if (data?.pcPitchScale !== undefined) view.setInt32(12, Number(data.pcPitchScale), true);
  // 0x10: i32
  if (data?.gcMWToVolume !== undefined) view.setInt32(16, Number(data.gcMWToVolume), true);
  // 0x14: i32
  if (data?.pcMWToPitch !== undefined) view.setInt32(20, Number(data.pcMWToPitch), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_VEGPARAMS (size: 24)
 */
export interface DMUS_VEGPARAMS {
  /** i32 */
  tcAttack: number;
  /** i32 */
  tcDecay: number;
  /** i32 */
  ptSustain: number;
  /** i32 */
  tcRelease: number;
  /** i32 */
  tcVel2Attack: number;
  /** i32 */
  tcKey2Decay: number;
}

export const sizeofDMUS_VEGPARAMS = 24;

export function allocDMUS_VEGPARAMS(data?: Partial<DMUS_VEGPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_VEGPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tcAttack !== undefined) view.setInt32(0, Number(data.tcAttack), true);
  // 0x04: i32
  if (data?.tcDecay !== undefined) view.setInt32(4, Number(data.tcDecay), true);
  // 0x08: i32
  if (data?.ptSustain !== undefined) view.setInt32(8, Number(data.ptSustain), true);
  // 0x0c: i32
  if (data?.tcRelease !== undefined) view.setInt32(12, Number(data.tcRelease), true);
  // 0x10: i32
  if (data?.tcVel2Attack !== undefined) view.setInt32(16, Number(data.tcVel2Attack), true);
  // 0x14: i32
  if (data?.tcKey2Decay !== undefined) view.setInt32(20, Number(data.tcKey2Decay), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PEGPARAMS (size: 32)
 */
export interface DMUS_PEGPARAMS {
  /** i32 */
  tcAttack: number;
  /** i32 */
  tcDecay: number;
  /** i32 */
  ptSustain: number;
  /** i32 */
  tcRelease: number;
  /** i32 */
  tcVel2Attack: number;
  /** i32 */
  tcKey2Decay: number;
  /** i32 */
  pcRange: number;
}

export const sizeofDMUS_PEGPARAMS = 32;

export function allocDMUS_PEGPARAMS(data?: Partial<DMUS_PEGPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PEGPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tcAttack !== undefined) view.setInt32(0, Number(data.tcAttack), true);
  // 0x04: i32
  if (data?.tcDecay !== undefined) view.setInt32(4, Number(data.tcDecay), true);
  // 0x08: i32
  if (data?.ptSustain !== undefined) view.setInt32(8, Number(data.ptSustain), true);
  // 0x0c: i32
  if (data?.tcRelease !== undefined) view.setInt32(12, Number(data.tcRelease), true);
  // 0x10: i32
  if (data?.tcVel2Attack !== undefined) view.setInt32(16, Number(data.tcVel2Attack), true);
  // 0x14: i32
  if (data?.tcKey2Decay !== undefined) view.setInt32(20, Number(data.tcKey2Decay), true);
  // 0x18: i32
  if (data?.pcRange !== undefined) view.setInt32(24, Number(data.pcRange), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_MSCPARAMS (size: 8)
 */
export interface DMUS_MSCPARAMS {
  /** i32 */
  ptDefaultPan: number;
}

export const sizeofDMUS_MSCPARAMS = 8;

export function allocDMUS_MSCPARAMS(data?: Partial<DMUS_MSCPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_MSCPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ptDefaultPan !== undefined) view.setInt32(0, Number(data.ptDefaultPan), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_ARTICPARAMS (size: 32)
 */
export interface DMUS_ARTICPARAMS {
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_LFOPARAMS */
  LFO: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_VEGPARAMS */
  VolEG: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_PEGPARAMS */
  PitchEG: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_MSCPARAMS */
  Misc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDMUS_ARTICPARAMS = 32;

export function allocDMUS_ARTICPARAMS(data?: Partial<DMUS_ARTICPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_ARTICPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LFO !== undefined) view.setBigUint64(0, data.LFO === null ? 0n : BigInt(util.toPointer(data.LFO)), true);
  // 0x08: pointer
  if (data?.VolEG !== undefined) view.setBigUint64(8, data.VolEG === null ? 0n : BigInt(util.toPointer(data.VolEG)), true);
  // 0x10: pointer
  if (data?.PitchEG !== undefined) view.setBigUint64(16, data.PitchEG === null ? 0n : BigInt(util.toPointer(data.PitchEG)), true);
  // 0x18: pointer
  if (data?.Misc !== undefined) view.setBigUint64(24, data.Misc === null ? 0n : BigInt(util.toPointer(data.Misc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_ARTICULATION (size: 8)
 */
export interface DMUS_ARTICULATION {
  /** u32 */
  ulArt1Idx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
}

export const sizeofDMUS_ARTICULATION = 8;

export function allocDMUS_ARTICULATION(data?: Partial<DMUS_ARTICULATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_ARTICULATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulArt1Idx !== undefined) view.setUint32(0, Number(data.ulArt1Idx), true);
  // 0x04: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(4, Number(data.ulFirstExtCkIdx), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_ARTICULATION2 (size: 16)
 */
export interface DMUS_ARTICULATION2 {
  /** u32 */
  ulArtIdx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
  /** u32 */
  ulNextArtIdx: number;
}

export const sizeofDMUS_ARTICULATION2 = 16;

export function allocDMUS_ARTICULATION2(data?: Partial<DMUS_ARTICULATION2>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_ARTICULATION2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulArtIdx !== undefined) view.setUint32(0, Number(data.ulArtIdx), true);
  // 0x04: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(4, Number(data.ulFirstExtCkIdx), true);
  // 0x08: u32
  if (data?.ulNextArtIdx !== undefined) view.setUint32(8, Number(data.ulNextArtIdx), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_EXTENSIONCHUNK (size: 24)
 */
export interface DMUS_EXTENSIONCHUNK {
  /** u32 */
  cbSize: number;
  /** u32 */
  ulNextExtCkIdx: number;
  /** u32 */
  ExtCkID: number;
  /** array */
  byExtCk: Deno.PointerValue | null;
}

export const sizeofDMUS_EXTENSIONCHUNK = 24;

export function allocDMUS_EXTENSIONCHUNK(data?: Partial<DMUS_EXTENSIONCHUNK>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_EXTENSIONCHUNK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.ulNextExtCkIdx !== undefined) view.setUint32(4, Number(data.ulNextExtCkIdx), true);
  // 0x08: u32
  if (data?.ExtCkID !== undefined) view.setUint32(8, Number(data.ExtCkID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.byExtCk !== undefined) view.setBigUint64(16, data.byExtCk === null ? 0n : BigInt(util.toPointer(data.byExtCk)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_COPYRIGHT (size: 16)
 */
export interface DMUS_COPYRIGHT {
  /** u32 */
  cbSize: number;
  /** array */
  byCopyright: Deno.PointerValue | null;
}

export const sizeofDMUS_COPYRIGHT = 16;

export function allocDMUS_COPYRIGHT(data?: Partial<DMUS_COPYRIGHT>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_COPYRIGHT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.byCopyright !== undefined) view.setBigUint64(8, data.byCopyright === null ? 0n : BigInt(util.toPointer(data.byCopyright)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVEDATA (size: 16)
 */
export interface DMUS_WAVEDATA {
  /** u32 */
  cbSize: number;
  /** array */
  byData: Deno.PointerValue | null;
}

export const sizeofDMUS_WAVEDATA = 16;

export function allocDMUS_WAVEDATA(data?: Partial<DMUS_WAVEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.byData !== undefined) view.setBigUint64(8, data.byData === null ? 0n : BigInt(util.toPointer(data.byData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEFORMATEX (size: 24)
 */
export interface WAVEFORMATEX {
  /** u16 */
  wFormatTag: number;
  /** u16 */
  nChannels: number;
  /** u32 */
  nSamplesPerSec: number;
  /** u32 */
  nAvgBytesPerSec: number;
  /** u16 */
  nBlockAlign: number;
  /** u16 */
  wBitsPerSample: number;
  /** u16 */
  cbSize: number;
}

export const sizeofWAVEFORMATEX = 24;

export function allocWAVEFORMATEX(data?: Partial<WAVEFORMATEX>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFORMATEX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wFormatTag !== undefined) view.setUint16(0, Number(data.wFormatTag), true);
  // 0x02: u16
  if (data?.nChannels !== undefined) view.setUint16(2, Number(data.nChannels), true);
  // 0x04: u32
  if (data?.nSamplesPerSec !== undefined) view.setUint32(4, Number(data.nSamplesPerSec), true);
  // 0x08: u32
  if (data?.nAvgBytesPerSec !== undefined) view.setUint32(8, Number(data.nAvgBytesPerSec), true);
  // 0x0c: u16
  if (data?.nBlockAlign !== undefined) view.setUint16(12, Number(data.nBlockAlign), true);
  // 0x0e: u16
  if (data?.wBitsPerSample !== undefined) view.setUint16(14, Number(data.wBitsPerSample), true);
  // 0x10: u16
  if (data?.cbSize !== undefined) view.setUint16(16, Number(data.cbSize), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVE (size: 24)
 */
export interface DMUS_WAVE {
  /** u32 */
  ulFirstExtCkIdx: number;
  /** u32 */
  ulCopyrightIdx: number;
  /** u32 */
  ulWaveDataIdx: number;
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  WaveformatEx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDMUS_WAVE = 24;

export function allocDMUS_WAVE(data?: Partial<DMUS_WAVE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(0, Number(data.ulFirstExtCkIdx), true);
  // 0x04: u32
  if (data?.ulCopyrightIdx !== undefined) view.setUint32(4, Number(data.ulCopyrightIdx), true);
  // 0x08: u32
  if (data?.ulWaveDataIdx !== undefined) view.setUint32(8, Number(data.ulWaveDataIdx), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.WaveformatEx !== undefined) view.setBigUint64(16, data.WaveformatEx === null ? 0n : BigInt(util.toPointer(data.WaveformatEx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_NOTERANGE (size: 8)
 */
export interface DMUS_NOTERANGE {
  /** u32 */
  dwLowNote: number;
  /** u32 */
  dwHighNote: number;
}

export const sizeofDMUS_NOTERANGE = 8;

export function allocDMUS_NOTERANGE(data?: Partial<DMUS_NOTERANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_NOTERANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowNote !== undefined) view.setUint32(0, Number(data.dwLowNote), true);
  // 0x04: u32
  if (data?.dwHighNote !== undefined) view.setUint32(4, Number(data.dwHighNote), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVEARTDL (size: 24)
 */
export interface DMUS_WAVEARTDL {
  /** u32 */
  ulDownloadIdIdx: number;
  /** u32 */
  ulBus: number;
  /** u32 */
  ulBuffers: number;
  /** u32 */
  ulMasterDLId: number;
  /** u16 */
  usOptions: number;
}

export const sizeofDMUS_WAVEARTDL = 24;

export function allocDMUS_WAVEARTDL(data?: Partial<DMUS_WAVEARTDL>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVEARTDL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulDownloadIdIdx !== undefined) view.setUint32(0, Number(data.ulDownloadIdIdx), true);
  // 0x04: u32
  if (data?.ulBus !== undefined) view.setUint32(4, Number(data.ulBus), true);
  // 0x08: u32
  if (data?.ulBuffers !== undefined) view.setUint32(8, Number(data.ulBuffers), true);
  // 0x0c: u32
  if (data?.ulMasterDLId !== undefined) view.setUint32(12, Number(data.ulMasterDLId), true);
  // 0x10: u16
  if (data?.usOptions !== undefined) view.setUint16(16, Number(data.usOptions), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVEDL (size: 8)
 */
export interface DMUS_WAVEDL {
  /** u32 */
  cbWaveData: number;
}

export const sizeofDMUS_WAVEDL = 8;

export function allocDMUS_WAVEDL(data?: Partial<DMUS_WAVEDL>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVEDL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbWaveData !== undefined) view.setUint32(0, Number(data.cbWaveData), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_EVENTHEADER (size: 24)
 */
export interface DMUS_EVENTHEADER {
  /** u32 */
  cbEvent: number;
  /** u32 */
  dwChannelGroup: number;
  /** i64 */
  rtDelta: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofDMUS_EVENTHEADER = 24;

export function allocDMUS_EVENTHEADER(data?: Partial<DMUS_EVENTHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_EVENTHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbEvent !== undefined) view.setUint32(0, Number(data.cbEvent), true);
  // 0x04: u32
  if (data?.dwChannelGroup !== undefined) view.setUint32(4, Number(data.dwChannelGroup), true);
  // 0x08: i64
  if (data?.rtDelta !== undefined) view.setBigInt64(8, BigInt(data.rtDelta), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_BUFFERDESC (size: 24)
 */
export interface DMUS_BUFFERDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidBufferFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbBuffer: number;
}

export const sizeofDMUS_BUFFERDESC = 24;

export function allocDMUS_BUFFERDESC(data?: Partial<DMUS_BUFFERDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_BUFFERDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidBufferFormat !== undefined) view.setBigUint64(8, data.guidBufferFormat === null ? 0n : BigInt(util.toPointer(data.guidBufferFormat)), true);
  // 0x10: u32
  if (data?.cbBuffer !== undefined) view.setUint32(16, Number(data.cbBuffer), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PORTCAPS (size: 56)
 */
export interface DMUS_PORTCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidPort: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwClass: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwMemorySize: number;
  /** u32 */
  dwMaxChannelGroups: number;
  /** u32 */
  dwMaxVoices: number;
  /** u32 */
  dwMaxAudioChannels: number;
  /** u32 */
  dwEffectFlags: number;
  /** array */
  wszDescription: Deno.PointerValue | null;
}

export const sizeofDMUS_PORTCAPS = 56;

export function allocDMUS_PORTCAPS(data?: Partial<DMUS_PORTCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PORTCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidPort !== undefined) view.setBigUint64(8, data.guidPort === null ? 0n : BigInt(util.toPointer(data.guidPort)), true);
  // 0x10: u32
  if (data?.dwClass !== undefined) view.setUint32(16, Number(data.dwClass), true);
  // 0x14: u32
  if (data?.dwType !== undefined) view.setUint32(20, Number(data.dwType), true);
  // 0x18: u32
  if (data?.dwMemorySize !== undefined) view.setUint32(24, Number(data.dwMemorySize), true);
  // 0x1c: u32
  if (data?.dwMaxChannelGroups !== undefined) view.setUint32(28, Number(data.dwMaxChannelGroups), true);
  // 0x20: u32
  if (data?.dwMaxVoices !== undefined) view.setUint32(32, Number(data.dwMaxVoices), true);
  // 0x24: u32
  if (data?.dwMaxAudioChannels !== undefined) view.setUint32(36, Number(data.dwMaxAudioChannels), true);
  // 0x28: u32
  if (data?.dwEffectFlags !== undefined) view.setUint32(40, Number(data.dwEffectFlags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(48, data.wszDescription === null ? 0n : BigInt(util.toPointer(data.wszDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PORTPARAMS7 (size: 32)
 */
export interface DMUS_PORTPARAMS7 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidParams: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwChannelGroups: number;
  /** u32 */
  dwAudioChannels: number;
  /** u32 */
  dwSampleRate: number;
  /** u32 */
  dwEffectFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fShare: boolean;
}

export const sizeofDMUS_PORTPARAMS7 = 32;

export function allocDMUS_PORTPARAMS7(data?: Partial<DMUS_PORTPARAMS7>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PORTPARAMS7);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidParams !== undefined) view.setUint32(4, Number(data.dwValidParams), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwChannelGroups !== undefined) view.setUint32(12, Number(data.dwChannelGroups), true);
  // 0x10: u32
  if (data?.dwAudioChannels !== undefined) view.setUint32(16, Number(data.dwAudioChannels), true);
  // 0x14: u32
  if (data?.dwSampleRate !== undefined) view.setUint32(20, Number(data.dwSampleRate), true);
  // 0x18: u32
  if (data?.dwEffectFlags !== undefined) view.setUint32(24, Number(data.dwEffectFlags), true);
  // 0x1c: i32
  if (data?.fShare !== undefined) view.setInt32(28, Number(data.fShare), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PORTPARAMS8 (size: 40)
 */
export interface DMUS_PORTPARAMS8 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidParams: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwChannelGroups: number;
  /** u32 */
  dwAudioChannels: number;
  /** u32 */
  dwSampleRate: number;
  /** u32 */
  dwEffectFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fShare: boolean;
  /** u32 */
  dwFeatures: number;
}

export const sizeofDMUS_PORTPARAMS8 = 40;

export function allocDMUS_PORTPARAMS8(data?: Partial<DMUS_PORTPARAMS8>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PORTPARAMS8);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidParams !== undefined) view.setUint32(4, Number(data.dwValidParams), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwChannelGroups !== undefined) view.setUint32(12, Number(data.dwChannelGroups), true);
  // 0x10: u32
  if (data?.dwAudioChannels !== undefined) view.setUint32(16, Number(data.dwAudioChannels), true);
  // 0x14: u32
  if (data?.dwSampleRate !== undefined) view.setUint32(20, Number(data.dwSampleRate), true);
  // 0x18: u32
  if (data?.dwEffectFlags !== undefined) view.setUint32(24, Number(data.dwEffectFlags), true);
  // 0x1c: i32
  if (data?.fShare !== undefined) view.setInt32(28, Number(data.fShare), true);
  // 0x20: u32
  if (data?.dwFeatures !== undefined) view.setUint32(32, Number(data.dwFeatures), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_SYNTHSTATS (size: 32)
 */
export interface DMUS_SYNTHSTATS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidStats: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwTotalCPU: number;
  /** u32 */
  dwCPUPerVoice: number;
  /** u32 */
  dwLostNotes: number;
  /** u32 */
  dwFreeMemory: number;
  /** i32 */
  lPeakVolume: number;
}

export const sizeofDMUS_SYNTHSTATS = 32;

export function allocDMUS_SYNTHSTATS(data?: Partial<DMUS_SYNTHSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_SYNTHSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidStats !== undefined) view.setUint32(4, Number(data.dwValidStats), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwTotalCPU !== undefined) view.setUint32(12, Number(data.dwTotalCPU), true);
  // 0x10: u32
  if (data?.dwCPUPerVoice !== undefined) view.setUint32(16, Number(data.dwCPUPerVoice), true);
  // 0x14: u32
  if (data?.dwLostNotes !== undefined) view.setUint32(20, Number(data.dwLostNotes), true);
  // 0x18: u32
  if (data?.dwFreeMemory !== undefined) view.setUint32(24, Number(data.dwFreeMemory), true);
  // 0x1c: i32
  if (data?.lPeakVolume !== undefined) view.setInt32(28, Number(data.lPeakVolume), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_SYNTHSTATS8 (size: 40)
 */
export interface DMUS_SYNTHSTATS8 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidStats: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwTotalCPU: number;
  /** u32 */
  dwCPUPerVoice: number;
  /** u32 */
  dwLostNotes: number;
  /** u32 */
  dwFreeMemory: number;
  /** i32 */
  lPeakVolume: number;
  /** u32 */
  dwSynthMemUse: number;
}

export const sizeofDMUS_SYNTHSTATS8 = 40;

export function allocDMUS_SYNTHSTATS8(data?: Partial<DMUS_SYNTHSTATS8>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_SYNTHSTATS8);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidStats !== undefined) view.setUint32(4, Number(data.dwValidStats), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwTotalCPU !== undefined) view.setUint32(12, Number(data.dwTotalCPU), true);
  // 0x10: u32
  if (data?.dwCPUPerVoice !== undefined) view.setUint32(16, Number(data.dwCPUPerVoice), true);
  // 0x14: u32
  if (data?.dwLostNotes !== undefined) view.setUint32(20, Number(data.dwLostNotes), true);
  // 0x18: u32
  if (data?.dwFreeMemory !== undefined) view.setUint32(24, Number(data.dwFreeMemory), true);
  // 0x1c: i32
  if (data?.lPeakVolume !== undefined) view.setInt32(28, Number(data.lPeakVolume), true);
  // 0x20: u32
  if (data?.dwSynthMemUse !== undefined) view.setUint32(32, Number(data.dwSynthMemUse), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVES_REVERB_PARAMS (size: 16)
 */
export interface DMUS_WAVES_REVERB_PARAMS {
  /** f32 */
  fInGain: number;
  /** f32 */
  fReverbMix: number;
  /** f32 */
  fReverbTime: number;
  /** f32 */
  fHighFreqRTRatio: number;
}

export const sizeofDMUS_WAVES_REVERB_PARAMS = 16;

export function allocDMUS_WAVES_REVERB_PARAMS(data?: Partial<DMUS_WAVES_REVERB_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVES_REVERB_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fInGain !== undefined) view.setFloat32(0, Number(data.fInGain), true);
  // 0x04: f32
  if (data?.fReverbMix !== undefined) view.setFloat32(4, Number(data.fReverbMix), true);
  // 0x08: f32
  if (data?.fReverbTime !== undefined) view.setFloat32(8, Number(data.fReverbTime), true);
  // 0x0c: f32
  if (data?.fHighFreqRTRatio !== undefined) view.setFloat32(12, Number(data.fHighFreqRTRatio), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKINFO7 (size: 24)
 */
export interface DMUS_CLOCKINFO7 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKTYPE */
  ctType: DMUS_CLOCKTYPE;
  /** System.Guid */
  guidClock: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszDescription: Deno.PointerValue | null;
}

export const sizeofDMUS_CLOCKINFO7 = 24;

export function allocDMUS_CLOCKINFO7(data?: Partial<DMUS_CLOCKINFO7>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_CLOCKINFO7);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.ctType !== undefined) view.setInt32(4, Number(data.ctType), true);
  // 0x08: pointer
  if (data?.guidClock !== undefined) view.setBigUint64(8, data.guidClock === null ? 0n : BigInt(util.toPointer(data.guidClock)), true);
  // 0x10: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(16, data.wszDescription === null ? 0n : BigInt(util.toPointer(data.wszDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKINFO8 (size: 32)
 */
export interface DMUS_CLOCKINFO8 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKTYPE */
  ctType: DMUS_CLOCKTYPE;
  /** System.Guid */
  guidClock: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszDescription: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofDMUS_CLOCKINFO8 = 32;

export function allocDMUS_CLOCKINFO8(data?: Partial<DMUS_CLOCKINFO8>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_CLOCKINFO8);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.ctType !== undefined) view.setInt32(4, Number(data.ctType), true);
  // 0x08: pointer
  if (data?.guidClock !== undefined) view.setBigUint64(8, data.guidClock === null ? 0n : BigInt(util.toPointer(data.guidClock)), true);
  // 0x10: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(16, data.wszDescription === null ? 0n : BigInt(util.toPointer(data.wszDescription)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_VOICE_STATE (size: 16)
 */
export interface DMUS_VOICE_STATE {
  /** Windows.Win32.Foundation.BOOL */
  bExists: boolean;
  /** u64 */
  spPosition: Deno.PointerValue;
}

export const sizeofDMUS_VOICE_STATE = 16;

export function allocDMUS_VOICE_STATE(data?: Partial<DMUS_VOICE_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_VOICE_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bExists !== undefined) view.setInt32(0, Number(data.bExists), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.spPosition !== undefined) view.setBigUint64(8, BigInt(data.spPosition), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA (size: 24)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA {
  /** Windows.Win32.Foundation.PSTR */
  DeviceName: string | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA = 24;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.DeviceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.DataFlow !== undefined) view.setInt32(8, Number(data.DataFlow), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(16, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA (size: 24)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA {
  /** Windows.Win32.Foundation.PWSTR */
  DeviceName: string | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA = 24;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.DeviceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.DataFlow !== undefined) view.setInt32(8, Number(data.DataFlow), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(16, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA (size: 56)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA {
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
  /** array */
  DescriptionA: Deno.PointerValue | null;
  /** array */
  DescriptionW: Deno.PointerValue | null;
  /** array */
  ModuleA: Deno.PointerValue | null;
  /** array */
  ModuleW: Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_TYPE */
  Type: DIRECTSOUNDDEVICE_TYPE;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** u32 */
  WaveDeviceId: number;
  /** u32 */
  Devnode: number;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA = 56;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(0, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  // 0x08: pointer
  if (data?.DescriptionA !== undefined) view.setBigUint64(8, data.DescriptionA === null ? 0n : BigInt(util.toPointer(data.DescriptionA)), true);
  // 0x10: pointer
  if (data?.DescriptionW !== undefined) view.setBigUint64(16, data.DescriptionW === null ? 0n : BigInt(util.toPointer(data.DescriptionW)), true);
  // 0x18: pointer
  if (data?.ModuleA !== undefined) view.setBigUint64(24, data.ModuleA === null ? 0n : BigInt(util.toPointer(data.ModuleA)), true);
  // 0x20: pointer
  if (data?.ModuleW !== undefined) view.setBigUint64(32, data.ModuleW === null ? 0n : BigInt(util.toPointer(data.ModuleW)), true);
  // 0x28: i32
  if (data?.Type !== undefined) view.setInt32(40, Number(data.Type), true);
  // 0x2c: i32
  if (data?.DataFlow !== undefined) view.setInt32(44, Number(data.DataFlow), true);
  // 0x30: u32
  if (data?.WaveDeviceId !== undefined) view.setUint32(48, Number(data.WaveDeviceId), true);
  // 0x34: u32
  if (data?.Devnode !== undefined) view.setUint32(52, Number(data.Devnode), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA (size: 48)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_TYPE */
  Type: DIRECTSOUNDDEVICE_TYPE;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  Description: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Module: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Interface: string | null;
  /** u32 */
  WaveDeviceId: number;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA = 48;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.DataFlow !== undefined) view.setInt32(4, Number(data.DataFlow), true);
  // 0x08: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(8, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  // 0x10: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.Description);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Module !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.Module);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Interface !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.Interface);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.WaveDeviceId !== undefined) view.setUint32(40, Number(data.WaveDeviceId), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA (size: 48)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_TYPE */
  Type: DIRECTSOUNDDEVICE_TYPE;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  Description: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Module: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Interface: string | null;
  /** u32 */
  WaveDeviceId: number;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA = 48;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.DataFlow !== undefined) view.setInt32(4, Number(data.DataFlow), true);
  // 0x08: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(8, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  // 0x10: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Description);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Module !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Module);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Interface !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.Interface);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.WaveDeviceId !== undefined) view.setUint32(40, Number(data.WaveDeviceId), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA (size: 16)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK1 */
  Callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA = 16;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Callback !== undefined) view.setBigUint64(0, data.Callback === null ? 0n : BigInt(util.toPointer(data.Callback)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA (size: 16)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA */
  Callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA = 16;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Callback !== undefined) view.setBigUint64(0, data.Callback === null ? 0n : BigInt(util.toPointer(data.Callback)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA (size: 16)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW */
  Callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA = 16;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Callback !== undefined) view.setBigUint64(0, data.Callback === null ? 0n : BigInt(util.toPointer(data.Callback)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DVAudInfo (size: 40)
 */
export interface DVAudInfo {
  /** array */
  bAudStyle: Deno.PointerValue | null;
  /** array */
  bAudQu: Deno.PointerValue | null;
  /** u8 */
  bNumAudPin: number;
  /** array */
  wAvgSamplesPerPinPerFrm: Deno.PointerValue | null;
  /** u16 */
  wBlkMode: number;
  /** u16 */
  wDIFMode: number;
  /** u16 */
  wBlkDiv: number;
}

export const sizeofDVAudInfo = 40;

export function allocDVAudInfo(data?: Partial<DVAudInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDVAudInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bAudStyle !== undefined) view.setBigUint64(0, data.bAudStyle === null ? 0n : BigInt(util.toPointer(data.bAudStyle)), true);
  // 0x08: pointer
  if (data?.bAudQu !== undefined) view.setBigUint64(8, data.bAudQu === null ? 0n : BigInt(util.toPointer(data.bAudQu)), true);
  // 0x10: u8
  if (data?.bNumAudPin !== undefined) view.setUint8(16, Number(data.bNumAudPin));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.wAvgSamplesPerPinPerFrm !== undefined) view.setBigUint64(24, data.wAvgSamplesPerPinPerFrm === null ? 0n : BigInt(util.toPointer(data.wAvgSamplesPerPinPerFrm)), true);
  // 0x20: u16
  if (data?.wBlkMode !== undefined) view.setUint16(32, Number(data.wBlkMode), true);
  // 0x22: u16
  if (data?.wDIFMode !== undefined) view.setUint16(34, Number(data.wDIFMode), true);
  // 0x24: u16
  if (data?.wBlkDiv !== undefined) view.setUint16(36, Number(data.wBlkDiv), true);
  // 0x26: pad2
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCAPS (size: 96)
 */
export interface DSCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwMinSecondarySampleRate: number;
  /** u32 */
  dwMaxSecondarySampleRate: number;
  /** u32 */
  dwPrimaryBuffers: number;
  /** u32 */
  dwMaxHwMixingAllBuffers: number;
  /** u32 */
  dwMaxHwMixingStaticBuffers: number;
  /** u32 */
  dwMaxHwMixingStreamingBuffers: number;
  /** u32 */
  dwFreeHwMixingAllBuffers: number;
  /** u32 */
  dwFreeHwMixingStaticBuffers: number;
  /** u32 */
  dwFreeHwMixingStreamingBuffers: number;
  /** u32 */
  dwMaxHw3DAllBuffers: number;
  /** u32 */
  dwMaxHw3DStaticBuffers: number;
  /** u32 */
  dwMaxHw3DStreamingBuffers: number;
  /** u32 */
  dwFreeHw3DAllBuffers: number;
  /** u32 */
  dwFreeHw3DStaticBuffers: number;
  /** u32 */
  dwFreeHw3DStreamingBuffers: number;
  /** u32 */
  dwTotalHwMemBytes: number;
  /** u32 */
  dwFreeHwMemBytes: number;
  /** u32 */
  dwMaxContigFreeHwMemBytes: number;
  /** u32 */
  dwUnlockTransferRateHwBuffers: number;
  /** u32 */
  dwPlayCpuOverheadSwBuffers: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofDSCAPS = 96;

export function allocDSCAPS(data?: Partial<DSCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwMinSecondarySampleRate !== undefined) view.setUint32(8, Number(data.dwMinSecondarySampleRate), true);
  // 0x0c: u32
  if (data?.dwMaxSecondarySampleRate !== undefined) view.setUint32(12, Number(data.dwMaxSecondarySampleRate), true);
  // 0x10: u32
  if (data?.dwPrimaryBuffers !== undefined) view.setUint32(16, Number(data.dwPrimaryBuffers), true);
  // 0x14: u32
  if (data?.dwMaxHwMixingAllBuffers !== undefined) view.setUint32(20, Number(data.dwMaxHwMixingAllBuffers), true);
  // 0x18: u32
  if (data?.dwMaxHwMixingStaticBuffers !== undefined) view.setUint32(24, Number(data.dwMaxHwMixingStaticBuffers), true);
  // 0x1c: u32
  if (data?.dwMaxHwMixingStreamingBuffers !== undefined) view.setUint32(28, Number(data.dwMaxHwMixingStreamingBuffers), true);
  // 0x20: u32
  if (data?.dwFreeHwMixingAllBuffers !== undefined) view.setUint32(32, Number(data.dwFreeHwMixingAllBuffers), true);
  // 0x24: u32
  if (data?.dwFreeHwMixingStaticBuffers !== undefined) view.setUint32(36, Number(data.dwFreeHwMixingStaticBuffers), true);
  // 0x28: u32
  if (data?.dwFreeHwMixingStreamingBuffers !== undefined) view.setUint32(40, Number(data.dwFreeHwMixingStreamingBuffers), true);
  // 0x2c: u32
  if (data?.dwMaxHw3DAllBuffers !== undefined) view.setUint32(44, Number(data.dwMaxHw3DAllBuffers), true);
  // 0x30: u32
  if (data?.dwMaxHw3DStaticBuffers !== undefined) view.setUint32(48, Number(data.dwMaxHw3DStaticBuffers), true);
  // 0x34: u32
  if (data?.dwMaxHw3DStreamingBuffers !== undefined) view.setUint32(52, Number(data.dwMaxHw3DStreamingBuffers), true);
  // 0x38: u32
  if (data?.dwFreeHw3DAllBuffers !== undefined) view.setUint32(56, Number(data.dwFreeHw3DAllBuffers), true);
  // 0x3c: u32
  if (data?.dwFreeHw3DStaticBuffers !== undefined) view.setUint32(60, Number(data.dwFreeHw3DStaticBuffers), true);
  // 0x40: u32
  if (data?.dwFreeHw3DStreamingBuffers !== undefined) view.setUint32(64, Number(data.dwFreeHw3DStreamingBuffers), true);
  // 0x44: u32
  if (data?.dwTotalHwMemBytes !== undefined) view.setUint32(68, Number(data.dwTotalHwMemBytes), true);
  // 0x48: u32
  if (data?.dwFreeHwMemBytes !== undefined) view.setUint32(72, Number(data.dwFreeHwMemBytes), true);
  // 0x4c: u32
  if (data?.dwMaxContigFreeHwMemBytes !== undefined) view.setUint32(76, Number(data.dwMaxContigFreeHwMemBytes), true);
  // 0x50: u32
  if (data?.dwUnlockTransferRateHwBuffers !== undefined) view.setUint32(80, Number(data.dwUnlockTransferRateHwBuffers), true);
  // 0x54: u32
  if (data?.dwPlayCpuOverheadSwBuffers !== undefined) view.setUint32(84, Number(data.dwPlayCpuOverheadSwBuffers), true);
  // 0x58: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(88, Number(data.dwReserved1), true);
  // 0x5c: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(92, Number(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBCAPS (size: 24)
 */
export interface DSBCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwUnlockTransferRate: number;
  /** u32 */
  dwPlayCpuOverhead: number;
}

export const sizeofDSBCAPS = 24;

export function allocDSBCAPS(data?: Partial<DSBCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwUnlockTransferRate !== undefined) view.setUint32(12, Number(data.dwUnlockTransferRate), true);
  // 0x10: u32
  if (data?.dwPlayCpuOverhead !== undefined) view.setUint32(16, Number(data.dwPlayCpuOverhead), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSEFFECTDESC (size: 32)
 */
export interface DSEFFECTDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidDSFXClass: Uint8Array | Deno.PointerValue | null;
  /** usize */
  dwReserved1: Deno.PointerValue;
  /** usize */
  dwReserved2: Deno.PointerValue;
}

export const sizeofDSEFFECTDESC = 32;

export function allocDSEFFECTDESC(data?: Partial<DSEFFECTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSEFFECTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidDSFXClass !== undefined) view.setBigUint64(8, data.guidDSFXClass === null ? 0n : BigInt(util.toPointer(data.guidDSFXClass)), true);
  // 0x10: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(16, BigInt(data.dwReserved1), true);
  // 0x18: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(24, BigInt(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCEFFECTDESC (size: 32)
 */
export interface DSCEFFECTDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidDSCFXClass: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidDSCFXInstance: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofDSCEFFECTDESC = 32;

export function allocDSCEFFECTDESC(data?: Partial<DSCEFFECTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCEFFECTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidDSCFXClass !== undefined) view.setBigUint64(8, data.guidDSCFXClass === null ? 0n : BigInt(util.toPointer(data.guidDSCFXClass)), true);
  // 0x10: pointer
  if (data?.guidDSCFXInstance !== undefined) view.setBigUint64(16, data.guidDSCFXInstance === null ? 0n : BigInt(util.toPointer(data.guidDSCFXInstance)), true);
  // 0x18: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(24, Number(data.dwReserved1), true);
  // 0x1c: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(28, Number(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBUFFERDESC (size: 32)
 */
export interface DSBUFFERDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  guid3DAlgorithm: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDSBUFFERDESC = 32;

export function allocDSBUFFERDESC(data?: Partial<DSBUFFERDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBUFFERDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(util.toPointer(data.lpwfxFormat)), true);
  // 0x18: pointer
  if (data?.guid3DAlgorithm !== undefined) view.setBigUint64(24, data.guid3DAlgorithm === null ? 0n : BigInt(util.toPointer(data.guid3DAlgorithm)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBUFFERDESC1 (size: 24)
 */
export interface DSBUFFERDESC1 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSBUFFERDESC1 = 24;

export function allocDSBUFFERDESC1(data?: Partial<DSBUFFERDESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBUFFERDESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(util.toPointer(data.lpwfxFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D.D3DVECTOR (size: 16)
 */
export interface D3DVECTOR {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
}

export const sizeofD3DVECTOR = 16;

export function allocD3DVECTOR(data?: Partial<D3DVECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DS3DBUFFER (size: 56)
 */
export interface DS3DBUFFER {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vPosition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vVelocity: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwInsideConeAngle: number;
  /** u32 */
  dwOutsideConeAngle: number;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vConeOrientation: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lConeOutsideVolume: number;
  /** f32 */
  flMinDistance: number;
  /** f32 */
  flMaxDistance: number;
  /** u32 */
  dwMode: number;
}

export const sizeofDS3DBUFFER = 56;

export function allocDS3DBUFFER(data?: Partial<DS3DBUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofDS3DBUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vPosition !== undefined) view.setBigUint64(8, data.vPosition === null ? 0n : BigInt(util.toPointer(data.vPosition)), true);
  // 0x10: pointer
  if (data?.vVelocity !== undefined) view.setBigUint64(16, data.vVelocity === null ? 0n : BigInt(util.toPointer(data.vVelocity)), true);
  // 0x18: u32
  if (data?.dwInsideConeAngle !== undefined) view.setUint32(24, Number(data.dwInsideConeAngle), true);
  // 0x1c: u32
  if (data?.dwOutsideConeAngle !== undefined) view.setUint32(28, Number(data.dwOutsideConeAngle), true);
  // 0x20: pointer
  if (data?.vConeOrientation !== undefined) view.setBigUint64(32, data.vConeOrientation === null ? 0n : BigInt(util.toPointer(data.vConeOrientation)), true);
  // 0x28: i32
  if (data?.lConeOutsideVolume !== undefined) view.setInt32(40, Number(data.lConeOutsideVolume), true);
  // 0x2c: f32
  if (data?.flMinDistance !== undefined) view.setFloat32(44, Number(data.flMinDistance), true);
  // 0x30: f32
  if (data?.flMaxDistance !== undefined) view.setFloat32(48, Number(data.flMaxDistance), true);
  // 0x34: u32
  if (data?.dwMode !== undefined) view.setUint32(52, Number(data.dwMode), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DS3DLISTENER (size: 56)
 */
export interface DS3DLISTENER {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vPosition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vVelocity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vOrientFront: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vOrientTop: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  flDistanceFactor: number;
  /** f32 */
  flRolloffFactor: number;
  /** f32 */
  flDopplerFactor: number;
}

export const sizeofDS3DLISTENER = 56;

export function allocDS3DLISTENER(data?: Partial<DS3DLISTENER>): Uint8Array {
  const buf = new Uint8Array(sizeofDS3DLISTENER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vPosition !== undefined) view.setBigUint64(8, data.vPosition === null ? 0n : BigInt(util.toPointer(data.vPosition)), true);
  // 0x10: pointer
  if (data?.vVelocity !== undefined) view.setBigUint64(16, data.vVelocity === null ? 0n : BigInt(util.toPointer(data.vVelocity)), true);
  // 0x18: pointer
  if (data?.vOrientFront !== undefined) view.setBigUint64(24, data.vOrientFront === null ? 0n : BigInt(util.toPointer(data.vOrientFront)), true);
  // 0x20: pointer
  if (data?.vOrientTop !== undefined) view.setBigUint64(32, data.vOrientTop === null ? 0n : BigInt(util.toPointer(data.vOrientTop)), true);
  // 0x28: f32
  if (data?.flDistanceFactor !== undefined) view.setFloat32(40, Number(data.flDistanceFactor), true);
  // 0x2c: f32
  if (data?.flRolloffFactor !== undefined) view.setFloat32(44, Number(data.flRolloffFactor), true);
  // 0x30: f32
  if (data?.flDopplerFactor !== undefined) view.setFloat32(48, Number(data.flDopplerFactor), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCCAPS (size: 16)
 */
export interface DSCCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwFormats: number;
  /** u32 */
  dwChannels: number;
}

export const sizeofDSCCAPS = 16;

export function allocDSCCAPS(data?: Partial<DSCCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwFormats !== undefined) view.setUint32(8, Number(data.dwFormats), true);
  // 0x0c: u32
  if (data?.dwChannels !== undefined) view.setUint32(12, Number(data.dwChannels), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCBUFFERDESC1 (size: 24)
 */
export interface DSCBUFFERDESC1 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSCBUFFERDESC1 = 24;

export function allocDSCBUFFERDESC1(data?: Partial<DSCBUFFERDESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCBUFFERDESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(util.toPointer(data.lpwfxFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCBUFFERDESC (size: 40)
 */
export interface DSCBUFFERDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFXCount: number;
  /** ptr */
  lpDSCFXDesc: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSCBUFFERDESC = 40;

export function allocDSCBUFFERDESC(data?: Partial<DSCBUFFERDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCBUFFERDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(util.toPointer(data.lpwfxFormat)), true);
  // 0x18: u32
  if (data?.dwFXCount !== undefined) view.setUint32(24, Number(data.dwFXCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpDSCFXDesc !== undefined) view.setBigUint64(32, data.lpDSCFXDesc === null ? 0n : BigInt(util.toPointer(data.lpDSCFXDesc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCBCAPS (size: 16)
 */
export interface DSCBCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofDSCBCAPS = 16;

export function allocDSCBCAPS(data?: Partial<DSCBCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCBCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBPOSITIONNOTIFY (size: 16)
 */
export interface DSBPOSITIONNOTIFY {
  /** u32 */
  dwOffset: number;
  /** Windows.Win32.Foundation.HANDLE */
  hEventNotify: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDSBPOSITIONNOTIFY = 16;

export function allocDSBPOSITIONNOTIFY(data?: Partial<DSBPOSITIONNOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBPOSITIONNOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOffset !== undefined) view.setUint32(0, Number(data.dwOffset), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hEventNotify !== undefined) view.setBigUint64(8, data.hEventNotify === null ? 0n : BigInt(util.toPointer(data.hEventNotify)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXGargle (size: 8)
 */
export interface DSFXGargle {
  /** u32 */
  dwRateHz: number;
  /** u32 */
  dwWaveShape: number;
}

export const sizeofDSFXGargle = 8;

export function allocDSFXGargle(data?: Partial<DSFXGargle>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXGargle);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRateHz !== undefined) view.setUint32(0, Number(data.dwRateHz), true);
  // 0x04: u32
  if (data?.dwWaveShape !== undefined) view.setUint32(4, Number(data.dwWaveShape), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXChorus (size: 32)
 */
export interface DSFXChorus {
  /** f32 */
  fWetDryMix: number;
  /** f32 */
  fDepth: number;
  /** f32 */
  fFeedback: number;
  /** f32 */
  fFrequency: number;
  /** i32 */
  lWaveform: number;
  /** f32 */
  fDelay: number;
  /** i32 */
  lPhase: number;
}

export const sizeofDSFXChorus = 32;

export function allocDSFXChorus(data?: Partial<DSFXChorus>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXChorus);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fWetDryMix !== undefined) view.setFloat32(0, Number(data.fWetDryMix), true);
  // 0x04: f32
  if (data?.fDepth !== undefined) view.setFloat32(4, Number(data.fDepth), true);
  // 0x08: f32
  if (data?.fFeedback !== undefined) view.setFloat32(8, Number(data.fFeedback), true);
  // 0x0c: f32
  if (data?.fFrequency !== undefined) view.setFloat32(12, Number(data.fFrequency), true);
  // 0x10: i32
  if (data?.lWaveform !== undefined) view.setInt32(16, Number(data.lWaveform), true);
  // 0x14: f32
  if (data?.fDelay !== undefined) view.setFloat32(20, Number(data.fDelay), true);
  // 0x18: i32
  if (data?.lPhase !== undefined) view.setInt32(24, Number(data.lPhase), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXFlanger (size: 32)
 */
export interface DSFXFlanger {
  /** f32 */
  fWetDryMix: number;
  /** f32 */
  fDepth: number;
  /** f32 */
  fFeedback: number;
  /** f32 */
  fFrequency: number;
  /** i32 */
  lWaveform: number;
  /** f32 */
  fDelay: number;
  /** i32 */
  lPhase: number;
}

export const sizeofDSFXFlanger = 32;

export function allocDSFXFlanger(data?: Partial<DSFXFlanger>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXFlanger);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fWetDryMix !== undefined) view.setFloat32(0, Number(data.fWetDryMix), true);
  // 0x04: f32
  if (data?.fDepth !== undefined) view.setFloat32(4, Number(data.fDepth), true);
  // 0x08: f32
  if (data?.fFeedback !== undefined) view.setFloat32(8, Number(data.fFeedback), true);
  // 0x0c: f32
  if (data?.fFrequency !== undefined) view.setFloat32(12, Number(data.fFrequency), true);
  // 0x10: i32
  if (data?.lWaveform !== undefined) view.setInt32(16, Number(data.lWaveform), true);
  // 0x14: f32
  if (data?.fDelay !== undefined) view.setFloat32(20, Number(data.fDelay), true);
  // 0x18: i32
  if (data?.lPhase !== undefined) view.setInt32(24, Number(data.lPhase), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXEcho (size: 24)
 */
export interface DSFXEcho {
  /** f32 */
  fWetDryMix: number;
  /** f32 */
  fFeedback: number;
  /** f32 */
  fLeftDelay: number;
  /** f32 */
  fRightDelay: number;
  /** i32 */
  lPanDelay: number;
}

export const sizeofDSFXEcho = 24;

export function allocDSFXEcho(data?: Partial<DSFXEcho>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXEcho);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fWetDryMix !== undefined) view.setFloat32(0, Number(data.fWetDryMix), true);
  // 0x04: f32
  if (data?.fFeedback !== undefined) view.setFloat32(4, Number(data.fFeedback), true);
  // 0x08: f32
  if (data?.fLeftDelay !== undefined) view.setFloat32(8, Number(data.fLeftDelay), true);
  // 0x0c: f32
  if (data?.fRightDelay !== undefined) view.setFloat32(12, Number(data.fRightDelay), true);
  // 0x10: i32
  if (data?.lPanDelay !== undefined) view.setInt32(16, Number(data.lPanDelay), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXDistortion (size: 24)
 */
export interface DSFXDistortion {
  /** f32 */
  fGain: number;
  /** f32 */
  fEdge: number;
  /** f32 */
  fPostEQCenterFrequency: number;
  /** f32 */
  fPostEQBandwidth: number;
  /** f32 */
  fPreLowpassCutoff: number;
}

export const sizeofDSFXDistortion = 24;

export function allocDSFXDistortion(data?: Partial<DSFXDistortion>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXDistortion);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fGain !== undefined) view.setFloat32(0, Number(data.fGain), true);
  // 0x04: f32
  if (data?.fEdge !== undefined) view.setFloat32(4, Number(data.fEdge), true);
  // 0x08: f32
  if (data?.fPostEQCenterFrequency !== undefined) view.setFloat32(8, Number(data.fPostEQCenterFrequency), true);
  // 0x0c: f32
  if (data?.fPostEQBandwidth !== undefined) view.setFloat32(12, Number(data.fPostEQBandwidth), true);
  // 0x10: f32
  if (data?.fPreLowpassCutoff !== undefined) view.setFloat32(16, Number(data.fPreLowpassCutoff), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXCompressor (size: 24)
 */
export interface DSFXCompressor {
  /** f32 */
  fGain: number;
  /** f32 */
  fAttack: number;
  /** f32 */
  fRelease: number;
  /** f32 */
  fThreshold: number;
  /** f32 */
  fRatio: number;
  /** f32 */
  fPredelay: number;
}

export const sizeofDSFXCompressor = 24;

export function allocDSFXCompressor(data?: Partial<DSFXCompressor>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXCompressor);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fGain !== undefined) view.setFloat32(0, Number(data.fGain), true);
  // 0x04: f32
  if (data?.fAttack !== undefined) view.setFloat32(4, Number(data.fAttack), true);
  // 0x08: f32
  if (data?.fRelease !== undefined) view.setFloat32(8, Number(data.fRelease), true);
  // 0x0c: f32
  if (data?.fThreshold !== undefined) view.setFloat32(12, Number(data.fThreshold), true);
  // 0x10: f32
  if (data?.fRatio !== undefined) view.setFloat32(16, Number(data.fRatio), true);
  // 0x14: f32
  if (data?.fPredelay !== undefined) view.setFloat32(20, Number(data.fPredelay), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXParamEq (size: 16)
 */
export interface DSFXParamEq {
  /** f32 */
  fCenter: number;
  /** f32 */
  fBandwidth: number;
  /** f32 */
  fGain: number;
}

export const sizeofDSFXParamEq = 16;

export function allocDSFXParamEq(data?: Partial<DSFXParamEq>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXParamEq);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fCenter !== undefined) view.setFloat32(0, Number(data.fCenter), true);
  // 0x04: f32
  if (data?.fBandwidth !== undefined) view.setFloat32(4, Number(data.fBandwidth), true);
  // 0x08: f32
  if (data?.fGain !== undefined) view.setFloat32(8, Number(data.fGain), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXI3DL2Reverb (size: 48)
 */
export interface DSFXI3DL2Reverb {
  /** i32 */
  lRoom: number;
  /** i32 */
  lRoomHF: number;
  /** f32 */
  flRoomRolloffFactor: number;
  /** f32 */
  flDecayTime: number;
  /** f32 */
  flDecayHFRatio: number;
  /** i32 */
  lReflections: number;
  /** f32 */
  flReflectionsDelay: number;
  /** i32 */
  lReverb: number;
  /** f32 */
  flReverbDelay: number;
  /** f32 */
  flDiffusion: number;
  /** f32 */
  flDensity: number;
  /** f32 */
  flHFReference: number;
}

export const sizeofDSFXI3DL2Reverb = 48;

export function allocDSFXI3DL2Reverb(data?: Partial<DSFXI3DL2Reverb>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXI3DL2Reverb);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lRoom !== undefined) view.setInt32(0, Number(data.lRoom), true);
  // 0x04: i32
  if (data?.lRoomHF !== undefined) view.setInt32(4, Number(data.lRoomHF), true);
  // 0x08: f32
  if (data?.flRoomRolloffFactor !== undefined) view.setFloat32(8, Number(data.flRoomRolloffFactor), true);
  // 0x0c: f32
  if (data?.flDecayTime !== undefined) view.setFloat32(12, Number(data.flDecayTime), true);
  // 0x10: f32
  if (data?.flDecayHFRatio !== undefined) view.setFloat32(16, Number(data.flDecayHFRatio), true);
  // 0x14: i32
  if (data?.lReflections !== undefined) view.setInt32(20, Number(data.lReflections), true);
  // 0x18: f32
  if (data?.flReflectionsDelay !== undefined) view.setFloat32(24, Number(data.flReflectionsDelay), true);
  // 0x1c: i32
  if (data?.lReverb !== undefined) view.setInt32(28, Number(data.lReverb), true);
  // 0x20: f32
  if (data?.flReverbDelay !== undefined) view.setFloat32(32, Number(data.flReverbDelay), true);
  // 0x24: f32
  if (data?.flDiffusion !== undefined) view.setFloat32(36, Number(data.flDiffusion), true);
  // 0x28: f32
  if (data?.flDensity !== undefined) view.setFloat32(40, Number(data.flDensity), true);
  // 0x2c: f32
  if (data?.flHFReference !== undefined) view.setFloat32(44, Number(data.flHFReference), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXWavesReverb (size: 16)
 */
export interface DSFXWavesReverb {
  /** f32 */
  fInGain: number;
  /** f32 */
  fReverbMix: number;
  /** f32 */
  fReverbTime: number;
  /** f32 */
  fHighFreqRTRatio: number;
}

export const sizeofDSFXWavesReverb = 16;

export function allocDSFXWavesReverb(data?: Partial<DSFXWavesReverb>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXWavesReverb);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fInGain !== undefined) view.setFloat32(0, Number(data.fInGain), true);
  // 0x04: f32
  if (data?.fReverbMix !== undefined) view.setFloat32(4, Number(data.fReverbMix), true);
  // 0x08: f32
  if (data?.fReverbTime !== undefined) view.setFloat32(8, Number(data.fReverbTime), true);
  // 0x0c: f32
  if (data?.fHighFreqRTRatio !== undefined) view.setFloat32(12, Number(data.fHighFreqRTRatio), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCFXAec (size: 16)
 */
export interface DSCFXAec {
  /** Windows.Win32.Foundation.BOOL */
  fEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fNoiseFill: boolean;
  /** u32 */
  dwMode: number;
}

export const sizeofDSCFXAec = 16;

export function allocDSCFXAec(data?: Partial<DSCFXAec>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCFXAec);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fEnable !== undefined) view.setInt32(0, Number(data.fEnable), true);
  // 0x04: i32
  if (data?.fNoiseFill !== undefined) view.setInt32(4, Number(data.fNoiseFill), true);
  // 0x08: u32
  if (data?.dwMode !== undefined) view.setUint32(8, Number(data.dwMode), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCFXNoiseSuppress (size: 8)
 */
export interface DSCFXNoiseSuppress {
  /** Windows.Win32.Foundation.BOOL */
  fEnable: boolean;
}

export const sizeofDSCFXNoiseSuppress = 8;

export function allocDSCFXNoiseSuppress(data?: Partial<DSCFXNoiseSuppress>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCFXNoiseSuppress);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fEnable !== undefined) view.setInt32(0, Number(data.fEnable), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Endpoints.AUDIO_ENDPOINT_SHARED_CREATE_PARAMS (size: 24)
 */
export interface AUDIO_ENDPOINT_SHARED_CREATE_PARAMS {
  /** u32 */
  u32Size: number;
  /** u32 */
  u32TSSessionId: number;
  /** Windows.Win32.Media.Audio.Endpoints.EndpointConnectorType */
  targetEndpointConnectorType: EndpointConnectorType;
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfxDeviceFormat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_SHARED_CREATE_PARAMS = 24;

export function allocAUDIO_ENDPOINT_SHARED_CREATE_PARAMS(data?: Partial<AUDIO_ENDPOINT_SHARED_CREATE_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_SHARED_CREATE_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.u32Size !== undefined) view.setUint32(0, Number(data.u32Size), true);
  // 0x04: u32
  if (data?.u32TSSessionId !== undefined) view.setUint32(4, Number(data.u32TSSessionId), true);
  // 0x08: i32
  if (data?.targetEndpointConnectorType !== undefined) view.setInt32(8, Number(data.targetEndpointConnectorType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wfxDeviceFormat !== undefined) view.setBigUint64(16, data.wfxDeviceFormat === null ? 0n : BigInt(util.toPointer(data.wfxDeviceFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUDIO_VOLUME_NOTIFICATION_DATA (size: 32)
 */
export interface AUDIO_VOLUME_NOTIFICATION_DATA {
  /** System.Guid */
  guidEventContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bMuted: boolean;
  /** f32 */
  fMasterVolume: number;
  /** u32 */
  nChannels: number;
  /** array */
  afChannelVolumes: Deno.PointerValue | null;
}

export const sizeofAUDIO_VOLUME_NOTIFICATION_DATA = 32;

export function allocAUDIO_VOLUME_NOTIFICATION_DATA(data?: Partial<AUDIO_VOLUME_NOTIFICATION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_VOLUME_NOTIFICATION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidEventContext !== undefined) view.setBigUint64(0, data.guidEventContext === null ? 0n : BigInt(util.toPointer(data.guidEventContext)), true);
  // 0x08: i32
  if (data?.bMuted !== undefined) view.setInt32(8, Number(data.bMuted), true);
  // 0x0c: f32
  if (data?.fMasterVolume !== undefined) view.setFloat32(12, Number(data.fMasterVolume), true);
  // 0x10: u32
  if (data?.nChannels !== undefined) view.setUint32(16, Number(data.nChannels), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.afChannelVolumes !== undefined) view.setBigUint64(24, data.afChannelVolumes === null ? 0n : BigInt(util.toPointer(data.afChannelVolumes)), true);
  return buf;
}

export type HTASK = Deno.PointerValue;

export type HMIDI = Deno.PointerValue;

export type HMIDIIN = Deno.PointerValue;

export type HMIDIOUT = Deno.PointerValue;

export type HMIDISTRM = Deno.PointerValue;

export type HMIXER = Deno.PointerValue;

export type HMIXEROBJ = Deno.PointerValue;

export type HWAVE = Deno.PointerValue;

export type HWAVEOUT = Deno.PointerValue;

export type HWAVEIN = Deno.PointerValue;

export type HACMDRIVERID = Deno.PointerValue;

export type HACMDRIVER = Deno.PointerValue;

export type HACMSTREAM = Deno.PointerValue;

export type HACMOBJ = Deno.PointerValue;

export type HMMIO = Deno.PointerValue;

export type HDRVR = Deno.PointerValue;

export type HIC = Deno.PointerValue;

export type HVIDEO = Deno.PointerValue;

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MMTIME (size: 16)
 */
export interface MMTIME {
  /** u32 */
  wType: number;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMMTIME = 16;

export function allocMMTIME(data?: Partial<MMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofMMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wType !== undefined) view.setUint32(0, Number(data.wType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.Media.TIMECAPS (size: 8)
 */
export interface TIMECAPS {
  /** u32 */
  wPeriodMin: number;
  /** u32 */
  wPeriodMax: number;
}

export const sizeofTIMECAPS = 8;

export function allocTIMECAPS(data?: Partial<TIMECAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMECAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wPeriodMin !== undefined) view.setUint32(0, Number(data.wPeriodMin), true);
  // 0x04: u32
  if (data?.wPeriodMax !== undefined) view.setUint32(4, Number(data.wPeriodMax), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMVPSIZE (size: 8)
 */
export interface AMVPSIZE {
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
}

export const sizeofAMVPSIZE = 8;

export function allocAMVPSIZE(data?: Partial<AMVPSIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVPSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwWidth !== undefined) view.setUint32(0, Number(data.dwWidth), true);
  // 0x04: u32
  if (data?.dwHeight !== undefined) view.setUint32(4, Number(data.dwHeight), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMVPDIMINFO (size: 24)
 */
export interface AMVPDIMINFO {
  /** u32 */
  dwFieldWidth: number;
  /** u32 */
  dwFieldHeight: number;
  /** u32 */
  dwVBIWidth: number;
  /** u32 */
  dwVBIHeight: number;
  /** Windows.Win32.Foundation.RECT */
  rcValidRegion: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAMVPDIMINFO = 24;

export function allocAMVPDIMINFO(data?: Partial<AMVPDIMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVPDIMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFieldWidth !== undefined) view.setUint32(0, Number(data.dwFieldWidth), true);
  // 0x04: u32
  if (data?.dwFieldHeight !== undefined) view.setUint32(4, Number(data.dwFieldHeight), true);
  // 0x08: u32
  if (data?.dwVBIWidth !== undefined) view.setUint32(8, Number(data.dwVBIWidth), true);
  // 0x0c: u32
  if (data?.dwVBIHeight !== undefined) view.setUint32(12, Number(data.dwVBIHeight), true);
  // 0x10: pointer
  if (data?.rcValidRegion !== undefined) view.setBigUint64(16, data.rcValidRegion === null ? 0n : BigInt(util.toPointer(data.rcValidRegion)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMVPDATAINFO (size: 56)
 */
export interface AMVPDATAINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwMicrosecondsPerField: number;
  /** Windows.Win32.Media.DirectShow.AMVPDIMINFO */
  amvpDimInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPictAspectRatioX: number;
  /** u32 */
  dwPictAspectRatioY: number;
  /** Windows.Win32.Foundation.BOOL */
  bEnableDoubleClock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bEnableVACT: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bDataIsInterlaced: boolean;
  /** i32 */
  lHalfLinesOdd: number;
  /** Windows.Win32.Foundation.BOOL */
  bFieldPolarityInverted: boolean;
  /** u32 */
  dwNumLinesInVREF: number;
  /** i32 */
  lHalfLinesEven: number;
  /** u32 */
  dwReserved1: number;
}

export const sizeofAMVPDATAINFO = 56;

export function allocAMVPDATAINFO(data?: Partial<AMVPDATAINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVPDATAINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwMicrosecondsPerField !== undefined) view.setUint32(4, Number(data.dwMicrosecondsPerField), true);
  // 0x08: pointer
  if (data?.amvpDimInfo !== undefined) view.setBigUint64(8, data.amvpDimInfo === null ? 0n : BigInt(util.toPointer(data.amvpDimInfo)), true);
  // 0x10: u32
  if (data?.dwPictAspectRatioX !== undefined) view.setUint32(16, Number(data.dwPictAspectRatioX), true);
  // 0x14: u32
  if (data?.dwPictAspectRatioY !== undefined) view.setUint32(20, Number(data.dwPictAspectRatioY), true);
  // 0x18: i32
  if (data?.bEnableDoubleClock !== undefined) view.setInt32(24, Number(data.bEnableDoubleClock), true);
  // 0x1c: i32
  if (data?.bEnableVACT !== undefined) view.setInt32(28, Number(data.bEnableVACT), true);
  // 0x20: i32
  if (data?.bDataIsInterlaced !== undefined) view.setInt32(32, Number(data.bDataIsInterlaced), true);
  // 0x24: i32
  if (data?.lHalfLinesOdd !== undefined) view.setInt32(36, Number(data.lHalfLinesOdd), true);
  // 0x28: i32
  if (data?.bFieldPolarityInverted !== undefined) view.setInt32(40, Number(data.bFieldPolarityInverted), true);
  // 0x2c: u32
  if (data?.dwNumLinesInVREF !== undefined) view.setUint32(44, Number(data.dwNumLinesInVREF), true);
  // 0x30: i32
  if (data?.lHalfLinesEven !== undefined) view.setInt32(48, Number(data.lHalfLinesEven), true);
  // 0x34: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(52, Number(data.dwReserved1), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.ALLOCATOR_PROPERTIES (size: 16)
 */
export interface ALLOCATOR_PROPERTIES {
  /** i32 */
  cBuffers: number;
  /** i32 */
  cbBuffer: number;
  /** i32 */
  cbAlign: number;
  /** i32 */
  cbPrefix: number;
}

export const sizeofALLOCATOR_PROPERTIES = 16;

export function allocALLOCATOR_PROPERTIES(data?: Partial<ALLOCATOR_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofALLOCATOR_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cBuffers !== undefined) view.setInt32(0, Number(data.cBuffers), true);
  // 0x04: i32
  if (data?.cbBuffer !== undefined) view.setInt32(4, Number(data.cbBuffer), true);
  // 0x08: i32
  if (data?.cbAlign !== undefined) view.setInt32(8, Number(data.cbAlign), true);
  // 0x0c: i32
  if (data?.cbPrefix !== undefined) view.setInt32(12, Number(data.cbPrefix), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.PIN_INFO (size: 24)
 */
export interface PIN_INFO {
  /** Windows.Win32.Media.DirectShow.IBaseFilter */
  pFilter: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PIN_DIRECTION */
  dir: PIN_DIRECTION;
  /** array */
  achName: Deno.PointerValue | null;
}

export const sizeofPIN_INFO = 24;

export function allocPIN_INFO(data?: Partial<PIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pFilter !== undefined) view.setBigUint64(0, data.pFilter === null ? 0n : BigInt(util.toPointer(data.pFilter)), true);
  // 0x08: i32
  if (data?.dir !== undefined) view.setInt32(8, Number(data.dir), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.achName !== undefined) view.setBigUint64(16, data.achName === null ? 0n : BigInt(util.toPointer(data.achName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.FILTER_INFO (size: 16)
 */
export interface FILTER_INFO {
  /** array */
  achName: Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.IFilterGraph */
  pGraph: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFILTER_INFO = 16;

export function allocFILTER_INFO(data?: Partial<FILTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.achName !== undefined) view.setBigUint64(0, data.achName === null ? 0n : BigInt(util.toPointer(data.achName)), true);
  // 0x08: pointer
  if (data?.pGraph !== undefined) view.setBigUint64(8, data.pGraph === null ? 0n : BigInt(util.toPointer(data.pGraph)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_SAMPLE2_PROPERTIES (size: 64)
 */
export interface AM_SAMPLE2_PROPERTIES {
  /** u32 */
  cbData: number;
  /** u32 */
  dwTypeSpecificFlags: number;
  /** u32 */
  dwSampleFlags: number;
  /** i32 */
  lActual: number;
  /** i64 */
  tStart: Deno.PointerValue;
  /** i64 */
  tStop: Deno.PointerValue;
  /** u32 */
  dwStreamId: number;
  /** ptr */
  pMediaType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pbBuffer: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cbBuffer: number;
}

export const sizeofAM_SAMPLE2_PROPERTIES = 64;

export function allocAM_SAMPLE2_PROPERTIES(data?: Partial<AM_SAMPLE2_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_SAMPLE2_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: u32
  if (data?.dwTypeSpecificFlags !== undefined) view.setUint32(4, Number(data.dwTypeSpecificFlags), true);
  // 0x08: u32
  if (data?.dwSampleFlags !== undefined) view.setUint32(8, Number(data.dwSampleFlags), true);
  // 0x0c: i32
  if (data?.lActual !== undefined) view.setInt32(12, Number(data.lActual), true);
  // 0x10: i64
  if (data?.tStart !== undefined) view.setBigInt64(16, BigInt(data.tStart), true);
  // 0x18: i64
  if (data?.tStop !== undefined) view.setBigInt64(24, BigInt(data.tStop), true);
  // 0x20: u32
  if (data?.dwStreamId !== undefined) view.setUint32(32, Number(data.dwStreamId), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pMediaType !== undefined) view.setBigUint64(40, data.pMediaType === null ? 0n : BigInt(util.toPointer(data.pMediaType)), true);
  // 0x30: pointer
  if (data?.pbBuffer !== undefined) view.setBigUint64(48, data.pbBuffer === null ? 0n : BigInt(util.toPointer(data.pbBuffer)), true);
  // 0x38: i32
  if (data?.cbBuffer !== undefined) view.setInt32(56, Number(data.cbBuffer), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.REGFILTER (size: 16)
 */
export interface REGFILTER {
  /** System.Guid */
  Clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null;
}

export const sizeofREGFILTER = 16;

export function allocREGFILTER(data?: Partial<REGFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofREGFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Clsid !== undefined) view.setBigUint64(0, data.Clsid === null ? 0n : BigInt(util.toPointer(data.Clsid)), true);
  // 0x08: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.REGPINTYPES (size: 16)
 */
export interface REGPINTYPES {
  /** ptr */
  clsMajorType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  clsMinorType: Deno.PointerValue | Uint8Array | null;
}

export const sizeofREGPINTYPES = 16;

export function allocREGPINTYPES(data?: Partial<REGPINTYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofREGPINTYPES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsMajorType !== undefined) view.setBigUint64(0, data.clsMajorType === null ? 0n : BigInt(util.toPointer(data.clsMajorType)), true);
  // 0x08: pointer
  if (data?.clsMinorType !== undefined) view.setBigUint64(8, data.clsMinorType === null ? 0n : BigInt(util.toPointer(data.clsMinorType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.REGFILTERPINS (size: 56)
 */
export interface REGFILTERPINS {
  /** Windows.Win32.Foundation.PWSTR */
  strName: string | null;
  /** Windows.Win32.Foundation.BOOL */
  bRendered: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bOutput: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bZero: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bMany: boolean;
  /** ptr */
  clsConnectsToFilter: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  strConnectsToPin: string | null;
  /** u32 */
  nMediaTypes: number;
  /** ptr */
  lpMediaType: Deno.PointerValue | Uint8Array | null;
}

export const sizeofREGFILTERPINS = 56;

export function allocREGFILTERPINS(data?: Partial<REGFILTERPINS>): Uint8Array {
  const buf = new Uint8Array(sizeofREGFILTERPINS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.strName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.strName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.bRendered !== undefined) view.setInt32(8, Number(data.bRendered), true);
  // 0x0c: i32
  if (data?.bOutput !== undefined) view.setInt32(12, Number(data.bOutput), true);
  // 0x10: i32
  if (data?.bZero !== undefined) view.setInt32(16, Number(data.bZero), true);
  // 0x14: i32
  if (data?.bMany !== undefined) view.setInt32(20, Number(data.bMany), true);
  // 0x18: pointer
  if (data?.clsConnectsToFilter !== undefined) view.setBigUint64(24, data.clsConnectsToFilter === null ? 0n : BigInt(util.toPointer(data.clsConnectsToFilter)), true);
  // 0x20: buffer
  if (data?.strConnectsToPin !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.strConnectsToPin);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.nMediaTypes !== undefined) view.setUint32(40, Number(data.nMediaTypes), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lpMediaType !== undefined) view.setBigUint64(48, data.lpMediaType === null ? 0n : BigInt(util.toPointer(data.lpMediaType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.REGPINMEDIUM (size: 16)
 */
export interface REGPINMEDIUM {
  /** System.Guid */
  clsMedium: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dw1: number;
  /** u32 */
  dw2: number;
}

export const sizeofREGPINMEDIUM = 16;

export function allocREGPINMEDIUM(data?: Partial<REGPINMEDIUM>): Uint8Array {
  const buf = new Uint8Array(sizeofREGPINMEDIUM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsMedium !== undefined) view.setBigUint64(0, data.clsMedium === null ? 0n : BigInt(util.toPointer(data.clsMedium)), true);
  // 0x08: u32
  if (data?.dw1 !== undefined) view.setUint32(8, Number(data.dw1), true);
  // 0x0c: u32
  if (data?.dw2 !== undefined) view.setUint32(12, Number(data.dw2), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.REGFILTERPINS2 (size: 48)
 */
export interface REGFILTERPINS2 {
  /** u32 */
  dwFlags: number;
  /** u32 */
  cInstances: number;
  /** u32 */
  nMediaTypes: number;
  /** ptr */
  lpMediaType: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  nMediums: number;
  /** ptr */
  lpMedium: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  clsPinCategory: Deno.PointerValue | Uint8Array | null;
}

export const sizeofREGFILTERPINS2 = 48;

export function allocREGFILTERPINS2(data?: Partial<REGFILTERPINS2>): Uint8Array {
  const buf = new Uint8Array(sizeofREGFILTERPINS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.cInstances !== undefined) view.setUint32(4, Number(data.cInstances), true);
  // 0x08: u32
  if (data?.nMediaTypes !== undefined) view.setUint32(8, Number(data.nMediaTypes), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpMediaType !== undefined) view.setBigUint64(16, data.lpMediaType === null ? 0n : BigInt(util.toPointer(data.lpMediaType)), true);
  // 0x18: u32
  if (data?.nMediums !== undefined) view.setUint32(24, Number(data.nMediums), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpMedium !== undefined) view.setBigUint64(32, data.lpMedium === null ? 0n : BigInt(util.toPointer(data.lpMedium)), true);
  // 0x28: pointer
  if (data?.clsPinCategory !== undefined) view.setBigUint64(40, data.clsPinCategory === null ? 0n : BigInt(util.toPointer(data.clsPinCategory)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.REGFILTER2 (size: 16)
 */
export interface REGFILTER2 {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwMerit: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofREGFILTER2 = 16;

export function allocREGFILTER2(data?: Partial<REGFILTER2>): Uint8Array {
  const buf = new Uint8Array(sizeofREGFILTER2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwMerit !== undefined) view.setUint32(4, Number(data.dwMerit), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.Quality (size: 24)
 */
export interface Quality {
  /** Windows.Win32.Media.DirectShow.QualityMessageType */
  Type: QualityMessageType;
  /** i32 */
  Proportion: number;
  /** i64 */
  Late: Deno.PointerValue;
  /** i64 */
  TimeStamp: Deno.PointerValue;
}

export const sizeofQuality = 24;

export function allocQuality(data?: Partial<Quality>): Uint8Array {
  const buf = new Uint8Array(sizeofQuality);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.Proportion !== undefined) view.setInt32(4, Number(data.Proportion), true);
  // 0x08: i64
  if (data?.Late !== undefined) view.setBigInt64(8, BigInt(data.Late), true);
  // 0x10: i64
  if (data?.TimeStamp !== undefined) view.setBigInt64(16, BigInt(data.TimeStamp), true);
  return buf;
}

export type COLORREF = number;

/**
 * Windows.Win32.Media.DirectShow.COLORKEY (size: 24)
 */
export interface COLORKEY {
  /** u32 */
  KeyType: number;
  /** u32 */
  PaletteIndex: number;
  /** Windows.Win32.Foundation.COLORREF */
  LowColorValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.COLORREF */
  HighColorValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCOLORKEY = 24;

export function allocCOLORKEY(data?: Partial<COLORKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.KeyType !== undefined) view.setUint32(0, Number(data.KeyType), true);
  // 0x04: u32
  if (data?.PaletteIndex !== undefined) view.setUint32(4, Number(data.PaletteIndex), true);
  // 0x08: pointer
  if (data?.LowColorValue !== undefined) view.setBigUint64(8, data.LowColorValue === null ? 0n : BigInt(util.toPointer(data.LowColorValue)), true);
  // 0x10: pointer
  if (data?.HighColorValue !== undefined) view.setBigUint64(16, data.HighColorValue === null ? 0n : BigInt(util.toPointer(data.HighColorValue)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_STREAM_INFO (size: 32)
 */
export interface AM_STREAM_INFO {
  /** i64 */
  tStart: Deno.PointerValue;
  /** i64 */
  tStop: Deno.PointerValue;
  /** u32 */
  dwStartCookie: number;
  /** u32 */
  dwStopCookie: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofAM_STREAM_INFO = 32;

export function allocAM_STREAM_INFO(data?: Partial<AM_STREAM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_STREAM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.tStart !== undefined) view.setBigInt64(0, BigInt(data.tStart), true);
  // 0x08: i64
  if (data?.tStop !== undefined) view.setBigInt64(8, BigInt(data.tStop), true);
  // 0x10: u32
  if (data?.dwStartCookie !== undefined) view.setUint32(16, Number(data.dwStartCookie), true);
  // 0x14: u32
  if (data?.dwStopCookie !== undefined) view.setUint32(20, Number(data.dwStopCookie), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Foundation.SIZE (size: 8)
 */
export interface SIZE {
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
}

export const sizeofSIZE = 8;

export function allocSIZE(data?: Partial<SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cx !== undefined) view.setInt32(0, Number(data.cx), true);
  // 0x04: i32
  if (data?.cy !== undefined) view.setInt32(4, Number(data.cy), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VIDEO_STREAM_CONFIG_CAPS (size: 120)
 */
export interface VIDEO_STREAM_CONFIG_CAPS {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VideoStandard: number;
  /** Windows.Win32.Foundation.SIZE */
  InputSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MinCroppingSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaxCroppingSize: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  CropGranularityX: number;
  /** i32 */
  CropGranularityY: number;
  /** i32 */
  CropAlignX: number;
  /** i32 */
  CropAlignY: number;
  /** Windows.Win32.Foundation.SIZE */
  MinOutputSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaxOutputSize: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  OutputGranularityX: number;
  /** i32 */
  OutputGranularityY: number;
  /** i32 */
  StretchTapsX: number;
  /** i32 */
  StretchTapsY: number;
  /** i32 */
  ShrinkTapsX: number;
  /** i32 */
  ShrinkTapsY: number;
  /** i64 */
  MinFrameInterval: Deno.PointerValue;
  /** i64 */
  MaxFrameInterval: Deno.PointerValue;
  /** i32 */
  MinBitsPerSecond: number;
  /** i32 */
  MaxBitsPerSecond: number;
}

export const sizeofVIDEO_STREAM_CONFIG_CAPS = 120;

export function allocVIDEO_STREAM_CONFIG_CAPS(data?: Partial<VIDEO_STREAM_CONFIG_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_STREAM_CONFIG_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: u32
  if (data?.VideoStandard !== undefined) view.setUint32(8, Number(data.VideoStandard), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.InputSize !== undefined) view.setBigUint64(16, data.InputSize === null ? 0n : BigInt(util.toPointer(data.InputSize)), true);
  // 0x18: pointer
  if (data?.MinCroppingSize !== undefined) view.setBigUint64(24, data.MinCroppingSize === null ? 0n : BigInt(util.toPointer(data.MinCroppingSize)), true);
  // 0x20: pointer
  if (data?.MaxCroppingSize !== undefined) view.setBigUint64(32, data.MaxCroppingSize === null ? 0n : BigInt(util.toPointer(data.MaxCroppingSize)), true);
  // 0x28: i32
  if (data?.CropGranularityX !== undefined) view.setInt32(40, Number(data.CropGranularityX), true);
  // 0x2c: i32
  if (data?.CropGranularityY !== undefined) view.setInt32(44, Number(data.CropGranularityY), true);
  // 0x30: i32
  if (data?.CropAlignX !== undefined) view.setInt32(48, Number(data.CropAlignX), true);
  // 0x34: i32
  if (data?.CropAlignY !== undefined) view.setInt32(52, Number(data.CropAlignY), true);
  // 0x38: pointer
  if (data?.MinOutputSize !== undefined) view.setBigUint64(56, data.MinOutputSize === null ? 0n : BigInt(util.toPointer(data.MinOutputSize)), true);
  // 0x40: pointer
  if (data?.MaxOutputSize !== undefined) view.setBigUint64(64, data.MaxOutputSize === null ? 0n : BigInt(util.toPointer(data.MaxOutputSize)), true);
  // 0x48: i32
  if (data?.OutputGranularityX !== undefined) view.setInt32(72, Number(data.OutputGranularityX), true);
  // 0x4c: i32
  if (data?.OutputGranularityY !== undefined) view.setInt32(76, Number(data.OutputGranularityY), true);
  // 0x50: i32
  if (data?.StretchTapsX !== undefined) view.setInt32(80, Number(data.StretchTapsX), true);
  // 0x54: i32
  if (data?.StretchTapsY !== undefined) view.setInt32(84, Number(data.StretchTapsY), true);
  // 0x58: i32
  if (data?.ShrinkTapsX !== undefined) view.setInt32(88, Number(data.ShrinkTapsX), true);
  // 0x5c: i32
  if (data?.ShrinkTapsY !== undefined) view.setInt32(92, Number(data.ShrinkTapsY), true);
  // 0x60: i64
  if (data?.MinFrameInterval !== undefined) view.setBigInt64(96, BigInt(data.MinFrameInterval), true);
  // 0x68: i64
  if (data?.MaxFrameInterval !== undefined) view.setBigInt64(104, BigInt(data.MaxFrameInterval), true);
  // 0x70: i32
  if (data?.MinBitsPerSecond !== undefined) view.setInt32(112, Number(data.MinBitsPerSecond), true);
  // 0x74: i32
  if (data?.MaxBitsPerSecond !== undefined) view.setInt32(116, Number(data.MaxBitsPerSecond), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AUDIO_STREAM_CONFIG_CAPS (size: 48)
 */
export interface AUDIO_STREAM_CONFIG_CAPS {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MinimumChannels: number;
  /** u32 */
  MaximumChannels: number;
  /** u32 */
  ChannelsGranularity: number;
  /** u32 */
  MinimumBitsPerSample: number;
  /** u32 */
  MaximumBitsPerSample: number;
  /** u32 */
  BitsPerSampleGranularity: number;
  /** u32 */
  MinimumSampleFrequency: number;
  /** u32 */
  MaximumSampleFrequency: number;
  /** u32 */
  SampleFrequencyGranularity: number;
}

export const sizeofAUDIO_STREAM_CONFIG_CAPS = 48;

export function allocAUDIO_STREAM_CONFIG_CAPS(data?: Partial<AUDIO_STREAM_CONFIG_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_STREAM_CONFIG_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: u32
  if (data?.MinimumChannels !== undefined) view.setUint32(8, Number(data.MinimumChannels), true);
  // 0x0c: u32
  if (data?.MaximumChannels !== undefined) view.setUint32(12, Number(data.MaximumChannels), true);
  // 0x10: u32
  if (data?.ChannelsGranularity !== undefined) view.setUint32(16, Number(data.ChannelsGranularity), true);
  // 0x14: u32
  if (data?.MinimumBitsPerSample !== undefined) view.setUint32(20, Number(data.MinimumBitsPerSample), true);
  // 0x18: u32
  if (data?.MaximumBitsPerSample !== undefined) view.setUint32(24, Number(data.MaximumBitsPerSample), true);
  // 0x1c: u32
  if (data?.BitsPerSampleGranularity !== undefined) view.setUint32(28, Number(data.BitsPerSampleGranularity), true);
  // 0x20: u32
  if (data?.MinimumSampleFrequency !== undefined) view.setUint32(32, Number(data.MinimumSampleFrequency), true);
  // 0x24: u32
  if (data?.MaximumSampleFrequency !== undefined) view.setUint32(36, Number(data.MaximumSampleFrequency), true);
  // 0x28: u32
  if (data?.SampleFrequencyGranularity !== undefined) view.setUint32(40, Number(data.SampleFrequencyGranularity), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVINFO (size: 32)
 */
export interface DVINFO {
  /** u32 */
  dwDVAAuxSrc: number;
  /** u32 */
  dwDVAAuxCtl: number;
  /** u32 */
  dwDVAAuxSrc1: number;
  /** u32 */
  dwDVAAuxCtl1: number;
  /** u32 */
  dwDVVAuxSrc: number;
  /** u32 */
  dwDVVAuxCtl: number;
  /** array */
  dwDVReserved: Deno.PointerValue | null;
}

export const sizeofDVINFO = 32;

export function allocDVINFO(data?: Partial<DVINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDVINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDVAAuxSrc !== undefined) view.setUint32(0, Number(data.dwDVAAuxSrc), true);
  // 0x04: u32
  if (data?.dwDVAAuxCtl !== undefined) view.setUint32(4, Number(data.dwDVAAuxCtl), true);
  // 0x08: u32
  if (data?.dwDVAAuxSrc1 !== undefined) view.setUint32(8, Number(data.dwDVAAuxSrc1), true);
  // 0x0c: u32
  if (data?.dwDVAAuxCtl1 !== undefined) view.setUint32(12, Number(data.dwDVAAuxCtl1), true);
  // 0x10: u32
  if (data?.dwDVVAuxSrc !== undefined) view.setUint32(16, Number(data.dwDVVAuxSrc), true);
  // 0x14: u32
  if (data?.dwDVVAuxCtl !== undefined) view.setUint32(20, Number(data.dwDVVAuxCtl), true);
  // 0x18: pointer
  if (data?.dwDVReserved !== undefined) view.setBigUint64(24, data.dwDVReserved === null ? 0n : BigInt(util.toPointer(data.dwDVReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.STREAM_ID_MAP (size: 16)
 */
export interface STREAM_ID_MAP {
  /** u32 */
  stream_id: number;
  /** u32 */
  dwMediaSampleContent: number;
  /** u32 */
  ulSubstreamFilterValue: number;
  /** i32 */
  iDataOffset: number;
}

export const sizeofSTREAM_ID_MAP = 16;

export function allocSTREAM_ID_MAP(data?: Partial<STREAM_ID_MAP>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAM_ID_MAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.stream_id !== undefined) view.setUint32(0, Number(data.stream_id), true);
  // 0x04: u32
  if (data?.dwMediaSampleContent !== undefined) view.setUint32(4, Number(data.dwMediaSampleContent), true);
  // 0x08: u32
  if (data?.ulSubstreamFilterValue !== undefined) view.setUint32(8, Number(data.ulSubstreamFilterValue), true);
  // 0x0c: i32
  if (data?.iDataOffset !== undefined) view.setInt32(12, Number(data.iDataOffset), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMCOPPSignature (size: 8)
 */
export interface AMCOPPSignature {
  /** array */
  Signature: Deno.PointerValue | null;
}

export const sizeofAMCOPPSignature = 8;

export function allocAMCOPPSignature(data?: Partial<AMCOPPSignature>): Uint8Array {
  const buf = new Uint8Array(sizeofAMCOPPSignature);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Signature !== undefined) view.setBigUint64(0, data.Signature === null ? 0n : BigInt(util.toPointer(data.Signature)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMCOPPCommand (size: 32)
 */
export interface AMCOPPCommand {
  /** System.Guid */
  macKDI: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidCommandID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSequence: number;
  /** u32 */
  cbSizeData: number;
  /** array */
  CommandData: Deno.PointerValue | null;
}

export const sizeofAMCOPPCommand = 32;

export function allocAMCOPPCommand(data?: Partial<AMCOPPCommand>): Uint8Array {
  const buf = new Uint8Array(sizeofAMCOPPCommand);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.macKDI !== undefined) view.setBigUint64(0, data.macKDI === null ? 0n : BigInt(util.toPointer(data.macKDI)), true);
  // 0x08: pointer
  if (data?.guidCommandID !== undefined) view.setBigUint64(8, data.guidCommandID === null ? 0n : BigInt(util.toPointer(data.guidCommandID)), true);
  // 0x10: u32
  if (data?.dwSequence !== undefined) view.setUint32(16, Number(data.dwSequence), true);
  // 0x14: u32
  if (data?.cbSizeData !== undefined) view.setUint32(20, Number(data.cbSizeData), true);
  // 0x18: pointer
  if (data?.CommandData !== undefined) view.setBigUint64(24, data.CommandData === null ? 0n : BigInt(util.toPointer(data.CommandData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMCOPPStatusInput (size: 32)
 */
export interface AMCOPPStatusInput {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidStatusRequestID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSequence: number;
  /** u32 */
  cbSizeData: number;
  /** array */
  StatusData: Deno.PointerValue | null;
}

export const sizeofAMCOPPStatusInput = 32;

export function allocAMCOPPStatusInput(data?: Partial<AMCOPPStatusInput>): Uint8Array {
  const buf = new Uint8Array(sizeofAMCOPPStatusInput);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(util.toPointer(data.rApp)), true);
  // 0x08: pointer
  if (data?.guidStatusRequestID !== undefined) view.setBigUint64(8, data.guidStatusRequestID === null ? 0n : BigInt(util.toPointer(data.guidStatusRequestID)), true);
  // 0x10: u32
  if (data?.dwSequence !== undefined) view.setUint32(16, Number(data.dwSequence), true);
  // 0x14: u32
  if (data?.cbSizeData !== undefined) view.setUint32(20, Number(data.cbSizeData), true);
  // 0x18: pointer
  if (data?.StatusData !== undefined) view.setBigUint64(24, data.StatusData === null ? 0n : BigInt(util.toPointer(data.StatusData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMCOPPStatusOutput (size: 24)
 */
export interface AMCOPPStatusOutput {
  /** System.Guid */
  macKDI: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbSizeData: number;
  /** array */
  COPPStatus: Deno.PointerValue | null;
}

export const sizeofAMCOPPStatusOutput = 24;

export function allocAMCOPPStatusOutput(data?: Partial<AMCOPPStatusOutput>): Uint8Array {
  const buf = new Uint8Array(sizeofAMCOPPStatusOutput);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.macKDI !== undefined) view.setBigUint64(0, data.macKDI === null ? 0n : BigInt(util.toPointer(data.macKDI)), true);
  // 0x08: u32
  if (data?.cbSizeData !== undefined) view.setUint32(8, Number(data.cbSizeData), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.COPPStatus !== undefined) view.setBigUint64(16, data.COPPStatus === null ? 0n : BigInt(util.toPointer(data.COPPStatus)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMRPRESENTATIONINFO (size: 64)
 */
export interface VMRPRESENTATIONINFO {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface7 */
  lpSurf: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  rtStart: Deno.PointerValue;
  /** i64 */
  rtEnd: Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  szAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcDst: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwTypeSpecificFlags: number;
  /** u32 */
  dwInterlaceFlags: number;
}

export const sizeofVMRPRESENTATIONINFO = 64;

export function allocVMRPRESENTATIONINFO(data?: Partial<VMRPRESENTATIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRPRESENTATIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpSurf !== undefined) view.setBigUint64(8, data.lpSurf === null ? 0n : BigInt(util.toPointer(data.lpSurf)), true);
  // 0x10: i64
  if (data?.rtStart !== undefined) view.setBigInt64(16, BigInt(data.rtStart), true);
  // 0x18: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(24, BigInt(data.rtEnd), true);
  // 0x20: pointer
  if (data?.szAspectRatio !== undefined) view.setBigUint64(32, data.szAspectRatio === null ? 0n : BigInt(util.toPointer(data.szAspectRatio)), true);
  // 0x28: pointer
  if (data?.rcSrc !== undefined) view.setBigUint64(40, data.rcSrc === null ? 0n : BigInt(util.toPointer(data.rcSrc)), true);
  // 0x30: pointer
  if (data?.rcDst !== undefined) view.setBigUint64(48, data.rcDst === null ? 0n : BigInt(util.toPointer(data.rcDst)), true);
  // 0x38: u32
  if (data?.dwTypeSpecificFlags !== undefined) view.setUint32(56, Number(data.dwTypeSpecificFlags), true);
  // 0x3c: u32
  if (data?.dwInterlaceFlags !== undefined) view.setUint32(60, Number(data.dwInterlaceFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMRALLOCATIONINFO (size: 56)
 */
export interface VMRALLOCATIONINFO {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpHdr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpPixFmt: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.SIZE */
  szAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwMinBuffers: number;
  /** u32 */
  dwMaxBuffers: number;
  /** u32 */
  dwInterlaceFlags: number;
  /** Windows.Win32.Foundation.SIZE */
  szNativeSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMRALLOCATIONINFO = 56;

export function allocVMRALLOCATIONINFO(data?: Partial<VMRALLOCATIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRALLOCATIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpHdr !== undefined) view.setBigUint64(8, data.lpHdr === null ? 0n : BigInt(util.toPointer(data.lpHdr)), true);
  // 0x10: pointer
  if (data?.lpPixFmt !== undefined) view.setBigUint64(16, data.lpPixFmt === null ? 0n : BigInt(util.toPointer(data.lpPixFmt)), true);
  // 0x18: pointer
  if (data?.szAspectRatio !== undefined) view.setBigUint64(24, data.szAspectRatio === null ? 0n : BigInt(util.toPointer(data.szAspectRatio)), true);
  // 0x20: u32
  if (data?.dwMinBuffers !== undefined) view.setUint32(32, Number(data.dwMinBuffers), true);
  // 0x24: u32
  if (data?.dwMaxBuffers !== undefined) view.setUint32(36, Number(data.dwMaxBuffers), true);
  // 0x28: u32
  if (data?.dwInterlaceFlags !== undefined) view.setUint32(40, Number(data.dwInterlaceFlags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.szNativeSize !== undefined) view.setBigUint64(48, data.szNativeSize === null ? 0n : BigInt(util.toPointer(data.szNativeSize)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.NORMALIZEDRECT (size: 16)
 */
export interface NORMALIZEDRECT {
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  right: number;
  /** f32 */
  bottom: number;
}

export const sizeofNORMALIZEDRECT = 16;

export function allocNORMALIZEDRECT(data?: Partial<NORMALIZEDRECT>): Uint8Array {
  const buf = new Uint8Array(sizeofNORMALIZEDRECT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.left !== undefined) view.setFloat32(0, Number(data.left), true);
  // 0x04: f32
  if (data?.top !== undefined) view.setFloat32(4, Number(data.top), true);
  // 0x08: f32
  if (data?.right !== undefined) view.setFloat32(8, Number(data.right), true);
  // 0x0c: f32
  if (data?.bottom !== undefined) view.setFloat32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMRGUID (size: 16)
 */
export interface VMRGUID {
  /** ptr */
  pGUID: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  GUID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMRGUID = 16;

export function allocVMRGUID(data?: Partial<VMRGUID>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRGUID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pGUID !== undefined) view.setBigUint64(0, data.pGUID === null ? 0n : BigInt(util.toPointer(data.pGUID)), true);
  // 0x08: pointer
  if (data?.GUID !== undefined) view.setBigUint64(8, data.GUID === null ? 0n : BigInt(util.toPointer(data.GUID)), true);
  return buf;
}

export type HMONITOR = Deno.PointerValue;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMRMONITORINFO (size: 72)
 */
export interface VMRMONITORINFO {
  /** Windows.Win32.Media.DirectShow.VMRGUID */
  guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcMonitor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HMONITOR */
  hMon: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** array */
  szDevice: Deno.PointerValue | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liDriverVersion: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwVendorId: number;
  /** u32 */
  dwDeviceId: number;
  /** u32 */
  dwSubSysId: number;
  /** u32 */
  dwRevision: number;
}

export const sizeofVMRMONITORINFO = 72;

export function allocVMRMONITORINFO(data?: Partial<VMRMONITORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRMONITORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: pointer
  if (data?.rcMonitor !== undefined) view.setBigUint64(8, data.rcMonitor === null ? 0n : BigInt(util.toPointer(data.rcMonitor)), true);
  // 0x10: pointer
  if (data?.hMon !== undefined) view.setBigUint64(16, data.hMon === null ? 0n : BigInt(util.toPointer(data.hMon)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szDevice !== undefined) view.setBigUint64(32, data.szDevice === null ? 0n : BigInt(util.toPointer(data.szDevice)), true);
  // 0x28: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(40, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x30: pointer
  if (data?.liDriverVersion !== undefined) view.setBigUint64(48, data.liDriverVersion === null ? 0n : BigInt(util.toPointer(data.liDriverVersion)), true);
  // 0x38: u32
  if (data?.dwVendorId !== undefined) view.setUint32(56, Number(data.dwVendorId), true);
  // 0x3c: u32
  if (data?.dwDeviceId !== undefined) view.setUint32(60, Number(data.dwDeviceId), true);
  // 0x40: u32
  if (data?.dwSubSysId !== undefined) view.setUint32(64, Number(data.dwSubSysId), true);
  // 0x44: u32
  if (data?.dwRevision !== undefined) view.setUint32(68, Number(data.dwRevision), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMRFrequency (size: 8)
 */
export interface VMRFrequency {
  /** u32 */
  dwNumerator: number;
  /** u32 */
  dwDenominator: number;
}

export const sizeofVMRFrequency = 8;

export function allocVMRFrequency(data?: Partial<VMRFrequency>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRFrequency);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumerator !== undefined) view.setUint32(0, Number(data.dwNumerator), true);
  // 0x04: u32
  if (data?.dwDenominator !== undefined) view.setUint32(4, Number(data.dwDenominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMRVideoDesc (size: 40)
 */
export interface VMRVideoDesc {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwSampleWidth: number;
  /** u32 */
  dwSampleHeight: number;
  /** Windows.Win32.Foundation.BOOL */
  SingleFieldPerSample: boolean;
  /** u32 */
  dwFourCC: number;
  /** Windows.Win32.Media.DirectShow.VMRFrequency */
  InputSampleFreq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.VMRFrequency */
  OutputFrameFreq: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMRVideoDesc = 40;

export function allocVMRVideoDesc(data?: Partial<VMRVideoDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRVideoDesc);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwSampleWidth !== undefined) view.setUint32(4, Number(data.dwSampleWidth), true);
  // 0x08: u32
  if (data?.dwSampleHeight !== undefined) view.setUint32(8, Number(data.dwSampleHeight), true);
  // 0x0c: i32
  if (data?.SingleFieldPerSample !== undefined) view.setInt32(12, Number(data.SingleFieldPerSample), true);
  // 0x10: u32
  if (data?.dwFourCC !== undefined) view.setUint32(16, Number(data.dwFourCC), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.InputSampleFreq !== undefined) view.setBigUint64(24, data.InputSampleFreq === null ? 0n : BigInt(util.toPointer(data.InputSampleFreq)), true);
  // 0x20: pointer
  if (data?.OutputFrameFreq !== undefined) view.setBigUint64(32, data.OutputFrameFreq === null ? 0n : BigInt(util.toPointer(data.OutputFrameFreq)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMRDeinterlaceCaps (size: 24)
 */
export interface VMRDeinterlaceCaps {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwNumPreviousOutputFrames: number;
  /** u32 */
  dwNumForwardRefSamples: number;
  /** u32 */
  dwNumBackwardRefSamples: number;
  /** Windows.Win32.Media.DirectShow.VMRDeinterlaceTech */
  DeinterlaceTechnology: VMRDeinterlaceTech;
}

export const sizeofVMRDeinterlaceCaps = 24;

export function allocVMRDeinterlaceCaps(data?: Partial<VMRDeinterlaceCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRDeinterlaceCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwNumPreviousOutputFrames !== undefined) view.setUint32(4, Number(data.dwNumPreviousOutputFrames), true);
  // 0x08: u32
  if (data?.dwNumForwardRefSamples !== undefined) view.setUint32(8, Number(data.dwNumForwardRefSamples), true);
  // 0x0c: u32
  if (data?.dwNumBackwardRefSamples !== undefined) view.setUint32(12, Number(data.dwNumBackwardRefSamples), true);
  // 0x10: i32
  if (data?.DeinterlaceTechnology !== undefined) view.setInt32(16, Number(data.DeinterlaceTechnology), true);
  // 0x14: pad4
  return buf;
}

export type HDC = Deno.PointerValue;

/**
 * Windows.Win32.Media.DirectShow.VMRALPHABITMAP (size: 56)
 */
export interface VMRALPHABITMAP {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface7 */
  pDDS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.NORMALIZEDRECT */
  rDest: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  fAlpha: number;
  /** Windows.Win32.Foundation.COLORREF */
  clrSrcKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMRALPHABITMAP = 56;

export function allocVMRALPHABITMAP(data?: Partial<VMRALPHABITMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRALPHABITMAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hdc !== undefined) view.setBigUint64(8, data.hdc === null ? 0n : BigInt(util.toPointer(data.hdc)), true);
  // 0x10: pointer
  if (data?.pDDS !== undefined) view.setBigUint64(16, data.pDDS === null ? 0n : BigInt(util.toPointer(data.pDDS)), true);
  // 0x18: pointer
  if (data?.rSrc !== undefined) view.setBigUint64(24, data.rSrc === null ? 0n : BigInt(util.toPointer(data.rSrc)), true);
  // 0x20: pointer
  if (data?.rDest !== undefined) view.setBigUint64(32, data.rDest === null ? 0n : BigInt(util.toPointer(data.rDest)), true);
  // 0x28: f32
  if (data?.fAlpha !== undefined) view.setFloat32(40, Number(data.fAlpha), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.clrSrcKey !== undefined) view.setBigUint64(48, data.clrSrcKey === null ? 0n : BigInt(util.toPointer(data.clrSrcKey)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDCOLORKEY (size: 8)
 */
export interface DDCOLORKEY {
  /** u32 */
  dwColorSpaceLowValue: number;
  /** u32 */
  dwColorSpaceHighValue: number;
}

export const sizeofDDCOLORKEY = 8;

export function allocDDCOLORKEY(data?: Partial<DDCOLORKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDDCOLORKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwColorSpaceLowValue !== undefined) view.setUint32(0, Number(data.dwColorSpaceLowValue), true);
  // 0x04: u32
  if (data?.dwColorSpaceHighValue !== undefined) view.setUint32(4, Number(data.dwColorSpaceHighValue), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMRVIDEOSTREAMINFO (size: 40)
 */
export interface VMRVIDEOSTREAMINFO {
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface7 */
  pddsVideoSurface: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwStrmID: number;
  /** f32 */
  fAlpha: number;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddClrKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.NORMALIZEDRECT */
  rNormal: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMRVIDEOSTREAMINFO = 40;

export function allocVMRVIDEOSTREAMINFO(data?: Partial<VMRVIDEOSTREAMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRVIDEOSTREAMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pddsVideoSurface !== undefined) view.setBigUint64(0, data.pddsVideoSurface === null ? 0n : BigInt(util.toPointer(data.pddsVideoSurface)), true);
  // 0x08: u32
  if (data?.dwWidth !== undefined) view.setUint32(8, Number(data.dwWidth), true);
  // 0x0c: u32
  if (data?.dwHeight !== undefined) view.setUint32(12, Number(data.dwHeight), true);
  // 0x10: u32
  if (data?.dwStrmID !== undefined) view.setUint32(16, Number(data.dwStrmID), true);
  // 0x14: f32
  if (data?.fAlpha !== undefined) view.setFloat32(20, Number(data.fAlpha), true);
  // 0x18: pointer
  if (data?.ddClrKey !== undefined) view.setBigUint64(24, data.ddClrKey === null ? 0n : BigInt(util.toPointer(data.ddClrKey)), true);
  // 0x20: pointer
  if (data?.rNormal !== undefined) view.setBigUint64(32, data.rNormal === null ? 0n : BigInt(util.toPointer(data.rNormal)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_ATR (size: 16)
 */
export interface DVD_ATR {
  /** u32 */
  ulCAT: number;
  /** array */
  pbATRI: Deno.PointerValue | null;
}

export const sizeofDVD_ATR = 16;

export function allocDVD_ATR(data?: Partial<DVD_ATR>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_ATR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCAT !== undefined) view.setUint32(0, Number(data.ulCAT), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbATRI !== undefined) view.setBigUint64(8, data.pbATRI === null ? 0n : BigInt(util.toPointer(data.pbATRI)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_TIMECODE (size: 8)
 */
export interface DVD_TIMECODE {
  /** u32 */
  _bitfield: number;
}

export const sizeofDVD_TIMECODE = 8;

export function allocDVD_TIMECODE(data?: Partial<DVD_TIMECODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_TIMECODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_HMSF_TIMECODE (size: 8)
 */
export interface DVD_HMSF_TIMECODE {
  /** u8 */
  bHours: number;
  /** u8 */
  bMinutes: number;
  /** u8 */
  bSeconds: number;
  /** u8 */
  bFrames: number;
}

export const sizeofDVD_HMSF_TIMECODE = 8;

export function allocDVD_HMSF_TIMECODE(data?: Partial<DVD_HMSF_TIMECODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_HMSF_TIMECODE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bHours !== undefined) view.setUint8(0, Number(data.bHours));
  // 0x01: u8
  if (data?.bMinutes !== undefined) view.setUint8(1, Number(data.bMinutes));
  // 0x02: u8
  if (data?.bSeconds !== undefined) view.setUint8(2, Number(data.bSeconds));
  // 0x03: u8
  if (data?.bFrames !== undefined) view.setUint8(3, Number(data.bFrames));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_PLAYBACK_LOCATION2 (size: 24)
 */
export interface DVD_PLAYBACK_LOCATION2 {
  /** u32 */
  TitleNum: number;
  /** u32 */
  ChapterNum: number;
  /** Windows.Win32.Media.DirectShow.DVD_HMSF_TIMECODE */
  TimeCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TimeCodeFlags: number;
}

export const sizeofDVD_PLAYBACK_LOCATION2 = 24;

export function allocDVD_PLAYBACK_LOCATION2(data?: Partial<DVD_PLAYBACK_LOCATION2>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_PLAYBACK_LOCATION2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TitleNum !== undefined) view.setUint32(0, Number(data.TitleNum), true);
  // 0x04: u32
  if (data?.ChapterNum !== undefined) view.setUint32(4, Number(data.ChapterNum), true);
  // 0x08: pointer
  if (data?.TimeCode !== undefined) view.setBigUint64(8, data.TimeCode === null ? 0n : BigInt(util.toPointer(data.TimeCode)), true);
  // 0x10: u32
  if (data?.TimeCodeFlags !== undefined) view.setUint32(16, Number(data.TimeCodeFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_PLAYBACK_LOCATION (size: 16)
 */
export interface DVD_PLAYBACK_LOCATION {
  /** u32 */
  TitleNum: number;
  /** u32 */
  ChapterNum: number;
  /** u32 */
  TimeCode: number;
}

export const sizeofDVD_PLAYBACK_LOCATION = 16;

export function allocDVD_PLAYBACK_LOCATION(data?: Partial<DVD_PLAYBACK_LOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_PLAYBACK_LOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TitleNum !== undefined) view.setUint32(0, Number(data.TitleNum), true);
  // 0x04: u32
  if (data?.ChapterNum !== undefined) view.setUint32(4, Number(data.ChapterNum), true);
  // 0x08: u32
  if (data?.TimeCode !== undefined) view.setUint32(8, Number(data.TimeCode), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_AudioAttributes (size: 40)
 */
export interface DVD_AudioAttributes {
  /** Windows.Win32.Media.DirectShow.DVD_AUDIO_APPMODE */
  AppMode: DVD_AUDIO_APPMODE;
  /** u8 */
  AppModeData: number;
  /** Windows.Win32.Media.DirectShow.DVD_AUDIO_FORMAT */
  AudioFormat: DVD_AUDIO_FORMAT;
  /** u32 */
  Language: number;
  /** Windows.Win32.Media.DirectShow.DVD_AUDIO_LANG_EXT */
  LanguageExtension: DVD_AUDIO_LANG_EXT;
  /** Windows.Win32.Foundation.BOOL */
  fHasMultichannelInfo: boolean;
  /** u32 */
  dwFrequency: number;
  /** u8 */
  bQuantization: number;
  /** u8 */
  bNumberOfChannels: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofDVD_AudioAttributes = 40;

export function allocDVD_AudioAttributes(data?: Partial<DVD_AudioAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_AudioAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AppMode !== undefined) view.setInt32(0, Number(data.AppMode), true);
  // 0x04: u8
  if (data?.AppModeData !== undefined) view.setUint8(4, Number(data.AppModeData));
  // 0x05: i32
  if (data?.AudioFormat !== undefined) view.setInt32(5, Number(data.AudioFormat), true);
  // 0x09: u32
  if (data?.Language !== undefined) view.setUint32(9, Number(data.Language), true);
  // 0x0d: i32
  if (data?.LanguageExtension !== undefined) view.setInt32(13, Number(data.LanguageExtension), true);
  // 0x11: i32
  if (data?.fHasMultichannelInfo !== undefined) view.setInt32(17, Number(data.fHasMultichannelInfo), true);
  // 0x15: u32
  if (data?.dwFrequency !== undefined) view.setUint32(21, Number(data.dwFrequency), true);
  // 0x19: u8
  if (data?.bQuantization !== undefined) view.setUint8(25, Number(data.bQuantization));
  // 0x1a: u8
  if (data?.bNumberOfChannels !== undefined) view.setUint8(26, Number(data.bNumberOfChannels));
  // 0x1b: pad5
  // 0x20: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(32, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_MUA_MixingInfo (size: 24)
 */
export interface DVD_MUA_MixingInfo {
  /** Windows.Win32.Foundation.BOOL */
  fMixTo0: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fMixTo1: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fMix0InPhase: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fMix1InPhase: boolean;
  /** u32 */
  dwSpeakerPosition: number;
}

export const sizeofDVD_MUA_MixingInfo = 24;

export function allocDVD_MUA_MixingInfo(data?: Partial<DVD_MUA_MixingInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_MUA_MixingInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fMixTo0 !== undefined) view.setInt32(0, Number(data.fMixTo0), true);
  // 0x04: i32
  if (data?.fMixTo1 !== undefined) view.setInt32(4, Number(data.fMixTo1), true);
  // 0x08: i32
  if (data?.fMix0InPhase !== undefined) view.setInt32(8, Number(data.fMix0InPhase), true);
  // 0x0c: i32
  if (data?.fMix1InPhase !== undefined) view.setInt32(12, Number(data.fMix1InPhase), true);
  // 0x10: u32
  if (data?.dwSpeakerPosition !== undefined) view.setUint32(16, Number(data.dwSpeakerPosition), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_MUA_Coeff (size: 16)
 */
export interface DVD_MUA_Coeff {
  /** f64 */
  log2_alpha: number;
  /** f64 */
  log2_beta: number;
}

export const sizeofDVD_MUA_Coeff = 16;

export function allocDVD_MUA_Coeff(data?: Partial<DVD_MUA_Coeff>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_MUA_Coeff);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.log2_alpha !== undefined) view.setFloat64(0, Number(data.log2_alpha), true);
  // 0x08: f64
  if (data?.log2_beta !== undefined) view.setFloat64(8, Number(data.log2_beta), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_MultichannelAudioAttributes (size: 16)
 */
export interface DVD_MultichannelAudioAttributes {
  /** array */
  Info: Deno.PointerValue | null;
  /** array */
  Coeff: Deno.PointerValue | null;
}

export const sizeofDVD_MultichannelAudioAttributes = 16;

export function allocDVD_MultichannelAudioAttributes(data?: Partial<DVD_MultichannelAudioAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_MultichannelAudioAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Info !== undefined) view.setBigUint64(0, data.Info === null ? 0n : BigInt(util.toPointer(data.Info)), true);
  // 0x08: pointer
  if (data?.Coeff !== undefined) view.setBigUint64(8, data.Coeff === null ? 0n : BigInt(util.toPointer(data.Coeff)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_KaraokeAttributes (size: 24)
 */
export interface DVD_KaraokeAttributes {
  /** u8 */
  bVersion: number;
  /** Windows.Win32.Foundation.BOOL */
  fMasterOfCeremoniesInGuideVocal1: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDuet: boolean;
  /** Windows.Win32.Media.DirectShow.DVD_KARAOKE_ASSIGNMENT */
  ChannelAssignment: DVD_KARAOKE_ASSIGNMENT;
  /** array */
  wChannelContents: Deno.PointerValue | null;
}

export const sizeofDVD_KaraokeAttributes = 24;

export function allocDVD_KaraokeAttributes(data?: Partial<DVD_KaraokeAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_KaraokeAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bVersion !== undefined) view.setUint8(0, Number(data.bVersion));
  // 0x01: i32
  if (data?.fMasterOfCeremoniesInGuideVocal1 !== undefined) view.setInt32(1, Number(data.fMasterOfCeremoniesInGuideVocal1), true);
  // 0x05: i32
  if (data?.fDuet !== undefined) view.setInt32(5, Number(data.fDuet), true);
  // 0x09: i32
  if (data?.ChannelAssignment !== undefined) view.setInt32(9, Number(data.ChannelAssignment), true);
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.wChannelContents !== undefined) view.setBigUint64(16, data.wChannelContents === null ? 0n : BigInt(util.toPointer(data.wChannelContents)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_VideoAttributes (size: 56)
 */
export interface DVD_VideoAttributes {
  /** Windows.Win32.Foundation.BOOL */
  fPanscanPermitted: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fLetterboxPermitted: boolean;
  /** u32 */
  ulAspectX: number;
  /** u32 */
  ulAspectY: number;
  /** u32 */
  ulFrameRate: number;
  /** u32 */
  ulFrameHeight: number;
  /** Windows.Win32.Media.DirectShow.DVD_VIDEO_COMPRESSION */
  Compression: DVD_VIDEO_COMPRESSION;
  /** Windows.Win32.Foundation.BOOL */
  fLine21Field1InGOP: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fLine21Field2InGOP: boolean;
  /** u32 */
  ulSourceResolutionX: number;
  /** u32 */
  ulSourceResolutionY: number;
  /** Windows.Win32.Foundation.BOOL */
  fIsSourceLetterboxed: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fIsFilmMode: boolean;
}

export const sizeofDVD_VideoAttributes = 56;

export function allocDVD_VideoAttributes(data?: Partial<DVD_VideoAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_VideoAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fPanscanPermitted !== undefined) view.setInt32(0, Number(data.fPanscanPermitted), true);
  // 0x04: i32
  if (data?.fLetterboxPermitted !== undefined) view.setInt32(4, Number(data.fLetterboxPermitted), true);
  // 0x08: u32
  if (data?.ulAspectX !== undefined) view.setUint32(8, Number(data.ulAspectX), true);
  // 0x0c: u32
  if (data?.ulAspectY !== undefined) view.setUint32(12, Number(data.ulAspectY), true);
  // 0x10: u32
  if (data?.ulFrameRate !== undefined) view.setUint32(16, Number(data.ulFrameRate), true);
  // 0x14: u32
  if (data?.ulFrameHeight !== undefined) view.setUint32(20, Number(data.ulFrameHeight), true);
  // 0x18: i32
  if (data?.Compression !== undefined) view.setInt32(24, Number(data.Compression), true);
  // 0x1c: i32
  if (data?.fLine21Field1InGOP !== undefined) view.setInt32(28, Number(data.fLine21Field1InGOP), true);
  // 0x20: i32
  if (data?.fLine21Field2InGOP !== undefined) view.setInt32(32, Number(data.fLine21Field2InGOP), true);
  // 0x24: u32
  if (data?.ulSourceResolutionX !== undefined) view.setUint32(36, Number(data.ulSourceResolutionX), true);
  // 0x28: u32
  if (data?.ulSourceResolutionY !== undefined) view.setUint32(40, Number(data.ulSourceResolutionY), true);
  // 0x2c: i32
  if (data?.fIsSourceLetterboxed !== undefined) view.setInt32(44, Number(data.fIsSourceLetterboxed), true);
  // 0x30: i32
  if (data?.fIsFilmMode !== undefined) view.setInt32(48, Number(data.fIsFilmMode), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_SubpictureAttributes (size: 16)
 */
export interface DVD_SubpictureAttributes {
  /** Windows.Win32.Media.DirectShow.DVD_SUBPICTURE_TYPE */
  Type: DVD_SUBPICTURE_TYPE;
  /** Windows.Win32.Media.DirectShow.DVD_SUBPICTURE_CODING */
  CodingMode: DVD_SUBPICTURE_CODING;
  /** u32 */
  Language: number;
  /** Windows.Win32.Media.DirectShow.DVD_SUBPICTURE_LANG_EXT */
  LanguageExtension: DVD_SUBPICTURE_LANG_EXT;
}

export const sizeofDVD_SubpictureAttributes = 16;

export function allocDVD_SubpictureAttributes(data?: Partial<DVD_SubpictureAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_SubpictureAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.CodingMode !== undefined) view.setInt32(4, Number(data.CodingMode), true);
  // 0x08: u32
  if (data?.Language !== undefined) view.setUint32(8, Number(data.Language), true);
  // 0x0c: i32
  if (data?.LanguageExtension !== undefined) view.setInt32(12, Number(data.LanguageExtension), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_TitleAttributes (size: 56)
 */
export interface DVD_TitleAttributes {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.DVD_VideoAttributes */
  VideoAttributes: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulNumberOfAudioStreams: number;
  /** array */
  AudioAttributes: Deno.PointerValue | null;
  /** array */
  MultichannelAudioAttributes: Deno.PointerValue | null;
  /** u32 */
  ulNumberOfSubpictureStreams: number;
  /** array */
  SubpictureAttributes: Deno.PointerValue | null;
}

export const sizeofDVD_TitleAttributes = 56;

export function allocDVD_TitleAttributes(data?: Partial<DVD_TitleAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_TitleAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.VideoAttributes !== undefined) view.setBigUint64(8, data.VideoAttributes === null ? 0n : BigInt(util.toPointer(data.VideoAttributes)), true);
  // 0x10: u32
  if (data?.ulNumberOfAudioStreams !== undefined) view.setUint32(16, Number(data.ulNumberOfAudioStreams), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AudioAttributes !== undefined) view.setBigUint64(24, data.AudioAttributes === null ? 0n : BigInt(util.toPointer(data.AudioAttributes)), true);
  // 0x20: pointer
  if (data?.MultichannelAudioAttributes !== undefined) view.setBigUint64(32, data.MultichannelAudioAttributes === null ? 0n : BigInt(util.toPointer(data.MultichannelAudioAttributes)), true);
  // 0x28: u32
  if (data?.ulNumberOfSubpictureStreams !== undefined) view.setUint32(40, Number(data.ulNumberOfSubpictureStreams), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.SubpictureAttributes !== undefined) view.setBigUint64(48, data.SubpictureAttributes === null ? 0n : BigInt(util.toPointer(data.SubpictureAttributes)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_MenuAttributes (size: 48)
 */
export interface DVD_MenuAttributes {
  /** array */
  fCompatibleRegion: Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.DVD_VideoAttributes */
  VideoAttributes: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fAudioPresent: boolean;
  /** Windows.Win32.Media.DirectShow.DVD_AudioAttributes */
  AudioAttributes: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSubpicturePresent: boolean;
  /** Windows.Win32.Media.DirectShow.DVD_SubpictureAttributes */
  SubpictureAttributes: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDVD_MenuAttributes = 48;

export function allocDVD_MenuAttributes(data?: Partial<DVD_MenuAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_MenuAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fCompatibleRegion !== undefined) view.setBigUint64(0, data.fCompatibleRegion === null ? 0n : BigInt(util.toPointer(data.fCompatibleRegion)), true);
  // 0x08: pointer
  if (data?.VideoAttributes !== undefined) view.setBigUint64(8, data.VideoAttributes === null ? 0n : BigInt(util.toPointer(data.VideoAttributes)), true);
  // 0x10: i32
  if (data?.fAudioPresent !== undefined) view.setInt32(16, Number(data.fAudioPresent), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AudioAttributes !== undefined) view.setBigUint64(24, data.AudioAttributes === null ? 0n : BigInt(util.toPointer(data.AudioAttributes)), true);
  // 0x20: i32
  if (data?.fSubpicturePresent !== undefined) view.setInt32(32, Number(data.fSubpicturePresent), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.SubpictureAttributes !== undefined) view.setBigUint64(40, data.SubpictureAttributes === null ? 0n : BigInt(util.toPointer(data.SubpictureAttributes)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_DECODER_CAPS (size: 72)
 */
export interface DVD_DECODER_CAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwAudioCaps: number;
  /** f64 */
  dFwdMaxRateVideo: number;
  /** f64 */
  dFwdMaxRateAudio: number;
  /** f64 */
  dFwdMaxRateSP: number;
  /** f64 */
  dBwdMaxRateVideo: number;
  /** f64 */
  dBwdMaxRateAudio: number;
  /** f64 */
  dBwdMaxRateSP: number;
  /** u32 */
  dwRes1: number;
  /** u32 */
  dwRes2: number;
  /** u32 */
  dwRes3: number;
  /** u32 */
  dwRes4: number;
}

export const sizeofDVD_DECODER_CAPS = 72;

export function allocDVD_DECODER_CAPS(data?: Partial<DVD_DECODER_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_DECODER_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwAudioCaps !== undefined) view.setUint32(4, Number(data.dwAudioCaps), true);
  // 0x08: f64
  if (data?.dFwdMaxRateVideo !== undefined) view.setFloat64(8, Number(data.dFwdMaxRateVideo), true);
  // 0x10: f64
  if (data?.dFwdMaxRateAudio !== undefined) view.setFloat64(16, Number(data.dFwdMaxRateAudio), true);
  // 0x18: f64
  if (data?.dFwdMaxRateSP !== undefined) view.setFloat64(24, Number(data.dFwdMaxRateSP), true);
  // 0x20: f64
  if (data?.dBwdMaxRateVideo !== undefined) view.setFloat64(32, Number(data.dBwdMaxRateVideo), true);
  // 0x28: f64
  if (data?.dBwdMaxRateAudio !== undefined) view.setFloat64(40, Number(data.dBwdMaxRateAudio), true);
  // 0x30: f64
  if (data?.dBwdMaxRateSP !== undefined) view.setFloat64(48, Number(data.dBwdMaxRateSP), true);
  // 0x38: u32
  if (data?.dwRes1 !== undefined) view.setUint32(56, Number(data.dwRes1), true);
  // 0x3c: u32
  if (data?.dwRes2 !== undefined) view.setUint32(60, Number(data.dwRes2), true);
  // 0x40: u32
  if (data?.dwRes3 !== undefined) view.setUint32(64, Number(data.dwRes3), true);
  // 0x44: u32
  if (data?.dwRes4 !== undefined) view.setUint32(68, Number(data.dwRes4), true);
  return buf;
}

export type HRESULT = number;

/**
 * Windows.Win32.Media.DirectShow.AM_DVD_RENDERSTATUS (size: 40)
 */
export interface AM_DVD_RENDERSTATUS {
  /** Windows.Win32.Foundation.HRESULT */
  hrVPEStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bDvdVolInvalid: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bDvdVolUnknown: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bNoLine21In: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bNoLine21Out: boolean;
  /** i32 */
  iNumStreams: number;
  /** i32 */
  iNumStreamsFailed: number;
  /** u32 */
  dwFailedStreamsFlag: number;
}

export const sizeofAM_DVD_RENDERSTATUS = 40;

export function allocAM_DVD_RENDERSTATUS(data?: Partial<AM_DVD_RENDERSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVD_RENDERSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hrVPEStatus !== undefined) view.setBigUint64(0, data.hrVPEStatus === null ? 0n : BigInt(util.toPointer(data.hrVPEStatus)), true);
  // 0x08: i32
  if (data?.bDvdVolInvalid !== undefined) view.setInt32(8, Number(data.bDvdVolInvalid), true);
  // 0x0c: i32
  if (data?.bDvdVolUnknown !== undefined) view.setInt32(12, Number(data.bDvdVolUnknown), true);
  // 0x10: i32
  if (data?.bNoLine21In !== undefined) view.setInt32(16, Number(data.bNoLine21In), true);
  // 0x14: i32
  if (data?.bNoLine21Out !== undefined) view.setInt32(20, Number(data.bNoLine21Out), true);
  // 0x18: i32
  if (data?.iNumStreams !== undefined) view.setInt32(24, Number(data.iNumStreams), true);
  // 0x1c: i32
  if (data?.iNumStreamsFailed !== undefined) view.setInt32(28, Number(data.iNumStreamsFailed), true);
  // 0x20: u32
  if (data?.dwFailedStreamsFlag !== undefined) view.setUint32(32, Number(data.dwFailedStreamsFlag), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TEMPLATE_CONNECTION (size: 16)
 */
export interface BDA_TEMPLATE_CONNECTION {
  /** u32 */
  FromNodeType: number;
  /** u32 */
  FromNodePinType: number;
  /** u32 */
  ToNodeType: number;
  /** u32 */
  ToNodePinType: number;
}

export const sizeofBDA_TEMPLATE_CONNECTION = 16;

export function allocBDA_TEMPLATE_CONNECTION(data?: Partial<BDA_TEMPLATE_CONNECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TEMPLATE_CONNECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FromNodeType !== undefined) view.setUint32(0, Number(data.FromNodeType), true);
  // 0x04: u32
  if (data?.FromNodePinType !== undefined) view.setUint32(4, Number(data.FromNodePinType), true);
  // 0x08: u32
  if (data?.ToNodeType !== undefined) view.setUint32(8, Number(data.ToNodeType), true);
  // 0x0c: u32
  if (data?.ToNodePinType !== undefined) view.setUint32(12, Number(data.ToNodePinType), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TEMPLATE_PIN_JOINT (size: 8)
 */
export interface BDA_TEMPLATE_PIN_JOINT {
  /** u32 */
  uliTemplateConnection: number;
  /** u32 */
  ulcInstancesMax: number;
}

export const sizeofBDA_TEMPLATE_PIN_JOINT = 8;

export function allocBDA_TEMPLATE_PIN_JOINT(data?: Partial<BDA_TEMPLATE_PIN_JOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TEMPLATE_PIN_JOINT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uliTemplateConnection !== undefined) view.setUint32(0, Number(data.uliTemplateConnection), true);
  // 0x04: u32
  if (data?.ulcInstancesMax !== undefined) view.setUint32(4, Number(data.ulcInstancesMax), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KS_BDA_FRAME_INFO (size: 24)
 */
export interface KS_BDA_FRAME_INFO {
  /** u32 */
  ExtendedHeaderSize: number;
  /** u32 */
  dwFrameFlags: number;
  /** u32 */
  ulEvent: number;
  /** u32 */
  ulChannelNumber: number;
  /** u32 */
  ulSubchannelNumber: number;
  /** u32 */
  ulReason: number;
}

export const sizeofKS_BDA_FRAME_INFO = 24;

export function allocKS_BDA_FRAME_INFO(data?: Partial<KS_BDA_FRAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_BDA_FRAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtendedHeaderSize !== undefined) view.setUint32(0, Number(data.ExtendedHeaderSize), true);
  // 0x04: u32
  if (data?.dwFrameFlags !== undefined) view.setUint32(4, Number(data.dwFrameFlags), true);
  // 0x08: u32
  if (data?.ulEvent !== undefined) view.setUint32(8, Number(data.ulEvent), true);
  // 0x0c: u32
  if (data?.ulChannelNumber !== undefined) view.setUint32(12, Number(data.ulChannelNumber), true);
  // 0x10: u32
  if (data?.ulSubchannelNumber !== undefined) view.setUint32(16, Number(data.ulSubchannelNumber), true);
  // 0x14: u32
  if (data?.ulReason !== undefined) view.setUint32(20, Number(data.ulReason), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_ETHERNET_ADDRESS (size: 8)
 */
export interface BDA_ETHERNET_ADDRESS {
  /** array */
  rgbAddress: Deno.PointerValue | null;
}

export const sizeofBDA_ETHERNET_ADDRESS = 8;

export function allocBDA_ETHERNET_ADDRESS(data?: Partial<BDA_ETHERNET_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_ETHERNET_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgbAddress !== undefined) view.setBigUint64(0, data.rgbAddress === null ? 0n : BigInt(util.toPointer(data.rgbAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_ETHERNET_ADDRESS_LIST (size: 16)
 */
export interface BDA_ETHERNET_ADDRESS_LIST {
  /** u32 */
  ulcAddresses: number;
  /** array */
  rgAddressl: Deno.PointerValue | null;
}

export const sizeofBDA_ETHERNET_ADDRESS_LIST = 16;

export function allocBDA_ETHERNET_ADDRESS_LIST(data?: Partial<BDA_ETHERNET_ADDRESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_ETHERNET_ADDRESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulcAddresses !== undefined) view.setUint32(0, Number(data.ulcAddresses), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgAddressl !== undefined) view.setBigUint64(8, data.rgAddressl === null ? 0n : BigInt(util.toPointer(data.rgAddressl)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_IPv4_ADDRESS (size: 8)
 */
export interface BDA_IPv4_ADDRESS {
  /** array */
  rgbAddress: Deno.PointerValue | null;
}

export const sizeofBDA_IPv4_ADDRESS = 8;

export function allocBDA_IPv4_ADDRESS(data?: Partial<BDA_IPv4_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_IPv4_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgbAddress !== undefined) view.setBigUint64(0, data.rgbAddress === null ? 0n : BigInt(util.toPointer(data.rgbAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_IPv4_ADDRESS_LIST (size: 16)
 */
export interface BDA_IPv4_ADDRESS_LIST {
  /** u32 */
  ulcAddresses: number;
  /** array */
  rgAddressl: Deno.PointerValue | null;
}

export const sizeofBDA_IPv4_ADDRESS_LIST = 16;

export function allocBDA_IPv4_ADDRESS_LIST(data?: Partial<BDA_IPv4_ADDRESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_IPv4_ADDRESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulcAddresses !== undefined) view.setUint32(0, Number(data.ulcAddresses), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgAddressl !== undefined) view.setBigUint64(8, data.rgAddressl === null ? 0n : BigInt(util.toPointer(data.rgAddressl)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_IPv6_ADDRESS (size: 8)
 */
export interface BDA_IPv6_ADDRESS {
  /** array */
  rgbAddress: Deno.PointerValue | null;
}

export const sizeofBDA_IPv6_ADDRESS = 8;

export function allocBDA_IPv6_ADDRESS(data?: Partial<BDA_IPv6_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_IPv6_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgbAddress !== undefined) view.setBigUint64(0, data.rgbAddress === null ? 0n : BigInt(util.toPointer(data.rgbAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_IPv6_ADDRESS_LIST (size: 16)
 */
export interface BDA_IPv6_ADDRESS_LIST {
  /** u32 */
  ulcAddresses: number;
  /** array */
  rgAddressl: Deno.PointerValue | null;
}

export const sizeofBDA_IPv6_ADDRESS_LIST = 16;

export function allocBDA_IPv6_ADDRESS_LIST(data?: Partial<BDA_IPv6_ADDRESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_IPv6_ADDRESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulcAddresses !== undefined) view.setUint32(0, Number(data.ulcAddresses), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgAddressl !== undefined) view.setBigUint64(8, data.rgAddressl === null ? 0n : BigInt(util.toPointer(data.rgAddressl)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDANODE_DESCRIPTOR (size: 24)
 */
export interface BDANODE_DESCRIPTOR {
  /** u32 */
  ulBdaNodeType: number;
  /** System.Guid */
  guidFunction: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBDANODE_DESCRIPTOR = 24;

export function allocBDANODE_DESCRIPTOR(data?: Partial<BDANODE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofBDANODE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulBdaNodeType !== undefined) view.setUint32(0, Number(data.ulBdaNodeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidFunction !== undefined) view.setBigUint64(8, data.guidFunction === null ? 0n : BigInt(util.toPointer(data.guidFunction)), true);
  // 0x10: pointer
  if (data?.guidName !== undefined) view.setBigUint64(16, data.guidName === null ? 0n : BigInt(util.toPointer(data.guidName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TABLE_SECTION (size: 24)
 */
export interface BDA_TABLE_SECTION {
  /** u32 */
  ulPrimarySectionId: number;
  /** u32 */
  ulSecondarySectionId: number;
  /** u32 */
  ulcbSectionLength: number;
  /** array */
  argbSectionData: Deno.PointerValue | null;
}

export const sizeofBDA_TABLE_SECTION = 24;

export function allocBDA_TABLE_SECTION(data?: Partial<BDA_TABLE_SECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TABLE_SECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulPrimarySectionId !== undefined) view.setUint32(0, Number(data.ulPrimarySectionId), true);
  // 0x04: u32
  if (data?.ulSecondarySectionId !== undefined) view.setUint32(4, Number(data.ulSecondarySectionId), true);
  // 0x08: u32
  if (data?.ulcbSectionLength !== undefined) view.setUint32(8, Number(data.ulcbSectionLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbSectionData !== undefined) view.setBigUint64(16, data.argbSectionData === null ? 0n : BigInt(util.toPointer(data.argbSectionData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_DISEQC_SEND (size: 16)
 */
export interface BDA_DISEQC_SEND {
  /** u32 */
  ulRequestId: number;
  /** u32 */
  ulPacketLength: number;
  /** array */
  argbPacketData: Deno.PointerValue | null;
}

export const sizeofBDA_DISEQC_SEND = 16;

export function allocBDA_DISEQC_SEND(data?: Partial<BDA_DISEQC_SEND>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_DISEQC_SEND);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulRequestId !== undefined) view.setUint32(0, Number(data.ulRequestId), true);
  // 0x04: u32
  if (data?.ulPacketLength !== undefined) view.setUint32(4, Number(data.ulPacketLength), true);
  // 0x08: pointer
  if (data?.argbPacketData !== undefined) view.setBigUint64(8, data.argbPacketData === null ? 0n : BigInt(util.toPointer(data.argbPacketData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_DISEQC_RESPONSE (size: 16)
 */
export interface BDA_DISEQC_RESPONSE {
  /** u32 */
  ulRequestId: number;
  /** u32 */
  ulPacketLength: number;
  /** array */
  argbPacketData: Deno.PointerValue | null;
}

export const sizeofBDA_DISEQC_RESPONSE = 16;

export function allocBDA_DISEQC_RESPONSE(data?: Partial<BDA_DISEQC_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_DISEQC_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulRequestId !== undefined) view.setUint32(0, Number(data.ulRequestId), true);
  // 0x04: u32
  if (data?.ulPacketLength !== undefined) view.setUint32(4, Number(data.ulPacketLength), true);
  // 0x08: pointer
  if (data?.argbPacketData !== undefined) view.setBigUint64(8, data.argbPacketData === null ? 0n : BigInt(util.toPointer(data.argbPacketData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.PID_MAP (size: 8)
 */
export interface PID_MAP {
  /** u32 */
  ulPID: number;
  /** Windows.Win32.Media.DirectShow.MEDIA_SAMPLE_CONTENT */
  MediaSampleContent: MEDIA_SAMPLE_CONTENT;
}

export const sizeofPID_MAP = 8;

export function allocPID_MAP(data?: Partial<PID_MAP>): Uint8Array {
  const buf = new Uint8Array(sizeofPID_MAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulPID !== undefined) view.setUint32(0, Number(data.ulPID), true);
  // 0x04: i32
  if (data?.MediaSampleContent !== undefined) view.setInt32(4, Number(data.MediaSampleContent), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_PID_MAP (size: 16)
 */
export interface BDA_PID_MAP {
  /** Windows.Win32.Media.DirectShow.MEDIA_SAMPLE_CONTENT */
  MediaSampleContent: MEDIA_SAMPLE_CONTENT;
  /** u32 */
  ulcPIDs: number;
  /** array */
  aulPIDs: Deno.PointerValue | null;
}

export const sizeofBDA_PID_MAP = 16;

export function allocBDA_PID_MAP(data?: Partial<BDA_PID_MAP>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_PID_MAP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MediaSampleContent !== undefined) view.setInt32(0, Number(data.MediaSampleContent), true);
  // 0x04: u32
  if (data?.ulcPIDs !== undefined) view.setUint32(4, Number(data.ulcPIDs), true);
  // 0x08: pointer
  if (data?.aulPIDs !== undefined) view.setBigUint64(8, data.aulPIDs === null ? 0n : BigInt(util.toPointer(data.aulPIDs)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_PID_UNMAP (size: 16)
 */
export interface BDA_PID_UNMAP {
  /** u32 */
  ulcPIDs: number;
  /** array */
  aulPIDs: Deno.PointerValue | null;
}

export const sizeofBDA_PID_UNMAP = 16;

export function allocBDA_PID_UNMAP(data?: Partial<BDA_PID_UNMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_PID_UNMAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulcPIDs !== undefined) view.setUint32(0, Number(data.ulcPIDs), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aulPIDs !== undefined) view.setBigUint64(8, data.aulPIDs === null ? 0n : BigInt(util.toPointer(data.aulPIDs)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CA_MODULE_UI (size: 16)
 */
export interface BDA_CA_MODULE_UI {
  /** u32 */
  ulFormat: number;
  /** u32 */
  ulbcDesc: number;
  /** array */
  ulDesc: Deno.PointerValue | null;
}

export const sizeofBDA_CA_MODULE_UI = 16;

export function allocBDA_CA_MODULE_UI(data?: Partial<BDA_CA_MODULE_UI>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CA_MODULE_UI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFormat !== undefined) view.setUint32(0, Number(data.ulFormat), true);
  // 0x04: u32
  if (data?.ulbcDesc !== undefined) view.setUint32(4, Number(data.ulbcDesc), true);
  // 0x08: pointer
  if (data?.ulDesc !== undefined) view.setBigUint64(8, data.ulDesc === null ? 0n : BigInt(util.toPointer(data.ulDesc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_PROGRAM_PID_LIST (size: 16)
 */
export interface BDA_PROGRAM_PID_LIST {
  /** u32 */
  ulProgramNumber: number;
  /** u32 */
  ulcPIDs: number;
  /** array */
  ulPID: Deno.PointerValue | null;
}

export const sizeofBDA_PROGRAM_PID_LIST = 16;

export function allocBDA_PROGRAM_PID_LIST(data?: Partial<BDA_PROGRAM_PID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_PROGRAM_PID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulProgramNumber !== undefined) view.setUint32(0, Number(data.ulProgramNumber), true);
  // 0x04: u32
  if (data?.ulcPIDs !== undefined) view.setUint32(4, Number(data.ulcPIDs), true);
  // 0x08: pointer
  if (data?.ulPID !== undefined) view.setBigUint64(8, data.ulPID === null ? 0n : BigInt(util.toPointer(data.ulPID)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_DRM_DRMSTATUS (size: 32)
 */
export interface BDA_DRM_DRMSTATUS {
  /** i32 */
  lResult: number;
  /** System.Guid */
  DRMuuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDrmUuidListStringSize: number;
  /** array */
  argbDrmUuidListString: Deno.PointerValue | null;
}

export const sizeofBDA_DRM_DRMSTATUS = 32;

export function allocBDA_DRM_DRMSTATUS(data?: Partial<BDA_DRM_DRMSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_DRM_DRMSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DRMuuid !== undefined) view.setBigUint64(8, data.DRMuuid === null ? 0n : BigInt(util.toPointer(data.DRMuuid)), true);
  // 0x10: u32
  if (data?.ulDrmUuidListStringSize !== undefined) view.setUint32(16, Number(data.ulDrmUuidListStringSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.argbDrmUuidListString !== undefined) view.setBigUint64(24, data.argbDrmUuidListString === null ? 0n : BigInt(util.toPointer(data.argbDrmUuidListString)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_WMDRM_STATUS (size: 48)
 */
export interface BDA_WMDRM_STATUS {
  /** i32 */
  lResult: number;
  /** u32 */
  ulMaxCaptureTokenSize: number;
  /** u32 */
  uMaxStreamingPid: number;
  /** u32 */
  ulMaxLicense: number;
  /** u32 */
  ulMinSecurityLevel: number;
  /** u32 */
  ulRevInfoSequenceNumber: number;
  /** u64 */
  ulRevInfoIssuedTime: Deno.PointerValue;
  /** u32 */
  ulRevListVersion: number;
  /** u32 */
  ulRevInfoTTL: number;
  /** u32 */
  ulState: number;
}

export const sizeofBDA_WMDRM_STATUS = 48;

export function allocBDA_WMDRM_STATUS(data?: Partial<BDA_WMDRM_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_WMDRM_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulMaxCaptureTokenSize !== undefined) view.setUint32(4, Number(data.ulMaxCaptureTokenSize), true);
  // 0x08: u32
  if (data?.uMaxStreamingPid !== undefined) view.setUint32(8, Number(data.uMaxStreamingPid), true);
  // 0x0c: u32
  if (data?.ulMaxLicense !== undefined) view.setUint32(12, Number(data.ulMaxLicense), true);
  // 0x10: u32
  if (data?.ulMinSecurityLevel !== undefined) view.setUint32(16, Number(data.ulMinSecurityLevel), true);
  // 0x14: u32
  if (data?.ulRevInfoSequenceNumber !== undefined) view.setUint32(20, Number(data.ulRevInfoSequenceNumber), true);
  // 0x18: u64
  if (data?.ulRevInfoIssuedTime !== undefined) view.setBigUint64(24, BigInt(data.ulRevInfoIssuedTime), true);
  // 0x20: u32
  if (data?.ulRevListVersion !== undefined) view.setUint32(32, Number(data.ulRevListVersion), true);
  // 0x24: u32
  if (data?.ulRevInfoTTL !== undefined) view.setUint32(36, Number(data.ulRevInfoTTL), true);
  // 0x28: u32
  if (data?.ulState !== undefined) view.setUint32(40, Number(data.ulState), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_WMDRM_KEYINFOLIST (size: 16)
 */
export interface BDA_WMDRM_KEYINFOLIST {
  /** i32 */
  lResult: number;
  /** u32 */
  ulKeyuuidBufferLen: number;
  /** array */
  argKeyuuidBuffer: Deno.PointerValue | null;
}

export const sizeofBDA_WMDRM_KEYINFOLIST = 16;

export function allocBDA_WMDRM_KEYINFOLIST(data?: Partial<BDA_WMDRM_KEYINFOLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_WMDRM_KEYINFOLIST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulKeyuuidBufferLen !== undefined) view.setUint32(4, Number(data.ulKeyuuidBufferLen), true);
  // 0x08: pointer
  if (data?.argKeyuuidBuffer !== undefined) view.setBigUint64(8, data.argKeyuuidBuffer === null ? 0n : BigInt(util.toPointer(data.argKeyuuidBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_BUFFER (size: 16)
 */
export interface BDA_BUFFER {
  /** i32 */
  lResult: number;
  /** u32 */
  ulBufferSize: number;
  /** array */
  argbBuffer: Deno.PointerValue | null;
}

export const sizeofBDA_BUFFER = 16;

export function allocBDA_BUFFER(data?: Partial<BDA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulBufferSize !== undefined) view.setUint32(4, Number(data.ulBufferSize), true);
  // 0x08: pointer
  if (data?.argbBuffer !== undefined) view.setBigUint64(8, data.argbBuffer === null ? 0n : BigInt(util.toPointer(data.argbBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_WMDRM_RENEWLICENSE (size: 24)
 */
export interface BDA_WMDRM_RENEWLICENSE {
  /** i32 */
  lResult: number;
  /** u32 */
  ulDescrambleStatus: number;
  /** u32 */
  ulXmrLicenseOutputLength: number;
  /** array */
  argbXmrLicenceOutputBuffer: Deno.PointerValue | null;
}

export const sizeofBDA_WMDRM_RENEWLICENSE = 24;

export function allocBDA_WMDRM_RENEWLICENSE(data?: Partial<BDA_WMDRM_RENEWLICENSE>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_WMDRM_RENEWLICENSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulDescrambleStatus !== undefined) view.setUint32(4, Number(data.ulDescrambleStatus), true);
  // 0x08: u32
  if (data?.ulXmrLicenseOutputLength !== undefined) view.setUint32(8, Number(data.ulXmrLicenseOutputLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbXmrLicenceOutputBuffer !== undefined) view.setBigUint64(16, data.argbXmrLicenceOutputBuffer === null ? 0n : BigInt(util.toPointer(data.argbXmrLicenceOutputBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_WMDRMTUNER_PIDPROTECTION (size: 16)
 */
export interface BDA_WMDRMTUNER_PIDPROTECTION {
  /** i32 */
  lResult: number;
  /** System.Guid */
  uuidKeyID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBDA_WMDRMTUNER_PIDPROTECTION = 16;

export function allocBDA_WMDRMTUNER_PIDPROTECTION(data?: Partial<BDA_WMDRMTUNER_PIDPROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_WMDRMTUNER_PIDPROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.uuidKeyID !== undefined) view.setBigUint64(8, data.uuidKeyID === null ? 0n : BigInt(util.toPointer(data.uuidKeyID)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_WMDRMTUNER_PURCHASEENTITLEMENT (size: 24)
 */
export interface BDA_WMDRMTUNER_PURCHASEENTITLEMENT {
  /** i32 */
  lResult: number;
  /** u32 */
  ulDescrambleStatus: number;
  /** u32 */
  ulCaptureTokenLength: number;
  /** array */
  argbCaptureTokenBuffer: Deno.PointerValue | null;
}

export const sizeofBDA_WMDRMTUNER_PURCHASEENTITLEMENT = 24;

export function allocBDA_WMDRMTUNER_PURCHASEENTITLEMENT(data?: Partial<BDA_WMDRMTUNER_PURCHASEENTITLEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_WMDRMTUNER_PURCHASEENTITLEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulDescrambleStatus !== undefined) view.setUint32(4, Number(data.ulDescrambleStatus), true);
  // 0x08: u32
  if (data?.ulCaptureTokenLength !== undefined) view.setUint32(8, Number(data.ulCaptureTokenLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbCaptureTokenBuffer !== undefined) view.setBigUint64(16, data.argbCaptureTokenBuffer === null ? 0n : BigInt(util.toPointer(data.argbCaptureTokenBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TUNER_TUNERSTATE (size: 16)
 */
export interface BDA_TUNER_TUNERSTATE {
  /** i32 */
  lResult: number;
  /** u32 */
  ulTuneLength: number;
  /** array */
  argbTuneData: Deno.PointerValue | null;
}

export const sizeofBDA_TUNER_TUNERSTATE = 16;

export function allocBDA_TUNER_TUNERSTATE(data?: Partial<BDA_TUNER_TUNERSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TUNER_TUNERSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulTuneLength !== undefined) view.setUint32(4, Number(data.ulTuneLength), true);
  // 0x08: pointer
  if (data?.argbTuneData !== undefined) view.setBigUint64(8, data.argbTuneData === null ? 0n : BigInt(util.toPointer(data.argbTuneData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TUNER_DIAGNOSTICS (size: 16)
 */
export interface BDA_TUNER_DIAGNOSTICS {
  /** i32 */
  lResult: number;
  /** u32 */
  ulSignalLevel: number;
  /** u32 */
  ulSignalLevelQuality: number;
  /** u32 */
  ulSignalNoiseRatio: number;
}

export const sizeofBDA_TUNER_DIAGNOSTICS = 16;

export function allocBDA_TUNER_DIAGNOSTICS(data?: Partial<BDA_TUNER_DIAGNOSTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TUNER_DIAGNOSTICS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulSignalLevel !== undefined) view.setUint32(4, Number(data.ulSignalLevel), true);
  // 0x08: u32
  if (data?.ulSignalLevelQuality !== undefined) view.setUint32(8, Number(data.ulSignalLevelQuality), true);
  // 0x0c: u32
  if (data?.ulSignalNoiseRatio !== undefined) view.setUint32(12, Number(data.ulSignalNoiseRatio), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_STRING (size: 16)
 */
export interface BDA_STRING {
  /** i32 */
  lResult: number;
  /** u32 */
  ulStringSize: number;
  /** array */
  argbString: Deno.PointerValue | null;
}

export const sizeofBDA_STRING = 16;

export function allocBDA_STRING(data?: Partial<BDA_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulStringSize !== undefined) view.setUint32(4, Number(data.ulStringSize), true);
  // 0x08: pointer
  if (data?.argbString !== undefined) view.setBigUint64(8, data.argbString === null ? 0n : BigInt(util.toPointer(data.argbString)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_SCAN_CAPABILTIES (size: 16)
 */
export interface BDA_SCAN_CAPABILTIES {
  /** i32 */
  lResult: number;
  /** u64 */
  ul64AnalogStandardsSupported: Deno.PointerValue;
}

export const sizeofBDA_SCAN_CAPABILTIES = 16;

export function allocBDA_SCAN_CAPABILTIES(data?: Partial<BDA_SCAN_CAPABILTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_SCAN_CAPABILTIES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.ul64AnalogStandardsSupported !== undefined) view.setBigUint64(8, BigInt(data.ul64AnalogStandardsSupported), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_SCAN_STATE (size: 16)
 */
export interface BDA_SCAN_STATE {
  /** i32 */
  lResult: number;
  /** u32 */
  ulSignalLock: number;
  /** u32 */
  ulSecondsLeft: number;
  /** u32 */
  ulCurrentFrequency: number;
}

export const sizeofBDA_SCAN_STATE = 16;

export function allocBDA_SCAN_STATE(data?: Partial<BDA_SCAN_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_SCAN_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulSignalLock !== undefined) view.setUint32(4, Number(data.ulSignalLock), true);
  // 0x08: u32
  if (data?.ulSecondsLeft !== undefined) view.setUint32(8, Number(data.ulSecondsLeft), true);
  // 0x0c: u32
  if (data?.ulCurrentFrequency !== undefined) view.setUint32(12, Number(data.ulCurrentFrequency), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_SCAN_START (size: 16)
 */
export interface BDA_SCAN_START {
  /** i32 */
  lResult: number;
  /** u32 */
  LowerFrequency: number;
  /** u32 */
  HigerFrequency: number;
}

export const sizeofBDA_SCAN_START = 16;

export function allocBDA_SCAN_START(data?: Partial<BDA_SCAN_START>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_SCAN_START);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.LowerFrequency !== undefined) view.setUint32(4, Number(data.LowerFrequency), true);
  // 0x08: u32
  if (data?.HigerFrequency !== undefined) view.setUint32(8, Number(data.HigerFrequency), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_GDDS_DATATYPE (size: 16)
 */
export interface BDA_GDDS_DATATYPE {
  /** i32 */
  lResult: number;
  /** System.Guid */
  uuidDataType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBDA_GDDS_DATATYPE = 16;

export function allocBDA_GDDS_DATATYPE(data?: Partial<BDA_GDDS_DATATYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_GDDS_DATATYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.uuidDataType !== undefined) view.setBigUint64(8, data.uuidDataType === null ? 0n : BigInt(util.toPointer(data.uuidDataType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_GDDS_DATA (size: 24)
 */
export interface BDA_GDDS_DATA {
  /** i32 */
  lResult: number;
  /** u32 */
  ulDataLength: number;
  /** u32 */
  ulPercentageProgress: number;
  /** array */
  argbData: Deno.PointerValue | null;
}

export const sizeofBDA_GDDS_DATA = 24;

export function allocBDA_GDDS_DATA(data?: Partial<BDA_GDDS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_GDDS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulDataLength !== undefined) view.setUint32(4, Number(data.ulDataLength), true);
  // 0x08: u32
  if (data?.ulPercentageProgress !== undefined) view.setUint32(8, Number(data.ulPercentageProgress), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbData !== undefined) view.setBigUint64(16, data.argbData === null ? 0n : BigInt(util.toPointer(data.argbData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_USERACTIVITY_INTERVAL (size: 8)
 */
export interface BDA_USERACTIVITY_INTERVAL {
  /** i32 */
  lResult: number;
  /** u32 */
  ulActivityInterval: number;
}

export const sizeofBDA_USERACTIVITY_INTERVAL = 8;

export function allocBDA_USERACTIVITY_INTERVAL(data?: Partial<BDA_USERACTIVITY_INTERVAL>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_USERACTIVITY_INTERVAL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulActivityInterval !== undefined) view.setUint32(4, Number(data.ulActivityInterval), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CAS_CHECK_ENTITLEMENTTOKEN (size: 8)
 */
export interface BDA_CAS_CHECK_ENTITLEMENTTOKEN {
  /** i32 */
  lResult: number;
  /** u32 */
  ulDescrambleStatus: number;
}

export const sizeofBDA_CAS_CHECK_ENTITLEMENTTOKEN = 8;

export function allocBDA_CAS_CHECK_ENTITLEMENTTOKEN(data?: Partial<BDA_CAS_CHECK_ENTITLEMENTTOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CAS_CHECK_ENTITLEMENTTOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulDescrambleStatus !== undefined) view.setUint32(4, Number(data.ulDescrambleStatus), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CAS_CLOSE_MMIDIALOG (size: 8)
 */
export interface BDA_CAS_CLOSE_MMIDIALOG {
  /** i32 */
  lResult: number;
  /** u32 */
  SessionResult: number;
}

export const sizeofBDA_CAS_CLOSE_MMIDIALOG = 8;

export function allocBDA_CAS_CLOSE_MMIDIALOG(data?: Partial<BDA_CAS_CLOSE_MMIDIALOG>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CAS_CLOSE_MMIDIALOG);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.SessionResult !== undefined) view.setUint32(4, Number(data.SessionResult), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CAS_REQUESTTUNERDATA (size: 8)
 */
export interface BDA_CAS_REQUESTTUNERDATA {
  /** u8 */
  ucRequestPriority: number;
  /** u8 */
  ucRequestReason: number;
  /** u8 */
  ucRequestConsequences: number;
  /** u32 */
  ulEstimatedTime: number;
}

export const sizeofBDA_CAS_REQUESTTUNERDATA = 8;

export function allocBDA_CAS_REQUESTTUNERDATA(data?: Partial<BDA_CAS_REQUESTTUNERDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CAS_REQUESTTUNERDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ucRequestPriority !== undefined) view.setUint8(0, Number(data.ucRequestPriority));
  // 0x01: u8
  if (data?.ucRequestReason !== undefined) view.setUint8(1, Number(data.ucRequestReason));
  // 0x02: u8
  if (data?.ucRequestConsequences !== undefined) view.setUint8(2, Number(data.ucRequestConsequences));
  // 0x03: u32
  if (data?.ulEstimatedTime !== undefined) view.setUint32(3, Number(data.ulEstimatedTime), true);
  // 0x07: pad1
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CAS_OPENMMIDATA (size: 32)
 */
export interface BDA_CAS_OPENMMIDATA {
  /** u32 */
  ulDialogNumber: number;
  /** u32 */
  ulDialogRequest: number;
  /** System.Guid */
  uuidDialogType: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  usDialogDataLength: number;
  /** array */
  argbDialogData: Deno.PointerValue | null;
}

export const sizeofBDA_CAS_OPENMMIDATA = 32;

export function allocBDA_CAS_OPENMMIDATA(data?: Partial<BDA_CAS_OPENMMIDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CAS_OPENMMIDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulDialogNumber !== undefined) view.setUint32(0, Number(data.ulDialogNumber), true);
  // 0x04: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(4, Number(data.ulDialogRequest), true);
  // 0x08: pointer
  if (data?.uuidDialogType !== undefined) view.setBigUint64(8, data.uuidDialogType === null ? 0n : BigInt(util.toPointer(data.uuidDialogType)), true);
  // 0x10: u16
  if (data?.usDialogDataLength !== undefined) view.setUint16(16, Number(data.usDialogDataLength), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.argbDialogData !== undefined) view.setBigUint64(24, data.argbDialogData === null ? 0n : BigInt(util.toPointer(data.argbDialogData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CAS_CLOSEMMIDATA (size: 8)
 */
export interface BDA_CAS_CLOSEMMIDATA {
  /** u32 */
  ulDialogNumber: number;
}

export const sizeofBDA_CAS_CLOSEMMIDATA = 8;

export function allocBDA_CAS_CLOSEMMIDATA(data?: Partial<BDA_CAS_CLOSEMMIDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CAS_CLOSEMMIDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulDialogNumber !== undefined) view.setUint32(0, Number(data.ulDialogNumber), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_ISDBCAS_REQUESTHEADER (size: 32)
 */
export interface BDA_ISDBCAS_REQUESTHEADER {
  /** u8 */
  bInstruction: number;
  /** array */
  bReserved: Deno.PointerValue | null;
  /** u32 */
  ulDataLength: number;
  /** array */
  argbIsdbCommand: Deno.PointerValue | null;
}

export const sizeofBDA_ISDBCAS_REQUESTHEADER = 32;

export function allocBDA_ISDBCAS_REQUESTHEADER(data?: Partial<BDA_ISDBCAS_REQUESTHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_ISDBCAS_REQUESTHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bInstruction !== undefined) view.setUint8(0, Number(data.bInstruction));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.bReserved !== undefined) view.setBigUint64(8, data.bReserved === null ? 0n : BigInt(util.toPointer(data.bReserved)), true);
  // 0x10: u32
  if (data?.ulDataLength !== undefined) view.setUint32(16, Number(data.ulDataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.argbIsdbCommand !== undefined) view.setBigUint64(24, data.argbIsdbCommand === null ? 0n : BigInt(util.toPointer(data.argbIsdbCommand)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_ISDBCAS_RESPONSEDATA (size: 24)
 */
export interface BDA_ISDBCAS_RESPONSEDATA {
  /** i32 */
  lResult: number;
  /** u32 */
  ulRequestID: number;
  /** u32 */
  ulIsdbStatus: number;
  /** u32 */
  ulIsdbDataSize: number;
  /** array */
  argbIsdbCommandData: Deno.PointerValue | null;
}

export const sizeofBDA_ISDBCAS_RESPONSEDATA = 24;

export function allocBDA_ISDBCAS_RESPONSEDATA(data?: Partial<BDA_ISDBCAS_RESPONSEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_ISDBCAS_RESPONSEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulRequestID !== undefined) view.setUint32(4, Number(data.ulRequestID), true);
  // 0x08: u32
  if (data?.ulIsdbStatus !== undefined) view.setUint32(8, Number(data.ulIsdbStatus), true);
  // 0x0c: u32
  if (data?.ulIsdbDataSize !== undefined) view.setUint32(12, Number(data.ulIsdbDataSize), true);
  // 0x10: pointer
  if (data?.argbIsdbCommandData !== undefined) view.setBigUint64(16, data.argbIsdbCommandData === null ? 0n : BigInt(util.toPointer(data.argbIsdbCommandData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_ISDBCAS_EMG_REQ (size: 32)
 */
export interface BDA_ISDBCAS_EMG_REQ {
  /** u8 */
  bCLA: number;
  /** u8 */
  bINS: number;
  /** u8 */
  bP1: number;
  /** u8 */
  bP2: number;
  /** u8 */
  bLC: number;
  /** array */
  bCardId: Deno.PointerValue | null;
  /** u8 */
  bProtocol: number;
  /** u8 */
  bCABroadcasterGroupId: number;
  /** u8 */
  bMessageControl: number;
  /** array */
  bMessageCode: Deno.PointerValue | null;
}

export const sizeofBDA_ISDBCAS_EMG_REQ = 32;

export function allocBDA_ISDBCAS_EMG_REQ(data?: Partial<BDA_ISDBCAS_EMG_REQ>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_ISDBCAS_EMG_REQ);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bCLA !== undefined) view.setUint8(0, Number(data.bCLA));
  // 0x01: u8
  if (data?.bINS !== undefined) view.setUint8(1, Number(data.bINS));
  // 0x02: u8
  if (data?.bP1 !== undefined) view.setUint8(2, Number(data.bP1));
  // 0x03: u8
  if (data?.bP2 !== undefined) view.setUint8(3, Number(data.bP2));
  // 0x04: u8
  if (data?.bLC !== undefined) view.setUint8(4, Number(data.bLC));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.bCardId !== undefined) view.setBigUint64(8, data.bCardId === null ? 0n : BigInt(util.toPointer(data.bCardId)), true);
  // 0x10: u8
  if (data?.bProtocol !== undefined) view.setUint8(16, Number(data.bProtocol));
  // 0x11: u8
  if (data?.bCABroadcasterGroupId !== undefined) view.setUint8(17, Number(data.bCABroadcasterGroupId));
  // 0x12: u8
  if (data?.bMessageControl !== undefined) view.setUint8(18, Number(data.bMessageControl));
  // 0x13: pad5
  // 0x18: pointer
  if (data?.bMessageCode !== undefined) view.setBigUint64(24, data.bMessageCode === null ? 0n : BigInt(util.toPointer(data.bMessageCode)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_MUX_PIDLISTITEM (size: 8)
 */
export interface BDA_MUX_PIDLISTITEM {
  /** u16 */
  usPIDNumber: number;
  /** u16 */
  usProgramNumber: number;
  /** Windows.Win32.Media.DirectShow.MUX_PID_TYPE */
  ePIDType: MUX_PID_TYPE;
}

export const sizeofBDA_MUX_PIDLISTITEM = 8;

export function allocBDA_MUX_PIDLISTITEM(data?: Partial<BDA_MUX_PIDLISTITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_MUX_PIDLISTITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usPIDNumber !== undefined) view.setUint16(0, Number(data.usPIDNumber), true);
  // 0x02: u16
  if (data?.usProgramNumber !== undefined) view.setUint16(2, Number(data.usProgramNumber), true);
  // 0x04: i32
  if (data?.ePIDType !== undefined) view.setInt32(4, Number(data.ePIDType), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TS_SELECTORINFO (size: 40)
 */
export interface BDA_TS_SELECTORINFO {
  /** u8 */
  bTSInfolength: number;
  /** array */
  bReserved: Deno.PointerValue | null;
  /** System.Guid */
  guidNetworkType: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  bTSIDCount: number;
  /** array */
  usTSID: Deno.PointerValue | null;
}

export const sizeofBDA_TS_SELECTORINFO = 40;

export function allocBDA_TS_SELECTORINFO(data?: Partial<BDA_TS_SELECTORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TS_SELECTORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bTSInfolength !== undefined) view.setUint8(0, Number(data.bTSInfolength));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.bReserved !== undefined) view.setBigUint64(8, data.bReserved === null ? 0n : BigInt(util.toPointer(data.bReserved)), true);
  // 0x10: pointer
  if (data?.guidNetworkType !== undefined) view.setBigUint64(16, data.guidNetworkType === null ? 0n : BigInt(util.toPointer(data.guidNetworkType)), true);
  // 0x18: u8
  if (data?.bTSIDCount !== undefined) view.setUint8(24, Number(data.bTSIDCount));
  // 0x19: pad7
  // 0x20: pointer
  if (data?.usTSID !== undefined) view.setBigUint64(32, data.usTSID === null ? 0n : BigInt(util.toPointer(data.usTSID)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TS_SELECTORINFO_ISDBS_EXT (size: 8)
 */
export interface BDA_TS_SELECTORINFO_ISDBS_EXT {
  /** array */
  bTMCC: Deno.PointerValue | null;
}

export const sizeofBDA_TS_SELECTORINFO_ISDBS_EXT = 8;

export function allocBDA_TS_SELECTORINFO_ISDBS_EXT(data?: Partial<BDA_TS_SELECTORINFO_ISDBS_EXT>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TS_SELECTORINFO_ISDBS_EXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bTMCC !== undefined) view.setBigUint64(0, data.bTMCC === null ? 0n : BigInt(util.toPointer(data.bTMCC)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_DVBT2_L1_SIGNALLING_DATA (size: 88)
 */
export interface BDA_DVBT2_L1_SIGNALLING_DATA {
  /** u8 */
  L1Pre_TYPE: number;
  /** u8 */
  L1Pre_BWT_S1_S2: number;
  /** u8 */
  L1Pre_REPETITION_GUARD_PAPR: number;
  /** u8 */
  L1Pre_MOD_COD_FEC: number;
  /** array */
  L1Pre_POSTSIZE_INFO_PILOT: Deno.PointerValue | null;
  /** u8 */
  L1Pre_TX_ID_AVAIL: number;
  /** array */
  L1Pre_CELL_ID: Deno.PointerValue | null;
  /** array */
  L1Pre_NETWORK_ID: Deno.PointerValue | null;
  /** array */
  L1Pre_T2SYSTEM_ID: Deno.PointerValue | null;
  /** u8 */
  L1Pre_NUM_T2_FRAMES: number;
  /** array */
  L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT: Deno.PointerValue | null;
  /** array */
  L1Pre_NUMRF_CURRENTRF_RESERVED: Deno.PointerValue | null;
  /** array */
  L1Pre_CRC32: Deno.PointerValue | null;
  /** array */
  L1PostData: Deno.PointerValue | null;
}

export const sizeofBDA_DVBT2_L1_SIGNALLING_DATA = 88;

export function allocBDA_DVBT2_L1_SIGNALLING_DATA(data?: Partial<BDA_DVBT2_L1_SIGNALLING_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_DVBT2_L1_SIGNALLING_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.L1Pre_TYPE !== undefined) view.setUint8(0, Number(data.L1Pre_TYPE));
  // 0x01: u8
  if (data?.L1Pre_BWT_S1_S2 !== undefined) view.setUint8(1, Number(data.L1Pre_BWT_S1_S2));
  // 0x02: u8
  if (data?.L1Pre_REPETITION_GUARD_PAPR !== undefined) view.setUint8(2, Number(data.L1Pre_REPETITION_GUARD_PAPR));
  // 0x03: u8
  if (data?.L1Pre_MOD_COD_FEC !== undefined) view.setUint8(3, Number(data.L1Pre_MOD_COD_FEC));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.L1Pre_POSTSIZE_INFO_PILOT !== undefined) view.setBigUint64(8, data.L1Pre_POSTSIZE_INFO_PILOT === null ? 0n : BigInt(util.toPointer(data.L1Pre_POSTSIZE_INFO_PILOT)), true);
  // 0x10: u8
  if (data?.L1Pre_TX_ID_AVAIL !== undefined) view.setUint8(16, Number(data.L1Pre_TX_ID_AVAIL));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.L1Pre_CELL_ID !== undefined) view.setBigUint64(24, data.L1Pre_CELL_ID === null ? 0n : BigInt(util.toPointer(data.L1Pre_CELL_ID)), true);
  // 0x20: pointer
  if (data?.L1Pre_NETWORK_ID !== undefined) view.setBigUint64(32, data.L1Pre_NETWORK_ID === null ? 0n : BigInt(util.toPointer(data.L1Pre_NETWORK_ID)), true);
  // 0x28: pointer
  if (data?.L1Pre_T2SYSTEM_ID !== undefined) view.setBigUint64(40, data.L1Pre_T2SYSTEM_ID === null ? 0n : BigInt(util.toPointer(data.L1Pre_T2SYSTEM_ID)), true);
  // 0x30: u8
  if (data?.L1Pre_NUM_T2_FRAMES !== undefined) view.setUint8(48, Number(data.L1Pre_NUM_T2_FRAMES));
  // 0x31: pad7
  // 0x38: pointer
  if (data?.L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT !== undefined) view.setBigUint64(56, data.L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT === null ? 0n : BigInt(util.toPointer(data.L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT)), true);
  // 0x40: pointer
  if (data?.L1Pre_NUMRF_CURRENTRF_RESERVED !== undefined) view.setBigUint64(64, data.L1Pre_NUMRF_CURRENTRF_RESERVED === null ? 0n : BigInt(util.toPointer(data.L1Pre_NUMRF_CURRENTRF_RESERVED)), true);
  // 0x48: pointer
  if (data?.L1Pre_CRC32 !== undefined) view.setBigUint64(72, data.L1Pre_CRC32 === null ? 0n : BigInt(util.toPointer(data.L1Pre_CRC32)), true);
  // 0x50: pointer
  if (data?.L1PostData !== undefined) view.setBigUint64(80, data.L1PostData === null ? 0n : BigInt(util.toPointer(data.L1PostData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_RATING_PINRESET (size: 16)
 */
export interface BDA_RATING_PINRESET {
  /** u8 */
  bPinLength: number;
  /** array */
  argbNewPin: Deno.PointerValue | null;
}

export const sizeofBDA_RATING_PINRESET = 16;

export function allocBDA_RATING_PINRESET(data?: Partial<BDA_RATING_PINRESET>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_RATING_PINRESET);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bPinLength !== undefined) view.setUint8(0, Number(data.bPinLength));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.argbNewPin !== undefined) view.setBigUint64(8, data.argbNewPin === null ? 0n : BigInt(util.toPointer(data.argbNewPin)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG2_TRANSPORT_STRIDE (size: 16)
 */
export interface MPEG2_TRANSPORT_STRIDE {
  /** u32 */
  dwOffset: number;
  /** u32 */
  dwPacketLength: number;
  /** u32 */
  dwStride: number;
}

export const sizeofMPEG2_TRANSPORT_STRIDE = 16;

export function allocMPEG2_TRANSPORT_STRIDE(data?: Partial<MPEG2_TRANSPORT_STRIDE>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG2_TRANSPORT_STRIDE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOffset !== undefined) view.setUint32(0, Number(data.dwOffset), true);
  // 0x04: u32
  if (data?.dwPacketLength !== undefined) view.setUint32(4, Number(data.dwPacketLength), true);
  // 0x08: u32
  if (data?.dwStride !== undefined) view.setUint32(8, Number(data.dwStride), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_SIGNAL_TIMEOUTS (size: 16)
 */
export interface BDA_SIGNAL_TIMEOUTS {
  /** u32 */
  ulCarrierTimeoutMs: number;
  /** u32 */
  ulScanningTimeoutMs: number;
  /** u32 */
  ulTuningTimeoutMs: number;
}

export const sizeofBDA_SIGNAL_TIMEOUTS = 16;

export function allocBDA_SIGNAL_TIMEOUTS(data?: Partial<BDA_SIGNAL_TIMEOUTS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_SIGNAL_TIMEOUTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCarrierTimeoutMs !== undefined) view.setUint32(0, Number(data.ulCarrierTimeoutMs), true);
  // 0x04: u32
  if (data?.ulScanningTimeoutMs !== undefined) view.setUint32(4, Number(data.ulScanningTimeoutMs), true);
  // 0x08: u32
  if (data?.ulTuningTimeoutMs !== undefined) view.setUint32(8, Number(data.ulTuningTimeoutMs), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.EALocationCodeType (size: 8)
 */
export interface EALocationCodeType {
  /** Windows.Win32.Media.DirectShow.LocationCodeSchemeType */
  LocationCodeScheme: LocationCodeSchemeType;
  /** u8 */
  state_code: number;
  /** u8 */
  county_subdivision: number;
  /** u16 */
  county_code: number;
}

export const sizeofEALocationCodeType = 8;

export function allocEALocationCodeType(data?: Partial<EALocationCodeType>): Uint8Array {
  const buf = new Uint8Array(sizeofEALocationCodeType);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LocationCodeScheme !== undefined) view.setInt32(0, Number(data.LocationCodeScheme), true);
  // 0x04: u8
  if (data?.state_code !== undefined) view.setUint8(4, Number(data.state_code));
  // 0x05: u8
  if (data?.county_subdivision !== undefined) view.setUint8(5, Number(data.county_subdivision));
  // 0x06: u16
  if (data?.county_code !== undefined) view.setUint16(6, Number(data.county_code), true);
  return buf;
}

export type BSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.DirectShow.SmartCardApplication (size: 24)
 */
export interface SmartCardApplication {
  /** Windows.Win32.Media.DirectShow.ApplicationTypeType */
  ApplicationType: ApplicationTypeType;
  /** u16 */
  ApplicationVersion: number;
  /** Windows.Win32.Foundation.BSTR */
  pbstrApplicationName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  pbstrApplicationURL: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSmartCardApplication = 24;

export function allocSmartCardApplication(data?: Partial<SmartCardApplication>): Uint8Array {
  const buf = new Uint8Array(sizeofSmartCardApplication);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ApplicationType !== undefined) view.setInt32(0, Number(data.ApplicationType), true);
  // 0x04: u16
  if (data?.ApplicationVersion !== undefined) view.setUint16(4, Number(data.ApplicationVersion), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.pbstrApplicationName !== undefined) view.setBigUint64(8, data.pbstrApplicationName === null ? 0n : BigInt(util.toPointer(data.pbstrApplicationName)), true);
  // 0x10: pointer
  if (data?.pbstrApplicationURL !== undefined) view.setBigUint64(16, data.pbstrApplicationURL === null ? 0n : BigInt(util.toPointer(data.pbstrApplicationURL)), true);
  return buf;
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _Anonymous3_e__Union (size: 16)
 */
export interface _Anonymous3_e__Union {
  /** u32 */
  dwAlphaDestConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaDest: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous3_e__Union = 16;

export function alloc_Anonymous3_e__Union(data?: Partial<_Anonymous3_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous3_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaDestConst !== undefined) view.setUint32(0, Number(data.dwAlphaDestConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaDest !== undefined) view.setBigUint64(8, data.lpDDSAlphaDest === null ? 0n : BigInt(util.toPointer(data.lpDDSAlphaDest)), true);
  return buf;
}

/**
 * _Anonymous4_e__Union (size: 16)
 */
export interface _Anonymous4_e__Union {
  /** u32 */
  dwAlphaSrcConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaSrc: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous4_e__Union = 16;

export function alloc_Anonymous4_e__Union(data?: Partial<_Anonymous4_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous4_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaSrcConst !== undefined) view.setUint32(0, Number(data.dwAlphaSrcConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaSrc !== undefined) view.setBigUint64(8, data.lpDDSAlphaSrc === null ? 0n : BigInt(util.toPointer(data.lpDDSAlphaSrc)), true);
  return buf;
}

/**
 * _Anonymous5_e__Union (size: 24)
 */
export interface _Anonymous5_e__Union {
  /** u32 */
  dwFillColor: number;
  /** u32 */
  dwFillDepth: number;
  /** u32 */
  dwFillPixel: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSPattern: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous5_e__Union = 24;

export function alloc_Anonymous5_e__Union(data?: Partial<_Anonymous5_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous5_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFillColor !== undefined) view.setUint32(0, Number(data.dwFillColor), true);
  // 0x04: u32
  if (data?.dwFillDepth !== undefined) view.setUint32(4, Number(data.dwFillDepth), true);
  // 0x08: u32
  if (data?.dwFillPixel !== undefined) view.setUint32(8, Number(data.dwFillPixel), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpDDSPattern !== undefined) view.setBigUint64(16, data.lpDDSPattern === null ? 0n : BigInt(util.toPointer(data.lpDDSPattern)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT (size: 56)
 */
export interface DDPIXELFORMAT {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwFourCC: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous5_e__Union */
  Anonymous5: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDDPIXELFORMAT = 56;

export function allocDDPIXELFORMAT(data?: Partial<DDPIXELFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDDPIXELFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwFourCC !== undefined) view.setUint32(8, Number(data.dwFourCC), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(32, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x28: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(40, data.Anonymous4 === null ? 0n : BigInt(util.toPointer(data.Anonymous4)), true);
  // 0x30: pointer
  if (data?.Anonymous5 !== undefined) view.setBigUint64(48, data.Anonymous5 === null ? 0n : BigInt(util.toPointer(data.Anonymous5)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMVAUncompBufferInfo (size: 16)
 */
export interface AMVAUncompBufferInfo {
  /** u32 */
  dwMinNumSurfaces: number;
  /** u32 */
  dwMaxNumSurfaces: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddUncompPixelFormat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAMVAUncompBufferInfo = 16;

export function allocAMVAUncompBufferInfo(data?: Partial<AMVAUncompBufferInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVAUncompBufferInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMinNumSurfaces !== undefined) view.setUint32(0, Number(data.dwMinNumSurfaces), true);
  // 0x04: u32
  if (data?.dwMaxNumSurfaces !== undefined) view.setUint32(4, Number(data.dwMaxNumSurfaces), true);
  // 0x08: pointer
  if (data?.ddUncompPixelFormat !== undefined) view.setBigUint64(8, data.ddUncompPixelFormat === null ? 0n : BigInt(util.toPointer(data.ddUncompPixelFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMVAUncompDataInfo (size: 16)
 */
export interface AMVAUncompDataInfo {
  /** u32 */
  dwUncompWidth: number;
  /** u32 */
  dwUncompHeight: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddUncompPixelFormat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAMVAUncompDataInfo = 16;

export function allocAMVAUncompDataInfo(data?: Partial<AMVAUncompDataInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVAUncompDataInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwUncompWidth !== undefined) view.setUint32(0, Number(data.dwUncompWidth), true);
  // 0x04: u32
  if (data?.dwUncompHeight !== undefined) view.setUint32(4, Number(data.dwUncompHeight), true);
  // 0x08: pointer
  if (data?.ddUncompPixelFormat !== undefined) view.setBigUint64(8, data.ddUncompPixelFormat === null ? 0n : BigInt(util.toPointer(data.ddUncompPixelFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMVAInternalMemInfo (size: 8)
 */
export interface AMVAInternalMemInfo {
  /** u32 */
  dwScratchMemAlloc: number;
}

export const sizeofAMVAInternalMemInfo = 8;

export function allocAMVAInternalMemInfo(data?: Partial<AMVAInternalMemInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVAInternalMemInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwScratchMemAlloc !== undefined) view.setUint32(0, Number(data.dwScratchMemAlloc), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSCAPS2 (size: 24)
 */
export interface DDSCAPS2 {
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwCaps2: number;
  /** u32 */
  dwCaps3: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDDSCAPS2 = 24;

export function allocDDSCAPS2(data?: Partial<DDSCAPS2>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSCAPS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCaps !== undefined) view.setUint32(0, Number(data.dwCaps), true);
  // 0x04: u32
  if (data?.dwCaps2 !== undefined) view.setUint32(4, Number(data.dwCaps2), true);
  // 0x08: u32
  if (data?.dwCaps3 !== undefined) view.setUint32(8, Number(data.dwCaps3), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMVACompBufferInfo (size: 32)
 */
export interface AMVACompBufferInfo {
  /** u32 */
  dwNumCompBuffers: number;
  /** u32 */
  dwWidthToCreate: number;
  /** u32 */
  dwHeightToCreate: number;
  /** u32 */
  dwBytesToAllocate: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS2 */
  ddCompCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddPixelFormat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAMVACompBufferInfo = 32;

export function allocAMVACompBufferInfo(data?: Partial<AMVACompBufferInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVACompBufferInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumCompBuffers !== undefined) view.setUint32(0, Number(data.dwNumCompBuffers), true);
  // 0x04: u32
  if (data?.dwWidthToCreate !== undefined) view.setUint32(4, Number(data.dwWidthToCreate), true);
  // 0x08: u32
  if (data?.dwHeightToCreate !== undefined) view.setUint32(8, Number(data.dwHeightToCreate), true);
  // 0x0c: u32
  if (data?.dwBytesToAllocate !== undefined) view.setUint32(12, Number(data.dwBytesToAllocate), true);
  // 0x10: pointer
  if (data?.ddCompCaps !== undefined) view.setBigUint64(16, data.ddCompCaps === null ? 0n : BigInt(util.toPointer(data.ddCompCaps)), true);
  // 0x18: pointer
  if (data?.ddPixelFormat !== undefined) view.setBigUint64(24, data.ddPixelFormat === null ? 0n : BigInt(util.toPointer(data.ddPixelFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMVABeginFrameInfo (size: 40)
 */
export interface AMVABeginFrameInfo {
  /** u32 */
  dwDestSurfaceIndex: number;
  /** ptr */
  pInputData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeInputData: number;
  /** ptr */
  pOutputData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOutputData: number;
}

export const sizeofAMVABeginFrameInfo = 40;

export function allocAMVABeginFrameInfo(data?: Partial<AMVABeginFrameInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVABeginFrameInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDestSurfaceIndex !== undefined) view.setUint32(0, Number(data.dwDestSurfaceIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pInputData !== undefined) view.setBigUint64(8, data.pInputData === null ? 0n : BigInt(util.toPointer(data.pInputData)), true);
  // 0x10: u32
  if (data?.dwSizeInputData !== undefined) view.setUint32(16, Number(data.dwSizeInputData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pOutputData !== undefined) view.setBigUint64(24, data.pOutputData === null ? 0n : BigInt(util.toPointer(data.pOutputData)), true);
  // 0x20: u32
  if (data?.dwSizeOutputData !== undefined) view.setUint32(32, Number(data.dwSizeOutputData), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMVAEndFrameInfo (size: 16)
 */
export interface AMVAEndFrameInfo {
  /** u32 */
  dwSizeMiscData: number;
  /** ptr */
  pMiscData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAMVAEndFrameInfo = 16;

export function allocAMVAEndFrameInfo(data?: Partial<AMVAEndFrameInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVAEndFrameInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeMiscData !== undefined) view.setUint32(0, Number(data.dwSizeMiscData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pMiscData !== undefined) view.setBigUint64(8, data.pMiscData === null ? 0n : BigInt(util.toPointer(data.pMiscData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AMVABUFFERINFO (size: 16)
 */
export interface AMVABUFFERINFO {
  /** u32 */
  dwTypeIndex: number;
  /** u32 */
  dwBufferIndex: number;
  /** u32 */
  dwDataOffset: number;
  /** u32 */
  dwDataSize: number;
}

export const sizeofAMVABUFFERINFO = 16;

export function allocAMVABUFFERINFO(data?: Partial<AMVABUFFERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVABUFFERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTypeIndex !== undefined) view.setUint32(0, Number(data.dwTypeIndex), true);
  // 0x04: u32
  if (data?.dwBufferIndex !== undefined) view.setUint32(4, Number(data.dwBufferIndex), true);
  // 0x08: u32
  if (data?.dwDataOffset !== undefined) view.setUint32(8, Number(data.dwDataOffset), true);
  // 0x0c: u32
  if (data?.dwDataSize !== undefined) view.setUint32(12, Number(data.dwDataSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_WST_PAGE (size: 16)
 */
export interface AM_WST_PAGE {
  /** u32 */
  dwPageNr: number;
  /** u32 */
  dwSubPageNr: number;
  /** ptr */
  pucPageData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAM_WST_PAGE = 16;

export function allocAM_WST_PAGE(data?: Partial<AM_WST_PAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_WST_PAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPageNr !== undefined) view.setUint32(0, Number(data.dwPageNr), true);
  // 0x04: u32
  if (data?.dwSubPageNr !== undefined) view.setUint32(4, Number(data.dwSubPageNr), true);
  // 0x08: pointer
  if (data?.pucPageData !== undefined) view.setBigUint64(8, data.pucPageData === null ? 0n : BigInt(util.toPointer(data.pucPageData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.TRUECOLORINFO (size: 16)
 */
export interface TRUECOLORINFO {
  /** array */
  dwBitMasks: Deno.PointerValue | null;
  /** array */
  bmiColors: Deno.PointerValue | null;
}

export const sizeofTRUECOLORINFO = 16;

export function allocTRUECOLORINFO(data?: Partial<TRUECOLORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUECOLORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dwBitMasks !== undefined) view.setBigUint64(0, data.dwBitMasks === null ? 0n : BigInt(util.toPointer(data.dwBitMasks)), true);
  // 0x08: pointer
  if (data?.bmiColors !== undefined) view.setBigUint64(8, data.bmiColors === null ? 0n : BigInt(util.toPointer(data.bmiColors)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER (size: 40)
 */
export interface BITMAPINFOHEADER {
  /** u32 */
  biSize: number;
  /** i32 */
  biWidth: number;
  /** i32 */
  biHeight: number;
  /** u16 */
  biPlanes: number;
  /** u16 */
  biBitCount: number;
  /** Windows.Win32.Graphics.Gdi.BI_COMPRESSION */
  biCompression: BI_COMPRESSION;
  /** u32 */
  biSizeImage: number;
  /** i32 */
  biXPelsPerMeter: number;
  /** i32 */
  biYPelsPerMeter: number;
  /** u32 */
  biClrUsed: number;
  /** u32 */
  biClrImportant: number;
}

export const sizeofBITMAPINFOHEADER = 40;

export function allocBITMAPINFOHEADER(data?: Partial<BITMAPINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.biSize !== undefined) view.setUint32(0, Number(data.biSize), true);
  // 0x04: i32
  if (data?.biWidth !== undefined) view.setInt32(4, Number(data.biWidth), true);
  // 0x08: i32
  if (data?.biHeight !== undefined) view.setInt32(8, Number(data.biHeight), true);
  // 0x0c: u16
  if (data?.biPlanes !== undefined) view.setUint16(12, Number(data.biPlanes), true);
  // 0x0e: u16
  if (data?.biBitCount !== undefined) view.setUint16(14, Number(data.biBitCount), true);
  // 0x10: i32
  if (data?.biCompression !== undefined) view.setInt32(16, Number(data.biCompression), true);
  // 0x14: u32
  if (data?.biSizeImage !== undefined) view.setUint32(20, Number(data.biSizeImage), true);
  // 0x18: i32
  if (data?.biXPelsPerMeter !== undefined) view.setInt32(24, Number(data.biXPelsPerMeter), true);
  // 0x1c: i32
  if (data?.biYPelsPerMeter !== undefined) view.setInt32(28, Number(data.biYPelsPerMeter), true);
  // 0x20: u32
  if (data?.biClrUsed !== undefined) view.setUint32(32, Number(data.biClrUsed), true);
  // 0x24: u32
  if (data?.biClrImportant !== undefined) view.setUint32(36, Number(data.biClrImportant), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VIDEOINFO (size: 48)
 */
export interface VIDEOINFO {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVIDEOINFO = 48;

export function allocVIDEOINFO(data?: Partial<VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(32, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.ANALOGVIDEOINFO (size: 32)
 */
export interface ANALOGVIDEOINFO {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwActiveWidth: number;
  /** u32 */
  dwActiveHeight: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
}

export const sizeofANALOGVIDEOINFO = 32;

export function allocANALOGVIDEOINFO(data?: Partial<ANALOGVIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofANALOGVIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwActiveWidth !== undefined) view.setUint32(16, Number(data.dwActiveWidth), true);
  // 0x14: u32
  if (data?.dwActiveHeight !== undefined) view.setUint32(20, Number(data.dwActiveHeight), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_FRAMESTEP_STEP (size: 8)
 */
export interface AM_FRAMESTEP_STEP {
  /** u32 */
  dwFramesToStep: number;
}

export const sizeofAM_FRAMESTEP_STEP = 8;

export function allocAM_FRAMESTEP_STEP(data?: Partial<AM_FRAMESTEP_STEP>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_FRAMESTEP_STEP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFramesToStep !== undefined) view.setUint32(0, Number(data.dwFramesToStep), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.AM_MEDIA_TYPE (size: 64)
 */
export interface AM_MEDIA_TYPE {
  /** System.Guid */
  majortype: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  subtype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  lSampleSize: number;
  /** System.Guid */
  formattype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbFormat: number;
  /** ptr */
  pbFormat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAM_MEDIA_TYPE = 64;

export function allocAM_MEDIA_TYPE(data?: Partial<AM_MEDIA_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_MEDIA_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.majortype !== undefined) view.setBigUint64(0, data.majortype === null ? 0n : BigInt(util.toPointer(data.majortype)), true);
  // 0x08: pointer
  if (data?.subtype !== undefined) view.setBigUint64(8, data.subtype === null ? 0n : BigInt(util.toPointer(data.subtype)), true);
  // 0x10: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(16, Number(data.bFixedSizeSamples), true);
  // 0x14: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(20, Number(data.bTemporalCompression), true);
  // 0x18: u32
  if (data?.lSampleSize !== undefined) view.setUint32(24, Number(data.lSampleSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.formattype !== undefined) view.setBigUint64(32, data.formattype === null ? 0n : BigInt(util.toPointer(data.formattype)), true);
  // 0x28: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(40, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x30: u32
  if (data?.cbFormat !== undefined) view.setUint32(48, Number(data.cbFormat), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pbFormat !== undefined) view.setBigUint64(56, data.pbFormat === null ? 0n : BigInt(util.toPointer(data.pbFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_MPEGSTREAMTYPE (size: 24)
 */
export interface AM_MPEGSTREAMTYPE {
  /** u32 */
  dwStreamId: number;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Media.MediaFoundation.AM_MEDIA_TYPE */
  mt: Uint8Array | Deno.PointerValue | null;
  /** array */
  bFormat: Deno.PointerValue | null;
}

export const sizeofAM_MPEGSTREAMTYPE = 24;

export function allocAM_MPEGSTREAMTYPE(data?: Partial<AM_MPEGSTREAMTYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_MPEGSTREAMTYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStreamId !== undefined) view.setUint32(0, Number(data.dwStreamId), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  // 0x08: pointer
  if (data?.mt !== undefined) view.setBigUint64(8, data.mt === null ? 0n : BigInt(util.toPointer(data.mt)), true);
  // 0x10: pointer
  if (data?.bFormat !== undefined) view.setBigUint64(16, data.bFormat === null ? 0n : BigInt(util.toPointer(data.bFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_MPEGSYSTEMTYPE (size: 16)
 */
export interface AM_MPEGSYSTEMTYPE {
  /** u32 */
  dwBitRate: number;
  /** u32 */
  cStreams: number;
  /** array */
  Streams: Deno.PointerValue | null;
}

export const sizeofAM_MPEGSYSTEMTYPE = 16;

export function allocAM_MPEGSYSTEMTYPE(data?: Partial<AM_MPEGSYSTEMTYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_MPEGSYSTEMTYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBitRate !== undefined) view.setUint32(0, Number(data.dwBitRate), true);
  // 0x04: u32
  if (data?.cStreams !== undefined) view.setUint32(4, Number(data.cStreams), true);
  // 0x08: pointer
  if (data?.Streams !== undefined) view.setBigUint64(8, data.Streams === null ? 0n : BigInt(util.toPointer(data.Streams)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMR9PresentationInfo (size: 64)
 */
export interface VMR9PresentationInfo {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  lpSurf: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  rtStart: Deno.PointerValue;
  /** i64 */
  rtEnd: Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  szAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcDst: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofVMR9PresentationInfo = 64;

export function allocVMR9PresentationInfo(data?: Partial<VMR9PresentationInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9PresentationInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpSurf !== undefined) view.setBigUint64(8, data.lpSurf === null ? 0n : BigInt(util.toPointer(data.lpSurf)), true);
  // 0x10: i64
  if (data?.rtStart !== undefined) view.setBigInt64(16, BigInt(data.rtStart), true);
  // 0x18: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(24, BigInt(data.rtEnd), true);
  // 0x20: pointer
  if (data?.szAspectRatio !== undefined) view.setBigUint64(32, data.szAspectRatio === null ? 0n : BigInt(util.toPointer(data.szAspectRatio)), true);
  // 0x28: pointer
  if (data?.rcSrc !== undefined) view.setBigUint64(40, data.rcSrc === null ? 0n : BigInt(util.toPointer(data.rcSrc)), true);
  // 0x30: pointer
  if (data?.rcDst !== undefined) view.setBigUint64(48, data.rcDst === null ? 0n : BigInt(util.toPointer(data.rcDst)), true);
  // 0x38: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(56, Number(data.dwReserved1), true);
  // 0x3c: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(60, Number(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMR9AllocationInfo (size: 40)
 */
export interface VMR9AllocationInfo {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** u32 */
  MinBuffers: number;
  /** Windows.Win32.Foundation.SIZE */
  szAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  szNativeSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMR9AllocationInfo = 40;

export function allocVMR9AllocationInfo(data?: Partial<VMR9AllocationInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9AllocationInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwWidth !== undefined) view.setUint32(4, Number(data.dwWidth), true);
  // 0x08: u32
  if (data?.dwHeight !== undefined) view.setUint32(8, Number(data.dwHeight), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: u32
  if (data?.Pool !== undefined) view.setUint32(16, Number(data.Pool), true);
  // 0x14: u32
  if (data?.MinBuffers !== undefined) view.setUint32(20, Number(data.MinBuffers), true);
  // 0x18: pointer
  if (data?.szAspectRatio !== undefined) view.setBigUint64(24, data.szAspectRatio === null ? 0n : BigInt(util.toPointer(data.szAspectRatio)), true);
  // 0x20: pointer
  if (data?.szNativeSize !== undefined) view.setBigUint64(32, data.szNativeSize === null ? 0n : BigInt(util.toPointer(data.szNativeSize)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMR9NormalizedRect (size: 16)
 */
export interface VMR9NormalizedRect {
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  right: number;
  /** f32 */
  bottom: number;
}

export const sizeofVMR9NormalizedRect = 16;

export function allocVMR9NormalizedRect(data?: Partial<VMR9NormalizedRect>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9NormalizedRect);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.left !== undefined) view.setFloat32(0, Number(data.left), true);
  // 0x04: f32
  if (data?.top !== undefined) view.setFloat32(4, Number(data.top), true);
  // 0x08: f32
  if (data?.right !== undefined) view.setFloat32(8, Number(data.right), true);
  // 0x0c: f32
  if (data?.bottom !== undefined) view.setFloat32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMR9ProcAmpControl (size: 24)
 */
export interface VMR9ProcAmpControl {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** f32 */
  Brightness: number;
  /** f32 */
  Contrast: number;
  /** f32 */
  Hue: number;
  /** f32 */
  Saturation: number;
}

export const sizeofVMR9ProcAmpControl = 24;

export function allocVMR9ProcAmpControl(data?: Partial<VMR9ProcAmpControl>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9ProcAmpControl);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: f32
  if (data?.Brightness !== undefined) view.setFloat32(8, Number(data.Brightness), true);
  // 0x0c: f32
  if (data?.Contrast !== undefined) view.setFloat32(12, Number(data.Contrast), true);
  // 0x10: f32
  if (data?.Hue !== undefined) view.setFloat32(16, Number(data.Hue), true);
  // 0x14: f32
  if (data?.Saturation !== undefined) view.setFloat32(20, Number(data.Saturation), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMR9ProcAmpControlRange (size: 24)
 */
export interface VMR9ProcAmpControlRange {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Media.DirectShow.VMR9ProcAmpControlFlags */
  dwProperty: VMR9ProcAmpControlFlags;
  /** f32 */
  MinValue: number;
  /** f32 */
  MaxValue: number;
  /** f32 */
  DefaultValue: number;
  /** f32 */
  StepSize: number;
}

export const sizeofVMR9ProcAmpControlRange = 24;

export function allocVMR9ProcAmpControlRange(data?: Partial<VMR9ProcAmpControlRange>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9ProcAmpControlRange);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.dwProperty !== undefined) view.setInt32(4, Number(data.dwProperty), true);
  // 0x08: f32
  if (data?.MinValue !== undefined) view.setFloat32(8, Number(data.MinValue), true);
  // 0x0c: f32
  if (data?.MaxValue !== undefined) view.setFloat32(12, Number(data.MaxValue), true);
  // 0x10: f32
  if (data?.DefaultValue !== undefined) view.setFloat32(16, Number(data.DefaultValue), true);
  // 0x14: f32
  if (data?.StepSize !== undefined) view.setFloat32(20, Number(data.StepSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMR9AlphaBitmap (size: 64)
 */
export interface VMR9AlphaBitmap {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  pDDS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.VMR9NormalizedRect */
  rDest: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  fAlpha: number;
  /** Windows.Win32.Foundation.COLORREF */
  clrSrcKey: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFilterMode: number;
}

export const sizeofVMR9AlphaBitmap = 64;

export function allocVMR9AlphaBitmap(data?: Partial<VMR9AlphaBitmap>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9AlphaBitmap);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hdc !== undefined) view.setBigUint64(8, data.hdc === null ? 0n : BigInt(util.toPointer(data.hdc)), true);
  // 0x10: pointer
  if (data?.pDDS !== undefined) view.setBigUint64(16, data.pDDS === null ? 0n : BigInt(util.toPointer(data.pDDS)), true);
  // 0x18: pointer
  if (data?.rSrc !== undefined) view.setBigUint64(24, data.rSrc === null ? 0n : BigInt(util.toPointer(data.rSrc)), true);
  // 0x20: pointer
  if (data?.rDest !== undefined) view.setBigUint64(32, data.rDest === null ? 0n : BigInt(util.toPointer(data.rDest)), true);
  // 0x28: f32
  if (data?.fAlpha !== undefined) view.setFloat32(40, Number(data.fAlpha), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.clrSrcKey !== undefined) view.setBigUint64(48, data.clrSrcKey === null ? 0n : BigInt(util.toPointer(data.clrSrcKey)), true);
  // 0x38: u32
  if (data?.dwFilterMode !== undefined) view.setUint32(56, Number(data.dwFilterMode), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMR9MonitorInfo (size: 72)
 */
export interface VMR9MonitorInfo {
  /** u32 */
  uDevID: number;
  /** Windows.Win32.Foundation.RECT */
  rcMonitor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HMONITOR */
  hMon: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** array */
  szDevice: Deno.PointerValue | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liDriverVersion: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwVendorId: number;
  /** u32 */
  dwDeviceId: number;
  /** u32 */
  dwSubSysId: number;
  /** u32 */
  dwRevision: number;
}

export const sizeofVMR9MonitorInfo = 72;

export function allocVMR9MonitorInfo(data?: Partial<VMR9MonitorInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9MonitorInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uDevID !== undefined) view.setUint32(0, Number(data.uDevID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rcMonitor !== undefined) view.setBigUint64(8, data.rcMonitor === null ? 0n : BigInt(util.toPointer(data.rcMonitor)), true);
  // 0x10: pointer
  if (data?.hMon !== undefined) view.setBigUint64(16, data.hMon === null ? 0n : BigInt(util.toPointer(data.hMon)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szDevice !== undefined) view.setBigUint64(32, data.szDevice === null ? 0n : BigInt(util.toPointer(data.szDevice)), true);
  // 0x28: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(40, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x30: pointer
  if (data?.liDriverVersion !== undefined) view.setBigUint64(48, data.liDriverVersion === null ? 0n : BigInt(util.toPointer(data.liDriverVersion)), true);
  // 0x38: u32
  if (data?.dwVendorId !== undefined) view.setUint32(56, Number(data.dwVendorId), true);
  // 0x3c: u32
  if (data?.dwDeviceId !== undefined) view.setUint32(60, Number(data.dwDeviceId), true);
  // 0x40: u32
  if (data?.dwSubSysId !== undefined) view.setUint32(64, Number(data.dwSubSysId), true);
  // 0x44: u32
  if (data?.dwRevision !== undefined) view.setUint32(68, Number(data.dwRevision), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMR9Frequency (size: 8)
 */
export interface VMR9Frequency {
  /** u32 */
  dwNumerator: number;
  /** u32 */
  dwDenominator: number;
}

export const sizeofVMR9Frequency = 8;

export function allocVMR9Frequency(data?: Partial<VMR9Frequency>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9Frequency);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumerator !== undefined) view.setUint32(0, Number(data.dwNumerator), true);
  // 0x04: u32
  if (data?.dwDenominator !== undefined) view.setUint32(4, Number(data.dwDenominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMR9VideoDesc (size: 40)
 */
export interface VMR9VideoDesc {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwSampleWidth: number;
  /** u32 */
  dwSampleHeight: number;
  /** Windows.Win32.Media.DirectShow.VMR9_SampleFormat */
  SampleFormat: VMR9_SampleFormat;
  /** u32 */
  dwFourCC: number;
  /** Windows.Win32.Media.DirectShow.VMR9Frequency */
  InputSampleFreq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.VMR9Frequency */
  OutputFrameFreq: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMR9VideoDesc = 40;

export function allocVMR9VideoDesc(data?: Partial<VMR9VideoDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9VideoDesc);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwSampleWidth !== undefined) view.setUint32(4, Number(data.dwSampleWidth), true);
  // 0x08: u32
  if (data?.dwSampleHeight !== undefined) view.setUint32(8, Number(data.dwSampleHeight), true);
  // 0x0c: i32
  if (data?.SampleFormat !== undefined) view.setInt32(12, Number(data.SampleFormat), true);
  // 0x10: u32
  if (data?.dwFourCC !== undefined) view.setUint32(16, Number(data.dwFourCC), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.InputSampleFreq !== undefined) view.setBigUint64(24, data.InputSampleFreq === null ? 0n : BigInt(util.toPointer(data.InputSampleFreq)), true);
  // 0x20: pointer
  if (data?.OutputFrameFreq !== undefined) view.setBigUint64(32, data.OutputFrameFreq === null ? 0n : BigInt(util.toPointer(data.OutputFrameFreq)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMR9DeinterlaceCaps (size: 24)
 */
export interface VMR9DeinterlaceCaps {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwNumPreviousOutputFrames: number;
  /** u32 */
  dwNumForwardRefSamples: number;
  /** u32 */
  dwNumBackwardRefSamples: number;
  /** Windows.Win32.Media.DirectShow.VMR9DeinterlaceTech */
  DeinterlaceTechnology: VMR9DeinterlaceTech;
}

export const sizeofVMR9DeinterlaceCaps = 24;

export function allocVMR9DeinterlaceCaps(data?: Partial<VMR9DeinterlaceCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9DeinterlaceCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwNumPreviousOutputFrames !== undefined) view.setUint32(4, Number(data.dwNumPreviousOutputFrames), true);
  // 0x08: u32
  if (data?.dwNumForwardRefSamples !== undefined) view.setUint32(8, Number(data.dwNumForwardRefSamples), true);
  // 0x0c: u32
  if (data?.dwNumBackwardRefSamples !== undefined) view.setUint32(12, Number(data.dwNumBackwardRefSamples), true);
  // 0x10: i32
  if (data?.DeinterlaceTechnology !== undefined) view.setInt32(16, Number(data.DeinterlaceTechnology), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VMR9VideoStreamInfo (size: 56)
 */
export interface VMR9VideoStreamInfo {
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  pddsVideoSurface: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwStrmID: number;
  /** f32 */
  fAlpha: number;
  /** Windows.Win32.Media.DirectShow.VMR9NormalizedRect */
  rNormal: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  rtStart: Deno.PointerValue;
  /** i64 */
  rtEnd: Deno.PointerValue;
  /** Windows.Win32.Media.DirectShow.VMR9_SampleFormat */
  SampleFormat: VMR9_SampleFormat;
}

export const sizeofVMR9VideoStreamInfo = 56;

export function allocVMR9VideoStreamInfo(data?: Partial<VMR9VideoStreamInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9VideoStreamInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pddsVideoSurface !== undefined) view.setBigUint64(0, data.pddsVideoSurface === null ? 0n : BigInt(util.toPointer(data.pddsVideoSurface)), true);
  // 0x08: u32
  if (data?.dwWidth !== undefined) view.setUint32(8, Number(data.dwWidth), true);
  // 0x0c: u32
  if (data?.dwHeight !== undefined) view.setUint32(12, Number(data.dwHeight), true);
  // 0x10: u32
  if (data?.dwStrmID !== undefined) view.setUint32(16, Number(data.dwStrmID), true);
  // 0x14: f32
  if (data?.fAlpha !== undefined) view.setFloat32(20, Number(data.fAlpha), true);
  // 0x18: pointer
  if (data?.rNormal !== undefined) view.setBigUint64(24, data.rNormal === null ? 0n : BigInt(util.toPointer(data.rNormal)), true);
  // 0x20: i64
  if (data?.rtStart !== undefined) view.setBigInt64(32, BigInt(data.rtStart), true);
  // 0x28: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(40, BigInt(data.rtEnd), true);
  // 0x30: i32
  if (data?.SampleFormat !== undefined) view.setInt32(48, Number(data.SampleFormat), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.RIFFCHUNK (size: 8)
 */
export interface RIFFCHUNK {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
}

export const sizeofRIFFCHUNK = 8;

export function allocRIFFCHUNK(data?: Partial<RIFFCHUNK>): Uint8Array {
  const buf = new Uint8Array(sizeofRIFFCHUNK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.RIFFLIST (size: 16)
 */
export interface RIFFLIST {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u32 */
  fccListType: number;
}

export const sizeofRIFFLIST = 16;

export function allocRIFFLIST(data?: Partial<RIFFLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofRIFFLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u32
  if (data?.fccListType !== undefined) view.setUint32(8, Number(data.fccListType), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVIMAINHEADER (size: 56)
 */
export interface AVIMAINHEADER {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u32 */
  dwMicroSecPerFrame: number;
  /** u32 */
  dwMaxBytesPerSec: number;
  /** u32 */
  dwPaddingGranularity: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwTotalFrames: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwStreams: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofAVIMAINHEADER = 56;

export function allocAVIMAINHEADER(data?: Partial<AVIMAINHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIMAINHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u32
  if (data?.dwMicroSecPerFrame !== undefined) view.setUint32(8, Number(data.dwMicroSecPerFrame), true);
  // 0x0c: u32
  if (data?.dwMaxBytesPerSec !== undefined) view.setUint32(12, Number(data.dwMaxBytesPerSec), true);
  // 0x10: u32
  if (data?.dwPaddingGranularity !== undefined) view.setUint32(16, Number(data.dwPaddingGranularity), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  // 0x18: u32
  if (data?.dwTotalFrames !== undefined) view.setUint32(24, Number(data.dwTotalFrames), true);
  // 0x1c: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(28, Number(data.dwInitialFrames), true);
  // 0x20: u32
  if (data?.dwStreams !== undefined) view.setUint32(32, Number(data.dwStreams), true);
  // 0x24: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(36, Number(data.dwSuggestedBufferSize), true);
  // 0x28: u32
  if (data?.dwWidth !== undefined) view.setUint32(40, Number(data.dwWidth), true);
  // 0x2c: u32
  if (data?.dwHeight !== undefined) view.setUint32(44, Number(data.dwHeight), true);
  // 0x30: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(48, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVIEXTHEADER (size: 24)
 */
export interface AVIEXTHEADER {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u32 */
  dwGrandFrames: number;
  /** array */
  dwFuture: Deno.PointerValue | null;
}

export const sizeofAVIEXTHEADER = 24;

export function allocAVIEXTHEADER(data?: Partial<AVIEXTHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIEXTHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u32
  if (data?.dwGrandFrames !== undefined) view.setUint32(8, Number(data.dwGrandFrames), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dwFuture !== undefined) view.setBigUint64(16, data.dwFuture === null ? 0n : BigInt(util.toPointer(data.dwFuture)), true);
  return buf;
}

/**
 * _rcFrame_e__Struct (size: 8)
 */
export interface _rcFrame_e__Struct {
  /** i16 */
  left: number;
  /** i16 */
  top: number;
  /** i16 */
  right: number;
  /** i16 */
  bottom: number;
}

export const sizeof_rcFrame_e__Struct = 8;

export function alloc_rcFrame_e__Struct(data?: Partial<_rcFrame_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_rcFrame_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.left !== undefined) view.setInt16(0, Number(data.left), true);
  // 0x02: i16
  if (data?.top !== undefined) view.setInt16(2, Number(data.top), true);
  // 0x04: i16
  if (data?.right !== undefined) view.setInt16(4, Number(data.right), true);
  // 0x06: i16
  if (data?.bottom !== undefined) view.setInt16(6, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVISTREAMHEADER (size: 64)
 */
export interface AVISTREAMHEADER {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwFlags: number;
  /** u16 */
  wPriority: number;
  /** u16 */
  wLanguage: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwStart: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwQuality: number;
  /** u32 */
  dwSampleSize: number;
  /** _rcFrame_e__Struct */
  rcFrame: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAVISTREAMHEADER = 64;

export function allocAVISTREAMHEADER(data?: Partial<AVISTREAMHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISTREAMHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u32
  if (data?.fccType !== undefined) view.setUint32(8, Number(data.fccType), true);
  // 0x0c: u32
  if (data?.fccHandler !== undefined) view.setUint32(12, Number(data.fccHandler), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: u16
  if (data?.wPriority !== undefined) view.setUint16(20, Number(data.wPriority), true);
  // 0x16: u16
  if (data?.wLanguage !== undefined) view.setUint16(22, Number(data.wLanguage), true);
  // 0x18: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(24, Number(data.dwInitialFrames), true);
  // 0x1c: u32
  if (data?.dwScale !== undefined) view.setUint32(28, Number(data.dwScale), true);
  // 0x20: u32
  if (data?.dwRate !== undefined) view.setUint32(32, Number(data.dwRate), true);
  // 0x24: u32
  if (data?.dwStart !== undefined) view.setUint32(36, Number(data.dwStart), true);
  // 0x28: u32
  if (data?.dwLength !== undefined) view.setUint32(40, Number(data.dwLength), true);
  // 0x2c: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(44, Number(data.dwSuggestedBufferSize), true);
  // 0x30: u32
  if (data?.dwQuality !== undefined) view.setUint32(48, Number(data.dwQuality), true);
  // 0x34: u32
  if (data?.dwSampleSize !== undefined) view.setUint32(52, Number(data.dwSampleSize), true);
  // 0x38: pointer
  if (data?.rcFrame !== undefined) view.setBigUint64(56, data.rcFrame === null ? 0n : BigInt(util.toPointer(data.rcFrame)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVIOLDINDEX (size: 16)
 */
export interface AVIOLDINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** array */
  aIndex: Deno.PointerValue | null;
}

export const sizeofAVIOLDINDEX = 16;

export function allocAVIOLDINDEX(data?: Partial<AVIOLDINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIOLDINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(8, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  return buf;
}

/**
 * Windows.Win32.Media.TIMECODE (size: 16)
 */
export interface TIMECODE {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  qw: Deno.PointerValue;
}

export const sizeofTIMECODE = 16;

export function allocTIMECODE(data?: Partial<TIMECODE>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMECODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.qw !== undefined) view.setBigUint64(8, BigInt(data.qw), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.TIMECODEDATA (size: 16)
 */
export interface TIMECODEDATA {
  /** Windows.Win32.Media.TIMECODE */
  time: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSMPTEflags: number;
  /** u32 */
  dwUser: number;
}

export const sizeofTIMECODEDATA = 16;

export function allocTIMECODEDATA(data?: Partial<TIMECODEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMECODEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.time !== undefined) view.setBigUint64(0, data.time === null ? 0n : BigInt(util.toPointer(data.time)), true);
  // 0x08: u32
  if (data?.dwSMPTEflags !== undefined) view.setUint32(8, Number(data.dwSMPTEflags), true);
  // 0x0c: u32
  if (data?.dwUser !== undefined) view.setUint32(12, Number(data.dwUser), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVIMETAINDEX (size: 40)
 */
export interface AVIMETAINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
  /** array */
  adwIndex: Deno.PointerValue | null;
}

export const sizeofAVIMETAINDEX = 40;

export function allocAVIMETAINDEX(data?: Partial<AVIMETAINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIMETAINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(24, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  // 0x20: pointer
  if (data?.adwIndex !== undefined) view.setBigUint64(32, data.adwIndex === null ? 0n : BigInt(util.toPointer(data.adwIndex)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVISUPERINDEX (size: 40)
 */
export interface AVISUPERINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
  /** array */
  aIndex: Deno.PointerValue | null;
}

export const sizeofAVISUPERINDEX = 40;

export function allocAVISUPERINDEX(data?: Partial<AVISUPERINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISUPERINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(24, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  // 0x20: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(32, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVISTDINDEX_ENTRY (size: 8)
 */
export interface AVISTDINDEX_ENTRY {
  /** u32 */
  dwOffset: number;
  /** u32 */
  dwSize: number;
}

export const sizeofAVISTDINDEX_ENTRY = 8;

export function allocAVISTDINDEX_ENTRY(data?: Partial<AVISTDINDEX_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISTDINDEX_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOffset !== undefined) view.setUint32(0, Number(data.dwOffset), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVISTDINDEX (size: 48)
 */
export interface AVISTDINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** u64 */
  qwBaseOffset: Deno.PointerValue;
  /** u32 */
  dwReserved_3: number;
  /** array */
  aIndex: Deno.PointerValue | null;
}

export const sizeofAVISTDINDEX = 48;

export function allocAVISTDINDEX(data?: Partial<AVISTDINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISTDINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.qwBaseOffset !== undefined) view.setBigUint64(24, BigInt(data.qwBaseOffset), true);
  // 0x20: u32
  if (data?.dwReserved_3 !== undefined) view.setUint32(32, Number(data.dwReserved_3), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(40, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVITIMEDINDEX_ENTRY (size: 16)
 */
export interface AVITIMEDINDEX_ENTRY {
  /** u32 */
  dwOffset: number;
  /** u32 */
  dwSize: number;
  /** u32 */
  dwDuration: number;
}

export const sizeofAVITIMEDINDEX_ENTRY = 16;

export function allocAVITIMEDINDEX_ENTRY(data?: Partial<AVITIMEDINDEX_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofAVITIMEDINDEX_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOffset !== undefined) view.setUint32(0, Number(data.dwOffset), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  // 0x08: u32
  if (data?.dwDuration !== undefined) view.setUint32(8, Number(data.dwDuration), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVITIMEDINDEX (size: 56)
 */
export interface AVITIMEDINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** u64 */
  qwBaseOffset: Deno.PointerValue;
  /** u32 */
  dwReserved_3: number;
  /** array */
  aIndex: Deno.PointerValue | null;
  /** array */
  adwTrailingFill: Deno.PointerValue | null;
}

export const sizeofAVITIMEDINDEX = 56;

export function allocAVITIMEDINDEX(data?: Partial<AVITIMEDINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVITIMEDINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.qwBaseOffset !== undefined) view.setBigUint64(24, BigInt(data.qwBaseOffset), true);
  // 0x20: u32
  if (data?.dwReserved_3 !== undefined) view.setUint32(32, Number(data.dwReserved_3), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(40, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  // 0x30: pointer
  if (data?.adwTrailingFill !== undefined) view.setBigUint64(48, data.adwTrailingFill === null ? 0n : BigInt(util.toPointer(data.adwTrailingFill)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVITIMECODEINDEX (size: 40)
 */
export interface AVITIMECODEINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
  /** array */
  aIndex: Deno.PointerValue | null;
}

export const sizeofAVITIMECODEINDEX = 40;

export function allocAVITIMECODEINDEX(data?: Partial<AVITIMECODEINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVITIMECODEINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(24, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  // 0x20: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(32, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVITCDLINDEX_ENTRY (size: 32)
 */
export interface AVITCDLINDEX_ENTRY {
  /** u32 */
  dwTick: number;
  /** Windows.Win32.Media.TIMECODE */
  time: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSMPTEflags: number;
  /** u32 */
  dwUser: number;
  /** array */
  szReelId: Deno.PointerValue | null;
}

export const sizeofAVITCDLINDEX_ENTRY = 32;

export function allocAVITCDLINDEX_ENTRY(data?: Partial<AVITCDLINDEX_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofAVITCDLINDEX_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTick !== undefined) view.setUint32(0, Number(data.dwTick), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.time !== undefined) view.setBigUint64(8, data.time === null ? 0n : BigInt(util.toPointer(data.time)), true);
  // 0x10: u32
  if (data?.dwSMPTEflags !== undefined) view.setUint32(16, Number(data.dwSMPTEflags), true);
  // 0x14: u32
  if (data?.dwUser !== undefined) view.setUint32(20, Number(data.dwUser), true);
  // 0x18: pointer
  if (data?.szReelId !== undefined) view.setBigUint64(24, data.szReelId === null ? 0n : BigInt(util.toPointer(data.szReelId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVITCDLINDEX (size: 48)
 */
export interface AVITCDLINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
  /** array */
  aIndex: Deno.PointerValue | null;
  /** array */
  adwTrailingFill: Deno.PointerValue | null;
}

export const sizeofAVITCDLINDEX = 48;

export function allocAVITCDLINDEX(data?: Partial<AVITCDLINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVITCDLINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(24, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  // 0x20: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(32, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  // 0x28: pointer
  if (data?.adwTrailingFill !== undefined) view.setBigUint64(40, data.adwTrailingFill === null ? 0n : BigInt(util.toPointer(data.adwTrailingFill)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVIFIELDINDEX (size: 48)
 */
export interface AVIFIELDINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** u64 */
  qwBaseOffset: Deno.PointerValue;
  /** u32 */
  dwReserved3: number;
  /** array */
  aIndex: Deno.PointerValue | null;
}

export const sizeofAVIFIELDINDEX = 48;

export function allocAVIFIELDINDEX(data?: Partial<AVIFIELDINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIFIELDINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.qwBaseOffset !== undefined) view.setBigUint64(24, BigInt(data.qwBaseOffset), true);
  // 0x20: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(32, Number(data.dwReserved3), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(40, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MainAVIHeader (size: 48)
 */
export interface MainAVIHeader {
  /** u32 */
  dwMicroSecPerFrame: number;
  /** u32 */
  dwMaxBytesPerSec: number;
  /** u32 */
  dwPaddingGranularity: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwTotalFrames: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwStreams: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofMainAVIHeader = 48;

export function allocMainAVIHeader(data?: Partial<MainAVIHeader>): Uint8Array {
  const buf = new Uint8Array(sizeofMainAVIHeader);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMicroSecPerFrame !== undefined) view.setUint32(0, Number(data.dwMicroSecPerFrame), true);
  // 0x04: u32
  if (data?.dwMaxBytesPerSec !== undefined) view.setUint32(4, Number(data.dwMaxBytesPerSec), true);
  // 0x08: u32
  if (data?.dwPaddingGranularity !== undefined) view.setUint32(8, Number(data.dwPaddingGranularity), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: u32
  if (data?.dwTotalFrames !== undefined) view.setUint32(16, Number(data.dwTotalFrames), true);
  // 0x14: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(20, Number(data.dwInitialFrames), true);
  // 0x18: u32
  if (data?.dwStreams !== undefined) view.setUint32(24, Number(data.dwStreams), true);
  // 0x1c: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(28, Number(data.dwSuggestedBufferSize), true);
  // 0x20: u32
  if (data?.dwWidth !== undefined) view.setUint32(32, Number(data.dwWidth), true);
  // 0x24: u32
  if (data?.dwHeight !== undefined) view.setUint32(36, Number(data.dwHeight), true);
  // 0x28: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(40, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVIStreamHeader (size: 56)
 */
export interface AVIStreamHeader {
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwFlags: number;
  /** u16 */
  wPriority: number;
  /** u16 */
  wLanguage: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwStart: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwQuality: number;
  /** u32 */
  dwSampleSize: number;
  /** Windows.Win32.Foundation.RECT */
  rcFrame: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAVIStreamHeader = 56;

export function allocAVIStreamHeader(data?: Partial<AVIStreamHeader>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIStreamHeader);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fccType !== undefined) view.setUint32(0, Number(data.fccType), true);
  // 0x04: u32
  if (data?.fccHandler !== undefined) view.setUint32(4, Number(data.fccHandler), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u16
  if (data?.wPriority !== undefined) view.setUint16(12, Number(data.wPriority), true);
  // 0x0e: u16
  if (data?.wLanguage !== undefined) view.setUint16(14, Number(data.wLanguage), true);
  // 0x10: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(16, Number(data.dwInitialFrames), true);
  // 0x14: u32
  if (data?.dwScale !== undefined) view.setUint32(20, Number(data.dwScale), true);
  // 0x18: u32
  if (data?.dwRate !== undefined) view.setUint32(24, Number(data.dwRate), true);
  // 0x1c: u32
  if (data?.dwStart !== undefined) view.setUint32(28, Number(data.dwStart), true);
  // 0x20: u32
  if (data?.dwLength !== undefined) view.setUint32(32, Number(data.dwLength), true);
  // 0x24: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(36, Number(data.dwSuggestedBufferSize), true);
  // 0x28: u32
  if (data?.dwQuality !== undefined) view.setUint32(40, Number(data.dwQuality), true);
  // 0x2c: u32
  if (data?.dwSampleSize !== undefined) view.setUint32(44, Number(data.dwSampleSize), true);
  // 0x30: pointer
  if (data?.rcFrame !== undefined) view.setBigUint64(48, data.rcFrame === null ? 0n : BigInt(util.toPointer(data.rcFrame)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVIINDEXENTRY (size: 16)
 */
export interface AVIINDEXENTRY {
  /** u32 */
  ckid: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwChunkOffset: number;
  /** u32 */
  dwChunkLength: number;
}

export const sizeofAVIINDEXENTRY = 16;

export function allocAVIINDEXENTRY(data?: Partial<AVIINDEXENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIINDEXENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ckid !== undefined) view.setUint32(0, Number(data.ckid), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwChunkOffset !== undefined) view.setUint32(8, Number(data.dwChunkOffset), true);
  // 0x0c: u32
  if (data?.dwChunkLength !== undefined) view.setUint32(12, Number(data.dwChunkLength), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AVIPALCHANGE (size: 16)
 */
export interface AVIPALCHANGE {
  /** u8 */
  bFirstEntry: number;
  /** u8 */
  bNumEntries: number;
  /** u16 */
  wFlags: number;
  /** array */
  peNew: Deno.PointerValue | null;
}

export const sizeofAVIPALCHANGE = 16;

export function allocAVIPALCHANGE(data?: Partial<AVIPALCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIPALCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bFirstEntry !== undefined) view.setUint8(0, Number(data.bFirstEntry));
  // 0x01: u8
  if (data?.bNumEntries !== undefined) view.setUint8(1, Number(data.bNumEntries));
  // 0x02: u16
  if (data?.wFlags !== undefined) view.setUint16(2, Number(data.wFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.peNew !== undefined) view.setBigUint64(8, data.peNew === null ? 0n : BigInt(util.toPointer(data.peNew)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_ERROR_CONCEALMENT (size: 8)
 */
export interface AM_AC3_ERROR_CONCEALMENT {
  /** Windows.Win32.Foundation.BOOL */
  fRepeatPreviousBlock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fErrorInCurrentBlock: boolean;
}

export const sizeofAM_AC3_ERROR_CONCEALMENT = 8;

export function allocAM_AC3_ERROR_CONCEALMENT(data?: Partial<AM_AC3_ERROR_CONCEALMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_ERROR_CONCEALMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fRepeatPreviousBlock !== undefined) view.setInt32(0, Number(data.fRepeatPreviousBlock), true);
  // 0x04: i32
  if (data?.fErrorInCurrentBlock !== undefined) view.setInt32(4, Number(data.fErrorInCurrentBlock), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_ALTERNATE_AUDIO (size: 8)
 */
export interface AM_AC3_ALTERNATE_AUDIO {
  /** Windows.Win32.Foundation.BOOL */
  fStereo: boolean;
  /** u32 */
  DualMode: number;
}

export const sizeofAM_AC3_ALTERNATE_AUDIO = 8;

export function allocAM_AC3_ALTERNATE_AUDIO(data?: Partial<AM_AC3_ALTERNATE_AUDIO>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_ALTERNATE_AUDIO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fStereo !== undefined) view.setInt32(0, Number(data.fStereo), true);
  // 0x04: u32
  if (data?.DualMode !== undefined) view.setUint32(4, Number(data.DualMode), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_DOWNMIX (size: 8)
 */
export interface AM_AC3_DOWNMIX {
  /** Windows.Win32.Foundation.BOOL */
  fDownMix: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDolbySurround: boolean;
}

export const sizeofAM_AC3_DOWNMIX = 8;

export function allocAM_AC3_DOWNMIX(data?: Partial<AM_AC3_DOWNMIX>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_DOWNMIX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fDownMix !== undefined) view.setInt32(0, Number(data.fDownMix), true);
  // 0x04: i32
  if (data?.fDolbySurround !== undefined) view.setInt32(4, Number(data.fDolbySurround), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_BIT_STREAM_MODE (size: 8)
 */
export interface AM_AC3_BIT_STREAM_MODE {
  /** i32 */
  BitStreamMode: number;
}

export const sizeofAM_AC3_BIT_STREAM_MODE = 8;

export function allocAM_AC3_BIT_STREAM_MODE(data?: Partial<AM_AC3_BIT_STREAM_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_BIT_STREAM_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BitStreamMode !== undefined) view.setInt32(0, Number(data.BitStreamMode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_DIALOGUE_LEVEL (size: 8)
 */
export interface AM_AC3_DIALOGUE_LEVEL {
  /** u32 */
  DialogueLevel: number;
}

export const sizeofAM_AC3_DIALOGUE_LEVEL = 8;

export function allocAM_AC3_DIALOGUE_LEVEL(data?: Partial<AM_AC3_DIALOGUE_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_DIALOGUE_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DialogueLevel !== undefined) view.setUint32(0, Number(data.DialogueLevel), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_ROOM_TYPE (size: 8)
 */
export interface AM_AC3_ROOM_TYPE {
  /** Windows.Win32.Foundation.BOOL */
  fLargeRoom: boolean;
}

export const sizeofAM_AC3_ROOM_TYPE = 8;

export function allocAM_AC3_ROOM_TYPE(data?: Partial<AM_AC3_ROOM_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_ROOM_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fLargeRoom !== undefined) view.setInt32(0, Number(data.fLargeRoom), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVD_YUV (size: 8)
 */
export interface AM_DVD_YUV {
  /** u8 */
  Reserved: number;
  /** u8 */
  Y: number;
  /** u8 */
  U: number;
  /** u8 */
  V: number;
}

export const sizeofAM_DVD_YUV = 8;

export function allocAM_DVD_YUV(data?: Partial<AM_DVD_YUV>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVD_YUV);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Reserved !== undefined) view.setUint8(0, Number(data.Reserved));
  // 0x01: u8
  if (data?.Y !== undefined) view.setUint8(1, Number(data.Y));
  // 0x02: u8
  if (data?.U !== undefined) view.setUint8(2, Number(data.U));
  // 0x03: u8
  if (data?.V !== undefined) view.setUint8(3, Number(data.V));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_PROPERTY_SPPAL (size: 8)
 */
export interface AM_PROPERTY_SPPAL {
  /** array */
  sppal: Deno.PointerValue | null;
}

export const sizeofAM_PROPERTY_SPPAL = 8;

export function allocAM_PROPERTY_SPPAL(data?: Partial<AM_PROPERTY_SPPAL>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_PROPERTY_SPPAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sppal !== undefined) view.setBigUint64(0, data.sppal === null ? 0n : BigInt(util.toPointer(data.sppal)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_COLCON (size: 8)
 */
export interface AM_COLCON {
  /** u8 */
  _bitfield1: number;
  /** u8 */
  _bitfield2: number;
  /** u8 */
  _bitfield3: number;
  /** u8 */
  _bitfield4: number;
}

export const sizeofAM_COLCON = 8;

export function allocAM_COLCON(data?: Partial<AM_COLCON>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_COLCON);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield1 !== undefined) view.setUint8(0, Number(data._bitfield1));
  // 0x01: u8
  if (data?._bitfield2 !== undefined) view.setUint8(1, Number(data._bitfield2));
  // 0x02: u8
  if (data?._bitfield3 !== undefined) view.setUint8(2, Number(data._bitfield3));
  // 0x03: u8
  if (data?._bitfield4 !== undefined) view.setUint8(3, Number(data._bitfield4));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_PROPERTY_SPHLI (size: 32)
 */
export interface AM_PROPERTY_SPHLI {
  /** u16 */
  HLISS: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  StartPTM: number;
  /** u32 */
  EndPTM: number;
  /** u16 */
  StartX: number;
  /** u16 */
  StartY: number;
  /** u16 */
  StopX: number;
  /** u16 */
  StopY: number;
  /** Windows.Win32.Media.DirectShow.AM_COLCON */
  ColCon: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAM_PROPERTY_SPHLI = 32;

export function allocAM_PROPERTY_SPHLI(data?: Partial<AM_PROPERTY_SPHLI>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_PROPERTY_SPHLI);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.HLISS !== undefined) view.setUint16(0, Number(data.HLISS), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.StartPTM !== undefined) view.setUint32(4, Number(data.StartPTM), true);
  // 0x08: u32
  if (data?.EndPTM !== undefined) view.setUint32(8, Number(data.EndPTM), true);
  // 0x0c: u16
  if (data?.StartX !== undefined) view.setUint16(12, Number(data.StartX), true);
  // 0x0e: u16
  if (data?.StartY !== undefined) view.setUint16(14, Number(data.StartY), true);
  // 0x10: u16
  if (data?.StopX !== undefined) view.setUint16(16, Number(data.StopX), true);
  // 0x12: u16
  if (data?.StopY !== undefined) view.setUint16(18, Number(data.StopY), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ColCon !== undefined) view.setBigUint64(24, data.ColCon === null ? 0n : BigInt(util.toPointer(data.ColCon)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVDCOPY_CHLGKEY (size: 16)
 */
export interface AM_DVDCOPY_CHLGKEY {
  /** array */
  ChlgKey: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofAM_DVDCOPY_CHLGKEY = 16;

export function allocAM_DVDCOPY_CHLGKEY(data?: Partial<AM_DVDCOPY_CHLGKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVDCOPY_CHLGKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ChlgKey !== undefined) view.setBigUint64(0, data.ChlgKey === null ? 0n : BigInt(util.toPointer(data.ChlgKey)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVDCOPY_BUSKEY (size: 16)
 */
export interface AM_DVDCOPY_BUSKEY {
  /** array */
  BusKey: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofAM_DVDCOPY_BUSKEY = 16;

export function allocAM_DVDCOPY_BUSKEY(data?: Partial<AM_DVDCOPY_BUSKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVDCOPY_BUSKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BusKey !== undefined) view.setBigUint64(0, data.BusKey === null ? 0n : BigInt(util.toPointer(data.BusKey)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVDCOPY_DISCKEY (size: 8)
 */
export interface AM_DVDCOPY_DISCKEY {
  /** array */
  DiscKey: Deno.PointerValue | null;
}

export const sizeofAM_DVDCOPY_DISCKEY = 8;

export function allocAM_DVDCOPY_DISCKEY(data?: Partial<AM_DVDCOPY_DISCKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVDCOPY_DISCKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DiscKey !== undefined) view.setBigUint64(0, data.DiscKey === null ? 0n : BigInt(util.toPointer(data.DiscKey)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVDCOPY_TITLEKEY (size: 32)
 */
export interface AM_DVDCOPY_TITLEKEY {
  /** u32 */
  KeyFlags: number;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  TitleKey: Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofAM_DVDCOPY_TITLEKEY = 32;

export function allocAM_DVDCOPY_TITLEKEY(data?: Partial<AM_DVDCOPY_TITLEKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVDCOPY_TITLEKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.KeyFlags !== undefined) view.setUint32(0, Number(data.KeyFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(8, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x10: pointer
  if (data?.TitleKey !== undefined) view.setBigUint64(16, data.TitleKey === null ? 0n : BigInt(util.toPointer(data.TitleKey)), true);
  // 0x18: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(24, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_COPY_MACROVISION (size: 8)
 */
export interface AM_COPY_MACROVISION {
  /** u32 */
  MACROVISIONLevel: number;
}

export const sizeofAM_COPY_MACROVISION = 8;

export function allocAM_COPY_MACROVISION(data?: Partial<AM_COPY_MACROVISION>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_COPY_MACROVISION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MACROVISIONLevel !== undefined) view.setUint32(0, Number(data.MACROVISIONLevel), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVDCOPY_SET_COPY_STATE (size: 8)
 */
export interface AM_DVDCOPY_SET_COPY_STATE {
  /** u32 */
  DVDCopyState: number;
}

export const sizeofAM_DVDCOPY_SET_COPY_STATE = 8;

export function allocAM_DVDCOPY_SET_COPY_STATE(data?: Partial<AM_DVDCOPY_SET_COPY_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVDCOPY_SET_COPY_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DVDCopyState !== undefined) view.setUint32(0, Number(data.DVDCopyState), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVD_REGION (size: 8)
 */
export interface DVD_REGION {
  /** u8 */
  CopySystem: number;
  /** u8 */
  RegionData: number;
  /** u8 */
  SystemRegion: number;
  /** u8 */
  ResetCount: number;
}

export const sizeofDVD_REGION = 8;

export function allocDVD_REGION(data?: Partial<DVD_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.CopySystem !== undefined) view.setUint8(0, Number(data.CopySystem));
  // 0x01: u8
  if (data?.RegionData !== undefined) view.setUint8(1, Number(data.RegionData));
  // 0x02: u8
  if (data?.SystemRegion !== undefined) view.setUint8(2, Number(data.SystemRegion));
  // 0x03: u8
  if (data?.ResetCount !== undefined) view.setUint8(3, Number(data.ResetCount));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_DvdKaraokeData (size: 8)
 */
export interface AM_DvdKaraokeData {
  /** u32 */
  dwDownmix: number;
  /** u32 */
  dwSpeakerAssignment: number;
}

export const sizeofAM_DvdKaraokeData = 8;

export function allocAM_DvdKaraokeData(data?: Partial<AM_DvdKaraokeData>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DvdKaraokeData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDownmix !== undefined) view.setUint32(0, Number(data.dwDownmix), true);
  // 0x04: u32
  if (data?.dwSpeakerAssignment !== undefined) view.setUint32(4, Number(data.dwSpeakerAssignment), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_SimpleRateChange (size: 16)
 */
export interface AM_SimpleRateChange {
  /** i64 */
  StartTime: Deno.PointerValue;
  /** i32 */
  Rate: number;
}

export const sizeofAM_SimpleRateChange = 16;

export function allocAM_SimpleRateChange(data?: Partial<AM_SimpleRateChange>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_SimpleRateChange);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartTime !== undefined) view.setBigInt64(0, BigInt(data.StartTime), true);
  // 0x08: i32
  if (data?.Rate !== undefined) view.setInt32(8, Number(data.Rate), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_QueryRate (size: 8)
 */
export interface AM_QueryRate {
  /** i32 */
  lMaxForwardFullFrame: number;
  /** i32 */
  lMaxReverseFullFrame: number;
}

export const sizeofAM_QueryRate = 8;

export function allocAM_QueryRate(data?: Partial<AM_QueryRate>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_QueryRate);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lMaxForwardFullFrame !== undefined) view.setInt32(0, Number(data.lMaxForwardFullFrame), true);
  // 0x04: i32
  if (data?.lMaxReverseFullFrame !== undefined) view.setInt32(4, Number(data.lMaxReverseFullFrame), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_ExactRateChange (size: 16)
 */
export interface AM_ExactRateChange {
  /** i64 */
  OutputZeroTime: Deno.PointerValue;
  /** i32 */
  Rate: number;
}

export const sizeofAM_ExactRateChange = 16;

export function allocAM_ExactRateChange(data?: Partial<AM_ExactRateChange>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_ExactRateChange);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.OutputZeroTime !== undefined) view.setBigInt64(0, BigInt(data.OutputZeroTime), true);
  // 0x08: i32
  if (data?.Rate !== undefined) view.setInt32(8, Number(data.Rate), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVD_ChangeRate (size: 24)
 */
export interface AM_DVD_ChangeRate {
  /** i64 */
  StartInTime: Deno.PointerValue;
  /** i64 */
  StartOutTime: Deno.PointerValue;
  /** i32 */
  Rate: number;
}

export const sizeofAM_DVD_ChangeRate = 24;

export function allocAM_DVD_ChangeRate(data?: Partial<AM_DVD_ChangeRate>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVD_ChangeRate);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartInTime !== undefined) view.setBigInt64(0, BigInt(data.StartInTime), true);
  // 0x08: i64
  if (data?.StartOutTime !== undefined) view.setBigInt64(8, BigInt(data.StartOutTime), true);
  // 0x10: i32
  if (data?.Rate !== undefined) view.setInt32(16, Number(data.Rate), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MP_PARAMINFO (size: 40)
 */
export interface MP_PARAMINFO {
  /** Windows.Win32.Media.DirectShow.MP_TYPE */
  mpType: MP_TYPE;
  /** u32 */
  mopCaps: number;
  /** f32 */
  mpdMinValue: number;
  /** f32 */
  mpdMaxValue: number;
  /** f32 */
  mpdNeutralValue: number;
  /** array */
  szUnitText: Deno.PointerValue | null;
  /** array */
  szLabel: Deno.PointerValue | null;
}

export const sizeofMP_PARAMINFO = 40;

export function allocMP_PARAMINFO(data?: Partial<MP_PARAMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMP_PARAMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.mpType !== undefined) view.setInt32(0, Number(data.mpType), true);
  // 0x04: u32
  if (data?.mopCaps !== undefined) view.setUint32(4, Number(data.mopCaps), true);
  // 0x08: f32
  if (data?.mpdMinValue !== undefined) view.setFloat32(8, Number(data.mpdMinValue), true);
  // 0x0c: f32
  if (data?.mpdMaxValue !== undefined) view.setFloat32(12, Number(data.mpdMaxValue), true);
  // 0x10: f32
  if (data?.mpdNeutralValue !== undefined) view.setFloat32(16, Number(data.mpdNeutralValue), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szUnitText !== undefined) view.setBigUint64(24, data.szUnitText === null ? 0n : BigInt(util.toPointer(data.szUnitText)), true);
  // 0x20: pointer
  if (data?.szLabel !== undefined) view.setBigUint64(32, data.szLabel === null ? 0n : BigInt(util.toPointer(data.szLabel)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MP_ENVELOPE_SEGMENT (size: 32)
 */
export interface MP_ENVELOPE_SEGMENT {
  /** i64 */
  rtStart: Deno.PointerValue;
  /** i64 */
  rtEnd: Deno.PointerValue;
  /** f32 */
  valStart: number;
  /** f32 */
  valEnd: number;
  /** Windows.Win32.Media.DirectShow.MP_CURVE_TYPE */
  iCurve: MP_CURVE_TYPE;
  /** u32 */
  flags: number;
}

export const sizeofMP_ENVELOPE_SEGMENT = 32;

export function allocMP_ENVELOPE_SEGMENT(data?: Partial<MP_ENVELOPE_SEGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMP_ENVELOPE_SEGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.rtStart !== undefined) view.setBigInt64(0, BigInt(data.rtStart), true);
  // 0x08: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(8, BigInt(data.rtEnd), true);
  // 0x10: f32
  if (data?.valStart !== undefined) view.setFloat32(16, Number(data.valStart), true);
  // 0x14: f32
  if (data?.valEnd !== undefined) view.setFloat32(20, Number(data.valEnd), true);
  // 0x18: i32
  if (data?.iCurve !== undefined) view.setInt32(24, Number(data.iCurve), true);
  // 0x1c: u32
  if (data?.flags !== undefined) view.setUint32(28, Number(data.flags), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VFW_FILTERLIST (size: 16)
 */
export interface VFW_FILTERLIST {
  /** u32 */
  cFilters: number;
  /** array */
  aClsId: Deno.PointerValue | null;
}

export const sizeofVFW_FILTERLIST = 16;

export function allocVFW_FILTERLIST(data?: Partial<VFW_FILTERLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofVFW_FILTERLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cFilters !== undefined) view.setUint32(0, Number(data.cFilters), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aClsId !== undefined) view.setBigUint64(8, data.aClsId === null ? 0n : BigInt(util.toPointer(data.aClsId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat (size: 8)
 */
export interface DXVA2_ExtendedFormat {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2_ExtendedFormat = 8;

export function allocDXVA2_ExtendedFormat(data?: Partial<DXVA2_ExtendedFormat>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_ExtendedFormat);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 (size: 8)
 */
export interface DXVA2_Fixed32 {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2_Fixed32 = 8;

export function allocDXVA2_Fixed32(data?: Partial<DXVA2_Fixed32>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_Fixed32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2_VIDEOSAMPLE (size: 72)
 */
export interface DXVA2_VIDEOSAMPLE {
  /** i64 */
  Start: Deno.PointerValue;
  /** i64 */
  End: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat */
  SampleFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SampleFlags: number;
  /** ptr */
  SrcResource: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.RECT */
  SrcRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  DstRect: Uint8Array | Deno.PointerValue | null;
  /** array */
  Pal: Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  PlanarAlpha: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2_VIDEOSAMPLE = 72;

export function allocDXVA2_VIDEOSAMPLE(data?: Partial<DXVA2_VIDEOSAMPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VIDEOSAMPLE);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Start !== undefined) view.setBigInt64(0, BigInt(data.Start), true);
  // 0x08: i64
  if (data?.End !== undefined) view.setBigInt64(8, BigInt(data.End), true);
  // 0x10: pointer
  if (data?.SampleFormat !== undefined) view.setBigUint64(16, data.SampleFormat === null ? 0n : BigInt(util.toPointer(data.SampleFormat)), true);
  // 0x18: u32
  if (data?.SampleFlags !== undefined) view.setUint32(24, Number(data.SampleFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.SrcResource !== undefined) view.setBigUint64(32, data.SrcResource === null ? 0n : BigInt(util.toPointer(data.SrcResource)), true);
  // 0x28: pointer
  if (data?.SrcRect !== undefined) view.setBigUint64(40, data.SrcRect === null ? 0n : BigInt(util.toPointer(data.SrcRect)), true);
  // 0x30: pointer
  if (data?.DstRect !== undefined) view.setBigUint64(48, data.DstRect === null ? 0n : BigInt(util.toPointer(data.DstRect)), true);
  // 0x38: pointer
  if (data?.Pal !== undefined) view.setBigUint64(56, data.Pal === null ? 0n : BigInt(util.toPointer(data.Pal)), true);
  // 0x40: pointer
  if (data?.PlanarAlpha !== undefined) view.setBigUint64(64, data.PlanarAlpha === null ? 0n : BigInt(util.toPointer(data.PlanarAlpha)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_AYUVSample16 (size: 8)
 */
export interface DXVA2_AYUVSample16 {
  /** u16 */
  Cr: number;
  /** u16 */
  Cb: number;
  /** u16 */
  Y: number;
  /** u16 */
  Alpha: number;
}

export const sizeofDXVA2_AYUVSample16 = 8;

export function allocDXVA2_AYUVSample16(data?: Partial<DXVA2_AYUVSample16>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_AYUVSample16);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Cr !== undefined) view.setUint16(0, Number(data.Cr), true);
  // 0x02: u16
  if (data?.Cb !== undefined) view.setUint16(2, Number(data.Cb), true);
  // 0x04: u16
  if (data?.Y !== undefined) view.setUint16(4, Number(data.Y), true);
  // 0x06: u16
  if (data?.Alpha !== undefined) view.setUint16(6, Number(data.Alpha), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_ProcAmpValues (size: 32)
 */
export interface DXVA2_ProcAmpValues {
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Brightness: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Contrast: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Hue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Saturation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2_ProcAmpValues = 32;

export function allocDXVA2_ProcAmpValues(data?: Partial<DXVA2_ProcAmpValues>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_ProcAmpValues);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Brightness !== undefined) view.setBigUint64(0, data.Brightness === null ? 0n : BigInt(util.toPointer(data.Brightness)), true);
  // 0x08: pointer
  if (data?.Contrast !== undefined) view.setBigUint64(8, data.Contrast === null ? 0n : BigInt(util.toPointer(data.Contrast)), true);
  // 0x10: pointer
  if (data?.Hue !== undefined) view.setBigUint64(16, data.Hue === null ? 0n : BigInt(util.toPointer(data.Hue)), true);
  // 0x18: pointer
  if (data?.Saturation !== undefined) view.setBigUint64(24, data.Saturation === null ? 0n : BigInt(util.toPointer(data.Saturation)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues (size: 24)
 */
export interface DXVA2_FilterValues {
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Level: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Threshold: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Radius: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2_FilterValues = 24;

export function allocDXVA2_FilterValues(data?: Partial<DXVA2_FilterValues>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_FilterValues);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Level !== undefined) view.setBigUint64(0, data.Level === null ? 0n : BigInt(util.toPointer(data.Level)), true);
  // 0x08: pointer
  if (data?.Threshold !== undefined) view.setBigUint64(8, data.Threshold === null ? 0n : BigInt(util.toPointer(data.Threshold)), true);
  // 0x10: pointer
  if (data?.Radius !== undefined) view.setBigUint64(16, data.Radius === null ? 0n : BigInt(util.toPointer(data.Radius)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2_VIDEOPROCESSBLT (size: 120)
 */
export interface DXVA2_VIDEOPROCESSBLT {
  /** i64 */
  TargetFrame: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  TargetRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  ConstrictionSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamingFlags: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_AYUVSample16 */
  BackgroundColor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat */
  DestFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DestFlags: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ProcAmpValues */
  ProcAmpValues: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Alpha: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  NoiseFilterLuma: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  NoiseFilterChroma: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  DetailFilterLuma: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  DetailFilterChroma: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pSrcSurfaces: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumSrcSurfaces: number;
}

export const sizeofDXVA2_VIDEOPROCESSBLT = 120;

export function allocDXVA2_VIDEOPROCESSBLT(data?: Partial<DXVA2_VIDEOPROCESSBLT>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VIDEOPROCESSBLT);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.TargetFrame !== undefined) view.setBigInt64(0, BigInt(data.TargetFrame), true);
  // 0x08: pointer
  if (data?.TargetRect !== undefined) view.setBigUint64(8, data.TargetRect === null ? 0n : BigInt(util.toPointer(data.TargetRect)), true);
  // 0x10: pointer
  if (data?.ConstrictionSize !== undefined) view.setBigUint64(16, data.ConstrictionSize === null ? 0n : BigInt(util.toPointer(data.ConstrictionSize)), true);
  // 0x18: u32
  if (data?.StreamingFlags !== undefined) view.setUint32(24, Number(data.StreamingFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(32, data.BackgroundColor === null ? 0n : BigInt(util.toPointer(data.BackgroundColor)), true);
  // 0x28: pointer
  if (data?.DestFormat !== undefined) view.setBigUint64(40, data.DestFormat === null ? 0n : BigInt(util.toPointer(data.DestFormat)), true);
  // 0x30: u32
  if (data?.DestFlags !== undefined) view.setUint32(48, Number(data.DestFlags), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ProcAmpValues !== undefined) view.setBigUint64(56, data.ProcAmpValues === null ? 0n : BigInt(util.toPointer(data.ProcAmpValues)), true);
  // 0x40: pointer
  if (data?.Alpha !== undefined) view.setBigUint64(64, data.Alpha === null ? 0n : BigInt(util.toPointer(data.Alpha)), true);
  // 0x48: pointer
  if (data?.NoiseFilterLuma !== undefined) view.setBigUint64(72, data.NoiseFilterLuma === null ? 0n : BigInt(util.toPointer(data.NoiseFilterLuma)), true);
  // 0x50: pointer
  if (data?.NoiseFilterChroma !== undefined) view.setBigUint64(80, data.NoiseFilterChroma === null ? 0n : BigInt(util.toPointer(data.NoiseFilterChroma)), true);
  // 0x58: pointer
  if (data?.DetailFilterLuma !== undefined) view.setBigUint64(88, data.DetailFilterLuma === null ? 0n : BigInt(util.toPointer(data.DetailFilterLuma)), true);
  // 0x60: pointer
  if (data?.DetailFilterChroma !== undefined) view.setBigUint64(96, data.DetailFilterChroma === null ? 0n : BigInt(util.toPointer(data.DetailFilterChroma)), true);
  // 0x68: pointer
  if (data?.pSrcSurfaces !== undefined) view.setBigUint64(104, data.pSrcSurfaces === null ? 0n : BigInt(util.toPointer(data.pSrcSurfaces)), true);
  // 0x70: u32
  if (data?.NumSrcSurfaces !== undefined) view.setUint32(112, Number(data.NumSrcSurfaces), true);
  // 0x74: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2SW_CALLBACKS (size: 112)
 */
export interface DXVA2SW_CALLBACKS {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT */
  GetVideoProcessorRenderTargetCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS */
  GetVideoProcessorRenderTargets: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETVIDEOPROCESSORCAPS */
  GetVideoProcessorCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT */
  GetVideoProcessorSubStreamFormatCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS */
  GetVideoProcessorSubStreamFormats: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETPROCAMPRANGE */
  GetProcAmpRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETFILTERPROPERTYRANGE */
  GetFilterPropertyRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_CREATEVIDEOPROCESSDEVICE */
  CreateVideoProcessDevice: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_DESTROYVIDEOPROCESSDEVICE */
  DestroyVideoProcessDevice: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_VIDEOPROCESSBEGINFRAME */
  VideoProcessBeginFrame: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_VIDEOPROCESSENDFRAME */
  VideoProcessEndFrame: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_VIDEOPROCESSSETRENDERTARGET */
  VideoProcessSetRenderTarget: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_VIDEOPROCESSBLT */
  VideoProcessBlt: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2SW_CALLBACKS = 112;

export function allocDXVA2SW_CALLBACKS(data?: Partial<DXVA2SW_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2SW_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.GetVideoProcessorRenderTargetCount !== undefined) view.setBigUint64(8, data.GetVideoProcessorRenderTargetCount === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorRenderTargetCount)), true);
  // 0x10: pointer
  if (data?.GetVideoProcessorRenderTargets !== undefined) view.setBigUint64(16, data.GetVideoProcessorRenderTargets === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorRenderTargets)), true);
  // 0x18: pointer
  if (data?.GetVideoProcessorCaps !== undefined) view.setBigUint64(24, data.GetVideoProcessorCaps === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorCaps)), true);
  // 0x20: pointer
  if (data?.GetVideoProcessorSubStreamFormatCount !== undefined) view.setBigUint64(32, data.GetVideoProcessorSubStreamFormatCount === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorSubStreamFormatCount)), true);
  // 0x28: pointer
  if (data?.GetVideoProcessorSubStreamFormats !== undefined) view.setBigUint64(40, data.GetVideoProcessorSubStreamFormats === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorSubStreamFormats)), true);
  // 0x30: pointer
  if (data?.GetProcAmpRange !== undefined) view.setBigUint64(48, data.GetProcAmpRange === null ? 0n : BigInt(util.toPointer(data.GetProcAmpRange)), true);
  // 0x38: pointer
  if (data?.GetFilterPropertyRange !== undefined) view.setBigUint64(56, data.GetFilterPropertyRange === null ? 0n : BigInt(util.toPointer(data.GetFilterPropertyRange)), true);
  // 0x40: pointer
  if (data?.CreateVideoProcessDevice !== undefined) view.setBigUint64(64, data.CreateVideoProcessDevice === null ? 0n : BigInt(util.toPointer(data.CreateVideoProcessDevice)), true);
  // 0x48: pointer
  if (data?.DestroyVideoProcessDevice !== undefined) view.setBigUint64(72, data.DestroyVideoProcessDevice === null ? 0n : BigInt(util.toPointer(data.DestroyVideoProcessDevice)), true);
  // 0x50: pointer
  if (data?.VideoProcessBeginFrame !== undefined) view.setBigUint64(80, data.VideoProcessBeginFrame === null ? 0n : BigInt(util.toPointer(data.VideoProcessBeginFrame)), true);
  // 0x58: pointer
  if (data?.VideoProcessEndFrame !== undefined) view.setBigUint64(88, data.VideoProcessEndFrame === null ? 0n : BigInt(util.toPointer(data.VideoProcessEndFrame)), true);
  // 0x60: pointer
  if (data?.VideoProcessSetRenderTarget !== undefined) view.setBigUint64(96, data.VideoProcessSetRenderTarget === null ? 0n : BigInt(util.toPointer(data.VideoProcessSetRenderTarget)), true);
  // 0x68: pointer
  if (data?.VideoProcessBlt !== undefined) view.setBigUint64(104, data.VideoProcessBlt === null ? 0n : BigInt(util.toPointer(data.VideoProcessBlt)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER (size: 56)
 */
export interface EVENT_TRACE_HEADER {
  /** u16 */
  Size: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ThreadId: number;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeStamp: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_TRACE_HEADER = 56;

export function allocEVENT_TRACE_HEADER(data?: Partial<EVENT_TRACE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_TRACE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Size !== undefined) view.setUint16(0, Number(data.Size), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: u32
  if (data?.ThreadId !== undefined) view.setUint32(24, Number(data.ThreadId), true);
  // 0x1c: u32
  if (data?.ProcessId !== undefined) view.setUint32(28, Number(data.ProcessId), true);
  // 0x20: pointer
  if (data?.TimeStamp !== undefined) view.setBigUint64(32, data.TimeStamp === null ? 0n : BigInt(util.toPointer(data.TimeStamp)), true);
  // 0x28: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(40, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x30: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(48, data.Anonymous4 === null ? 0n : BigInt(util.toPointer(data.Anonymous4)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_DecodeDevCreatedData (size: 48)
 */
export interface DXVA2Trace_DecodeDevCreatedData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** u64 */
  pD3DDevice: Deno.PointerValue;
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_DecodeDevCreatedData = 48;

export function allocDXVA2Trace_DecodeDevCreatedData(data?: Partial<DXVA2Trace_DecodeDevCreatedData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_DecodeDevCreatedData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: u64
  if (data?.pD3DDevice !== undefined) view.setBigUint64(16, BigInt(data.pD3DDevice), true);
  // 0x18: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(24, data.DeviceGuid === null ? 0n : BigInt(util.toPointer(data.DeviceGuid)), true);
  // 0x20: u32
  if (data?.Width !== undefined) view.setUint32(32, Number(data.Width), true);
  // 0x24: u32
  if (data?.Height !== undefined) view.setUint32(36, Number(data.Height), true);
  // 0x28: i32
  if (data?.Enter !== undefined) view.setInt32(40, Number(data.Enter), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_DecodeDeviceData (size: 24)
 */
export interface DXVA2Trace_DecodeDeviceData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_DecodeDeviceData = 24;

export function allocDXVA2Trace_DecodeDeviceData(data?: Partial<DXVA2Trace_DecodeDeviceData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_DecodeDeviceData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: i32
  if (data?.Enter !== undefined) view.setInt32(16, Number(data.Enter), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_DecodeDevBeginFrameData (size: 32)
 */
export interface DXVA2Trace_DecodeDevBeginFrameData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** u64 */
  pRenderTarget: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_DecodeDevBeginFrameData = 32;

export function allocDXVA2Trace_DecodeDevBeginFrameData(data?: Partial<DXVA2Trace_DecodeDevBeginFrameData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_DecodeDevBeginFrameData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: u64
  if (data?.pRenderTarget !== undefined) view.setBigUint64(16, BigInt(data.pRenderTarget), true);
  // 0x18: i32
  if (data?.Enter !== undefined) view.setInt32(24, Number(data.Enter), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_DecodeDevGetBufferData (size: 24)
 */
export interface DXVA2Trace_DecodeDevGetBufferData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** u32 */
  BufferType: number;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_DecodeDevGetBufferData = 24;

export function allocDXVA2Trace_DecodeDevGetBufferData(data?: Partial<DXVA2Trace_DecodeDevGetBufferData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_DecodeDevGetBufferData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: u32
  if (data?.BufferType !== undefined) view.setUint32(16, Number(data.BufferType), true);
  // 0x14: i32
  if (data?.Enter !== undefined) view.setInt32(20, Number(data.Enter), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_VideoProcessDevCreatedData (size: 48)
 */
export interface DXVA2Trace_VideoProcessDevCreatedData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** u64 */
  pD3DDevice: Deno.PointerValue;
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RTFourCC: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_VideoProcessDevCreatedData = 48;

export function allocDXVA2Trace_VideoProcessDevCreatedData(data?: Partial<DXVA2Trace_VideoProcessDevCreatedData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_VideoProcessDevCreatedData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: u64
  if (data?.pD3DDevice !== undefined) view.setBigUint64(16, BigInt(data.pD3DDevice), true);
  // 0x18: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(24, data.DeviceGuid === null ? 0n : BigInt(util.toPointer(data.DeviceGuid)), true);
  // 0x20: u32
  if (data?.RTFourCC !== undefined) view.setUint32(32, Number(data.RTFourCC), true);
  // 0x24: u32
  if (data?.Width !== undefined) view.setUint32(36, Number(data.Width), true);
  // 0x28: u32
  if (data?.Height !== undefined) view.setUint32(40, Number(data.Height), true);
  // 0x2c: i32
  if (data?.Enter !== undefined) view.setInt32(44, Number(data.Enter), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_VideoProcessDeviceData (size: 24)
 */
export interface DXVA2Trace_VideoProcessDeviceData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_VideoProcessDeviceData = 24;

export function allocDXVA2Trace_VideoProcessDeviceData(data?: Partial<DXVA2Trace_VideoProcessDeviceData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_VideoProcessDeviceData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: i32
  if (data?.Enter !== undefined) view.setInt32(16, Number(data.Enter), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2TraceVideoProcessBltData (size: 48)
 */
export interface DXVA2TraceVideoProcessBltData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** u64 */
  pRenderTarget: Deno.PointerValue;
  /** u64 */
  TargetFrameTime: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  TargetRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2TraceVideoProcessBltData = 48;

export function allocDXVA2TraceVideoProcessBltData(data?: Partial<DXVA2TraceVideoProcessBltData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2TraceVideoProcessBltData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: u64
  if (data?.pRenderTarget !== undefined) view.setBigUint64(16, BigInt(data.pRenderTarget), true);
  // 0x18: u64
  if (data?.TargetFrameTime !== undefined) view.setBigUint64(24, BigInt(data.TargetFrameTime), true);
  // 0x20: pointer
  if (data?.TargetRect !== undefined) view.setBigUint64(32, data.TargetRect === null ? 0n : BigInt(util.toPointer(data.TargetRect)), true);
  // 0x28: i32
  if (data?.Enter !== undefined) view.setInt32(40, Number(data.Enter), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.CodecAPIEventData (size: 24)
 */
export interface CodecAPIEventData {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dataLength: number;
  /** array */
  reserved: Deno.PointerValue | null;
}

export const sizeofCodecAPIEventData = 24;

export function allocCodecAPIEventData(data?: Partial<CodecAPIEventData>): Uint8Array {
  const buf = new Uint8Array(sizeofCodecAPIEventData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: u32
  if (data?.dataLength !== undefined) view.setUint32(8, Number(data.dataLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.reserved !== undefined) view.setBigUint64(16, data.reserved === null ? 0n : BigInt(util.toPointer(data.reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.VIDEOINFOHEADER (size: 40)
 */
export interface VIDEOINFOHEADER {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVIDEOINFOHEADER = 40;

export function allocVIDEOINFOHEADER(data?: Partial<VIDEOINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEOINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(32, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MPEG1VIDEOINFO (size: 24)
 */
export interface MPEG1VIDEOINFO {
  /** Windows.Win32.Media.MediaFoundation.VIDEOINFOHEADER */
  hdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStartTimeCode: number;
  /** u32 */
  cbSequenceHeader: number;
  /** array */
  bSequenceHeader: Deno.PointerValue | null;
}

export const sizeofMPEG1VIDEOINFO = 24;

export function allocMPEG1VIDEOINFO(data?: Partial<MPEG1VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG1VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(util.toPointer(data.hdr)), true);
  // 0x08: u32
  if (data?.dwStartTimeCode !== undefined) view.setUint32(8, Number(data.dwStartTimeCode), true);
  // 0x0c: u32
  if (data?.cbSequenceHeader !== undefined) view.setUint32(12, Number(data.cbSequenceHeader), true);
  // 0x10: pointer
  if (data?.bSequenceHeader !== undefined) view.setBigUint64(16, data.bSequenceHeader === null ? 0n : BigInt(util.toPointer(data.bSequenceHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.VIDEOINFOHEADER2 (size: 72)
 */
export interface VIDEOINFOHEADER2 {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** u32 */
  dwInterlaceFlags: number;
  /** u32 */
  dwCopyProtectFlags: number;
  /** u32 */
  dwPictAspectRatioX: number;
  /** u32 */
  dwPictAspectRatioY: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved2: number;
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVIDEOINFOHEADER2 = 72;

export function allocVIDEOINFOHEADER2(data?: Partial<VIDEOINFOHEADER2>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEOINFOHEADER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: u32
  if (data?.dwInterlaceFlags !== undefined) view.setUint32(32, Number(data.dwInterlaceFlags), true);
  // 0x24: u32
  if (data?.dwCopyProtectFlags !== undefined) view.setUint32(36, Number(data.dwCopyProtectFlags), true);
  // 0x28: u32
  if (data?.dwPictAspectRatioX !== undefined) view.setUint32(40, Number(data.dwPictAspectRatioX), true);
  // 0x2c: u32
  if (data?.dwPictAspectRatioY !== undefined) view.setUint32(44, Number(data.dwPictAspectRatioY), true);
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x38: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(56, Number(data.dwReserved2), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(64, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MPEG2VIDEOINFO (size: 40)
 */
export interface MPEG2VIDEOINFO {
  /** Windows.Win32.Media.MediaFoundation.VIDEOINFOHEADER2 */
  hdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStartTimeCode: number;
  /** u32 */
  cbSequenceHeader: number;
  /** u32 */
  dwProfile: number;
  /** u32 */
  dwLevel: number;
  /** Windows.Win32.Media.MediaFoundation.MPEG2VIDEOINFO_FLAGS */
  dwFlags: MPEG2VIDEOINFO_FLAGS;
  /** array */
  dwSequenceHeader: Deno.PointerValue | null;
}

export const sizeofMPEG2VIDEOINFO = 40;

export function allocMPEG2VIDEOINFO(data?: Partial<MPEG2VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG2VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(util.toPointer(data.hdr)), true);
  // 0x08: u32
  if (data?.dwStartTimeCode !== undefined) view.setUint32(8, Number(data.dwStartTimeCode), true);
  // 0x0c: u32
  if (data?.cbSequenceHeader !== undefined) view.setUint32(12, Number(data.cbSequenceHeader), true);
  // 0x10: u32
  if (data?.dwProfile !== undefined) view.setUint32(16, Number(data.dwProfile), true);
  // 0x14: u32
  if (data?.dwLevel !== undefined) view.setUint32(20, Number(data.dwLevel), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.dwSequenceHeader !== undefined) view.setBigUint64(32, data.dwSequenceHeader === null ? 0n : BigInt(util.toPointer(data.dwSequenceHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.AM_WMT_EVENT_DATA (size: 16)
 */
export interface AM_WMT_EVENT_DATA {
  /** Windows.Win32.Foundation.HRESULT */
  hrStatus: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAM_WMT_EVENT_DATA = 16;

export function allocAM_WMT_EVENT_DATA(data?: Partial<AM_WMT_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_WMT_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hrStatus !== undefined) view.setBigUint64(0, data.hrStatus === null ? 0n : BigInt(util.toPointer(data.hrStatus)), true);
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DxMediaObjects.DMO_MEDIA_TYPE (size: 64)
 */
export interface DMO_MEDIA_TYPE {
  /** System.Guid */
  majortype: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  subtype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  lSampleSize: number;
  /** System.Guid */
  formattype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbFormat: number;
  /** ptr */
  pbFormat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDMO_MEDIA_TYPE = 64;

export function allocDMO_MEDIA_TYPE(data?: Partial<DMO_MEDIA_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMO_MEDIA_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.majortype !== undefined) view.setBigUint64(0, data.majortype === null ? 0n : BigInt(util.toPointer(data.majortype)), true);
  // 0x08: pointer
  if (data?.subtype !== undefined) view.setBigUint64(8, data.subtype === null ? 0n : BigInt(util.toPointer(data.subtype)), true);
  // 0x10: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(16, Number(data.bFixedSizeSamples), true);
  // 0x14: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(20, Number(data.bTemporalCompression), true);
  // 0x18: u32
  if (data?.lSampleSize !== undefined) view.setUint32(24, Number(data.lSampleSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.formattype !== undefined) view.setBigUint64(32, data.formattype === null ? 0n : BigInt(util.toPointer(data.formattype)), true);
  // 0x28: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(40, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x30: u32
  if (data?.cbFormat !== undefined) view.setUint32(48, Number(data.cbFormat), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pbFormat !== undefined) view.setBigUint64(56, data.pbFormat === null ? 0n : BigInt(util.toPointer(data.pbFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DxMediaObjects.DMO_OUTPUT_DATA_BUFFER (size: 32)
 */
export interface DMO_OUTPUT_DATA_BUFFER {
  /** Windows.Win32.Media.DxMediaObjects.IMediaBuffer */
  pBuffer: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStatus: number;
  /** i64 */
  rtTimestamp: Deno.PointerValue;
  /** i64 */
  rtTimelength: Deno.PointerValue;
}

export const sizeofDMO_OUTPUT_DATA_BUFFER = 32;

export function allocDMO_OUTPUT_DATA_BUFFER(data?: Partial<DMO_OUTPUT_DATA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofDMO_OUTPUT_DATA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(util.toPointer(data.pBuffer)), true);
  // 0x08: u32
  if (data?.dwStatus !== undefined) view.setUint32(8, Number(data.dwStatus), true);
  // 0x0c: pad4
  // 0x10: i64
  if (data?.rtTimestamp !== undefined) view.setBigInt64(16, BigInt(data.rtTimestamp), true);
  // 0x18: i64
  if (data?.rtTimelength !== undefined) view.setBigInt64(24, BigInt(data.rtTimelength), true);
  return buf;
}

/**
 * Windows.Win32.Media.DxMediaObjects.DMO_PARTIAL_MEDIATYPE (size: 16)
 */
export interface DMO_PARTIAL_MEDIATYPE {
  /** System.Guid */
  type: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  subtype: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDMO_PARTIAL_MEDIATYPE = 16;

export function allocDMO_PARTIAL_MEDIATYPE(data?: Partial<DMO_PARTIAL_MEDIATYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMO_PARTIAL_MEDIATYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.type !== undefined) view.setBigUint64(0, data.type === null ? 0n : BigInt(util.toPointer(data.type)), true);
  // 0x08: pointer
  if (data?.subtype !== undefined) view.setBigUint64(8, data.subtype === null ? 0n : BigInt(util.toPointer(data.subtype)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.WMDRMProtectionInfo (size: 32)
 */
export interface WMDRMProtectionInfo {
  /** array */
  wszKID: Deno.PointerValue | null;
  /** u64 */
  qwCounter: Deno.PointerValue;
  /** u64 */
  qwIndex: Deno.PointerValue;
  /** u8 */
  bOffset: number;
}

export const sizeofWMDRMProtectionInfo = 32;

export function allocWMDRMProtectionInfo(data?: Partial<WMDRMProtectionInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDRMProtectionInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszKID !== undefined) view.setBigUint64(0, data.wszKID === null ? 0n : BigInt(util.toPointer(data.wszKID)), true);
  // 0x08: u64
  if (data?.qwCounter !== undefined) view.setBigUint64(8, BigInt(data.qwCounter), true);
  // 0x10: u64
  if (data?.qwIndex !== undefined) view.setBigUint64(16, BigInt(data.qwIndex), true);
  // 0x18: u8
  if (data?.bOffset !== undefined) view.setUint8(24, Number(data.bOffset));
  // 0x19: pad7
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BadSampleInfo (size: 8)
 */
export interface BadSampleInfo {
  /** Windows.Win32.Foundation.HRESULT */
  hrReason: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBadSampleInfo = 8;

export function allocBadSampleInfo(data?: Partial<BadSampleInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofBadSampleInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hrReason !== undefined) view.setBigUint64(0, data.hrReason === null ? 0n : BigInt(util.toPointer(data.hrReason)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.STREAMBUFFER_ATTRIBUTE (size: 32)
 */
export interface STREAMBUFFER_ATTRIBUTE {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** Windows.Win32.Media.DirectShow.STREAMBUFFER_ATTR_DATATYPE */
  StreamBufferAttributeType: STREAMBUFFER_ATTR_DATATYPE;
  /** ptr */
  pbAttribute: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  cbLength: number;
}

export const sizeofSTREAMBUFFER_ATTRIBUTE = 32;

export function allocSTREAMBUFFER_ATTRIBUTE(data?: Partial<STREAMBUFFER_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAMBUFFER_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.StreamBufferAttributeType !== undefined) view.setInt32(8, Number(data.StreamBufferAttributeType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pbAttribute !== undefined) view.setBigUint64(16, data.pbAttribute === null ? 0n : BigInt(util.toPointer(data.pbAttribute)), true);
  // 0x18: u16
  if (data?.cbLength !== undefined) view.setUint16(24, Number(data.cbLength), true);
  // 0x1a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.SBE_PIN_DATA (size: 40)
 */
export interface SBE_PIN_DATA {
  /** u64 */
  cDataBytes: Deno.PointerValue;
  /** u64 */
  cSamplesProcessed: Deno.PointerValue;
  /** u64 */
  cDiscontinuities: Deno.PointerValue;
  /** u64 */
  cSyncPoints: Deno.PointerValue;
  /** u64 */
  cTimestamps: Deno.PointerValue;
}

export const sizeofSBE_PIN_DATA = 40;

export function allocSBE_PIN_DATA(data?: Partial<SBE_PIN_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSBE_PIN_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.cDataBytes !== undefined) view.setBigUint64(0, BigInt(data.cDataBytes), true);
  // 0x08: u64
  if (data?.cSamplesProcessed !== undefined) view.setBigUint64(8, BigInt(data.cSamplesProcessed), true);
  // 0x10: u64
  if (data?.cDiscontinuities !== undefined) view.setBigUint64(16, BigInt(data.cDiscontinuities), true);
  // 0x18: u64
  if (data?.cSyncPoints !== undefined) view.setBigUint64(24, BigInt(data.cSyncPoints), true);
  // 0x20: u64
  if (data?.cTimestamps !== undefined) view.setBigUint64(32, BigInt(data.cTimestamps), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.SBE2_STREAM_DESC (size: 16)
 */
export interface SBE2_STREAM_DESC {
  /** u32 */
  Version: number;
  /** u32 */
  StreamId: number;
  /** u32 */
  Default: number;
  /** u32 */
  Reserved: number;
}

export const sizeofSBE2_STREAM_DESC = 16;

export function allocSBE2_STREAM_DESC(data?: Partial<SBE2_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofSBE2_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.StreamId !== undefined) view.setUint32(4, Number(data.StreamId), true);
  // 0x08: u32
  if (data?.Default !== undefined) view.setUint32(8, Number(data.Default), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVR_STREAM_DESC (size: 48)
 */
export interface DVR_STREAM_DESC {
  /** u32 */
  Version: number;
  /** u32 */
  StreamId: number;
  /** Windows.Win32.Foundation.BOOL */
  Default: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Creation: boolean;
  /** u32 */
  Reserved: number;
  /** System.Guid */
  guidSubMediaType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidFormatType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.AM_MEDIA_TYPE */
  MediaType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDVR_STREAM_DESC = 48;

export function allocDVR_STREAM_DESC(data?: Partial<DVR_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDVR_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.StreamId !== undefined) view.setUint32(4, Number(data.StreamId), true);
  // 0x08: i32
  if (data?.Default !== undefined) view.setInt32(8, Number(data.Default), true);
  // 0x0c: i32
  if (data?.Creation !== undefined) view.setInt32(12, Number(data.Creation), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.guidSubMediaType !== undefined) view.setBigUint64(24, data.guidSubMediaType === null ? 0n : BigInt(util.toPointer(data.guidSubMediaType)), true);
  // 0x20: pointer
  if (data?.guidFormatType !== undefined) view.setBigUint64(32, data.guidFormatType === null ? 0n : BigInt(util.toPointer(data.guidFormatType)), true);
  // 0x28: pointer
  if (data?.MediaType !== undefined) view.setBigUint64(40, data.MediaType === null ? 0n : BigInt(util.toPointer(data.MediaType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.PID_BITS_MIDL (size: 8)
 */
export interface PID_BITS_MIDL {
  /** u16 */
  Bits: number;
}

export const sizeofPID_BITS_MIDL = 8;

export function allocPID_BITS_MIDL(data?: Partial<PID_BITS_MIDL>): Uint8Array {
  const buf = new Uint8Array(sizeofPID_BITS_MIDL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Bits !== undefined) view.setUint16(0, Number(data.Bits), true);
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_HEADER_BITS_MIDL (size: 8)
 */
export interface MPEG_HEADER_BITS_MIDL {
  /** u16 */
  Bits: number;
}

export const sizeofMPEG_HEADER_BITS_MIDL = 8;

export function allocMPEG_HEADER_BITS_MIDL(data?: Partial<MPEG_HEADER_BITS_MIDL>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_HEADER_BITS_MIDL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Bits !== undefined) view.setUint16(0, Number(data.Bits), true);
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_HEADER_VERSION_BITS_MIDL (size: 8)
 */
export interface MPEG_HEADER_VERSION_BITS_MIDL {
  /** u8 */
  Bits: number;
}

export const sizeofMPEG_HEADER_VERSION_BITS_MIDL = 8;

export function allocMPEG_HEADER_VERSION_BITS_MIDL(data?: Partial<MPEG_HEADER_VERSION_BITS_MIDL>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_HEADER_VERSION_BITS_MIDL);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Bits !== undefined) view.setUint8(0, Number(data.Bits));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.TID_EXTENSION (size: 8)
 */
export interface TID_EXTENSION {
  /** u16 */
  wTidExt: number;
  /** u16 */
  wCount: number;
}

export const sizeofTID_EXTENSION = 8;

export function allocTID_EXTENSION(data?: Partial<TID_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofTID_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wTidExt !== undefined) view.setUint16(0, Number(data.wTidExt), true);
  // 0x02: u16
  if (data?.wCount !== undefined) view.setUint16(2, Number(data.wCount), true);
  // 0x04: pad4
  return buf;
}

/**
 * _Header_e__Union (size: 16)
 */
export interface _Header_e__Union {
  /** Windows.Win32.Media.DirectShow.MPEG_HEADER_BITS_MIDL */
  S: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  W: number;
}

export const sizeof_Header_e__Union = 16;

export function alloc_Header_e__Union(data?: Partial<_Header_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Header_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S !== undefined) view.setBigUint64(0, data.S === null ? 0n : BigInt(util.toPointer(data.S)), true);
  // 0x08: u16
  if (data?.W !== undefined) view.setUint16(8, Number(data.W), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.SECTION (size: 24)
 */
export interface SECTION {
  /** u8 */
  TableId: number;
  /** _Header_e__Union */
  Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  SectionData: Deno.PointerValue | null;
}

export const sizeofSECTION = 24;

export function allocSECTION(data?: Partial<SECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofSECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.TableId !== undefined) view.setUint8(0, Number(data.TableId));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Header !== undefined) view.setBigUint64(8, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x10: pointer
  if (data?.SectionData !== undefined) view.setBigUint64(16, data.SectionData === null ? 0n : BigInt(util.toPointer(data.SectionData)), true);
  return buf;
}

/**
 * _Version_e__Union (size: 16)
 */
export interface _Version_e__Union {
  /** Windows.Win32.Media.DirectShow.MPEG_HEADER_VERSION_BITS_MIDL */
  S: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  B: number;
}

export const sizeof_Version_e__Union = 16;

export function alloc_Version_e__Union(data?: Partial<_Version_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Version_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S !== undefined) view.setBigUint64(0, data.S === null ? 0n : BigInt(util.toPointer(data.S)), true);
  // 0x08: u8
  if (data?.B !== undefined) view.setUint8(8, Number(data.B));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.LONG_SECTION (size: 48)
 */
export interface LONG_SECTION {
  /** u8 */
  TableId: number;
  /** _Header_e__Union */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  TableIdExtension: number;
  /** _Version_e__Union */
  Version: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  SectionNumber: number;
  /** u8 */
  LastSectionNumber: number;
  /** array */
  RemainingData: Deno.PointerValue | null;
}

export const sizeofLONG_SECTION = 48;

export function allocLONG_SECTION(data?: Partial<LONG_SECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofLONG_SECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.TableId !== undefined) view.setUint8(0, Number(data.TableId));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Header !== undefined) view.setBigUint64(8, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x10: u16
  if (data?.TableIdExtension !== undefined) view.setUint16(16, Number(data.TableIdExtension), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Version !== undefined) view.setBigUint64(24, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x20: u8
  if (data?.SectionNumber !== undefined) view.setUint8(32, Number(data.SectionNumber));
  // 0x21: u8
  if (data?.LastSectionNumber !== undefined) view.setUint8(33, Number(data.LastSectionNumber));
  // 0x22: pad6
  // 0x28: pointer
  if (data?.RemainingData !== undefined) view.setBigUint64(40, data.RemainingData === null ? 0n : BigInt(util.toPointer(data.RemainingData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DSMCC_SECTION (size: 56)
 */
export interface DSMCC_SECTION {
  /** u8 */
  TableId: number;
  /** _Header_e__Union */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  TableIdExtension: number;
  /** _Version_e__Union */
  Version: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  SectionNumber: number;
  /** u8 */
  LastSectionNumber: number;
  /** u8 */
  ProtocolDiscriminator: number;
  /** u8 */
  DsmccType: number;
  /** u16 */
  MessageId: number;
  /** u32 */
  TransactionId: number;
  /** u8 */
  Reserved: number;
  /** u8 */
  AdaptationLength: number;
  /** u16 */
  MessageLength: number;
  /** array */
  RemainingData: Deno.PointerValue | null;
}

export const sizeofDSMCC_SECTION = 56;

export function allocDSMCC_SECTION(data?: Partial<DSMCC_SECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDSMCC_SECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.TableId !== undefined) view.setUint8(0, Number(data.TableId));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Header !== undefined) view.setBigUint64(8, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x10: u16
  if (data?.TableIdExtension !== undefined) view.setUint16(16, Number(data.TableIdExtension), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Version !== undefined) view.setBigUint64(24, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x20: u8
  if (data?.SectionNumber !== undefined) view.setUint8(32, Number(data.SectionNumber));
  // 0x21: u8
  if (data?.LastSectionNumber !== undefined) view.setUint8(33, Number(data.LastSectionNumber));
  // 0x22: u8
  if (data?.ProtocolDiscriminator !== undefined) view.setUint8(34, Number(data.ProtocolDiscriminator));
  // 0x23: u8
  if (data?.DsmccType !== undefined) view.setUint8(35, Number(data.DsmccType));
  // 0x24: u16
  if (data?.MessageId !== undefined) view.setUint16(36, Number(data.MessageId), true);
  // 0x26: u32
  if (data?.TransactionId !== undefined) view.setUint32(38, Number(data.TransactionId), true);
  // 0x2a: u8
  if (data?.Reserved !== undefined) view.setUint8(42, Number(data.Reserved));
  // 0x2b: u8
  if (data?.AdaptationLength !== undefined) view.setUint8(43, Number(data.AdaptationLength));
  // 0x2c: u16
  if (data?.MessageLength !== undefined) view.setUint16(44, Number(data.MessageLength), true);
  // 0x2e: pad2
  // 0x30: pointer
  if (data?.RemainingData !== undefined) view.setBigUint64(48, data.RemainingData === null ? 0n : BigInt(util.toPointer(data.RemainingData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_RQST_PACKET (size: 16)
 */
export interface MPEG_RQST_PACKET {
  /** u32 */
  dwLength: number;
  /** ptr */
  pSection: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMPEG_RQST_PACKET = 16;

export function allocMPEG_RQST_PACKET(data?: Partial<MPEG_RQST_PACKET>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_RQST_PACKET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSection !== undefined) view.setBigUint64(8, data.pSection === null ? 0n : BigInt(util.toPointer(data.pSection)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_PACKET_LIST (size: 16)
 */
export interface MPEG_PACKET_LIST {
  /** u16 */
  wPacketCount: number;
  /** array */
  PacketList: Deno.PointerValue | null;
}

export const sizeofMPEG_PACKET_LIST = 16;

export function allocMPEG_PACKET_LIST(data?: Partial<MPEG_PACKET_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_PACKET_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wPacketCount !== undefined) view.setUint16(0, Number(data.wPacketCount), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.PacketList !== undefined) view.setBigUint64(8, data.PacketList === null ? 0n : BigInt(util.toPointer(data.PacketList)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DSMCC_FILTER_OPTIONS (size: 48)
 */
export interface DSMCC_FILTER_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyProtocol: boolean;
  /** u8 */
  Protocol: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyType: boolean;
  /** u8 */
  Type: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyMessageId: boolean;
  /** u16 */
  MessageId: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyTransactionId: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fUseTrxIdMessageIdMask: boolean;
  /** u32 */
  TransactionId: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyModuleVersion: boolean;
  /** u8 */
  ModuleVersion: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyBlockNumber: boolean;
  /** u16 */
  BlockNumber: number;
  /** Windows.Win32.Foundation.BOOL */
  fGetModuleCall: boolean;
  /** u16 */
  NumberOfBlocksInModule: number;
}

export const sizeofDSMCC_FILTER_OPTIONS = 48;

export function allocDSMCC_FILTER_OPTIONS(data?: Partial<DSMCC_FILTER_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSMCC_FILTER_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fSpecifyProtocol !== undefined) view.setInt32(0, Number(data.fSpecifyProtocol), true);
  // 0x04: u8
  if (data?.Protocol !== undefined) view.setUint8(4, Number(data.Protocol));
  // 0x05: i32
  if (data?.fSpecifyType !== undefined) view.setInt32(5, Number(data.fSpecifyType), true);
  // 0x09: u8
  if (data?.Type !== undefined) view.setUint8(9, Number(data.Type));
  // 0x0a: i32
  if (data?.fSpecifyMessageId !== undefined) view.setInt32(10, Number(data.fSpecifyMessageId), true);
  // 0x0e: u16
  if (data?.MessageId !== undefined) view.setUint16(14, Number(data.MessageId), true);
  // 0x10: i32
  if (data?.fSpecifyTransactionId !== undefined) view.setInt32(16, Number(data.fSpecifyTransactionId), true);
  // 0x14: i32
  if (data?.fUseTrxIdMessageIdMask !== undefined) view.setInt32(20, Number(data.fUseTrxIdMessageIdMask), true);
  // 0x18: u32
  if (data?.TransactionId !== undefined) view.setUint32(24, Number(data.TransactionId), true);
  // 0x1c: i32
  if (data?.fSpecifyModuleVersion !== undefined) view.setInt32(28, Number(data.fSpecifyModuleVersion), true);
  // 0x20: u8
  if (data?.ModuleVersion !== undefined) view.setUint8(32, Number(data.ModuleVersion));
  // 0x21: i32
  if (data?.fSpecifyBlockNumber !== undefined) view.setInt32(33, Number(data.fSpecifyBlockNumber), true);
  // 0x25: u16
  if (data?.BlockNumber !== undefined) view.setUint16(37, Number(data.BlockNumber), true);
  // 0x27: i32
  if (data?.fGetModuleCall !== undefined) view.setInt32(39, Number(data.fGetModuleCall), true);
  // 0x2b: u16
  if (data?.NumberOfBlocksInModule !== undefined) view.setUint16(43, Number(data.NumberOfBlocksInModule), true);
  // 0x2d: pad3
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.ATSC_FILTER_OPTIONS (size: 8)
 */
export interface ATSC_FILTER_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyEtmId: boolean;
  /** u32 */
  EtmId: number;
}

export const sizeofATSC_FILTER_OPTIONS = 8;

export function allocATSC_FILTER_OPTIONS(data?: Partial<ATSC_FILTER_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofATSC_FILTER_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fSpecifyEtmId !== undefined) view.setInt32(0, Number(data.fSpecifyEtmId), true);
  // 0x04: u32
  if (data?.EtmId !== undefined) view.setUint32(4, Number(data.EtmId), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVB_EIT_FILTER_OPTIONS (size: 8)
 */
export interface DVB_EIT_FILTER_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  fSpecifySegment: boolean;
  /** u8 */
  bSegment: number;
}

export const sizeofDVB_EIT_FILTER_OPTIONS = 8;

export function allocDVB_EIT_FILTER_OPTIONS(data?: Partial<DVB_EIT_FILTER_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofDVB_EIT_FILTER_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fSpecifySegment !== undefined) view.setInt32(0, Number(data.fSpecifySegment), true);
  // 0x04: u8
  if (data?.bSegment !== undefined) view.setUint8(4, Number(data.bSegment));
  // 0x05: pad3
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG2_FILTER (size: 80)
 */
export interface MPEG2_FILTER {
  /** u8 */
  bVersionNumber: number;
  /** u16 */
  wFilterSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fUseRawFilteringBits: boolean;
  /** array */
  Filter: Deno.PointerValue | null;
  /** array */
  Mask: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyTableIdExtension: boolean;
  /** u16 */
  TableIdExtension: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyVersion: boolean;
  /** u8 */
  Version: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifySectionNumber: boolean;
  /** u8 */
  SectionNumber: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyCurrentNext: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fNext: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyDsmccOptions: boolean;
  /** Windows.Win32.Media.DirectShow.DSMCC_FILTER_OPTIONS */
  Dsmcc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyAtscOptions: boolean;
  /** Windows.Win32.Media.DirectShow.ATSC_FILTER_OPTIONS */
  Atsc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPEG2_FILTER = 80;

export function allocMPEG2_FILTER(data?: Partial<MPEG2_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG2_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bVersionNumber !== undefined) view.setUint8(0, Number(data.bVersionNumber));
  // 0x01: u16
  if (data?.wFilterSize !== undefined) view.setUint16(1, Number(data.wFilterSize), true);
  // 0x03: i32
  if (data?.fUseRawFilteringBits !== undefined) view.setInt32(3, Number(data.fUseRawFilteringBits), true);
  // 0x07: pad1
  // 0x08: pointer
  if (data?.Filter !== undefined) view.setBigUint64(8, data.Filter === null ? 0n : BigInt(util.toPointer(data.Filter)), true);
  // 0x10: pointer
  if (data?.Mask !== undefined) view.setBigUint64(16, data.Mask === null ? 0n : BigInt(util.toPointer(data.Mask)), true);
  // 0x18: i32
  if (data?.fSpecifyTableIdExtension !== undefined) view.setInt32(24, Number(data.fSpecifyTableIdExtension), true);
  // 0x1c: u16
  if (data?.TableIdExtension !== undefined) view.setUint16(28, Number(data.TableIdExtension), true);
  // 0x1e: i32
  if (data?.fSpecifyVersion !== undefined) view.setInt32(30, Number(data.fSpecifyVersion), true);
  // 0x22: u8
  if (data?.Version !== undefined) view.setUint8(34, Number(data.Version));
  // 0x23: i32
  if (data?.fSpecifySectionNumber !== undefined) view.setInt32(35, Number(data.fSpecifySectionNumber), true);
  // 0x27: u8
  if (data?.SectionNumber !== undefined) view.setUint8(39, Number(data.SectionNumber));
  // 0x28: i32
  if (data?.fSpecifyCurrentNext !== undefined) view.setInt32(40, Number(data.fSpecifyCurrentNext), true);
  // 0x2c: i32
  if (data?.fNext !== undefined) view.setInt32(44, Number(data.fNext), true);
  // 0x30: i32
  if (data?.fSpecifyDsmccOptions !== undefined) view.setInt32(48, Number(data.fSpecifyDsmccOptions), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Dsmcc !== undefined) view.setBigUint64(56, data.Dsmcc === null ? 0n : BigInt(util.toPointer(data.Dsmcc)), true);
  // 0x40: i32
  if (data?.fSpecifyAtscOptions !== undefined) view.setInt32(64, Number(data.fSpecifyAtscOptions), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.Atsc !== undefined) view.setBigUint64(72, data.Atsc === null ? 0n : BigInt(util.toPointer(data.Atsc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG2_FILTER2 (size: 24)
 */
export interface MPEG2_FILTER2 {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyDvbEitOptions: boolean;
  /** Windows.Win32.Media.DirectShow.DVB_EIT_FILTER_OPTIONS */
  DvbEit: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPEG2_FILTER2 = 24;

export function allocMPEG2_FILTER2(data?: Partial<MPEG2_FILTER2>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG2_FILTER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: i32
  if (data?.fSpecifyDvbEitOptions !== undefined) view.setInt32(8, Number(data.fSpecifyDvbEitOptions), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DvbEit !== undefined) view.setBigUint64(16, data.DvbEit === null ? 0n : BigInt(util.toPointer(data.DvbEit)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_STREAM_BUFFER (size: 24)
 */
export interface MPEG_STREAM_BUFFER {
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDataBufferSize: number;
  /** u32 */
  dwSizeOfDataRead: number;
  /** ptr */
  pDataBuffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMPEG_STREAM_BUFFER = 24;

export function allocMPEG_STREAM_BUFFER(data?: Partial<MPEG_STREAM_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_STREAM_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hr !== undefined) view.setBigUint64(0, data.hr === null ? 0n : BigInt(util.toPointer(data.hr)), true);
  // 0x08: u32
  if (data?.dwDataBufferSize !== undefined) view.setUint32(8, Number(data.dwDataBufferSize), true);
  // 0x0c: u32
  if (data?.dwSizeOfDataRead !== undefined) view.setUint32(12, Number(data.dwSizeOfDataRead), true);
  // 0x10: pointer
  if (data?.pDataBuffer !== undefined) view.setBigUint64(16, data.pDataBuffer === null ? 0n : BigInt(util.toPointer(data.pDataBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_TIME (size: 8)
 */
export interface MPEG_TIME {
  /** u8 */
  Hours: number;
  /** u8 */
  Minutes: number;
  /** u8 */
  Seconds: number;
}

export const sizeofMPEG_TIME = 8;

export function allocMPEG_TIME(data?: Partial<MPEG_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Hours !== undefined) view.setUint8(0, Number(data.Hours));
  // 0x01: u8
  if (data?.Minutes !== undefined) view.setUint8(1, Number(data.Minutes));
  // 0x02: u8
  if (data?.Seconds !== undefined) view.setUint8(2, Number(data.Seconds));
  // 0x03: pad5
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_DATE (size: 8)
 */
export interface MPEG_DATE {
  /** u8 */
  Date: number;
  /** u8 */
  Month: number;
  /** u16 */
  Year: number;
}

export const sizeofMPEG_DATE = 8;

export function allocMPEG_DATE(data?: Partial<MPEG_DATE>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_DATE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Date !== undefined) view.setUint8(0, Number(data.Date));
  // 0x01: u8
  if (data?.Month !== undefined) view.setUint8(1, Number(data.Month));
  // 0x02: u16
  if (data?.Year !== undefined) view.setUint16(2, Number(data.Year), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_DATE_AND_TIME (size: 16)
 */
export interface MPEG_DATE_AND_TIME {
  /** Windows.Win32.Media.DirectShow.MPEG_DATE */
  D: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.MPEG_TIME */
  T: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPEG_DATE_AND_TIME = 16;

export function allocMPEG_DATE_AND_TIME(data?: Partial<MPEG_DATE_AND_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_DATE_AND_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.D !== undefined) view.setBigUint64(0, data.D === null ? 0n : BigInt(util.toPointer(data.D)), true);
  // 0x08: pointer
  if (data?.T !== undefined) view.setBigUint64(8, data.T === null ? 0n : BigInt(util.toPointer(data.T)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_BCS_DEMUX (size: 8)
 */
export interface MPEG_BCS_DEMUX {
  /** u32 */
  AVMGraphId: number;
}

export const sizeofMPEG_BCS_DEMUX = 8;

export function allocMPEG_BCS_DEMUX(data?: Partial<MPEG_BCS_DEMUX>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_BCS_DEMUX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AVMGraphId !== undefined) view.setUint32(0, Number(data.AVMGraphId), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_WINSOCK (size: 8)
 */
export interface MPEG_WINSOCK {
  /** u32 */
  AVMGraphId: number;
}

export const sizeofMPEG_WINSOCK = 8;

export function allocMPEG_WINSOCK(data?: Partial<MPEG_WINSOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_WINSOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AVMGraphId !== undefined) view.setUint32(0, Number(data.AVMGraphId), true);
  // 0x04: pad4
  return buf;
}

/**
 * _U_e__Union (size: 16)
 */
export interface _U_e__Union {
  /** Windows.Win32.Media.DirectShow.MPEG_BCS_DEMUX */
  Demux: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.MPEG_WINSOCK */
  Winsock: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_U_e__Union = 16;

export function alloc_U_e__Union(data?: Partial<_U_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_U_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Demux !== undefined) view.setBigUint64(0, data.Demux === null ? 0n : BigInt(util.toPointer(data.Demux)), true);
  // 0x08: pointer
  if (data?.Winsock !== undefined) view.setBigUint64(8, data.Winsock === null ? 0n : BigInt(util.toPointer(data.Winsock)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_CONTEXT (size: 16)
 */
export interface MPEG_CONTEXT {
  /** Windows.Win32.Media.DirectShow.MPEG_CONTEXT_TYPE */
  Type: MPEG_CONTEXT_TYPE;
  /** _U_e__Union */
  U: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPEG_CONTEXT = 16;

export function allocMPEG_CONTEXT(data?: Partial<MPEG_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.U !== undefined) view.setBigUint64(8, data.U === null ? 0n : BigInt(util.toPointer(data.U)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_SERVICE_REQUEST (size: 40)
 */
export interface MPEG_SERVICE_REQUEST {
  /** Windows.Win32.Media.DirectShow.MPEG_REQUEST_TYPE */
  Type: MPEG_REQUEST_TYPE;
  /** Windows.Win32.Media.DirectShow.MPEG_CONTEXT */
  Context: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Pid: number;
  /** u8 */
  TableId: number;
  /** Windows.Win32.Media.DirectShow.MPEG2_FILTER */
  Filter: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofMPEG_SERVICE_REQUEST = 40;

export function allocMPEG_SERVICE_REQUEST(data?: Partial<MPEG_SERVICE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_SERVICE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  // 0x10: u16
  if (data?.Pid !== undefined) view.setUint16(16, Number(data.Pid), true);
  // 0x12: u8
  if (data?.TableId !== undefined) view.setUint8(18, Number(data.TableId));
  // 0x13: pad5
  // 0x18: pointer
  if (data?.Filter !== undefined) view.setBigUint64(24, data.Filter === null ? 0n : BigInt(util.toPointer(data.Filter)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_SERVICE_RESPONSE (size: 8)
 */
export interface MPEG_SERVICE_RESPONSE {
  /** u32 */
  IPAddress: number;
  /** u16 */
  Port: number;
}

export const sizeofMPEG_SERVICE_RESPONSE = 8;

export function allocMPEG_SERVICE_RESPONSE(data?: Partial<MPEG_SERVICE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_SERVICE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IPAddress !== undefined) view.setUint32(0, Number(data.IPAddress), true);
  // 0x04: u16
  if (data?.Port !== undefined) view.setUint16(4, Number(data.Port), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DSMCC_ELEMENT (size: 24)
 */
export interface DSMCC_ELEMENT {
  /** u16 */
  pid: number;
  /** u8 */
  bComponentTag: number;
  /** u32 */
  dwCarouselId: number;
  /** u32 */
  dwTransactionId: number;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSMCC_ELEMENT = 24;

export function allocDSMCC_ELEMENT(data?: Partial<DSMCC_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDSMCC_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.pid !== undefined) view.setUint16(0, Number(data.pid), true);
  // 0x02: u8
  if (data?.bComponentTag !== undefined) view.setUint8(2, Number(data.bComponentTag));
  // 0x03: u32
  if (data?.dwCarouselId !== undefined) view.setUint32(3, Number(data.dwCarouselId), true);
  // 0x07: u32
  if (data?.dwTransactionId !== undefined) view.setUint32(7, Number(data.dwTransactionId), true);
  // 0x0b: pad5
  // 0x10: pointer
  if (data?.pNext !== undefined) view.setBigUint64(16, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPE_ELEMENT (size: 16)
 */
export interface MPE_ELEMENT {
  /** u16 */
  pid: number;
  /** u8 */
  bComponentTag: number;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMPE_ELEMENT = 16;

export function allocMPE_ELEMENT(data?: Partial<MPE_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMPE_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.pid !== undefined) view.setUint16(0, Number(data.pid), true);
  // 0x02: u8
  if (data?.bComponentTag !== undefined) view.setUint8(2, Number(data.bComponentTag));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.pNext !== undefined) view.setBigUint64(8, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_STREAM_FILTER (size: 32)
 */
export interface MPEG_STREAM_FILTER {
  /** u16 */
  wPidValue: number;
  /** u32 */
  dwFilterSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fCrcEnabled: boolean;
  /** array */
  rgchFilter: Deno.PointerValue | null;
  /** array */
  rgchMask: Deno.PointerValue | null;
}

export const sizeofMPEG_STREAM_FILTER = 32;

export function allocMPEG_STREAM_FILTER(data?: Partial<MPEG_STREAM_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_STREAM_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wPidValue !== undefined) view.setUint16(0, Number(data.wPidValue), true);
  // 0x02: u32
  if (data?.dwFilterSize !== undefined) view.setUint32(2, Number(data.dwFilterSize), true);
  // 0x06: i32
  if (data?.fCrcEnabled !== undefined) view.setInt32(6, Number(data.fCrcEnabled), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.rgchFilter !== undefined) view.setBigUint64(16, data.rgchFilter === null ? 0n : BigInt(util.toPointer(data.rgchFilter)), true);
  // 0x18: pointer
  if (data?.rgchMask !== undefined) view.setBigUint64(24, data.rgchMask === null ? 0n : BigInt(util.toPointer(data.rgchMask)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.Mpeg2TableSampleHdr (size: 24)
 */
export interface Mpeg2TableSampleHdr {
  /** u8 */
  SectionCount: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** array */
  SectionOffsets: Deno.PointerValue | null;
}

export const sizeofMpeg2TableSampleHdr = 24;

export function allocMpeg2TableSampleHdr(data?: Partial<Mpeg2TableSampleHdr>): Uint8Array {
  const buf = new Uint8Array(sizeofMpeg2TableSampleHdr);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.SectionCount !== undefined) view.setUint8(0, Number(data.SectionCount));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: pointer
  if (data?.SectionOffsets !== undefined) view.setBigUint64(16, data.SectionOffsets === null ? 0n : BigInt(util.toPointer(data.SectionOffsets)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.ProgramElement (size: 8)
 */
export interface ProgramElement {
  /** u16 */
  wProgramNumber: number;
  /** u16 */
  wProgramMapPID: number;
}

export const sizeofProgramElement = 8;

export function allocProgramElement(data?: Partial<ProgramElement>): Uint8Array {
  const buf = new Uint8Array(sizeofProgramElement);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wProgramNumber !== undefined) view.setUint16(0, Number(data.wProgramNumber), true);
  // 0x02: u16
  if (data?.wProgramMapPID !== undefined) view.setUint16(2, Number(data.wProgramMapPID), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.UDCR_TAG (size: 48)
 */
export interface UDCR_TAG {
  /** u8 */
  bVersion: number;
  /** array */
  KID: Deno.PointerValue | null;
  /** u64 */
  ullBaseCounter: Deno.PointerValue;
  /** u64 */
  ullBaseCounterRange: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fScrambled: boolean;
  /** u8 */
  bStreamMark: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofUDCR_TAG = 48;

export function allocUDCR_TAG(data?: Partial<UDCR_TAG>): Uint8Array {
  const buf = new Uint8Array(sizeofUDCR_TAG);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bVersion !== undefined) view.setUint8(0, Number(data.bVersion));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.KID !== undefined) view.setBigUint64(8, data.KID === null ? 0n : BigInt(util.toPointer(data.KID)), true);
  // 0x10: u64
  if (data?.ullBaseCounter !== undefined) view.setBigUint64(16, BigInt(data.ullBaseCounter), true);
  // 0x18: u64
  if (data?.ullBaseCounterRange !== undefined) view.setBigUint64(24, BigInt(data.ullBaseCounterRange), true);
  // 0x20: i32
  if (data?.fScrambled !== undefined) view.setInt32(32, Number(data.fScrambled), true);
  // 0x24: u8
  if (data?.bStreamMark !== undefined) view.setUint8(36, Number(data.bStreamMark));
  // 0x25: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(37, Number(data.dwReserved1), true);
  // 0x29: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(41, Number(data.dwReserved2), true);
  // 0x2d: pad3
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.PIC_SEQ_SAMPLE (size: 8)
 */
export interface PIC_SEQ_SAMPLE {
  /** u32 */
  _bitfield: number;
}

export const sizeofPIC_SEQ_SAMPLE = 8;

export function allocPIC_SEQ_SAMPLE(data?: Partial<PIC_SEQ_SAMPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofPIC_SEQ_SAMPLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.SAMPLE_SEQ_OFFSET (size: 8)
 */
export interface SAMPLE_SEQ_OFFSET {
  /** u32 */
  _bitfield: number;
}

export const sizeofSAMPLE_SEQ_OFFSET = 8;

export function allocSAMPLE_SEQ_OFFSET(data?: Partial<SAMPLE_SEQ_OFFSET>): Uint8Array {
  const buf = new Uint8Array(sizeofSAMPLE_SEQ_OFFSET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.VA_OPTIONAL_VIDEO_PROPERTIES (size: 24)
 */
export interface VA_OPTIONAL_VIDEO_PROPERTIES {
  /** u16 */
  dwPictureHeight: number;
  /** u16 */
  dwPictureWidth: number;
  /** u16 */
  dwAspectRatioX: number;
  /** u16 */
  dwAspectRatioY: number;
  /** Windows.Win32.Media.DirectShow.VA_VIDEO_FORMAT */
  VAVideoFormat: VA_VIDEO_FORMAT;
  /** Windows.Win32.Media.DirectShow.VA_COLOR_PRIMARIES */
  VAColorPrimaries: VA_COLOR_PRIMARIES;
  /** Windows.Win32.Media.DirectShow.VA_TRANSFER_CHARACTERISTICS */
  VATransferCharacteristics: VA_TRANSFER_CHARACTERISTICS;
  /** Windows.Win32.Media.DirectShow.VA_MATRIX_COEFFICIENTS */
  VAMatrixCoefficients: VA_MATRIX_COEFFICIENTS;
}

export const sizeofVA_OPTIONAL_VIDEO_PROPERTIES = 24;

export function allocVA_OPTIONAL_VIDEO_PROPERTIES(data?: Partial<VA_OPTIONAL_VIDEO_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofVA_OPTIONAL_VIDEO_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.dwPictureHeight !== undefined) view.setUint16(0, Number(data.dwPictureHeight), true);
  // 0x02: u16
  if (data?.dwPictureWidth !== undefined) view.setUint16(2, Number(data.dwPictureWidth), true);
  // 0x04: u16
  if (data?.dwAspectRatioX !== undefined) view.setUint16(4, Number(data.dwAspectRatioX), true);
  // 0x06: u16
  if (data?.dwAspectRatioY !== undefined) view.setUint16(6, Number(data.dwAspectRatioY), true);
  // 0x08: i32
  if (data?.VAVideoFormat !== undefined) view.setInt32(8, Number(data.VAVideoFormat), true);
  // 0x0c: i32
  if (data?.VAColorPrimaries !== undefined) view.setInt32(12, Number(data.VAColorPrimaries), true);
  // 0x10: i32
  if (data?.VATransferCharacteristics !== undefined) view.setInt32(16, Number(data.VATransferCharacteristics), true);
  // 0x14: i32
  if (data?.VAMatrixCoefficients !== undefined) view.setInt32(20, Number(data.VAMatrixCoefficients), true);
  return buf;
}

/**
 * _Others (size: 8)
 */
export interface _Others {
  /** i64 */
  _bitfield: Deno.PointerValue;
}

export const sizeof_Others = 8;

export function alloc_Others(data?: Partial<_Others>): Uint8Array {
  const buf = new Uint8Array(sizeof_Others);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?._bitfield !== undefined) view.setBigInt64(0, BigInt(data._bitfield), true);
  return buf;
}

/**
 * _Fields_e__Union (size: 16)
 */
export interface _Fields_e__Union {
  /** _Others */
  Others: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  Value: Deno.PointerValue;
}

export const sizeof_Fields_e__Union = 16;

export function alloc_Fields_e__Union(data?: Partial<_Fields_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Fields_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Others !== undefined) view.setBigUint64(0, data.Others === null ? 0n : BigInt(util.toPointer(data.Others)), true);
  // 0x08: i64
  if (data?.Value !== undefined) view.setBigInt64(8, BigInt(data.Value), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.TRANSPORT_PROPERTIES (size: 24)
 */
export interface TRANSPORT_PROPERTIES {
  /** u32 */
  PID: number;
  /** i64 */
  PCR: Deno.PointerValue;
  /** _Fields_e__Union */
  Fields: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSPORT_PROPERTIES = 24;

export function allocTRANSPORT_PROPERTIES(data?: Partial<TRANSPORT_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORT_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PID !== undefined) view.setUint32(0, Number(data.PID), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.PCR !== undefined) view.setBigInt64(8, BigInt(data.PCR), true);
  // 0x10: pointer
  if (data?.Fields !== undefined) view.setBigUint64(16, data.Fields === null ? 0n : BigInt(util.toPointer(data.Fields)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.PBDA_TAG_ATTRIBUTE (size: 24)
 */
export interface PBDA_TAG_ATTRIBUTE {
  /** System.Guid */
  TableUUId: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  TableId: number;
  /** u16 */
  VersionNo: number;
  /** u32 */
  TableDataSize: number;
  /** array */
  TableData: Deno.PointerValue | null;
}

export const sizeofPBDA_TAG_ATTRIBUTE = 24;

export function allocPBDA_TAG_ATTRIBUTE(data?: Partial<PBDA_TAG_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofPBDA_TAG_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TableUUId !== undefined) view.setBigUint64(0, data.TableUUId === null ? 0n : BigInt(util.toPointer(data.TableUUId)), true);
  // 0x08: u8
  if (data?.TableId !== undefined) view.setUint8(8, Number(data.TableId));
  // 0x09: u16
  if (data?.VersionNo !== undefined) view.setUint16(9, Number(data.VersionNo), true);
  // 0x0b: u32
  if (data?.TableDataSize !== undefined) view.setUint32(11, Number(data.TableDataSize), true);
  // 0x0f: pad1
  // 0x10: pointer
  if (data?.TableData !== undefined) view.setBigUint64(16, data.TableData === null ? 0n : BigInt(util.toPointer(data.TableData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.CAPTURE_STREAMTIME (size: 8)
 */
export interface CAPTURE_STREAMTIME {
  /** i64 */
  StreamTime: Deno.PointerValue;
}

export const sizeofCAPTURE_STREAMTIME = 8;

export function allocCAPTURE_STREAMTIME(data?: Partial<CAPTURE_STREAMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPTURE_STREAMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StreamTime !== undefined) view.setBigInt64(0, BigInt(data.StreamTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DSHOW_STREAM_DESC (size: 24)
 */
export interface DSHOW_STREAM_DESC {
  /** u32 */
  VersionNo: number;
  /** u32 */
  StreamId: number;
  /** Windows.Win32.Foundation.BOOL */
  Default: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Creation: boolean;
  /** u32 */
  Reserved: number;
}

export const sizeofDSHOW_STREAM_DESC = 24;

export function allocDSHOW_STREAM_DESC(data?: Partial<DSHOW_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSHOW_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VersionNo !== undefined) view.setUint32(0, Number(data.VersionNo), true);
  // 0x04: u32
  if (data?.StreamId !== undefined) view.setUint32(4, Number(data.StreamId), true);
  // 0x08: i32
  if (data?.Default !== undefined) view.setInt32(8, Number(data.Default), true);
  // 0x0c: i32
  if (data?.Creation !== undefined) view.setInt32(12, Number(data.Creation), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.SAMPLE_LIVE_STREAM_TIME (size: 16)
 */
export interface SAMPLE_LIVE_STREAM_TIME {
  /** u64 */
  qwStreamTime: Deno.PointerValue;
  /** u64 */
  qwLiveTime: Deno.PointerValue;
}

export const sizeofSAMPLE_LIVE_STREAM_TIME = 16;

export function allocSAMPLE_LIVE_STREAM_TIME(data?: Partial<SAMPLE_LIVE_STREAM_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSAMPLE_LIVE_STREAM_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.qwStreamTime !== undefined) view.setBigUint64(0, BigInt(data.qwStreamTime), true);
  // 0x08: u64
  if (data?.qwLiveTime !== undefined) view.setBigUint64(8, BigInt(data.qwLiveTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSIDENTIFIER (size: 8)
 */
export interface KSIDENTIFIER {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSIDENTIFIER = 8;

export function allocKSIDENTIFIER(data?: Partial<KSIDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSIDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSP_BDA_NODE_PIN (size: 24)
 */
export interface KSP_BDA_NODE_PIN {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulNodeType: number;
  /** u32 */
  ulInputPinId: number;
  /** u32 */
  ulOutputPinId: number;
}

export const sizeofKSP_BDA_NODE_PIN = 24;

export function allocKSP_BDA_NODE_PIN(data?: Partial<KSP_BDA_NODE_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSP_BDA_NODE_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.ulNodeType !== undefined) view.setUint32(8, Number(data.ulNodeType), true);
  // 0x0c: u32
  if (data?.ulInputPinId !== undefined) view.setUint32(12, Number(data.ulInputPinId), true);
  // 0x10: u32
  if (data?.ulOutputPinId !== undefined) view.setUint32(16, Number(data.ulOutputPinId), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_PIN (size: 24)
 */
export interface KSM_BDA_PIN {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
}

export const sizeofKSM_BDA_PIN = 24;

export function allocKSM_BDA_PIN(data?: Partial<KSM_BDA_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_PIN_PAIR (size: 24)
 */
export interface KSM_BDA_PIN_PAIR {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSM_BDA_PIN_PAIR = 24;

export function allocKSM_BDA_PIN_PAIR(data?: Partial<KSM_BDA_PIN_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_PIN_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSP_NODE (size: 16)
 */
export interface KSP_NODE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSP_NODE = 16;

export function allocKSP_NODE(data?: Partial<KSP_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSP_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NodeId !== undefined) view.setUint32(8, Number(data.NodeId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSP_NODE_ESPID (size: 16)
 */
export interface KSP_NODE_ESPID {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EsPid: number;
}

export const sizeofKSP_NODE_ESPID = 16;

export function allocKSP_NODE_ESPID(data?: Partial<KSP_NODE_ESPID>): Uint8Array {
  const buf = new Uint8Array(sizeofKSP_NODE_ESPID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.EsPid !== undefined) view.setUint32(8, Number(data.EsPid), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_DEBUG_LEVEL (size: 24)
 */
export interface KSM_BDA_DEBUG_LEVEL {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  ucDebugLevel: number;
  /** u32 */
  ulDebugStringSize: number;
  /** array */
  argbDebugString: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_DEBUG_LEVEL = 24;

export function allocKSM_BDA_DEBUG_LEVEL(data?: Partial<KSM_BDA_DEBUG_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_DEBUG_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u8
  if (data?.ucDebugLevel !== undefined) view.setUint8(8, Number(data.ucDebugLevel));
  // 0x09: u32
  if (data?.ulDebugStringSize !== undefined) view.setUint32(9, Number(data.ulDebugStringSize), true);
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.argbDebugString !== undefined) view.setBigUint64(16, data.argbDebugString === null ? 0n : BigInt(util.toPointer(data.argbDebugString)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_DEBUG_DATA (size: 32)
 */
export interface BDA_DEBUG_DATA {
  /** i32 */
  lResult: number;
  /** System.Guid */
  uuidDebugDataType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDataSize: number;
  /** array */
  argbDebugData: Deno.PointerValue | null;
}

export const sizeofBDA_DEBUG_DATA = 32;

export function allocBDA_DEBUG_DATA(data?: Partial<BDA_DEBUG_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_DEBUG_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.uuidDebugDataType !== undefined) view.setBigUint64(8, data.uuidDebugDataType === null ? 0n : BigInt(util.toPointer(data.uuidDebugDataType)), true);
  // 0x10: u32
  if (data?.ulDataSize !== undefined) view.setUint32(16, Number(data.ulDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.argbDebugData !== undefined) view.setBigUint64(24, data.argbDebugData === null ? 0n : BigInt(util.toPointer(data.argbDebugData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_EVENT_DATA (size: 32)
 */
export interface BDA_EVENT_DATA {
  /** i32 */
  lResult: number;
  /** u32 */
  ulEventID: number;
  /** System.Guid */
  uuidEventType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulEventDataLength: number;
  /** array */
  argbEventData: Deno.PointerValue | null;
}

export const sizeofBDA_EVENT_DATA = 32;

export function allocBDA_EVENT_DATA(data?: Partial<BDA_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulEventID !== undefined) view.setUint32(4, Number(data.ulEventID), true);
  // 0x08: pointer
  if (data?.uuidEventType !== undefined) view.setBigUint64(8, data.uuidEventType === null ? 0n : BigInt(util.toPointer(data.uuidEventType)), true);
  // 0x10: u32
  if (data?.ulEventDataLength !== undefined) view.setUint32(16, Number(data.ulEventDataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.argbEventData !== undefined) view.setBigUint64(24, data.argbEventData === null ? 0n : BigInt(util.toPointer(data.argbEventData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_EVENT_COMPLETE (size: 16)
 */
export interface KSM_BDA_EVENT_COMPLETE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulEventID: number;
  /** u32 */
  ulEventResult: number;
}

export const sizeofKSM_BDA_EVENT_COMPLETE = 16;

export function allocKSM_BDA_EVENT_COMPLETE(data?: Partial<KSM_BDA_EVENT_COMPLETE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_EVENT_COMPLETE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulEventID !== undefined) view.setUint32(8, Number(data.ulEventID), true);
  // 0x0c: u32
  if (data?.ulEventResult !== undefined) view.setUint32(12, Number(data.ulEventResult), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSM_NODE (size: 16)
 */
export interface KSM_NODE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSM_NODE = 16;

export function allocKSM_NODE(data?: Partial<KSM_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.NodeId !== undefined) view.setUint32(8, Number(data.NodeId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_DRM_SETDRM (size: 16)
 */
export interface KSM_BDA_DRM_SETDRM {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NewDRMuuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSM_BDA_DRM_SETDRM = 16;

export function allocKSM_BDA_DRM_SETDRM(data?: Partial<KSM_BDA_DRM_SETDRM>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_DRM_SETDRM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: pointer
  if (data?.NewDRMuuid !== undefined) view.setBigUint64(8, data.NewDRMuuid === null ? 0n : BigInt(util.toPointer(data.NewDRMuuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_BUFFER (size: 24)
 */
export interface KSM_BDA_BUFFER {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulBufferSize: number;
  /** array */
  argbBuffer: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_BUFFER = 24;

export function allocKSM_BDA_BUFFER(data?: Partial<KSM_BDA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulBufferSize !== undefined) view.setUint32(8, Number(data.ulBufferSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbBuffer !== undefined) view.setBigUint64(16, data.argbBuffer === null ? 0n : BigInt(util.toPointer(data.argbBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRM_LICENSE (size: 16)
 */
export interface KSM_BDA_WMDRM_LICENSE {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  uuidKeyID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSM_BDA_WMDRM_LICENSE = 16;

export function allocKSM_BDA_WMDRM_LICENSE(data?: Partial<KSM_BDA_WMDRM_LICENSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRM_LICENSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: pointer
  if (data?.uuidKeyID !== undefined) view.setBigUint64(8, data.uuidKeyID === null ? 0n : BigInt(util.toPointer(data.uuidKeyID)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRM_RENEWLICENSE (size: 24)
 */
export interface KSM_BDA_WMDRM_RENEWLICENSE {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulXMRLicenseLength: number;
  /** u32 */
  ulEntitlementTokenLength: number;
  /** array */
  argbDataBuffer: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_WMDRM_RENEWLICENSE = 24;

export function allocKSM_BDA_WMDRM_RENEWLICENSE(data?: Partial<KSM_BDA_WMDRM_RENEWLICENSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRM_RENEWLICENSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulXMRLicenseLength !== undefined) view.setUint32(8, Number(data.ulXMRLicenseLength), true);
  // 0x0c: u32
  if (data?.ulEntitlementTokenLength !== undefined) view.setUint32(12, Number(data.ulEntitlementTokenLength), true);
  // 0x10: pointer
  if (data?.argbDataBuffer !== undefined) view.setBigUint64(16, data.argbDataBuffer === null ? 0n : BigInt(util.toPointer(data.argbDataBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT (size: 40)
 */
export interface KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDialogRequest: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** u32 */
  ulPurchaseTokenLength: number;
  /** array */
  argbDataBuffer: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT = 40;

export function allocKSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT(data?: Partial<KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(8, Number(data.ulDialogRequest), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: u32
  if (data?.ulPurchaseTokenLength !== undefined) view.setUint32(24, Number(data.ulPurchaseTokenLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.argbDataBuffer !== undefined) view.setBigUint64(32, data.argbDataBuffer === null ? 0n : BigInt(util.toPointer(data.argbDataBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRMTUNER_SETPIDPROTECTION (size: 24)
 */
export interface KSM_BDA_WMDRMTUNER_SETPIDPROTECTION {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulPID: number;
  /** System.Guid */
  uuidKeyID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSM_BDA_WMDRMTUNER_SETPIDPROTECTION = 24;

export function allocKSM_BDA_WMDRMTUNER_SETPIDPROTECTION(data?: Partial<KSM_BDA_WMDRMTUNER_SETPIDPROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRMTUNER_SETPIDPROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulPID !== undefined) view.setUint32(8, Number(data.ulPID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.uuidKeyID !== undefined) view.setBigUint64(16, data.uuidKeyID === null ? 0n : BigInt(util.toPointer(data.uuidKeyID)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRMTUNER_GETPIDPROTECTION (size: 16)
 */
export interface KSM_BDA_WMDRMTUNER_GETPIDPROTECTION {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulPID: number;
}

export const sizeofKSM_BDA_WMDRMTUNER_GETPIDPROTECTION = 16;

export function allocKSM_BDA_WMDRMTUNER_GETPIDPROTECTION(data?: Partial<KSM_BDA_WMDRMTUNER_GETPIDPROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRMTUNER_GETPIDPROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulPID !== undefined) view.setUint32(8, Number(data.ulPID), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRMTUNER_SYNCVALUE (size: 16)
 */
export interface KSM_BDA_WMDRMTUNER_SYNCVALUE {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulSyncValue: number;
}

export const sizeofKSM_BDA_WMDRMTUNER_SYNCVALUE = 16;

export function allocKSM_BDA_WMDRMTUNER_SYNCVALUE(data?: Partial<KSM_BDA_WMDRMTUNER_SYNCVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRMTUNER_SYNCVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulSyncValue !== undefined) view.setUint32(8, Number(data.ulSyncValue), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_TUNER_TUNEREQUEST (size: 24)
 */
export interface KSM_BDA_TUNER_TUNEREQUEST {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulTuneLength: number;
  /** array */
  argbTuneData: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_TUNER_TUNEREQUEST = 24;

export function allocKSM_BDA_TUNER_TUNEREQUEST(data?: Partial<KSM_BDA_TUNER_TUNEREQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_TUNER_TUNEREQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulTuneLength !== undefined) view.setUint32(8, Number(data.ulTuneLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbTuneData !== undefined) view.setBigUint64(16, data.argbTuneData === null ? 0n : BigInt(util.toPointer(data.argbTuneData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_GPNV_GETVALUE (size: 32)
 */
export interface KSM_BDA_GPNV_GETVALUE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulNameLength: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** array */
  argbData: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_GPNV_GETVALUE = 32;

export function allocKSM_BDA_GPNV_GETVALUE(data?: Partial<KSM_BDA_GPNV_GETVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_GPNV_GETVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulNameLength !== undefined) view.setUint32(8, Number(data.ulNameLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: pointer
  if (data?.argbData !== undefined) view.setBigUint64(24, data.argbData === null ? 0n : BigInt(util.toPointer(data.argbData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_GPNV_SETVALUE (size: 40)
 */
export interface KSM_BDA_GPNV_SETVALUE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDialogRequest: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** u32 */
  ulNameLength: number;
  /** u32 */
  ulValueLength: number;
  /** array */
  argbName: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_GPNV_SETVALUE = 40;

export function allocKSM_BDA_GPNV_SETVALUE(data?: Partial<KSM_BDA_GPNV_SETVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_GPNV_SETVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(8, Number(data.ulDialogRequest), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: u32
  if (data?.ulNameLength !== undefined) view.setUint32(24, Number(data.ulNameLength), true);
  // 0x1c: u32
  if (data?.ulValueLength !== undefined) view.setUint32(28, Number(data.ulValueLength), true);
  // 0x20: pointer
  if (data?.argbName !== undefined) view.setBigUint64(32, data.argbName === null ? 0n : BigInt(util.toPointer(data.argbName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_GPNV_NAMEINDEX (size: 16)
 */
export interface KSM_BDA_GPNV_NAMEINDEX {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulValueNameIndex: number;
}

export const sizeofKSM_BDA_GPNV_NAMEINDEX = 16;

export function allocKSM_BDA_GPNV_NAMEINDEX(data?: Partial<KSM_BDA_GPNV_NAMEINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_GPNV_NAMEINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulValueNameIndex !== undefined) view.setUint32(8, Number(data.ulValueNameIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_SCAN_CAPABILTIES (size: 16)
 */
export interface KSM_BDA_SCAN_CAPABILTIES {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  uuidBroadcastStandard: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSM_BDA_SCAN_CAPABILTIES = 16;

export function allocKSM_BDA_SCAN_CAPABILTIES(data?: Partial<KSM_BDA_SCAN_CAPABILTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_SCAN_CAPABILTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: pointer
  if (data?.uuidBroadcastStandard !== undefined) view.setBigUint64(8, data.uuidBroadcastStandard === null ? 0n : BigInt(util.toPointer(data.uuidBroadcastStandard)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_SCAN_FILTER (size: 32)
 */
export interface KSM_BDA_SCAN_FILTER {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulScanModulationTypeSize: number;
  /** u64 */
  AnalogVideoStandards: Deno.PointerValue;
  /** array */
  argbScanModulationTypes: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_SCAN_FILTER = 32;

export function allocKSM_BDA_SCAN_FILTER(data?: Partial<KSM_BDA_SCAN_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_SCAN_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulScanModulationTypeSize !== undefined) view.setUint32(8, Number(data.ulScanModulationTypeSize), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.AnalogVideoStandards !== undefined) view.setBigUint64(16, BigInt(data.AnalogVideoStandards), true);
  // 0x18: pointer
  if (data?.argbScanModulationTypes !== undefined) view.setBigUint64(24, data.argbScanModulationTypes === null ? 0n : BigInt(util.toPointer(data.argbScanModulationTypes)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_SCAN_START (size: 16)
 */
export interface KSM_BDA_SCAN_START {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LowerFrequency: number;
  /** u32 */
  HigherFrequency: number;
}

export const sizeofKSM_BDA_SCAN_START = 16;

export function allocKSM_BDA_SCAN_START(data?: Partial<KSM_BDA_SCAN_START>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_SCAN_START);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.LowerFrequency !== undefined) view.setUint32(8, Number(data.LowerFrequency), true);
  // 0x0c: u32
  if (data?.HigherFrequency !== undefined) view.setUint32(12, Number(data.HigherFrequency), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_GDDS_TUNEXMLFROMIDX (size: 16)
 */
export interface KSM_BDA_GDDS_TUNEXMLFROMIDX {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ulIdx: Deno.PointerValue;
}

export const sizeofKSM_BDA_GDDS_TUNEXMLFROMIDX = 16;

export function allocKSM_BDA_GDDS_TUNEXMLFROMIDX(data?: Partial<KSM_BDA_GDDS_TUNEXMLFROMIDX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_GDDS_TUNEXMLFROMIDX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u64
  if (data?.ulIdx !== undefined) view.setBigUint64(8, BigInt(data.ulIdx), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_GDDS_SERVICEFROMTUNEXML (size: 24)
 */
export interface KSM_BDA_GDDS_SERVICEFROMTUNEXML {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulTuneXmlLength: number;
  /** array */
  argbTuneXml: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_GDDS_SERVICEFROMTUNEXML = 24;

export function allocKSM_BDA_GDDS_SERVICEFROMTUNEXML(data?: Partial<KSM_BDA_GDDS_SERVICEFROMTUNEXML>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_GDDS_SERVICEFROMTUNEXML);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulTuneXmlLength !== undefined) view.setUint32(8, Number(data.ulTuneXmlLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbTuneXml !== undefined) view.setBigUint64(16, data.argbTuneXml === null ? 0n : BigInt(util.toPointer(data.argbTuneXml)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_USERACTIVITY_USEREASON (size: 16)
 */
export interface KSM_BDA_USERACTIVITY_USEREASON {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulUseReason: number;
}

export const sizeofKSM_BDA_USERACTIVITY_USEREASON = 16;

export function allocKSM_BDA_USERACTIVITY_USEREASON(data?: Partial<KSM_BDA_USERACTIVITY_USEREASON>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_USERACTIVITY_USEREASON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulUseReason !== undefined) view.setUint32(8, Number(data.ulUseReason), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_CAS_ENTITLEMENTTOKEN (size: 40)
 */
export interface KSM_BDA_CAS_ENTITLEMENTTOKEN {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDialogRequest: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** u32 */
  ulRequestType: number;
  /** u32 */
  ulEntitlementTokenLen: number;
  /** array */
  argbEntitlementToken: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_CAS_ENTITLEMENTTOKEN = 40;

export function allocKSM_BDA_CAS_ENTITLEMENTTOKEN(data?: Partial<KSM_BDA_CAS_ENTITLEMENTTOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_CAS_ENTITLEMENTTOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(8, Number(data.ulDialogRequest), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: u32
  if (data?.ulRequestType !== undefined) view.setUint32(24, Number(data.ulRequestType), true);
  // 0x1c: u32
  if (data?.ulEntitlementTokenLen !== undefined) view.setUint32(28, Number(data.ulEntitlementTokenLen), true);
  // 0x20: pointer
  if (data?.argbEntitlementToken !== undefined) view.setBigUint64(32, data.argbEntitlementToken === null ? 0n : BigInt(util.toPointer(data.argbEntitlementToken)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_CAS_CAPTURETOKEN (size: 24)
 */
export interface KSM_BDA_CAS_CAPTURETOKEN {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulTokenLength: number;
  /** array */
  argbToken: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_CAS_CAPTURETOKEN = 24;

export function allocKSM_BDA_CAS_CAPTURETOKEN(data?: Partial<KSM_BDA_CAS_CAPTURETOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_CAS_CAPTURETOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulTokenLength !== undefined) view.setUint32(8, Number(data.ulTokenLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbToken !== undefined) view.setBigUint64(16, data.argbToken === null ? 0n : BigInt(util.toPointer(data.argbToken)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_CAS_OPENBROADCASTMMI (size: 32)
 */
export interface KSM_BDA_CAS_OPENBROADCASTMMI {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDialogRequest: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** u32 */
  ulEventId: number;
}

export const sizeofKSM_BDA_CAS_OPENBROADCASTMMI = 32;

export function allocKSM_BDA_CAS_OPENBROADCASTMMI(data?: Partial<KSM_BDA_CAS_OPENBROADCASTMMI>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_CAS_OPENBROADCASTMMI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(8, Number(data.ulDialogRequest), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: u32
  if (data?.ulEventId !== undefined) view.setUint32(24, Number(data.ulEventId), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_CAS_CLOSEMMIDIALOG (size: 32)
 */
export interface KSM_BDA_CAS_CLOSEMMIDIALOG {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDialogRequest: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** u32 */
  ulDialogNumber: number;
  /** u32 */
  ulReason: number;
}

export const sizeofKSM_BDA_CAS_CLOSEMMIDIALOG = 32;

export function allocKSM_BDA_CAS_CLOSEMMIDIALOG(data?: Partial<KSM_BDA_CAS_CLOSEMMIDIALOG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_CAS_CLOSEMMIDIALOG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(8, Number(data.ulDialogRequest), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: u32
  if (data?.ulDialogNumber !== undefined) view.setUint32(24, Number(data.ulDialogNumber), true);
  // 0x1c: u32
  if (data?.ulReason !== undefined) view.setUint32(28, Number(data.ulReason), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_ISDBCAS_REQUEST (size: 24)
 */
export interface KSM_BDA_ISDBCAS_REQUEST {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulRequestID: number;
  /** u32 */
  ulIsdbCommandSize: number;
  /** array */
  argbIsdbCommandData: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_ISDBCAS_REQUEST = 24;

export function allocKSM_BDA_ISDBCAS_REQUEST(data?: Partial<KSM_BDA_ISDBCAS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_ISDBCAS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulRequestID !== undefined) view.setUint32(8, Number(data.ulRequestID), true);
  // 0x0c: u32
  if (data?.ulIsdbCommandSize !== undefined) view.setUint32(12, Number(data.ulIsdbCommandSize), true);
  // 0x10: pointer
  if (data?.argbIsdbCommandData !== undefined) view.setBigUint64(16, data.argbIsdbCommandData === null ? 0n : BigInt(util.toPointer(data.argbIsdbCommandData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_TS_SELECTOR_SETTSID (size: 16)
 */
export interface KSM_BDA_TS_SELECTOR_SETTSID {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  usTSID: number;
}

export const sizeofKSM_BDA_TS_SELECTOR_SETTSID = 16;

export function allocKSM_BDA_TS_SELECTOR_SETTSID(data?: Partial<KSM_BDA_TS_SELECTOR_SETTSID>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_TS_SELECTOR_SETTSID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u16
  if (data?.usTSID !== undefined) view.setUint16(8, Number(data.usTSID), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDATAFORMAT (size: 16)
 */
export interface KSDATAFORMAT {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  Alignment: Deno.PointerValue;
}

export const sizeofKSDATAFORMAT = 16;

export function allocKSDATAFORMAT(data?: Partial<KSDATAFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDATAFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: i64
  if (data?.Alignment !== undefined) view.setBigInt64(8, BigInt(data.Alignment), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KS_DATARANGE_BDA_ANTENNA (size: 8)
 */
export interface KS_DATARANGE_BDA_ANTENNA {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_BDA_ANTENNA = 8;

export function allocKS_DATARANGE_BDA_ANTENNA(data?: Partial<KS_DATARANGE_BDA_ANTENNA>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_BDA_ANTENNA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TRANSPORT_INFO (size: 24)
 */
export interface BDA_TRANSPORT_INFO {
  /** u32 */
  ulcbPhyiscalPacket: number;
  /** u32 */
  ulcbPhyiscalFrame: number;
  /** u32 */
  ulcbPhyiscalFrameAlignment: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
}

export const sizeofBDA_TRANSPORT_INFO = 24;

export function allocBDA_TRANSPORT_INFO(data?: Partial<BDA_TRANSPORT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TRANSPORT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulcbPhyiscalPacket !== undefined) view.setUint32(0, Number(data.ulcbPhyiscalPacket), true);
  // 0x04: u32
  if (data?.ulcbPhyiscalFrame !== undefined) view.setUint32(4, Number(data.ulcbPhyiscalFrame), true);
  // 0x08: u32
  if (data?.ulcbPhyiscalFrameAlignment !== undefined) view.setUint32(8, Number(data.ulcbPhyiscalFrameAlignment), true);
  // 0x0c: pad4
  // 0x10: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(16, BigInt(data.AvgTimePerFrame), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KS_DATARANGE_BDA_TRANSPORT (size: 16)
 */
export interface KS_DATARANGE_BDA_TRANSPORT {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.BDA_TRANSPORT_INFO */
  BdaTransportInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_BDA_TRANSPORT = 16;

export function allocKS_DATARANGE_BDA_TRANSPORT(data?: Partial<KS_DATARANGE_BDA_TRANSPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_BDA_TRANSPORT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: pointer
  if (data?.BdaTransportInfo !== undefined) view.setBigUint64(8, data.BdaTransportInfo === null ? 0n : BigInt(util.toPointer(data.BdaTransportInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.ChannelChangeInfo (size: 16)
 */
export interface ChannelChangeInfo {
  /** Windows.Win32.Media.DirectShow.ChannelChangeSpanningEvent_State */
  state: ChannelChangeSpanningEvent_State;
  /** u64 */
  TimeStamp: Deno.PointerValue;
}

export const sizeofChannelChangeInfo = 16;

export function allocChannelChangeInfo(data?: Partial<ChannelChangeInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofChannelChangeInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.state !== undefined) view.setInt32(0, Number(data.state), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.TimeStamp !== undefined) view.setBigUint64(8, BigInt(data.TimeStamp), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.ChannelTypeInfo (size: 16)
 */
export interface ChannelTypeInfo {
  /** Windows.Win32.Media.DirectShow.ChannelType */
  channelType: ChannelType;
  /** u64 */
  timeStamp: Deno.PointerValue;
}

export const sizeofChannelTypeInfo = 16;

export function allocChannelTypeInfo(data?: Partial<ChannelTypeInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofChannelTypeInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.channelType !== undefined) view.setInt32(0, Number(data.channelType), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.timeStamp !== undefined) view.setBigUint64(8, BigInt(data.timeStamp), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.ChannelInfo (size: 16)
 */
export interface ChannelInfo {
  /** i32 */
  lFrequency: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofChannelInfo = 16;

export function allocChannelInfo(data?: Partial<ChannelInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofChannelInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lFrequency !== undefined) view.setInt32(0, Number(data.lFrequency), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.SpanningEventDescriptor (size: 16)
 */
export interface SpanningEventDescriptor {
  /** u16 */
  wDataLen: number;
  /** u16 */
  wProgNumber: number;
  /** u16 */
  wSID: number;
  /** array */
  bDescriptor: Deno.PointerValue | null;
}

export const sizeofSpanningEventDescriptor = 16;

export function allocSpanningEventDescriptor(data?: Partial<SpanningEventDescriptor>): Uint8Array {
  const buf = new Uint8Array(sizeofSpanningEventDescriptor);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wDataLen !== undefined) view.setUint16(0, Number(data.wDataLen), true);
  // 0x02: u16
  if (data?.wProgNumber !== undefined) view.setUint16(2, Number(data.wProgNumber), true);
  // 0x04: u16
  if (data?.wSID !== undefined) view.setUint16(4, Number(data.wSID), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.bDescriptor !== undefined) view.setBigUint64(8, data.bDescriptor === null ? 0n : BigInt(util.toPointer(data.bDescriptor)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DVBScramblingControlSpanningEvent (size: 8)
 */
export interface DVBScramblingControlSpanningEvent {
  /** u32 */
  ulPID: number;
  /** Windows.Win32.Foundation.BOOL */
  fScrambled: boolean;
}

export const sizeofDVBScramblingControlSpanningEvent = 8;

export function allocDVBScramblingControlSpanningEvent(data?: Partial<DVBScramblingControlSpanningEvent>): Uint8Array {
  const buf = new Uint8Array(sizeofDVBScramblingControlSpanningEvent);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulPID !== undefined) view.setUint32(0, Number(data.ulPID), true);
  // 0x04: i32
  if (data?.fScrambled !== undefined) view.setInt32(4, Number(data.fScrambled), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.SpanningEventEmmMessage (size: 24)
 */
export interface SpanningEventEmmMessage {
  /** u8 */
  bCAbroadcasterGroupId: number;
  /** u8 */
  bMessageControl: number;
  /** u16 */
  wServiceId: number;
  /** u16 */
  wTableIdExtension: number;
  /** u8 */
  bDeletionStatus: number;
  /** u8 */
  bDisplayingDuration1: number;
  /** u8 */
  bDisplayingDuration2: number;
  /** u8 */
  bDisplayingDuration3: number;
  /** u8 */
  bDisplayingCycle: number;
  /** u8 */
  bFormatVersion: number;
  /** u8 */
  bDisplayPosition: number;
  /** u16 */
  wMessageLength: number;
  /** array */
  szMessageArea: Deno.PointerValue | null;
}

export const sizeofSpanningEventEmmMessage = 24;

export function allocSpanningEventEmmMessage(data?: Partial<SpanningEventEmmMessage>): Uint8Array {
  const buf = new Uint8Array(sizeofSpanningEventEmmMessage);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bCAbroadcasterGroupId !== undefined) view.setUint8(0, Number(data.bCAbroadcasterGroupId));
  // 0x01: u8
  if (data?.bMessageControl !== undefined) view.setUint8(1, Number(data.bMessageControl));
  // 0x02: u16
  if (data?.wServiceId !== undefined) view.setUint16(2, Number(data.wServiceId), true);
  // 0x04: u16
  if (data?.wTableIdExtension !== undefined) view.setUint16(4, Number(data.wTableIdExtension), true);
  // 0x06: u8
  if (data?.bDeletionStatus !== undefined) view.setUint8(6, Number(data.bDeletionStatus));
  // 0x07: u8
  if (data?.bDisplayingDuration1 !== undefined) view.setUint8(7, Number(data.bDisplayingDuration1));
  // 0x08: u8
  if (data?.bDisplayingDuration2 !== undefined) view.setUint8(8, Number(data.bDisplayingDuration2));
  // 0x09: u8
  if (data?.bDisplayingDuration3 !== undefined) view.setUint8(9, Number(data.bDisplayingDuration3));
  // 0x0a: u8
  if (data?.bDisplayingCycle !== undefined) view.setUint8(10, Number(data.bDisplayingCycle));
  // 0x0b: u8
  if (data?.bFormatVersion !== undefined) view.setUint8(11, Number(data.bFormatVersion));
  // 0x0c: u8
  if (data?.bDisplayPosition !== undefined) view.setUint8(12, Number(data.bDisplayPosition));
  // 0x0d: u16
  if (data?.wMessageLength !== undefined) view.setUint16(13, Number(data.wMessageLength), true);
  // 0x0f: pad1
  // 0x10: pointer
  if (data?.szMessageArea !== undefined) view.setBigUint64(16, data.szMessageArea === null ? 0n : BigInt(util.toPointer(data.szMessageArea)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.LanguageInfo (size: 8)
 */
export interface LanguageInfo {
  /** u16 */
  LangID: number;
  /** i32 */
  lISOLangCode: number;
}

export const sizeofLanguageInfo = 8;

export function allocLanguageInfo(data?: Partial<LanguageInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofLanguageInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.LangID !== undefined) view.setUint16(0, Number(data.LangID), true);
  // 0x02: i32
  if (data?.lISOLangCode !== undefined) view.setInt32(2, Number(data.lISOLangCode), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DualMonoInfo (size: 16)
 */
export interface DualMonoInfo {
  /** u16 */
  LangID1: number;
  /** u16 */
  LangID2: number;
  /** i32 */
  lISOLangCode1: number;
  /** i32 */
  lISOLangCode2: number;
}

export const sizeofDualMonoInfo = 16;

export function allocDualMonoInfo(data?: Partial<DualMonoInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDualMonoInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.LangID1 !== undefined) view.setUint16(0, Number(data.LangID1), true);
  // 0x02: u16
  if (data?.LangID2 !== undefined) view.setUint16(2, Number(data.LangID2), true);
  // 0x04: i32
  if (data?.lISOLangCode1 !== undefined) view.setInt32(4, Number(data.lISOLangCode1), true);
  // 0x08: i32
  if (data?.lISOLangCode2 !== undefined) view.setInt32(8, Number(data.lISOLangCode2), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.PIDListSpanningEvent (size: 16)
 */
export interface PIDListSpanningEvent {
  /** u16 */
  wPIDCount: number;
  /** array */
  pulPIDs: Deno.PointerValue | null;
}

export const sizeofPIDListSpanningEvent = 16;

export function allocPIDListSpanningEvent(data?: Partial<PIDListSpanningEvent>): Uint8Array {
  const buf = new Uint8Array(sizeofPIDListSpanningEvent);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wPIDCount !== undefined) view.setUint16(0, Number(data.wPIDCount), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.pulPIDs !== undefined) view.setBigUint64(8, data.pulPIDs === null ? 0n : BigInt(util.toPointer(data.pulPIDs)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.RATING_ATTRIBUTE (size: 8)
 */
export interface RATING_ATTRIBUTE {
  /** u32 */
  rating_attribute_id: number;
  /** u32 */
  rating_attribute_value: number;
}

export const sizeofRATING_ATTRIBUTE = 8;

export function allocRATING_ATTRIBUTE(data?: Partial<RATING_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofRATING_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rating_attribute_id !== undefined) view.setUint32(0, Number(data.rating_attribute_id), true);
  // 0x04: u32
  if (data?.rating_attribute_value !== undefined) view.setUint32(4, Number(data.rating_attribute_value), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.RATING_SYSTEM (size: 40)
 */
export interface RATING_SYSTEM {
  /** System.Guid */
  rating_system_id: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  _bitfield: number;
  /** array */
  country_code: Deno.PointerValue | null;
  /** u32 */
  rating_attribute_count: number;
  /** ptr */
  lpratingattrib: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRATING_SYSTEM = 40;

export function allocRATING_SYSTEM(data?: Partial<RATING_SYSTEM>): Uint8Array {
  const buf = new Uint8Array(sizeofRATING_SYSTEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rating_system_id !== undefined) view.setBigUint64(0, data.rating_system_id === null ? 0n : BigInt(util.toPointer(data.rating_system_id)), true);
  // 0x08: u8
  if (data?._bitfield !== undefined) view.setUint8(8, Number(data._bitfield));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.country_code !== undefined) view.setBigUint64(16, data.country_code === null ? 0n : BigInt(util.toPointer(data.country_code)), true);
  // 0x18: u32
  if (data?.rating_attribute_count !== undefined) view.setUint32(24, Number(data.rating_attribute_count), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpratingattrib !== undefined) view.setBigUint64(32, data.lpratingattrib === null ? 0n : BigInt(util.toPointer(data.lpratingattrib)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.RATING_INFO (size: 16)
 */
export interface RATING_INFO {
  /** u32 */
  rating_system_count: number;
  /** ptr */
  lpratingsystem: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRATING_INFO = 16;

export function allocRATING_INFO(data?: Partial<RATING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRATING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rating_system_count !== undefined) view.setUint32(0, Number(data.rating_system_count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpratingsystem !== undefined) view.setBigUint64(8, data.lpratingsystem === null ? 0n : BigInt(util.toPointer(data.lpratingsystem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.PBDAParentalControl (size: 16)
 */
export interface PBDAParentalControl {
  /** u32 */
  rating_system_count: number;
  /** ptr */
  rating_systems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPBDAParentalControl = 16;

export function allocPBDAParentalControl(data?: Partial<PBDAParentalControl>): Uint8Array {
  const buf = new Uint8Array(sizeofPBDAParentalControl);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rating_system_count !== undefined) view.setUint32(0, Number(data.rating_system_count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rating_systems !== undefined) view.setBigUint64(8, data.rating_systems === null ? 0n : BigInt(util.toPointer(data.rating_systems)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DvbParentalRatingParam (size: 16)
 */
export interface DvbParentalRatingParam {
  /** array */
  szCountryCode: Deno.PointerValue | null;
  /** u8 */
  bRating: number;
}

export const sizeofDvbParentalRatingParam = 16;

export function allocDvbParentalRatingParam(data?: Partial<DvbParentalRatingParam>): Uint8Array {
  const buf = new Uint8Array(sizeofDvbParentalRatingParam);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szCountryCode !== undefined) view.setBigUint64(0, data.szCountryCode === null ? 0n : BigInt(util.toPointer(data.szCountryCode)), true);
  // 0x08: u8
  if (data?.bRating !== undefined) view.setUint8(8, Number(data.bRating));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DvbParentalRatingDescriptor (size: 16)
 */
export interface DvbParentalRatingDescriptor {
  /** u32 */
  ulNumParams: number;
  /** array */
  pParams: Deno.PointerValue | null;
}

export const sizeofDvbParentalRatingDescriptor = 16;

export function allocDvbParentalRatingDescriptor(data?: Partial<DvbParentalRatingDescriptor>): Uint8Array {
  const buf = new Uint8Array(sizeofDvbParentalRatingDescriptor);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulNumParams !== undefined) view.setUint32(0, Number(data.ulNumParams), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pParams !== undefined) view.setBigUint64(8, data.pParams === null ? 0n : BigInt(util.toPointer(data.pParams)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSPROPERTY_BDA_RF_TUNER_CAPS_S (size: 48)
 */
export interface KSPROPERTY_BDA_RF_TUNER_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mode: number;
  /** u32 */
  AnalogStandardsSupported: number;
  /** u32 */
  DigitalStandardsSupported: number;
  /** u32 */
  MinFrequency: number;
  /** u32 */
  MaxFrequency: number;
  /** u32 */
  SettlingTime: number;
  /** u32 */
  AnalogSensingRange: number;
  /** u32 */
  DigitalSensingRange: number;
  /** u32 */
  MilliSecondsPerMHz: number;
}

export const sizeofKSPROPERTY_BDA_RF_TUNER_CAPS_S = 48;

export function allocKSPROPERTY_BDA_RF_TUNER_CAPS_S(data?: Partial<KSPROPERTY_BDA_RF_TUNER_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BDA_RF_TUNER_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Mode !== undefined) view.setUint32(8, Number(data.Mode), true);
  // 0x0c: u32
  if (data?.AnalogStandardsSupported !== undefined) view.setUint32(12, Number(data.AnalogStandardsSupported), true);
  // 0x10: u32
  if (data?.DigitalStandardsSupported !== undefined) view.setUint32(16, Number(data.DigitalStandardsSupported), true);
  // 0x14: u32
  if (data?.MinFrequency !== undefined) view.setUint32(20, Number(data.MinFrequency), true);
  // 0x18: u32
  if (data?.MaxFrequency !== undefined) view.setUint32(24, Number(data.MaxFrequency), true);
  // 0x1c: u32
  if (data?.SettlingTime !== undefined) view.setUint32(28, Number(data.SettlingTime), true);
  // 0x20: u32
  if (data?.AnalogSensingRange !== undefined) view.setUint32(32, Number(data.AnalogSensingRange), true);
  // 0x24: u32
  if (data?.DigitalSensingRange !== undefined) view.setUint32(36, Number(data.DigitalSensingRange), true);
  // 0x28: u32
  if (data?.MilliSecondsPerMHz !== undefined) view.setUint32(40, Number(data.MilliSecondsPerMHz), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S (size: 24)
 */
export interface KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CurrentFrequency: number;
  /** u32 */
  FrequencyRangeMin: number;
  /** u32 */
  FrequencyRangeMax: number;
  /** u32 */
  MilliSecondsLeft: number;
}

export const sizeofKSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S = 24;

export function allocKSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S(data?: Partial<KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.CurrentFrequency !== undefined) view.setUint32(8, Number(data.CurrentFrequency), true);
  // 0x0c: u32
  if (data?.FrequencyRangeMin !== undefined) view.setUint32(12, Number(data.FrequencyRangeMin), true);
  // 0x10: u32
  if (data?.FrequencyRangeMax !== undefined) view.setUint32(16, Number(data.FrequencyRangeMax), true);
  // 0x14: u32
  if (data?.MilliSecondsLeft !== undefined) view.setUint32(20, Number(data.MilliSecondsLeft), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSPROPERTY_BDA_RF_TUNER_STANDARD_S (size: 16)
 */
export interface KSPROPERTY_BDA_RF_TUNER_STANDARD_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.BDA_SignalType */
  SignalType: BDA_SignalType;
  /** u32 */
  SignalStandard: number;
}

export const sizeofKSPROPERTY_BDA_RF_TUNER_STANDARD_S = 16;

export function allocKSPROPERTY_BDA_RF_TUNER_STANDARD_S(data?: Partial<KSPROPERTY_BDA_RF_TUNER_STANDARD_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BDA_RF_TUNER_STANDARD_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.SignalType !== undefined) view.setInt32(8, Number(data.SignalType), true);
  // 0x0c: u32
  if (data?.SignalStandard !== undefined) view.setUint32(12, Number(data.SignalStandard), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S (size: 16)
 */
export interface KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AutoDetect: boolean;
}

export const sizeofKSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S = 16;

export function allocKSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S(data?: Partial<KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.AutoDetect !== undefined) view.setInt32(8, Number(data.AutoDetect), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSEVENTDATA (size: 16)
 */
export interface KSEVENTDATA {
  /** u32 */
  NotificationType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSEVENTDATA = 16;

export function allocKSEVENTDATA(data?: Partial<KSEVENTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEVENTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NotificationType !== undefined) view.setUint32(0, Number(data.NotificationType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.KSEVENTDATA_BDA_RF_TUNER_SCAN_S (size: 24)
 */
export interface KSEVENTDATA_BDA_RF_TUNER_SCAN_S {
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  EventData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StartFrequency: number;
  /** u32 */
  EndFrequency: number;
  /** Windows.Win32.Media.DirectShow.BDA_LockType */
  LockRequested: BDA_LockType;
}

export const sizeofKSEVENTDATA_BDA_RF_TUNER_SCAN_S = 24;

export function allocKSEVENTDATA_BDA_RF_TUNER_SCAN_S(data?: Partial<KSEVENTDATA_BDA_RF_TUNER_SCAN_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEVENTDATA_BDA_RF_TUNER_SCAN_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EventData !== undefined) view.setBigUint64(0, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  // 0x08: u32
  if (data?.StartFrequency !== undefined) view.setUint32(8, Number(data.StartFrequency), true);
  // 0x0c: u32
  if (data?.EndFrequency !== undefined) view.setUint32(12, Number(data.EndFrequency), true);
  // 0x10: i32
  if (data?.LockRequested !== undefined) view.setInt32(16, Number(data.LockRequested), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.PID_BITS (size: 8)
 */
export interface PID_BITS {
  /** u16 */
  _bitfield: number;
}

export const sizeofPID_BITS = 8;

export function allocPID_BITS(data?: Partial<PID_BITS>): Uint8Array {
  const buf = new Uint8Array(sizeofPID_BITS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_HEADER_BITS (size: 8)
 */
export interface MPEG_HEADER_BITS {
  /** u16 */
  _bitfield: number;
}

export const sizeofMPEG_HEADER_BITS = 8;

export function allocMPEG_HEADER_BITS(data?: Partial<MPEG_HEADER_BITS>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_HEADER_BITS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_HEADER_VERSION_BITS (size: 8)
 */
export interface MPEG_HEADER_VERSION_BITS {
  /** u8 */
  _bitfield: number;
}

export const sizeofMPEG_HEADER_VERSION_BITS = 8;

export function allocMPEG_HEADER_VERSION_BITS(data?: Partial<MPEG_HEADER_VERSION_BITS>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_HEADER_VERSION_BITS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ADPCMCOEFSET (size: 8)
 */
export interface ADPCMCOEFSET {
  /** i16 */
  iCoef1: number;
  /** i16 */
  iCoef2: number;
}

export const sizeofADPCMCOEFSET = 8;

export function allocADPCMCOEFSET(data?: Partial<ADPCMCOEFSET>): Uint8Array {
  const buf = new Uint8Array(sizeofADPCMCOEFSET);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.iCoef1 !== undefined) view.setInt16(0, Number(data.iCoef1), true);
  // 0x02: i16
  if (data?.iCoef2 !== undefined) view.setInt16(2, Number(data.iCoef2), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ADPCMWAVEFORMAT (size: 24)
 */
export interface ADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
  /** u16 */
  wNumCoef: number;
  /** array */
  aCoef: Deno.PointerValue | null;
}

export const sizeofADPCMWAVEFORMAT = 24;

export function allocADPCMWAVEFORMAT(data?: Partial<ADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: u16
  if (data?.wNumCoef !== undefined) view.setUint16(10, Number(data.wNumCoef), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.aCoef !== undefined) view.setBigUint64(16, data.aCoef === null ? 0n : BigInt(util.toPointer(data.aCoef)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DRMWAVEFORMAT (size: 24)
 */
export interface DRMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wReserved: number;
  /** u32 */
  ulContentId: number;
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfxSecure: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDRMWAVEFORMAT = 24;

export function allocDRMWAVEFORMAT(data?: Partial<DRMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDRMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wReserved !== undefined) view.setUint16(8, Number(data.wReserved), true);
  // 0x0a: u32
  if (data?.ulContentId !== undefined) view.setUint32(10, Number(data.ulContentId), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.wfxSecure !== undefined) view.setBigUint64(16, data.wfxSecure === null ? 0n : BigInt(util.toPointer(data.wfxSecure)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DVIADPCMWAVEFORMAT (size: 16)
 */
export interface DVIADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofDVIADPCMWAVEFORMAT = 16;

export function allocDVIADPCMWAVEFORMAT(data?: Partial<DVIADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDVIADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.IMAADPCMWAVEFORMAT (size: 16)
 */
export interface IMAADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofIMAADPCMWAVEFORMAT = 16;

export function allocIMAADPCMWAVEFORMAT(data?: Partial<IMAADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MEDIASPACEADPCMWAVEFORMAT (size: 16)
 */
export interface MEDIASPACEADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofMEDIASPACEADPCMWAVEFORMAT = 16;

export function allocMEDIASPACEADPCMWAVEFORMAT(data?: Partial<MEDIASPACEADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMEDIASPACEADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.SIERRAADPCMWAVEFORMAT (size: 16)
 */
export interface SIERRAADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofSIERRAADPCMWAVEFORMAT = 16;

export function allocSIERRAADPCMWAVEFORMAT(data?: Partial<SIERRAADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofSIERRAADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.G723_ADPCMWAVEFORMAT (size: 16)
 */
export interface G723_ADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  cbExtraSize: number;
  /** u16 */
  nAuxBlockSize: number;
}

export const sizeofG723_ADPCMWAVEFORMAT = 16;

export function allocG723_ADPCMWAVEFORMAT(data?: Partial<G723_ADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofG723_ADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.cbExtraSize !== undefined) view.setUint16(8, Number(data.cbExtraSize), true);
  // 0x0a: u16
  if (data?.nAuxBlockSize !== undefined) view.setUint16(10, Number(data.nAuxBlockSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DIGISTDWAVEFORMAT (size: 8)
 */
export interface DIGISTDWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDIGISTDWAVEFORMAT = 8;

export function allocDIGISTDWAVEFORMAT(data?: Partial<DIGISTDWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIGISTDWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DIGIFIXWAVEFORMAT (size: 8)
 */
export interface DIGIFIXWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDIGIFIXWAVEFORMAT = 8;

export function allocDIGIFIXWAVEFORMAT(data?: Partial<DIGIFIXWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIGIFIXWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DIALOGICOKIADPCMWAVEFORMAT (size: 8)
 */
export interface DIALOGICOKIADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  ewf: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDIALOGICOKIADPCMWAVEFORMAT = 8;

export function allocDIALOGICOKIADPCMWAVEFORMAT(data?: Partial<DIALOGICOKIADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIALOGICOKIADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ewf !== undefined) view.setBigUint64(0, data.ewf === null ? 0n : BigInt(util.toPointer(data.ewf)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.YAMAHA_ADPCMWAVEFORMAT (size: 8)
 */
export interface YAMAHA_ADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofYAMAHA_ADPCMWAVEFORMAT = 8;

export function allocYAMAHA_ADPCMWAVEFORMAT(data?: Partial<YAMAHA_ADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofYAMAHA_ADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.SONARCWAVEFORMAT (size: 16)
 */
export interface SONARCWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wCompType: number;
}

export const sizeofSONARCWAVEFORMAT = 16;

export function allocSONARCWAVEFORMAT(data?: Partial<SONARCWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofSONARCWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wCompType !== undefined) view.setUint16(8, Number(data.wCompType), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.TRUESPEECHWAVEFORMAT (size: 24)
 */
export interface TRUESPEECHWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
  /** u16 */
  nSamplesPerBlock: number;
  /** array */
  abReserved: Deno.PointerValue | null;
}

export const sizeofTRUESPEECHWAVEFORMAT = 24;

export function allocTRUESPEECHWAVEFORMAT(data?: Partial<TRUESPEECHWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUESPEECHWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: u16
  if (data?.nSamplesPerBlock !== undefined) view.setUint16(10, Number(data.nSamplesPerBlock), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.abReserved !== undefined) view.setBigUint64(16, data.abReserved === null ? 0n : BigInt(util.toPointer(data.abReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ECHOSC1WAVEFORMAT (size: 8)
 */
export interface ECHOSC1WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofECHOSC1WAVEFORMAT = 8;

export function allocECHOSC1WAVEFORMAT(data?: Partial<ECHOSC1WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofECHOSC1WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AUDIOFILE_AF36WAVEFORMAT (size: 8)
 */
export interface AUDIOFILE_AF36WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIOFILE_AF36WAVEFORMAT = 8;

export function allocAUDIOFILE_AF36WAVEFORMAT(data?: Partial<AUDIOFILE_AF36WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIOFILE_AF36WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.APTXWAVEFORMAT (size: 8)
 */
export interface APTXWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPTXWAVEFORMAT = 8;

export function allocAPTXWAVEFORMAT(data?: Partial<APTXWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofAPTXWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AUDIOFILE_AF10WAVEFORMAT (size: 8)
 */
export interface AUDIOFILE_AF10WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIOFILE_AF10WAVEFORMAT = 8;

export function allocAUDIOFILE_AF10WAVEFORMAT(data?: Partial<AUDIOFILE_AF10WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIOFILE_AF10WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DOLBYAC2WAVEFORMAT (size: 16)
 */
export interface DOLBYAC2WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  nAuxBitsCode: number;
}

export const sizeofDOLBYAC2WAVEFORMAT = 16;

export function allocDOLBYAC2WAVEFORMAT(data?: Partial<DOLBYAC2WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDOLBYAC2WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.nAuxBitsCode !== undefined) view.setUint16(8, Number(data.nAuxBitsCode), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.GSM610WAVEFORMAT (size: 16)
 */
export interface GSM610WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofGSM610WAVEFORMAT = 16;

export function allocGSM610WAVEFORMAT(data?: Partial<GSM610WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofGSM610WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ADPCMEWAVEFORMAT (size: 16)
 */
export interface ADPCMEWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofADPCMEWAVEFORMAT = 16;

export function allocADPCMEWAVEFORMAT(data?: Partial<ADPCMEWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofADPCMEWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CONTRESVQLPCWAVEFORMAT (size: 16)
 */
export interface CONTRESVQLPCWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofCONTRESVQLPCWAVEFORMAT = 16;

export function allocCONTRESVQLPCWAVEFORMAT(data?: Partial<CONTRESVQLPCWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTRESVQLPCWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DIGIREALWAVEFORMAT (size: 16)
 */
export interface DIGIREALWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofDIGIREALWAVEFORMAT = 16;

export function allocDIGIREALWAVEFORMAT(data?: Partial<DIGIREALWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIGIREALWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DIGIADPCMWAVEFORMAT (size: 16)
 */
export interface DIGIADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofDIGIADPCMWAVEFORMAT = 16;

export function allocDIGIADPCMWAVEFORMAT(data?: Partial<DIGIADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIGIADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CONTRESCR10WAVEFORMAT (size: 16)
 */
export interface CONTRESCR10WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofCONTRESCR10WAVEFORMAT = 16;

export function allocCONTRESCR10WAVEFORMAT(data?: Partial<CONTRESCR10WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTRESCR10WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.NMS_VBXADPCMWAVEFORMAT (size: 16)
 */
export interface NMS_VBXADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofNMS_VBXADPCMWAVEFORMAT = 16;

export function allocNMS_VBXADPCMWAVEFORMAT(data?: Partial<NMS_VBXADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNMS_VBXADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.G721_ADPCMWAVEFORMAT (size: 16)
 */
export interface G721_ADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  nAuxBlockSize: number;
}

export const sizeofG721_ADPCMWAVEFORMAT = 16;

export function allocG721_ADPCMWAVEFORMAT(data?: Partial<G721_ADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofG721_ADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.nAuxBlockSize !== undefined) view.setUint16(8, Number(data.nAuxBlockSize), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MSAUDIO1WAVEFORMAT (size: 16)
 */
export interface MSAUDIO1WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
  /** u16 */
  wEncodeOptions: number;
}

export const sizeofMSAUDIO1WAVEFORMAT = 16;

export function allocMSAUDIO1WAVEFORMAT(data?: Partial<MSAUDIO1WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMSAUDIO1WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: u16
  if (data?.wEncodeOptions !== undefined) view.setUint16(10, Number(data.wEncodeOptions), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.WMAUDIO2WAVEFORMAT (size: 24)
 */
export interface WMAUDIO2WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSamplesPerBlock: number;
  /** u16 */
  wEncodeOptions: number;
  /** u32 */
  dwSuperBlockAlign: number;
}

export const sizeofWMAUDIO2WAVEFORMAT = 24;

export function allocWMAUDIO2WAVEFORMAT(data?: Partial<WMAUDIO2WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMAUDIO2WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u32
  if (data?.dwSamplesPerBlock !== undefined) view.setUint32(8, Number(data.dwSamplesPerBlock), true);
  // 0x0c: u16
  if (data?.wEncodeOptions !== undefined) view.setUint16(12, Number(data.wEncodeOptions), true);
  // 0x0e: u32
  if (data?.dwSuperBlockAlign !== undefined) view.setUint32(14, Number(data.dwSuperBlockAlign), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.WMAUDIO3WAVEFORMAT (size: 32)
 */
export interface WMAUDIO3WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wValidBitsPerSample: number;
  /** u32 */
  dwChannelMask: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u16 */
  wEncodeOptions: number;
  /** u16 */
  wReserved3: number;
}

export const sizeofWMAUDIO3WAVEFORMAT = 32;

export function allocWMAUDIO3WAVEFORMAT(data?: Partial<WMAUDIO3WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMAUDIO3WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wValidBitsPerSample !== undefined) view.setUint16(8, Number(data.wValidBitsPerSample), true);
  // 0x0a: u32
  if (data?.dwChannelMask !== undefined) view.setUint32(10, Number(data.dwChannelMask), true);
  // 0x0e: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(14, Number(data.dwReserved1), true);
  // 0x12: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(18, Number(data.dwReserved2), true);
  // 0x16: u16
  if (data?.wEncodeOptions !== undefined) view.setUint16(22, Number(data.wEncodeOptions), true);
  // 0x18: u16
  if (data?.wReserved3 !== undefined) view.setUint16(24, Number(data.wReserved3), true);
  // 0x1a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CREATIVEADPCMWAVEFORMAT (size: 16)
 */
export interface CREATIVEADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofCREATIVEADPCMWAVEFORMAT = 16;

export function allocCREATIVEADPCMWAVEFORMAT(data?: Partial<CREATIVEADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATIVEADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CREATIVEFASTSPEECH8WAVEFORMAT (size: 16)
 */
export interface CREATIVEFASTSPEECH8WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofCREATIVEFASTSPEECH8WAVEFORMAT = 16;

export function allocCREATIVEFASTSPEECH8WAVEFORMAT(data?: Partial<CREATIVEFASTSPEECH8WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATIVEFASTSPEECH8WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CREATIVEFASTSPEECH10WAVEFORMAT (size: 16)
 */
export interface CREATIVEFASTSPEECH10WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofCREATIVEFASTSPEECH10WAVEFORMAT = 16;

export function allocCREATIVEFASTSPEECH10WAVEFORMAT(data?: Partial<CREATIVEFASTSPEECH10WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATIVEFASTSPEECH10WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.FMTOWNS_SND_WAVEFORMAT (size: 16)
 */
export interface FMTOWNS_SND_WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofFMTOWNS_SND_WAVEFORMAT = 16;

export function allocFMTOWNS_SND_WAVEFORMAT(data?: Partial<FMTOWNS_SND_WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofFMTOWNS_SND_WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.OLIGSMWAVEFORMAT (size: 8)
 */
export interface OLIGSMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLIGSMWAVEFORMAT = 8;

export function allocOLIGSMWAVEFORMAT(data?: Partial<OLIGSMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOLIGSMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.OLIADPCMWAVEFORMAT (size: 8)
 */
export interface OLIADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLIADPCMWAVEFORMAT = 8;

export function allocOLIADPCMWAVEFORMAT(data?: Partial<OLIADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOLIADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.OLICELPWAVEFORMAT (size: 8)
 */
export interface OLICELPWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLICELPWAVEFORMAT = 8;

export function allocOLICELPWAVEFORMAT(data?: Partial<OLICELPWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOLICELPWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.OLISBCWAVEFORMAT (size: 8)
 */
export interface OLISBCWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLISBCWAVEFORMAT = 8;

export function allocOLISBCWAVEFORMAT(data?: Partial<OLISBCWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOLISBCWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.OLIOPRWAVEFORMAT (size: 8)
 */
export interface OLIOPRWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLIOPRWAVEFORMAT = 8;

export function allocOLIOPRWAVEFORMAT(data?: Partial<OLIOPRWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOLIOPRWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CSIMAADPCMWAVEFORMAT (size: 8)
 */
export interface CSIMAADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCSIMAADPCMWAVEFORMAT = 8;

export function allocCSIMAADPCMWAVEFORMAT(data?: Partial<CSIMAADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCSIMAADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

export type CHAR = number;

/**
 * Windows.Win32.Media.Multimedia.s_RIFFWAVE_inst (size: 32)
 */
export interface s_RIFFWAVE_inst {
  /** u8 */
  bUnshiftedNote: number;
  /** Windows.Win32.Foundation.CHAR */
  chFineTune: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  chGain: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  bLowNote: number;
  /** u8 */
  bHighNote: number;
  /** u8 */
  bLowVelocity: number;
  /** u8 */
  bHighVelocity: number;
}

export const sizeofS_RIFFWAVE_inst = 32;

export function allocS_RIFFWAVE_inst(data?: Partial<s_RIFFWAVE_inst>): Uint8Array {
  const buf = new Uint8Array(sizeofS_RIFFWAVE_inst);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bUnshiftedNote !== undefined) view.setUint8(0, Number(data.bUnshiftedNote));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.chFineTune !== undefined) view.setBigUint64(8, data.chFineTune === null ? 0n : BigInt(util.toPointer(data.chFineTune)), true);
  // 0x10: pointer
  if (data?.chGain !== undefined) view.setBigUint64(16, data.chGain === null ? 0n : BigInt(util.toPointer(data.chGain)), true);
  // 0x18: u8
  if (data?.bLowNote !== undefined) view.setUint8(24, Number(data.bLowNote));
  // 0x19: u8
  if (data?.bHighNote !== undefined) view.setUint8(25, Number(data.bHighNote));
  // 0x1a: u8
  if (data?.bLowVelocity !== undefined) view.setUint8(26, Number(data.bLowVelocity));
  // 0x1b: u8
  if (data?.bHighVelocity !== undefined) view.setUint8(27, Number(data.bHighVelocity));
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.EXBMINFOHEADER (size: 16)
 */
export interface EXBMINFOHEADER {
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmi: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  biExtDataOffset: number;
}

export const sizeofEXBMINFOHEADER = 16;

export function allocEXBMINFOHEADER(data?: Partial<EXBMINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofEXBMINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bmi !== undefined) view.setBigUint64(0, data.bmi === null ? 0n : BigInt(util.toPointer(data.bmi)), true);
  // 0x08: u32
  if (data?.biExtDataOffset !== undefined) view.setUint32(8, Number(data.biExtDataOffset), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JPEGINFOHEADER (size: 24)
 */
export interface JPEGINFOHEADER {
  /** u32 */
  JPEGSize: number;
  /** u32 */
  JPEGProcess: number;
  /** u32 */
  JPEGColorSpaceID: number;
  /** u32 */
  JPEGBitsPerSample: number;
  /** u32 */
  JPEGHSubSampling: number;
  /** u32 */
  JPEGVSubSampling: number;
}

export const sizeofJPEGINFOHEADER = 24;

export function allocJPEGINFOHEADER(data?: Partial<JPEGINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofJPEGINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.JPEGSize !== undefined) view.setUint32(0, Number(data.JPEGSize), true);
  // 0x04: u32
  if (data?.JPEGProcess !== undefined) view.setUint32(4, Number(data.JPEGProcess), true);
  // 0x08: u32
  if (data?.JPEGColorSpaceID !== undefined) view.setUint32(8, Number(data.JPEGColorSpaceID), true);
  // 0x0c: u32
  if (data?.JPEGBitsPerSample !== undefined) view.setUint32(12, Number(data.JPEGBitsPerSample), true);
  // 0x10: u32
  if (data?.JPEGHSubSampling !== undefined) view.setUint32(16, Number(data.JPEGHSubSampling), true);
  // 0x14: u32
  if (data?.JPEGVSubSampling !== undefined) view.setUint32(20, Number(data.JPEGVSubSampling), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_GENERIC_PARMS (size: 8)
 */
export interface MCI_GENERIC_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
}

export const sizeofMCI_GENERIC_PARMS = 8;

export function allocMCI_GENERIC_PARMS(data?: Partial<MCI_GENERIC_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_GENERIC_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OPEN_PARMSA (size: 40)
 */
export interface MCI_OPEN_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlias: string | null;
}

export const sizeofMCI_OPEN_PARMSA = 40;

export function allocMCI_OPEN_PARMSA(data?: Partial<MCI_OPEN_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OPEN_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OPEN_PARMSW (size: 40)
 */
export interface MCI_OPEN_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlias: string | null;
}

export const sizeofMCI_OPEN_PARMSW = 40;

export function allocMCI_OPEN_PARMSW(data?: Partial<MCI_OPEN_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OPEN_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_PLAY_PARMS (size: 16)
 */
export interface MCI_PLAY_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
}

export const sizeofMCI_PLAY_PARMS = 16;

export function allocMCI_PLAY_PARMS(data?: Partial<MCI_PLAY_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_PLAY_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SEEK_PARMS (size: 16)
 */
export interface MCI_SEEK_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTo: number;
}

export const sizeofMCI_SEEK_PARMS = 16;

export function allocMCI_SEEK_PARMS(data?: Partial<MCI_SEEK_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SEEK_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTo !== undefined) view.setUint32(8, Number(data.dwTo), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_STATUS_PARMS (size: 24)
 */
export interface MCI_STATUS_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwReturn: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwTrack: number;
}

export const sizeofMCI_STATUS_PARMS = 24;

export function allocMCI_STATUS_PARMS(data?: Partial<MCI_STATUS_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_STATUS_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: usize
  if (data?.dwReturn !== undefined) view.setBigUint64(8, BigInt(data.dwReturn), true);
  // 0x10: u32
  if (data?.dwItem !== undefined) view.setUint32(16, Number(data.dwItem), true);
  // 0x14: u32
  if (data?.dwTrack !== undefined) view.setUint32(20, Number(data.dwTrack), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_INFO_PARMSA (size: 24)
 */
export interface MCI_INFO_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
}

export const sizeofMCI_INFO_PARMSA = 24;

export function allocMCI_INFO_PARMSA(data?: Partial<MCI_INFO_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_INFO_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_INFO_PARMSW (size: 24)
 */
export interface MCI_INFO_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
}

export const sizeofMCI_INFO_PARMSW = 24;

export function allocMCI_INFO_PARMSW(data?: Partial<MCI_INFO_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_INFO_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_GETDEVCAPS_PARMS (size: 16)
 */
export interface MCI_GETDEVCAPS_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwReturn: number;
  /** u32 */
  dwItem: number;
}

export const sizeofMCI_GETDEVCAPS_PARMS = 16;

export function allocMCI_GETDEVCAPS_PARMS(data?: Partial<MCI_GETDEVCAPS_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_GETDEVCAPS_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwReturn !== undefined) view.setUint32(8, Number(data.dwReturn), true);
  // 0x0c: u32
  if (data?.dwItem !== undefined) view.setUint32(12, Number(data.dwItem), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SYSINFO_PARMSA (size: 32)
 */
export interface MCI_SYSINFO_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
  /** u32 */
  dwNumber: number;
  /** u32 */
  wDeviceType: number;
}

export const sizeofMCI_SYSINFO_PARMSA = 32;

export function allocMCI_SYSINFO_PARMSA(data?: Partial<MCI_SYSINFO_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SYSINFO_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: u32
  if (data?.dwNumber !== undefined) view.setUint32(20, Number(data.dwNumber), true);
  // 0x18: u32
  if (data?.wDeviceType !== undefined) view.setUint32(24, Number(data.wDeviceType), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SYSINFO_PARMSW (size: 32)
 */
export interface MCI_SYSINFO_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
  /** u32 */
  dwNumber: number;
  /** u32 */
  wDeviceType: number;
}

export const sizeofMCI_SYSINFO_PARMSW = 32;

export function allocMCI_SYSINFO_PARMSW(data?: Partial<MCI_SYSINFO_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SYSINFO_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: u32
  if (data?.dwNumber !== undefined) view.setUint32(20, Number(data.dwNumber), true);
  // 0x18: u32
  if (data?.wDeviceType !== undefined) view.setUint32(24, Number(data.wDeviceType), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SET_PARMS (size: 16)
 */
export interface MCI_SET_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTimeFormat: number;
  /** u32 */
  dwAudio: number;
}

export const sizeofMCI_SET_PARMS = 16;

export function allocMCI_SET_PARMS(data?: Partial<MCI_SET_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SET_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTimeFormat !== undefined) view.setUint32(8, Number(data.dwTimeFormat), true);
  // 0x0c: u32
  if (data?.dwAudio !== undefined) view.setUint32(12, Number(data.dwAudio), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.MCI_BREAK_PARMS (size: 24)
 */
export interface MCI_BREAK_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** i32 */
  nVirtKey: number;
  /** Windows.Win32.Foundation.HWND */
  hwndBreak: Deno.PointerValue | null;
}

export const sizeofMCI_BREAK_PARMS = 24;

export function allocMCI_BREAK_PARMS(data?: Partial<MCI_BREAK_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_BREAK_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: i32
  if (data?.nVirtKey !== undefined) view.setInt32(8, Number(data.nVirtKey), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hwndBreak !== undefined) view.setBigUint64(16, data.hwndBreak === null ? 0n : BigInt(util.toPointer(data.hwndBreak)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SAVE_PARMSA (size: 16)
 */
export interface MCI_SAVE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpfilename: string | null;
}

export const sizeofMCI_SAVE_PARMSA = 16;

export function allocMCI_SAVE_PARMSA(data?: Partial<MCI_SAVE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SAVE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SAVE_PARMSW (size: 16)
 */
export interface MCI_SAVE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpfilename: string | null;
}

export const sizeofMCI_SAVE_PARMSW = 16;

export function allocMCI_SAVE_PARMSW(data?: Partial<MCI_SAVE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SAVE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_LOAD_PARMSA (size: 16)
 */
export interface MCI_LOAD_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpfilename: string | null;
}

export const sizeofMCI_LOAD_PARMSA = 16;

export function allocMCI_LOAD_PARMSA(data?: Partial<MCI_LOAD_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_LOAD_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_LOAD_PARMSW (size: 16)
 */
export interface MCI_LOAD_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpfilename: string | null;
}

export const sizeofMCI_LOAD_PARMSW = 16;

export function allocMCI_LOAD_PARMSW(data?: Partial<MCI_LOAD_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_LOAD_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_RECORD_PARMS (size: 16)
 */
export interface MCI_RECORD_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
}

export const sizeofMCI_RECORD_PARMS = 16;

export function allocMCI_RECORD_PARMS(data?: Partial<MCI_RECORD_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_RECORD_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_VD_PLAY_PARMS (size: 24)
 */
export interface MCI_VD_PLAY_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** u32 */
  dwSpeed: number;
}

export const sizeofMCI_VD_PLAY_PARMS = 24;

export function allocMCI_VD_PLAY_PARMS(data?: Partial<MCI_VD_PLAY_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_VD_PLAY_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: u32
  if (data?.dwSpeed !== undefined) view.setUint32(16, Number(data.dwSpeed), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_VD_STEP_PARMS (size: 16)
 */
export interface MCI_VD_STEP_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrames: number;
}

export const sizeofMCI_VD_STEP_PARMS = 16;

export function allocMCI_VD_STEP_PARMS(data?: Partial<MCI_VD_STEP_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_VD_STEP_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrames !== undefined) view.setUint32(8, Number(data.dwFrames), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_VD_ESCAPE_PARMSA (size: 16)
 */
export interface MCI_VD_ESCAPE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCommand: string | null;
}

export const sizeofMCI_VD_ESCAPE_PARMSA = 16;

export function allocMCI_VD_ESCAPE_PARMSA(data?: Partial<MCI_VD_ESCAPE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_VD_ESCAPE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrCommand !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrCommand);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_VD_ESCAPE_PARMSW (size: 16)
 */
export interface MCI_VD_ESCAPE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCommand: string | null;
}

export const sizeofMCI_VD_ESCAPE_PARMSW = 16;

export function allocMCI_VD_ESCAPE_PARMSW(data?: Partial<MCI_VD_ESCAPE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_VD_ESCAPE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrCommand !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrCommand);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_WAVE_OPEN_PARMSA (size: 48)
 */
export interface MCI_WAVE_OPEN_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwBufferSeconds: number;
}

export const sizeofMCI_WAVE_OPEN_PARMSA = 48;

export function allocMCI_WAVE_OPEN_PARMSA(data?: Partial<MCI_WAVE_OPEN_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_WAVE_OPEN_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwBufferSeconds !== undefined) view.setUint32(40, Number(data.dwBufferSeconds), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_WAVE_OPEN_PARMSW (size: 48)
 */
export interface MCI_WAVE_OPEN_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwBufferSeconds: number;
}

export const sizeofMCI_WAVE_OPEN_PARMSW = 48;

export function allocMCI_WAVE_OPEN_PARMSW(data?: Partial<MCI_WAVE_OPEN_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_WAVE_OPEN_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwBufferSeconds !== undefined) view.setUint32(40, Number(data.dwBufferSeconds), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_WAVE_DELETE_PARMS (size: 16)
 */
export interface MCI_WAVE_DELETE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
}

export const sizeofMCI_WAVE_DELETE_PARMS = 16;

export function allocMCI_WAVE_DELETE_PARMS(data?: Partial<MCI_WAVE_DELETE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_WAVE_DELETE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_WAVE_SET_PARMS (size: 48)
 */
export interface MCI_WAVE_SET_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTimeFormat: number;
  /** u32 */
  dwAudio: number;
  /** u32 */
  wInput: number;
  /** u32 */
  wOutput: number;
  /** u16 */
  wFormatTag: number;
  /** u16 */
  wReserved2: number;
  /** u16 */
  nChannels: number;
  /** u16 */
  wReserved3: number;
  /** u32 */
  nSamplesPerSec: number;
  /** u32 */
  nAvgBytesPerSec: number;
  /** u16 */
  nBlockAlign: number;
  /** u16 */
  wReserved4: number;
  /** u16 */
  wBitsPerSample: number;
  /** u16 */
  wReserved5: number;
}

export const sizeofMCI_WAVE_SET_PARMS = 48;

export function allocMCI_WAVE_SET_PARMS(data?: Partial<MCI_WAVE_SET_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_WAVE_SET_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTimeFormat !== undefined) view.setUint32(8, Number(data.dwTimeFormat), true);
  // 0x0c: u32
  if (data?.dwAudio !== undefined) view.setUint32(12, Number(data.dwAudio), true);
  // 0x10: u32
  if (data?.wInput !== undefined) view.setUint32(16, Number(data.wInput), true);
  // 0x14: u32
  if (data?.wOutput !== undefined) view.setUint32(20, Number(data.wOutput), true);
  // 0x18: u16
  if (data?.wFormatTag !== undefined) view.setUint16(24, Number(data.wFormatTag), true);
  // 0x1a: u16
  if (data?.wReserved2 !== undefined) view.setUint16(26, Number(data.wReserved2), true);
  // 0x1c: u16
  if (data?.nChannels !== undefined) view.setUint16(28, Number(data.nChannels), true);
  // 0x1e: u16
  if (data?.wReserved3 !== undefined) view.setUint16(30, Number(data.wReserved3), true);
  // 0x20: u32
  if (data?.nSamplesPerSec !== undefined) view.setUint32(32, Number(data.nSamplesPerSec), true);
  // 0x24: u32
  if (data?.nAvgBytesPerSec !== undefined) view.setUint32(36, Number(data.nAvgBytesPerSec), true);
  // 0x28: u16
  if (data?.nBlockAlign !== undefined) view.setUint16(40, Number(data.nBlockAlign), true);
  // 0x2a: u16
  if (data?.wReserved4 !== undefined) view.setUint16(42, Number(data.wReserved4), true);
  // 0x2c: u16
  if (data?.wBitsPerSample !== undefined) view.setUint16(44, Number(data.wBitsPerSample), true);
  // 0x2e: u16
  if (data?.wReserved5 !== undefined) view.setUint16(46, Number(data.wReserved5), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SEQ_SET_PARMS (size: 40)
 */
export interface MCI_SEQ_SET_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTimeFormat: number;
  /** u32 */
  dwAudio: number;
  /** u32 */
  dwTempo: number;
  /** u32 */
  dwPort: number;
  /** u32 */
  dwSlave: number;
  /** u32 */
  dwMaster: number;
  /** u32 */
  dwOffset: number;
}

export const sizeofMCI_SEQ_SET_PARMS = 40;

export function allocMCI_SEQ_SET_PARMS(data?: Partial<MCI_SEQ_SET_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SEQ_SET_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTimeFormat !== undefined) view.setUint32(8, Number(data.dwTimeFormat), true);
  // 0x0c: u32
  if (data?.dwAudio !== undefined) view.setUint32(12, Number(data.dwAudio), true);
  // 0x10: u32
  if (data?.dwTempo !== undefined) view.setUint32(16, Number(data.dwTempo), true);
  // 0x14: u32
  if (data?.dwPort !== undefined) view.setUint32(20, Number(data.dwPort), true);
  // 0x18: u32
  if (data?.dwSlave !== undefined) view.setUint32(24, Number(data.dwSlave), true);
  // 0x1c: u32
  if (data?.dwMaster !== undefined) view.setUint32(28, Number(data.dwMaster), true);
  // 0x20: u32
  if (data?.dwOffset !== undefined) view.setUint32(32, Number(data.dwOffset), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_OPEN_PARMSA (size: 56)
 */
export interface MCI_ANIM_OPEN_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_ANIM_OPEN_PARMSA = 56;

export function allocMCI_ANIM_OPEN_PARMSA(data?: Partial<MCI_ANIM_OPEN_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_OPEN_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_OPEN_PARMSW (size: 56)
 */
export interface MCI_ANIM_OPEN_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_ANIM_OPEN_PARMSW = 56;

export function allocMCI_ANIM_OPEN_PARMSW(data?: Partial<MCI_ANIM_OPEN_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_OPEN_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_PLAY_PARMS (size: 24)
 */
export interface MCI_ANIM_PLAY_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** u32 */
  dwSpeed: number;
}

export const sizeofMCI_ANIM_PLAY_PARMS = 24;

export function allocMCI_ANIM_PLAY_PARMS(data?: Partial<MCI_ANIM_PLAY_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_PLAY_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: u32
  if (data?.dwSpeed !== undefined) view.setUint32(16, Number(data.dwSpeed), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_STEP_PARMS (size: 16)
 */
export interface MCI_ANIM_STEP_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrames: number;
}

export const sizeofMCI_ANIM_STEP_PARMS = 16;

export function allocMCI_ANIM_STEP_PARMS(data?: Partial<MCI_ANIM_STEP_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_STEP_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrames !== undefined) view.setUint32(8, Number(data.dwFrames), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_WINDOW_PARMSA (size: 32)
 */
export interface MCI_ANIM_WINDOW_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null;
}

export const sizeofMCI_ANIM_WINDOW_PARMSA = 32;

export function allocMCI_ANIM_WINDOW_PARMSA(data?: Partial<MCI_ANIM_WINDOW_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_WINDOW_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_WINDOW_PARMSW (size: 32)
 */
export interface MCI_ANIM_WINDOW_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null;
}

export const sizeofMCI_ANIM_WINDOW_PARMSW = 32;

export function allocMCI_ANIM_WINDOW_PARMSW(data?: Partial<MCI_ANIM_WINDOW_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_WINDOW_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_RECT_PARMS (size: 16)
 */
export interface MCI_ANIM_RECT_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_ANIM_RECT_PARMS = 16;

export function allocMCI_ANIM_RECT_PARMS(data?: Partial<MCI_ANIM_RECT_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_RECT_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_UPDATE_PARMS (size: 24)
 */
export interface MCI_ANIM_UPDATE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_ANIM_UPDATE_PARMS = 24;

export function allocMCI_ANIM_UPDATE_PARMS(data?: Partial<MCI_ANIM_UPDATE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_UPDATE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x10: pointer
  if (data?.hDC !== undefined) view.setBigUint64(16, data.hDC === null ? 0n : BigInt(util.toPointer(data.hDC)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_OPEN_PARMSA (size: 56)
 */
export interface MCI_OVLY_OPEN_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_OPEN_PARMSA = 56;

export function allocMCI_OVLY_OPEN_PARMSA(data?: Partial<MCI_OVLY_OPEN_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_OPEN_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_OPEN_PARMSW (size: 56)
 */
export interface MCI_OVLY_OPEN_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_OPEN_PARMSW = 56;

export function allocMCI_OVLY_OPEN_PARMSW(data?: Partial<MCI_OVLY_OPEN_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_OPEN_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_WINDOW_PARMSA (size: 32)
 */
export interface MCI_OVLY_WINDOW_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null;
}

export const sizeofMCI_OVLY_WINDOW_PARMSA = 32;

export function allocMCI_OVLY_WINDOW_PARMSA(data?: Partial<MCI_OVLY_WINDOW_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_WINDOW_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_WINDOW_PARMSW (size: 32)
 */
export interface MCI_OVLY_WINDOW_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null;
}

export const sizeofMCI_OVLY_WINDOW_PARMSW = 32;

export function allocMCI_OVLY_WINDOW_PARMSW(data?: Partial<MCI_OVLY_WINDOW_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_WINDOW_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_RECT_PARMS (size: 16)
 */
export interface MCI_OVLY_RECT_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_RECT_PARMS = 16;

export function allocMCI_OVLY_RECT_PARMS(data?: Partial<MCI_OVLY_RECT_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_RECT_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_SAVE_PARMSA (size: 24)
 */
export interface MCI_OVLY_SAVE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpfilename: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_SAVE_PARMSA = 24;

export function allocMCI_OVLY_SAVE_PARMSA(data?: Partial<MCI_OVLY_SAVE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_SAVE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_SAVE_PARMSW (size: 24)
 */
export interface MCI_OVLY_SAVE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpfilename: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_SAVE_PARMSW = 24;

export function allocMCI_OVLY_SAVE_PARMSW(data?: Partial<MCI_OVLY_SAVE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_SAVE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_LOAD_PARMSA (size: 24)
 */
export interface MCI_OVLY_LOAD_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpfilename: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_LOAD_PARMSA = 24;

export function allocMCI_OVLY_LOAD_PARMSA(data?: Partial<MCI_OVLY_LOAD_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_LOAD_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_LOAD_PARMSW (size: 24)
 */
export interface MCI_OVLY_LOAD_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpfilename: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_LOAD_PARMSW = 24;

export function allocMCI_OVLY_LOAD_PARMSW(data?: Partial<MCI_OVLY_LOAD_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_LOAD_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DRVCONFIGINFOEX (size: 32)
 */
export interface DRVCONFIGINFOEX {
  /** u32 */
  dwDCISize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDCISectionName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDCIAliasName: string | null;
  /** u32 */
  dnDevNode: number;
}

export const sizeofDRVCONFIGINFOEX = 32;

export function allocDRVCONFIGINFOEX(data?: Partial<DRVCONFIGINFOEX>): Uint8Array {
  const buf = new Uint8Array(sizeofDRVCONFIGINFOEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDCISize !== undefined) view.setUint32(0, Number(data.dwDCISize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszDCISectionName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszDCISectionName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszDCIAliasName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszDCIAliasName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dnDevNode !== undefined) view.setUint32(24, Number(data.dnDevNode), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DRVCONFIGINFO (size: 24)
 */
export interface DRVCONFIGINFO {
  /** u32 */
  dwDCISize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDCISectionName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDCIAliasName: string | null;
}

export const sizeofDRVCONFIGINFO = 24;

export function allocDRVCONFIGINFO(data?: Partial<DRVCONFIGINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDRVCONFIGINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDCISize !== undefined) view.setUint32(0, Number(data.dwDCISize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszDCISectionName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszDCISectionName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszDCIAliasName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszDCIAliasName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MMIOINFO (size: 104)
 */
export interface MMIOINFO {
  /** u32 */
  dwFlags: number;
  /** u32 */
  fccIOProc: number;
  /** Windows.Win32.Media.Multimedia.LPMMIOPROC */
  pIOProc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  wErrorRet: number;
  /** Windows.Win32.Media.HTASK */
  htask: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  cchBuffer: number;
  /** ptr */
  pchBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pchNext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pchEndRead: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pchEndWrite: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  lBufOffset: number;
  /** i32 */
  lDiskOffset: number;
  /** array */
  adwInfo: Deno.PointerValue | null;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** Windows.Win32.Media.Multimedia.HMMIO */
  hmmio: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMMIOINFO = 104;

export function allocMMIOINFO(data?: Partial<MMIOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMMIOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.fccIOProc !== undefined) view.setUint32(4, Number(data.fccIOProc), true);
  // 0x08: pointer
  if (data?.pIOProc !== undefined) view.setBigUint64(8, data.pIOProc === null ? 0n : BigInt(util.toPointer(data.pIOProc)), true);
  // 0x10: u32
  if (data?.wErrorRet !== undefined) view.setUint32(16, Number(data.wErrorRet), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.htask !== undefined) view.setBigUint64(24, data.htask === null ? 0n : BigInt(util.toPointer(data.htask)), true);
  // 0x20: i32
  if (data?.cchBuffer !== undefined) view.setInt32(32, Number(data.cchBuffer), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pchBuffer !== undefined) view.setBigUint64(40, data.pchBuffer === null ? 0n : BigInt(util.toPointer(data.pchBuffer)), true);
  // 0x30: pointer
  if (data?.pchNext !== undefined) view.setBigUint64(48, data.pchNext === null ? 0n : BigInt(util.toPointer(data.pchNext)), true);
  // 0x38: pointer
  if (data?.pchEndRead !== undefined) view.setBigUint64(56, data.pchEndRead === null ? 0n : BigInt(util.toPointer(data.pchEndRead)), true);
  // 0x40: pointer
  if (data?.pchEndWrite !== undefined) view.setBigUint64(64, data.pchEndWrite === null ? 0n : BigInt(util.toPointer(data.pchEndWrite)), true);
  // 0x48: i32
  if (data?.lBufOffset !== undefined) view.setInt32(72, Number(data.lBufOffset), true);
  // 0x4c: i32
  if (data?.lDiskOffset !== undefined) view.setInt32(76, Number(data.lDiskOffset), true);
  // 0x50: pointer
  if (data?.adwInfo !== undefined) view.setBigUint64(80, data.adwInfo === null ? 0n : BigInt(util.toPointer(data.adwInfo)), true);
  // 0x58: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(88, Number(data.dwReserved1), true);
  // 0x5c: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(92, Number(data.dwReserved2), true);
  // 0x60: pointer
  if (data?.hmmio !== undefined) view.setBigUint64(96, data.hmmio === null ? 0n : BigInt(util.toPointer(data.hmmio)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MMCKINFO (size: 24)
 */
export interface MMCKINFO {
  /** u32 */
  ckid: number;
  /** u32 */
  cksize: number;
  /** u32 */
  fccType: number;
  /** u32 */
  dwDataOffset: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofMMCKINFO = 24;

export function allocMMCKINFO(data?: Partial<MMCKINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMMCKINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ckid !== undefined) view.setUint32(0, Number(data.ckid), true);
  // 0x04: u32
  if (data?.cksize !== undefined) view.setUint32(4, Number(data.cksize), true);
  // 0x08: u32
  if (data?.fccType !== undefined) view.setUint32(8, Number(data.fccType), true);
  // 0x0c: u32
  if (data?.dwDataOffset !== undefined) view.setUint32(12, Number(data.dwDataOffset), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYCAPSA (size: 112)
 */
export interface JOYCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  wXmin: number;
  /** u32 */
  wXmax: number;
  /** u32 */
  wYmin: number;
  /** u32 */
  wYmax: number;
  /** u32 */
  wZmin: number;
  /** u32 */
  wZmax: number;
  /** u32 */
  wNumButtons: number;
  /** u32 */
  wPeriodMin: number;
  /** u32 */
  wPeriodMax: number;
  /** u32 */
  wRmin: number;
  /** u32 */
  wRmax: number;
  /** u32 */
  wUmin: number;
  /** u32 */
  wUmax: number;
  /** u32 */
  wVmin: number;
  /** u32 */
  wVmax: number;
  /** u32 */
  wCaps: number;
  /** u32 */
  wMaxAxes: number;
  /** u32 */
  wNumAxes: number;
  /** u32 */
  wMaxButtons: number;
  /** array */
  szRegKey: Deno.PointerValue | null;
  /** array */
  szOEMVxD: Deno.PointerValue | null;
}

export const sizeofJOYCAPSA = 112;

export function allocJOYCAPSA(data?: Partial<JOYCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.wXmin !== undefined) view.setUint32(16, Number(data.wXmin), true);
  // 0x14: u32
  if (data?.wXmax !== undefined) view.setUint32(20, Number(data.wXmax), true);
  // 0x18: u32
  if (data?.wYmin !== undefined) view.setUint32(24, Number(data.wYmin), true);
  // 0x1c: u32
  if (data?.wYmax !== undefined) view.setUint32(28, Number(data.wYmax), true);
  // 0x20: u32
  if (data?.wZmin !== undefined) view.setUint32(32, Number(data.wZmin), true);
  // 0x24: u32
  if (data?.wZmax !== undefined) view.setUint32(36, Number(data.wZmax), true);
  // 0x28: u32
  if (data?.wNumButtons !== undefined) view.setUint32(40, Number(data.wNumButtons), true);
  // 0x2c: u32
  if (data?.wPeriodMin !== undefined) view.setUint32(44, Number(data.wPeriodMin), true);
  // 0x30: u32
  if (data?.wPeriodMax !== undefined) view.setUint32(48, Number(data.wPeriodMax), true);
  // 0x34: u32
  if (data?.wRmin !== undefined) view.setUint32(52, Number(data.wRmin), true);
  // 0x38: u32
  if (data?.wRmax !== undefined) view.setUint32(56, Number(data.wRmax), true);
  // 0x3c: u32
  if (data?.wUmin !== undefined) view.setUint32(60, Number(data.wUmin), true);
  // 0x40: u32
  if (data?.wUmax !== undefined) view.setUint32(64, Number(data.wUmax), true);
  // 0x44: u32
  if (data?.wVmin !== undefined) view.setUint32(68, Number(data.wVmin), true);
  // 0x48: u32
  if (data?.wVmax !== undefined) view.setUint32(72, Number(data.wVmax), true);
  // 0x4c: u32
  if (data?.wCaps !== undefined) view.setUint32(76, Number(data.wCaps), true);
  // 0x50: u32
  if (data?.wMaxAxes !== undefined) view.setUint32(80, Number(data.wMaxAxes), true);
  // 0x54: u32
  if (data?.wNumAxes !== undefined) view.setUint32(84, Number(data.wNumAxes), true);
  // 0x58: u32
  if (data?.wMaxButtons !== undefined) view.setUint32(88, Number(data.wMaxButtons), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szRegKey !== undefined) view.setBigUint64(96, data.szRegKey === null ? 0n : BigInt(util.toPointer(data.szRegKey)), true);
  // 0x68: pointer
  if (data?.szOEMVxD !== undefined) view.setBigUint64(104, data.szOEMVxD === null ? 0n : BigInt(util.toPointer(data.szOEMVxD)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYCAPSW (size: 112)
 */
export interface JOYCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  wXmin: number;
  /** u32 */
  wXmax: number;
  /** u32 */
  wYmin: number;
  /** u32 */
  wYmax: number;
  /** u32 */
  wZmin: number;
  /** u32 */
  wZmax: number;
  /** u32 */
  wNumButtons: number;
  /** u32 */
  wPeriodMin: number;
  /** u32 */
  wPeriodMax: number;
  /** u32 */
  wRmin: number;
  /** u32 */
  wRmax: number;
  /** u32 */
  wUmin: number;
  /** u32 */
  wUmax: number;
  /** u32 */
  wVmin: number;
  /** u32 */
  wVmax: number;
  /** u32 */
  wCaps: number;
  /** u32 */
  wMaxAxes: number;
  /** u32 */
  wNumAxes: number;
  /** u32 */
  wMaxButtons: number;
  /** array */
  szRegKey: Deno.PointerValue | null;
  /** array */
  szOEMVxD: Deno.PointerValue | null;
}

export const sizeofJOYCAPSW = 112;

export function allocJOYCAPSW(data?: Partial<JOYCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.wXmin !== undefined) view.setUint32(16, Number(data.wXmin), true);
  // 0x14: u32
  if (data?.wXmax !== undefined) view.setUint32(20, Number(data.wXmax), true);
  // 0x18: u32
  if (data?.wYmin !== undefined) view.setUint32(24, Number(data.wYmin), true);
  // 0x1c: u32
  if (data?.wYmax !== undefined) view.setUint32(28, Number(data.wYmax), true);
  // 0x20: u32
  if (data?.wZmin !== undefined) view.setUint32(32, Number(data.wZmin), true);
  // 0x24: u32
  if (data?.wZmax !== undefined) view.setUint32(36, Number(data.wZmax), true);
  // 0x28: u32
  if (data?.wNumButtons !== undefined) view.setUint32(40, Number(data.wNumButtons), true);
  // 0x2c: u32
  if (data?.wPeriodMin !== undefined) view.setUint32(44, Number(data.wPeriodMin), true);
  // 0x30: u32
  if (data?.wPeriodMax !== undefined) view.setUint32(48, Number(data.wPeriodMax), true);
  // 0x34: u32
  if (data?.wRmin !== undefined) view.setUint32(52, Number(data.wRmin), true);
  // 0x38: u32
  if (data?.wRmax !== undefined) view.setUint32(56, Number(data.wRmax), true);
  // 0x3c: u32
  if (data?.wUmin !== undefined) view.setUint32(60, Number(data.wUmin), true);
  // 0x40: u32
  if (data?.wUmax !== undefined) view.setUint32(64, Number(data.wUmax), true);
  // 0x44: u32
  if (data?.wVmin !== undefined) view.setUint32(68, Number(data.wVmin), true);
  // 0x48: u32
  if (data?.wVmax !== undefined) view.setUint32(72, Number(data.wVmax), true);
  // 0x4c: u32
  if (data?.wCaps !== undefined) view.setUint32(76, Number(data.wCaps), true);
  // 0x50: u32
  if (data?.wMaxAxes !== undefined) view.setUint32(80, Number(data.wMaxAxes), true);
  // 0x54: u32
  if (data?.wNumAxes !== undefined) view.setUint32(84, Number(data.wNumAxes), true);
  // 0x58: u32
  if (data?.wMaxButtons !== undefined) view.setUint32(88, Number(data.wMaxButtons), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szRegKey !== undefined) view.setBigUint64(96, data.szRegKey === null ? 0n : BigInt(util.toPointer(data.szRegKey)), true);
  // 0x68: pointer
  if (data?.szOEMVxD !== undefined) view.setBigUint64(104, data.szOEMVxD === null ? 0n : BigInt(util.toPointer(data.szOEMVxD)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYCAPS2A (size: 136)
 */
export interface JOYCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  wXmin: number;
  /** u32 */
  wXmax: number;
  /** u32 */
  wYmin: number;
  /** u32 */
  wYmax: number;
  /** u32 */
  wZmin: number;
  /** u32 */
  wZmax: number;
  /** u32 */
  wNumButtons: number;
  /** u32 */
  wPeriodMin: number;
  /** u32 */
  wPeriodMax: number;
  /** u32 */
  wRmin: number;
  /** u32 */
  wRmax: number;
  /** u32 */
  wUmin: number;
  /** u32 */
  wUmax: number;
  /** u32 */
  wVmin: number;
  /** u32 */
  wVmax: number;
  /** u32 */
  wCaps: number;
  /** u32 */
  wMaxAxes: number;
  /** u32 */
  wNumAxes: number;
  /** u32 */
  wMaxButtons: number;
  /** array */
  szRegKey: Deno.PointerValue | null;
  /** array */
  szOEMVxD: Deno.PointerValue | null;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofJOYCAPS2A = 136;

export function allocJOYCAPS2A(data?: Partial<JOYCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.wXmin !== undefined) view.setUint32(16, Number(data.wXmin), true);
  // 0x14: u32
  if (data?.wXmax !== undefined) view.setUint32(20, Number(data.wXmax), true);
  // 0x18: u32
  if (data?.wYmin !== undefined) view.setUint32(24, Number(data.wYmin), true);
  // 0x1c: u32
  if (data?.wYmax !== undefined) view.setUint32(28, Number(data.wYmax), true);
  // 0x20: u32
  if (data?.wZmin !== undefined) view.setUint32(32, Number(data.wZmin), true);
  // 0x24: u32
  if (data?.wZmax !== undefined) view.setUint32(36, Number(data.wZmax), true);
  // 0x28: u32
  if (data?.wNumButtons !== undefined) view.setUint32(40, Number(data.wNumButtons), true);
  // 0x2c: u32
  if (data?.wPeriodMin !== undefined) view.setUint32(44, Number(data.wPeriodMin), true);
  // 0x30: u32
  if (data?.wPeriodMax !== undefined) view.setUint32(48, Number(data.wPeriodMax), true);
  // 0x34: u32
  if (data?.wRmin !== undefined) view.setUint32(52, Number(data.wRmin), true);
  // 0x38: u32
  if (data?.wRmax !== undefined) view.setUint32(56, Number(data.wRmax), true);
  // 0x3c: u32
  if (data?.wUmin !== undefined) view.setUint32(60, Number(data.wUmin), true);
  // 0x40: u32
  if (data?.wUmax !== undefined) view.setUint32(64, Number(data.wUmax), true);
  // 0x44: u32
  if (data?.wVmin !== undefined) view.setUint32(68, Number(data.wVmin), true);
  // 0x48: u32
  if (data?.wVmax !== undefined) view.setUint32(72, Number(data.wVmax), true);
  // 0x4c: u32
  if (data?.wCaps !== undefined) view.setUint32(76, Number(data.wCaps), true);
  // 0x50: u32
  if (data?.wMaxAxes !== undefined) view.setUint32(80, Number(data.wMaxAxes), true);
  // 0x54: u32
  if (data?.wNumAxes !== undefined) view.setUint32(84, Number(data.wNumAxes), true);
  // 0x58: u32
  if (data?.wMaxButtons !== undefined) view.setUint32(88, Number(data.wMaxButtons), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szRegKey !== undefined) view.setBigUint64(96, data.szRegKey === null ? 0n : BigInt(util.toPointer(data.szRegKey)), true);
  // 0x68: pointer
  if (data?.szOEMVxD !== undefined) view.setBigUint64(104, data.szOEMVxD === null ? 0n : BigInt(util.toPointer(data.szOEMVxD)), true);
  // 0x70: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(112, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x78: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(120, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x80: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(128, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYCAPS2W (size: 136)
 */
export interface JOYCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  wXmin: number;
  /** u32 */
  wXmax: number;
  /** u32 */
  wYmin: number;
  /** u32 */
  wYmax: number;
  /** u32 */
  wZmin: number;
  /** u32 */
  wZmax: number;
  /** u32 */
  wNumButtons: number;
  /** u32 */
  wPeriodMin: number;
  /** u32 */
  wPeriodMax: number;
  /** u32 */
  wRmin: number;
  /** u32 */
  wRmax: number;
  /** u32 */
  wUmin: number;
  /** u32 */
  wUmax: number;
  /** u32 */
  wVmin: number;
  /** u32 */
  wVmax: number;
  /** u32 */
  wCaps: number;
  /** u32 */
  wMaxAxes: number;
  /** u32 */
  wNumAxes: number;
  /** u32 */
  wMaxButtons: number;
  /** array */
  szRegKey: Deno.PointerValue | null;
  /** array */
  szOEMVxD: Deno.PointerValue | null;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofJOYCAPS2W = 136;

export function allocJOYCAPS2W(data?: Partial<JOYCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.wXmin !== undefined) view.setUint32(16, Number(data.wXmin), true);
  // 0x14: u32
  if (data?.wXmax !== undefined) view.setUint32(20, Number(data.wXmax), true);
  // 0x18: u32
  if (data?.wYmin !== undefined) view.setUint32(24, Number(data.wYmin), true);
  // 0x1c: u32
  if (data?.wYmax !== undefined) view.setUint32(28, Number(data.wYmax), true);
  // 0x20: u32
  if (data?.wZmin !== undefined) view.setUint32(32, Number(data.wZmin), true);
  // 0x24: u32
  if (data?.wZmax !== undefined) view.setUint32(36, Number(data.wZmax), true);
  // 0x28: u32
  if (data?.wNumButtons !== undefined) view.setUint32(40, Number(data.wNumButtons), true);
  // 0x2c: u32
  if (data?.wPeriodMin !== undefined) view.setUint32(44, Number(data.wPeriodMin), true);
  // 0x30: u32
  if (data?.wPeriodMax !== undefined) view.setUint32(48, Number(data.wPeriodMax), true);
  // 0x34: u32
  if (data?.wRmin !== undefined) view.setUint32(52, Number(data.wRmin), true);
  // 0x38: u32
  if (data?.wRmax !== undefined) view.setUint32(56, Number(data.wRmax), true);
  // 0x3c: u32
  if (data?.wUmin !== undefined) view.setUint32(60, Number(data.wUmin), true);
  // 0x40: u32
  if (data?.wUmax !== undefined) view.setUint32(64, Number(data.wUmax), true);
  // 0x44: u32
  if (data?.wVmin !== undefined) view.setUint32(68, Number(data.wVmin), true);
  // 0x48: u32
  if (data?.wVmax !== undefined) view.setUint32(72, Number(data.wVmax), true);
  // 0x4c: u32
  if (data?.wCaps !== undefined) view.setUint32(76, Number(data.wCaps), true);
  // 0x50: u32
  if (data?.wMaxAxes !== undefined) view.setUint32(80, Number(data.wMaxAxes), true);
  // 0x54: u32
  if (data?.wNumAxes !== undefined) view.setUint32(84, Number(data.wNumAxes), true);
  // 0x58: u32
  if (data?.wMaxButtons !== undefined) view.setUint32(88, Number(data.wMaxButtons), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szRegKey !== undefined) view.setBigUint64(96, data.szRegKey === null ? 0n : BigInt(util.toPointer(data.szRegKey)), true);
  // 0x68: pointer
  if (data?.szOEMVxD !== undefined) view.setBigUint64(104, data.szOEMVxD === null ? 0n : BigInt(util.toPointer(data.szOEMVxD)), true);
  // 0x70: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(112, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x78: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(120, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x80: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(128, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYINFO (size: 16)
 */
export interface JOYINFO {
  /** u32 */
  wXpos: number;
  /** u32 */
  wYpos: number;
  /** u32 */
  wZpos: number;
  /** u32 */
  wButtons: number;
}

export const sizeofJOYINFO = 16;

export function allocJOYINFO(data?: Partial<JOYINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wXpos !== undefined) view.setUint32(0, Number(data.wXpos), true);
  // 0x04: u32
  if (data?.wYpos !== undefined) view.setUint32(4, Number(data.wYpos), true);
  // 0x08: u32
  if (data?.wZpos !== undefined) view.setUint32(8, Number(data.wZpos), true);
  // 0x0c: u32
  if (data?.wButtons !== undefined) view.setUint32(12, Number(data.wButtons), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYINFOEX (size: 56)
 */
export interface JOYINFOEX {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwXpos: number;
  /** u32 */
  dwYpos: number;
  /** u32 */
  dwZpos: number;
  /** u32 */
  dwRpos: number;
  /** u32 */
  dwUpos: number;
  /** u32 */
  dwVpos: number;
  /** u32 */
  dwButtons: number;
  /** u32 */
  dwButtonNumber: number;
  /** u32 */
  dwPOV: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofJOYINFOEX = 56;

export function allocJOYINFOEX(data?: Partial<JOYINFOEX>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYINFOEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwXpos !== undefined) view.setUint32(8, Number(data.dwXpos), true);
  // 0x0c: u32
  if (data?.dwYpos !== undefined) view.setUint32(12, Number(data.dwYpos), true);
  // 0x10: u32
  if (data?.dwZpos !== undefined) view.setUint32(16, Number(data.dwZpos), true);
  // 0x14: u32
  if (data?.dwRpos !== undefined) view.setUint32(20, Number(data.dwRpos), true);
  // 0x18: u32
  if (data?.dwUpos !== undefined) view.setUint32(24, Number(data.dwUpos), true);
  // 0x1c: u32
  if (data?.dwVpos !== undefined) view.setUint32(28, Number(data.dwVpos), true);
  // 0x20: u32
  if (data?.dwButtons !== undefined) view.setUint32(32, Number(data.dwButtons), true);
  // 0x24: u32
  if (data?.dwButtonNumber !== undefined) view.setUint32(36, Number(data.dwButtonNumber), true);
  // 0x28: u32
  if (data?.dwPOV !== undefined) view.setUint32(40, Number(data.dwPOV), true);
  // 0x2c: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(44, Number(data.dwReserved1), true);
  // 0x30: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(48, Number(data.dwReserved2), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RECT_PARMS (size: 16)
 */
export interface MCI_DGV_RECT_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_RECT_PARMS = 16;

export function allocMCI_DGV_RECT_PARMS(data?: Partial<MCI_DGV_RECT_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RECT_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_CAPTURE_PARMSA (size: 24)
 */
export interface MCI_DGV_CAPTURE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_CAPTURE_PARMSA = 24;

export function allocMCI_DGV_CAPTURE_PARMSA(data?: Partial<MCI_DGV_CAPTURE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_CAPTURE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_CAPTURE_PARMSW (size: 24)
 */
export interface MCI_DGV_CAPTURE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_CAPTURE_PARMSW = 24;

export function allocMCI_DGV_CAPTURE_PARMSW(data?: Partial<MCI_DGV_CAPTURE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_CAPTURE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_COPY_PARMS (size: 32)
 */
export interface MCI_DGV_COPY_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStream: number;
  /** u32 */
  dwVideoStream: number;
}

export const sizeofMCI_DGV_COPY_PARMS = 32;

export function allocMCI_DGV_COPY_PARMS(data?: Partial<MCI_DGV_COPY_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_COPY_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x18: u32
  if (data?.dwAudioStream !== undefined) view.setUint32(24, Number(data.dwAudioStream), true);
  // 0x1c: u32
  if (data?.dwVideoStream !== undefined) view.setUint32(28, Number(data.dwVideoStream), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_CUE_PARMS (size: 16)
 */
export interface MCI_DGV_CUE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTo: number;
}

export const sizeofMCI_DGV_CUE_PARMS = 16;

export function allocMCI_DGV_CUE_PARMS(data?: Partial<MCI_DGV_CUE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_CUE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTo !== undefined) view.setUint32(8, Number(data.dwTo), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_CUT_PARMS (size: 32)
 */
export interface MCI_DGV_CUT_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStream: number;
  /** u32 */
  dwVideoStream: number;
}

export const sizeofMCI_DGV_CUT_PARMS = 32;

export function allocMCI_DGV_CUT_PARMS(data?: Partial<MCI_DGV_CUT_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_CUT_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x18: u32
  if (data?.dwAudioStream !== undefined) view.setUint32(24, Number(data.dwAudioStream), true);
  // 0x1c: u32
  if (data?.dwVideoStream !== undefined) view.setUint32(28, Number(data.dwVideoStream), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_DELETE_PARMS (size: 32)
 */
export interface MCI_DGV_DELETE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStream: number;
  /** u32 */
  dwVideoStream: number;
}

export const sizeofMCI_DGV_DELETE_PARMS = 32;

export function allocMCI_DGV_DELETE_PARMS(data?: Partial<MCI_DGV_DELETE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_DELETE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x18: u32
  if (data?.dwAudioStream !== undefined) view.setUint32(24, Number(data.dwAudioStream), true);
  // 0x1c: u32
  if (data?.dwVideoStream !== undefined) view.setUint32(28, Number(data.dwVideoStream), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_INFO_PARMSA (size: 24)
 */
export interface MCI_DGV_INFO_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
  /** u32 */
  dwItem: number;
}

export const sizeofMCI_DGV_INFO_PARMSA = 24;

export function allocMCI_DGV_INFO_PARMSA(data?: Partial<MCI_DGV_INFO_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_INFO_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: u32
  if (data?.dwItem !== undefined) view.setUint32(20, Number(data.dwItem), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_INFO_PARMSW (size: 24)
 */
export interface MCI_DGV_INFO_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
  /** u32 */
  dwItem: number;
}

export const sizeofMCI_DGV_INFO_PARMSW = 24;

export function allocMCI_DGV_INFO_PARMSW(data?: Partial<MCI_DGV_INFO_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_INFO_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: u32
  if (data?.dwItem !== undefined) view.setUint32(20, Number(data.dwItem), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_LIST_PARMSA (size: 40)
 */
export interface MCI_DGV_LIST_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwNumber: number;
  /** u32 */
  dwItem: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlgorithm: string | null;
}

export const sizeofMCI_DGV_LIST_PARMSA = 40;

export function allocMCI_DGV_LIST_PARMSA(data?: Partial<MCI_DGV_LIST_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_LIST_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwLength !== undefined) view.setUint32(16, Number(data.dwLength), true);
  // 0x14: u32
  if (data?.dwNumber !== undefined) view.setUint32(20, Number(data.dwNumber), true);
  // 0x18: u32
  if (data?.dwItem !== undefined) view.setUint32(24, Number(data.dwItem), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_LIST_PARMSW (size: 40)
 */
export interface MCI_DGV_LIST_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwNumber: number;
  /** u32 */
  dwItem: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlgorithm: string | null;
}

export const sizeofMCI_DGV_LIST_PARMSW = 40;

export function allocMCI_DGV_LIST_PARMSW(data?: Partial<MCI_DGV_LIST_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_LIST_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwLength !== undefined) view.setUint32(16, Number(data.dwLength), true);
  // 0x14: u32
  if (data?.dwNumber !== undefined) view.setUint32(20, Number(data.dwNumber), true);
  // 0x18: u32
  if (data?.dwItem !== undefined) view.setUint32(24, Number(data.dwItem), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_MONITOR_PARMS (size: 16)
 */
export interface MCI_DGV_MONITOR_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwSource: number;
  /** u32 */
  dwMethod: number;
}

export const sizeofMCI_DGV_MONITOR_PARMS = 16;

export function allocMCI_DGV_MONITOR_PARMS(data?: Partial<MCI_DGV_MONITOR_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_MONITOR_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwSource !== undefined) view.setUint32(8, Number(data.dwSource), true);
  // 0x0c: u32
  if (data?.dwMethod !== undefined) view.setUint32(12, Number(data.dwMethod), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_OPEN_PARMSA (size: 56)
 */
export interface MCI_DGV_OPEN_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_DGV_OPEN_PARMSA = 56;

export function allocMCI_DGV_OPEN_PARMSA(data?: Partial<MCI_DGV_OPEN_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_OPEN_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_OPEN_PARMSW (size: 56)
 */
export interface MCI_DGV_OPEN_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_DGV_OPEN_PARMSW = 56;

export function allocMCI_DGV_OPEN_PARMSW(data?: Partial<MCI_DGV_OPEN_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_OPEN_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_PASTE_PARMS (size: 32)
 */
export interface MCI_DGV_PASTE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTo: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStream: number;
  /** u32 */
  dwVideoStream: number;
}

export const sizeofMCI_DGV_PASTE_PARMS = 32;

export function allocMCI_DGV_PASTE_PARMS(data?: Partial<MCI_DGV_PASTE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_PASTE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTo !== undefined) view.setUint32(8, Number(data.dwTo), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x18: u32
  if (data?.dwAudioStream !== undefined) view.setUint32(24, Number(data.dwAudioStream), true);
  // 0x1c: u32
  if (data?.dwVideoStream !== undefined) view.setUint32(28, Number(data.dwVideoStream), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_QUALITY_PARMSA (size: 32)
 */
export interface MCI_DGV_QUALITY_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrName: string | null;
  /** u32 */
  lpstrAlgorithm: number;
  /** u32 */
  dwHandle: number;
}

export const sizeofMCI_DGV_QUALITY_PARMSA = 32;

export function allocMCI_DGV_QUALITY_PARMSA(data?: Partial<MCI_DGV_QUALITY_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_QUALITY_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.lpstrAlgorithm !== undefined) view.setUint32(24, Number(data.lpstrAlgorithm), true);
  // 0x1c: u32
  if (data?.dwHandle !== undefined) view.setUint32(28, Number(data.dwHandle), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_QUALITY_PARMSW (size: 32)
 */
export interface MCI_DGV_QUALITY_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrName: string | null;
  /** u32 */
  lpstrAlgorithm: number;
  /** u32 */
  dwHandle: number;
}

export const sizeofMCI_DGV_QUALITY_PARMSW = 32;

export function allocMCI_DGV_QUALITY_PARMSW(data?: Partial<MCI_DGV_QUALITY_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_QUALITY_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.lpstrAlgorithm !== undefined) view.setUint32(24, Number(data.lpstrAlgorithm), true);
  // 0x1c: u32
  if (data?.dwHandle !== undefined) view.setUint32(28, Number(data.dwHandle), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RECORD_PARMS (size: 32)
 */
export interface MCI_DGV_RECORD_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStream: number;
  /** u32 */
  dwVideoStream: number;
}

export const sizeofMCI_DGV_RECORD_PARMS = 32;

export function allocMCI_DGV_RECORD_PARMS(data?: Partial<MCI_DGV_RECORD_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RECORD_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x18: u32
  if (data?.dwAudioStream !== undefined) view.setUint32(24, Number(data.dwAudioStream), true);
  // 0x1c: u32
  if (data?.dwVideoStream !== undefined) view.setUint32(28, Number(data.dwVideoStream), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RESERVE_PARMSA (size: 24)
 */
export interface MCI_DGV_RESERVE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrPath: string | null;
  /** u32 */
  dwSize: number;
}

export const sizeofMCI_DGV_RESERVE_PARMSA = 24;

export function allocMCI_DGV_RESERVE_PARMSA(data?: Partial<MCI_DGV_RESERVE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RESERVE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrPath !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwSize !== undefined) view.setUint32(16, Number(data.dwSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RESERVE_PARMSW (size: 24)
 */
export interface MCI_DGV_RESERVE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrPath: string | null;
  /** u32 */
  dwSize: number;
}

export const sizeofMCI_DGV_RESERVE_PARMSW = 24;

export function allocMCI_DGV_RESERVE_PARMSW(data?: Partial<MCI_DGV_RESERVE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RESERVE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwSize !== undefined) view.setUint32(16, Number(data.dwSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RESTORE_PARMSA (size: 24)
 */
export interface MCI_DGV_RESTORE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_RESTORE_PARMSA = 24;

export function allocMCI_DGV_RESTORE_PARMSA(data?: Partial<MCI_DGV_RESTORE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RESTORE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RESTORE_PARMSW (size: 24)
 */
export interface MCI_DGV_RESTORE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_RESTORE_PARMSW = 24;

export function allocMCI_DGV_RESTORE_PARMSW(data?: Partial<MCI_DGV_RESTORE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RESTORE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SAVE_PARMSA (size: 24)
 */
export interface MCI_DGV_SAVE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_SAVE_PARMSA = 24;

export function allocMCI_DGV_SAVE_PARMSA(data?: Partial<MCI_DGV_SAVE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SAVE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SAVE_PARMSW (size: 24)
 */
export interface MCI_DGV_SAVE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_SAVE_PARMSW = 24;

export function allocMCI_DGV_SAVE_PARMSW(data?: Partial<MCI_DGV_SAVE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SAVE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SET_PARMS (size: 24)
 */
export interface MCI_DGV_SET_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTimeFormat: number;
  /** u32 */
  dwAudio: number;
  /** u32 */
  dwFileFormat: number;
  /** u32 */
  dwSpeed: number;
}

export const sizeofMCI_DGV_SET_PARMS = 24;

export function allocMCI_DGV_SET_PARMS(data?: Partial<MCI_DGV_SET_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SET_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTimeFormat !== undefined) view.setUint32(8, Number(data.dwTimeFormat), true);
  // 0x0c: u32
  if (data?.dwAudio !== undefined) view.setUint32(12, Number(data.dwAudio), true);
  // 0x10: u32
  if (data?.dwFileFormat !== undefined) view.setUint32(16, Number(data.dwFileFormat), true);
  // 0x14: u32
  if (data?.dwSpeed !== undefined) view.setUint32(20, Number(data.dwSpeed), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SETAUDIO_PARMSA (size: 40)
 */
export interface MCI_DGV_SETAUDIO_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwValue: number;
  /** u32 */
  dwOver: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlgorithm: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrQuality: string | null;
}

export const sizeofMCI_DGV_SETAUDIO_PARMSA = 40;

export function allocMCI_DGV_SETAUDIO_PARMSA(data?: Partial<MCI_DGV_SETAUDIO_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SETAUDIO_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: u32
  if (data?.dwValue !== undefined) view.setUint32(12, Number(data.dwValue), true);
  // 0x10: u32
  if (data?.dwOver !== undefined) view.setUint32(16, Number(data.dwOver), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrQuality !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrQuality);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SETAUDIO_PARMSW (size: 40)
 */
export interface MCI_DGV_SETAUDIO_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwValue: number;
  /** u32 */
  dwOver: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlgorithm: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrQuality: string | null;
}

export const sizeofMCI_DGV_SETAUDIO_PARMSW = 40;

export function allocMCI_DGV_SETAUDIO_PARMSW(data?: Partial<MCI_DGV_SETAUDIO_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SETAUDIO_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: u32
  if (data?.dwValue !== undefined) view.setUint32(12, Number(data.dwValue), true);
  // 0x10: u32
  if (data?.dwOver !== undefined) view.setUint32(16, Number(data.dwOver), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrQuality !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrQuality);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SIGNAL_PARMS (size: 24)
 */
export interface MCI_DGV_SIGNAL_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwPosition: number;
  /** u32 */
  dwPeriod: number;
  /** u32 */
  dwUserParm: number;
}

export const sizeofMCI_DGV_SIGNAL_PARMS = 24;

export function allocMCI_DGV_SIGNAL_PARMS(data?: Partial<MCI_DGV_SIGNAL_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SIGNAL_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwPosition !== undefined) view.setUint32(8, Number(data.dwPosition), true);
  // 0x0c: u32
  if (data?.dwPeriod !== undefined) view.setUint32(12, Number(data.dwPeriod), true);
  // 0x10: u32
  if (data?.dwUserParm !== undefined) view.setUint32(16, Number(data.dwUserParm), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SETVIDEO_PARMSA (size: 48)
 */
export interface MCI_DGV_SETVIDEO_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwValue: number;
  /** u32 */
  dwOver: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlgorithm: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrQuality: string | null;
  /** u32 */
  dwSourceNumber: number;
}

export const sizeofMCI_DGV_SETVIDEO_PARMSA = 48;

export function allocMCI_DGV_SETVIDEO_PARMSA(data?: Partial<MCI_DGV_SETVIDEO_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SETVIDEO_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: u32
  if (data?.dwValue !== undefined) view.setUint32(12, Number(data.dwValue), true);
  // 0x10: u32
  if (data?.dwOver !== undefined) view.setUint32(16, Number(data.dwOver), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrQuality !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrQuality);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwSourceNumber !== undefined) view.setUint32(40, Number(data.dwSourceNumber), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SETVIDEO_PARMSW (size: 48)
 */
export interface MCI_DGV_SETVIDEO_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwValue: number;
  /** u32 */
  dwOver: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlgorithm: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrQuality: string | null;
  /** u32 */
  dwSourceNumber: number;
}

export const sizeofMCI_DGV_SETVIDEO_PARMSW = 48;

export function allocMCI_DGV_SETVIDEO_PARMSW(data?: Partial<MCI_DGV_SETVIDEO_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SETVIDEO_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: u32
  if (data?.dwValue !== undefined) view.setUint32(12, Number(data.dwValue), true);
  // 0x10: u32
  if (data?.dwOver !== undefined) view.setUint32(16, Number(data.dwOver), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrQuality !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrQuality);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwSourceNumber !== undefined) view.setUint32(40, Number(data.dwSourceNumber), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_STATUS_PARMSA (size: 40)
 */
export interface MCI_DGV_STATUS_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwReturn: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwTrack: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDrive: string | null;
  /** u32 */
  dwReference: number;
}

export const sizeofMCI_DGV_STATUS_PARMSA = 40;

export function allocMCI_DGV_STATUS_PARMSA(data?: Partial<MCI_DGV_STATUS_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_STATUS_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: usize
  if (data?.dwReturn !== undefined) view.setBigUint64(8, BigInt(data.dwReturn), true);
  // 0x10: u32
  if (data?.dwItem !== undefined) view.setUint32(16, Number(data.dwItem), true);
  // 0x14: u32
  if (data?.dwTrack !== undefined) view.setUint32(20, Number(data.dwTrack), true);
  // 0x18: buffer
  if (data?.lpstrDrive !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrDrive);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwReference !== undefined) view.setUint32(32, Number(data.dwReference), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_STATUS_PARMSW (size: 40)
 */
export interface MCI_DGV_STATUS_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwReturn: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwTrack: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDrive: string | null;
  /** u32 */
  dwReference: number;
}

export const sizeofMCI_DGV_STATUS_PARMSW = 40;

export function allocMCI_DGV_STATUS_PARMSW(data?: Partial<MCI_DGV_STATUS_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_STATUS_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: usize
  if (data?.dwReturn !== undefined) view.setBigUint64(8, BigInt(data.dwReturn), true);
  // 0x10: u32
  if (data?.dwItem !== undefined) view.setUint32(16, Number(data.dwItem), true);
  // 0x14: u32
  if (data?.dwTrack !== undefined) view.setUint32(20, Number(data.dwTrack), true);
  // 0x18: buffer
  if (data?.lpstrDrive !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrDrive);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwReference !== undefined) view.setUint32(32, Number(data.dwReference), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_STEP_PARMS (size: 16)
 */
export interface MCI_DGV_STEP_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrames: number;
}

export const sizeofMCI_DGV_STEP_PARMS = 16;

export function allocMCI_DGV_STEP_PARMS(data?: Partial<MCI_DGV_STEP_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_STEP_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrames !== undefined) view.setUint32(8, Number(data.dwFrames), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_UPDATE_PARMS (size: 24)
 */
export interface MCI_DGV_UPDATE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_UPDATE_PARMS = 24;

export function allocMCI_DGV_UPDATE_PARMS(data?: Partial<MCI_DGV_UPDATE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_UPDATE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x10: pointer
  if (data?.hDC !== undefined) view.setBigUint64(16, data.hDC === null ? 0n : BigInt(util.toPointer(data.hDC)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_WINDOW_PARMSA (size: 32)
 */
export interface MCI_DGV_WINDOW_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null;
}

export const sizeofMCI_DGV_WINDOW_PARMSA = 32;

export function allocMCI_DGV_WINDOW_PARMSA(data?: Partial<MCI_DGV_WINDOW_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_WINDOW_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_WINDOW_PARMSW (size: 32)
 */
export interface MCI_DGV_WINDOW_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null;
}

export const sizeofMCI_DGV_WINDOW_PARMSW = 32;

export function allocMCI_DGV_WINDOW_PARMSW(data?: Partial<MCI_DGV_WINDOW_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_WINDOW_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export type LRESULT = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.ICOPEN (size: 56)
 */
export interface ICOPEN {
  /** u32 */
  dwSize: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.LRESULT */
  dwError: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pV1Reserved: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pV2Reserved: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dnDevNode: number;
}

export const sizeofICOPEN = 56;

export function allocICOPEN(data?: Partial<ICOPEN>): Uint8Array {
  const buf = new Uint8Array(sizeofICOPEN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccHandler !== undefined) view.setUint32(8, Number(data.fccHandler), true);
  // 0x0c: u32
  if (data?.dwVersion !== undefined) view.setUint32(12, Number(data.dwVersion), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwError !== undefined) view.setBigUint64(24, data.dwError === null ? 0n : BigInt(util.toPointer(data.dwError)), true);
  // 0x20: pointer
  if (data?.pV1Reserved !== undefined) view.setBigUint64(32, data.pV1Reserved === null ? 0n : BigInt(util.toPointer(data.pV1Reserved)), true);
  // 0x28: pointer
  if (data?.pV2Reserved !== undefined) view.setBigUint64(40, data.pV2Reserved === null ? 0n : BigInt(util.toPointer(data.pV2Reserved)), true);
  // 0x30: u32
  if (data?.dnDevNode !== undefined) view.setUint32(48, Number(data.dnDevNode), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICINFO (size: 48)
 */
export interface ICINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwVersionICM: number;
  /** array */
  szName: Deno.PointerValue | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** array */
  szDriver: Deno.PointerValue | null;
}

export const sizeofICINFO = 48;

export function allocICINFO(data?: Partial<ICINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofICINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccHandler !== undefined) view.setUint32(8, Number(data.fccHandler), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: u32
  if (data?.dwVersion !== undefined) view.setUint32(16, Number(data.dwVersion), true);
  // 0x14: u32
  if (data?.dwVersionICM !== undefined) view.setUint32(20, Number(data.dwVersionICM), true);
  // 0x18: pointer
  if (data?.szName !== undefined) view.setBigUint64(24, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x20: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(32, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x28: pointer
  if (data?.szDriver !== undefined) view.setBigUint64(40, data.szDriver === null ? 0n : BigInt(util.toPointer(data.szDriver)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICCOMPRESS (size: 88)
 */
export interface ICCOMPRESS {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpbiOutput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpOutput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpbiInput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpInput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpckid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpdwFlags: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  lFrameNum: number;
  /** u32 */
  dwFrameSize: number;
  /** u32 */
  dwQuality: number;
  /** ptr */
  lpbiPrev: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpPrev: Deno.PointerValue | Uint8Array | null;
}

export const sizeofICCOMPRESS = 88;

export function allocICCOMPRESS(data?: Partial<ICCOMPRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofICCOMPRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbiOutput !== undefined) view.setBigUint64(8, data.lpbiOutput === null ? 0n : BigInt(util.toPointer(data.lpbiOutput)), true);
  // 0x10: pointer
  if (data?.lpOutput !== undefined) view.setBigUint64(16, data.lpOutput === null ? 0n : BigInt(util.toPointer(data.lpOutput)), true);
  // 0x18: pointer
  if (data?.lpbiInput !== undefined) view.setBigUint64(24, data.lpbiInput === null ? 0n : BigInt(util.toPointer(data.lpbiInput)), true);
  // 0x20: pointer
  if (data?.lpInput !== undefined) view.setBigUint64(32, data.lpInput === null ? 0n : BigInt(util.toPointer(data.lpInput)), true);
  // 0x28: pointer
  if (data?.lpckid !== undefined) view.setBigUint64(40, data.lpckid === null ? 0n : BigInt(util.toPointer(data.lpckid)), true);
  // 0x30: pointer
  if (data?.lpdwFlags !== undefined) view.setBigUint64(48, data.lpdwFlags === null ? 0n : BigInt(util.toPointer(data.lpdwFlags)), true);
  // 0x38: i32
  if (data?.lFrameNum !== undefined) view.setInt32(56, Number(data.lFrameNum), true);
  // 0x3c: u32
  if (data?.dwFrameSize !== undefined) view.setUint32(60, Number(data.dwFrameSize), true);
  // 0x40: u32
  if (data?.dwQuality !== undefined) view.setUint32(64, Number(data.dwQuality), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.lpbiPrev !== undefined) view.setBigUint64(72, data.lpbiPrev === null ? 0n : BigInt(util.toPointer(data.lpbiPrev)), true);
  // 0x50: pointer
  if (data?.lpPrev !== undefined) view.setBigUint64(80, data.lpPrev === null ? 0n : BigInt(util.toPointer(data.lpPrev)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICCOMPRESSFRAMES (size: 96)
 */
export interface ICCOMPRESSFRAMES {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpbiOutput: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LPARAM */
  lOutput: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpbiInput: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LPARAM */
  lInput: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lStartFrame: number;
  /** i32 */
  lFrameCount: number;
  /** i32 */
  lQuality: number;
  /** i32 */
  lDataRate: number;
  /** i32 */
  lKeyRate: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwOverheadPerFrame: number;
  /** u32 */
  dwReserved2: number;
  /** isize */
  GetData: Deno.PointerValue;
  /** isize */
  PutData: Deno.PointerValue;
}

export const sizeofICCOMPRESSFRAMES = 96;

export function allocICCOMPRESSFRAMES(data?: Partial<ICCOMPRESSFRAMES>): Uint8Array {
  const buf = new Uint8Array(sizeofICCOMPRESSFRAMES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbiOutput !== undefined) view.setBigUint64(8, data.lpbiOutput === null ? 0n : BigInt(util.toPointer(data.lpbiOutput)), true);
  // 0x10: pointer
  if (data?.lOutput !== undefined) view.setBigUint64(16, data.lOutput === null ? 0n : BigInt(util.toPointer(data.lOutput)), true);
  // 0x18: pointer
  if (data?.lpbiInput !== undefined) view.setBigUint64(24, data.lpbiInput === null ? 0n : BigInt(util.toPointer(data.lpbiInput)), true);
  // 0x20: pointer
  if (data?.lInput !== undefined) view.setBigUint64(32, data.lInput === null ? 0n : BigInt(util.toPointer(data.lInput)), true);
  // 0x28: i32
  if (data?.lStartFrame !== undefined) view.setInt32(40, Number(data.lStartFrame), true);
  // 0x2c: i32
  if (data?.lFrameCount !== undefined) view.setInt32(44, Number(data.lFrameCount), true);
  // 0x30: i32
  if (data?.lQuality !== undefined) view.setInt32(48, Number(data.lQuality), true);
  // 0x34: i32
  if (data?.lDataRate !== undefined) view.setInt32(52, Number(data.lDataRate), true);
  // 0x38: i32
  if (data?.lKeyRate !== undefined) view.setInt32(56, Number(data.lKeyRate), true);
  // 0x3c: u32
  if (data?.dwRate !== undefined) view.setUint32(60, Number(data.dwRate), true);
  // 0x40: u32
  if (data?.dwScale !== undefined) view.setUint32(64, Number(data.dwScale), true);
  // 0x44: u32
  if (data?.dwOverheadPerFrame !== undefined) view.setUint32(68, Number(data.dwOverheadPerFrame), true);
  // 0x48: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(72, Number(data.dwReserved2), true);
  // 0x4c: pad4
  // 0x50: isize
  if (data?.GetData !== undefined) view.setBigInt64(80, BigInt(data.GetData), true);
  // 0x58: isize
  if (data?.PutData !== undefined) view.setBigInt64(88, BigInt(data.PutData), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICSETSTATUSPROC (size: 24)
 */
export interface ICSETSTATUSPROC {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** isize */
  Status: Deno.PointerValue;
}

export const sizeofICSETSTATUSPROC = 24;

export function allocICSETSTATUSPROC(data?: Partial<ICSETSTATUSPROC>): Uint8Array {
  const buf = new Uint8Array(sizeofICSETSTATUSPROC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lParam !== undefined) view.setBigUint64(8, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x10: isize
  if (data?.Status !== undefined) view.setBigInt64(16, BigInt(data.Status), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICDECOMPRESS (size: 48)
 */
export interface ICDECOMPRESS {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpbiInput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpInput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpbiOutput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpOutput: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ckid: number;
}

export const sizeofICDECOMPRESS = 48;

export function allocICDECOMPRESS(data?: Partial<ICDECOMPRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofICDECOMPRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbiInput !== undefined) view.setBigUint64(8, data.lpbiInput === null ? 0n : BigInt(util.toPointer(data.lpbiInput)), true);
  // 0x10: pointer
  if (data?.lpInput !== undefined) view.setBigUint64(16, data.lpInput === null ? 0n : BigInt(util.toPointer(data.lpInput)), true);
  // 0x18: pointer
  if (data?.lpbiOutput !== undefined) view.setBigUint64(24, data.lpbiOutput === null ? 0n : BigInt(util.toPointer(data.lpbiOutput)), true);
  // 0x20: pointer
  if (data?.lpOutput !== undefined) view.setBigUint64(32, data.lpOutput === null ? 0n : BigInt(util.toPointer(data.lpOutput)), true);
  // 0x28: u32
  if (data?.ckid !== undefined) view.setUint32(40, Number(data.ckid), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICDECOMPRESSEX (size: 72)
 */
export interface ICDECOMPRESSEX {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpbiSrc: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpSrc: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpbiDst: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpDst: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  xDst: number;
  /** i32 */
  yDst: number;
  /** i32 */
  dxDst: number;
  /** i32 */
  dyDst: number;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** i32 */
  dxSrc: number;
  /** i32 */
  dySrc: number;
}

export const sizeofICDECOMPRESSEX = 72;

export function allocICDECOMPRESSEX(data?: Partial<ICDECOMPRESSEX>): Uint8Array {
  const buf = new Uint8Array(sizeofICDECOMPRESSEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbiSrc !== undefined) view.setBigUint64(8, data.lpbiSrc === null ? 0n : BigInt(util.toPointer(data.lpbiSrc)), true);
  // 0x10: pointer
  if (data?.lpSrc !== undefined) view.setBigUint64(16, data.lpSrc === null ? 0n : BigInt(util.toPointer(data.lpSrc)), true);
  // 0x18: pointer
  if (data?.lpbiDst !== undefined) view.setBigUint64(24, data.lpbiDst === null ? 0n : BigInt(util.toPointer(data.lpbiDst)), true);
  // 0x20: pointer
  if (data?.lpDst !== undefined) view.setBigUint64(32, data.lpDst === null ? 0n : BigInt(util.toPointer(data.lpDst)), true);
  // 0x28: i32
  if (data?.xDst !== undefined) view.setInt32(40, Number(data.xDst), true);
  // 0x2c: i32
  if (data?.yDst !== undefined) view.setInt32(44, Number(data.yDst), true);
  // 0x30: i32
  if (data?.dxDst !== undefined) view.setInt32(48, Number(data.dxDst), true);
  // 0x34: i32
  if (data?.dyDst !== undefined) view.setInt32(52, Number(data.dyDst), true);
  // 0x38: i32
  if (data?.xSrc !== undefined) view.setInt32(56, Number(data.xSrc), true);
  // 0x3c: i32
  if (data?.ySrc !== undefined) view.setInt32(60, Number(data.ySrc), true);
  // 0x40: i32
  if (data?.dxSrc !== undefined) view.setInt32(64, Number(data.dxSrc), true);
  // 0x44: i32
  if (data?.dySrc !== undefined) view.setInt32(68, Number(data.dySrc), true);
  return buf;
}

export type HPALETTE = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.ICDRAWBEGIN (size: 80)
 */
export interface ICDRAWBEGIN {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.Gdi.HPALETTE */
  hpal: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  xDst: number;
  /** i32 */
  yDst: number;
  /** i32 */
  dxDst: number;
  /** i32 */
  dyDst: number;
  /** ptr */
  lpbi: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** i32 */
  dxSrc: number;
  /** i32 */
  dySrc: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwScale: number;
}

export const sizeofICDRAWBEGIN = 80;

export function allocICDRAWBEGIN(data?: Partial<ICDRAWBEGIN>): Uint8Array {
  const buf = new Uint8Array(sizeofICDRAWBEGIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hpal !== undefined) view.setBigUint64(8, data.hpal === null ? 0n : BigInt(util.toPointer(data.hpal)), true);
  // 0x10: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(16, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x18: pointer
  if (data?.hdc !== undefined) view.setBigUint64(24, data.hdc === null ? 0n : BigInt(util.toPointer(data.hdc)), true);
  // 0x20: i32
  if (data?.xDst !== undefined) view.setInt32(32, Number(data.xDst), true);
  // 0x24: i32
  if (data?.yDst !== undefined) view.setInt32(36, Number(data.yDst), true);
  // 0x28: i32
  if (data?.dxDst !== undefined) view.setInt32(40, Number(data.dxDst), true);
  // 0x2c: i32
  if (data?.dyDst !== undefined) view.setInt32(44, Number(data.dyDst), true);
  // 0x30: pointer
  if (data?.lpbi !== undefined) view.setBigUint64(48, data.lpbi === null ? 0n : BigInt(util.toPointer(data.lpbi)), true);
  // 0x38: i32
  if (data?.xSrc !== undefined) view.setInt32(56, Number(data.xSrc), true);
  // 0x3c: i32
  if (data?.ySrc !== undefined) view.setInt32(60, Number(data.ySrc), true);
  // 0x40: i32
  if (data?.dxSrc !== undefined) view.setInt32(64, Number(data.dxSrc), true);
  // 0x44: i32
  if (data?.dySrc !== undefined) view.setInt32(68, Number(data.dySrc), true);
  // 0x48: u32
  if (data?.dwRate !== undefined) view.setUint32(72, Number(data.dwRate), true);
  // 0x4c: u32
  if (data?.dwScale !== undefined) view.setUint32(76, Number(data.dwScale), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICDRAW (size: 32)
 */
export interface ICDRAW {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpFormat: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData: number;
  /** i32 */
  lTime: number;
}

export const sizeofICDRAW = 32;

export function allocICDRAW(data?: Partial<ICDRAW>): Uint8Array {
  const buf = new Uint8Array(sizeofICDRAW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpFormat !== undefined) view.setBigUint64(8, data.lpFormat === null ? 0n : BigInt(util.toPointer(data.lpFormat)), true);
  // 0x10: pointer
  if (data?.lpData !== undefined) view.setBigUint64(16, data.lpData === null ? 0n : BigInt(util.toPointer(data.lpData)), true);
  // 0x18: u32
  if (data?.cbData !== undefined) view.setUint32(24, Number(data.cbData), true);
  // 0x1c: i32
  if (data?.lTime !== undefined) view.setInt32(28, Number(data.lTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICDRAWSUGGEST (size: 40)
 */
export interface ICDRAWSUGGEST {
  /** ptr */
  lpbiIn: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpbiSuggest: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  dxSrc: number;
  /** i32 */
  dySrc: number;
  /** i32 */
  dxDst: number;
  /** i32 */
  dyDst: number;
  /** Windows.Win32.Media.Multimedia.HIC */
  hicDecompressor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofICDRAWSUGGEST = 40;

export function allocICDRAWSUGGEST(data?: Partial<ICDRAWSUGGEST>): Uint8Array {
  const buf = new Uint8Array(sizeofICDRAWSUGGEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpbiIn !== undefined) view.setBigUint64(0, data.lpbiIn === null ? 0n : BigInt(util.toPointer(data.lpbiIn)), true);
  // 0x08: pointer
  if (data?.lpbiSuggest !== undefined) view.setBigUint64(8, data.lpbiSuggest === null ? 0n : BigInt(util.toPointer(data.lpbiSuggest)), true);
  // 0x10: i32
  if (data?.dxSrc !== undefined) view.setInt32(16, Number(data.dxSrc), true);
  // 0x14: i32
  if (data?.dySrc !== undefined) view.setInt32(20, Number(data.dySrc), true);
  // 0x18: i32
  if (data?.dxDst !== undefined) view.setInt32(24, Number(data.dxDst), true);
  // 0x1c: i32
  if (data?.dyDst !== undefined) view.setInt32(28, Number(data.dyDst), true);
  // 0x20: pointer
  if (data?.hicDecompressor !== undefined) view.setBigUint64(32, data.hicDecompressor === null ? 0n : BigInt(util.toPointer(data.hicDecompressor)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICPALETTE (size: 24)
 */
export interface ICPALETTE {
  /** u32 */
  dwFlags: number;
  /** i32 */
  iStart: number;
  /** i32 */
  iLen: number;
  /** ptr */
  lppe: Deno.PointerValue | Uint8Array | null;
}

export const sizeofICPALETTE = 24;

export function allocICPALETTE(data?: Partial<ICPALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofICPALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: i32
  if (data?.iStart !== undefined) view.setInt32(4, Number(data.iStart), true);
  // 0x08: i32
  if (data?.iLen !== undefined) view.setInt32(8, Number(data.iLen), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lppe !== undefined) view.setBigUint64(16, data.lppe === null ? 0n : BigInt(util.toPointer(data.lppe)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.COMPVARS (size: 96)
 */
export interface COMPVARS {
  /** i32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Media.Multimedia.HIC */
  hic: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** ptr */
  lpbiIn: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpbiOut: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpBitsOut: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpBitsPrev: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  lFrame: number;
  /** i32 */
  lKey: number;
  /** i32 */
  lDataRate: number;
  /** i32 */
  lQ: number;
  /** i32 */
  lKeyCount: number;
  /** ptr */
  lpState: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cbState: number;
}

export const sizeofCOMPVARS = 96;

export function allocCOMPVARS(data?: Partial<COMPVARS>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPVARS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hic !== undefined) view.setBigUint64(8, data.hic === null ? 0n : BigInt(util.toPointer(data.hic)), true);
  // 0x10: u32
  if (data?.fccType !== undefined) view.setUint32(16, Number(data.fccType), true);
  // 0x14: u32
  if (data?.fccHandler !== undefined) view.setUint32(20, Number(data.fccHandler), true);
  // 0x18: pointer
  if (data?.lpbiIn !== undefined) view.setBigUint64(24, data.lpbiIn === null ? 0n : BigInt(util.toPointer(data.lpbiIn)), true);
  // 0x20: pointer
  if (data?.lpbiOut !== undefined) view.setBigUint64(32, data.lpbiOut === null ? 0n : BigInt(util.toPointer(data.lpbiOut)), true);
  // 0x28: pointer
  if (data?.lpBitsOut !== undefined) view.setBigUint64(40, data.lpBitsOut === null ? 0n : BigInt(util.toPointer(data.lpBitsOut)), true);
  // 0x30: pointer
  if (data?.lpBitsPrev !== undefined) view.setBigUint64(48, data.lpBitsPrev === null ? 0n : BigInt(util.toPointer(data.lpBitsPrev)), true);
  // 0x38: i32
  if (data?.lFrame !== undefined) view.setInt32(56, Number(data.lFrame), true);
  // 0x3c: i32
  if (data?.lKey !== undefined) view.setInt32(60, Number(data.lKey), true);
  // 0x40: i32
  if (data?.lDataRate !== undefined) view.setInt32(64, Number(data.lDataRate), true);
  // 0x44: i32
  if (data?.lQ !== undefined) view.setInt32(68, Number(data.lQ), true);
  // 0x48: i32
  if (data?.lKeyCount !== undefined) view.setInt32(72, Number(data.lKeyCount), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.lpState !== undefined) view.setBigUint64(80, data.lpState === null ? 0n : BigInt(util.toPointer(data.lpState)), true);
  // 0x58: i32
  if (data?.cbState !== undefined) view.setInt32(88, Number(data.cbState), true);
  // 0x5c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DRAWDIBTIME (size: 32)
 */
export interface DRAWDIBTIME {
  /** i32 */
  timeCount: number;
  /** i32 */
  timeDraw: number;
  /** i32 */
  timeDecompress: number;
  /** i32 */
  timeDither: number;
  /** i32 */
  timeStretch: number;
  /** i32 */
  timeBlt: number;
  /** i32 */
  timeSetDIBits: number;
}

export const sizeofDRAWDIBTIME = 32;

export function allocDRAWDIBTIME(data?: Partial<DRAWDIBTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofDRAWDIBTIME);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.timeCount !== undefined) view.setInt32(0, Number(data.timeCount), true);
  // 0x04: i32
  if (data?.timeDraw !== undefined) view.setInt32(4, Number(data.timeDraw), true);
  // 0x08: i32
  if (data?.timeDecompress !== undefined) view.setInt32(8, Number(data.timeDecompress), true);
  // 0x0c: i32
  if (data?.timeDither !== undefined) view.setInt32(12, Number(data.timeDither), true);
  // 0x10: i32
  if (data?.timeStretch !== undefined) view.setInt32(16, Number(data.timeStretch), true);
  // 0x14: i32
  if (data?.timeBlt !== undefined) view.setInt32(20, Number(data.timeBlt), true);
  // 0x18: i32
  if (data?.timeSetDIBits !== undefined) view.setInt32(24, Number(data.timeSetDIBits), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AVISTREAMINFOW (size: 80)
 */
export interface AVISTREAMINFOW {
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCaps: number;
  /** u16 */
  wPriority: number;
  /** u16 */
  wLanguage: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwStart: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwQuality: number;
  /** u32 */
  dwSampleSize: number;
  /** Windows.Win32.Foundation.RECT */
  rcFrame: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEditCount: number;
  /** u32 */
  dwFormatChangeCount: number;
  /** array */
  szName: Deno.PointerValue | null;
}

export const sizeofAVISTREAMINFOW = 80;

export function allocAVISTREAMINFOW(data?: Partial<AVISTREAMINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISTREAMINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fccType !== undefined) view.setUint32(0, Number(data.fccType), true);
  // 0x04: u32
  if (data?.fccHandler !== undefined) view.setUint32(4, Number(data.fccHandler), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwCaps !== undefined) view.setUint32(12, Number(data.dwCaps), true);
  // 0x10: u16
  if (data?.wPriority !== undefined) view.setUint16(16, Number(data.wPriority), true);
  // 0x12: u16
  if (data?.wLanguage !== undefined) view.setUint16(18, Number(data.wLanguage), true);
  // 0x14: u32
  if (data?.dwScale !== undefined) view.setUint32(20, Number(data.dwScale), true);
  // 0x18: u32
  if (data?.dwRate !== undefined) view.setUint32(24, Number(data.dwRate), true);
  // 0x1c: u32
  if (data?.dwStart !== undefined) view.setUint32(28, Number(data.dwStart), true);
  // 0x20: u32
  if (data?.dwLength !== undefined) view.setUint32(32, Number(data.dwLength), true);
  // 0x24: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(36, Number(data.dwInitialFrames), true);
  // 0x28: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(40, Number(data.dwSuggestedBufferSize), true);
  // 0x2c: u32
  if (data?.dwQuality !== undefined) view.setUint32(44, Number(data.dwQuality), true);
  // 0x30: u32
  if (data?.dwSampleSize !== undefined) view.setUint32(48, Number(data.dwSampleSize), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rcFrame !== undefined) view.setBigUint64(56, data.rcFrame === null ? 0n : BigInt(util.toPointer(data.rcFrame)), true);
  // 0x40: u32
  if (data?.dwEditCount !== undefined) view.setUint32(64, Number(data.dwEditCount), true);
  // 0x44: u32
  if (data?.dwFormatChangeCount !== undefined) view.setUint32(68, Number(data.dwFormatChangeCount), true);
  // 0x48: pointer
  if (data?.szName !== undefined) view.setBigUint64(72, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AVISTREAMINFOA (size: 80)
 */
export interface AVISTREAMINFOA {
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCaps: number;
  /** u16 */
  wPriority: number;
  /** u16 */
  wLanguage: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwStart: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwQuality: number;
  /** u32 */
  dwSampleSize: number;
  /** Windows.Win32.Foundation.RECT */
  rcFrame: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEditCount: number;
  /** u32 */
  dwFormatChangeCount: number;
  /** array */
  szName: Deno.PointerValue | null;
}

export const sizeofAVISTREAMINFOA = 80;

export function allocAVISTREAMINFOA(data?: Partial<AVISTREAMINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISTREAMINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fccType !== undefined) view.setUint32(0, Number(data.fccType), true);
  // 0x04: u32
  if (data?.fccHandler !== undefined) view.setUint32(4, Number(data.fccHandler), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwCaps !== undefined) view.setUint32(12, Number(data.dwCaps), true);
  // 0x10: u16
  if (data?.wPriority !== undefined) view.setUint16(16, Number(data.wPriority), true);
  // 0x12: u16
  if (data?.wLanguage !== undefined) view.setUint16(18, Number(data.wLanguage), true);
  // 0x14: u32
  if (data?.dwScale !== undefined) view.setUint32(20, Number(data.dwScale), true);
  // 0x18: u32
  if (data?.dwRate !== undefined) view.setUint32(24, Number(data.dwRate), true);
  // 0x1c: u32
  if (data?.dwStart !== undefined) view.setUint32(28, Number(data.dwStart), true);
  // 0x20: u32
  if (data?.dwLength !== undefined) view.setUint32(32, Number(data.dwLength), true);
  // 0x24: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(36, Number(data.dwInitialFrames), true);
  // 0x28: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(40, Number(data.dwSuggestedBufferSize), true);
  // 0x2c: u32
  if (data?.dwQuality !== undefined) view.setUint32(44, Number(data.dwQuality), true);
  // 0x30: u32
  if (data?.dwSampleSize !== undefined) view.setUint32(48, Number(data.dwSampleSize), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rcFrame !== undefined) view.setBigUint64(56, data.rcFrame === null ? 0n : BigInt(util.toPointer(data.rcFrame)), true);
  // 0x40: u32
  if (data?.dwEditCount !== undefined) view.setUint32(64, Number(data.dwEditCount), true);
  // 0x44: u32
  if (data?.dwFormatChangeCount !== undefined) view.setUint32(68, Number(data.dwFormatChangeCount), true);
  // 0x48: pointer
  if (data?.szName !== undefined) view.setBigUint64(72, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AVIFILEINFOW (size: 56)
 */
export interface AVIFILEINFOW {
  /** u32 */
  dwMaxBytesPerSec: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwStreams: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwEditCount: number;
  /** array */
  szFileType: Deno.PointerValue | null;
}

export const sizeofAVIFILEINFOW = 56;

export function allocAVIFILEINFOW(data?: Partial<AVIFILEINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIFILEINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMaxBytesPerSec !== undefined) view.setUint32(0, Number(data.dwMaxBytesPerSec), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwCaps !== undefined) view.setUint32(8, Number(data.dwCaps), true);
  // 0x0c: u32
  if (data?.dwStreams !== undefined) view.setUint32(12, Number(data.dwStreams), true);
  // 0x10: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(16, Number(data.dwSuggestedBufferSize), true);
  // 0x14: u32
  if (data?.dwWidth !== undefined) view.setUint32(20, Number(data.dwWidth), true);
  // 0x18: u32
  if (data?.dwHeight !== undefined) view.setUint32(24, Number(data.dwHeight), true);
  // 0x1c: u32
  if (data?.dwScale !== undefined) view.setUint32(28, Number(data.dwScale), true);
  // 0x20: u32
  if (data?.dwRate !== undefined) view.setUint32(32, Number(data.dwRate), true);
  // 0x24: u32
  if (data?.dwLength !== undefined) view.setUint32(36, Number(data.dwLength), true);
  // 0x28: u32
  if (data?.dwEditCount !== undefined) view.setUint32(40, Number(data.dwEditCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.szFileType !== undefined) view.setBigUint64(48, data.szFileType === null ? 0n : BigInt(util.toPointer(data.szFileType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AVIFILEINFOA (size: 56)
 */
export interface AVIFILEINFOA {
  /** u32 */
  dwMaxBytesPerSec: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwStreams: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwEditCount: number;
  /** array */
  szFileType: Deno.PointerValue | null;
}

export const sizeofAVIFILEINFOA = 56;

export function allocAVIFILEINFOA(data?: Partial<AVIFILEINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIFILEINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMaxBytesPerSec !== undefined) view.setUint32(0, Number(data.dwMaxBytesPerSec), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwCaps !== undefined) view.setUint32(8, Number(data.dwCaps), true);
  // 0x0c: u32
  if (data?.dwStreams !== undefined) view.setUint32(12, Number(data.dwStreams), true);
  // 0x10: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(16, Number(data.dwSuggestedBufferSize), true);
  // 0x14: u32
  if (data?.dwWidth !== undefined) view.setUint32(20, Number(data.dwWidth), true);
  // 0x18: u32
  if (data?.dwHeight !== undefined) view.setUint32(24, Number(data.dwHeight), true);
  // 0x1c: u32
  if (data?.dwScale !== undefined) view.setUint32(28, Number(data.dwScale), true);
  // 0x20: u32
  if (data?.dwRate !== undefined) view.setUint32(32, Number(data.dwRate), true);
  // 0x24: u32
  if (data?.dwLength !== undefined) view.setUint32(36, Number(data.dwLength), true);
  // 0x28: u32
  if (data?.dwEditCount !== undefined) view.setUint32(40, Number(data.dwEditCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.szFileType !== undefined) view.setBigUint64(48, data.szFileType === null ? 0n : BigInt(util.toPointer(data.szFileType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AVICOMPRESSOPTIONS (size: 56)
 */
export interface AVICOMPRESSOPTIONS {
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwKeyFrameEvery: number;
  /** u32 */
  dwQuality: number;
  /** u32 */
  dwBytesPerSecond: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpFormat: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbFormat: number;
  /** ptr */
  lpParms: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbParms: number;
  /** u32 */
  dwInterleaveEvery: number;
}

export const sizeofAVICOMPRESSOPTIONS = 56;

export function allocAVICOMPRESSOPTIONS(data?: Partial<AVICOMPRESSOPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofAVICOMPRESSOPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fccType !== undefined) view.setUint32(0, Number(data.fccType), true);
  // 0x04: u32
  if (data?.fccHandler !== undefined) view.setUint32(4, Number(data.fccHandler), true);
  // 0x08: u32
  if (data?.dwKeyFrameEvery !== undefined) view.setUint32(8, Number(data.dwKeyFrameEvery), true);
  // 0x0c: u32
  if (data?.dwQuality !== undefined) view.setUint32(12, Number(data.dwQuality), true);
  // 0x10: u32
  if (data?.dwBytesPerSecond !== undefined) view.setUint32(16, Number(data.dwBytesPerSecond), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  // 0x18: pointer
  if (data?.lpFormat !== undefined) view.setBigUint64(24, data.lpFormat === null ? 0n : BigInt(util.toPointer(data.lpFormat)), true);
  // 0x20: u32
  if (data?.cbFormat !== undefined) view.setUint32(32, Number(data.cbFormat), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpParms !== undefined) view.setBigUint64(40, data.lpParms === null ? 0n : BigInt(util.toPointer(data.lpParms)), true);
  // 0x30: u32
  if (data?.cbParms !== undefined) view.setUint32(48, Number(data.cbParms), true);
  // 0x34: u32
  if (data?.dwInterleaveEvery !== undefined) view.setUint32(52, Number(data.dwInterleaveEvery), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.VIDEOHDR (size: 48)
 */
export interface VIDEOHDR {
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwBufferLength: number;
  /** u32 */
  dwBytesUsed: number;
  /** u32 */
  dwTimeCaptured: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofVIDEOHDR = 48;

export function allocVIDEOHDR(data?: Partial<VIDEOHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEOHDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpData !== undefined) view.setBigUint64(0, data.lpData === null ? 0n : BigInt(util.toPointer(data.lpData)), true);
  // 0x08: u32
  if (data?.dwBufferLength !== undefined) view.setUint32(8, Number(data.dwBufferLength), true);
  // 0x0c: u32
  if (data?.dwBytesUsed !== undefined) view.setUint32(12, Number(data.dwBytesUsed), true);
  // 0x10: u32
  if (data?.dwTimeCaptured !== undefined) view.setUint32(16, Number(data.dwTimeCaptured), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.dwUser !== undefined) view.setBigUint64(24, BigInt(data.dwUser), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(40, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CHANNEL_CAPS (size: 40)
 */
export interface CHANNEL_CAPS {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwSrcRectXMod: number;
  /** u32 */
  dwSrcRectYMod: number;
  /** u32 */
  dwSrcRectWidthMod: number;
  /** u32 */
  dwSrcRectHeightMod: number;
  /** u32 */
  dwDstRectXMod: number;
  /** u32 */
  dwDstRectYMod: number;
  /** u32 */
  dwDstRectWidthMod: number;
  /** u32 */
  dwDstRectHeightMod: number;
}

export const sizeofCHANNEL_CAPS = 40;

export function allocCHANNEL_CAPS(data?: Partial<CHANNEL_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANNEL_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwSrcRectXMod !== undefined) view.setUint32(4, Number(data.dwSrcRectXMod), true);
  // 0x08: u32
  if (data?.dwSrcRectYMod !== undefined) view.setUint32(8, Number(data.dwSrcRectYMod), true);
  // 0x0c: u32
  if (data?.dwSrcRectWidthMod !== undefined) view.setUint32(12, Number(data.dwSrcRectWidthMod), true);
  // 0x10: u32
  if (data?.dwSrcRectHeightMod !== undefined) view.setUint32(16, Number(data.dwSrcRectHeightMod), true);
  // 0x14: u32
  if (data?.dwDstRectXMod !== undefined) view.setUint32(20, Number(data.dwDstRectXMod), true);
  // 0x18: u32
  if (data?.dwDstRectYMod !== undefined) view.setUint32(24, Number(data.dwDstRectYMod), true);
  // 0x1c: u32
  if (data?.dwDstRectWidthMod !== undefined) view.setUint32(28, Number(data.dwDstRectWidthMod), true);
  // 0x20: u32
  if (data?.dwDstRectHeightMod !== undefined) view.setUint32(32, Number(data.dwDstRectHeightMod), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CAPDRIVERCAPS (size: 64)
 */
export interface CAPDRIVERCAPS {
  /** u32 */
  wDeviceIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  fHasOverlay: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fHasDlgVideoSource: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fHasDlgVideoFormat: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fHasDlgVideoDisplay: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fCaptureInitialized: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDriverSuppliesPalettes: boolean;
  /** Windows.Win32.Foundation.HANDLE */
  hVideoIn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hVideoOut: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hVideoExtIn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hVideoExtOut: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCAPDRIVERCAPS = 64;

export function allocCAPDRIVERCAPS(data?: Partial<CAPDRIVERCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPDRIVERCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wDeviceIndex !== undefined) view.setUint32(0, Number(data.wDeviceIndex), true);
  // 0x04: i32
  if (data?.fHasOverlay !== undefined) view.setInt32(4, Number(data.fHasOverlay), true);
  // 0x08: i32
  if (data?.fHasDlgVideoSource !== undefined) view.setInt32(8, Number(data.fHasDlgVideoSource), true);
  // 0x0c: i32
  if (data?.fHasDlgVideoFormat !== undefined) view.setInt32(12, Number(data.fHasDlgVideoFormat), true);
  // 0x10: i32
  if (data?.fHasDlgVideoDisplay !== undefined) view.setInt32(16, Number(data.fHasDlgVideoDisplay), true);
  // 0x14: i32
  if (data?.fCaptureInitialized !== undefined) view.setInt32(20, Number(data.fCaptureInitialized), true);
  // 0x18: i32
  if (data?.fDriverSuppliesPalettes !== undefined) view.setInt32(24, Number(data.fDriverSuppliesPalettes), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hVideoIn !== undefined) view.setBigUint64(32, data.hVideoIn === null ? 0n : BigInt(util.toPointer(data.hVideoIn)), true);
  // 0x28: pointer
  if (data?.hVideoOut !== undefined) view.setBigUint64(40, data.hVideoOut === null ? 0n : BigInt(util.toPointer(data.hVideoOut)), true);
  // 0x30: pointer
  if (data?.hVideoExtIn !== undefined) view.setBigUint64(48, data.hVideoExtIn === null ? 0n : BigInt(util.toPointer(data.hVideoExtIn)), true);
  // 0x38: pointer
  if (data?.hVideoExtOut !== undefined) view.setBigUint64(56, data.hVideoExtOut === null ? 0n : BigInt(util.toPointer(data.hVideoExtOut)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CAPSTATUS (size: 88)
 */
export interface CAPSTATUS {
  /** u32 */
  uiImageWidth: number;
  /** u32 */
  uiImageHeight: number;
  /** Windows.Win32.Foundation.BOOL */
  fLiveWindow: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fOverlayWindow: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fScale: boolean;
  /** Windows.Win32.Foundation.POINT */
  ptScroll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fUsingDefaultPalette: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fAudioHardware: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fCapFileExists: boolean;
  /** u32 */
  dwCurrentVideoFrame: number;
  /** u32 */
  dwCurrentVideoFramesDropped: number;
  /** u32 */
  dwCurrentWaveSamples: number;
  /** u32 */
  dwCurrentTimeElapsedMS: number;
  /** Windows.Win32.Graphics.Gdi.HPALETTE */
  hPalCurrent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fCapturingNow: boolean;
  /** u32 */
  dwReturn: number;
  /** u32 */
  wNumVideoAllocated: number;
  /** u32 */
  wNumAudioAllocated: number;
}

export const sizeofCAPSTATUS = 88;

export function allocCAPSTATUS(data?: Partial<CAPSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uiImageWidth !== undefined) view.setUint32(0, Number(data.uiImageWidth), true);
  // 0x04: u32
  if (data?.uiImageHeight !== undefined) view.setUint32(4, Number(data.uiImageHeight), true);
  // 0x08: i32
  if (data?.fLiveWindow !== undefined) view.setInt32(8, Number(data.fLiveWindow), true);
  // 0x0c: i32
  if (data?.fOverlayWindow !== undefined) view.setInt32(12, Number(data.fOverlayWindow), true);
  // 0x10: i32
  if (data?.fScale !== undefined) view.setInt32(16, Number(data.fScale), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ptScroll !== undefined) view.setBigUint64(24, data.ptScroll === null ? 0n : BigInt(util.toPointer(data.ptScroll)), true);
  // 0x20: i32
  if (data?.fUsingDefaultPalette !== undefined) view.setInt32(32, Number(data.fUsingDefaultPalette), true);
  // 0x24: i32
  if (data?.fAudioHardware !== undefined) view.setInt32(36, Number(data.fAudioHardware), true);
  // 0x28: i32
  if (data?.fCapFileExists !== undefined) view.setInt32(40, Number(data.fCapFileExists), true);
  // 0x2c: u32
  if (data?.dwCurrentVideoFrame !== undefined) view.setUint32(44, Number(data.dwCurrentVideoFrame), true);
  // 0x30: u32
  if (data?.dwCurrentVideoFramesDropped !== undefined) view.setUint32(48, Number(data.dwCurrentVideoFramesDropped), true);
  // 0x34: u32
  if (data?.dwCurrentWaveSamples !== undefined) view.setUint32(52, Number(data.dwCurrentWaveSamples), true);
  // 0x38: u32
  if (data?.dwCurrentTimeElapsedMS !== undefined) view.setUint32(56, Number(data.dwCurrentTimeElapsedMS), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.hPalCurrent !== undefined) view.setBigUint64(64, data.hPalCurrent === null ? 0n : BigInt(util.toPointer(data.hPalCurrent)), true);
  // 0x48: i32
  if (data?.fCapturingNow !== undefined) view.setInt32(72, Number(data.fCapturingNow), true);
  // 0x4c: u32
  if (data?.dwReturn !== undefined) view.setUint32(76, Number(data.dwReturn), true);
  // 0x50: u32
  if (data?.wNumVideoAllocated !== undefined) view.setUint32(80, Number(data.wNumVideoAllocated), true);
  // 0x54: u32
  if (data?.wNumAudioAllocated !== undefined) view.setUint32(84, Number(data.wNumAudioAllocated), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CAPTUREPARMS (size: 96)
 */
export interface CAPTUREPARMS {
  /** u32 */
  dwRequestMicroSecPerFrame: number;
  /** Windows.Win32.Foundation.BOOL */
  fMakeUserHitOKToCapture: boolean;
  /** u32 */
  wPercentDropForError: number;
  /** Windows.Win32.Foundation.BOOL */
  fYield: boolean;
  /** u32 */
  dwIndexSize: number;
  /** u32 */
  wChunkGranularity: number;
  /** Windows.Win32.Foundation.BOOL */
  fUsingDOSMemory: boolean;
  /** u32 */
  wNumVideoRequested: number;
  /** Windows.Win32.Foundation.BOOL */
  fCaptureAudio: boolean;
  /** u32 */
  wNumAudioRequested: number;
  /** u32 */
  vKeyAbort: number;
  /** Windows.Win32.Foundation.BOOL */
  fAbortLeftMouse: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fAbortRightMouse: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fLimitEnabled: boolean;
  /** u32 */
  wTimeLimit: number;
  /** Windows.Win32.Foundation.BOOL */
  fMCIControl: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fStepMCIDevice: boolean;
  /** u32 */
  dwMCIStartTime: number;
  /** u32 */
  dwMCIStopTime: number;
  /** Windows.Win32.Foundation.BOOL */
  fStepCaptureAt2x: boolean;
  /** u32 */
  wStepCaptureAverageFrames: number;
  /** u32 */
  dwAudioBufferSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fDisableWriteCache: boolean;
  /** u32 */
  AVStreamMaster: number;
}

export const sizeofCAPTUREPARMS = 96;

export function allocCAPTUREPARMS(data?: Partial<CAPTUREPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPTUREPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRequestMicroSecPerFrame !== undefined) view.setUint32(0, Number(data.dwRequestMicroSecPerFrame), true);
  // 0x04: i32
  if (data?.fMakeUserHitOKToCapture !== undefined) view.setInt32(4, Number(data.fMakeUserHitOKToCapture), true);
  // 0x08: u32
  if (data?.wPercentDropForError !== undefined) view.setUint32(8, Number(data.wPercentDropForError), true);
  // 0x0c: i32
  if (data?.fYield !== undefined) view.setInt32(12, Number(data.fYield), true);
  // 0x10: u32
  if (data?.dwIndexSize !== undefined) view.setUint32(16, Number(data.dwIndexSize), true);
  // 0x14: u32
  if (data?.wChunkGranularity !== undefined) view.setUint32(20, Number(data.wChunkGranularity), true);
  // 0x18: i32
  if (data?.fUsingDOSMemory !== undefined) view.setInt32(24, Number(data.fUsingDOSMemory), true);
  // 0x1c: u32
  if (data?.wNumVideoRequested !== undefined) view.setUint32(28, Number(data.wNumVideoRequested), true);
  // 0x20: i32
  if (data?.fCaptureAudio !== undefined) view.setInt32(32, Number(data.fCaptureAudio), true);
  // 0x24: u32
  if (data?.wNumAudioRequested !== undefined) view.setUint32(36, Number(data.wNumAudioRequested), true);
  // 0x28: u32
  if (data?.vKeyAbort !== undefined) view.setUint32(40, Number(data.vKeyAbort), true);
  // 0x2c: i32
  if (data?.fAbortLeftMouse !== undefined) view.setInt32(44, Number(data.fAbortLeftMouse), true);
  // 0x30: i32
  if (data?.fAbortRightMouse !== undefined) view.setInt32(48, Number(data.fAbortRightMouse), true);
  // 0x34: i32
  if (data?.fLimitEnabled !== undefined) view.setInt32(52, Number(data.fLimitEnabled), true);
  // 0x38: u32
  if (data?.wTimeLimit !== undefined) view.setUint32(56, Number(data.wTimeLimit), true);
  // 0x3c: i32
  if (data?.fMCIControl !== undefined) view.setInt32(60, Number(data.fMCIControl), true);
  // 0x40: i32
  if (data?.fStepMCIDevice !== undefined) view.setInt32(64, Number(data.fStepMCIDevice), true);
  // 0x44: u32
  if (data?.dwMCIStartTime !== undefined) view.setUint32(68, Number(data.dwMCIStartTime), true);
  // 0x48: u32
  if (data?.dwMCIStopTime !== undefined) view.setUint32(72, Number(data.dwMCIStopTime), true);
  // 0x4c: i32
  if (data?.fStepCaptureAt2x !== undefined) view.setInt32(76, Number(data.fStepCaptureAt2x), true);
  // 0x50: u32
  if (data?.wStepCaptureAverageFrames !== undefined) view.setUint32(80, Number(data.wStepCaptureAverageFrames), true);
  // 0x54: u32
  if (data?.dwAudioBufferSize !== undefined) view.setUint32(84, Number(data.dwAudioBufferSize), true);
  // 0x58: i32
  if (data?.fDisableWriteCache !== undefined) view.setInt32(88, Number(data.fDisableWriteCache), true);
  // 0x5c: u32
  if (data?.AVStreamMaster !== undefined) view.setUint32(92, Number(data.AVStreamMaster), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CAPINFOCHUNK (size: 24)
 */
export interface CAPINFOCHUNK {
  /** u32 */
  fccInfoID: number;
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cbData: number;
}

export const sizeofCAPINFOCHUNK = 24;

export function allocCAPINFOCHUNK(data?: Partial<CAPINFOCHUNK>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPINFOCHUNK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fccInfoID !== undefined) view.setUint32(0, Number(data.fccInfoID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpData !== undefined) view.setBigUint64(8, data.lpData === null ? 0n : BigInt(util.toPointer(data.lpData)), true);
  // 0x10: i32
  if (data?.cbData !== undefined) view.setInt32(16, Number(data.cbData), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DRVM_IOCTL_DATA (size: 8)
 */
export interface DRVM_IOCTL_DATA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCmd: number;
}

export const sizeofDRVM_IOCTL_DATA = 8;

export function allocDRVM_IOCTL_DATA(data?: Partial<DRVM_IOCTL_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDRVM_IOCTL_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCmd !== undefined) view.setUint32(4, Number(data.dwCmd), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.WAVEOPENDESC (size: 48)
 */
export interface WAVEOPENDESC {
  /** Windows.Win32.Media.Audio.HWAVE */
  hWave: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpFormat: Deno.PointerValue | Uint8Array | null;
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwInstance: Deno.PointerValue;
  /** u32 */
  uMappedDeviceID: number;
  /** usize */
  dnDevNode: Deno.PointerValue;
}

export const sizeofWAVEOPENDESC = 48;

export function allocWAVEOPENDESC(data?: Partial<WAVEOPENDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEOPENDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hWave !== undefined) view.setBigUint64(0, data.hWave === null ? 0n : BigInt(util.toPointer(data.hWave)), true);
  // 0x08: pointer
  if (data?.lpFormat !== undefined) view.setBigUint64(8, data.lpFormat === null ? 0n : BigInt(util.toPointer(data.lpFormat)), true);
  // 0x10: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(16, BigInt(data.dwCallback), true);
  // 0x18: usize
  if (data?.dwInstance !== undefined) view.setBigUint64(24, BigInt(data.dwInstance), true);
  // 0x20: u32
  if (data?.uMappedDeviceID !== undefined) view.setUint32(32, Number(data.uMappedDeviceID), true);
  // 0x24: pad4
  // 0x28: usize
  if (data?.dnDevNode !== undefined) view.setBigUint64(40, BigInt(data.dnDevNode), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MIDIOPENSTRMID (size: 8)
 */
export interface MIDIOPENSTRMID {
  /** u32 */
  dwStreamID: number;
  /** u32 */
  uDeviceID: number;
}

export const sizeofMIDIOPENSTRMID = 8;

export function allocMIDIOPENSTRMID(data?: Partial<MIDIOPENSTRMID>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOPENSTRMID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStreamID !== undefined) view.setUint32(0, Number(data.dwStreamID), true);
  // 0x04: u32
  if (data?.uDeviceID !== undefined) view.setUint32(4, Number(data.uDeviceID), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MIXEROPENDESC (size: 40)
 */
export interface MIXEROPENDESC {
  /** Windows.Win32.Media.Audio.HMIXER */
  hmx: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pReserved0: Deno.PointerValue | Uint8Array | null;
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwInstance: Deno.PointerValue;
  /** usize */
  dnDevNode: Deno.PointerValue;
}

export const sizeofMIXEROPENDESC = 40;

export function allocMIXEROPENDESC(data?: Partial<MIXEROPENDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXEROPENDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hmx !== undefined) view.setBigUint64(0, data.hmx === null ? 0n : BigInt(util.toPointer(data.hmx)), true);
  // 0x08: pointer
  if (data?.pReserved0 !== undefined) view.setBigUint64(8, data.pReserved0 === null ? 0n : BigInt(util.toPointer(data.pReserved0)), true);
  // 0x10: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(16, BigInt(data.dwCallback), true);
  // 0x18: usize
  if (data?.dwInstance !== undefined) view.setBigUint64(24, BigInt(data.dwInstance), true);
  // 0x20: usize
  if (data?.dnDevNode !== undefined) view.setBigUint64(32, BigInt(data.dnDevNode), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.TIMEREVENT (size: 24)
 */
export interface TIMEREVENT {
  /** u16 */
  wDelay: number;
  /** u16 */
  wResolution: number;
  /** Windows.Win32.Media.LPTIMECALLBACK */
  lpFunction: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwUser: number;
  /** u16 */
  wFlags: number;
  /** u16 */
  wReserved1: number;
}

export const sizeofTIMEREVENT = 24;

export function allocTIMEREVENT(data?: Partial<TIMEREVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMEREVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wDelay !== undefined) view.setUint16(0, Number(data.wDelay), true);
  // 0x02: u16
  if (data?.wResolution !== undefined) view.setUint16(2, Number(data.wResolution), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpFunction !== undefined) view.setBigUint64(8, data.lpFunction === null ? 0n : BigInt(util.toPointer(data.lpFunction)), true);
  // 0x10: u32
  if (data?.dwUser !== undefined) view.setUint32(16, Number(data.dwUser), true);
  // 0x14: u16
  if (data?.wFlags !== undefined) view.setUint16(20, Number(data.wFlags), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OPEN_DRIVER_PARMS (size: 24)
 */
export interface MCI_OPEN_DRIVER_PARMS {
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrParams: string | null;
  /** u32 */
  wCustomCommandTable: number;
  /** u32 */
  wType: number;
}

export const sizeofMCI_OPEN_DRIVER_PARMS = 24;

export function allocMCI_OPEN_DRIVER_PARMS(data?: Partial<MCI_OPEN_DRIVER_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OPEN_DRIVER_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wDeviceID !== undefined) view.setUint32(0, Number(data.wDeviceID), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpstrParams !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrParams);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.wCustomCommandTable !== undefined) view.setUint32(16, Number(data.wCustomCommandTable), true);
  // 0x14: u32
  if (data?.wType !== undefined) view.setUint32(20, Number(data.wType), true);
  return buf;
}

/**
 * _Samples_e__Union (size: 8)
 */
export interface _Samples_e__Union {
  /** u16 */
  wValidBitsPerSample: number;
  /** u16 */
  wSamplesPerBlock: number;
  /** u16 */
  wReserved: number;
}

export const sizeof_Samples_e__Union = 8;

export function alloc_Samples_e__Union(data?: Partial<_Samples_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Samples_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wValidBitsPerSample !== undefined) view.setUint16(0, Number(data.wValidBitsPerSample), true);
  // 0x02: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(2, Number(data.wSamplesPerBlock), true);
  // 0x04: u16
  if (data?.wReserved !== undefined) view.setUint16(4, Number(data.wReserved), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEFORMATEXTENSIBLE (size: 32)
 */
export interface WAVEFORMATEXTENSIBLE {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  Format: Uint8Array | Deno.PointerValue | null;
  /** _Samples_e__Union */
  Samples: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwChannelMask: number;
  /** System.Guid */
  SubFormat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAVEFORMATEXTENSIBLE = 32;

export function allocWAVEFORMATEXTENSIBLE(data?: Partial<WAVEFORMATEXTENSIBLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFORMATEXTENSIBLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Format !== undefined) view.setBigUint64(0, data.Format === null ? 0n : BigInt(util.toPointer(data.Format)), true);
  // 0x08: pointer
  if (data?.Samples !== undefined) view.setBigUint64(8, data.Samples === null ? 0n : BigInt(util.toPointer(data.Samples)), true);
  // 0x10: u32
  if (data?.dwChannelMask !== undefined) view.setUint32(16, Number(data.dwChannelMask), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.SubFormat !== undefined) view.setBigUint64(24, data.SubFormat === null ? 0n : BigInt(util.toPointer(data.SubFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEFILTER (size: 24)
 */
export interface WAVEFILTER {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFilterTag: number;
  /** u32 */
  fdwFilter: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofWAVEFILTER = 24;

export function allocWAVEFILTER(data?: Partial<WAVEFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFilterTag !== undefined) view.setUint32(4, Number(data.dwFilterTag), true);
  // 0x08: u32
  if (data?.fdwFilter !== undefined) view.setUint32(8, Number(data.fdwFilter), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(16, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.VOLUMEWAVEFILTER (size: 16)
 */
export interface VOLUMEWAVEFILTER {
  /** Windows.Win32.Media.Audio.WAVEFILTER */
  wfltr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwVolume: number;
}

export const sizeofVOLUMEWAVEFILTER = 16;

export function allocVOLUMEWAVEFILTER(data?: Partial<VOLUMEWAVEFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofVOLUMEWAVEFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfltr !== undefined) view.setBigUint64(0, data.wfltr === null ? 0n : BigInt(util.toPointer(data.wfltr)), true);
  // 0x08: u32
  if (data?.dwVolume !== undefined) view.setUint32(8, Number(data.dwVolume), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ECHOWAVEFILTER (size: 16)
 */
export interface ECHOWAVEFILTER {
  /** Windows.Win32.Media.Audio.WAVEFILTER */
  wfltr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwVolume: number;
  /** u32 */
  dwDelay: number;
}

export const sizeofECHOWAVEFILTER = 16;

export function allocECHOWAVEFILTER(data?: Partial<ECHOWAVEFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofECHOWAVEFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfltr !== undefined) view.setBigUint64(0, data.wfltr === null ? 0n : BigInt(util.toPointer(data.wfltr)), true);
  // 0x08: u32
  if (data?.dwVolume !== undefined) view.setUint32(8, Number(data.dwVolume), true);
  // 0x0c: u32
  if (data?.dwDelay !== undefined) view.setUint32(12, Number(data.dwDelay), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEG1WAVEFORMAT (size: 32)
 */
export interface MPEG1WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  fwHeadLayer: number;
  /** u32 */
  dwHeadBitrate: number;
  /** u16 */
  fwHeadMode: number;
  /** u16 */
  fwHeadModeExt: number;
  /** u16 */
  wHeadEmphasis: number;
  /** u16 */
  fwHeadFlags: number;
  /** u32 */
  dwPTSLow: number;
  /** u32 */
  dwPTSHigh: number;
}

export const sizeofMPEG1WAVEFORMAT = 32;

export function allocMPEG1WAVEFORMAT(data?: Partial<MPEG1WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG1WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.fwHeadLayer !== undefined) view.setUint16(8, Number(data.fwHeadLayer), true);
  // 0x0a: u32
  if (data?.dwHeadBitrate !== undefined) view.setUint32(10, Number(data.dwHeadBitrate), true);
  // 0x0e: u16
  if (data?.fwHeadMode !== undefined) view.setUint16(14, Number(data.fwHeadMode), true);
  // 0x10: u16
  if (data?.fwHeadModeExt !== undefined) view.setUint16(16, Number(data.fwHeadModeExt), true);
  // 0x12: u16
  if (data?.wHeadEmphasis !== undefined) view.setUint16(18, Number(data.wHeadEmphasis), true);
  // 0x14: u16
  if (data?.fwHeadFlags !== undefined) view.setUint16(20, Number(data.fwHeadFlags), true);
  // 0x16: u32
  if (data?.dwPTSLow !== undefined) view.setUint32(22, Number(data.dwPTSLow), true);
  // 0x1a: u32
  if (data?.dwPTSHigh !== undefined) view.setUint32(26, Number(data.dwPTSHigh), true);
  // 0x1e: pad2
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.MPEGLAYER3WAVEFORMAT (size: 24)
 */
export interface MPEGLAYER3WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wID: number;
  /** Windows.Win32.Media.DirectShow.MPEGLAYER3WAVEFORMAT_FLAGS */
  fdwFlags: MPEGLAYER3WAVEFORMAT_FLAGS;
  /** u16 */
  nBlockSize: number;
  /** u16 */
  nFramesPerBlock: number;
  /** u16 */
  nCodecDelay: number;
}

export const sizeofMPEGLAYER3WAVEFORMAT = 24;

export function allocMPEGLAYER3WAVEFORMAT(data?: Partial<MPEGLAYER3WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEGLAYER3WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wID !== undefined) view.setUint16(8, Number(data.wID), true);
  // 0x0a: u32
  if (data?.fdwFlags !== undefined) view.setUint32(10, Number(data.fdwFlags), true);
  // 0x0e: u16
  if (data?.nBlockSize !== undefined) view.setUint16(14, Number(data.nBlockSize), true);
  // 0x10: u16
  if (data?.nFramesPerBlock !== undefined) view.setUint16(16, Number(data.nFramesPerBlock), true);
  // 0x12: u16
  if (data?.nCodecDelay !== undefined) view.setUint16(18, Number(data.nCodecDelay), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.HEAACWAVEINFO (size: 24)
 */
export interface HEAACWAVEINFO {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wPayloadType: number;
  /** u16 */
  wAudioProfileLevelIndication: number;
  /** u16 */
  wStructType: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofHEAACWAVEINFO = 24;

export function allocHEAACWAVEINFO(data?: Partial<HEAACWAVEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHEAACWAVEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wPayloadType !== undefined) view.setUint16(8, Number(data.wPayloadType), true);
  // 0x0a: u16
  if (data?.wAudioProfileLevelIndication !== undefined) view.setUint16(10, Number(data.wAudioProfileLevelIndication), true);
  // 0x0c: u16
  if (data?.wStructType !== undefined) view.setUint16(12, Number(data.wStructType), true);
  // 0x0e: u16
  if (data?.wReserved1 !== undefined) view.setUint16(14, Number(data.wReserved1), true);
  // 0x10: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(16, Number(data.dwReserved2), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.HEAACWAVEFORMAT (size: 16)
 */
export interface HEAACWAVEFORMAT {
  /** Windows.Win32.Media.DirectShow.HEAACWAVEINFO */
  wfInfo: Uint8Array | Deno.PointerValue | null;
  /** array */
  pbAudioSpecificConfig: Deno.PointerValue | null;
}

export const sizeofHEAACWAVEFORMAT = 16;

export function allocHEAACWAVEFORMAT(data?: Partial<HEAACWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofHEAACWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfInfo !== undefined) view.setBigUint64(0, data.wfInfo === null ? 0n : BigInt(util.toPointer(data.wfInfo)), true);
  // 0x08: pointer
  if (data?.pbAudioSpecificConfig !== undefined) view.setBigUint64(8, data.pbAudioSpecificConfig === null ? 0n : BigInt(util.toPointer(data.pbAudioSpecificConfig)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.MDEVICECAPSEX (size: 16)
 */
export interface MDEVICECAPSEX {
  /** u32 */
  cbSize: number;
  /** ptr */
  pCaps: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMDEVICECAPSEX = 16;

export function allocMDEVICECAPSEX(data?: Partial<MDEVICECAPSEX>): Uint8Array {
  const buf = new Uint8Array(sizeofMDEVICECAPSEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCaps !== undefined) view.setBigUint64(8, data.pCaps === null ? 0n : BigInt(util.toPointer(data.pCaps)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.MIDIOPENDESC (size: 48)
 */
export interface MIDIOPENDESC {
  /** Windows.Win32.Media.Audio.HMIDI */
  hMidi: Uint8Array | Deno.PointerValue | null;
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwInstance: Deno.PointerValue;
  /** usize */
  dnDevNode: Deno.PointerValue;
  /** u32 */
  cIds: number;
  /** array */
  rgIds: Deno.PointerValue | null;
}

export const sizeofMIDIOPENDESC = 48;

export function allocMIDIOPENDESC(data?: Partial<MIDIOPENDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOPENDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hMidi !== undefined) view.setBigUint64(0, data.hMidi === null ? 0n : BigInt(util.toPointer(data.hMidi)), true);
  // 0x08: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(8, BigInt(data.dwCallback), true);
  // 0x10: usize
  if (data?.dwInstance !== undefined) view.setBigUint64(16, BigInt(data.dwInstance), true);
  // 0x18: usize
  if (data?.dnDevNode !== undefined) view.setBigUint64(24, BigInt(data.dnDevNode), true);
  // 0x20: u32
  if (data?.cIds !== undefined) view.setUint32(32, Number(data.cIds), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgIds !== undefined) view.setBigUint64(40, data.rgIds === null ? 0n : BigInt(util.toPointer(data.rgIds)), true);
  return buf;
}

export type WPARAM = Deno.PointerValue;

/**
 * Windows.Win32.Media.Speech.SPEVENT (size: 32)
 */
export interface SPEVENT {
  /** i32 */
  _bitfield: number;
  /** u32 */
  ulStreamNum: number;
  /** u64 */
  ullAudioStreamOffset: Deno.PointerValue;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPEVENT = 32;

export function allocSPEVENT(data?: Partial<SPEVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPEVENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.ulStreamNum !== undefined) view.setUint32(4, Number(data.ulStreamNum), true);
  // 0x08: u64
  if (data?.ullAudioStreamOffset !== undefined) view.setBigUint64(8, BigInt(data.ullAudioStreamOffset), true);
  // 0x10: pointer
  if (data?.wParam !== undefined) view.setBigUint64(16, data.wParam === null ? 0n : BigInt(util.toPointer(data.wParam)), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSERIALIZEDEVENT (size: 24)
 */
export interface SPSERIALIZEDEVENT {
  /** i32 */
  _bitfield: number;
  /** u32 */
  ulStreamNum: number;
  /** u64 */
  ullAudioStreamOffset: Deno.PointerValue;
  /** u32 */
  SerializedwParam: number;
  /** i32 */
  SerializedlParam: number;
}

export const sizeofSPSERIALIZEDEVENT = 24;

export function allocSPSERIALIZEDEVENT(data?: Partial<SPSERIALIZEDEVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSERIALIZEDEVENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.ulStreamNum !== undefined) view.setUint32(4, Number(data.ulStreamNum), true);
  // 0x08: u64
  if (data?.ullAudioStreamOffset !== undefined) view.setBigUint64(8, BigInt(data.ullAudioStreamOffset), true);
  // 0x10: u32
  if (data?.SerializedwParam !== undefined) view.setUint32(16, Number(data.SerializedwParam), true);
  // 0x14: i32
  if (data?.SerializedlParam !== undefined) view.setInt32(20, Number(data.SerializedlParam), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSERIALIZEDEVENT64 (size: 32)
 */
export interface SPSERIALIZEDEVENT64 {
  /** i32 */
  _bitfield: number;
  /** u32 */
  ulStreamNum: number;
  /** u64 */
  ullAudioStreamOffset: Deno.PointerValue;
  /** u64 */
  SerializedwParam: Deno.PointerValue;
  /** i64 */
  SerializedlParam: Deno.PointerValue;
}

export const sizeofSPSERIALIZEDEVENT64 = 32;

export function allocSPSERIALIZEDEVENT64(data?: Partial<SPSERIALIZEDEVENT64>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSERIALIZEDEVENT64);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.ulStreamNum !== undefined) view.setUint32(4, Number(data.ulStreamNum), true);
  // 0x08: u64
  if (data?.ullAudioStreamOffset !== undefined) view.setBigUint64(8, BigInt(data.ullAudioStreamOffset), true);
  // 0x10: u64
  if (data?.SerializedwParam !== undefined) view.setBigUint64(16, BigInt(data.SerializedwParam), true);
  // 0x18: i64
  if (data?.SerializedlParam !== undefined) view.setBigInt64(24, BigInt(data.SerializedlParam), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPEVENTEX (size: 40)
 */
export interface SPEVENTEX {
  /** i32 */
  _bitfield: number;
  /** u32 */
  ulStreamNum: number;
  /** u64 */
  ullAudioStreamOffset: Deno.PointerValue;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullAudioTimeOffset: Deno.PointerValue;
}

export const sizeofSPEVENTEX = 40;

export function allocSPEVENTEX(data?: Partial<SPEVENTEX>): Uint8Array {
  const buf = new Uint8Array(sizeofSPEVENTEX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.ulStreamNum !== undefined) view.setUint32(4, Number(data.ulStreamNum), true);
  // 0x08: u64
  if (data?.ullAudioStreamOffset !== undefined) view.setBigUint64(8, BigInt(data.ullAudioStreamOffset), true);
  // 0x10: pointer
  if (data?.wParam !== undefined) view.setBigUint64(16, data.wParam === null ? 0n : BigInt(util.toPointer(data.wParam)), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x20: u64
  if (data?.ullAudioTimeOffset !== undefined) view.setBigUint64(32, BigInt(data.ullAudioTimeOffset), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPEVENTSOURCEINFO (size: 24)
 */
export interface SPEVENTSOURCEINFO {
  /** u64 */
  ullEventInterest: Deno.PointerValue;
  /** u64 */
  ullQueuedInterest: Deno.PointerValue;
  /** u32 */
  ulCount: number;
}

export const sizeofSPEVENTSOURCEINFO = 24;

export function allocSPEVENTSOURCEINFO(data?: Partial<SPEVENTSOURCEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPEVENTSOURCEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullEventInterest !== undefined) view.setBigUint64(0, BigInt(data.ullEventInterest), true);
  // 0x08: u64
  if (data?.ullQueuedInterest !== undefined) view.setBigUint64(8, BigInt(data.ullQueuedInterest), true);
  // 0x10: u32
  if (data?.ulCount !== undefined) view.setUint32(16, Number(data.ulCount), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPAUDIOSTATUS (size: 40)
 */
export interface SPAUDIOSTATUS {
  /** i32 */
  cbFreeBuffSpace: number;
  /** u32 */
  cbNonBlockingIO: number;
  /** Windows.Win32.Media.Speech.SPAUDIOSTATE */
  State: SPAUDIOSTATE;
  /** u64 */
  CurSeekPos: Deno.PointerValue;
  /** u64 */
  CurDevicePos: Deno.PointerValue;
  /** u32 */
  dwAudioLevel: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofSPAUDIOSTATUS = 40;

export function allocSPAUDIOSTATUS(data?: Partial<SPAUDIOSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSPAUDIOSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbFreeBuffSpace !== undefined) view.setInt32(0, Number(data.cbFreeBuffSpace), true);
  // 0x04: u32
  if (data?.cbNonBlockingIO !== undefined) view.setUint32(4, Number(data.cbNonBlockingIO), true);
  // 0x08: i32
  if (data?.State !== undefined) view.setInt32(8, Number(data.State), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.CurSeekPos !== undefined) view.setBigUint64(16, BigInt(data.CurSeekPos), true);
  // 0x18: u64
  if (data?.CurDevicePos !== undefined) view.setBigUint64(24, BigInt(data.CurDevicePos), true);
  // 0x20: u32
  if (data?.dwAudioLevel !== undefined) view.setUint32(32, Number(data.dwAudioLevel), true);
  // 0x24: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(36, Number(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPAUDIOBUFFERINFO (size: 16)
 */
export interface SPAUDIOBUFFERINFO {
  /** u32 */
  ulMsMinNotification: number;
  /** u32 */
  ulMsBufferSize: number;
  /** u32 */
  ulMsEventBias: number;
}

export const sizeofSPAUDIOBUFFERINFO = 16;

export function allocSPAUDIOBUFFERINFO(data?: Partial<SPAUDIOBUFFERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPAUDIOBUFFERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulMsMinNotification !== undefined) view.setUint32(0, Number(data.ulMsMinNotification), true);
  // 0x04: u32
  if (data?.ulMsBufferSize !== undefined) view.setUint32(4, Number(data.ulMsBufferSize), true);
  // 0x08: u32
  if (data?.ulMsEventBias !== undefined) view.setUint32(8, Number(data.ulMsEventBias), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPHRASEELEMENT (size: 56)
 */
export interface SPPHRASEELEMENT {
  /** u32 */
  ulAudioTimeOffset: number;
  /** u32 */
  ulAudioSizeTime: number;
  /** u32 */
  ulAudioStreamOffset: number;
  /** u32 */
  ulAudioSizeBytes: number;
  /** u32 */
  ulRetainedStreamOffset: number;
  /** u32 */
  ulRetainedSizeBytes: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszDisplayText: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszLexicalForm: string | null;
  /** ptr */
  pszPronunciation: Deno.PointerValue | Uint8Array | null;
  /** u8 */
  bDisplayAttributes: number;
  /** i8 */
  RequiredConfidence: number;
  /** i8 */
  ActualConfidence: number;
  /** u8 */
  Reserved: number;
  /** f32 */
  SREngineConfidence: number;
}

export const sizeofSPPHRASEELEMENT = 56;

export function allocSPPHRASEELEMENT(data?: Partial<SPPHRASEELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASEELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulAudioTimeOffset !== undefined) view.setUint32(0, Number(data.ulAudioTimeOffset), true);
  // 0x04: u32
  if (data?.ulAudioSizeTime !== undefined) view.setUint32(4, Number(data.ulAudioSizeTime), true);
  // 0x08: u32
  if (data?.ulAudioStreamOffset !== undefined) view.setUint32(8, Number(data.ulAudioStreamOffset), true);
  // 0x0c: u32
  if (data?.ulAudioSizeBytes !== undefined) view.setUint32(12, Number(data.ulAudioSizeBytes), true);
  // 0x10: u32
  if (data?.ulRetainedStreamOffset !== undefined) view.setUint32(16, Number(data.ulRetainedStreamOffset), true);
  // 0x14: u32
  if (data?.ulRetainedSizeBytes !== undefined) view.setUint32(20, Number(data.ulRetainedSizeBytes), true);
  // 0x18: buffer
  if (data?.pszDisplayText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszDisplayText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszLexicalForm !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszLexicalForm);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.pszPronunciation !== undefined) view.setBigUint64(40, data.pszPronunciation === null ? 0n : BigInt(util.toPointer(data.pszPronunciation)), true);
  // 0x30: u8
  if (data?.bDisplayAttributes !== undefined) view.setUint8(48, Number(data.bDisplayAttributes));
  // 0x31: i8
  if (data?.RequiredConfidence !== undefined) view.setInt8(49, Number(data.RequiredConfidence));
  // 0x32: i8
  if (data?.ActualConfidence !== undefined) view.setInt8(50, Number(data.ActualConfidence));
  // 0x33: u8
  if (data?.Reserved !== undefined) view.setUint8(51, Number(data.Reserved));
  // 0x34: f32
  if (data?.SREngineConfidence !== undefined) view.setFloat32(52, Number(data.SREngineConfidence), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPHRASERULE (size: 48)
 */
export interface SPPHRASERULE {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** u32 */
  ulId: number;
  /** u32 */
  ulFirstElement: number;
  /** u32 */
  ulCountOfElements: number;
  /** ptr */
  pNextSibling: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFirstChild: Deno.PointerValue | Uint8Array | null;
  /** f32 */
  SREngineConfidence: number;
  /** i8 */
  Confidence: number;
}

export const sizeofSPPHRASERULE = 48;

export function allocSPPHRASERULE(data?: Partial<SPPHRASERULE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASERULE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.ulId !== undefined) view.setUint32(8, Number(data.ulId), true);
  // 0x0c: u32
  if (data?.ulFirstElement !== undefined) view.setUint32(12, Number(data.ulFirstElement), true);
  // 0x10: u32
  if (data?.ulCountOfElements !== undefined) view.setUint32(16, Number(data.ulCountOfElements), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pNextSibling !== undefined) view.setBigUint64(24, data.pNextSibling === null ? 0n : BigInt(util.toPointer(data.pNextSibling)), true);
  // 0x20: pointer
  if (data?.pFirstChild !== undefined) view.setBigUint64(32, data.pFirstChild === null ? 0n : BigInt(util.toPointer(data.pFirstChild)), true);
  // 0x28: f32
  if (data?.SREngineConfidence !== undefined) view.setFloat32(40, Number(data.SREngineConfidence), true);
  // 0x2c: i8
  if (data?.Confidence !== undefined) view.setInt8(44, Number(data.Confidence));
  // 0x2d: pad3
  return buf;
}

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPHRASEPROPERTY (size: 64)
 */
export interface SPPHRASEPROPERTY {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszValue: string | null;
  /** Windows.Win32.System.Com.VARIANT */
  vValue: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulFirstElement: number;
  /** u32 */
  ulCountOfElements: number;
  /** ptr */
  pNextSibling: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFirstChild: Deno.PointerValue | Uint8Array | null;
  /** f32 */
  SREngineConfidence: number;
  /** i8 */
  Confidence: number;
}

export const sizeofSPPHRASEPROPERTY = 64;

export function allocSPPHRASEPROPERTY(data?: Partial<SPPHRASEPROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASEPROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: buffer
  if (data?.pszValue !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszValue);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.vValue !== undefined) view.setBigUint64(24, data.vValue === null ? 0n : BigInt(util.toPointer(data.vValue)), true);
  // 0x20: u32
  if (data?.ulFirstElement !== undefined) view.setUint32(32, Number(data.ulFirstElement), true);
  // 0x24: u32
  if (data?.ulCountOfElements !== undefined) view.setUint32(36, Number(data.ulCountOfElements), true);
  // 0x28: pointer
  if (data?.pNextSibling !== undefined) view.setBigUint64(40, data.pNextSibling === null ? 0n : BigInt(util.toPointer(data.pNextSibling)), true);
  // 0x30: pointer
  if (data?.pFirstChild !== undefined) view.setBigUint64(48, data.pFirstChild === null ? 0n : BigInt(util.toPointer(data.pFirstChild)), true);
  // 0x38: f32
  if (data?.SREngineConfidence !== undefined) view.setFloat32(56, Number(data.SREngineConfidence), true);
  // 0x3c: i8
  if (data?.Confidence !== undefined) view.setInt8(60, Number(data.Confidence));
  // 0x3d: pad3
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPHRASEREPLACEMENT (size: 24)
 */
export interface SPPHRASEREPLACEMENT {
  /** u8 */
  bDisplayAttributes: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszReplacementText: string | null;
  /** u32 */
  ulFirstElement: number;
  /** u32 */
  ulCountOfElements: number;
}

export const sizeofSPPHRASEREPLACEMENT = 24;

export function allocSPPHRASEREPLACEMENT(data?: Partial<SPPHRASEREPLACEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASEREPLACEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bDisplayAttributes !== undefined) view.setUint8(0, Number(data.bDisplayAttributes));
  // 0x01: pad7
  // 0x08: buffer
  if (data?.pszReplacementText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszReplacementText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.ulFirstElement !== undefined) view.setUint32(16, Number(data.ulFirstElement), true);
  // 0x14: u32
  if (data?.ulCountOfElements !== undefined) view.setUint32(20, Number(data.ulCountOfElements), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSEMANTICERRORINFO (size: 40)
 */
export interface SPSEMANTICERRORINFO {
  /** u32 */
  ulLineNumber: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszScriptLine: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszSource: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDescription: string | null;
  /** Windows.Win32.Foundation.HRESULT */
  hrResultCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPSEMANTICERRORINFO = 40;

export function allocSPSEMANTICERRORINFO(data?: Partial<SPSEMANTICERRORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSEMANTICERRORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulLineNumber !== undefined) view.setUint32(0, Number(data.ulLineNumber), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszScriptLine !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszScriptLine);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszSource !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszSource);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszDescription !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszDescription);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.hrResultCode !== undefined) view.setBigUint64(32, data.hrResultCode === null ? 0n : BigInt(util.toPointer(data.hrResultCode)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPHRASE_50 (size: 112)
 */
export interface SPPHRASE_50 {
  /** u32 */
  cbSize: number;
  /** u16 */
  LangID: number;
  /** u16 */
  wHomophoneGroupId: number;
  /** u64 */
  ullGrammarID: Deno.PointerValue;
  /** u64 */
  ftStartTime: Deno.PointerValue;
  /** u64 */
  ullAudioStreamPosition: Deno.PointerValue;
  /** u32 */
  ulAudioSizeBytes: number;
  /** u32 */
  ulRetainedSizeBytes: number;
  /** u32 */
  ulAudioSizeTime: number;
  /** Windows.Win32.Media.Speech.SPPHRASERULE */
  Rule: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pProperties: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pElements: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cReplacements: number;
  /** ptr */
  pReplacements: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  SREngineID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulSREnginePrivateDataSize: number;
  /** ptr */
  pSREnginePrivateData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPPHRASE_50 = 112;

export function allocSPPHRASE_50(data?: Partial<SPPHRASE_50>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASE_50);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u16
  if (data?.LangID !== undefined) view.setUint16(4, Number(data.LangID), true);
  // 0x06: u16
  if (data?.wHomophoneGroupId !== undefined) view.setUint16(6, Number(data.wHomophoneGroupId), true);
  // 0x08: u64
  if (data?.ullGrammarID !== undefined) view.setBigUint64(8, BigInt(data.ullGrammarID), true);
  // 0x10: u64
  if (data?.ftStartTime !== undefined) view.setBigUint64(16, BigInt(data.ftStartTime), true);
  // 0x18: u64
  if (data?.ullAudioStreamPosition !== undefined) view.setBigUint64(24, BigInt(data.ullAudioStreamPosition), true);
  // 0x20: u32
  if (data?.ulAudioSizeBytes !== undefined) view.setUint32(32, Number(data.ulAudioSizeBytes), true);
  // 0x24: u32
  if (data?.ulRetainedSizeBytes !== undefined) view.setUint32(36, Number(data.ulRetainedSizeBytes), true);
  // 0x28: u32
  if (data?.ulAudioSizeTime !== undefined) view.setUint32(40, Number(data.ulAudioSizeTime), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Rule !== undefined) view.setBigUint64(48, data.Rule === null ? 0n : BigInt(util.toPointer(data.Rule)), true);
  // 0x38: pointer
  if (data?.pProperties !== undefined) view.setBigUint64(56, data.pProperties === null ? 0n : BigInt(util.toPointer(data.pProperties)), true);
  // 0x40: pointer
  if (data?.pElements !== undefined) view.setBigUint64(64, data.pElements === null ? 0n : BigInt(util.toPointer(data.pElements)), true);
  // 0x48: u32
  if (data?.cReplacements !== undefined) view.setUint32(72, Number(data.cReplacements), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pReplacements !== undefined) view.setBigUint64(80, data.pReplacements === null ? 0n : BigInt(util.toPointer(data.pReplacements)), true);
  // 0x58: pointer
  if (data?.SREngineID !== undefined) view.setBigUint64(88, data.SREngineID === null ? 0n : BigInt(util.toPointer(data.SREngineID)), true);
  // 0x60: u32
  if (data?.ulSREnginePrivateDataSize !== undefined) view.setUint32(96, Number(data.ulSREnginePrivateDataSize), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.pSREnginePrivateData !== undefined) view.setBigUint64(104, data.pSREnginePrivateData === null ? 0n : BigInt(util.toPointer(data.pSREnginePrivateData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPHRASE (size: 24)
 */
export interface SPPHRASE {
  /** Windows.Win32.Media.Speech.SPPHRASE_50 */
  Base: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pSML: string | null;
  /** ptr */
  pSemanticErrorInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPPHRASE = 24;

export function allocSPPHRASE(data?: Partial<SPPHRASE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(util.toPointer(data.Base)), true);
  // 0x08: buffer
  if (data?.pSML !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pSML);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pSemanticErrorInfo !== undefined) view.setBigUint64(16, data.pSemanticErrorInfo === null ? 0n : BigInt(util.toPointer(data.pSemanticErrorInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSERIALIZEDPHRASE (size: 8)
 */
export interface SPSERIALIZEDPHRASE {
  /** u32 */
  ulSerializedSize: number;
}

export const sizeofSPSERIALIZEDPHRASE = 8;

export function allocSPSERIALIZEDPHRASE(data?: Partial<SPSERIALIZEDPHRASE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSERIALIZEDPHRASE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSerializedSize !== undefined) view.setUint32(0, Number(data.ulSerializedSize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPRULE (size: 16)
 */
export interface SPRULE {
  /** Windows.Win32.Foundation.PWSTR */
  pszRuleName: string | null;
  /** u32 */
  ulRuleId: number;
  /** u32 */
  dwAttributes: number;
}

export const sizeofSPRULE = 16;

export function allocSPRULE(data?: Partial<SPRULE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPRULE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszRuleName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszRuleName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.ulRuleId !== undefined) view.setUint32(8, Number(data.ulRuleId), true);
  // 0x0c: u32
  if (data?.dwAttributes !== undefined) view.setUint32(12, Number(data.dwAttributes), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPBINARYGRAMMAR (size: 8)
 */
export interface SPBINARYGRAMMAR {
  /** u32 */
  ulTotalSerializedSize: number;
}

export const sizeofSPBINARYGRAMMAR = 8;

export function allocSPBINARYGRAMMAR(data?: Partial<SPBINARYGRAMMAR>): Uint8Array {
  const buf = new Uint8Array(sizeofSPBINARYGRAMMAR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulTotalSerializedSize !== undefined) view.setUint32(0, Number(data.ulTotalSerializedSize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSTATEHANDLE__ (size: 8)
 */
export interface SPSTATEHANDLE__ {
  /** i32 */
  unused: number;
}

export const sizeofSPSTATEHANDLE__ = 8;

export function allocSPSTATEHANDLE__(data?: Partial<SPSTATEHANDLE__>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSTATEHANDLE__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPWORDPRONUNCIATION (size: 32)
 */
export interface SPWORDPRONUNCIATION {
  /** ptr */
  pNextWordPronunciation: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Speech.SPLEXICONTYPE */
  eLexiconType: SPLEXICONTYPE;
  /** u16 */
  LangID: number;
  /** u16 */
  wPronunciationFlags: number;
  /** Windows.Win32.Media.Speech.SPPARTOFSPEECH */
  ePartOfSpeech: SPPARTOFSPEECH;
  /** array */
  szPronunciation: Deno.PointerValue | null;
}

export const sizeofSPWORDPRONUNCIATION = 32;

export function allocSPWORDPRONUNCIATION(data?: Partial<SPWORDPRONUNCIATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSPWORDPRONUNCIATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pNextWordPronunciation !== undefined) view.setBigUint64(0, data.pNextWordPronunciation === null ? 0n : BigInt(util.toPointer(data.pNextWordPronunciation)), true);
  // 0x08: i32
  if (data?.eLexiconType !== undefined) view.setInt32(8, Number(data.eLexiconType), true);
  // 0x0c: u16
  if (data?.LangID !== undefined) view.setUint16(12, Number(data.LangID), true);
  // 0x0e: u16
  if (data?.wPronunciationFlags !== undefined) view.setUint16(14, Number(data.wPronunciationFlags), true);
  // 0x10: i32
  if (data?.ePartOfSpeech !== undefined) view.setInt32(16, Number(data.ePartOfSpeech), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szPronunciation !== undefined) view.setBigUint64(24, data.szPronunciation === null ? 0n : BigInt(util.toPointer(data.szPronunciation)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPWORDPRONUNCIATIONLIST (size: 24)
 */
export interface SPWORDPRONUNCIATIONLIST {
  /** u32 */
  ulSize: number;
  /** ptr */
  pvBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFirstWordPronunciation: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPWORDPRONUNCIATIONLIST = 24;

export function allocSPWORDPRONUNCIATIONLIST(data?: Partial<SPWORDPRONUNCIATIONLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSPWORDPRONUNCIATIONLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSize !== undefined) view.setUint32(0, Number(data.ulSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvBuffer !== undefined) view.setBigUint64(8, data.pvBuffer === null ? 0n : BigInt(util.toPointer(data.pvBuffer)), true);
  // 0x10: pointer
  if (data?.pFirstWordPronunciation !== undefined) view.setBigUint64(16, data.pFirstWordPronunciation === null ? 0n : BigInt(util.toPointer(data.pFirstWordPronunciation)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPWORD (size: 32)
 */
export interface SPWORD {
  /** ptr */
  pNextWord: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  LangID: number;
  /** u16 */
  wReserved: number;
  /** Windows.Win32.Media.Speech.SPWORDTYPE */
  eWordType: SPWORDTYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pszWord: string | null;
  /** ptr */
  pFirstWordPronunciation: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPWORD = 32;

export function allocSPWORD(data?: Partial<SPWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofSPWORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pNextWord !== undefined) view.setBigUint64(0, data.pNextWord === null ? 0n : BigInt(util.toPointer(data.pNextWord)), true);
  // 0x08: u16
  if (data?.LangID !== undefined) view.setUint16(8, Number(data.LangID), true);
  // 0x0a: u16
  if (data?.wReserved !== undefined) view.setUint16(10, Number(data.wReserved), true);
  // 0x0c: i32
  if (data?.eWordType !== undefined) view.setInt32(12, Number(data.eWordType), true);
  // 0x10: buffer
  if (data?.pszWord !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszWord);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.pFirstWordPronunciation !== undefined) view.setBigUint64(24, data.pFirstWordPronunciation === null ? 0n : BigInt(util.toPointer(data.pFirstWordPronunciation)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPWORDLIST (size: 24)
 */
export interface SPWORDLIST {
  /** u32 */
  ulSize: number;
  /** ptr */
  pvBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFirstWord: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPWORDLIST = 24;

export function allocSPWORDLIST(data?: Partial<SPWORDLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSPWORDLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSize !== undefined) view.setUint32(0, Number(data.ulSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvBuffer !== undefined) view.setBigUint64(8, data.pvBuffer === null ? 0n : BigInt(util.toPointer(data.pvBuffer)), true);
  // 0x10: pointer
  if (data?.pFirstWord !== undefined) view.setBigUint64(16, data.pFirstWord === null ? 0n : BigInt(util.toPointer(data.pFirstWord)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSHORTCUTPAIR (size: 32)
 */
export interface SPSHORTCUTPAIR {
  /** ptr */
  pNextSHORTCUTPAIR: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  LangID: number;
  /** Windows.Win32.Media.Speech.SPSHORTCUTTYPE */
  shType: SPSHORTCUTTYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pszDisplay: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszSpoken: string | null;
}

export const sizeofSPSHORTCUTPAIR = 32;

export function allocSPSHORTCUTPAIR(data?: Partial<SPSHORTCUTPAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSHORTCUTPAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pNextSHORTCUTPAIR !== undefined) view.setBigUint64(0, data.pNextSHORTCUTPAIR === null ? 0n : BigInt(util.toPointer(data.pNextSHORTCUTPAIR)), true);
  // 0x08: u16
  if (data?.LangID !== undefined) view.setUint16(8, Number(data.LangID), true);
  // 0x0a: i32
  if (data?.shType !== undefined) view.setInt32(10, Number(data.shType), true);
  // 0x0e: pad2
  // 0x10: buffer
  if (data?.pszDisplay !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszDisplay);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszSpoken !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszSpoken);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSHORTCUTPAIRLIST (size: 24)
 */
export interface SPSHORTCUTPAIRLIST {
  /** u32 */
  ulSize: number;
  /** ptr */
  pvBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFirstShortcutPair: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPSHORTCUTPAIRLIST = 24;

export function allocSPSHORTCUTPAIRLIST(data?: Partial<SPSHORTCUTPAIRLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSHORTCUTPAIRLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSize !== undefined) view.setUint32(0, Number(data.ulSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvBuffer !== undefined) view.setBigUint64(8, data.pvBuffer === null ? 0n : BigInt(util.toPointer(data.pvBuffer)), true);
  // 0x10: pointer
  if (data?.pFirstShortcutPair !== undefined) view.setBigUint64(16, data.pFirstShortcutPair === null ? 0n : BigInt(util.toPointer(data.pFirstShortcutPair)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPVPITCH (size: 8)
 */
export interface SPVPITCH {
  /** i32 */
  MiddleAdj: number;
  /** i32 */
  RangeAdj: number;
}

export const sizeofSPVPITCH = 8;

export function allocSPVPITCH(data?: Partial<SPVPITCH>): Uint8Array {
  const buf = new Uint8Array(sizeofSPVPITCH);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MiddleAdj !== undefined) view.setInt32(0, Number(data.MiddleAdj), true);
  // 0x04: i32
  if (data?.RangeAdj !== undefined) view.setInt32(4, Number(data.RangeAdj), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPVCONTEXT (size: 24)
 */
export interface SPVCONTEXT {
  /** Windows.Win32.Foundation.PWSTR */
  pCategory: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pBefore: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pAfter: string | null;
}

export const sizeofSPVCONTEXT = 24;

export function allocSPVCONTEXT(data?: Partial<SPVCONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPVCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pCategory !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pCategory);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pBefore !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pBefore);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pAfter !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pAfter);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPVSTATE (size: 64)
 */
export interface SPVSTATE {
  /** Windows.Win32.Media.Speech.SPVACTIONS */
  eAction: SPVACTIONS;
  /** u16 */
  LangID: number;
  /** u16 */
  wReserved: number;
  /** i32 */
  EmphAdj: number;
  /** i32 */
  RateAdj: number;
  /** u32 */
  Volume: number;
  /** Windows.Win32.Media.Speech.SPVPITCH */
  PitchAdj: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SilenceMSecs: number;
  /** ptr */
  pPhoneIds: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Speech.SPPARTOFSPEECH */
  ePartOfSpeech: SPPARTOFSPEECH;
  /** Windows.Win32.Media.Speech.SPVCONTEXT */
  Context: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPVSTATE = 64;

export function allocSPVSTATE(data?: Partial<SPVSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPVSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eAction !== undefined) view.setInt32(0, Number(data.eAction), true);
  // 0x04: u16
  if (data?.LangID !== undefined) view.setUint16(4, Number(data.LangID), true);
  // 0x06: u16
  if (data?.wReserved !== undefined) view.setUint16(6, Number(data.wReserved), true);
  // 0x08: i32
  if (data?.EmphAdj !== undefined) view.setInt32(8, Number(data.EmphAdj), true);
  // 0x0c: i32
  if (data?.RateAdj !== undefined) view.setInt32(12, Number(data.RateAdj), true);
  // 0x10: u32
  if (data?.Volume !== undefined) view.setUint32(16, Number(data.Volume), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PitchAdj !== undefined) view.setBigUint64(24, data.PitchAdj === null ? 0n : BigInt(util.toPointer(data.PitchAdj)), true);
  // 0x20: u32
  if (data?.SilenceMSecs !== undefined) view.setUint32(32, Number(data.SilenceMSecs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pPhoneIds !== undefined) view.setBigUint64(40, data.pPhoneIds === null ? 0n : BigInt(util.toPointer(data.pPhoneIds)), true);
  // 0x30: i32
  if (data?.ePartOfSpeech !== undefined) view.setInt32(48, Number(data.ePartOfSpeech), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Context !== undefined) view.setBigUint64(56, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPVOICESTATUS (size: 56)
 */
export interface SPVOICESTATUS {
  /** u32 */
  ulCurrentStream: number;
  /** u32 */
  ulLastStreamQueued: number;
  /** Windows.Win32.Foundation.HRESULT */
  hrLastResult: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwRunningState: number;
  /** u32 */
  ulInputWordPos: number;
  /** u32 */
  ulInputWordLen: number;
  /** u32 */
  ulInputSentPos: number;
  /** u32 */
  ulInputSentLen: number;
  /** i32 */
  lBookmarkId: number;
  /** u16 */
  PhonemeId: number;
  /** Windows.Win32.Media.Speech.SPVISEMES */
  VisemeId: SPVISEMES;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofSPVOICESTATUS = 56;

export function allocSPVOICESTATUS(data?: Partial<SPVOICESTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSPVOICESTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCurrentStream !== undefined) view.setUint32(0, Number(data.ulCurrentStream), true);
  // 0x04: u32
  if (data?.ulLastStreamQueued !== undefined) view.setUint32(4, Number(data.ulLastStreamQueued), true);
  // 0x08: pointer
  if (data?.hrLastResult !== undefined) view.setBigUint64(8, data.hrLastResult === null ? 0n : BigInt(util.toPointer(data.hrLastResult)), true);
  // 0x10: u32
  if (data?.dwRunningState !== undefined) view.setUint32(16, Number(data.dwRunningState), true);
  // 0x14: u32
  if (data?.ulInputWordPos !== undefined) view.setUint32(20, Number(data.ulInputWordPos), true);
  // 0x18: u32
  if (data?.ulInputWordLen !== undefined) view.setUint32(24, Number(data.ulInputWordLen), true);
  // 0x1c: u32
  if (data?.ulInputSentPos !== undefined) view.setUint32(28, Number(data.ulInputSentPos), true);
  // 0x20: u32
  if (data?.ulInputSentLen !== undefined) view.setUint32(32, Number(data.ulInputSentLen), true);
  // 0x24: i32
  if (data?.lBookmarkId !== undefined) view.setInt32(36, Number(data.lBookmarkId), true);
  // 0x28: u16
  if (data?.PhonemeId !== undefined) view.setUint16(40, Number(data.PhonemeId), true);
  // 0x2a: i32
  if (data?.VisemeId !== undefined) view.setInt32(42, Number(data.VisemeId), true);
  // 0x2e: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(46, Number(data.dwReserved1), true);
  // 0x32: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(50, Number(data.dwReserved2), true);
  // 0x36: pad2
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPRECORESULTTIMES (size: 32)
 */
export interface SPRECORESULTTIMES {
  /** Windows.Win32.Foundation.FILETIME */
  ftStreamTime: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullLength: Deno.PointerValue;
  /** u32 */
  dwTickCount: number;
  /** u64 */
  ullStart: Deno.PointerValue;
}

export const sizeofSPRECORESULTTIMES = 32;

export function allocSPRECORESULTTIMES(data?: Partial<SPRECORESULTTIMES>): Uint8Array {
  const buf = new Uint8Array(sizeofSPRECORESULTTIMES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ftStreamTime !== undefined) view.setBigUint64(0, data.ftStreamTime === null ? 0n : BigInt(util.toPointer(data.ftStreamTime)), true);
  // 0x08: u64
  if (data?.ullLength !== undefined) view.setBigUint64(8, BigInt(data.ullLength), true);
  // 0x10: u32
  if (data?.dwTickCount !== undefined) view.setUint32(16, Number(data.dwTickCount), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.ullStart !== undefined) view.setBigUint64(24, BigInt(data.ullStart), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSERIALIZEDRESULT (size: 8)
 */
export interface SPSERIALIZEDRESULT {
  /** u32 */
  ulSerializedSize: number;
}

export const sizeofSPSERIALIZEDRESULT = 8;

export function allocSPSERIALIZEDRESULT(data?: Partial<SPSERIALIZEDRESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSERIALIZEDRESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSerializedSize !== undefined) view.setUint32(0, Number(data.ulSerializedSize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPTEXTSELECTIONINFO (size: 16)
 */
export interface SPTEXTSELECTIONINFO {
  /** u32 */
  ulStartActiveOffset: number;
  /** u32 */
  cchActiveChars: number;
  /** u32 */
  ulStartSelection: number;
  /** u32 */
  cchSelection: number;
}

export const sizeofSPTEXTSELECTIONINFO = 16;

export function allocSPTEXTSELECTIONINFO(data?: Partial<SPTEXTSELECTIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPTEXTSELECTIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulStartActiveOffset !== undefined) view.setUint32(0, Number(data.ulStartActiveOffset), true);
  // 0x04: u32
  if (data?.cchActiveChars !== undefined) view.setUint32(4, Number(data.cchActiveChars), true);
  // 0x08: u32
  if (data?.ulStartSelection !== undefined) view.setUint32(8, Number(data.ulStartSelection), true);
  // 0x0c: u32
  if (data?.cchSelection !== undefined) view.setUint32(12, Number(data.cchSelection), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPROPERTYINFO (size: 32)
 */
export interface SPPROPERTYINFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** u32 */
  ulId: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszValue: string | null;
  /** Windows.Win32.System.Com.VARIANT */
  vValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPPROPERTYINFO = 32;

export function allocSPPROPERTYINFO(data?: Partial<SPPROPERTYINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPROPERTYINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.ulId !== undefined) view.setUint32(8, Number(data.ulId), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszValue !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszValue);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.vValue !== undefined) view.setBigUint64(24, data.vValue === null ? 0n : BigInt(util.toPointer(data.vValue)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPRECOCONTEXTSTATUS (size: 24)
 */
export interface SPRECOCONTEXTSTATUS {
  /** Windows.Win32.Media.Speech.SPINTERFERENCE */
  eInterference: SPINTERFERENCE;
  /** array */
  szRequestTypeOfUI: Deno.PointerValue | null;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofSPRECOCONTEXTSTATUS = 24;

export function allocSPRECOCONTEXTSTATUS(data?: Partial<SPRECOCONTEXTSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSPRECOCONTEXTSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eInterference !== undefined) view.setInt32(0, Number(data.eInterference), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szRequestTypeOfUI !== undefined) view.setBigUint64(8, data.szRequestTypeOfUI === null ? 0n : BigInt(util.toPointer(data.szRequestTypeOfUI)), true);
  // 0x10: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(16, Number(data.dwReserved1), true);
  // 0x14: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(20, Number(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPRECOGNIZERSTATUS (size: 56)
 */
export interface SPRECOGNIZERSTATUS {
  /** Windows.Win32.Media.Speech.SPAUDIOSTATUS */
  AudioStatus: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullRecognitionStreamPos: Deno.PointerValue;
  /** u32 */
  ulStreamNumber: number;
  /** u32 */
  ulNumActive: number;
  /** System.Guid */
  clsidEngine: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cLangIDs: number;
  /** array */
  aLangID: Deno.PointerValue | null;
  /** u64 */
  ullRecognitionStreamTime: Deno.PointerValue;
}

export const sizeofSPRECOGNIZERSTATUS = 56;

export function allocSPRECOGNIZERSTATUS(data?: Partial<SPRECOGNIZERSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSPRECOGNIZERSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AudioStatus !== undefined) view.setBigUint64(0, data.AudioStatus === null ? 0n : BigInt(util.toPointer(data.AudioStatus)), true);
  // 0x08: u64
  if (data?.ullRecognitionStreamPos !== undefined) view.setBigUint64(8, BigInt(data.ullRecognitionStreamPos), true);
  // 0x10: u32
  if (data?.ulStreamNumber !== undefined) view.setUint32(16, Number(data.ulStreamNumber), true);
  // 0x14: u32
  if (data?.ulNumActive !== undefined) view.setUint32(20, Number(data.ulNumActive), true);
  // 0x18: pointer
  if (data?.clsidEngine !== undefined) view.setBigUint64(24, data.clsidEngine === null ? 0n : BigInt(util.toPointer(data.clsidEngine)), true);
  // 0x20: u32
  if (data?.cLangIDs !== undefined) view.setUint32(32, Number(data.cLangIDs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.aLangID !== undefined) view.setBigUint64(40, data.aLangID === null ? 0n : BigInt(util.toPointer(data.aLangID)), true);
  // 0x30: u64
  if (data?.ullRecognitionStreamTime !== undefined) view.setBigUint64(48, BigInt(data.ullRecognitionStreamTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPNORMALIZATIONLIST (size: 16)
 */
export interface SPNORMALIZATIONLIST {
  /** u32 */
  ulSize: number;
  /** ptr */
  ppszzNormalizedList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPNORMALIZATIONLIST = 16;

export function allocSPNORMALIZATIONLIST(data?: Partial<SPNORMALIZATIONLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSPNORMALIZATIONLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSize !== undefined) view.setUint32(0, Number(data.ulSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ppszzNormalizedList !== undefined) view.setBigUint64(8, data.ppszzNormalizedList === null ? 0n : BigInt(util.toPointer(data.ppszzNormalizedList)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPDISPLAYTOKEN (size: 24)
 */
export interface SPDISPLAYTOKEN {
  /** Windows.Win32.Foundation.PWSTR */
  pszLexical: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDisplay: string | null;
  /** u8 */
  bDisplayAttributes: number;
}

export const sizeofSPDISPLAYTOKEN = 24;

export function allocSPDISPLAYTOKEN(data?: Partial<SPDISPLAYTOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofSPDISPLAYTOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszLexical !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszLexical);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszDisplay !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDisplay);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u8
  if (data?.bDisplayAttributes !== undefined) view.setUint8(16, Number(data.bDisplayAttributes));
  // 0x11: pad7
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPDISPLAYPHRASE (size: 16)
 */
export interface SPDISPLAYPHRASE {
  /** u32 */
  ulNumTokens: number;
  /** ptr */
  pTokens: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPDISPLAYPHRASE = 16;

export function allocSPDISPLAYPHRASE(data?: Partial<SPDISPLAYPHRASE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPDISPLAYPHRASE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulNumTokens !== undefined) view.setUint32(0, Number(data.ulNumTokens), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pTokens !== undefined) view.setBigUint64(8, data.pTokens === null ? 0n : BigInt(util.toPointer(data.pTokens)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.MACINFO (size: 16)
 */
export interface MACINFO {
  /** Windows.Win32.Foundation.BOOL */
  fUsed: boolean;
  /** array */
  abMacState: Deno.PointerValue | null;
}

export const sizeofMACINFO = 16;

export function allocMACINFO(data?: Partial<MACINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMACINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fUsed !== undefined) view.setInt32(0, Number(data.fUsed), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.abMacState !== undefined) view.setBigUint64(8, data.abMacState === null ? 0n : BigInt(util.toPointer(data.abMacState)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMFILECAPABILITIES (size: 16)
 */
export interface WMFILECAPABILITIES {
  /** Windows.Win32.Foundation.PWSTR */
  pwszMimeType: string | null;
  /** u32 */
  dwReserved: number;
}

export const sizeofWMFILECAPABILITIES = 16;

export function allocWMFILECAPABILITIES(data?: Partial<WMFILECAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWMFILECAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszMimeType !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszMimeType);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwReserved !== undefined) view.setUint32(8, Number(data.dwReserved), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.OPAQUECOMMAND (size: 32)
 */
export interface OPAQUECOMMAND {
  /** System.Guid */
  guidCommand: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDataLen: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** array */
  abMAC: Deno.PointerValue | null;
}

export const sizeofOPAQUECOMMAND = 32;

export function allocOPAQUECOMMAND(data?: Partial<OPAQUECOMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofOPAQUECOMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidCommand !== undefined) view.setBigUint64(0, data.guidCommand === null ? 0n : BigInt(util.toPointer(data.guidCommand)), true);
  // 0x08: u32
  if (data?.dwDataLen !== undefined) view.setUint32(8, Number(data.dwDataLen), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pData !== undefined) view.setBigUint64(16, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x18: pointer
  if (data?.abMAC !== undefined) view.setBigUint64(24, data.abMAC === null ? 0n : BigInt(util.toPointer(data.abMAC)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDMID (size: 24)
 */
export interface WMDMID {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwVendorID: number;
  /** array */
  pID: Deno.PointerValue | null;
  /** u32 */
  SerialNumberLength: number;
}

export const sizeofWMDMID = 24;

export function allocWMDMID(data?: Partial<WMDMID>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDMID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwVendorID !== undefined) view.setUint32(4, Number(data.dwVendorID), true);
  // 0x08: pointer
  if (data?.pID !== undefined) view.setBigUint64(8, data.pID === null ? 0n : BigInt(util.toPointer(data.pID)), true);
  // 0x10: u32
  if (data?.SerialNumberLength !== undefined) view.setUint32(16, Number(data.SerialNumberLength), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDMDATETIME (size: 16)
 */
export interface WMDMDATETIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
}

export const sizeofWMDMDATETIME = 16;

export function allocWMDMDATETIME(data?: Partial<WMDMDATETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDMDATETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDay !== undefined) view.setUint16(4, Number(data.wDay), true);
  // 0x06: u16
  if (data?.wHour !== undefined) view.setUint16(6, Number(data.wHour), true);
  // 0x08: u16
  if (data?.wMinute !== undefined) view.setUint16(8, Number(data.wMinute), true);
  // 0x0a: u16
  if (data?.wSecond !== undefined) view.setUint16(10, Number(data.wSecond), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDMRIGHTS (size: 32)
 */
export interface WMDMRIGHTS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwContentType: number;
  /** u32 */
  fuFlags: number;
  /** u32 */
  fuRights: number;
  /** u32 */
  dwAppSec: number;
  /** u32 */
  dwPlaybackCount: number;
  /** Windows.Win32.Media.DeviceManager.WMDMDATETIME */
  ExpirationDate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMDMRIGHTS = 32;

export function allocWMDMRIGHTS(data?: Partial<WMDMRIGHTS>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDMRIGHTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwContentType !== undefined) view.setUint32(4, Number(data.dwContentType), true);
  // 0x08: u32
  if (data?.fuFlags !== undefined) view.setUint32(8, Number(data.fuFlags), true);
  // 0x0c: u32
  if (data?.fuRights !== undefined) view.setUint32(12, Number(data.fuRights), true);
  // 0x10: u32
  if (data?.dwAppSec !== undefined) view.setUint32(16, Number(data.dwAppSec), true);
  // 0x14: u32
  if (data?.dwPlaybackCount !== undefined) view.setUint32(20, Number(data.dwPlaybackCount), true);
  // 0x18: pointer
  if (data?.ExpirationDate !== undefined) view.setBigUint64(24, data.ExpirationDate === null ? 0n : BigInt(util.toPointer(data.ExpirationDate)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDMMetadataView (size: 24)
 */
export interface WMDMMetadataView {
  /** Windows.Win32.Foundation.PWSTR */
  pwszViewName: string | null;
  /** u32 */
  nDepth: number;
  /** ptr */
  ppwszTags: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMDMMetadataView = 24;

export function allocWMDMMetadataView(data?: Partial<WMDMMetadataView>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDMMetadataView);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszViewName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszViewName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.nDepth !== undefined) view.setUint32(8, Number(data.nDepth), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ppwszTags !== undefined) view.setBigUint64(16, data.ppwszTags === null ? 0n : BigInt(util.toPointer(data.ppwszTags)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPVARIANT (size: 8)
 */
export interface PROPVARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROPVARIANT = 8;

export function allocPROPVARIANT(data?: Partial<PROPVARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDM_PROP_VALUES_RANGE (size: 24)
 */
export interface WMDM_PROP_VALUES_RANGE {
  /** Windows.Win32.System.Com.StructuredStorage.PROPVARIANT */
  rangeMin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.StructuredStorage.PROPVARIANT */
  rangeMax: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.StructuredStorage.PROPVARIANT */
  rangeStep: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMDM_PROP_VALUES_RANGE = 24;

export function allocWMDM_PROP_VALUES_RANGE(data?: Partial<WMDM_PROP_VALUES_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDM_PROP_VALUES_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rangeMin !== undefined) view.setBigUint64(0, data.rangeMin === null ? 0n : BigInt(util.toPointer(data.rangeMin)), true);
  // 0x08: pointer
  if (data?.rangeMax !== undefined) view.setBigUint64(8, data.rangeMax === null ? 0n : BigInt(util.toPointer(data.rangeMax)), true);
  // 0x10: pointer
  if (data?.rangeStep !== undefined) view.setBigUint64(16, data.rangeStep === null ? 0n : BigInt(util.toPointer(data.rangeStep)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDM_PROP_VALUES_ENUM (size: 16)
 */
export interface WMDM_PROP_VALUES_ENUM {
  /** u32 */
  cEnumValues: number;
  /** ptr */
  pValues: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMDM_PROP_VALUES_ENUM = 16;

export function allocWMDM_PROP_VALUES_ENUM(data?: Partial<WMDM_PROP_VALUES_ENUM>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDM_PROP_VALUES_ENUM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEnumValues !== undefined) view.setUint32(0, Number(data.cEnumValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pValues !== undefined) view.setBigUint64(8, data.pValues === null ? 0n : BigInt(util.toPointer(data.pValues)), true);
  return buf;
}

/**
 * _ValidValues_e__Union (size: 16)
 */
export interface _ValidValues_e__Union {
  /** Windows.Win32.Media.DeviceManager.WMDM_PROP_VALUES_RANGE */
  ValidValuesRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DeviceManager.WMDM_PROP_VALUES_ENUM */
  EnumeratedValidValues: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_ValidValues_e__Union = 16;

export function alloc_ValidValues_e__Union(data?: Partial<_ValidValues_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_ValidValues_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ValidValuesRange !== undefined) view.setBigUint64(0, data.ValidValuesRange === null ? 0n : BigInt(util.toPointer(data.ValidValuesRange)), true);
  // 0x08: pointer
  if (data?.EnumeratedValidValues !== undefined) view.setBigUint64(8, data.EnumeratedValidValues === null ? 0n : BigInt(util.toPointer(data.EnumeratedValidValues)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDM_PROP_DESC (size: 24)
 */
export interface WMDM_PROP_DESC {
  /** Windows.Win32.Foundation.PWSTR */
  pwszPropName: string | null;
  /** Windows.Win32.Media.DeviceManager.WMDM_ENUM_PROP_VALID_VALUES_FORM */
  ValidValuesForm: WMDM_ENUM_PROP_VALID_VALUES_FORM;
  /** _ValidValues_e__Union */
  ValidValues: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMDM_PROP_DESC = 24;

export function allocWMDM_PROP_DESC(data?: Partial<WMDM_PROP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDM_PROP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszPropName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszPropName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.ValidValuesForm !== undefined) view.setInt32(8, Number(data.ValidValuesForm), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ValidValues !== undefined) view.setBigUint64(16, data.ValidValues === null ? 0n : BigInt(util.toPointer(data.ValidValues)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDM_PROP_CONFIG (size: 16)
 */
export interface WMDM_PROP_CONFIG {
  /** u32 */
  nPreference: number;
  /** u32 */
  nPropDesc: number;
  /** ptr */
  pPropDesc: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMDM_PROP_CONFIG = 16;

export function allocWMDM_PROP_CONFIG(data?: Partial<WMDM_PROP_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDM_PROP_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nPreference !== undefined) view.setUint32(0, Number(data.nPreference), true);
  // 0x04: u32
  if (data?.nPropDesc !== undefined) view.setUint32(4, Number(data.nPropDesc), true);
  // 0x08: pointer
  if (data?.pPropDesc !== undefined) view.setBigUint64(8, data.pPropDesc === null ? 0n : BigInt(util.toPointer(data.pPropDesc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDM_FORMAT_CAPABILITY (size: 16)
 */
export interface WMDM_FORMAT_CAPABILITY {
  /** u32 */
  nPropConfig: number;
  /** ptr */
  pConfigs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMDM_FORMAT_CAPABILITY = 16;

export function allocWMDM_FORMAT_CAPABILITY(data?: Partial<WMDM_FORMAT_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDM_FORMAT_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nPropConfig !== undefined) view.setUint32(0, Number(data.nPropConfig), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pConfigs !== undefined) view.setBigUint64(8, data.pConfigs === null ? 0n : BigInt(util.toPointer(data.pConfigs)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDMDetermineMaxPropStringLen (size: 656)
 */
export interface WMDMDetermineMaxPropStringLen {
  /** array */
  sz001: Deno.PointerValue | null;
  /** array */
  sz002: Deno.PointerValue | null;
  /** array */
  sz003: Deno.PointerValue | null;
  /** array */
  sz004: Deno.PointerValue | null;
  /** array */
  sz005: Deno.PointerValue | null;
  /** array */
  sz006: Deno.PointerValue | null;
  /** array */
  sz007: Deno.PointerValue | null;
  /** array */
  sz008: Deno.PointerValue | null;
  /** array */
  sz009: Deno.PointerValue | null;
  /** array */
  sz010: Deno.PointerValue | null;
  /** array */
  sz011: Deno.PointerValue | null;
  /** array */
  sz012: Deno.PointerValue | null;
  /** array */
  sz013: Deno.PointerValue | null;
  /** array */
  sz014: Deno.PointerValue | null;
  /** array */
  sz015: Deno.PointerValue | null;
  /** array */
  sz016: Deno.PointerValue | null;
  /** array */
  sz017: Deno.PointerValue | null;
  /** array */
  sz018: Deno.PointerValue | null;
  /** array */
  sz019: Deno.PointerValue | null;
  /** array */
  sz020: Deno.PointerValue | null;
  /** array */
  sz021: Deno.PointerValue | null;
  /** array */
  sz022: Deno.PointerValue | null;
  /** array */
  sz023: Deno.PointerValue | null;
  /** array */
  sz024: Deno.PointerValue | null;
  /** array */
  sz025: Deno.PointerValue | null;
  /** array */
  sz026: Deno.PointerValue | null;
  /** array */
  sz027: Deno.PointerValue | null;
  /** array */
  sz028: Deno.PointerValue | null;
  /** array */
  sz029: Deno.PointerValue | null;
  /** array */
  sz030: Deno.PointerValue | null;
  /** array */
  sz031: Deno.PointerValue | null;
  /** array */
  sz032: Deno.PointerValue | null;
  /** array */
  sz033: Deno.PointerValue | null;
  /** array */
  sz034: Deno.PointerValue | null;
  /** array */
  sz035: Deno.PointerValue | null;
  /** array */
  sz036: Deno.PointerValue | null;
  /** array */
  sz037: Deno.PointerValue | null;
  /** array */
  sz041: Deno.PointerValue | null;
  /** array */
  sz043: Deno.PointerValue | null;
  /** array */
  sz044: Deno.PointerValue | null;
  /** array */
  sz045: Deno.PointerValue | null;
  /** array */
  sz046: Deno.PointerValue | null;
  /** array */
  sz047: Deno.PointerValue | null;
  /** array */
  sz048: Deno.PointerValue | null;
  /** array */
  sz049: Deno.PointerValue | null;
  /** array */
  sz050: Deno.PointerValue | null;
  /** array */
  sz051: Deno.PointerValue | null;
  /** array */
  sz052: Deno.PointerValue | null;
  /** array */
  sz053: Deno.PointerValue | null;
  /** array */
  sz054: Deno.PointerValue | null;
  /** array */
  sz055: Deno.PointerValue | null;
  /** array */
  sz056: Deno.PointerValue | null;
  /** array */
  sz057: Deno.PointerValue | null;
  /** array */
  sz058: Deno.PointerValue | null;
  /** array */
  sz059: Deno.PointerValue | null;
  /** array */
  sz060: Deno.PointerValue | null;
  /** array */
  sz061: Deno.PointerValue | null;
  /** array */
  sz062: Deno.PointerValue | null;
  /** array */
  sz063: Deno.PointerValue | null;
  /** array */
  sz064: Deno.PointerValue | null;
  /** array */
  sz065: Deno.PointerValue | null;
  /** array */
  sz066: Deno.PointerValue | null;
  /** array */
  sz067: Deno.PointerValue | null;
  /** array */
  sz068: Deno.PointerValue | null;
  /** array */
  sz069: Deno.PointerValue | null;
  /** array */
  sz070: Deno.PointerValue | null;
  /** array */
  sz071: Deno.PointerValue | null;
  /** array */
  sz072: Deno.PointerValue | null;
  /** array */
  sz073: Deno.PointerValue | null;
  /** array */
  sz074: Deno.PointerValue | null;
  /** array */
  sz075: Deno.PointerValue | null;
  /** array */
  sz076: Deno.PointerValue | null;
  /** array */
  sz077: Deno.PointerValue | null;
  /** array */
  sz078: Deno.PointerValue | null;
  /** array */
  sz079: Deno.PointerValue | null;
  /** array */
  sz080: Deno.PointerValue | null;
  /** array */
  sz081: Deno.PointerValue | null;
  /** array */
  sz082: Deno.PointerValue | null;
  /** array */
  sz083: Deno.PointerValue | null;
  /** array */
  sz084: Deno.PointerValue | null;
  /** array */
  sz085: Deno.PointerValue | null;
  /** array */
  sz086: Deno.PointerValue | null;
}

export const sizeofWMDMDetermineMaxPropStringLen = 656;

export function allocWMDMDetermineMaxPropStringLen(data?: Partial<WMDMDetermineMaxPropStringLen>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDMDetermineMaxPropStringLen);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sz001 !== undefined) view.setBigUint64(0, data.sz001 === null ? 0n : BigInt(util.toPointer(data.sz001)), true);
  // 0x08: pointer
  if (data?.sz002 !== undefined) view.setBigUint64(8, data.sz002 === null ? 0n : BigInt(util.toPointer(data.sz002)), true);
  // 0x10: pointer
  if (data?.sz003 !== undefined) view.setBigUint64(16, data.sz003 === null ? 0n : BigInt(util.toPointer(data.sz003)), true);
  // 0x18: pointer
  if (data?.sz004 !== undefined) view.setBigUint64(24, data.sz004 === null ? 0n : BigInt(util.toPointer(data.sz004)), true);
  // 0x20: pointer
  if (data?.sz005 !== undefined) view.setBigUint64(32, data.sz005 === null ? 0n : BigInt(util.toPointer(data.sz005)), true);
  // 0x28: pointer
  if (data?.sz006 !== undefined) view.setBigUint64(40, data.sz006 === null ? 0n : BigInt(util.toPointer(data.sz006)), true);
  // 0x30: pointer
  if (data?.sz007 !== undefined) view.setBigUint64(48, data.sz007 === null ? 0n : BigInt(util.toPointer(data.sz007)), true);
  // 0x38: pointer
  if (data?.sz008 !== undefined) view.setBigUint64(56, data.sz008 === null ? 0n : BigInt(util.toPointer(data.sz008)), true);
  // 0x40: pointer
  if (data?.sz009 !== undefined) view.setBigUint64(64, data.sz009 === null ? 0n : BigInt(util.toPointer(data.sz009)), true);
  // 0x48: pointer
  if (data?.sz010 !== undefined) view.setBigUint64(72, data.sz010 === null ? 0n : BigInt(util.toPointer(data.sz010)), true);
  // 0x50: pointer
  if (data?.sz011 !== undefined) view.setBigUint64(80, data.sz011 === null ? 0n : BigInt(util.toPointer(data.sz011)), true);
  // 0x58: pointer
  if (data?.sz012 !== undefined) view.setBigUint64(88, data.sz012 === null ? 0n : BigInt(util.toPointer(data.sz012)), true);
  // 0x60: pointer
  if (data?.sz013 !== undefined) view.setBigUint64(96, data.sz013 === null ? 0n : BigInt(util.toPointer(data.sz013)), true);
  // 0x68: pointer
  if (data?.sz014 !== undefined) view.setBigUint64(104, data.sz014 === null ? 0n : BigInt(util.toPointer(data.sz014)), true);
  // 0x70: pointer
  if (data?.sz015 !== undefined) view.setBigUint64(112, data.sz015 === null ? 0n : BigInt(util.toPointer(data.sz015)), true);
  // 0x78: pointer
  if (data?.sz016 !== undefined) view.setBigUint64(120, data.sz016 === null ? 0n : BigInt(util.toPointer(data.sz016)), true);
  // 0x80: pointer
  if (data?.sz017 !== undefined) view.setBigUint64(128, data.sz017 === null ? 0n : BigInt(util.toPointer(data.sz017)), true);
  // 0x88: pointer
  if (data?.sz018 !== undefined) view.setBigUint64(136, data.sz018 === null ? 0n : BigInt(util.toPointer(data.sz018)), true);
  // 0x90: pointer
  if (data?.sz019 !== undefined) view.setBigUint64(144, data.sz019 === null ? 0n : BigInt(util.toPointer(data.sz019)), true);
  // 0x98: pointer
  if (data?.sz020 !== undefined) view.setBigUint64(152, data.sz020 === null ? 0n : BigInt(util.toPointer(data.sz020)), true);
  // 0xa0: pointer
  if (data?.sz021 !== undefined) view.setBigUint64(160, data.sz021 === null ? 0n : BigInt(util.toPointer(data.sz021)), true);
  // 0xa8: pointer
  if (data?.sz022 !== undefined) view.setBigUint64(168, data.sz022 === null ? 0n : BigInt(util.toPointer(data.sz022)), true);
  // 0xb0: pointer
  if (data?.sz023 !== undefined) view.setBigUint64(176, data.sz023 === null ? 0n : BigInt(util.toPointer(data.sz023)), true);
  // 0xb8: pointer
  if (data?.sz024 !== undefined) view.setBigUint64(184, data.sz024 === null ? 0n : BigInt(util.toPointer(data.sz024)), true);
  // 0xc0: pointer
  if (data?.sz025 !== undefined) view.setBigUint64(192, data.sz025 === null ? 0n : BigInt(util.toPointer(data.sz025)), true);
  // 0xc8: pointer
  if (data?.sz026 !== undefined) view.setBigUint64(200, data.sz026 === null ? 0n : BigInt(util.toPointer(data.sz026)), true);
  // 0xd0: pointer
  if (data?.sz027 !== undefined) view.setBigUint64(208, data.sz027 === null ? 0n : BigInt(util.toPointer(data.sz027)), true);
  // 0xd8: pointer
  if (data?.sz028 !== undefined) view.setBigUint64(216, data.sz028 === null ? 0n : BigInt(util.toPointer(data.sz028)), true);
  // 0xe0: pointer
  if (data?.sz029 !== undefined) view.setBigUint64(224, data.sz029 === null ? 0n : BigInt(util.toPointer(data.sz029)), true);
  // 0xe8: pointer
  if (data?.sz030 !== undefined) view.setBigUint64(232, data.sz030 === null ? 0n : BigInt(util.toPointer(data.sz030)), true);
  // 0xf0: pointer
  if (data?.sz031 !== undefined) view.setBigUint64(240, data.sz031 === null ? 0n : BigInt(util.toPointer(data.sz031)), true);
  // 0xf8: pointer
  if (data?.sz032 !== undefined) view.setBigUint64(248, data.sz032 === null ? 0n : BigInt(util.toPointer(data.sz032)), true);
  // 0x100: pointer
  if (data?.sz033 !== undefined) view.setBigUint64(256, data.sz033 === null ? 0n : BigInt(util.toPointer(data.sz033)), true);
  // 0x108: pointer
  if (data?.sz034 !== undefined) view.setBigUint64(264, data.sz034 === null ? 0n : BigInt(util.toPointer(data.sz034)), true);
  // 0x110: pointer
  if (data?.sz035 !== undefined) view.setBigUint64(272, data.sz035 === null ? 0n : BigInt(util.toPointer(data.sz035)), true);
  // 0x118: pointer
  if (data?.sz036 !== undefined) view.setBigUint64(280, data.sz036 === null ? 0n : BigInt(util.toPointer(data.sz036)), true);
  // 0x120: pointer
  if (data?.sz037 !== undefined) view.setBigUint64(288, data.sz037 === null ? 0n : BigInt(util.toPointer(data.sz037)), true);
  // 0x128: pointer
  if (data?.sz041 !== undefined) view.setBigUint64(296, data.sz041 === null ? 0n : BigInt(util.toPointer(data.sz041)), true);
  // 0x130: pointer
  if (data?.sz043 !== undefined) view.setBigUint64(304, data.sz043 === null ? 0n : BigInt(util.toPointer(data.sz043)), true);
  // 0x138: pointer
  if (data?.sz044 !== undefined) view.setBigUint64(312, data.sz044 === null ? 0n : BigInt(util.toPointer(data.sz044)), true);
  // 0x140: pointer
  if (data?.sz045 !== undefined) view.setBigUint64(320, data.sz045 === null ? 0n : BigInt(util.toPointer(data.sz045)), true);
  // 0x148: pointer
  if (data?.sz046 !== undefined) view.setBigUint64(328, data.sz046 === null ? 0n : BigInt(util.toPointer(data.sz046)), true);
  // 0x150: pointer
  if (data?.sz047 !== undefined) view.setBigUint64(336, data.sz047 === null ? 0n : BigInt(util.toPointer(data.sz047)), true);
  // 0x158: pointer
  if (data?.sz048 !== undefined) view.setBigUint64(344, data.sz048 === null ? 0n : BigInt(util.toPointer(data.sz048)), true);
  // 0x160: pointer
  if (data?.sz049 !== undefined) view.setBigUint64(352, data.sz049 === null ? 0n : BigInt(util.toPointer(data.sz049)), true);
  // 0x168: pointer
  if (data?.sz050 !== undefined) view.setBigUint64(360, data.sz050 === null ? 0n : BigInt(util.toPointer(data.sz050)), true);
  // 0x170: pointer
  if (data?.sz051 !== undefined) view.setBigUint64(368, data.sz051 === null ? 0n : BigInt(util.toPointer(data.sz051)), true);
  // 0x178: pointer
  if (data?.sz052 !== undefined) view.setBigUint64(376, data.sz052 === null ? 0n : BigInt(util.toPointer(data.sz052)), true);
  // 0x180: pointer
  if (data?.sz053 !== undefined) view.setBigUint64(384, data.sz053 === null ? 0n : BigInt(util.toPointer(data.sz053)), true);
  // 0x188: pointer
  if (data?.sz054 !== undefined) view.setBigUint64(392, data.sz054 === null ? 0n : BigInt(util.toPointer(data.sz054)), true);
  // 0x190: pointer
  if (data?.sz055 !== undefined) view.setBigUint64(400, data.sz055 === null ? 0n : BigInt(util.toPointer(data.sz055)), true);
  // 0x198: pointer
  if (data?.sz056 !== undefined) view.setBigUint64(408, data.sz056 === null ? 0n : BigInt(util.toPointer(data.sz056)), true);
  // 0x1a0: pointer
  if (data?.sz057 !== undefined) view.setBigUint64(416, data.sz057 === null ? 0n : BigInt(util.toPointer(data.sz057)), true);
  // 0x1a8: pointer
  if (data?.sz058 !== undefined) view.setBigUint64(424, data.sz058 === null ? 0n : BigInt(util.toPointer(data.sz058)), true);
  // 0x1b0: pointer
  if (data?.sz059 !== undefined) view.setBigUint64(432, data.sz059 === null ? 0n : BigInt(util.toPointer(data.sz059)), true);
  // 0x1b8: pointer
  if (data?.sz060 !== undefined) view.setBigUint64(440, data.sz060 === null ? 0n : BigInt(util.toPointer(data.sz060)), true);
  // 0x1c0: pointer
  if (data?.sz061 !== undefined) view.setBigUint64(448, data.sz061 === null ? 0n : BigInt(util.toPointer(data.sz061)), true);
  // 0x1c8: pointer
  if (data?.sz062 !== undefined) view.setBigUint64(456, data.sz062 === null ? 0n : BigInt(util.toPointer(data.sz062)), true);
  // 0x1d0: pointer
  if (data?.sz063 !== undefined) view.setBigUint64(464, data.sz063 === null ? 0n : BigInt(util.toPointer(data.sz063)), true);
  // 0x1d8: pointer
  if (data?.sz064 !== undefined) view.setBigUint64(472, data.sz064 === null ? 0n : BigInt(util.toPointer(data.sz064)), true);
  // 0x1e0: pointer
  if (data?.sz065 !== undefined) view.setBigUint64(480, data.sz065 === null ? 0n : BigInt(util.toPointer(data.sz065)), true);
  // 0x1e8: pointer
  if (data?.sz066 !== undefined) view.setBigUint64(488, data.sz066 === null ? 0n : BigInt(util.toPointer(data.sz066)), true);
  // 0x1f0: pointer
  if (data?.sz067 !== undefined) view.setBigUint64(496, data.sz067 === null ? 0n : BigInt(util.toPointer(data.sz067)), true);
  // 0x1f8: pointer
  if (data?.sz068 !== undefined) view.setBigUint64(504, data.sz068 === null ? 0n : BigInt(util.toPointer(data.sz068)), true);
  // 0x200: pointer
  if (data?.sz069 !== undefined) view.setBigUint64(512, data.sz069 === null ? 0n : BigInt(util.toPointer(data.sz069)), true);
  // 0x208: pointer
  if (data?.sz070 !== undefined) view.setBigUint64(520, data.sz070 === null ? 0n : BigInt(util.toPointer(data.sz070)), true);
  // 0x210: pointer
  if (data?.sz071 !== undefined) view.setBigUint64(528, data.sz071 === null ? 0n : BigInt(util.toPointer(data.sz071)), true);
  // 0x218: pointer
  if (data?.sz072 !== undefined) view.setBigUint64(536, data.sz072 === null ? 0n : BigInt(util.toPointer(data.sz072)), true);
  // 0x220: pointer
  if (data?.sz073 !== undefined) view.setBigUint64(544, data.sz073 === null ? 0n : BigInt(util.toPointer(data.sz073)), true);
  // 0x228: pointer
  if (data?.sz074 !== undefined) view.setBigUint64(552, data.sz074 === null ? 0n : BigInt(util.toPointer(data.sz074)), true);
  // 0x230: pointer
  if (data?.sz075 !== undefined) view.setBigUint64(560, data.sz075 === null ? 0n : BigInt(util.toPointer(data.sz075)), true);
  // 0x238: pointer
  if (data?.sz076 !== undefined) view.setBigUint64(568, data.sz076 === null ? 0n : BigInt(util.toPointer(data.sz076)), true);
  // 0x240: pointer
  if (data?.sz077 !== undefined) view.setBigUint64(576, data.sz077 === null ? 0n : BigInt(util.toPointer(data.sz077)), true);
  // 0x248: pointer
  if (data?.sz078 !== undefined) view.setBigUint64(584, data.sz078 === null ? 0n : BigInt(util.toPointer(data.sz078)), true);
  // 0x250: pointer
  if (data?.sz079 !== undefined) view.setBigUint64(592, data.sz079 === null ? 0n : BigInt(util.toPointer(data.sz079)), true);
  // 0x258: pointer
  if (data?.sz080 !== undefined) view.setBigUint64(600, data.sz080 === null ? 0n : BigInt(util.toPointer(data.sz080)), true);
  // 0x260: pointer
  if (data?.sz081 !== undefined) view.setBigUint64(608, data.sz081 === null ? 0n : BigInt(util.toPointer(data.sz081)), true);
  // 0x268: pointer
  if (data?.sz082 !== undefined) view.setBigUint64(616, data.sz082 === null ? 0n : BigInt(util.toPointer(data.sz082)), true);
  // 0x270: pointer
  if (data?.sz083 !== undefined) view.setBigUint64(624, data.sz083 === null ? 0n : BigInt(util.toPointer(data.sz083)), true);
  // 0x278: pointer
  if (data?.sz084 !== undefined) view.setBigUint64(632, data.sz084 === null ? 0n : BigInt(util.toPointer(data.sz084)), true);
  // 0x280: pointer
  if (data?.sz085 !== undefined) view.setBigUint64(640, data.sz085 === null ? 0n : BigInt(util.toPointer(data.sz085)), true);
  // 0x288: pointer
  if (data?.sz086 !== undefined) view.setBigUint64(648, data.sz086 === null ? 0n : BigInt(util.toPointer(data.sz086)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.MTP_COMMAND_DATA_IN (size: 32)
 */
export interface MTP_COMMAND_DATA_IN {
  /** u16 */
  OpCode: number;
  /** u32 */
  NumParams: number;
  /** array */
  Params: Deno.PointerValue | null;
  /** u32 */
  NextPhase: number;
  /** u32 */
  CommandWriteDataSize: number;
  /** array */
  CommandWriteData: Deno.PointerValue | null;
}

export const sizeofMTP_COMMAND_DATA_IN = 32;

export function allocMTP_COMMAND_DATA_IN(data?: Partial<MTP_COMMAND_DATA_IN>): Uint8Array {
  const buf = new Uint8Array(sizeofMTP_COMMAND_DATA_IN);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.OpCode !== undefined) view.setUint16(0, Number(data.OpCode), true);
  // 0x02: u32
  if (data?.NumParams !== undefined) view.setUint32(2, Number(data.NumParams), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Params !== undefined) view.setBigUint64(8, data.Params === null ? 0n : BigInt(util.toPointer(data.Params)), true);
  // 0x10: u32
  if (data?.NextPhase !== undefined) view.setUint32(16, Number(data.NextPhase), true);
  // 0x14: u32
  if (data?.CommandWriteDataSize !== undefined) view.setUint32(20, Number(data.CommandWriteDataSize), true);
  // 0x18: pointer
  if (data?.CommandWriteData !== undefined) view.setBigUint64(24, data.CommandWriteData === null ? 0n : BigInt(util.toPointer(data.CommandWriteData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.MTP_COMMAND_DATA_OUT (size: 32)
 */
export interface MTP_COMMAND_DATA_OUT {
  /** u16 */
  ResponseCode: number;
  /** u32 */
  NumParams: number;
  /** array */
  Params: Deno.PointerValue | null;
  /** u32 */
  CommandReadDataSize: number;
  /** array */
  CommandReadData: Deno.PointerValue | null;
}

export const sizeofMTP_COMMAND_DATA_OUT = 32;

export function allocMTP_COMMAND_DATA_OUT(data?: Partial<MTP_COMMAND_DATA_OUT>): Uint8Array {
  const buf = new Uint8Array(sizeofMTP_COMMAND_DATA_OUT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ResponseCode !== undefined) view.setUint16(0, Number(data.ResponseCode), true);
  // 0x02: u32
  if (data?.NumParams !== undefined) view.setUint32(2, Number(data.NumParams), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Params !== undefined) view.setBigUint64(8, data.Params === null ? 0n : BigInt(util.toPointer(data.Params)), true);
  // 0x10: u32
  if (data?.CommandReadDataSize !== undefined) view.setUint32(16, Number(data.CommandReadDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.CommandReadData !== undefined) view.setBigUint64(24, data.CommandReadData === null ? 0n : BigInt(util.toPointer(data.CommandReadData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_STREAM_PRIORITY_RECORD (size: 8)
 */
export interface WM_STREAM_PRIORITY_RECORD {
  /** u16 */
  wStreamNumber: number;
  /** Windows.Win32.Foundation.BOOL */
  fMandatory: boolean;
}

export const sizeofWM_STREAM_PRIORITY_RECORD = 8;

export function allocWM_STREAM_PRIORITY_RECORD(data?: Partial<WM_STREAM_PRIORITY_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_STREAM_PRIORITY_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wStreamNumber !== undefined) view.setUint16(0, Number(data.wStreamNumber), true);
  // 0x02: i32
  if (data?.fMandatory !== undefined) view.setInt32(2, Number(data.fMandatory), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_WRITER_STATISTICS (size: 56)
 */
export interface WM_WRITER_STATISTICS {
  /** u64 */
  qwSampleCount: Deno.PointerValue;
  /** u64 */
  qwByteCount: Deno.PointerValue;
  /** u64 */
  qwDroppedSampleCount: Deno.PointerValue;
  /** u64 */
  qwDroppedByteCount: Deno.PointerValue;
  /** u32 */
  dwCurrentBitrate: number;
  /** u32 */
  dwAverageBitrate: number;
  /** u32 */
  dwExpectedBitrate: number;
  /** u32 */
  dwCurrentSampleRate: number;
  /** u32 */
  dwAverageSampleRate: number;
  /** u32 */
  dwExpectedSampleRate: number;
}

export const sizeofWM_WRITER_STATISTICS = 56;

export function allocWM_WRITER_STATISTICS(data?: Partial<WM_WRITER_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_WRITER_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.qwSampleCount !== undefined) view.setBigUint64(0, BigInt(data.qwSampleCount), true);
  // 0x08: u64
  if (data?.qwByteCount !== undefined) view.setBigUint64(8, BigInt(data.qwByteCount), true);
  // 0x10: u64
  if (data?.qwDroppedSampleCount !== undefined) view.setBigUint64(16, BigInt(data.qwDroppedSampleCount), true);
  // 0x18: u64
  if (data?.qwDroppedByteCount !== undefined) view.setBigUint64(24, BigInt(data.qwDroppedByteCount), true);
  // 0x20: u32
  if (data?.dwCurrentBitrate !== undefined) view.setUint32(32, Number(data.dwCurrentBitrate), true);
  // 0x24: u32
  if (data?.dwAverageBitrate !== undefined) view.setUint32(36, Number(data.dwAverageBitrate), true);
  // 0x28: u32
  if (data?.dwExpectedBitrate !== undefined) view.setUint32(40, Number(data.dwExpectedBitrate), true);
  // 0x2c: u32
  if (data?.dwCurrentSampleRate !== undefined) view.setUint32(44, Number(data.dwCurrentSampleRate), true);
  // 0x30: u32
  if (data?.dwAverageSampleRate !== undefined) view.setUint32(48, Number(data.dwAverageSampleRate), true);
  // 0x34: u32
  if (data?.dwExpectedSampleRate !== undefined) view.setUint32(52, Number(data.dwExpectedSampleRate), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_WRITER_STATISTICS_EX (size: 32)
 */
export interface WM_WRITER_STATISTICS_EX {
  /** u32 */
  dwBitratePlusOverhead: number;
  /** u32 */
  dwCurrentSampleDropRateInQueue: number;
  /** u32 */
  dwCurrentSampleDropRateInCodec: number;
  /** u32 */
  dwCurrentSampleDropRateInMultiplexer: number;
  /** u32 */
  dwTotalSampleDropsInQueue: number;
  /** u32 */
  dwTotalSampleDropsInCodec: number;
  /** u32 */
  dwTotalSampleDropsInMultiplexer: number;
}

export const sizeofWM_WRITER_STATISTICS_EX = 32;

export function allocWM_WRITER_STATISTICS_EX(data?: Partial<WM_WRITER_STATISTICS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_WRITER_STATISTICS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBitratePlusOverhead !== undefined) view.setUint32(0, Number(data.dwBitratePlusOverhead), true);
  // 0x04: u32
  if (data?.dwCurrentSampleDropRateInQueue !== undefined) view.setUint32(4, Number(data.dwCurrentSampleDropRateInQueue), true);
  // 0x08: u32
  if (data?.dwCurrentSampleDropRateInCodec !== undefined) view.setUint32(8, Number(data.dwCurrentSampleDropRateInCodec), true);
  // 0x0c: u32
  if (data?.dwCurrentSampleDropRateInMultiplexer !== undefined) view.setUint32(12, Number(data.dwCurrentSampleDropRateInMultiplexer), true);
  // 0x10: u32
  if (data?.dwTotalSampleDropsInQueue !== undefined) view.setUint32(16, Number(data.dwTotalSampleDropsInQueue), true);
  // 0x14: u32
  if (data?.dwTotalSampleDropsInCodec !== undefined) view.setUint32(20, Number(data.dwTotalSampleDropsInCodec), true);
  // 0x18: u32
  if (data?.dwTotalSampleDropsInMultiplexer !== undefined) view.setUint32(24, Number(data.dwTotalSampleDropsInMultiplexer), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_READER_STATISTICS (size: 24)
 */
export interface WM_READER_STATISTICS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwBandwidth: number;
  /** u32 */
  cPacketsReceived: number;
  /** u32 */
  cPacketsRecovered: number;
  /** u32 */
  cPacketsLost: number;
  /** u16 */
  wQuality: number;
}

export const sizeofWM_READER_STATISTICS = 24;

export function allocWM_READER_STATISTICS(data?: Partial<WM_READER_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_READER_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwBandwidth !== undefined) view.setUint32(4, Number(data.dwBandwidth), true);
  // 0x08: u32
  if (data?.cPacketsReceived !== undefined) view.setUint32(8, Number(data.cPacketsReceived), true);
  // 0x0c: u32
  if (data?.cPacketsRecovered !== undefined) view.setUint32(12, Number(data.cPacketsRecovered), true);
  // 0x10: u32
  if (data?.cPacketsLost !== undefined) view.setUint32(16, Number(data.cPacketsLost), true);
  // 0x14: u16
  if (data?.wQuality !== undefined) view.setUint16(20, Number(data.wQuality), true);
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_READER_CLIENTINFO (size: 72)
 */
export interface WM_READER_CLIENTINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszLang: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wszBrowserUserAgent: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wszBrowserWebPage: string | null;
  /** u64 */
  qwReserved: Deno.PointerValue;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  wszHostExe: string | null;
  /** u64 */
  qwHostVersion: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  wszPlayerUserAgent: string | null;
}

export const sizeofWM_READER_CLIENTINFO = 72;

export function allocWM_READER_CLIENTINFO(data?: Partial<WM_READER_CLIENTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_READER_CLIENTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wszLang !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszLang);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wszBrowserUserAgent !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wszBrowserUserAgent);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.wszBrowserWebPage !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.wszBrowserWebPage);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u64
  if (data?.qwReserved !== undefined) view.setBigUint64(32, BigInt(data.qwReserved), true);
  // 0x28: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(40, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  // 0x30: buffer
  if (data?.wszHostExe !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.wszHostExe);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u64
  if (data?.qwHostVersion !== undefined) view.setBigUint64(56, BigInt(data.qwHostVersion), true);
  // 0x40: buffer
  if (data?.wszPlayerUserAgent !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.wszPlayerUserAgent);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_CLIENT_PROPERTIES (size: 8)
 */
export interface WM_CLIENT_PROPERTIES {
  /** u32 */
  dwIPAddress: number;
  /** u32 */
  dwPort: number;
}

export const sizeofWM_CLIENT_PROPERTIES = 8;

export function allocWM_CLIENT_PROPERTIES(data?: Partial<WM_CLIENT_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_CLIENT_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIPAddress !== undefined) view.setUint32(0, Number(data.dwIPAddress), true);
  // 0x04: u32
  if (data?.dwPort !== undefined) view.setUint32(4, Number(data.dwPort), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_CLIENT_PROPERTIES_EX (size: 32)
 */
export interface WM_CLIENT_PROPERTIES_EX {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIPAddress: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPort: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDNSName: string | null;
}

export const sizeofWM_CLIENT_PROPERTIES_EX = 32;

export function allocWM_CLIENT_PROPERTIES_EX(data?: Partial<WM_CLIENT_PROPERTIES_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_CLIENT_PROPERTIES_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszIPAddress !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszIPAddress);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszPort !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszPort);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszDNSName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszDNSName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_PORT_NUMBER_RANGE (size: 8)
 */
export interface WM_PORT_NUMBER_RANGE {
  /** u16 */
  wPortBegin: number;
  /** u16 */
  wPortEnd: number;
}

export const sizeofWM_PORT_NUMBER_RANGE = 8;

export function allocWM_PORT_NUMBER_RANGE(data?: Partial<WM_PORT_NUMBER_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_PORT_NUMBER_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wPortBegin !== undefined) view.setUint16(0, Number(data.wPortBegin), true);
  // 0x02: u16
  if (data?.wPortEnd !== undefined) view.setUint16(2, Number(data.wPortEnd), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_BUFFER_SEGMENT (size: 16)
 */
export interface WMT_BUFFER_SEGMENT {
  /** Windows.Win32.Media.WindowsMediaFormat.INSSBuffer */
  pBuffer: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbOffset: number;
  /** u32 */
  cbLength: number;
}

export const sizeofWMT_BUFFER_SEGMENT = 16;

export function allocWMT_BUFFER_SEGMENT(data?: Partial<WMT_BUFFER_SEGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_BUFFER_SEGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(util.toPointer(data.pBuffer)), true);
  // 0x08: u32
  if (data?.cbOffset !== undefined) view.setUint32(8, Number(data.cbOffset), true);
  // 0x0c: u32
  if (data?.cbLength !== undefined) view.setUint32(12, Number(data.cbLength), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_PAYLOAD_FRAGMENT (size: 16)
 */
export interface WMT_PAYLOAD_FRAGMENT {
  /** u32 */
  dwPayloadIndex: number;
  /** Windows.Win32.Media.WindowsMediaFormat.WMT_BUFFER_SEGMENT */
  segmentData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMT_PAYLOAD_FRAGMENT = 16;

export function allocWMT_PAYLOAD_FRAGMENT(data?: Partial<WMT_PAYLOAD_FRAGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_PAYLOAD_FRAGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPayloadIndex !== undefined) view.setUint32(0, Number(data.dwPayloadIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.segmentData !== undefined) view.setBigUint64(8, data.segmentData === null ? 0n : BigInt(util.toPointer(data.segmentData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_FILESINK_DATA_UNIT (size: 40)
 */
export interface WMT_FILESINK_DATA_UNIT {
  /** Windows.Win32.Media.WindowsMediaFormat.WMT_BUFFER_SEGMENT */
  packetHeaderBuffer: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cPayloads: number;
  /** ptr */
  pPayloadHeaderBuffers: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cPayloadDataFragments: number;
  /** ptr */
  pPayloadDataFragments: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMT_FILESINK_DATA_UNIT = 40;

export function allocWMT_FILESINK_DATA_UNIT(data?: Partial<WMT_FILESINK_DATA_UNIT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_FILESINK_DATA_UNIT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.packetHeaderBuffer !== undefined) view.setBigUint64(0, data.packetHeaderBuffer === null ? 0n : BigInt(util.toPointer(data.packetHeaderBuffer)), true);
  // 0x08: u32
  if (data?.cPayloads !== undefined) view.setUint32(8, Number(data.cPayloads), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pPayloadHeaderBuffers !== undefined) view.setBigUint64(16, data.pPayloadHeaderBuffers === null ? 0n : BigInt(util.toPointer(data.pPayloadHeaderBuffers)), true);
  // 0x18: u32
  if (data?.cPayloadDataFragments !== undefined) view.setUint32(24, Number(data.cPayloadDataFragments), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pPayloadDataFragments !== undefined) view.setBigUint64(32, data.pPayloadDataFragments === null ? 0n : BigInt(util.toPointer(data.pPayloadDataFragments)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_WEBSTREAM_FORMAT (size: 8)
 */
export interface WMT_WEBSTREAM_FORMAT {
  /** u16 */
  cbSize: number;
  /** u16 */
  cbSampleHeaderFixedData: number;
  /** u16 */
  wVersion: number;
  /** u16 */
  wReserved: number;
}

export const sizeofWMT_WEBSTREAM_FORMAT = 8;

export function allocWMT_WEBSTREAM_FORMAT(data?: Partial<WMT_WEBSTREAM_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_WEBSTREAM_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.cbSampleHeaderFixedData !== undefined) view.setUint16(2, Number(data.cbSampleHeaderFixedData), true);
  // 0x04: u16
  if (data?.wVersion !== undefined) view.setUint16(4, Number(data.wVersion), true);
  // 0x06: u16
  if (data?.wReserved !== undefined) view.setUint16(6, Number(data.wReserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_WEBSTREAM_SAMPLE_HEADER (size: 16)
 */
export interface WMT_WEBSTREAM_SAMPLE_HEADER {
  /** u16 */
  cbLength: number;
  /** u16 */
  wPart: number;
  /** u16 */
  cTotalParts: number;
  /** u16 */
  wSampleType: number;
  /** array */
  wszURL: Deno.PointerValue | null;
}

export const sizeofWMT_WEBSTREAM_SAMPLE_HEADER = 16;

export function allocWMT_WEBSTREAM_SAMPLE_HEADER(data?: Partial<WMT_WEBSTREAM_SAMPLE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_WEBSTREAM_SAMPLE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbLength !== undefined) view.setUint16(0, Number(data.cbLength), true);
  // 0x02: u16
  if (data?.wPart !== undefined) view.setUint16(2, Number(data.wPart), true);
  // 0x04: u16
  if (data?.cTotalParts !== undefined) view.setUint16(4, Number(data.cTotalParts), true);
  // 0x06: u16
  if (data?.wSampleType !== undefined) view.setUint16(6, Number(data.wSampleType), true);
  // 0x08: pointer
  if (data?.wszURL !== undefined) view.setBigUint64(8, data.wszURL === null ? 0n : BigInt(util.toPointer(data.wszURL)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_ADDRESS_ACCESSENTRY (size: 8)
 */
export interface WM_ADDRESS_ACCESSENTRY {
  /** u32 */
  dwIPAddress: number;
  /** u32 */
  dwMask: number;
}

export const sizeofWM_ADDRESS_ACCESSENTRY = 8;

export function allocWM_ADDRESS_ACCESSENTRY(data?: Partial<WM_ADDRESS_ACCESSENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_ADDRESS_ACCESSENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIPAddress !== undefined) view.setUint32(0, Number(data.dwIPAddress), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_PICTURE (size: 40)
 */
export interface WM_PICTURE {
  /** Windows.Win32.Foundation.PWSTR */
  pwszMIMEType: string | null;
  /** u8 */
  bPictureType: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDescription: string | null;
  /** u32 */
  dwDataLen: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWM_PICTURE = 40;

export function allocWM_PICTURE(data?: Partial<WM_PICTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_PICTURE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszMIMEType !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszMIMEType);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u8
  if (data?.bPictureType !== undefined) view.setUint8(8, Number(data.bPictureType));
  // 0x09: pad7
  // 0x10: buffer
  if (data?.pwszDescription !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszDescription);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwDataLen !== undefined) view.setUint32(24, Number(data.dwDataLen), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pbData !== undefined) view.setBigUint64(32, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_SYNCHRONISED_LYRICS (size: 32)
 */
export interface WM_SYNCHRONISED_LYRICS {
  /** u8 */
  bTimeStampFormat: number;
  /** u8 */
  bContentType: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszContentDescriptor: string | null;
  /** u32 */
  dwLyricsLen: number;
  /** ptr */
  pbLyrics: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWM_SYNCHRONISED_LYRICS = 32;

export function allocWM_SYNCHRONISED_LYRICS(data?: Partial<WM_SYNCHRONISED_LYRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_SYNCHRONISED_LYRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bTimeStampFormat !== undefined) view.setUint8(0, Number(data.bTimeStampFormat));
  // 0x01: u8
  if (data?.bContentType !== undefined) view.setUint8(1, Number(data.bContentType));
  // 0x02: pad6
  // 0x08: buffer
  if (data?.pwszContentDescriptor !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszContentDescriptor);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwLyricsLen !== undefined) view.setUint32(16, Number(data.dwLyricsLen), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbLyrics !== undefined) view.setBigUint64(24, data.pbLyrics === null ? 0n : BigInt(util.toPointer(data.pbLyrics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_USER_WEB_URL (size: 16)
 */
export interface WM_USER_WEB_URL {
  /** Windows.Win32.Foundation.PWSTR */
  pwszDescription: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszURL: string | null;
}

export const sizeofWM_USER_WEB_URL = 16;

export function allocWM_USER_WEB_URL(data?: Partial<WM_USER_WEB_URL>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_USER_WEB_URL);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszDescription !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszDescription);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszURL !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszURL);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_USER_TEXT (size: 16)
 */
export interface WM_USER_TEXT {
  /** Windows.Win32.Foundation.PWSTR */
  pwszDescription: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszText: string | null;
}

export const sizeofWM_USER_TEXT = 16;

export function allocWM_USER_TEXT(data?: Partial<WM_USER_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_USER_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszDescription !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszDescription);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_LEAKY_BUCKET_PAIR (size: 8)
 */
export interface WM_LEAKY_BUCKET_PAIR {
  /** u32 */
  dwBitrate: number;
  /** u32 */
  msBufferWindow: number;
}

export const sizeofWM_LEAKY_BUCKET_PAIR = 8;

export function allocWM_LEAKY_BUCKET_PAIR(data?: Partial<WM_LEAKY_BUCKET_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_LEAKY_BUCKET_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBitrate !== undefined) view.setUint32(0, Number(data.dwBitrate), true);
  // 0x04: u32
  if (data?.msBufferWindow !== undefined) view.setUint32(4, Number(data.msBufferWindow), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_STREAM_TYPE_INFO (size: 16)
 */
export interface WM_STREAM_TYPE_INFO {
  /** System.Guid */
  guidMajorType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbFormat: number;
}

export const sizeofWM_STREAM_TYPE_INFO = 16;

export function allocWM_STREAM_TYPE_INFO(data?: Partial<WM_STREAM_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_STREAM_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidMajorType !== undefined) view.setBigUint64(0, data.guidMajorType === null ? 0n : BigInt(util.toPointer(data.guidMajorType)), true);
  // 0x08: u32
  if (data?.cbFormat !== undefined) view.setUint32(8, Number(data.cbFormat), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_WATERMARK_ENTRY (size: 32)
 */
export interface WMT_WATERMARK_ENTRY {
  /** Windows.Win32.Media.WindowsMediaFormat.WMT_WATERMARK_ENTRY_TYPE */
  wmetType: WMT_WATERMARK_ENTRY_TYPE;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbDisplayName: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDisplayName: string | null;
}

export const sizeofWMT_WATERMARK_ENTRY = 32;

export function allocWMT_WATERMARK_ENTRY(data?: Partial<WMT_WATERMARK_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_WATERMARK_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wmetType !== undefined) view.setInt32(0, Number(data.wmetType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x10: u32
  if (data?.cbDisplayName !== undefined) view.setUint32(16, Number(data.cbDisplayName), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pwszDisplayName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszDisplayName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_VIDEOIMAGE_SAMPLE (size: 88)
 */
export interface WMT_VIDEOIMAGE_SAMPLE {
  /** u32 */
  dwMagic: number;
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwControlFlags: number;
  /** u32 */
  dwInputFlagsCur: number;
  /** i32 */
  lCurMotionXtoX: number;
  /** i32 */
  lCurMotionYtoX: number;
  /** i32 */
  lCurMotionXoffset: number;
  /** i32 */
  lCurMotionXtoY: number;
  /** i32 */
  lCurMotionYtoY: number;
  /** i32 */
  lCurMotionYoffset: number;
  /** i32 */
  lCurBlendCoef1: number;
  /** i32 */
  lCurBlendCoef2: number;
  /** u32 */
  dwInputFlagsPrev: number;
  /** i32 */
  lPrevMotionXtoX: number;
  /** i32 */
  lPrevMotionYtoX: number;
  /** i32 */
  lPrevMotionXoffset: number;
  /** i32 */
  lPrevMotionXtoY: number;
  /** i32 */
  lPrevMotionYtoY: number;
  /** i32 */
  lPrevMotionYoffset: number;
  /** i32 */
  lPrevBlendCoef1: number;
  /** i32 */
  lPrevBlendCoef2: number;
}

export const sizeofWMT_VIDEOIMAGE_SAMPLE = 88;

export function allocWMT_VIDEOIMAGE_SAMPLE(data?: Partial<WMT_VIDEOIMAGE_SAMPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_VIDEOIMAGE_SAMPLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMagic !== undefined) view.setUint32(0, Number(data.dwMagic), true);
  // 0x04: u32
  if (data?.cbStruct !== undefined) view.setUint32(4, Number(data.cbStruct), true);
  // 0x08: u32
  if (data?.dwControlFlags !== undefined) view.setUint32(8, Number(data.dwControlFlags), true);
  // 0x0c: u32
  if (data?.dwInputFlagsCur !== undefined) view.setUint32(12, Number(data.dwInputFlagsCur), true);
  // 0x10: i32
  if (data?.lCurMotionXtoX !== undefined) view.setInt32(16, Number(data.lCurMotionXtoX), true);
  // 0x14: i32
  if (data?.lCurMotionYtoX !== undefined) view.setInt32(20, Number(data.lCurMotionYtoX), true);
  // 0x18: i32
  if (data?.lCurMotionXoffset !== undefined) view.setInt32(24, Number(data.lCurMotionXoffset), true);
  // 0x1c: i32
  if (data?.lCurMotionXtoY !== undefined) view.setInt32(28, Number(data.lCurMotionXtoY), true);
  // 0x20: i32
  if (data?.lCurMotionYtoY !== undefined) view.setInt32(32, Number(data.lCurMotionYtoY), true);
  // 0x24: i32
  if (data?.lCurMotionYoffset !== undefined) view.setInt32(36, Number(data.lCurMotionYoffset), true);
  // 0x28: i32
  if (data?.lCurBlendCoef1 !== undefined) view.setInt32(40, Number(data.lCurBlendCoef1), true);
  // 0x2c: i32
  if (data?.lCurBlendCoef2 !== undefined) view.setInt32(44, Number(data.lCurBlendCoef2), true);
  // 0x30: u32
  if (data?.dwInputFlagsPrev !== undefined) view.setUint32(48, Number(data.dwInputFlagsPrev), true);
  // 0x34: i32
  if (data?.lPrevMotionXtoX !== undefined) view.setInt32(52, Number(data.lPrevMotionXtoX), true);
  // 0x38: i32
  if (data?.lPrevMotionYtoX !== undefined) view.setInt32(56, Number(data.lPrevMotionYtoX), true);
  // 0x3c: i32
  if (data?.lPrevMotionXoffset !== undefined) view.setInt32(60, Number(data.lPrevMotionXoffset), true);
  // 0x40: i32
  if (data?.lPrevMotionXtoY !== undefined) view.setInt32(64, Number(data.lPrevMotionXtoY), true);
  // 0x44: i32
  if (data?.lPrevMotionYtoY !== undefined) view.setInt32(68, Number(data.lPrevMotionYtoY), true);
  // 0x48: i32
  if (data?.lPrevMotionYoffset !== undefined) view.setInt32(72, Number(data.lPrevMotionYoffset), true);
  // 0x4c: i32
  if (data?.lPrevBlendCoef1 !== undefined) view.setInt32(76, Number(data.lPrevBlendCoef1), true);
  // 0x50: i32
  if (data?.lPrevBlendCoef2 !== undefined) view.setInt32(80, Number(data.lPrevBlendCoef2), true);
  // 0x54: pad4
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_VIDEOIMAGE_SAMPLE2 (size: 112)
 */
export interface WMT_VIDEOIMAGE_SAMPLE2 {
  /** u32 */
  dwMagic: number;
  /** u32 */
  dwStructSize: number;
  /** u32 */
  dwControlFlags: number;
  /** u32 */
  dwViewportWidth: number;
  /** u32 */
  dwViewportHeight: number;
  /** u32 */
  dwCurrImageWidth: number;
  /** u32 */
  dwCurrImageHeight: number;
  /** f32 */
  fCurrRegionX0: number;
  /** f32 */
  fCurrRegionY0: number;
  /** f32 */
  fCurrRegionWidth: number;
  /** f32 */
  fCurrRegionHeight: number;
  /** f32 */
  fCurrBlendCoef: number;
  /** u32 */
  dwPrevImageWidth: number;
  /** u32 */
  dwPrevImageHeight: number;
  /** f32 */
  fPrevRegionX0: number;
  /** f32 */
  fPrevRegionY0: number;
  /** f32 */
  fPrevRegionWidth: number;
  /** f32 */
  fPrevRegionHeight: number;
  /** f32 */
  fPrevBlendCoef: number;
  /** u32 */
  dwEffectType: number;
  /** u32 */
  dwNumEffectParas: number;
  /** f32 */
  fEffectPara0: number;
  /** f32 */
  fEffectPara1: number;
  /** f32 */
  fEffectPara2: number;
  /** f32 */
  fEffectPara3: number;
  /** f32 */
  fEffectPara4: number;
  /** Windows.Win32.Foundation.BOOL */
  bKeepPrevImage: boolean;
}

export const sizeofWMT_VIDEOIMAGE_SAMPLE2 = 112;

export function allocWMT_VIDEOIMAGE_SAMPLE2(data?: Partial<WMT_VIDEOIMAGE_SAMPLE2>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_VIDEOIMAGE_SAMPLE2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMagic !== undefined) view.setUint32(0, Number(data.dwMagic), true);
  // 0x04: u32
  if (data?.dwStructSize !== undefined) view.setUint32(4, Number(data.dwStructSize), true);
  // 0x08: u32
  if (data?.dwControlFlags !== undefined) view.setUint32(8, Number(data.dwControlFlags), true);
  // 0x0c: u32
  if (data?.dwViewportWidth !== undefined) view.setUint32(12, Number(data.dwViewportWidth), true);
  // 0x10: u32
  if (data?.dwViewportHeight !== undefined) view.setUint32(16, Number(data.dwViewportHeight), true);
  // 0x14: u32
  if (data?.dwCurrImageWidth !== undefined) view.setUint32(20, Number(data.dwCurrImageWidth), true);
  // 0x18: u32
  if (data?.dwCurrImageHeight !== undefined) view.setUint32(24, Number(data.dwCurrImageHeight), true);
  // 0x1c: f32
  if (data?.fCurrRegionX0 !== undefined) view.setFloat32(28, Number(data.fCurrRegionX0), true);
  // 0x20: f32
  if (data?.fCurrRegionY0 !== undefined) view.setFloat32(32, Number(data.fCurrRegionY0), true);
  // 0x24: f32
  if (data?.fCurrRegionWidth !== undefined) view.setFloat32(36, Number(data.fCurrRegionWidth), true);
  // 0x28: f32
  if (data?.fCurrRegionHeight !== undefined) view.setFloat32(40, Number(data.fCurrRegionHeight), true);
  // 0x2c: f32
  if (data?.fCurrBlendCoef !== undefined) view.setFloat32(44, Number(data.fCurrBlendCoef), true);
  // 0x30: u32
  if (data?.dwPrevImageWidth !== undefined) view.setUint32(48, Number(data.dwPrevImageWidth), true);
  // 0x34: u32
  if (data?.dwPrevImageHeight !== undefined) view.setUint32(52, Number(data.dwPrevImageHeight), true);
  // 0x38: f32
  if (data?.fPrevRegionX0 !== undefined) view.setFloat32(56, Number(data.fPrevRegionX0), true);
  // 0x3c: f32
  if (data?.fPrevRegionY0 !== undefined) view.setFloat32(60, Number(data.fPrevRegionY0), true);
  // 0x40: f32
  if (data?.fPrevRegionWidth !== undefined) view.setFloat32(64, Number(data.fPrevRegionWidth), true);
  // 0x44: f32
  if (data?.fPrevRegionHeight !== undefined) view.setFloat32(68, Number(data.fPrevRegionHeight), true);
  // 0x48: f32
  if (data?.fPrevBlendCoef !== undefined) view.setFloat32(72, Number(data.fPrevBlendCoef), true);
  // 0x4c: u32
  if (data?.dwEffectType !== undefined) view.setUint32(76, Number(data.dwEffectType), true);
  // 0x50: u32
  if (data?.dwNumEffectParas !== undefined) view.setUint32(80, Number(data.dwNumEffectParas), true);
  // 0x54: f32
  if (data?.fEffectPara0 !== undefined) view.setFloat32(84, Number(data.fEffectPara0), true);
  // 0x58: f32
  if (data?.fEffectPara1 !== undefined) view.setFloat32(88, Number(data.fEffectPara1), true);
  // 0x5c: f32
  if (data?.fEffectPara2 !== undefined) view.setFloat32(92, Number(data.fEffectPara2), true);
  // 0x60: f32
  if (data?.fEffectPara3 !== undefined) view.setFloat32(96, Number(data.fEffectPara3), true);
  // 0x64: f32
  if (data?.fEffectPara4 !== undefined) view.setFloat32(100, Number(data.fEffectPara4), true);
  // 0x68: i32
  if (data?.bKeepPrevImage !== undefined) view.setInt32(104, Number(data.bKeepPrevImage), true);
  // 0x6c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_MEDIA_TYPE (size: 64)
 */
export interface WM_MEDIA_TYPE {
  /** System.Guid */
  majortype: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  subtype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  lSampleSize: number;
  /** System.Guid */
  formattype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbFormat: number;
  /** ptr */
  pbFormat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWM_MEDIA_TYPE = 64;

export function allocWM_MEDIA_TYPE(data?: Partial<WM_MEDIA_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_MEDIA_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.majortype !== undefined) view.setBigUint64(0, data.majortype === null ? 0n : BigInt(util.toPointer(data.majortype)), true);
  // 0x08: pointer
  if (data?.subtype !== undefined) view.setBigUint64(8, data.subtype === null ? 0n : BigInt(util.toPointer(data.subtype)), true);
  // 0x10: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(16, Number(data.bFixedSizeSamples), true);
  // 0x14: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(20, Number(data.bTemporalCompression), true);
  // 0x18: u32
  if (data?.lSampleSize !== undefined) view.setUint32(24, Number(data.lSampleSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.formattype !== undefined) view.setBigUint64(32, data.formattype === null ? 0n : BigInt(util.toPointer(data.formattype)), true);
  // 0x28: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(40, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x30: u32
  if (data?.cbFormat !== undefined) view.setUint32(48, Number(data.cbFormat), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pbFormat !== undefined) view.setBigUint64(56, data.pbFormat === null ? 0n : BigInt(util.toPointer(data.pbFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMVIDEOINFOHEADER (size: 40)
 */
export interface WMVIDEOINFOHEADER {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMVIDEOINFOHEADER = 40;

export function allocWMVIDEOINFOHEADER(data?: Partial<WMVIDEOINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofWMVIDEOINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(32, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMVIDEOINFOHEADER2 (size: 64)
 */
export interface WMVIDEOINFOHEADER2 {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** u32 */
  dwInterlaceFlags: number;
  /** u32 */
  dwCopyProtectFlags: number;
  /** u32 */
  dwPictAspectRatioX: number;
  /** u32 */
  dwPictAspectRatioY: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMVIDEOINFOHEADER2 = 64;

export function allocWMVIDEOINFOHEADER2(data?: Partial<WMVIDEOINFOHEADER2>): Uint8Array {
  const buf = new Uint8Array(sizeofWMVIDEOINFOHEADER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: u32
  if (data?.dwInterlaceFlags !== undefined) view.setUint32(32, Number(data.dwInterlaceFlags), true);
  // 0x24: u32
  if (data?.dwCopyProtectFlags !== undefined) view.setUint32(36, Number(data.dwCopyProtectFlags), true);
  // 0x28: u32
  if (data?.dwPictAspectRatioX !== undefined) view.setUint32(40, Number(data.dwPictAspectRatioX), true);
  // 0x2c: u32
  if (data?.dwPictAspectRatioY !== undefined) view.setUint32(44, Number(data.dwPictAspectRatioY), true);
  // 0x30: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(48, Number(data.dwReserved1), true);
  // 0x34: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(52, Number(data.dwReserved2), true);
  // 0x38: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(56, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMMPEG2VIDEOINFO (size: 40)
 */
export interface WMMPEG2VIDEOINFO {
  /** Windows.Win32.Media.WindowsMediaFormat.WMVIDEOINFOHEADER2 */
  hdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStartTimeCode: number;
  /** u32 */
  cbSequenceHeader: number;
  /** u32 */
  dwProfile: number;
  /** u32 */
  dwLevel: number;
  /** u32 */
  dwFlags: number;
  /** array */
  dwSequenceHeader: Deno.PointerValue | null;
}

export const sizeofWMMPEG2VIDEOINFO = 40;

export function allocWMMPEG2VIDEOINFO(data?: Partial<WMMPEG2VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWMMPEG2VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(util.toPointer(data.hdr)), true);
  // 0x08: u32
  if (data?.dwStartTimeCode !== undefined) view.setUint32(8, Number(data.dwStartTimeCode), true);
  // 0x0c: u32
  if (data?.cbSequenceHeader !== undefined) view.setUint32(12, Number(data.cbSequenceHeader), true);
  // 0x10: u32
  if (data?.dwProfile !== undefined) view.setUint32(16, Number(data.dwProfile), true);
  // 0x14: u32
  if (data?.dwLevel !== undefined) view.setUint32(20, Number(data.dwLevel), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.dwSequenceHeader !== undefined) view.setBigUint64(32, data.dwSequenceHeader === null ? 0n : BigInt(util.toPointer(data.dwSequenceHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMSCRIPTFORMAT (size: 8)
 */
export interface WMSCRIPTFORMAT {
  /** System.Guid */
  scriptType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMSCRIPTFORMAT = 8;

export function allocWMSCRIPTFORMAT(data?: Partial<WMSCRIPTFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMSCRIPTFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.scriptType !== undefined) view.setBigUint64(0, data.scriptType === null ? 0n : BigInt(util.toPointer(data.scriptType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_COLORSPACEINFO_EXTENSION_DATA (size: 8)
 */
export interface WMT_COLORSPACEINFO_EXTENSION_DATA {
  /** u8 */
  ucColorPrimaries: number;
  /** u8 */
  ucColorTransferChar: number;
  /** u8 */
  ucColorMatrixCoef: number;
}

export const sizeofWMT_COLORSPACEINFO_EXTENSION_DATA = 8;

export function allocWMT_COLORSPACEINFO_EXTENSION_DATA(data?: Partial<WMT_COLORSPACEINFO_EXTENSION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_COLORSPACEINFO_EXTENSION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ucColorPrimaries !== undefined) view.setUint8(0, Number(data.ucColorPrimaries));
  // 0x01: u8
  if (data?.ucColorTransferChar !== undefined) view.setUint8(1, Number(data.ucColorTransferChar));
  // 0x02: u8
  if (data?.ucColorMatrixCoef !== undefined) view.setUint8(2, Number(data.ucColorMatrixCoef));
  // 0x03: pad5
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_TIMECODE_EXTENSION_DATA (size: 16)
 */
export interface WMT_TIMECODE_EXTENSION_DATA {
  /** u16 */
  wRange: number;
  /** u32 */
  dwTimecode: number;
  /** u32 */
  dwUserbits: number;
  /** u32 */
  dwAmFlags: number;
}

export const sizeofWMT_TIMECODE_EXTENSION_DATA = 16;

export function allocWMT_TIMECODE_EXTENSION_DATA(data?: Partial<WMT_TIMECODE_EXTENSION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_TIMECODE_EXTENSION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wRange !== undefined) view.setUint16(0, Number(data.wRange), true);
  // 0x02: u32
  if (data?.dwTimecode !== undefined) view.setUint32(2, Number(data.dwTimecode), true);
  // 0x06: u32
  if (data?.dwUserbits !== undefined) view.setUint32(6, Number(data.dwUserbits), true);
  // 0x0a: u32
  if (data?.dwAmFlags !== undefined) view.setUint32(10, Number(data.dwAmFlags), true);
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_VAL16 (size: 8)
 */
export interface DRM_VAL16 {
  /** array */
  val: Deno.PointerValue | null;
}

export const sizeofDRM_VAL16 = 8;

export function allocDRM_VAL16(data?: Partial<DRM_VAL16>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_VAL16);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.val !== undefined) view.setBigUint64(0, data.val === null ? 0n : BigInt(util.toPointer(data.val)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMDRM_IMPORT_INIT_STRUCT (size: 32)
 */
export interface WMDRM_IMPORT_INIT_STRUCT {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbEncryptedSessionKeyMessage: number;
  /** ptr */
  pbEncryptedSessionKeyMessage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbEncryptedKeyMessage: number;
  /** ptr */
  pbEncryptedKeyMessage: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMDRM_IMPORT_INIT_STRUCT = 32;

export function allocWMDRM_IMPORT_INIT_STRUCT(data?: Partial<WMDRM_IMPORT_INIT_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDRM_IMPORT_INIT_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbEncryptedSessionKeyMessage !== undefined) view.setUint32(4, Number(data.cbEncryptedSessionKeyMessage), true);
  // 0x08: pointer
  if (data?.pbEncryptedSessionKeyMessage !== undefined) view.setBigUint64(8, data.pbEncryptedSessionKeyMessage === null ? 0n : BigInt(util.toPointer(data.pbEncryptedSessionKeyMessage)), true);
  // 0x10: u32
  if (data?.cbEncryptedKeyMessage !== undefined) view.setUint32(16, Number(data.cbEncryptedKeyMessage), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbEncryptedKeyMessage !== undefined) view.setBigUint64(24, data.pbEncryptedKeyMessage === null ? 0n : BigInt(util.toPointer(data.pbEncryptedKeyMessage)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS (size: 16)
 */
export interface DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS {
  /** u16 */
  wCompressedDigitalVideo: number;
  /** u16 */
  wUncompressedDigitalVideo: number;
  /** u16 */
  wAnalogVideo: number;
  /** u16 */
  wCompressedDigitalAudio: number;
  /** u16 */
  wUncompressedDigitalAudio: number;
}

export const sizeofDRM_MINIMUM_OUTPUT_PROTECTION_LEVELS = 16;

export function allocDRM_MINIMUM_OUTPUT_PROTECTION_LEVELS(data?: Partial<DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_MINIMUM_OUTPUT_PROTECTION_LEVELS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wCompressedDigitalVideo !== undefined) view.setUint16(0, Number(data.wCompressedDigitalVideo), true);
  // 0x02: u16
  if (data?.wUncompressedDigitalVideo !== undefined) view.setUint16(2, Number(data.wUncompressedDigitalVideo), true);
  // 0x04: u16
  if (data?.wAnalogVideo !== undefined) view.setUint16(4, Number(data.wAnalogVideo), true);
  // 0x06: u16
  if (data?.wCompressedDigitalAudio !== undefined) view.setUint16(6, Number(data.wCompressedDigitalAudio), true);
  // 0x08: u16
  if (data?.wUncompressedDigitalAudio !== undefined) view.setUint16(8, Number(data.wUncompressedDigitalAudio), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_OPL_OUTPUT_IDS (size: 16)
 */
export interface DRM_OPL_OUTPUT_IDS {
  /** u16 */
  cIds: number;
  /** ptr */
  rgIds: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDRM_OPL_OUTPUT_IDS = 16;

export function allocDRM_OPL_OUTPUT_IDS(data?: Partial<DRM_OPL_OUTPUT_IDS>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_OPL_OUTPUT_IDS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cIds !== undefined) view.setUint16(0, Number(data.cIds), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.rgIds !== undefined) view.setBigUint64(8, data.rgIds === null ? 0n : BigInt(util.toPointer(data.rgIds)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_OUTPUT_PROTECTION (size: 16)
 */
export interface DRM_OUTPUT_PROTECTION {
  /** System.Guid */
  guidId: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  bConfigData: number;
}

export const sizeofDRM_OUTPUT_PROTECTION = 16;

export function allocDRM_OUTPUT_PROTECTION(data?: Partial<DRM_OUTPUT_PROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_OUTPUT_PROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidId !== undefined) view.setBigUint64(0, data.guidId === null ? 0n : BigInt(util.toPointer(data.guidId)), true);
  // 0x08: u8
  if (data?.bConfigData !== undefined) view.setUint8(8, Number(data.bConfigData));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_VIDEO_OUTPUT_PROTECTION_IDS (size: 16)
 */
export interface DRM_VIDEO_OUTPUT_PROTECTION_IDS {
  /** u16 */
  cEntries: number;
  /** ptr */
  rgVop: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDRM_VIDEO_OUTPUT_PROTECTION_IDS = 16;

export function allocDRM_VIDEO_OUTPUT_PROTECTION_IDS(data?: Partial<DRM_VIDEO_OUTPUT_PROTECTION_IDS>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_VIDEO_OUTPUT_PROTECTION_IDS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cEntries !== undefined) view.setUint16(0, Number(data.cEntries), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.rgVop !== undefined) view.setBigUint64(8, data.rgVop === null ? 0n : BigInt(util.toPointer(data.rgVop)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_PLAY_OPL (size: 24)
 */
export interface DRM_PLAY_OPL {
  /** Windows.Win32.Media.WindowsMediaFormat.DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS */
  minOPL: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.WindowsMediaFormat.DRM_OPL_OUTPUT_IDS */
  oplIdReserved: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.WindowsMediaFormat.DRM_VIDEO_OUTPUT_PROTECTION_IDS */
  vopi: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDRM_PLAY_OPL = 24;

export function allocDRM_PLAY_OPL(data?: Partial<DRM_PLAY_OPL>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_PLAY_OPL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.minOPL !== undefined) view.setBigUint64(0, data.minOPL === null ? 0n : BigInt(util.toPointer(data.minOPL)), true);
  // 0x08: pointer
  if (data?.oplIdReserved !== undefined) view.setBigUint64(8, data.oplIdReserved === null ? 0n : BigInt(util.toPointer(data.oplIdReserved)), true);
  // 0x10: pointer
  if (data?.vopi !== undefined) view.setBigUint64(16, data.vopi === null ? 0n : BigInt(util.toPointer(data.vopi)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_COPY_OPL (size: 24)
 */
export interface DRM_COPY_OPL {
  /** u16 */
  wMinimumCopyLevel: number;
  /** Windows.Win32.Media.WindowsMediaFormat.DRM_OPL_OUTPUT_IDS */
  oplIdIncludes: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.WindowsMediaFormat.DRM_OPL_OUTPUT_IDS */
  oplIdExcludes: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDRM_COPY_OPL = 24;

export function allocDRM_COPY_OPL(data?: Partial<DRM_COPY_OPL>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_COPY_OPL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMinimumCopyLevel !== undefined) view.setUint16(0, Number(data.wMinimumCopyLevel), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.oplIdIncludes !== undefined) view.setBigUint64(8, data.oplIdIncludes === null ? 0n : BigInt(util.toPointer(data.oplIdIncludes)), true);
  // 0x10: pointer
  if (data?.oplIdExcludes !== undefined) view.setBigUint64(16, data.oplIdExcludes === null ? 0n : BigInt(util.toPointer(data.oplIdExcludes)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaPlayer.TimedLevel (size: 32)
 */
export interface TimedLevel {
  /** array */
  frequency: Deno.PointerValue | null;
  /** array */
  waveform: Deno.PointerValue | null;
  /** i32 */
  state: number;
  /** i64 */
  timeStamp: Deno.PointerValue;
}

export const sizeofTimedLevel = 32;

export function allocTimedLevel(data?: Partial<TimedLevel>): Uint8Array {
  const buf = new Uint8Array(sizeofTimedLevel);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.frequency !== undefined) view.setBigUint64(0, data.frequency === null ? 0n : BigInt(util.toPointer(data.frequency)), true);
  // 0x08: pointer
  if (data?.waveform !== undefined) view.setBigUint64(8, data.waveform === null ? 0n : BigInt(util.toPointer(data.waveform)), true);
  // 0x10: i32
  if (data?.state !== undefined) view.setInt32(16, Number(data.state), true);
  // 0x14: pad4
  // 0x18: i64
  if (data?.timeStamp !== undefined) view.setBigInt64(24, BigInt(data.timeStamp), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaPlayer.WMPContextMenuInfo (size: 24)
 */
export interface WMPContextMenuInfo {
  /** u32 */
  dwID: number;
  /** Windows.Win32.Foundation.BSTR */
  bstrMenuText: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  bstrHelpText: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMPContextMenuInfo = 24;

export function allocWMPContextMenuInfo(data?: Partial<WMPContextMenuInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofWMPContextMenuInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwID !== undefined) view.setUint32(0, Number(data.dwID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bstrMenuText !== undefined) view.setBigUint64(8, data.bstrMenuText === null ? 0n : BigInt(util.toPointer(data.bstrMenuText)), true);
  // 0x10: pointer
  if (data?.bstrHelpText !== undefined) view.setBigUint64(16, data.bstrHelpText === null ? 0n : BigInt(util.toPointer(data.bstrHelpText)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaPlayer.WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE (size: 8)
 */
export interface WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE {
  /** u32 */
  dwChangesSinceTransactionID: number;
  /** u32 */
  dwResultSetStartingIndex: number;
}

export const sizeofWMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE = 8;

export function allocWMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE(data?: Partial<WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofWMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwChangesSinceTransactionID !== undefined) view.setUint32(0, Number(data.dwChangesSinceTransactionID), true);
  // 0x04: u32
  if (data?.dwResultSetStartingIndex !== undefined) view.setUint32(4, Number(data.dwResultSetStartingIndex), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaPlayer.WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC (size: 32)
 */
export interface WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC {
  /** u32 */
  dwCurrentTransactionID: number;
  /** u32 */
  dwReturnedObjectCount: number;
  /** u32 */
  dwUnretrievedObjectCount: number;
  /** u32 */
  dwDeletedObjectStartingOffset: number;
  /** u32 */
  dwFlags: number;
  /** array */
  wsObjectPathnameList: Deno.PointerValue | null;
}

export const sizeofWMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC = 32;

export function allocWMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC(data?: Partial<WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC>): Uint8Array {
  const buf = new Uint8Array(sizeofWMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCurrentTransactionID !== undefined) view.setUint32(0, Number(data.dwCurrentTransactionID), true);
  // 0x04: u32
  if (data?.dwReturnedObjectCount !== undefined) view.setUint32(4, Number(data.dwReturnedObjectCount), true);
  // 0x08: u32
  if (data?.dwUnretrievedObjectCount !== undefined) view.setUint32(8, Number(data.dwUnretrievedObjectCount), true);
  // 0x0c: u32
  if (data?.dwDeletedObjectStartingOffset !== undefined) view.setUint32(12, Number(data.dwDeletedObjectStartingOffset), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.wsObjectPathnameList !== undefined) view.setBigUint64(24, data.wsObjectPathnameList === null ? 0n : BigInt(util.toPointer(data.wsObjectPathnameList)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAPO_REGISTRATION_PROPERTIES (size: 56)
 */
export interface XAPO_REGISTRATION_PROPERTIES {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** array */
  FriendlyName: Deno.PointerValue | null;
  /** array */
  CopyrightInfo: Deno.PointerValue | null;
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MinInputBufferCount: number;
  /** u32 */
  MaxInputBufferCount: number;
  /** u32 */
  MinOutputBufferCount: number;
  /** u32 */
  MaxOutputBufferCount: number;
}

export const sizeofXAPO_REGISTRATION_PROPERTIES = 56;

export function allocXAPO_REGISTRATION_PROPERTIES(data?: Partial<XAPO_REGISTRATION_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofXAPO_REGISTRATION_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x08: pointer
  if (data?.FriendlyName !== undefined) view.setBigUint64(8, data.FriendlyName === null ? 0n : BigInt(util.toPointer(data.FriendlyName)), true);
  // 0x10: pointer
  if (data?.CopyrightInfo !== undefined) view.setBigUint64(16, data.CopyrightInfo === null ? 0n : BigInt(util.toPointer(data.CopyrightInfo)), true);
  // 0x18: u32
  if (data?.MajorVersion !== undefined) view.setUint32(24, Number(data.MajorVersion), true);
  // 0x1c: u32
  if (data?.MinorVersion !== undefined) view.setUint32(28, Number(data.MinorVersion), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.MinInputBufferCount !== undefined) view.setUint32(36, Number(data.MinInputBufferCount), true);
  // 0x28: u32
  if (data?.MaxInputBufferCount !== undefined) view.setUint32(40, Number(data.MaxInputBufferCount), true);
  // 0x2c: u32
  if (data?.MinOutputBufferCount !== undefined) view.setUint32(44, Number(data.MinOutputBufferCount), true);
  // 0x30: u32
  if (data?.MaxOutputBufferCount !== undefined) view.setUint32(48, Number(data.MaxOutputBufferCount), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAPO_LOCKFORPROCESS_PARAMETERS (size: 16)
 */
export interface XAPO_LOCKFORPROCESS_PARAMETERS {
  /** ptr */
  pFormat: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MaxFrameCount: number;
}

export const sizeofXAPO_LOCKFORPROCESS_PARAMETERS = 16;

export function allocXAPO_LOCKFORPROCESS_PARAMETERS(data?: Partial<XAPO_LOCKFORPROCESS_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAPO_LOCKFORPROCESS_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pFormat !== undefined) view.setBigUint64(0, data.pFormat === null ? 0n : BigInt(util.toPointer(data.pFormat)), true);
  // 0x08: u32
  if (data?.MaxFrameCount !== undefined) view.setUint32(8, Number(data.MaxFrameCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAPO_PROCESS_BUFFER_PARAMETERS (size: 16)
 */
export interface XAPO_PROCESS_BUFFER_PARAMETERS {
  /** ptr */
  pBuffer: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.XAudio2.XAPO_BUFFER_FLAGS */
  BufferFlags: XAPO_BUFFER_FLAGS;
  /** u32 */
  ValidFrameCount: number;
}

export const sizeofXAPO_PROCESS_BUFFER_PARAMETERS = 16;

export function allocXAPO_PROCESS_BUFFER_PARAMETERS(data?: Partial<XAPO_PROCESS_BUFFER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAPO_PROCESS_BUFFER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(util.toPointer(data.pBuffer)), true);
  // 0x08: i32
  if (data?.BufferFlags !== undefined) view.setInt32(8, Number(data.BufferFlags), true);
  // 0x0c: u32
  if (data?.ValidFrameCount !== undefined) view.setUint32(12, Number(data.ValidFrameCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXEQ_PARAMETERS (size: 48)
 */
export interface FXEQ_PARAMETERS {
  /** f32 */
  FrequencyCenter0: number;
  /** f32 */
  Gain0: number;
  /** f32 */
  Bandwidth0: number;
  /** f32 */
  FrequencyCenter1: number;
  /** f32 */
  Gain1: number;
  /** f32 */
  Bandwidth1: number;
  /** f32 */
  FrequencyCenter2: number;
  /** f32 */
  Gain2: number;
  /** f32 */
  Bandwidth2: number;
  /** f32 */
  FrequencyCenter3: number;
  /** f32 */
  Gain3: number;
  /** f32 */
  Bandwidth3: number;
}

export const sizeofFXEQ_PARAMETERS = 48;

export function allocFXEQ_PARAMETERS(data?: Partial<FXEQ_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXEQ_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.FrequencyCenter0 !== undefined) view.setFloat32(0, Number(data.FrequencyCenter0), true);
  // 0x04: f32
  if (data?.Gain0 !== undefined) view.setFloat32(4, Number(data.Gain0), true);
  // 0x08: f32
  if (data?.Bandwidth0 !== undefined) view.setFloat32(8, Number(data.Bandwidth0), true);
  // 0x0c: f32
  if (data?.FrequencyCenter1 !== undefined) view.setFloat32(12, Number(data.FrequencyCenter1), true);
  // 0x10: f32
  if (data?.Gain1 !== undefined) view.setFloat32(16, Number(data.Gain1), true);
  // 0x14: f32
  if (data?.Bandwidth1 !== undefined) view.setFloat32(20, Number(data.Bandwidth1), true);
  // 0x18: f32
  if (data?.FrequencyCenter2 !== undefined) view.setFloat32(24, Number(data.FrequencyCenter2), true);
  // 0x1c: f32
  if (data?.Gain2 !== undefined) view.setFloat32(28, Number(data.Gain2), true);
  // 0x20: f32
  if (data?.Bandwidth2 !== undefined) view.setFloat32(32, Number(data.Bandwidth2), true);
  // 0x24: f32
  if (data?.FrequencyCenter3 !== undefined) view.setFloat32(36, Number(data.FrequencyCenter3), true);
  // 0x28: f32
  if (data?.Gain3 !== undefined) view.setFloat32(40, Number(data.Gain3), true);
  // 0x2c: f32
  if (data?.Bandwidth3 !== undefined) view.setFloat32(44, Number(data.Bandwidth3), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXMASTERINGLIMITER_PARAMETERS (size: 8)
 */
export interface FXMASTERINGLIMITER_PARAMETERS {
  /** u32 */
  Release: number;
  /** u32 */
  Loudness: number;
}

export const sizeofFXMASTERINGLIMITER_PARAMETERS = 8;

export function allocFXMASTERINGLIMITER_PARAMETERS(data?: Partial<FXMASTERINGLIMITER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXMASTERINGLIMITER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Release !== undefined) view.setUint32(0, Number(data.Release), true);
  // 0x04: u32
  if (data?.Loudness !== undefined) view.setUint32(4, Number(data.Loudness), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXREVERB_PARAMETERS (size: 8)
 */
export interface FXREVERB_PARAMETERS {
  /** f32 */
  Diffusion: number;
  /** f32 */
  RoomSize: number;
}

export const sizeofFXREVERB_PARAMETERS = 8;

export function allocFXREVERB_PARAMETERS(data?: Partial<FXREVERB_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXREVERB_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Diffusion !== undefined) view.setFloat32(0, Number(data.Diffusion), true);
  // 0x04: f32
  if (data?.RoomSize !== undefined) view.setFloat32(4, Number(data.RoomSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXECHO_INITDATA (size: 8)
 */
export interface FXECHO_INITDATA {
  /** f32 */
  MaxDelay: number;
}

export const sizeofFXECHO_INITDATA = 8;

export function allocFXECHO_INITDATA(data?: Partial<FXECHO_INITDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofFXECHO_INITDATA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.MaxDelay !== undefined) view.setFloat32(0, Number(data.MaxDelay), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXECHO_PARAMETERS (size: 16)
 */
export interface FXECHO_PARAMETERS {
  /** f32 */
  WetDryMix: number;
  /** f32 */
  Feedback: number;
  /** f32 */
  Delay: number;
}

export const sizeofFXECHO_PARAMETERS = 16;

export function allocFXECHO_PARAMETERS(data?: Partial<FXECHO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXECHO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.WetDryMix !== undefined) view.setFloat32(0, Number(data.WetDryMix), true);
  // 0x04: f32
  if (data?.Feedback !== undefined) view.setFloat32(4, Number(data.Feedback), true);
  // 0x08: f32
  if (data?.Delay !== undefined) view.setFloat32(8, Number(data.Delay), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_VOICE_DETAILS (size: 16)
 */
export interface XAUDIO2_VOICE_DETAILS {
  /** u32 */
  CreationFlags: number;
  /** u32 */
  ActiveFlags: number;
  /** u32 */
  InputChannels: number;
  /** u32 */
  InputSampleRate: number;
}

export const sizeofXAUDIO2_VOICE_DETAILS = 16;

export function allocXAUDIO2_VOICE_DETAILS(data?: Partial<XAUDIO2_VOICE_DETAILS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_VOICE_DETAILS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CreationFlags !== undefined) view.setUint32(0, Number(data.CreationFlags), true);
  // 0x04: u32
  if (data?.ActiveFlags !== undefined) view.setUint32(4, Number(data.ActiveFlags), true);
  // 0x08: u32
  if (data?.InputChannels !== undefined) view.setUint32(8, Number(data.InputChannels), true);
  // 0x0c: u32
  if (data?.InputSampleRate !== undefined) view.setUint32(12, Number(data.InputSampleRate), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_SEND_DESCRIPTOR (size: 16)
 */
export interface XAUDIO2_SEND_DESCRIPTOR {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Media.Audio.XAudio2.IXAudio2Voice */
  pOutputVoice: Uint8Array | Deno.PointerValue | null;
}

export const sizeofXAUDIO2_SEND_DESCRIPTOR = 16;

export function allocXAUDIO2_SEND_DESCRIPTOR(data?: Partial<XAUDIO2_SEND_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_SEND_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pOutputVoice !== undefined) view.setBigUint64(8, data.pOutputVoice === null ? 0n : BigInt(util.toPointer(data.pOutputVoice)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_VOICE_SENDS (size: 16)
 */
export interface XAUDIO2_VOICE_SENDS {
  /** u32 */
  SendCount: number;
  /** ptr */
  pSends: Deno.PointerValue | Uint8Array | null;
}

export const sizeofXAUDIO2_VOICE_SENDS = 16;

export function allocXAUDIO2_VOICE_SENDS(data?: Partial<XAUDIO2_VOICE_SENDS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_VOICE_SENDS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SendCount !== undefined) view.setUint32(0, Number(data.SendCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSends !== undefined) view.setBigUint64(8, data.pSends === null ? 0n : BigInt(util.toPointer(data.pSends)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_EFFECT_DESCRIPTOR (size: 16)
 */
export interface XAUDIO2_EFFECT_DESCRIPTOR {
  /** Windows.Win32.System.Com.IUnknown */
  pEffect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  InitialState: boolean;
  /** u32 */
  OutputChannels: number;
}

export const sizeofXAUDIO2_EFFECT_DESCRIPTOR = 16;

export function allocXAUDIO2_EFFECT_DESCRIPTOR(data?: Partial<XAUDIO2_EFFECT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_EFFECT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pEffect !== undefined) view.setBigUint64(0, data.pEffect === null ? 0n : BigInt(util.toPointer(data.pEffect)), true);
  // 0x08: i32
  if (data?.InitialState !== undefined) view.setInt32(8, Number(data.InitialState), true);
  // 0x0c: u32
  if (data?.OutputChannels !== undefined) view.setUint32(12, Number(data.OutputChannels), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_EFFECT_CHAIN (size: 16)
 */
export interface XAUDIO2_EFFECT_CHAIN {
  /** u32 */
  EffectCount: number;
  /** ptr */
  pEffectDescriptors: Deno.PointerValue | Uint8Array | null;
}

export const sizeofXAUDIO2_EFFECT_CHAIN = 16;

export function allocXAUDIO2_EFFECT_CHAIN(data?: Partial<XAUDIO2_EFFECT_CHAIN>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_EFFECT_CHAIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EffectCount !== undefined) view.setUint32(0, Number(data.EffectCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEffectDescriptors !== undefined) view.setBigUint64(8, data.pEffectDescriptors === null ? 0n : BigInt(util.toPointer(data.pEffectDescriptors)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_FILTER_PARAMETERS (size: 16)
 */
export interface XAUDIO2_FILTER_PARAMETERS {
  /** Windows.Win32.Media.Audio.XAudio2.XAUDIO2_FILTER_TYPE */
  Type: XAUDIO2_FILTER_TYPE;
  /** f32 */
  Frequency: number;
  /** f32 */
  OneOverQ: number;
}

export const sizeofXAUDIO2_FILTER_PARAMETERS = 16;

export function allocXAUDIO2_FILTER_PARAMETERS(data?: Partial<XAUDIO2_FILTER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_FILTER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: f32
  if (data?.Frequency !== undefined) view.setFloat32(4, Number(data.Frequency), true);
  // 0x08: f32
  if (data?.OneOverQ !== undefined) view.setFloat32(8, Number(data.OneOverQ), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_BUFFER (size: 48)
 */
export interface XAUDIO2_BUFFER {
  /** u32 */
  Flags: number;
  /** u32 */
  AudioBytes: number;
  /** ptr */
  pAudioData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PlayBegin: number;
  /** u32 */
  PlayLength: number;
  /** u32 */
  LoopBegin: number;
  /** u32 */
  LoopLength: number;
  /** u32 */
  LoopCount: number;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofXAUDIO2_BUFFER = 48;

export function allocXAUDIO2_BUFFER(data?: Partial<XAUDIO2_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.AudioBytes !== undefined) view.setUint32(4, Number(data.AudioBytes), true);
  // 0x08: pointer
  if (data?.pAudioData !== undefined) view.setBigUint64(8, data.pAudioData === null ? 0n : BigInt(util.toPointer(data.pAudioData)), true);
  // 0x10: u32
  if (data?.PlayBegin !== undefined) view.setUint32(16, Number(data.PlayBegin), true);
  // 0x14: u32
  if (data?.PlayLength !== undefined) view.setUint32(20, Number(data.PlayLength), true);
  // 0x18: u32
  if (data?.LoopBegin !== undefined) view.setUint32(24, Number(data.LoopBegin), true);
  // 0x1c: u32
  if (data?.LoopLength !== undefined) view.setUint32(28, Number(data.LoopLength), true);
  // 0x20: u32
  if (data?.LoopCount !== undefined) view.setUint32(32, Number(data.LoopCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pContext !== undefined) view.setBigUint64(40, data.pContext === null ? 0n : BigInt(util.toPointer(data.pContext)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_BUFFER_WMA (size: 16)
 */
export interface XAUDIO2_BUFFER_WMA {
  /** ptr */
  pDecodedPacketCumulativeBytes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PacketCount: number;
}

export const sizeofXAUDIO2_BUFFER_WMA = 16;

export function allocXAUDIO2_BUFFER_WMA(data?: Partial<XAUDIO2_BUFFER_WMA>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_BUFFER_WMA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pDecodedPacketCumulativeBytes !== undefined) view.setBigUint64(0, data.pDecodedPacketCumulativeBytes === null ? 0n : BigInt(util.toPointer(data.pDecodedPacketCumulativeBytes)), true);
  // 0x08: u32
  if (data?.PacketCount !== undefined) view.setUint32(8, Number(data.PacketCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_VOICE_STATE (size: 24)
 */
export interface XAUDIO2_VOICE_STATE {
  /** ptr */
  pCurrentBufferContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BuffersQueued: number;
  /** u64 */
  SamplesPlayed: Deno.PointerValue;
}

export const sizeofXAUDIO2_VOICE_STATE = 24;

export function allocXAUDIO2_VOICE_STATE(data?: Partial<XAUDIO2_VOICE_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_VOICE_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCurrentBufferContext !== undefined) view.setBigUint64(0, data.pCurrentBufferContext === null ? 0n : BigInt(util.toPointer(data.pCurrentBufferContext)), true);
  // 0x08: u32
  if (data?.BuffersQueued !== undefined) view.setUint32(8, Number(data.BuffersQueued), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.SamplesPlayed !== undefined) view.setBigUint64(16, BigInt(data.SamplesPlayed), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_PERFORMANCE_DATA (size: 64)
 */
export interface XAUDIO2_PERFORMANCE_DATA {
  /** u64 */
  AudioCyclesSinceLastQuery: Deno.PointerValue;
  /** u64 */
  TotalCyclesSinceLastQuery: Deno.PointerValue;
  /** u32 */
  MinimumCyclesPerQuantum: number;
  /** u32 */
  MaximumCyclesPerQuantum: number;
  /** u32 */
  MemoryUsageInBytes: number;
  /** u32 */
  CurrentLatencyInSamples: number;
  /** u32 */
  GlitchesSinceEngineStarted: number;
  /** u32 */
  ActiveSourceVoiceCount: number;
  /** u32 */
  TotalSourceVoiceCount: number;
  /** u32 */
  ActiveSubmixVoiceCount: number;
  /** u32 */
  ActiveResamplerCount: number;
  /** u32 */
  ActiveMatrixMixCount: number;
  /** u32 */
  ActiveXmaSourceVoices: number;
  /** u32 */
  ActiveXmaStreams: number;
}

export const sizeofXAUDIO2_PERFORMANCE_DATA = 64;

export function allocXAUDIO2_PERFORMANCE_DATA(data?: Partial<XAUDIO2_PERFORMANCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_PERFORMANCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AudioCyclesSinceLastQuery !== undefined) view.setBigUint64(0, BigInt(data.AudioCyclesSinceLastQuery), true);
  // 0x08: u64
  if (data?.TotalCyclesSinceLastQuery !== undefined) view.setBigUint64(8, BigInt(data.TotalCyclesSinceLastQuery), true);
  // 0x10: u32
  if (data?.MinimumCyclesPerQuantum !== undefined) view.setUint32(16, Number(data.MinimumCyclesPerQuantum), true);
  // 0x14: u32
  if (data?.MaximumCyclesPerQuantum !== undefined) view.setUint32(20, Number(data.MaximumCyclesPerQuantum), true);
  // 0x18: u32
  if (data?.MemoryUsageInBytes !== undefined) view.setUint32(24, Number(data.MemoryUsageInBytes), true);
  // 0x1c: u32
  if (data?.CurrentLatencyInSamples !== undefined) view.setUint32(28, Number(data.CurrentLatencyInSamples), true);
  // 0x20: u32
  if (data?.GlitchesSinceEngineStarted !== undefined) view.setUint32(32, Number(data.GlitchesSinceEngineStarted), true);
  // 0x24: u32
  if (data?.ActiveSourceVoiceCount !== undefined) view.setUint32(36, Number(data.ActiveSourceVoiceCount), true);
  // 0x28: u32
  if (data?.TotalSourceVoiceCount !== undefined) view.setUint32(40, Number(data.TotalSourceVoiceCount), true);
  // 0x2c: u32
  if (data?.ActiveSubmixVoiceCount !== undefined) view.setUint32(44, Number(data.ActiveSubmixVoiceCount), true);
  // 0x30: u32
  if (data?.ActiveResamplerCount !== undefined) view.setUint32(48, Number(data.ActiveResamplerCount), true);
  // 0x34: u32
  if (data?.ActiveMatrixMixCount !== undefined) view.setUint32(52, Number(data.ActiveMatrixMixCount), true);
  // 0x38: u32
  if (data?.ActiveXmaSourceVoices !== undefined) view.setUint32(56, Number(data.ActiveXmaSourceVoices), true);
  // 0x3c: u32
  if (data?.ActiveXmaStreams !== undefined) view.setUint32(60, Number(data.ActiveXmaStreams), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_DEBUG_CONFIGURATION (size: 24)
 */
export interface XAUDIO2_DEBUG_CONFIGURATION {
  /** u32 */
  TraceMask: number;
  /** u32 */
  BreakMask: number;
  /** Windows.Win32.Foundation.BOOL */
  LogThreadID: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogFileline: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogFunctionName: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogTiming: boolean;
}

export const sizeofXAUDIO2_DEBUG_CONFIGURATION = 24;

export function allocXAUDIO2_DEBUG_CONFIGURATION(data?: Partial<XAUDIO2_DEBUG_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_DEBUG_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TraceMask !== undefined) view.setUint32(0, Number(data.TraceMask), true);
  // 0x04: u32
  if (data?.BreakMask !== undefined) view.setUint32(4, Number(data.BreakMask), true);
  // 0x08: i32
  if (data?.LogThreadID !== undefined) view.setInt32(8, Number(data.LogThreadID), true);
  // 0x0c: i32
  if (data?.LogFileline !== undefined) view.setInt32(12, Number(data.LogFileline), true);
  // 0x10: i32
  if (data?.LogFunctionName !== undefined) view.setInt32(16, Number(data.LogFunctionName), true);
  // 0x14: i32
  if (data?.LogTiming !== undefined) view.setInt32(20, Number(data.LogTiming), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2FX_VOLUMEMETER_LEVELS (size: 24)
 */
export interface XAUDIO2FX_VOLUMEMETER_LEVELS {
  /** ptr */
  pPeakLevels: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pRMSLevels: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ChannelCount: number;
}

export const sizeofXAUDIO2FX_VOLUMEMETER_LEVELS = 24;

export function allocXAUDIO2FX_VOLUMEMETER_LEVELS(data?: Partial<XAUDIO2FX_VOLUMEMETER_LEVELS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2FX_VOLUMEMETER_LEVELS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pPeakLevels !== undefined) view.setBigUint64(0, data.pPeakLevels === null ? 0n : BigInt(util.toPointer(data.pPeakLevels)), true);
  // 0x08: pointer
  if (data?.pRMSLevels !== undefined) view.setBigUint64(8, data.pRMSLevels === null ? 0n : BigInt(util.toPointer(data.pRMSLevels)), true);
  // 0x10: u32
  if (data?.ChannelCount !== undefined) view.setUint32(16, Number(data.ChannelCount), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2FX_REVERB_PARAMETERS (size: 64)
 */
export interface XAUDIO2FX_REVERB_PARAMETERS {
  /** f32 */
  WetDryMix: number;
  /** u32 */
  ReflectionsDelay: number;
  /** u8 */
  ReverbDelay: number;
  /** u8 */
  RearDelay: number;
  /** u8 */
  SideDelay: number;
  /** u8 */
  PositionLeft: number;
  /** u8 */
  PositionRight: number;
  /** u8 */
  PositionMatrixLeft: number;
  /** u8 */
  PositionMatrixRight: number;
  /** u8 */
  EarlyDiffusion: number;
  /** u8 */
  LateDiffusion: number;
  /** u8 */
  LowEQGain: number;
  /** u8 */
  LowEQCutoff: number;
  /** u8 */
  HighEQGain: number;
  /** u8 */
  HighEQCutoff: number;
  /** f32 */
  RoomFilterFreq: number;
  /** f32 */
  RoomFilterMain: number;
  /** f32 */
  RoomFilterHF: number;
  /** f32 */
  ReflectionsGain: number;
  /** f32 */
  ReverbGain: number;
  /** f32 */
  DecayTime: number;
  /** f32 */
  Density: number;
  /** f32 */
  RoomSize: number;
  /** Windows.Win32.Foundation.BOOL */
  DisableLateField: boolean;
}

export const sizeofXAUDIO2FX_REVERB_PARAMETERS = 64;

export function allocXAUDIO2FX_REVERB_PARAMETERS(data?: Partial<XAUDIO2FX_REVERB_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2FX_REVERB_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.WetDryMix !== undefined) view.setFloat32(0, Number(data.WetDryMix), true);
  // 0x04: u32
  if (data?.ReflectionsDelay !== undefined) view.setUint32(4, Number(data.ReflectionsDelay), true);
  // 0x08: u8
  if (data?.ReverbDelay !== undefined) view.setUint8(8, Number(data.ReverbDelay));
  // 0x09: u8
  if (data?.RearDelay !== undefined) view.setUint8(9, Number(data.RearDelay));
  // 0x0a: u8
  if (data?.SideDelay !== undefined) view.setUint8(10, Number(data.SideDelay));
  // 0x0b: u8
  if (data?.PositionLeft !== undefined) view.setUint8(11, Number(data.PositionLeft));
  // 0x0c: u8
  if (data?.PositionRight !== undefined) view.setUint8(12, Number(data.PositionRight));
  // 0x0d: u8
  if (data?.PositionMatrixLeft !== undefined) view.setUint8(13, Number(data.PositionMatrixLeft));
  // 0x0e: u8
  if (data?.PositionMatrixRight !== undefined) view.setUint8(14, Number(data.PositionMatrixRight));
  // 0x0f: u8
  if (data?.EarlyDiffusion !== undefined) view.setUint8(15, Number(data.EarlyDiffusion));
  // 0x10: u8
  if (data?.LateDiffusion !== undefined) view.setUint8(16, Number(data.LateDiffusion));
  // 0x11: u8
  if (data?.LowEQGain !== undefined) view.setUint8(17, Number(data.LowEQGain));
  // 0x12: u8
  if (data?.LowEQCutoff !== undefined) view.setUint8(18, Number(data.LowEQCutoff));
  // 0x13: u8
  if (data?.HighEQGain !== undefined) view.setUint8(19, Number(data.HighEQGain));
  // 0x14: u8
  if (data?.HighEQCutoff !== undefined) view.setUint8(20, Number(data.HighEQCutoff));
  // 0x15: f32
  if (data?.RoomFilterFreq !== undefined) view.setFloat32(21, Number(data.RoomFilterFreq), true);
  // 0x19: f32
  if (data?.RoomFilterMain !== undefined) view.setFloat32(25, Number(data.RoomFilterMain), true);
  // 0x1d: f32
  if (data?.RoomFilterHF !== undefined) view.setFloat32(29, Number(data.RoomFilterHF), true);
  // 0x21: f32
  if (data?.ReflectionsGain !== undefined) view.setFloat32(33, Number(data.ReflectionsGain), true);
  // 0x25: f32
  if (data?.ReverbGain !== undefined) view.setFloat32(37, Number(data.ReverbGain), true);
  // 0x29: f32
  if (data?.DecayTime !== undefined) view.setFloat32(41, Number(data.DecayTime), true);
  // 0x2d: f32
  if (data?.Density !== undefined) view.setFloat32(45, Number(data.Density), true);
  // 0x31: f32
  if (data?.RoomSize !== undefined) view.setFloat32(49, Number(data.RoomSize), true);
  // 0x35: i32
  if (data?.DisableLateField !== undefined) view.setInt32(53, Number(data.DisableLateField), true);
  // 0x39: pad7
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2FX_REVERB_I3DL2_PARAMETERS (size: 56)
 */
export interface XAUDIO2FX_REVERB_I3DL2_PARAMETERS {
  /** f32 */
  WetDryMix: number;
  /** i32 */
  Room: number;
  /** i32 */
  RoomHF: number;
  /** f32 */
  RoomRolloffFactor: number;
  /** f32 */
  DecayTime: number;
  /** f32 */
  DecayHFRatio: number;
  /** i32 */
  Reflections: number;
  /** f32 */
  ReflectionsDelay: number;
  /** i32 */
  Reverb: number;
  /** f32 */
  ReverbDelay: number;
  /** f32 */
  Diffusion: number;
  /** f32 */
  Density: number;
  /** f32 */
  HFReference: number;
}

export const sizeofXAUDIO2FX_REVERB_I3DL2_PARAMETERS = 56;

export function allocXAUDIO2FX_REVERB_I3DL2_PARAMETERS(data?: Partial<XAUDIO2FX_REVERB_I3DL2_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2FX_REVERB_I3DL2_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.WetDryMix !== undefined) view.setFloat32(0, Number(data.WetDryMix), true);
  // 0x04: i32
  if (data?.Room !== undefined) view.setInt32(4, Number(data.Room), true);
  // 0x08: i32
  if (data?.RoomHF !== undefined) view.setInt32(8, Number(data.RoomHF), true);
  // 0x0c: f32
  if (data?.RoomRolloffFactor !== undefined) view.setFloat32(12, Number(data.RoomRolloffFactor), true);
  // 0x10: f32
  if (data?.DecayTime !== undefined) view.setFloat32(16, Number(data.DecayTime), true);
  // 0x14: f32
  if (data?.DecayHFRatio !== undefined) view.setFloat32(20, Number(data.DecayHFRatio), true);
  // 0x18: i32
  if (data?.Reflections !== undefined) view.setInt32(24, Number(data.Reflections), true);
  // 0x1c: f32
  if (data?.ReflectionsDelay !== undefined) view.setFloat32(28, Number(data.ReflectionsDelay), true);
  // 0x20: i32
  if (data?.Reverb !== undefined) view.setInt32(32, Number(data.Reverb), true);
  // 0x24: f32
  if (data?.ReverbDelay !== undefined) view.setFloat32(36, Number(data.ReverbDelay), true);
  // 0x28: f32
  if (data?.Diffusion !== undefined) view.setFloat32(40, Number(data.Diffusion), true);
  // 0x2c: f32
  if (data?.Density !== undefined) view.setFloat32(44, Number(data.Density), true);
  // 0x30: f32
  if (data?.HFReference !== undefined) view.setFloat32(48, Number(data.HFReference), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfPosition (size: 16)
 */
export interface HrtfPosition {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
}

export const sizeofHrtfPosition = 16;

export function allocHrtfPosition(data?: Partial<HrtfPosition>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfPosition);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfOrientation (size: 8)
 */
export interface HrtfOrientation {
  /** array */
  element: Deno.PointerValue | null;
}

export const sizeofHrtfOrientation = 8;

export function allocHrtfOrientation(data?: Partial<HrtfOrientation>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfOrientation);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.element !== undefined) view.setBigUint64(0, data.element === null ? 0n : BigInt(util.toPointer(data.element)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDirectivity (size: 8)
 */
export interface HrtfDirectivity {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDirectivityType */
  type: HrtfDirectivityType;
  /** f32 */
  scaling: number;
}

export const sizeofHrtfDirectivity = 8;

export function allocHrtfDirectivity(data?: Partial<HrtfDirectivity>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDirectivity);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: f32
  if (data?.scaling !== undefined) view.setFloat32(4, Number(data.scaling), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDirectivityCardioid (size: 16)
 */
export interface HrtfDirectivityCardioid {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDirectivity */
  directivity: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  order: number;
}

export const sizeofHrtfDirectivityCardioid = 16;

export function allocHrtfDirectivityCardioid(data?: Partial<HrtfDirectivityCardioid>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDirectivityCardioid);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.directivity !== undefined) view.setBigUint64(0, data.directivity === null ? 0n : BigInt(util.toPointer(data.directivity)), true);
  // 0x08: f32
  if (data?.order !== undefined) view.setFloat32(8, Number(data.order), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDirectivityCone (size: 16)
 */
export interface HrtfDirectivityCone {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDirectivity */
  directivity: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  innerAngle: number;
  /** f32 */
  outerAngle: number;
}

export const sizeofHrtfDirectivityCone = 16;

export function allocHrtfDirectivityCone(data?: Partial<HrtfDirectivityCone>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDirectivityCone);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.directivity !== undefined) view.setBigUint64(0, data.directivity === null ? 0n : BigInt(util.toPointer(data.directivity)), true);
  // 0x08: f32
  if (data?.innerAngle !== undefined) view.setFloat32(8, Number(data.innerAngle), true);
  // 0x0c: f32
  if (data?.outerAngle !== undefined) view.setFloat32(12, Number(data.outerAngle), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDistanceDecay (size: 24)
 */
export interface HrtfDistanceDecay {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDistanceDecayType */
  type: HrtfDistanceDecayType;
  /** f32 */
  maxGain: number;
  /** f32 */
  minGain: number;
  /** f32 */
  unityGainDistance: number;
  /** f32 */
  cutoffDistance: number;
}

export const sizeofHrtfDistanceDecay = 24;

export function allocHrtfDistanceDecay(data?: Partial<HrtfDistanceDecay>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDistanceDecay);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: f32
  if (data?.maxGain !== undefined) view.setFloat32(4, Number(data.maxGain), true);
  // 0x08: f32
  if (data?.minGain !== undefined) view.setFloat32(8, Number(data.minGain), true);
  // 0x0c: f32
  if (data?.unityGainDistance !== undefined) view.setFloat32(12, Number(data.unityGainDistance), true);
  // 0x10: f32
  if (data?.cutoffDistance !== undefined) view.setFloat32(16, Number(data.cutoffDistance), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfApoInit (size: 16)
 */
export interface HrtfApoInit {
  /** ptr */
  distanceDecay: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  directivity: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHrtfApoInit = 16;

export function allocHrtfApoInit(data?: Partial<HrtfApoInit>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfApoInit);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.distanceDecay !== undefined) view.setBigUint64(0, data.distanceDecay === null ? 0n : BigInt(util.toPointer(data.distanceDecay)), true);
  // 0x08: pointer
  if (data?.directivity !== undefined) view.setBigUint64(8, data.directivity === null ? 0n : BigInt(util.toPointer(data.directivity)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMSTREAMHEADER (size: 72)
 */
export interface ACMSTREAMHEADER {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStatus: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** ptr */
  pbSrc: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbSrcLength: number;
  /** u32 */
  cbSrcLengthUsed: number;
  /** usize */
  dwSrcUser: Deno.PointerValue;
  /** ptr */
  pbDst: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbDstLength: number;
  /** u32 */
  cbDstLengthUsed: number;
  /** usize */
  dwDstUser: Deno.PointerValue;
  /** array */
  dwReservedDriver: Deno.PointerValue | null;
}

export const sizeofACMSTREAMHEADER = 72;

export function allocACMSTREAMHEADER(data?: Partial<ACMSTREAMHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofACMSTREAMHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStatus !== undefined) view.setUint32(4, Number(data.fdwStatus), true);
  // 0x08: usize
  if (data?.dwUser !== undefined) view.setBigUint64(8, BigInt(data.dwUser), true);
  // 0x10: pointer
  if (data?.pbSrc !== undefined) view.setBigUint64(16, data.pbSrc === null ? 0n : BigInt(util.toPointer(data.pbSrc)), true);
  // 0x18: u32
  if (data?.cbSrcLength !== undefined) view.setUint32(24, Number(data.cbSrcLength), true);
  // 0x1c: u32
  if (data?.cbSrcLengthUsed !== undefined) view.setUint32(28, Number(data.cbSrcLengthUsed), true);
  // 0x20: usize
  if (data?.dwSrcUser !== undefined) view.setBigUint64(32, BigInt(data.dwSrcUser), true);
  // 0x28: pointer
  if (data?.pbDst !== undefined) view.setBigUint64(40, data.pbDst === null ? 0n : BigInt(util.toPointer(data.pbDst)), true);
  // 0x30: u32
  if (data?.cbDstLength !== undefined) view.setUint32(48, Number(data.cbDstLength), true);
  // 0x34: u32
  if (data?.cbDstLengthUsed !== undefined) view.setUint32(52, Number(data.cbDstLengthUsed), true);
  // 0x38: usize
  if (data?.dwDstUser !== undefined) view.setBigUint64(56, BigInt(data.dwDstUser), true);
  // 0x40: pointer
  if (data?.dwReservedDriver !== undefined) view.setBigUint64(64, data.dwReservedDriver === null ? 0n : BigInt(util.toPointer(data.dwReservedDriver)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3DCONTENTPROTECTIONCAPS (size: 32)
 */
export interface D3DCONTENTPROTECTIONCAPS {
  /** u32 */
  Caps: number;
  /** System.Guid */
  KeyExchangeType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BufferAlignmentStart: number;
  /** u32 */
  BlockAlignmentSize: number;
  /** u64 */
  ProtectedMemorySize: Deno.PointerValue;
}

export const sizeofD3DCONTENTPROTECTIONCAPS = 32;

export function allocD3DCONTENTPROTECTIONCAPS(data?: Partial<D3DCONTENTPROTECTIONCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCONTENTPROTECTIONCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Caps !== undefined) view.setUint32(0, Number(data.Caps), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyExchangeType !== undefined) view.setBigUint64(8, data.KeyExchangeType === null ? 0n : BigInt(util.toPointer(data.KeyExchangeType)), true);
  // 0x10: u32
  if (data?.BufferAlignmentStart !== undefined) view.setUint32(16, Number(data.BufferAlignmentStart), true);
  // 0x14: u32
  if (data?.BlockAlignmentSize !== undefined) view.setUint32(20, Number(data.BlockAlignmentSize), true);
  // 0x18: u64
  if (data?.ProtectedMemorySize !== undefined) view.setBigUint64(24, BigInt(data.ProtectedMemorySize), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTIME (size: 16)
 */
export interface KSTIME {
  /** i64 */
  Time: Deno.PointerValue;
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofKSTIME = 16;

export function allocKSTIME(data?: Partial<KSTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTIME);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Time !== undefined) view.setBigInt64(0, BigInt(data.Time), true);
  // 0x08: u32
  if (data?.Numerator !== undefined) view.setUint32(8, Number(data.Numerator), true);
  // 0x0c: u32
  if (data?.Denominator !== undefined) view.setUint32(12, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAM_HEADER (size: 48)
 */
export interface KSSTREAM_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  TypeSpecificFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KSTIME */
  PresentationTime: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  Duration: Deno.PointerValue;
  /** u32 */
  FrameExtent: number;
  /** u32 */
  DataUsed: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  OptionsFlags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSSTREAM_HEADER = 48;

export function allocKSSTREAM_HEADER(data?: Partial<KSSTREAM_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAM_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.TypeSpecificFlags !== undefined) view.setUint32(4, Number(data.TypeSpecificFlags), true);
  // 0x08: pointer
  if (data?.PresentationTime !== undefined) view.setBigUint64(8, data.PresentationTime === null ? 0n : BigInt(util.toPointer(data.PresentationTime)), true);
  // 0x10: i64
  if (data?.Duration !== undefined) view.setBigInt64(16, BigInt(data.Duration), true);
  // 0x18: u32
  if (data?.FrameExtent !== undefined) view.setUint32(24, Number(data.FrameExtent), true);
  // 0x1c: u32
  if (data?.DataUsed !== undefined) view.setUint32(28, Number(data.DataUsed), true);
  // 0x20: pointer
  if (data?.Data !== undefined) view.setBigUint64(32, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  // 0x28: u32
  if (data?.OptionsFlags !== undefined) view.setUint32(40, Number(data.OptionsFlags), true);
  // 0x2c: u32
  if (data?.Reserved !== undefined) view.setUint32(44, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY (size: 16)
 */
export interface KSNODEPROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSNODEPROPERTY = 16;

export function allocKSNODEPROPERTY(data?: Partial<KSNODEPROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODEPROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NodeId !== undefined) view.setUint32(8, Number(data.NodeId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY_AUDIO_3D_LISTENER (size: 16)
 */
export interface KSNODEPROPERTY_AUDIO_3D_LISTENER {
  /** Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ListenerId: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSNODEPROPERTY_AUDIO_3D_LISTENER = 16;

export function allocKSNODEPROPERTY_AUDIO_3D_LISTENER(data?: Partial<KSNODEPROPERTY_AUDIO_3D_LISTENER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODEPROPERTY_AUDIO_3D_LISTENER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: pointer
  if (data?.ListenerId !== undefined) view.setBigUint64(8, data.ListenerId === null ? 0n : BigInt(util.toPointer(data.ListenerId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY_AUDIO_PROPERTY (size: 24)
 */
export interface KSNODEPROPERTY_AUDIO_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  AppContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Length: number;
}

export const sizeofKSNODEPROPERTY_AUDIO_PROPERTY = 24;

export function allocKSNODEPROPERTY_AUDIO_PROPERTY(data?: Partial<KSNODEPROPERTY_AUDIO_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODEPROPERTY_AUDIO_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: pointer
  if (data?.AppContext !== undefined) view.setBigUint64(8, data.AppContext === null ? 0n : BigInt(util.toPointer(data.AppContext)), true);
  // 0x10: u32
  if (data?.Length !== undefined) view.setUint32(16, Number(data.Length), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_VideoSample2 (size: 64)
 */
export interface DXVA_VideoSample2 {
  /** u32 */
  Size: number;
  /** u32 */
  Reserved: number;
  /** i64 */
  rtStart: Deno.PointerValue;
  /** i64 */
  rtEnd: Deno.PointerValue;
  /** u32 */
  SampleFormat: number;
  /** u32 */
  SampleFlags: number;
  /** ptr */
  lpDDSSrcSurface: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.RECT */
  rcSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcDst: Uint8Array | Deno.PointerValue | null;
  /** array */
  Palette: Deno.PointerValue | null;
}

export const sizeofDXVA_VideoSample2 = 64;

export function allocDXVA_VideoSample2(data?: Partial<DXVA_VideoSample2>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_VideoSample2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: i64
  if (data?.rtStart !== undefined) view.setBigInt64(8, BigInt(data.rtStart), true);
  // 0x10: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(16, BigInt(data.rtEnd), true);
  // 0x18: u32
  if (data?.SampleFormat !== undefined) view.setUint32(24, Number(data.SampleFormat), true);
  // 0x1c: u32
  if (data?.SampleFlags !== undefined) view.setUint32(28, Number(data.SampleFlags), true);
  // 0x20: pointer
  if (data?.lpDDSSrcSurface !== undefined) view.setBigUint64(32, data.lpDDSSrcSurface === null ? 0n : BigInt(util.toPointer(data.lpDDSSrcSurface)), true);
  // 0x28: pointer
  if (data?.rcSrc !== undefined) view.setBigUint64(40, data.rcSrc === null ? 0n : BigInt(util.toPointer(data.rcSrc)), true);
  // 0x30: pointer
  if (data?.rcDst !== undefined) view.setBigUint64(48, data.rcDst === null ? 0n : BigInt(util.toPointer(data.rcDst)), true);
  // 0x38: pointer
  if (data?.Palette !== undefined) view.setBigUint64(56, data.Palette === null ? 0n : BigInt(util.toPointer(data.Palette)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_VideoSample32 (size: 56)
 */
export interface DXVA_VideoSample32 {
  /** i64 */
  rtStart: Deno.PointerValue;
  /** i64 */
  rtEnd: Deno.PointerValue;
  /** u32 */
  SampleFormat: number;
  /** u32 */
  SampleFlags: number;
  /** u32 */
  lpDDSSrcSurface: number;
  /** Windows.Win32.Foundation.RECT */
  rcSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcDst: Uint8Array | Deno.PointerValue | null;
  /** array */
  Palette: Deno.PointerValue | null;
}

export const sizeofDXVA_VideoSample32 = 56;

export function allocDXVA_VideoSample32(data?: Partial<DXVA_VideoSample32>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_VideoSample32);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.rtStart !== undefined) view.setBigInt64(0, BigInt(data.rtStart), true);
  // 0x08: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(8, BigInt(data.rtEnd), true);
  // 0x10: u32
  if (data?.SampleFormat !== undefined) view.setUint32(16, Number(data.SampleFormat), true);
  // 0x14: u32
  if (data?.SampleFlags !== undefined) view.setUint32(20, Number(data.SampleFlags), true);
  // 0x18: u32
  if (data?.lpDDSSrcSurface !== undefined) view.setUint32(24, Number(data.lpDDSSrcSurface), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rcSrc !== undefined) view.setBigUint64(32, data.rcSrc === null ? 0n : BigInt(util.toPointer(data.rcSrc)), true);
  // 0x28: pointer
  if (data?.rcDst !== undefined) view.setBigUint64(40, data.rcDst === null ? 0n : BigInt(util.toPointer(data.rcDst)), true);
  // 0x30: pointer
  if (data?.Palette !== undefined) view.setBigUint64(48, data.Palette === null ? 0n : BigInt(util.toPointer(data.Palette)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_AYUVsample2 (size: 8)
 */
export interface DXVA_AYUVsample2 {
  /** u8 */
  bCrValue: number;
  /** u8 */
  bCbValue: number;
  /** u8 */
  bY_Value: number;
  /** u8 */
  bSampleAlpha8: number;
}

export const sizeofDXVA_AYUVsample2 = 8;

export function allocDXVA_AYUVsample2(data?: Partial<DXVA_AYUVsample2>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_AYUVsample2);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bCrValue !== undefined) view.setUint8(0, Number(data.bCrValue));
  // 0x01: u8
  if (data?.bCbValue !== undefined) view.setUint8(1, Number(data.bCbValue));
  // 0x02: u8
  if (data?.bY_Value !== undefined) view.setUint8(2, Number(data.bY_Value));
  // 0x03: u8
  if (data?.bSampleAlpha8 !== undefined) view.setUint8(3, Number(data.bSampleAlpha8));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceBltEx32 (size: 56)
 */
export interface DXVA_DeinterlaceBltEx32 {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA_AYUVsample2 */
  BackgroundColor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  rtTarget: Deno.PointerValue;
  /** u32 */
  NumSourceSurfaces: number;
  /** f32 */
  Alpha: number;
  /** array */
  Source: Deno.PointerValue | null;
  /** u32 */
  DestinationFormat: number;
  /** u32 */
  DestinationFlags: number;
}

export const sizeofDXVA_DeinterlaceBltEx32 = 56;

export function allocDXVA_DeinterlaceBltEx32(data?: Partial<DXVA_DeinterlaceBltEx32>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceBltEx32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(8, data.BackgroundColor === null ? 0n : BigInt(util.toPointer(data.BackgroundColor)), true);
  // 0x10: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(16, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x18: i64
  if (data?.rtTarget !== undefined) view.setBigInt64(24, BigInt(data.rtTarget), true);
  // 0x20: u32
  if (data?.NumSourceSurfaces !== undefined) view.setUint32(32, Number(data.NumSourceSurfaces), true);
  // 0x24: f32
  if (data?.Alpha !== undefined) view.setFloat32(36, Number(data.Alpha), true);
  // 0x28: pointer
  if (data?.Source !== undefined) view.setBigUint64(40, data.Source === null ? 0n : BigInt(util.toPointer(data.Source)), true);
  // 0x30: u32
  if (data?.DestinationFormat !== undefined) view.setUint32(48, Number(data.DestinationFormat), true);
  // 0x34: u32
  if (data?.DestinationFlags !== undefined) view.setUint32(52, Number(data.DestinationFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEHDR (size: 48)
 */
export interface WAVEHDR {
  /** Windows.Win32.Foundation.PSTR */
  lpData: string | null;
  /** u32 */
  dwBufferLength: number;
  /** u32 */
  dwBytesRecorded: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwLoops: number;
  /** ptr */
  lpNext: Deno.PointerValue | Uint8Array | null;
  /** usize */
  reserved: Deno.PointerValue;
}

export const sizeofWAVEHDR = 48;

export function allocWAVEHDR(data?: Partial<WAVEHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEHDR);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwBufferLength !== undefined) view.setUint32(8, Number(data.dwBufferLength), true);
  // 0x0c: u32
  if (data?.dwBytesRecorded !== undefined) view.setUint32(12, Number(data.dwBytesRecorded), true);
  // 0x10: usize
  if (data?.dwUser !== undefined) view.setBigUint64(16, BigInt(data.dwUser), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: u32
  if (data?.dwLoops !== undefined) view.setUint32(28, Number(data.dwLoops), true);
  // 0x20: pointer
  if (data?.lpNext !== undefined) view.setBigUint64(32, data.lpNext === null ? 0n : BigInt(util.toPointer(data.lpNext)), true);
  // 0x28: usize
  if (data?.reserved !== undefined) view.setBigUint64(40, BigInt(data.reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEOUTCAPSA (size: 32)
 */
export interface WAVEOUTCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofWAVEOUTCAPSA = 32;

export function allocWAVEOUTCAPSA(data?: Partial<WAVEOUTCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEOUTCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEOUTCAPSW (size: 32)
 */
export interface WAVEOUTCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofWAVEOUTCAPSW = 32;

export function allocWAVEOUTCAPSW(data?: Partial<WAVEOUTCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEOUTCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEOUTCAPS2A (size: 56)
 */
export interface WAVEOUTCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAVEOUTCAPS2A = 56;

export function allocWAVEOUTCAPS2A(data?: Partial<WAVEOUTCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEOUTCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(32, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x28: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(40, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x30: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(48, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEOUTCAPS2W (size: 56)
 */
export interface WAVEOUTCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAVEOUTCAPS2W = 56;

export function allocWAVEOUTCAPS2W(data?: Partial<WAVEOUTCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEOUTCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(32, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x28: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(40, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x30: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(48, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEINCAPSA (size: 24)
 */
export interface WAVEINCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
}

export const sizeofWAVEINCAPSA = 24;

export function allocWAVEINCAPSA(data?: Partial<WAVEINCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEINCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEINCAPSW (size: 24)
 */
export interface WAVEINCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
}

export const sizeofWAVEINCAPSW = 24;

export function allocWAVEINCAPSW(data?: Partial<WAVEINCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEINCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEINCAPS2A (size: 48)
 */
export interface WAVEINCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAVEINCAPS2A = 48;

export function allocWAVEINCAPS2A(data?: Partial<WAVEINCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEINCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEINCAPS2W (size: 48)
 */
export interface WAVEINCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAVEINCAPS2W = 48;

export function allocWAVEINCAPS2W(data?: Partial<WAVEINCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEINCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEFORMAT (size: 16)
 */
export interface WAVEFORMAT {
  /** u16 */
  wFormatTag: number;
  /** u16 */
  nChannels: number;
  /** u32 */
  nSamplesPerSec: number;
  /** u32 */
  nAvgBytesPerSec: number;
  /** u16 */
  nBlockAlign: number;
}

export const sizeofWAVEFORMAT = 16;

export function allocWAVEFORMAT(data?: Partial<WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wFormatTag !== undefined) view.setUint16(0, Number(data.wFormatTag), true);
  // 0x02: u16
  if (data?.nChannels !== undefined) view.setUint16(2, Number(data.nChannels), true);
  // 0x04: u32
  if (data?.nSamplesPerSec !== undefined) view.setUint32(4, Number(data.nSamplesPerSec), true);
  // 0x08: u32
  if (data?.nAvgBytesPerSec !== undefined) view.setUint32(8, Number(data.nAvgBytesPerSec), true);
  // 0x0c: u16
  if (data?.nBlockAlign !== undefined) view.setUint16(12, Number(data.nBlockAlign), true);
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.Media.Audio.PCMWAVEFORMAT (size: 16)
 */
export interface PCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMAT */
  wf: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wBitsPerSample: number;
}

export const sizeofPCMWAVEFORMAT = 16;

export function allocPCMWAVEFORMAT(data?: Partial<PCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wf !== undefined) view.setBigUint64(0, data.wf === null ? 0n : BigInt(util.toPointer(data.wf)), true);
  // 0x08: u16
  if (data?.wBitsPerSample !== undefined) view.setUint16(8, Number(data.wBitsPerSample), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIOUTCAPSA (size: 32)
 */
export interface MIDIOUTCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wVoices: number;
  /** u16 */
  wNotes: number;
  /** u16 */
  wChannelMask: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofMIDIOUTCAPSA = 32;

export function allocMIDIOUTCAPSA(data?: Partial<MIDIOUTCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOUTCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wVoices !== undefined) view.setUint16(18, Number(data.wVoices), true);
  // 0x14: u16
  if (data?.wNotes !== undefined) view.setUint16(20, Number(data.wNotes), true);
  // 0x16: u16
  if (data?.wChannelMask !== undefined) view.setUint16(22, Number(data.wChannelMask), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIOUTCAPSW (size: 32)
 */
export interface MIDIOUTCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wVoices: number;
  /** u16 */
  wNotes: number;
  /** u16 */
  wChannelMask: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofMIDIOUTCAPSW = 32;

export function allocMIDIOUTCAPSW(data?: Partial<MIDIOUTCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOUTCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wVoices !== undefined) view.setUint16(18, Number(data.wVoices), true);
  // 0x14: u16
  if (data?.wNotes !== undefined) view.setUint16(20, Number(data.wNotes), true);
  // 0x16: u16
  if (data?.wChannelMask !== undefined) view.setUint16(22, Number(data.wChannelMask), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIOUTCAPS2A (size: 56)
 */
export interface MIDIOUTCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wVoices: number;
  /** u16 */
  wNotes: number;
  /** u16 */
  wChannelMask: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIDIOUTCAPS2A = 56;

export function allocMIDIOUTCAPS2A(data?: Partial<MIDIOUTCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOUTCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wVoices !== undefined) view.setUint16(18, Number(data.wVoices), true);
  // 0x14: u16
  if (data?.wNotes !== undefined) view.setUint16(20, Number(data.wNotes), true);
  // 0x16: u16
  if (data?.wChannelMask !== undefined) view.setUint16(22, Number(data.wChannelMask), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(32, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x28: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(40, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x30: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(48, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIOUTCAPS2W (size: 56)
 */
export interface MIDIOUTCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wVoices: number;
  /** u16 */
  wNotes: number;
  /** u16 */
  wChannelMask: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIDIOUTCAPS2W = 56;

export function allocMIDIOUTCAPS2W(data?: Partial<MIDIOUTCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOUTCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wVoices !== undefined) view.setUint16(18, Number(data.wVoices), true);
  // 0x14: u16
  if (data?.wNotes !== undefined) view.setUint16(20, Number(data.wNotes), true);
  // 0x16: u16
  if (data?.wChannelMask !== undefined) view.setUint16(22, Number(data.wChannelMask), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(32, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x28: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(40, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x30: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(48, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIINCAPSA (size: 24)
 */
export interface MIDIINCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwSupport: number;
}

export const sizeofMIDIINCAPSA = 24;

export function allocMIDIINCAPSA(data?: Partial<MIDIINCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIINCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwSupport !== undefined) view.setUint32(16, Number(data.dwSupport), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIINCAPSW (size: 24)
 */
export interface MIDIINCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwSupport: number;
}

export const sizeofMIDIINCAPSW = 24;

export function allocMIDIINCAPSW(data?: Partial<MIDIINCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIINCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwSupport !== undefined) view.setUint32(16, Number(data.dwSupport), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIINCAPS2A (size: 48)
 */
export interface MIDIINCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIDIINCAPS2A = 48;

export function allocMIDIINCAPS2A(data?: Partial<MIDIINCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIINCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwSupport !== undefined) view.setUint32(16, Number(data.dwSupport), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIINCAPS2W (size: 48)
 */
export interface MIDIINCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIDIINCAPS2W = 48;

export function allocMIDIINCAPS2W(data?: Partial<MIDIINCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIINCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwSupport !== undefined) view.setUint32(16, Number(data.dwSupport), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIHDR (size: 64)
 */
export interface MIDIHDR {
  /** Windows.Win32.Foundation.PSTR */
  lpData: string | null;
  /** u32 */
  dwBufferLength: number;
  /** u32 */
  dwBytesRecorded: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpNext: Deno.PointerValue | Uint8Array | null;
  /** usize */
  reserved: Deno.PointerValue;
  /** u32 */
  dwOffset: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofMIDIHDR = 64;

export function allocMIDIHDR(data?: Partial<MIDIHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIHDR);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwBufferLength !== undefined) view.setUint32(8, Number(data.dwBufferLength), true);
  // 0x0c: u32
  if (data?.dwBytesRecorded !== undefined) view.setUint32(12, Number(data.dwBytesRecorded), true);
  // 0x10: usize
  if (data?.dwUser !== undefined) view.setBigUint64(16, BigInt(data.dwUser), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpNext !== undefined) view.setBigUint64(32, data.lpNext === null ? 0n : BigInt(util.toPointer(data.lpNext)), true);
  // 0x28: usize
  if (data?.reserved !== undefined) view.setBigUint64(40, BigInt(data.reserved), true);
  // 0x30: u32
  if (data?.dwOffset !== undefined) view.setUint32(48, Number(data.dwOffset), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(56, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIEVENT (size: 24)
 */
export interface MIDIEVENT {
  /** u32 */
  dwDeltaTime: number;
  /** u32 */
  dwStreamID: number;
  /** u32 */
  dwEvent: number;
  /** array */
  dwParms: Deno.PointerValue | null;
}

export const sizeofMIDIEVENT = 24;

export function allocMIDIEVENT(data?: Partial<MIDIEVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIEVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDeltaTime !== undefined) view.setUint32(0, Number(data.dwDeltaTime), true);
  // 0x04: u32
  if (data?.dwStreamID !== undefined) view.setUint32(4, Number(data.dwStreamID), true);
  // 0x08: u32
  if (data?.dwEvent !== undefined) view.setUint32(8, Number(data.dwEvent), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dwParms !== undefined) view.setBigUint64(16, data.dwParms === null ? 0n : BigInt(util.toPointer(data.dwParms)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDISTRMBUFFVER (size: 16)
 */
export interface MIDISTRMBUFFVER {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwMid: number;
  /** u32 */
  dwOEMVersion: number;
}

export const sizeofMIDISTRMBUFFVER = 16;

export function allocMIDISTRMBUFFVER(data?: Partial<MIDISTRMBUFFVER>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDISTRMBUFFVER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwMid !== undefined) view.setUint32(4, Number(data.dwMid), true);
  // 0x08: u32
  if (data?.dwOEMVersion !== undefined) view.setUint32(8, Number(data.dwOEMVersion), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIPROPTIMEDIV (size: 8)
 */
export interface MIDIPROPTIMEDIV {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwTimeDiv: number;
}

export const sizeofMIDIPROPTIMEDIV = 8;

export function allocMIDIPROPTIMEDIV(data?: Partial<MIDIPROPTIMEDIV>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIPROPTIMEDIV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwTimeDiv !== undefined) view.setUint32(4, Number(data.dwTimeDiv), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIPROPTEMPO (size: 8)
 */
export interface MIDIPROPTEMPO {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwTempo: number;
}

export const sizeofMIDIPROPTEMPO = 8;

export function allocMIDIPROPTEMPO(data?: Partial<MIDIPROPTEMPO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIPROPTEMPO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwTempo !== undefined) view.setUint32(4, Number(data.dwTempo), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUXCAPSA (size: 24)
 */
export interface AUXCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofAUXCAPSA = 24;

export function allocAUXCAPSA(data?: Partial<AUXCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofAUXCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wReserved1 !== undefined) view.setUint16(18, Number(data.wReserved1), true);
  // 0x14: u32
  if (data?.dwSupport !== undefined) view.setUint32(20, Number(data.dwSupport), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUXCAPSW (size: 24)
 */
export interface AUXCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofAUXCAPSW = 24;

export function allocAUXCAPSW(data?: Partial<AUXCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofAUXCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wReserved1 !== undefined) view.setUint16(18, Number(data.wReserved1), true);
  // 0x14: u32
  if (data?.dwSupport !== undefined) view.setUint32(20, Number(data.dwSupport), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUXCAPS2A (size: 48)
 */
export interface AUXCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUXCAPS2A = 48;

export function allocAUXCAPS2A(data?: Partial<AUXCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofAUXCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wReserved1 !== undefined) view.setUint16(18, Number(data.wReserved1), true);
  // 0x14: u32
  if (data?.dwSupport !== undefined) view.setUint32(20, Number(data.dwSupport), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUXCAPS2W (size: 48)
 */
export interface AUXCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUXCAPS2W = 48;

export function allocAUXCAPS2W(data?: Partial<AUXCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofAUXCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wReserved1 !== undefined) view.setUint16(18, Number(data.wReserved1), true);
  // 0x14: u32
  if (data?.dwSupport !== undefined) view.setUint32(20, Number(data.dwSupport), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCAPSA (size: 24)
 */
export interface MIXERCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cDestinations: number;
}

export const sizeofMIXERCAPSA = 24;

export function allocMIXERCAPSA(data?: Partial<MIXERCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cDestinations !== undefined) view.setUint32(20, Number(data.cDestinations), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCAPSW (size: 24)
 */
export interface MIXERCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cDestinations: number;
}

export const sizeofMIXERCAPSW = 24;

export function allocMIXERCAPSW(data?: Partial<MIXERCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cDestinations !== undefined) view.setUint32(20, Number(data.cDestinations), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCAPS2A (size: 48)
 */
export interface MIXERCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cDestinations: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERCAPS2A = 48;

export function allocMIXERCAPS2A(data?: Partial<MIXERCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cDestinations !== undefined) view.setUint32(20, Number(data.cDestinations), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCAPS2W (size: 48)
 */
export interface MIXERCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cDestinations: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERCAPS2W = 48;

export function allocMIXERCAPS2W(data?: Partial<MIXERCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cDestinations !== undefined) view.setUint32(20, Number(data.cDestinations), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * _Target_e__Struct (size: 24)
 */
export interface _Target_e__Struct {
  /** u32 */
  dwType: number;
  /** u32 */
  dwDeviceID: number;
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
}

export const sizeof_Target_e__Struct = 24;

export function alloc_Target_e__Struct(data?: Partial<_Target_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Target_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: u32
  if (data?.dwDeviceID !== undefined) view.setUint32(4, Number(data.dwDeviceID), true);
  // 0x08: u16
  if (data?.wMid !== undefined) view.setUint16(8, Number(data.wMid), true);
  // 0x0a: u16
  if (data?.wPid !== undefined) view.setUint16(10, Number(data.wPid), true);
  // 0x0c: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(12, Number(data.vDriverVersion), true);
  // 0x10: pointer
  if (data?.szPname !== undefined) view.setBigUint64(16, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERLINEA (size: 72)
 */
export interface MIXERLINEA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwDestination: number;
  /** u32 */
  dwSource: number;
  /** u32 */
  dwLineID: number;
  /** u32 */
  fdwLine: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** Windows.Win32.Media.Audio.MIXERLINE_COMPONENTTYPE */
  dwComponentType: MIXERLINE_COMPONENTTYPE;
  /** u32 */
  cChannels: number;
  /** u32 */
  cConnections: number;
  /** u32 */
  cControls: number;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** _Target_e__Struct */
  Target: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERLINEA = 72;

export function allocMIXERLINEA(data?: Partial<MIXERLINEA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERLINEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwDestination !== undefined) view.setUint32(4, Number(data.dwDestination), true);
  // 0x08: u32
  if (data?.dwSource !== undefined) view.setUint32(8, Number(data.dwSource), true);
  // 0x0c: u32
  if (data?.dwLineID !== undefined) view.setUint32(12, Number(data.dwLineID), true);
  // 0x10: u32
  if (data?.fdwLine !== undefined) view.setUint32(16, Number(data.fdwLine), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.dwUser !== undefined) view.setBigUint64(24, BigInt(data.dwUser), true);
  // 0x20: u32
  if (data?.dwComponentType !== undefined) view.setUint32(32, Number(data.dwComponentType), true);
  // 0x24: u32
  if (data?.cChannels !== undefined) view.setUint32(36, Number(data.cChannels), true);
  // 0x28: u32
  if (data?.cConnections !== undefined) view.setUint32(40, Number(data.cConnections), true);
  // 0x2c: u32
  if (data?.cControls !== undefined) view.setUint32(44, Number(data.cControls), true);
  // 0x30: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(48, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x38: pointer
  if (data?.szName !== undefined) view.setBigUint64(56, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x40: pointer
  if (data?.Target !== undefined) view.setBigUint64(64, data.Target === null ? 0n : BigInt(util.toPointer(data.Target)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERLINEW (size: 72)
 */
export interface MIXERLINEW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwDestination: number;
  /** u32 */
  dwSource: number;
  /** u32 */
  dwLineID: number;
  /** u32 */
  fdwLine: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** Windows.Win32.Media.Audio.MIXERLINE_COMPONENTTYPE */
  dwComponentType: MIXERLINE_COMPONENTTYPE;
  /** u32 */
  cChannels: number;
  /** u32 */
  cConnections: number;
  /** u32 */
  cControls: number;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** _Target_e__Struct */
  Target: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERLINEW = 72;

export function allocMIXERLINEW(data?: Partial<MIXERLINEW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERLINEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwDestination !== undefined) view.setUint32(4, Number(data.dwDestination), true);
  // 0x08: u32
  if (data?.dwSource !== undefined) view.setUint32(8, Number(data.dwSource), true);
  // 0x0c: u32
  if (data?.dwLineID !== undefined) view.setUint32(12, Number(data.dwLineID), true);
  // 0x10: u32
  if (data?.fdwLine !== undefined) view.setUint32(16, Number(data.fdwLine), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.dwUser !== undefined) view.setBigUint64(24, BigInt(data.dwUser), true);
  // 0x20: u32
  if (data?.dwComponentType !== undefined) view.setUint32(32, Number(data.dwComponentType), true);
  // 0x24: u32
  if (data?.cChannels !== undefined) view.setUint32(36, Number(data.cChannels), true);
  // 0x28: u32
  if (data?.cConnections !== undefined) view.setUint32(40, Number(data.cConnections), true);
  // 0x2c: u32
  if (data?.cControls !== undefined) view.setUint32(44, Number(data.cControls), true);
  // 0x30: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(48, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x38: pointer
  if (data?.szName !== undefined) view.setBigUint64(56, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x40: pointer
  if (data?.Target !== undefined) view.setBigUint64(64, data.Target === null ? 0n : BigInt(util.toPointer(data.Target)), true);
  return buf;
}

/**
 * _Anonymous1_e__Struct (size: 24)
 */
export interface _Anonymous1_e__Struct {
  /** f32 */
  m11: number;
  /** f32 */
  m12: number;
  /** f32 */
  m21: number;
  /** f32 */
  m22: number;
  /** f32 */
  dx: number;
  /** f32 */
  dy: number;
}

export const sizeof_Anonymous1_e__Struct = 24;

export function alloc_Anonymous1_e__Struct(data?: Partial<_Anonymous1_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.m11 !== undefined) view.setFloat32(0, Number(data.m11), true);
  // 0x04: f32
  if (data?.m12 !== undefined) view.setFloat32(4, Number(data.m12), true);
  // 0x08: f32
  if (data?.m21 !== undefined) view.setFloat32(8, Number(data.m21), true);
  // 0x0c: f32
  if (data?.m22 !== undefined) view.setFloat32(12, Number(data.m22), true);
  // 0x10: f32
  if (data?.dx !== undefined) view.setFloat32(16, Number(data.dx), true);
  // 0x14: f32
  if (data?.dy !== undefined) view.setFloat32(20, Number(data.dy), true);
  return buf;
}

/**
 * _Anonymous2_e__Struct (size: 24)
 */
export interface _Anonymous2_e__Struct {
  /** f32 */
  _11: number;
  /** f32 */
  _12: number;
  /** f32 */
  _21: number;
  /** f32 */
  _22: number;
  /** f32 */
  _31: number;
  /** f32 */
  _32: number;
}

export const sizeof_Anonymous2_e__Struct = 24;

export function alloc_Anonymous2_e__Struct(data?: Partial<_Anonymous2_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?._11 !== undefined) view.setFloat32(0, Number(data._11), true);
  // 0x04: f32
  if (data?._12 !== undefined) view.setFloat32(4, Number(data._12), true);
  // 0x08: f32
  if (data?._21 !== undefined) view.setFloat32(8, Number(data._21), true);
  // 0x0c: f32
  if (data?._22 !== undefined) view.setFloat32(12, Number(data._22), true);
  // 0x10: f32
  if (data?._31 !== undefined) view.setFloat32(16, Number(data._31), true);
  // 0x14: f32
  if (data?._32 !== undefined) view.setFloat32(20, Number(data._32), true);
  return buf;
}

/**
 * _Bounds_e__Union (size: 24)
 */
export interface _Bounds_e__Union {
  /** _Anonymous1_e__Struct */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Struct */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeof_Bounds_e__Union = 24;

export function alloc_Bounds_e__Union(data?: Partial<_Bounds_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Bounds_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x10: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(16, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * _Metrics_e__Union (size: 16)
 */
export interface _Metrics_e__Union {
  /** u32 */
  cSteps: number;
  /** u32 */
  cbCustomData: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeof_Metrics_e__Union = 16;

export function alloc_Metrics_e__Union(data?: Partial<_Metrics_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Metrics_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cSteps !== undefined) view.setUint32(0, Number(data.cSteps), true);
  // 0x04: u32
  if (data?.cbCustomData !== undefined) view.setUint32(4, Number(data.cbCustomData), true);
  // 0x08: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(8, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLA (size: 56)
 */
export interface MIXERCONTROLA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwControlID: number;
  /** u32 */
  dwControlType: number;
  /** u32 */
  fdwControl: number;
  /** u32 */
  cMultipleItems: number;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** _Bounds_e__Union */
  Bounds: Uint8Array | Deno.PointerValue | null;
  /** _Metrics_e__Union */
  Metrics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERCONTROLA = 56;

export function allocMIXERCONTROLA(data?: Partial<MIXERCONTROLA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwControlID !== undefined) view.setUint32(4, Number(data.dwControlID), true);
  // 0x08: u32
  if (data?.dwControlType !== undefined) view.setUint32(8, Number(data.dwControlType), true);
  // 0x0c: u32
  if (data?.fdwControl !== undefined) view.setUint32(12, Number(data.fdwControl), true);
  // 0x10: u32
  if (data?.cMultipleItems !== undefined) view.setUint32(16, Number(data.cMultipleItems), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(24, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x20: pointer
  if (data?.szName !== undefined) view.setBigUint64(32, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x28: pointer
  if (data?.Bounds !== undefined) view.setBigUint64(40, data.Bounds === null ? 0n : BigInt(util.toPointer(data.Bounds)), true);
  // 0x30: pointer
  if (data?.Metrics !== undefined) view.setBigUint64(48, data.Metrics === null ? 0n : BigInt(util.toPointer(data.Metrics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLW (size: 56)
 */
export interface MIXERCONTROLW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwControlID: number;
  /** u32 */
  dwControlType: number;
  /** u32 */
  fdwControl: number;
  /** u32 */
  cMultipleItems: number;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** _Bounds_e__Union */
  Bounds: Uint8Array | Deno.PointerValue | null;
  /** _Metrics_e__Union */
  Metrics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERCONTROLW = 56;

export function allocMIXERCONTROLW(data?: Partial<MIXERCONTROLW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwControlID !== undefined) view.setUint32(4, Number(data.dwControlID), true);
  // 0x08: u32
  if (data?.dwControlType !== undefined) view.setUint32(8, Number(data.dwControlType), true);
  // 0x0c: u32
  if (data?.fdwControl !== undefined) view.setUint32(12, Number(data.fdwControl), true);
  // 0x10: u32
  if (data?.cMultipleItems !== undefined) view.setUint32(16, Number(data.cMultipleItems), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(24, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x20: pointer
  if (data?.szName !== undefined) view.setBigUint64(32, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x28: pointer
  if (data?.Bounds !== undefined) view.setBigUint64(40, data.Bounds === null ? 0n : BigInt(util.toPointer(data.Bounds)), true);
  // 0x30: pointer
  if (data?.Metrics !== undefined) view.setBigUint64(48, data.Metrics === null ? 0n : BigInt(util.toPointer(data.Metrics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERLINECONTROLSA (size: 32)
 */
export interface MIXERLINECONTROLSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwLineID: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cControls: number;
  /** u32 */
  cbmxctrl: number;
  /** ptr */
  pamxctrl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIXERLINECONTROLSA = 32;

export function allocMIXERLINECONTROLSA(data?: Partial<MIXERLINECONTROLSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERLINECONTROLSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwLineID !== undefined) view.setUint32(4, Number(data.dwLineID), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.cControls !== undefined) view.setUint32(16, Number(data.cControls), true);
  // 0x14: u32
  if (data?.cbmxctrl !== undefined) view.setUint32(20, Number(data.cbmxctrl), true);
  // 0x18: pointer
  if (data?.pamxctrl !== undefined) view.setBigUint64(24, data.pamxctrl === null ? 0n : BigInt(util.toPointer(data.pamxctrl)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERLINECONTROLSW (size: 32)
 */
export interface MIXERLINECONTROLSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwLineID: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cControls: number;
  /** u32 */
  cbmxctrl: number;
  /** ptr */
  pamxctrl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIXERLINECONTROLSW = 32;

export function allocMIXERLINECONTROLSW(data?: Partial<MIXERLINECONTROLSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERLINECONTROLSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwLineID !== undefined) view.setUint32(4, Number(data.dwLineID), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.cControls !== undefined) view.setUint32(16, Number(data.cControls), true);
  // 0x14: u32
  if (data?.cbmxctrl !== undefined) view.setUint32(20, Number(data.cbmxctrl), true);
  // 0x18: pointer
  if (data?.pamxctrl !== undefined) view.setBigUint64(24, data.pamxctrl === null ? 0n : BigInt(util.toPointer(data.pamxctrl)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS (size: 40)
 */
export interface MIXERCONTROLDETAILS {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwControlID: number;
  /** u32 */
  cChannels: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbDetails: number;
  /** ptr */
  paDetails: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIXERCONTROLDETAILS = 40;

export function allocMIXERCONTROLDETAILS(data?: Partial<MIXERCONTROLDETAILS>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwControlID !== undefined) view.setUint32(4, Number(data.dwControlID), true);
  // 0x08: u32
  if (data?.cChannels !== undefined) view.setUint32(8, Number(data.cChannels), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: u32
  if (data?.cbDetails !== undefined) view.setUint32(24, Number(data.cbDetails), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.paDetails !== undefined) view.setBigUint64(32, data.paDetails === null ? 0n : BigInt(util.toPointer(data.paDetails)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS_LISTTEXTA (size: 16)
 */
export interface MIXERCONTROLDETAILS_LISTTEXTA {
  /** u32 */
  dwParam1: number;
  /** u32 */
  dwParam2: number;
  /** array */
  szName: Deno.PointerValue | null;
}

export const sizeofMIXERCONTROLDETAILS_LISTTEXTA = 16;

export function allocMIXERCONTROLDETAILS_LISTTEXTA(data?: Partial<MIXERCONTROLDETAILS_LISTTEXTA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS_LISTTEXTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwParam1 !== undefined) view.setUint32(0, Number(data.dwParam1), true);
  // 0x04: u32
  if (data?.dwParam2 !== undefined) view.setUint32(4, Number(data.dwParam2), true);
  // 0x08: pointer
  if (data?.szName !== undefined) view.setBigUint64(8, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS_LISTTEXTW (size: 16)
 */
export interface MIXERCONTROLDETAILS_LISTTEXTW {
  /** u32 */
  dwParam1: number;
  /** u32 */
  dwParam2: number;
  /** array */
  szName: Deno.PointerValue | null;
}

export const sizeofMIXERCONTROLDETAILS_LISTTEXTW = 16;

export function allocMIXERCONTROLDETAILS_LISTTEXTW(data?: Partial<MIXERCONTROLDETAILS_LISTTEXTW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS_LISTTEXTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwParam1 !== undefined) view.setUint32(0, Number(data.dwParam1), true);
  // 0x04: u32
  if (data?.dwParam2 !== undefined) view.setUint32(4, Number(data.dwParam2), true);
  // 0x08: pointer
  if (data?.szName !== undefined) view.setBigUint64(8, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS_BOOLEAN (size: 8)
 */
export interface MIXERCONTROLDETAILS_BOOLEAN {
  /** i32 */
  fValue: number;
}

export const sizeofMIXERCONTROLDETAILS_BOOLEAN = 8;

export function allocMIXERCONTROLDETAILS_BOOLEAN(data?: Partial<MIXERCONTROLDETAILS_BOOLEAN>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS_BOOLEAN);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fValue !== undefined) view.setInt32(0, Number(data.fValue), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS_SIGNED (size: 8)
 */
export interface MIXERCONTROLDETAILS_SIGNED {
  /** i32 */
  lValue: number;
}

export const sizeofMIXERCONTROLDETAILS_SIGNED = 8;

export function allocMIXERCONTROLDETAILS_SIGNED(data?: Partial<MIXERCONTROLDETAILS_SIGNED>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS_SIGNED);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lValue !== undefined) view.setInt32(0, Number(data.lValue), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS_UNSIGNED (size: 8)
 */
export interface MIXERCONTROLDETAILS_UNSIGNED {
  /** u32 */
  dwValue: number;
}

export const sizeofMIXERCONTROLDETAILS_UNSIGNED = 8;

export function allocMIXERCONTROLDETAILS_UNSIGNED(data?: Partial<MIXERCONTROLDETAILS_UNSIGNED>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS_UNSIGNED);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AudioClientProperties (size: 16)
 */
export interface AudioClientProperties {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.BOOL */
  bIsOffload: boolean;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  eCategory: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Media.Audio.AUDCLNT_STREAMOPTIONS */
  Options: AUDCLNT_STREAMOPTIONS;
}

export const sizeofAudioClientProperties = 16;

export function allocAudioClientProperties(data?: Partial<AudioClientProperties>): Uint8Array {
  const buf = new Uint8Array(sizeofAudioClientProperties);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.bIsOffload !== undefined) view.setInt32(4, Number(data.bIsOffload), true);
  // 0x08: i32
  if (data?.eCategory !== undefined) view.setInt32(8, Number(data.eCategory), true);
  // 0x0c: u32
  if (data?.Options !== undefined) view.setUint32(12, Number(data.Options), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AudioClient3ActivationParams (size: 8)
 */
export interface AudioClient3ActivationParams {
  /** System.Guid */
  tracingContextId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAudioClient3ActivationParams = 8;

export function allocAudioClient3ActivationParams(data?: Partial<AudioClient3ActivationParams>): Uint8Array {
  const buf = new Uint8Array(sizeofAudioClient3ActivationParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tracingContextId !== undefined) view.setBigUint64(0, data.tracingContextId === null ? 0n : BigInt(util.toPointer(data.tracingContextId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUDIO_EFFECT (size: 16)
 */
export interface AUDIO_EFFECT {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  canSetState: boolean;
  /** Windows.Win32.Media.Audio.AUDIO_EFFECT_STATE */
  state: AUDIO_EFFECT_STATE;
}

export const sizeofAUDIO_EFFECT = 16;

export function allocAUDIO_EFFECT(data?: Partial<AUDIO_EFFECT>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_EFFECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: i32
  if (data?.canSetState !== undefined) view.setInt32(8, Number(data.canSetState), true);
  // 0x0c: i32
  if (data?.state !== undefined) view.setInt32(12, Number(data.state), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AMBISONICS_PARAMS (size: 40)
 */
export interface AMBISONICS_PARAMS {
  /** u32 */
  u32Size: number;
  /** u32 */
  u32Version: number;
  /** Windows.Win32.Media.Audio.AMBISONICS_TYPE */
  u32Type: AMBISONICS_TYPE;
  /** Windows.Win32.Media.Audio.AMBISONICS_CHANNEL_ORDERING */
  u32ChannelOrdering: AMBISONICS_CHANNEL_ORDERING;
  /** Windows.Win32.Media.Audio.AMBISONICS_NORMALIZATION */
  u32Normalization: AMBISONICS_NORMALIZATION;
  /** u32 */
  u32Order: number;
  /** u32 */
  u32NumChannels: number;
  /** ptr */
  pu32ChannelMap: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAMBISONICS_PARAMS = 40;

export function allocAMBISONICS_PARAMS(data?: Partial<AMBISONICS_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAMBISONICS_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.u32Size !== undefined) view.setUint32(0, Number(data.u32Size), true);
  // 0x04: u32
  if (data?.u32Version !== undefined) view.setUint32(4, Number(data.u32Version), true);
  // 0x08: i32
  if (data?.u32Type !== undefined) view.setInt32(8, Number(data.u32Type), true);
  // 0x0c: i32
  if (data?.u32ChannelOrdering !== undefined) view.setInt32(12, Number(data.u32ChannelOrdering), true);
  // 0x10: i32
  if (data?.u32Normalization !== undefined) view.setInt32(16, Number(data.u32Normalization), true);
  // 0x14: u32
  if (data?.u32Order !== undefined) view.setUint32(20, Number(data.u32Order), true);
  // 0x18: u32
  if (data?.u32NumChannels !== undefined) view.setUint32(24, Number(data.u32NumChannels), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pu32ChannelMap !== undefined) view.setBigUint64(32, data.pu32ChannelMap === null ? 0n : BigInt(util.toPointer(data.pu32ChannelMap)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioObjectRenderStreamActivationParams (size: 40)
 */
export interface SpatialAudioObjectRenderStreamActivationParams {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSpatialAudioObjectRenderStreamActivationParams = 40;

export function allocSpatialAudioObjectRenderStreamActivationParams(data?: Partial<SpatialAudioObjectRenderStreamActivationParams>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioObjectRenderStreamActivationParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(32, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioObjectRenderStreamActivationParams2 (size: 48)
 */
export interface SpatialAudioObjectRenderStreamActivationParams2 {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.SPATIAL_AUDIO_STREAM_OPTIONS */
  Options: SPATIAL_AUDIO_STREAM_OPTIONS;
}

export const sizeofSpatialAudioObjectRenderStreamActivationParams2 = 48;

export function allocSpatialAudioObjectRenderStreamActivationParams2(data?: Partial<SpatialAudioObjectRenderStreamActivationParams2>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioObjectRenderStreamActivationParams2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(32, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  // 0x28: u32
  if (data?.Options !== undefined) view.setUint32(40, Number(data.Options), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioClientActivationParams (size: 32)
 */
export interface SpatialAudioClientActivationParams {
  /** System.Guid */
  tracingContextId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  appId: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  majorVersion: number;
  /** i32 */
  minorVersion1: number;
  /** i32 */
  minorVersion2: number;
  /** i32 */
  minorVersion3: number;
}

export const sizeofSpatialAudioClientActivationParams = 32;

export function allocSpatialAudioClientActivationParams(data?: Partial<SpatialAudioClientActivationParams>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioClientActivationParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tracingContextId !== undefined) view.setBigUint64(0, data.tracingContextId === null ? 0n : BigInt(util.toPointer(data.tracingContextId)), true);
  // 0x08: pointer
  if (data?.appId !== undefined) view.setBigUint64(8, data.appId === null ? 0n : BigInt(util.toPointer(data.appId)), true);
  // 0x10: i32
  if (data?.majorVersion !== undefined) view.setInt32(16, Number(data.majorVersion), true);
  // 0x14: i32
  if (data?.minorVersion1 !== undefined) view.setInt32(20, Number(data.minorVersion1), true);
  // 0x18: i32
  if (data?.minorVersion2 !== undefined) view.setInt32(24, Number(data.minorVersion2), true);
  // 0x1c: i32
  if (data?.minorVersion3 !== undefined) view.setInt32(28, Number(data.minorVersion3), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivity (size: 8)
 */
export interface SpatialAudioHrtfDirectivity {
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityType */
  Type: SpatialAudioHrtfDirectivityType;
  /** f32 */
  Scaling: number;
}

export const sizeofSpatialAudioHrtfDirectivity = 8;

export function allocSpatialAudioHrtfDirectivity(data?: Partial<SpatialAudioHrtfDirectivity>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfDirectivity);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: f32
  if (data?.Scaling !== undefined) view.setFloat32(4, Number(data.Scaling), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityCardioid (size: 16)
 */
export interface SpatialAudioHrtfDirectivityCardioid {
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivity */
  directivity: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  Order: number;
}

export const sizeofSpatialAudioHrtfDirectivityCardioid = 16;

export function allocSpatialAudioHrtfDirectivityCardioid(data?: Partial<SpatialAudioHrtfDirectivityCardioid>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfDirectivityCardioid);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.directivity !== undefined) view.setBigUint64(0, data.directivity === null ? 0n : BigInt(util.toPointer(data.directivity)), true);
  // 0x08: f32
  if (data?.Order !== undefined) view.setFloat32(8, Number(data.Order), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityCone (size: 16)
 */
export interface SpatialAudioHrtfDirectivityCone {
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivity */
  directivity: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  InnerAngle: number;
  /** f32 */
  OuterAngle: number;
}

export const sizeofSpatialAudioHrtfDirectivityCone = 16;

export function allocSpatialAudioHrtfDirectivityCone(data?: Partial<SpatialAudioHrtfDirectivityCone>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfDirectivityCone);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.directivity !== undefined) view.setBigUint64(0, data.directivity === null ? 0n : BigInt(util.toPointer(data.directivity)), true);
  // 0x08: f32
  if (data?.InnerAngle !== undefined) view.setFloat32(8, Number(data.InnerAngle), true);
  // 0x0c: f32
  if (data?.OuterAngle !== undefined) view.setFloat32(12, Number(data.OuterAngle), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityUnion (size: 24)
 */
export interface SpatialAudioHrtfDirectivityUnion {
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityCone */
  Cone: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityCardioid */
  Cardiod: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivity */
  Omni: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSpatialAudioHrtfDirectivityUnion = 24;

export function allocSpatialAudioHrtfDirectivityUnion(data?: Partial<SpatialAudioHrtfDirectivityUnion>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfDirectivityUnion);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Cone !== undefined) view.setBigUint64(0, data.Cone === null ? 0n : BigInt(util.toPointer(data.Cone)), true);
  // 0x08: pointer
  if (data?.Cardiod !== undefined) view.setBigUint64(8, data.Cardiod === null ? 0n : BigInt(util.toPointer(data.Cardiod)), true);
  // 0x10: pointer
  if (data?.Omni !== undefined) view.setBigUint64(16, data.Omni === null ? 0n : BigInt(util.toPointer(data.Omni)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfDistanceDecay (size: 24)
 */
export interface SpatialAudioHrtfDistanceDecay {
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDistanceDecayType */
  Type: SpatialAudioHrtfDistanceDecayType;
  /** f32 */
  MaxGain: number;
  /** f32 */
  MinGain: number;
  /** f32 */
  UnityGainDistance: number;
  /** f32 */
  CutoffDistance: number;
}

export const sizeofSpatialAudioHrtfDistanceDecay = 24;

export function allocSpatialAudioHrtfDistanceDecay(data?: Partial<SpatialAudioHrtfDistanceDecay>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfDistanceDecay);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: f32
  if (data?.MaxGain !== undefined) view.setFloat32(4, Number(data.MaxGain), true);
  // 0x08: f32
  if (data?.MinGain !== undefined) view.setFloat32(8, Number(data.MinGain), true);
  // 0x0c: f32
  if (data?.UnityGainDistance !== undefined) view.setFloat32(12, Number(data.UnityGainDistance), true);
  // 0x10: f32
  if (data?.CutoffDistance !== undefined) view.setFloat32(16, Number(data.CutoffDistance), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfActivationParams (size: 72)
 */
export interface SpatialAudioHrtfActivationParams {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  DistanceDecay: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Directivity: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Environment: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Orientation: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSpatialAudioHrtfActivationParams = 72;

export function allocSpatialAudioHrtfActivationParams(data?: Partial<SpatialAudioHrtfActivationParams>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfActivationParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(32, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  // 0x28: pointer
  if (data?.DistanceDecay !== undefined) view.setBigUint64(40, data.DistanceDecay === null ? 0n : BigInt(util.toPointer(data.DistanceDecay)), true);
  // 0x30: pointer
  if (data?.Directivity !== undefined) view.setBigUint64(48, data.Directivity === null ? 0n : BigInt(util.toPointer(data.Directivity)), true);
  // 0x38: pointer
  if (data?.Environment !== undefined) view.setBigUint64(56, data.Environment === null ? 0n : BigInt(util.toPointer(data.Environment)), true);
  // 0x40: pointer
  if (data?.Orientation !== undefined) view.setBigUint64(64, data.Orientation === null ? 0n : BigInt(util.toPointer(data.Orientation)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfActivationParams2 (size: 80)
 */
export interface SpatialAudioHrtfActivationParams2 {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  DistanceDecay: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Directivity: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Environment: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Orientation: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.SPATIAL_AUDIO_STREAM_OPTIONS */
  Options: SPATIAL_AUDIO_STREAM_OPTIONS;
}

export const sizeofSpatialAudioHrtfActivationParams2 = 80;

export function allocSpatialAudioHrtfActivationParams2(data?: Partial<SpatialAudioHrtfActivationParams2>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfActivationParams2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(32, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  // 0x28: pointer
  if (data?.DistanceDecay !== undefined) view.setBigUint64(40, data.DistanceDecay === null ? 0n : BigInt(util.toPointer(data.DistanceDecay)), true);
  // 0x30: pointer
  if (data?.Directivity !== undefined) view.setBigUint64(48, data.Directivity === null ? 0n : BigInt(util.toPointer(data.Directivity)), true);
  // 0x38: pointer
  if (data?.Environment !== undefined) view.setBigUint64(56, data.Environment === null ? 0n : BigInt(util.toPointer(data.Environment)), true);
  // 0x40: pointer
  if (data?.Orientation !== undefined) view.setBigUint64(64, data.Orientation === null ? 0n : BigInt(util.toPointer(data.Orientation)), true);
  // 0x48: u32
  if (data?.Options !== undefined) view.setUint32(72, Number(data.Options), true);
  // 0x4c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DIRECTX_AUDIO_ACTIVATION_PARAMS (size: 24)
 */
export interface DIRECTX_AUDIO_ACTIVATION_PARAMS {
  /** u32 */
  cbDirectXAudioActivationParams: number;
  /** System.Guid */
  guidAudioSession: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStreamFlags: number;
}

export const sizeofDIRECTX_AUDIO_ACTIVATION_PARAMS = 24;

export function allocDIRECTX_AUDIO_ACTIVATION_PARAMS(data?: Partial<DIRECTX_AUDIO_ACTIVATION_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDIRECTX_AUDIO_ACTIVATION_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbDirectXAudioActivationParams !== undefined) view.setUint32(0, Number(data.cbDirectXAudioActivationParams), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidAudioSession !== undefined) view.setBigUint64(8, data.guidAudioSession === null ? 0n : BigInt(util.toPointer(data.guidAudioSession)), true);
  // 0x10: u32
  if (data?.dwAudioStreamFlags !== undefined) view.setUint32(16, Number(data.dwAudioStreamFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AudioExtensionParams (size: 32)
 */
export interface AudioExtensionParams {
  /** Windows.Win32.Foundation.LPARAM */
  AddPageParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.IMMDevice */
  pEndpoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.IMMDevice */
  pPnpInterface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.IMMDevice */
  pPnpDevnode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAudioExtensionParams = 32;

export function allocAudioExtensionParams(data?: Partial<AudioExtensionParams>): Uint8Array {
  const buf = new Uint8Array(sizeofAudioExtensionParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AddPageParam !== undefined) view.setBigUint64(0, data.AddPageParam === null ? 0n : BigInt(util.toPointer(data.AddPageParam)), true);
  // 0x08: pointer
  if (data?.pEndpoint !== undefined) view.setBigUint64(8, data.pEndpoint === null ? 0n : BigInt(util.toPointer(data.pEndpoint)), true);
  // 0x10: pointer
  if (data?.pPnpInterface !== undefined) view.setBigUint64(16, data.pPnpInterface === null ? 0n : BigInt(util.toPointer(data.pPnpInterface)), true);
  // 0x18: pointer
  if (data?.pPnpDevnode !== undefined) view.setBigUint64(24, data.pPnpDevnode === null ? 0n : BigInt(util.toPointer(data.pPnpDevnode)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioMetadataItemsInfo (size: 16)
 */
export interface SpatialAudioMetadataItemsInfo {
  /** u16 */
  FrameCount: number;
  /** u16 */
  ItemCount: number;
  /** u16 */
  MaxItemCount: number;
  /** u32 */
  MaxValueBufferLength: number;
}

export const sizeofSpatialAudioMetadataItemsInfo = 16;

export function allocSpatialAudioMetadataItemsInfo(data?: Partial<SpatialAudioMetadataItemsInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioMetadataItemsInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.FrameCount !== undefined) view.setUint16(0, Number(data.FrameCount), true);
  // 0x02: u16
  if (data?.ItemCount !== undefined) view.setUint16(2, Number(data.ItemCount), true);
  // 0x04: u16
  if (data?.MaxItemCount !== undefined) view.setUint16(4, Number(data.MaxItemCount), true);
  // 0x06: u32
  if (data?.MaxValueBufferLength !== undefined) view.setUint32(6, Number(data.MaxValueBufferLength), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioObjectRenderStreamForMetadataActivationParams (size: 64)
 */
export interface SpatialAudioObjectRenderStreamForMetadataActivationParams {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  MetadataFormatId: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  MaxMetadataItemCount: number;
  /** ptr */
  MetadataActivationParams: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSpatialAudioObjectRenderStreamForMetadataActivationParams = 64;

export function allocSpatialAudioObjectRenderStreamForMetadataActivationParams(data?: Partial<SpatialAudioObjectRenderStreamForMetadataActivationParams>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioObjectRenderStreamForMetadataActivationParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.MetadataFormatId !== undefined) view.setBigUint64(32, data.MetadataFormatId === null ? 0n : BigInt(util.toPointer(data.MetadataFormatId)), true);
  // 0x28: u16
  if (data?.MaxMetadataItemCount !== undefined) view.setUint16(40, Number(data.MaxMetadataItemCount), true);
  // 0x2a: pad6
  // 0x30: pointer
  if (data?.MetadataActivationParams !== undefined) view.setBigUint64(48, data.MetadataActivationParams === null ? 0n : BigInt(util.toPointer(data.MetadataActivationParams)), true);
  // 0x38: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(56, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioObjectRenderStreamForMetadataActivationParams2 (size: 72)
 */
export interface SpatialAudioObjectRenderStreamForMetadataActivationParams2 {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  MetadataFormatId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxMetadataItemCount: number;
  /** ptr */
  MetadataActivationParams: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.SPATIAL_AUDIO_STREAM_OPTIONS */
  Options: SPATIAL_AUDIO_STREAM_OPTIONS;
}

export const sizeofSpatialAudioObjectRenderStreamForMetadataActivationParams2 = 72;

export function allocSpatialAudioObjectRenderStreamForMetadataActivationParams2(data?: Partial<SpatialAudioObjectRenderStreamForMetadataActivationParams2>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioObjectRenderStreamForMetadataActivationParams2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.MetadataFormatId !== undefined) view.setBigUint64(32, data.MetadataFormatId === null ? 0n : BigInt(util.toPointer(data.MetadataFormatId)), true);
  // 0x28: u32
  if (data?.MaxMetadataItemCount !== undefined) view.setUint32(40, Number(data.MaxMetadataItemCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.MetadataActivationParams !== undefined) view.setBigUint64(48, data.MetadataActivationParams === null ? 0n : BigInt(util.toPointer(data.MetadataActivationParams)), true);
  // 0x38: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(56, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  // 0x40: u32
  if (data?.Options !== undefined) view.setUint32(64, Number(data.Options), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS (size: 8)
 */
export interface AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS {
  /** u32 */
  TargetProcessId: number;
  /** Windows.Win32.Media.Audio.PROCESS_LOOPBACK_MODE */
  ProcessLoopbackMode: PROCESS_LOOPBACK_MODE;
}

export const sizeofAUDIOCLIENT_PROCESS_LOOPBACK_PARAMS = 8;

export function allocAUDIOCLIENT_PROCESS_LOOPBACK_PARAMS(data?: Partial<AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIOCLIENT_PROCESS_LOOPBACK_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TargetProcessId !== undefined) view.setUint32(0, Number(data.TargetProcessId), true);
  // 0x04: i32
  if (data?.ProcessLoopbackMode !== undefined) view.setInt32(4, Number(data.ProcessLoopbackMode), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUDIOCLIENT_ACTIVATION_PARAMS (size: 16)
 */
export interface AUDIOCLIENT_ACTIVATION_PARAMS {
  /** Windows.Win32.Media.Audio.AUDIOCLIENT_ACTIVATION_TYPE */
  ActivationType: AUDIOCLIENT_ACTIVATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIOCLIENT_ACTIVATION_PARAMS = 16;

export function allocAUDIOCLIENT_ACTIVATION_PARAMS(data?: Partial<AUDIOCLIENT_ACTIVATION_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIOCLIENT_ACTIVATION_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ActivationType !== undefined) view.setInt32(0, Number(data.ActivationType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type HICON = Deno.PointerValue;

/**
 * Windows.Win32.Media.Audio.ACMDRIVERDETAILSA (size: 88)
 */
export interface ACMDRIVERDETAILSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccComp: number;
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vdwACM: number;
  /** u32 */
  vdwDriver: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cFormatTags: number;
  /** u32 */
  cFilterTags: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hicon: Uint8Array | Deno.PointerValue | null;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szLongName: Deno.PointerValue | null;
  /** array */
  szCopyright: Deno.PointerValue | null;
  /** array */
  szLicensing: Deno.PointerValue | null;
  /** array */
  szFeatures: Deno.PointerValue | null;
}

export const sizeofACMDRIVERDETAILSA = 88;

export function allocACMDRIVERDETAILSA(data?: Partial<ACMDRIVERDETAILSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRIVERDETAILSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccComp !== undefined) view.setUint32(8, Number(data.fccComp), true);
  // 0x0c: u16
  if (data?.wMid !== undefined) view.setUint16(12, Number(data.wMid), true);
  // 0x0e: u16
  if (data?.wPid !== undefined) view.setUint16(14, Number(data.wPid), true);
  // 0x10: u32
  if (data?.vdwACM !== undefined) view.setUint32(16, Number(data.vdwACM), true);
  // 0x14: u32
  if (data?.vdwDriver !== undefined) view.setUint32(20, Number(data.vdwDriver), true);
  // 0x18: u32
  if (data?.fdwSupport !== undefined) view.setUint32(24, Number(data.fdwSupport), true);
  // 0x1c: u32
  if (data?.cFormatTags !== undefined) view.setUint32(28, Number(data.cFormatTags), true);
  // 0x20: u32
  if (data?.cFilterTags !== undefined) view.setUint32(32, Number(data.cFilterTags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.hicon !== undefined) view.setBigUint64(40, data.hicon === null ? 0n : BigInt(util.toPointer(data.hicon)), true);
  // 0x30: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(48, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x38: pointer
  if (data?.szLongName !== undefined) view.setBigUint64(56, data.szLongName === null ? 0n : BigInt(util.toPointer(data.szLongName)), true);
  // 0x40: pointer
  if (data?.szCopyright !== undefined) view.setBigUint64(64, data.szCopyright === null ? 0n : BigInt(util.toPointer(data.szCopyright)), true);
  // 0x48: pointer
  if (data?.szLicensing !== undefined) view.setBigUint64(72, data.szLicensing === null ? 0n : BigInt(util.toPointer(data.szLicensing)), true);
  // 0x50: pointer
  if (data?.szFeatures !== undefined) view.setBigUint64(80, data.szFeatures === null ? 0n : BigInt(util.toPointer(data.szFeatures)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRIVERDETAILSW (size: 88)
 */
export interface ACMDRIVERDETAILSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccComp: number;
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vdwACM: number;
  /** u32 */
  vdwDriver: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cFormatTags: number;
  /** u32 */
  cFilterTags: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hicon: Uint8Array | Deno.PointerValue | null;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szLongName: Deno.PointerValue | null;
  /** array */
  szCopyright: Deno.PointerValue | null;
  /** array */
  szLicensing: Deno.PointerValue | null;
  /** array */
  szFeatures: Deno.PointerValue | null;
}

export const sizeofACMDRIVERDETAILSW = 88;

export function allocACMDRIVERDETAILSW(data?: Partial<ACMDRIVERDETAILSW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRIVERDETAILSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccComp !== undefined) view.setUint32(8, Number(data.fccComp), true);
  // 0x0c: u16
  if (data?.wMid !== undefined) view.setUint16(12, Number(data.wMid), true);
  // 0x0e: u16
  if (data?.wPid !== undefined) view.setUint16(14, Number(data.wPid), true);
  // 0x10: u32
  if (data?.vdwACM !== undefined) view.setUint32(16, Number(data.vdwACM), true);
  // 0x14: u32
  if (data?.vdwDriver !== undefined) view.setUint32(20, Number(data.vdwDriver), true);
  // 0x18: u32
  if (data?.fdwSupport !== undefined) view.setUint32(24, Number(data.fdwSupport), true);
  // 0x1c: u32
  if (data?.cFormatTags !== undefined) view.setUint32(28, Number(data.cFormatTags), true);
  // 0x20: u32
  if (data?.cFilterTags !== undefined) view.setUint32(32, Number(data.cFilterTags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.hicon !== undefined) view.setBigUint64(40, data.hicon === null ? 0n : BigInt(util.toPointer(data.hicon)), true);
  // 0x30: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(48, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x38: pointer
  if (data?.szLongName !== undefined) view.setBigUint64(56, data.szLongName === null ? 0n : BigInt(util.toPointer(data.szLongName)), true);
  // 0x40: pointer
  if (data?.szCopyright !== undefined) view.setBigUint64(64, data.szCopyright === null ? 0n : BigInt(util.toPointer(data.szCopyright)), true);
  // 0x48: pointer
  if (data?.szLicensing !== undefined) view.setBigUint64(72, data.szLicensing === null ? 0n : BigInt(util.toPointer(data.szLicensing)), true);
  // 0x50: pointer
  if (data?.szFeatures !== undefined) view.setBigUint64(80, data.szFeatures === null ? 0n : BigInt(util.toPointer(data.szFeatures)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFORMATTAGDETAILSA (size: 32)
 */
export interface ACMFORMATTAGDETAILSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFormatTagIndex: number;
  /** u32 */
  dwFormatTag: number;
  /** u32 */
  cbFormatSize: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cStandardFormats: number;
  /** array */
  szFormatTag: Deno.PointerValue | null;
}

export const sizeofACMFORMATTAGDETAILSA = 32;

export function allocACMFORMATTAGDETAILSA(data?: Partial<ACMFORMATTAGDETAILSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFORMATTAGDETAILSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFormatTagIndex !== undefined) view.setUint32(4, Number(data.dwFormatTagIndex), true);
  // 0x08: u32
  if (data?.dwFormatTag !== undefined) view.setUint32(8, Number(data.dwFormatTag), true);
  // 0x0c: u32
  if (data?.cbFormatSize !== undefined) view.setUint32(12, Number(data.cbFormatSize), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cStandardFormats !== undefined) view.setUint32(20, Number(data.cStandardFormats), true);
  // 0x18: pointer
  if (data?.szFormatTag !== undefined) view.setBigUint64(24, data.szFormatTag === null ? 0n : BigInt(util.toPointer(data.szFormatTag)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFORMATTAGDETAILSW (size: 32)
 */
export interface ACMFORMATTAGDETAILSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFormatTagIndex: number;
  /** u32 */
  dwFormatTag: number;
  /** u32 */
  cbFormatSize: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cStandardFormats: number;
  /** array */
  szFormatTag: Deno.PointerValue | null;
}

export const sizeofACMFORMATTAGDETAILSW = 32;

export function allocACMFORMATTAGDETAILSW(data?: Partial<ACMFORMATTAGDETAILSW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFORMATTAGDETAILSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFormatTagIndex !== undefined) view.setUint32(4, Number(data.dwFormatTagIndex), true);
  // 0x08: u32
  if (data?.dwFormatTag !== undefined) view.setUint32(8, Number(data.dwFormatTag), true);
  // 0x0c: u32
  if (data?.cbFormatSize !== undefined) view.setUint32(12, Number(data.cbFormatSize), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cStandardFormats !== undefined) view.setUint32(20, Number(data.cStandardFormats), true);
  // 0x18: pointer
  if (data?.szFormatTag !== undefined) view.setBigUint64(24, data.szFormatTag === null ? 0n : BigInt(util.toPointer(data.szFormatTag)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFORMATDETAILSA (size: 40)
 */
export interface ACMFORMATDETAILSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFormatIndex: number;
  /** u32 */
  dwFormatTag: number;
  /** u32 */
  fdwSupport: number;
  /** ptr */
  pwfx: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfx: number;
  /** array */
  szFormat: Deno.PointerValue | null;
}

export const sizeofACMFORMATDETAILSA = 40;

export function allocACMFORMATDETAILSA(data?: Partial<ACMFORMATDETAILSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFORMATDETAILSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFormatIndex !== undefined) view.setUint32(4, Number(data.dwFormatIndex), true);
  // 0x08: u32
  if (data?.dwFormatTag !== undefined) view.setUint32(8, Number(data.dwFormatTag), true);
  // 0x0c: u32
  if (data?.fdwSupport !== undefined) view.setUint32(12, Number(data.fdwSupport), true);
  // 0x10: pointer
  if (data?.pwfx !== undefined) view.setBigUint64(16, data.pwfx === null ? 0n : BigInt(util.toPointer(data.pwfx)), true);
  // 0x18: u32
  if (data?.cbwfx !== undefined) view.setUint32(24, Number(data.cbwfx), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szFormat !== undefined) view.setBigUint64(32, data.szFormat === null ? 0n : BigInt(util.toPointer(data.szFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.tACMFORMATDETAILSW (size: 40)
 */
export interface tACMFORMATDETAILSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFormatIndex: number;
  /** u32 */
  dwFormatTag: number;
  /** u32 */
  fdwSupport: number;
  /** ptr */
  pwfx: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfx: number;
  /** array */
  szFormat: Deno.PointerValue | null;
}

export const sizeofTACMFORMATDETAILSW = 40;

export function allocTACMFORMATDETAILSW(data?: Partial<tACMFORMATDETAILSW>): Uint8Array {
  const buf = new Uint8Array(sizeofTACMFORMATDETAILSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFormatIndex !== undefined) view.setUint32(4, Number(data.dwFormatIndex), true);
  // 0x08: u32
  if (data?.dwFormatTag !== undefined) view.setUint32(8, Number(data.dwFormatTag), true);
  // 0x0c: u32
  if (data?.fdwSupport !== undefined) view.setUint32(12, Number(data.fdwSupport), true);
  // 0x10: pointer
  if (data?.pwfx !== undefined) view.setBigUint64(16, data.pwfx === null ? 0n : BigInt(util.toPointer(data.pwfx)), true);
  // 0x18: u32
  if (data?.cbwfx !== undefined) view.setUint32(24, Number(data.cbwfx), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szFormat !== undefined) view.setBigUint64(32, data.szFormat === null ? 0n : BigInt(util.toPointer(data.szFormat)), true);
  return buf;
}

export type HINSTANCE = Deno.PointerValue;

/**
 * Windows.Win32.Media.Audio.ACMFORMATCHOOSEA (size: 112)
 */
export interface ACMFORMATCHOOSEA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** ptr */
  pwfx: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfx: number;
  /** Windows.Win32.Foundation.PSTR */
  pszTitle: string | null;
  /** array */
  szFormatTag: Deno.PointerValue | null;
  /** array */
  szFormat: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszName: string | null;
  /** u32 */
  cchName: number;
  /** u32 */
  fdwEnum: number;
  /** ptr */
  pwfxEnum: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszTemplateName: string | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ACMFORMATCHOOSEHOOKPROCA */
  pfnHook: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACMFORMATCHOOSEA = 112;

export function allocACMFORMATCHOOSEA(data?: Partial<ACMFORMATCHOOSEA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFORMATCHOOSEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStyle !== undefined) view.setUint32(4, Number(data.fdwStyle), true);
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: pointer
  if (data?.pwfx !== undefined) view.setBigUint64(16, data.pwfx === null ? 0n : BigInt(util.toPointer(data.pwfx)), true);
  // 0x18: u32
  if (data?.cbwfx !== undefined) view.setUint32(24, Number(data.cbwfx), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.szFormatTag !== undefined) view.setBigUint64(40, data.szFormatTag === null ? 0n : BigInt(util.toPointer(data.szFormatTag)), true);
  // 0x30: pointer
  if (data?.szFormat !== undefined) view.setBigUint64(48, data.szFormat === null ? 0n : BigInt(util.toPointer(data.szFormat)), true);
  // 0x38: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pszName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.cchName !== undefined) view.setUint32(64, Number(data.cchName), true);
  // 0x44: u32
  if (data?.fdwEnum !== undefined) view.setUint32(68, Number(data.fdwEnum), true);
  // 0x48: pointer
  if (data?.pwfxEnum !== undefined) view.setBigUint64(72, data.pwfxEnum === null ? 0n : BigInt(util.toPointer(data.pwfxEnum)), true);
  // 0x50: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(80, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x58: buffer
  if (data?.pszTemplateName !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.pszTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(96, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x68: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(104, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFORMATCHOOSEW (size: 112)
 */
export interface ACMFORMATCHOOSEW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** ptr */
  pwfx: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfx: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null;
  /** array */
  szFormatTag: Deno.PointerValue | null;
  /** array */
  szFormat: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** u32 */
  cchName: number;
  /** u32 */
  fdwEnum: number;
  /** ptr */
  pwfxEnum: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszTemplateName: string | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ACMFORMATCHOOSEHOOKPROCW */
  pfnHook: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACMFORMATCHOOSEW = 112;

export function allocACMFORMATCHOOSEW(data?: Partial<ACMFORMATCHOOSEW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFORMATCHOOSEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStyle !== undefined) view.setUint32(4, Number(data.fdwStyle), true);
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: pointer
  if (data?.pwfx !== undefined) view.setBigUint64(16, data.pwfx === null ? 0n : BigInt(util.toPointer(data.pwfx)), true);
  // 0x18: u32
  if (data?.cbwfx !== undefined) view.setUint32(24, Number(data.cbwfx), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.szFormatTag !== undefined) view.setBigUint64(40, data.szFormatTag === null ? 0n : BigInt(util.toPointer(data.szFormatTag)), true);
  // 0x30: pointer
  if (data?.szFormat !== undefined) view.setBigUint64(48, data.szFormat === null ? 0n : BigInt(util.toPointer(data.szFormat)), true);
  // 0x38: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.cchName !== undefined) view.setUint32(64, Number(data.cchName), true);
  // 0x44: u32
  if (data?.fdwEnum !== undefined) view.setUint32(68, Number(data.fdwEnum), true);
  // 0x48: pointer
  if (data?.pwfxEnum !== undefined) view.setBigUint64(72, data.pwfxEnum === null ? 0n : BigInt(util.toPointer(data.pwfxEnum)), true);
  // 0x50: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(80, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x58: buffer
  if (data?.pszTemplateName !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(96, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x68: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(104, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERTAGDETAILSA (size: 32)
 */
export interface ACMFILTERTAGDETAILSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFilterTagIndex: number;
  /** u32 */
  dwFilterTag: number;
  /** u32 */
  cbFilterSize: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cStandardFilters: number;
  /** array */
  szFilterTag: Deno.PointerValue | null;
}

export const sizeofACMFILTERTAGDETAILSA = 32;

export function allocACMFILTERTAGDETAILSA(data?: Partial<ACMFILTERTAGDETAILSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERTAGDETAILSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFilterTagIndex !== undefined) view.setUint32(4, Number(data.dwFilterTagIndex), true);
  // 0x08: u32
  if (data?.dwFilterTag !== undefined) view.setUint32(8, Number(data.dwFilterTag), true);
  // 0x0c: u32
  if (data?.cbFilterSize !== undefined) view.setUint32(12, Number(data.cbFilterSize), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cStandardFilters !== undefined) view.setUint32(20, Number(data.cStandardFilters), true);
  // 0x18: pointer
  if (data?.szFilterTag !== undefined) view.setBigUint64(24, data.szFilterTag === null ? 0n : BigInt(util.toPointer(data.szFilterTag)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERTAGDETAILSW (size: 32)
 */
export interface ACMFILTERTAGDETAILSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFilterTagIndex: number;
  /** u32 */
  dwFilterTag: number;
  /** u32 */
  cbFilterSize: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cStandardFilters: number;
  /** array */
  szFilterTag: Deno.PointerValue | null;
}

export const sizeofACMFILTERTAGDETAILSW = 32;

export function allocACMFILTERTAGDETAILSW(data?: Partial<ACMFILTERTAGDETAILSW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERTAGDETAILSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFilterTagIndex !== undefined) view.setUint32(4, Number(data.dwFilterTagIndex), true);
  // 0x08: u32
  if (data?.dwFilterTag !== undefined) view.setUint32(8, Number(data.dwFilterTag), true);
  // 0x0c: u32
  if (data?.cbFilterSize !== undefined) view.setUint32(12, Number(data.cbFilterSize), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cStandardFilters !== undefined) view.setUint32(20, Number(data.cStandardFilters), true);
  // 0x18: pointer
  if (data?.szFilterTag !== undefined) view.setBigUint64(24, data.szFilterTag === null ? 0n : BigInt(util.toPointer(data.szFilterTag)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERDETAILSA (size: 40)
 */
export interface ACMFILTERDETAILSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFilterIndex: number;
  /** u32 */
  dwFilterTag: number;
  /** u32 */
  fdwSupport: number;
  /** ptr */
  pwfltr: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfltr: number;
  /** array */
  szFilter: Deno.PointerValue | null;
}

export const sizeofACMFILTERDETAILSA = 40;

export function allocACMFILTERDETAILSA(data?: Partial<ACMFILTERDETAILSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERDETAILSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFilterIndex !== undefined) view.setUint32(4, Number(data.dwFilterIndex), true);
  // 0x08: u32
  if (data?.dwFilterTag !== undefined) view.setUint32(8, Number(data.dwFilterTag), true);
  // 0x0c: u32
  if (data?.fdwSupport !== undefined) view.setUint32(12, Number(data.fdwSupport), true);
  // 0x10: pointer
  if (data?.pwfltr !== undefined) view.setBigUint64(16, data.pwfltr === null ? 0n : BigInt(util.toPointer(data.pwfltr)), true);
  // 0x18: u32
  if (data?.cbwfltr !== undefined) view.setUint32(24, Number(data.cbwfltr), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szFilter !== undefined) view.setBigUint64(32, data.szFilter === null ? 0n : BigInt(util.toPointer(data.szFilter)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERDETAILSW (size: 40)
 */
export interface ACMFILTERDETAILSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFilterIndex: number;
  /** u32 */
  dwFilterTag: number;
  /** u32 */
  fdwSupport: number;
  /** ptr */
  pwfltr: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfltr: number;
  /** array */
  szFilter: Deno.PointerValue | null;
}

export const sizeofACMFILTERDETAILSW = 40;

export function allocACMFILTERDETAILSW(data?: Partial<ACMFILTERDETAILSW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERDETAILSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFilterIndex !== undefined) view.setUint32(4, Number(data.dwFilterIndex), true);
  // 0x08: u32
  if (data?.dwFilterTag !== undefined) view.setUint32(8, Number(data.dwFilterTag), true);
  // 0x0c: u32
  if (data?.fdwSupport !== undefined) view.setUint32(12, Number(data.fdwSupport), true);
  // 0x10: pointer
  if (data?.pwfltr !== undefined) view.setBigUint64(16, data.pwfltr === null ? 0n : BigInt(util.toPointer(data.pwfltr)), true);
  // 0x18: u32
  if (data?.cbwfltr !== undefined) view.setUint32(24, Number(data.cbwfltr), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szFilter !== undefined) view.setBigUint64(32, data.szFilter === null ? 0n : BigInt(util.toPointer(data.szFilter)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERCHOOSEA (size: 112)
 */
export interface ACMFILTERCHOOSEA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** ptr */
  pwfltr: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfltr: number;
  /** Windows.Win32.Foundation.PSTR */
  pszTitle: string | null;
  /** array */
  szFilterTag: Deno.PointerValue | null;
  /** array */
  szFilter: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszName: string | null;
  /** u32 */
  cchName: number;
  /** u32 */
  fdwEnum: number;
  /** ptr */
  pwfltrEnum: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszTemplateName: string | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ACMFILTERCHOOSEHOOKPROCA */
  pfnHook: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACMFILTERCHOOSEA = 112;

export function allocACMFILTERCHOOSEA(data?: Partial<ACMFILTERCHOOSEA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERCHOOSEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStyle !== undefined) view.setUint32(4, Number(data.fdwStyle), true);
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: pointer
  if (data?.pwfltr !== undefined) view.setBigUint64(16, data.pwfltr === null ? 0n : BigInt(util.toPointer(data.pwfltr)), true);
  // 0x18: u32
  if (data?.cbwfltr !== undefined) view.setUint32(24, Number(data.cbwfltr), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.szFilterTag !== undefined) view.setBigUint64(40, data.szFilterTag === null ? 0n : BigInt(util.toPointer(data.szFilterTag)), true);
  // 0x30: pointer
  if (data?.szFilter !== undefined) view.setBigUint64(48, data.szFilter === null ? 0n : BigInt(util.toPointer(data.szFilter)), true);
  // 0x38: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pszName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.cchName !== undefined) view.setUint32(64, Number(data.cchName), true);
  // 0x44: u32
  if (data?.fdwEnum !== undefined) view.setUint32(68, Number(data.fdwEnum), true);
  // 0x48: pointer
  if (data?.pwfltrEnum !== undefined) view.setBigUint64(72, data.pwfltrEnum === null ? 0n : BigInt(util.toPointer(data.pwfltrEnum)), true);
  // 0x50: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(80, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x58: buffer
  if (data?.pszTemplateName !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.pszTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(96, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x68: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(104, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERCHOOSEW (size: 112)
 */
export interface ACMFILTERCHOOSEW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** ptr */
  pwfltr: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfltr: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null;
  /** array */
  szFilterTag: Deno.PointerValue | null;
  /** array */
  szFilter: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** u32 */
  cchName: number;
  /** u32 */
  fdwEnum: number;
  /** ptr */
  pwfltrEnum: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszTemplateName: string | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ACMFILTERCHOOSEHOOKPROCW */
  pfnHook: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACMFILTERCHOOSEW = 112;

export function allocACMFILTERCHOOSEW(data?: Partial<ACMFILTERCHOOSEW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERCHOOSEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStyle !== undefined) view.setUint32(4, Number(data.fdwStyle), true);
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: pointer
  if (data?.pwfltr !== undefined) view.setBigUint64(16, data.pwfltr === null ? 0n : BigInt(util.toPointer(data.pwfltr)), true);
  // 0x18: u32
  if (data?.cbwfltr !== undefined) view.setUint32(24, Number(data.cbwfltr), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.szFilterTag !== undefined) view.setBigUint64(40, data.szFilterTag === null ? 0n : BigInt(util.toPointer(data.szFilterTag)), true);
  // 0x30: pointer
  if (data?.szFilter !== undefined) view.setBigUint64(48, data.szFilter === null ? 0n : BigInt(util.toPointer(data.szFilter)), true);
  // 0x38: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.cchName !== undefined) view.setUint32(64, Number(data.cchName), true);
  // 0x44: u32
  if (data?.fdwEnum !== undefined) view.setUint32(68, Number(data.fdwEnum), true);
  // 0x48: pointer
  if (data?.pwfltrEnum !== undefined) view.setBigUint64(72, data.pwfltrEnum === null ? 0n : BigInt(util.toPointer(data.pwfltrEnum)), true);
  // 0x50: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(80, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x58: buffer
  if (data?.pszTemplateName !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(96, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x68: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(104, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVOPENDESCA (size: 48)
 */
export interface ACMDRVOPENDESCA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccComp: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwError: number;
  /** Windows.Win32.Foundation.PSTR */
  pszSectionName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pszAliasName: string | null;
  /** u32 */
  dnDevNode: number;
}

export const sizeofACMDRVOPENDESCA = 48;

export function allocACMDRVOPENDESCA(data?: Partial<ACMDRVOPENDESCA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVOPENDESCA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccComp !== undefined) view.setUint32(8, Number(data.fccComp), true);
  // 0x0c: u32
  if (data?.dwVersion !== undefined) view.setUint32(12, Number(data.dwVersion), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: u32
  if (data?.dwError !== undefined) view.setUint32(20, Number(data.dwError), true);
  // 0x18: buffer
  if (data?.pszSectionName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszSectionName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszAliasName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszAliasName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dnDevNode !== undefined) view.setUint32(40, Number(data.dnDevNode), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVOPENDESCW (size: 48)
 */
export interface ACMDRVOPENDESCW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccComp: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwError: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszSectionName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszAliasName: string | null;
  /** u32 */
  dnDevNode: number;
}

export const sizeofACMDRVOPENDESCW = 48;

export function allocACMDRVOPENDESCW(data?: Partial<ACMDRVOPENDESCW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVOPENDESCW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccComp !== undefined) view.setUint32(8, Number(data.fccComp), true);
  // 0x0c: u32
  if (data?.dwVersion !== undefined) view.setUint32(12, Number(data.dwVersion), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: u32
  if (data?.dwError !== undefined) view.setUint32(20, Number(data.dwError), true);
  // 0x18: buffer
  if (data?.pszSectionName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszSectionName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszAliasName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszAliasName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dnDevNode !== undefined) view.setUint32(40, Number(data.dnDevNode), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVSTREAMINSTANCE (size: 72)
 */
export interface ACMDRVSTREAMINSTANCE {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pwfxSrc: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pwfxDst: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pwfltr: Deno.PointerValue | Uint8Array | null;
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwInstance: Deno.PointerValue;
  /** u32 */
  fdwOpen: number;
  /** u32 */
  fdwDriver: number;
  /** usize */
  dwDriver: Deno.PointerValue;
  /** Windows.Win32.Media.Audio.HACMSTREAM */
  has: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACMDRVSTREAMINSTANCE = 72;

export function allocACMDRVSTREAMINSTANCE(data?: Partial<ACMDRVSTREAMINSTANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVSTREAMINSTANCE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pwfxSrc !== undefined) view.setBigUint64(8, data.pwfxSrc === null ? 0n : BigInt(util.toPointer(data.pwfxSrc)), true);
  // 0x10: pointer
  if (data?.pwfxDst !== undefined) view.setBigUint64(16, data.pwfxDst === null ? 0n : BigInt(util.toPointer(data.pwfxDst)), true);
  // 0x18: pointer
  if (data?.pwfltr !== undefined) view.setBigUint64(24, data.pwfltr === null ? 0n : BigInt(util.toPointer(data.pwfltr)), true);
  // 0x20: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(32, BigInt(data.dwCallback), true);
  // 0x28: usize
  if (data?.dwInstance !== undefined) view.setBigUint64(40, BigInt(data.dwInstance), true);
  // 0x30: u32
  if (data?.fdwOpen !== undefined) view.setUint32(48, Number(data.fdwOpen), true);
  // 0x34: u32
  if (data?.fdwDriver !== undefined) view.setUint32(52, Number(data.fdwDriver), true);
  // 0x38: usize
  if (data?.dwDriver !== undefined) view.setBigUint64(56, BigInt(data.dwDriver), true);
  // 0x40: pointer
  if (data?.has !== undefined) view.setBigUint64(64, data.has === null ? 0n : BigInt(util.toPointer(data.has)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVSTREAMHEADER (size: 144)
 */
export interface ACMDRVSTREAMHEADER {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStatus: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** ptr */
  pbSrc: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbSrcLength: number;
  /** u32 */
  cbSrcLengthUsed: number;
  /** usize */
  dwSrcUser: Deno.PointerValue;
  /** ptr */
  pbDst: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbDstLength: number;
  /** u32 */
  cbDstLengthUsed: number;
  /** usize */
  dwDstUser: Deno.PointerValue;
  /** u32 */
  fdwConvert: number;
  /** ptr */
  padshNext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fdwDriver: number;
  /** usize */
  dwDriver: Deno.PointerValue;
  /** u32 */
  fdwPrepared: number;
  /** usize */
  dwPrepared: Deno.PointerValue;
  /** ptr */
  pbPreparedSrc: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbPreparedSrcLength: number;
  /** ptr */
  pbPreparedDst: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbPreparedDstLength: number;
}

export const sizeofACMDRVSTREAMHEADER = 144;

export function allocACMDRVSTREAMHEADER(data?: Partial<ACMDRVSTREAMHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVSTREAMHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStatus !== undefined) view.setUint32(4, Number(data.fdwStatus), true);
  // 0x08: usize
  if (data?.dwUser !== undefined) view.setBigUint64(8, BigInt(data.dwUser), true);
  // 0x10: pointer
  if (data?.pbSrc !== undefined) view.setBigUint64(16, data.pbSrc === null ? 0n : BigInt(util.toPointer(data.pbSrc)), true);
  // 0x18: u32
  if (data?.cbSrcLength !== undefined) view.setUint32(24, Number(data.cbSrcLength), true);
  // 0x1c: u32
  if (data?.cbSrcLengthUsed !== undefined) view.setUint32(28, Number(data.cbSrcLengthUsed), true);
  // 0x20: usize
  if (data?.dwSrcUser !== undefined) view.setBigUint64(32, BigInt(data.dwSrcUser), true);
  // 0x28: pointer
  if (data?.pbDst !== undefined) view.setBigUint64(40, data.pbDst === null ? 0n : BigInt(util.toPointer(data.pbDst)), true);
  // 0x30: u32
  if (data?.cbDstLength !== undefined) view.setUint32(48, Number(data.cbDstLength), true);
  // 0x34: u32
  if (data?.cbDstLengthUsed !== undefined) view.setUint32(52, Number(data.cbDstLengthUsed), true);
  // 0x38: usize
  if (data?.dwDstUser !== undefined) view.setBigUint64(56, BigInt(data.dwDstUser), true);
  // 0x40: u32
  if (data?.fdwConvert !== undefined) view.setUint32(64, Number(data.fdwConvert), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.padshNext !== undefined) view.setBigUint64(72, data.padshNext === null ? 0n : BigInt(util.toPointer(data.padshNext)), true);
  // 0x50: u32
  if (data?.fdwDriver !== undefined) view.setUint32(80, Number(data.fdwDriver), true);
  // 0x54: pad4
  // 0x58: usize
  if (data?.dwDriver !== undefined) view.setBigUint64(88, BigInt(data.dwDriver), true);
  // 0x60: u32
  if (data?.fdwPrepared !== undefined) view.setUint32(96, Number(data.fdwPrepared), true);
  // 0x64: pad4
  // 0x68: usize
  if (data?.dwPrepared !== undefined) view.setBigUint64(104, BigInt(data.dwPrepared), true);
  // 0x70: pointer
  if (data?.pbPreparedSrc !== undefined) view.setBigUint64(112, data.pbPreparedSrc === null ? 0n : BigInt(util.toPointer(data.pbPreparedSrc)), true);
  // 0x78: u32
  if (data?.cbPreparedSrcLength !== undefined) view.setUint32(120, Number(data.cbPreparedSrcLength), true);
  // 0x7c: pad4
  // 0x80: pointer
  if (data?.pbPreparedDst !== undefined) view.setBigUint64(128, data.pbPreparedDst === null ? 0n : BigInt(util.toPointer(data.pbPreparedDst)), true);
  // 0x88: u32
  if (data?.cbPreparedDstLength !== undefined) view.setUint32(136, Number(data.cbPreparedDstLength), true);
  // 0x8c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVSTREAMSIZE (size: 16)
 */
export interface ACMDRVSTREAMSIZE {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwSize: number;
  /** u32 */
  cbSrcLength: number;
  /** u32 */
  cbDstLength: number;
}

export const sizeofACMDRVSTREAMSIZE = 16;

export function allocACMDRVSTREAMSIZE(data?: Partial<ACMDRVSTREAMSIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVSTREAMSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwSize !== undefined) view.setUint32(4, Number(data.fdwSize), true);
  // 0x08: u32
  if (data?.cbSrcLength !== undefined) view.setUint32(8, Number(data.cbSrcLength), true);
  // 0x0c: u32
  if (data?.cbDstLength !== undefined) view.setUint32(12, Number(data.cbDstLength), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVFORMATSUGGEST (size: 40)
 */
export interface ACMDRVFORMATSUGGEST {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwSuggest: number;
  /** ptr */
  pwfxSrc: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfxSrc: number;
  /** ptr */
  pwfxDst: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfxDst: number;
}

export const sizeofACMDRVFORMATSUGGEST = 40;

export function allocACMDRVFORMATSUGGEST(data?: Partial<ACMDRVFORMATSUGGEST>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVFORMATSUGGEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwSuggest !== undefined) view.setUint32(4, Number(data.fdwSuggest), true);
  // 0x08: pointer
  if (data?.pwfxSrc !== undefined) view.setBigUint64(8, data.pwfxSrc === null ? 0n : BigInt(util.toPointer(data.pwfxSrc)), true);
  // 0x10: u32
  if (data?.cbwfxSrc !== undefined) view.setUint32(16, Number(data.cbwfxSrc), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pwfxDst !== undefined) view.setBigUint64(24, data.pwfxDst === null ? 0n : BigInt(util.toPointer(data.pwfxDst)), true);
  // 0x20: u32
  if (data?.cbwfxDst !== undefined) view.setUint32(32, Number(data.cbwfxDst), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3DOVERLAYCAPS (size: 16)
 */
export interface D3DOVERLAYCAPS {
  /** u32 */
  Caps: number;
  /** u32 */
  MaxOverlayDisplayWidth: number;
  /** u32 */
  MaxOverlayDisplayHeight: number;
}

export const sizeofD3DOVERLAYCAPS = 16;

export function allocD3DOVERLAYCAPS(data?: Partial<D3DOVERLAYCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DOVERLAYCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Caps !== undefined) view.setUint32(0, Number(data.Caps), true);
  // 0x04: u32
  if (data?.MaxOverlayDisplayWidth !== undefined) view.setUint32(4, Number(data.MaxOverlayDisplayWidth), true);
  // 0x08: u32
  if (data?.MaxOverlayDisplayHeight !== undefined) view.setUint32(8, Number(data.MaxOverlayDisplayHeight), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPRIORITY (size: 8)
 */
export interface KSPRIORITY {
  /** u32 */
  PriorityClass: number;
  /** u32 */
  PrioritySubClass: number;
}

export const sizeofKSPRIORITY = 8;

export function allocKSPRIORITY(data?: Partial<KSPRIORITY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPRIORITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PriorityClass !== undefined) view.setUint32(0, Number(data.PriorityClass), true);
  // 0x04: u32
  if (data?.PrioritySubClass !== undefined) view.setUint32(4, Number(data.PrioritySubClass), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSE_NODE (size: 16)
 */
export interface KSE_NODE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Event: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSE_NODE = 16;

export function allocKSE_NODE(data?: Partial<KSE_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSE_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Event !== undefined) view.setBigUint64(0, data.Event === null ? 0n : BigInt(util.toPointer(data.Event)), true);
  // 0x08: u32
  if (data?.NodeId !== undefined) view.setUint32(8, Number(data.NodeId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSMULTIPLE_ITEM (size: 8)
 */
export interface KSMULTIPLE_ITEM {
  /** u32 */
  Size: number;
  /** u32 */
  Count: number;
}

export const sizeofKSMULTIPLE_ITEM = 8;

export function allocKSMULTIPLE_ITEM(data?: Partial<KSMULTIPLE_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofKSMULTIPLE_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_DESCRIPTION (size: 24)
 */
export interface KSPROPERTY_DESCRIPTION {
  /** u32 */
  AccessFlags: number;
  /** u32 */
  DescriptionSize: number;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  PropTypeSet: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MembersListCount: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSPROPERTY_DESCRIPTION = 24;

export function allocKSPROPERTY_DESCRIPTION(data?: Partial<KSPROPERTY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AccessFlags !== undefined) view.setUint32(0, Number(data.AccessFlags), true);
  // 0x04: u32
  if (data?.DescriptionSize !== undefined) view.setUint32(4, Number(data.DescriptionSize), true);
  // 0x08: pointer
  if (data?.PropTypeSet !== undefined) view.setBigUint64(8, data.PropTypeSet === null ? 0n : BigInt(util.toPointer(data.PropTypeSet)), true);
  // 0x10: u32
  if (data?.MembersListCount !== undefined) view.setUint32(16, Number(data.MembersListCount), true);
  // 0x14: u32
  if (data?.Reserved !== undefined) view.setUint32(20, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_MEMBERSHEADER (size: 16)
 */
export interface KSPROPERTY_MEMBERSHEADER {
  /** u32 */
  MembersFlags: number;
  /** u32 */
  MembersSize: number;
  /** u32 */
  MembersCount: number;
  /** u32 */
  Flags: number;
}

export const sizeofKSPROPERTY_MEMBERSHEADER = 16;

export function allocKSPROPERTY_MEMBERSHEADER(data?: Partial<KSPROPERTY_MEMBERSHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_MEMBERSHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MembersFlags !== undefined) view.setUint32(0, Number(data.MembersFlags), true);
  // 0x04: u32
  if (data?.MembersSize !== undefined) view.setUint32(4, Number(data.MembersSize), true);
  // 0x08: u32
  if (data?.MembersCount !== undefined) view.setUint32(8, Number(data.MembersCount), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_BOUNDS_LONG (size: 16)
 */
export interface KSPROPERTY_BOUNDS_LONG {
  /** _Anonymous1_e__Struct */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Struct */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_BOUNDS_LONG = 16;

export function allocKSPROPERTY_BOUNDS_LONG(data?: Partial<KSPROPERTY_BOUNDS_LONG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BOUNDS_LONG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_BOUNDS_LONGLONG (size: 16)
 */
export interface KSPROPERTY_BOUNDS_LONGLONG {
  /** _Anonymous1_e__Struct */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Struct */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_BOUNDS_LONGLONG = 16;

export function allocKSPROPERTY_BOUNDS_LONGLONG(data?: Partial<KSPROPERTY_BOUNDS_LONGLONG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BOUNDS_LONGLONG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_STEPPING_LONG (size: 16)
 */
export interface KSPROPERTY_STEPPING_LONG {
  /** u32 */
  SteppingDelta: number;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.Media.KernelStreaming.KSPROPERTY_BOUNDS_LONG */
  Bounds: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_STEPPING_LONG = 16;

export function allocKSPROPERTY_STEPPING_LONG(data?: Partial<KSPROPERTY_STEPPING_LONG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_STEPPING_LONG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SteppingDelta !== undefined) view.setUint32(0, Number(data.SteppingDelta), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.Bounds !== undefined) view.setBigUint64(8, data.Bounds === null ? 0n : BigInt(util.toPointer(data.Bounds)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_STEPPING_LONGLONG (size: 16)
 */
export interface KSPROPERTY_STEPPING_LONGLONG {
  /** u64 */
  SteppingDelta: Deno.PointerValue;
  /** Windows.Win32.Media.KernelStreaming.KSPROPERTY_BOUNDS_LONGLONG */
  Bounds: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_STEPPING_LONGLONG = 16;

export function allocKSPROPERTY_STEPPING_LONGLONG(data?: Partial<KSPROPERTY_STEPPING_LONGLONG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_STEPPING_LONGLONG);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SteppingDelta !== undefined) view.setBigUint64(0, BigInt(data.SteppingDelta), true);
  // 0x08: pointer
  if (data?.Bounds !== undefined) view.setBigUint64(8, data.Bounds === null ? 0n : BigInt(util.toPointer(data.Bounds)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSQUERYBUFFER (size: 24)
 */
export interface KSQUERYBUFFER {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Event: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  EventData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSQUERYBUFFER = 24;

export function allocKSQUERYBUFFER(data?: Partial<KSQUERYBUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSQUERYBUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Event !== undefined) view.setBigUint64(0, data.Event === null ? 0n : BigInt(util.toPointer(data.Event)), true);
  // 0x08: pointer
  if (data?.EventData !== undefined) view.setBigUint64(8, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRELATIVEEVENT (size: 40)
 */
export interface KSRELATIVEEVENT {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Event: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  EventData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSRELATIVEEVENT = 40;

export function allocKSRELATIVEEVENT(data?: Partial<KSRELATIVEEVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRELATIVEEVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x18: pointer
  if (data?.Event !== undefined) view.setBigUint64(24, data.Event === null ? 0n : BigInt(util.toPointer(data.Event)), true);
  // 0x20: pointer
  if (data?.EventData !== undefined) view.setBigUint64(32, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSEVENT_TIME_MARK (size: 16)
 */
export interface KSEVENT_TIME_MARK {
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  EventData: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  MarkTime: Deno.PointerValue;
}

export const sizeofKSEVENT_TIME_MARK = 16;

export function allocKSEVENT_TIME_MARK(data?: Partial<KSEVENT_TIME_MARK>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEVENT_TIME_MARK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EventData !== undefined) view.setBigUint64(0, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  // 0x08: i64
  if (data?.MarkTime !== undefined) view.setBigInt64(8, BigInt(data.MarkTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSEVENT_TIME_INTERVAL (size: 24)
 */
export interface KSEVENT_TIME_INTERVAL {
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  EventData: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  TimeBase: Deno.PointerValue;
  /** i64 */
  Interval: Deno.PointerValue;
}

export const sizeofKSEVENT_TIME_INTERVAL = 24;

export function allocKSEVENT_TIME_INTERVAL(data?: Partial<KSEVENT_TIME_INTERVAL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEVENT_TIME_INTERVAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EventData !== undefined) view.setBigUint64(0, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  // 0x08: i64
  if (data?.TimeBase !== undefined) view.setBigInt64(8, BigInt(data.TimeBase), true);
  // 0x10: i64
  if (data?.Interval !== undefined) view.setBigInt64(16, BigInt(data.Interval), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSINTERVAL (size: 16)
 */
export interface KSINTERVAL {
  /** i64 */
  TimeBase: Deno.PointerValue;
  /** i64 */
  Interval: Deno.PointerValue;
}

export const sizeofKSINTERVAL = 16;

export function allocKSINTERVAL(data?: Partial<KSINTERVAL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSINTERVAL);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.TimeBase !== undefined) view.setBigInt64(0, BigInt(data.TimeBase), true);
  // 0x08: i64
  if (data?.Interval !== undefined) view.setBigInt64(8, BigInt(data.Interval), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCOMPONENTID (size: 40)
 */
export interface KSCOMPONENTID {
  /** System.Guid */
  Manufacturer: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Product: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Component: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Name: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Version: number;
  /** u32 */
  Revision: number;
}

export const sizeofKSCOMPONENTID = 40;

export function allocKSCOMPONENTID(data?: Partial<KSCOMPONENTID>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCOMPONENTID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Manufacturer !== undefined) view.setBigUint64(0, data.Manufacturer === null ? 0n : BigInt(util.toPointer(data.Manufacturer)), true);
  // 0x08: pointer
  if (data?.Product !== undefined) view.setBigUint64(8, data.Product === null ? 0n : BigInt(util.toPointer(data.Product)), true);
  // 0x10: pointer
  if (data?.Component !== undefined) view.setBigUint64(16, data.Component === null ? 0n : BigInt(util.toPointer(data.Component)), true);
  // 0x18: pointer
  if (data?.Name !== undefined) view.setBigUint64(24, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x20: u32
  if (data?.Version !== undefined) view.setUint32(32, Number(data.Version), true);
  // 0x24: u32
  if (data?.Revision !== undefined) view.setUint32(36, Number(data.Revision), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_POSITIONS (size: 24)
 */
export interface KSPROPERTY_POSITIONS {
  /** i64 */
  Current: Deno.PointerValue;
  /** i64 */
  Stop: Deno.PointerValue;
  /** Windows.Win32.Media.KernelStreaming.KS_SEEKING_FLAGS */
  CurrentFlags: KS_SEEKING_FLAGS;
  /** Windows.Win32.Media.KernelStreaming.KS_SEEKING_FLAGS */
  StopFlags: KS_SEEKING_FLAGS;
}

export const sizeofKSPROPERTY_POSITIONS = 24;

export function allocKSPROPERTY_POSITIONS(data?: Partial<KSPROPERTY_POSITIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_POSITIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Current !== undefined) view.setBigInt64(0, BigInt(data.Current), true);
  // 0x08: i64
  if (data?.Stop !== undefined) view.setBigInt64(8, BigInt(data.Stop), true);
  // 0x10: i32
  if (data?.CurrentFlags !== undefined) view.setInt32(16, Number(data.CurrentFlags), true);
  // 0x14: i32
  if (data?.StopFlags !== undefined) view.setInt32(20, Number(data.StopFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_MEDIAAVAILABLE (size: 16)
 */
export interface KSPROPERTY_MEDIAAVAILABLE {
  /** i64 */
  Earliest: Deno.PointerValue;
  /** i64 */
  Latest: Deno.PointerValue;
}

export const sizeofKSPROPERTY_MEDIAAVAILABLE = 16;

export function allocKSPROPERTY_MEDIAAVAILABLE(data?: Partial<KSPROPERTY_MEDIAAVAILABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_MEDIAAVAILABLE);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Earliest !== undefined) view.setBigInt64(0, BigInt(data.Earliest), true);
  // 0x08: i64
  if (data?.Latest !== undefined) view.setBigInt64(8, BigInt(data.Latest), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSP_TIMEFORMAT (size: 32)
 */
export interface KSP_TIMEFORMAT {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SourceFormat: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  TargetFormat: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  Time: Deno.PointerValue;
}

export const sizeofKSP_TIMEFORMAT = 32;

export function allocKSP_TIMEFORMAT(data?: Partial<KSP_TIMEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSP_TIMEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.SourceFormat !== undefined) view.setBigUint64(8, data.SourceFormat === null ? 0n : BigInt(util.toPointer(data.SourceFormat)), true);
  // 0x10: pointer
  if (data?.TargetFormat !== undefined) view.setBigUint64(16, data.TargetFormat === null ? 0n : BigInt(util.toPointer(data.TargetFormat)), true);
  // 0x18: i64
  if (data?.Time !== undefined) view.setBigInt64(24, BigInt(data.Time), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTOPOLOGY_CONNECTION (size: 16)
 */
export interface KSTOPOLOGY_CONNECTION {
  /** u32 */
  FromNode: number;
  /** u32 */
  FromNodePin: number;
  /** u32 */
  ToNode: number;
  /** u32 */
  ToNodePin: number;
}

export const sizeofKSTOPOLOGY_CONNECTION = 16;

export function allocKSTOPOLOGY_CONNECTION(data?: Partial<KSTOPOLOGY_CONNECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTOPOLOGY_CONNECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FromNode !== undefined) view.setUint32(0, Number(data.FromNode), true);
  // 0x04: u32
  if (data?.FromNodePin !== undefined) view.setUint32(4, Number(data.FromNodePin), true);
  // 0x08: u32
  if (data?.ToNode !== undefined) view.setUint32(8, Number(data.ToNode), true);
  // 0x0c: u32
  if (data?.ToNodePin !== undefined) view.setUint32(12, Number(data.ToNodePin), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTOPOLOGY (size: 64)
 */
export interface KSTOPOLOGY {
  /** u32 */
  CategoriesCount: number;
  /** ptr */
  Categories: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TopologyNodesCount: number;
  /** ptr */
  TopologyNodes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TopologyConnectionsCount: number;
  /** ptr */
  TopologyConnections: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TopologyNodesNames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved: number;
}

export const sizeofKSTOPOLOGY = 64;

export function allocKSTOPOLOGY(data?: Partial<KSTOPOLOGY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTOPOLOGY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CategoriesCount !== undefined) view.setUint32(0, Number(data.CategoriesCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Categories !== undefined) view.setBigUint64(8, data.Categories === null ? 0n : BigInt(util.toPointer(data.Categories)), true);
  // 0x10: u32
  if (data?.TopologyNodesCount !== undefined) view.setUint32(16, Number(data.TopologyNodesCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.TopologyNodes !== undefined) view.setBigUint64(24, data.TopologyNodes === null ? 0n : BigInt(util.toPointer(data.TopologyNodes)), true);
  // 0x20: u32
  if (data?.TopologyConnectionsCount !== undefined) view.setUint32(32, Number(data.TopologyConnectionsCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.TopologyConnections !== undefined) view.setBigUint64(40, data.TopologyConnections === null ? 0n : BigInt(util.toPointer(data.TopologyConnections)), true);
  // 0x30: pointer
  if (data?.TopologyNodesNames !== undefined) view.setBigUint64(48, data.TopologyNodesNames === null ? 0n : BigInt(util.toPointer(data.TopologyNodesNames)), true);
  // 0x38: u32
  if (data?.Reserved !== undefined) view.setUint32(56, Number(data.Reserved), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODE_CREATE (size: 8)
 */
export interface KSNODE_CREATE {
  /** u32 */
  CreateFlags: number;
  /** u32 */
  Node: number;
}

export const sizeofKSNODE_CREATE = 8;

export function allocKSNODE_CREATE(data?: Partial<KSNODE_CREATE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODE_CREATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CreateFlags !== undefined) view.setUint32(0, Number(data.CreateFlags), true);
  // 0x04: u32
  if (data?.Node !== undefined) view.setUint32(4, Number(data.Node), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSP_PIN (size: 24)
 */
export interface KSP_PIN {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PinId: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSP_PIN = 24;

export function allocKSP_PIN(data?: Partial<KSP_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSP_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.PinId !== undefined) view.setUint32(8, Number(data.PinId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSE_PIN (size: 16)
 */
export interface KSE_PIN {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Event: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PinId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSE_PIN = 16;

export function allocKSE_PIN(data?: Partial<KSE_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSE_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Event !== undefined) view.setBigUint64(0, data.Event === null ? 0n : BigInt(util.toPointer(data.Event)), true);
  // 0x08: u32
  if (data?.PinId !== undefined) view.setUint32(8, Number(data.PinId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPIN_CINSTANCES (size: 8)
 */
export interface KSPIN_CINSTANCES {
  /** u32 */
  PossibleCount: number;
  /** u32 */
  CurrentCount: number;
}

export const sizeofKSPIN_CINSTANCES = 8;

export function allocKSPIN_CINSTANCES(data?: Partial<KSPIN_CINSTANCES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPIN_CINSTANCES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PossibleCount !== undefined) view.setUint32(0, Number(data.PossibleCount), true);
  // 0x04: u32
  if (data?.CurrentCount !== undefined) view.setUint32(4, Number(data.CurrentCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSATTRIBUTE (size: 16)
 */
export interface KSATTRIBUTE {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** System.Guid */
  Attribute: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSATTRIBUTE = 16;

export function allocKSATTRIBUTE(data?: Partial<KSATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Attribute !== undefined) view.setBigUint64(8, data.Attribute === null ? 0n : BigInt(util.toPointer(data.Attribute)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPIN_CONNECT (size: 40)
 */
export interface KSPIN_CONNECT {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Interface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Medium: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PinId: number;
  /** Windows.Win32.Foundation.HANDLE */
  PinToHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSPRIORITY */
  Priority: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPIN_CONNECT = 40;

export function allocKSPIN_CONNECT(data?: Partial<KSPIN_CONNECT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPIN_CONNECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Interface !== undefined) view.setBigUint64(0, data.Interface === null ? 0n : BigInt(util.toPointer(data.Interface)), true);
  // 0x08: pointer
  if (data?.Medium !== undefined) view.setBigUint64(8, data.Medium === null ? 0n : BigInt(util.toPointer(data.Medium)), true);
  // 0x10: u32
  if (data?.PinId !== undefined) view.setUint32(16, Number(data.PinId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PinToHandle !== undefined) view.setBigUint64(24, data.PinToHandle === null ? 0n : BigInt(util.toPointer(data.PinToHandle)), true);
  // 0x20: pointer
  if (data?.Priority !== undefined) view.setBigUint64(32, data.Priority === null ? 0n : BigInt(util.toPointer(data.Priority)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPIN_PHYSICALCONNECTION (size: 16)
 */
export interface KSPIN_PHYSICALCONNECTION {
  /** u32 */
  Size: number;
  /** u32 */
  Pin: number;
  /** array */
  SymbolicLinkName: Deno.PointerValue | null;
}

export const sizeofKSPIN_PHYSICALCONNECTION = 16;

export function allocKSPIN_PHYSICALCONNECTION(data?: Partial<KSPIN_PHYSICALCONNECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPIN_PHYSICALCONNECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Pin !== undefined) view.setUint32(4, Number(data.Pin), true);
  // 0x08: pointer
  if (data?.SymbolicLinkName !== undefined) view.setBigUint64(8, data.SymbolicLinkName === null ? 0n : BigInt(util.toPointer(data.SymbolicLinkName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSALLOCATOR_FRAMING (size: 40)
 */
export interface KSALLOCATOR_FRAMING {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PoolType: number;
  /** u32 */
  Frames: number;
  /** u32 */
  FrameSize: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
}

export const sizeofKSALLOCATOR_FRAMING = 40;

export function allocKSALLOCATOR_FRAMING(data?: Partial<KSALLOCATOR_FRAMING>): Uint8Array {
  const buf = new Uint8Array(sizeofKSALLOCATOR_FRAMING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: u32
  if (data?.PoolType !== undefined) view.setUint32(8, Number(data.PoolType), true);
  // 0x0c: u32
  if (data?.Frames !== undefined) view.setUint32(12, Number(data.Frames), true);
  // 0x10: u32
  if (data?.FrameSize !== undefined) view.setUint32(16, Number(data.FrameSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: u32
  if (data?.Reserved !== undefined) view.setUint32(32, Number(data.Reserved), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE (size: 16)
 */
export interface KS_FRAMING_RANGE {
  /** u32 */
  MinFrameSize: number;
  /** u32 */
  MaxFrameSize: number;
  /** u32 */
  Stepping: number;
}

export const sizeofKS_FRAMING_RANGE = 16;

export function allocKS_FRAMING_RANGE(data?: Partial<KS_FRAMING_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_FRAMING_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MinFrameSize !== undefined) view.setUint32(0, Number(data.MinFrameSize), true);
  // 0x04: u32
  if (data?.MaxFrameSize !== undefined) view.setUint32(4, Number(data.MaxFrameSize), true);
  // 0x08: u32
  if (data?.Stepping !== undefined) view.setUint32(8, Number(data.Stepping), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE_WEIGHTED (size: 16)
 */
export interface KS_FRAMING_RANGE_WEIGHTED {
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE */
  Range: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InPlaceWeight: number;
  /** u32 */
  NotInPlaceWeight: number;
}

export const sizeofKS_FRAMING_RANGE_WEIGHTED = 16;

export function allocKS_FRAMING_RANGE_WEIGHTED(data?: Partial<KS_FRAMING_RANGE_WEIGHTED>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_FRAMING_RANGE_WEIGHTED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Range !== undefined) view.setBigUint64(0, data.Range === null ? 0n : BigInt(util.toPointer(data.Range)), true);
  // 0x08: u32
  if (data?.InPlaceWeight !== undefined) view.setUint32(8, Number(data.InPlaceWeight), true);
  // 0x0c: u32
  if (data?.NotInPlaceWeight !== undefined) view.setUint32(12, Number(data.NotInPlaceWeight), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_COMPRESSION (size: 16)
 */
export interface KS_COMPRESSION {
  /** u32 */
  RatioNumerator: number;
  /** u32 */
  RatioDenominator: number;
  /** u32 */
  RatioConstantMargin: number;
}

export const sizeofKS_COMPRESSION = 16;

export function allocKS_COMPRESSION(data?: Partial<KS_COMPRESSION>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_COMPRESSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RatioNumerator !== undefined) view.setUint32(0, Number(data.RatioNumerator), true);
  // 0x04: u32
  if (data?.RatioDenominator !== undefined) view.setUint32(4, Number(data.RatioDenominator), true);
  // 0x08: u32
  if (data?.RatioConstantMargin !== undefined) view.setUint32(8, Number(data.RatioConstantMargin), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_FRAMING_ITEM (size: 64)
 */
export interface KS_FRAMING_ITEM {
  /** System.Guid */
  MemoryType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  BusType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MemoryFlags: number;
  /** u32 */
  BusFlags: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Frames: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MemoryTypeWeight: number;
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE */
  PhysicalRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE_WEIGHTED */
  FramingRange: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_FRAMING_ITEM = 64;

export function allocKS_FRAMING_ITEM(data?: Partial<KS_FRAMING_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_FRAMING_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MemoryType !== undefined) view.setBigUint64(0, data.MemoryType === null ? 0n : BigInt(util.toPointer(data.MemoryType)), true);
  // 0x08: pointer
  if (data?.BusType !== undefined) view.setBigUint64(8, data.BusType === null ? 0n : BigInt(util.toPointer(data.BusType)), true);
  // 0x10: u32
  if (data?.MemoryFlags !== undefined) view.setUint32(16, Number(data.MemoryFlags), true);
  // 0x14: u32
  if (data?.BusFlags !== undefined) view.setUint32(20, Number(data.BusFlags), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: u32
  if (data?.Frames !== undefined) view.setUint32(28, Number(data.Frames), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x28: u32
  if (data?.MemoryTypeWeight !== undefined) view.setUint32(40, Number(data.MemoryTypeWeight), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.PhysicalRange !== undefined) view.setBigUint64(48, data.PhysicalRange === null ? 0n : BigInt(util.toPointer(data.PhysicalRange)), true);
  // 0x38: pointer
  if (data?.FramingRange !== undefined) view.setBigUint64(56, data.FramingRange === null ? 0n : BigInt(util.toPointer(data.FramingRange)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSALLOCATOR_FRAMING_EX (size: 32)
 */
export interface KSALLOCATOR_FRAMING_EX {
  /** u32 */
  CountItems: number;
  /** u32 */
  PinFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_COMPRESSION */
  OutputCompression: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PinWeight: number;
  /** array */
  FramingItem: Deno.PointerValue | null;
}

export const sizeofKSALLOCATOR_FRAMING_EX = 32;

export function allocKSALLOCATOR_FRAMING_EX(data?: Partial<KSALLOCATOR_FRAMING_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSALLOCATOR_FRAMING_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CountItems !== undefined) view.setUint32(0, Number(data.CountItems), true);
  // 0x04: u32
  if (data?.PinFlags !== undefined) view.setUint32(4, Number(data.PinFlags), true);
  // 0x08: pointer
  if (data?.OutputCompression !== undefined) view.setBigUint64(8, data.OutputCompression === null ? 0n : BigInt(util.toPointer(data.OutputCompression)), true);
  // 0x10: u32
  if (data?.PinWeight !== undefined) view.setUint32(16, Number(data.PinWeight), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.FramingItem !== undefined) view.setBigUint64(24, data.FramingItem === null ? 0n : BigInt(util.toPointer(data.FramingItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAMALLOCATOR_STATUS (size: 16)
 */
export interface KSSTREAMALLOCATOR_STATUS {
  /** Windows.Win32.Media.KernelStreaming.KSALLOCATOR_FRAMING */
  Framing: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AllocatedFrames: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSSTREAMALLOCATOR_STATUS = 16;

export function allocKSSTREAMALLOCATOR_STATUS(data?: Partial<KSSTREAMALLOCATOR_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAMALLOCATOR_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Framing !== undefined) view.setBigUint64(0, data.Framing === null ? 0n : BigInt(util.toPointer(data.Framing)), true);
  // 0x08: u32
  if (data?.AllocatedFrames !== undefined) view.setUint32(8, Number(data.AllocatedFrames), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAMALLOCATOR_STATUS_EX (size: 16)
 */
export interface KSSTREAMALLOCATOR_STATUS_EX {
  /** Windows.Win32.Media.KernelStreaming.KSALLOCATOR_FRAMING_EX */
  Framing: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AllocatedFrames: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSSTREAMALLOCATOR_STATUS_EX = 16;

export function allocKSSTREAMALLOCATOR_STATUS_EX(data?: Partial<KSSTREAMALLOCATOR_STATUS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAMALLOCATOR_STATUS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Framing !== undefined) view.setBigUint64(0, data.Framing === null ? 0n : BigInt(util.toPointer(data.Framing)), true);
  // 0x08: u32
  if (data?.AllocatedFrames !== undefined) view.setUint32(8, Number(data.AllocatedFrames), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAM_METADATA_INFO (size: 32)
 */
export interface KSSTREAM_METADATA_INFO {
  /** u32 */
  BufferSize: number;
  /** u32 */
  UsedSize: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SystemVa: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSSTREAM_METADATA_INFO = 32;

export function allocKSSTREAM_METADATA_INFO(data?: Partial<KSSTREAM_METADATA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAM_METADATA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BufferSize !== undefined) view.setUint32(0, Number(data.BufferSize), true);
  // 0x04: u32
  if (data?.UsedSize !== undefined) view.setUint32(4, Number(data.UsedSize), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  // 0x10: pointer
  if (data?.SystemVa !== undefined) view.setBigUint64(16, data.SystemVa === null ? 0n : BigInt(util.toPointer(data.SystemVa)), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAM_UVC_METADATATYPE_TIMESTAMP (size: 24)
 */
export interface KSSTREAM_UVC_METADATATYPE_TIMESTAMP {
  /** u32 */
  PresentationTimeStamp: number;
  /** u32 */
  SourceClockReference: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Reserved0: number;
  /** u32 */
  Reserved1: number;
}

export const sizeofKSSTREAM_UVC_METADATATYPE_TIMESTAMP = 24;

export function allocKSSTREAM_UVC_METADATATYPE_TIMESTAMP(data?: Partial<KSSTREAM_UVC_METADATATYPE_TIMESTAMP>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAM_UVC_METADATATYPE_TIMESTAMP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PresentationTimeStamp !== undefined) view.setUint32(0, Number(data.PresentationTimeStamp), true);
  // 0x04: u32
  if (data?.SourceClockReference !== undefined) view.setUint32(4, Number(data.SourceClockReference), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u16
  if (data?.Reserved0 !== undefined) view.setUint16(16, Number(data.Reserved0), true);
  // 0x12: u32
  if (data?.Reserved1 !== undefined) view.setUint32(18, Number(data.Reserved1), true);
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAM_UVC_METADATA (size: 16)
 */
export interface KSSTREAM_UVC_METADATA {
  /** Windows.Win32.Media.KernelStreaming.KSSTREAM_UVC_METADATATYPE_TIMESTAMP */
  StartOfFrameTimestamp: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSSTREAM_UVC_METADATATYPE_TIMESTAMP */
  EndOfFrameTimestamp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSSTREAM_UVC_METADATA = 16;

export function allocKSSTREAM_UVC_METADATA(data?: Partial<KSSTREAM_UVC_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAM_UVC_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartOfFrameTimestamp !== undefined) view.setBigUint64(0, data.StartOfFrameTimestamp === null ? 0n : BigInt(util.toPointer(data.StartOfFrameTimestamp)), true);
  // 0x08: pointer
  if (data?.EndOfFrameTimestamp !== undefined) view.setBigUint64(8, data.EndOfFrameTimestamp === null ? 0n : BigInt(util.toPointer(data.EndOfFrameTimestamp)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPIN_MDL_CACHING_NOTIFICATION (size: 16)
 */
export interface KSPIN_MDL_CACHING_NOTIFICATION {
  /** Windows.Win32.Media.KernelStreaming.KSPIN_MDL_CACHING_EVENT */
  Event: KSPIN_MDL_CACHING_EVENT;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSPIN_MDL_CACHING_NOTIFICATION = 16;

export function allocKSPIN_MDL_CACHING_NOTIFICATION(data?: Partial<KSPIN_MDL_CACHING_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPIN_MDL_CACHING_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Event !== undefined) view.setInt32(0, Number(data.Event), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPIN_MDL_CACHING_NOTIFICATION32 (size: 8)
 */
export interface KSPIN_MDL_CACHING_NOTIFICATION32 {
  /** Windows.Win32.Media.KernelStreaming.KSPIN_MDL_CACHING_EVENT */
  Event: KSPIN_MDL_CACHING_EVENT;
  /** u32 */
  Buffer: number;
}

export const sizeofKSPIN_MDL_CACHING_NOTIFICATION32 = 8;

export function allocKSPIN_MDL_CACHING_NOTIFICATION32(data?: Partial<KSPIN_MDL_CACHING_NOTIFICATION32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPIN_MDL_CACHING_NOTIFICATION32);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Event !== undefined) view.setInt32(0, Number(data.Event), true);
  // 0x04: u32
  if (data?.Buffer !== undefined) view.setUint32(4, Number(data.Buffer), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSQUALITY_MANAGER (size: 16)
 */
export interface KSQUALITY_MANAGER {
  /** Windows.Win32.Foundation.HANDLE */
  QualityManager: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSQUALITY_MANAGER = 16;

export function allocKSQUALITY_MANAGER(data?: Partial<KSQUALITY_MANAGER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSQUALITY_MANAGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.QualityManager !== undefined) view.setBigUint64(0, data.QualityManager === null ? 0n : BigInt(util.toPointer(data.QualityManager)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSFRAMETIME (size: 16)
 */
export interface KSFRAMETIME {
  /** i64 */
  Duration: Deno.PointerValue;
  /** u32 */
  FrameFlags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSFRAMETIME = 16;

export function allocKSFRAMETIME(data?: Partial<KSFRAMETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofKSFRAMETIME);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Duration !== undefined) view.setBigInt64(0, BigInt(data.Duration), true);
  // 0x08: u32
  if (data?.FrameFlags !== undefined) view.setUint32(8, Number(data.FrameFlags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRATE (size: 32)
 */
export interface KSRATE {
  /** i64 */
  PresentationStart: Deno.PointerValue;
  /** i64 */
  Duration: Deno.PointerValue;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Interface: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Rate: number;
  /** u32 */
  Flags: number;
}

export const sizeofKSRATE = 32;

export function allocKSRATE(data?: Partial<KSRATE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRATE);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.PresentationStart !== undefined) view.setBigInt64(0, BigInt(data.PresentationStart), true);
  // 0x08: i64
  if (data?.Duration !== undefined) view.setBigInt64(8, BigInt(data.Duration), true);
  // 0x10: pointer
  if (data?.Interface !== undefined) view.setBigUint64(16, data.Interface === null ? 0n : BigInt(util.toPointer(data.Interface)), true);
  // 0x18: i32
  if (data?.Rate !== undefined) view.setInt32(24, Number(data.Rate), true);
  // 0x1c: u32
  if (data?.Flags !== undefined) view.setUint32(28, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRATE_CAPABILITY (size: 16)
 */
export interface KSRATE_CAPABILITY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSRATE */
  Rate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSRATE_CAPABILITY = 16;

export function allocKSRATE_CAPABILITY(data?: Partial<KSRATE_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRATE_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Rate !== undefined) view.setBigUint64(8, data.Rate === null ? 0n : BigInt(util.toPointer(data.Rate)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCLOCK_CREATE (size: 8)
 */
export interface KSCLOCK_CREATE {
  /** u32 */
  CreateFlags: number;
}

export const sizeofKSCLOCK_CREATE = 8;

export function allocKSCLOCK_CREATE(data?: Partial<KSCLOCK_CREATE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCLOCK_CREATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CreateFlags !== undefined) view.setUint32(0, Number(data.CreateFlags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCORRELATED_TIME (size: 16)
 */
export interface KSCORRELATED_TIME {
  /** i64 */
  Time: Deno.PointerValue;
  /** i64 */
  SystemTime: Deno.PointerValue;
}

export const sizeofKSCORRELATED_TIME = 16;

export function allocKSCORRELATED_TIME(data?: Partial<KSCORRELATED_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCORRELATED_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Time !== undefined) view.setBigInt64(0, BigInt(data.Time), true);
  // 0x08: i64
  if (data?.SystemTime !== undefined) view.setBigInt64(8, BigInt(data.SystemTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRESOLUTION (size: 16)
 */
export interface KSRESOLUTION {
  /** i64 */
  Granularity: Deno.PointerValue;
  /** i64 */
  Error: Deno.PointerValue;
}

export const sizeofKSRESOLUTION = 16;

export function allocKSRESOLUTION(data?: Partial<KSRESOLUTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRESOLUTION);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Granularity !== undefined) view.setBigInt64(0, BigInt(data.Granularity), true);
  // 0x08: i64
  if (data?.Error !== undefined) view.setBigInt64(8, BigInt(data.Error), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSQUALITY (size: 24)
 */
export interface KSQUALITY {
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Proportion: number;
  /** i64 */
  DeltaTime: Deno.PointerValue;
}

export const sizeofKSQUALITY = 24;

export function allocKSQUALITY(data?: Partial<KSQUALITY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSQUALITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Context !== undefined) view.setBigUint64(0, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  // 0x08: u32
  if (data?.Proportion !== undefined) view.setUint32(8, Number(data.Proportion), true);
  // 0x0c: pad4
  // 0x10: i64
  if (data?.DeltaTime !== undefined) view.setBigInt64(16, BigInt(data.DeltaTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSERROR (size: 16)
 */
export interface KSERROR {
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Status: number;
}

export const sizeofKSERROR = 16;

export function allocKSERROR(data?: Partial<KSERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSERROR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Context !== undefined) view.setBigUint64(0, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  // 0x08: u32
  if (data?.Status !== undefined) view.setUint32(8, Number(data.Status), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SERIALHDR (size: 16)
 */
export interface KSPROPERTY_SERIALHDR {
  /** System.Guid */
  PropertySet: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Count: number;
}

export const sizeofKSPROPERTY_SERIALHDR = 16;

export function allocKSPROPERTY_SERIALHDR(data?: Partial<KSPROPERTY_SERIALHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SERIALHDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PropertySet !== undefined) view.setBigUint64(0, data.PropertySet === null ? 0n : BigInt(util.toPointer(data.PropertySet)), true);
  // 0x08: u32
  if (data?.Count !== undefined) view.setUint32(8, Number(data.Count), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SERIAL (size: 16)
 */
export interface KSPROPERTY_SERIAL {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  PropTypeSet: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Id: number;
  /** u32 */
  PropertyLength: number;
}

export const sizeofKSPROPERTY_SERIAL = 16;

export function allocKSPROPERTY_SERIAL(data?: Partial<KSPROPERTY_SERIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SERIAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PropTypeSet !== undefined) view.setBigUint64(0, data.PropTypeSet === null ? 0n : BigInt(util.toPointer(data.PropTypeSet)), true);
  // 0x08: u32
  if (data?.Id !== undefined) view.setUint32(8, Number(data.Id), true);
  // 0x0c: u32
  if (data?.PropertyLength !== undefined) view.setUint32(12, Number(data.PropertyLength), true);
  return buf;
}

/**
 * _combined_e__Struct (size: 16)
 */
export interface _combined_e__Struct {
  /** u32 */
  pHandle: number;
  /** u32 */
  fHandle: number;
  /** u64 */
  uPayload: Deno.PointerValue;
}

export const sizeof_combined_e__Struct = 16;

export function alloc_combined_e__Struct(data?: Partial<_combined_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_combined_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.pHandle !== undefined) view.setUint32(0, Number(data.pHandle), true);
  // 0x04: u32
  if (data?.fHandle !== undefined) view.setUint32(4, Number(data.fHandle), true);
  // 0x08: u64
  if (data?.uPayload !== undefined) view.setBigUint64(8, BigInt(data.uPayload), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.MF_MDL_SHARED_PAYLOAD_KEY (size: 16)
 */
export interface MF_MDL_SHARED_PAYLOAD_KEY {
  /** _combined_e__Struct */
  combined: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GMDLHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMF_MDL_SHARED_PAYLOAD_KEY = 16;

export function allocMF_MDL_SHARED_PAYLOAD_KEY(data?: Partial<MF_MDL_SHARED_PAYLOAD_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_MDL_SHARED_PAYLOAD_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.combined !== undefined) view.setBigUint64(0, data.combined === null ? 0n : BigInt(util.toPointer(data.combined)), true);
  // 0x08: pointer
  if (data?.GMDLHandle !== undefined) view.setBigUint64(8, data.GMDLHandle === null ? 0n : BigInt(util.toPointer(data.GMDLHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSMULTIPLE_DATA_PROP (size: 16)
 */
export interface KSMULTIPLE_DATA_PROP {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSMULTIPLE_ITEM */
  MultipleItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSMULTIPLE_DATA_PROP = 16;

export function allocKSMULTIPLE_DATA_PROP(data?: Partial<KSMULTIPLE_DATA_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofKSMULTIPLE_DATA_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.MultipleItem !== undefined) view.setBigUint64(8, data.MultipleItem === null ? 0n : BigInt(util.toPointer(data.MultipleItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_POSITION (size: 16)
 */
export interface KSAUDIO_POSITION {
  /** u64 */
  PlayOffset: Deno.PointerValue;
  /** u64 */
  WriteOffset: Deno.PointerValue;
}

export const sizeofKSAUDIO_POSITION = 16;

export function allocKSAUDIO_POSITION(data?: Partial<KSAUDIO_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PlayOffset !== undefined) view.setBigUint64(0, BigInt(data.PlayOffset), true);
  // 0x08: u64
  if (data?.WriteOffset !== undefined) view.setBigUint64(8, BigInt(data.WriteOffset), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_PRESENTATION_POSITION (size: 16)
 */
export interface KSAUDIO_PRESENTATION_POSITION {
  /** u64 */
  u64PositionInBlocks: Deno.PointerValue;
  /** u64 */
  u64QPCPosition: Deno.PointerValue;
}

export const sizeofKSAUDIO_PRESENTATION_POSITION = 16;

export function allocKSAUDIO_PRESENTATION_POSITION(data?: Partial<KSAUDIO_PRESENTATION_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_PRESENTATION_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.u64PositionInBlocks !== undefined) view.setBigUint64(0, BigInt(data.u64PositionInBlocks), true);
  // 0x08: u64
  if (data?.u64QPCPosition !== undefined) view.setBigUint64(8, BigInt(data.u64QPCPosition), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT (size: 16)
 */
export interface KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT {
  /** System.Guid */
  ProcessingMode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SamplesPerProcessingPacket: number;
  /** u32 */
  ProcessingPacketDurationInHns: number;
}

export const sizeofKSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT = 16;

export function allocKSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT(data?: Partial<KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProcessingMode !== undefined) view.setBigUint64(0, data.ProcessingMode === null ? 0n : BigInt(util.toPointer(data.ProcessingMode)), true);
  // 0x08: u32
  if (data?.SamplesPerProcessingPacket !== undefined) view.setUint32(8, Number(data.SamplesPerProcessingPacket), true);
  // 0x0c: u32
  if (data?.ProcessingPacketDurationInHns !== undefined) view.setUint32(12, Number(data.ProcessingPacketDurationInHns), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_PACKETSIZE_CONSTRAINTS (size: 24)
 */
export interface KSAUDIO_PACKETSIZE_CONSTRAINTS {
  /** u32 */
  MinPacketPeriodInHns: number;
  /** u32 */
  PacketSizeFileAlignment: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  NumProcessingModeConstraints: number;
  /** array */
  ProcessingModeConstraints: Deno.PointerValue | null;
}

export const sizeofKSAUDIO_PACKETSIZE_CONSTRAINTS = 24;

export function allocKSAUDIO_PACKETSIZE_CONSTRAINTS(data?: Partial<KSAUDIO_PACKETSIZE_CONSTRAINTS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_PACKETSIZE_CONSTRAINTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MinPacketPeriodInHns !== undefined) view.setUint32(0, Number(data.MinPacketPeriodInHns), true);
  // 0x04: u32
  if (data?.PacketSizeFileAlignment !== undefined) view.setUint32(4, Number(data.PacketSizeFileAlignment), true);
  // 0x08: u32
  if (data?.Reserved !== undefined) view.setUint32(8, Number(data.Reserved), true);
  // 0x0c: u32
  if (data?.NumProcessingModeConstraints !== undefined) view.setUint32(12, Number(data.NumProcessingModeConstraints), true);
  // 0x10: pointer
  if (data?.ProcessingModeConstraints !== undefined) view.setBigUint64(16, data.ProcessingModeConstraints === null ? 0n : BigInt(util.toPointer(data.ProcessingModeConstraints)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_PACKETSIZE_CONSTRAINTS2 (size: 24)
 */
export interface KSAUDIO_PACKETSIZE_CONSTRAINTS2 {
  /** u32 */
  MinPacketPeriodInHns: number;
  /** u32 */
  PacketSizeFileAlignment: number;
  /** u32 */
  MaxPacketSizeInBytes: number;
  /** u32 */
  NumProcessingModeConstraints: number;
  /** array */
  ProcessingModeConstraints: Deno.PointerValue | null;
}

export const sizeofKSAUDIO_PACKETSIZE_CONSTRAINTS2 = 24;

export function allocKSAUDIO_PACKETSIZE_CONSTRAINTS2(data?: Partial<KSAUDIO_PACKETSIZE_CONSTRAINTS2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_PACKETSIZE_CONSTRAINTS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MinPacketPeriodInHns !== undefined) view.setUint32(0, Number(data.MinPacketPeriodInHns), true);
  // 0x04: u32
  if (data?.PacketSizeFileAlignment !== undefined) view.setUint32(4, Number(data.PacketSizeFileAlignment), true);
  // 0x08: u32
  if (data?.MaxPacketSizeInBytes !== undefined) view.setUint32(8, Number(data.MaxPacketSizeInBytes), true);
  // 0x0c: u32
  if (data?.NumProcessingModeConstraints !== undefined) view.setUint32(12, Number(data.NumProcessingModeConstraints), true);
  // 0x10: pointer
  if (data?.ProcessingModeConstraints !== undefined) view.setBigUint64(16, data.ProcessingModeConstraints === null ? 0n : BigInt(util.toPointer(data.ProcessingModeConstraints)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_MICROPHONE_COORDINATES (size: 16)
 */
export interface KSAUDIO_MICROPHONE_COORDINATES {
  /** u16 */
  usType: number;
  /** i16 */
  wXCoord: number;
  /** i16 */
  wYCoord: number;
  /** i16 */
  wZCoord: number;
  /** i16 */
  wVerticalAngle: number;
  /** i16 */
  wHorizontalAngle: number;
}

export const sizeofKSAUDIO_MICROPHONE_COORDINATES = 16;

export function allocKSAUDIO_MICROPHONE_COORDINATES(data?: Partial<KSAUDIO_MICROPHONE_COORDINATES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_MICROPHONE_COORDINATES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usType !== undefined) view.setUint16(0, Number(data.usType), true);
  // 0x02: i16
  if (data?.wXCoord !== undefined) view.setInt16(2, Number(data.wXCoord), true);
  // 0x04: i16
  if (data?.wYCoord !== undefined) view.setInt16(4, Number(data.wYCoord), true);
  // 0x06: i16
  if (data?.wZCoord !== undefined) view.setInt16(6, Number(data.wZCoord), true);
  // 0x08: i16
  if (data?.wVerticalAngle !== undefined) view.setInt16(8, Number(data.wVerticalAngle), true);
  // 0x0a: i16
  if (data?.wHorizontalAngle !== undefined) view.setInt16(10, Number(data.wHorizontalAngle), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_MIC_ARRAY_GEOMETRY (size: 32)
 */
export interface KSAUDIO_MIC_ARRAY_GEOMETRY {
  /** u16 */
  usVersion: number;
  /** u16 */
  usMicArrayType: number;
  /** i16 */
  wVerticalAngleBegin: number;
  /** i16 */
  wVerticalAngleEnd: number;
  /** i16 */
  wHorizontalAngleBegin: number;
  /** i16 */
  wHorizontalAngleEnd: number;
  /** u16 */
  usFrequencyBandLo: number;
  /** u16 */
  usFrequencyBandHi: number;
  /** u16 */
  usNumberOfMicrophones: number;
  /** array */
  KsMicCoord: Deno.PointerValue | null;
}

export const sizeofKSAUDIO_MIC_ARRAY_GEOMETRY = 32;

export function allocKSAUDIO_MIC_ARRAY_GEOMETRY(data?: Partial<KSAUDIO_MIC_ARRAY_GEOMETRY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_MIC_ARRAY_GEOMETRY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usVersion !== undefined) view.setUint16(0, Number(data.usVersion), true);
  // 0x02: u16
  if (data?.usMicArrayType !== undefined) view.setUint16(2, Number(data.usMicArrayType), true);
  // 0x04: i16
  if (data?.wVerticalAngleBegin !== undefined) view.setInt16(4, Number(data.wVerticalAngleBegin), true);
  // 0x06: i16
  if (data?.wVerticalAngleEnd !== undefined) view.setInt16(6, Number(data.wVerticalAngleEnd), true);
  // 0x08: i16
  if (data?.wHorizontalAngleBegin !== undefined) view.setInt16(8, Number(data.wHorizontalAngleBegin), true);
  // 0x0a: i16
  if (data?.wHorizontalAngleEnd !== undefined) view.setInt16(10, Number(data.wHorizontalAngleEnd), true);
  // 0x0c: u16
  if (data?.usFrequencyBandLo !== undefined) view.setUint16(12, Number(data.usFrequencyBandLo), true);
  // 0x0e: u16
  if (data?.usFrequencyBandHi !== undefined) view.setUint16(14, Number(data.usFrequencyBandHi), true);
  // 0x10: u16
  if (data?.usNumberOfMicrophones !== undefined) view.setUint16(16, Number(data.usNumberOfMicrophones), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.KsMicCoord !== undefined) view.setBigUint64(24, data.KsMicCoord === null ? 0n : BigInt(util.toPointer(data.KsMicCoord)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.DS3DVECTOR (size: 24)
 */
export interface DS3DVECTOR {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDS3DVECTOR = 24;

export function allocDS3DVECTOR(data?: Partial<DS3DVECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDS3DVECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x10: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(16, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_LISTENER_ALL (size: 48)
 */
export interface KSDS3D_LISTENER_ALL {
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Position: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Velocity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  OrientFront: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  OrientTop: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  DistanceFactor: number;
  /** f32 */
  RolloffFactor: number;
  /** f32 */
  DopplerFactor: number;
}

export const sizeofKSDS3D_LISTENER_ALL = 48;

export function allocKSDS3D_LISTENER_ALL(data?: Partial<KSDS3D_LISTENER_ALL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_LISTENER_ALL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Position !== undefined) view.setBigUint64(0, data.Position === null ? 0n : BigInt(util.toPointer(data.Position)), true);
  // 0x08: pointer
  if (data?.Velocity !== undefined) view.setBigUint64(8, data.Velocity === null ? 0n : BigInt(util.toPointer(data.Velocity)), true);
  // 0x10: pointer
  if (data?.OrientFront !== undefined) view.setBigUint64(16, data.OrientFront === null ? 0n : BigInt(util.toPointer(data.OrientFront)), true);
  // 0x18: pointer
  if (data?.OrientTop !== undefined) view.setBigUint64(24, data.OrientTop === null ? 0n : BigInt(util.toPointer(data.OrientTop)), true);
  // 0x20: f32
  if (data?.DistanceFactor !== undefined) view.setFloat32(32, Number(data.DistanceFactor), true);
  // 0x24: f32
  if (data?.RolloffFactor !== undefined) view.setFloat32(36, Number(data.RolloffFactor), true);
  // 0x28: f32
  if (data?.DopplerFactor !== undefined) view.setFloat32(40, Number(data.DopplerFactor), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_LISTENER_ORIENTATION (size: 16)
 */
export interface KSDS3D_LISTENER_ORIENTATION {
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Front: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Top: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSDS3D_LISTENER_ORIENTATION = 16;

export function allocKSDS3D_LISTENER_ORIENTATION(data?: Partial<KSDS3D_LISTENER_ORIENTATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_LISTENER_ORIENTATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Front !== undefined) view.setBigUint64(0, data.Front === null ? 0n : BigInt(util.toPointer(data.Front)), true);
  // 0x08: pointer
  if (data?.Top !== undefined) view.setBigUint64(8, data.Top === null ? 0n : BigInt(util.toPointer(data.Top)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_BUFFER_ALL (size: 48)
 */
export interface KSDS3D_BUFFER_ALL {
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Position: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Velocity: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InsideConeAngle: number;
  /** u32 */
  OutsideConeAngle: number;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  ConeOrientation: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  ConeOutsideVolume: number;
  /** f32 */
  MinDistance: number;
  /** f32 */
  MaxDistance: number;
  /** u32 */
  Mode: number;
}

export const sizeofKSDS3D_BUFFER_ALL = 48;

export function allocKSDS3D_BUFFER_ALL(data?: Partial<KSDS3D_BUFFER_ALL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_BUFFER_ALL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Position !== undefined) view.setBigUint64(0, data.Position === null ? 0n : BigInt(util.toPointer(data.Position)), true);
  // 0x08: pointer
  if (data?.Velocity !== undefined) view.setBigUint64(8, data.Velocity === null ? 0n : BigInt(util.toPointer(data.Velocity)), true);
  // 0x10: u32
  if (data?.InsideConeAngle !== undefined) view.setUint32(16, Number(data.InsideConeAngle), true);
  // 0x14: u32
  if (data?.OutsideConeAngle !== undefined) view.setUint32(20, Number(data.OutsideConeAngle), true);
  // 0x18: pointer
  if (data?.ConeOrientation !== undefined) view.setBigUint64(24, data.ConeOrientation === null ? 0n : BigInt(util.toPointer(data.ConeOrientation)), true);
  // 0x20: i32
  if (data?.ConeOutsideVolume !== undefined) view.setInt32(32, Number(data.ConeOutsideVolume), true);
  // 0x24: f32
  if (data?.MinDistance !== undefined) view.setFloat32(36, Number(data.MinDistance), true);
  // 0x28: f32
  if (data?.MaxDistance !== undefined) view.setFloat32(40, Number(data.MaxDistance), true);
  // 0x2c: u32
  if (data?.Mode !== undefined) view.setUint32(44, Number(data.Mode), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_BUFFER_CONE_ANGLES (size: 8)
 */
export interface KSDS3D_BUFFER_CONE_ANGLES {
  /** u32 */
  InsideConeAngle: number;
  /** u32 */
  OutsideConeAngle: number;
}

export const sizeofKSDS3D_BUFFER_CONE_ANGLES = 8;

export function allocKSDS3D_BUFFER_CONE_ANGLES(data?: Partial<KSDS3D_BUFFER_CONE_ANGLES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_BUFFER_CONE_ANGLES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InsideConeAngle !== undefined) view.setUint32(0, Number(data.InsideConeAngle), true);
  // 0x04: u32
  if (data?.OutsideConeAngle !== undefined) view.setUint32(4, Number(data.OutsideConeAngle), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_PARAMS_MSG (size: 24)
 */
export interface KSDS3D_HRTF_PARAMS_MSG {
  /** u32 */
  Size: number;
  /** u32 */
  Enabled: number;
  /** Windows.Win32.Foundation.BOOL */
  SwapChannels: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ZeroAzimuth: boolean;
  /** Windows.Win32.Foundation.BOOL */
  CrossFadeOutput: boolean;
  /** u32 */
  FilterSize: number;
}

export const sizeofKSDS3D_HRTF_PARAMS_MSG = 24;

export function allocKSDS3D_HRTF_PARAMS_MSG(data?: Partial<KSDS3D_HRTF_PARAMS_MSG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_HRTF_PARAMS_MSG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Enabled !== undefined) view.setUint32(4, Number(data.Enabled), true);
  // 0x08: i32
  if (data?.SwapChannels !== undefined) view.setInt32(8, Number(data.SwapChannels), true);
  // 0x0c: i32
  if (data?.ZeroAzimuth !== undefined) view.setInt32(12, Number(data.ZeroAzimuth), true);
  // 0x10: i32
  if (data?.CrossFadeOutput !== undefined) view.setInt32(16, Number(data.CrossFadeOutput), true);
  // 0x14: u32
  if (data?.FilterSize !== undefined) view.setUint32(20, Number(data.FilterSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_INIT_MSG (size: 32)
 */
export interface KSDS3D_HRTF_INIT_MSG {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_FILTER_QUALITY */
  Quality: KSDS3D_HRTF_FILTER_QUALITY;
  /** f32 */
  SampleRate: number;
  /** u32 */
  MaxFilterSize: number;
  /** u32 */
  FilterTransientMuteLength: number;
  /** u32 */
  FilterOverlapBufferLength: number;
  /** u32 */
  OutputOverlapBufferLength: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSDS3D_HRTF_INIT_MSG = 32;

export function allocKSDS3D_HRTF_INIT_MSG(data?: Partial<KSDS3D_HRTF_INIT_MSG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_HRTF_INIT_MSG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.Quality !== undefined) view.setInt32(4, Number(data.Quality), true);
  // 0x08: f32
  if (data?.SampleRate !== undefined) view.setFloat32(8, Number(data.SampleRate), true);
  // 0x0c: u32
  if (data?.MaxFilterSize !== undefined) view.setUint32(12, Number(data.MaxFilterSize), true);
  // 0x10: u32
  if (data?.FilterTransientMuteLength !== undefined) view.setUint32(16, Number(data.FilterTransientMuteLength), true);
  // 0x14: u32
  if (data?.FilterOverlapBufferLength !== undefined) view.setUint32(20, Number(data.FilterOverlapBufferLength), true);
  // 0x18: u32
  if (data?.OutputOverlapBufferLength !== undefined) view.setUint32(24, Number(data.OutputOverlapBufferLength), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_FILTER_FORMAT_MSG (size: 16)
 */
export interface KSDS3D_HRTF_FILTER_FORMAT_MSG {
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_FILTER_METHOD */
  FilterMethod: KSDS3D_HRTF_FILTER_METHOD;
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_COEFF_FORMAT */
  CoeffFormat: KSDS3D_HRTF_COEFF_FORMAT;
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_FILTER_VERSION */
  Version: KSDS3D_HRTF_FILTER_VERSION;
  /** u32 */
  Reserved: number;
}

export const sizeofKSDS3D_HRTF_FILTER_FORMAT_MSG = 16;

export function allocKSDS3D_HRTF_FILTER_FORMAT_MSG(data?: Partial<KSDS3D_HRTF_FILTER_FORMAT_MSG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_HRTF_FILTER_FORMAT_MSG);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FilterMethod !== undefined) view.setInt32(0, Number(data.FilterMethod), true);
  // 0x04: i32
  if (data?.CoeffFormat !== undefined) view.setInt32(4, Number(data.CoeffFormat), true);
  // 0x08: i32
  if (data?.Version !== undefined) view.setInt32(8, Number(data.Version), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_ITD_PARAMS (size: 24)
 */
export interface KSDS3D_ITD_PARAMS {
  /** i32 */
  Channel: number;
  /** f32 */
  VolSmoothScale: number;
  /** f32 */
  TotalDryAttenuation: number;
  /** f32 */
  TotalWetAttenuation: number;
  /** i32 */
  SmoothFrequency: number;
  /** i32 */
  Delay: number;
}

export const sizeofKSDS3D_ITD_PARAMS = 24;

export function allocKSDS3D_ITD_PARAMS(data?: Partial<KSDS3D_ITD_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_ITD_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Channel !== undefined) view.setInt32(0, Number(data.Channel), true);
  // 0x04: f32
  if (data?.VolSmoothScale !== undefined) view.setFloat32(4, Number(data.VolSmoothScale), true);
  // 0x08: f32
  if (data?.TotalDryAttenuation !== undefined) view.setFloat32(8, Number(data.TotalDryAttenuation), true);
  // 0x0c: f32
  if (data?.TotalWetAttenuation !== undefined) view.setFloat32(12, Number(data.TotalWetAttenuation), true);
  // 0x10: i32
  if (data?.SmoothFrequency !== undefined) view.setInt32(16, Number(data.SmoothFrequency), true);
  // 0x14: i32
  if (data?.Delay !== undefined) view.setInt32(20, Number(data.Delay), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_ITD_PARAMS_MSG (size: 32)
 */
export interface KSDS3D_ITD_PARAMS_MSG {
  /** u32 */
  Enabled: number;
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_ITD_PARAMS */
  LeftParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_ITD_PARAMS */
  RightParams: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
}

export const sizeofKSDS3D_ITD_PARAMS_MSG = 32;

export function allocKSDS3D_ITD_PARAMS_MSG(data?: Partial<KSDS3D_ITD_PARAMS_MSG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_ITD_PARAMS_MSG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Enabled !== undefined) view.setUint32(0, Number(data.Enabled), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LeftParams !== undefined) view.setBigUint64(8, data.LeftParams === null ? 0n : BigInt(util.toPointer(data.LeftParams)), true);
  // 0x10: pointer
  if (data?.RightParams !== undefined) view.setBigUint64(16, data.RightParams === null ? 0n : BigInt(util.toPointer(data.RightParams)), true);
  // 0x18: u32
  if (data?.Reserved !== undefined) view.setUint32(24, Number(data.Reserved), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDATARANGE_AUDIO (size: 32)
 */
export interface KSDATARANGE_AUDIO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaximumChannels: number;
  /** u32 */
  MinimumBitsPerSample: number;
  /** u32 */
  MaximumBitsPerSample: number;
  /** u32 */
  MinimumSampleFrequency: number;
  /** u32 */
  MaximumSampleFrequency: number;
}

export const sizeofKSDATARANGE_AUDIO = 32;

export function allocKSDATARANGE_AUDIO(data?: Partial<KSDATARANGE_AUDIO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDATARANGE_AUDIO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: u32
  if (data?.MaximumChannels !== undefined) view.setUint32(8, Number(data.MaximumChannels), true);
  // 0x0c: u32
  if (data?.MinimumBitsPerSample !== undefined) view.setUint32(12, Number(data.MinimumBitsPerSample), true);
  // 0x10: u32
  if (data?.MaximumBitsPerSample !== undefined) view.setUint32(16, Number(data.MaximumBitsPerSample), true);
  // 0x14: u32
  if (data?.MinimumSampleFrequency !== undefined) view.setUint32(20, Number(data.MinimumSampleFrequency), true);
  // 0x18: u32
  if (data?.MaximumSampleFrequency !== undefined) view.setUint32(24, Number(data.MaximumSampleFrequency), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER_PROPERTY (size: 24)
 */
export interface KSRTAUDIO_BUFFER_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RequestedBufferSize: number;
}

export const sizeofKSRTAUDIO_BUFFER_PROPERTY = 24;

export function allocKSRTAUDIO_BUFFER_PROPERTY(data?: Partial<KSRTAUDIO_BUFFER_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(8, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  // 0x10: u32
  if (data?.RequestedBufferSize !== undefined) view.setUint32(16, Number(data.RequestedBufferSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER_PROPERTY32 (size: 16)
 */
export interface KSRTAUDIO_BUFFER_PROPERTY32 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BaseAddress: number;
  /** u32 */
  RequestedBufferSize: number;
}

export const sizeofKSRTAUDIO_BUFFER_PROPERTY32 = 16;

export function allocKSRTAUDIO_BUFFER_PROPERTY32(data?: Partial<KSRTAUDIO_BUFFER_PROPERTY32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER_PROPERTY32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.BaseAddress !== undefined) view.setUint32(8, Number(data.BaseAddress), true);
  // 0x0c: u32
  if (data?.RequestedBufferSize !== undefined) view.setUint32(12, Number(data.RequestedBufferSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION (size: 24)
 */
export interface KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RequestedBufferSize: number;
  /** u32 */
  NotificationCount: number;
}

export const sizeofKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION = 24;

export function allocKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION(data?: Partial<KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(8, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  // 0x10: u32
  if (data?.RequestedBufferSize !== undefined) view.setUint32(16, Number(data.RequestedBufferSize), true);
  // 0x14: u32
  if (data?.NotificationCount !== undefined) view.setUint32(20, Number(data.NotificationCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32 (size: 24)
 */
export interface KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BaseAddress: number;
  /** u32 */
  RequestedBufferSize: number;
  /** u32 */
  NotificationCount: number;
}

export const sizeofKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32 = 24;

export function allocKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32(data?: Partial<KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.BaseAddress !== undefined) view.setUint32(8, Number(data.BaseAddress), true);
  // 0x0c: u32
  if (data?.RequestedBufferSize !== undefined) view.setUint32(12, Number(data.RequestedBufferSize), true);
  // 0x10: u32
  if (data?.NotificationCount !== undefined) view.setUint32(16, Number(data.NotificationCount), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER (size: 16)
 */
export interface KSRTAUDIO_BUFFER {
  /** ptr */
  BufferAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ActualBufferSize: number;
  /** Windows.Win32.Foundation.BOOL */
  CallMemoryBarrier: boolean;
}

export const sizeofKSRTAUDIO_BUFFER = 16;

export function allocKSRTAUDIO_BUFFER(data?: Partial<KSRTAUDIO_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BufferAddress !== undefined) view.setBigUint64(0, data.BufferAddress === null ? 0n : BigInt(util.toPointer(data.BufferAddress)), true);
  // 0x08: u32
  if (data?.ActualBufferSize !== undefined) view.setUint32(8, Number(data.ActualBufferSize), true);
  // 0x0c: i32
  if (data?.CallMemoryBarrier !== undefined) view.setInt32(12, Number(data.CallMemoryBarrier), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER32 (size: 16)
 */
export interface KSRTAUDIO_BUFFER32 {
  /** u32 */
  BufferAddress: number;
  /** u32 */
  ActualBufferSize: number;
  /** Windows.Win32.Foundation.BOOL */
  CallMemoryBarrier: boolean;
}

export const sizeofKSRTAUDIO_BUFFER32 = 16;

export function allocKSRTAUDIO_BUFFER32(data?: Partial<KSRTAUDIO_BUFFER32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BufferAddress !== undefined) view.setUint32(0, Number(data.BufferAddress), true);
  // 0x04: u32
  if (data?.ActualBufferSize !== undefined) view.setUint32(4, Number(data.ActualBufferSize), true);
  // 0x08: i32
  if (data?.CallMemoryBarrier !== undefined) view.setInt32(8, Number(data.CallMemoryBarrier), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_HWLATENCY (size: 16)
 */
export interface KSRTAUDIO_HWLATENCY {
  /** u32 */
  FifoSize: number;
  /** u32 */
  ChipsetDelay: number;
  /** u32 */
  CodecDelay: number;
}

export const sizeofKSRTAUDIO_HWLATENCY = 16;

export function allocKSRTAUDIO_HWLATENCY(data?: Partial<KSRTAUDIO_HWLATENCY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_HWLATENCY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FifoSize !== undefined) view.setUint32(0, Number(data.FifoSize), true);
  // 0x04: u32
  if (data?.ChipsetDelay !== undefined) view.setUint32(4, Number(data.ChipsetDelay), true);
  // 0x08: u32
  if (data?.CodecDelay !== undefined) view.setUint32(8, Number(data.CodecDelay), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_HWREGISTER_PROPERTY (size: 16)
 */
export interface KSRTAUDIO_HWREGISTER_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSRTAUDIO_HWREGISTER_PROPERTY = 16;

export function allocKSRTAUDIO_HWREGISTER_PROPERTY(data?: Partial<KSRTAUDIO_HWREGISTER_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_HWREGISTER_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(8, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_HWREGISTER_PROPERTY32 (size: 16)
 */
export interface KSRTAUDIO_HWREGISTER_PROPERTY32 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BaseAddress: number;
}

export const sizeofKSRTAUDIO_HWREGISTER_PROPERTY32 = 16;

export function allocKSRTAUDIO_HWREGISTER_PROPERTY32(data?: Partial<KSRTAUDIO_HWREGISTER_PROPERTY32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_HWREGISTER_PROPERTY32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.BaseAddress !== undefined) view.setUint32(8, Number(data.BaseAddress), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_HWREGISTER (size: 40)
 */
export interface KSRTAUDIO_HWREGISTER {
  /** ptr */
  Register: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Width: number;
  /** u64 */
  Numerator: Deno.PointerValue;
  /** u64 */
  Denominator: Deno.PointerValue;
  /** u32 */
  Accuracy: number;
}

export const sizeofKSRTAUDIO_HWREGISTER = 40;

export function allocKSRTAUDIO_HWREGISTER(data?: Partial<KSRTAUDIO_HWREGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_HWREGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Register !== undefined) view.setBigUint64(0, data.Register === null ? 0n : BigInt(util.toPointer(data.Register)), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.Numerator !== undefined) view.setBigUint64(16, BigInt(data.Numerator), true);
  // 0x18: u64
  if (data?.Denominator !== undefined) view.setBigUint64(24, BigInt(data.Denominator), true);
  // 0x20: u32
  if (data?.Accuracy !== undefined) view.setUint32(32, Number(data.Accuracy), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_HWREGISTER32 (size: 32)
 */
export interface KSRTAUDIO_HWREGISTER32 {
  /** u32 */
  Register: number;
  /** u32 */
  Width: number;
  /** u64 */
  Numerator: Deno.PointerValue;
  /** u64 */
  Denominator: Deno.PointerValue;
  /** u32 */
  Accuracy: number;
}

export const sizeofKSRTAUDIO_HWREGISTER32 = 32;

export function allocKSRTAUDIO_HWREGISTER32(data?: Partial<KSRTAUDIO_HWREGISTER32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_HWREGISTER32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Register !== undefined) view.setUint32(0, Number(data.Register), true);
  // 0x04: u32
  if (data?.Width !== undefined) view.setUint32(4, Number(data.Width), true);
  // 0x08: u64
  if (data?.Numerator !== undefined) view.setBigUint64(8, BigInt(data.Numerator), true);
  // 0x10: u64
  if (data?.Denominator !== undefined) view.setBigUint64(16, BigInt(data.Denominator), true);
  // 0x18: u32
  if (data?.Accuracy !== undefined) view.setUint32(24, Number(data.Accuracy), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY (size: 16)
 */
export interface KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  NotificationEvent: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY = 16;

export function allocKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY(data?: Partial<KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.NotificationEvent !== undefined) view.setBigUint64(8, data.NotificationEvent === null ? 0n : BigInt(util.toPointer(data.NotificationEvent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32 (size: 16)
 */
export interface KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NotificationEvent: number;
}

export const sizeofKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32 = 16;

export function allocKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32(data?: Partial<KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NotificationEvent !== undefined) view.setUint32(8, Number(data.NotificationEvent), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_GETREADPACKET_INFO (size: 24)
 */
export interface KSRTAUDIO_GETREADPACKET_INFO {
  /** u32 */
  PacketNumber: number;
  /** u32 */
  Flags: number;
  /** u64 */
  PerformanceCounterValue: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  MoreData: boolean;
}

export const sizeofKSRTAUDIO_GETREADPACKET_INFO = 24;

export function allocKSRTAUDIO_GETREADPACKET_INFO(data?: Partial<KSRTAUDIO_GETREADPACKET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_GETREADPACKET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PacketNumber !== undefined) view.setUint32(0, Number(data.PacketNumber), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u64
  if (data?.PerformanceCounterValue !== undefined) view.setBigUint64(8, BigInt(data.PerformanceCounterValue), true);
  // 0x10: i32
  if (data?.MoreData !== undefined) view.setInt32(16, Number(data.MoreData), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_SETWRITEPACKET_INFO (size: 16)
 */
export interface KSRTAUDIO_SETWRITEPACKET_INFO {
  /** u32 */
  PacketNumber: number;
  /** u32 */
  Flags: number;
  /** u32 */
  EosPacketLength: number;
}

export const sizeofKSRTAUDIO_SETWRITEPACKET_INFO = 16;

export function allocKSRTAUDIO_SETWRITEPACKET_INFO(data?: Partial<KSRTAUDIO_SETWRITEPACKET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_SETWRITEPACKET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PacketNumber !== undefined) view.setUint32(0, Number(data.PacketNumber), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.EosPacketLength !== undefined) view.setUint32(8, Number(data.EosPacketLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_PACKETVREGISTER_PROPERTY (size: 16)
 */
export interface KSRTAUDIO_PACKETVREGISTER_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSRTAUDIO_PACKETVREGISTER_PROPERTY = 16;

export function allocKSRTAUDIO_PACKETVREGISTER_PROPERTY(data?: Partial<KSRTAUDIO_PACKETVREGISTER_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_PACKETVREGISTER_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(8, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_PACKETVREGISTER (size: 24)
 */
export interface KSRTAUDIO_PACKETVREGISTER {
  /** ptr */
  CompletedPacketCount: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  CompletedPacketQPC: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  CompletedPacketHash: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSRTAUDIO_PACKETVREGISTER = 24;

export function allocKSRTAUDIO_PACKETVREGISTER(data?: Partial<KSRTAUDIO_PACKETVREGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_PACKETVREGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CompletedPacketCount !== undefined) view.setBigUint64(0, data.CompletedPacketCount === null ? 0n : BigInt(util.toPointer(data.CompletedPacketCount)), true);
  // 0x08: pointer
  if (data?.CompletedPacketQPC !== undefined) view.setBigUint64(8, data.CompletedPacketQPC === null ? 0n : BigInt(util.toPointer(data.CompletedPacketQPC)), true);
  // 0x10: pointer
  if (data?.CompletedPacketHash !== undefined) view.setBigUint64(16, data.CompletedPacketHash === null ? 0n : BigInt(util.toPointer(data.CompletedPacketHash)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.INTERLEAVED_AUDIO_FORMAT_INFORMATION (size: 32)
 */
export interface INTERLEAVED_AUDIO_FORMAT_INFORMATION {
  /** u32 */
  Size: number;
  /** u32 */
  PrimaryChannelCount: number;
  /** u32 */
  PrimaryChannelStartPosition: number;
  /** u32 */
  PrimaryChannelMask: number;
  /** u32 */
  InterleavedChannelCount: number;
  /** u32 */
  InterleavedChannelStartPosition: number;
  /** u32 */
  InterleavedChannelMask: number;
}

export const sizeofINTERLEAVED_AUDIO_FORMAT_INFORMATION = 32;

export function allocINTERLEAVED_AUDIO_FORMAT_INFORMATION(data?: Partial<INTERLEAVED_AUDIO_FORMAT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERLEAVED_AUDIO_FORMAT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.PrimaryChannelCount !== undefined) view.setUint32(4, Number(data.PrimaryChannelCount), true);
  // 0x08: u32
  if (data?.PrimaryChannelStartPosition !== undefined) view.setUint32(8, Number(data.PrimaryChannelStartPosition), true);
  // 0x0c: u32
  if (data?.PrimaryChannelMask !== undefined) view.setUint32(12, Number(data.PrimaryChannelMask), true);
  // 0x10: u32
  if (data?.InterleavedChannelCount !== undefined) view.setUint32(16, Number(data.InterleavedChannelCount), true);
  // 0x14: u32
  if (data?.InterleavedChannelStartPosition !== undefined) view.setUint32(20, Number(data.InterleavedChannelStartPosition), true);
  // 0x18: u32
  if (data?.InterleavedChannelMask !== undefined) view.setUint32(24, Number(data.InterleavedChannelMask), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSOUNDDETECTORPROPERTY (size: 16)
 */
export interface KSSOUNDDETECTORPROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EventId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSSOUNDDETECTORPROPERTY = 16;

export function allocKSSOUNDDETECTORPROPERTY(data?: Partial<KSSOUNDDETECTORPROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSOUNDDETECTORPROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.EventId !== undefined) view.setBigUint64(8, data.EventId === null ? 0n : BigInt(util.toPointer(data.EventId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.SOUNDDETECTOR_PATTERNHEADER (size: 16)
 */
export interface SOUNDDETECTOR_PATTERNHEADER {
  /** u32 */
  Size: number;
  /** System.Guid */
  PatternType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSOUNDDETECTOR_PATTERNHEADER = 16;

export function allocSOUNDDETECTOR_PATTERNHEADER(data?: Partial<SOUNDDETECTOR_PATTERNHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSOUNDDETECTOR_PATTERNHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PatternType !== undefined) view.setBigUint64(8, data.PatternType === null ? 0n : BigInt(util.toPointer(data.PatternType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_COPY_PROTECTION (size: 8)
 */
export interface KSAUDIO_COPY_PROTECTION {
  /** Windows.Win32.Foundation.BOOL */
  fCopyrighted: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fOriginal: boolean;
}

export const sizeofKSAUDIO_COPY_PROTECTION = 8;

export function allocKSAUDIO_COPY_PROTECTION(data?: Partial<KSAUDIO_COPY_PROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_COPY_PROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fCopyrighted !== undefined) view.setInt32(0, Number(data.fCopyrighted), true);
  // 0x04: i32
  if (data?.fOriginal !== undefined) view.setInt32(4, Number(data.fOriginal), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_CHANNEL_CONFIG (size: 8)
 */
export interface KSAUDIO_CHANNEL_CONFIG {
  /** i32 */
  ActiveSpeakerPositions: number;
}

export const sizeofKSAUDIO_CHANNEL_CONFIG = 8;

export function allocKSAUDIO_CHANNEL_CONFIG(data?: Partial<KSAUDIO_CHANNEL_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_CHANNEL_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ActiveSpeakerPositions !== undefined) view.setInt32(0, Number(data.ActiveSpeakerPositions), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_DYNAMIC_RANGE (size: 8)
 */
export interface KSAUDIO_DYNAMIC_RANGE {
  /** u32 */
  QuietCompression: number;
  /** u32 */
  LoudCompression: number;
}

export const sizeofKSAUDIO_DYNAMIC_RANGE = 8;

export function allocKSAUDIO_DYNAMIC_RANGE(data?: Partial<KSAUDIO_DYNAMIC_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_DYNAMIC_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.QuietCompression !== undefined) view.setUint32(0, Number(data.QuietCompression), true);
  // 0x04: u32
  if (data?.LoudCompression !== undefined) view.setUint32(4, Number(data.LoudCompression), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_MIXLEVEL (size: 8)
 */
export interface KSAUDIO_MIXLEVEL {
  /** Windows.Win32.Foundation.BOOL */
  Mute: boolean;
  /** i32 */
  Level: number;
}

export const sizeofKSAUDIO_MIXLEVEL = 8;

export function allocKSAUDIO_MIXLEVEL(data?: Partial<KSAUDIO_MIXLEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_MIXLEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mute !== undefined) view.setInt32(0, Number(data.Mute), true);
  // 0x04: i32
  if (data?.Level !== undefined) view.setInt32(4, Number(data.Level), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_MIX_CAPS (size: 24)
 */
export interface KSAUDIO_MIX_CAPS {
  /** Windows.Win32.Foundation.BOOL */
  Mute: boolean;
  /** i32 */
  Minimum: number;
  /** i32 */
  Maximum: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSAUDIO_MIX_CAPS = 24;

export function allocKSAUDIO_MIX_CAPS(data?: Partial<KSAUDIO_MIX_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_MIX_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mute !== undefined) view.setInt32(0, Number(data.Mute), true);
  // 0x04: i32
  if (data?.Minimum !== undefined) view.setInt32(4, Number(data.Minimum), true);
  // 0x08: i32
  if (data?.Maximum !== undefined) view.setInt32(8, Number(data.Maximum), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_MIXCAP_TABLE (size: 16)
 */
export interface KSAUDIO_MIXCAP_TABLE {
  /** u32 */
  InputChannels: number;
  /** u32 */
  OutputChannels: number;
  /** array */
  Capabilities: Deno.PointerValue | null;
}

export const sizeofKSAUDIO_MIXCAP_TABLE = 16;

export function allocKSAUDIO_MIXCAP_TABLE(data?: Partial<KSAUDIO_MIXCAP_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_MIXCAP_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InputChannels !== undefined) view.setUint32(0, Number(data.InputChannels), true);
  // 0x04: u32
  if (data?.OutputChannels !== undefined) view.setUint32(4, Number(data.OutputChannels), true);
  // 0x08: pointer
  if (data?.Capabilities !== undefined) view.setBigUint64(8, data.Capabilities === null ? 0n : BigInt(util.toPointer(data.Capabilities)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_POSITIONEX (size: 32)
 */
export interface KSAUDIO_POSITIONEX {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimerFrequency: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeStamp1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSAUDIO_POSITION */
  Position: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeStamp2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSAUDIO_POSITIONEX = 32;

export function allocKSAUDIO_POSITIONEX(data?: Partial<KSAUDIO_POSITIONEX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_POSITIONEX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TimerFrequency !== undefined) view.setBigUint64(0, data.TimerFrequency === null ? 0n : BigInt(util.toPointer(data.TimerFrequency)), true);
  // 0x08: pointer
  if (data?.TimeStamp1 !== undefined) view.setBigUint64(8, data.TimeStamp1 === null ? 0n : BigInt(util.toPointer(data.TimeStamp1)), true);
  // 0x10: pointer
  if (data?.Position !== undefined) view.setBigUint64(16, data.Position === null ? 0n : BigInt(util.toPointer(data.Position)), true);
  // 0x18: pointer
  if (data?.TimeStamp2 !== undefined) view.setBigUint64(24, data.TimeStamp2 === null ? 0n : BigInt(util.toPointer(data.TimeStamp2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTELEPHONY_CALLCONTROL (size: 8)
 */
export interface KSTELEPHONY_CALLCONTROL {
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_CALLTYPE */
  CallType: TELEPHONY_CALLTYPE;
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_CALLCONTROLOP */
  CallControlOp: TELEPHONY_CALLCONTROLOP;
}

export const sizeofKSTELEPHONY_CALLCONTROL = 8;

export function allocKSTELEPHONY_CALLCONTROL(data?: Partial<KSTELEPHONY_CALLCONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTELEPHONY_CALLCONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CallType !== undefined) view.setInt32(0, Number(data.CallType), true);
  // 0x04: i32
  if (data?.CallControlOp !== undefined) view.setInt32(4, Number(data.CallControlOp), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTELEPHONY_PROVIDERCHANGE (size: 8)
 */
export interface KSTELEPHONY_PROVIDERCHANGE {
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_CALLTYPE */
  CallType: TELEPHONY_CALLTYPE;
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_PROVIDERCHANGEOP */
  ProviderChangeOp: TELEPHONY_PROVIDERCHANGEOP;
}

export const sizeofKSTELEPHONY_PROVIDERCHANGE = 8;

export function allocKSTELEPHONY_PROVIDERCHANGE(data?: Partial<KSTELEPHONY_PROVIDERCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTELEPHONY_PROVIDERCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CallType !== undefined) view.setInt32(0, Number(data.CallType), true);
  // 0x04: i32
  if (data?.ProviderChangeOp !== undefined) view.setInt32(4, Number(data.ProviderChangeOp), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTELEPHONY_CALLINFO (size: 8)
 */
export interface KSTELEPHONY_CALLINFO {
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_CALLTYPE */
  CallType: TELEPHONY_CALLTYPE;
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_CALLSTATE */
  CallState: TELEPHONY_CALLSTATE;
}

export const sizeofKSTELEPHONY_CALLINFO = 8;

export function allocKSTELEPHONY_CALLINFO(data?: Partial<KSTELEPHONY_CALLINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTELEPHONY_CALLINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CallType !== undefined) view.setInt32(0, Number(data.CallType), true);
  // 0x04: i32
  if (data?.CallState !== undefined) view.setInt32(4, Number(data.CallState), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTOPOLOGY_ENDPOINTID (size: 16)
 */
export interface KSTOPOLOGY_ENDPOINTID {
  /** array */
  TopologyName: Deno.PointerValue | null;
  /** u32 */
  PinId: number;
}

export const sizeofKSTOPOLOGY_ENDPOINTID = 16;

export function allocKSTOPOLOGY_ENDPOINTID(data?: Partial<KSTOPOLOGY_ENDPOINTID>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTOPOLOGY_ENDPOINTID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TopologyName !== undefined) view.setBigUint64(0, data.TopologyName === null ? 0n : BigInt(util.toPointer(data.TopologyName)), true);
  // 0x08: u32
  if (data?.PinId !== undefined) view.setUint32(8, Number(data.PinId), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTOPOLOGY_ENDPOINTIDPAIR (size: 16)
 */
export interface KSTOPOLOGY_ENDPOINTIDPAIR {
  /** Windows.Win32.Media.KernelStreaming.KSTOPOLOGY_ENDPOINTID */
  RenderEndpoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSTOPOLOGY_ENDPOINTID */
  CaptureEndpoint: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSTOPOLOGY_ENDPOINTIDPAIR = 16;

export function allocKSTOPOLOGY_ENDPOINTIDPAIR(data?: Partial<KSTOPOLOGY_ENDPOINTIDPAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTOPOLOGY_ENDPOINTIDPAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RenderEndpoint !== undefined) view.setBigUint64(0, data.RenderEndpoint === null ? 0n : BigInt(util.toPointer(data.RenderEndpoint)), true);
  // 0x08: pointer
  if (data?.CaptureEndpoint !== undefined) view.setBigUint64(8, data.CaptureEndpoint === null ? 0n : BigInt(util.toPointer(data.CaptureEndpoint)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVETABLE_WAVE_DESC (size: 32)
 */
export interface KSWAVETABLE_WAVE_DESC {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Identifier: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOL */
  Looped: boolean;
  /** u32 */
  LoopPoint: number;
  /** Windows.Win32.Foundation.BOOL */
  InROM: boolean;
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  Format: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSWAVETABLE_WAVE_DESC = 32;

export function allocKSWAVETABLE_WAVE_DESC(data?: Partial<KSWAVETABLE_WAVE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVETABLE_WAVE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identifier !== undefined) view.setBigUint64(0, data.Identifier === null ? 0n : BigInt(util.toPointer(data.Identifier)), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: i32
  if (data?.Looped !== undefined) view.setInt32(12, Number(data.Looped), true);
  // 0x10: u32
  if (data?.LoopPoint !== undefined) view.setUint32(16, Number(data.LoopPoint), true);
  // 0x14: i32
  if (data?.InROM !== undefined) view.setInt32(20, Number(data.InROM), true);
  // 0x18: pointer
  if (data?.Format !== undefined) view.setBigUint64(24, data.Format === null ? 0n : BigInt(util.toPointer(data.Format)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVE_COMPATCAPS (size: 8)
 */
export interface KSWAVE_COMPATCAPS {
  /** u32 */
  ulDeviceType: number;
}

export const sizeofKSWAVE_COMPATCAPS = 8;

export function allocKSWAVE_COMPATCAPS(data?: Partial<KSWAVE_COMPATCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVE_COMPATCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulDeviceType !== undefined) view.setUint32(0, Number(data.ulDeviceType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVE_INPUT_CAPABILITIES (size: 32)
 */
export interface KSWAVE_INPUT_CAPABILITIES {
  /** u32 */
  MaximumChannelsPerConnection: number;
  /** u32 */
  MinimumBitsPerSample: number;
  /** u32 */
  MaximumBitsPerSample: number;
  /** u32 */
  MinimumSampleFrequency: number;
  /** u32 */
  MaximumSampleFrequency: number;
  /** u32 */
  TotalConnections: number;
  /** u32 */
  ActiveConnections: number;
}

export const sizeofKSWAVE_INPUT_CAPABILITIES = 32;

export function allocKSWAVE_INPUT_CAPABILITIES(data?: Partial<KSWAVE_INPUT_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVE_INPUT_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaximumChannelsPerConnection !== undefined) view.setUint32(0, Number(data.MaximumChannelsPerConnection), true);
  // 0x04: u32
  if (data?.MinimumBitsPerSample !== undefined) view.setUint32(4, Number(data.MinimumBitsPerSample), true);
  // 0x08: u32
  if (data?.MaximumBitsPerSample !== undefined) view.setUint32(8, Number(data.MaximumBitsPerSample), true);
  // 0x0c: u32
  if (data?.MinimumSampleFrequency !== undefined) view.setUint32(12, Number(data.MinimumSampleFrequency), true);
  // 0x10: u32
  if (data?.MaximumSampleFrequency !== undefined) view.setUint32(16, Number(data.MaximumSampleFrequency), true);
  // 0x14: u32
  if (data?.TotalConnections !== undefined) view.setUint32(20, Number(data.TotalConnections), true);
  // 0x18: u32
  if (data?.ActiveConnections !== undefined) view.setUint32(24, Number(data.ActiveConnections), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVE_OUTPUT_CAPABILITIES (size: 80)
 */
export interface KSWAVE_OUTPUT_CAPABILITIES {
  /** u32 */
  MaximumChannelsPerConnection: number;
  /** u32 */
  MinimumBitsPerSample: number;
  /** u32 */
  MaximumBitsPerSample: number;
  /** u32 */
  MinimumSampleFrequency: number;
  /** u32 */
  MaximumSampleFrequency: number;
  /** u32 */
  TotalConnections: number;
  /** u32 */
  StaticConnections: number;
  /** u32 */
  StreamingConnections: number;
  /** u32 */
  ActiveConnections: number;
  /** u32 */
  ActiveStaticConnections: number;
  /** u32 */
  ActiveStreamingConnections: number;
  /** u32 */
  Total3DConnections: number;
  /** u32 */
  Static3DConnections: number;
  /** u32 */
  Streaming3DConnections: number;
  /** u32 */
  Active3DConnections: number;
  /** u32 */
  ActiveStatic3DConnections: number;
  /** u32 */
  ActiveStreaming3DConnections: number;
  /** u32 */
  TotalSampleMemory: number;
  /** u32 */
  FreeSampleMemory: number;
  /** u32 */
  LargestFreeContiguousSampleMemory: number;
}

export const sizeofKSWAVE_OUTPUT_CAPABILITIES = 80;

export function allocKSWAVE_OUTPUT_CAPABILITIES(data?: Partial<KSWAVE_OUTPUT_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVE_OUTPUT_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaximumChannelsPerConnection !== undefined) view.setUint32(0, Number(data.MaximumChannelsPerConnection), true);
  // 0x04: u32
  if (data?.MinimumBitsPerSample !== undefined) view.setUint32(4, Number(data.MinimumBitsPerSample), true);
  // 0x08: u32
  if (data?.MaximumBitsPerSample !== undefined) view.setUint32(8, Number(data.MaximumBitsPerSample), true);
  // 0x0c: u32
  if (data?.MinimumSampleFrequency !== undefined) view.setUint32(12, Number(data.MinimumSampleFrequency), true);
  // 0x10: u32
  if (data?.MaximumSampleFrequency !== undefined) view.setUint32(16, Number(data.MaximumSampleFrequency), true);
  // 0x14: u32
  if (data?.TotalConnections !== undefined) view.setUint32(20, Number(data.TotalConnections), true);
  // 0x18: u32
  if (data?.StaticConnections !== undefined) view.setUint32(24, Number(data.StaticConnections), true);
  // 0x1c: u32
  if (data?.StreamingConnections !== undefined) view.setUint32(28, Number(data.StreamingConnections), true);
  // 0x20: u32
  if (data?.ActiveConnections !== undefined) view.setUint32(32, Number(data.ActiveConnections), true);
  // 0x24: u32
  if (data?.ActiveStaticConnections !== undefined) view.setUint32(36, Number(data.ActiveStaticConnections), true);
  // 0x28: u32
  if (data?.ActiveStreamingConnections !== undefined) view.setUint32(40, Number(data.ActiveStreamingConnections), true);
  // 0x2c: u32
  if (data?.Total3DConnections !== undefined) view.setUint32(44, Number(data.Total3DConnections), true);
  // 0x30: u32
  if (data?.Static3DConnections !== undefined) view.setUint32(48, Number(data.Static3DConnections), true);
  // 0x34: u32
  if (data?.Streaming3DConnections !== undefined) view.setUint32(52, Number(data.Streaming3DConnections), true);
  // 0x38: u32
  if (data?.Active3DConnections !== undefined) view.setUint32(56, Number(data.Active3DConnections), true);
  // 0x3c: u32
  if (data?.ActiveStatic3DConnections !== undefined) view.setUint32(60, Number(data.ActiveStatic3DConnections), true);
  // 0x40: u32
  if (data?.ActiveStreaming3DConnections !== undefined) view.setUint32(64, Number(data.ActiveStreaming3DConnections), true);
  // 0x44: u32
  if (data?.TotalSampleMemory !== undefined) view.setUint32(68, Number(data.TotalSampleMemory), true);
  // 0x48: u32
  if (data?.FreeSampleMemory !== undefined) view.setUint32(72, Number(data.FreeSampleMemory), true);
  // 0x4c: u32
  if (data?.LargestFreeContiguousSampleMemory !== undefined) view.setUint32(76, Number(data.LargestFreeContiguousSampleMemory), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVE_VOLUME (size: 8)
 */
export interface KSWAVE_VOLUME {
  /** i32 */
  LeftAttenuation: number;
  /** i32 */
  RightAttenuation: number;
}

export const sizeofKSWAVE_VOLUME = 8;

export function allocKSWAVE_VOLUME(data?: Partial<KSWAVE_VOLUME>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVE_VOLUME);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LeftAttenuation !== undefined) view.setInt32(0, Number(data.LeftAttenuation), true);
  // 0x04: i32
  if (data?.RightAttenuation !== undefined) view.setInt32(4, Number(data.RightAttenuation), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVE_BUFFER (size: 16)
 */
export interface KSWAVE_BUFFER {
  /** u32 */
  Attributes: number;
  /** u32 */
  BufferSize: number;
  /** ptr */
  BufferAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSWAVE_BUFFER = 16;

export function allocKSWAVE_BUFFER(data?: Partial<KSWAVE_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVE_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Attributes !== undefined) view.setUint32(0, Number(data.Attributes), true);
  // 0x04: u32
  if (data?.BufferSize !== undefined) view.setUint32(4, Number(data.BufferSize), true);
  // 0x08: pointer
  if (data?.BufferAddress !== undefined) view.setBigUint64(8, data.BufferAddress === null ? 0n : BigInt(util.toPointer(data.BufferAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDATARANGE_MUSIC (size: 32)
 */
export interface KSDATARANGE_MUSIC {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Technology: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Channels: number;
  /** u32 */
  Notes: number;
  /** u32 */
  ChannelMask: number;
}

export const sizeofKSDATARANGE_MUSIC = 32;

export function allocKSDATARANGE_MUSIC(data?: Partial<KSDATARANGE_MUSIC>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDATARANGE_MUSIC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: pointer
  if (data?.Technology !== undefined) view.setBigUint64(8, data.Technology === null ? 0n : BigInt(util.toPointer(data.Technology)), true);
  // 0x10: u32
  if (data?.Channels !== undefined) view.setUint32(16, Number(data.Channels), true);
  // 0x14: u32
  if (data?.Notes !== undefined) view.setUint32(20, Number(data.Notes), true);
  // 0x18: u32
  if (data?.ChannelMask !== undefined) view.setUint32(24, Number(data.ChannelMask), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.LOOPEDSTREAMING_POSITION_EVENT_DATA (size: 16)
 */
export interface LOOPEDSTREAMING_POSITION_EVENT_DATA {
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  KsEventData: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Position: Deno.PointerValue;
}

export const sizeofLOOPEDSTREAMING_POSITION_EVENT_DATA = 16;

export function allocLOOPEDSTREAMING_POSITION_EVENT_DATA(data?: Partial<LOOPEDSTREAMING_POSITION_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofLOOPEDSTREAMING_POSITION_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KsEventData !== undefined) view.setBigUint64(0, data.KsEventData === null ? 0n : BigInt(util.toPointer(data.KsEventData)), true);
  // 0x08: u64
  if (data?.Position !== undefined) view.setBigUint64(8, BigInt(data.Position), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY_AUDIO_CHANNEL (size: 16)
 */
export interface KSNODEPROPERTY_AUDIO_CHANNEL {
  /** Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Channel: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSNODEPROPERTY_AUDIO_CHANNEL = 16;

export function allocKSNODEPROPERTY_AUDIO_CHANNEL(data?: Partial<KSNODEPROPERTY_AUDIO_CHANNEL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODEPROPERTY_AUDIO_CHANNEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Channel !== undefined) view.setInt32(8, Number(data.Channel), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY_AUDIO_DEV_SPECIFIC (size: 24)
 */
export interface KSNODEPROPERTY_AUDIO_DEV_SPECIFIC {
  /** Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DevSpecificId: number;
  /** u32 */
  DeviceInfo: number;
  /** u32 */
  Length: number;
}

export const sizeofKSNODEPROPERTY_AUDIO_DEV_SPECIFIC = 24;

export function allocKSNODEPROPERTY_AUDIO_DEV_SPECIFIC(data?: Partial<KSNODEPROPERTY_AUDIO_DEV_SPECIFIC>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODEPROPERTY_AUDIO_DEV_SPECIFIC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: u32
  if (data?.DevSpecificId !== undefined) view.setUint32(8, Number(data.DevSpecificId), true);
  // 0x0c: u32
  if (data?.DeviceInfo !== undefined) view.setUint32(12, Number(data.DeviceInfo), true);
  // 0x10: u32
  if (data?.Length !== undefined) view.setUint32(16, Number(data.Length), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSMUSICFORMAT (size: 8)
 */
export interface KSMUSICFORMAT {
  /** u32 */
  TimeDeltaMs: number;
  /** u32 */
  ByteCount: number;
}

export const sizeofKSMUSICFORMAT = 8;

export function allocKSMUSICFORMAT(data?: Partial<KSMUSICFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSMUSICFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TimeDeltaMs !== undefined) view.setUint32(0, Number(data.TimeDeltaMs), true);
  // 0x04: u32
  if (data?.ByteCount !== undefined) view.setUint32(4, Number(data.ByteCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSMPEGVID_RECT (size: 16)
 */
export interface KSMPEGVID_RECT {
  /** u32 */
  StartX: number;
  /** u32 */
  StartY: number;
  /** u32 */
  EndX: number;
  /** u32 */
  EndY: number;
}

export const sizeofKSMPEGVID_RECT = 16;

export function allocKSMPEGVID_RECT(data?: Partial<KSMPEGVID_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSMPEGVID_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartX !== undefined) view.setUint32(0, Number(data.StartX), true);
  // 0x04: u32
  if (data?.StartY !== undefined) view.setUint32(4, Number(data.StartY), true);
  // 0x08: u32
  if (data?.EndX !== undefined) view.setUint32(8, Number(data.EndX), true);
  // 0x0c: u32
  if (data?.EndY !== undefined) view.setUint32(12, Number(data.EndY), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_ERROR_CONCEALMENT (size: 8)
 */
export interface KSAC3_ERROR_CONCEALMENT {
  /** Windows.Win32.Foundation.BOOL */
  fRepeatPreviousBlock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fErrorInCurrentBlock: boolean;
}

export const sizeofKSAC3_ERROR_CONCEALMENT = 8;

export function allocKSAC3_ERROR_CONCEALMENT(data?: Partial<KSAC3_ERROR_CONCEALMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_ERROR_CONCEALMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fRepeatPreviousBlock !== undefined) view.setInt32(0, Number(data.fRepeatPreviousBlock), true);
  // 0x04: i32
  if (data?.fErrorInCurrentBlock !== undefined) view.setInt32(4, Number(data.fErrorInCurrentBlock), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_ALTERNATE_AUDIO (size: 8)
 */
export interface KSAC3_ALTERNATE_AUDIO {
  /** Windows.Win32.Foundation.BOOL */
  fStereo: boolean;
  /** u32 */
  DualMode: number;
}

export const sizeofKSAC3_ALTERNATE_AUDIO = 8;

export function allocKSAC3_ALTERNATE_AUDIO(data?: Partial<KSAC3_ALTERNATE_AUDIO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_ALTERNATE_AUDIO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fStereo !== undefined) view.setInt32(0, Number(data.fStereo), true);
  // 0x04: u32
  if (data?.DualMode !== undefined) view.setUint32(4, Number(data.DualMode), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_DOWNMIX (size: 8)
 */
export interface KSAC3_DOWNMIX {
  /** Windows.Win32.Foundation.BOOL */
  fDownMix: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDolbySurround: boolean;
}

export const sizeofKSAC3_DOWNMIX = 8;

export function allocKSAC3_DOWNMIX(data?: Partial<KSAC3_DOWNMIX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_DOWNMIX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fDownMix !== undefined) view.setInt32(0, Number(data.fDownMix), true);
  // 0x04: i32
  if (data?.fDolbySurround !== undefined) view.setInt32(4, Number(data.fDolbySurround), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_BIT_STREAM_MODE (size: 8)
 */
export interface KSAC3_BIT_STREAM_MODE {
  /** i32 */
  BitStreamMode: number;
}

export const sizeofKSAC3_BIT_STREAM_MODE = 8;

export function allocKSAC3_BIT_STREAM_MODE(data?: Partial<KSAC3_BIT_STREAM_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_BIT_STREAM_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BitStreamMode !== undefined) view.setInt32(0, Number(data.BitStreamMode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_DIALOGUE_LEVEL (size: 8)
 */
export interface KSAC3_DIALOGUE_LEVEL {
  /** u32 */
  DialogueLevel: number;
}

export const sizeofKSAC3_DIALOGUE_LEVEL = 8;

export function allocKSAC3_DIALOGUE_LEVEL(data?: Partial<KSAC3_DIALOGUE_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_DIALOGUE_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DialogueLevel !== undefined) view.setUint32(0, Number(data.DialogueLevel), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_ROOM_TYPE (size: 8)
 */
export interface KSAC3_ROOM_TYPE {
  /** Windows.Win32.Foundation.BOOL */
  fLargeRoom: boolean;
}

export const sizeofKSAC3_ROOM_TYPE = 8;

export function allocKSAC3_ROOM_TYPE(data?: Partial<KSAC3_ROOM_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_ROOM_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fLargeRoom !== undefined) view.setInt32(0, Number(data.fLargeRoom), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVD_YCrCb (size: 8)
 */
export interface KS_DVD_YCrCb {
  /** u8 */
  Reserved: number;
  /** u8 */
  Y: number;
  /** u8 */
  Cr: number;
  /** u8 */
  Cb: number;
}

export const sizeofKS_DVD_YCrCb = 8;

export function allocKS_DVD_YCrCb(data?: Partial<KS_DVD_YCrCb>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVD_YCrCb);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Reserved !== undefined) view.setUint8(0, Number(data.Reserved));
  // 0x01: u8
  if (data?.Y !== undefined) view.setUint8(1, Number(data.Y));
  // 0x02: u8
  if (data?.Cr !== undefined) view.setUint8(2, Number(data.Cr));
  // 0x03: u8
  if (data?.Cb !== undefined) view.setUint8(3, Number(data.Cb));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVD_YUV (size: 8)
 */
export interface KS_DVD_YUV {
  /** u8 */
  Reserved: number;
  /** u8 */
  Y: number;
  /** u8 */
  V: number;
  /** u8 */
  U: number;
}

export const sizeofKS_DVD_YUV = 8;

export function allocKS_DVD_YUV(data?: Partial<KS_DVD_YUV>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVD_YUV);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Reserved !== undefined) view.setUint8(0, Number(data.Reserved));
  // 0x01: u8
  if (data?.Y !== undefined) view.setUint8(1, Number(data.Y));
  // 0x02: u8
  if (data?.V !== undefined) view.setUint8(2, Number(data.V));
  // 0x03: u8
  if (data?.U !== undefined) view.setUint8(3, Number(data.U));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SPPAL (size: 8)
 */
export interface KSPROPERTY_SPPAL {
  /** array */
  sppal: Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_SPPAL = 8;

export function allocKSPROPERTY_SPPAL(data?: Partial<KSPROPERTY_SPPAL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SPPAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sppal !== undefined) view.setBigUint64(0, data.sppal === null ? 0n : BigInt(util.toPointer(data.sppal)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_COLCON (size: 8)
 */
export interface KS_COLCON {
  /** u8 */
  _bitfield1: number;
  /** u8 */
  _bitfield2: number;
  /** u8 */
  _bitfield3: number;
  /** u8 */
  _bitfield4: number;
}

export const sizeofKS_COLCON = 8;

export function allocKS_COLCON(data?: Partial<KS_COLCON>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_COLCON);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield1 !== undefined) view.setUint8(0, Number(data._bitfield1));
  // 0x01: u8
  if (data?._bitfield2 !== undefined) view.setUint8(1, Number(data._bitfield2));
  // 0x02: u8
  if (data?._bitfield3 !== undefined) view.setUint8(2, Number(data._bitfield3));
  // 0x03: u8
  if (data?._bitfield4 !== undefined) view.setUint8(3, Number(data._bitfield4));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SPHLI (size: 32)
 */
export interface KSPROPERTY_SPHLI {
  /** u16 */
  HLISS: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  StartPTM: number;
  /** u32 */
  EndPTM: number;
  /** u16 */
  StartX: number;
  /** u16 */
  StartY: number;
  /** u16 */
  StopX: number;
  /** u16 */
  StopY: number;
  /** Windows.Win32.Media.KernelStreaming.KS_COLCON */
  ColCon: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_SPHLI = 32;

export function allocKSPROPERTY_SPHLI(data?: Partial<KSPROPERTY_SPHLI>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SPHLI);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.HLISS !== undefined) view.setUint16(0, Number(data.HLISS), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.StartPTM !== undefined) view.setUint32(4, Number(data.StartPTM), true);
  // 0x08: u32
  if (data?.EndPTM !== undefined) view.setUint32(8, Number(data.EndPTM), true);
  // 0x0c: u16
  if (data?.StartX !== undefined) view.setUint16(12, Number(data.StartX), true);
  // 0x0e: u16
  if (data?.StartY !== undefined) view.setUint16(14, Number(data.StartY), true);
  // 0x10: u16
  if (data?.StopX !== undefined) view.setUint16(16, Number(data.StopX), true);
  // 0x12: u16
  if (data?.StopY !== undefined) view.setUint16(18, Number(data.StopY), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ColCon !== undefined) view.setBigUint64(24, data.ColCon === null ? 0n : BigInt(util.toPointer(data.ColCon)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_CHLGKEY (size: 16)
 */
export interface KS_DVDCOPY_CHLGKEY {
  /** array */
  ChlgKey: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofKS_DVDCOPY_CHLGKEY = 16;

export function allocKS_DVDCOPY_CHLGKEY(data?: Partial<KS_DVDCOPY_CHLGKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_CHLGKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ChlgKey !== undefined) view.setBigUint64(0, data.ChlgKey === null ? 0n : BigInt(util.toPointer(data.ChlgKey)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_BUSKEY (size: 16)
 */
export interface KS_DVDCOPY_BUSKEY {
  /** array */
  BusKey: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofKS_DVDCOPY_BUSKEY = 16;

export function allocKS_DVDCOPY_BUSKEY(data?: Partial<KS_DVDCOPY_BUSKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_BUSKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BusKey !== undefined) view.setBigUint64(0, data.BusKey === null ? 0n : BigInt(util.toPointer(data.BusKey)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_DISCKEY (size: 8)
 */
export interface KS_DVDCOPY_DISCKEY {
  /** array */
  DiscKey: Deno.PointerValue | null;
}

export const sizeofKS_DVDCOPY_DISCKEY = 8;

export function allocKS_DVDCOPY_DISCKEY(data?: Partial<KS_DVDCOPY_DISCKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_DISCKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DiscKey !== undefined) view.setBigUint64(0, data.DiscKey === null ? 0n : BigInt(util.toPointer(data.DiscKey)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_REGION (size: 16)
 */
export interface KS_DVDCOPY_REGION {
  /** u8 */
  Reserved: number;
  /** u8 */
  RegionData: number;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofKS_DVDCOPY_REGION = 16;

export function allocKS_DVDCOPY_REGION(data?: Partial<KS_DVDCOPY_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Reserved !== undefined) view.setUint8(0, Number(data.Reserved));
  // 0x01: u8
  if (data?.RegionData !== undefined) view.setUint8(1, Number(data.RegionData));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_TITLEKEY (size: 32)
 */
export interface KS_DVDCOPY_TITLEKEY {
  /** u32 */
  KeyFlags: number;
  /** array */
  ReservedNT: Deno.PointerValue | null;
  /** array */
  TitleKey: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofKS_DVDCOPY_TITLEKEY = 32;

export function allocKS_DVDCOPY_TITLEKEY(data?: Partial<KS_DVDCOPY_TITLEKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_TITLEKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.KeyFlags !== undefined) view.setUint32(0, Number(data.KeyFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ReservedNT !== undefined) view.setBigUint64(8, data.ReservedNT === null ? 0n : BigInt(util.toPointer(data.ReservedNT)), true);
  // 0x10: pointer
  if (data?.TitleKey !== undefined) view.setBigUint64(16, data.TitleKey === null ? 0n : BigInt(util.toPointer(data.TitleKey)), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_COPY_MACROVISION (size: 8)
 */
export interface KS_COPY_MACROVISION {
  /** u32 */
  MACROVISIONLevel: number;
}

export const sizeofKS_COPY_MACROVISION = 8;

export function allocKS_COPY_MACROVISION(data?: Partial<KS_COPY_MACROVISION>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_COPY_MACROVISION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MACROVISIONLevel !== undefined) view.setUint32(0, Number(data.MACROVISIONLevel), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_SET_COPY_STATE (size: 8)
 */
export interface KS_DVDCOPY_SET_COPY_STATE {
  /** u32 */
  DVDCopyState: number;
}

export const sizeofKS_DVDCOPY_SET_COPY_STATE = 8;

export function allocKS_DVDCOPY_SET_COPY_STATE(data?: Partial<KS_DVDCOPY_SET_COPY_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_SET_COPY_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DVDCopyState !== undefined) view.setUint32(0, Number(data.DVDCopyState), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_RGBQUAD (size: 8)
 */
export interface KS_RGBQUAD {
  /** u8 */
  rgbBlue: number;
  /** u8 */
  rgbGreen: number;
  /** u8 */
  rgbRed: number;
  /** u8 */
  rgbReserved: number;
}

export const sizeofKS_RGBQUAD = 8;

export function allocKS_RGBQUAD(data?: Partial<KS_RGBQUAD>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_RGBQUAD);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.rgbBlue !== undefined) view.setUint8(0, Number(data.rgbBlue));
  // 0x01: u8
  if (data?.rgbGreen !== undefined) view.setUint8(1, Number(data.rgbGreen));
  // 0x02: u8
  if (data?.rgbRed !== undefined) view.setUint8(2, Number(data.rgbRed));
  // 0x03: u8
  if (data?.rgbReserved !== undefined) view.setUint8(3, Number(data.rgbReserved));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER (size: 40)
 */
export interface KS_BITMAPINFOHEADER {
  /** u32 */
  biSize: number;
  /** i32 */
  biWidth: number;
  /** i32 */
  biHeight: number;
  /** u16 */
  biPlanes: number;
  /** u16 */
  biBitCount: number;
  /** u32 */
  biCompression: number;
  /** u32 */
  biSizeImage: number;
  /** i32 */
  biXPelsPerMeter: number;
  /** i32 */
  biYPelsPerMeter: number;
  /** u32 */
  biClrUsed: number;
  /** u32 */
  biClrImportant: number;
}

export const sizeofKS_BITMAPINFOHEADER = 40;

export function allocKS_BITMAPINFOHEADER(data?: Partial<KS_BITMAPINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_BITMAPINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.biSize !== undefined) view.setUint32(0, Number(data.biSize), true);
  // 0x04: i32
  if (data?.biWidth !== undefined) view.setInt32(4, Number(data.biWidth), true);
  // 0x08: i32
  if (data?.biHeight !== undefined) view.setInt32(8, Number(data.biHeight), true);
  // 0x0c: u16
  if (data?.biPlanes !== undefined) view.setUint16(12, Number(data.biPlanes), true);
  // 0x0e: u16
  if (data?.biBitCount !== undefined) view.setUint16(14, Number(data.biBitCount), true);
  // 0x10: u32
  if (data?.biCompression !== undefined) view.setUint32(16, Number(data.biCompression), true);
  // 0x14: u32
  if (data?.biSizeImage !== undefined) view.setUint32(20, Number(data.biSizeImage), true);
  // 0x18: i32
  if (data?.biXPelsPerMeter !== undefined) view.setInt32(24, Number(data.biXPelsPerMeter), true);
  // 0x1c: i32
  if (data?.biYPelsPerMeter !== undefined) view.setInt32(28, Number(data.biYPelsPerMeter), true);
  // 0x20: u32
  if (data?.biClrUsed !== undefined) view.setUint32(32, Number(data.biClrUsed), true);
  // 0x24: u32
  if (data?.biClrImportant !== undefined) view.setUint32(36, Number(data.biClrImportant), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_TRUECOLORINFO (size: 16)
 */
export interface KS_TRUECOLORINFO {
  /** array */
  dwBitMasks: Deno.PointerValue | null;
  /** array */
  bmiColors: Deno.PointerValue | null;
}

export const sizeofKS_TRUECOLORINFO = 16;

export function allocKS_TRUECOLORINFO(data?: Partial<KS_TRUECOLORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_TRUECOLORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dwBitMasks !== undefined) view.setBigUint64(0, data.dwBitMasks === null ? 0n : BigInt(util.toPointer(data.dwBitMasks)), true);
  // 0x08: pointer
  if (data?.bmiColors !== undefined) view.setBigUint64(8, data.bmiColors === null ? 0n : BigInt(util.toPointer(data.bmiColors)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER (size: 40)
 */
export interface KS_VIDEOINFOHEADER {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_VIDEOINFOHEADER = 40;

export function allocKS_VIDEOINFOHEADER(data?: Partial<KS_VIDEOINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VIDEOINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(32, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VIDEOINFO (size: 48)
 */
export interface KS_VIDEOINFO {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_VIDEOINFO = 48;

export function allocKS_VIDEOINFO(data?: Partial<KS_VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(32, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VBIINFOHEADER (size: 48)
 */
export interface KS_VBIINFOHEADER {
  /** u32 */
  StartLine: number;
  /** u32 */
  EndLine: number;
  /** u32 */
  SamplingFrequency: number;
  /** u32 */
  MinLineStartTime: number;
  /** u32 */
  MaxLineStartTime: number;
  /** u32 */
  ActualLineStartTime: number;
  /** u32 */
  ActualLineEndTime: number;
  /** u32 */
  VideoStandard: number;
  /** u32 */
  SamplesPerLine: number;
  /** u32 */
  StrideInBytes: number;
  /** u32 */
  BufferSize: number;
}

export const sizeofKS_VBIINFOHEADER = 48;

export function allocKS_VBIINFOHEADER(data?: Partial<KS_VBIINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VBIINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartLine !== undefined) view.setUint32(0, Number(data.StartLine), true);
  // 0x04: u32
  if (data?.EndLine !== undefined) view.setUint32(4, Number(data.EndLine), true);
  // 0x08: u32
  if (data?.SamplingFrequency !== undefined) view.setUint32(8, Number(data.SamplingFrequency), true);
  // 0x0c: u32
  if (data?.MinLineStartTime !== undefined) view.setUint32(12, Number(data.MinLineStartTime), true);
  // 0x10: u32
  if (data?.MaxLineStartTime !== undefined) view.setUint32(16, Number(data.MaxLineStartTime), true);
  // 0x14: u32
  if (data?.ActualLineStartTime !== undefined) view.setUint32(20, Number(data.ActualLineStartTime), true);
  // 0x18: u32
  if (data?.ActualLineEndTime !== undefined) view.setUint32(24, Number(data.ActualLineEndTime), true);
  // 0x1c: u32
  if (data?.VideoStandard !== undefined) view.setUint32(28, Number(data.VideoStandard), true);
  // 0x20: u32
  if (data?.SamplesPerLine !== undefined) view.setUint32(32, Number(data.SamplesPerLine), true);
  // 0x24: u32
  if (data?.StrideInBytes !== undefined) view.setUint32(36, Number(data.StrideInBytes), true);
  // 0x28: u32
  if (data?.BufferSize !== undefined) view.setUint32(40, Number(data.BufferSize), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_ANALOGVIDEOINFO (size: 32)
 */
export interface KS_ANALOGVIDEOINFO {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwActiveWidth: number;
  /** u32 */
  dwActiveHeight: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
}

export const sizeofKS_ANALOGVIDEOINFO = 32;

export function allocKS_ANALOGVIDEOINFO(data?: Partial<KS_ANALOGVIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_ANALOGVIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwActiveWidth !== undefined) view.setUint32(16, Number(data.dwActiveWidth), true);
  // 0x14: u32
  if (data?.dwActiveHeight !== undefined) view.setUint32(20, Number(data.dwActiveHeight), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_TVTUNER_CHANGE_INFO (size: 16)
 */
export interface KS_TVTUNER_CHANGE_INFO {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCountryCode: number;
  /** u32 */
  dwAnalogVideoStandard: number;
  /** u32 */
  dwChannel: number;
}

export const sizeofKS_TVTUNER_CHANGE_INFO = 16;

export function allocKS_TVTUNER_CHANGE_INFO(data?: Partial<KS_TVTUNER_CHANGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_TVTUNER_CHANGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwCountryCode !== undefined) view.setUint32(4, Number(data.dwCountryCode), true);
  // 0x08: u32
  if (data?.dwAnalogVideoStandard !== undefined) view.setUint32(8, Number(data.dwAnalogVideoStandard), true);
  // 0x0c: u32
  if (data?.dwChannel !== undefined) view.setUint32(12, Number(data.dwChannel), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER2 (size: 72)
 */
export interface KS_VIDEOINFOHEADER2 {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** u32 */
  dwInterlaceFlags: number;
  /** u32 */
  dwCopyProtectFlags: number;
  /** u32 */
  dwPictAspectRatioX: number;
  /** u32 */
  dwPictAspectRatioY: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved2: number;
  /** Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_VIDEOINFOHEADER2 = 72;

export function allocKS_VIDEOINFOHEADER2(data?: Partial<KS_VIDEOINFOHEADER2>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VIDEOINFOHEADER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: u32
  if (data?.dwInterlaceFlags !== undefined) view.setUint32(32, Number(data.dwInterlaceFlags), true);
  // 0x24: u32
  if (data?.dwCopyProtectFlags !== undefined) view.setUint32(36, Number(data.dwCopyProtectFlags), true);
  // 0x28: u32
  if (data?.dwPictAspectRatioX !== undefined) view.setUint32(40, Number(data.dwPictAspectRatioX), true);
  // 0x2c: u32
  if (data?.dwPictAspectRatioY !== undefined) view.setUint32(44, Number(data.dwPictAspectRatioY), true);
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x38: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(56, Number(data.dwReserved2), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(64, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_MPEG1VIDEOINFO (size: 24)
 */
export interface KS_MPEG1VIDEOINFO {
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER */
  hdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStartTimeCode: number;
  /** u32 */
  cbSequenceHeader: number;
  /** array */
  bSequenceHeader: Deno.PointerValue | null;
}

export const sizeofKS_MPEG1VIDEOINFO = 24;

export function allocKS_MPEG1VIDEOINFO(data?: Partial<KS_MPEG1VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_MPEG1VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(util.toPointer(data.hdr)), true);
  // 0x08: u32
  if (data?.dwStartTimeCode !== undefined) view.setUint32(8, Number(data.dwStartTimeCode), true);
  // 0x0c: u32
  if (data?.cbSequenceHeader !== undefined) view.setUint32(12, Number(data.cbSequenceHeader), true);
  // 0x10: pointer
  if (data?.bSequenceHeader !== undefined) view.setBigUint64(16, data.bSequenceHeader === null ? 0n : BigInt(util.toPointer(data.bSequenceHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_MPEGVIDEOINFO2 (size: 40)
 */
export interface KS_MPEGVIDEOINFO2 {
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER2 */
  hdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStartTimeCode: number;
  /** u32 */
  cbSequenceHeader: number;
  /** u32 */
  dwProfile: number;
  /** u32 */
  dwLevel: number;
  /** u32 */
  dwFlags: number;
  /** array */
  bSequenceHeader: Deno.PointerValue | null;
}

export const sizeofKS_MPEGVIDEOINFO2 = 40;

export function allocKS_MPEGVIDEOINFO2(data?: Partial<KS_MPEGVIDEOINFO2>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_MPEGVIDEOINFO2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(util.toPointer(data.hdr)), true);
  // 0x08: u32
  if (data?.dwStartTimeCode !== undefined) view.setUint32(8, Number(data.dwStartTimeCode), true);
  // 0x0c: u32
  if (data?.cbSequenceHeader !== undefined) view.setUint32(12, Number(data.cbSequenceHeader), true);
  // 0x10: u32
  if (data?.dwProfile !== undefined) view.setUint32(16, Number(data.dwProfile), true);
  // 0x14: u32
  if (data?.dwLevel !== undefined) view.setUint32(20, Number(data.dwLevel), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.bSequenceHeader !== undefined) view.setBigUint64(32, data.bSequenceHeader === null ? 0n : BigInt(util.toPointer(data.bSequenceHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_H264VIDEOINFO (size: 80)
 */
export interface KS_H264VIDEOINFO {
  /** u16 */
  wWidth: number;
  /** u16 */
  wHeight: number;
  /** u16 */
  wSARwidth: number;
  /** u16 */
  wSARheight: number;
  /** u16 */
  wProfile: number;
  /** u8 */
  bLevelIDC: number;
  /** u16 */
  wConstrainedToolset: number;
  /** u32 */
  bmSupportedUsages: number;
  /** u16 */
  bmCapabilities: number;
  /** u32 */
  bmSVCCapabilities: number;
  /** u32 */
  bmMVCCapabilities: number;
  /** u32 */
  dwFrameInterval: number;
  /** u8 */
  bMaxCodecConfigDelay: number;
  /** u8 */
  bmSupportedSliceModes: number;
  /** u8 */
  bmSupportedSyncFrameTypes: number;
  /** u8 */
  bResolutionScaling: number;
  /** u8 */
  bSimulcastSupport: number;
  /** u8 */
  bmSupportedRateControlModes: number;
  /** u16 */
  wMaxMBperSecOneResolutionNoScalability: number;
  /** u16 */
  wMaxMBperSecTwoResolutionsNoScalability: number;
  /** u16 */
  wMaxMBperSecThreeResolutionsNoScalability: number;
  /** u16 */
  wMaxMBperSecFourResolutionsNoScalability: number;
  /** u16 */
  wMaxMBperSecOneResolutionTemporalScalability: number;
  /** u16 */
  wMaxMBperSecTwoResolutionsTemporalScalablility: number;
  /** u16 */
  wMaxMBperSecThreeResolutionsTemporalScalability: number;
  /** u16 */
  wMaxMBperSecFourResolutionsTemporalScalability: number;
  /** u16 */
  wMaxMBperSecOneResolutionTemporalQualityScalability: number;
  /** u16 */
  wMaxMBperSecTwoResolutionsTemporalQualityScalability: number;
  /** u16 */
  wMaxMBperSecThreeResolutionsTemporalQualityScalablity: number;
  /** u16 */
  wMaxMBperSecFourResolutionsTemporalQualityScalability: number;
  /** u16 */
  wMaxMBperSecOneResolutionTemporalSpatialScalability: number;
  /** u16 */
  wMaxMBperSecTwoResolutionsTemporalSpatialScalability: number;
  /** u16 */
  wMaxMBperSecThreeResolutionsTemporalSpatialScalablity: number;
  /** u16 */
  wMaxMBperSecFourResolutionsTemporalSpatialScalability: number;
  /** u16 */
  wMaxMBperSecOneResolutionFullScalability: number;
  /** u16 */
  wMaxMBperSecTwoResolutionsFullScalability: number;
  /** u16 */
  wMaxMBperSecThreeResolutionsFullScalability: number;
  /** u16 */
  wMaxMBperSecFourResolutionsFullScalability: number;
}

export const sizeofKS_H264VIDEOINFO = 80;

export function allocKS_H264VIDEOINFO(data?: Partial<KS_H264VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_H264VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wWidth !== undefined) view.setUint16(0, Number(data.wWidth), true);
  // 0x02: u16
  if (data?.wHeight !== undefined) view.setUint16(2, Number(data.wHeight), true);
  // 0x04: u16
  if (data?.wSARwidth !== undefined) view.setUint16(4, Number(data.wSARwidth), true);
  // 0x06: u16
  if (data?.wSARheight !== undefined) view.setUint16(6, Number(data.wSARheight), true);
  // 0x08: u16
  if (data?.wProfile !== undefined) view.setUint16(8, Number(data.wProfile), true);
  // 0x0a: u8
  if (data?.bLevelIDC !== undefined) view.setUint8(10, Number(data.bLevelIDC));
  // 0x0b: u16
  if (data?.wConstrainedToolset !== undefined) view.setUint16(11, Number(data.wConstrainedToolset), true);
  // 0x0d: u32
  if (data?.bmSupportedUsages !== undefined) view.setUint32(13, Number(data.bmSupportedUsages), true);
  // 0x11: u16
  if (data?.bmCapabilities !== undefined) view.setUint16(17, Number(data.bmCapabilities), true);
  // 0x13: u32
  if (data?.bmSVCCapabilities !== undefined) view.setUint32(19, Number(data.bmSVCCapabilities), true);
  // 0x17: u32
  if (data?.bmMVCCapabilities !== undefined) view.setUint32(23, Number(data.bmMVCCapabilities), true);
  // 0x1b: u32
  if (data?.dwFrameInterval !== undefined) view.setUint32(27, Number(data.dwFrameInterval), true);
  // 0x1f: u8
  if (data?.bMaxCodecConfigDelay !== undefined) view.setUint8(31, Number(data.bMaxCodecConfigDelay));
  // 0x20: u8
  if (data?.bmSupportedSliceModes !== undefined) view.setUint8(32, Number(data.bmSupportedSliceModes));
  // 0x21: u8
  if (data?.bmSupportedSyncFrameTypes !== undefined) view.setUint8(33, Number(data.bmSupportedSyncFrameTypes));
  // 0x22: u8
  if (data?.bResolutionScaling !== undefined) view.setUint8(34, Number(data.bResolutionScaling));
  // 0x23: u8
  if (data?.bSimulcastSupport !== undefined) view.setUint8(35, Number(data.bSimulcastSupport));
  // 0x24: u8
  if (data?.bmSupportedRateControlModes !== undefined) view.setUint8(36, Number(data.bmSupportedRateControlModes));
  // 0x25: u16
  if (data?.wMaxMBperSecOneResolutionNoScalability !== undefined) view.setUint16(37, Number(data.wMaxMBperSecOneResolutionNoScalability), true);
  // 0x27: u16
  if (data?.wMaxMBperSecTwoResolutionsNoScalability !== undefined) view.setUint16(39, Number(data.wMaxMBperSecTwoResolutionsNoScalability), true);
  // 0x29: u16
  if (data?.wMaxMBperSecThreeResolutionsNoScalability !== undefined) view.setUint16(41, Number(data.wMaxMBperSecThreeResolutionsNoScalability), true);
  // 0x2b: u16
  if (data?.wMaxMBperSecFourResolutionsNoScalability !== undefined) view.setUint16(43, Number(data.wMaxMBperSecFourResolutionsNoScalability), true);
  // 0x2d: u16
  if (data?.wMaxMBperSecOneResolutionTemporalScalability !== undefined) view.setUint16(45, Number(data.wMaxMBperSecOneResolutionTemporalScalability), true);
  // 0x2f: u16
  if (data?.wMaxMBperSecTwoResolutionsTemporalScalablility !== undefined) view.setUint16(47, Number(data.wMaxMBperSecTwoResolutionsTemporalScalablility), true);
  // 0x31: u16
  if (data?.wMaxMBperSecThreeResolutionsTemporalScalability !== undefined) view.setUint16(49, Number(data.wMaxMBperSecThreeResolutionsTemporalScalability), true);
  // 0x33: u16
  if (data?.wMaxMBperSecFourResolutionsTemporalScalability !== undefined) view.setUint16(51, Number(data.wMaxMBperSecFourResolutionsTemporalScalability), true);
  // 0x35: u16
  if (data?.wMaxMBperSecOneResolutionTemporalQualityScalability !== undefined) view.setUint16(53, Number(data.wMaxMBperSecOneResolutionTemporalQualityScalability), true);
  // 0x37: u16
  if (data?.wMaxMBperSecTwoResolutionsTemporalQualityScalability !== undefined) view.setUint16(55, Number(data.wMaxMBperSecTwoResolutionsTemporalQualityScalability), true);
  // 0x39: u16
  if (data?.wMaxMBperSecThreeResolutionsTemporalQualityScalablity !== undefined) view.setUint16(57, Number(data.wMaxMBperSecThreeResolutionsTemporalQualityScalablity), true);
  // 0x3b: u16
  if (data?.wMaxMBperSecFourResolutionsTemporalQualityScalability !== undefined) view.setUint16(59, Number(data.wMaxMBperSecFourResolutionsTemporalQualityScalability), true);
  // 0x3d: u16
  if (data?.wMaxMBperSecOneResolutionTemporalSpatialScalability !== undefined) view.setUint16(61, Number(data.wMaxMBperSecOneResolutionTemporalSpatialScalability), true);
  // 0x3f: u16
  if (data?.wMaxMBperSecTwoResolutionsTemporalSpatialScalability !== undefined) view.setUint16(63, Number(data.wMaxMBperSecTwoResolutionsTemporalSpatialScalability), true);
  // 0x41: u16
  if (data?.wMaxMBperSecThreeResolutionsTemporalSpatialScalablity !== undefined) view.setUint16(65, Number(data.wMaxMBperSecThreeResolutionsTemporalSpatialScalablity), true);
  // 0x43: u16
  if (data?.wMaxMBperSecFourResolutionsTemporalSpatialScalability !== undefined) view.setUint16(67, Number(data.wMaxMBperSecFourResolutionsTemporalSpatialScalability), true);
  // 0x45: u16
  if (data?.wMaxMBperSecOneResolutionFullScalability !== undefined) view.setUint16(69, Number(data.wMaxMBperSecOneResolutionFullScalability), true);
  // 0x47: u16
  if (data?.wMaxMBperSecTwoResolutionsFullScalability !== undefined) view.setUint16(71, Number(data.wMaxMBperSecTwoResolutionsFullScalability), true);
  // 0x49: u16
  if (data?.wMaxMBperSecThreeResolutionsFullScalability !== undefined) view.setUint16(73, Number(data.wMaxMBperSecThreeResolutionsFullScalability), true);
  // 0x4b: u16
  if (data?.wMaxMBperSecFourResolutionsFullScalability !== undefined) view.setUint16(75, Number(data.wMaxMBperSecFourResolutionsFullScalability), true);
  // 0x4d: pad3
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_MPEGAUDIOINFO (size: 16)
 */
export interface KS_MPEGAUDIOINFO {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
}

export const sizeofKS_MPEGAUDIOINFO = 16;

export function allocKS_MPEGAUDIOINFO(data?: Partial<KS_MPEGAUDIOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_MPEGAUDIOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(4, Number(data.dwReserved1), true);
  // 0x08: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(8, Number(data.dwReserved2), true);
  // 0x0c: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(12, Number(data.dwReserved3), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_VIDEOINFOHEADER (size: 16)
 */
export interface KS_DATAFORMAT_VIDEOINFOHEADER {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_VIDEOINFOHEADER = 16;

export function allocKS_DATAFORMAT_VIDEOINFOHEADER(data?: Partial<KS_DATAFORMAT_VIDEOINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_VIDEOINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(8, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_VIDEOINFOHEADER2 (size: 16)
 */
export interface KS_DATAFORMAT_VIDEOINFOHEADER2 {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER2 */
  VideoInfoHeader2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_VIDEOINFOHEADER2 = 16;

export function allocKS_DATAFORMAT_VIDEOINFOHEADER2(data?: Partial<KS_DATAFORMAT_VIDEOINFOHEADER2>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_VIDEOINFOHEADER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.VideoInfoHeader2 !== undefined) view.setBigUint64(8, data.VideoInfoHeader2 === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_MPEGVIDEOINFO2 (size: 16)
 */
export interface KS_DATAFORMAT_MPEGVIDEOINFO2 {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_MPEGVIDEOINFO2 */
  MpegVideoInfoHeader2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_MPEGVIDEOINFO2 = 16;

export function allocKS_DATAFORMAT_MPEGVIDEOINFO2(data?: Partial<KS_DATAFORMAT_MPEGVIDEOINFO2>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_MPEGVIDEOINFO2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.MpegVideoInfoHeader2 !== undefined) view.setBigUint64(8, data.MpegVideoInfoHeader2 === null ? 0n : BigInt(util.toPointer(data.MpegVideoInfoHeader2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_H264VIDEOINFO (size: 16)
 */
export interface KS_DATAFORMAT_H264VIDEOINFO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_H264VIDEOINFO */
  H264VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_H264VIDEOINFO = 16;

export function allocKS_DATAFORMAT_H264VIDEOINFO(data?: Partial<KS_DATAFORMAT_H264VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_H264VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.H264VideoInfoHeader !== undefined) view.setBigUint64(8, data.H264VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.H264VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_IMAGEINFO (size: 16)
 */
export interface KS_DATAFORMAT_IMAGEINFO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER */
  ImageInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_IMAGEINFO = 16;

export function allocKS_DATAFORMAT_IMAGEINFO(data?: Partial<KS_DATAFORMAT_IMAGEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_IMAGEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.ImageInfoHeader !== undefined) view.setBigUint64(8, data.ImageInfoHeader === null ? 0n : BigInt(util.toPointer(data.ImageInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_VIDEOINFO_PALETTE (size: 16)
 */
export interface KS_DATAFORMAT_VIDEOINFO_PALETTE {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFO */
  VideoInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_VIDEOINFO_PALETTE = 16;

export function allocKS_DATAFORMAT_VIDEOINFO_PALETTE(data?: Partial<KS_DATAFORMAT_VIDEOINFO_PALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_VIDEOINFO_PALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.VideoInfo !== undefined) view.setBigUint64(8, data.VideoInfo === null ? 0n : BigInt(util.toPointer(data.VideoInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_VBIINFOHEADER (size: 16)
 */
export interface KS_DATAFORMAT_VBIINFOHEADER {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VBIINFOHEADER */
  VBIInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_VBIINFOHEADER = 16;

export function allocKS_DATAFORMAT_VBIINFOHEADER(data?: Partial<KS_DATAFORMAT_VBIINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_VBIINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.VBIInfoHeader !== undefined) view.setBigUint64(8, data.VBIInfoHeader === null ? 0n : BigInt(util.toPointer(data.VBIInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS (size: 120)
 */
export interface KS_VIDEO_STREAM_CONFIG_CAPS {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VideoStandard: number;
  /** Windows.Win32.Foundation.SIZE */
  InputSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MinCroppingSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaxCroppingSize: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  CropGranularityX: number;
  /** i32 */
  CropGranularityY: number;
  /** i32 */
  CropAlignX: number;
  /** i32 */
  CropAlignY: number;
  /** Windows.Win32.Foundation.SIZE */
  MinOutputSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaxOutputSize: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  OutputGranularityX: number;
  /** i32 */
  OutputGranularityY: number;
  /** i32 */
  StretchTapsX: number;
  /** i32 */
  StretchTapsY: number;
  /** i32 */
  ShrinkTapsX: number;
  /** i32 */
  ShrinkTapsY: number;
  /** i64 */
  MinFrameInterval: Deno.PointerValue;
  /** i64 */
  MaxFrameInterval: Deno.PointerValue;
  /** i32 */
  MinBitsPerSecond: number;
  /** i32 */
  MaxBitsPerSecond: number;
}

export const sizeofKS_VIDEO_STREAM_CONFIG_CAPS = 120;

export function allocKS_VIDEO_STREAM_CONFIG_CAPS(data?: Partial<KS_VIDEO_STREAM_CONFIG_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VIDEO_STREAM_CONFIG_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: u32
  if (data?.VideoStandard !== undefined) view.setUint32(8, Number(data.VideoStandard), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.InputSize !== undefined) view.setBigUint64(16, data.InputSize === null ? 0n : BigInt(util.toPointer(data.InputSize)), true);
  // 0x18: pointer
  if (data?.MinCroppingSize !== undefined) view.setBigUint64(24, data.MinCroppingSize === null ? 0n : BigInt(util.toPointer(data.MinCroppingSize)), true);
  // 0x20: pointer
  if (data?.MaxCroppingSize !== undefined) view.setBigUint64(32, data.MaxCroppingSize === null ? 0n : BigInt(util.toPointer(data.MaxCroppingSize)), true);
  // 0x28: i32
  if (data?.CropGranularityX !== undefined) view.setInt32(40, Number(data.CropGranularityX), true);
  // 0x2c: i32
  if (data?.CropGranularityY !== undefined) view.setInt32(44, Number(data.CropGranularityY), true);
  // 0x30: i32
  if (data?.CropAlignX !== undefined) view.setInt32(48, Number(data.CropAlignX), true);
  // 0x34: i32
  if (data?.CropAlignY !== undefined) view.setInt32(52, Number(data.CropAlignY), true);
  // 0x38: pointer
  if (data?.MinOutputSize !== undefined) view.setBigUint64(56, data.MinOutputSize === null ? 0n : BigInt(util.toPointer(data.MinOutputSize)), true);
  // 0x40: pointer
  if (data?.MaxOutputSize !== undefined) view.setBigUint64(64, data.MaxOutputSize === null ? 0n : BigInt(util.toPointer(data.MaxOutputSize)), true);
  // 0x48: i32
  if (data?.OutputGranularityX !== undefined) view.setInt32(72, Number(data.OutputGranularityX), true);
  // 0x4c: i32
  if (data?.OutputGranularityY !== undefined) view.setInt32(76, Number(data.OutputGranularityY), true);
  // 0x50: i32
  if (data?.StretchTapsX !== undefined) view.setInt32(80, Number(data.StretchTapsX), true);
  // 0x54: i32
  if (data?.StretchTapsY !== undefined) view.setInt32(84, Number(data.StretchTapsY), true);
  // 0x58: i32
  if (data?.ShrinkTapsX !== undefined) view.setInt32(88, Number(data.ShrinkTapsX), true);
  // 0x5c: i32
  if (data?.ShrinkTapsY !== undefined) view.setInt32(92, Number(data.ShrinkTapsY), true);
  // 0x60: i64
  if (data?.MinFrameInterval !== undefined) view.setBigInt64(96, BigInt(data.MinFrameInterval), true);
  // 0x68: i64
  if (data?.MaxFrameInterval !== undefined) view.setBigInt64(104, BigInt(data.MaxFrameInterval), true);
  // 0x70: i32
  if (data?.MinBitsPerSecond !== undefined) view.setInt32(112, Number(data.MinBitsPerSecond), true);
  // 0x74: i32
  if (data?.MaxBitsPerSecond !== undefined) view.setInt32(116, Number(data.MaxBitsPerSecond), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_VIDEO (size: 40)
 */
export interface KS_DATARANGE_VIDEO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_VIDEO = 40;

export function allocKS_DATARANGE_VIDEO(data?: Partial<KS_DATARANGE_VIDEO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_VIDEO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(32, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_VIDEO2 (size: 40)
 */
export interface KS_DATARANGE_VIDEO2 {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER2 */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_VIDEO2 = 40;

export function allocKS_DATARANGE_VIDEO2(data?: Partial<KS_DATARANGE_VIDEO2>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_VIDEO2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(32, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_MPEG1_VIDEO (size: 40)
 */
export interface KS_DATARANGE_MPEG1_VIDEO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_MPEG1VIDEOINFO */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_MPEG1_VIDEO = 40;

export function allocKS_DATARANGE_MPEG1_VIDEO(data?: Partial<KS_DATARANGE_MPEG1_VIDEO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_MPEG1_VIDEO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(32, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_MPEG2_VIDEO (size: 40)
 */
export interface KS_DATARANGE_MPEG2_VIDEO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_MPEGVIDEOINFO2 */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_MPEG2_VIDEO = 40;

export function allocKS_DATARANGE_MPEG2_VIDEO(data?: Partial<KS_DATARANGE_MPEG2_VIDEO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_MPEG2_VIDEO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(32, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_H264_VIDEO (size: 40)
 */
export interface KS_DATARANGE_H264_VIDEO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_H264VIDEOINFO */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_H264_VIDEO = 40;

export function allocKS_DATARANGE_H264_VIDEO(data?: Partial<KS_DATARANGE_H264_VIDEO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_H264_VIDEO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(32, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_IMAGE (size: 24)
 */
export interface KS_DATARANGE_IMAGE {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER */
  ImageInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_IMAGE = 24;

export function allocKS_DATARANGE_IMAGE(data?: Partial<KS_DATARANGE_IMAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_IMAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(8, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x10: pointer
  if (data?.ImageInfoHeader !== undefined) view.setBigUint64(16, data.ImageInfoHeader === null ? 0n : BigInt(util.toPointer(data.ImageInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_VIDEO_PALETTE (size: 40)
 */
export interface KS_DATARANGE_VIDEO_PALETTE {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFO */
  VideoInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_VIDEO_PALETTE = 40;

export function allocKS_DATARANGE_VIDEO_PALETTE(data?: Partial<KS_DATARANGE_VIDEO_PALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_VIDEO_PALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfo !== undefined) view.setBigUint64(32, data.VideoInfo === null ? 0n : BigInt(util.toPointer(data.VideoInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_VIDEO_VBI (size: 40)
 */
export interface KS_DATARANGE_VIDEO_VBI {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VBIINFOHEADER */
  VBIInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_VIDEO_VBI = 40;

export function allocKS_DATARANGE_VIDEO_VBI(data?: Partial<KS_DATARANGE_VIDEO_VBI>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_VIDEO_VBI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VBIInfoHeader !== undefined) view.setBigUint64(32, data.VBIInfoHeader === null ? 0n : BigInt(util.toPointer(data.VBIInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_ANALOGVIDEO (size: 16)
 */
export interface KS_DATARANGE_ANALOGVIDEO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_ANALOGVIDEOINFO */
  AnalogVideoInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_ANALOGVIDEO = 16;

export function allocKS_DATARANGE_ANALOGVIDEO(data?: Partial<KS_DATARANGE_ANALOGVIDEO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_ANALOGVIDEO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: pointer
  if (data?.AnalogVideoInfo !== undefined) view.setBigUint64(8, data.AnalogVideoInfo === null ? 0n : BigInt(util.toPointer(data.AnalogVideoInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICAP_PROPERTIES_PROTECTION_S (size: 16)
 */
export interface VBICAP_PROPERTIES_PROTECTION_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** u32 */
  Status: number;
}

export const sizeofVBICAP_PROPERTIES_PROTECTION_S = 16;

export function allocVBICAP_PROPERTIES_PROTECTION_S(data?: Partial<VBICAP_PROPERTIES_PROTECTION_S>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICAP_PROPERTIES_PROTECTION_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: u32
  if (data?.Status !== undefined) view.setUint32(12, Number(data.Status), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.NABTSFEC_BUFFER (size: 16)
 */
export interface NABTSFEC_BUFFER {
  /** u32 */
  dataSize: number;
  /** u16 */
  groupID: number;
  /** u16 */
  Reserved: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofNABTSFEC_BUFFER = 16;

export function allocNABTSFEC_BUFFER(data?: Partial<NABTSFEC_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofNABTSFEC_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dataSize !== undefined) view.setUint32(0, Number(data.dataSize), true);
  // 0x04: u16
  if (data?.groupID !== undefined) view.setUint16(4, Number(data.groupID), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_SCANLINES (size: 8)
 */
export interface VBICODECFILTERING_SCANLINES {
  /** array */
  DwordBitArray: Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_SCANLINES = 8;

export function allocVBICODECFILTERING_SCANLINES(data?: Partial<VBICODECFILTERING_SCANLINES>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_SCANLINES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DwordBitArray !== undefined) view.setBigUint64(0, data.DwordBitArray === null ? 0n : BigInt(util.toPointer(data.DwordBitArray)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_NABTS_SUBSTREAMS (size: 8)
 */
export interface VBICODECFILTERING_NABTS_SUBSTREAMS {
  /** array */
  SubstreamMask: Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_NABTS_SUBSTREAMS = 8;

export function allocVBICODECFILTERING_NABTS_SUBSTREAMS(data?: Partial<VBICODECFILTERING_NABTS_SUBSTREAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_NABTS_SUBSTREAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubstreamMask !== undefined) view.setBigUint64(0, data.SubstreamMask === null ? 0n : BigInt(util.toPointer(data.SubstreamMask)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_CC_SUBSTREAMS (size: 8)
 */
export interface VBICODECFILTERING_CC_SUBSTREAMS {
  /** u32 */
  SubstreamMask: number;
}

export const sizeofVBICODECFILTERING_CC_SUBSTREAMS = 8;

export function allocVBICODECFILTERING_CC_SUBSTREAMS(data?: Partial<VBICODECFILTERING_CC_SUBSTREAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_CC_SUBSTREAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SubstreamMask !== undefined) view.setUint32(0, Number(data.SubstreamMask), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.CC_BYTE_PAIR (size: 16)
 */
export interface CC_BYTE_PAIR {
  /** array */
  Decoded: Deno.PointerValue | null;
  /** u16 */
  Reserved: number;
}

export const sizeofCC_BYTE_PAIR = 16;

export function allocCC_BYTE_PAIR(data?: Partial<CC_BYTE_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofCC_BYTE_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Decoded !== undefined) view.setBigUint64(0, data.Decoded === null ? 0n : BigInt(util.toPointer(data.Decoded)), true);
  // 0x08: u16
  if (data?.Reserved !== undefined) view.setUint16(8, Number(data.Reserved), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.CC_HW_FIELD (size: 32)
 */
export interface CC_HW_FIELD {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_SCANLINES */
  ScanlinesRequested: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fieldFlags: number;
  /** i64 */
  PictureNumber: Deno.PointerValue;
  /** array */
  Lines: Deno.PointerValue | null;
}

export const sizeofCC_HW_FIELD = 32;

export function allocCC_HW_FIELD(data?: Partial<CC_HW_FIELD>): Uint8Array {
  const buf = new Uint8Array(sizeofCC_HW_FIELD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ScanlinesRequested !== undefined) view.setBigUint64(0, data.ScanlinesRequested === null ? 0n : BigInt(util.toPointer(data.ScanlinesRequested)), true);
  // 0x08: u32
  if (data?.fieldFlags !== undefined) view.setUint32(8, Number(data.fieldFlags), true);
  // 0x0c: pad4
  // 0x10: i64
  if (data?.PictureNumber !== undefined) view.setBigInt64(16, BigInt(data.PictureNumber), true);
  // 0x18: pointer
  if (data?.Lines !== undefined) view.setBigUint64(24, data.Lines === null ? 0n : BigInt(util.toPointer(data.Lines)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.NABTS_BUFFER_LINE (size: 16)
 */
export interface NABTS_BUFFER_LINE {
  /** u8 */
  Confidence: number;
  /** array */
  Bytes: Deno.PointerValue | null;
}

export const sizeofNABTS_BUFFER_LINE = 16;

export function allocNABTS_BUFFER_LINE(data?: Partial<NABTS_BUFFER_LINE>): Uint8Array {
  const buf = new Uint8Array(sizeofNABTS_BUFFER_LINE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Confidence !== undefined) view.setUint8(0, Number(data.Confidence));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Bytes !== undefined) view.setBigUint64(8, data.Bytes === null ? 0n : BigInt(util.toPointer(data.Bytes)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.NABTS_BUFFER (size: 24)
 */
export interface NABTS_BUFFER {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_SCANLINES */
  ScanlinesRequested: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  PictureNumber: Deno.PointerValue;
  /** array */
  NabtsLines: Deno.PointerValue | null;
}

export const sizeofNABTS_BUFFER = 24;

export function allocNABTS_BUFFER(data?: Partial<NABTS_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofNABTS_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ScanlinesRequested !== undefined) view.setBigUint64(0, data.ScanlinesRequested === null ? 0n : BigInt(util.toPointer(data.ScanlinesRequested)), true);
  // 0x08: i64
  if (data?.PictureNumber !== undefined) view.setBigInt64(8, BigInt(data.PictureNumber), true);
  // 0x10: pointer
  if (data?.NabtsLines !== undefined) view.setBigUint64(16, data.NabtsLines === null ? 0n : BigInt(util.toPointer(data.NabtsLines)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.WST_BUFFER_LINE (size: 16)
 */
export interface WST_BUFFER_LINE {
  /** u8 */
  Confidence: number;
  /** array */
  Bytes: Deno.PointerValue | null;
}

export const sizeofWST_BUFFER_LINE = 16;

export function allocWST_BUFFER_LINE(data?: Partial<WST_BUFFER_LINE>): Uint8Array {
  const buf = new Uint8Array(sizeofWST_BUFFER_LINE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Confidence !== undefined) view.setUint8(0, Number(data.Confidence));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Bytes !== undefined) view.setBigUint64(8, data.Bytes === null ? 0n : BigInt(util.toPointer(data.Bytes)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.WST_BUFFER (size: 16)
 */
export interface WST_BUFFER {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_SCANLINES */
  ScanlinesRequested: Uint8Array | Deno.PointerValue | null;
  /** array */
  WstLines: Deno.PointerValue | null;
}

export const sizeofWST_BUFFER = 16;

export function allocWST_BUFFER(data?: Partial<WST_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofWST_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ScanlinesRequested !== undefined) view.setBigUint64(0, data.ScanlinesRequested === null ? 0n : BigInt(util.toPointer(data.ScanlinesRequested)), true);
  // 0x08: pointer
  if (data?.WstLines !== undefined) view.setBigUint64(8, data.WstLines === null ? 0n : BigInt(util.toPointer(data.WstLines)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON (size: 56)
 */
export interface VBICODECFILTERING_STATISTICS_COMMON {
  /** u32 */
  InputSRBsProcessed: number;
  /** u32 */
  OutputSRBsProcessed: number;
  /** u32 */
  SRBsIgnored: number;
  /** u32 */
  InputSRBsMissing: number;
  /** u32 */
  OutputSRBsMissing: number;
  /** u32 */
  OutputFailures: number;
  /** u32 */
  InternalErrors: number;
  /** u32 */
  ExternalErrors: number;
  /** u32 */
  InputDiscontinuities: number;
  /** u32 */
  DSPFailures: number;
  /** u32 */
  TvTunerChanges: number;
  /** u32 */
  VBIHeaderChanges: number;
  /** u32 */
  LineConfidenceAvg: number;
  /** u32 */
  BytesOutput: number;
}

export const sizeofVBICODECFILTERING_STATISTICS_COMMON = 56;

export function allocVBICODECFILTERING_STATISTICS_COMMON(data?: Partial<VBICODECFILTERING_STATISTICS_COMMON>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_COMMON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InputSRBsProcessed !== undefined) view.setUint32(0, Number(data.InputSRBsProcessed), true);
  // 0x04: u32
  if (data?.OutputSRBsProcessed !== undefined) view.setUint32(4, Number(data.OutputSRBsProcessed), true);
  // 0x08: u32
  if (data?.SRBsIgnored !== undefined) view.setUint32(8, Number(data.SRBsIgnored), true);
  // 0x0c: u32
  if (data?.InputSRBsMissing !== undefined) view.setUint32(12, Number(data.InputSRBsMissing), true);
  // 0x10: u32
  if (data?.OutputSRBsMissing !== undefined) view.setUint32(16, Number(data.OutputSRBsMissing), true);
  // 0x14: u32
  if (data?.OutputFailures !== undefined) view.setUint32(20, Number(data.OutputFailures), true);
  // 0x18: u32
  if (data?.InternalErrors !== undefined) view.setUint32(24, Number(data.InternalErrors), true);
  // 0x1c: u32
  if (data?.ExternalErrors !== undefined) view.setUint32(28, Number(data.ExternalErrors), true);
  // 0x20: u32
  if (data?.InputDiscontinuities !== undefined) view.setUint32(32, Number(data.InputDiscontinuities), true);
  // 0x24: u32
  if (data?.DSPFailures !== undefined) view.setUint32(36, Number(data.DSPFailures), true);
  // 0x28: u32
  if (data?.TvTunerChanges !== undefined) view.setUint32(40, Number(data.TvTunerChanges), true);
  // 0x2c: u32
  if (data?.VBIHeaderChanges !== undefined) view.setUint32(44, Number(data.VBIHeaderChanges), true);
  // 0x30: u32
  if (data?.LineConfidenceAvg !== undefined) view.setUint32(48, Number(data.LineConfidenceAvg), true);
  // 0x34: u32
  if (data?.BytesOutput !== undefined) view.setUint32(52, Number(data.BytesOutput), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON_PIN (size: 32)
 */
export interface VBICODECFILTERING_STATISTICS_COMMON_PIN {
  /** u32 */
  SRBsProcessed: number;
  /** u32 */
  SRBsIgnored: number;
  /** u32 */
  SRBsMissing: number;
  /** u32 */
  InternalErrors: number;
  /** u32 */
  ExternalErrors: number;
  /** u32 */
  Discontinuities: number;
  /** u32 */
  LineConfidenceAvg: number;
  /** u32 */
  BytesOutput: number;
}

export const sizeofVBICODECFILTERING_STATISTICS_COMMON_PIN = 32;

export function allocVBICODECFILTERING_STATISTICS_COMMON_PIN(data?: Partial<VBICODECFILTERING_STATISTICS_COMMON_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_COMMON_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SRBsProcessed !== undefined) view.setUint32(0, Number(data.SRBsProcessed), true);
  // 0x04: u32
  if (data?.SRBsIgnored !== undefined) view.setUint32(4, Number(data.SRBsIgnored), true);
  // 0x08: u32
  if (data?.SRBsMissing !== undefined) view.setUint32(8, Number(data.SRBsMissing), true);
  // 0x0c: u32
  if (data?.InternalErrors !== undefined) view.setUint32(12, Number(data.InternalErrors), true);
  // 0x10: u32
  if (data?.ExternalErrors !== undefined) view.setUint32(16, Number(data.ExternalErrors), true);
  // 0x14: u32
  if (data?.Discontinuities !== undefined) view.setUint32(20, Number(data.Discontinuities), true);
  // 0x18: u32
  if (data?.LineConfidenceAvg !== undefined) view.setUint32(24, Number(data.LineConfidenceAvg), true);
  // 0x1c: u32
  if (data?.BytesOutput !== undefined) view.setUint32(28, Number(data.BytesOutput), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_NABTS (size: 40)
 */
export interface VBICODECFILTERING_STATISTICS_NABTS {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON */
  Common: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FECBundleBadLines: number;
  /** u32 */
  FECQueueOverflows: number;
  /** u32 */
  FECCorrectedLines: number;
  /** u32 */
  FECUncorrectableLines: number;
  /** u32 */
  BundlesProcessed: number;
  /** u32 */
  BundlesSent2IP: number;
  /** u32 */
  FilteredLines: number;
}

export const sizeofVBICODECFILTERING_STATISTICS_NABTS = 40;

export function allocVBICODECFILTERING_STATISTICS_NABTS(data?: Partial<VBICODECFILTERING_STATISTICS_NABTS>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_NABTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  // 0x08: u32
  if (data?.FECBundleBadLines !== undefined) view.setUint32(8, Number(data.FECBundleBadLines), true);
  // 0x0c: u32
  if (data?.FECQueueOverflows !== undefined) view.setUint32(12, Number(data.FECQueueOverflows), true);
  // 0x10: u32
  if (data?.FECCorrectedLines !== undefined) view.setUint32(16, Number(data.FECCorrectedLines), true);
  // 0x14: u32
  if (data?.FECUncorrectableLines !== undefined) view.setUint32(20, Number(data.FECUncorrectableLines), true);
  // 0x18: u32
  if (data?.BundlesProcessed !== undefined) view.setUint32(24, Number(data.BundlesProcessed), true);
  // 0x1c: u32
  if (data?.BundlesSent2IP !== undefined) view.setUint32(28, Number(data.BundlesSent2IP), true);
  // 0x20: u32
  if (data?.FilteredLines !== undefined) view.setUint32(32, Number(data.FilteredLines), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_NABTS_PIN (size: 8)
 */
export interface VBICODECFILTERING_STATISTICS_NABTS_PIN {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON_PIN */
  Common: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_STATISTICS_NABTS_PIN = 8;

export function allocVBICODECFILTERING_STATISTICS_NABTS_PIN(data?: Partial<VBICODECFILTERING_STATISTICS_NABTS_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_NABTS_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_CC (size: 8)
 */
export interface VBICODECFILTERING_STATISTICS_CC {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON */
  Common: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_STATISTICS_CC = 8;

export function allocVBICODECFILTERING_STATISTICS_CC(data?: Partial<VBICODECFILTERING_STATISTICS_CC>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_CC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_CC_PIN (size: 8)
 */
export interface VBICODECFILTERING_STATISTICS_CC_PIN {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON_PIN */
  Common: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_STATISTICS_CC_PIN = 8;

export function allocVBICODECFILTERING_STATISTICS_CC_PIN(data?: Partial<VBICODECFILTERING_STATISTICS_CC_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_CC_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_TELETEXT (size: 8)
 */
export interface VBICODECFILTERING_STATISTICS_TELETEXT {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON */
  Common: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_STATISTICS_TELETEXT = 8;

export function allocVBICODECFILTERING_STATISTICS_TELETEXT(data?: Partial<VBICODECFILTERING_STATISTICS_TELETEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_TELETEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_TELETEXT_PIN (size: 8)
 */
export interface VBICODECFILTERING_STATISTICS_TELETEXT_PIN {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON_PIN */
  Common: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_STATISTICS_TELETEXT_PIN = 8;

export function allocVBICODECFILTERING_STATISTICS_TELETEXT_PIN(data?: Partial<VBICODECFILTERING_STATISTICS_TELETEXT_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_TELETEXT_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_SCANLINES_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_SCANLINES_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_SCANLINES */
  Scanlines: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_SCANLINES_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_SCANLINES_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_SCANLINES_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_SCANLINES_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Scanlines !== undefined) view.setBigUint64(8, data.Scanlines === null ? 0n : BigInt(util.toPointer(data.Scanlines)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_NABTS_SUBSTREAMS */
  Substreams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Substreams !== undefined) view.setBigUint64(8, data.Substreams === null ? 0n : BigInt(util.toPointer(data.Substreams)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_CC_SUBSTREAMS */
  Substreams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Substreams !== undefined) view.setBigUint64(8, data.Substreams === null ? 0n : BigInt(util.toPointer(data.Substreams)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON_PIN */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_NABTS */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_NABTS_PIN */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_CC */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_CC_PIN */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VRAM_SURFACE_INFO (size: 48)
 */
export interface VRAM_SURFACE_INFO {
  /** usize */
  hSurface: Deno.PointerValue;
  /** i64 */
  VramPhysicalAddress: Deno.PointerValue;
  /** u32 */
  cbCaptured: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwLinearSize: number;
  /** i32 */
  lPitch: number;
  /** array */
  ullReserved: Deno.PointerValue | null;
}

export const sizeofVRAM_SURFACE_INFO = 48;

export function allocVRAM_SURFACE_INFO(data?: Partial<VRAM_SURFACE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVRAM_SURFACE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.hSurface !== undefined) view.setBigUint64(0, BigInt(data.hSurface), true);
  // 0x08: i64
  if (data?.VramPhysicalAddress !== undefined) view.setBigInt64(8, BigInt(data.VramPhysicalAddress), true);
  // 0x10: u32
  if (data?.cbCaptured !== undefined) view.setUint32(16, Number(data.cbCaptured), true);
  // 0x14: u32
  if (data?.dwWidth !== undefined) view.setUint32(20, Number(data.dwWidth), true);
  // 0x18: u32
  if (data?.dwHeight !== undefined) view.setUint32(24, Number(data.dwHeight), true);
  // 0x1c: u32
  if (data?.dwLinearSize !== undefined) view.setUint32(28, Number(data.dwLinearSize), true);
  // 0x20: i32
  if (data?.lPitch !== undefined) view.setInt32(32, Number(data.lPitch), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ullReserved !== undefined) view.setBigUint64(40, data.ullReserved === null ? 0n : BigInt(util.toPointer(data.ullReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VRAM_SURFACE_INFO_PROPERTY_S (size: 16)
 */
export interface VRAM_SURFACE_INFO_PROPERTY_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pVramSurfaceInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVRAM_SURFACE_INFO_PROPERTY_S = 16;

export function allocVRAM_SURFACE_INFO_PROPERTY_S(data?: Partial<VRAM_SURFACE_INFO_PROPERTY_S>): Uint8Array {
  const buf = new Uint8Array(sizeofVRAM_SURFACE_INFO_PROPERTY_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.pVramSurfaceInfo !== undefined) view.setBigUint64(8, data.pVramSurfaceInfo === null ? 0n : BigInt(util.toPointer(data.pVramSurfaceInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.SECURE_BUFFER_INFO (size: 24)
 */
export interface SECURE_BUFFER_INFO {
  /** System.Guid */
  guidBufferIdentifier: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbBufferSize: number;
  /** u32 */
  cbCaptured: number;
  /** array */
  ullReserved: Deno.PointerValue | null;
}

export const sizeofSECURE_BUFFER_INFO = 24;

export function allocSECURE_BUFFER_INFO(data?: Partial<SECURE_BUFFER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURE_BUFFER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidBufferIdentifier !== undefined) view.setBigUint64(0, data.guidBufferIdentifier === null ? 0n : BigInt(util.toPointer(data.guidBufferIdentifier)), true);
  // 0x08: u32
  if (data?.cbBufferSize !== undefined) view.setUint32(8, Number(data.cbBufferSize), true);
  // 0x0c: u32
  if (data?.cbCaptured !== undefined) view.setUint32(12, Number(data.cbCaptured), true);
  // 0x10: pointer
  if (data?.ullReserved !== undefined) view.setBigUint64(16, data.ullReserved === null ? 0n : BigInt(util.toPointer(data.ullReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_FRAME_INFO (size: 72)
 */
export interface KS_FRAME_INFO {
  /** u32 */
  ExtendedHeaderSize: number;
  /** u32 */
  dwFrameFlags: number;
  /** i64 */
  PictureNumber: Deno.PointerValue;
  /** i64 */
  DropCount: Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hDirectDraw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hSurfaceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  DirectDrawRect: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved2: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_FRAME_INFO = 72;

export function allocKS_FRAME_INFO(data?: Partial<KS_FRAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_FRAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtendedHeaderSize !== undefined) view.setUint32(0, Number(data.ExtendedHeaderSize), true);
  // 0x04: u32
  if (data?.dwFrameFlags !== undefined) view.setUint32(4, Number(data.dwFrameFlags), true);
  // 0x08: i64
  if (data?.PictureNumber !== undefined) view.setBigInt64(8, BigInt(data.PictureNumber), true);
  // 0x10: i64
  if (data?.DropCount !== undefined) view.setBigInt64(16, BigInt(data.DropCount), true);
  // 0x18: pointer
  if (data?.hDirectDraw !== undefined) view.setBigUint64(24, data.hDirectDraw === null ? 0n : BigInt(util.toPointer(data.hDirectDraw)), true);
  // 0x20: pointer
  if (data?.hSurfaceHandle !== undefined) view.setBigUint64(32, data.hSurfaceHandle === null ? 0n : BigInt(util.toPointer(data.hSurfaceHandle)), true);
  // 0x28: pointer
  if (data?.DirectDrawRect !== undefined) view.setBigUint64(40, data.DirectDrawRect === null ? 0n : BigInt(util.toPointer(data.DirectDrawRect)), true);
  // 0x30: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(48, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x38: u32
  if (data?.Reserved2 !== undefined) view.setUint32(56, Number(data.Reserved2), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(64, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VBI_FRAME_INFO (size: 48)
 */
export interface KS_VBI_FRAME_INFO {
  /** u32 */
  ExtendedHeaderSize: number;
  /** u32 */
  dwFrameFlags: number;
  /** i64 */
  PictureNumber: Deno.PointerValue;
  /** i64 */
  DropCount: Deno.PointerValue;
  /** u32 */
  dwSamplingFrequency: number;
  /** Windows.Win32.Media.KernelStreaming.KS_TVTUNER_CHANGE_INFO */
  TvTunerChangeInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VBIINFOHEADER */
  VBIInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_VBI_FRAME_INFO = 48;

export function allocKS_VBI_FRAME_INFO(data?: Partial<KS_VBI_FRAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VBI_FRAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtendedHeaderSize !== undefined) view.setUint32(0, Number(data.ExtendedHeaderSize), true);
  // 0x04: u32
  if (data?.dwFrameFlags !== undefined) view.setUint32(4, Number(data.dwFrameFlags), true);
  // 0x08: i64
  if (data?.PictureNumber !== undefined) view.setBigInt64(8, BigInt(data.PictureNumber), true);
  // 0x10: i64
  if (data?.DropCount !== undefined) view.setBigInt64(16, BigInt(data.DropCount), true);
  // 0x18: u32
  if (data?.dwSamplingFrequency !== undefined) view.setUint32(24, Number(data.dwSamplingFrequency), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.TvTunerChangeInfo !== undefined) view.setBigUint64(32, data.TvTunerChangeInfo === null ? 0n : BigInt(util.toPointer(data.TvTunerChangeInfo)), true);
  // 0x28: pointer
  if (data?.VBIInfoHeader !== undefined) view.setBigUint64(40, data.VBIInfoHeader === null ? 0n : BigInt(util.toPointer(data.VBIInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S (size: 8)
 */
export interface KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S {
  /** u32 */
  CX: number;
  /** u32 */
  CY: number;
}

export const sizeofKSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S = 8;

export function allocKSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S(data?: Partial<KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CX !== undefined) view.setUint32(0, Number(data.CX), true);
  // 0x04: u32
  if (data?.CY !== undefined) view.setUint32(4, Number(data.CY), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S (size: 8)
 */
export interface KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S {
  /** u32 */
  InterleavedCapSupported: number;
}

export const sizeofKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S = 8;

export function allocKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S(data?: Partial<KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InterleavedCapSupported !== undefined) view.setUint32(0, Number(data.InterleavedCapSupported), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S (size: 8)
 */
export interface KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S {
  /** u32 */
  InterleavedCapPossible: number;
}

export const sizeofKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S = 8;

export function allocKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S(data?: Partial<KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InterleavedCapPossible !== undefined) view.setUint32(0, Number(data.InterleavedCapPossible), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOPROCAMP_S (size: 24)
 */
export interface KSPROPERTY_VIDEOPROCAMP_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_VIDEOPROCAMP_S = 24;

export function allocKSPROPERTY_VIDEOPROCAMP_S(data?: Partial<KSPROPERTY_VIDEOPROCAMP_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOPROCAMP_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOPROCAMP_NODE_S (size: 24)
 */
export interface KSPROPERTY_VIDEOPROCAMP_NODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_VIDEOPROCAMP_NODE_S = 24;

export function allocKSPROPERTY_VIDEOPROCAMP_NODE_S(data?: Partial<KSPROPERTY_VIDEOPROCAMP_NODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOPROCAMP_NODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOPROCAMP_S2 (size: 24)
 */
export interface KSPROPERTY_VIDEOPROCAMP_S2 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value1: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
  /** i32 */
  Value2: number;
}

export const sizeofKSPROPERTY_VIDEOPROCAMP_S2 = 24;

export function allocKSPROPERTY_VIDEOPROCAMP_S2(data?: Partial<KSPROPERTY_VIDEOPROCAMP_S2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOPROCAMP_S2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value1 !== undefined) view.setInt32(8, Number(data.Value1), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: i32
  if (data?.Value2 !== undefined) view.setInt32(20, Number(data.Value2), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOPROCAMP_NODE_S2 (size: 24)
 */
export interface KSPROPERTY_VIDEOPROCAMP_NODE_S2 {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value1: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
  /** i32 */
  Value2: number;
}

export const sizeofKSPROPERTY_VIDEOPROCAMP_NODE_S2 = 24;

export function allocKSPROPERTY_VIDEOPROCAMP_NODE_S2(data?: Partial<KSPROPERTY_VIDEOPROCAMP_NODE_S2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOPROCAMP_NODE_S2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Value1 !== undefined) view.setInt32(8, Number(data.Value1), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: i32
  if (data?.Value2 !== undefined) view.setInt32(20, Number(data.Value2), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SELECTOR_S (size: 24)
 */
export interface KSPROPERTY_SELECTOR_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_SELECTOR_S = 24;

export function allocKSPROPERTY_SELECTOR_S(data?: Partial<KSPROPERTY_SELECTOR_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SELECTOR_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SELECTOR_NODE_S (size: 24)
 */
export interface KSPROPERTY_SELECTOR_NODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_SELECTOR_NODE_S = 24;

export function allocKSPROPERTY_SELECTOR_NODE_S(data?: Partial<KSPROPERTY_SELECTOR_NODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SELECTOR_NODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_CAPS_S (size: 40)
 */
export interface KSPROPERTY_TUNER_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ModesSupported: number;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  VideoMedium: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  TVAudioMedium: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  RadioAudioMedium: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_TUNER_CAPS_S = 40;

export function allocKSPROPERTY_TUNER_CAPS_S(data?: Partial<KSPROPERTY_TUNER_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.ModesSupported !== undefined) view.setUint32(8, Number(data.ModesSupported), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.VideoMedium !== undefined) view.setBigUint64(16, data.VideoMedium === null ? 0n : BigInt(util.toPointer(data.VideoMedium)), true);
  // 0x18: pointer
  if (data?.TVAudioMedium !== undefined) view.setBigUint64(24, data.TVAudioMedium === null ? 0n : BigInt(util.toPointer(data.TVAudioMedium)), true);
  // 0x20: pointer
  if (data?.RadioAudioMedium !== undefined) view.setBigUint64(32, data.RadioAudioMedium === null ? 0n : BigInt(util.toPointer(data.RadioAudioMedium)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_IF_MEDIUM_S (size: 16)
 */
export interface KSPROPERTY_TUNER_IF_MEDIUM_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  IFMedium: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_TUNER_IF_MEDIUM_S = 16;

export function allocKSPROPERTY_TUNER_IF_MEDIUM_S(data?: Partial<KSPROPERTY_TUNER_IF_MEDIUM_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_IF_MEDIUM_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.IFMedium !== undefined) view.setBigUint64(8, data.IFMedium === null ? 0n : BigInt(util.toPointer(data.IFMedium)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_MODE_CAPS_S (size: 40)
 */
export interface KSPROPERTY_TUNER_MODE_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mode: number;
  /** u32 */
  StandardsSupported: number;
  /** u32 */
  MinFrequency: number;
  /** u32 */
  MaxFrequency: number;
  /** u32 */
  TuningGranularity: number;
  /** u32 */
  NumberOfInputs: number;
  /** u32 */
  SettlingTime: number;
  /** u32 */
  Strategy: number;
}

export const sizeofKSPROPERTY_TUNER_MODE_CAPS_S = 40;

export function allocKSPROPERTY_TUNER_MODE_CAPS_S(data?: Partial<KSPROPERTY_TUNER_MODE_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_MODE_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Mode !== undefined) view.setUint32(8, Number(data.Mode), true);
  // 0x0c: u32
  if (data?.StandardsSupported !== undefined) view.setUint32(12, Number(data.StandardsSupported), true);
  // 0x10: u32
  if (data?.MinFrequency !== undefined) view.setUint32(16, Number(data.MinFrequency), true);
  // 0x14: u32
  if (data?.MaxFrequency !== undefined) view.setUint32(20, Number(data.MaxFrequency), true);
  // 0x18: u32
  if (data?.TuningGranularity !== undefined) view.setUint32(24, Number(data.TuningGranularity), true);
  // 0x1c: u32
  if (data?.NumberOfInputs !== undefined) view.setUint32(28, Number(data.NumberOfInputs), true);
  // 0x20: u32
  if (data?.SettlingTime !== undefined) view.setUint32(32, Number(data.SettlingTime), true);
  // 0x24: u32
  if (data?.Strategy !== undefined) view.setUint32(36, Number(data.Strategy), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_MODE_S (size: 16)
 */
export interface KSPROPERTY_TUNER_MODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mode: number;
}

export const sizeofKSPROPERTY_TUNER_MODE_S = 16;

export function allocKSPROPERTY_TUNER_MODE_S(data?: Partial<KSPROPERTY_TUNER_MODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_MODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Mode !== undefined) view.setUint32(8, Number(data.Mode), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_FREQUENCY_S (size: 40)
 */
export interface KSPROPERTY_TUNER_FREQUENCY_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Frequency: number;
  /** u32 */
  LastFrequency: number;
  /** u32 */
  TuningFlags: number;
  /** u32 */
  VideoSubChannel: number;
  /** u32 */
  AudioSubChannel: number;
  /** u32 */
  Channel: number;
  /** u32 */
  Country: number;
}

export const sizeofKSPROPERTY_TUNER_FREQUENCY_S = 40;

export function allocKSPROPERTY_TUNER_FREQUENCY_S(data?: Partial<KSPROPERTY_TUNER_FREQUENCY_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_FREQUENCY_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Frequency !== undefined) view.setUint32(8, Number(data.Frequency), true);
  // 0x0c: u32
  if (data?.LastFrequency !== undefined) view.setUint32(12, Number(data.LastFrequency), true);
  // 0x10: u32
  if (data?.TuningFlags !== undefined) view.setUint32(16, Number(data.TuningFlags), true);
  // 0x14: u32
  if (data?.VideoSubChannel !== undefined) view.setUint32(20, Number(data.VideoSubChannel), true);
  // 0x18: u32
  if (data?.AudioSubChannel !== undefined) view.setUint32(24, Number(data.AudioSubChannel), true);
  // 0x1c: u32
  if (data?.Channel !== undefined) view.setUint32(28, Number(data.Channel), true);
  // 0x20: u32
  if (data?.Country !== undefined) view.setUint32(32, Number(data.Country), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_STANDARD_S (size: 16)
 */
export interface KSPROPERTY_TUNER_STANDARD_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Standard: number;
}

export const sizeofKSPROPERTY_TUNER_STANDARD_S = 16;

export function allocKSPROPERTY_TUNER_STANDARD_S(data?: Partial<KSPROPERTY_TUNER_STANDARD_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_STANDARD_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Standard !== undefined) view.setUint32(8, Number(data.Standard), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_STANDARD_MODE_S (size: 16)
 */
export interface KSPROPERTY_TUNER_STANDARD_MODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AutoDetect: boolean;
}

export const sizeofKSPROPERTY_TUNER_STANDARD_MODE_S = 16;

export function allocKSPROPERTY_TUNER_STANDARD_MODE_S(data?: Partial<KSPROPERTY_TUNER_STANDARD_MODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_STANDARD_MODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.AutoDetect !== undefined) view.setInt32(8, Number(data.AutoDetect), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_INPUT_S (size: 16)
 */
export interface KSPROPERTY_TUNER_INPUT_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InputIndex: number;
}

export const sizeofKSPROPERTY_TUNER_INPUT_S = 16;

export function allocKSPROPERTY_TUNER_INPUT_S(data?: Partial<KSPROPERTY_TUNER_INPUT_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_INPUT_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.InputIndex !== undefined) view.setUint32(8, Number(data.InputIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_STATUS_S (size: 24)
 */
export interface KSPROPERTY_TUNER_STATUS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CurrentFrequency: number;
  /** u32 */
  PLLOffset: number;
  /** u32 */
  SignalStrength: number;
  /** u32 */
  Busy: number;
}

export const sizeofKSPROPERTY_TUNER_STATUS_S = 24;

export function allocKSPROPERTY_TUNER_STATUS_S(data?: Partial<KSPROPERTY_TUNER_STATUS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_STATUS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.CurrentFrequency !== undefined) view.setUint32(8, Number(data.CurrentFrequency), true);
  // 0x0c: u32
  if (data?.PLLOffset !== undefined) view.setUint32(12, Number(data.PLLOffset), true);
  // 0x10: u32
  if (data?.SignalStrength !== undefined) view.setUint32(16, Number(data.SignalStrength), true);
  // 0x14: u32
  if (data?.Busy !== undefined) view.setUint32(20, Number(data.Busy), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TUNER_ANALOG_CAPS_S (size: 32)
 */
export interface TUNER_ANALOG_CAPS_S {
  /** u32 */
  Mode: number;
  /** u32 */
  StandardsSupported: number;
  /** u32 */
  MinFrequency: number;
  /** u32 */
  MaxFrequency: number;
  /** u32 */
  TuningGranularity: number;
  /** u32 */
  SettlingTime: number;
  /** u32 */
  ScanSensingRange: number;
  /** u32 */
  FineTuneSensingRange: number;
}

export const sizeofTUNER_ANALOG_CAPS_S = 32;

export function allocTUNER_ANALOG_CAPS_S(data?: Partial<TUNER_ANALOG_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofTUNER_ANALOG_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Mode !== undefined) view.setUint32(0, Number(data.Mode), true);
  // 0x04: u32
  if (data?.StandardsSupported !== undefined) view.setUint32(4, Number(data.StandardsSupported), true);
  // 0x08: u32
  if (data?.MinFrequency !== undefined) view.setUint32(8, Number(data.MinFrequency), true);
  // 0x0c: u32
  if (data?.MaxFrequency !== undefined) view.setUint32(12, Number(data.MaxFrequency), true);
  // 0x10: u32
  if (data?.TuningGranularity !== undefined) view.setUint32(16, Number(data.TuningGranularity), true);
  // 0x14: u32
  if (data?.SettlingTime !== undefined) view.setUint32(20, Number(data.SettlingTime), true);
  // 0x18: u32
  if (data?.ScanSensingRange !== undefined) view.setUint32(24, Number(data.ScanSensingRange), true);
  // 0x1c: u32
  if (data?.FineTuneSensingRange !== undefined) view.setUint32(28, Number(data.FineTuneSensingRange), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_SCAN_CAPS_S (size: 32)
 */
export interface KSPROPERTY_TUNER_SCAN_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSupportsHardwareAssistedScanning: boolean;
  /** u32 */
  SupportedBroadcastStandards: number;
  /** ptr */
  GUIDBucket: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  lengthofBucket: number;
}

export const sizeofKSPROPERTY_TUNER_SCAN_CAPS_S = 32;

export function allocKSPROPERTY_TUNER_SCAN_CAPS_S(data?: Partial<KSPROPERTY_TUNER_SCAN_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_SCAN_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.fSupportsHardwareAssistedScanning !== undefined) view.setInt32(8, Number(data.fSupportsHardwareAssistedScanning), true);
  // 0x0c: u32
  if (data?.SupportedBroadcastStandards !== undefined) view.setUint32(12, Number(data.SupportedBroadcastStandards), true);
  // 0x10: pointer
  if (data?.GUIDBucket !== undefined) view.setBigUint64(16, data.GUIDBucket === null ? 0n : BigInt(util.toPointer(data.GUIDBucket)), true);
  // 0x18: u32
  if (data?.lengthofBucket !== undefined) view.setUint32(24, Number(data.lengthofBucket), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S (size: 32)
 */
export interface KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NetworkType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BufferSize: number;
  /** ptr */
  NetworkTunerCapabilities: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S = 32;

export function allocKSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S(data?: Partial<KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.NetworkType !== undefined) view.setBigUint64(8, data.NetworkType === null ? 0n : BigInt(util.toPointer(data.NetworkType)), true);
  // 0x10: u32
  if (data?.BufferSize !== undefined) view.setUint32(16, Number(data.BufferSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.NetworkTunerCapabilities !== undefined) view.setBigUint64(24, data.NetworkTunerCapabilities === null ? 0n : BigInt(util.toPointer(data.NetworkTunerCapabilities)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_SCAN_STATUS_S (size: 16)
 */
export interface KSPROPERTY_TUNER_SCAN_STATUS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.TunerLockType */
  LockStatus: TunerLockType;
  /** u32 */
  CurrentFrequency: number;
}

export const sizeofKSPROPERTY_TUNER_SCAN_STATUS_S = 16;

export function allocKSPROPERTY_TUNER_SCAN_STATUS_S(data?: Partial<KSPROPERTY_TUNER_SCAN_STATUS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_SCAN_STATUS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.LockStatus !== undefined) view.setInt32(8, Number(data.LockStatus), true);
  // 0x0c: u32
  if (data?.CurrentFrequency !== undefined) view.setUint32(12, Number(data.CurrentFrequency), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSEVENT_TUNER_INITIATE_SCAN_S (size: 16)
 */
export interface KSEVENT_TUNER_INITIATE_SCAN_S {
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  EventData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StartFrequency: number;
  /** u32 */
  EndFrequency: number;
}

export const sizeofKSEVENT_TUNER_INITIATE_SCAN_S = 16;

export function allocKSEVENT_TUNER_INITIATE_SCAN_S(data?: Partial<KSEVENT_TUNER_INITIATE_SCAN_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEVENT_TUNER_INITIATE_SCAN_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EventData !== undefined) view.setBigUint64(0, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  // 0x08: u32
  if (data?.StartFrequency !== undefined) view.setUint32(8, Number(data.StartFrequency), true);
  // 0x0c: u32
  if (data?.EndFrequency !== undefined) view.setUint32(12, Number(data.EndFrequency), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOENCODER_S (size: 24)
 */
export interface KSPROPERTY_VIDEOENCODER_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_VIDEOENCODER_S = 24;

export function allocKSPROPERTY_VIDEOENCODER_S(data?: Partial<KSPROPERTY_VIDEOENCODER_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOENCODER_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEODECODER_CAPS_S (size: 24)
 */
export interface KSPROPERTY_VIDEODECODER_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StandardsSupported: number;
  /** u32 */
  Capabilities: number;
  /** u32 */
  SettlingTime: number;
  /** u32 */
  HSyncPerVSync: number;
}

export const sizeofKSPROPERTY_VIDEODECODER_CAPS_S = 24;

export function allocKSPROPERTY_VIDEODECODER_CAPS_S(data?: Partial<KSPROPERTY_VIDEODECODER_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEODECODER_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StandardsSupported !== undefined) view.setUint32(8, Number(data.StandardsSupported), true);
  // 0x0c: u32
  if (data?.Capabilities !== undefined) view.setUint32(12, Number(data.Capabilities), true);
  // 0x10: u32
  if (data?.SettlingTime !== undefined) view.setUint32(16, Number(data.SettlingTime), true);
  // 0x14: u32
  if (data?.HSyncPerVSync !== undefined) view.setUint32(20, Number(data.HSyncPerVSync), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEODECODER_STATUS_S (size: 16)
 */
export interface KSPROPERTY_VIDEODECODER_STATUS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfLines: number;
  /** u32 */
  SignalLocked: number;
}

export const sizeofKSPROPERTY_VIDEODECODER_STATUS_S = 16;

export function allocKSPROPERTY_VIDEODECODER_STATUS_S(data?: Partial<KSPROPERTY_VIDEODECODER_STATUS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEODECODER_STATUS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NumberOfLines !== undefined) view.setUint32(8, Number(data.NumberOfLines), true);
  // 0x0c: u32
  if (data?.SignalLocked !== undefined) view.setUint32(12, Number(data.SignalLocked), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEODECODER_STATUS2_S (size: 24)
 */
export interface KSPROPERTY_VIDEODECODER_STATUS2_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfLines: number;
  /** u32 */
  SignalLocked: number;
  /** u32 */
  ChromaLock: number;
}

export const sizeofKSPROPERTY_VIDEODECODER_STATUS2_S = 24;

export function allocKSPROPERTY_VIDEODECODER_STATUS2_S(data?: Partial<KSPROPERTY_VIDEODECODER_STATUS2_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEODECODER_STATUS2_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NumberOfLines !== undefined) view.setUint32(8, Number(data.NumberOfLines), true);
  // 0x0c: u32
  if (data?.SignalLocked !== undefined) view.setUint32(12, Number(data.SignalLocked), true);
  // 0x10: u32
  if (data?.ChromaLock !== undefined) view.setUint32(16, Number(data.ChromaLock), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEODECODER_S (size: 16)
 */
export interface KSPROPERTY_VIDEODECODER_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Value: number;
}

export const sizeofKSPROPERTY_VIDEODECODER_S = 16;

export function allocKSPROPERTY_VIDEODECODER_S(data?: Partial<KSPROPERTY_VIDEODECODER_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEODECODER_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Value !== undefined) view.setUint32(8, Number(data.Value), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_S_EX (size: 32)
 */
export interface KSPROPERTY_CAMERACONTROL_S_EX {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
  /** Windows.Win32.Foundation.RECT */
  FocusRect: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_CAMERACONTROL_S_EX = 32;

export function allocKSPROPERTY_CAMERACONTROL_S_EX(data?: Partial<KSPROPERTY_CAMERACONTROL_S_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_S_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.FocusRect !== undefined) view.setBigUint64(24, data.FocusRect === null ? 0n : BigInt(util.toPointer(data.FocusRect)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_S (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_S = 24;

export function allocKSPROPERTY_CAMERACONTROL_S(data?: Partial<KSPROPERTY_CAMERACONTROL_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_NODE_S (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_NODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_NODE_S = 24;

export function allocKSPROPERTY_CAMERACONTROL_NODE_S(data?: Partial<KSPROPERTY_CAMERACONTROL_NODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_NODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_S2 (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_S2 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value1: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
  /** i32 */
  Value2: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_S2 = 24;

export function allocKSPROPERTY_CAMERACONTROL_S2(data?: Partial<KSPROPERTY_CAMERACONTROL_S2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_S2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value1 !== undefined) view.setInt32(8, Number(data.Value1), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: i32
  if (data?.Value2 !== undefined) view.setInt32(20, Number(data.Value2), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_NODE_S2 (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_NODE_S2 {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value1: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
  /** i32 */
  Value2: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_NODE_S2 = 24;

export function allocKSPROPERTY_CAMERACONTROL_NODE_S2(data?: Partial<KSPROPERTY_CAMERACONTROL_NODE_S2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_NODE_S2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Value1 !== undefined) view.setInt32(8, Number(data.Value1), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: i32
  if (data?.Value2 !== undefined) view.setInt32(20, Number(data.Value2), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lOcularFocalLength: number;
  /** i32 */
  lObjectiveFocalLengthMin: number;
  /** i32 */
  lObjectiveFocalLengthMax: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S = 24;

export function allocKSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S(data?: Partial<KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.lOcularFocalLength !== undefined) view.setInt32(8, Number(data.lOcularFocalLength), true);
  // 0x0c: i32
  if (data?.lObjectiveFocalLengthMin !== undefined) view.setInt32(12, Number(data.lObjectiveFocalLengthMin), true);
  // 0x10: i32
  if (data?.lObjectiveFocalLengthMax !== undefined) view.setInt32(16, Number(data.lObjectiveFocalLengthMax), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S {
  /** Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lOcularFocalLength: number;
  /** i32 */
  lObjectiveFocalLengthMin: number;
  /** i32 */
  lObjectiveFocalLengthMax: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S = 24;

export function allocKSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S(data?: Partial<KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.lOcularFocalLength !== undefined) view.setInt32(8, Number(data.lOcularFocalLength), true);
  // 0x0c: i32
  if (data?.lObjectiveFocalLengthMin !== undefined) view.setInt32(12, Number(data.lObjectiveFocalLengthMin), true);
  // 0x10: i32
  if (data?.lObjectiveFocalLengthMax !== undefined) view.setInt32(16, Number(data.lObjectiveFocalLengthMax), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_FLASH_S (size: 8)
 */
export interface KSPROPERTY_CAMERACONTROL_FLASH_S {
  /** u32 */
  Flash: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_FLASH_S = 8;

export function allocKSPROPERTY_CAMERACONTROL_FLASH_S(data?: Partial<KSPROPERTY_CAMERACONTROL_FLASH_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_FLASH_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flash !== undefined) view.setUint32(0, Number(data.Flash), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S (size: 8)
 */
export interface KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S {
  /** u32 */
  VideoStabilizationMode: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S = 8;

export function allocKSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S(data?: Partial<KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VideoStabilizationMode !== undefined) view.setUint32(0, Number(data.VideoStabilizationMode), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S (size: 32)
 */
export interface KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S {
  /** Windows.Win32.Foundation.RECT */
  FocusRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AutoFocusLock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AutoExposureLock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AutoWhitebalanceLock: boolean;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S = 32;

export function allocKSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S(data?: Partial<KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FocusRect !== undefined) view.setBigUint64(0, data.FocusRect === null ? 0n : BigInt(util.toPointer(data.FocusRect)), true);
  // 0x08: i32
  if (data?.AutoFocusLock !== undefined) view.setInt32(8, Number(data.AutoFocusLock), true);
  // 0x0c: i32
  if (data?.AutoExposureLock !== undefined) view.setInt32(12, Number(data.AutoExposureLock), true);
  // 0x10: i32
  if (data?.AutoWhitebalanceLock !== undefined) view.setInt32(16, Number(data.AutoWhitebalanceLock), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S (size: 8)
 */
export interface KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S {
  /** u32 */
  Capabilities: number;
  /** u32 */
  Reserved0: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S = 8;

export function allocKSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S(data?: Partial<KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Capabilities !== undefined) view.setUint32(0, Number(data.Capabilities), true);
  // 0x04: u32
  if (data?.Reserved0 !== undefined) view.setUint32(4, Number(data.Reserved0), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_HEADER (size: 32)
 */
export interface KSCAMERA_EXTENDEDPROP_HEADER {
  /** u32 */
  Version: number;
  /** u32 */
  PinId: number;
  /** u32 */
  Size: number;
  /** u32 */
  Result: number;
  /** u64 */
  Flags: Deno.PointerValue;
  /** u64 */
  Capability: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_HEADER = 32;

export function allocKSCAMERA_EXTENDEDPROP_HEADER(data?: Partial<KSCAMERA_EXTENDEDPROP_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.PinId !== undefined) view.setUint32(4, Number(data.PinId), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: u32
  if (data?.Result !== undefined) view.setUint32(12, Number(data.Result), true);
  // 0x10: u64
  if (data?.Flags !== undefined) view.setBigUint64(16, BigInt(data.Flags), true);
  // 0x18: u64
  if (data?.Capability !== undefined) view.setBigUint64(24, BigInt(data.Capability), true);
  return buf;
}

/**
 * _Value_e__Union (size: 16)
 */
export interface _Value_e__Union {
  /** u16 */
  ShortUuid: number;
  /** System.Guid */
  LongUuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Value_e__Union = 16;

export function alloc_Value_e__Union(data?: Partial<_Value_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Value_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ShortUuid !== undefined) view.setUint16(0, Number(data.ShortUuid), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.LongUuid !== undefined) view.setBigUint64(8, data.LongUuid === null ? 0n : BigInt(util.toPointer(data.LongUuid)), true);
  return buf;
}

export type KSCAMERA_EXTENDEDPROP_VALUE = Uint8Array | Deno.PointerValue | null;

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_MAXVIDEOFPS_FORPHOTORES (size: 24)
 */
export interface KSCAMERA_MAXVIDEOFPS_FORPHOTORES {
  /** u32 */
  PhotoResWidth: number;
  /** u32 */
  PhotoResHeight: number;
  /** u32 */
  PreviewFPSNum: number;
  /** u32 */
  PreviewFPSDenom: number;
  /** u32 */
  CaptureFPSNum: number;
  /** u32 */
  CaptureFPSDenom: number;
}

export const sizeofKSCAMERA_MAXVIDEOFPS_FORPHOTORES = 24;

export function allocKSCAMERA_MAXVIDEOFPS_FORPHOTORES(data?: Partial<KSCAMERA_MAXVIDEOFPS_FORPHOTORES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_MAXVIDEOFPS_FORPHOTORES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PhotoResWidth !== undefined) view.setUint32(0, Number(data.PhotoResWidth), true);
  // 0x04: u32
  if (data?.PhotoResHeight !== undefined) view.setUint32(4, Number(data.PhotoResHeight), true);
  // 0x08: u32
  if (data?.PreviewFPSNum !== undefined) view.setUint32(8, Number(data.PreviewFPSNum), true);
  // 0x0c: u32
  if (data?.PreviewFPSDenom !== undefined) view.setUint32(12, Number(data.PreviewFPSDenom), true);
  // 0x10: u32
  if (data?.CaptureFPSNum !== undefined) view.setUint32(16, Number(data.CaptureFPSNum), true);
  // 0x14: u32
  if (data?.CaptureFPSDenom !== undefined) view.setUint32(20, Number(data.CaptureFPSDenom), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_PHOTOMODE (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_PHOTOMODE {
  /** u32 */
  RequestedHistoryFrames: number;
  /** u32 */
  MaxHistoryFrames: number;
  /** u32 */
  SubMode: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_PHOTOMODE = 16;

export function allocKSCAMERA_EXTENDEDPROP_PHOTOMODE(data?: Partial<KSCAMERA_EXTENDEDPROP_PHOTOMODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_PHOTOMODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RequestedHistoryFrames !== undefined) view.setUint32(0, Number(data.RequestedHistoryFrames), true);
  // 0x04: u32
  if (data?.MaxHistoryFrames !== undefined) view.setUint32(4, Number(data.MaxHistoryFrames), true);
  // 0x08: u32
  if (data?.SubMode !== undefined) view.setUint32(8, Number(data.SubMode), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING (size: 32)
 */
export interface KSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING {
  /** u32 */
  Mode: number;
  /** i32 */
  Min: number;
  /** i32 */
  Max: number;
  /** i32 */
  Step: number;
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_VALUE */
  VideoProc: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING = 32;

export function allocKSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING(data?: Partial<KSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Mode !== undefined) view.setUint32(0, Number(data.Mode), true);
  // 0x04: i32
  if (data?.Min !== undefined) view.setInt32(4, Number(data.Min), true);
  // 0x08: i32
  if (data?.Max !== undefined) view.setInt32(8, Number(data.Max), true);
  // 0x0c: i32
  if (data?.Step !== undefined) view.setInt32(12, Number(data.Step), true);
  // 0x10: pointer
  if (data?.VideoProc !== undefined) view.setBigUint64(16, data.VideoProc === null ? 0n : BigInt(util.toPointer(data.VideoProc)), true);
  // 0x18: u64
  if (data?.Reserved !== undefined) view.setBigUint64(24, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_EVCOMPENSATION (size: 24)
 */
export interface KSCAMERA_EXTENDEDPROP_EVCOMPENSATION {
  /** u32 */
  Mode: number;
  /** i32 */
  Min: number;
  /** i32 */
  Max: number;
  /** i32 */
  Value: number;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_EVCOMPENSATION = 24;

export function allocKSCAMERA_EXTENDEDPROP_EVCOMPENSATION(data?: Partial<KSCAMERA_EXTENDEDPROP_EVCOMPENSATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_EVCOMPENSATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Mode !== undefined) view.setUint32(0, Number(data.Mode), true);
  // 0x04: i32
  if (data?.Min !== undefined) view.setInt32(4, Number(data.Min), true);
  // 0x08: i32
  if (data?.Max !== undefined) view.setInt32(8, Number(data.Max), true);
  // 0x0c: i32
  if (data?.Value !== undefined) view.setInt32(12, Number(data.Value), true);
  // 0x10: u64
  if (data?.Reserved !== undefined) view.setBigUint64(16, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_FIELDOFVIEW (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_FIELDOFVIEW {
  /** u32 */
  NormalizedFocalLengthX: number;
  /** u32 */
  NormalizedFocalLengthY: number;
  /** u32 */
  Flag: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_FIELDOFVIEW = 16;

export function allocKSCAMERA_EXTENDEDPROP_FIELDOFVIEW(data?: Partial<KSCAMERA_EXTENDEDPROP_FIELDOFVIEW>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_FIELDOFVIEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NormalizedFocalLengthX !== undefined) view.setUint32(0, Number(data.NormalizedFocalLengthX), true);
  // 0x04: u32
  if (data?.NormalizedFocalLengthY !== undefined) view.setUint32(4, Number(data.NormalizedFocalLengthY), true);
  // 0x08: u32
  if (data?.Flag !== undefined) view.setUint32(8, Number(data.Flag), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_CAMERAOFFSET (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_CAMERAOFFSET {
  /** i32 */
  PitchAngle: number;
  /** i32 */
  YawAngle: number;
  /** u32 */
  Flag: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_CAMERAOFFSET = 16;

export function allocKSCAMERA_EXTENDEDPROP_CAMERAOFFSET(data?: Partial<KSCAMERA_EXTENDEDPROP_CAMERAOFFSET>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_CAMERAOFFSET);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PitchAngle !== undefined) view.setInt32(0, Number(data.PitchAngle), true);
  // 0x04: i32
  if (data?.YawAngle !== undefined) view.setInt32(4, Number(data.YawAngle), true);
  // 0x08: u32
  if (data?.Flag !== undefined) view.setUint32(8, Number(data.Flag), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_METADATAINFO (size: 8)
 */
export interface KSCAMERA_EXTENDEDPROP_METADATAINFO {
  /** i32 */
  BufferAlignment: number;
  /** u32 */
  MaxMetadataBufferSize: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_METADATAINFO = 8;

export function allocKSCAMERA_EXTENDEDPROP_METADATAINFO(data?: Partial<KSCAMERA_EXTENDEDPROP_METADATAINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_METADATAINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BufferAlignment !== undefined) view.setInt32(0, Number(data.BufferAlignment), true);
  // 0x04: u32
  if (data?.MaxMetadataBufferSize !== undefined) view.setUint32(4, Number(data.MaxMetadataBufferSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER (size: 8)
 */
export interface KSCAMERA_METADATA_ITEMHEADER {
  /** u32 */
  MetadataId: number;
  /** u32 */
  Size: number;
}

export const sizeofKSCAMERA_METADATA_ITEMHEADER = 8;

export function allocKSCAMERA_METADATA_ITEMHEADER(data?: Partial<KSCAMERA_METADATA_ITEMHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_ITEMHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MetadataId !== undefined) view.setUint32(0, Number(data.MetadataId), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_PHOTOCONFIRMATION (size: 16)
 */
export interface KSCAMERA_METADATA_PHOTOCONFIRMATION {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PhotoConfirmationIndex: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_METADATA_PHOTOCONFIRMATION = 16;

export function allocKSCAMERA_METADATA_PHOTOCONFIRMATION(data?: Partial<KSCAMERA_METADATA_PHOTOCONFIRMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_PHOTOCONFIRMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.PhotoConfirmationIndex !== undefined) view.setUint32(8, Number(data.PhotoConfirmationIndex), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_FRAMEILLUMINATION (size: 16)
 */
export interface KSCAMERA_METADATA_FRAMEILLUMINATION {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_METADATA_FRAMEILLUMINATION = 16;

export function allocKSCAMERA_METADATA_FRAMEILLUMINATION(data?: Partial<KSCAMERA_METADATA_FRAMEILLUMINATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_FRAMEILLUMINATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_CAPTURESTATS (size: 80)
 */
export interface KSCAMERA_METADATA_CAPTURESTATS {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
  /** u64 */
  ExposureTime: Deno.PointerValue;
  /** u64 */
  ExposureCompensationFlags: Deno.PointerValue;
  /** i32 */
  ExposureCompensationValue: number;
  /** u32 */
  IsoSpeed: number;
  /** u32 */
  FocusState: number;
  /** u32 */
  LensPosition: number;
  /** u32 */
  WhiteBalance: number;
  /** u32 */
  Flash: number;
  /** u32 */
  FlashPower: number;
  /** u32 */
  ZoomFactor: number;
  /** u64 */
  SceneMode: Deno.PointerValue;
  /** u64 */
  SensorFramerate: Deno.PointerValue;
}

export const sizeofKSCAMERA_METADATA_CAPTURESTATS = 80;

export function allocKSCAMERA_METADATA_CAPTURESTATS(data?: Partial<KSCAMERA_METADATA_CAPTURESTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_CAPTURESTATS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: u64
  if (data?.ExposureTime !== undefined) view.setBigUint64(16, BigInt(data.ExposureTime), true);
  // 0x18: u64
  if (data?.ExposureCompensationFlags !== undefined) view.setBigUint64(24, BigInt(data.ExposureCompensationFlags), true);
  // 0x20: i32
  if (data?.ExposureCompensationValue !== undefined) view.setInt32(32, Number(data.ExposureCompensationValue), true);
  // 0x24: u32
  if (data?.IsoSpeed !== undefined) view.setUint32(36, Number(data.IsoSpeed), true);
  // 0x28: u32
  if (data?.FocusState !== undefined) view.setUint32(40, Number(data.FocusState), true);
  // 0x2c: u32
  if (data?.LensPosition !== undefined) view.setUint32(44, Number(data.LensPosition), true);
  // 0x30: u32
  if (data?.WhiteBalance !== undefined) view.setUint32(48, Number(data.WhiteBalance), true);
  // 0x34: u32
  if (data?.Flash !== undefined) view.setUint32(52, Number(data.Flash), true);
  // 0x38: u32
  if (data?.FlashPower !== undefined) view.setUint32(56, Number(data.FlashPower), true);
  // 0x3c: u32
  if (data?.ZoomFactor !== undefined) view.setUint32(60, Number(data.ZoomFactor), true);
  // 0x40: u64
  if (data?.SceneMode !== undefined) view.setBigUint64(64, BigInt(data.SceneMode), true);
  // 0x48: u64
  if (data?.SensorFramerate !== undefined) view.setBigUint64(72, BigInt(data.SensorFramerate), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER {
  /** u32 */
  Size: number;
  /** u32 */
  ConfigCapCount: number;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.ConfigCapCount !== undefined) view.setUint32(4, Number(data.ConfigCapCount), true);
  // 0x08: u64
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS {
  /** u32 */
  ControlId: number;
  /** u32 */
  MaxNumberOfROIs: number;
  /** u64 */
  Capability: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ControlId !== undefined) view.setUint32(0, Number(data.ControlId), true);
  // 0x04: u32
  if (data?.MaxNumberOfROIs !== undefined) view.setUint32(4, Number(data.MaxNumberOfROIs), true);
  // 0x08: u64
  if (data?.Capability !== undefined) view.setBigUint64(8, BigInt(data.Capability), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER {
  /** u32 */
  Size: number;
  /** u32 */
  ControlCount: number;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.ControlCount !== undefined) view.setUint32(4, Number(data.ControlCount), true);
  // 0x08: u64
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL {
  /** u32 */
  ControlId: number;
  /** u32 */
  ROICount: number;
  /** u32 */
  Result: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ControlId !== undefined) view.setUint32(0, Number(data.ControlId), true);
  // 0x04: u32
  if (data?.ROICount !== undefined) view.setUint32(4, Number(data.ROICount), true);
  // 0x08: u32
  if (data?.Result !== undefined) view.setUint32(8, Number(data.Result), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_INFO (size: 24)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_INFO {
  /** Windows.Win32.Foundation.RECT */
  Region: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Flags: Deno.PointerValue;
  /** i32 */
  Weight: number;
  /** i32 */
  RegionOfInterestType: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_INFO = 24;

export function allocKSCAMERA_EXTENDEDPROP_ROI_INFO(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Region !== undefined) view.setBigUint64(0, data.Region === null ? 0n : BigInt(util.toPointer(data.Region)), true);
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  // 0x10: i32
  if (data?.Weight !== undefined) view.setInt32(16, Number(data.Weight), true);
  // 0x14: i32
  if (data?.RegionOfInterestType !== undefined) view.setInt32(20, Number(data.RegionOfInterestType), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_INFO */
  ROIInfo: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ROIInfo !== undefined) view.setBigUint64(0, data.ROIInfo === null ? 0n : BigInt(util.toPointer(data.ROIInfo)), true);
  // 0x08: u64
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_EXPOSURE (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_EXPOSURE {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_INFO */
  ROIInfo: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_EXPOSURE = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_EXPOSURE(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_EXPOSURE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_EXPOSURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ROIInfo !== undefined) view.setBigUint64(0, data.ROIInfo === null ? 0n : BigInt(util.toPointer(data.ROIInfo)), true);
  // 0x08: u64
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_FOCUS (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_FOCUS {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_INFO */
  ROIInfo: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_FOCUS = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_FOCUS(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_FOCUS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_FOCUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ROIInfo !== undefined) view.setBigUint64(0, data.ROIInfo === null ? 0n : BigInt(util.toPointer(data.ROIInfo)), true);
  // 0x08: u64
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER (size: 16)
 */
export interface KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  Type: number;
  /** u64 */
  Flags: Deno.PointerValue;
}

export const sizeofKSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER = 16;

export function allocKSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER(data?: Partial<KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_CAP_HEADER (size: 16)
 */
export interface KSCAMERA_PERFRAMESETTING_CAP_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  ItemCount: number;
  /** u64 */
  Flags: Deno.PointerValue;
}

export const sizeofKSCAMERA_PERFRAMESETTING_CAP_HEADER = 16;

export function allocKSCAMERA_PERFRAMESETTING_CAP_HEADER(data?: Partial<KSCAMERA_PERFRAMESETTING_CAP_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_CAP_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.ItemCount !== undefined) view.setUint32(4, Number(data.ItemCount), true);
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM (size: 16)
 */
export interface KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM {
  /** u32 */
  Size: number;
  /** u32 */
  Reserved: number;
  /** System.Guid */
  Id: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSCAMERA_PERFRAMESETTING_CUSTOM_ITEM = 16;

export function allocKSCAMERA_PERFRAMESETTING_CUSTOM_ITEM(data?: Partial<KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_CUSTOM_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.Id !== undefined) view.setBigUint64(8, data.Id === null ? 0n : BigInt(util.toPointer(data.Id)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_ITEM_HEADER (size: 16)
 */
export interface KSCAMERA_PERFRAMESETTING_ITEM_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  Type: number;
  /** u64 */
  Flags: Deno.PointerValue;
}

export const sizeofKSCAMERA_PERFRAMESETTING_ITEM_HEADER = 16;

export function allocKSCAMERA_PERFRAMESETTING_ITEM_HEADER(data?: Partial<KSCAMERA_PERFRAMESETTING_ITEM_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_ITEM_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_FRAME_HEADER (size: 16)
 */
export interface KSCAMERA_PERFRAMESETTING_FRAME_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  Id: number;
  /** u32 */
  ItemCount: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_PERFRAMESETTING_FRAME_HEADER = 16;

export function allocKSCAMERA_PERFRAMESETTING_FRAME_HEADER(data?: Partial<KSCAMERA_PERFRAMESETTING_FRAME_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_FRAME_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Id !== undefined) view.setUint32(4, Number(data.Id), true);
  // 0x08: u32
  if (data?.ItemCount !== undefined) view.setUint32(8, Number(data.ItemCount), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_HEADER (size: 32)
 */
export interface KSCAMERA_PERFRAMESETTING_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  FrameCount: number;
  /** System.Guid */
  Id: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Flags: Deno.PointerValue;
  /** u32 */
  LoopCount: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_PERFRAMESETTING_HEADER = 32;

export function allocKSCAMERA_PERFRAMESETTING_HEADER(data?: Partial<KSCAMERA_PERFRAMESETTING_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.FrameCount !== undefined) view.setUint32(4, Number(data.FrameCount), true);
  // 0x08: pointer
  if (data?.Id !== undefined) view.setBigUint64(8, data.Id === null ? 0n : BigInt(util.toPointer(data.Id)), true);
  // 0x10: u64
  if (data?.Flags !== undefined) view.setBigUint64(16, BigInt(data.Flags), true);
  // 0x18: u32
  if (data?.LoopCount !== undefined) view.setUint32(24, Number(data.LoopCount), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING {
  /** i32 */
  OriginX: number;
  /** i32 */
  OriginY: number;
  /** i32 */
  WindowSize: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING = 16;

export function allocKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING(data?: Partial<KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OriginX !== undefined) view.setInt32(0, Number(data.OriginX), true);
  // 0x04: i32
  if (data?.OriginY !== undefined) view.setInt32(4, Number(data.OriginY), true);
  // 0x08: i32
  if (data?.WindowSize !== undefined) view.setInt32(8, Number(data.WindowSize), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_DIGITALWINDOW (size: 16)
 */
export interface KSCAMERA_METADATA_DIGITALWINDOW {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING */
  Window: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSCAMERA_METADATA_DIGITALWINDOW = 16;

export function allocKSCAMERA_METADATA_DIGITALWINDOW(data?: Partial<KSCAMERA_METADATA_DIGITALWINDOW>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_DIGITALWINDOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Window !== undefined) view.setBigUint64(8, data.Window === null ? 0n : BigInt(util.toPointer(data.Window)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER (size: 8)
 */
export interface KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER {
  /** u32 */
  Size: number;
  /** u32 */
  Count: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER = 8;

export function allocKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER(data?: Partial<KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS (size: 40)
 */
export interface KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS {
  /** i32 */
  ResolutionX: number;
  /** i32 */
  ResolutionY: number;
  /** i32 */
  PorchTop: number;
  /** i32 */
  PorchLeft: number;
  /** i32 */
  PorchBottom: number;
  /** i32 */
  PorchRight: number;
  /** i32 */
  NonUpscalingWindowSize: number;
  /** i32 */
  MinWindowSize: number;
  /** i32 */
  MaxWindowSize: number;
  /** i32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS = 40;

export function allocKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS(data?: Partial<KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ResolutionX !== undefined) view.setInt32(0, Number(data.ResolutionX), true);
  // 0x04: i32
  if (data?.ResolutionY !== undefined) view.setInt32(4, Number(data.ResolutionY), true);
  // 0x08: i32
  if (data?.PorchTop !== undefined) view.setInt32(8, Number(data.PorchTop), true);
  // 0x0c: i32
  if (data?.PorchLeft !== undefined) view.setInt32(12, Number(data.PorchLeft), true);
  // 0x10: i32
  if (data?.PorchBottom !== undefined) view.setInt32(16, Number(data.PorchBottom), true);
  // 0x14: i32
  if (data?.PorchRight !== undefined) view.setInt32(20, Number(data.PorchRight), true);
  // 0x18: i32
  if (data?.NonUpscalingWindowSize !== undefined) view.setInt32(24, Number(data.NonUpscalingWindowSize), true);
  // 0x1c: i32
  if (data?.MinWindowSize !== undefined) view.setInt32(28, Number(data.MinWindowSize), true);
  // 0x20: i32
  if (data?.MaxWindowSize !== undefined) view.setInt32(32, Number(data.MaxWindowSize), true);
  // 0x24: i32
  if (data?.Reserved !== undefined) view.setInt32(36, Number(data.Reserved), true);
  return buf;
}

/**
 * _MaxFrameRate_e__Struct (size: 8)
 */
export interface _MaxFrameRate_e__Struct {
  /** i32 */
  Numerator: number;
  /** i32 */
  Denominator: number;
}

export const sizeof_MaxFrameRate_e__Struct = 8;

export function alloc_MaxFrameRate_e__Struct(data?: Partial<_MaxFrameRate_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_MaxFrameRate_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Numerator !== undefined) view.setInt32(0, Number(data.Numerator), true);
  // 0x04: i32
  if (data?.Denominator !== undefined) view.setInt32(4, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS (size: 32)
 */
export interface KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS {
  /** Windows.Win32.Foundation.SIZE */
  Resolution: Uint8Array | Deno.PointerValue | null;
  /** _MaxFrameRate_e__Struct */
  MaxFrameRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaskResolution: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SubType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS = 32;

export function allocKSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS(data?: Partial<KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Resolution !== undefined) view.setBigUint64(0, data.Resolution === null ? 0n : BigInt(util.toPointer(data.Resolution)), true);
  // 0x08: pointer
  if (data?.MaxFrameRate !== undefined) view.setBigUint64(8, data.MaxFrameRate === null ? 0n : BigInt(util.toPointer(data.MaxFrameRate)), true);
  // 0x10: pointer
  if (data?.MaskResolution !== undefined) view.setBigUint64(16, data.MaskResolution === null ? 0n : BigInt(util.toPointer(data.MaskResolution)), true);
  // 0x18: pointer
  if (data?.SubType !== undefined) view.setBigUint64(24, data.SubType === null ? 0n : BigInt(util.toPointer(data.SubType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK (size: 40)
 */
export interface KSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  MaskCoverageBoundingBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaskResolution: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  ForegroundBoundingBox: Uint8Array | Deno.PointerValue | null;
  /** array */
  MaskData: Deno.PointerValue | null;
}

export const sizeofKSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK = 40;

export function allocKSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK(data?: Partial<KSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.MaskCoverageBoundingBox !== undefined) view.setBigUint64(8, data.MaskCoverageBoundingBox === null ? 0n : BigInt(util.toPointer(data.MaskCoverageBoundingBox)), true);
  // 0x10: pointer
  if (data?.MaskResolution !== undefined) view.setBigUint64(16, data.MaskResolution === null ? 0n : BigInt(util.toPointer(data.MaskResolution)), true);
  // 0x18: pointer
  if (data?.ForegroundBoundingBox !== undefined) view.setBigUint64(24, data.ForegroundBoundingBox === null ? 0n : BigInt(util.toPointer(data.ForegroundBoundingBox)), true);
  // 0x20: pointer
  if (data?.MaskData !== undefined) view.setBigUint64(32, data.MaskData === null ? 0n : BigInt(util.toPointer(data.MaskData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_PROFILE (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_PROFILE {
  /** System.Guid */
  ProfileId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Index: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_PROFILE = 16;

export function allocKSCAMERA_EXTENDEDPROP_PROFILE(data?: Partial<KSCAMERA_EXTENDEDPROP_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProfileId !== undefined) view.setBigUint64(0, data.ProfileId === null ? 0n : BigInt(util.toPointer(data.ProfileId)), true);
  // 0x08: u32
  if (data?.Index !== undefined) view.setUint32(8, Number(data.Index), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * _Resolution_e__Struct (size: 8)
 */
export interface _Resolution_e__Struct {
  /** u32 */
  X: number;
  /** u32 */
  Y: number;
}

export const sizeof_Resolution_e__Struct = 8;

export function alloc_Resolution_e__Struct(data?: Partial<_Resolution_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Resolution_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.X !== undefined) view.setUint32(0, Number(data.X), true);
  // 0x04: u32
  if (data?.Y !== undefined) view.setUint32(4, Number(data.Y), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PROFILE_MEDIAINFO (size: 40)
 */
export interface KSCAMERA_PROFILE_MEDIAINFO {
  /** _Resolution_e__Struct */
  Resolution: Uint8Array | Deno.PointerValue | null;
  /** _MaxFrameRate_e__Struct */
  MaxFrameRate: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Flags: Deno.PointerValue;
  /** u32 */
  Data0: number;
  /** u32 */
  Data1: number;
  /** u32 */
  Data2: number;
  /** u32 */
  Data3: number;
}

export const sizeofKSCAMERA_PROFILE_MEDIAINFO = 40;

export function allocKSCAMERA_PROFILE_MEDIAINFO(data?: Partial<KSCAMERA_PROFILE_MEDIAINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PROFILE_MEDIAINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Resolution !== undefined) view.setBigUint64(0, data.Resolution === null ? 0n : BigInt(util.toPointer(data.Resolution)), true);
  // 0x08: pointer
  if (data?.MaxFrameRate !== undefined) view.setBigUint64(8, data.MaxFrameRate === null ? 0n : BigInt(util.toPointer(data.MaxFrameRate)), true);
  // 0x10: u64
  if (data?.Flags !== undefined) view.setBigUint64(16, BigInt(data.Flags), true);
  // 0x18: u32
  if (data?.Data0 !== undefined) view.setUint32(24, Number(data.Data0), true);
  // 0x1c: u32
  if (data?.Data1 !== undefined) view.setUint32(28, Number(data.Data1), true);
  // 0x20: u32
  if (data?.Data2 !== undefined) view.setUint32(32, Number(data.Data2), true);
  // 0x24: u32
  if (data?.Data3 !== undefined) view.setUint32(36, Number(data.Data3), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PROFILE_PININFO (size: 32)
 */
export interface KSCAMERA_PROFILE_PININFO {
  /** System.Guid */
  PinCategory: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MediaInfoCount: number;
  /** ptr */
  MediaInfos: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSCAMERA_PROFILE_PININFO = 32;

export function allocKSCAMERA_PROFILE_PININFO(data?: Partial<KSCAMERA_PROFILE_PININFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PROFILE_PININFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PinCategory !== undefined) view.setBigUint64(0, data.PinCategory === null ? 0n : BigInt(util.toPointer(data.PinCategory)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.MediaInfoCount !== undefined) view.setUint32(16, Number(data.MediaInfoCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.MediaInfos !== undefined) view.setBigUint64(24, data.MediaInfos === null ? 0n : BigInt(util.toPointer(data.MediaInfos)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PROFILE_INFO (size: 24)
 */
export interface KSCAMERA_PROFILE_INFO {
  /** System.Guid */
  ProfileId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Index: number;
  /** u32 */
  PinCount: number;
  /** ptr */
  Pins: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSCAMERA_PROFILE_INFO = 24;

export function allocKSCAMERA_PROFILE_INFO(data?: Partial<KSCAMERA_PROFILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PROFILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProfileId !== undefined) view.setBigUint64(0, data.ProfileId === null ? 0n : BigInt(util.toPointer(data.ProfileId)), true);
  // 0x08: u32
  if (data?.Index !== undefined) view.setUint32(8, Number(data.Index), true);
  // 0x0c: u32
  if (data?.PinCount !== undefined) view.setUint32(12, Number(data.PinCount), true);
  // 0x10: pointer
  if (data?.Pins !== undefined) view.setBigUint64(16, data.Pins === null ? 0n : BigInt(util.toPointer(data.Pins)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PROFILE_CONCURRENCYINFO (size: 24)
 */
export interface KSCAMERA_PROFILE_CONCURRENCYINFO {
  /** System.Guid */
  ReferenceGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
  /** u32 */
  ProfileCount: number;
  /** ptr */
  Profiles: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSCAMERA_PROFILE_CONCURRENCYINFO = 24;

export function allocKSCAMERA_PROFILE_CONCURRENCYINFO(data?: Partial<KSCAMERA_PROFILE_CONCURRENCYINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PROFILE_CONCURRENCYINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ReferenceGuid !== undefined) view.setBigUint64(0, data.ReferenceGuid === null ? 0n : BigInt(util.toPointer(data.ReferenceGuid)), true);
  // 0x08: u32
  if (data?.Reserved !== undefined) view.setUint32(8, Number(data.Reserved), true);
  // 0x0c: u32
  if (data?.ProfileCount !== undefined) view.setUint32(12, Number(data.ProfileCount), true);
  // 0x10: pointer
  if (data?.Profiles !== undefined) view.setBigUint64(16, data.Profiles === null ? 0n : BigInt(util.toPointer(data.Profiles)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDEVICE_PROFILE_INFO (size: 16)
 */
export interface KSDEVICE_PROFILE_INFO {
  /** u32 */
  Type: number;
  /** u32 */
  Size: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSDEVICE_PROFILE_INFO = 16;

export function allocKSDEVICE_PROFILE_INFO(data?: Partial<KSDEVICE_PROFILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDEVICE_PROFILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.WNF_KSCAMERA_STREAMSTATE_INFO (size: 16)
 */
export interface WNF_KSCAMERA_STREAMSTATE_INFO {
  /** u32 */
  ProcessId: number;
  /** u32 */
  SessionId: number;
  /** u32 */
  StreamState: number;
  /** u32 */
  Reserved: number;
}

export const sizeofWNF_KSCAMERA_STREAMSTATE_INFO = 16;

export function allocWNF_KSCAMERA_STREAMSTATE_INFO(data?: Partial<WNF_KSCAMERA_STREAMSTATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWNF_KSCAMERA_STREAMSTATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProcessId !== undefined) view.setUint32(0, Number(data.ProcessId), true);
  // 0x04: u32
  if (data?.SessionId !== undefined) view.setUint32(4, Number(data.SessionId), true);
  // 0x08: u32
  if (data?.StreamState !== undefined) view.setUint32(8, Number(data.StreamState), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER (size: 8)
 */
export interface KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.KernelStreaming.KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE */
  Type: KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE;
}

export const sizeofKSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER = 8;

export function allocKSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER(data?: Partial<KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO (size: 24)
 */
export interface KSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO {
  /** u32 */
  MetadataItems: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOL */
  PTZStatus: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Events: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Analytics: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Reserved: boolean;
}

export const sizeofKSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO = 24;

export function allocKSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO(data?: Partial<KSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MetadataItems !== undefined) view.setUint32(0, Number(data.MetadataItems), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.PTZStatus !== undefined) view.setInt32(8, Number(data.PTZStatus), true);
  // 0x0c: i32
  if (data?.Events !== undefined) view.setInt32(12, Number(data.Events), true);
  // 0x10: i32
  if (data?.Analytics !== undefined) view.setInt32(16, Number(data.Analytics), true);
  // 0x14: i32
  if (data?.Reserved !== undefined) view.setInt32(20, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO (size: 16)
 */
export interface KSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  EventFilter: Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO = 16;

export function allocKSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO(data?: Partial<KSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.EventFilter !== undefined) view.setBigUint64(8, data.EventFilter === null ? 0n : BigInt(util.toPointer(data.EventFilter)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.DEVCAPS (size: 96)
 */
export interface DEVCAPS {
  /** i32 */
  CanRecord: number;
  /** i32 */
  CanRecordStrobe: number;
  /** i32 */
  HasAudio: number;
  /** i32 */
  HasVideo: number;
  /** i32 */
  UsesFiles: number;
  /** i32 */
  CanSave: number;
  /** i32 */
  DeviceType: number;
  /** i32 */
  TCRead: number;
  /** i32 */
  TCWrite: number;
  /** i32 */
  CTLRead: number;
  /** i32 */
  IndexRead: number;
  /** i32 */
  Preroll: number;
  /** i32 */
  Postroll: number;
  /** i32 */
  SyncAcc: number;
  /** i32 */
  NormRate: number;
  /** i32 */
  CanPreview: number;
  /** i32 */
  CanMonitorSrc: number;
  /** i32 */
  CanTest: number;
  /** i32 */
  VideoIn: number;
  /** i32 */
  AudioIn: number;
  /** i32 */
  Calibrate: number;
  /** i32 */
  SeekType: number;
  /** i32 */
  SimulatedHardware: number;
}

export const sizeofDEVCAPS = 96;

export function allocDEVCAPS(data?: Partial<DEVCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CanRecord !== undefined) view.setInt32(0, Number(data.CanRecord), true);
  // 0x04: i32
  if (data?.CanRecordStrobe !== undefined) view.setInt32(4, Number(data.CanRecordStrobe), true);
  // 0x08: i32
  if (data?.HasAudio !== undefined) view.setInt32(8, Number(data.HasAudio), true);
  // 0x0c: i32
  if (data?.HasVideo !== undefined) view.setInt32(12, Number(data.HasVideo), true);
  // 0x10: i32
  if (data?.UsesFiles !== undefined) view.setInt32(16, Number(data.UsesFiles), true);
  // 0x14: i32
  if (data?.CanSave !== undefined) view.setInt32(20, Number(data.CanSave), true);
  // 0x18: i32
  if (data?.DeviceType !== undefined) view.setInt32(24, Number(data.DeviceType), true);
  // 0x1c: i32
  if (data?.TCRead !== undefined) view.setInt32(28, Number(data.TCRead), true);
  // 0x20: i32
  if (data?.TCWrite !== undefined) view.setInt32(32, Number(data.TCWrite), true);
  // 0x24: i32
  if (data?.CTLRead !== undefined) view.setInt32(36, Number(data.CTLRead), true);
  // 0x28: i32
  if (data?.IndexRead !== undefined) view.setInt32(40, Number(data.IndexRead), true);
  // 0x2c: i32
  if (data?.Preroll !== undefined) view.setInt32(44, Number(data.Preroll), true);
  // 0x30: i32
  if (data?.Postroll !== undefined) view.setInt32(48, Number(data.Postroll), true);
  // 0x34: i32
  if (data?.SyncAcc !== undefined) view.setInt32(52, Number(data.SyncAcc), true);
  // 0x38: i32
  if (data?.NormRate !== undefined) view.setInt32(56, Number(data.NormRate), true);
  // 0x3c: i32
  if (data?.CanPreview !== undefined) view.setInt32(60, Number(data.CanPreview), true);
  // 0x40: i32
  if (data?.CanMonitorSrc !== undefined) view.setInt32(64, Number(data.CanMonitorSrc), true);
  // 0x44: i32
  if (data?.CanTest !== undefined) view.setInt32(68, Number(data.CanTest), true);
  // 0x48: i32
  if (data?.VideoIn !== undefined) view.setInt32(72, Number(data.VideoIn), true);
  // 0x4c: i32
  if (data?.AudioIn !== undefined) view.setInt32(76, Number(data.AudioIn), true);
  // 0x50: i32
  if (data?.Calibrate !== undefined) view.setInt32(80, Number(data.Calibrate), true);
  // 0x54: i32
  if (data?.SeekType !== undefined) view.setInt32(84, Number(data.SeekType), true);
  // 0x58: i32
  if (data?.SimulatedHardware !== undefined) view.setInt32(88, Number(data.SimulatedHardware), true);
  // 0x5c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_EXTDEVICE_S (size: 16)
 */
export interface KSPROPERTY_EXTDEVICE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_EXTDEVICE_S = 16;

export function allocKSPROPERTY_EXTDEVICE_S(data?: Partial<KSPROPERTY_EXTDEVICE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_EXTDEVICE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TRANSPORTSTATUS (size: 56)
 */
export interface TRANSPORTSTATUS {
  /** i32 */
  Mode: number;
  /** i32 */
  LastError: number;
  /** i32 */
  RecordInhibit: number;
  /** i32 */
  ServoLock: number;
  /** i32 */
  MediaPresent: number;
  /** i32 */
  MediaLength: number;
  /** i32 */
  MediaSize: number;
  /** i32 */
  MediaTrackCount: number;
  /** i32 */
  MediaTrackLength: number;
  /** i32 */
  MediaTrackSide: number;
  /** i32 */
  MediaType: number;
  /** i32 */
  LinkMode: number;
  /** i32 */
  NotifyOn: number;
}

export const sizeofTRANSPORTSTATUS = 56;

export function allocTRANSPORTSTATUS(data?: Partial<TRANSPORTSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORTSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mode !== undefined) view.setInt32(0, Number(data.Mode), true);
  // 0x04: i32
  if (data?.LastError !== undefined) view.setInt32(4, Number(data.LastError), true);
  // 0x08: i32
  if (data?.RecordInhibit !== undefined) view.setInt32(8, Number(data.RecordInhibit), true);
  // 0x0c: i32
  if (data?.ServoLock !== undefined) view.setInt32(12, Number(data.ServoLock), true);
  // 0x10: i32
  if (data?.MediaPresent !== undefined) view.setInt32(16, Number(data.MediaPresent), true);
  // 0x14: i32
  if (data?.MediaLength !== undefined) view.setInt32(20, Number(data.MediaLength), true);
  // 0x18: i32
  if (data?.MediaSize !== undefined) view.setInt32(24, Number(data.MediaSize), true);
  // 0x1c: i32
  if (data?.MediaTrackCount !== undefined) view.setInt32(28, Number(data.MediaTrackCount), true);
  // 0x20: i32
  if (data?.MediaTrackLength !== undefined) view.setInt32(32, Number(data.MediaTrackLength), true);
  // 0x24: i32
  if (data?.MediaTrackSide !== undefined) view.setInt32(36, Number(data.MediaTrackSide), true);
  // 0x28: i32
  if (data?.MediaType !== undefined) view.setInt32(40, Number(data.MediaType), true);
  // 0x2c: i32
  if (data?.LinkMode !== undefined) view.setInt32(44, Number(data.LinkMode), true);
  // 0x30: i32
  if (data?.NotifyOn !== undefined) view.setInt32(48, Number(data.NotifyOn), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TRANSPORTBASICPARMS (size: 136)
 */
export interface TRANSPORTBASICPARMS {
  /** i32 */
  TimeFormat: number;
  /** i32 */
  TimeReference: number;
  /** i32 */
  Superimpose: number;
  /** i32 */
  EndStopAction: number;
  /** i32 */
  RecordFormat: number;
  /** i32 */
  StepFrames: number;
  /** i32 */
  SetpField: number;
  /** i32 */
  Preroll: number;
  /** i32 */
  RecPreroll: number;
  /** i32 */
  Postroll: number;
  /** i32 */
  EditDelay: number;
  /** i32 */
  PlayTCDelay: number;
  /** i32 */
  RecTCDelay: number;
  /** i32 */
  EditField: number;
  /** i32 */
  FrameServo: number;
  /** i32 */
  ColorFrameServo: number;
  /** i32 */
  ServoRef: number;
  /** i32 */
  WarnGenlock: number;
  /** i32 */
  SetTracking: number;
  /** array */
  VolumeName: Deno.PointerValue | null;
  /** array */
  Ballistic: Deno.PointerValue | null;
  /** i32 */
  Speed: number;
  /** i32 */
  CounterFormat: number;
  /** i32 */
  TunerChannel: number;
  /** i32 */
  TunerNumber: number;
  /** i32 */
  TimerEvent: number;
  /** i32 */
  TimerStartDay: number;
  /** i32 */
  TimerStartTime: number;
  /** i32 */
  TimerStopDay: number;
  /** i32 */
  TimerStopTime: number;
}

export const sizeofTRANSPORTBASICPARMS = 136;

export function allocTRANSPORTBASICPARMS(data?: Partial<TRANSPORTBASICPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORTBASICPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TimeFormat !== undefined) view.setInt32(0, Number(data.TimeFormat), true);
  // 0x04: i32
  if (data?.TimeReference !== undefined) view.setInt32(4, Number(data.TimeReference), true);
  // 0x08: i32
  if (data?.Superimpose !== undefined) view.setInt32(8, Number(data.Superimpose), true);
  // 0x0c: i32
  if (data?.EndStopAction !== undefined) view.setInt32(12, Number(data.EndStopAction), true);
  // 0x10: i32
  if (data?.RecordFormat !== undefined) view.setInt32(16, Number(data.RecordFormat), true);
  // 0x14: i32
  if (data?.StepFrames !== undefined) view.setInt32(20, Number(data.StepFrames), true);
  // 0x18: i32
  if (data?.SetpField !== undefined) view.setInt32(24, Number(data.SetpField), true);
  // 0x1c: i32
  if (data?.Preroll !== undefined) view.setInt32(28, Number(data.Preroll), true);
  // 0x20: i32
  if (data?.RecPreroll !== undefined) view.setInt32(32, Number(data.RecPreroll), true);
  // 0x24: i32
  if (data?.Postroll !== undefined) view.setInt32(36, Number(data.Postroll), true);
  // 0x28: i32
  if (data?.EditDelay !== undefined) view.setInt32(40, Number(data.EditDelay), true);
  // 0x2c: i32
  if (data?.PlayTCDelay !== undefined) view.setInt32(44, Number(data.PlayTCDelay), true);
  // 0x30: i32
  if (data?.RecTCDelay !== undefined) view.setInt32(48, Number(data.RecTCDelay), true);
  // 0x34: i32
  if (data?.EditField !== undefined) view.setInt32(52, Number(data.EditField), true);
  // 0x38: i32
  if (data?.FrameServo !== undefined) view.setInt32(56, Number(data.FrameServo), true);
  // 0x3c: i32
  if (data?.ColorFrameServo !== undefined) view.setInt32(60, Number(data.ColorFrameServo), true);
  // 0x40: i32
  if (data?.ServoRef !== undefined) view.setInt32(64, Number(data.ServoRef), true);
  // 0x44: i32
  if (data?.WarnGenlock !== undefined) view.setInt32(68, Number(data.WarnGenlock), true);
  // 0x48: i32
  if (data?.SetTracking !== undefined) view.setInt32(72, Number(data.SetTracking), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.VolumeName !== undefined) view.setBigUint64(80, data.VolumeName === null ? 0n : BigInt(util.toPointer(data.VolumeName)), true);
  // 0x58: pointer
  if (data?.Ballistic !== undefined) view.setBigUint64(88, data.Ballistic === null ? 0n : BigInt(util.toPointer(data.Ballistic)), true);
  // 0x60: i32
  if (data?.Speed !== undefined) view.setInt32(96, Number(data.Speed), true);
  // 0x64: i32
  if (data?.CounterFormat !== undefined) view.setInt32(100, Number(data.CounterFormat), true);
  // 0x68: i32
  if (data?.TunerChannel !== undefined) view.setInt32(104, Number(data.TunerChannel), true);
  // 0x6c: i32
  if (data?.TunerNumber !== undefined) view.setInt32(108, Number(data.TunerNumber), true);
  // 0x70: i32
  if (data?.TimerEvent !== undefined) view.setInt32(112, Number(data.TimerEvent), true);
  // 0x74: i32
  if (data?.TimerStartDay !== undefined) view.setInt32(116, Number(data.TimerStartDay), true);
  // 0x78: i32
  if (data?.TimerStartTime !== undefined) view.setInt32(120, Number(data.TimerStartTime), true);
  // 0x7c: i32
  if (data?.TimerStopDay !== undefined) view.setInt32(124, Number(data.TimerStopDay), true);
  // 0x80: i32
  if (data?.TimerStopTime !== undefined) view.setInt32(128, Number(data.TimerStopTime), true);
  // 0x84: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TRANSPORTVIDEOPARMS (size: 8)
 */
export interface TRANSPORTVIDEOPARMS {
  /** i32 */
  OutputMode: number;
  /** i32 */
  Input: number;
}

export const sizeofTRANSPORTVIDEOPARMS = 8;

export function allocTRANSPORTVIDEOPARMS(data?: Partial<TRANSPORTVIDEOPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORTVIDEOPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OutputMode !== undefined) view.setInt32(0, Number(data.OutputMode), true);
  // 0x04: i32
  if (data?.Input !== undefined) view.setInt32(4, Number(data.Input), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TRANSPORTAUDIOPARMS (size: 24)
 */
export interface TRANSPORTAUDIOPARMS {
  /** i32 */
  EnableOutput: number;
  /** i32 */
  EnableRecord: number;
  /** i32 */
  EnableSelsync: number;
  /** i32 */
  Input: number;
  /** i32 */
  MonitorSource: number;
}

export const sizeofTRANSPORTAUDIOPARMS = 24;

export function allocTRANSPORTAUDIOPARMS(data?: Partial<TRANSPORTAUDIOPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORTAUDIOPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.EnableOutput !== undefined) view.setInt32(0, Number(data.EnableOutput), true);
  // 0x04: i32
  if (data?.EnableRecord !== undefined) view.setInt32(4, Number(data.EnableRecord), true);
  // 0x08: i32
  if (data?.EnableSelsync !== undefined) view.setInt32(8, Number(data.EnableSelsync), true);
  // 0x0c: i32
  if (data?.Input !== undefined) view.setInt32(12, Number(data.Input), true);
  // 0x10: i32
  if (data?.MonitorSource !== undefined) view.setInt32(16, Number(data.MonitorSource), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.MEDIUM_INFO (size: 16)
 */
export interface MEDIUM_INFO {
  /** Windows.Win32.Foundation.BOOL */
  MediaPresent: boolean;
  /** u32 */
  MediaType: number;
  /** Windows.Win32.Foundation.BOOL */
  RecordInhibit: boolean;
}

export const sizeofMEDIUM_INFO = 16;

export function allocMEDIUM_INFO(data?: Partial<MEDIUM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMEDIUM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MediaPresent !== undefined) view.setInt32(0, Number(data.MediaPresent), true);
  // 0x04: u32
  if (data?.MediaType !== undefined) view.setUint32(4, Number(data.MediaType), true);
  // 0x08: i32
  if (data?.RecordInhibit !== undefined) view.setInt32(8, Number(data.RecordInhibit), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TRANSPORT_STATE (size: 8)
 */
export interface TRANSPORT_STATE {
  /** u32 */
  Mode: number;
  /** u32 */
  State: number;
}

export const sizeofTRANSPORT_STATE = 8;

export function allocTRANSPORT_STATE(data?: Partial<TRANSPORT_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORT_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Mode !== undefined) view.setUint32(0, Number(data.Mode), true);
  // 0x04: u32
  if (data?.State !== undefined) view.setUint32(4, Number(data.State), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_EXTXPORT_S (size: 16)
 */
export interface KSPROPERTY_EXTXPORT_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_EXTXPORT_S = 16;

export function allocKSPROPERTY_EXTXPORT_S(data?: Partial<KSPROPERTY_EXTXPORT_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_EXTXPORT_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_EXTXPORT_NODE_S (size: 16)
 */
export interface KSPROPERTY_EXTXPORT_NODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_EXTXPORT_NODE_S = 16;

export function allocKSPROPERTY_EXTXPORT_NODE_S(data?: Partial<KSPROPERTY_EXTXPORT_NODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_EXTXPORT_NODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.Media.TIMECODE_SAMPLE (size: 24)
 */
export interface TIMECODE_SAMPLE {
  /** i64 */
  qwTick: Deno.PointerValue;
  /** Windows.Win32.Media.TIMECODE */
  timecode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwUser: number;
  /** Windows.Win32.Media.TIMECODE_SAMPLE_FLAGS */
  dwFlags: TIMECODE_SAMPLE_FLAGS;
}

export const sizeofTIMECODE_SAMPLE = 24;

export function allocTIMECODE_SAMPLE(data?: Partial<TIMECODE_SAMPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMECODE_SAMPLE);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.qwTick !== undefined) view.setBigInt64(0, BigInt(data.qwTick), true);
  // 0x08: pointer
  if (data?.timecode !== undefined) view.setBigUint64(8, data.timecode === null ? 0n : BigInt(util.toPointer(data.timecode)), true);
  // 0x10: u32
  if (data?.dwUser !== undefined) view.setUint32(16, Number(data.dwUser), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TIMECODE_S (size: 16)
 */
export interface KSPROPERTY_TIMECODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.TIMECODE_SAMPLE */
  TimecodeSamp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_TIMECODE_S = 16;

export function allocKSPROPERTY_TIMECODE_S(data?: Partial<KSPROPERTY_TIMECODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TIMECODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.TimecodeSamp !== undefined) view.setBigUint64(8, data.TimecodeSamp === null ? 0n : BigInt(util.toPointer(data.TimecodeSamp)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TIMECODE_NODE_S (size: 16)
 */
export interface KSPROPERTY_TIMECODE_NODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.TIMECODE_SAMPLE */
  TimecodeSamp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_TIMECODE_NODE_S = 16;

export function allocKSPROPERTY_TIMECODE_NODE_S(data?: Partial<KSPROPERTY_TIMECODE_NODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TIMECODE_NODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: pointer
  if (data?.TimecodeSamp !== undefined) view.setBigUint64(8, data.TimecodeSamp === null ? 0n : BigInt(util.toPointer(data.TimecodeSamp)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CROSSBAR_CAPS_S (size: 16)
 */
export interface KSPROPERTY_CROSSBAR_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfInputs: number;
  /** u32 */
  NumberOfOutputs: number;
}

export const sizeofKSPROPERTY_CROSSBAR_CAPS_S = 16;

export function allocKSPROPERTY_CROSSBAR_CAPS_S(data?: Partial<KSPROPERTY_CROSSBAR_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CROSSBAR_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NumberOfInputs !== undefined) view.setUint32(8, Number(data.NumberOfInputs), true);
  // 0x0c: u32
  if (data?.NumberOfOutputs !== undefined) view.setUint32(12, Number(data.NumberOfOutputs), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CROSSBAR_PININFO_S (size: 32)
 */
export interface KSPROPERTY_CROSSBAR_PININFO_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSPIN_DATAFLOW */
  Direction: KSPIN_DATAFLOW;
  /** u32 */
  Index: number;
  /** u32 */
  PinType: number;
  /** u32 */
  RelatedPinIndex: number;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Medium: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_CROSSBAR_PININFO_S = 32;

export function allocKSPROPERTY_CROSSBAR_PININFO_S(data?: Partial<KSPROPERTY_CROSSBAR_PININFO_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CROSSBAR_PININFO_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Direction !== undefined) view.setInt32(8, Number(data.Direction), true);
  // 0x0c: u32
  if (data?.Index !== undefined) view.setUint32(12, Number(data.Index), true);
  // 0x10: u32
  if (data?.PinType !== undefined) view.setUint32(16, Number(data.PinType), true);
  // 0x14: u32
  if (data?.RelatedPinIndex !== undefined) view.setUint32(20, Number(data.RelatedPinIndex), true);
  // 0x18: pointer
  if (data?.Medium !== undefined) view.setBigUint64(24, data.Medium === null ? 0n : BigInt(util.toPointer(data.Medium)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CROSSBAR_ROUTE_S (size: 24)
 */
export interface KSPROPERTY_CROSSBAR_ROUTE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  IndexInputPin: number;
  /** u32 */
  IndexOutputPin: number;
  /** u32 */
  CanRoute: number;
}

export const sizeofKSPROPERTY_CROSSBAR_ROUTE_S = 24;

export function allocKSPROPERTY_CROSSBAR_ROUTE_S(data?: Partial<KSPROPERTY_CROSSBAR_ROUTE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CROSSBAR_ROUTE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.IndexInputPin !== undefined) view.setUint32(8, Number(data.IndexInputPin), true);
  // 0x0c: u32
  if (data?.IndexOutputPin !== undefined) view.setUint32(12, Number(data.IndexOutputPin), true);
  // 0x10: u32
  if (data?.CanRoute !== undefined) view.setUint32(16, Number(data.CanRoute), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CROSSBAR_ACTIVE_S (size: 16)
 */
export interface KSPROPERTY_CROSSBAR_ACTIVE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  IndexInputPin: number;
  /** u32 */
  Active: number;
}

export const sizeofKSPROPERTY_CROSSBAR_ACTIVE_S = 16;

export function allocKSPROPERTY_CROSSBAR_ACTIVE_S(data?: Partial<KSPROPERTY_CROSSBAR_ACTIVE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CROSSBAR_ACTIVE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.IndexInputPin !== undefined) view.setUint32(8, Number(data.IndexInputPin), true);
  // 0x0c: u32
  if (data?.Active !== undefined) view.setUint32(12, Number(data.Active), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TVAUDIO_CAPS_S (size: 32)
 */
export interface KSPROPERTY_TVAUDIO_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Capabilities: number;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  InputMedium: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  OutputMedium: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_TVAUDIO_CAPS_S = 32;

export function allocKSPROPERTY_TVAUDIO_CAPS_S(data?: Partial<KSPROPERTY_TVAUDIO_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TVAUDIO_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Capabilities !== undefined) view.setUint32(8, Number(data.Capabilities), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.InputMedium !== undefined) view.setBigUint64(16, data.InputMedium === null ? 0n : BigInt(util.toPointer(data.InputMedium)), true);
  // 0x18: pointer
  if (data?.OutputMedium !== undefined) view.setBigUint64(24, data.OutputMedium === null ? 0n : BigInt(util.toPointer(data.OutputMedium)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TVAUDIO_S (size: 16)
 */
export interface KSPROPERTY_TVAUDIO_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mode: number;
}

export const sizeofKSPROPERTY_TVAUDIO_S = 16;

export function allocKSPROPERTY_TVAUDIO_S(data?: Partial<KSPROPERTY_TVAUDIO_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TVAUDIO_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Mode !== undefined) view.setUint32(8, Number(data.Mode), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S (size: 32)
 */
export interface KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** i32 */
  DefaultKeyFrameRate: number;
  /** i32 */
  DefaultPFrameRate: number;
  /** i32 */
  DefaultQuality: number;
  /** i32 */
  NumberOfQualitySettings: number;
  /** i32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_VIDEOCOMPRESSION_GETINFO_S = 32;

export function allocKSPROPERTY_VIDEOCOMPRESSION_GETINFO_S(data?: Partial<KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCOMPRESSION_GETINFO_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: i32
  if (data?.DefaultKeyFrameRate !== undefined) view.setInt32(12, Number(data.DefaultKeyFrameRate), true);
  // 0x10: i32
  if (data?.DefaultPFrameRate !== undefined) view.setInt32(16, Number(data.DefaultPFrameRate), true);
  // 0x14: i32
  if (data?.DefaultQuality !== undefined) view.setInt32(20, Number(data.DefaultQuality), true);
  // 0x18: i32
  if (data?.NumberOfQualitySettings !== undefined) view.setInt32(24, Number(data.NumberOfQualitySettings), true);
  // 0x1c: i32
  if (data?.Capabilities !== undefined) view.setInt32(28, Number(data.Capabilities), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCOMPRESSION_S (size: 16)
 */
export interface KSPROPERTY_VIDEOCOMPRESSION_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** i32 */
  Value: number;
}

export const sizeofKSPROPERTY_VIDEOCOMPRESSION_S = 16;

export function allocKSPROPERTY_VIDEOCOMPRESSION_S(data?: Partial<KSPROPERTY_VIDEOCOMPRESSION_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCOMPRESSION_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: i32
  if (data?.Value !== undefined) view.setInt32(12, Number(data.Value), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCOMPRESSION_S1 (size: 24)
 */
export interface KSPROPERTY_VIDEOCOMPRESSION_S1 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
}

export const sizeofKSPROPERTY_VIDEOCOMPRESSION_S1 = 24;

export function allocKSPROPERTY_VIDEOCOMPRESSION_S1(data?: Partial<KSPROPERTY_VIDEOCOMPRESSION_S1>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCOMPRESSION_S1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: i32
  if (data?.Value !== undefined) view.setInt32(12, Number(data.Value), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDISPLAYCHANGE (size: 24)
 */
export interface KSDISPLAYCHANGE {
  /** u32 */
  PelsWidth: number;
  /** u32 */
  PelsHeight: number;
  /** u32 */
  BitsPerPel: number;
  /** array */
  DeviceID: Deno.PointerValue | null;
}

export const sizeofKSDISPLAYCHANGE = 24;

export function allocKSDISPLAYCHANGE(data?: Partial<KSDISPLAYCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDISPLAYCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PelsWidth !== undefined) view.setUint32(0, Number(data.PelsWidth), true);
  // 0x04: u32
  if (data?.PelsHeight !== undefined) view.setUint32(4, Number(data.PelsHeight), true);
  // 0x08: u32
  if (data?.BitsPerPel !== undefined) view.setUint32(8, Number(data.BitsPerPel), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DeviceID !== undefined) view.setBigUint64(16, data.DeviceID === null ? 0n : BigInt(util.toPointer(data.DeviceID)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCONTROL_CAPS_S (size: 16)
 */
export interface KSPROPERTY_VIDEOCONTROL_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** u32 */
  VideoControlCaps: number;
}

export const sizeofKSPROPERTY_VIDEOCONTROL_CAPS_S = 16;

export function allocKSPROPERTY_VIDEOCONTROL_CAPS_S(data?: Partial<KSPROPERTY_VIDEOCONTROL_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCONTROL_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: u32
  if (data?.VideoControlCaps !== undefined) view.setUint32(12, Number(data.VideoControlCaps), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCONTROL_MODE_S (size: 16)
 */
export interface KSPROPERTY_VIDEOCONTROL_MODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** i32 */
  Mode: number;
}

export const sizeofKSPROPERTY_VIDEOCONTROL_MODE_S = 16;

export function allocKSPROPERTY_VIDEOCONTROL_MODE_S(data?: Partial<KSPROPERTY_VIDEOCONTROL_MODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCONTROL_MODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: i32
  if (data?.Mode !== undefined) view.setInt32(12, Number(data.Mode), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S (size: 40)
 */
export interface KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** u32 */
  RangeIndex: number;
  /** Windows.Win32.Foundation.SIZE */
  Dimensions: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  CurrentActualFrameRate: Deno.PointerValue;
  /** i64 */
  CurrentMaxAvailableFrameRate: Deno.PointerValue;
}

export const sizeofKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S = 40;

export function allocKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S(data?: Partial<KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: u32
  if (data?.RangeIndex !== undefined) view.setUint32(12, Number(data.RangeIndex), true);
  // 0x10: pointer
  if (data?.Dimensions !== undefined) view.setBigUint64(16, data.Dimensions === null ? 0n : BigInt(util.toPointer(data.Dimensions)), true);
  // 0x18: i64
  if (data?.CurrentActualFrameRate !== undefined) view.setBigInt64(24, BigInt(data.CurrentActualFrameRate), true);
  // 0x20: i64
  if (data?.CurrentMaxAvailableFrameRate !== undefined) view.setBigInt64(32, BigInt(data.CurrentMaxAvailableFrameRate), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S (size: 24)
 */
export interface KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** u32 */
  RangeIndex: number;
  /** Windows.Win32.Foundation.SIZE */
  Dimensions: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VIDEOCONTROL_FRAME_RATES_S = 24;

export function allocKSPROPERTY_VIDEOCONTROL_FRAME_RATES_S(data?: Partial<KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCONTROL_FRAME_RATES_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: u32
  if (data?.RangeIndex !== undefined) view.setUint32(12, Number(data.RangeIndex), true);
  // 0x10: pointer
  if (data?.Dimensions !== undefined) view.setBigUint64(16, data.Dimensions === null ? 0n : BigInt(util.toPointer(data.Dimensions)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_DROPPEDFRAMES_CURRENT_S (size: 32)
 */
export interface KSPROPERTY_DROPPEDFRAMES_CURRENT_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  PictureNumber: Deno.PointerValue;
  /** i64 */
  DropCount: Deno.PointerValue;
  /** u32 */
  AverageFrameSize: number;
}

export const sizeofKSPROPERTY_DROPPEDFRAMES_CURRENT_S = 32;

export function allocKSPROPERTY_DROPPEDFRAMES_CURRENT_S(data?: Partial<KSPROPERTY_DROPPEDFRAMES_CURRENT_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_DROPPEDFRAMES_CURRENT_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i64
  if (data?.PictureNumber !== undefined) view.setBigInt64(8, BigInt(data.PictureNumber), true);
  // 0x10: i64
  if (data?.DropCount !== undefined) view.setBigInt64(16, BigInt(data.DropCount), true);
  // 0x18: u32
  if (data?.AverageFrameSize !== undefined) view.setUint32(24, Number(data.AverageFrameSize), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_AMVPDIMINFO (size: 24)
 */
export interface KS_AMVPDIMINFO {
  /** u32 */
  dwFieldWidth: number;
  /** u32 */
  dwFieldHeight: number;
  /** u32 */
  dwVBIWidth: number;
  /** u32 */
  dwVBIHeight: number;
  /** Windows.Win32.Foundation.RECT */
  rcValidRegion: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_AMVPDIMINFO = 24;

export function allocKS_AMVPDIMINFO(data?: Partial<KS_AMVPDIMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_AMVPDIMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFieldWidth !== undefined) view.setUint32(0, Number(data.dwFieldWidth), true);
  // 0x04: u32
  if (data?.dwFieldHeight !== undefined) view.setUint32(4, Number(data.dwFieldHeight), true);
  // 0x08: u32
  if (data?.dwVBIWidth !== undefined) view.setUint32(8, Number(data.dwVBIWidth), true);
  // 0x0c: u32
  if (data?.dwVBIHeight !== undefined) view.setUint32(12, Number(data.dwVBIHeight), true);
  // 0x10: pointer
  if (data?.rcValidRegion !== undefined) view.setBigUint64(16, data.rcValidRegion === null ? 0n : BigInt(util.toPointer(data.rcValidRegion)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_AMVPDATAINFO (size: 56)
 */
export interface KS_AMVPDATAINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwMicrosecondsPerField: number;
  /** Windows.Win32.Media.KernelStreaming.KS_AMVPDIMINFO */
  amvpDimInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPictAspectRatioX: number;
  /** u32 */
  dwPictAspectRatioY: number;
  /** Windows.Win32.Foundation.BOOL */
  bEnableDoubleClock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bEnableVACT: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bDataIsInterlaced: boolean;
  /** i32 */
  lHalfLinesOdd: number;
  /** Windows.Win32.Foundation.BOOL */
  bFieldPolarityInverted: boolean;
  /** u32 */
  dwNumLinesInVREF: number;
  /** i32 */
  lHalfLinesEven: number;
  /** u32 */
  dwReserved1: number;
}

export const sizeofKS_AMVPDATAINFO = 56;

export function allocKS_AMVPDATAINFO(data?: Partial<KS_AMVPDATAINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_AMVPDATAINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwMicrosecondsPerField !== undefined) view.setUint32(4, Number(data.dwMicrosecondsPerField), true);
  // 0x08: pointer
  if (data?.amvpDimInfo !== undefined) view.setBigUint64(8, data.amvpDimInfo === null ? 0n : BigInt(util.toPointer(data.amvpDimInfo)), true);
  // 0x10: u32
  if (data?.dwPictAspectRatioX !== undefined) view.setUint32(16, Number(data.dwPictAspectRatioX), true);
  // 0x14: u32
  if (data?.dwPictAspectRatioY !== undefined) view.setUint32(20, Number(data.dwPictAspectRatioY), true);
  // 0x18: i32
  if (data?.bEnableDoubleClock !== undefined) view.setInt32(24, Number(data.bEnableDoubleClock), true);
  // 0x1c: i32
  if (data?.bEnableVACT !== undefined) view.setInt32(28, Number(data.bEnableVACT), true);
  // 0x20: i32
  if (data?.bDataIsInterlaced !== undefined) view.setInt32(32, Number(data.bDataIsInterlaced), true);
  // 0x24: i32
  if (data?.lHalfLinesOdd !== undefined) view.setInt32(36, Number(data.lHalfLinesOdd), true);
  // 0x28: i32
  if (data?.bFieldPolarityInverted !== undefined) view.setInt32(40, Number(data.bFieldPolarityInverted), true);
  // 0x2c: u32
  if (data?.dwNumLinesInVREF !== undefined) view.setUint32(44, Number(data.dwNumLinesInVREF), true);
  // 0x30: i32
  if (data?.lHalfLinesEven !== undefined) view.setInt32(48, Number(data.lHalfLinesEven), true);
  // 0x34: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(52, Number(data.dwReserved1), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_AMVPSIZE (size: 8)
 */
export interface KS_AMVPSIZE {
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
}

export const sizeofKS_AMVPSIZE = 8;

export function allocKS_AMVPSIZE(data?: Partial<KS_AMVPSIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_AMVPSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwWidth !== undefined) view.setUint32(0, Number(data.dwWidth), true);
  // 0x04: u32
  if (data?.dwHeight !== undefined) view.setUint32(4, Number(data.dwHeight), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSVPMAXPIXELRATE (size: 16)
 */
export interface KSVPMAXPIXELRATE {
  /** Windows.Win32.Media.KernelStreaming.KS_AMVPSIZE */
  Size: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxPixelsPerSecond: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSVPMAXPIXELRATE = 16;

export function allocKSVPMAXPIXELRATE(data?: Partial<KSVPMAXPIXELRATE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSVPMAXPIXELRATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Size !== undefined) view.setBigUint64(0, data.Size === null ? 0n : BigInt(util.toPointer(data.Size)), true);
  // 0x08: u32
  if (data?.MaxPixelsPerSecond !== undefined) view.setUint32(8, Number(data.MaxPixelsPerSecond), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSVPSIZE_PROP (size: 16)
 */
export interface KSVPSIZE_PROP {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_AMVPSIZE */
  Size: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSVPSIZE_PROP = 16;

export function allocKSVPSIZE_PROP(data?: Partial<KSVPSIZE_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofKSVPSIZE_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Size !== undefined) view.setBigUint64(8, data.Size === null ? 0n : BigInt(util.toPointer(data.Size)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSVPSURFACEPARAMS (size: 16)
 */
export interface KSVPSURFACEPARAMS {
  /** u32 */
  dwPitch: number;
  /** u32 */
  dwXOrigin: number;
  /** u32 */
  dwYOrigin: number;
}

export const sizeofKSVPSURFACEPARAMS = 16;

export function allocKSVPSURFACEPARAMS(data?: Partial<KSVPSURFACEPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSVPSURFACEPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPitch !== undefined) view.setUint32(0, Number(data.dwPitch), true);
  // 0x04: u32
  if (data?.dwXOrigin !== undefined) view.setUint32(4, Number(data.dwXOrigin), true);
  // 0x08: u32
  if (data?.dwYOrigin !== undefined) view.setUint32(8, Number(data.dwYOrigin), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSGOP_USERDATA (size: 24)
 */
export interface KSGOP_USERDATA {
  /** u32 */
  sc: number;
  /** u32 */
  reserved1: number;
  /** u8 */
  cFields: number;
  /** array */
  l21Data: Deno.PointerValue | null;
}

export const sizeofKSGOP_USERDATA = 24;

export function allocKSGOP_USERDATA(data?: Partial<KSGOP_USERDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKSGOP_USERDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sc !== undefined) view.setUint32(0, Number(data.sc), true);
  // 0x04: u32
  if (data?.reserved1 !== undefined) view.setUint32(4, Number(data.reserved1), true);
  // 0x08: u8
  if (data?.cFields !== undefined) view.setUint8(8, Number(data.cFields));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.l21Data !== undefined) view.setBigUint64(16, data.l21Data === null ? 0n : BigInt(util.toPointer(data.l21Data)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_AM_SimpleRateChange (size: 16)
 */
export interface KS_AM_SimpleRateChange {
  /** i64 */
  StartTime: Deno.PointerValue;
  /** i32 */
  Rate: number;
}

export const sizeofKS_AM_SimpleRateChange = 16;

export function allocKS_AM_SimpleRateChange(data?: Partial<KS_AM_SimpleRateChange>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_AM_SimpleRateChange);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartTime !== undefined) view.setBigInt64(0, BigInt(data.StartTime), true);
  // 0x08: i32
  if (data?.Rate !== undefined) view.setInt32(8, Number(data.Rate), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_AM_ExactRateChange (size: 16)
 */
export interface KS_AM_ExactRateChange {
  /** i64 */
  OutputZeroTime: Deno.PointerValue;
  /** i32 */
  Rate: number;
}

export const sizeofKS_AM_ExactRateChange = 16;

export function allocKS_AM_ExactRateChange(data?: Partial<KS_AM_ExactRateChange>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_AM_ExactRateChange);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.OutputZeroTime !== undefined) view.setBigInt64(0, BigInt(data.OutputZeroTime), true);
  // 0x08: i32
  if (data?.Rate !== undefined) view.setInt32(8, Number(data.Rate), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSJACK_DESCRIPTION (size: 32)
 */
export interface KSJACK_DESCRIPTION {
  /** u32 */
  ChannelMapping: number;
  /** u32 */
  Color: number;
  /** Windows.Win32.Media.KernelStreaming.EPcxConnectionType */
  ConnectionType: EPcxConnectionType;
  /** Windows.Win32.Media.KernelStreaming.EPcxGeoLocation */
  GeoLocation: EPcxGeoLocation;
  /** Windows.Win32.Media.KernelStreaming.EPcxGenLocation */
  GenLocation: EPcxGenLocation;
  /** Windows.Win32.Media.KernelStreaming.EPxcPortConnection */
  PortConnection: EPxcPortConnection;
  /** Windows.Win32.Foundation.BOOL */
  IsConnected: boolean;
}

export const sizeofKSJACK_DESCRIPTION = 32;

export function allocKSJACK_DESCRIPTION(data?: Partial<KSJACK_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSJACK_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ChannelMapping !== undefined) view.setUint32(0, Number(data.ChannelMapping), true);
  // 0x04: u32
  if (data?.Color !== undefined) view.setUint32(4, Number(data.Color), true);
  // 0x08: i32
  if (data?.ConnectionType !== undefined) view.setInt32(8, Number(data.ConnectionType), true);
  // 0x0c: i32
  if (data?.GeoLocation !== undefined) view.setInt32(12, Number(data.GeoLocation), true);
  // 0x10: i32
  if (data?.GenLocation !== undefined) view.setInt32(16, Number(data.GenLocation), true);
  // 0x14: i32
  if (data?.PortConnection !== undefined) view.setInt32(20, Number(data.PortConnection), true);
  // 0x18: i32
  if (data?.IsConnected !== undefined) view.setInt32(24, Number(data.IsConnected), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSJACK_SINK_INFORMATION (size: 40)
 */
export interface KSJACK_SINK_INFORMATION {
  /** Windows.Win32.Media.KernelStreaming.KSJACK_SINK_CONNECTIONTYPE */
  ConnType: KSJACK_SINK_CONNECTIONTYPE;
  /** u16 */
  ManufacturerId: number;
  /** u16 */
  ProductId: number;
  /** u16 */
  AudioLatency: number;
  /** Windows.Win32.Foundation.BOOL */
  HDCPCapable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AICapable: boolean;
  /** u8 */
  SinkDescriptionLength: number;
  /** array */
  SinkDescription: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  PortId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSJACK_SINK_INFORMATION = 40;

export function allocKSJACK_SINK_INFORMATION(data?: Partial<KSJACK_SINK_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSJACK_SINK_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ConnType !== undefined) view.setInt32(0, Number(data.ConnType), true);
  // 0x04: u16
  if (data?.ManufacturerId !== undefined) view.setUint16(4, Number(data.ManufacturerId), true);
  // 0x06: u16
  if (data?.ProductId !== undefined) view.setUint16(6, Number(data.ProductId), true);
  // 0x08: u16
  if (data?.AudioLatency !== undefined) view.setUint16(8, Number(data.AudioLatency), true);
  // 0x0a: i32
  if (data?.HDCPCapable !== undefined) view.setInt32(10, Number(data.HDCPCapable), true);
  // 0x0e: i32
  if (data?.AICapable !== undefined) view.setInt32(14, Number(data.AICapable), true);
  // 0x12: u8
  if (data?.SinkDescriptionLength !== undefined) view.setUint8(18, Number(data.SinkDescriptionLength));
  // 0x13: pad5
  // 0x18: pointer
  if (data?.SinkDescription !== undefined) view.setBigUint64(24, data.SinkDescription === null ? 0n : BigInt(util.toPointer(data.SinkDescription)), true);
  // 0x20: pointer
  if (data?.PortId !== undefined) view.setBigUint64(32, data.PortId === null ? 0n : BigInt(util.toPointer(data.PortId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSJACK_DESCRIPTION2 (size: 8)
 */
export interface KSJACK_DESCRIPTION2 {
  /** u32 */
  DeviceStateInfo: number;
  /** u32 */
  JackCapabilities: number;
}

export const sizeofKSJACK_DESCRIPTION2 = 8;

export function allocKSJACK_DESCRIPTION2(data?: Partial<KSJACK_DESCRIPTION2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSJACK_DESCRIPTION2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceStateInfo !== undefined) view.setUint32(0, Number(data.DeviceStateInfo), true);
  // 0x04: u32
  if (data?.JackCapabilities !== undefined) view.setUint32(4, Number(data.JackCapabilities), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOENGINE_DESCRIPTOR (size: 16)
 */
export interface KSAUDIOENGINE_DESCRIPTOR {
  /** u32 */
  nHostPinId: number;
  /** u32 */
  nOffloadPinId: number;
  /** u32 */
  nLoopbackPinId: number;
}

export const sizeofKSAUDIOENGINE_DESCRIPTOR = 16;

export function allocKSAUDIOENGINE_DESCRIPTOR(data?: Partial<KSAUDIOENGINE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOENGINE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nHostPinId !== undefined) view.setUint32(0, Number(data.nHostPinId), true);
  // 0x04: u32
  if (data?.nOffloadPinId !== undefined) view.setUint32(4, Number(data.nOffloadPinId), true);
  // 0x08: u32
  if (data?.nLoopbackPinId !== undefined) view.setUint32(8, Number(data.nLoopbackPinId), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOENGINE_BUFFER_SIZE_RANGE (size: 8)
 */
export interface KSAUDIOENGINE_BUFFER_SIZE_RANGE {
  /** u32 */
  MinBufferBytes: number;
  /** u32 */
  MaxBufferBytes: number;
}

export const sizeofKSAUDIOENGINE_BUFFER_SIZE_RANGE = 8;

export function allocKSAUDIOENGINE_BUFFER_SIZE_RANGE(data?: Partial<KSAUDIOENGINE_BUFFER_SIZE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOENGINE_BUFFER_SIZE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MinBufferBytes !== undefined) view.setUint32(0, Number(data.MinBufferBytes), true);
  // 0x04: u32
  if (data?.MaxBufferBytes !== undefined) view.setUint32(4, Number(data.MaxBufferBytes), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOENGINE_VOLUMELEVEL (size: 16)
 */
export interface KSAUDIOENGINE_VOLUMELEVEL {
  /** i32 */
  TargetVolume: number;
  /** Windows.Win32.Media.KernelStreaming.AUDIO_CURVE_TYPE */
  CurveType: AUDIO_CURVE_TYPE;
  /** u64 */
  CurveDuration: Deno.PointerValue;
}

export const sizeofKSAUDIOENGINE_VOLUMELEVEL = 16;

export function allocKSAUDIOENGINE_VOLUMELEVEL(data?: Partial<KSAUDIOENGINE_VOLUMELEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOENGINE_VOLUMELEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TargetVolume !== undefined) view.setInt32(0, Number(data.TargetVolume), true);
  // 0x04: i32
  if (data?.CurveType !== undefined) view.setInt32(4, Number(data.CurveType), true);
  // 0x08: u64
  if (data?.CurveDuration !== undefined) view.setBigUint64(8, BigInt(data.CurveDuration), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE (size: 16)
 */
export interface KSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE {
  /** Windows.Win32.Media.KernelStreaming.KSATTRIBUTE */
  AttributeHeader: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SignalProcessingMode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE = 16;

export function allocKSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE(data?: Partial<KSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AttributeHeader !== undefined) view.setBigUint64(0, data.AttributeHeader === null ? 0n : BigInt(util.toPointer(data.AttributeHeader)), true);
  // 0x08: pointer
  if (data?.SignalProcessingMode !== undefined) view.setBigUint64(8, data.SignalProcessingMode === null ? 0n : BigInt(util.toPointer(data.SignalProcessingMode)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.AUDIORESOURCEMANAGEMENT_RESOURCEGROUP (size: 16)
 */
export interface AUDIORESOURCEMANAGEMENT_RESOURCEGROUP {
  /** Windows.Win32.Foundation.BOOL */
  ResourceGroupAcquired: boolean;
  /** array */
  ResourceGroupName: Deno.PointerValue | null;
}

export const sizeofAUDIORESOURCEMANAGEMENT_RESOURCEGROUP = 16;

export function allocAUDIORESOURCEMANAGEMENT_RESOURCEGROUP(data?: Partial<AUDIORESOURCEMANAGEMENT_RESOURCEGROUP>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIORESOURCEMANAGEMENT_RESOURCEGROUP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ResourceGroupAcquired !== undefined) view.setInt32(0, Number(data.ResourceGroupAcquired), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ResourceGroupName !== undefined) view.setBigUint64(8, data.ResourceGroupName === null ? 0n : BigInt(util.toPointer(data.ResourceGroupName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOMODULE_DESCRIPTOR (size: 32)
 */
export interface KSAUDIOMODULE_DESCRIPTOR {
  /** System.Guid */
  ClassId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InstanceId: number;
  /** u32 */
  VersionMajor: number;
  /** u32 */
  VersionMinor: number;
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeofKSAUDIOMODULE_DESCRIPTOR = 32;

export function allocKSAUDIOMODULE_DESCRIPTOR(data?: Partial<KSAUDIOMODULE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOMODULE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassId !== undefined) view.setBigUint64(0, data.ClassId === null ? 0n : BigInt(util.toPointer(data.ClassId)), true);
  // 0x08: u32
  if (data?.InstanceId !== undefined) view.setUint32(8, Number(data.InstanceId), true);
  // 0x0c: u32
  if (data?.VersionMajor !== undefined) view.setUint32(12, Number(data.VersionMajor), true);
  // 0x10: u32
  if (data?.VersionMinor !== undefined) view.setUint32(16, Number(data.VersionMinor), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Name !== undefined) view.setBigUint64(24, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOMODULE_PROPERTY (size: 24)
 */
export interface KSAUDIOMODULE_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ClassId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InstanceId: number;
}

export const sizeofKSAUDIOMODULE_PROPERTY = 24;

export function allocKSAUDIOMODULE_PROPERTY(data?: Partial<KSAUDIOMODULE_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOMODULE_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.ClassId !== undefined) view.setBigUint64(8, data.ClassId === null ? 0n : BigInt(util.toPointer(data.ClassId)), true);
  // 0x10: u32
  if (data?.InstanceId !== undefined) view.setUint32(16, Number(data.InstanceId), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOMODULE_NOTIFICATION (size: 8)
 */
export interface KSAUDIOMODULE_NOTIFICATION {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSAUDIOMODULE_NOTIFICATION = 8;

export function allocKSAUDIOMODULE_NOTIFICATION(data?: Partial<KSAUDIOMODULE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOMODULE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.OPTIMAL_WEIGHT_TOTALS (size: 24)
 */
export interface OPTIMAL_WEIGHT_TOTALS {
  /** i64 */
  MinTotalNominator: Deno.PointerValue;
  /** i64 */
  MaxTotalNominator: Deno.PointerValue;
  /** i64 */
  TotalDenominator: Deno.PointerValue;
}

export const sizeofOPTIMAL_WEIGHT_TOTALS = 24;

export function allocOPTIMAL_WEIGHT_TOTALS(data?: Partial<OPTIMAL_WEIGHT_TOTALS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPTIMAL_WEIGHT_TOTALS);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.MinTotalNominator !== undefined) view.setBigInt64(0, BigInt(data.MinTotalNominator), true);
  // 0x08: i64
  if (data?.MaxTotalNominator !== undefined) view.setBigInt64(8, BigInt(data.MaxTotalNominator), true);
  // 0x10: i64
  if (data?.TotalDenominator !== undefined) view.setBigInt64(16, BigInt(data.TotalDenominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.PIPE_DIMENSIONS (size: 24)
 */
export interface PIPE_DIMENSIONS {
  /** Windows.Win32.Media.KernelStreaming.KS_COMPRESSION */
  AllocatorPin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_COMPRESSION */
  MaxExpansionPin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_COMPRESSION */
  EndPin: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPIPE_DIMENSIONS = 24;

export function allocPIPE_DIMENSIONS(data?: Partial<PIPE_DIMENSIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofPIPE_DIMENSIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllocatorPin !== undefined) view.setBigUint64(0, data.AllocatorPin === null ? 0n : BigInt(util.toPointer(data.AllocatorPin)), true);
  // 0x08: pointer
  if (data?.MaxExpansionPin !== undefined) view.setBigUint64(8, data.MaxExpansionPin === null ? 0n : BigInt(util.toPointer(data.MaxExpansionPin)), true);
  // 0x10: pointer
  if (data?.EndPin !== undefined) view.setBigUint64(16, data.EndPin === null ? 0n : BigInt(util.toPointer(data.EndPin)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.PIPE_TERMINATION (size: 40)
 */
export interface PIPE_TERMINATION {
  /** u32 */
  Flags: number;
  /** u32 */
  OutsideFactors: number;
  /** u32 */
  Weigth: number;
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE */
  PhysicalRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE_WEIGHTED */
  OptimalRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_COMPRESSION */
  Compression: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPIPE_TERMINATION = 40;

export function allocPIPE_TERMINATION(data?: Partial<PIPE_TERMINATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPIPE_TERMINATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.OutsideFactors !== undefined) view.setUint32(4, Number(data.OutsideFactors), true);
  // 0x08: u32
  if (data?.Weigth !== undefined) view.setUint32(8, Number(data.Weigth), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.PhysicalRange !== undefined) view.setBigUint64(16, data.PhysicalRange === null ? 0n : BigInt(util.toPointer(data.PhysicalRange)), true);
  // 0x18: pointer
  if (data?.OptimalRange !== undefined) view.setBigUint64(24, data.OptimalRange === null ? 0n : BigInt(util.toPointer(data.OptimalRange)), true);
  // 0x20: pointer
  if (data?.Compression !== undefined) view.setBigUint64(32, data.Compression === null ? 0n : BigInt(util.toPointer(data.Compression)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.ALLOCATOR_PROPERTIES_EX (size: 128)
 */
export interface ALLOCATOR_PROPERTIES_EX {
  /** i32 */
  cBuffers: number;
  /** i32 */
  cbBuffer: number;
  /** i32 */
  cbAlign: number;
  /** i32 */
  cbPrefix: number;
  /** System.Guid */
  MemoryType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  BusType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.PIPE_STATE */
  State: PIPE_STATE;
  /** Windows.Win32.Media.KernelStreaming.PIPE_TERMINATION */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.PIPE_TERMINATION */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Strategy: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Weight: number;
  /** Windows.Win32.Media.KernelStreaming.KS_LogicalMemoryType */
  LogicalMemoryType: KS_LogicalMemoryType;
  /** Windows.Win32.Media.KernelStreaming.PIPE_ALLOCATOR_PLACE */
  AllocatorPlace: PIPE_ALLOCATOR_PLACE;
  /** Windows.Win32.Media.KernelStreaming.PIPE_DIMENSIONS */
  Dimensions: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE */
  PhysicalRange: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  PrevSegment: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  CountNextSegments: number;
  /** ptr */
  NextSegments: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  InsideFactors: number;
  /** u32 */
  NumberPins: number;
}

export const sizeofALLOCATOR_PROPERTIES_EX = 128;

export function allocALLOCATOR_PROPERTIES_EX(data?: Partial<ALLOCATOR_PROPERTIES_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofALLOCATOR_PROPERTIES_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cBuffers !== undefined) view.setInt32(0, Number(data.cBuffers), true);
  // 0x04: i32
  if (data?.cbBuffer !== undefined) view.setInt32(4, Number(data.cbBuffer), true);
  // 0x08: i32
  if (data?.cbAlign !== undefined) view.setInt32(8, Number(data.cbAlign), true);
  // 0x0c: i32
  if (data?.cbPrefix !== undefined) view.setInt32(12, Number(data.cbPrefix), true);
  // 0x10: pointer
  if (data?.MemoryType !== undefined) view.setBigUint64(16, data.MemoryType === null ? 0n : BigInt(util.toPointer(data.MemoryType)), true);
  // 0x18: pointer
  if (data?.BusType !== undefined) view.setBigUint64(24, data.BusType === null ? 0n : BigInt(util.toPointer(data.BusType)), true);
  // 0x20: i32
  if (data?.State !== undefined) view.setInt32(32, Number(data.State), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Input !== undefined) view.setBigUint64(40, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x30: pointer
  if (data?.Output !== undefined) view.setBigUint64(48, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x38: u32
  if (data?.Strategy !== undefined) view.setUint32(56, Number(data.Strategy), true);
  // 0x3c: u32
  if (data?.Flags !== undefined) view.setUint32(60, Number(data.Flags), true);
  // 0x40: u32
  if (data?.Weight !== undefined) view.setUint32(64, Number(data.Weight), true);
  // 0x44: i32
  if (data?.LogicalMemoryType !== undefined) view.setInt32(68, Number(data.LogicalMemoryType), true);
  // 0x48: i32
  if (data?.AllocatorPlace !== undefined) view.setInt32(72, Number(data.AllocatorPlace), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.Dimensions !== undefined) view.setBigUint64(80, data.Dimensions === null ? 0n : BigInt(util.toPointer(data.Dimensions)), true);
  // 0x58: pointer
  if (data?.PhysicalRange !== undefined) view.setBigUint64(88, data.PhysicalRange === null ? 0n : BigInt(util.toPointer(data.PhysicalRange)), true);
  // 0x60: pointer
  if (data?.PrevSegment !== undefined) view.setBigUint64(96, data.PrevSegment === null ? 0n : BigInt(util.toPointer(data.PrevSegment)), true);
  // 0x68: u32
  if (data?.CountNextSegments !== undefined) view.setUint32(104, Number(data.CountNextSegments), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.NextSegments !== undefined) view.setBigUint64(112, data.NextSegments === null ? 0n : BigInt(util.toPointer(data.NextSegments)), true);
  // 0x78: u32
  if (data?.InsideFactors !== undefined) view.setUint32(120, Number(data.InsideFactors), true);
  // 0x7c: u32
  if (data?.NumberPins !== undefined) view.setUint32(124, Number(data.NumberPins), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FORMAT (size: 8)
 */
export interface D3D12_VIDEO_FORMAT {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  ColorSpace: DXGI_COLOR_SPACE_TYPE;
}

export const sizeofD3D12_VIDEO_FORMAT = 8;

export function allocD3D12_VIDEO_FORMAT(data?: Partial<D3D12_VIDEO_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ColorSpace !== undefined) view.setInt32(4, Number(data.ColorSpace), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SAMPLE (size: 16)
 */
export interface D3D12_VIDEO_SAMPLE {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FORMAT */
  Format: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_SAMPLE = 16;

export function allocD3D12_VIDEO_SAMPLE(data?: Partial<D3D12_VIDEO_SAMPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_SAMPLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: pointer
  if (data?.Format !== undefined) view.setBigUint64(8, data.Format === null ? 0n : BigInt(util.toPointer(data.Format)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION (size: 16)
 */
export interface D3D12_VIDEO_DECODE_CONFIGURATION {
  /** System.Guid */
  DecodeProfile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_BITSTREAM_ENCRYPTION_TYPE */
  BitstreamEncryption: D3D12_BITSTREAM_ENCRYPTION_TYPE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE */
  InterlaceType: D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE;
}

export const sizeofD3D12_VIDEO_DECODE_CONFIGURATION = 16;

export function allocD3D12_VIDEO_DECODE_CONFIGURATION(data?: Partial<D3D12_VIDEO_DECODE_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DecodeProfile !== undefined) view.setBigUint64(0, data.DecodeProfile === null ? 0n : BigInt(util.toPointer(data.DecodeProfile)), true);
  // 0x08: i32
  if (data?.BitstreamEncryption !== undefined) view.setInt32(8, Number(data.BitstreamEncryption), true);
  // 0x0c: i32
  if (data?.InterlaceType !== undefined) view.setInt32(12, Number(data.InterlaceType), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODER_DESC (size: 16)
 */
export interface D3D12_VIDEO_DECODER_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_DECODER_DESC = 16;

export function allocD3D12_VIDEO_DECODER_DESC(data?: Partial<D3D12_VIDEO_DECODER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(util.toPointer(data.Configuration)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL (size: 8)
 */
export interface DXGI_RATIONAL {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXGI_RATIONAL = 8;

export function allocDXGI_RATIONAL(data?: Partial<DXGI_RATIONAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_RATIONAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC (size: 48)
 */
export interface D3D12_VIDEO_DECODER_HEAP_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DecodeWidth: number;
  /** u32 */
  DecodeHeight: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BitRate: number;
  /** u32 */
  MaxDecodePictureBufferCount: number;
}

export const sizeofD3D12_VIDEO_DECODER_HEAP_DESC = 48;

export function allocD3D12_VIDEO_DECODER_HEAP_DESC(data?: Partial<D3D12_VIDEO_DECODER_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODER_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(util.toPointer(data.Configuration)), true);
  // 0x10: u32
  if (data?.DecodeWidth !== undefined) view.setUint32(16, Number(data.DecodeWidth), true);
  // 0x14: u32
  if (data?.DecodeHeight !== undefined) view.setUint32(20, Number(data.DecodeHeight), true);
  // 0x18: u32
  if (data?.Format !== undefined) view.setUint32(24, Number(data.Format), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(32, data.FrameRate === null ? 0n : BigInt(util.toPointer(data.FrameRate)), true);
  // 0x28: u32
  if (data?.BitRate !== undefined) view.setUint32(40, Number(data.BitRate), true);
  // 0x2c: u32
  if (data?.MaxDecodePictureBufferCount !== undefined) view.setUint32(44, Number(data.MaxDecodePictureBufferCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE (size: 16)
 */
export interface D3D12_VIDEO_SIZE_RANGE {
  /** u32 */
  MaxWidth: number;
  /** u32 */
  MaxHeight: number;
  /** u32 */
  MinWidth: number;
  /** u32 */
  MinHeight: number;
}

export const sizeofD3D12_VIDEO_SIZE_RANGE = 16;

export function allocD3D12_VIDEO_SIZE_RANGE(data?: Partial<D3D12_VIDEO_SIZE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_SIZE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxWidth !== undefined) view.setUint32(0, Number(data.MaxWidth), true);
  // 0x04: u32
  if (data?.MaxHeight !== undefined) view.setUint32(4, Number(data.MaxHeight), true);
  // 0x08: u32
  if (data?.MinWidth !== undefined) view.setUint32(8, Number(data.MinWidth), true);
  // 0x0c: u32
  if (data?.MinHeight !== undefined) view.setUint32(12, Number(data.MinHeight), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING (size: 8)
 */
export interface D3D12_VIDEO_PROCESS_ALPHA_BLENDING {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** f32 */
  Alpha: number;
}

export const sizeofD3D12_VIDEO_PROCESS_ALPHA_BLENDING = 8;

export function allocD3D12_VIDEO_PROCESS_ALPHA_BLENDING(data?: Partial<D3D12_VIDEO_PROCESS_ALPHA_BLENDING>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_ALPHA_BLENDING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: f32
  if (data?.Alpha !== undefined) view.setFloat32(4, Number(data.Alpha), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_LUMA_KEY (size: 16)
 */
export interface D3D12_VIDEO_PROCESS_LUMA_KEY {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** f32 */
  Lower: number;
  /** f32 */
  Upper: number;
}

export const sizeofD3D12_VIDEO_PROCESS_LUMA_KEY = 16;

export function allocD3D12_VIDEO_PROCESS_LUMA_KEY(data?: Partial<D3D12_VIDEO_PROCESS_LUMA_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_LUMA_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: f32
  if (data?.Lower !== undefined) view.setFloat32(4, Number(data.Lower), true);
  // 0x08: f32
  if (data?.Upper !== undefined) view.setFloat32(8, Number(data.Upper), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC (size: 96)
 */
export interface D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  ColorSpace: DXGI_COLOR_SPACE_TYPE;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  SourceAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  DestinationAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  SourceSizeRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  DestinationSizeRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  EnableOrientation: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS */
  FilterFlags: D3D12_VIDEO_PROCESS_FILTER_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT */
  StereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE */
  FieldType: D3D12_VIDEO_FIELD_TYPE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS */
  DeinterlaceMode: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
  /** Windows.Win32.Foundation.BOOL */
  EnableAlphaBlending: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_LUMA_KEY */
  LumaKey: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumPastFrames: number;
  /** u32 */
  NumFutureFrames: number;
  /** Windows.Win32.Foundation.BOOL */
  EnableAutoProcessing: boolean;
}

export const sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC = 96;

export function allocD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC(data?: Partial<D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ColorSpace !== undefined) view.setInt32(4, Number(data.ColorSpace), true);
  // 0x08: pointer
  if (data?.SourceAspectRatio !== undefined) view.setBigUint64(8, data.SourceAspectRatio === null ? 0n : BigInt(util.toPointer(data.SourceAspectRatio)), true);
  // 0x10: pointer
  if (data?.DestinationAspectRatio !== undefined) view.setBigUint64(16, data.DestinationAspectRatio === null ? 0n : BigInt(util.toPointer(data.DestinationAspectRatio)), true);
  // 0x18: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(24, data.FrameRate === null ? 0n : BigInt(util.toPointer(data.FrameRate)), true);
  // 0x20: pointer
  if (data?.SourceSizeRange !== undefined) view.setBigUint64(32, data.SourceSizeRange === null ? 0n : BigInt(util.toPointer(data.SourceSizeRange)), true);
  // 0x28: pointer
  if (data?.DestinationSizeRange !== undefined) view.setBigUint64(40, data.DestinationSizeRange === null ? 0n : BigInt(util.toPointer(data.DestinationSizeRange)), true);
  // 0x30: i32
  if (data?.EnableOrientation !== undefined) view.setInt32(48, Number(data.EnableOrientation), true);
  // 0x34: u32
  if (data?.FilterFlags !== undefined) view.setUint32(52, Number(data.FilterFlags), true);
  // 0x38: i32
  if (data?.StereoFormat !== undefined) view.setInt32(56, Number(data.StereoFormat), true);
  // 0x3c: i32
  if (data?.FieldType !== undefined) view.setInt32(60, Number(data.FieldType), true);
  // 0x40: u32
  if (data?.DeinterlaceMode !== undefined) view.setUint32(64, Number(data.DeinterlaceMode), true);
  // 0x44: i32
  if (data?.EnableAlphaBlending !== undefined) view.setInt32(68, Number(data.EnableAlphaBlending), true);
  // 0x48: pointer
  if (data?.LumaKey !== undefined) view.setBigUint64(72, data.LumaKey === null ? 0n : BigInt(util.toPointer(data.LumaKey)), true);
  // 0x50: u32
  if (data?.NumPastFrames !== undefined) view.setUint32(80, Number(data.NumPastFrames), true);
  // 0x54: u32
  if (data?.NumFutureFrames !== undefined) view.setUint32(84, Number(data.NumFutureFrames), true);
  // 0x58: i32
  if (data?.EnableAutoProcessing !== undefined) view.setInt32(88, Number(data.EnableAutoProcessing), true);
  // 0x5c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC (size: 40)
 */
export interface D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  ColorSpace: DXGI_COLOR_SPACE_TYPE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE */
  AlphaFillMode: D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE;
  /** u32 */
  AlphaFillModeSourceStreamIndex: number;
  /** array */
  BackgroundColor: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  EnableStereo: boolean;
}

export const sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC = 40;

export function allocD3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC(data?: Partial<D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ColorSpace !== undefined) view.setInt32(4, Number(data.ColorSpace), true);
  // 0x08: i32
  if (data?.AlphaFillMode !== undefined) view.setInt32(8, Number(data.AlphaFillMode), true);
  // 0x0c: u32
  if (data?.AlphaFillModeSourceStreamIndex !== undefined) view.setUint32(12, Number(data.AlphaFillModeSourceStreamIndex), true);
  // 0x10: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(16, data.BackgroundColor === null ? 0n : BigInt(util.toPointer(data.BackgroundColor)), true);
  // 0x18: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(24, data.FrameRate === null ? 0n : BigInt(util.toPointer(data.FrameRate)), true);
  // 0x20: i32
  if (data?.EnableStereo !== undefined) view.setInt32(32, Number(data.EnableStereo), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT (size: 56)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  DecodeFormat: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BitRate: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_DECODE_SUPPORT_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS */
  ConfigurationFlags: D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_TIER */
  DecodeTier: D3D12_VIDEO_DECODE_TIER;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT = 56;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(util.toPointer(data.Configuration)), true);
  // 0x10: u32
  if (data?.Width !== undefined) view.setUint32(16, Number(data.Width), true);
  // 0x14: u32
  if (data?.Height !== undefined) view.setUint32(20, Number(data.Height), true);
  // 0x18: u32
  if (data?.DecodeFormat !== undefined) view.setUint32(24, Number(data.DecodeFormat), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(32, data.FrameRate === null ? 0n : BigInt(util.toPointer(data.FrameRate)), true);
  // 0x28: u32
  if (data?.BitRate !== undefined) view.setUint32(40, Number(data.BitRate), true);
  // 0x2c: u32
  if (data?.SupportFlags !== undefined) view.setUint32(44, Number(data.SupportFlags), true);
  // 0x30: u32
  if (data?.ConfigurationFlags !== undefined) view.setUint32(48, Number(data.ConfigurationFlags), true);
  // 0x34: i32
  if (data?.DecodeTier !== undefined) view.setInt32(52, Number(data.DecodeTier), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  ProfileCount: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.ProfileCount !== undefined) view.setUint32(4, Number(data.ProfileCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  ProfileCount: number;
  /** ptr */
  pProfiles: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.ProfileCount !== undefined) view.setUint32(4, Number(data.ProfileCount), true);
  // 0x08: pointer
  if (data?.pProfiles !== undefined) view.setBigUint64(8, data.pProfiles === null ? 0n : BigInt(util.toPointer(data.pProfiles)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FormatCount: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(util.toPointer(data.Configuration)), true);
  // 0x10: u32
  if (data?.FormatCount !== undefined) view.setUint32(16, Number(data.FormatCount), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FormatCount: number;
  /** ptr */
  pOutputFormats: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(util.toPointer(data.Configuration)), true);
  // 0x10: u32
  if (data?.FormatCount !== undefined) view.setUint32(16, Number(data.FormatCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pOutputFormats !== undefined) view.setBigUint64(24, data.pOutputFormats === null ? 0n : BigInt(util.toPointer(data.pOutputFormats)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE {
  /** Windows.Win32.Foundation.BOOL */
  IOCoherent: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ARCHITECTURE = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_ARCHITECTURE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ARCHITECTURE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.IOCoherent !== undefined) view.setInt32(0, Number(data.IOCoherent), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM (size: 40)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM {
  /** u32 */
  NodeIndex: number;
  /** System.Guid */
  DecodeProfile: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  DecodeFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS */
  Components: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS;
  /** u32 */
  BinCount: number;
  /** u32 */
  CounterBitDepth: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM = 40;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DecodeProfile !== undefined) view.setBigUint64(8, data.DecodeProfile === null ? 0n : BigInt(util.toPointer(data.DecodeProfile)), true);
  // 0x10: u32
  if (data?.Width !== undefined) view.setUint32(16, Number(data.Width), true);
  // 0x14: u32
  if (data?.Height !== undefined) view.setUint32(20, Number(data.Height), true);
  // 0x18: u32
  if (data?.DecodeFormat !== undefined) view.setUint32(24, Number(data.DecodeFormat), true);
  // 0x1c: u32
  if (data?.Components !== undefined) view.setUint32(28, Number(data.Components), true);
  // 0x20: u32
  if (data?.BinCount !== undefined) view.setUint32(32, Number(data.BinCount), true);
  // 0x24: u32
  if (data?.CounterBitDepth !== undefined) view.setUint32(36, Number(data.CounterBitDepth), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT (size: 16)
 */
export interface D3D12_VIDEO_SCALE_SUPPORT {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  OutputSizeRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT_FLAGS */
  Flags: D3D12_VIDEO_SCALE_SUPPORT_FLAGS;
}

export const sizeofD3D12_VIDEO_SCALE_SUPPORT = 16;

export function allocD3D12_VIDEO_SCALE_SUPPORT(data?: Partial<D3D12_VIDEO_SCALE_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_SCALE_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OutputSizeRange !== undefined) view.setBigUint64(0, data.OutputSizeRange === null ? 0n : BigInt(util.toPointer(data.OutputSizeRange)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT (size: 56)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SAMPLE */
  DecodeSample: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FORMAT */
  OutputFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BitRate: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT */
  ScaleSupport: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT = 56;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(util.toPointer(data.Configuration)), true);
  // 0x10: pointer
  if (data?.DecodeSample !== undefined) view.setBigUint64(16, data.DecodeSample === null ? 0n : BigInt(util.toPointer(data.DecodeSample)), true);
  // 0x18: pointer
  if (data?.OutputFormat !== undefined) view.setBigUint64(24, data.OutputFormat === null ? 0n : BigInt(util.toPointer(data.OutputFormat)), true);
  // 0x20: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(32, data.FrameRate === null ? 0n : BigInt(util.toPointer(data.FrameRate)), true);
  // 0x28: u32
  if (data?.BitRate !== undefined) view.setUint32(40, Number(data.BitRate), true);
  // 0x2c: u32
  if (data?.SupportFlags !== undefined) view.setUint32(44, Number(data.SupportFlags), true);
  // 0x30: pointer
  if (data?.ScaleSupport !== undefined) view.setBigUint64(48, data.ScaleSupport === null ? 0n : BigInt(util.toPointer(data.ScaleSupport)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC */
  VideoDecoderHeapDesc: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  MemoryPoolL0Size: Deno.PointerValue;
  /** u64 */
  MemoryPoolL1Size: Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VideoDecoderHeapDesc !== undefined) view.setBigUint64(0, data.VideoDecoderHeapDesc === null ? 0n : BigInt(util.toPointer(data.VideoDecoderHeapDesc)), true);
  // 0x08: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(8, BigInt(data.MemoryPoolL0Size), true);
  // 0x10: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(16, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE {
  /** u32 */
  NodeMask: number;
  /** ptr */
  pOutputStreamDesc: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumInputStreamDescs: number;
  /** ptr */
  pInputStreamDescs: Deno.PointerValue | Uint8Array | null;
  /** u64 */
  MemoryPoolL0Size: Deno.PointerValue;
  /** u64 */
  MemoryPoolL1Size: Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pOutputStreamDesc !== undefined) view.setBigUint64(8, data.pOutputStreamDesc === null ? 0n : BigInt(util.toPointer(data.pOutputStreamDesc)), true);
  // 0x10: u32
  if (data?.NumInputStreamDescs !== undefined) view.setUint32(16, Number(data.NumInputStreamDescs), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pInputStreamDescs !== undefined) view.setBigUint64(24, data.pInputStreamDescs === null ? 0n : BigInt(util.toPointer(data.pInputStreamDescs)), true);
  // 0x20: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(32, BigInt(data.MemoryPoolL0Size), true);
  // 0x28: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(40, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS (size: 32)
 */
export interface D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS {
  /** u64 */
  Status: Deno.PointerValue;
  /** u64 */
  NumMacroblocksAffected: Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BitRate: number;
}

export const sizeofD3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS = 32;

export function allocD3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS(data?: Partial<D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Status !== undefined) view.setBigUint64(0, BigInt(data.Status), true);
  // 0x08: u64
  if (data?.NumMacroblocksAffected !== undefined) view.setBigUint64(8, BigInt(data.NumMacroblocksAffected), true);
  // 0x10: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(16, data.FrameRate === null ? 0n : BigInt(util.toPointer(data.FrameRate)), true);
  // 0x18: u32
  if (data?.BitRate !== undefined) view.setUint32(24, Number(data.BitRate), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_FRAME_ARGUMENT (size: 16)
 */
export interface D3D12_VIDEO_DECODE_FRAME_ARGUMENT {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_ARGUMENT_TYPE */
  Type: D3D12_VIDEO_DECODE_ARGUMENT_TYPE;
  /** u32 */
  Size: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_VIDEO_DECODE_FRAME_ARGUMENT = 16;

export function allocD3D12_VIDEO_DECODE_FRAME_ARGUMENT(data?: Partial<D3D12_VIDEO_DECODE_FRAME_ARGUMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_FRAME_ARGUMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_REFERENCE_FRAMES (size: 32)
 */
export interface D3D12_VIDEO_DECODE_REFERENCE_FRAMES {
  /** u32 */
  NumTexture2Ds: number;
  /** ptr */
  ppTexture2Ds: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSubresources: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ppHeaps: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_VIDEO_DECODE_REFERENCE_FRAMES = 32;

export function allocD3D12_VIDEO_DECODE_REFERENCE_FRAMES(data?: Partial<D3D12_VIDEO_DECODE_REFERENCE_FRAMES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_REFERENCE_FRAMES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumTexture2Ds !== undefined) view.setUint32(0, Number(data.NumTexture2Ds), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ppTexture2Ds !== undefined) view.setBigUint64(8, data.ppTexture2Ds === null ? 0n : BigInt(util.toPointer(data.ppTexture2Ds)), true);
  // 0x10: pointer
  if (data?.pSubresources !== undefined) view.setBigUint64(16, data.pSubresources === null ? 0n : BigInt(util.toPointer(data.pSubresources)), true);
  // 0x18: pointer
  if (data?.ppHeaps !== undefined) view.setBigUint64(24, data.ppHeaps === null ? 0n : BigInt(util.toPointer(data.ppHeaps)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM (size: 24)
 */
export interface D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pBuffer: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Offset: Deno.PointerValue;
  /** u64 */
  Size: Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM = 24;

export function allocD3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM(data?: Partial<D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(util.toPointer(data.pBuffer)), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, BigInt(data.Offset), true);
  // 0x10: u64
  if (data?.Size !== undefined) view.setBigUint64(16, BigInt(data.Size), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS (size: 32)
 */
export interface D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pReferenceTexture2D: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ReferenceSubresource: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  OutputColorSpace: DXGI_COLOR_SPACE_TYPE;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  DecodeColorSpace: DXGI_COLOR_SPACE_TYPE;
}

export const sizeofD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS = 32;

export function allocD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS(data?: Partial<D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pReferenceTexture2D !== undefined) view.setBigUint64(8, data.pReferenceTexture2D === null ? 0n : BigInt(util.toPointer(data.pReferenceTexture2D)), true);
  // 0x10: u32
  if (data?.ReferenceSubresource !== undefined) view.setUint32(16, Number(data.ReferenceSubresource), true);
  // 0x14: i32
  if (data?.OutputColorSpace !== undefined) view.setInt32(20, Number(data.OutputColorSpace), true);
  // 0x18: i32
  if (data?.DecodeColorSpace !== undefined) view.setInt32(24, Number(data.DecodeColorSpace), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS (size: 40)
 */
export interface D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS {
  /** u32 */
  NumFrameArguments: number;
  /** array */
  FrameArguments: Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_REFERENCE_FRAMES */
  ReferenceFrames: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM */
  CompressedBitstream: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.ID3D12VideoDecoderHeap */
  pHeap: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS = 40;

export function allocD3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS(data?: Partial<D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumFrameArguments !== undefined) view.setUint32(0, Number(data.NumFrameArguments), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FrameArguments !== undefined) view.setBigUint64(8, data.FrameArguments === null ? 0n : BigInt(util.toPointer(data.FrameArguments)), true);
  // 0x10: pointer
  if (data?.ReferenceFrames !== undefined) view.setBigUint64(16, data.ReferenceFrames === null ? 0n : BigInt(util.toPointer(data.ReferenceFrames)), true);
  // 0x18: pointer
  if (data?.CompressedBitstream !== undefined) view.setBigUint64(24, data.CompressedBitstream === null ? 0n : BigInt(util.toPointer(data.CompressedBitstream)), true);
  // 0x20: pointer
  if (data?.pHeap !== undefined) view.setBigUint64(32, data.pHeap === null ? 0n : BigInt(util.toPointer(data.pHeap)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS (size: 24)
 */
export interface D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pOutputTexture2D: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputSubresource: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS */
  ConversionArguments: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS = 24;

export function allocD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS(data?: Partial<D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pOutputTexture2D !== undefined) view.setBigUint64(0, data.pOutputTexture2D === null ? 0n : BigInt(util.toPointer(data.pOutputTexture2D)), true);
  // 0x08: u32
  if (data?.OutputSubresource !== undefined) view.setUint32(8, Number(data.OutputSubresource), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ConversionArguments !== undefined) view.setBigUint64(16, data.ConversionArguments === null ? 0n : BigInt(util.toPointer(data.ConversionArguments)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_RANGE (size: 16)
 */
export interface D3D12_VIDEO_PROCESS_FILTER_RANGE {
  /** i32 */
  Minimum: number;
  /** i32 */
  Maximum: number;
  /** i32 */
  Default: number;
  /** f32 */
  Multiplier: number;
}

export const sizeofD3D12_VIDEO_PROCESS_FILTER_RANGE = 16;

export function allocD3D12_VIDEO_PROCESS_FILTER_RANGE(data?: Partial<D3D12_VIDEO_PROCESS_FILTER_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_FILTER_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Minimum !== undefined) view.setInt32(0, Number(data.Minimum), true);
  // 0x04: i32
  if (data?.Maximum !== undefined) view.setInt32(4, Number(data.Maximum), true);
  // 0x08: i32
  if (data?.Default !== undefined) view.setInt32(8, Number(data.Default), true);
  // 0x0c: f32
  if (data?.Multiplier !== undefined) view.setFloat32(12, Number(data.Multiplier), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT (size: 96)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SAMPLE */
  InputSample: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE */
  InputFieldType: D3D12_VIDEO_FIELD_TYPE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT */
  InputStereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  InputFrameRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FORMAT */
  OutputFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT */
  OutputStereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  OutputFrameRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_PROCESS_SUPPORT_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT */
  ScaleSupport: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FEATURE_FLAGS */
  FeatureSupport: D3D12_VIDEO_PROCESS_FEATURE_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS */
  DeinterlaceSupport: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS */
  AutoProcessingSupport: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS */
  FilterSupport: D3D12_VIDEO_PROCESS_FILTER_FLAGS;
  /** array */
  FilterRangeSupport: Deno.PointerValue | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT = 96;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.InputSample !== undefined) view.setBigUint64(8, data.InputSample === null ? 0n : BigInt(util.toPointer(data.InputSample)), true);
  // 0x10: i32
  if (data?.InputFieldType !== undefined) view.setInt32(16, Number(data.InputFieldType), true);
  // 0x14: i32
  if (data?.InputStereoFormat !== undefined) view.setInt32(20, Number(data.InputStereoFormat), true);
  // 0x18: pointer
  if (data?.InputFrameRate !== undefined) view.setBigUint64(24, data.InputFrameRate === null ? 0n : BigInt(util.toPointer(data.InputFrameRate)), true);
  // 0x20: pointer
  if (data?.OutputFormat !== undefined) view.setBigUint64(32, data.OutputFormat === null ? 0n : BigInt(util.toPointer(data.OutputFormat)), true);
  // 0x28: i32
  if (data?.OutputStereoFormat !== undefined) view.setInt32(40, Number(data.OutputStereoFormat), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.OutputFrameRate !== undefined) view.setBigUint64(48, data.OutputFrameRate === null ? 0n : BigInt(util.toPointer(data.OutputFrameRate)), true);
  // 0x38: u32
  if (data?.SupportFlags !== undefined) view.setUint32(56, Number(data.SupportFlags), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.ScaleSupport !== undefined) view.setBigUint64(64, data.ScaleSupport === null ? 0n : BigInt(util.toPointer(data.ScaleSupport)), true);
  // 0x48: u32
  if (data?.FeatureSupport !== undefined) view.setUint32(72, Number(data.FeatureSupport), true);
  // 0x4c: u32
  if (data?.DeinterlaceSupport !== undefined) view.setUint32(76, Number(data.DeinterlaceSupport), true);
  // 0x50: u32
  if (data?.AutoProcessingSupport !== undefined) view.setUint32(80, Number(data.AutoProcessingSupport), true);
  // 0x54: u32
  if (data?.FilterSupport !== undefined) view.setUint32(84, Number(data.FilterSupport), true);
  // 0x58: pointer
  if (data?.FilterRangeSupport !== undefined) view.setBigUint64(88, data.FilterRangeSupport === null ? 0n : BigInt(util.toPointer(data.FilterRangeSupport)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  MaxInputStreams: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.MaxInputStreams !== undefined) view.setUint32(4, Number(data.MaxInputStreams), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS */
  DeinterlaceMode: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS */
  Filters: D3D12_VIDEO_PROCESS_FILTER_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FEATURE_FLAGS */
  FeatureSupport: D3D12_VIDEO_PROCESS_FEATURE_FLAGS;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  InputFrameRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  OutputFrameRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  EnableAutoProcessing: boolean;
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.DeinterlaceMode !== undefined) view.setUint32(4, Number(data.DeinterlaceMode), true);
  // 0x08: u32
  if (data?.Filters !== undefined) view.setUint32(8, Number(data.Filters), true);
  // 0x0c: u32
  if (data?.FeatureSupport !== undefined) view.setUint32(12, Number(data.FeatureSupport), true);
  // 0x10: pointer
  if (data?.InputFrameRate !== undefined) view.setBigUint64(16, data.InputFrameRate === null ? 0n : BigInt(util.toPointer(data.InputFrameRate)), true);
  // 0x18: pointer
  if (data?.OutputFrameRate !== undefined) view.setBigUint64(24, data.OutputFrameRate === null ? 0n : BigInt(util.toPointer(data.OutputFrameRate)), true);
  // 0x20: i32
  if (data?.EnableAutoProcessing !== undefined) view.setInt32(32, Number(data.EnableAutoProcessing), true);
  // 0x24: u32
  if (data?.PastFrames !== undefined) view.setUint32(36, Number(data.PastFrames), true);
  // 0x28: u32
  if (data?.FutureFrames !== undefined) view.setUint32(40, Number(data.FutureFrames), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_REFERENCE_SET (size: 48)
 */
export interface D3D12_VIDEO_PROCESS_REFERENCE_SET {
  /** u32 */
  NumPastFrames: number;
  /** ptr */
  ppPastFrames: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pPastSubresources: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumFutureFrames: number;
  /** ptr */
  ppFutureFrames: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFutureSubresources: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_VIDEO_PROCESS_REFERENCE_SET = 48;

export function allocD3D12_VIDEO_PROCESS_REFERENCE_SET(data?: Partial<D3D12_VIDEO_PROCESS_REFERENCE_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_REFERENCE_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumPastFrames !== undefined) view.setUint32(0, Number(data.NumPastFrames), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ppPastFrames !== undefined) view.setBigUint64(8, data.ppPastFrames === null ? 0n : BigInt(util.toPointer(data.ppPastFrames)), true);
  // 0x10: pointer
  if (data?.pPastSubresources !== undefined) view.setBigUint64(16, data.pPastSubresources === null ? 0n : BigInt(util.toPointer(data.pPastSubresources)), true);
  // 0x18: u32
  if (data?.NumFutureFrames !== undefined) view.setUint32(24, Number(data.NumFutureFrames), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ppFutureFrames !== undefined) view.setBigUint64(32, data.ppFutureFrames === null ? 0n : BigInt(util.toPointer(data.ppFutureFrames)), true);
  // 0x28: pointer
  if (data?.pFutureSubresources !== undefined) view.setBigUint64(40, data.pFutureSubresources === null ? 0n : BigInt(util.toPointer(data.pFutureSubresources)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM (size: 24)
 */
export interface D3D12_VIDEO_PROCESS_TRANSFORM {
  /** Windows.Win32.Foundation.RECT */
  SourceRectangle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  DestinationRectangle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ORIENTATION */
  Orientation: D3D12_VIDEO_PROCESS_ORIENTATION;
}

export const sizeofD3D12_VIDEO_PROCESS_TRANSFORM = 24;

export function allocD3D12_VIDEO_PROCESS_TRANSFORM(data?: Partial<D3D12_VIDEO_PROCESS_TRANSFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_TRANSFORM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SourceRectangle !== undefined) view.setBigUint64(0, data.SourceRectangle === null ? 0n : BigInt(util.toPointer(data.SourceRectangle)), true);
  // 0x08: pointer
  if (data?.DestinationRectangle !== undefined) view.setBigUint64(8, data.DestinationRectangle === null ? 0n : BigInt(util.toPointer(data.DestinationRectangle)), true);
  // 0x10: i32
  if (data?.Orientation !== undefined) view.setInt32(16, Number(data.Orientation), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE (size: 8)
 */
export interface D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE {
  /** u32 */
  OutputIndex: number;
  /** u32 */
  InputFrameOrField: number;
}

export const sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_RATE = 8;

export function allocD3D12_VIDEO_PROCESS_INPUT_STREAM_RATE(data?: Partial<D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_RATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OutputIndex !== undefined) view.setUint32(0, Number(data.OutputIndex), true);
  // 0x04: u32
  if (data?.InputFrameOrField !== undefined) view.setUint32(4, Number(data.InputFrameOrField), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM (size: 24)
 */
export interface D3D12_VIDEO_PROCESS_INPUT_STREAM {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pTexture2D: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Subresource: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_REFERENCE_SET */
  ReferenceSet: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM = 24;

export function allocD3D12_VIDEO_PROCESS_INPUT_STREAM(data?: Partial<D3D12_VIDEO_PROCESS_INPUT_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pTexture2D !== undefined) view.setBigUint64(0, data.pTexture2D === null ? 0n : BigInt(util.toPointer(data.pTexture2D)), true);
  // 0x08: u32
  if (data?.Subresource !== undefined) view.setUint32(8, Number(data.Subresource), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ReferenceSet !== undefined) view.setBigUint64(16, data.ReferenceSet === null ? 0n : BigInt(util.toPointer(data.ReferenceSet)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS (size: 48)
 */
export interface D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS {
  /** array */
  InputStream: Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM */
  Transform: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS */
  Flags: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE */
  RateInfo: Uint8Array | Deno.PointerValue | null;
  /** array */
  FilterLevels: Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING */
  AlphaBlending: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS = 48;

export function allocD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS(data?: Partial<D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InputStream !== undefined) view.setBigUint64(0, data.InputStream === null ? 0n : BigInt(util.toPointer(data.InputStream)), true);
  // 0x08: pointer
  if (data?.Transform !== undefined) view.setBigUint64(8, data.Transform === null ? 0n : BigInt(util.toPointer(data.Transform)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.RateInfo !== undefined) view.setBigUint64(24, data.RateInfo === null ? 0n : BigInt(util.toPointer(data.RateInfo)), true);
  // 0x20: pointer
  if (data?.FilterLevels !== undefined) view.setBigUint64(32, data.FilterLevels === null ? 0n : BigInt(util.toPointer(data.FilterLevels)), true);
  // 0x28: pointer
  if (data?.AlphaBlending !== undefined) view.setBigUint64(40, data.AlphaBlending === null ? 0n : BigInt(util.toPointer(data.AlphaBlending)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM (size: 16)
 */
export interface D3D12_VIDEO_PROCESS_OUTPUT_STREAM {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pTexture2D: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Subresource: number;
}

export const sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM = 16;

export function allocD3D12_VIDEO_PROCESS_OUTPUT_STREAM(data?: Partial<D3D12_VIDEO_PROCESS_OUTPUT_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pTexture2D !== undefined) view.setBigUint64(0, data.pTexture2D === null ? 0n : BigInt(util.toPointer(data.pTexture2D)), true);
  // 0x08: u32
  if (data?.Subresource !== undefined) view.setUint32(8, Number(data.Subresource), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS (size: 16)
 */
export interface D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS {
  /** array */
  OutputStream: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  TargetRectangle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS = 16;

export function allocD3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS(data?: Partial<D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OutputStream !== undefined) view.setBigUint64(0, data.OutputStream === null ? 0n : BigInt(util.toPointer(data.OutputStream)), true);
  // 0x08: pointer
  if (data?.TargetRectangle !== undefined) view.setBigUint64(8, data.TargetRectangle === null ? 0n : BigInt(util.toPointer(data.TargetRectangle)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM (size: 16)
 */
export interface D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM {
  /** u64 */
  Offset: Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pBuffer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM = 16;

export function allocD3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM(data?: Partial<D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, BigInt(data.Offset), true);
  // 0x08: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(8, data.pBuffer === null ? 0n : BigInt(util.toPointer(data.pBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 (size: 40)
 */
export interface D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pReferenceTexture2D: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ReferenceSubresource: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  OutputColorSpace: DXGI_COLOR_SPACE_TYPE;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  DecodeColorSpace: DXGI_COLOR_SPACE_TYPE;
  /** u32 */
  OutputWidth: number;
  /** u32 */
  OutputHeight: number;
}

export const sizeofD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 = 40;

export function allocD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1(data?: Partial<D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pReferenceTexture2D !== undefined) view.setBigUint64(8, data.pReferenceTexture2D === null ? 0n : BigInt(util.toPointer(data.pReferenceTexture2D)), true);
  // 0x10: u32
  if (data?.ReferenceSubresource !== undefined) view.setUint32(16, Number(data.ReferenceSubresource), true);
  // 0x14: i32
  if (data?.OutputColorSpace !== undefined) view.setInt32(20, Number(data.OutputColorSpace), true);
  // 0x18: i32
  if (data?.DecodeColorSpace !== undefined) view.setInt32(24, Number(data.DecodeColorSpace), true);
  // 0x1c: u32
  if (data?.OutputWidth !== undefined) view.setUint32(28, Number(data.OutputWidth), true);
  // 0x20: u32
  if (data?.OutputHeight !== undefined) view.setUint32(32, Number(data.OutputHeight), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 (size: 32)
 */
export interface D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pOutputTexture2D: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputSubresource: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 */
  ConversionArguments: Uint8Array | Deno.PointerValue | null;
  /** array */
  Histograms: Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 = 32;

export function allocD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1(data?: Partial<D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pOutputTexture2D !== undefined) view.setBigUint64(0, data.pOutputTexture2D === null ? 0n : BigInt(util.toPointer(data.pOutputTexture2D)), true);
  // 0x08: u32
  if (data?.OutputSubresource !== undefined) view.setUint32(8, Number(data.OutputSubresource), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ConversionArguments !== undefined) view.setBigUint64(16, data.ConversionArguments === null ? 0n : BigInt(util.toPointer(data.ConversionArguments)), true);
  // 0x18: pointer
  if (data?.Histograms !== undefined) view.setBigUint64(24, data.Histograms === null ? 0n : BigInt(util.toPointer(data.Histograms)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 (size: 56)
 */
export interface D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 {
  /** array */
  InputStream: Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM */
  Transform: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS */
  Flags: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE */
  RateInfo: Uint8Array | Deno.PointerValue | null;
  /** array */
  FilterLevels: Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING */
  AlphaBlending: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE */
  FieldType: D3D12_VIDEO_FIELD_TYPE;
}

export const sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 = 56;

export function allocD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1(data?: Partial<D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InputStream !== undefined) view.setBigUint64(0, data.InputStream === null ? 0n : BigInt(util.toPointer(data.InputStream)), true);
  // 0x08: pointer
  if (data?.Transform !== undefined) view.setBigUint64(8, data.Transform === null ? 0n : BigInt(util.toPointer(data.Transform)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.RateInfo !== undefined) view.setBigUint64(24, data.RateInfo === null ? 0n : BigInt(util.toPointer(data.RateInfo)), true);
  // 0x20: pointer
  if (data?.FilterLevels !== undefined) view.setBigUint64(32, data.FilterLevels === null ? 0n : BigInt(util.toPointer(data.FilterLevels)), true);
  // 0x28: pointer
  if (data?.AlphaBlending !== undefined) view.setBigUint64(40, data.AlphaBlending === null ? 0n : BigInt(util.toPointer(data.AlphaBlending)), true);
  // 0x30: i32
  if (data?.FieldType !== undefined) view.setInt32(48, Number(data.FieldType), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  VideoDecodeSupport: boolean;
  /** Windows.Win32.Foundation.BOOL */
  VideoProcessSupport: boolean;
  /** Windows.Win32.Foundation.BOOL */
  VideoEncodeSupport: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.VideoDecodeSupport !== undefined) view.setInt32(4, Number(data.VideoDecodeSupport), true);
  // 0x08: i32
  if (data?.VideoProcessSupport !== undefined) view.setInt32(8, Number(data.VideoProcessSupport), true);
  // 0x0c: i32
  if (data?.VideoEncodeSupport !== undefined) view.setInt32(12, Number(data.VideoEncodeSupport), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS */
  BlockSizeFlags: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS */
  PrecisionFlags: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  SizeRange: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR(data?: Partial<D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.InputFormat !== undefined) view.setUint32(4, Number(data.InputFormat), true);
  // 0x08: u32
  if (data?.BlockSizeFlags !== undefined) view.setUint32(8, Number(data.BlockSizeFlags), true);
  // 0x0c: u32
  if (data?.PrecisionFlags !== undefined) view.setUint32(12, Number(data.PrecisionFlags), true);
  // 0x10: pointer
  if (data?.SizeRange !== undefined) view.setBigUint64(16, data.SizeRange === null ? 0n : BigInt(util.toPointer(data.SizeRange)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE (size: 64)
 */
export interface D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE */
  BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION */
  Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  SizeRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Protected: boolean;
  /** u64 */
  MotionVectorHeapMemoryPoolL0Size: Deno.PointerValue;
  /** u64 */
  MotionVectorHeapMemoryPoolL1Size: Deno.PointerValue;
  /** u64 */
  MotionEstimatorMemoryPoolL0Size: Deno.PointerValue;
  /** u64 */
  MotionEstimatorMemoryPoolL1Size: Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE = 64;

export function allocD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.InputFormat !== undefined) view.setUint32(4, Number(data.InputFormat), true);
  // 0x08: i32
  if (data?.BlockSize !== undefined) view.setInt32(8, Number(data.BlockSize), true);
  // 0x0c: i32
  if (data?.Precision !== undefined) view.setInt32(12, Number(data.Precision), true);
  // 0x10: pointer
  if (data?.SizeRange !== undefined) view.setBigUint64(16, data.SizeRange === null ? 0n : BigInt(util.toPointer(data.SizeRange)), true);
  // 0x18: i32
  if (data?.Protected !== undefined) view.setInt32(24, Number(data.Protected), true);
  // 0x1c: pad4
  // 0x20: u64
  if (data?.MotionVectorHeapMemoryPoolL0Size !== undefined) view.setBigUint64(32, BigInt(data.MotionVectorHeapMemoryPoolL0Size), true);
  // 0x28: u64
  if (data?.MotionVectorHeapMemoryPoolL1Size !== undefined) view.setBigUint64(40, BigInt(data.MotionVectorHeapMemoryPoolL1Size), true);
  // 0x30: u64
  if (data?.MotionEstimatorMemoryPoolL0Size !== undefined) view.setBigUint64(48, BigInt(data.MotionEstimatorMemoryPoolL0Size), true);
  // 0x38: u64
  if (data?.MotionEstimatorMemoryPoolL1Size !== undefined) view.setBigUint64(56, BigInt(data.MotionEstimatorMemoryPoolL1Size), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_DESC (size: 24)
 */
export interface D3D12_VIDEO_MOTION_ESTIMATOR_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE */
  BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION */
  Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  SizeRange: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_MOTION_ESTIMATOR_DESC = 24;

export function allocD3D12_VIDEO_MOTION_ESTIMATOR_DESC(data?: Partial<D3D12_VIDEO_MOTION_ESTIMATOR_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_MOTION_ESTIMATOR_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.InputFormat !== undefined) view.setUint32(4, Number(data.InputFormat), true);
  // 0x08: i32
  if (data?.BlockSize !== undefined) view.setInt32(8, Number(data.BlockSize), true);
  // 0x0c: i32
  if (data?.Precision !== undefined) view.setInt32(12, Number(data.Precision), true);
  // 0x10: pointer
  if (data?.SizeRange !== undefined) view.setBigUint64(16, data.SizeRange === null ? 0n : BigInt(util.toPointer(data.SizeRange)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC (size: 24)
 */
export interface D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE */
  BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION */
  Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  SizeRange: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_MOTION_VECTOR_HEAP_DESC = 24;

export function allocD3D12_VIDEO_MOTION_VECTOR_HEAP_DESC(data?: Partial<D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_MOTION_VECTOR_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.InputFormat !== undefined) view.setUint32(4, Number(data.InputFormat), true);
  // 0x08: i32
  if (data?.BlockSize !== undefined) view.setInt32(8, Number(data.BlockSize), true);
  // 0x0c: i32
  if (data?.Precision !== undefined) view.setInt32(12, Number(data.Precision), true);
  // 0x10: pointer
  if (data?.SizeRange !== undefined) view.setBigUint64(16, data.SizeRange === null ? 0n : BigInt(util.toPointer(data.SizeRange)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_RESOURCE_COORDINATE (size: 24)
 */
export interface D3D12_RESOURCE_COORDINATE {
  /** u64 */
  X: Deno.PointerValue;
  /** u32 */
  Y: number;
  /** u32 */
  Z: number;
  /** u32 */
  SubresourceIndex: number;
}

export const sizeofD3D12_RESOURCE_COORDINATE = 24;

export function allocD3D12_RESOURCE_COORDINATE(data?: Partial<D3D12_RESOURCE_COORDINATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_COORDINATE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.X !== undefined) view.setBigUint64(0, BigInt(data.X), true);
  // 0x08: u32
  if (data?.Y !== undefined) view.setUint32(8, Number(data.Y), true);
  // 0x0c: u32
  if (data?.Z !== undefined) view.setUint32(12, Number(data.Z), true);
  // 0x10: u32
  if (data?.SubresourceIndex !== undefined) view.setUint32(16, Number(data.SubresourceIndex), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT (size: 8)
 */
export interface D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT {
  /** Windows.Win32.Media.MediaFoundation.ID3D12VideoMotionVectorHeap */
  pMotionVectorHeap: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT = 8;

export function allocD3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT(data?: Partial<D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pMotionVectorHeap !== undefined) view.setBigUint64(0, data.pMotionVectorHeap === null ? 0n : BigInt(util.toPointer(data.pMotionVectorHeap)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_INPUT (size: 40)
 */
export interface D3D12_VIDEO_MOTION_ESTIMATOR_INPUT {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pInputTexture2D: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InputSubresourceIndex: number;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pReferenceTexture2D: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ReferenceSubresourceIndex: number;
  /** Windows.Win32.Media.MediaFoundation.ID3D12VideoMotionVectorHeap */
  pHintMotionVectorHeap: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_MOTION_ESTIMATOR_INPUT = 40;

export function allocD3D12_VIDEO_MOTION_ESTIMATOR_INPUT(data?: Partial<D3D12_VIDEO_MOTION_ESTIMATOR_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_MOTION_ESTIMATOR_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pInputTexture2D !== undefined) view.setBigUint64(0, data.pInputTexture2D === null ? 0n : BigInt(util.toPointer(data.pInputTexture2D)), true);
  // 0x08: u32
  if (data?.InputSubresourceIndex !== undefined) view.setUint32(8, Number(data.InputSubresourceIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pReferenceTexture2D !== undefined) view.setBigUint64(16, data.pReferenceTexture2D === null ? 0n : BigInt(util.toPointer(data.pReferenceTexture2D)), true);
  // 0x18: u32
  if (data?.ReferenceSubresourceIndex !== undefined) view.setUint32(24, Number(data.ReferenceSubresourceIndex), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pHintMotionVectorHeap !== undefined) view.setBigUint64(32, data.pHintMotionVectorHeap === null ? 0n : BigInt(util.toPointer(data.pHintMotionVectorHeap)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT (size: 16)
 */
export interface D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pMotionVectorTexture2D: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_RESOURCE_COORDINATE */
  MotionVectorCoordinate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT = 16;

export function allocD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT(data?: Partial<D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pMotionVectorTexture2D !== undefined) view.setBigUint64(0, data.pMotionVectorTexture2D === null ? 0n : BigInt(util.toPointer(data.pMotionVectorTexture2D)), true);
  // 0x08: pointer
  if (data?.MotionVectorCoordinate !== undefined) view.setBigUint64(8, data.MotionVectorCoordinate === null ? 0n : BigInt(util.toPointer(data.MotionVectorCoordinate)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT (size: 16)
 */
export interface D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT {
  /** Windows.Win32.Media.MediaFoundation.ID3D12VideoMotionVectorHeap */
  pMotionVectorHeap: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PixelWidth: number;
  /** u32 */
  PixelHeight: number;
}

export const sizeofD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT = 16;

export function allocD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT(data?: Partial<D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pMotionVectorHeap !== undefined) view.setBigUint64(0, data.pMotionVectorHeap === null ? 0n : BigInt(util.toPointer(data.pMotionVectorHeap)), true);
  // 0x08: u32
  if (data?.PixelWidth !== undefined) view.setUint32(8, Number(data.PixelWidth), true);
  // 0x0c: u32
  if (data?.PixelHeight !== undefined) view.setUint32(12, Number(data.PixelHeight), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(util.toPointer(data.Configuration)), true);
  // 0x10: u32
  if (data?.SupportFlags !== undefined) view.setUint32(16, Number(data.SupportFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.SupportFlags !== undefined) view.setUint32(4, Number(data.SupportFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES(data?: Partial<D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.SupportFlags !== undefined) view.setUint32(4, Number(data.SupportFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC */
  VideoDecoderHeapDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Protected: boolean;
  /** u64 */
  MemoryPoolL0Size: Deno.PointerValue;
  /** u64 */
  MemoryPoolL1Size: Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VideoDecoderHeapDesc !== undefined) view.setBigUint64(0, data.VideoDecoderHeapDesc === null ? 0n : BigInt(util.toPointer(data.VideoDecoderHeapDesc)), true);
  // 0x08: i32
  if (data?.Protected !== undefined) view.setInt32(8, Number(data.Protected), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(16, BigInt(data.MemoryPoolL0Size), true);
  // 0x18: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(24, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 (size: 56)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 {
  /** u32 */
  NodeMask: number;
  /** ptr */
  pOutputStreamDesc: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumInputStreamDescs: number;
  /** ptr */
  pInputStreamDescs: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  Protected: boolean;
  /** u64 */
  MemoryPoolL0Size: Deno.PointerValue;
  /** u64 */
  MemoryPoolL1Size: Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 = 56;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pOutputStreamDesc !== undefined) view.setBigUint64(8, data.pOutputStreamDesc === null ? 0n : BigInt(util.toPointer(data.pOutputStreamDesc)), true);
  // 0x10: u32
  if (data?.NumInputStreamDescs !== undefined) view.setUint32(16, Number(data.NumInputStreamDescs), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pInputStreamDescs !== undefined) view.setBigUint64(24, data.pInputStreamDescs === null ? 0n : BigInt(util.toPointer(data.pInputStreamDescs)), true);
  // 0x20: i32
  if (data?.Protected !== undefined) view.setInt32(32, Number(data.Protected), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(40, BigInt(data.MemoryPoolL0Size), true);
  // 0x30: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(48, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  CommandCount: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.CommandCount !== undefined) view.setUint32(4, Number(data.CommandCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_INFO (size: 24)
 */
export interface D3D12_VIDEO_EXTENSION_COMMAND_INFO {
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_SUPPORT_FLAGS */
  CommandListSupportFlags: D3D12_COMMAND_LIST_SUPPORT_FLAGS;
}

export const sizeofD3D12_VIDEO_EXTENSION_COMMAND_INFO = 24;

export function allocD3D12_VIDEO_EXTENSION_COMMAND_INFO(data?: Partial<D3D12_VIDEO_EXTENSION_COMMAND_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_EXTENSION_COMMAND_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(0, data.CommandId === null ? 0n : BigInt(util.toPointer(data.CommandId)), true);
  // 0x08: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.CommandListSupportFlags !== undefined) view.setUint32(16, Number(data.CommandListSupportFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  CommandCount: number;
  /** ptr */
  pCommandInfos: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.CommandCount !== undefined) view.setUint32(4, Number(data.CommandCount), true);
  // 0x08: pointer
  if (data?.pCommandInfos !== undefined) view.setBigUint64(8, data.pCommandInfos === null ? 0n : BigInt(util.toPointer(data.pCommandInfos)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT {
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE */
  Stage: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE;
  /** u32 */
  ParameterCount: number;
  /** u32 */
  ParameterPacking: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(0, data.CommandId === null ? 0n : BigInt(util.toPointer(data.CommandId)), true);
  // 0x08: i32
  if (data?.Stage !== undefined) view.setInt32(8, Number(data.Stage), true);
  // 0x0c: u32
  if (data?.ParameterCount !== undefined) view.setUint32(12, Number(data.ParameterCount), true);
  // 0x10: u32
  if (data?.ParameterPacking !== undefined) view.setUint32(16, Number(data.ParameterPacking), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO (size: 16)
 */
export interface D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE */
  Type: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS */
  Flags: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS;
}

export const sizeofD3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO = 16;

export function allocD3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO(data?: Partial<D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS {
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE */
  Stage: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE;
  /** u32 */
  ParameterCount: number;
  /** ptr */
  pParameterInfos: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(0, data.CommandId === null ? 0n : BigInt(util.toPointer(data.CommandId)), true);
  // 0x08: i32
  if (data?.Stage !== undefined) view.setInt32(8, Number(data.Stage), true);
  // 0x0c: u32
  if (data?.ParameterCount !== undefined) view.setUint32(12, Number(data.ParameterCount), true);
  // 0x10: pointer
  if (data?.pParameterInfos !== undefined) view.setBigUint64(16, data.pParameterInfos === null ? 0n : BigInt(util.toPointer(data.pParameterInfos)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pInputData: Deno.PointerValue | Uint8Array | null;
  /** usize */
  InputDataSizeInBytes: Deno.PointerValue;
  /** ptr */
  pOutputData: Deno.PointerValue | Uint8Array | null;
  /** usize */
  OutputDataSizeInBytes: Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(8, data.CommandId === null ? 0n : BigInt(util.toPointer(data.CommandId)), true);
  // 0x10: pointer
  if (data?.pInputData !== undefined) view.setBigUint64(16, data.pInputData === null ? 0n : BigInt(util.toPointer(data.pInputData)), true);
  // 0x18: usize
  if (data?.InputDataSizeInBytes !== undefined) view.setBigUint64(24, BigInt(data.InputDataSizeInBytes), true);
  // 0x20: pointer
  if (data?.pOutputData !== undefined) view.setBigUint64(32, data.pOutputData === null ? 0n : BigInt(util.toPointer(data.pOutputData)), true);
  // 0x28: usize
  if (data?.OutputDataSizeInBytes !== undefined) view.setBigUint64(40, BigInt(data.OutputDataSizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE {
  /** u32 */
  NodeIndex: number;
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pCreationParameters: Deno.PointerValue | Uint8Array | null;
  /** usize */
  CreationParametersSizeInBytes: Deno.PointerValue;
  /** u64 */
  MemoryPoolL0Size: Deno.PointerValue;
  /** u64 */
  MemoryPoolL1Size: Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(8, data.CommandId === null ? 0n : BigInt(util.toPointer(data.CommandId)), true);
  // 0x10: pointer
  if (data?.pCreationParameters !== undefined) view.setBigUint64(16, data.pCreationParameters === null ? 0n : BigInt(util.toPointer(data.pCreationParameters)), true);
  // 0x18: usize
  if (data?.CreationParametersSizeInBytes !== undefined) view.setBigUint64(24, BigInt(data.CreationParametersSizeInBytes), true);
  // 0x20: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(32, BigInt(data.MemoryPoolL0Size), true);
  // 0x28: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(40, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_DESC (size: 16)
 */
export interface D3D12_VIDEO_EXTENSION_COMMAND_DESC {
  /** u32 */
  NodeMask: number;
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_EXTENSION_COMMAND_DESC = 16;

export function allocD3D12_VIDEO_EXTENSION_COMMAND_DESC(data?: Partial<D3D12_VIDEO_EXTENSION_COMMAND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_EXTENSION_COMMAND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(8, data.CommandId === null ? 0n : BigInt(util.toPointer(data.CommandId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP {
  /** u32 */
  ConstantQP_FullIntracodedFrame: number;
  /** u32 */
  ConstantQP_InterPredictedFrame_PrevRefOnly: number;
  /** u32 */
  ConstantQP_InterPredictedFrame_BiDirectionalRef: number;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CQP = 16;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL_CQP(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CQP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ConstantQP_FullIntracodedFrame !== undefined) view.setUint32(0, Number(data.ConstantQP_FullIntracodedFrame), true);
  // 0x04: u32
  if (data?.ConstantQP_InterPredictedFrame_PrevRefOnly !== undefined) view.setUint32(4, Number(data.ConstantQP_InterPredictedFrame_PrevRefOnly), true);
  // 0x08: u32
  if (data?.ConstantQP_InterPredictedFrame_BiDirectionalRef !== undefined) view.setUint32(8, Number(data.ConstantQP_InterPredictedFrame_BiDirectionalRef), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR (size: 48)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR {
  /** u32 */
  InitialQP: number;
  /** u32 */
  MinQP: number;
  /** u32 */
  MaxQP: number;
  /** u64 */
  MaxFrameBitSize: Deno.PointerValue;
  /** u64 */
  TargetBitRate: Deno.PointerValue;
  /** u64 */
  VBVCapacity: Deno.PointerValue;
  /** u64 */
  InitialVBVFullness: Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CBR = 48;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL_CBR(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CBR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InitialQP !== undefined) view.setUint32(0, Number(data.InitialQP), true);
  // 0x04: u32
  if (data?.MinQP !== undefined) view.setUint32(4, Number(data.MinQP), true);
  // 0x08: u32
  if (data?.MaxQP !== undefined) view.setUint32(8, Number(data.MaxQP), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MaxFrameBitSize !== undefined) view.setBigUint64(16, BigInt(data.MaxFrameBitSize), true);
  // 0x18: u64
  if (data?.TargetBitRate !== undefined) view.setBigUint64(24, BigInt(data.TargetBitRate), true);
  // 0x20: u64
  if (data?.VBVCapacity !== undefined) view.setBigUint64(32, BigInt(data.VBVCapacity), true);
  // 0x28: u64
  if (data?.InitialVBVFullness !== undefined) view.setBigUint64(40, BigInt(data.InitialVBVFullness), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR (size: 56)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR {
  /** u32 */
  InitialQP: number;
  /** u32 */
  MinQP: number;
  /** u32 */
  MaxQP: number;
  /** u64 */
  MaxFrameBitSize: Deno.PointerValue;
  /** u64 */
  TargetAvgBitRate: Deno.PointerValue;
  /** u64 */
  PeakBitRate: Deno.PointerValue;
  /** u64 */
  VBVCapacity: Deno.PointerValue;
  /** u64 */
  InitialVBVFullness: Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_VBR = 56;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL_VBR(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_VBR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InitialQP !== undefined) view.setUint32(0, Number(data.InitialQP), true);
  // 0x04: u32
  if (data?.MinQP !== undefined) view.setUint32(4, Number(data.MinQP), true);
  // 0x08: u32
  if (data?.MaxQP !== undefined) view.setUint32(8, Number(data.MaxQP), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MaxFrameBitSize !== undefined) view.setBigUint64(16, BigInt(data.MaxFrameBitSize), true);
  // 0x18: u64
  if (data?.TargetAvgBitRate !== undefined) view.setBigUint64(24, BigInt(data.TargetAvgBitRate), true);
  // 0x20: u64
  if (data?.PeakBitRate !== undefined) view.setBigUint64(32, BigInt(data.PeakBitRate), true);
  // 0x28: u64
  if (data?.VBVCapacity !== undefined) view.setBigUint64(40, BigInt(data.VBVCapacity), true);
  // 0x30: u64
  if (data?.InitialVBVFullness !== undefined) view.setBigUint64(48, BigInt(data.InitialVBVFullness), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR (size: 48)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR {
  /** u32 */
  InitialQP: number;
  /** u32 */
  MinQP: number;
  /** u32 */
  MaxQP: number;
  /** u64 */
  MaxFrameBitSize: Deno.PointerValue;
  /** u64 */
  TargetAvgBitRate: Deno.PointerValue;
  /** u64 */
  PeakBitRate: Deno.PointerValue;
  /** u32 */
  ConstantQualityTarget: number;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR = 48;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InitialQP !== undefined) view.setUint32(0, Number(data.InitialQP), true);
  // 0x04: u32
  if (data?.MinQP !== undefined) view.setUint32(4, Number(data.MinQP), true);
  // 0x08: u32
  if (data?.MaxQP !== undefined) view.setUint32(8, Number(data.MaxQP), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MaxFrameBitSize !== undefined) view.setBigUint64(16, BigInt(data.MaxFrameBitSize), true);
  // 0x18: u64
  if (data?.TargetAvgBitRate !== undefined) view.setBigUint64(24, BigInt(data.TargetAvgBitRate), true);
  // 0x20: u64
  if (data?.PeakBitRate !== undefined) view.setBigUint64(32, BigInt(data.PeakBitRate), true);
  // 0x28: u32
  if (data?.ConstantQualityTarget !== undefined) view.setUint32(40, Number(data.ConstantQualityTarget), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS = 16;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE */
  Mode: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS */
  ConfigParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  TargetFrameRate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL = 24;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mode !== undefined) view.setInt32(0, Number(data.Mode), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.ConfigParams !== undefined) view.setBigUint64(8, data.ConfigParams === null ? 0n : BigInt(util.toPointer(data.ConfigParams)), true);
  // 0x10: pointer
  if (data?.TargetFrameRate !== undefined) view.setBigUint64(16, data.TargetFrameRate === null ? 0n : BigInt(util.toPointer(data.TargetFrameRate)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: i32
  if (data?.IsSupported !== undefined) view.setInt32(8, Number(data.IsSupported), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_PROFILE_DESC {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_PROFILE_DESC = 16;

export function allocD3D12_VIDEO_ENCODER_PROFILE_DESC(data?: Partial<D3D12_VIDEO_ENCODER_PROFILE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PROFILE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVELS_HEVC */
  Level: D3D12_VIDEO_ENCODER_LEVELS_HEVC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_TIER_HEVC */
  Tier: D3D12_VIDEO_ENCODER_TIER_HEVC;
}

export const sizeofD3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC = 8;

export function allocD3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Level !== undefined) view.setInt32(0, Number(data.Level), true);
  // 0x04: i32
  if (data?.Tier !== undefined) view.setInt32(4, Number(data.Tier), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_LEVEL_SETTING {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_LEVEL_SETTING = 16;

export function allocD3D12_VIDEO_ENCODER_LEVEL_SETTING(data?: Partial<D3D12_VIDEO_ENCODER_LEVEL_SETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_LEVEL_SETTING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL (size: 40)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  MinSupportedLevel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  MaxSupportedLevel: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL = 40;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(util.toPointer(data.Profile)), true);
  // 0x10: i32
  if (data?.IsSupported !== undefined) view.setInt32(16, Number(data.IsSupported), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.MinSupportedLevel !== undefined) view.setBigUint64(24, data.MinSupportedLevel === null ? 0n : BigInt(util.toPointer(data.MinSupportedLevel)), true);
  // 0x20: pointer
  if (data?.MaxSupportedLevel !== undefined) view.setBigUint64(32, data.MaxSupportedLevel === null ? 0n : BigInt(util.toPointer(data.MaxSupportedLevel)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC = 8;

export function allocD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC {
  /** u32 */
  WidthRatio: number;
  /** u32 */
  HeightRatio: number;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC = 8;

export function allocD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WidthRatio !== undefined) view.setUint32(0, Number(data.WidthRatio), true);
  // 0x04: u32
  if (data?.HeightRatio !== undefined) view.setUint32(4, Number(data.HeightRatio), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** u32 */
  ResolutionRatiosCount: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: u32
  if (data?.ResolutionRatiosCount !== undefined) view.setUint32(8, Number(data.ResolutionRatiosCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** u32 */
  ResolutionRatiosCount: number;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC */
  MinResolutionSupported: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC */
  MaxResolutionSupported: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ResolutionWidthMultipleRequirement: number;
  /** u32 */
  ResolutionHeightMultipleRequirement: number;
  /** ptr */
  pResolutionRatios: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: u32
  if (data?.ResolutionRatiosCount !== undefined) view.setUint32(8, Number(data.ResolutionRatiosCount), true);
  // 0x0c: i32
  if (data?.IsSupported !== undefined) view.setInt32(12, Number(data.IsSupported), true);
  // 0x10: pointer
  if (data?.MinResolutionSupported !== undefined) view.setBigUint64(16, data.MinResolutionSupported === null ? 0n : BigInt(util.toPointer(data.MinResolutionSupported)), true);
  // 0x18: pointer
  if (data?.MaxResolutionSupported !== undefined) view.setBigUint64(24, data.MaxResolutionSupported === null ? 0n : BigInt(util.toPointer(data.MaxResolutionSupported)), true);
  // 0x20: u32
  if (data?.ResolutionWidthMultipleRequirement !== undefined) view.setUint32(32, Number(data.ResolutionWidthMultipleRequirement), true);
  // 0x24: u32
  if (data?.ResolutionHeightMultipleRequirement !== undefined) view.setUint32(36, Number(data.ResolutionHeightMultipleRequirement), true);
  // 0x28: pointer
  if (data?.pResolutionRatios !== undefined) view.setBigUint64(40, data.pResolutionRatios === null ? 0n : BigInt(util.toPointer(data.pResolutionRatios)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(util.toPointer(data.Profile)), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.IsSupported !== undefined) view.setInt32(20, Number(data.IsSupported), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE */
  RateControlMode: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: i32
  if (data?.RateControlMode !== undefined) view.setInt32(8, Number(data.RateControlMode), true);
  // 0x0c: i32
  if (data?.IsSupported !== undefined) view.setInt32(12, Number(data.IsSupported), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  Level: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE */
  IntraRefreshMode: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(util.toPointer(data.Profile)), true);
  // 0x10: pointer
  if (data?.Level !== undefined) view.setBigUint64(16, data.Level === null ? 0n : BigInt(util.toPointer(data.Level)), true);
  // 0x18: i32
  if (data?.IntraRefreshMode !== undefined) view.setInt32(24, Number(data.IntraRefreshMode), true);
  // 0x1c: i32
  if (data?.IsSupported !== undefined) view.setInt32(28, Number(data.IsSupported), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  Level: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE */
  SubregionMode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(util.toPointer(data.Profile)), true);
  // 0x10: pointer
  if (data?.Level !== undefined) view.setBigUint64(16, data.Level === null ? 0n : BigInt(util.toPointer(data.Level)), true);
  // 0x18: i32
  if (data?.SubregionMode !== undefined) view.setInt32(24, Number(data.SubregionMode), true);
  // 0x1c: i32
  if (data?.IsSupported !== undefined) view.setInt32(28, Number(data.IsSupported), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_DESC (size: 48)
 */
export interface D3D12_VIDEO_ENCODER_HEAP_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_HEAP_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  EncodeCodec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  EncodeProfile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  EncodeLevel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ResolutionsListCount: number;
  /** ptr */
  pResolutionList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_VIDEO_ENCODER_HEAP_DESC = 48;

export function allocD3D12_VIDEO_ENCODER_HEAP_DESC(data?: Partial<D3D12_VIDEO_ENCODER_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: i32
  if (data?.EncodeCodec !== undefined) view.setInt32(8, Number(data.EncodeCodec), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EncodeProfile !== undefined) view.setBigUint64(16, data.EncodeProfile === null ? 0n : BigInt(util.toPointer(data.EncodeProfile)), true);
  // 0x18: pointer
  if (data?.EncodeLevel !== undefined) view.setBigUint64(24, data.EncodeLevel === null ? 0n : BigInt(util.toPointer(data.EncodeLevel)), true);
  // 0x20: u32
  if (data?.ResolutionsListCount !== undefined) view.setUint32(32, Number(data.ResolutionsListCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pResolutionList !== undefined) view.setBigUint64(40, data.pResolutionList === null ? 0n : BigInt(util.toPointer(data.pResolutionList)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_DESC */
  HeapDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** u64 */
  MemoryPoolL0Size: Deno.PointerValue;
  /** u64 */
  MemoryPoolL1Size: Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HeapDesc !== undefined) view.setBigUint64(0, data.HeapDesc === null ? 0n : BigInt(util.toPointer(data.HeapDesc)), true);
  // 0x08: i32
  if (data?.IsSupported !== undefined) view.setInt32(8, Number(data.IsSupported), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(16, BigInt(data.MemoryPoolL0Size), true);
  // 0x18: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(24, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS */
  SupportFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS */
  DisableDeblockingFilterSupportedModes: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 = 8;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SupportFlags !== undefined) view.setUint32(0, Number(data.SupportFlags), true);
  // 0x04: u32
  if (data?.DisableDeblockingFilterSupportedModes !== undefined) view.setUint32(4, Number(data.DisableDeblockingFilterSupportedModes), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS */
  SupportFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE */
  MinLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE */
  MaxLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE */
  MinLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE */
  MaxLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
  /** u8 */
  max_transform_hierarchy_depth_inter: number;
  /** u8 */
  max_transform_hierarchy_depth_intra: number;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC = 24;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SupportFlags !== undefined) view.setUint32(0, Number(data.SupportFlags), true);
  // 0x04: i32
  if (data?.MinLumaCodingUnitSize !== undefined) view.setInt32(4, Number(data.MinLumaCodingUnitSize), true);
  // 0x08: i32
  if (data?.MaxLumaCodingUnitSize !== undefined) view.setInt32(8, Number(data.MaxLumaCodingUnitSize), true);
  // 0x0c: i32
  if (data?.MinLumaTransformUnitSize !== undefined) view.setInt32(12, Number(data.MinLumaTransformUnitSize), true);
  // 0x10: i32
  if (data?.MaxLumaTransformUnitSize !== undefined) view.setInt32(16, Number(data.MaxLumaTransformUnitSize), true);
  // 0x14: u8
  if (data?.max_transform_hierarchy_depth_inter !== undefined) view.setUint8(20, Number(data.max_transform_hierarchy_depth_inter));
  // 0x15: u8
  if (data?.max_transform_hierarchy_depth_intra !== undefined) view.setUint8(21, Number(data.max_transform_hierarchy_depth_intra));
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT = 16;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT */
  CodecSupportLimits: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(util.toPointer(data.Profile)), true);
  // 0x10: i32
  if (data?.IsSupported !== undefined) view.setInt32(16, Number(data.IsSupported), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.CodecSupportLimits !== undefined) view.setBigUint64(24, data.CodecSupportLimits === null ? 0n : BigInt(util.toPointer(data.CodecSupportLimits)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 {
  /** u32 */
  MaxL0ReferencesForP: number;
  /** u32 */
  MaxL0ReferencesForB: number;
  /** u32 */
  MaxL1ReferencesForB: number;
  /** u32 */
  MaxLongTermReferences: number;
  /** u32 */
  MaxDPBCapacity: number;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 = 24;

export function allocD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxL0ReferencesForP !== undefined) view.setUint32(0, Number(data.MaxL0ReferencesForP), true);
  // 0x04: u32
  if (data?.MaxL0ReferencesForB !== undefined) view.setUint32(4, Number(data.MaxL0ReferencesForB), true);
  // 0x08: u32
  if (data?.MaxL1ReferencesForB !== undefined) view.setUint32(8, Number(data.MaxL1ReferencesForB), true);
  // 0x0c: u32
  if (data?.MaxLongTermReferences !== undefined) view.setUint32(12, Number(data.MaxLongTermReferences), true);
  // 0x10: u32
  if (data?.MaxDPBCapacity !== undefined) view.setUint32(16, Number(data.MaxDPBCapacity), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC {
  /** u32 */
  MaxL0ReferencesForP: number;
  /** u32 */
  MaxL0ReferencesForB: number;
  /** u32 */
  MaxL1ReferencesForB: number;
  /** u32 */
  MaxLongTermReferences: number;
  /** u32 */
  MaxDPBCapacity: number;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC = 24;

export function allocD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxL0ReferencesForP !== undefined) view.setUint32(0, Number(data.MaxL0ReferencesForP), true);
  // 0x04: u32
  if (data?.MaxL0ReferencesForB !== undefined) view.setUint32(4, Number(data.MaxL0ReferencesForB), true);
  // 0x08: u32
  if (data?.MaxL1ReferencesForB !== undefined) view.setUint32(8, Number(data.MaxL1ReferencesForB), true);
  // 0x0c: u32
  if (data?.MaxLongTermReferences !== undefined) view.setUint32(12, Number(data.MaxLongTermReferences), true);
  // 0x10: u32
  if (data?.MaxDPBCapacity !== undefined) view.setUint32(16, Number(data.MaxDPBCapacity), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT = 16;

export function allocD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT */
  PictureSupport: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(util.toPointer(data.Profile)), true);
  // 0x10: i32
  if (data?.IsSupported !== undefined) view.setInt32(16, Number(data.IsSupported), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PictureSupport !== undefined) view.setBigUint64(24, data.PictureSupport === null ? 0n : BigInt(util.toPointer(data.PictureSupport)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS */
  ConfigurationFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES */
  DirectModeConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES */
  DisableDeblockingFilterConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 = 16;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ConfigurationFlags !== undefined) view.setUint32(0, Number(data.ConfigurationFlags), true);
  // 0x04: i32
  if (data?.DirectModeConfig !== undefined) view.setInt32(4, Number(data.DirectModeConfig), true);
  // 0x08: i32
  if (data?.DisableDeblockingFilterConfig !== undefined) view.setInt32(8, Number(data.DisableDeblockingFilterConfig), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS */
  ConfigurationFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE */
  MinLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE */
  MaxLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE */
  MinLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE */
  MaxLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
  /** u8 */
  max_transform_hierarchy_depth_inter: number;
  /** u8 */
  max_transform_hierarchy_depth_intra: number;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC = 24;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ConfigurationFlags !== undefined) view.setUint32(0, Number(data.ConfigurationFlags), true);
  // 0x04: i32
  if (data?.MinLumaCodingUnitSize !== undefined) view.setInt32(4, Number(data.MinLumaCodingUnitSize), true);
  // 0x08: i32
  if (data?.MaxLumaCodingUnitSize !== undefined) view.setInt32(8, Number(data.MaxLumaCodingUnitSize), true);
  // 0x0c: i32
  if (data?.MinLumaTransformUnitSize !== undefined) view.setInt32(12, Number(data.MinLumaTransformUnitSize), true);
  // 0x10: i32
  if (data?.MaxLumaTransformUnitSize !== undefined) view.setInt32(16, Number(data.MaxLumaTransformUnitSize), true);
  // 0x14: u8
  if (data?.max_transform_hierarchy_depth_inter !== undefined) view.setUint8(20, Number(data.max_transform_hierarchy_depth_inter));
  // 0x15: u8
  if (data?.max_transform_hierarchy_depth_intra !== undefined) view.setUint8(21, Number(data.max_transform_hierarchy_depth_intra));
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION = 16;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_INTRA_REFRESH {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE */
  Mode: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
  /** u32 */
  IntraRefreshDuration: number;
}

export const sizeofD3D12_VIDEO_ENCODER_INTRA_REFRESH = 8;

export function allocD3D12_VIDEO_ENCODER_INTRA_REFRESH(data?: Partial<D3D12_VIDEO_ENCODER_INTRA_REFRESH>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_INTRA_REFRESH);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mode !== undefined) view.setInt32(0, Number(data.Mode), true);
  // 0x04: u32
  if (data?.IntraRefreshDuration !== undefined) view.setUint32(4, Number(data.IntraRefreshDuration), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS {
  /** u32 */
  MaxSubregionsNumber: number;
  /** u32 */
  MaxIntraRefreshFrameDuration: number;
  /** u32 */
  SubregionBlockPixelsSize: number;
  /** u32 */
  QPMapRegionPixelsSize: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxSubregionsNumber !== undefined) view.setUint32(0, Number(data.MaxSubregionsNumber), true);
  // 0x04: u32
  if (data?.MaxIntraRefreshFrameDuration !== undefined) view.setUint32(4, Number(data.MaxIntraRefreshFrameDuration), true);
  // 0x08: u32
  if (data?.SubregionBlockPixelsSize !== undefined) view.setUint32(8, Number(data.SubregionBlockPixelsSize), true);
  // 0x0c: u32
  if (data?.QPMapRegionPixelsSize !== undefined) view.setUint32(12, Number(data.QPMapRegionPixelsSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 {
  /** u32 */
  GOPLength: number;
  /** u32 */
  PPicturePeriod: number;
  /** u8 */
  pic_order_cnt_type: number;
  /** u8 */
  log2_max_frame_num_minus4: number;
  /** u8 */
  log2_max_pic_order_cnt_lsb_minus4: number;
}

export const sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 = 16;

export function allocD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264(data?: Partial<D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.GOPLength !== undefined) view.setUint32(0, Number(data.GOPLength), true);
  // 0x04: u32
  if (data?.PPicturePeriod !== undefined) view.setUint32(4, Number(data.PPicturePeriod), true);
  // 0x08: u8
  if (data?.pic_order_cnt_type !== undefined) view.setUint8(8, Number(data.pic_order_cnt_type));
  // 0x09: u8
  if (data?.log2_max_frame_num_minus4 !== undefined) view.setUint8(9, Number(data.log2_max_frame_num_minus4));
  // 0x0a: u8
  if (data?.log2_max_pic_order_cnt_lsb_minus4 !== undefined) view.setUint8(10, Number(data.log2_max_pic_order_cnt_lsb_minus4));
  // 0x0b: pad5
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC {
  /** u32 */
  GOPLength: number;
  /** u32 */
  PPicturePeriod: number;
  /** u8 */
  log2_max_pic_order_cnt_lsb_minus4: number;
}

export const sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC = 16;

export function allocD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.GOPLength !== undefined) view.setUint32(0, Number(data.GOPLength), true);
  // 0x04: u32
  if (data?.PPicturePeriod !== undefined) view.setUint32(4, Number(data.PPicturePeriod), true);
  // 0x08: u8
  if (data?.log2_max_pic_order_cnt_lsb_minus4 !== undefined) view.setUint8(8, Number(data.log2_max_pic_order_cnt_lsb_minus4));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE = 16;

export function allocD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE(data?: Partial<D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT (size: 104)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION */
  CodecConfiguration: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE */
  CodecGopSequence: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL */
  RateControl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE */
  IntraRefresh: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE */
  SubregionFrameEncoding: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
  /** u32 */
  ResolutionsListCount: number;
  /** ptr */
  pResolutionList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MaxReferenceFramesInDPB: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_VALIDATION_FLAGS */
  ValidationFlags: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  SuggestedProfile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  SuggestedLevel: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pResolutionDependentSupport: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT = 104;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: u32
  if (data?.InputFormat !== undefined) view.setUint32(8, Number(data.InputFormat), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.CodecConfiguration !== undefined) view.setBigUint64(16, data.CodecConfiguration === null ? 0n : BigInt(util.toPointer(data.CodecConfiguration)), true);
  // 0x18: pointer
  if (data?.CodecGopSequence !== undefined) view.setBigUint64(24, data.CodecGopSequence === null ? 0n : BigInt(util.toPointer(data.CodecGopSequence)), true);
  // 0x20: pointer
  if (data?.RateControl !== undefined) view.setBigUint64(32, data.RateControl === null ? 0n : BigInt(util.toPointer(data.RateControl)), true);
  // 0x28: i32
  if (data?.IntraRefresh !== undefined) view.setInt32(40, Number(data.IntraRefresh), true);
  // 0x2c: i32
  if (data?.SubregionFrameEncoding !== undefined) view.setInt32(44, Number(data.SubregionFrameEncoding), true);
  // 0x30: u32
  if (data?.ResolutionsListCount !== undefined) view.setUint32(48, Number(data.ResolutionsListCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pResolutionList !== undefined) view.setBigUint64(56, data.pResolutionList === null ? 0n : BigInt(util.toPointer(data.pResolutionList)), true);
  // 0x40: u32
  if (data?.MaxReferenceFramesInDPB !== undefined) view.setUint32(64, Number(data.MaxReferenceFramesInDPB), true);
  // 0x44: u32
  if (data?.ValidationFlags !== undefined) view.setUint32(68, Number(data.ValidationFlags), true);
  // 0x48: u32
  if (data?.SupportFlags !== undefined) view.setUint32(72, Number(data.SupportFlags), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.SuggestedProfile !== undefined) view.setBigUint64(80, data.SuggestedProfile === null ? 0n : BigInt(util.toPointer(data.SuggestedProfile)), true);
  // 0x58: pointer
  if (data?.SuggestedLevel !== undefined) view.setBigUint64(88, data.SuggestedLevel === null ? 0n : BigInt(util.toPointer(data.SuggestedLevel)), true);
  // 0x60: pointer
  if (data?.pResolutionDependentSupport !== undefined) view.setBigUint64(96, data.pResolutionDependentSupport === null ? 0n : BigInt(util.toPointer(data.pResolutionDependentSupport)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC */
  PictureTargetResolution: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** u32 */
  CompressedBitstreamBufferAccessAlignment: number;
  /** u32 */
  EncoderMetadataBufferAccessAlignment: number;
  /** u32 */
  MaxEncoderOutputMetadataBufferSize: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(util.toPointer(data.Profile)), true);
  // 0x10: u32
  if (data?.InputFormat !== undefined) view.setUint32(16, Number(data.InputFormat), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PictureTargetResolution !== undefined) view.setBigUint64(24, data.PictureTargetResolution === null ? 0n : BigInt(util.toPointer(data.PictureTargetResolution)), true);
  // 0x20: i32
  if (data?.IsSupported !== undefined) view.setInt32(32, Number(data.IsSupported), true);
  // 0x24: u32
  if (data?.CompressedBitstreamBufferAccessAlignment !== undefined) view.setUint32(36, Number(data.CompressedBitstreamBufferAccessAlignment), true);
  // 0x28: u32
  if (data?.EncoderMetadataBufferAccessAlignment !== undefined) view.setUint32(40, Number(data.EncoderMetadataBufferAccessAlignment), true);
  // 0x2c: u32
  if (data?.MaxEncoderOutputMetadataBufferSize !== undefined) view.setUint32(44, Number(data.MaxEncoderOutputMetadataBufferSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_DESC (size: 48)
 */
export interface D3D12_VIDEO_ENCODER_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  EncodeCodec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  EncodeProfile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION */
  CodecConfiguration: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE */
  MaxMotionEstimationPrecision: D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE;
}

export const sizeofD3D12_VIDEO_ENCODER_DESC = 48;

export function allocD3D12_VIDEO_ENCODER_DESC(data?: Partial<D3D12_VIDEO_ENCODER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: i32
  if (data?.EncodeCodec !== undefined) view.setInt32(8, Number(data.EncodeCodec), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EncodeProfile !== undefined) view.setBigUint64(16, data.EncodeProfile === null ? 0n : BigInt(util.toPointer(data.EncodeProfile)), true);
  // 0x18: u32
  if (data?.InputFormat !== undefined) view.setUint32(24, Number(data.InputFormat), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.CodecConfiguration !== undefined) view.setBigUint64(32, data.CodecConfiguration === null ? 0n : BigInt(util.toPointer(data.CodecConfiguration)), true);
  // 0x28: i32
  if (data?.MaxMotionEstimationPrecision !== undefined) view.setInt32(40, Number(data.MaxMotionEstimationPrecision), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 {
  /** u32 */
  ReconstructedPictureResourceIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  IsLongTermReference: boolean;
  /** u32 */
  LongTermPictureIdx: number;
  /** u32 */
  PictureOrderCountNumber: number;
  /** u32 */
  FrameDecodingOrderNumber: number;
  /** u32 */
  TemporalLayerIndex: number;
}

export const sizeofD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 = 24;

export function allocD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264(data?: Partial<D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReconstructedPictureResourceIndex !== undefined) view.setUint32(0, Number(data.ReconstructedPictureResourceIndex), true);
  // 0x04: i32
  if (data?.IsLongTermReference !== undefined) view.setInt32(4, Number(data.IsLongTermReference), true);
  // 0x08: u32
  if (data?.LongTermPictureIdx !== undefined) view.setUint32(8, Number(data.LongTermPictureIdx), true);
  // 0x0c: u32
  if (data?.PictureOrderCountNumber !== undefined) view.setUint32(12, Number(data.PictureOrderCountNumber), true);
  // 0x10: u32
  if (data?.FrameDecodingOrderNumber !== undefined) view.setUint32(16, Number(data.FrameDecodingOrderNumber), true);
  // 0x14: u32
  if (data?.TemporalLayerIndex !== undefined) view.setUint32(20, Number(data.TemporalLayerIndex), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION {
  /** u8 */
  memory_management_control_operation: number;
  /** u32 */
  difference_of_pic_nums_minus1: number;
  /** u32 */
  long_term_pic_num: number;
  /** u32 */
  long_term_frame_idx: number;
  /** u32 */
  max_long_term_frame_idx_plus1: number;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION = 24;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.memory_management_control_operation !== undefined) view.setUint8(0, Number(data.memory_management_control_operation));
  // 0x01: u32
  if (data?.difference_of_pic_nums_minus1 !== undefined) view.setUint32(1, Number(data.difference_of_pic_nums_minus1), true);
  // 0x05: u32
  if (data?.long_term_pic_num !== undefined) view.setUint32(5, Number(data.long_term_pic_num), true);
  // 0x09: u32
  if (data?.long_term_frame_idx !== undefined) view.setUint32(9, Number(data.long_term_frame_idx), true);
  // 0x0d: u32
  if (data?.max_long_term_frame_idx_plus1 !== undefined) view.setUint32(13, Number(data.max_long_term_frame_idx_plus1), true);
  // 0x11: pad7
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION {
  /** u8 */
  modification_of_pic_nums_idc: number;
  /** u32 */
  abs_diff_pic_num_minus1: number;
  /** u32 */
  long_term_pic_num: number;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION = 16;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.modification_of_pic_nums_idc !== undefined) view.setUint8(0, Number(data.modification_of_pic_nums_idc));
  // 0x01: u32
  if (data?.abs_diff_pic_num_minus1 !== undefined) view.setUint32(1, Number(data.abs_diff_pic_num_minus1), true);
  // 0x05: u32
  if (data?.long_term_pic_num !== undefined) view.setUint32(5, Number(data.long_term_pic_num), true);
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 (size: 136)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 */
  FrameType: D3D12_VIDEO_ENCODER_FRAME_TYPE_H264;
  /** u32 */
  pic_parameter_set_id: number;
  /** u32 */
  idr_pic_id: number;
  /** u32 */
  PictureOrderCountNumber: number;
  /** u32 */
  FrameDecodingOrderNumber: number;
  /** u32 */
  TemporalLayerIndex: number;
  /** u32 */
  List0ReferenceFramesCount: number;
  /** ptr */
  pList0ReferenceFrames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  List1ReferenceFramesCount: number;
  /** ptr */
  pList1ReferenceFrames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ReferenceFramesReconPictureDescriptorsCount: number;
  /** ptr */
  pReferenceFramesReconPictureDescriptors: Deno.PointerValue | Uint8Array | null;
  /** u8 */
  adaptive_ref_pic_marking_mode_flag: number;
  /** u32 */
  RefPicMarkingOperationsCommandsCount: number;
  /** ptr */
  pRefPicMarkingOperationsCommands: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  List0RefPicModificationsCount: number;
  /** ptr */
  pList0RefPicModifications: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  List1RefPicModificationsCount: number;
  /** ptr */
  pList1RefPicModifications: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  QPMapValuesCount: number;
  /** ptr */
  pRateControlQPMap: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 = 136;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: i32
  if (data?.FrameType !== undefined) view.setInt32(4, Number(data.FrameType), true);
  // 0x08: u32
  if (data?.pic_parameter_set_id !== undefined) view.setUint32(8, Number(data.pic_parameter_set_id), true);
  // 0x0c: u32
  if (data?.idr_pic_id !== undefined) view.setUint32(12, Number(data.idr_pic_id), true);
  // 0x10: u32
  if (data?.PictureOrderCountNumber !== undefined) view.setUint32(16, Number(data.PictureOrderCountNumber), true);
  // 0x14: u32
  if (data?.FrameDecodingOrderNumber !== undefined) view.setUint32(20, Number(data.FrameDecodingOrderNumber), true);
  // 0x18: u32
  if (data?.TemporalLayerIndex !== undefined) view.setUint32(24, Number(data.TemporalLayerIndex), true);
  // 0x1c: u32
  if (data?.List0ReferenceFramesCount !== undefined) view.setUint32(28, Number(data.List0ReferenceFramesCount), true);
  // 0x20: pointer
  if (data?.pList0ReferenceFrames !== undefined) view.setBigUint64(32, data.pList0ReferenceFrames === null ? 0n : BigInt(util.toPointer(data.pList0ReferenceFrames)), true);
  // 0x28: u32
  if (data?.List1ReferenceFramesCount !== undefined) view.setUint32(40, Number(data.List1ReferenceFramesCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pList1ReferenceFrames !== undefined) view.setBigUint64(48, data.pList1ReferenceFrames === null ? 0n : BigInt(util.toPointer(data.pList1ReferenceFrames)), true);
  // 0x38: u32
  if (data?.ReferenceFramesReconPictureDescriptorsCount !== undefined) view.setUint32(56, Number(data.ReferenceFramesReconPictureDescriptorsCount), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.pReferenceFramesReconPictureDescriptors !== undefined) view.setBigUint64(64, data.pReferenceFramesReconPictureDescriptors === null ? 0n : BigInt(util.toPointer(data.pReferenceFramesReconPictureDescriptors)), true);
  // 0x48: u8
  if (data?.adaptive_ref_pic_marking_mode_flag !== undefined) view.setUint8(72, Number(data.adaptive_ref_pic_marking_mode_flag));
  // 0x49: u32
  if (data?.RefPicMarkingOperationsCommandsCount !== undefined) view.setUint32(73, Number(data.RefPicMarkingOperationsCommandsCount), true);
  // 0x4d: pad3
  // 0x50: pointer
  if (data?.pRefPicMarkingOperationsCommands !== undefined) view.setBigUint64(80, data.pRefPicMarkingOperationsCommands === null ? 0n : BigInt(util.toPointer(data.pRefPicMarkingOperationsCommands)), true);
  // 0x58: u32
  if (data?.List0RefPicModificationsCount !== undefined) view.setUint32(88, Number(data.List0RefPicModificationsCount), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.pList0RefPicModifications !== undefined) view.setBigUint64(96, data.pList0RefPicModifications === null ? 0n : BigInt(util.toPointer(data.pList0RefPicModifications)), true);
  // 0x68: u32
  if (data?.List1RefPicModificationsCount !== undefined) view.setUint32(104, Number(data.List1RefPicModificationsCount), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.pList1RefPicModifications !== undefined) view.setBigUint64(112, data.pList1RefPicModifications === null ? 0n : BigInt(util.toPointer(data.pList1RefPicModifications)), true);
  // 0x78: u32
  if (data?.QPMapValuesCount !== undefined) view.setUint32(120, Number(data.QPMapValuesCount), true);
  // 0x7c: pad4
  // 0x80: pointer
  if (data?.pRateControlQPMap !== undefined) view.setBigUint64(128, data.pRateControlQPMap === null ? 0n : BigInt(util.toPointer(data.pRateControlQPMap)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC {
  /** u32 */
  ReconstructedPictureResourceIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  IsRefUsedByCurrentPic: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IsLongTermReference: boolean;
  /** u32 */
  PictureOrderCountNumber: number;
  /** u32 */
  TemporalLayerIndex: number;
}

export const sizeofD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC = 24;

export function allocD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReconstructedPictureResourceIndex !== undefined) view.setUint32(0, Number(data.ReconstructedPictureResourceIndex), true);
  // 0x04: i32
  if (data?.IsRefUsedByCurrentPic !== undefined) view.setInt32(4, Number(data.IsRefUsedByCurrentPic), true);
  // 0x08: i32
  if (data?.IsLongTermReference !== undefined) view.setInt32(8, Number(data.IsLongTermReference), true);
  // 0x0c: u32
  if (data?.PictureOrderCountNumber !== undefined) view.setUint32(12, Number(data.PictureOrderCountNumber), true);
  // 0x10: u32
  if (data?.TemporalLayerIndex !== undefined) view.setUint32(16, Number(data.TemporalLayerIndex), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC (size: 112)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC */
  FrameType: D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC;
  /** u32 */
  slice_pic_parameter_set_id: number;
  /** u32 */
  PictureOrderCountNumber: number;
  /** u32 */
  TemporalLayerIndex: number;
  /** u32 */
  List0ReferenceFramesCount: number;
  /** ptr */
  pList0ReferenceFrames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  List1ReferenceFramesCount: number;
  /** ptr */
  pList1ReferenceFrames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ReferenceFramesReconPictureDescriptorsCount: number;
  /** ptr */
  pReferenceFramesReconPictureDescriptors: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  List0RefPicModificationsCount: number;
  /** ptr */
  pList0RefPicModifications: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  List1RefPicModificationsCount: number;
  /** ptr */
  pList1RefPicModifications: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  QPMapValuesCount: number;
  /** ptr */
  pRateControlQPMap: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC = 112;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: i32
  if (data?.FrameType !== undefined) view.setInt32(4, Number(data.FrameType), true);
  // 0x08: u32
  if (data?.slice_pic_parameter_set_id !== undefined) view.setUint32(8, Number(data.slice_pic_parameter_set_id), true);
  // 0x0c: u32
  if (data?.PictureOrderCountNumber !== undefined) view.setUint32(12, Number(data.PictureOrderCountNumber), true);
  // 0x10: u32
  if (data?.TemporalLayerIndex !== undefined) view.setUint32(16, Number(data.TemporalLayerIndex), true);
  // 0x14: u32
  if (data?.List0ReferenceFramesCount !== undefined) view.setUint32(20, Number(data.List0ReferenceFramesCount), true);
  // 0x18: pointer
  if (data?.pList0ReferenceFrames !== undefined) view.setBigUint64(24, data.pList0ReferenceFrames === null ? 0n : BigInt(util.toPointer(data.pList0ReferenceFrames)), true);
  // 0x20: u32
  if (data?.List1ReferenceFramesCount !== undefined) view.setUint32(32, Number(data.List1ReferenceFramesCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pList1ReferenceFrames !== undefined) view.setBigUint64(40, data.pList1ReferenceFrames === null ? 0n : BigInt(util.toPointer(data.pList1ReferenceFrames)), true);
  // 0x30: u32
  if (data?.ReferenceFramesReconPictureDescriptorsCount !== undefined) view.setUint32(48, Number(data.ReferenceFramesReconPictureDescriptorsCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pReferenceFramesReconPictureDescriptors !== undefined) view.setBigUint64(56, data.pReferenceFramesReconPictureDescriptors === null ? 0n : BigInt(util.toPointer(data.pReferenceFramesReconPictureDescriptors)), true);
  // 0x40: u32
  if (data?.List0RefPicModificationsCount !== undefined) view.setUint32(64, Number(data.List0RefPicModificationsCount), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pList0RefPicModifications !== undefined) view.setBigUint64(72, data.pList0RefPicModifications === null ? 0n : BigInt(util.toPointer(data.pList0RefPicModifications)), true);
  // 0x50: u32
  if (data?.List1RefPicModificationsCount !== undefined) view.setUint32(80, Number(data.List1RefPicModificationsCount), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pList1RefPicModifications !== undefined) view.setBigUint64(88, data.pList1RefPicModifications === null ? 0n : BigInt(util.toPointer(data.pList1RefPicModifications)), true);
  // 0x60: u32
  if (data?.QPMapValuesCount !== undefined) view.setUint32(96, Number(data.QPMapValuesCount), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.pRateControlQPMap !== undefined) view.setBigUint64(104, data.pRateControlQPMap === null ? 0n : BigInt(util.toPointer(data.pRateControlQPMap)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA = 16;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODE_REFERENCE_FRAMES (size: 24)
 */
export interface D3D12_VIDEO_ENCODE_REFERENCE_FRAMES {
  /** u32 */
  NumTexture2Ds: number;
  /** ptr */
  ppTexture2Ds: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSubresources: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_VIDEO_ENCODE_REFERENCE_FRAMES = 24;

export function allocD3D12_VIDEO_ENCODE_REFERENCE_FRAMES(data?: Partial<D3D12_VIDEO_ENCODE_REFERENCE_FRAMES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODE_REFERENCE_FRAMES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumTexture2Ds !== undefined) view.setUint32(0, Number(data.NumTexture2Ds), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ppTexture2Ds !== undefined) view.setBigUint64(8, data.ppTexture2Ds === null ? 0n : BigInt(util.toPointer(data.ppTexture2Ds)), true);
  // 0x10: pointer
  if (data?.pSubresources !== undefined) view.setBigUint64(16, data.pSubresources === null ? 0n : BigInt(util.toPointer(data.pSubresources)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC {
  /** u32 */
  IntraRefreshFrameIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA */
  PictureControlCodecData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODE_REFERENCE_FRAMES */
  ReferenceFrames: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC = 24;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IntraRefreshFrameIndex !== undefined) view.setUint32(0, Number(data.IntraRefreshFrameIndex), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.PictureControlCodecData !== undefined) view.setBigUint64(8, data.PictureControlCodecData === null ? 0n : BigInt(util.toPointer(data.PictureControlCodecData)), true);
  // 0x10: pointer
  if (data?.ReferenceFrames !== undefined) view.setBigUint64(16, data.ReferenceFrames === null ? 0n : BigInt(util.toPointer(data.ReferenceFrames)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES = 8;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA = 16;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC (size: 56)
 */
export interface D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH */
  IntraRefreshConfig: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL */
  RateControl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC */
  PictureTargetResolution: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE */
  SelectedLayoutMode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA */
  FrameSubregionsLayoutData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE */
  CodecGopSequence: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC = 56;

export function allocD3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC(data?: Partial<D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IntraRefreshConfig !== undefined) view.setBigUint64(8, data.IntraRefreshConfig === null ? 0n : BigInt(util.toPointer(data.IntraRefreshConfig)), true);
  // 0x10: pointer
  if (data?.RateControl !== undefined) view.setBigUint64(16, data.RateControl === null ? 0n : BigInt(util.toPointer(data.RateControl)), true);
  // 0x18: pointer
  if (data?.PictureTargetResolution !== undefined) view.setBigUint64(24, data.PictureTargetResolution === null ? 0n : BigInt(util.toPointer(data.PictureTargetResolution)), true);
  // 0x20: i32
  if (data?.SelectedLayoutMode !== undefined) view.setInt32(32, Number(data.SelectedLayoutMode), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.FrameSubregionsLayoutData !== undefined) view.setBigUint64(40, data.FrameSubregionsLayoutData === null ? 0n : BigInt(util.toPointer(data.FrameSubregionsLayoutData)), true);
  // 0x30: pointer
  if (data?.CodecGopSequence !== undefined) view.setBigUint64(48, data.CodecGopSequence === null ? 0n : BigInt(util.toPointer(data.CodecGopSequence)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS (size: 32)
 */
export interface D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC */
  SequenceControlDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC */
  PictureControlDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pInputFrame: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InputFrameSubresource: number;
  /** u32 */
  CurrentFrameBitstreamMetadataSize: number;
}

export const sizeofD3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS = 32;

export function allocD3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS(data?: Partial<D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SequenceControlDesc !== undefined) view.setBigUint64(0, data.SequenceControlDesc === null ? 0n : BigInt(util.toPointer(data.SequenceControlDesc)), true);
  // 0x08: pointer
  if (data?.PictureControlDesc !== undefined) view.setBigUint64(8, data.PictureControlDesc === null ? 0n : BigInt(util.toPointer(data.PictureControlDesc)), true);
  // 0x10: pointer
  if (data?.pInputFrame !== undefined) view.setBigUint64(16, data.pInputFrame === null ? 0n : BigInt(util.toPointer(data.pInputFrame)), true);
  // 0x18: u32
  if (data?.InputFrameSubresource !== undefined) view.setUint32(24, Number(data.InputFrameSubresource), true);
  // 0x1c: u32
  if (data?.CurrentFrameBitstreamMetadataSize !== undefined) view.setUint32(28, Number(data.CurrentFrameBitstreamMetadataSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pBuffer: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  FrameStartOffset: Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM = 16;

export function allocD3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM(data?: Partial<D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(util.toPointer(data.pBuffer)), true);
  // 0x08: u64
  if (data?.FrameStartOffset !== undefined) view.setBigUint64(8, BigInt(data.FrameStartOffset), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pReconstructedPicture: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ReconstructedPictureSubresource: number;
}

export const sizeofD3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE = 16;

export function allocD3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE(data?: Partial<D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pReconstructedPicture !== undefined) view.setBigUint64(0, data.pReconstructedPicture === null ? 0n : BigInt(util.toPointer(data.pReconstructedPicture)), true);
  // 0x08: u32
  if (data?.ReconstructedPictureSubresource !== undefined) view.setUint32(8, Number(data.ReconstructedPictureSubresource), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA {
  /** u64 */
  bSize: Deno.PointerValue;
  /** u64 */
  bStartOffset: Deno.PointerValue;
  /** u64 */
  bHeaderSize: Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA = 24;

export function allocD3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA(data?: Partial<D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.bSize !== undefined) view.setBigUint64(0, BigInt(data.bSize), true);
  // 0x08: u64
  if (data?.bStartOffset !== undefined) view.setBigUint64(8, BigInt(data.bStartOffset), true);
  // 0x10: u64
  if (data?.bHeaderSize !== undefined) view.setBigUint64(16, BigInt(data.bHeaderSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS (size: 48)
 */
export interface D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS {
  /** u64 */
  AverageQP: Deno.PointerValue;
  /** u64 */
  IntraCodingUnitsCount: Deno.PointerValue;
  /** u64 */
  InterCodingUnitsCount: Deno.PointerValue;
  /** u64 */
  SkipCodingUnitsCount: Deno.PointerValue;
  /** u64 */
  AverageMotionEstimationXDirection: Deno.PointerValue;
  /** u64 */
  AverageMotionEstimationYDirection: Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS = 48;

export function allocD3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS(data?: Partial<D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AverageQP !== undefined) view.setBigUint64(0, BigInt(data.AverageQP), true);
  // 0x08: u64
  if (data?.IntraCodingUnitsCount !== undefined) view.setBigUint64(8, BigInt(data.IntraCodingUnitsCount), true);
  // 0x10: u64
  if (data?.InterCodingUnitsCount !== undefined) view.setBigUint64(16, BigInt(data.InterCodingUnitsCount), true);
  // 0x18: u64
  if (data?.SkipCodingUnitsCount !== undefined) view.setBigUint64(24, BigInt(data.SkipCodingUnitsCount), true);
  // 0x20: u64
  if (data?.AverageMotionEstimationXDirection !== undefined) view.setBigUint64(32, BigInt(data.AverageMotionEstimationXDirection), true);
  // 0x28: u64
  if (data?.AverageMotionEstimationYDirection !== undefined) view.setBigUint64(40, BigInt(data.AverageMotionEstimationYDirection), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA (size: 32)
 */
export interface D3D12_VIDEO_ENCODER_OUTPUT_METADATA {
  /** u64 */
  EncodeErrorFlags: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS */
  EncodeStats: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  EncodedBitstreamWrittenBytesCount: Deno.PointerValue;
  /** u64 */
  WrittenSubregionsCount: Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_OUTPUT_METADATA = 32;

export function allocD3D12_VIDEO_ENCODER_OUTPUT_METADATA(data?: Partial<D3D12_VIDEO_ENCODER_OUTPUT_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_OUTPUT_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.EncodeErrorFlags !== undefined) view.setBigUint64(0, BigInt(data.EncodeErrorFlags), true);
  // 0x08: pointer
  if (data?.EncodeStats !== undefined) view.setBigUint64(8, data.EncodeStats === null ? 0n : BigInt(util.toPointer(data.EncodeStats)), true);
  // 0x10: u64
  if (data?.EncodedBitstreamWrittenBytesCount !== undefined) view.setBigUint64(16, BigInt(data.EncodedBitstreamWrittenBytesCount), true);
  // 0x18: u64
  if (data?.WrittenSubregionsCount !== undefined) view.setBigUint64(24, BigInt(data.WrittenSubregionsCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pBuffer: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Offset: Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER = 16;

export function allocD3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER(data?: Partial<D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(util.toPointer(data.pBuffer)), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, BigInt(data.Offset), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS (size: 40)
 */
export interface D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  EncoderCodec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  EncoderProfile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  EncoderInputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC */
  EncodedPictureEffectiveResolution: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER */
  HWLayoutMetadata: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS = 40;

export function allocD3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS(data?: Partial<D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.EncoderCodec !== undefined) view.setInt32(0, Number(data.EncoderCodec), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EncoderProfile !== undefined) view.setBigUint64(8, data.EncoderProfile === null ? 0n : BigInt(util.toPointer(data.EncoderProfile)), true);
  // 0x10: u32
  if (data?.EncoderInputFormat !== undefined) view.setUint32(16, Number(data.EncoderInputFormat), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.EncodedPictureEffectiveResolution !== undefined) view.setBigUint64(24, data.EncodedPictureEffectiveResolution === null ? 0n : BigInt(util.toPointer(data.EncodedPictureEffectiveResolution)), true);
  // 0x20: pointer
  if (data?.HWLayoutMetadata !== undefined) view.setBigUint64(32, data.HWLayoutMetadata === null ? 0n : BigInt(util.toPointer(data.HWLayoutMetadata)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER */
  ResolvedLayoutMetadata: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS = 8;

export function allocD3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS(data?: Partial<D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ResolvedLayoutMetadata !== undefined) view.setBigUint64(0, data.ResolvedLayoutMetadata === null ? 0n : BigInt(util.toPointer(data.ResolvedLayoutMetadata)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM */
  Bitstream: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE */
  ReconstructedPicture: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER */
  EncoderOutputMetadata: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS = 24;

export function allocD3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS(data?: Partial<D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Bitstream !== undefined) view.setBigUint64(0, data.Bitstream === null ? 0n : BigInt(util.toPointer(data.Bitstream)), true);
  // 0x08: pointer
  if (data?.ReconstructedPicture !== undefined) view.setBigUint64(8, data.ReconstructedPicture === null ? 0n : BigInt(util.toPointer(data.ReconstructedPicture)), true);
  // 0x10: pointer
  if (data?.EncoderOutputMetadata !== undefined) view.setBigUint64(16, data.EncoderOutputMetadata === null ? 0n : BigInt(util.toPointer(data.EncoderOutputMetadata)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.AecQualityMetrics_Struct (size: 56)
 */
export interface AecQualityMetrics_Struct {
  /** i64 */
  i64Timestamp: Deno.PointerValue;
  /** u8 */
  ConvergenceFlag: number;
  /** u8 */
  MicClippedFlag: number;
  /** u8 */
  MicSilenceFlag: number;
  /** u8 */
  PstvFeadbackFlag: number;
  /** u8 */
  SpkClippedFlag: number;
  /** u8 */
  SpkMuteFlag: number;
  /** u8 */
  GlitchFlag: number;
  /** u8 */
  DoubleTalkFlag: number;
  /** u32 */
  uGlitchCount: number;
  /** u32 */
  uMicClipCount: number;
  /** f32 */
  fDuration: number;
  /** f32 */
  fTSVariance: number;
  /** f32 */
  fTSDriftRate: number;
  /** f32 */
  fVoiceLevel: number;
  /** f32 */
  fNoiseLevel: number;
  /** f32 */
  fERLE: number;
  /** f32 */
  fAvgERLE: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofAecQualityMetrics_Struct = 56;

export function allocAecQualityMetrics_Struct(data?: Partial<AecQualityMetrics_Struct>): Uint8Array {
  const buf = new Uint8Array(sizeofAecQualityMetrics_Struct);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.i64Timestamp !== undefined) view.setBigInt64(0, BigInt(data.i64Timestamp), true);
  // 0x08: u8
  if (data?.ConvergenceFlag !== undefined) view.setUint8(8, Number(data.ConvergenceFlag));
  // 0x09: u8
  if (data?.MicClippedFlag !== undefined) view.setUint8(9, Number(data.MicClippedFlag));
  // 0x0a: u8
  if (data?.MicSilenceFlag !== undefined) view.setUint8(10, Number(data.MicSilenceFlag));
  // 0x0b: u8
  if (data?.PstvFeadbackFlag !== undefined) view.setUint8(11, Number(data.PstvFeadbackFlag));
  // 0x0c: u8
  if (data?.SpkClippedFlag !== undefined) view.setUint8(12, Number(data.SpkClippedFlag));
  // 0x0d: u8
  if (data?.SpkMuteFlag !== undefined) view.setUint8(13, Number(data.SpkMuteFlag));
  // 0x0e: u8
  if (data?.GlitchFlag !== undefined) view.setUint8(14, Number(data.GlitchFlag));
  // 0x0f: u8
  if (data?.DoubleTalkFlag !== undefined) view.setUint8(15, Number(data.DoubleTalkFlag));
  // 0x10: u32
  if (data?.uGlitchCount !== undefined) view.setUint32(16, Number(data.uGlitchCount), true);
  // 0x14: u32
  if (data?.uMicClipCount !== undefined) view.setUint32(20, Number(data.uMicClipCount), true);
  // 0x18: f32
  if (data?.fDuration !== undefined) view.setFloat32(24, Number(data.fDuration), true);
  // 0x1c: f32
  if (data?.fTSVariance !== undefined) view.setFloat32(28, Number(data.fTSVariance), true);
  // 0x20: f32
  if (data?.fTSDriftRate !== undefined) view.setFloat32(32, Number(data.fTSDriftRate), true);
  // 0x24: f32
  if (data?.fVoiceLevel !== undefined) view.setFloat32(36, Number(data.fVoiceLevel), true);
  // 0x28: f32
  if (data?.fNoiseLevel !== undefined) view.setFloat32(40, Number(data.fNoiseLevel), true);
  // 0x2c: f32
  if (data?.fERLE !== undefined) view.setFloat32(44, Number(data.fERLE), true);
  // 0x30: f32
  if (data?.fAvgERLE !== undefined) view.setFloat32(48, Number(data.fAvgERLE), true);
  // 0x34: u32
  if (data?.dwReserved !== undefined) view.setUint32(52, Number(data.dwReserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.TOC_DESCRIPTOR (size: 32)
 */
export interface TOC_DESCRIPTOR {
  /** System.Guid */
  guidID: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wStreamNumber: number;
  /** System.Guid */
  guidType: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wLanguageIndex: number;
}

export const sizeofTOC_DESCRIPTOR = 32;

export function allocTOC_DESCRIPTOR(data?: Partial<TOC_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofTOC_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidID !== undefined) view.setBigUint64(0, data.guidID === null ? 0n : BigInt(util.toPointer(data.guidID)), true);
  // 0x08: u16
  if (data?.wStreamNumber !== undefined) view.setUint16(8, Number(data.wStreamNumber), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.guidType !== undefined) view.setBigUint64(16, data.guidType === null ? 0n : BigInt(util.toPointer(data.guidType)), true);
  // 0x18: u16
  if (data?.wLanguageIndex !== undefined) view.setUint16(24, Number(data.wLanguageIndex), true);
  // 0x1a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.TOC_ENTRY_DESCRIPTOR (size: 40)
 */
export interface TOC_ENTRY_DESCRIPTOR {
  /** u64 */
  qwStartTime: Deno.PointerValue;
  /** u64 */
  qwEndTime: Deno.PointerValue;
  /** u64 */
  qwStartPacketOffset: Deno.PointerValue;
  /** u64 */
  qwEndPacketOffset: Deno.PointerValue;
  /** u64 */
  qwRepresentativeFrameTime: Deno.PointerValue;
}

export const sizeofTOC_ENTRY_DESCRIPTOR = 40;

export function allocTOC_ENTRY_DESCRIPTOR(data?: Partial<TOC_ENTRY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofTOC_ENTRY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.qwStartTime !== undefined) view.setBigUint64(0, BigInt(data.qwStartTime), true);
  // 0x08: u64
  if (data?.qwEndTime !== undefined) view.setBigUint64(8, BigInt(data.qwEndTime), true);
  // 0x10: u64
  if (data?.qwStartPacketOffset !== undefined) view.setBigUint64(16, BigInt(data.qwStartPacketOffset), true);
  // 0x18: u64
  if (data?.qwEndPacketOffset !== undefined) view.setBigUint64(24, BigInt(data.qwEndPacketOffset), true);
  // 0x20: u64
  if (data?.qwRepresentativeFrameTime !== undefined) view.setBigUint64(32, BigInt(data.qwRepresentativeFrameTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_BufferDescription (size: 40)
 */
export interface DXVA_BufferDescription {
  /** u32 */
  dwTypeIndex: number;
  /** u32 */
  dwBufferIndex: number;
  /** u32 */
  dwDataOffset: number;
  /** u32 */
  dwDataSize: number;
  /** u32 */
  dwFirstMBaddress: number;
  /** u32 */
  dwNumMBsInBuffer: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwStride: number;
  /** u32 */
  dwReservedBits: number;
}

export const sizeofDXVA_BufferDescription = 40;

export function allocDXVA_BufferDescription(data?: Partial<DXVA_BufferDescription>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_BufferDescription);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTypeIndex !== undefined) view.setUint32(0, Number(data.dwTypeIndex), true);
  // 0x04: u32
  if (data?.dwBufferIndex !== undefined) view.setUint32(4, Number(data.dwBufferIndex), true);
  // 0x08: u32
  if (data?.dwDataOffset !== undefined) view.setUint32(8, Number(data.dwDataOffset), true);
  // 0x0c: u32
  if (data?.dwDataSize !== undefined) view.setUint32(12, Number(data.dwDataSize), true);
  // 0x10: u32
  if (data?.dwFirstMBaddress !== undefined) view.setUint32(16, Number(data.dwFirstMBaddress), true);
  // 0x14: u32
  if (data?.dwNumMBsInBuffer !== undefined) view.setUint32(20, Number(data.dwNumMBsInBuffer), true);
  // 0x18: u32
  if (data?.dwWidth !== undefined) view.setUint32(24, Number(data.dwWidth), true);
  // 0x1c: u32
  if (data?.dwHeight !== undefined) view.setUint32(28, Number(data.dwHeight), true);
  // 0x20: u32
  if (data?.dwStride !== undefined) view.setUint32(32, Number(data.dwStride), true);
  // 0x24: u32
  if (data?.dwReservedBits !== undefined) view.setUint32(36, Number(data.dwReservedBits), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_ConfigPictureDecode (size: 56)
 */
export interface DXVA_ConfigPictureDecode {
  /** u32 */
  dwFunction: number;
  /** array */
  dwReservedBits: Deno.PointerValue | null;
  /** System.Guid */
  guidConfigBitstreamEncryption: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidConfigMBcontrolEncryption: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidConfigResidDiffEncryption: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  bConfigBitstreamRaw: number;
  /** u8 */
  bConfigMBcontrolRasterOrder: number;
  /** u8 */
  bConfigResidDiffHost: number;
  /** u8 */
  bConfigSpatialResid8: number;
  /** u8 */
  bConfigResid8Subtraction: number;
  /** u8 */
  bConfigSpatialHost8or9Clipping: number;
  /** u8 */
  bConfigSpatialResidInterleaved: number;
  /** u8 */
  bConfigIntraResidUnsigned: number;
  /** u8 */
  bConfigResidDiffAccelerator: number;
  /** u8 */
  bConfigHostInverseScan: number;
  /** u8 */
  bConfigSpecificIDCT: number;
  /** u8 */
  bConfig4GroupedCoefs: number;
}

export const sizeofDXVA_ConfigPictureDecode = 56;

export function allocDXVA_ConfigPictureDecode(data?: Partial<DXVA_ConfigPictureDecode>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_ConfigPictureDecode);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFunction !== undefined) view.setUint32(0, Number(data.dwFunction), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.dwReservedBits !== undefined) view.setBigUint64(8, data.dwReservedBits === null ? 0n : BigInt(util.toPointer(data.dwReservedBits)), true);
  // 0x10: pointer
  if (data?.guidConfigBitstreamEncryption !== undefined) view.setBigUint64(16, data.guidConfigBitstreamEncryption === null ? 0n : BigInt(util.toPointer(data.guidConfigBitstreamEncryption)), true);
  // 0x18: pointer
  if (data?.guidConfigMBcontrolEncryption !== undefined) view.setBigUint64(24, data.guidConfigMBcontrolEncryption === null ? 0n : BigInt(util.toPointer(data.guidConfigMBcontrolEncryption)), true);
  // 0x20: pointer
  if (data?.guidConfigResidDiffEncryption !== undefined) view.setBigUint64(32, data.guidConfigResidDiffEncryption === null ? 0n : BigInt(util.toPointer(data.guidConfigResidDiffEncryption)), true);
  // 0x28: u8
  if (data?.bConfigBitstreamRaw !== undefined) view.setUint8(40, Number(data.bConfigBitstreamRaw));
  // 0x29: u8
  if (data?.bConfigMBcontrolRasterOrder !== undefined) view.setUint8(41, Number(data.bConfigMBcontrolRasterOrder));
  // 0x2a: u8
  if (data?.bConfigResidDiffHost !== undefined) view.setUint8(42, Number(data.bConfigResidDiffHost));
  // 0x2b: u8
  if (data?.bConfigSpatialResid8 !== undefined) view.setUint8(43, Number(data.bConfigSpatialResid8));
  // 0x2c: u8
  if (data?.bConfigResid8Subtraction !== undefined) view.setUint8(44, Number(data.bConfigResid8Subtraction));
  // 0x2d: u8
  if (data?.bConfigSpatialHost8or9Clipping !== undefined) view.setUint8(45, Number(data.bConfigSpatialHost8or9Clipping));
  // 0x2e: u8
  if (data?.bConfigSpatialResidInterleaved !== undefined) view.setUint8(46, Number(data.bConfigSpatialResidInterleaved));
  // 0x2f: u8
  if (data?.bConfigIntraResidUnsigned !== undefined) view.setUint8(47, Number(data.bConfigIntraResidUnsigned));
  // 0x30: u8
  if (data?.bConfigResidDiffAccelerator !== undefined) view.setUint8(48, Number(data.bConfigResidDiffAccelerator));
  // 0x31: u8
  if (data?.bConfigHostInverseScan !== undefined) view.setUint8(49, Number(data.bConfigHostInverseScan));
  // 0x32: u8
  if (data?.bConfigSpecificIDCT !== undefined) view.setUint8(50, Number(data.bConfigSpecificIDCT));
  // 0x33: u8
  if (data?.bConfig4GroupedCoefs !== undefined) view.setUint8(51, Number(data.bConfig4GroupedCoefs));
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_PictureParameters (size: 48)
 */
export interface DXVA_PictureParameters {
  /** u16 */
  wDecodedPictureIndex: number;
  /** u16 */
  wDeblockedPictureIndex: number;
  /** u16 */
  wForwardRefPictureIndex: number;
  /** u16 */
  wBackwardRefPictureIndex: number;
  /** u16 */
  wPicWidthInMBminus1: number;
  /** u16 */
  wPicHeightInMBminus1: number;
  /** u8 */
  bMacroblockWidthMinus1: number;
  /** u8 */
  bMacroblockHeightMinus1: number;
  /** u8 */
  bBlockWidthMinus1: number;
  /** u8 */
  bBlockHeightMinus1: number;
  /** u8 */
  bBPPminus1: number;
  /** u8 */
  bPicStructure: number;
  /** u8 */
  bSecondField: number;
  /** u8 */
  bPicIntra: number;
  /** u8 */
  bPicBackwardPrediction: number;
  /** u8 */
  bBidirectionalAveragingMode: number;
  /** u8 */
  bMVprecisionAndChromaRelation: number;
  /** u8 */
  bChromaFormat: number;
  /** u8 */
  bPicScanFixed: number;
  /** u8 */
  bPicScanMethod: number;
  /** u8 */
  bPicReadbackRequests: number;
  /** u8 */
  bRcontrol: number;
  /** u8 */
  bPicSpatialResid8: number;
  /** u8 */
  bPicOverflowBlocks: number;
  /** u8 */
  bPicExtrapolation: number;
  /** u8 */
  bPicDeblocked: number;
  /** u8 */
  bPicDeblockConfined: number;
  /** u8 */
  bPic4MVallowed: number;
  /** u8 */
  bPicOBMC: number;
  /** u8 */
  bPicBinPB: number;
  /** u8 */
  bMV_RPS: number;
  /** u8 */
  bReservedBits: number;
  /** u16 */
  wBitstreamFcodes: number;
  /** u16 */
  wBitstreamPCEelements: number;
  /** u8 */
  bBitstreamConcealmentNeed: number;
  /** u8 */
  bBitstreamConcealmentMethod: number;
}

export const sizeofDXVA_PictureParameters = 48;

export function allocDXVA_PictureParameters(data?: Partial<DXVA_PictureParameters>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_PictureParameters);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wDecodedPictureIndex !== undefined) view.setUint16(0, Number(data.wDecodedPictureIndex), true);
  // 0x02: u16
  if (data?.wDeblockedPictureIndex !== undefined) view.setUint16(2, Number(data.wDeblockedPictureIndex), true);
  // 0x04: u16
  if (data?.wForwardRefPictureIndex !== undefined) view.setUint16(4, Number(data.wForwardRefPictureIndex), true);
  // 0x06: u16
  if (data?.wBackwardRefPictureIndex !== undefined) view.setUint16(6, Number(data.wBackwardRefPictureIndex), true);
  // 0x08: u16
  if (data?.wPicWidthInMBminus1 !== undefined) view.setUint16(8, Number(data.wPicWidthInMBminus1), true);
  // 0x0a: u16
  if (data?.wPicHeightInMBminus1 !== undefined) view.setUint16(10, Number(data.wPicHeightInMBminus1), true);
  // 0x0c: u8
  if (data?.bMacroblockWidthMinus1 !== undefined) view.setUint8(12, Number(data.bMacroblockWidthMinus1));
  // 0x0d: u8
  if (data?.bMacroblockHeightMinus1 !== undefined) view.setUint8(13, Number(data.bMacroblockHeightMinus1));
  // 0x0e: u8
  if (data?.bBlockWidthMinus1 !== undefined) view.setUint8(14, Number(data.bBlockWidthMinus1));
  // 0x0f: u8
  if (data?.bBlockHeightMinus1 !== undefined) view.setUint8(15, Number(data.bBlockHeightMinus1));
  // 0x10: u8
  if (data?.bBPPminus1 !== undefined) view.setUint8(16, Number(data.bBPPminus1));
  // 0x11: u8
  if (data?.bPicStructure !== undefined) view.setUint8(17, Number(data.bPicStructure));
  // 0x12: u8
  if (data?.bSecondField !== undefined) view.setUint8(18, Number(data.bSecondField));
  // 0x13: u8
  if (data?.bPicIntra !== undefined) view.setUint8(19, Number(data.bPicIntra));
  // 0x14: u8
  if (data?.bPicBackwardPrediction !== undefined) view.setUint8(20, Number(data.bPicBackwardPrediction));
  // 0x15: u8
  if (data?.bBidirectionalAveragingMode !== undefined) view.setUint8(21, Number(data.bBidirectionalAveragingMode));
  // 0x16: u8
  if (data?.bMVprecisionAndChromaRelation !== undefined) view.setUint8(22, Number(data.bMVprecisionAndChromaRelation));
  // 0x17: u8
  if (data?.bChromaFormat !== undefined) view.setUint8(23, Number(data.bChromaFormat));
  // 0x18: u8
  if (data?.bPicScanFixed !== undefined) view.setUint8(24, Number(data.bPicScanFixed));
  // 0x19: u8
  if (data?.bPicScanMethod !== undefined) view.setUint8(25, Number(data.bPicScanMethod));
  // 0x1a: u8
  if (data?.bPicReadbackRequests !== undefined) view.setUint8(26, Number(data.bPicReadbackRequests));
  // 0x1b: u8
  if (data?.bRcontrol !== undefined) view.setUint8(27, Number(data.bRcontrol));
  // 0x1c: u8
  if (data?.bPicSpatialResid8 !== undefined) view.setUint8(28, Number(data.bPicSpatialResid8));
  // 0x1d: u8
  if (data?.bPicOverflowBlocks !== undefined) view.setUint8(29, Number(data.bPicOverflowBlocks));
  // 0x1e: u8
  if (data?.bPicExtrapolation !== undefined) view.setUint8(30, Number(data.bPicExtrapolation));
  // 0x1f: u8
  if (data?.bPicDeblocked !== undefined) view.setUint8(31, Number(data.bPicDeblocked));
  // 0x20: u8
  if (data?.bPicDeblockConfined !== undefined) view.setUint8(32, Number(data.bPicDeblockConfined));
  // 0x21: u8
  if (data?.bPic4MVallowed !== undefined) view.setUint8(33, Number(data.bPic4MVallowed));
  // 0x22: u8
  if (data?.bPicOBMC !== undefined) view.setUint8(34, Number(data.bPicOBMC));
  // 0x23: u8
  if (data?.bPicBinPB !== undefined) view.setUint8(35, Number(data.bPicBinPB));
  // 0x24: u8
  if (data?.bMV_RPS !== undefined) view.setUint8(36, Number(data.bMV_RPS));
  // 0x25: u8
  if (data?.bReservedBits !== undefined) view.setUint8(37, Number(data.bReservedBits));
  // 0x26: u16
  if (data?.wBitstreamFcodes !== undefined) view.setUint16(38, Number(data.wBitstreamFcodes), true);
  // 0x28: u16
  if (data?.wBitstreamPCEelements !== undefined) view.setUint16(40, Number(data.wBitstreamPCEelements), true);
  // 0x2a: u8
  if (data?.bBitstreamConcealmentNeed !== undefined) view.setUint8(42, Number(data.bBitstreamConcealmentNeed));
  // 0x2b: u8
  if (data?.bBitstreamConcealmentMethod !== undefined) view.setUint8(43, Number(data.bBitstreamConcealmentMethod));
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAUncompDataInfo (size: 16)
 */
export interface DXVAUncompDataInfo {
  /** u32 */
  UncompWidth: number;
  /** u32 */
  UncompHeight: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  UncompFormat: D3DFORMAT;
}

export const sizeofDXVAUncompDataInfo = 16;

export function allocDXVAUncompDataInfo(data?: Partial<DXVAUncompDataInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAUncompDataInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UncompWidth !== undefined) view.setUint32(0, Number(data.UncompWidth), true);
  // 0x04: u32
  if (data?.UncompHeight !== undefined) view.setUint32(4, Number(data.UncompHeight), true);
  // 0x08: u32
  if (data?.UncompFormat !== undefined) view.setUint32(8, Number(data.UncompFormat), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVACompBufferInfo (size: 32)
 */
export interface DXVACompBufferInfo {
  /** u32 */
  NumCompBuffers: number;
  /** u32 */
  WidthToCreate: number;
  /** u32 */
  HeightToCreate: number;
  /** u32 */
  BytesToAllocate: number;
  /** u32 */
  Usage: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
}

export const sizeofDXVACompBufferInfo = 32;

export function allocDXVACompBufferInfo(data?: Partial<DXVACompBufferInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVACompBufferInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCompBuffers !== undefined) view.setUint32(0, Number(data.NumCompBuffers), true);
  // 0x04: u32
  if (data?.WidthToCreate !== undefined) view.setUint32(4, Number(data.WidthToCreate), true);
  // 0x08: u32
  if (data?.HeightToCreate !== undefined) view.setUint32(8, Number(data.HeightToCreate), true);
  // 0x0c: u32
  if (data?.BytesToAllocate !== undefined) view.setUint32(12, Number(data.BytesToAllocate), true);
  // 0x10: u32
  if (data?.Usage !== undefined) view.setUint32(16, Number(data.Usage), true);
  // 0x14: u32
  if (data?.Pool !== undefined) view.setUint32(20, Number(data.Pool), true);
  // 0x18: u32
  if (data?.Format !== undefined) view.setUint32(24, Number(data.Format), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVABufferInfo (size: 16)
 */
export interface DXVABufferInfo {
  /** ptr */
  pCompSurface: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSize: number;
}

export const sizeofDXVABufferInfo = 16;

export function allocDXVABufferInfo(data?: Partial<DXVABufferInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVABufferInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCompSurface !== undefined) view.setBigUint64(0, data.pCompSurface === null ? 0n : BigInt(util.toPointer(data.pCompSurface)), true);
  // 0x08: u32
  if (data?.DataOffset !== undefined) view.setUint32(8, Number(data.DataOffset), true);
  // 0x0c: u32
  if (data?.DataSize !== undefined) view.setUint32(12, Number(data.DataSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_ExtendedFormat (size: 8)
 */
export interface DXVA_ExtendedFormat {
  /** u32 */
  _bitfield: number;
}

export const sizeofDXVA_ExtendedFormat = 8;

export function allocDXVA_ExtendedFormat(data?: Partial<DXVA_ExtendedFormat>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_ExtendedFormat);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_Frequency (size: 8)
 */
export interface DXVA_Frequency {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXVA_Frequency = 8;

export function allocDXVA_Frequency(data?: Partial<DXVA_Frequency>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_Frequency);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_VideoDesc (size: 40)
 */
export interface DXVA_VideoDesc {
  /** u32 */
  Size: number;
  /** u32 */
  SampleWidth: number;
  /** u32 */
  SampleHeight: number;
  /** u32 */
  SampleFormat: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  d3dFormat: D3DFORMAT;
  /** Windows.Win32.Media.MediaFoundation.DXVA_Frequency */
  InputSampleFreq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA_Frequency */
  OutputFrameFreq: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA_VideoDesc = 40;

export function allocDXVA_VideoDesc(data?: Partial<DXVA_VideoDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_VideoDesc);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.SampleWidth !== undefined) view.setUint32(4, Number(data.SampleWidth), true);
  // 0x08: u32
  if (data?.SampleHeight !== undefined) view.setUint32(8, Number(data.SampleHeight), true);
  // 0x0c: u32
  if (data?.SampleFormat !== undefined) view.setUint32(12, Number(data.SampleFormat), true);
  // 0x10: u32
  if (data?.d3dFormat !== undefined) view.setUint32(16, Number(data.d3dFormat), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.InputSampleFreq !== undefined) view.setBigUint64(24, data.InputSampleFreq === null ? 0n : BigInt(util.toPointer(data.InputSampleFreq)), true);
  // 0x20: pointer
  if (data?.OutputFrameFreq !== undefined) view.setBigUint64(32, data.OutputFrameFreq === null ? 0n : BigInt(util.toPointer(data.OutputFrameFreq)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_VideoSample (size: 32)
 */
export interface DXVA_VideoSample {
  /** i64 */
  rtStart: Deno.PointerValue;
  /** i64 */
  rtEnd: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA_SampleFormat */
  SampleFormat: DXVA_SampleFormat;
  /** ptr */
  lpDDSSrcSurface: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDXVA_VideoSample = 32;

export function allocDXVA_VideoSample(data?: Partial<DXVA_VideoSample>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_VideoSample);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.rtStart !== undefined) view.setBigInt64(0, BigInt(data.rtStart), true);
  // 0x08: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(8, BigInt(data.rtEnd), true);
  // 0x10: i32
  if (data?.SampleFormat !== undefined) view.setInt32(16, Number(data.SampleFormat), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpDDSSrcSurface !== undefined) view.setBigUint64(24, data.lpDDSSrcSurface === null ? 0n : BigInt(util.toPointer(data.lpDDSSrcSurface)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceCaps (size: 32)
 */
export interface DXVA_DeinterlaceCaps {
  /** u32 */
  Size: number;
  /** u32 */
  NumPreviousOutputFrames: number;
  /** u32 */
  InputPool: number;
  /** u32 */
  NumForwardRefSamples: number;
  /** u32 */
  NumBackwardRefSamples: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  d3dOutputFormat: D3DFORMAT;
  /** Windows.Win32.Media.MediaFoundation.DXVA_VideoProcessCaps */
  VideoProcessingCaps: DXVA_VideoProcessCaps;
  /** Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceTech */
  DeinterlaceTechnology: DXVA_DeinterlaceTech;
}

export const sizeofDXVA_DeinterlaceCaps = 32;

export function allocDXVA_DeinterlaceCaps(data?: Partial<DXVA_DeinterlaceCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.NumPreviousOutputFrames !== undefined) view.setUint32(4, Number(data.NumPreviousOutputFrames), true);
  // 0x08: u32
  if (data?.InputPool !== undefined) view.setUint32(8, Number(data.InputPool), true);
  // 0x0c: u32
  if (data?.NumForwardRefSamples !== undefined) view.setUint32(12, Number(data.NumForwardRefSamples), true);
  // 0x10: u32
  if (data?.NumBackwardRefSamples !== undefined) view.setUint32(16, Number(data.NumBackwardRefSamples), true);
  // 0x14: u32
  if (data?.d3dOutputFormat !== undefined) view.setUint32(20, Number(data.d3dOutputFormat), true);
  // 0x18: i32
  if (data?.VideoProcessingCaps !== undefined) view.setInt32(24, Number(data.VideoProcessingCaps), true);
  // 0x1c: i32
  if (data?.DeinterlaceTechnology !== undefined) view.setInt32(28, Number(data.DeinterlaceTechnology), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceBlt (size: 48)
 */
export interface DXVA_DeinterlaceBlt {
  /** u32 */
  Size: number;
  /** u32 */
  Reserved: number;
  /** i64 */
  rtTarget: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  DstRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  SrcRect: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumSourceSurfaces: number;
  /** f32 */
  Alpha: number;
  /** array */
  Source: Deno.PointerValue | null;
}

export const sizeofDXVA_DeinterlaceBlt = 48;

export function allocDXVA_DeinterlaceBlt(data?: Partial<DXVA_DeinterlaceBlt>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceBlt);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: i64
  if (data?.rtTarget !== undefined) view.setBigInt64(8, BigInt(data.rtTarget), true);
  // 0x10: pointer
  if (data?.DstRect !== undefined) view.setBigUint64(16, data.DstRect === null ? 0n : BigInt(util.toPointer(data.DstRect)), true);
  // 0x18: pointer
  if (data?.SrcRect !== undefined) view.setBigUint64(24, data.SrcRect === null ? 0n : BigInt(util.toPointer(data.SrcRect)), true);
  // 0x20: u32
  if (data?.NumSourceSurfaces !== undefined) view.setUint32(32, Number(data.NumSourceSurfaces), true);
  // 0x24: f32
  if (data?.Alpha !== undefined) view.setFloat32(36, Number(data.Alpha), true);
  // 0x28: pointer
  if (data?.Source !== undefined) view.setBigUint64(40, data.Source === null ? 0n : BigInt(util.toPointer(data.Source)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceBltEx (size: 56)
 */
export interface DXVA_DeinterlaceBltEx {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA_AYUVsample2 */
  BackgroundColor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  rtTarget: Deno.PointerValue;
  /** u32 */
  NumSourceSurfaces: number;
  /** f32 */
  Alpha: number;
  /** array */
  Source: Deno.PointerValue | null;
  /** u32 */
  DestinationFormat: number;
  /** u32 */
  DestinationFlags: number;
}

export const sizeofDXVA_DeinterlaceBltEx = 56;

export function allocDXVA_DeinterlaceBltEx(data?: Partial<DXVA_DeinterlaceBltEx>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceBltEx);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(8, data.BackgroundColor === null ? 0n : BigInt(util.toPointer(data.BackgroundColor)), true);
  // 0x10: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(16, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x18: i64
  if (data?.rtTarget !== undefined) view.setBigInt64(24, BigInt(data.rtTarget), true);
  // 0x20: u32
  if (data?.NumSourceSurfaces !== undefined) view.setUint32(32, Number(data.NumSourceSurfaces), true);
  // 0x24: f32
  if (data?.Alpha !== undefined) view.setFloat32(36, Number(data.Alpha), true);
  // 0x28: pointer
  if (data?.Source !== undefined) view.setBigUint64(40, data.Source === null ? 0n : BigInt(util.toPointer(data.Source)), true);
  // 0x30: u32
  if (data?.DestinationFormat !== undefined) view.setUint32(48, Number(data.DestinationFormat), true);
  // 0x34: u32
  if (data?.DestinationFlags !== undefined) view.setUint32(52, Number(data.DestinationFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceQueryAvailableModes (size: 16)
 */
export interface DXVA_DeinterlaceQueryAvailableModes {
  /** u32 */
  Size: number;
  /** u32 */
  NumGuids: number;
  /** array */
  Guids: Deno.PointerValue | null;
}

export const sizeofDXVA_DeinterlaceQueryAvailableModes = 16;

export function allocDXVA_DeinterlaceQueryAvailableModes(data?: Partial<DXVA_DeinterlaceQueryAvailableModes>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceQueryAvailableModes);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.NumGuids !== undefined) view.setUint32(4, Number(data.NumGuids), true);
  // 0x08: pointer
  if (data?.Guids !== undefined) view.setBigUint64(8, data.Guids === null ? 0n : BigInt(util.toPointer(data.Guids)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceQueryModeCaps (size: 24)
 */
export interface DXVA_DeinterlaceQueryModeCaps {
  /** u32 */
  Size: number;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA_VideoDesc */
  VideoDesc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA_DeinterlaceQueryModeCaps = 24;

export function allocDXVA_DeinterlaceQueryModeCaps(data?: Partial<DXVA_DeinterlaceQueryModeCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceQueryModeCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Guid !== undefined) view.setBigUint64(8, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x10: pointer
  if (data?.VideoDesc !== undefined) view.setBigUint64(16, data.VideoDesc === null ? 0n : BigInt(util.toPointer(data.VideoDesc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_ProcAmpControlCaps (size: 24)
 */
export interface DXVA_ProcAmpControlCaps {
  /** u32 */
  Size: number;
  /** u32 */
  InputPool: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  d3dOutputFormat: D3DFORMAT;
  /** u32 */
  ProcAmpControlProps: number;
  /** u32 */
  VideoProcessingCaps: number;
}

export const sizeofDXVA_ProcAmpControlCaps = 24;

export function allocDXVA_ProcAmpControlCaps(data?: Partial<DXVA_ProcAmpControlCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_ProcAmpControlCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.InputPool !== undefined) view.setUint32(4, Number(data.InputPool), true);
  // 0x08: u32
  if (data?.d3dOutputFormat !== undefined) view.setUint32(8, Number(data.d3dOutputFormat), true);
  // 0x0c: u32
  if (data?.ProcAmpControlProps !== undefined) view.setUint32(12, Number(data.ProcAmpControlProps), true);
  // 0x10: u32
  if (data?.VideoProcessingCaps !== undefined) view.setUint32(16, Number(data.VideoProcessingCaps), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_ProcAmpControlQueryRange (size: 16)
 */
export interface DXVA_ProcAmpControlQueryRange {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA_ProcAmpControlProp */
  ProcAmpControlProp: DXVA_ProcAmpControlProp;
  /** Windows.Win32.Media.MediaFoundation.DXVA_VideoDesc */
  VideoDesc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA_ProcAmpControlQueryRange = 16;

export function allocDXVA_ProcAmpControlQueryRange(data?: Partial<DXVA_ProcAmpControlQueryRange>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_ProcAmpControlQueryRange);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.ProcAmpControlProp !== undefined) view.setInt32(4, Number(data.ProcAmpControlProp), true);
  // 0x08: pointer
  if (data?.VideoDesc !== undefined) view.setBigUint64(8, data.VideoDesc === null ? 0n : BigInt(util.toPointer(data.VideoDesc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_VideoPropertyRange (size: 16)
 */
export interface DXVA_VideoPropertyRange {
  /** f32 */
  MinValue: number;
  /** f32 */
  MaxValue: number;
  /** f32 */
  DefaultValue: number;
  /** f32 */
  StepSize: number;
}

export const sizeofDXVA_VideoPropertyRange = 16;

export function allocDXVA_VideoPropertyRange(data?: Partial<DXVA_VideoPropertyRange>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_VideoPropertyRange);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.MinValue !== undefined) view.setFloat32(0, Number(data.MinValue), true);
  // 0x04: f32
  if (data?.MaxValue !== undefined) view.setFloat32(4, Number(data.MaxValue), true);
  // 0x08: f32
  if (data?.DefaultValue !== undefined) view.setFloat32(8, Number(data.DefaultValue), true);
  // 0x0c: f32
  if (data?.StepSize !== undefined) view.setFloat32(12, Number(data.StepSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_ProcAmpControlBlt (size: 48)
 */
export interface DXVA_ProcAmpControlBlt {
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.RECT */
  DstRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  SrcRect: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  Alpha: number;
  /** f32 */
  Brightness: number;
  /** f32 */
  Contrast: number;
  /** f32 */
  Hue: number;
  /** f32 */
  Saturation: number;
}

export const sizeofDXVA_ProcAmpControlBlt = 48;

export function allocDXVA_ProcAmpControlBlt(data?: Partial<DXVA_ProcAmpControlBlt>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_ProcAmpControlBlt);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DstRect !== undefined) view.setBigUint64(8, data.DstRect === null ? 0n : BigInt(util.toPointer(data.DstRect)), true);
  // 0x10: pointer
  if (data?.SrcRect !== undefined) view.setBigUint64(16, data.SrcRect === null ? 0n : BigInt(util.toPointer(data.SrcRect)), true);
  // 0x18: f32
  if (data?.Alpha !== undefined) view.setFloat32(24, Number(data.Alpha), true);
  // 0x1c: f32
  if (data?.Brightness !== undefined) view.setFloat32(28, Number(data.Brightness), true);
  // 0x20: f32
  if (data?.Contrast !== undefined) view.setFloat32(32, Number(data.Contrast), true);
  // 0x24: f32
  if (data?.Hue !== undefined) view.setFloat32(36, Number(data.Hue), true);
  // 0x28: f32
  if (data?.Saturation !== undefined) view.setFloat32(40, Number(data.Saturation), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_COPPSignature (size: 8)
 */
export interface DXVA_COPPSignature {
  /** array */
  Signature: Deno.PointerValue | null;
}

export const sizeofDXVA_COPPSignature = 8;

export function allocDXVA_COPPSignature(data?: Partial<DXVA_COPPSignature>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPSignature);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Signature !== undefined) view.setBigUint64(0, data.Signature === null ? 0n : BigInt(util.toPointer(data.Signature)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_COPPCommand (size: 32)
 */
export interface DXVA_COPPCommand {
  /** System.Guid */
  macKDI: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidCommandID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSequence: number;
  /** u32 */
  cbSizeData: number;
  /** array */
  CommandData: Deno.PointerValue | null;
}

export const sizeofDXVA_COPPCommand = 32;

export function allocDXVA_COPPCommand(data?: Partial<DXVA_COPPCommand>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPCommand);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.macKDI !== undefined) view.setBigUint64(0, data.macKDI === null ? 0n : BigInt(util.toPointer(data.macKDI)), true);
  // 0x08: pointer
  if (data?.guidCommandID !== undefined) view.setBigUint64(8, data.guidCommandID === null ? 0n : BigInt(util.toPointer(data.guidCommandID)), true);
  // 0x10: u32
  if (data?.dwSequence !== undefined) view.setUint32(16, Number(data.dwSequence), true);
  // 0x14: u32
  if (data?.cbSizeData !== undefined) view.setUint32(20, Number(data.cbSizeData), true);
  // 0x18: pointer
  if (data?.CommandData !== undefined) view.setBigUint64(24, data.CommandData === null ? 0n : BigInt(util.toPointer(data.CommandData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_COPPStatusInput (size: 32)
 */
export interface DXVA_COPPStatusInput {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidStatusRequestID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSequence: number;
  /** u32 */
  cbSizeData: number;
  /** array */
  StatusData: Deno.PointerValue | null;
}

export const sizeofDXVA_COPPStatusInput = 32;

export function allocDXVA_COPPStatusInput(data?: Partial<DXVA_COPPStatusInput>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusInput);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(util.toPointer(data.rApp)), true);
  // 0x08: pointer
  if (data?.guidStatusRequestID !== undefined) view.setBigUint64(8, data.guidStatusRequestID === null ? 0n : BigInt(util.toPointer(data.guidStatusRequestID)), true);
  // 0x10: u32
  if (data?.dwSequence !== undefined) view.setUint32(16, Number(data.dwSequence), true);
  // 0x14: u32
  if (data?.cbSizeData !== undefined) view.setUint32(20, Number(data.cbSizeData), true);
  // 0x18: pointer
  if (data?.StatusData !== undefined) view.setBigUint64(24, data.StatusData === null ? 0n : BigInt(util.toPointer(data.StatusData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_COPPStatusOutput (size: 24)
 */
export interface DXVA_COPPStatusOutput {
  /** System.Guid */
  macKDI: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbSizeData: number;
  /** array */
  COPPStatus: Deno.PointerValue | null;
}

export const sizeofDXVA_COPPStatusOutput = 24;

export function allocDXVA_COPPStatusOutput(data?: Partial<DXVA_COPPStatusOutput>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusOutput);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.macKDI !== undefined) view.setBigUint64(0, data.macKDI === null ? 0n : BigInt(util.toPointer(data.macKDI)), true);
  // 0x08: u32
  if (data?.cbSizeData !== undefined) view.setUint32(8, Number(data.cbSizeData), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.COPPStatus !== undefined) view.setBigUint64(16, data.COPPStatus === null ? 0n : BigInt(util.toPointer(data.COPPStatus)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL (size: 8)
 */
export interface DXVAHD_RATIONAL {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXVAHD_RATIONAL = 8;

export function allocDXVAHD_RATIONAL(data?: Partial<DXVAHD_RATIONAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_RATIONAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR_RGBA (size: 16)
 */
export interface DXVAHD_COLOR_RGBA {
  /** f32 */
  R: number;
  /** f32 */
  G: number;
  /** f32 */
  B: number;
  /** f32 */
  A: number;
}

export const sizeofDXVAHD_COLOR_RGBA = 16;

export function allocDXVAHD_COLOR_RGBA(data?: Partial<DXVAHD_COLOR_RGBA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_COLOR_RGBA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.R !== undefined) view.setFloat32(0, Number(data.R), true);
  // 0x04: f32
  if (data?.G !== undefined) view.setFloat32(4, Number(data.G), true);
  // 0x08: f32
  if (data?.B !== undefined) view.setFloat32(8, Number(data.B), true);
  // 0x0c: f32
  if (data?.A !== undefined) view.setFloat32(12, Number(data.A), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR_YCbCrA (size: 16)
 */
export interface DXVAHD_COLOR_YCbCrA {
  /** f32 */
  Y: number;
  /** f32 */
  Cb: number;
  /** f32 */
  Cr: number;
  /** f32 */
  A: number;
}

export const sizeofDXVAHD_COLOR_YCbCrA = 16;

export function allocDXVAHD_COLOR_YCbCrA(data?: Partial<DXVAHD_COLOR_YCbCrA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_COLOR_YCbCrA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Y !== undefined) view.setFloat32(0, Number(data.Y), true);
  // 0x04: f32
  if (data?.Cb !== undefined) view.setFloat32(4, Number(data.Cb), true);
  // 0x08: f32
  if (data?.Cr !== undefined) view.setFloat32(8, Number(data.Cr), true);
  // 0x0c: f32
  if (data?.A !== undefined) view.setFloat32(12, Number(data.A), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR (size: 16)
 */
export interface DXVAHD_COLOR {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR_RGBA */
  RGB: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR_YCbCrA */
  YCbCr: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHD_COLOR = 16;

export function allocDXVAHD_COLOR(data?: Partial<DXVAHD_COLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_COLOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RGB !== undefined) view.setBigUint64(0, data.RGB === null ? 0n : BigInt(util.toPointer(data.RGB)), true);
  // 0x08: pointer
  if (data?.YCbCr !== undefined) view.setBigUint64(8, data.YCbCr === null ? 0n : BigInt(util.toPointer(data.YCbCr)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_CONTENT_DESC (size: 40)
 */
export interface DXVAHD_CONTENT_DESC {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_FRAME_FORMAT */
  InputFrameFormat: DXVAHD_FRAME_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  InputFrameRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InputWidth: number;
  /** u32 */
  InputHeight: number;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  OutputFrameRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputWidth: number;
  /** u32 */
  OutputHeight: number;
}

export const sizeofDXVAHD_CONTENT_DESC = 40;

export function allocDXVAHD_CONTENT_DESC(data?: Partial<DXVAHD_CONTENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_CONTENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InputFrameFormat !== undefined) view.setInt32(0, Number(data.InputFrameFormat), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.InputFrameRate !== undefined) view.setBigUint64(8, data.InputFrameRate === null ? 0n : BigInt(util.toPointer(data.InputFrameRate)), true);
  // 0x10: u32
  if (data?.InputWidth !== undefined) view.setUint32(16, Number(data.InputWidth), true);
  // 0x14: u32
  if (data?.InputHeight !== undefined) view.setUint32(20, Number(data.InputHeight), true);
  // 0x18: pointer
  if (data?.OutputFrameRate !== undefined) view.setBigUint64(24, data.OutputFrameRate === null ? 0n : BigInt(util.toPointer(data.OutputFrameRate)), true);
  // 0x20: u32
  if (data?.OutputWidth !== undefined) view.setUint32(32, Number(data.OutputWidth), true);
  // 0x24: u32
  if (data?.OutputHeight !== undefined) view.setUint32(36, Number(data.OutputHeight), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_VPDEVCAPS (size: 48)
 */
export interface DXVAHD_VPDEVCAPS {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_DEVICE_TYPE */
  DeviceType: DXVAHD_DEVICE_TYPE;
  /** u32 */
  DeviceCaps: number;
  /** u32 */
  FeatureCaps: number;
  /** u32 */
  FilterCaps: number;
  /** u32 */
  InputFormatCaps: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  InputPool: D3DPOOL;
  /** u32 */
  OutputFormatCount: number;
  /** u32 */
  InputFormatCount: number;
  /** u32 */
  VideoProcessorCount: number;
  /** u32 */
  MaxInputStreams: number;
  /** u32 */
  MaxStreamStates: number;
}

export const sizeofDXVAHD_VPDEVCAPS = 48;

export function allocDXVAHD_VPDEVCAPS(data?: Partial<DXVAHD_VPDEVCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_VPDEVCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DeviceType !== undefined) view.setInt32(0, Number(data.DeviceType), true);
  // 0x04: u32
  if (data?.DeviceCaps !== undefined) view.setUint32(4, Number(data.DeviceCaps), true);
  // 0x08: u32
  if (data?.FeatureCaps !== undefined) view.setUint32(8, Number(data.FeatureCaps), true);
  // 0x0c: u32
  if (data?.FilterCaps !== undefined) view.setUint32(12, Number(data.FilterCaps), true);
  // 0x10: u32
  if (data?.InputFormatCaps !== undefined) view.setUint32(16, Number(data.InputFormatCaps), true);
  // 0x14: u32
  if (data?.InputPool !== undefined) view.setUint32(20, Number(data.InputPool), true);
  // 0x18: u32
  if (data?.OutputFormatCount !== undefined) view.setUint32(24, Number(data.OutputFormatCount), true);
  // 0x1c: u32
  if (data?.InputFormatCount !== undefined) view.setUint32(28, Number(data.InputFormatCount), true);
  // 0x20: u32
  if (data?.VideoProcessorCount !== undefined) view.setUint32(32, Number(data.VideoProcessorCount), true);
  // 0x24: u32
  if (data?.MaxInputStreams !== undefined) view.setUint32(36, Number(data.MaxInputStreams), true);
  // 0x28: u32
  if (data?.MaxStreamStates !== undefined) view.setUint32(40, Number(data.MaxStreamStates), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_VPCAPS (size: 32)
 */
export interface DXVAHD_VPCAPS {
  /** System.Guid */
  VPGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
  /** u32 */
  ProcessorCaps: number;
  /** u32 */
  ITelecineCaps: number;
  /** u32 */
  CustomRateCount: number;
}

export const sizeofDXVAHD_VPCAPS = 32;

export function allocDXVAHD_VPCAPS(data?: Partial<DXVAHD_VPCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_VPCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VPGuid !== undefined) view.setBigUint64(0, data.VPGuid === null ? 0n : BigInt(util.toPointer(data.VPGuid)), true);
  // 0x08: u32
  if (data?.PastFrames !== undefined) view.setUint32(8, Number(data.PastFrames), true);
  // 0x0c: u32
  if (data?.FutureFrames !== undefined) view.setUint32(12, Number(data.FutureFrames), true);
  // 0x10: u32
  if (data?.ProcessorCaps !== undefined) view.setUint32(16, Number(data.ProcessorCaps), true);
  // 0x14: u32
  if (data?.ITelecineCaps !== undefined) view.setUint32(20, Number(data.ITelecineCaps), true);
  // 0x18: u32
  if (data?.CustomRateCount !== undefined) view.setUint32(24, Number(data.CustomRateCount), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_CUSTOM_RATE_DATA (size: 24)
 */
export interface DXVAHD_CUSTOM_RATE_DATA {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  CustomRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputFrames: number;
  /** Windows.Win32.Foundation.BOOL */
  InputInterlaced: boolean;
  /** u32 */
  InputFramesOrFields: number;
}

export const sizeofDXVAHD_CUSTOM_RATE_DATA = 24;

export function allocDXVAHD_CUSTOM_RATE_DATA(data?: Partial<DXVAHD_CUSTOM_RATE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_CUSTOM_RATE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CustomRate !== undefined) view.setBigUint64(0, data.CustomRate === null ? 0n : BigInt(util.toPointer(data.CustomRate)), true);
  // 0x08: u32
  if (data?.OutputFrames !== undefined) view.setUint32(8, Number(data.OutputFrames), true);
  // 0x0c: i32
  if (data?.InputInterlaced !== undefined) view.setInt32(12, Number(data.InputInterlaced), true);
  // 0x10: u32
  if (data?.InputFramesOrFields !== undefined) view.setUint32(16, Number(data.InputFramesOrFields), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_FILTER_RANGE_DATA (size: 16)
 */
export interface DXVAHD_FILTER_RANGE_DATA {
  /** i32 */
  Minimum: number;
  /** i32 */
  Maximum: number;
  /** i32 */
  Default: number;
  /** f32 */
  Multiplier: number;
}

export const sizeofDXVAHD_FILTER_RANGE_DATA = 16;

export function allocDXVAHD_FILTER_RANGE_DATA(data?: Partial<DXVAHD_FILTER_RANGE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_FILTER_RANGE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Minimum !== undefined) view.setInt32(0, Number(data.Minimum), true);
  // 0x04: i32
  if (data?.Maximum !== undefined) view.setInt32(4, Number(data.Maximum), true);
  // 0x08: i32
  if (data?.Default !== undefined) view.setInt32(8, Number(data.Default), true);
  // 0x0c: f32
  if (data?.Multiplier !== undefined) view.setFloat32(12, Number(data.Multiplier), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_TARGET_RECT_DATA (size: 16)
 */
export interface DXVAHD_BLT_STATE_TARGET_RECT_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Foundation.RECT */
  TargetRect: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHD_BLT_STATE_TARGET_RECT_DATA = 16;

export function allocDXVAHD_BLT_STATE_TARGET_RECT_DATA(data?: Partial<DXVAHD_BLT_STATE_TARGET_RECT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_TARGET_RECT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TargetRect !== undefined) view.setBigUint64(8, data.TargetRect === null ? 0n : BigInt(util.toPointer(data.TargetRect)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA (size: 16)
 */
export interface DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA {
  /** Windows.Win32.Foundation.BOOL */
  YCbCr: boolean;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR */
  BackgroundColor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA = 16;

export function allocDXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA(data?: Partial<DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.YCbCr !== undefined) view.setInt32(0, Number(data.YCbCr), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(8, data.BackgroundColor === null ? 0n : BigInt(util.toPointer(data.BackgroundColor)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA (size: 8)
 */
export interface DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA = 8;

export function allocDXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA(data?: Partial<DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_ALPHA_FILL_DATA (size: 8)
 */
export interface DXVAHD_BLT_STATE_ALPHA_FILL_DATA {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_ALPHA_FILL_MODE */
  Mode: DXVAHD_ALPHA_FILL_MODE;
  /** u32 */
  StreamNumber: number;
}

export const sizeofDXVAHD_BLT_STATE_ALPHA_FILL_DATA = 8;

export function allocDXVAHD_BLT_STATE_ALPHA_FILL_DATA(data?: Partial<DXVAHD_BLT_STATE_ALPHA_FILL_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_ALPHA_FILL_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mode !== undefined) view.setInt32(0, Number(data.Mode), true);
  // 0x04: u32
  if (data?.StreamNumber !== undefined) view.setUint32(4, Number(data.StreamNumber), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_CONSTRICTION_DATA (size: 16)
 */
export interface DXVAHD_BLT_STATE_CONSTRICTION_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Foundation.SIZE */
  Size: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHD_BLT_STATE_CONSTRICTION_DATA = 16;

export function allocDXVAHD_BLT_STATE_CONSTRICTION_DATA(data?: Partial<DXVAHD_BLT_STATE_CONSTRICTION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_CONSTRICTION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Size !== undefined) view.setBigUint64(8, data.Size === null ? 0n : BigInt(util.toPointer(data.Size)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_PRIVATE_DATA (size: 24)
 */
export interface DXVAHD_BLT_STATE_PRIVATE_DATA {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DataSize: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDXVAHD_BLT_STATE_PRIVATE_DATA = 24;

export function allocDXVAHD_BLT_STATE_PRIVATE_DATA(data?: Partial<DXVAHD_BLT_STATE_PRIVATE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_PRIVATE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x08: u32
  if (data?.DataSize !== undefined) view.setUint32(8, Number(data.DataSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pData !== undefined) view.setBigUint64(16, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_D3DFORMAT_DATA (size: 8)
 */
export interface DXVAHD_STREAM_STATE_D3DFORMAT_DATA {
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
}

export const sizeofDXVAHD_STREAM_STATE_D3DFORMAT_DATA = 8;

export function allocDXVAHD_STREAM_STATE_D3DFORMAT_DATA(data?: Partial<DXVAHD_STREAM_STATE_D3DFORMAT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_D3DFORMAT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA (size: 8)
 */
export interface DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_FRAME_FORMAT */
  FrameFormat: DXVAHD_FRAME_FORMAT;
}

export const sizeofDXVAHD_STREAM_STATE_FRAME_FORMAT_DATA = 8;

export function allocDXVAHD_STREAM_STATE_FRAME_FORMAT_DATA(data?: Partial<DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_FRAME_FORMAT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FrameFormat !== undefined) view.setInt32(0, Number(data.FrameFormat), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA (size: 8)
 */
export interface DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA = 8;

export function allocDXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA(data?: Partial<DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA {
  /** Windows.Win32.Foundation.BOOL */
  RepeatFrame: boolean;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_OUTPUT_RATE */
  OutputRate: DXVAHD_OUTPUT_RATE;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  CustomRate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHD_STREAM_STATE_OUTPUT_RATE_DATA = 16;

export function allocDXVAHD_STREAM_STATE_OUTPUT_RATE_DATA(data?: Partial<DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_OUTPUT_RATE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RepeatFrame !== undefined) view.setInt32(0, Number(data.RepeatFrame), true);
  // 0x04: i32
  if (data?.OutputRate !== undefined) view.setInt32(4, Number(data.OutputRate), true);
  // 0x08: pointer
  if (data?.CustomRate !== undefined) view.setBigUint64(8, data.CustomRate === null ? 0n : BigInt(util.toPointer(data.CustomRate)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_SOURCE_RECT_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_SOURCE_RECT_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Foundation.RECT */
  SourceRect: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHD_STREAM_STATE_SOURCE_RECT_DATA = 16;

export function allocDXVAHD_STREAM_STATE_SOURCE_RECT_DATA(data?: Partial<DXVAHD_STREAM_STATE_SOURCE_RECT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_SOURCE_RECT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SourceRect !== undefined) view.setBigUint64(8, data.SourceRect === null ? 0n : BigInt(util.toPointer(data.SourceRect)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Foundation.RECT */
  DestinationRect: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHD_STREAM_STATE_DESTINATION_RECT_DATA = 16;

export function allocDXVAHD_STREAM_STATE_DESTINATION_RECT_DATA(data?: Partial<DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_DESTINATION_RECT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DestinationRect !== undefined) view.setBigUint64(8, data.DestinationRect === null ? 0n : BigInt(util.toPointer(data.DestinationRect)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_ALPHA_DATA (size: 8)
 */
export interface DXVAHD_STREAM_STATE_ALPHA_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** f32 */
  Alpha: number;
}

export const sizeofDXVAHD_STREAM_STATE_ALPHA_DATA = 8;

export function allocDXVAHD_STREAM_STATE_ALPHA_DATA(data?: Partial<DXVAHD_STREAM_STATE_ALPHA_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_ALPHA_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: f32
  if (data?.Alpha !== undefined) view.setFloat32(4, Number(data.Alpha), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_PALETTE_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_PALETTE_DATA {
  /** u32 */
  Count: number;
  /** ptr */
  pEntries: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDXVAHD_STREAM_STATE_PALETTE_DATA = 16;

export function allocDXVAHD_STREAM_STATE_PALETTE_DATA(data?: Partial<DXVAHD_STREAM_STATE_PALETTE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_PALETTE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEntries !== undefined) view.setBigUint64(8, data.pEntries === null ? 0n : BigInt(util.toPointer(data.pEntries)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_LUMA_KEY_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_LUMA_KEY_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** f32 */
  Lower: number;
  /** f32 */
  Upper: number;
}

export const sizeofDXVAHD_STREAM_STATE_LUMA_KEY_DATA = 16;

export function allocDXVAHD_STREAM_STATE_LUMA_KEY_DATA(data?: Partial<DXVAHD_STREAM_STATE_LUMA_KEY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_LUMA_KEY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: f32
  if (data?.Lower !== undefined) view.setFloat32(4, Number(data.Lower), true);
  // 0x08: f32
  if (data?.Upper !== undefined) view.setFloat32(8, Number(data.Upper), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA (size: 24)
 */
export interface DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  SourceAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  DestinationAspectRatio: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHD_STREAM_STATE_ASPECT_RATIO_DATA = 24;

export function allocDXVAHD_STREAM_STATE_ASPECT_RATIO_DATA(data?: Partial<DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_ASPECT_RATIO_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SourceAspectRatio !== undefined) view.setBigUint64(8, data.SourceAspectRatio === null ? 0n : BigInt(util.toPointer(data.SourceAspectRatio)), true);
  // 0x10: pointer
  if (data?.DestinationAspectRatio !== undefined) view.setBigUint64(16, data.DestinationAspectRatio === null ? 0n : BigInt(util.toPointer(data.DestinationAspectRatio)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_FILTER_DATA (size: 8)
 */
export interface DXVAHD_STREAM_STATE_FILTER_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** i32 */
  Level: number;
}

export const sizeofDXVAHD_STREAM_STATE_FILTER_DATA = 8;

export function allocDXVAHD_STREAM_STATE_FILTER_DATA(data?: Partial<DXVAHD_STREAM_STATE_FILTER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_FILTER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: i32
  if (data?.Level !== undefined) view.setInt32(4, Number(data.Level), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_PRIVATE_DATA (size: 24)
 */
export interface DXVAHD_STREAM_STATE_PRIVATE_DATA {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DataSize: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDXVAHD_STREAM_STATE_PRIVATE_DATA = 24;

export function allocDXVAHD_STREAM_STATE_PRIVATE_DATA(data?: Partial<DXVAHD_STREAM_STATE_PRIVATE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_PRIVATE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x08: u32
  if (data?.DataSize !== undefined) view.setUint32(8, Number(data.DataSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pData !== undefined) view.setBigUint64(16, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_DATA (size: 48)
 */
export interface DXVAHD_STREAM_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** u32 */
  OutputIndex: number;
  /** u32 */
  InputFrameOrField: number;
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
  /** ptr */
  ppPastSurfaces: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  pInputSurface: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ppFutureSurfaces: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDXVAHD_STREAM_DATA = 48;

export function allocDXVAHD_STREAM_DATA(data?: Partial<DXVAHD_STREAM_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: u32
  if (data?.OutputIndex !== undefined) view.setUint32(4, Number(data.OutputIndex), true);
  // 0x08: u32
  if (data?.InputFrameOrField !== undefined) view.setUint32(8, Number(data.InputFrameOrField), true);
  // 0x0c: u32
  if (data?.PastFrames !== undefined) view.setUint32(12, Number(data.PastFrames), true);
  // 0x10: u32
  if (data?.FutureFrames !== undefined) view.setUint32(16, Number(data.FutureFrames), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ppPastSurfaces !== undefined) view.setBigUint64(24, data.ppPastSurfaces === null ? 0n : BigInt(util.toPointer(data.ppPastSurfaces)), true);
  // 0x20: pointer
  if (data?.pInputSurface !== undefined) view.setBigUint64(32, data.pInputSurface === null ? 0n : BigInt(util.toPointer(data.pInputSurface)), true);
  // 0x28: pointer
  if (data?.ppFutureSurfaces !== undefined) view.setBigUint64(40, data.ppFutureSurfaces === null ? 0n : BigInt(util.toPointer(data.ppFutureSurfaces)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** u32 */
  ITelecineFlags: number;
  /** u32 */
  Frames: number;
  /** u32 */
  InputField: number;
}

export const sizeofDXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA = 16;

export function allocDXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA(data?: Partial<DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: u32
  if (data?.ITelecineFlags !== undefined) view.setUint32(4, Number(data.ITelecineFlags), true);
  // 0x08: u32
  if (data?.Frames !== undefined) view.setUint32(8, Number(data.Frames), true);
  // 0x0c: u32
  if (data?.InputField !== undefined) view.setUint32(12, Number(data.InputField), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDSW_CALLBACKS (size: 128)
 */
export interface DXVAHDSW_CALLBACKS {
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_CreateDevice */
  CreateDevice: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_ProposeVideoPrivateFormat */
  ProposeVideoPrivateFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorDeviceCaps */
  GetVideoProcessorDeviceCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorOutputFormats */
  GetVideoProcessorOutputFormats: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorInputFormats */
  GetVideoProcessorInputFormats: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorCaps */
  GetVideoProcessorCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorCustomRates */
  GetVideoProcessorCustomRates: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorFilterRange */
  GetVideoProcessorFilterRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_DestroyDevice */
  DestroyDevice: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_CreateVideoProcessor */
  CreateVideoProcessor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_SetVideoProcessBltState */
  SetVideoProcessBltState: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessBltStatePrivate */
  GetVideoProcessBltStatePrivate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_SetVideoProcessStreamState */
  SetVideoProcessStreamState: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessStreamStatePrivate */
  GetVideoProcessStreamStatePrivate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_VideoProcessBltHD */
  VideoProcessBltHD: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_DestroyVideoProcessor */
  DestroyVideoProcessor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHDSW_CALLBACKS = 128;

export function allocDXVAHDSW_CALLBACKS(data?: Partial<DXVAHDSW_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDSW_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CreateDevice !== undefined) view.setBigUint64(0, data.CreateDevice === null ? 0n : BigInt(util.toPointer(data.CreateDevice)), true);
  // 0x08: pointer
  if (data?.ProposeVideoPrivateFormat !== undefined) view.setBigUint64(8, data.ProposeVideoPrivateFormat === null ? 0n : BigInt(util.toPointer(data.ProposeVideoPrivateFormat)), true);
  // 0x10: pointer
  if (data?.GetVideoProcessorDeviceCaps !== undefined) view.setBigUint64(16, data.GetVideoProcessorDeviceCaps === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorDeviceCaps)), true);
  // 0x18: pointer
  if (data?.GetVideoProcessorOutputFormats !== undefined) view.setBigUint64(24, data.GetVideoProcessorOutputFormats === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorOutputFormats)), true);
  // 0x20: pointer
  if (data?.GetVideoProcessorInputFormats !== undefined) view.setBigUint64(32, data.GetVideoProcessorInputFormats === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorInputFormats)), true);
  // 0x28: pointer
  if (data?.GetVideoProcessorCaps !== undefined) view.setBigUint64(40, data.GetVideoProcessorCaps === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorCaps)), true);
  // 0x30: pointer
  if (data?.GetVideoProcessorCustomRates !== undefined) view.setBigUint64(48, data.GetVideoProcessorCustomRates === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorCustomRates)), true);
  // 0x38: pointer
  if (data?.GetVideoProcessorFilterRange !== undefined) view.setBigUint64(56, data.GetVideoProcessorFilterRange === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorFilterRange)), true);
  // 0x40: pointer
  if (data?.DestroyDevice !== undefined) view.setBigUint64(64, data.DestroyDevice === null ? 0n : BigInt(util.toPointer(data.DestroyDevice)), true);
  // 0x48: pointer
  if (data?.CreateVideoProcessor !== undefined) view.setBigUint64(72, data.CreateVideoProcessor === null ? 0n : BigInt(util.toPointer(data.CreateVideoProcessor)), true);
  // 0x50: pointer
  if (data?.SetVideoProcessBltState !== undefined) view.setBigUint64(80, data.SetVideoProcessBltState === null ? 0n : BigInt(util.toPointer(data.SetVideoProcessBltState)), true);
  // 0x58: pointer
  if (data?.GetVideoProcessBltStatePrivate !== undefined) view.setBigUint64(88, data.GetVideoProcessBltStatePrivate === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessBltStatePrivate)), true);
  // 0x60: pointer
  if (data?.SetVideoProcessStreamState !== undefined) view.setBigUint64(96, data.SetVideoProcessStreamState === null ? 0n : BigInt(util.toPointer(data.SetVideoProcessStreamState)), true);
  // 0x68: pointer
  if (data?.GetVideoProcessStreamStatePrivate !== undefined) view.setBigUint64(104, data.GetVideoProcessStreamStatePrivate === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessStreamStatePrivate)), true);
  // 0x70: pointer
  if (data?.VideoProcessBltHD !== undefined) view.setBigUint64(112, data.VideoProcessBltHD === null ? 0n : BigInt(util.toPointer(data.VideoProcessBltHD)), true);
  // 0x78: pointer
  if (data?.DestroyVideoProcessor !== undefined) view.setBigUint64(120, data.DestroyVideoProcessor === null ? 0n : BigInt(util.toPointer(data.DestroyVideoProcessor)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_CREATEVIDEOPROCESSOR (size: 24)
 */
export interface DXVAHDETW_CREATEVIDEOPROCESSOR {
  /** u64 */
  pObject: Deno.PointerValue;
  /** u64 */
  pD3D9Ex: Deno.PointerValue;
  /** System.Guid */
  VPGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVAHDETW_CREATEVIDEOPROCESSOR = 24;

export function allocDXVAHDETW_CREATEVIDEOPROCESSOR(data?: Partial<DXVAHDETW_CREATEVIDEOPROCESSOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_CREATEVIDEOPROCESSOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  // 0x08: u64
  if (data?.pD3D9Ex !== undefined) view.setBigUint64(8, BigInt(data.pD3D9Ex), true);
  // 0x10: pointer
  if (data?.VPGuid !== undefined) view.setBigUint64(16, data.VPGuid === null ? 0n : BigInt(util.toPointer(data.VPGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTSTATE (size: 24)
 */
export interface DXVAHDETW_VIDEOPROCESSBLTSTATE {
  /** u64 */
  pObject: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE */
  State: DXVAHD_BLT_STATE;
  /** u32 */
  DataSize: number;
  /** Windows.Win32.Foundation.BOOL */
  SetState: boolean;
}

export const sizeofDXVAHDETW_VIDEOPROCESSBLTSTATE = 24;

export function allocDXVAHDETW_VIDEOPROCESSBLTSTATE(data?: Partial<DXVAHDETW_VIDEOPROCESSBLTSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_VIDEOPROCESSBLTSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  // 0x08: i32
  if (data?.State !== undefined) view.setInt32(8, Number(data.State), true);
  // 0x0c: u32
  if (data?.DataSize !== undefined) view.setUint32(12, Number(data.DataSize), true);
  // 0x10: i32
  if (data?.SetState !== undefined) view.setInt32(16, Number(data.SetState), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSSTREAMSTATE (size: 24)
 */
export interface DXVAHDETW_VIDEOPROCESSSTREAMSTATE {
  /** u64 */
  pObject: Deno.PointerValue;
  /** u32 */
  StreamNumber: number;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE */
  State: DXVAHD_STREAM_STATE;
  /** u32 */
  DataSize: number;
  /** Windows.Win32.Foundation.BOOL */
  SetState: boolean;
}

export const sizeofDXVAHDETW_VIDEOPROCESSSTREAMSTATE = 24;

export function allocDXVAHDETW_VIDEOPROCESSSTREAMSTATE(data?: Partial<DXVAHDETW_VIDEOPROCESSSTREAMSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_VIDEOPROCESSSTREAMSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  // 0x08: u32
  if (data?.StreamNumber !== undefined) view.setUint32(8, Number(data.StreamNumber), true);
  // 0x0c: i32
  if (data?.State !== undefined) view.setInt32(12, Number(data.State), true);
  // 0x10: u32
  if (data?.DataSize !== undefined) view.setUint32(16, Number(data.DataSize), true);
  // 0x14: i32
  if (data?.SetState !== undefined) view.setInt32(20, Number(data.SetState), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTHD (size: 48)
 */
export interface DXVAHDETW_VIDEOPROCESSBLTHD {
  /** u64 */
  pObject: Deno.PointerValue;
  /** u64 */
  pOutputSurface: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  TargetRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  OutputFormat: D3DFORMAT;
  /** u32 */
  ColorSpace: number;
  /** u32 */
  OutputFrame: number;
  /** u32 */
  StreamCount: number;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVAHDETW_VIDEOPROCESSBLTHD = 48;

export function allocDXVAHDETW_VIDEOPROCESSBLTHD(data?: Partial<DXVAHDETW_VIDEOPROCESSBLTHD>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_VIDEOPROCESSBLTHD);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  // 0x08: u64
  if (data?.pOutputSurface !== undefined) view.setBigUint64(8, BigInt(data.pOutputSurface), true);
  // 0x10: pointer
  if (data?.TargetRect !== undefined) view.setBigUint64(16, data.TargetRect === null ? 0n : BigInt(util.toPointer(data.TargetRect)), true);
  // 0x18: u32
  if (data?.OutputFormat !== undefined) view.setUint32(24, Number(data.OutputFormat), true);
  // 0x1c: u32
  if (data?.ColorSpace !== undefined) view.setUint32(28, Number(data.ColorSpace), true);
  // 0x20: u32
  if (data?.OutputFrame !== undefined) view.setUint32(32, Number(data.OutputFrame), true);
  // 0x24: u32
  if (data?.StreamCount !== undefined) view.setUint32(36, Number(data.StreamCount), true);
  // 0x28: i32
  if (data?.Enter !== undefined) view.setInt32(40, Number(data.Enter), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTHD_STREAM (size: 64)
 */
export interface DXVAHDETW_VIDEOPROCESSBLTHD_STREAM {
  /** u64 */
  pObject: Deno.PointerValue;
  /** u64 */
  pInputSurface: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  SourceRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  DestinationRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  InputFormat: D3DFORMAT;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_FRAME_FORMAT */
  FrameFormat: DXVAHD_FRAME_FORMAT;
  /** u32 */
  ColorSpace: number;
  /** u32 */
  StreamNumber: number;
  /** u32 */
  OutputIndex: number;
  /** u32 */
  InputFrameOrField: number;
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
}

export const sizeofDXVAHDETW_VIDEOPROCESSBLTHD_STREAM = 64;

export function allocDXVAHDETW_VIDEOPROCESSBLTHD_STREAM(data?: Partial<DXVAHDETW_VIDEOPROCESSBLTHD_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_VIDEOPROCESSBLTHD_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  // 0x08: u64
  if (data?.pInputSurface !== undefined) view.setBigUint64(8, BigInt(data.pInputSurface), true);
  // 0x10: pointer
  if (data?.SourceRect !== undefined) view.setBigUint64(16, data.SourceRect === null ? 0n : BigInt(util.toPointer(data.SourceRect)), true);
  // 0x18: pointer
  if (data?.DestinationRect !== undefined) view.setBigUint64(24, data.DestinationRect === null ? 0n : BigInt(util.toPointer(data.DestinationRect)), true);
  // 0x20: u32
  if (data?.InputFormat !== undefined) view.setUint32(32, Number(data.InputFormat), true);
  // 0x24: i32
  if (data?.FrameFormat !== undefined) view.setInt32(36, Number(data.FrameFormat), true);
  // 0x28: u32
  if (data?.ColorSpace !== undefined) view.setUint32(40, Number(data.ColorSpace), true);
  // 0x2c: u32
  if (data?.StreamNumber !== undefined) view.setUint32(44, Number(data.StreamNumber), true);
  // 0x30: u32
  if (data?.OutputIndex !== undefined) view.setUint32(48, Number(data.OutputIndex), true);
  // 0x34: u32
  if (data?.InputFrameOrField !== undefined) view.setUint32(52, Number(data.InputFrameOrField), true);
  // 0x38: u32
  if (data?.PastFrames !== undefined) view.setUint32(56, Number(data.PastFrames), true);
  // 0x3c: u32
  if (data?.FutureFrames !== undefined) view.setUint32(60, Number(data.FutureFrames), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_DESTROYVIDEOPROCESSOR (size: 8)
 */
export interface DXVAHDETW_DESTROYVIDEOPROCESSOR {
  /** u64 */
  pObject: Deno.PointerValue;
}

export const sizeofDXVAHDETW_DESTROYVIDEOPROCESSOR = 8;

export function allocDXVAHDETW_DESTROYVIDEOPROCESSOR(data?: Partial<DXVAHDETW_DESTROYVIDEOPROCESSOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_DESTROYVIDEOPROCESSOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_Frequency (size: 8)
 */
export interface DXVA2_Frequency {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXVA2_Frequency = 8;

export function allocDXVA2_Frequency(data?: Partial<DXVA2_Frequency>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_Frequency);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_VideoDesc (size: 48)
 */
export interface DXVA2_VideoDesc {
  /** u32 */
  SampleWidth: number;
  /** u32 */
  SampleHeight: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat */
  SampleFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Frequency */
  InputSampleFreq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Frequency */
  OutputFrameFreq: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UABProtectionLevel: number;
  /** u32 */
  Reserved: number;
}

export const sizeofDXVA2_VideoDesc = 48;

export function allocDXVA2_VideoDesc(data?: Partial<DXVA2_VideoDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VideoDesc);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SampleWidth !== undefined) view.setUint32(0, Number(data.SampleWidth), true);
  // 0x04: u32
  if (data?.SampleHeight !== undefined) view.setUint32(4, Number(data.SampleHeight), true);
  // 0x08: pointer
  if (data?.SampleFormat !== undefined) view.setBigUint64(8, data.SampleFormat === null ? 0n : BigInt(util.toPointer(data.SampleFormat)), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.InputSampleFreq !== undefined) view.setBigUint64(24, data.InputSampleFreq === null ? 0n : BigInt(util.toPointer(data.InputSampleFreq)), true);
  // 0x20: pointer
  if (data?.OutputFrameFreq !== undefined) view.setBigUint64(32, data.OutputFrameFreq === null ? 0n : BigInt(util.toPointer(data.OutputFrameFreq)), true);
  // 0x28: u32
  if (data?.UABProtectionLevel !== undefined) view.setUint32(40, Number(data.UABProtectionLevel), true);
  // 0x2c: u32
  if (data?.Reserved !== undefined) view.setUint32(44, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_VideoProcessorCaps (size: 40)
 */
export interface DXVA2_VideoProcessorCaps {
  /** u32 */
  DeviceCaps: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  InputPool: D3DPOOL;
  /** u32 */
  NumForwardRefSamples: number;
  /** u32 */
  NumBackwardRefSamples: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  DeinterlaceTechnology: number;
  /** u32 */
  ProcAmpControlCaps: number;
  /** u32 */
  VideoProcessorOperations: number;
  /** u32 */
  NoiseFilterTechnology: number;
  /** u32 */
  DetailFilterTechnology: number;
}

export const sizeofDXVA2_VideoProcessorCaps = 40;

export function allocDXVA2_VideoProcessorCaps(data?: Partial<DXVA2_VideoProcessorCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VideoProcessorCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceCaps !== undefined) view.setUint32(0, Number(data.DeviceCaps), true);
  // 0x04: u32
  if (data?.InputPool !== undefined) view.setUint32(4, Number(data.InputPool), true);
  // 0x08: u32
  if (data?.NumForwardRefSamples !== undefined) view.setUint32(8, Number(data.NumForwardRefSamples), true);
  // 0x0c: u32
  if (data?.NumBackwardRefSamples !== undefined) view.setUint32(12, Number(data.NumBackwardRefSamples), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: u32
  if (data?.DeinterlaceTechnology !== undefined) view.setUint32(20, Number(data.DeinterlaceTechnology), true);
  // 0x18: u32
  if (data?.ProcAmpControlCaps !== undefined) view.setUint32(24, Number(data.ProcAmpControlCaps), true);
  // 0x1c: u32
  if (data?.VideoProcessorOperations !== undefined) view.setUint32(28, Number(data.VideoProcessorOperations), true);
  // 0x20: u32
  if (data?.NoiseFilterTechnology !== undefined) view.setUint32(32, Number(data.NoiseFilterTechnology), true);
  // 0x24: u32
  if (data?.DetailFilterTechnology !== undefined) view.setUint32(36, Number(data.DetailFilterTechnology), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_AYUVSample8 (size: 8)
 */
export interface DXVA2_AYUVSample8 {
  /** u8 */
  Cr: number;
  /** u8 */
  Cb: number;
  /** u8 */
  Y: number;
  /** u8 */
  Alpha: number;
}

export const sizeofDXVA2_AYUVSample8 = 8;

export function allocDXVA2_AYUVSample8(data?: Partial<DXVA2_AYUVSample8>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_AYUVSample8);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Cr !== undefined) view.setUint8(0, Number(data.Cr));
  // 0x01: u8
  if (data?.Cb !== undefined) view.setUint8(1, Number(data.Cb));
  // 0x02: u8
  if (data?.Y !== undefined) view.setUint8(2, Number(data.Y));
  // 0x03: u8
  if (data?.Alpha !== undefined) view.setUint8(3, Number(data.Alpha));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_VideoSample (size: 72)
 */
export interface DXVA2_VideoSample {
  /** i64 */
  Start: Deno.PointerValue;
  /** i64 */
  End: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat */
  SampleFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  SrcSurface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  SrcRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  DstRect: Uint8Array | Deno.PointerValue | null;
  /** array */
  Pal: Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  PlanarAlpha: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SampleData: number;
}

export const sizeofDXVA2_VideoSample = 72;

export function allocDXVA2_VideoSample(data?: Partial<DXVA2_VideoSample>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VideoSample);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Start !== undefined) view.setBigInt64(0, BigInt(data.Start), true);
  // 0x08: i64
  if (data?.End !== undefined) view.setBigInt64(8, BigInt(data.End), true);
  // 0x10: pointer
  if (data?.SampleFormat !== undefined) view.setBigUint64(16, data.SampleFormat === null ? 0n : BigInt(util.toPointer(data.SampleFormat)), true);
  // 0x18: pointer
  if (data?.SrcSurface !== undefined) view.setBigUint64(24, data.SrcSurface === null ? 0n : BigInt(util.toPointer(data.SrcSurface)), true);
  // 0x20: pointer
  if (data?.SrcRect !== undefined) view.setBigUint64(32, data.SrcRect === null ? 0n : BigInt(util.toPointer(data.SrcRect)), true);
  // 0x28: pointer
  if (data?.DstRect !== undefined) view.setBigUint64(40, data.DstRect === null ? 0n : BigInt(util.toPointer(data.DstRect)), true);
  // 0x30: pointer
  if (data?.Pal !== undefined) view.setBigUint64(48, data.Pal === null ? 0n : BigInt(util.toPointer(data.Pal)), true);
  // 0x38: pointer
  if (data?.PlanarAlpha !== undefined) view.setBigUint64(56, data.PlanarAlpha === null ? 0n : BigInt(util.toPointer(data.PlanarAlpha)), true);
  // 0x40: u32
  if (data?.SampleData !== undefined) view.setUint32(64, Number(data.SampleData), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_ValueRange (size: 32)
 */
export interface DXVA2_ValueRange {
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  MinValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  MaxValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  DefaultValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  StepSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2_ValueRange = 32;

export function allocDXVA2_ValueRange(data?: Partial<DXVA2_ValueRange>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_ValueRange);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MinValue !== undefined) view.setBigUint64(0, data.MinValue === null ? 0n : BigInt(util.toPointer(data.MinValue)), true);
  // 0x08: pointer
  if (data?.MaxValue !== undefined) view.setBigUint64(8, data.MaxValue === null ? 0n : BigInt(util.toPointer(data.MaxValue)), true);
  // 0x10: pointer
  if (data?.DefaultValue !== undefined) view.setBigUint64(16, data.DefaultValue === null ? 0n : BigInt(util.toPointer(data.DefaultValue)), true);
  // 0x18: pointer
  if (data?.StepSize !== undefined) view.setBigUint64(24, data.StepSize === null ? 0n : BigInt(util.toPointer(data.StepSize)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_VideoProcessBltParams (size: 104)
 */
export interface DXVA2_VideoProcessBltParams {
  /** i64 */
  TargetFrame: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  TargetRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  ConstrictionSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamingFlags: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_AYUVSample16 */
  BackgroundColor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat */
  DestFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ProcAmpValues */
  ProcAmpValues: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Alpha: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  NoiseFilterLuma: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  NoiseFilterChroma: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  DetailFilterLuma: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  DetailFilterChroma: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DestData: number;
}

export const sizeofDXVA2_VideoProcessBltParams = 104;

export function allocDXVA2_VideoProcessBltParams(data?: Partial<DXVA2_VideoProcessBltParams>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VideoProcessBltParams);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.TargetFrame !== undefined) view.setBigInt64(0, BigInt(data.TargetFrame), true);
  // 0x08: pointer
  if (data?.TargetRect !== undefined) view.setBigUint64(8, data.TargetRect === null ? 0n : BigInt(util.toPointer(data.TargetRect)), true);
  // 0x10: pointer
  if (data?.ConstrictionSize !== undefined) view.setBigUint64(16, data.ConstrictionSize === null ? 0n : BigInt(util.toPointer(data.ConstrictionSize)), true);
  // 0x18: u32
  if (data?.StreamingFlags !== undefined) view.setUint32(24, Number(data.StreamingFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(32, data.BackgroundColor === null ? 0n : BigInt(util.toPointer(data.BackgroundColor)), true);
  // 0x28: pointer
  if (data?.DestFormat !== undefined) view.setBigUint64(40, data.DestFormat === null ? 0n : BigInt(util.toPointer(data.DestFormat)), true);
  // 0x30: pointer
  if (data?.ProcAmpValues !== undefined) view.setBigUint64(48, data.ProcAmpValues === null ? 0n : BigInt(util.toPointer(data.ProcAmpValues)), true);
  // 0x38: pointer
  if (data?.Alpha !== undefined) view.setBigUint64(56, data.Alpha === null ? 0n : BigInt(util.toPointer(data.Alpha)), true);
  // 0x40: pointer
  if (data?.NoiseFilterLuma !== undefined) view.setBigUint64(64, data.NoiseFilterLuma === null ? 0n : BigInt(util.toPointer(data.NoiseFilterLuma)), true);
  // 0x48: pointer
  if (data?.NoiseFilterChroma !== undefined) view.setBigUint64(72, data.NoiseFilterChroma === null ? 0n : BigInt(util.toPointer(data.NoiseFilterChroma)), true);
  // 0x50: pointer
  if (data?.DetailFilterLuma !== undefined) view.setBigUint64(80, data.DetailFilterLuma === null ? 0n : BigInt(util.toPointer(data.DetailFilterLuma)), true);
  // 0x58: pointer
  if (data?.DetailFilterChroma !== undefined) view.setBigUint64(88, data.DetailFilterChroma === null ? 0n : BigInt(util.toPointer(data.DetailFilterChroma)), true);
  // 0x60: u32
  if (data?.DestData !== undefined) view.setUint32(96, Number(data.DestData), true);
  // 0x64: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_ConfigPictureDecode (size: 80)
 */
export interface DXVA2_ConfigPictureDecode {
  /** System.Guid */
  guidConfigBitstreamEncryption: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidConfigMBcontrolEncryption: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidConfigResidDiffEncryption: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ConfigBitstreamRaw: number;
  /** u32 */
  ConfigMBcontrolRasterOrder: number;
  /** u32 */
  ConfigResidDiffHost: number;
  /** u32 */
  ConfigSpatialResid8: number;
  /** u32 */
  ConfigResid8Subtraction: number;
  /** u32 */
  ConfigSpatialHost8or9Clipping: number;
  /** u32 */
  ConfigSpatialResidInterleaved: number;
  /** u32 */
  ConfigIntraResidUnsigned: number;
  /** u32 */
  ConfigResidDiffAccelerator: number;
  /** u32 */
  ConfigHostInverseScan: number;
  /** u32 */
  ConfigSpecificIDCT: number;
  /** u32 */
  Config4GroupedCoefs: number;
  /** u16 */
  ConfigMinRenderTargetBuffCount: number;
  /** u16 */
  ConfigDecoderSpecific: number;
}

export const sizeofDXVA2_ConfigPictureDecode = 80;

export function allocDXVA2_ConfigPictureDecode(data?: Partial<DXVA2_ConfigPictureDecode>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_ConfigPictureDecode);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidConfigBitstreamEncryption !== undefined) view.setBigUint64(0, data.guidConfigBitstreamEncryption === null ? 0n : BigInt(util.toPointer(data.guidConfigBitstreamEncryption)), true);
  // 0x08: pointer
  if (data?.guidConfigMBcontrolEncryption !== undefined) view.setBigUint64(8, data.guidConfigMBcontrolEncryption === null ? 0n : BigInt(util.toPointer(data.guidConfigMBcontrolEncryption)), true);
  // 0x10: pointer
  if (data?.guidConfigResidDiffEncryption !== undefined) view.setBigUint64(16, data.guidConfigResidDiffEncryption === null ? 0n : BigInt(util.toPointer(data.guidConfigResidDiffEncryption)), true);
  // 0x18: u32
  if (data?.ConfigBitstreamRaw !== undefined) view.setUint32(24, Number(data.ConfigBitstreamRaw), true);
  // 0x1c: u32
  if (data?.ConfigMBcontrolRasterOrder !== undefined) view.setUint32(28, Number(data.ConfigMBcontrolRasterOrder), true);
  // 0x20: u32
  if (data?.ConfigResidDiffHost !== undefined) view.setUint32(32, Number(data.ConfigResidDiffHost), true);
  // 0x24: u32
  if (data?.ConfigSpatialResid8 !== undefined) view.setUint32(36, Number(data.ConfigSpatialResid8), true);
  // 0x28: u32
  if (data?.ConfigResid8Subtraction !== undefined) view.setUint32(40, Number(data.ConfigResid8Subtraction), true);
  // 0x2c: u32
  if (data?.ConfigSpatialHost8or9Clipping !== undefined) view.setUint32(44, Number(data.ConfigSpatialHost8or9Clipping), true);
  // 0x30: u32
  if (data?.ConfigSpatialResidInterleaved !== undefined) view.setUint32(48, Number(data.ConfigSpatialResidInterleaved), true);
  // 0x34: u32
  if (data?.ConfigIntraResidUnsigned !== undefined) view.setUint32(52, Number(data.ConfigIntraResidUnsigned), true);
  // 0x38: u32
  if (data?.ConfigResidDiffAccelerator !== undefined) view.setUint32(56, Number(data.ConfigResidDiffAccelerator), true);
  // 0x3c: u32
  if (data?.ConfigHostInverseScan !== undefined) view.setUint32(60, Number(data.ConfigHostInverseScan), true);
  // 0x40: u32
  if (data?.ConfigSpecificIDCT !== undefined) view.setUint32(64, Number(data.ConfigSpecificIDCT), true);
  // 0x44: u32
  if (data?.Config4GroupedCoefs !== undefined) view.setUint32(68, Number(data.Config4GroupedCoefs), true);
  // 0x48: u16
  if (data?.ConfigMinRenderTargetBuffCount !== undefined) view.setUint16(72, Number(data.ConfigMinRenderTargetBuffCount), true);
  // 0x4a: u16
  if (data?.ConfigDecoderSpecific !== undefined) view.setUint16(74, Number(data.ConfigDecoderSpecific), true);
  // 0x4c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_DecodeBufferDesc (size: 48)
 */
export interface DXVA2_DecodeBufferDesc {
  /** Windows.Win32.Media.MediaFoundation.DXVA2_BufferfType */
  CompressedBufferType: DXVA2_BufferfType;
  /** u32 */
  BufferIndex: number;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSize: number;
  /** u32 */
  FirstMBaddress: number;
  /** u32 */
  NumMBsInBuffer: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Stride: number;
  /** u32 */
  ReservedBits: number;
  /** ptr */
  pvPVPState: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDXVA2_DecodeBufferDesc = 48;

export function allocDXVA2_DecodeBufferDesc(data?: Partial<DXVA2_DecodeBufferDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_DecodeBufferDesc);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CompressedBufferType !== undefined) view.setInt32(0, Number(data.CompressedBufferType), true);
  // 0x04: u32
  if (data?.BufferIndex !== undefined) view.setUint32(4, Number(data.BufferIndex), true);
  // 0x08: u32
  if (data?.DataOffset !== undefined) view.setUint32(8, Number(data.DataOffset), true);
  // 0x0c: u32
  if (data?.DataSize !== undefined) view.setUint32(12, Number(data.DataSize), true);
  // 0x10: u32
  if (data?.FirstMBaddress !== undefined) view.setUint32(16, Number(data.FirstMBaddress), true);
  // 0x14: u32
  if (data?.NumMBsInBuffer !== undefined) view.setUint32(20, Number(data.NumMBsInBuffer), true);
  // 0x18: u32
  if (data?.Width !== undefined) view.setUint32(24, Number(data.Width), true);
  // 0x1c: u32
  if (data?.Height !== undefined) view.setUint32(28, Number(data.Height), true);
  // 0x20: u32
  if (data?.Stride !== undefined) view.setUint32(32, Number(data.Stride), true);
  // 0x24: u32
  if (data?.ReservedBits !== undefined) view.setUint32(36, Number(data.ReservedBits), true);
  // 0x28: pointer
  if (data?.pvPVPState !== undefined) view.setBigUint64(40, data.pvPVPState === null ? 0n : BigInt(util.toPointer(data.pvPVPState)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_AES_CTR_IV (size: 16)
 */
export interface DXVA2_AES_CTR_IV {
  /** u64 */
  IV: Deno.PointerValue;
  /** u64 */
  Count: Deno.PointerValue;
}

export const sizeofDXVA2_AES_CTR_IV = 16;

export function allocDXVA2_AES_CTR_IV(data?: Partial<DXVA2_AES_CTR_IV>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_AES_CTR_IV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IV !== undefined) view.setBigUint64(0, BigInt(data.IV), true);
  // 0x08: u64
  if (data?.Count !== undefined) view.setBigUint64(8, BigInt(data.Count), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_DecodeExtensionData (size: 40)
 */
export interface DXVA2_DecodeExtensionData {
  /** u32 */
  Function: number;
  /** ptr */
  pPrivateInputData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PrivateInputDataSize: number;
  /** ptr */
  pPrivateOutputData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PrivateOutputDataSize: number;
}

export const sizeofDXVA2_DecodeExtensionData = 40;

export function allocDXVA2_DecodeExtensionData(data?: Partial<DXVA2_DecodeExtensionData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_DecodeExtensionData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Function !== undefined) view.setUint32(0, Number(data.Function), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPrivateInputData !== undefined) view.setBigUint64(8, data.pPrivateInputData === null ? 0n : BigInt(util.toPointer(data.pPrivateInputData)), true);
  // 0x10: u32
  if (data?.PrivateInputDataSize !== undefined) view.setUint32(16, Number(data.PrivateInputDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pPrivateOutputData !== undefined) view.setBigUint64(24, data.pPrivateOutputData === null ? 0n : BigInt(util.toPointer(data.pPrivateOutputData)), true);
  // 0x20: u32
  if (data?.PrivateOutputDataSize !== undefined) view.setUint32(32, Number(data.PrivateOutputDataSize), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_DecodeExecuteParams (size: 24)
 */
export interface DXVA2_DecodeExecuteParams {
  /** u32 */
  NumCompBuffers: number;
  /** ptr */
  pCompressedBuffers: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pExtensionData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDXVA2_DecodeExecuteParams = 24;

export function allocDXVA2_DecodeExecuteParams(data?: Partial<DXVA2_DecodeExecuteParams>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_DecodeExecuteParams);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCompBuffers !== undefined) view.setUint32(0, Number(data.NumCompBuffers), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCompressedBuffers !== undefined) view.setBigUint64(8, data.pCompressedBuffers === null ? 0n : BigInt(util.toPointer(data.pCompressedBuffers)), true);
  // 0x10: pointer
  if (data?.pExtensionData !== undefined) view.setBigUint64(16, data.pExtensionData === null ? 0n : BigInt(util.toPointer(data.pExtensionData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER (size: 8)
 */
export interface OPM_RANDOM_NUMBER {
  /** array */
  abRandomNumber: Deno.PointerValue | null;
}

export const sizeofOPM_RANDOM_NUMBER = 8;

export function allocOPM_RANDOM_NUMBER(data?: Partial<OPM_RANDOM_NUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_RANDOM_NUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.abRandomNumber !== undefined) view.setBigUint64(0, data.abRandomNumber === null ? 0n : BigInt(util.toPointer(data.abRandomNumber)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_OMAC (size: 8)
 */
export interface OPM_OMAC {
  /** array */
  abOMAC: Deno.PointerValue | null;
}

export const sizeofOPM_OMAC = 8;

export function allocOPM_OMAC(data?: Partial<OPM_OMAC>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_OMAC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.abOMAC !== undefined) view.setBigUint64(0, data.abOMAC === null ? 0n : BigInt(util.toPointer(data.abOMAC)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_ENCRYPTED_INITIALIZATION_PARAMETERS (size: 8)
 */
export interface OPM_ENCRYPTED_INITIALIZATION_PARAMETERS {
  /** array */
  abEncryptedInitializationParameters: Deno.PointerValue | null;
}

export const sizeofOPM_ENCRYPTED_INITIALIZATION_PARAMETERS = 8;

export function allocOPM_ENCRYPTED_INITIALIZATION_PARAMETERS(data?: Partial<OPM_ENCRYPTED_INITIALIZATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_ENCRYPTED_INITIALIZATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.abEncryptedInitializationParameters !== undefined) view.setBigUint64(0, data.abEncryptedInitializationParameters === null ? 0n : BigInt(util.toPointer(data.abEncryptedInitializationParameters)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_GET_INFO_PARAMETERS (size: 40)
 */
export interface OPM_GET_INFO_PARAMETERS {
  /** Windows.Win32.Media.MediaFoundation.OPM_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidInformation: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulSequenceNumber: number;
  /** u32 */
  cbParametersSize: number;
  /** array */
  abParameters: Deno.PointerValue | null;
}

export const sizeofOPM_GET_INFO_PARAMETERS = 40;

export function allocOPM_GET_INFO_PARAMETERS(data?: Partial<OPM_GET_INFO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_GET_INFO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(8, data.rnRandomNumber === null ? 0n : BigInt(util.toPointer(data.rnRandomNumber)), true);
  // 0x10: pointer
  if (data?.guidInformation !== undefined) view.setBigUint64(16, data.guidInformation === null ? 0n : BigInt(util.toPointer(data.guidInformation)), true);
  // 0x18: u32
  if (data?.ulSequenceNumber !== undefined) view.setUint32(24, Number(data.ulSequenceNumber), true);
  // 0x1c: u32
  if (data?.cbParametersSize !== undefined) view.setUint32(28, Number(data.cbParametersSize), true);
  // 0x20: pointer
  if (data?.abParameters !== undefined) view.setBigUint64(32, data.abParameters === null ? 0n : BigInt(util.toPointer(data.abParameters)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS (size: 32)
 */
export interface OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidInformation: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulSequenceNumber: number;
  /** u32 */
  cbParametersSize: number;
  /** array */
  abParameters: Deno.PointerValue | null;
}

export const sizeofOPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS = 32;

export function allocOPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS(data?: Partial<OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(util.toPointer(data.rnRandomNumber)), true);
  // 0x08: pointer
  if (data?.guidInformation !== undefined) view.setBigUint64(8, data.guidInformation === null ? 0n : BigInt(util.toPointer(data.guidInformation)), true);
  // 0x10: u32
  if (data?.ulSequenceNumber !== undefined) view.setUint32(16, Number(data.ulSequenceNumber), true);
  // 0x14: u32
  if (data?.cbParametersSize !== undefined) view.setUint32(20, Number(data.cbParametersSize), true);
  // 0x18: pointer
  if (data?.abParameters !== undefined) view.setBigUint64(24, data.abParameters === null ? 0n : BigInt(util.toPointer(data.abParameters)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_HDCP_KEY_SELECTION_VECTOR (size: 8)
 */
export interface OPM_HDCP_KEY_SELECTION_VECTOR {
  /** array */
  abKeySelectionVector: Deno.PointerValue | null;
}

export const sizeofOPM_HDCP_KEY_SELECTION_VECTOR = 8;

export function allocOPM_HDCP_KEY_SELECTION_VECTOR(data?: Partial<OPM_HDCP_KEY_SELECTION_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_HDCP_KEY_SELECTION_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.abKeySelectionVector !== undefined) view.setBigUint64(0, data.abKeySelectionVector === null ? 0n : BigInt(util.toPointer(data.abKeySelectionVector)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_CONNECTED_HDCP_DEVICE_INFORMATION (size: 48)
 */
export interface OPM_CONNECTED_HDCP_DEVICE_INFORMATION {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulStatusFlags: number;
  /** u32 */
  ulHDCPFlags: number;
  /** Windows.Win32.Media.MediaFoundation.OPM_HDCP_KEY_SELECTION_VECTOR */
  ksvB: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** array */
  Reserved3: Deno.PointerValue | null;
}

export const sizeofOPM_CONNECTED_HDCP_DEVICE_INFORMATION = 48;

export function allocOPM_CONNECTED_HDCP_DEVICE_INFORMATION(data?: Partial<OPM_CONNECTED_HDCP_DEVICE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_CONNECTED_HDCP_DEVICE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(util.toPointer(data.rnRandomNumber)), true);
  // 0x08: u32
  if (data?.ulStatusFlags !== undefined) view.setUint32(8, Number(data.ulStatusFlags), true);
  // 0x0c: u32
  if (data?.ulHDCPFlags !== undefined) view.setUint32(12, Number(data.ulHDCPFlags), true);
  // 0x10: pointer
  if (data?.ksvB !== undefined) view.setBigUint64(16, data.ksvB === null ? 0n : BigInt(util.toPointer(data.ksvB)), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x20: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(32, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x28: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(40, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_REQUESTED_INFORMATION (size: 24)
 */
export interface OPM_REQUESTED_INFORMATION {
  /** Windows.Win32.Media.MediaFoundation.OPM_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbRequestedInformationSize: number;
  /** array */
  abRequestedInformation: Deno.PointerValue | null;
}

export const sizeofOPM_REQUESTED_INFORMATION = 24;

export function allocOPM_REQUESTED_INFORMATION(data?: Partial<OPM_REQUESTED_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_REQUESTED_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(util.toPointer(data.omac)), true);
  // 0x08: u32
  if (data?.cbRequestedInformationSize !== undefined) view.setUint32(8, Number(data.cbRequestedInformationSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.abRequestedInformation !== undefined) view.setBigUint64(16, data.abRequestedInformation === null ? 0n : BigInt(util.toPointer(data.abRequestedInformation)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_STANDARD_INFORMATION (size: 24)
 */
export interface OPM_STANDARD_INFORMATION {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulStatusFlags: number;
  /** u32 */
  ulInformation: number;
  /** u32 */
  ulReserved: number;
  /** u32 */
  ulReserved2: number;
}

export const sizeofOPM_STANDARD_INFORMATION = 24;

export function allocOPM_STANDARD_INFORMATION(data?: Partial<OPM_STANDARD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_STANDARD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(util.toPointer(data.rnRandomNumber)), true);
  // 0x08: u32
  if (data?.ulStatusFlags !== undefined) view.setUint32(8, Number(data.ulStatusFlags), true);
  // 0x0c: u32
  if (data?.ulInformation !== undefined) view.setUint32(12, Number(data.ulInformation), true);
  // 0x10: u32
  if (data?.ulReserved !== undefined) view.setUint32(16, Number(data.ulReserved), true);
  // 0x14: u32
  if (data?.ulReserved2 !== undefined) view.setUint32(20, Number(data.ulReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_ACTUAL_OUTPUT_FORMAT (size: 40)
 */
export interface OPM_ACTUAL_OUTPUT_FORMAT {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulStatusFlags: number;
  /** u32 */
  ulDisplayWidth: number;
  /** u32 */
  ulDisplayHeight: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_SampleFormat */
  dsfSampleInterleaveFormat: DXVA2_SampleFormat;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  d3dFormat: D3DFORMAT;
  /** u32 */
  ulFrequencyNumerator: number;
  /** u32 */
  ulFrequencyDenominator: number;
}

export const sizeofOPM_ACTUAL_OUTPUT_FORMAT = 40;

export function allocOPM_ACTUAL_OUTPUT_FORMAT(data?: Partial<OPM_ACTUAL_OUTPUT_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_ACTUAL_OUTPUT_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(util.toPointer(data.rnRandomNumber)), true);
  // 0x08: u32
  if (data?.ulStatusFlags !== undefined) view.setUint32(8, Number(data.ulStatusFlags), true);
  // 0x0c: u32
  if (data?.ulDisplayWidth !== undefined) view.setUint32(12, Number(data.ulDisplayWidth), true);
  // 0x10: u32
  if (data?.ulDisplayHeight !== undefined) view.setUint32(16, Number(data.ulDisplayHeight), true);
  // 0x14: i32
  if (data?.dsfSampleInterleaveFormat !== undefined) view.setInt32(20, Number(data.dsfSampleInterleaveFormat), true);
  // 0x18: u32
  if (data?.d3dFormat !== undefined) view.setUint32(24, Number(data.d3dFormat), true);
  // 0x1c: u32
  if (data?.ulFrequencyNumerator !== undefined) view.setUint32(28, Number(data.ulFrequencyNumerator), true);
  // 0x20: u32
  if (data?.ulFrequencyDenominator !== undefined) view.setUint32(32, Number(data.ulFrequencyDenominator), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_ACP_AND_CGMSA_SIGNALING (size: 64)
 */
export interface OPM_ACP_AND_CGMSA_SIGNALING {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulStatusFlags: number;
  /** u32 */
  ulAvailableTVProtectionStandards: number;
  /** u32 */
  ulActiveTVProtectionStandard: number;
  /** u32 */
  ulReserved: number;
  /** u32 */
  ulAspectRatioValidMask1: number;
  /** u32 */
  ulAspectRatioData1: number;
  /** u32 */
  ulAspectRatioValidMask2: number;
  /** u32 */
  ulAspectRatioData2: number;
  /** u32 */
  ulAspectRatioValidMask3: number;
  /** u32 */
  ulAspectRatioData3: number;
  /** array */
  ulReserved2: Deno.PointerValue | null;
  /** array */
  ulReserved3: Deno.PointerValue | null;
}

export const sizeofOPM_ACP_AND_CGMSA_SIGNALING = 64;

export function allocOPM_ACP_AND_CGMSA_SIGNALING(data?: Partial<OPM_ACP_AND_CGMSA_SIGNALING>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_ACP_AND_CGMSA_SIGNALING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(util.toPointer(data.rnRandomNumber)), true);
  // 0x08: u32
  if (data?.ulStatusFlags !== undefined) view.setUint32(8, Number(data.ulStatusFlags), true);
  // 0x0c: u32
  if (data?.ulAvailableTVProtectionStandards !== undefined) view.setUint32(12, Number(data.ulAvailableTVProtectionStandards), true);
  // 0x10: u32
  if (data?.ulActiveTVProtectionStandard !== undefined) view.setUint32(16, Number(data.ulActiveTVProtectionStandard), true);
  // 0x14: u32
  if (data?.ulReserved !== undefined) view.setUint32(20, Number(data.ulReserved), true);
  // 0x18: u32
  if (data?.ulAspectRatioValidMask1 !== undefined) view.setUint32(24, Number(data.ulAspectRatioValidMask1), true);
  // 0x1c: u32
  if (data?.ulAspectRatioData1 !== undefined) view.setUint32(28, Number(data.ulAspectRatioData1), true);
  // 0x20: u32
  if (data?.ulAspectRatioValidMask2 !== undefined) view.setUint32(32, Number(data.ulAspectRatioValidMask2), true);
  // 0x24: u32
  if (data?.ulAspectRatioData2 !== undefined) view.setUint32(36, Number(data.ulAspectRatioData2), true);
  // 0x28: u32
  if (data?.ulAspectRatioValidMask3 !== undefined) view.setUint32(40, Number(data.ulAspectRatioValidMask3), true);
  // 0x2c: u32
  if (data?.ulAspectRatioData3 !== undefined) view.setUint32(44, Number(data.ulAspectRatioData3), true);
  // 0x30: pointer
  if (data?.ulReserved2 !== undefined) view.setBigUint64(48, data.ulReserved2 === null ? 0n : BigInt(util.toPointer(data.ulReserved2)), true);
  // 0x38: pointer
  if (data?.ulReserved3 !== undefined) view.setBigUint64(56, data.ulReserved3 === null ? 0n : BigInt(util.toPointer(data.ulReserved3)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_OUTPUT_ID_DATA (size: 24)
 */
export interface OPM_OUTPUT_ID_DATA {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulStatusFlags: number;
  /** u64 */
  OutputId: Deno.PointerValue;
}

export const sizeofOPM_OUTPUT_ID_DATA = 24;

export function allocOPM_OUTPUT_ID_DATA(data?: Partial<OPM_OUTPUT_ID_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_OUTPUT_ID_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(util.toPointer(data.rnRandomNumber)), true);
  // 0x08: u32
  if (data?.ulStatusFlags !== undefined) view.setUint32(8, Number(data.ulStatusFlags), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.OutputId !== undefined) view.setBigUint64(16, BigInt(data.OutputId), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_CONFIGURE_PARAMETERS (size: 32)
 */
export interface OPM_CONFIGURE_PARAMETERS {
  /** Windows.Win32.Media.MediaFoundation.OPM_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidSetting: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulSequenceNumber: number;
  /** u32 */
  cbParametersSize: number;
  /** array */
  abParameters: Deno.PointerValue | null;
}

export const sizeofOPM_CONFIGURE_PARAMETERS = 32;

export function allocOPM_CONFIGURE_PARAMETERS(data?: Partial<OPM_CONFIGURE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_CONFIGURE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.guidSetting !== undefined) view.setBigUint64(8, data.guidSetting === null ? 0n : BigInt(util.toPointer(data.guidSetting)), true);
  // 0x10: u32
  if (data?.ulSequenceNumber !== undefined) view.setUint32(16, Number(data.ulSequenceNumber), true);
  // 0x14: u32
  if (data?.cbParametersSize !== undefined) view.setUint32(20, Number(data.cbParametersSize), true);
  // 0x18: pointer
  if (data?.abParameters !== undefined) view.setBigUint64(24, data.abParameters === null ? 0n : BigInt(util.toPointer(data.abParameters)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_SET_PROTECTION_LEVEL_PARAMETERS (size: 16)
 */
export interface OPM_SET_PROTECTION_LEVEL_PARAMETERS {
  /** u32 */
  ulProtectionType: number;
  /** u32 */
  ulProtectionLevel: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  Reserved2: number;
}

export const sizeofOPM_SET_PROTECTION_LEVEL_PARAMETERS = 16;

export function allocOPM_SET_PROTECTION_LEVEL_PARAMETERS(data?: Partial<OPM_SET_PROTECTION_LEVEL_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_SET_PROTECTION_LEVEL_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulProtectionType !== undefined) view.setUint32(0, Number(data.ulProtectionType), true);
  // 0x04: u32
  if (data?.ulProtectionLevel !== undefined) view.setUint32(4, Number(data.ulProtectionLevel), true);
  // 0x08: u32
  if (data?.Reserved !== undefined) view.setUint32(8, Number(data.Reserved), true);
  // 0x0c: u32
  if (data?.Reserved2 !== undefined) view.setUint32(12, Number(data.Reserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS (size: 56)
 */
export interface OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS {
  /** u32 */
  ulNewTVProtectionStandard: number;
  /** u32 */
  ulAspectRatioChangeMask1: number;
  /** u32 */
  ulAspectRatioData1: number;
  /** u32 */
  ulAspectRatioChangeMask2: number;
  /** u32 */
  ulAspectRatioData2: number;
  /** u32 */
  ulAspectRatioChangeMask3: number;
  /** u32 */
  ulAspectRatioData3: number;
  /** array */
  ulReserved: Deno.PointerValue | null;
  /** array */
  ulReserved2: Deno.PointerValue | null;
  /** u32 */
  ulReserved3: number;
}

export const sizeofOPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS = 56;

export function allocOPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS(data?: Partial<OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulNewTVProtectionStandard !== undefined) view.setUint32(0, Number(data.ulNewTVProtectionStandard), true);
  // 0x04: u32
  if (data?.ulAspectRatioChangeMask1 !== undefined) view.setUint32(4, Number(data.ulAspectRatioChangeMask1), true);
  // 0x08: u32
  if (data?.ulAspectRatioData1 !== undefined) view.setUint32(8, Number(data.ulAspectRatioData1), true);
  // 0x0c: u32
  if (data?.ulAspectRatioChangeMask2 !== undefined) view.setUint32(12, Number(data.ulAspectRatioChangeMask2), true);
  // 0x10: u32
  if (data?.ulAspectRatioData2 !== undefined) view.setUint32(16, Number(data.ulAspectRatioData2), true);
  // 0x14: u32
  if (data?.ulAspectRatioChangeMask3 !== undefined) view.setUint32(20, Number(data.ulAspectRatioChangeMask3), true);
  // 0x18: u32
  if (data?.ulAspectRatioData3 !== undefined) view.setUint32(24, Number(data.ulAspectRatioData3), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ulReserved !== undefined) view.setBigUint64(32, data.ulReserved === null ? 0n : BigInt(util.toPointer(data.ulReserved)), true);
  // 0x28: pointer
  if (data?.ulReserved2 !== undefined) view.setBigUint64(40, data.ulReserved2 === null ? 0n : BigInt(util.toPointer(data.ulReserved2)), true);
  // 0x30: u32
  if (data?.ulReserved3 !== undefined) view.setUint32(48, Number(data.ulReserved3), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_SET_HDCP_SRM_PARAMETERS (size: 8)
 */
export interface OPM_SET_HDCP_SRM_PARAMETERS {
  /** u32 */
  ulSRMVersion: number;
}

export const sizeofOPM_SET_HDCP_SRM_PARAMETERS = 8;

export function allocOPM_SET_HDCP_SRM_PARAMETERS(data?: Partial<OPM_SET_HDCP_SRM_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_SET_HDCP_SRM_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSRMVersion !== undefined) view.setUint32(0, Number(data.ulSRMVersion), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_GET_CODEC_INFO_PARAMETERS (size: 16)
 */
export interface OPM_GET_CODEC_INFO_PARAMETERS {
  /** u32 */
  cbVerifier: number;
  /** array */
  Verifier: Deno.PointerValue | null;
}

export const sizeofOPM_GET_CODEC_INFO_PARAMETERS = 16;

export function allocOPM_GET_CODEC_INFO_PARAMETERS(data?: Partial<OPM_GET_CODEC_INFO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_GET_CODEC_INFO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbVerifier !== undefined) view.setUint32(0, Number(data.cbVerifier), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Verifier !== undefined) view.setBigUint64(8, data.Verifier === null ? 0n : BigInt(util.toPointer(data.Verifier)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_GET_CODEC_INFO_INFORMATION (size: 16)
 */
export interface OPM_GET_CODEC_INFO_INFORMATION {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Merit: number;
}

export const sizeofOPM_GET_CODEC_INFO_INFORMATION = 16;

export function allocOPM_GET_CODEC_INFO_INFORMATION(data?: Partial<OPM_GET_CODEC_INFO_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_GET_CODEC_INFO_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(util.toPointer(data.rnRandomNumber)), true);
  // 0x08: u32
  if (data?.Merit !== undefined) view.setUint32(8, Number(data.Merit), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO (size: 16)
 */
export interface MFT_REGISTER_TYPE_INFO {
  /** System.Guid */
  guidMajorType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidSubtype: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFT_REGISTER_TYPE_INFO = 16;

export function allocMFT_REGISTER_TYPE_INFO(data?: Partial<MFT_REGISTER_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_REGISTER_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidMajorType !== undefined) view.setBigUint64(0, data.guidMajorType === null ? 0n : BigInt(util.toPointer(data.guidMajorType)), true);
  // 0x08: pointer
  if (data?.guidSubtype !== undefined) view.setBigUint64(8, data.guidSubtype === null ? 0n : BigInt(util.toPointer(data.guidSubtype)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFRatio (size: 8)
 */
export interface MFRatio {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofMFRatio = 8;

export function allocMFRatio(data?: Partial<MFRatio>): Uint8Array {
  const buf = new Uint8Array(sizeofMFRatio);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFOffset (size: 8)
 */
export interface MFOffset {
  /** u16 */
  fract: number;
  /** i16 */
  value: number;
}

export const sizeofMFOffset = 8;

export function allocMFOffset(data?: Partial<MFOffset>): Uint8Array {
  const buf = new Uint8Array(sizeofMFOffset);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.fract !== undefined) view.setUint16(0, Number(data.fract), true);
  // 0x02: i16
  if (data?.value !== undefined) view.setInt16(2, Number(data.value), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoArea (size: 24)
 */
export interface MFVideoArea {
  /** Windows.Win32.Media.MediaFoundation.MFOffset */
  OffsetX: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFOffset */
  OffsetY: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  Area: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFVideoArea = 24;

export function allocMFVideoArea(data?: Partial<MFVideoArea>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoArea);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OffsetX !== undefined) view.setBigUint64(0, data.OffsetX === null ? 0n : BigInt(util.toPointer(data.OffsetX)), true);
  // 0x08: pointer
  if (data?.OffsetY !== undefined) view.setBigUint64(8, data.OffsetY === null ? 0n : BigInt(util.toPointer(data.OffsetY)), true);
  // 0x10: pointer
  if (data?.Area !== undefined) view.setBigUint64(16, data.Area === null ? 0n : BigInt(util.toPointer(data.Area)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoInfo (size: 88)
 */
export interface MFVideoInfo {
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** Windows.Win32.Media.MediaFoundation.MFRatio */
  PixelAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFVideoChromaSubsampling */
  SourceChromaSubsampling: MFVideoChromaSubsampling;
  /** Windows.Win32.Media.MediaFoundation.MFVideoInterlaceMode */
  InterlaceMode: MFVideoInterlaceMode;
  /** Windows.Win32.Media.MediaFoundation.MFVideoTransferFunction */
  TransferFunction: MFVideoTransferFunction;
  /** Windows.Win32.Media.MediaFoundation.MFVideoPrimaries */
  ColorPrimaries: MFVideoPrimaries;
  /** Windows.Win32.Media.MediaFoundation.MFVideoTransferMatrix */
  TransferMatrix: MFVideoTransferMatrix;
  /** Windows.Win32.Media.MediaFoundation.MFVideoLighting */
  SourceLighting: MFVideoLighting;
  /** Windows.Win32.Media.MediaFoundation.MFRatio */
  FramesPerSecond: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFNominalRange */
  NominalRange: MFNominalRange;
  /** Windows.Win32.Media.MediaFoundation.MFVideoArea */
  GeometricAperture: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFVideoArea */
  MinimumDisplayAperture: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFVideoArea */
  PanScanAperture: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  VideoFlags: Deno.PointerValue;
}

export const sizeofMFVideoInfo = 88;

export function allocMFVideoInfo(data?: Partial<MFVideoInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwWidth !== undefined) view.setUint32(0, Number(data.dwWidth), true);
  // 0x04: u32
  if (data?.dwHeight !== undefined) view.setUint32(4, Number(data.dwHeight), true);
  // 0x08: pointer
  if (data?.PixelAspectRatio !== undefined) view.setBigUint64(8, data.PixelAspectRatio === null ? 0n : BigInt(util.toPointer(data.PixelAspectRatio)), true);
  // 0x10: i32
  if (data?.SourceChromaSubsampling !== undefined) view.setInt32(16, Number(data.SourceChromaSubsampling), true);
  // 0x14: i32
  if (data?.InterlaceMode !== undefined) view.setInt32(20, Number(data.InterlaceMode), true);
  // 0x18: i32
  if (data?.TransferFunction !== undefined) view.setInt32(24, Number(data.TransferFunction), true);
  // 0x1c: i32
  if (data?.ColorPrimaries !== undefined) view.setInt32(28, Number(data.ColorPrimaries), true);
  // 0x20: i32
  if (data?.TransferMatrix !== undefined) view.setInt32(32, Number(data.TransferMatrix), true);
  // 0x24: i32
  if (data?.SourceLighting !== undefined) view.setInt32(36, Number(data.SourceLighting), true);
  // 0x28: pointer
  if (data?.FramesPerSecond !== undefined) view.setBigUint64(40, data.FramesPerSecond === null ? 0n : BigInt(util.toPointer(data.FramesPerSecond)), true);
  // 0x30: i32
  if (data?.NominalRange !== undefined) view.setInt32(48, Number(data.NominalRange), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.GeometricAperture !== undefined) view.setBigUint64(56, data.GeometricAperture === null ? 0n : BigInt(util.toPointer(data.GeometricAperture)), true);
  // 0x40: pointer
  if (data?.MinimumDisplayAperture !== undefined) view.setBigUint64(64, data.MinimumDisplayAperture === null ? 0n : BigInt(util.toPointer(data.MinimumDisplayAperture)), true);
  // 0x48: pointer
  if (data?.PanScanAperture !== undefined) view.setBigUint64(72, data.PanScanAperture === null ? 0n : BigInt(util.toPointer(data.PanScanAperture)), true);
  // 0x50: u64
  if (data?.VideoFlags !== undefined) view.setBigUint64(80, BigInt(data.VideoFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFAYUVSample (size: 8)
 */
export interface MFAYUVSample {
  /** u8 */
  bCrValue: number;
  /** u8 */
  bCbValue: number;
  /** u8 */
  bYValue: number;
  /** u8 */
  bSampleAlpha8: number;
}

export const sizeofMFAYUVSample = 8;

export function allocMFAYUVSample(data?: Partial<MFAYUVSample>): Uint8Array {
  const buf = new Uint8Array(sizeofMFAYUVSample);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bCrValue !== undefined) view.setUint8(0, Number(data.bCrValue));
  // 0x01: u8
  if (data?.bCbValue !== undefined) view.setUint8(1, Number(data.bCbValue));
  // 0x02: u8
  if (data?.bYValue !== undefined) view.setUint8(2, Number(data.bYValue));
  // 0x03: u8
  if (data?.bSampleAlpha8 !== undefined) view.setUint8(3, Number(data.bSampleAlpha8));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFARGB (size: 8)
 */
export interface MFARGB {
  /** u8 */
  rgbBlue: number;
  /** u8 */
  rgbGreen: number;
  /** u8 */
  rgbRed: number;
  /** u8 */
  rgbAlpha: number;
}

export const sizeofMFARGB = 8;

export function allocMFARGB(data?: Partial<MFARGB>): Uint8Array {
  const buf = new Uint8Array(sizeofMFARGB);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.rgbBlue !== undefined) view.setUint8(0, Number(data.rgbBlue));
  // 0x01: u8
  if (data?.rgbGreen !== undefined) view.setUint8(1, Number(data.rgbGreen));
  // 0x02: u8
  if (data?.rgbRed !== undefined) view.setUint8(2, Number(data.rgbRed));
  // 0x03: u8
  if (data?.rgbAlpha !== undefined) view.setUint8(3, Number(data.rgbAlpha));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFPaletteEntry (size: 16)
 */
export interface MFPaletteEntry {
  /** Windows.Win32.Media.MediaFoundation.MFARGB */
  ARGB: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFAYUVSample */
  AYCbCr: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFPaletteEntry = 16;

export function allocMFPaletteEntry(data?: Partial<MFPaletteEntry>): Uint8Array {
  const buf = new Uint8Array(sizeofMFPaletteEntry);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ARGB !== undefined) view.setBigUint64(0, data.ARGB === null ? 0n : BigInt(util.toPointer(data.ARGB)), true);
  // 0x08: pointer
  if (data?.AYCbCr !== undefined) view.setBigUint64(8, data.AYCbCr === null ? 0n : BigInt(util.toPointer(data.AYCbCr)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoSurfaceInfo (size: 16)
 */
export interface MFVideoSurfaceInfo {
  /** u32 */
  Format: number;
  /** u32 */
  PaletteEntries: number;
  /** array */
  Palette: Deno.PointerValue | null;
}

export const sizeofMFVideoSurfaceInfo = 16;

export function allocMFVideoSurfaceInfo(data?: Partial<MFVideoSurfaceInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoSurfaceInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: u32
  if (data?.PaletteEntries !== undefined) view.setUint32(4, Number(data.PaletteEntries), true);
  // 0x08: pointer
  if (data?.Palette !== undefined) view.setBigUint64(8, data.Palette === null ? 0n : BigInt(util.toPointer(data.Palette)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoCompressedInfo (size: 24)
 */
export interface MFVideoCompressedInfo {
  /** i64 */
  AvgBitrate: Deno.PointerValue;
  /** i64 */
  AvgBitErrorRate: Deno.PointerValue;
  /** u32 */
  MaxKeyFrameSpacing: number;
}

export const sizeofMFVideoCompressedInfo = 24;

export function allocMFVideoCompressedInfo(data?: Partial<MFVideoCompressedInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoCompressedInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.AvgBitrate !== undefined) view.setBigInt64(0, BigInt(data.AvgBitrate), true);
  // 0x08: i64
  if (data?.AvgBitErrorRate !== undefined) view.setBigInt64(8, BigInt(data.AvgBitErrorRate), true);
  // 0x10: u32
  if (data?.MaxKeyFrameSpacing !== undefined) view.setUint32(16, Number(data.MaxKeyFrameSpacing), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVIDEOFORMAT (size: 40)
 */
export interface MFVIDEOFORMAT {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Media.MediaFoundation.MFVideoInfo */
  videoInfo: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFVideoCompressedInfo */
  compressedInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFVideoSurfaceInfo */
  surfaceInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFVIDEOFORMAT = 40;

export function allocMFVIDEOFORMAT(data?: Partial<MFVIDEOFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVIDEOFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.videoInfo !== undefined) view.setBigUint64(8, data.videoInfo === null ? 0n : BigInt(util.toPointer(data.videoInfo)), true);
  // 0x10: pointer
  if (data?.guidFormat !== undefined) view.setBigUint64(16, data.guidFormat === null ? 0n : BigInt(util.toPointer(data.guidFormat)), true);
  // 0x18: pointer
  if (data?.compressedInfo !== undefined) view.setBigUint64(24, data.compressedInfo === null ? 0n : BigInt(util.toPointer(data.compressedInfo)), true);
  // 0x20: pointer
  if (data?.surfaceInfo !== undefined) view.setBigUint64(32, data.surfaceInfo === null ? 0n : BigInt(util.toPointer(data.surfaceInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_INPUT_STREAM_INFO (size: 24)
 */
export interface MFT_INPUT_STREAM_INFO {
  /** i64 */
  hnsMaxLatency: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbSize: number;
  /** u32 */
  cbMaxLookahead: number;
  /** u32 */
  cbAlignment: number;
}

export const sizeofMFT_INPUT_STREAM_INFO = 24;

export function allocMFT_INPUT_STREAM_INFO(data?: Partial<MFT_INPUT_STREAM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_INPUT_STREAM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.hnsMaxLatency !== undefined) view.setBigInt64(0, BigInt(data.hnsMaxLatency), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.cbSize !== undefined) view.setUint32(12, Number(data.cbSize), true);
  // 0x10: u32
  if (data?.cbMaxLookahead !== undefined) view.setUint32(16, Number(data.cbMaxLookahead), true);
  // 0x14: u32
  if (data?.cbAlignment !== undefined) view.setUint32(20, Number(data.cbAlignment), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_OUTPUT_STREAM_INFO (size: 16)
 */
export interface MFT_OUTPUT_STREAM_INFO {
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbSize: number;
  /** u32 */
  cbAlignment: number;
}

export const sizeofMFT_OUTPUT_STREAM_INFO = 16;

export function allocMFT_OUTPUT_STREAM_INFO(data?: Partial<MFT_OUTPUT_STREAM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_OUTPUT_STREAM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.cbSize !== undefined) view.setUint32(4, Number(data.cbSize), true);
  // 0x08: u32
  if (data?.cbAlignment !== undefined) view.setUint32(8, Number(data.cbAlignment), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_OUTPUT_DATA_BUFFER (size: 32)
 */
export interface MFT_OUTPUT_DATA_BUFFER {
  /** u32 */
  dwStreamID: number;
  /** Windows.Win32.Media.MediaFoundation.IMFSample */
  pSample: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStatus: number;
  /** Windows.Win32.Media.MediaFoundation.IMFCollection */
  pEvents: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFT_OUTPUT_DATA_BUFFER = 32;

export function allocMFT_OUTPUT_DATA_BUFFER(data?: Partial<MFT_OUTPUT_DATA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_OUTPUT_DATA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStreamID !== undefined) view.setUint32(0, Number(data.dwStreamID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSample !== undefined) view.setBigUint64(8, data.pSample === null ? 0n : BigInt(util.toPointer(data.pSample)), true);
  // 0x10: u32
  if (data?.dwStatus !== undefined) view.setUint32(16, Number(data.dwStatus), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pEvents !== undefined) view.setBigUint64(24, data.pEvents === null ? 0n : BigInt(util.toPointer(data.pEvents)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.STREAM_MEDIUM (size: 16)
 */
export interface STREAM_MEDIUM {
  /** System.Guid */
  gidMedium: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  unMediumInstance: number;
}

export const sizeofSTREAM_MEDIUM = 16;

export function allocSTREAM_MEDIUM(data?: Partial<STREAM_MEDIUM>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAM_MEDIUM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.gidMedium !== undefined) view.setBigUint64(0, data.gidMedium === null ? 0n : BigInt(util.toPointer(data.gidMedium)), true);
  // 0x08: u32
  if (data?.unMediumInstance !== undefined) view.setUint32(8, Number(data.unMediumInstance), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFAudioDecoderDegradationInfo (size: 8)
 */
export interface MFAudioDecoderDegradationInfo {
  /** Windows.Win32.Media.MediaFoundation.MFT_AUDIO_DECODER_DEGRADATION_REASON */
  eDegradationReason: MFT_AUDIO_DECODER_DEGRADATION_REASON;
  /** Windows.Win32.Media.MediaFoundation.MFT_AUDIO_DECODER_DEGRADATION_TYPE */
  eType: MFT_AUDIO_DECODER_DEGRADATION_TYPE;
}

export const sizeofMFAudioDecoderDegradationInfo = 8;

export function allocMFAudioDecoderDegradationInfo(data?: Partial<MFAudioDecoderDegradationInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofMFAudioDecoderDegradationInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eDegradationReason !== undefined) view.setInt32(0, Number(data.eDegradationReason), true);
  // 0x04: i32
  if (data?.eType !== undefined) view.setInt32(4, Number(data.eType), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_STREAM_STATE_PARAM (size: 8)
 */
export interface MFT_STREAM_STATE_PARAM {
  /** u32 */
  StreamId: number;
  /** Windows.Win32.Media.MediaFoundation.MF_STREAM_STATE */
  State: MF_STREAM_STATE;
}

export const sizeofMFT_STREAM_STATE_PARAM = 8;

export function allocMFT_STREAM_STATE_PARAM(data?: Partial<MFT_STREAM_STATE_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_STREAM_STATE_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StreamId !== undefined) view.setUint32(0, Number(data.StreamId), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCLOCK_PROPERTIES (size: 40)
 */
export interface MFCLOCK_PROPERTIES {
  /** u64 */
  qwCorrelationRate: Deno.PointerValue;
  /** System.Guid */
  guidClockId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwClockFlags: number;
  /** u64 */
  qwClockFrequency: Deno.PointerValue;
  /** u32 */
  dwClockTolerance: number;
  /** u32 */
  dwClockJitter: number;
}

export const sizeofMFCLOCK_PROPERTIES = 40;

export function allocMFCLOCK_PROPERTIES(data?: Partial<MFCLOCK_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCLOCK_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.qwCorrelationRate !== undefined) view.setBigUint64(0, BigInt(data.qwCorrelationRate), true);
  // 0x08: pointer
  if (data?.guidClockId !== undefined) view.setBigUint64(8, data.guidClockId === null ? 0n : BigInt(util.toPointer(data.guidClockId)), true);
  // 0x10: u32
  if (data?.dwClockFlags !== undefined) view.setUint32(16, Number(data.dwClockFlags), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.qwClockFrequency !== undefined) view.setBigUint64(24, BigInt(data.qwClockFrequency), true);
  // 0x20: u32
  if (data?.dwClockTolerance !== undefined) view.setUint32(32, Number(data.dwClockTolerance), true);
  // 0x24: u32
  if (data?.dwClockJitter !== undefined) view.setUint32(36, Number(data.dwClockJitter), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFRR_COMPONENT_HASH_INFO (size: 32)
 */
export interface MFRR_COMPONENT_HASH_INFO {
  /** u32 */
  ulReason: number;
  /** array */
  rgHeaderHash: Deno.PointerValue | null;
  /** array */
  rgPublicKeyHash: Deno.PointerValue | null;
  /** array */
  wszName: Deno.PointerValue | null;
}

export const sizeofMFRR_COMPONENT_HASH_INFO = 32;

export function allocMFRR_COMPONENT_HASH_INFO(data?: Partial<MFRR_COMPONENT_HASH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMFRR_COMPONENT_HASH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulReason !== undefined) view.setUint32(0, Number(data.ulReason), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgHeaderHash !== undefined) view.setBigUint64(8, data.rgHeaderHash === null ? 0n : BigInt(util.toPointer(data.rgHeaderHash)), true);
  // 0x10: pointer
  if (data?.rgPublicKeyHash !== undefined) view.setBigUint64(16, data.rgPublicKeyHash === null ? 0n : BigInt(util.toPointer(data.rgPublicKeyHash)), true);
  // 0x18: pointer
  if (data?.wszName !== undefined) view.setBigUint64(24, data.wszName === null ? 0n : BigInt(util.toPointer(data.wszName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFRR_COMPONENTS (size: 16)
 */
export interface MFRR_COMPONENTS {
  /** u32 */
  dwRRInfoVersion: number;
  /** u32 */
  dwRRComponents: number;
  /** ptr */
  pRRComponents: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMFRR_COMPONENTS = 16;

export function allocMFRR_COMPONENTS(data?: Partial<MFRR_COMPONENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofMFRR_COMPONENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRRInfoVersion !== undefined) view.setUint32(0, Number(data.dwRRInfoVersion), true);
  // 0x04: u32
  if (data?.dwRRComponents !== undefined) view.setUint32(4, Number(data.dwRRComponents), true);
  // 0x08: pointer
  if (data?.pRRComponents !== undefined) view.setBigUint64(8, data.pRRComponents === null ? 0n : BigInt(util.toPointer(data.pRRComponents)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.ASF_FLAT_PICTURE (size: 8)
 */
export interface ASF_FLAT_PICTURE {
  /** u8 */
  bPictureType: number;
  /** u32 */
  dwDataLen: number;
}

export const sizeofASF_FLAT_PICTURE = 8;

export function allocASF_FLAT_PICTURE(data?: Partial<ASF_FLAT_PICTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofASF_FLAT_PICTURE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bPictureType !== undefined) view.setUint8(0, Number(data.bPictureType));
  // 0x01: u32
  if (data?.dwDataLen !== undefined) view.setUint32(1, Number(data.dwDataLen), true);
  // 0x05: pad3
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.ASF_FLAT_SYNCHRONISED_LYRICS (size: 8)
 */
export interface ASF_FLAT_SYNCHRONISED_LYRICS {
  /** u8 */
  bTimeStampFormat: number;
  /** u8 */
  bContentType: number;
  /** u32 */
  dwLyricsLen: number;
}

export const sizeofASF_FLAT_SYNCHRONISED_LYRICS = 8;

export function allocASF_FLAT_SYNCHRONISED_LYRICS(data?: Partial<ASF_FLAT_SYNCHRONISED_LYRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofASF_FLAT_SYNCHRONISED_LYRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bTimeStampFormat !== undefined) view.setUint8(0, Number(data.bTimeStampFormat));
  // 0x01: u8
  if (data?.bContentType !== undefined) view.setUint8(1, Number(data.bContentType));
  // 0x02: u32
  if (data?.dwLyricsLen !== undefined) view.setUint32(2, Number(data.dwLyricsLen), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFTOPONODE_ATTRIBUTE_UPDATE (size: 32)
 */
export interface MFTOPONODE_ATTRIBUTE_UPDATE {
  /** u64 */
  NodeId: Deno.PointerValue;
  /** System.Guid */
  guidAttributeKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MF_ATTRIBUTE_TYPE */
  attrType: MF_ATTRIBUTE_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFTOPONODE_ATTRIBUTE_UPDATE = 32;

export function allocMFTOPONODE_ATTRIBUTE_UPDATE(data?: Partial<MFTOPONODE_ATTRIBUTE_UPDATE>): Uint8Array {
  const buf = new Uint8Array(sizeofMFTOPONODE_ATTRIBUTE_UPDATE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NodeId !== undefined) view.setBigUint64(0, BigInt(data.NodeId), true);
  // 0x08: pointer
  if (data?.guidAttributeKey !== undefined) view.setBigUint64(8, data.guidAttributeKey === null ? 0n : BigInt(util.toPointer(data.guidAttributeKey)), true);
  // 0x10: i32
  if (data?.attrType !== undefined) view.setInt32(16, Number(data.attrType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_LEAKY_BUCKET_PAIR (size: 8)
 */
export interface MF_LEAKY_BUCKET_PAIR {
  /** u32 */
  dwBitrate: number;
  /** u32 */
  msBufferWindow: number;
}

export const sizeofMF_LEAKY_BUCKET_PAIR = 8;

export function allocMF_LEAKY_BUCKET_PAIR(data?: Partial<MF_LEAKY_BUCKET_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_LEAKY_BUCKET_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBitrate !== undefined) view.setUint32(0, Number(data.dwBitrate), true);
  // 0x04: u32
  if (data?.msBufferWindow !== undefined) view.setUint32(4, Number(data.msBufferWindow), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFBYTESTREAM_BUFFERING_PARAMS (size: 64)
 */
export interface MFBYTESTREAM_BUFFERING_PARAMS {
  /** u64 */
  cbTotalFileSize: Deno.PointerValue;
  /** u64 */
  cbPlayableDataSize: Deno.PointerValue;
  /** ptr */
  prgBuckets: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cBuckets: number;
  /** u64 */
  qwNetBufferingTime: Deno.PointerValue;
  /** u64 */
  qwExtraBufferingTimeDuringSeek: Deno.PointerValue;
  /** u64 */
  qwPlayDuration: Deno.PointerValue;
  /** f32 */
  dRate: number;
}

export const sizeofMFBYTESTREAM_BUFFERING_PARAMS = 64;

export function allocMFBYTESTREAM_BUFFERING_PARAMS(data?: Partial<MFBYTESTREAM_BUFFERING_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMFBYTESTREAM_BUFFERING_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.cbTotalFileSize !== undefined) view.setBigUint64(0, BigInt(data.cbTotalFileSize), true);
  // 0x08: u64
  if (data?.cbPlayableDataSize !== undefined) view.setBigUint64(8, BigInt(data.cbPlayableDataSize), true);
  // 0x10: pointer
  if (data?.prgBuckets !== undefined) view.setBigUint64(16, data.prgBuckets === null ? 0n : BigInt(util.toPointer(data.prgBuckets)), true);
  // 0x18: u32
  if (data?.cBuckets !== undefined) view.setUint32(24, Number(data.cBuckets), true);
  // 0x1c: pad4
  // 0x20: u64
  if (data?.qwNetBufferingTime !== undefined) view.setBigUint64(32, BigInt(data.qwNetBufferingTime), true);
  // 0x28: u64
  if (data?.qwExtraBufferingTimeDuringSeek !== undefined) view.setBigUint64(40, BigInt(data.qwExtraBufferingTimeDuringSeek), true);
  // 0x30: u64
  if (data?.qwPlayDuration !== undefined) view.setBigUint64(48, BigInt(data.qwPlayDuration), true);
  // 0x38: f32
  if (data?.dRate !== undefined) view.setFloat32(56, Number(data.dRate), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_BYTE_STREAM_CACHE_RANGE (size: 16)
 */
export interface MF_BYTE_STREAM_CACHE_RANGE {
  /** u64 */
  qwStartOffset: Deno.PointerValue;
  /** u64 */
  qwEndOffset: Deno.PointerValue;
}

export const sizeofMF_BYTE_STREAM_CACHE_RANGE = 16;

export function allocMF_BYTE_STREAM_CACHE_RANGE(data?: Partial<MF_BYTE_STREAM_CACHE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_BYTE_STREAM_CACHE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.qwStartOffset !== undefined) view.setBigUint64(0, BigInt(data.qwStartOffset), true);
  // 0x08: u64
  if (data?.qwEndOffset !== undefined) view.setBigUint64(8, BigInt(data.qwEndOffset), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFNetCredentialManagerGetParam (size: 56)
 */
export interface MFNetCredentialManagerGetParam {
  /** Windows.Win32.Foundation.HRESULT */
  hrOp: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fAllowLoggedOnUser: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fClearTextPackage: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  pszUrl: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszSite: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszRealm: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszPackage: string | null;
  /** i32 */
  nRetries: number;
}

export const sizeofMFNetCredentialManagerGetParam = 56;

export function allocMFNetCredentialManagerGetParam(data?: Partial<MFNetCredentialManagerGetParam>): Uint8Array {
  const buf = new Uint8Array(sizeofMFNetCredentialManagerGetParam);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hrOp !== undefined) view.setBigUint64(0, data.hrOp === null ? 0n : BigInt(util.toPointer(data.hrOp)), true);
  // 0x08: i32
  if (data?.fAllowLoggedOnUser !== undefined) view.setInt32(8, Number(data.fAllowLoggedOnUser), true);
  // 0x0c: i32
  if (data?.fClearTextPackage !== undefined) view.setInt32(12, Number(data.fClearTextPackage), true);
  // 0x10: buffer
  if (data?.pszUrl !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszUrl);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszSite !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszSite);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszRealm !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszRealm);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pszPackage !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszPackage);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: i32
  if (data?.nRetries !== undefined) view.setInt32(48, Number(data.nRetries), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_ACTION (size: 24)
 */
export interface MFINPUTTRUSTAUTHORITY_ACCESS_ACTION {
  /** Windows.Win32.Media.MediaFoundation.MFPOLICYMANAGER_ACTION */
  Action: MFPOLICYMANAGER_ACTION;
  /** ptr */
  pbTicket: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbTicket: number;
}

export const sizeofMFINPUTTRUSTAUTHORITY_ACCESS_ACTION = 24;

export function allocMFINPUTTRUSTAUTHORITY_ACCESS_ACTION(data?: Partial<MFINPUTTRUSTAUTHORITY_ACCESS_ACTION>): Uint8Array {
  const buf = new Uint8Array(sizeofMFINPUTTRUSTAUTHORITY_ACCESS_ACTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Action !== undefined) view.setInt32(0, Number(data.Action), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbTicket !== undefined) view.setBigUint64(8, data.pbTicket === null ? 0n : BigInt(util.toPointer(data.pbTicket)), true);
  // 0x10: u32
  if (data?.cbTicket !== undefined) view.setUint32(16, Number(data.cbTicket), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS (size: 40)
 */
export interface MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVer: number;
  /** u32 */
  cbSignatureOffset: number;
  /** u32 */
  cbSignatureSize: number;
  /** u32 */
  cbExtensionOffset: number;
  /** u32 */
  cbExtensionSize: number;
  /** u32 */
  cActions: number;
  /** array */
  rgOutputActions: Deno.PointerValue | null;
}

export const sizeofMFINPUTTRUSTAUTHORITY_ACCESS_PARAMS = 40;

export function allocMFINPUTTRUSTAUTHORITY_ACCESS_PARAMS(data?: Partial<MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMFINPUTTRUSTAUTHORITY_ACCESS_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVer !== undefined) view.setUint32(4, Number(data.dwVer), true);
  // 0x08: u32
  if (data?.cbSignatureOffset !== undefined) view.setUint32(8, Number(data.cbSignatureOffset), true);
  // 0x0c: u32
  if (data?.cbSignatureSize !== undefined) view.setUint32(12, Number(data.cbSignatureSize), true);
  // 0x10: u32
  if (data?.cbExtensionOffset !== undefined) view.setUint32(16, Number(data.cbExtensionOffset), true);
  // 0x14: u32
  if (data?.cbExtensionSize !== undefined) view.setUint32(20, Number(data.cbExtensionSize), true);
  // 0x18: u32
  if (data?.cActions !== undefined) view.setUint32(24, Number(data.cActions), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgOutputActions !== undefined) view.setBigUint64(32, data.rgOutputActions === null ? 0n : BigInt(util.toPointer(data.rgOutputActions)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_TRANSCODE_SINK_INFO (size: 32)
 */
export interface MF_TRANSCODE_SINK_INFO {
  /** u32 */
  dwVideoStreamID: number;
  /** Windows.Win32.Media.MediaFoundation.IMFMediaType */
  pVideoMediaType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStreamID: number;
  /** Windows.Win32.Media.MediaFoundation.IMFMediaType */
  pAudioMediaType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMF_TRANSCODE_SINK_INFO = 32;

export function allocMF_TRANSCODE_SINK_INFO(data?: Partial<MF_TRANSCODE_SINK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_TRANSCODE_SINK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVideoStreamID !== undefined) view.setUint32(0, Number(data.dwVideoStreamID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pVideoMediaType !== undefined) view.setBigUint64(8, data.pVideoMediaType === null ? 0n : BigInt(util.toPointer(data.pVideoMediaType)), true);
  // 0x10: u32
  if (data?.dwAudioStreamID !== undefined) view.setUint32(16, Number(data.dwAudioStreamID), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pAudioMediaType !== undefined) view.setBigUint64(24, data.pAudioMediaType === null ? 0n : BigInt(util.toPointer(data.pAudioMediaType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_REGISTRATION_INFO (size: 64)
 */
export interface MFT_REGISTRATION_INFO {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidCategory: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  uiFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** u32 */
  cInTypes: number;
  /** ptr */
  pInTypes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cOutTypes: number;
  /** ptr */
  pOutTypes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMFT_REGISTRATION_INFO = 64;

export function allocMFT_REGISTRATION_INFO(data?: Partial<MFT_REGISTRATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_REGISTRATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x08: pointer
  if (data?.guidCategory !== undefined) view.setBigUint64(8, data.guidCategory === null ? 0n : BigInt(util.toPointer(data.guidCategory)), true);
  // 0x10: u32
  if (data?.uiFlags !== undefined) view.setUint32(16, Number(data.uiFlags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.cInTypes !== undefined) view.setUint32(32, Number(data.cInTypes), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pInTypes !== undefined) view.setBigUint64(40, data.pInTypes === null ? 0n : BigInt(util.toPointer(data.pInTypes)), true);
  // 0x30: u32
  if (data?.cOutTypes !== undefined) view.setUint32(48, Number(data.cOutTypes), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pOutTypes !== undefined) view.setBigUint64(56, data.pOutTypes === null ? 0n : BigInt(util.toPointer(data.pOutTypes)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_INPUT_DATA (size: 24)
 */
export interface MFCONTENTPROTECTIONDEVICE_INPUT_DATA {
  /** u32 */
  HWProtectionFunctionID: number;
  /** u32 */
  PrivateDataByteCount: number;
  /** u32 */
  HWProtectionDataByteCount: number;
  /** u32 */
  Reserved: number;
  /** array */
  InputData: Deno.PointerValue | null;
}

export const sizeofMFCONTENTPROTECTIONDEVICE_INPUT_DATA = 24;

export function allocMFCONTENTPROTECTIONDEVICE_INPUT_DATA(data?: Partial<MFCONTENTPROTECTIONDEVICE_INPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCONTENTPROTECTIONDEVICE_INPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HWProtectionFunctionID !== undefined) view.setUint32(0, Number(data.HWProtectionFunctionID), true);
  // 0x04: u32
  if (data?.PrivateDataByteCount !== undefined) view.setUint32(4, Number(data.PrivateDataByteCount), true);
  // 0x08: u32
  if (data?.HWProtectionDataByteCount !== undefined) view.setUint32(8, Number(data.HWProtectionDataByteCount), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: pointer
  if (data?.InputData !== undefined) view.setBigUint64(16, data.InputData === null ? 0n : BigInt(util.toPointer(data.InputData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA (size: 48)
 */
export interface MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA {
  /** u32 */
  PrivateDataByteCount: number;
  /** u32 */
  MaxHWProtectionDataByteCount: number;
  /** u32 */
  HWProtectionDataByteCount: number;
  /** Windows.Win32.Foundation.HRESULT */
  Status: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  TransportTimeInHundredsOfNanoseconds: Deno.PointerValue;
  /** i64 */
  ExecutionTimeInHundredsOfNanoseconds: Deno.PointerValue;
  /** array */
  OutputData: Deno.PointerValue | null;
}

export const sizeofMFCONTENTPROTECTIONDEVICE_OUTPUT_DATA = 48;

export function allocMFCONTENTPROTECTIONDEVICE_OUTPUT_DATA(data?: Partial<MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCONTENTPROTECTIONDEVICE_OUTPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PrivateDataByteCount !== undefined) view.setUint32(0, Number(data.PrivateDataByteCount), true);
  // 0x04: u32
  if (data?.MaxHWProtectionDataByteCount !== undefined) view.setUint32(4, Number(data.MaxHWProtectionDataByteCount), true);
  // 0x08: u32
  if (data?.HWProtectionDataByteCount !== undefined) view.setUint32(8, Number(data.HWProtectionDataByteCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Status !== undefined) view.setBigUint64(16, data.Status === null ? 0n : BigInt(util.toPointer(data.Status)), true);
  // 0x18: i64
  if (data?.TransportTimeInHundredsOfNanoseconds !== undefined) view.setBigInt64(24, BigInt(data.TransportTimeInHundredsOfNanoseconds), true);
  // 0x20: i64
  if (data?.ExecutionTimeInHundredsOfNanoseconds !== undefined) view.setBigInt64(32, BigInt(data.ExecutionTimeInHundredsOfNanoseconds), true);
  // 0x28: pointer
  if (data?.OutputData !== undefined) view.setBigUint64(40, data.OutputData === null ? 0n : BigInt(util.toPointer(data.OutputData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA (size: 24)
 */
export interface MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA {
  /** u32 */
  TaskIndex: number;
  /** array */
  ClassName: Deno.PointerValue | null;
  /** i32 */
  BasePriority: number;
}

export const sizeofMFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA = 24;

export function allocMFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA(data?: Partial<MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TaskIndex !== undefined) view.setUint32(0, Number(data.TaskIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ClassName !== undefined) view.setBigUint64(8, data.ClassName === null ? 0n : BigInt(util.toPointer(data.ClassName)), true);
  // 0x10: i32
  if (data?.BasePriority !== undefined) view.setInt32(16, Number(data.BasePriority), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFMediaKeyStatus (size: 16)
 */
export interface MFMediaKeyStatus {
  /** ptr */
  pbKeyId: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbKeyId: number;
  /** Windows.Win32.Media.MediaFoundation.MF_MEDIAKEY_STATUS */
  eMediaKeyStatus: MF_MEDIAKEY_STATUS;
}

export const sizeofMFMediaKeyStatus = 16;

export function allocMFMediaKeyStatus(data?: Partial<MFMediaKeyStatus>): Uint8Array {
  const buf = new Uint8Array(sizeofMFMediaKeyStatus);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pbKeyId !== undefined) view.setBigUint64(0, data.pbKeyId === null ? 0n : BigInt(util.toPointer(data.pbKeyId)), true);
  // 0x08: u32
  if (data?.cbKeyId !== undefined) view.setUint32(8, Number(data.cbKeyId), true);
  // 0x0c: i32
  if (data?.eMediaKeyStatus !== undefined) view.setInt32(12, Number(data.eMediaKeyStatus), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_VIDEO_SPHERICAL_VIEWDIRECTION (size: 16)
 */
export interface MF_VIDEO_SPHERICAL_VIEWDIRECTION {
  /** i32 */
  iHeading: number;
  /** i32 */
  iPitch: number;
  /** i32 */
  iRoll: number;
}

export const sizeofMF_VIDEO_SPHERICAL_VIEWDIRECTION = 16;

export function allocMF_VIDEO_SPHERICAL_VIEWDIRECTION(data?: Partial<MF_VIDEO_SPHERICAL_VIEWDIRECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_VIDEO_SPHERICAL_VIEWDIRECTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iHeading !== undefined) view.setInt32(0, Number(data.iHeading), true);
  // 0x04: i32
  if (data?.iPitch !== undefined) view.setInt32(4, Number(data.iPitch), true);
  // 0x08: i32
  if (data?.iRoll !== undefined) view.setInt32(8, Number(data.iRoll), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.SENSORPROFILEID (size: 16)
 */
export interface SENSORPROFILEID {
  /** System.Guid */
  Type: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Index: number;
  /** u32 */
  Unused: number;
}

export const sizeofSENSORPROFILEID = 16;

export function allocSENSORPROFILEID(data?: Partial<SENSORPROFILEID>): Uint8Array {
  const buf = new Uint8Array(sizeofSENSORPROFILEID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Type !== undefined) view.setBigUint64(0, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  // 0x08: u32
  if (data?.Index !== undefined) view.setUint32(8, Number(data.Index), true);
  // 0x0c: u32
  if (data?.Unused !== undefined) view.setUint32(12, Number(data.Unused), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_CameraModel (size: 16)
 */
export interface MFCameraIntrinsic_CameraModel {
  /** f32 */
  FocalLength_x: number;
  /** f32 */
  FocalLength_y: number;
  /** f32 */
  PrincipalPoint_x: number;
  /** f32 */
  PrincipalPoint_y: number;
}

export const sizeofMFCameraIntrinsic_CameraModel = 16;

export function allocMFCameraIntrinsic_CameraModel(data?: Partial<MFCameraIntrinsic_CameraModel>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraIntrinsic_CameraModel);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.FocalLength_x !== undefined) view.setFloat32(0, Number(data.FocalLength_x), true);
  // 0x04: f32
  if (data?.FocalLength_y !== undefined) view.setFloat32(4, Number(data.FocalLength_y), true);
  // 0x08: f32
  if (data?.PrincipalPoint_x !== undefined) view.setFloat32(8, Number(data.PrincipalPoint_x), true);
  // 0x0c: f32
  if (data?.PrincipalPoint_y !== undefined) view.setFloat32(12, Number(data.PrincipalPoint_y), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel6KT (size: 32)
 */
export interface MFCameraIntrinsic_DistortionModel6KT {
  /** f32 */
  Radial_k1: number;
  /** f32 */
  Radial_k2: number;
  /** f32 */
  Radial_k3: number;
  /** f32 */
  Radial_k4: number;
  /** f32 */
  Radial_k5: number;
  /** f32 */
  Radial_k6: number;
  /** f32 */
  Tangential_p1: number;
  /** f32 */
  Tangential_p2: number;
}

export const sizeofMFCameraIntrinsic_DistortionModel6KT = 32;

export function allocMFCameraIntrinsic_DistortionModel6KT(data?: Partial<MFCameraIntrinsic_DistortionModel6KT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraIntrinsic_DistortionModel6KT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Radial_k1 !== undefined) view.setFloat32(0, Number(data.Radial_k1), true);
  // 0x04: f32
  if (data?.Radial_k2 !== undefined) view.setFloat32(4, Number(data.Radial_k2), true);
  // 0x08: f32
  if (data?.Radial_k3 !== undefined) view.setFloat32(8, Number(data.Radial_k3), true);
  // 0x0c: f32
  if (data?.Radial_k4 !== undefined) view.setFloat32(12, Number(data.Radial_k4), true);
  // 0x10: f32
  if (data?.Radial_k5 !== undefined) view.setFloat32(16, Number(data.Radial_k5), true);
  // 0x14: f32
  if (data?.Radial_k6 !== undefined) view.setFloat32(20, Number(data.Radial_k6), true);
  // 0x18: f32
  if (data?.Tangential_p1 !== undefined) view.setFloat32(24, Number(data.Tangential_p1), true);
  // 0x1c: f32
  if (data?.Tangential_p2 !== undefined) view.setFloat32(28, Number(data.Tangential_p2), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelArcTan (size: 24)
 */
export interface MFCameraIntrinsic_DistortionModelArcTan {
  /** f32 */
  Radial_k0: number;
  /** f32 */
  DistortionCenter_x: number;
  /** f32 */
  DistortionCenter_y: number;
  /** f32 */
  Tangential_x: number;
  /** f32 */
  Tangential_y: number;
}

export const sizeofMFCameraIntrinsic_DistortionModelArcTan = 24;

export function allocMFCameraIntrinsic_DistortionModelArcTan(data?: Partial<MFCameraIntrinsic_DistortionModelArcTan>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraIntrinsic_DistortionModelArcTan);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Radial_k0 !== undefined) view.setFloat32(0, Number(data.Radial_k0), true);
  // 0x04: f32
  if (data?.DistortionCenter_x !== undefined) view.setFloat32(4, Number(data.DistortionCenter_x), true);
  // 0x08: f32
  if (data?.DistortionCenter_y !== undefined) view.setFloat32(8, Number(data.DistortionCenter_y), true);
  // 0x0c: f32
  if (data?.Tangential_x !== undefined) view.setFloat32(12, Number(data.Tangential_x), true);
  // 0x10: f32
  if (data?.Tangential_y !== undefined) view.setFloat32(16, Number(data.Tangential_y), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFExtendedCameraIntrinsic_IntrinsicModel (size: 24)
 */
export interface MFExtendedCameraIntrinsic_IntrinsicModel {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  SplitFrameId: number;
  /** Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_CameraModel */
  CameraModel: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFExtendedCameraIntrinsic_IntrinsicModel = 24;

export function allocMFExtendedCameraIntrinsic_IntrinsicModel(data?: Partial<MFExtendedCameraIntrinsic_IntrinsicModel>): Uint8Array {
  const buf = new Uint8Array(sizeofMFExtendedCameraIntrinsic_IntrinsicModel);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.SplitFrameId !== undefined) view.setUint32(8, Number(data.SplitFrameId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.CameraModel !== undefined) view.setBigUint64(16, data.CameraModel === null ? 0n : BigInt(util.toPointer(data.CameraModel)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.ASF_INDEX_IDENTIFIER (size: 16)
 */
export interface ASF_INDEX_IDENTIFIER {
  /** System.Guid */
  guidIndexType: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wStreamNumber: number;
}

export const sizeofASF_INDEX_IDENTIFIER = 16;

export function allocASF_INDEX_IDENTIFIER(data?: Partial<ASF_INDEX_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofASF_INDEX_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidIndexType !== undefined) view.setBigUint64(0, data.guidIndexType === null ? 0n : BigInt(util.toPointer(data.guidIndexType)), true);
  // 0x08: u16
  if (data?.wStreamNumber !== undefined) view.setUint16(8, Number(data.wStreamNumber), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.ASF_INDEX_DESCRIPTOR (size: 32)
 */
export interface ASF_INDEX_DESCRIPTOR {
  /** Windows.Win32.Media.MediaFoundation.ASF_INDEX_IDENTIFIER */
  Identifier: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  cPerEntryBytes: number;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** u32 */
  dwInterval: number;
}

export const sizeofASF_INDEX_DESCRIPTOR = 32;

export function allocASF_INDEX_DESCRIPTOR(data?: Partial<ASF_INDEX_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofASF_INDEX_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identifier !== undefined) view.setBigUint64(0, data.Identifier === null ? 0n : BigInt(util.toPointer(data.Identifier)), true);
  // 0x08: u16
  if (data?.cPerEntryBytes !== undefined) view.setUint16(8, Number(data.cPerEntryBytes), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(16, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x18: u32
  if (data?.dwInterval !== undefined) view.setUint32(24, Number(data.dwInterval), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.ASF_MUX_STATISTICS (size: 8)
 */
export interface ASF_MUX_STATISTICS {
  /** u32 */
  cFramesWritten: number;
  /** u32 */
  cFramesDropped: number;
}

export const sizeofASF_MUX_STATISTICS = 8;

export function allocASF_MUX_STATISTICS(data?: Partial<ASF_MUX_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofASF_MUX_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cFramesWritten !== undefined) view.setUint32(0, Number(data.cFramesWritten), true);
  // 0x04: u32
  if (data?.cFramesDropped !== undefined) view.setUint32(4, Number(data.cFramesDropped), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoNormalizedRect (size: 16)
 */
export interface MFVideoNormalizedRect {
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  right: number;
  /** f32 */
  bottom: number;
}

export const sizeofMFVideoNormalizedRect = 16;

export function allocMFVideoNormalizedRect(data?: Partial<MFVideoNormalizedRect>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoNormalizedRect);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.left !== undefined) view.setFloat32(0, Number(data.left), true);
  // 0x04: f32
  if (data?.top !== undefined) view.setFloat32(4, Number(data.top), true);
  // 0x08: f32
  if (data?.right !== undefined) view.setFloat32(8, Number(data.right), true);
  // 0x0c: f32
  if (data?.bottom !== undefined) view.setFloat32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MOVE_RECT (size: 16)
 */
export interface MOVE_RECT {
  /** Windows.Win32.Foundation.POINT */
  SourcePoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  DestRect: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMOVE_RECT = 16;

export function allocMOVE_RECT(data?: Partial<MOVE_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofMOVE_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SourcePoint !== undefined) view.setBigUint64(0, data.SourcePoint === null ? 0n : BigInt(util.toPointer(data.SourcePoint)), true);
  // 0x08: pointer
  if (data?.DestRect !== undefined) view.setBigUint64(8, data.DestRect === null ? 0n : BigInt(util.toPointer(data.DestRect)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DIRTYRECT_INFO (size: 16)
 */
export interface DIRTYRECT_INFO {
  /** u32 */
  FrameNumber: number;
  /** u32 */
  NumDirtyRects: number;
  /** array */
  DirtyRects: Deno.PointerValue | null;
}

export const sizeofDIRTYRECT_INFO = 16;

export function allocDIRTYRECT_INFO(data?: Partial<DIRTYRECT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDIRTYRECT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FrameNumber !== undefined) view.setUint32(0, Number(data.FrameNumber), true);
  // 0x04: u32
  if (data?.NumDirtyRects !== undefined) view.setUint32(4, Number(data.NumDirtyRects), true);
  // 0x08: pointer
  if (data?.DirtyRects !== undefined) view.setBigUint64(8, data.DirtyRects === null ? 0n : BigInt(util.toPointer(data.DirtyRects)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MOVEREGION_INFO (size: 16)
 */
export interface MOVEREGION_INFO {
  /** u32 */
  FrameNumber: number;
  /** u32 */
  NumMoveRegions: number;
  /** array */
  MoveRegions: Deno.PointerValue | null;
}

export const sizeofMOVEREGION_INFO = 16;

export function allocMOVEREGION_INFO(data?: Partial<MOVEREGION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMOVEREGION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FrameNumber !== undefined) view.setUint32(0, Number(data.FrameNumber), true);
  // 0x04: u32
  if (data?.NumMoveRegions !== undefined) view.setUint32(4, Number(data.NumMoveRegions), true);
  // 0x08: pointer
  if (data?.MoveRegions !== undefined) view.setBigUint64(8, data.MoveRegions === null ? 0n : BigInt(util.toPointer(data.MoveRegions)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.ROI_AREA (size: 16)
 */
export interface ROI_AREA {
  /** Windows.Win32.Foundation.RECT */
  rect: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  QPDelta: number;
}

export const sizeofROI_AREA = 16;

export function allocROI_AREA(data?: Partial<ROI_AREA>): Uint8Array {
  const buf = new Uint8Array(sizeofROI_AREA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rect !== undefined) view.setBigUint64(0, data.rect === null ? 0n : BigInt(util.toPointer(data.rect)), true);
  // 0x08: i32
  if (data?.QPDelta !== undefined) view.setInt32(8, Number(data.QPDelta), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MACROBLOCK_DATA (size: 16)
 */
export interface MACROBLOCK_DATA {
  /** u32 */
  flags: number;
  /** i16 */
  motionVectorX: number;
  /** i16 */
  motionVectorY: number;
  /** i32 */
  QPDelta: number;
}

export const sizeofMACROBLOCK_DATA = 16;

export function allocMACROBLOCK_DATA(data?: Partial<MACROBLOCK_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMACROBLOCK_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: i16
  if (data?.motionVectorX !== undefined) view.setInt16(4, Number(data.motionVectorX), true);
  // 0x06: i16
  if (data?.motionVectorY !== undefined) view.setInt16(6, Number(data.motionVectorY), true);
  // 0x08: i32
  if (data?.QPDelta !== undefined) view.setInt32(8, Number(data.QPDelta), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DigitalWindowSetting (size: 24)
 */
export interface DigitalWindowSetting {
  /** f64 */
  OriginX: number;
  /** f64 */
  OriginY: number;
  /** f64 */
  WindowSize: number;
}

export const sizeofDigitalWindowSetting = 24;

export function allocDigitalWindowSetting(data?: Partial<DigitalWindowSetting>): Uint8Array {
  const buf = new Uint8Array(sizeofDigitalWindowSetting);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.OriginX !== undefined) view.setFloat64(0, Number(data.OriginX), true);
  // 0x08: f64
  if (data?.OriginY !== undefined) view.setFloat64(8, Number(data.OriginY), true);
  // 0x10: f64
  if (data?.WindowSize !== undefined) view.setFloat64(16, Number(data.WindowSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFFOLDDOWN_MATRIX (size: 24)
 */
export interface MFFOLDDOWN_MATRIX {
  /** u32 */
  cbSize: number;
  /** u32 */
  cSrcChannels: number;
  /** u32 */
  cDstChannels: number;
  /** u32 */
  dwChannelMask: number;
  /** array */
  Coeff: Deno.PointerValue | null;
}

export const sizeofMFFOLDDOWN_MATRIX = 24;

export function allocMFFOLDDOWN_MATRIX(data?: Partial<MFFOLDDOWN_MATRIX>): Uint8Array {
  const buf = new Uint8Array(sizeofMFFOLDDOWN_MATRIX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cSrcChannels !== undefined) view.setUint32(4, Number(data.cSrcChannels), true);
  // 0x08: u32
  if (data?.cDstChannels !== undefined) view.setUint32(8, Number(data.cDstChannels), true);
  // 0x0c: u32
  if (data?.dwChannelMask !== undefined) view.setUint32(12, Number(data.dwChannelMask), true);
  // 0x10: pointer
  if (data?.Coeff !== undefined) view.setBigUint64(16, data.Coeff === null ? 0n : BigInt(util.toPointer(data.Coeff)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MT_CUSTOM_VIDEO_PRIMARIES (size: 32)
 */
export interface MT_CUSTOM_VIDEO_PRIMARIES {
  /** f32 */
  fRx: number;
  /** f32 */
  fRy: number;
  /** f32 */
  fGx: number;
  /** f32 */
  fGy: number;
  /** f32 */
  fBx: number;
  /** f32 */
  fBy: number;
  /** f32 */
  fWx: number;
  /** f32 */
  fWy: number;
}

export const sizeofMT_CUSTOM_VIDEO_PRIMARIES = 32;

export function allocMT_CUSTOM_VIDEO_PRIMARIES(data?: Partial<MT_CUSTOM_VIDEO_PRIMARIES>): Uint8Array {
  const buf = new Uint8Array(sizeofMT_CUSTOM_VIDEO_PRIMARIES);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fRx !== undefined) view.setFloat32(0, Number(data.fRx), true);
  // 0x04: f32
  if (data?.fRy !== undefined) view.setFloat32(4, Number(data.fRy), true);
  // 0x08: f32
  if (data?.fGx !== undefined) view.setFloat32(8, Number(data.fGx), true);
  // 0x0c: f32
  if (data?.fGy !== undefined) view.setFloat32(12, Number(data.fGy), true);
  // 0x10: f32
  if (data?.fBx !== undefined) view.setFloat32(16, Number(data.fBx), true);
  // 0x14: f32
  if (data?.fBy !== undefined) view.setFloat32(20, Number(data.fBy), true);
  // 0x18: f32
  if (data?.fWx !== undefined) view.setFloat32(24, Number(data.fWx), true);
  // 0x1c: f32
  if (data?.fWy !== undefined) view.setFloat32(28, Number(data.fWy), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MT_ARBITRARY_HEADER (size: 40)
 */
export interface MT_ARBITRARY_HEADER {
  /** System.Guid */
  majortype: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  subtype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  lSampleSize: number;
  /** System.Guid */
  formattype: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMT_ARBITRARY_HEADER = 40;

export function allocMT_ARBITRARY_HEADER(data?: Partial<MT_ARBITRARY_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMT_ARBITRARY_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.majortype !== undefined) view.setBigUint64(0, data.majortype === null ? 0n : BigInt(util.toPointer(data.majortype)), true);
  // 0x08: pointer
  if (data?.subtype !== undefined) view.setBigUint64(8, data.subtype === null ? 0n : BigInt(util.toPointer(data.subtype)), true);
  // 0x10: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(16, Number(data.bFixedSizeSamples), true);
  // 0x14: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(20, Number(data.bTemporalCompression), true);
  // 0x18: u32
  if (data?.lSampleSize !== undefined) view.setUint32(24, Number(data.lSampleSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.formattype !== undefined) view.setBigUint64(32, data.formattype === null ? 0n : BigInt(util.toPointer(data.formattype)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_FLOAT2 (size: 8)
 */
export interface MF_FLOAT2 {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
}

export const sizeofMF_FLOAT2 = 8;

export function allocMF_FLOAT2(data?: Partial<MF_FLOAT2>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_FLOAT2);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_FLOAT3 (size: 16)
 */
export interface MF_FLOAT3 {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
}

export const sizeofMF_FLOAT3 = 16;

export function allocMF_FLOAT3(data?: Partial<MF_FLOAT3>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_FLOAT3);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_QUATERNION (size: 16)
 */
export interface MF_QUATERNION {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
  /** f32 */
  w: number;
}

export const sizeofMF_QUATERNION = 16;

export function allocMF_QUATERNION(data?: Partial<MF_QUATERNION>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_QUATERNION);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: f32
  if (data?.w !== undefined) view.setFloat32(12, Number(data.w), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraExtrinsic_CalibratedTransform (size: 24)
 */
export interface MFCameraExtrinsic_CalibratedTransform {
  /** System.Guid */
  CalibrationId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MF_FLOAT3 */
  Position: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MF_QUATERNION */
  Orientation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFCameraExtrinsic_CalibratedTransform = 24;

export function allocMFCameraExtrinsic_CalibratedTransform(data?: Partial<MFCameraExtrinsic_CalibratedTransform>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraExtrinsic_CalibratedTransform);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CalibrationId !== undefined) view.setBigUint64(0, data.CalibrationId === null ? 0n : BigInt(util.toPointer(data.CalibrationId)), true);
  // 0x08: pointer
  if (data?.Position !== undefined) view.setBigUint64(8, data.Position === null ? 0n : BigInt(util.toPointer(data.Position)), true);
  // 0x10: pointer
  if (data?.Orientation !== undefined) view.setBigUint64(16, data.Orientation === null ? 0n : BigInt(util.toPointer(data.Orientation)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraExtrinsics (size: 16)
 */
export interface MFCameraExtrinsics {
  /** u32 */
  TransformCount: number;
  /** array */
  CalibratedTransforms: Deno.PointerValue | null;
}

export const sizeofMFCameraExtrinsics = 16;

export function allocMFCameraExtrinsics(data?: Partial<MFCameraExtrinsics>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraExtrinsics);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TransformCount !== undefined) view.setUint32(0, Number(data.TransformCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CalibratedTransforms !== undefined) view.setBigUint64(8, data.CalibratedTransforms === null ? 0n : BigInt(util.toPointer(data.CalibratedTransforms)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_PinholeCameraModel (size: 16)
 */
export interface MFCameraIntrinsic_PinholeCameraModel {
  /** Windows.Win32.Media.MediaFoundation.MF_FLOAT2 */
  FocalLength: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MF_FLOAT2 */
  PrincipalPoint: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFCameraIntrinsic_PinholeCameraModel = 16;

export function allocMFCameraIntrinsic_PinholeCameraModel(data?: Partial<MFCameraIntrinsic_PinholeCameraModel>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraIntrinsic_PinholeCameraModel);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FocalLength !== undefined) view.setBigUint64(0, data.FocalLength === null ? 0n : BigInt(util.toPointer(data.FocalLength)), true);
  // 0x08: pointer
  if (data?.PrincipalPoint !== undefined) view.setBigUint64(8, data.PrincipalPoint === null ? 0n : BigInt(util.toPointer(data.PrincipalPoint)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel (size: 24)
 */
export interface MFCameraIntrinsic_DistortionModel {
  /** f32 */
  Radial_k1: number;
  /** f32 */
  Radial_k2: number;
  /** f32 */
  Radial_k3: number;
  /** f32 */
  Tangential_p1: number;
  /** f32 */
  Tangential_p2: number;
}

export const sizeofMFCameraIntrinsic_DistortionModel = 24;

export function allocMFCameraIntrinsic_DistortionModel(data?: Partial<MFCameraIntrinsic_DistortionModel>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraIntrinsic_DistortionModel);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Radial_k1 !== undefined) view.setFloat32(0, Number(data.Radial_k1), true);
  // 0x04: f32
  if (data?.Radial_k2 !== undefined) view.setFloat32(4, Number(data.Radial_k2), true);
  // 0x08: f32
  if (data?.Radial_k3 !== undefined) view.setFloat32(8, Number(data.Radial_k3), true);
  // 0x0c: f32
  if (data?.Tangential_p1 !== undefined) view.setFloat32(12, Number(data.Tangential_p1), true);
  // 0x10: f32
  if (data?.Tangential_p2 !== undefined) view.setFloat32(16, Number(data.Tangential_p2), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFPinholeCameraIntrinsic_IntrinsicModel (size: 24)
 */
export interface MFPinholeCameraIntrinsic_IntrinsicModel {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_PinholeCameraModel */
  CameraModel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel */
  DistortionModel: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFPinholeCameraIntrinsic_IntrinsicModel = 24;

export function allocMFPinholeCameraIntrinsic_IntrinsicModel(data?: Partial<MFPinholeCameraIntrinsic_IntrinsicModel>): Uint8Array {
  const buf = new Uint8Array(sizeofMFPinholeCameraIntrinsic_IntrinsicModel);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: pointer
  if (data?.CameraModel !== undefined) view.setBigUint64(8, data.CameraModel === null ? 0n : BigInt(util.toPointer(data.CameraModel)), true);
  // 0x10: pointer
  if (data?.DistortionModel !== undefined) view.setBigUint64(16, data.DistortionModel === null ? 0n : BigInt(util.toPointer(data.DistortionModel)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFPinholeCameraIntrinsics (size: 16)
 */
export interface MFPinholeCameraIntrinsics {
  /** u32 */
  IntrinsicModelCount: number;
  /** array */
  IntrinsicModels: Deno.PointerValue | null;
}

export const sizeofMFPinholeCameraIntrinsics = 16;

export function allocMFPinholeCameraIntrinsics(data?: Partial<MFPinholeCameraIntrinsics>): Uint8Array {
  const buf = new Uint8Array(sizeofMFPinholeCameraIntrinsics);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IntrinsicModelCount !== undefined) view.setUint32(0, Number(data.IntrinsicModelCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IntrinsicModels !== undefined) view.setBigUint64(8, data.IntrinsicModels === null ? 0n : BigInt(util.toPointer(data.IntrinsicModels)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFMPEG2DLNASINKSTATS (size: 88)
 */
export interface MFMPEG2DLNASINKSTATS {
  /** u64 */
  cBytesWritten: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fPAL: boolean;
  /** u32 */
  fccVideo: number;
  /** u32 */
  dwVideoWidth: number;
  /** u32 */
  dwVideoHeight: number;
  /** u64 */
  cVideoFramesReceived: Deno.PointerValue;
  /** u64 */
  cVideoFramesEncoded: Deno.PointerValue;
  /** u64 */
  cVideoFramesSkipped: Deno.PointerValue;
  /** u64 */
  cBlackVideoFramesEncoded: Deno.PointerValue;
  /** u64 */
  cVideoFramesDuplicated: Deno.PointerValue;
  /** u32 */
  cAudioSamplesPerSec: number;
  /** u32 */
  cAudioChannels: number;
  /** u64 */
  cAudioBytesReceived: Deno.PointerValue;
  /** u64 */
  cAudioFramesEncoded: Deno.PointerValue;
}

export const sizeofMFMPEG2DLNASINKSTATS = 88;

export function allocMFMPEG2DLNASINKSTATS(data?: Partial<MFMPEG2DLNASINKSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofMFMPEG2DLNASINKSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.cBytesWritten !== undefined) view.setBigUint64(0, BigInt(data.cBytesWritten), true);
  // 0x08: i32
  if (data?.fPAL !== undefined) view.setInt32(8, Number(data.fPAL), true);
  // 0x0c: u32
  if (data?.fccVideo !== undefined) view.setUint32(12, Number(data.fccVideo), true);
  // 0x10: u32
  if (data?.dwVideoWidth !== undefined) view.setUint32(16, Number(data.dwVideoWidth), true);
  // 0x14: u32
  if (data?.dwVideoHeight !== undefined) view.setUint32(20, Number(data.dwVideoHeight), true);
  // 0x18: u64
  if (data?.cVideoFramesReceived !== undefined) view.setBigUint64(24, BigInt(data.cVideoFramesReceived), true);
  // 0x20: u64
  if (data?.cVideoFramesEncoded !== undefined) view.setBigUint64(32, BigInt(data.cVideoFramesEncoded), true);
  // 0x28: u64
  if (data?.cVideoFramesSkipped !== undefined) view.setBigUint64(40, BigInt(data.cVideoFramesSkipped), true);
  // 0x30: u64
  if (data?.cBlackVideoFramesEncoded !== undefined) view.setBigUint64(48, BigInt(data.cBlackVideoFramesEncoded), true);
  // 0x38: u64
  if (data?.cVideoFramesDuplicated !== undefined) view.setBigUint64(56, BigInt(data.cVideoFramesDuplicated), true);
  // 0x40: u32
  if (data?.cAudioSamplesPerSec !== undefined) view.setUint32(64, Number(data.cAudioSamplesPerSec), true);
  // 0x44: u32
  if (data?.cAudioChannels !== undefined) view.setUint32(68, Number(data.cAudioChannels), true);
  // 0x48: u64
  if (data?.cAudioBytesReceived !== undefined) view.setBigUint64(72, BigInt(data.cAudioBytesReceived), true);
  // 0x50: u64
  if (data?.cAudioFramesEncoded !== undefined) view.setBigUint64(80, BigInt(data.cAudioFramesEncoded), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_SINK_WRITER_STATISTICS (size: 112)
 */
export interface MF_SINK_WRITER_STATISTICS {
  /** u32 */
  cb: number;
  /** i64 */
  llLastTimestampReceived: Deno.PointerValue;
  /** i64 */
  llLastTimestampEncoded: Deno.PointerValue;
  /** i64 */
  llLastTimestampProcessed: Deno.PointerValue;
  /** i64 */
  llLastStreamTickReceived: Deno.PointerValue;
  /** i64 */
  llLastSinkSampleRequest: Deno.PointerValue;
  /** u64 */
  qwNumSamplesReceived: Deno.PointerValue;
  /** u64 */
  qwNumSamplesEncoded: Deno.PointerValue;
  /** u64 */
  qwNumSamplesProcessed: Deno.PointerValue;
  /** u64 */
  qwNumStreamTicksReceived: Deno.PointerValue;
  /** u32 */
  dwByteCountQueued: number;
  /** u64 */
  qwByteCountProcessed: Deno.PointerValue;
  /** u32 */
  dwNumOutstandingSinkSampleRequests: number;
  /** u32 */
  dwAverageSampleRateReceived: number;
  /** u32 */
  dwAverageSampleRateEncoded: number;
  /** u32 */
  dwAverageSampleRateProcessed: number;
}

export const sizeofMF_SINK_WRITER_STATISTICS = 112;

export function allocMF_SINK_WRITER_STATISTICS(data?: Partial<MF_SINK_WRITER_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_SINK_WRITER_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.llLastTimestampReceived !== undefined) view.setBigInt64(8, BigInt(data.llLastTimestampReceived), true);
  // 0x10: i64
  if (data?.llLastTimestampEncoded !== undefined) view.setBigInt64(16, BigInt(data.llLastTimestampEncoded), true);
  // 0x18: i64
  if (data?.llLastTimestampProcessed !== undefined) view.setBigInt64(24, BigInt(data.llLastTimestampProcessed), true);
  // 0x20: i64
  if (data?.llLastStreamTickReceived !== undefined) view.setBigInt64(32, BigInt(data.llLastStreamTickReceived), true);
  // 0x28: i64
  if (data?.llLastSinkSampleRequest !== undefined) view.setBigInt64(40, BigInt(data.llLastSinkSampleRequest), true);
  // 0x30: u64
  if (data?.qwNumSamplesReceived !== undefined) view.setBigUint64(48, BigInt(data.qwNumSamplesReceived), true);
  // 0x38: u64
  if (data?.qwNumSamplesEncoded !== undefined) view.setBigUint64(56, BigInt(data.qwNumSamplesEncoded), true);
  // 0x40: u64
  if (data?.qwNumSamplesProcessed !== undefined) view.setBigUint64(64, BigInt(data.qwNumSamplesProcessed), true);
  // 0x48: u64
  if (data?.qwNumStreamTicksReceived !== undefined) view.setBigUint64(72, BigInt(data.qwNumStreamTicksReceived), true);
  // 0x50: u32
  if (data?.dwByteCountQueued !== undefined) view.setUint32(80, Number(data.dwByteCountQueued), true);
  // 0x54: pad4
  // 0x58: u64
  if (data?.qwByteCountProcessed !== undefined) view.setBigUint64(88, BigInt(data.qwByteCountProcessed), true);
  // 0x60: u32
  if (data?.dwNumOutstandingSinkSampleRequests !== undefined) view.setUint32(96, Number(data.dwNumOutstandingSinkSampleRequests), true);
  // 0x64: u32
  if (data?.dwAverageSampleRateReceived !== undefined) view.setUint32(100, Number(data.dwAverageSampleRateReceived), true);
  // 0x68: u32
  if (data?.dwAverageSampleRateEncoded !== undefined) view.setUint32(104, Number(data.dwAverageSampleRateEncoded), true);
  // 0x6c: u32
  if (data?.dwAverageSampleRateProcessed !== undefined) view.setUint32(108, Number(data.dwAverageSampleRateProcessed), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER (size: 40)
 */
export interface MFP_EVENT_HEADER {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_TYPE */
  eEventType: MFP_EVENT_TYPE;
  /** Windows.Win32.Foundation.HRESULT */
  hrEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaPlayer */
  pMediaPlayer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFP_MEDIAPLAYER_STATE */
  eState: MFP_MEDIAPLAYER_STATE;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pPropertyStore: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_EVENT_HEADER = 40;

export function allocMFP_EVENT_HEADER(data?: Partial<MFP_EVENT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_EVENT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eEventType !== undefined) view.setInt32(0, Number(data.eEventType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hrEvent !== undefined) view.setBigUint64(8, data.hrEvent === null ? 0n : BigInt(util.toPointer(data.hrEvent)), true);
  // 0x10: pointer
  if (data?.pMediaPlayer !== undefined) view.setBigUint64(16, data.pMediaPlayer === null ? 0n : BigInt(util.toPointer(data.pMediaPlayer)), true);
  // 0x18: i32
  if (data?.eState !== undefined) view.setInt32(24, Number(data.eState), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pPropertyStore !== undefined) view.setBigUint64(32, data.pPropertyStore === null ? 0n : BigInt(util.toPointer(data.pPropertyStore)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_PLAY_EVENT (size: 16)
 */
export interface MFP_PLAY_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_PLAY_EVENT = 16;

export function allocMFP_PLAY_EVENT(data?: Partial<MFP_PLAY_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_PLAY_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(util.toPointer(data.pMediaItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_PAUSE_EVENT (size: 16)
 */
export interface MFP_PAUSE_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_PAUSE_EVENT = 16;

export function allocMFP_PAUSE_EVENT(data?: Partial<MFP_PAUSE_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_PAUSE_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(util.toPointer(data.pMediaItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_STOP_EVENT (size: 16)
 */
export interface MFP_STOP_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_STOP_EVENT = 16;

export function allocMFP_STOP_EVENT(data?: Partial<MFP_STOP_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_STOP_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(util.toPointer(data.pMediaItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_POSITION_SET_EVENT (size: 16)
 */
export interface MFP_POSITION_SET_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_POSITION_SET_EVENT = 16;

export function allocMFP_POSITION_SET_EVENT(data?: Partial<MFP_POSITION_SET_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_POSITION_SET_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(util.toPointer(data.pMediaItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_RATE_SET_EVENT (size: 24)
 */
export interface MFP_RATE_SET_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  flRate: number;
}

export const sizeofMFP_RATE_SET_EVENT = 24;

export function allocMFP_RATE_SET_EVENT(data?: Partial<MFP_RATE_SET_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_RATE_SET_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(util.toPointer(data.pMediaItem)), true);
  // 0x10: f32
  if (data?.flRate !== undefined) view.setFloat32(16, Number(data.flRate), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_MEDIAITEM_CREATED_EVENT (size: 24)
 */
export interface MFP_MEDIAITEM_CREATED_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue | null;
  /** usize */
  dwUserData: Deno.PointerValue;
}

export const sizeofMFP_MEDIAITEM_CREATED_EVENT = 24;

export function allocMFP_MEDIAITEM_CREATED_EVENT(data?: Partial<MFP_MEDIAITEM_CREATED_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_MEDIAITEM_CREATED_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(util.toPointer(data.pMediaItem)), true);
  // 0x10: usize
  if (data?.dwUserData !== undefined) view.setBigUint64(16, BigInt(data.dwUserData), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_MEDIAITEM_SET_EVENT (size: 16)
 */
export interface MFP_MEDIAITEM_SET_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_MEDIAITEM_SET_EVENT = 16;

export function allocMFP_MEDIAITEM_SET_EVENT(data?: Partial<MFP_MEDIAITEM_SET_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_MEDIAITEM_SET_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(util.toPointer(data.pMediaItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_FRAME_STEP_EVENT (size: 16)
 */
export interface MFP_FRAME_STEP_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_FRAME_STEP_EVENT = 16;

export function allocMFP_FRAME_STEP_EVENT(data?: Partial<MFP_FRAME_STEP_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_FRAME_STEP_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(util.toPointer(data.pMediaItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_MEDIAITEM_CLEARED_EVENT (size: 16)
 */
export interface MFP_MEDIAITEM_CLEARED_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_MEDIAITEM_CLEARED_EVENT = 16;

export function allocMFP_MEDIAITEM_CLEARED_EVENT(data?: Partial<MFP_MEDIAITEM_CLEARED_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_MEDIAITEM_CLEARED_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(util.toPointer(data.pMediaItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_MF_EVENT (size: 32)
 */
export interface MFP_MF_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MFEventType: number;
  /** Windows.Win32.Media.MediaFoundation.IMFMediaEvent */
  pMFMediaEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_MF_EVENT = 32;

export function allocMFP_MF_EVENT(data?: Partial<MFP_MF_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_MF_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: u32
  if (data?.MFEventType !== undefined) view.setUint32(8, Number(data.MFEventType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pMFMediaEvent !== undefined) view.setBigUint64(16, data.pMFMediaEvent === null ? 0n : BigInt(util.toPointer(data.pMFMediaEvent)), true);
  // 0x18: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(24, data.pMediaItem === null ? 0n : BigInt(util.toPointer(data.pMediaItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_ERROR_EVENT (size: 8)
 */
export interface MFP_ERROR_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_ERROR_EVENT = 8;

export function allocMFP_ERROR_EVENT(data?: Partial<MFP_ERROR_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_ERROR_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_PLAYBACK_ENDED_EVENT (size: 16)
 */
export interface MFP_PLAYBACK_ENDED_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_PLAYBACK_ENDED_EVENT = 16;

export function allocMFP_PLAYBACK_ENDED_EVENT(data?: Partial<MFP_PLAYBACK_ENDED_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_PLAYBACK_ENDED_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(util.toPointer(data.pMediaItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_ACQUIRE_USER_CREDENTIAL_EVENT (size: 80)
 */
export interface MFP_ACQUIRE_USER_CREDENTIAL_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** usize */
  dwUserData: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fProceedWithAuthentication: boolean;
  /** Windows.Win32.Foundation.HRESULT */
  hrAuthenticationStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszURL: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSite: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszRealm: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPackage: string | null;
  /** i32 */
  nRetries: number;
  /** u32 */
  flags: number;
  /** Windows.Win32.Media.MediaFoundation.IMFNetCredential */
  pCredential: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFP_ACQUIRE_USER_CREDENTIAL_EVENT = 80;

export function allocMFP_ACQUIRE_USER_CREDENTIAL_EVENT(data?: Partial<MFP_ACQUIRE_USER_CREDENTIAL_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_ACQUIRE_USER_CREDENTIAL_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: usize
  if (data?.dwUserData !== undefined) view.setBigUint64(8, BigInt(data.dwUserData), true);
  // 0x10: i32
  if (data?.fProceedWithAuthentication !== undefined) view.setInt32(16, Number(data.fProceedWithAuthentication), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hrAuthenticationStatus !== undefined) view.setBigUint64(24, data.hrAuthenticationStatus === null ? 0n : BigInt(util.toPointer(data.hrAuthenticationStatus)), true);
  // 0x20: buffer
  if (data?.pwszURL !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszURL);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pwszSite !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwszSite);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pwszRealm !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwszRealm);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pwszPackage !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwszPackage);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: i32
  if (data?.nRetries !== undefined) view.setInt32(64, Number(data.nRetries), true);
  // 0x44: u32
  if (data?.flags !== undefined) view.setUint32(68, Number(data.flags), true);
  // 0x48: pointer
  if (data?.pCredential !== undefined) view.setBigUint64(72, data.pCredential === null ? 0n : BigInt(util.toPointer(data.pCredential)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.DEVICE_INFO (size: 40)
 */
export interface DEVICE_INFO {
  /** Windows.Win32.Foundation.BSTR */
  pFriendlyDeviceName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  pUniqueDeviceName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  pManufacturerName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  pModelName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  pIconURL: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVICE_INFO = 40;

export function allocDEVICE_INFO(data?: Partial<DEVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pFriendlyDeviceName !== undefined) view.setBigUint64(0, data.pFriendlyDeviceName === null ? 0n : BigInt(util.toPointer(data.pFriendlyDeviceName)), true);
  // 0x08: pointer
  if (data?.pUniqueDeviceName !== undefined) view.setBigUint64(8, data.pUniqueDeviceName === null ? 0n : BigInt(util.toPointer(data.pUniqueDeviceName)), true);
  // 0x10: pointer
  if (data?.pManufacturerName !== undefined) view.setBigUint64(16, data.pManufacturerName === null ? 0n : BigInt(util.toPointer(data.pManufacturerName)), true);
  // 0x18: pointer
  if (data?.pModelName !== undefined) view.setBigUint64(24, data.pModelName === null ? 0n : BigInt(util.toPointer(data.pModelName)), true);
  // 0x20: pointer
  if (data?.pIconURL !== undefined) view.setBigUint64(32, data.pIconURL === null ? 0n : BigInt(util.toPointer(data.pIconURL)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoAlphaBitmapParams (size: 40)
 */
export interface MFVideoAlphaBitmapParams {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.COLORREF */
  clrSrcKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFVideoNormalizedRect */
  nrcDest: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  fAlpha: number;
  /** u32 */
  dwFilterMode: number;
}

export const sizeofMFVideoAlphaBitmapParams = 40;

export function allocMFVideoAlphaBitmapParams(data?: Partial<MFVideoAlphaBitmapParams>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoAlphaBitmapParams);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clrSrcKey !== undefined) view.setBigUint64(8, data.clrSrcKey === null ? 0n : BigInt(util.toPointer(data.clrSrcKey)), true);
  // 0x10: pointer
  if (data?.rcSrc !== undefined) view.setBigUint64(16, data.rcSrc === null ? 0n : BigInt(util.toPointer(data.rcSrc)), true);
  // 0x18: pointer
  if (data?.nrcDest !== undefined) view.setBigUint64(24, data.nrcDest === null ? 0n : BigInt(util.toPointer(data.nrcDest)), true);
  // 0x20: f32
  if (data?.fAlpha !== undefined) view.setFloat32(32, Number(data.fAlpha), true);
  // 0x24: u32
  if (data?.dwFilterMode !== undefined) view.setUint32(36, Number(data.dwFilterMode), true);
  return buf;
}

/**
 * _bitmap_e__Union (size: 16)
 */
export interface _bitmap_e__Union {
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  pDDS: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_bitmap_e__Union = 16;

export function alloc_bitmap_e__Union(data?: Partial<_bitmap_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_bitmap_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdc !== undefined) view.setBigUint64(0, data.hdc === null ? 0n : BigInt(util.toPointer(data.hdc)), true);
  // 0x08: pointer
  if (data?.pDDS !== undefined) view.setBigUint64(8, data.pDDS === null ? 0n : BigInt(util.toPointer(data.pDDS)), true);
  return buf;
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoAlphaBitmap (size: 24)
 */
export interface MFVideoAlphaBitmap {
  /** Windows.Win32.Foundation.BOOL */
  GetBitmapFromDC: boolean;
  /** _bitmap_e__Union */
  bitmap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.MFVideoAlphaBitmapParams */
  params: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFVideoAlphaBitmap = 24;

export function allocMFVideoAlphaBitmap(data?: Partial<MFVideoAlphaBitmap>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoAlphaBitmap);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.GetBitmapFromDC !== undefined) view.setInt32(0, Number(data.GetBitmapFromDC), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bitmap !== undefined) view.setBigUint64(8, data.bitmap === null ? 0n : BigInt(util.toPointer(data.bitmap)), true);
  // 0x10: pointer
  if (data?.params !== undefined) view.setBigUint64(16, data.params === null ? 0n : BigInt(util.toPointer(data.params)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPSetProtectionLevelCmdData (size: 16)
 */
export interface DXVA_COPPSetProtectionLevelCmdData {
  /** u32 */
  ProtType: number;
  /** u32 */
  ProtLevel: number;
  /** u32 */
  ExtendedInfoChangeMask: number;
  /** u32 */
  ExtendedInfoData: number;
}

export const sizeofDXVA_COPPSetProtectionLevelCmdData = 16;

export function allocDXVA_COPPSetProtectionLevelCmdData(data?: Partial<DXVA_COPPSetProtectionLevelCmdData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPSetProtectionLevelCmdData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProtType !== undefined) view.setUint32(0, Number(data.ProtType), true);
  // 0x04: u32
  if (data?.ProtLevel !== undefined) view.setUint32(4, Number(data.ProtLevel), true);
  // 0x08: u32
  if (data?.ExtendedInfoChangeMask !== undefined) view.setUint32(8, Number(data.ExtendedInfoChangeMask), true);
  // 0x0c: u32
  if (data?.ExtendedInfoData !== undefined) view.setUint32(12, Number(data.ExtendedInfoData), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPSetSignalingCmdData (size: 56)
 */
export interface DXVA_COPPSetSignalingCmdData {
  /** u32 */
  ActiveTVProtectionStandard: number;
  /** u32 */
  AspectRatioChangeMask1: number;
  /** u32 */
  AspectRatioData1: number;
  /** u32 */
  AspectRatioChangeMask2: number;
  /** u32 */
  AspectRatioData2: number;
  /** u32 */
  AspectRatioChangeMask3: number;
  /** u32 */
  AspectRatioData3: number;
  /** array */
  ExtendedInfoChangeMask: Deno.PointerValue | null;
  /** array */
  ExtendedInfoData: Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
}

export const sizeofDXVA_COPPSetSignalingCmdData = 56;

export function allocDXVA_COPPSetSignalingCmdData(data?: Partial<DXVA_COPPSetSignalingCmdData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPSetSignalingCmdData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ActiveTVProtectionStandard !== undefined) view.setUint32(0, Number(data.ActiveTVProtectionStandard), true);
  // 0x04: u32
  if (data?.AspectRatioChangeMask1 !== undefined) view.setUint32(4, Number(data.AspectRatioChangeMask1), true);
  // 0x08: u32
  if (data?.AspectRatioData1 !== undefined) view.setUint32(8, Number(data.AspectRatioData1), true);
  // 0x0c: u32
  if (data?.AspectRatioChangeMask2 !== undefined) view.setUint32(12, Number(data.AspectRatioChangeMask2), true);
  // 0x10: u32
  if (data?.AspectRatioData2 !== undefined) view.setUint32(16, Number(data.AspectRatioData2), true);
  // 0x14: u32
  if (data?.AspectRatioChangeMask3 !== undefined) view.setUint32(20, Number(data.AspectRatioChangeMask3), true);
  // 0x18: u32
  if (data?.AspectRatioData3 !== undefined) view.setUint32(24, Number(data.AspectRatioData3), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ExtendedInfoChangeMask !== undefined) view.setBigUint64(32, data.ExtendedInfoChangeMask === null ? 0n : BigInt(util.toPointer(data.ExtendedInfoChangeMask)), true);
  // 0x28: pointer
  if (data?.ExtendedInfoData !== undefined) view.setBigUint64(40, data.ExtendedInfoData === null ? 0n : BigInt(util.toPointer(data.ExtendedInfoData)), true);
  // 0x30: u32
  if (data?.Reserved !== undefined) view.setUint32(48, Number(data.Reserved), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPStatusData (size: 24)
 */
export interface DXVA_COPPStatusData {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwData: number;
  /** u32 */
  ExtendedInfoValidMask: number;
  /** u32 */
  ExtendedInfoData: number;
}

export const sizeofDXVA_COPPStatusData = 24;

export function allocDXVA_COPPStatusData(data?: Partial<DXVA_COPPStatusData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(util.toPointer(data.rApp)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwData !== undefined) view.setUint32(12, Number(data.dwData), true);
  // 0x10: u32
  if (data?.ExtendedInfoValidMask !== undefined) view.setUint32(16, Number(data.ExtendedInfoValidMask), true);
  // 0x14: u32
  if (data?.ExtendedInfoData !== undefined) view.setUint32(20, Number(data.ExtendedInfoData), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPStatusDisplayData (size: 40)
 */
export interface DXVA_COPPStatusDisplayData {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  DisplayWidth: number;
  /** u32 */
  DisplayHeight: number;
  /** u32 */
  Format: number;
  /** u32 */
  d3dFormat: number;
  /** u32 */
  FreqNumerator: number;
  /** u32 */
  FreqDenominator: number;
}

export const sizeofDXVA_COPPStatusDisplayData = 40;

export function allocDXVA_COPPStatusDisplayData(data?: Partial<DXVA_COPPStatusDisplayData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusDisplayData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(util.toPointer(data.rApp)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.DisplayWidth !== undefined) view.setUint32(12, Number(data.DisplayWidth), true);
  // 0x10: u32
  if (data?.DisplayHeight !== undefined) view.setUint32(16, Number(data.DisplayHeight), true);
  // 0x14: u32
  if (data?.Format !== undefined) view.setUint32(20, Number(data.Format), true);
  // 0x18: u32
  if (data?.d3dFormat !== undefined) view.setUint32(24, Number(data.d3dFormat), true);
  // 0x1c: u32
  if (data?.FreqNumerator !== undefined) view.setUint32(28, Number(data.FreqNumerator), true);
  // 0x20: u32
  if (data?.FreqDenominator !== undefined) view.setUint32(32, Number(data.FreqDenominator), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPStatusHDCPKeyData (size: 40)
 */
export interface DXVA_COPPStatusHDCPKeyData {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwHDCPFlags: number;
  /** System.Guid */
  BKey: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Reserved1: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Reserved2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA_COPPStatusHDCPKeyData = 40;

export function allocDXVA_COPPStatusHDCPKeyData(data?: Partial<DXVA_COPPStatusHDCPKeyData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusHDCPKeyData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(util.toPointer(data.rApp)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwHDCPFlags !== undefined) view.setUint32(12, Number(data.dwHDCPFlags), true);
  // 0x10: pointer
  if (data?.BKey !== undefined) view.setBigUint64(16, data.BKey === null ? 0n : BigInt(util.toPointer(data.BKey)), true);
  // 0x18: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(24, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x20: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(32, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPStatusSignalingCmdData (size: 64)
 */
export interface DXVA_COPPStatusSignalingCmdData {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  AvailableTVProtectionStandards: number;
  /** u32 */
  ActiveTVProtectionStandard: number;
  /** u32 */
  TVType: number;
  /** u32 */
  AspectRatioValidMask1: number;
  /** u32 */
  AspectRatioData1: number;
  /** u32 */
  AspectRatioValidMask2: number;
  /** u32 */
  AspectRatioData2: number;
  /** u32 */
  AspectRatioValidMask3: number;
  /** u32 */
  AspectRatioData3: number;
  /** array */
  ExtendedInfoValidMask: Deno.PointerValue | null;
  /** array */
  ExtendedInfoData: Deno.PointerValue | null;
}

export const sizeofDXVA_COPPStatusSignalingCmdData = 64;

export function allocDXVA_COPPStatusSignalingCmdData(data?: Partial<DXVA_COPPStatusSignalingCmdData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusSignalingCmdData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(util.toPointer(data.rApp)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.AvailableTVProtectionStandards !== undefined) view.setUint32(12, Number(data.AvailableTVProtectionStandards), true);
  // 0x10: u32
  if (data?.ActiveTVProtectionStandard !== undefined) view.setUint32(16, Number(data.ActiveTVProtectionStandard), true);
  // 0x14: u32
  if (data?.TVType !== undefined) view.setUint32(20, Number(data.TVType), true);
  // 0x18: u32
  if (data?.AspectRatioValidMask1 !== undefined) view.setUint32(24, Number(data.AspectRatioValidMask1), true);
  // 0x1c: u32
  if (data?.AspectRatioData1 !== undefined) view.setUint32(28, Number(data.AspectRatioData1), true);
  // 0x20: u32
  if (data?.AspectRatioValidMask2 !== undefined) view.setUint32(32, Number(data.AspectRatioValidMask2), true);
  // 0x24: u32
  if (data?.AspectRatioData2 !== undefined) view.setUint32(36, Number(data.AspectRatioData2), true);
  // 0x28: u32
  if (data?.AspectRatioValidMask3 !== undefined) view.setUint32(40, Number(data.AspectRatioValidMask3), true);
  // 0x2c: u32
  if (data?.AspectRatioData3 !== undefined) view.setUint32(44, Number(data.AspectRatioData3), true);
  // 0x30: pointer
  if (data?.ExtendedInfoValidMask !== undefined) view.setBigUint64(48, data.ExtendedInfoValidMask === null ? 0n : BigInt(util.toPointer(data.ExtendedInfoValidMask)), true);
  // 0x38: pointer
  if (data?.ExtendedInfoData !== undefined) view.setBigUint64(56, data.ExtendedInfoData === null ? 0n : BigInt(util.toPointer(data.ExtendedInfoData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.FaceRectInfoBlobHeader (size: 8)
 */
export interface FaceRectInfoBlobHeader {
  /** u32 */
  Size: number;
  /** u32 */
  Count: number;
}

export const sizeofFaceRectInfoBlobHeader = 8;

export function allocFaceRectInfoBlobHeader(data?: Partial<FaceRectInfoBlobHeader>): Uint8Array {
  const buf = new Uint8Array(sizeofFaceRectInfoBlobHeader);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.FaceRectInfo (size: 16)
 */
export interface FaceRectInfo {
  /** Windows.Win32.Foundation.RECT */
  Region: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  confidenceLevel: number;
}

export const sizeofFaceRectInfo = 16;

export function allocFaceRectInfo(data?: Partial<FaceRectInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofFaceRectInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Region !== undefined) view.setBigUint64(0, data.Region === null ? 0n : BigInt(util.toPointer(data.Region)), true);
  // 0x08: i32
  if (data?.confidenceLevel !== undefined) view.setInt32(8, Number(data.confidenceLevel), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.FaceCharacterizationBlobHeader (size: 8)
 */
export interface FaceCharacterizationBlobHeader {
  /** u32 */
  Size: number;
  /** u32 */
  Count: number;
}

export const sizeofFaceCharacterizationBlobHeader = 8;

export function allocFaceCharacterizationBlobHeader(data?: Partial<FaceCharacterizationBlobHeader>): Uint8Array {
  const buf = new Uint8Array(sizeofFaceCharacterizationBlobHeader);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.FaceCharacterization (size: 16)
 */
export interface FaceCharacterization {
  /** u32 */
  BlinkScoreLeft: number;
  /** u32 */
  BlinkScoreRight: number;
  /** u32 */
  FacialExpression: number;
  /** u32 */
  FacialExpressionScore: number;
}

export const sizeofFaceCharacterization = 16;

export function allocFaceCharacterization(data?: Partial<FaceCharacterization>): Uint8Array {
  const buf = new Uint8Array(sizeofFaceCharacterization);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BlinkScoreLeft !== undefined) view.setUint32(0, Number(data.BlinkScoreLeft), true);
  // 0x04: u32
  if (data?.BlinkScoreRight !== undefined) view.setUint32(4, Number(data.BlinkScoreRight), true);
  // 0x08: u32
  if (data?.FacialExpression !== undefined) view.setUint32(8, Number(data.FacialExpression), true);
  // 0x0c: u32
  if (data?.FacialExpressionScore !== undefined) view.setUint32(12, Number(data.FacialExpressionScore), true);
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.CapturedMetadataExposureCompensation (size: 16)
 */
export interface CapturedMetadataExposureCompensation {
  /** u64 */
  Flags: Deno.PointerValue;
  /** i32 */
  Value: number;
}

export const sizeofCapturedMetadataExposureCompensation = 16;

export function allocCapturedMetadataExposureCompensation(data?: Partial<CapturedMetadataExposureCompensation>): Uint8Array {
  const buf = new Uint8Array(sizeofCapturedMetadataExposureCompensation);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Flags !== undefined) view.setBigUint64(0, BigInt(data.Flags), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.CapturedMetadataISOGains (size: 8)
 */
export interface CapturedMetadataISOGains {
  /** f32 */
  AnalogGain: number;
  /** f32 */
  DigitalGain: number;
}

export const sizeofCapturedMetadataISOGains = 8;

export function allocCapturedMetadataISOGains(data?: Partial<CapturedMetadataISOGains>): Uint8Array {
  const buf = new Uint8Array(sizeofCapturedMetadataISOGains);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.AnalogGain !== undefined) view.setFloat32(0, Number(data.AnalogGain), true);
  // 0x04: f32
  if (data?.DigitalGain !== undefined) view.setFloat32(4, Number(data.DigitalGain), true);
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.CapturedMetadataWhiteBalanceGains (size: 16)
 */
export interface CapturedMetadataWhiteBalanceGains {
  /** f32 */
  R: number;
  /** f32 */
  G: number;
  /** f32 */
  B: number;
}

export const sizeofCapturedMetadataWhiteBalanceGains = 16;

export function allocCapturedMetadataWhiteBalanceGains(data?: Partial<CapturedMetadataWhiteBalanceGains>): Uint8Array {
  const buf = new Uint8Array(sizeofCapturedMetadataWhiteBalanceGains);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.R !== undefined) view.setFloat32(0, Number(data.R), true);
  // 0x04: f32
  if (data?.G !== undefined) view.setFloat32(4, Number(data.G), true);
  // 0x08: f32
  if (data?.B !== undefined) view.setFloat32(8, Number(data.B), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.MetadataTimeStamps (size: 24)
 */
export interface MetadataTimeStamps {
  /** u32 */
  Flags: number;
  /** i64 */
  Device: Deno.PointerValue;
  /** i64 */
  Presentation: Deno.PointerValue;
}

export const sizeofMetadataTimeStamps = 24;

export function allocMetadataTimeStamps(data?: Partial<MetadataTimeStamps>): Uint8Array {
  const buf = new Uint8Array(sizeofMetadataTimeStamps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.Device !== undefined) view.setBigInt64(8, BigInt(data.Device), true);
  // 0x10: i64
  if (data?.Presentation !== undefined) view.setBigInt64(16, BigInt(data.Presentation), true);
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.HistogramGrid (size: 16)
 */
export interface HistogramGrid {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Foundation.RECT */
  Region: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHistogramGrid = 16;

export function allocHistogramGrid(data?: Partial<HistogramGrid>): Uint8Array {
  const buf = new Uint8Array(sizeofHistogramGrid);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: pointer
  if (data?.Region !== undefined) view.setBigUint64(8, data.Region === null ? 0n : BigInt(util.toPointer(data.Region)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.HistogramBlobHeader (size: 8)
 */
export interface HistogramBlobHeader {
  /** u32 */
  Size: number;
  /** u32 */
  Histograms: number;
}

export const sizeofHistogramBlobHeader = 8;

export function allocHistogramBlobHeader(data?: Partial<HistogramBlobHeader>): Uint8Array {
  const buf = new Uint8Array(sizeofHistogramBlobHeader);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Histograms !== undefined) view.setUint32(4, Number(data.Histograms), true);
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.HistogramHeader (size: 24)
 */
export interface HistogramHeader {
  /** u32 */
  Size: number;
  /** u32 */
  Bins: number;
  /** u32 */
  FourCC: number;
  /** u32 */
  ChannelMasks: number;
  /** Windows.Win32.Media.Streaming.HistogramGrid */
  Grid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHistogramHeader = 24;

export function allocHistogramHeader(data?: Partial<HistogramHeader>): Uint8Array {
  const buf = new Uint8Array(sizeofHistogramHeader);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Bins !== undefined) view.setUint32(4, Number(data.Bins), true);
  // 0x08: u32
  if (data?.FourCC !== undefined) view.setUint32(8, Number(data.FourCC), true);
  // 0x0c: u32
  if (data?.ChannelMasks !== undefined) view.setUint32(12, Number(data.ChannelMasks), true);
  // 0x10: pointer
  if (data?.Grid !== undefined) view.setBigUint64(16, data.Grid === null ? 0n : BigInt(util.toPointer(data.Grid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Streaming.HistogramDataHeader (size: 16)
 */
export interface HistogramDataHeader {
  /** u32 */
  Size: number;
  /** u32 */
  ChannelMask: number;
  /** u32 */
  Linear: number;
}

export const sizeofHistogramDataHeader = 16;

export function allocHistogramDataHeader(data?: Partial<HistogramDataHeader>): Uint8Array {
  const buf = new Uint8Array(sizeofHistogramDataHeader);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.ChannelMask !== undefined) view.setUint32(4, Number(data.ChannelMask), true);
  // 0x08: u32
  if (data?.Linear !== undefined) view.setUint32(8, Number(data.Linear), true);
  // 0x0c: pad4
  return buf;
}

// Native Libraries

try {
  var libWINMM_dll = Deno.dlopen("WINMM.dll", {
    timeGetSystemTime: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    timeGetTime: {
      parameters: [],
      result: "u32",
    },
    timeGetDevCaps: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    timeBeginPeriod: {
      parameters: ["u32"],
      result: "u32",
    },
    timeEndPeriod: {
      parameters: ["u32"],
      result: "u32",
    },
    timeSetEvent: {
      parameters: ["u32", "u32", "pointer", "usize", "u32"],
      result: "u32",
    },
    timeKillEvent: {
      parameters: ["u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function timeGetSystemTime(
  pmmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmmt: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.timeGetSystemTime(util.toPointer(pmmt), cbmmt);
}

export function timeGetTime(): number /* u32 */ {
  return libWINMM_dll.timeGetTime();
}

export function timeGetDevCaps(
  ptc: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbtc: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.timeGetDevCaps(util.toPointer(ptc), cbtc);
}

export function timeBeginPeriod(
  uPeriod: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.timeBeginPeriod(uPeriod);
}

export function timeEndPeriod(
  uPeriod: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.timeEndPeriod(uPeriod);
}

export function timeSetEvent(
  uDelay: number /* u32 */,
  uResolution: number /* u32 */,
  fptc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.LPTIMECALLBACK */,
  dwUser: Deno.PointerValue /* usize */,
  fuEvent: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.timeSetEvent(uDelay, uResolution, util.toPointer(fptc), dwUser, fuEvent);
}

export function timeKillEvent(
  uTimerID: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.timeKillEvent(uTimerID);
}

