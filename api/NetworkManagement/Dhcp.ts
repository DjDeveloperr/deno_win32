/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.Dhcp.Apis

import * as util from "../../util.ts";

// Enums
export type StatusCode = number;
export type DHCP_FORCE_FLAG = number;
export type DHCP_SUBNET_STATE = number;
export type DHCP_SUBNET_ELEMENT_TYPE = number;
export type DHCP_FILTER_LIST_TYPE = number;
export type DHCP_OPTION_DATA_TYPE = number;
export type DHCP_OPTION_TYPE = number;
export type DHCP_OPTION_SCOPE_TYPE = number;
export type DHCP_OPTION_SCOPE_TYPE6 = number;
export type QuarantineStatus = number;
export type DHCP_SEARCH_INFO_TYPE = number;
export type DHCP_PROPERTY_TYPE = number;
export type DHCP_PROPERTY_ID = number;
export type DHCP_SCAN_FLAG = number;
export type DHCP_SUBNET_ELEMENT_TYPE_V6 = number;
export type DHCP_SEARCH_INFO_TYPE_V6 = number;
export type DHCP_POL_ATTR_TYPE = number;
export type DHCP_POL_COMPARATOR = number;
export type DHCP_POL_LOGIC_OPER = number;
export type DHCP_POLICY_FIELDS_TO_UPDATE = number;
export type DHCPV6_STATELESS_PARAM_TYPE = number;
export type DHCP_FAILOVER_MODE = number;
export type DHCP_FAILOVER_SERVER = number;
export type FSM_STATE = number;

// Constants
export const OPTION_PAD = 0;
export const OPTION_SUBNET_MASK = 1;
export const OPTION_TIME_OFFSET = 2;
export const OPTION_ROUTER_ADDRESS = 3;
export const OPTION_TIME_SERVERS = 4;
export const OPTION_IEN116_NAME_SERVERS = 5;
export const OPTION_DOMAIN_NAME_SERVERS = 6;
export const OPTION_LOG_SERVERS = 7;
export const OPTION_COOKIE_SERVERS = 8;
export const OPTION_LPR_SERVERS = 9;
export const OPTION_IMPRESS_SERVERS = 10;
export const OPTION_RLP_SERVERS = 11;
export const OPTION_HOST_NAME = 12;
export const OPTION_BOOT_FILE_SIZE = 13;
export const OPTION_MERIT_DUMP_FILE = 14;
export const OPTION_DOMAIN_NAME = 15;
export const OPTION_SWAP_SERVER = 16;
export const OPTION_ROOT_DISK = 17;
export const OPTION_EXTENSIONS_PATH = 18;
export const OPTION_BE_A_ROUTER = 19;
export const OPTION_NON_LOCAL_SOURCE_ROUTING = 20;
export const OPTION_POLICY_FILTER_FOR_NLSR = 21;
export const OPTION_MAX_REASSEMBLY_SIZE = 22;
export const OPTION_DEFAULT_TTL = 23;
export const OPTION_PMTU_AGING_TIMEOUT = 24;
export const OPTION_PMTU_PLATEAU_TABLE = 25;
export const OPTION_MTU = 26;
export const OPTION_ALL_SUBNETS_MTU = 27;
export const OPTION_BROADCAST_ADDRESS = 28;
export const OPTION_PERFORM_MASK_DISCOVERY = 29;
export const OPTION_BE_A_MASK_SUPPLIER = 30;
export const OPTION_PERFORM_ROUTER_DISCOVERY = 31;
export const OPTION_ROUTER_SOLICITATION_ADDR = 32;
export const OPTION_STATIC_ROUTES = 33;
export const OPTION_TRAILERS = 34;
export const OPTION_ARP_CACHE_TIMEOUT = 35;
export const OPTION_ETHERNET_ENCAPSULATION = 36;
export const OPTION_TTL = 37;
export const OPTION_KEEP_ALIVE_INTERVAL = 38;
export const OPTION_KEEP_ALIVE_DATA_SIZE = 39;
export const OPTION_NETWORK_INFO_SERVICE_DOM = 40;
export const OPTION_NETWORK_INFO_SERVERS = 41;
export const OPTION_NETWORK_TIME_SERVERS = 42;
export const OPTION_VENDOR_SPEC_INFO = 43;
export const OPTION_NETBIOS_NAME_SERVER = 44;
export const OPTION_NETBIOS_DATAGRAM_SERVER = 45;
export const OPTION_NETBIOS_NODE_TYPE = 46;
export const OPTION_NETBIOS_SCOPE_OPTION = 47;
export const OPTION_XWINDOW_FONT_SERVER = 48;
export const OPTION_XWINDOW_DISPLAY_MANAGER = 49;
export const OPTION_REQUESTED_ADDRESS = 50;
export const OPTION_LEASE_TIME = 51;
export const OPTION_OK_TO_OVERLAY = 52;
export const OPTION_MESSAGE_TYPE = 53;
export const OPTION_SERVER_IDENTIFIER = 54;
export const OPTION_PARAMETER_REQUEST_LIST = 55;
export const OPTION_MESSAGE = 56;
export const OPTION_MESSAGE_LENGTH = 57;
export const OPTION_RENEWAL_TIME = 58;
export const OPTION_REBIND_TIME = 59;
export const OPTION_CLIENT_CLASS_INFO = 60;
export const OPTION_CLIENT_ID = 61;
export const OPTION_TFTP_SERVER_NAME = 66;
export const OPTION_BOOTFILE_NAME = 67;
export const OPTION_MSFT_IE_PROXY = 252;
export const OPTION_END = 255;
export const DHCPCAPI_REQUEST_PERSISTENT = 1;
export const DHCPCAPI_REQUEST_SYNCHRONOUS = 2;
export const DHCPCAPI_REQUEST_ASYNCHRONOUS = 4;
export const DHCPCAPI_REQUEST_CANCEL = 8;
export const DHCPCAPI_REQUEST_MASK = 15;
export const DHCPCAPI_REGISTER_HANDLE_EVENT = 1;
export const DHCPCAPI_DEREGISTER_HANDLE_EVENT = 1;
export const ERROR_DHCP_REGISTRY_INIT_FAILED = 20000;
export const ERROR_DHCP_DATABASE_INIT_FAILED = 20001;
export const ERROR_DHCP_RPC_INIT_FAILED = 20002;
export const ERROR_DHCP_NETWORK_INIT_FAILED = 20003;
export const ERROR_DHCP_SUBNET_EXITS = 20004;
export const ERROR_DHCP_SUBNET_NOT_PRESENT = 20005;
export const ERROR_DHCP_PRIMARY_NOT_FOUND = 20006;
export const ERROR_DHCP_ELEMENT_CANT_REMOVE = 20007;
export const ERROR_DHCP_OPTION_EXITS = 20009;
export const ERROR_DHCP_OPTION_NOT_PRESENT = 20010;
export const ERROR_DHCP_ADDRESS_NOT_AVAILABLE = 20011;
export const ERROR_DHCP_RANGE_FULL = 20012;
export const ERROR_DHCP_JET_ERROR = 20013;
export const ERROR_DHCP_CLIENT_EXISTS = 20014;
export const ERROR_DHCP_INVALID_DHCP_MESSAGE = 20015;
export const ERROR_DHCP_INVALID_DHCP_CLIENT = 20016;
export const ERROR_DHCP_SERVICE_PAUSED = 20017;
export const ERROR_DHCP_NOT_RESERVED_CLIENT = 20018;
export const ERROR_DHCP_RESERVED_CLIENT = 20019;
export const ERROR_DHCP_RANGE_TOO_SMALL = 20020;
export const ERROR_DHCP_IPRANGE_EXITS = 20021;
export const ERROR_DHCP_RESERVEDIP_EXITS = 20022;
export const ERROR_DHCP_INVALID_RANGE = 20023;
export const ERROR_DHCP_RANGE_EXTENDED = 20024;
export const ERROR_EXTEND_TOO_SMALL = 20025;
export const WARNING_EXTENDED_LESS = 20026;
export const ERROR_DHCP_JET_CONV_REQUIRED = 20027;
export const ERROR_SERVER_INVALID_BOOT_FILE_TABLE = 20028;
export const ERROR_SERVER_UNKNOWN_BOOT_FILE_NAME = 20029;
export const ERROR_DHCP_SUPER_SCOPE_NAME_TOO_LONG = 20030;
export const ERROR_DHCP_IP_ADDRESS_IN_USE = 20032;
export const ERROR_DHCP_LOG_FILE_PATH_TOO_LONG = 20033;
export const ERROR_DHCP_UNSUPPORTED_CLIENT = 20034;
export const ERROR_DHCP_JET97_CONV_REQUIRED = 20036;
export const ERROR_DHCP_ROGUE_INIT_FAILED = 20037;
export const ERROR_DHCP_ROGUE_SAMSHUTDOWN = 20038;
export const ERROR_DHCP_ROGUE_NOT_AUTHORIZED = 20039;
export const ERROR_DHCP_ROGUE_DS_UNREACHABLE = 20040;
export const ERROR_DHCP_ROGUE_DS_CONFLICT = 20041;
export const ERROR_DHCP_ROGUE_NOT_OUR_ENTERPRISE = 20042;
export const ERROR_DHCP_ROGUE_STANDALONE_IN_DS = 20043;
export const ERROR_DHCP_CLASS_NOT_FOUND = 20044;
export const ERROR_DHCP_CLASS_ALREADY_EXISTS = 20045;
export const ERROR_DHCP_SCOPE_NAME_TOO_LONG = 20046;
export const ERROR_DHCP_DEFAULT_SCOPE_EXITS = 20047;
export const ERROR_DHCP_CANT_CHANGE_ATTRIBUTE = 20048;
export const ERROR_DHCP_IPRANGE_CONV_ILLEGAL = 20049;
export const ERROR_DHCP_NETWORK_CHANGED = 20050;
export const ERROR_DHCP_CANNOT_MODIFY_BINDINGS = 20051;
export const ERROR_DHCP_SUBNET_EXISTS = 20052;
export const ERROR_DHCP_MSCOPE_EXISTS = 20053;
export const ERROR_MSCOPE_RANGE_TOO_SMALL = 20054;
export const ERROR_DHCP_EXEMPTION_EXISTS = 20055;
export const ERROR_DHCP_EXEMPTION_NOT_PRESENT = 20056;
export const ERROR_DHCP_INVALID_PARAMETER_OPTION32 = 20057;
export const ERROR_DDS_NO_DS_AVAILABLE = 20070;
export const ERROR_DDS_NO_DHCP_ROOT = 20071;
export const ERROR_DDS_UNEXPECTED_ERROR = 20072;
export const ERROR_DDS_TOO_MANY_ERRORS = 20073;
export const ERROR_DDS_DHCP_SERVER_NOT_FOUND = 20074;
export const ERROR_DDS_OPTION_ALREADY_EXISTS = 20075;
export const ERROR_DDS_OPTION_DOES_NOT_EXIST = 20076;
export const ERROR_DDS_CLASS_EXISTS = 20077;
export const ERROR_DDS_CLASS_DOES_NOT_EXIST = 20078;
export const ERROR_DDS_SERVER_ALREADY_EXISTS = 20079;
export const ERROR_DDS_SERVER_DOES_NOT_EXIST = 20080;
export const ERROR_DDS_SERVER_ADDRESS_MISMATCH = 20081;
export const ERROR_DDS_SUBNET_EXISTS = 20082;
export const ERROR_DDS_SUBNET_HAS_DIFF_SSCOPE = 20083;
export const ERROR_DDS_SUBNET_NOT_PRESENT = 20084;
export const ERROR_DDS_RESERVATION_NOT_PRESENT = 20085;
export const ERROR_DDS_RESERVATION_CONFLICT = 20086;
export const ERROR_DDS_POSSIBLE_RANGE_CONFLICT = 20087;
export const ERROR_DDS_RANGE_DOES_NOT_EXIST = 20088;
export const ERROR_DHCP_DELETE_BUILTIN_CLASS = 20089;
export const ERROR_DHCP_INVALID_SUBNET_PREFIX = 20091;
export const ERROR_DHCP_INVALID_DELAY = 20092;
export const ERROR_DHCP_LINKLAYER_ADDRESS_EXISTS = 20093;
export const ERROR_DHCP_LINKLAYER_ADDRESS_RESERVATION_EXISTS = 20094;
export const ERROR_DHCP_LINKLAYER_ADDRESS_DOES_NOT_EXIST = 20095;
export const ERROR_DHCP_HARDWARE_ADDRESS_TYPE_ALREADY_EXEMPT = 20101;
export const ERROR_DHCP_UNDEFINED_HARDWARE_ADDRESS_TYPE = 20102;
export const ERROR_DHCP_OPTION_TYPE_MISMATCH = 20103;
export const ERROR_DHCP_POLICY_BAD_PARENT_EXPR = 20104;
export const ERROR_DHCP_POLICY_EXISTS = 20105;
export const ERROR_DHCP_POLICY_RANGE_EXISTS = 20106;
export const ERROR_DHCP_POLICY_RANGE_BAD = 20107;
export const ERROR_DHCP_RANGE_INVALID_IN_SERVER_POLICY = 20108;
export const ERROR_DHCP_INVALID_POLICY_EXPRESSION = 20109;
export const ERROR_DHCP_INVALID_PROCESSING_ORDER = 20110;
export const ERROR_DHCP_POLICY_NOT_FOUND = 20111;
export const ERROR_SCOPE_RANGE_POLICY_RANGE_CONFLICT = 20112;
export const ERROR_DHCP_FO_SCOPE_ALREADY_IN_RELATIONSHIP = 20113;
export const ERROR_DHCP_FO_RELATIONSHIP_EXISTS = 20114;
export const ERROR_DHCP_FO_RELATIONSHIP_DOES_NOT_EXIST = 20115;
export const ERROR_DHCP_FO_SCOPE_NOT_IN_RELATIONSHIP = 20116;
export const ERROR_DHCP_FO_RELATION_IS_SECONDARY = 20117;
export const ERROR_DHCP_FO_NOT_SUPPORTED = 20118;
export const ERROR_DHCP_FO_TIME_OUT_OF_SYNC = 20119;
export const ERROR_DHCP_FO_STATE_NOT_NORMAL = 20120;
export const ERROR_DHCP_NO_ADMIN_PERMISSION = 20121;
export const ERROR_DHCP_SERVER_NOT_REACHABLE = 20122;
export const ERROR_DHCP_SERVER_NOT_RUNNING = 20123;
export const ERROR_DHCP_SERVER_NAME_NOT_RESOLVED = 20124;
export const ERROR_DHCP_FO_RELATIONSHIP_NAME_TOO_LONG = 20125;
export const ERROR_DHCP_REACHED_END_OF_SELECTION = 20126;
export const ERROR_DHCP_FO_ADDSCOPE_LEASES_NOT_SYNCED = 20127;
export const ERROR_DHCP_FO_MAX_RELATIONSHIPS = 20128;
export const ERROR_DHCP_FO_IPRANGE_TYPE_CONV_ILLEGAL = 20129;
export const ERROR_DHCP_FO_MAX_ADD_SCOPES = 20130;
export const ERROR_DHCP_FO_BOOT_NOT_SUPPORTED = 20131;
export const ERROR_DHCP_FO_RANGE_PART_OF_REL = 20132;
export const ERROR_DHCP_FO_SCOPE_SYNC_IN_PROGRESS = 20133;
export const ERROR_DHCP_FO_FEATURE_NOT_SUPPORTED = 20134;
export const ERROR_DHCP_POLICY_FQDN_RANGE_UNSUPPORTED = 20135;
export const ERROR_DHCP_POLICY_FQDN_OPTION_UNSUPPORTED = 20136;
export const ERROR_DHCP_POLICY_EDIT_FQDN_UNSUPPORTED = 20137;
export const ERROR_DHCP_NAP_NOT_SUPPORTED = 20138;
export const ERROR_LAST_DHCP_SERVER_ERROR = 20139;
export const DHCP_SUBNET_INFO_VQ_FLAG_QUARANTINE = 1;
export const MAX_PATTERN_LENGTH = 255;
export const MAC_ADDRESS_LENGTH = 6;
export const HWTYPE_ETHERNET_10MB = 1;
export const FILTER_STATUS_NONE = 1;
export const FILTER_STATUS_FULL_MATCH_IN_ALLOW_LIST = 2;
export const FILTER_STATUS_FULL_MATCH_IN_DENY_LIST = 4;
export const FILTER_STATUS_WILDCARD_MATCH_IN_ALLOW_LIST = 8;
export const FILTER_STATUS_WILDCARD_MATCH_IN_DENY_LIST = 16;
export const Set_APIProtocolSupport = 1;
export const Set_DatabaseName = 2;
export const Set_DatabasePath = 4;
export const Set_BackupPath = 8;
export const Set_BackupInterval = 16;
export const Set_DatabaseLoggingFlag = 32;
export const Set_RestoreFlag = 64;
export const Set_DatabaseCleanupInterval = 128;
export const Set_DebugFlag = 256;
export const Set_PingRetries = 512;
export const Set_BootFileTable = 1024;
export const Set_AuditLogState = 2048;
export const Set_QuarantineON = 4096;
export const Set_QuarantineDefFail = 8192;
export const CLIENT_TYPE_UNSPECIFIED = 0;
export const CLIENT_TYPE_DHCP = 1;
export const CLIENT_TYPE_BOOTP = 2;
export const CLIENT_TYPE_RESERVATION_FLAG = 4;
export const CLIENT_TYPE_NONE = 100;
export const Set_UnicastFlag = 1;
export const Set_RapidCommitFlag = 2;
export const Set_PreferredLifetime = 4;
export const Set_ValidLifetime = 8;
export const Set_T1 = 16;
export const Set_T2 = 32;
export const Set_PreferredLifetimeIATA = 64;
export const Set_ValidLifetimeIATA = 128;
export const V5_ADDRESS_STATE_OFFERED = 0;
export const V5_ADDRESS_STATE_ACTIVE = 1;
export const V5_ADDRESS_STATE_DECLINED = 2;
export const V5_ADDRESS_STATE_DOOM = 3;
export const V5_ADDRESS_BIT_DELETED = 128;
export const V5_ADDRESS_BIT_UNREGISTERED = 64;
export const V5_ADDRESS_BIT_BOTH_REC = 32;
export const V5_ADDRESS_EX_BIT_DISABLE_PTR_RR = 1;
export const DNS_FLAG_ENABLED = 1;
export const DNS_FLAG_UPDATE_DOWNLEVEL = 2;
export const DNS_FLAG_CLEANUP_EXPIRED = 4;
export const DNS_FLAG_UPDATE_BOTH_ALWAYS = 16;
export const DNS_FLAG_UPDATE_DHCID = 32;
export const DNS_FLAG_DISABLE_PTR_UPDATE = 64;
export const DNS_FLAG_HAS_DNS_SUFFIX = 128;
export const DHCP_OPT_ENUM_IGNORE_VENDOR = 1;
export const DHCP_OPT_ENUM_USE_CLASSNAME = 2;
export const DHCP_FLAGS_DONT_ACCESS_DS = 1;
export const DHCP_FLAGS_DONT_DO_RPC = 2;
export const DHCP_FLAGS_OPTION_IS_VENDOR = 3;
export const DHCP_ATTRIB_BOOL_IS_ROGUE = 1;
export const DHCP_ATTRIB_BOOL_IS_DYNBOOTP = 2;
export const DHCP_ATTRIB_BOOL_IS_PART_OF_DSDC = 3;
export const DHCP_ATTRIB_BOOL_IS_BINDING_AWARE = 4;
export const DHCP_ATTRIB_BOOL_IS_ADMIN = 5;
export const DHCP_ATTRIB_ULONG_RESTORE_STATUS = 6;
export const DHCP_ATTRIB_TYPE_BOOL = 1;
export const DHCP_ATTRIB_TYPE_ULONG = 2;
export const DHCP_ENDPOINT_FLAG_CANT_MODIFY = 1;
export const QUARANTIN_OPTION_BASE = 43220;
export const QUARANTINE_SCOPE_QUARPROFILE_OPTION = 43221;
export const QUARANTINE_CONFIG_OPTION = 43222;
export const ADDRESS_TYPE_IANA = 0;
export const ADDRESS_TYPE_IATA = 1;
export const DHCP_MIN_DELAY = 0;
export const DHCP_MAX_DELAY = 1000;
export const DHCP_FAILOVER_DELETE_SCOPES = 1;
export const DHCP_FAILOVER_MAX_NUM_ADD_SCOPES = 400;
export const DHCP_FAILOVER_MAX_NUM_REL = 31;
export const MCLT = 1;
export const SAFEPERIOD = 2;
export const CHANGESTATE = 4;
export const PERCENTAGE = 8;
export const MODE = 16;
export const PREVSTATE = 32;
export const SHAREDSECRET = 64;
export const DHCP_CALLOUT_LIST_KEY = `System\\CurrentControlSet\\Services\\DHCPServer\\Parameters`;
export const DHCP_CALLOUT_LIST_VALUE = `CalloutDlls`;
export const DHCP_CALLOUT_ENTRY_POINT = `DhcpServerCalloutEntry`;
export const DHCP_CONTROL_START = 1;
export const DHCP_CONTROL_STOP = 2;
export const DHCP_CONTROL_PAUSE = 3;
export const DHCP_CONTROL_CONTINUE = 4;
export const DHCP_DROP_DUPLICATE = 1;
export const DHCP_DROP_NOMEM = 2;
export const DHCP_DROP_INTERNAL_ERROR = 3;
export const DHCP_DROP_TIMEOUT = 4;
export const DHCP_DROP_UNAUTH = 5;
export const DHCP_DROP_PAUSED = 6;
export const DHCP_DROP_NO_SUBNETS = 7;
export const DHCP_DROP_INVALID = 8;
export const DHCP_DROP_WRONG_SERVER = 9;
export const DHCP_DROP_NOADDRESS = 10;
export const DHCP_DROP_PROCESSED = 11;
export const DHCP_DROP_GEN_FAILURE = 256;
export const DHCP_SEND_PACKET = 268435456;
export const DHCP_PROB_CONFLICT = 536870913;
export const DHCP_PROB_DECLINE = 536870914;
export const DHCP_PROB_RELEASE = 536870915;
export const DHCP_PROB_NACKED = 536870916;
export const DHCP_GIVE_ADDRESS_NEW = 805306369;
export const DHCP_GIVE_ADDRESS_OLD = 805306370;
export const DHCP_CLIENT_BOOTP = 805306371;
export const DHCP_CLIENT_DHCP = 805306372;
export const DHCPV6_OPTION_CLIENTID = 1;
export const DHCPV6_OPTION_SERVERID = 2;
export const DHCPV6_OPTION_IA_NA = 3;
export const DHCPV6_OPTION_IA_TA = 4;
export const DHCPV6_OPTION_ORO = 6;
export const DHCPV6_OPTION_PREFERENCE = 7;
export const DHCPV6_OPTION_UNICAST = 12;
export const DHCPV6_OPTION_RAPID_COMMIT = 14;
export const DHCPV6_OPTION_USER_CLASS = 15;
export const DHCPV6_OPTION_VENDOR_CLASS = 16;
export const DHCPV6_OPTION_VENDOR_OPTS = 17;
export const DHCPV6_OPTION_RECONF_MSG = 19;
export const DHCPV6_OPTION_SIP_SERVERS_NAMES = 21;
export const DHCPV6_OPTION_SIP_SERVERS_ADDRS = 22;
export const DHCPV6_OPTION_DNS_SERVERS = 23;
export const DHCPV6_OPTION_DOMAIN_LIST = 24;
export const DHCPV6_OPTION_IA_PD = 25;
export const DHCPV6_OPTION_NIS_SERVERS = 27;
export const DHCPV6_OPTION_NISP_SERVERS = 28;
export const DHCPV6_OPTION_NIS_DOMAIN_NAME = 29;
export const DHCPV6_OPTION_NISP_DOMAIN_NAME = 30;
export const STATUS_NO_ERROR = 0;
export const STATUS_UNSPECIFIED_FAILURE = 1;
export const STATUS_NO_BINDING = 3;
export const STATUS_NOPREFIX_AVAIL = 6;
export const DhcpFullForce = 0;
export const DhcpNoForce = 1;
export const DhcpFailoverForce = 2;
export const DhcpSubnetEnabled = 0;
export const DhcpSubnetDisabled = 1;
export const DhcpSubnetEnabledSwitched = 2;
export const DhcpSubnetDisabledSwitched = 3;
export const DhcpSubnetInvalidState = 4;
export const DhcpIpRanges = 0;
export const DhcpSecondaryHosts = 1;
export const DhcpReservedIps = 2;
export const DhcpExcludedIpRanges = 3;
export const DhcpIpUsedClusters = 4;
export const DhcpIpRangesDhcpOnly = 5;
export const DhcpIpRangesDhcpBootp = 6;
export const DhcpIpRangesBootpOnly = 7;
export const Deny = 0;
export const Allow = 1;
export const DhcpByteOption = 0;
export const DhcpWordOption = 1;
export const DhcpDWordOption = 2;
export const DhcpDWordDWordOption = 3;
export const DhcpIpAddressOption = 4;
export const DhcpStringDataOption = 5;
export const DhcpBinaryDataOption = 6;
export const DhcpEncapsulatedDataOption = 7;
export const DhcpIpv6AddressOption = 8;
export const DhcpUnaryElementTypeOption = 0;
export const DhcpArrayTypeOption = 1;
export const DhcpDefaultOptions = 0;
export const DhcpGlobalOptions = 1;
export const DhcpSubnetOptions = 2;
export const DhcpReservedOptions = 3;
export const DhcpMScopeOptions = 4;
export const DhcpDefaultOptions6 = 0;
export const DhcpScopeOptions6 = 1;
export const DhcpReservedOptions6 = 2;
export const DhcpGlobalOptions6 = 3;
export const NOQUARANTINE = 0;
export const RESTRICTEDACCESS = 1;
export const DROPPACKET = 2;
export const PROBATION = 3;
export const EXEMPT = 4;
export const DEFAULTQUARSETTING = 5;
export const NOQUARINFO = 6;
export const DhcpClientIpAddress = 0;
export const DhcpClientHardwareAddress = 1;
export const DhcpClientName = 2;
export const DhcpPropTypeByte = 0;
export const DhcpPropTypeWord = 1;
export const DhcpPropTypeDword = 2;
export const DhcpPropTypeString = 3;
export const DhcpPropTypeBinary = 4;
export const DhcpPropIdPolicyDnsSuffix = 0;
export const DhcpPropIdClientAddressStateEx = 1;
export const DhcpRegistryFix = 0;
export const DhcpDatabaseFix = 1;
export const Dhcpv6IpRanges = 0;
export const Dhcpv6ReservedIps = 1;
export const Dhcpv6ExcludedIpRanges = 2;
export const Dhcpv6ClientIpAddress = 0;
export const Dhcpv6ClientDUID = 1;
export const Dhcpv6ClientName = 2;
export const DhcpAttrHWAddr = 0;
export const DhcpAttrOption = 1;
export const DhcpAttrSubOption = 2;
export const DhcpAttrFqdn = 3;
export const DhcpAttrFqdnSingleLabel = 4;
export const DhcpCompEqual = 0;
export const DhcpCompNotEqual = 1;
export const DhcpCompBeginsWith = 2;
export const DhcpCompNotBeginWith = 3;
export const DhcpCompEndsWith = 4;
export const DhcpCompNotEndWith = 5;
export const DhcpLogicalOr = 0;
export const DhcpLogicalAnd = 1;
export const DhcpUpdatePolicyName = 1;
export const DhcpUpdatePolicyOrder = 2;
export const DhcpUpdatePolicyExpr = 4;
export const DhcpUpdatePolicyRanges = 8;
export const DhcpUpdatePolicyDescr = 16;
export const DhcpUpdatePolicyStatus = 32;
export const DhcpUpdatePolicyDnsSuffix = 64;
export const DhcpStatelessPurgeInterval = 1;
export const DhcpStatelessStatus = 2;
export const LoadBalance = 0;
export const HotStandby = 1;
export const PrimaryServer = 0;
export const SecondaryServer = 1;
export const NO_STATE = 0;
export const INIT = 1;
export const STARTUP = 2;
export const NORMAL = 3;
export const COMMUNICATION_INT = 4;
export const PARTNER_DOWN = 5;
export const POTENTIAL_CONFLICT = 6;
export const CONFLICT_DONE = 7;
export const RESOLUTION_INT = 8;
export const RECOVER = 9;
export const RECOVER_WAIT = 10;
export const RECOVER_DONE = 11;
export const PAUSED = 12;
export const SHUTDOWN = 13;

// Structs

export type BOOL = number;

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV6CAPI_PARAMS (size: 32)
 */
export interface DHCPV6CAPI_PARAMS {
  /** u32 */
  Flags: number;
  /** u32 */
  OptionId: number;
  /** Windows.Win32.Foundation.BOOL */
  IsVendor: boolean;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
  /** u32 */
  nBytesData: number;
}

export const sizeofDHCPV6CAPI_PARAMS = 32;

export function allocDHCPV6CAPI_PARAMS(data?: Partial<DHCPV6CAPI_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV6CAPI_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.OptionId !== undefined) view.setUint32(4, Number(data.OptionId), true);
  // 0x08: i32
  if (data?.IsVendor !== undefined) view.setInt32(8, Number(data.IsVendor), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  // 0x18: u32
  if (data?.nBytesData !== undefined) view.setUint32(24, Number(data.nBytesData), true);
  // 0x1c: pad4
  return buf;
}

export class DHCPV6CAPI_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OptionId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get IsVendor(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get nBytesData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OptionId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set IsVendor(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set nBytesData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV6CAPI_PARAMS_ARRAY (size: 16)
 */
export interface DHCPV6CAPI_PARAMS_ARRAY {
  /** u32 */
  nParams: number;
  /** ptr */
  Params: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCPV6CAPI_PARAMS_ARRAY = 16;

export function allocDHCPV6CAPI_PARAMS_ARRAY(data?: Partial<DHCPV6CAPI_PARAMS_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV6CAPI_PARAMS_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nParams !== undefined) view.setUint32(0, Number(data.nParams), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Params !== undefined) view.setBigUint64(8, data.Params === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Params))), true);
  return buf;
}

export class DHCPV6CAPI_PARAMS_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nParams(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Params(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set nParams(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Params(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV6CAPI_CLASSID (size: 24)
 */
export interface DHCPV6CAPI_CLASSID {
  /** u32 */
  Flags: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
  /** u32 */
  nBytesData: number;
}

export const sizeofDHCPV6CAPI_CLASSID = 24;

export function allocDHCPV6CAPI_CLASSID(data?: Partial<DHCPV6CAPI_CLASSID>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV6CAPI_CLASSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  // 0x10: u32
  if (data?.nBytesData !== undefined) view.setUint32(16, Number(data.nBytesData), true);
  // 0x14: pad4
  return buf;
}

export class DHCPV6CAPI_CLASSIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get nBytesData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set nBytesData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV6Prefix (size: 24)
 */
export interface DHCPV6Prefix {
  /** array */
  prefix: Deno.PointerValue;
  /** u32 */
  prefixLength: number;
  /** u32 */
  preferredLifeTime: number;
  /** u32 */
  validLifeTime: number;
  /** Windows.Win32.NetworkManagement.Dhcp.StatusCode */
  status: StatusCode;
}

export const sizeofDHCPV6Prefix = 24;

export function allocDHCPV6Prefix(data?: Partial<DHCPV6Prefix>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV6Prefix);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.prefix !== undefined) view.setBigUint64(0, data.prefix === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prefix))), true);
  // 0x08: u32
  if (data?.prefixLength !== undefined) view.setUint32(8, Number(data.prefixLength), true);
  // 0x0c: u32
  if (data?.preferredLifeTime !== undefined) view.setUint32(12, Number(data.preferredLifeTime), true);
  // 0x10: u32
  if (data?.validLifeTime !== undefined) view.setUint32(16, Number(data.validLifeTime), true);
  // 0x14: i32
  if (data?.status !== undefined) view.setInt32(20, Number(data.status), true);
  return buf;
}

export class DHCPV6PrefixView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get prefix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get prefixLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get preferredLifeTime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get validLifeTime(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get status(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: pointer
  set prefix(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set prefixLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set preferredLifeTime(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set validLifeTime(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set status(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV6PrefixLeaseInformation (size: 80)
 */
export interface DHCPV6PrefixLeaseInformation {
  /** u32 */
  nPrefixes: number;
  /** ptr */
  prefixArray: Deno.PointerValue | Uint8Array;
  /** u32 */
  iaid: number;
  /** i64 */
  T1: bigint | number;
  /** i64 */
  T2: bigint | number;
  /** i64 */
  MaxLeaseExpirationTime: bigint | number;
  /** i64 */
  LastRenewalTime: bigint | number;
  /** Windows.Win32.NetworkManagement.Dhcp.StatusCode */
  status: StatusCode;
  /** ptr */
  ServerId: Deno.PointerValue | Uint8Array;
  /** u32 */
  ServerIdLen: number;
}

export const sizeofDHCPV6PrefixLeaseInformation = 80;

export function allocDHCPV6PrefixLeaseInformation(data?: Partial<DHCPV6PrefixLeaseInformation>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV6PrefixLeaseInformation);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nPrefixes !== undefined) view.setUint32(0, Number(data.nPrefixes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.prefixArray !== undefined) view.setBigUint64(8, data.prefixArray === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prefixArray))), true);
  // 0x10: u32
  if (data?.iaid !== undefined) view.setUint32(16, Number(data.iaid), true);
  // 0x14: pad4
  // 0x18: i64
  if (data?.T1 !== undefined) view.setBigInt64(24, BigInt(data.T1), true);
  // 0x20: i64
  if (data?.T2 !== undefined) view.setBigInt64(32, BigInt(data.T2), true);
  // 0x28: i64
  if (data?.MaxLeaseExpirationTime !== undefined) view.setBigInt64(40, BigInt(data.MaxLeaseExpirationTime), true);
  // 0x30: i64
  if (data?.LastRenewalTime !== undefined) view.setBigInt64(48, BigInt(data.LastRenewalTime), true);
  // 0x38: i32
  if (data?.status !== undefined) view.setInt32(56, Number(data.status), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.ServerId !== undefined) view.setBigUint64(64, data.ServerId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerId))), true);
  // 0x48: u32
  if (data?.ServerIdLen !== undefined) view.setUint32(72, Number(data.ServerIdLen), true);
  // 0x4c: pad4
  return buf;
}

export class DHCPV6PrefixLeaseInformationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nPrefixes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get prefixArray(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get iaid(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: i64
  get T1(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: i64
  get T2(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: i64
  get MaxLeaseExpirationTime(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: i64
  get LastRenewalTime(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: i32
  get status(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get ServerId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get ServerIdLen(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u32
  set nPrefixes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set prefixArray(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set iaid(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: i64
  set T1(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: i64
  set T2(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: i64
  set MaxLeaseExpirationTime(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: i64
  set LastRenewalTime(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: i32
  set status(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set ServerId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set ServerIdLen(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPAPI_PARAMS (size: 32)
 */
export interface DHCPAPI_PARAMS {
  /** u32 */
  Flags: number;
  /** u32 */
  OptionId: number;
  /** Windows.Win32.Foundation.BOOL */
  IsVendor: boolean;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
  /** u32 */
  nBytesData: number;
}

export const sizeofDHCPAPI_PARAMS = 32;

export function allocDHCPAPI_PARAMS(data?: Partial<DHCPAPI_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPAPI_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.OptionId !== undefined) view.setUint32(4, Number(data.OptionId), true);
  // 0x08: i32
  if (data?.IsVendor !== undefined) view.setInt32(8, Number(data.IsVendor), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  // 0x18: u32
  if (data?.nBytesData !== undefined) view.setUint32(24, Number(data.nBytesData), true);
  // 0x1c: pad4
  return buf;
}

export class DHCPAPI_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OptionId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get IsVendor(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get nBytesData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OptionId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set IsVendor(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set nBytesData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPCAPI_PARAMS_ARRAY (size: 16)
 */
export interface DHCPCAPI_PARAMS_ARRAY {
  /** u32 */
  nParams: number;
  /** ptr */
  Params: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCPCAPI_PARAMS_ARRAY = 16;

export function allocDHCPCAPI_PARAMS_ARRAY(data?: Partial<DHCPCAPI_PARAMS_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPCAPI_PARAMS_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nParams !== undefined) view.setUint32(0, Number(data.nParams), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Params !== undefined) view.setBigUint64(8, data.Params === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Params))), true);
  return buf;
}

export class DHCPCAPI_PARAMS_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nParams(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Params(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set nParams(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Params(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPCAPI_CLASSID (size: 24)
 */
export interface DHCPCAPI_CLASSID {
  /** u32 */
  Flags: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
  /** u32 */
  nBytesData: number;
}

export const sizeofDHCPCAPI_CLASSID = 24;

export function allocDHCPCAPI_CLASSID(data?: Partial<DHCPCAPI_CLASSID>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPCAPI_CLASSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  // 0x10: u32
  if (data?.nBytesData !== undefined) view.setUint32(16, Number(data.nBytesData), true);
  // 0x14: pad4
  return buf;
}

export class DHCPCAPI_CLASSIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get nBytesData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set nBytesData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array;

export type BOOLEAN = number;

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SERVER_OPTIONS (size: 176)
 */
export interface DHCP_SERVER_OPTIONS {
  /** ptr */
  MessageType: Deno.PointerValue | Uint8Array;
  /** ptr */
  SubnetMask: Deno.PointerValue | Uint8Array;
  /** ptr */
  RequestedAddress: Deno.PointerValue | Uint8Array;
  /** ptr */
  RequestLeaseTime: Deno.PointerValue | Uint8Array;
  /** ptr */
  OverlayFields: Deno.PointerValue | Uint8Array;
  /** ptr */
  RouterAddress: Deno.PointerValue | Uint8Array;
  /** ptr */
  Server: Deno.PointerValue | Uint8Array;
  /** ptr */
  ParameterRequestList: Deno.PointerValue | Uint8Array;
  /** u32 */
  ParameterRequestListLength: number;
  /** Windows.Win32.Foundation.PSTR */
  MachineName: string | null | Uint8Array;
  /** u32 */
  MachineNameLength: number;
  /** u8 */
  ClientHardwareAddressType: number;
  /** u8 */
  ClientHardwareAddressLength: number;
  /** ptr */
  ClientHardwareAddress: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ClassIdentifier: string | null | Uint8Array;
  /** u32 */
  ClassIdentifierLength: number;
  /** ptr */
  VendorClass: Deno.PointerValue | Uint8Array;
  /** u32 */
  VendorClassLength: number;
  /** u32 */
  DNSFlags: number;
  /** u32 */
  DNSNameLength: number;
  /** ptr */
  DNSName: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOLEAN */
  DSDomainNameRequested: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  DSDomainName: string | null | Uint8Array;
  /** u32 */
  DSDomainNameLen: number;
  /** ptr */
  ScopeId: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_SERVER_OPTIONS = 176;

export function allocDHCP_SERVER_OPTIONS(data?: Partial<DHCP_SERVER_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SERVER_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MessageType !== undefined) view.setBigUint64(0, data.MessageType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MessageType))), true);
  // 0x08: pointer
  if (data?.SubnetMask !== undefined) view.setBigUint64(8, data.SubnetMask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SubnetMask))), true);
  // 0x10: pointer
  if (data?.RequestedAddress !== undefined) view.setBigUint64(16, data.RequestedAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestedAddress))), true);
  // 0x18: pointer
  if (data?.RequestLeaseTime !== undefined) view.setBigUint64(24, data.RequestLeaseTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestLeaseTime))), true);
  // 0x20: pointer
  if (data?.OverlayFields !== undefined) view.setBigUint64(32, data.OverlayFields === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OverlayFields))), true);
  // 0x28: pointer
  if (data?.RouterAddress !== undefined) view.setBigUint64(40, data.RouterAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RouterAddress))), true);
  // 0x30: pointer
  if (data?.Server !== undefined) view.setBigUint64(48, data.Server === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Server))), true);
  // 0x38: pointer
  if (data?.ParameterRequestList !== undefined) view.setBigUint64(56, data.ParameterRequestList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ParameterRequestList))), true);
  // 0x40: u32
  if (data?.ParameterRequestListLength !== undefined) view.setUint32(64, Number(data.ParameterRequestListLength), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.MachineName !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.MachineName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: u32
  if (data?.MachineNameLength !== undefined) view.setUint32(80, Number(data.MachineNameLength), true);
  // 0x54: u8
  if (data?.ClientHardwareAddressType !== undefined) view.setUint8(84, Number(data.ClientHardwareAddressType));
  // 0x55: u8
  if (data?.ClientHardwareAddressLength !== undefined) view.setUint8(85, Number(data.ClientHardwareAddressLength));
  // 0x56: pad2
  // 0x58: pointer
  if (data?.ClientHardwareAddress !== undefined) view.setBigUint64(88, data.ClientHardwareAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientHardwareAddress))), true);
  // 0x60: buffer
  if (data?.ClassIdentifier !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.ClassIdentifier);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: u32
  if (data?.ClassIdentifierLength !== undefined) view.setUint32(104, Number(data.ClassIdentifierLength), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.VendorClass !== undefined) view.setBigUint64(112, data.VendorClass === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VendorClass))), true);
  // 0x78: u32
  if (data?.VendorClassLength !== undefined) view.setUint32(120, Number(data.VendorClassLength), true);
  // 0x7c: u32
  if (data?.DNSFlags !== undefined) view.setUint32(124, Number(data.DNSFlags), true);
  // 0x80: u32
  if (data?.DNSNameLength !== undefined) view.setUint32(128, Number(data.DNSNameLength), true);
  // 0x84: pad4
  // 0x88: pointer
  if (data?.DNSName !== undefined) view.setBigUint64(136, data.DNSName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DNSName))), true);
  // 0x90: pointer
  if (data?.DSDomainNameRequested !== undefined) view.setBigUint64(144, data.DSDomainNameRequested === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DSDomainNameRequested))), true);
  // 0x98: buffer
  if (data?.DSDomainName !== undefined) {
    (buf as any)._f152 = util.pstrToFfi(data.DSDomainName);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f152))), true);
  }
  // 0xa0: u32
  if (data?.DSDomainNameLen !== undefined) view.setUint32(160, Number(data.DSDomainNameLen), true);
  // 0xa4: pad4
  // 0xa8: pointer
  if (data?.ScopeId !== undefined) view.setBigUint64(168, data.ScopeId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeId))), true);
  return buf;
}

export class DHCP_SERVER_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get MessageType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get SubnetMask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get RequestedAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get RequestLeaseTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get OverlayFields(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get RouterAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Server(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ParameterRequestList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get ParameterRequestListLength(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  get MachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get MachineNameLength(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u8
  get ClientHardwareAddressType(): number {
    return this.view.getUint8(84);
  }

  // 0x55: u8
  get ClientHardwareAddressLength(): number {
    return this.view.getUint8(85);
  }

  // 0x56: pad2

  // 0x58: pointer
  get ClientHardwareAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get ClassIdentifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get ClassIdentifierLength(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get VendorClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u32
  get VendorClassLength(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get DNSFlags(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get DNSNameLength(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  get DNSName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get DSDomainNameRequested(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: buffer
  get DSDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: u32
  get DSDomainNameLen(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: pad4

  // 0xa8: pointer
  get ScopeId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set MessageType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set SubnetMask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set RequestedAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set RequestLeaseTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set OverlayFields(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set RouterAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Server(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ParameterRequestList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set ParameterRequestListLength(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  set MachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: u32
  set MachineNameLength(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u8
  set ClientHardwareAddressType(value: number) {
    this.view.setUint8(84, value);
  }

  // 0x55: u8
  set ClientHardwareAddressLength(value: number) {
    this.view.setUint8(85, value);
  }

  // 0x56: pad2

  // 0x58: pointer
  set ClientHardwareAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: buffer
  set ClassIdentifier(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: u32
  set ClassIdentifierLength(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set VendorClass(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u32
  set VendorClassLength(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set DNSFlags(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set DNSNameLength(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  set DNSName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set DSDomainNameRequested(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: buffer
  set DSDomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f152 = value;
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f152))), true);
  }

  // 0xa0: u32
  set DSDomainNameLen(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: pad4

  // 0xa8: pointer
  set ScopeId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CALLOUT_TABLE (size: 80)
 */
export interface DHCP_CALLOUT_TABLE {
  /** Windows.Win32.NetworkManagement.Dhcp.LPDHCP_CONTROL */
  DhcpControlHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.LPDHCP_NEWPKT */
  DhcpNewPktHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.LPDHCP_DROP_SEND */
  DhcpPktDropHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.LPDHCP_DROP_SEND */
  DhcpPktSendHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.LPDHCP_PROB */
  DhcpAddressDelHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.LPDHCP_GIVE_ADDRESS */
  DhcpAddressOfferHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.LPDHCP_HANDLE_OPTIONS */
  DhcpHandleOptionsHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.LPDHCP_DELETE_CLIENT */
  DhcpDeleteClientHook: Uint8Array | Deno.PointerValue;
  /** ptr */
  DhcpExtensionHook: Deno.PointerValue | Uint8Array;
  /** ptr */
  DhcpReservedHook: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CALLOUT_TABLE = 80;

export function allocDHCP_CALLOUT_TABLE(data?: Partial<DHCP_CALLOUT_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CALLOUT_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DhcpControlHook !== undefined) view.setBigUint64(0, data.DhcpControlHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpControlHook))), true);
  // 0x08: pointer
  if (data?.DhcpNewPktHook !== undefined) view.setBigUint64(8, data.DhcpNewPktHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpNewPktHook))), true);
  // 0x10: pointer
  if (data?.DhcpPktDropHook !== undefined) view.setBigUint64(16, data.DhcpPktDropHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpPktDropHook))), true);
  // 0x18: pointer
  if (data?.DhcpPktSendHook !== undefined) view.setBigUint64(24, data.DhcpPktSendHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpPktSendHook))), true);
  // 0x20: pointer
  if (data?.DhcpAddressDelHook !== undefined) view.setBigUint64(32, data.DhcpAddressDelHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpAddressDelHook))), true);
  // 0x28: pointer
  if (data?.DhcpAddressOfferHook !== undefined) view.setBigUint64(40, data.DhcpAddressOfferHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpAddressOfferHook))), true);
  // 0x30: pointer
  if (data?.DhcpHandleOptionsHook !== undefined) view.setBigUint64(48, data.DhcpHandleOptionsHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpHandleOptionsHook))), true);
  // 0x38: pointer
  if (data?.DhcpDeleteClientHook !== undefined) view.setBigUint64(56, data.DhcpDeleteClientHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpDeleteClientHook))), true);
  // 0x40: pointer
  if (data?.DhcpExtensionHook !== undefined) view.setBigUint64(64, data.DhcpExtensionHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpExtensionHook))), true);
  // 0x48: pointer
  if (data?.DhcpReservedHook !== undefined) view.setBigUint64(72, data.DhcpReservedHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpReservedHook))), true);
  return buf;
}

export class DHCP_CALLOUT_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DhcpControlHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DhcpNewPktHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DhcpPktDropHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DhcpPktSendHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DhcpAddressDelHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DhcpAddressOfferHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get DhcpHandleOptionsHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get DhcpDeleteClientHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get DhcpExtensionHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get DhcpReservedHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DhcpControlHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DhcpNewPktHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DhcpPktDropHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DhcpPktSendHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DhcpAddressDelHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DhcpAddressOfferHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set DhcpHandleOptionsHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set DhcpDeleteClientHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set DhcpExtensionHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set DhcpReservedHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DATE_TIME (size: 8)
 */
export interface DATE_TIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofDATE_TIME = 8;

export function allocDATE_TIME(data?: Partial<DATE_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofDATE_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class DATE_TIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_IP_RANGE (size: 8)
 */
export interface DHCP_IP_RANGE {
  /** u32 */
  StartAddress: number;
  /** u32 */
  EndAddress: number;
}

export const sizeofDHCP_IP_RANGE = 8;

export function allocDHCP_IP_RANGE(data?: Partial<DHCP_IP_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_IP_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartAddress !== undefined) view.setUint32(0, Number(data.StartAddress), true);
  // 0x04: u32
  if (data?.EndAddress !== undefined) view.setUint32(4, Number(data.EndAddress), true);
  return buf;
}

export class DHCP_IP_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StartAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get EndAddress(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set StartAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set EndAddress(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA (size: 16)
 */
export interface DHCP_BINARY_DATA {
  /** u32 */
  DataLength: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_BINARY_DATA = 16;

export function allocDHCP_BINARY_DATA(data?: Partial<DHCP_BINARY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_BINARY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataLength !== undefined) view.setUint32(0, Number(data.DataLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class DHCP_BINARY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set DataLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO (size: 24)
 */
export interface DHCP_HOST_INFO {
  /** u32 */
  IpAddress: number;
  /** Windows.Win32.Foundation.PWSTR */
  NetBiosName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  HostName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDHCP_HOST_INFO = 24;

export function allocDHCP_HOST_INFO(data?: Partial<DHCP_HOST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_HOST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IpAddress !== undefined) view.setUint32(0, Number(data.IpAddress), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.NetBiosName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.NetBiosName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.HostName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.HostName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DHCP_HOST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get IpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get NetBiosName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get HostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set IpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set NetBiosName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set HostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DWORD_DWORD (size: 8)
 */
export interface DWORD_DWORD {
  /** u32 */
  DWord1: number;
  /** u32 */
  DWord2: number;
}

export const sizeofDWORD_DWORD = 8;

export function allocDWORD_DWORD(data?: Partial<DWORD_DWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofDWORD_DWORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DWord1 !== undefined) view.setUint32(0, Number(data.DWord1), true);
  // 0x04: u32
  if (data?.DWord2 !== undefined) view.setUint32(4, Number(data.DWord2), true);
  return buf;
}

export class DWORD_DWORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DWord1(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DWord2(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set DWord1(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DWord2(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_INFO (size: 40)
 */
export interface DHCP_SUBNET_INFO {
  /** u32 */
  SubnetAddress: number;
  /** u32 */
  SubnetMask: number;
  /** Windows.Win32.Foundation.PWSTR */
  SubnetName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SubnetComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO */
  PrimaryHost: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_STATE */
  SubnetState: DHCP_SUBNET_STATE;
}

export const sizeofDHCP_SUBNET_INFO = 40;

export function allocDHCP_SUBNET_INFO(data?: Partial<DHCP_SUBNET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SubnetAddress !== undefined) view.setUint32(0, Number(data.SubnetAddress), true);
  // 0x04: u32
  if (data?.SubnetMask !== undefined) view.setUint32(4, Number(data.SubnetMask), true);
  // 0x08: buffer
  if (data?.SubnetName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.SubnetName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.SubnetComment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.SubnetComment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.PrimaryHost !== undefined) view.setBigUint64(24, data.PrimaryHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrimaryHost))), true);
  // 0x20: i32
  if (data?.SubnetState !== undefined) view.setInt32(32, Number(data.SubnetState), true);
  // 0x24: pad4
  return buf;
}

export class DHCP_SUBNET_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SubnetAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubnetMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get SubnetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get SubnetComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PrimaryHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get SubnetState(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set SubnetAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubnetMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set SubnetName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set SubnetComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set PrimaryHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set SubnetState(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_INFO_VQ (size: 64)
 */
export interface DHCP_SUBNET_INFO_VQ {
  /** u32 */
  SubnetAddress: number;
  /** u32 */
  SubnetMask: number;
  /** Windows.Win32.Foundation.PWSTR */
  SubnetName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SubnetComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO */
  PrimaryHost: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_STATE */
  SubnetState: DHCP_SUBNET_STATE;
  /** u32 */
  QuarantineOn: number;
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** i64 */
  Reserved3: bigint | number;
  /** i64 */
  Reserved4: bigint | number;
}

export const sizeofDHCP_SUBNET_INFO_VQ = 64;

export function allocDHCP_SUBNET_INFO_VQ(data?: Partial<DHCP_SUBNET_INFO_VQ>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_INFO_VQ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SubnetAddress !== undefined) view.setUint32(0, Number(data.SubnetAddress), true);
  // 0x04: u32
  if (data?.SubnetMask !== undefined) view.setUint32(4, Number(data.SubnetMask), true);
  // 0x08: buffer
  if (data?.SubnetName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.SubnetName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.SubnetComment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.SubnetComment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.PrimaryHost !== undefined) view.setBigUint64(24, data.PrimaryHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrimaryHost))), true);
  // 0x20: i32
  if (data?.SubnetState !== undefined) view.setInt32(32, Number(data.SubnetState), true);
  // 0x24: u32
  if (data?.QuarantineOn !== undefined) view.setUint32(36, Number(data.QuarantineOn), true);
  // 0x28: u32
  if (data?.Reserved1 !== undefined) view.setUint32(40, Number(data.Reserved1), true);
  // 0x2c: u32
  if (data?.Reserved2 !== undefined) view.setUint32(44, Number(data.Reserved2), true);
  // 0x30: i64
  if (data?.Reserved3 !== undefined) view.setBigInt64(48, BigInt(data.Reserved3), true);
  // 0x38: i64
  if (data?.Reserved4 !== undefined) view.setBigInt64(56, BigInt(data.Reserved4), true);
  return buf;
}

export class DHCP_SUBNET_INFO_VQView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SubnetAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubnetMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get SubnetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get SubnetComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PrimaryHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get SubnetState(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get QuarantineOn(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get Reserved1(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Reserved2(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: i64
  get Reserved3(): bigint | number {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: i64
  get Reserved4(): bigint | number {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x00: u32
  set SubnetAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubnetMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set SubnetName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set SubnetComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set PrimaryHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set SubnetState(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set QuarantineOn(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set Reserved1(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Reserved2(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: i64
  set Reserved3(value: bigint | number) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: i64
  set Reserved4(value: bigint | number) {
    this.view.setBigInt64(56, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_IP_ARRAY (size: 16)
 */
export interface DHCP_IP_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_IP_ARRAY = 16;

export function allocDHCP_IP_ARRAY(data?: Partial<DHCP_IP_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_IP_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_IP_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_IP_CLUSTER (size: 8)
 */
export interface DHCP_IP_CLUSTER {
  /** u32 */
  ClusterAddress: number;
  /** u32 */
  ClusterMask: number;
}

export const sizeofDHCP_IP_CLUSTER = 8;

export function allocDHCP_IP_CLUSTER(data?: Partial<DHCP_IP_CLUSTER>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_IP_CLUSTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClusterAddress !== undefined) view.setUint32(0, Number(data.ClusterAddress), true);
  // 0x04: u32
  if (data?.ClusterMask !== undefined) view.setUint32(4, Number(data.ClusterMask), true);
  return buf;
}

export class DHCP_IP_CLUSTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClusterAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ClusterMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set ClusterAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ClusterMask(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_IP_RESERVATION (size: 16)
 */
export interface DHCP_IP_RESERVATION {
  /** u32 */
  ReservedIpAddress: number;
  /** ptr */
  ReservedForClient: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_IP_RESERVATION = 16;

export function allocDHCP_IP_RESERVATION(data?: Partial<DHCP_IP_RESERVATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_IP_RESERVATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReservedIpAddress !== undefined) view.setUint32(0, Number(data.ReservedIpAddress), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ReservedForClient !== undefined) view.setBigUint64(8, data.ReservedForClient === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedForClient))), true);
  return buf;
}

export class DHCP_IP_RESERVATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ReservedIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ReservedForClient(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ReservedIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ReservedForClient(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * DHCP_SUBNET_ELEMENT_UNION (size: 40)
 */
export interface DHCP_SUBNET_ELEMENT_UNION {
  /** ptr */
  IpRange: Deno.PointerValue | Uint8Array;
  /** ptr */
  SecondaryHost: Deno.PointerValue | Uint8Array;
  /** ptr */
  ReservedIp: Deno.PointerValue | Uint8Array;
  /** ptr */
  ExcludeIpRange: Deno.PointerValue | Uint8Array;
  /** ptr */
  IpUsedCluster: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_SUBNET_ELEMENT_UNION = 40;

export function allocDHCP_SUBNET_ELEMENT_UNION(data?: Partial<DHCP_SUBNET_ELEMENT_UNION>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_ELEMENT_UNION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IpRange !== undefined) view.setBigUint64(0, data.IpRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IpRange))), true);
  // 0x08: pointer
  if (data?.SecondaryHost !== undefined) view.setBigUint64(8, data.SecondaryHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SecondaryHost))), true);
  // 0x10: pointer
  if (data?.ReservedIp !== undefined) view.setBigUint64(16, data.ReservedIp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedIp))), true);
  // 0x18: pointer
  if (data?.ExcludeIpRange !== undefined) view.setBigUint64(24, data.ExcludeIpRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExcludeIpRange))), true);
  // 0x20: pointer
  if (data?.IpUsedCluster !== undefined) view.setBigUint64(32, data.IpUsedCluster === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IpUsedCluster))), true);
  return buf;
}

export class DHCP_SUBNET_ELEMENT_UNIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IpRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get SecondaryHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ReservedIp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExcludeIpRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get IpUsedCluster(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set IpRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set SecondaryHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ReservedIp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExcludeIpRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set IpUsedCluster(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_DATA (size: 16)
 */
export interface DHCP_SUBNET_ELEMENT_DATA {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_TYPE */
  ElementType: DHCP_SUBNET_ELEMENT_TYPE;
  /** DHCP_SUBNET_ELEMENT_UNION */
  Element: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_SUBNET_ELEMENT_DATA = 16;

export function allocDHCP_SUBNET_ELEMENT_DATA(data?: Partial<DHCP_SUBNET_ELEMENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_ELEMENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ElementType !== undefined) view.setInt32(0, Number(data.ElementType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class DHCP_SUBNET_ELEMENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ElementType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set ElementType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_INFO_ARRAY (size: 16)
 */
export interface DHCP_SUBNET_ELEMENT_INFO_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_SUBNET_ELEMENT_INFO_ARRAY = 16;

export function allocDHCP_SUBNET_ELEMENT_INFO_ARRAY(data?: Partial<DHCP_SUBNET_ELEMENT_INFO_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_ELEMENT_INFO_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_SUBNET_ELEMENT_INFO_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS (size: 16)
 */
export interface DHCP_IPV6_ADDRESS {
  /** u64 */
  HighOrderBits: bigint | number;
  /** u64 */
  LowOrderBits: bigint | number;
}

export const sizeofDHCP_IPV6_ADDRESS = 16;

export function allocDHCP_IPV6_ADDRESS(data?: Partial<DHCP_IPV6_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_IPV6_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.HighOrderBits !== undefined) view.setBigUint64(0, BigInt(data.HighOrderBits), true);
  // 0x08: u64
  if (data?.LowOrderBits !== undefined) view.setBigUint64(8, BigInt(data.LowOrderBits), true);
  return buf;
}

export class DHCP_IPV6_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get HighOrderBits(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get LowOrderBits(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set HighOrderBits(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set LowOrderBits(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_ADDR_PATTERN (size: 24)
 */
export interface DHCP_ADDR_PATTERN {
  /** Windows.Win32.Foundation.BOOL */
  MatchHWType: boolean;
  /** u8 */
  HWType: number;
  /** Windows.Win32.Foundation.BOOL */
  IsWildcard: boolean;
  /** u8 */
  Length: number;
  /** array */
  Pattern: Deno.PointerValue;
}

export const sizeofDHCP_ADDR_PATTERN = 24;

export function allocDHCP_ADDR_PATTERN(data?: Partial<DHCP_ADDR_PATTERN>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_ADDR_PATTERN);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MatchHWType !== undefined) view.setInt32(0, Number(data.MatchHWType), true);
  // 0x04: u8
  if (data?.HWType !== undefined) view.setUint8(4, Number(data.HWType));
  // 0x05: i32
  if (data?.IsWildcard !== undefined) view.setInt32(5, Number(data.IsWildcard), true);
  // 0x09: u8
  if (data?.Length !== undefined) view.setUint8(9, Number(data.Length));
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Pattern !== undefined) view.setBigUint64(16, data.Pattern === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Pattern))), true);
  return buf;
}

export class DHCP_ADDR_PATTERNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MatchHWType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u8
  get HWType(): number {
    return this.view.getUint8(4);
  }

  // 0x05: i32
  get IsWildcard(): number {
    return this.view.getInt32(5, true);
  }

  // 0x09: u8
  get Length(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Pattern(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MatchHWType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u8
  set HWType(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: i32
  set IsWildcard(value: number) {
    this.view.setInt32(5, value, true);
  }

  // 0x09: u8
  set Length(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Pattern(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_FILTER_ADD_INFO (size: 24)
 */
export interface DHCP_FILTER_ADD_INFO {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_ADDR_PATTERN */
  AddrPatt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_FILTER_LIST_TYPE */
  ListType: DHCP_FILTER_LIST_TYPE;
}

export const sizeofDHCP_FILTER_ADD_INFO = 24;

export function allocDHCP_FILTER_ADD_INFO(data?: Partial<DHCP_FILTER_ADD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_FILTER_ADD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AddrPatt !== undefined) view.setBigUint64(0, data.AddrPatt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddrPatt))), true);
  // 0x08: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.ListType !== undefined) view.setInt32(16, Number(data.ListType), true);
  // 0x14: pad4
  return buf;
}

export class DHCP_FILTER_ADD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AddrPatt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get Comment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get ListType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set AddrPatt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set Comment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set ListType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_FILTER_GLOBAL_INFO (size: 8)
 */
export interface DHCP_FILTER_GLOBAL_INFO {
  /** Windows.Win32.Foundation.BOOL */
  EnforceAllowList: boolean;
  /** Windows.Win32.Foundation.BOOL */
  EnforceDenyList: boolean;
}

export const sizeofDHCP_FILTER_GLOBAL_INFO = 8;

export function allocDHCP_FILTER_GLOBAL_INFO(data?: Partial<DHCP_FILTER_GLOBAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_FILTER_GLOBAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.EnforceAllowList !== undefined) view.setInt32(0, Number(data.EnforceAllowList), true);
  // 0x04: i32
  if (data?.EnforceDenyList !== undefined) view.setInt32(4, Number(data.EnforceDenyList), true);
  return buf;
}

export class DHCP_FILTER_GLOBAL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get EnforceAllowList(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get EnforceDenyList(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set EnforceAllowList(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set EnforceDenyList(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_FILTER_RECORD (size: 16)
 */
export interface DHCP_FILTER_RECORD {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_ADDR_PATTERN */
  AddrPatt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null | Uint8Array | Uint16Array;
}

export const sizeofDHCP_FILTER_RECORD = 16;

export function allocDHCP_FILTER_RECORD(data?: Partial<DHCP_FILTER_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_FILTER_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AddrPatt !== undefined) view.setBigUint64(0, data.AddrPatt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddrPatt))), true);
  // 0x08: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class DHCP_FILTER_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AddrPatt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get Comment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set AddrPatt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set Comment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_FILTER_ENUM_INFO (size: 16)
 */
export interface DHCP_FILTER_ENUM_INFO {
  /** u32 */
  NumElements: number;
  /** ptr */
  pEnumRecords: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_FILTER_ENUM_INFO = 16;

export function allocDHCP_FILTER_ENUM_INFO(data?: Partial<DHCP_FILTER_ENUM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_FILTER_ENUM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEnumRecords !== undefined) view.setBigUint64(8, data.pEnumRecords === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEnumRecords))), true);
  return buf;
}

export class DHCP_FILTER_ENUM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pEnumRecords(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pEnumRecords(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * DHCP_OPTION_ELEMENT_UNION (size: 56)
 */
export interface DHCP_OPTION_ELEMENT_UNION {
  /** u8 */
  ByteOption: number;
  /** u16 */
  WordOption: number;
  /** u32 */
  DWordOption: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DWORD_DWORD */
  DWordDWordOption: Uint8Array | Deno.PointerValue;
  /** u32 */
  IpAddressOption: number;
  /** Windows.Win32.Foundation.PWSTR */
  StringDataOption: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  BinaryDataOption: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  EncapsulatedDataOption: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  Ipv6AddressDataOption: string | null | Uint8Array | Uint16Array;
}

export const sizeofDHCP_OPTION_ELEMENT_UNION = 56;

export function allocDHCP_OPTION_ELEMENT_UNION(data?: Partial<DHCP_OPTION_ELEMENT_UNION>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_OPTION_ELEMENT_UNION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ByteOption !== undefined) view.setUint8(0, Number(data.ByteOption));
  // 0x01: u16
  if (data?.WordOption !== undefined) view.setUint16(1, Number(data.WordOption), true);
  // 0x03: u32
  if (data?.DWordOption !== undefined) view.setUint32(3, Number(data.DWordOption), true);
  // 0x07: pad1
  // 0x08: pointer
  if (data?.DWordDWordOption !== undefined) view.setBigUint64(8, data.DWordDWordOption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DWordDWordOption))), true);
  // 0x10: u32
  if (data?.IpAddressOption !== undefined) view.setUint32(16, Number(data.IpAddressOption), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.StringDataOption !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.StringDataOption);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.BinaryDataOption !== undefined) view.setBigUint64(32, data.BinaryDataOption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BinaryDataOption))), true);
  // 0x28: pointer
  if (data?.EncapsulatedDataOption !== undefined) view.setBigUint64(40, data.EncapsulatedDataOption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncapsulatedDataOption))), true);
  // 0x30: buffer
  if (data?.Ipv6AddressDataOption !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.Ipv6AddressDataOption);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  return buf;
}

export class DHCP_OPTION_ELEMENT_UNIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get ByteOption(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get WordOption(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: u32
  get DWordOption(): number {
    return this.view.getUint32(3, true);
  }

  // 0x07: pad1

  // 0x08: pointer
  get DWordDWordOption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get IpAddressOption(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get StringDataOption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get BinaryDataOption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get EncapsulatedDataOption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get Ipv6AddressDataOption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set ByteOption(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set WordOption(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: u32
  set DWordOption(value: number) {
    this.view.setUint32(3, value, true);
  }

  // 0x07: pad1

  // 0x08: pointer
  set DWordDWordOption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set IpAddressOption(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set StringDataOption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set BinaryDataOption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set EncapsulatedDataOption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: buffer
  set Ipv6AddressDataOption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_DATA_ELEMENT (size: 16)
 */
export interface DHCP_OPTION_DATA_ELEMENT {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_DATA_TYPE */
  OptionType: DHCP_OPTION_DATA_TYPE;
  /** DHCP_OPTION_ELEMENT_UNION */
  Element: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_OPTION_DATA_ELEMENT = 16;

export function allocDHCP_OPTION_DATA_ELEMENT(data?: Partial<DHCP_OPTION_DATA_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_OPTION_DATA_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OptionType !== undefined) view.setInt32(0, Number(data.OptionType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class DHCP_OPTION_DATA_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get OptionType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set OptionType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_DATA (size: 16)
 */
export interface DHCP_OPTION_DATA {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_OPTION_DATA = 16;

export function allocDHCP_OPTION_DATA(data?: Partial<DHCP_OPTION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_OPTION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_OPTION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION (size: 40)
 */
export interface DHCP_OPTION {
  /** u32 */
  OptionID: number;
  /** Windows.Win32.Foundation.PWSTR */
  OptionName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  OptionComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_DATA */
  DefaultValue: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_TYPE */
  OptionType: DHCP_OPTION_TYPE;
}

export const sizeofDHCP_OPTION = 40;

export function allocDHCP_OPTION(data?: Partial<DHCP_OPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_OPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OptionID !== undefined) view.setUint32(0, Number(data.OptionID), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.OptionName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.OptionName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.OptionComment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.OptionComment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.DefaultValue !== undefined) view.setBigUint64(24, data.DefaultValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DefaultValue))), true);
  // 0x20: i32
  if (data?.OptionType !== undefined) view.setInt32(32, Number(data.OptionType), true);
  // 0x24: pad4
  return buf;
}

export class DHCP_OPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OptionID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get OptionName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get OptionComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DefaultValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get OptionType(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set OptionID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set OptionName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set OptionComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set DefaultValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set OptionType(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_ARRAY (size: 16)
 */
export interface DHCP_OPTION_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Options: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_OPTION_ARRAY = 16;

export function allocDHCP_OPTION_ARRAY(data?: Partial<DHCP_OPTION_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_OPTION_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Options !== undefined) view.setBigUint64(8, data.Options === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Options))), true);
  return buf;
}

export class DHCP_OPTION_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Options(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Options(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_VALUE (size: 16)
 */
export interface DHCP_OPTION_VALUE {
  /** u32 */
  OptionID: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_DATA */
  Value: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_OPTION_VALUE = 16;

export function allocDHCP_OPTION_VALUE(data?: Partial<DHCP_OPTION_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_OPTION_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OptionID !== undefined) view.setUint32(0, Number(data.OptionID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Value))), true);
  return buf;
}

export class DHCP_OPTION_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OptionID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set OptionID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_VALUE_ARRAY (size: 16)
 */
export interface DHCP_OPTION_VALUE_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Values: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_OPTION_VALUE_ARRAY = 16;

export function allocDHCP_OPTION_VALUE_ARRAY(data?: Partial<DHCP_OPTION_VALUE_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_OPTION_VALUE_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Values !== undefined) view.setBigUint64(8, data.Values === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Values))), true);
  return buf;
}

export class DHCP_OPTION_VALUE_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Values(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Values(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_RESERVED_SCOPE (size: 8)
 */
export interface DHCP_RESERVED_SCOPE {
  /** u32 */
  ReservedIpAddress: number;
  /** u32 */
  ReservedIpSubnetAddress: number;
}

export const sizeofDHCP_RESERVED_SCOPE = 8;

export function allocDHCP_RESERVED_SCOPE(data?: Partial<DHCP_RESERVED_SCOPE>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_RESERVED_SCOPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReservedIpAddress !== undefined) view.setUint32(0, Number(data.ReservedIpAddress), true);
  // 0x04: u32
  if (data?.ReservedIpSubnetAddress !== undefined) view.setUint32(4, Number(data.ReservedIpSubnetAddress), true);
  return buf;
}

export class DHCP_RESERVED_SCOPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ReservedIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ReservedIpSubnetAddress(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set ReservedIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ReservedIpSubnetAddress(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _DHCP_OPTION_SCOPE_UNION (size: 40)
 */
export interface _DHCP_OPTION_SCOPE_UNION {
  /** ptr */
  DefaultScopeInfo: Deno.PointerValue | Uint8Array;
  /** ptr */
  GlobalScopeInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  SubnetScopeInfo: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_RESERVED_SCOPE */
  ReservedScopeInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  MScopeInfo: string | null | Uint8Array | Uint16Array;
}

export const sizeof_DHCP_OPTION_SCOPE_UNION = 40;

export function alloc_DHCP_OPTION_SCOPE_UNION(data?: Partial<_DHCP_OPTION_SCOPE_UNION>): Uint8Array {
  const buf = new Uint8Array(sizeof_DHCP_OPTION_SCOPE_UNION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DefaultScopeInfo !== undefined) view.setBigUint64(0, data.DefaultScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DefaultScopeInfo))), true);
  // 0x08: pointer
  if (data?.GlobalScopeInfo !== undefined) view.setBigUint64(8, data.GlobalScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GlobalScopeInfo))), true);
  // 0x10: u32
  if (data?.SubnetScopeInfo !== undefined) view.setUint32(16, Number(data.SubnetScopeInfo), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ReservedScopeInfo !== undefined) view.setBigUint64(24, data.ReservedScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedScopeInfo))), true);
  // 0x20: buffer
  if (data?.MScopeInfo !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.MScopeInfo);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  return buf;
}

export class _DHCP_OPTION_SCOPE_UNIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DefaultScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get GlobalScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get SubnetScopeInfo(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ReservedScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get MScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DefaultScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set GlobalScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set SubnetScopeInfo(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ReservedScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set MScopeInfo(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_SCOPE_INFO (size: 16)
 */
export interface DHCP_OPTION_SCOPE_INFO {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_SCOPE_TYPE */
  ScopeType: DHCP_OPTION_SCOPE_TYPE;
  /** _DHCP_OPTION_SCOPE_UNION */
  ScopeInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_OPTION_SCOPE_INFO = 16;

export function allocDHCP_OPTION_SCOPE_INFO(data?: Partial<DHCP_OPTION_SCOPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_OPTION_SCOPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ScopeType !== undefined) view.setInt32(0, Number(data.ScopeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ScopeInfo !== undefined) view.setBigUint64(8, data.ScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeInfo))), true);
  return buf;
}

export class DHCP_OPTION_SCOPE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ScopeType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set ScopeType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_RESERVED_SCOPE6 (size: 16)
 */
export interface DHCP_RESERVED_SCOPE6 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  ReservedIpAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  ReservedIpSubnetAddress: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_RESERVED_SCOPE6 = 16;

export function allocDHCP_RESERVED_SCOPE6(data?: Partial<DHCP_RESERVED_SCOPE6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_RESERVED_SCOPE6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ReservedIpAddress !== undefined) view.setBigUint64(0, data.ReservedIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedIpAddress))), true);
  // 0x08: pointer
  if (data?.ReservedIpSubnetAddress !== undefined) view.setBigUint64(8, data.ReservedIpSubnetAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedIpSubnetAddress))), true);
  return buf;
}

export class DHCP_RESERVED_SCOPE6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ReservedIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ReservedIpSubnetAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ReservedIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ReservedIpSubnetAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * DHCP_OPTION_SCOPE_UNION6 (size: 24)
 */
export interface DHCP_OPTION_SCOPE_UNION6 {
  /** ptr */
  DefaultScopeInfo: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  SubnetScopeInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_RESERVED_SCOPE6 */
  ReservedScopeInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_OPTION_SCOPE_UNION6 = 24;

export function allocDHCP_OPTION_SCOPE_UNION6(data?: Partial<DHCP_OPTION_SCOPE_UNION6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_OPTION_SCOPE_UNION6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DefaultScopeInfo !== undefined) view.setBigUint64(0, data.DefaultScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DefaultScopeInfo))), true);
  // 0x08: pointer
  if (data?.SubnetScopeInfo !== undefined) view.setBigUint64(8, data.SubnetScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SubnetScopeInfo))), true);
  // 0x10: pointer
  if (data?.ReservedScopeInfo !== undefined) view.setBigUint64(16, data.ReservedScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedScopeInfo))), true);
  return buf;
}

export class DHCP_OPTION_SCOPE_UNION6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DefaultScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get SubnetScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ReservedScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DefaultScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set SubnetScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ReservedScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_SCOPE_INFO6 (size: 16)
 */
export interface DHCP_OPTION_SCOPE_INFO6 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_SCOPE_TYPE6 */
  ScopeType: DHCP_OPTION_SCOPE_TYPE6;
  /** DHCP_OPTION_SCOPE_UNION6 */
  ScopeInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_OPTION_SCOPE_INFO6 = 16;

export function allocDHCP_OPTION_SCOPE_INFO6(data?: Partial<DHCP_OPTION_SCOPE_INFO6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_OPTION_SCOPE_INFO6);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ScopeType !== undefined) view.setInt32(0, Number(data.ScopeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ScopeInfo !== undefined) view.setBigUint64(8, data.ScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeInfo))), true);
  return buf;
}

export class DHCP_OPTION_SCOPE_INFO6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ScopeType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set ScopeType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_OPTION_LIST (size: 16)
 */
export interface DHCP_OPTION_LIST {
  /** u32 */
  NumOptions: number;
  /** ptr */
  Options: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_OPTION_LIST = 16;

export function allocDHCP_OPTION_LIST(data?: Partial<DHCP_OPTION_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_OPTION_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumOptions !== undefined) view.setUint32(0, Number(data.NumOptions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Options !== undefined) view.setBigUint64(8, data.Options === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Options))), true);
  return buf;
}

export class DHCP_OPTION_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumOptions(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Options(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumOptions(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Options(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO (size: 48)
 */
export interface DHCP_CLIENT_INFO {
  /** u32 */
  ClientIpAddress: number;
  /** u32 */
  SubnetMask: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientHardwareAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClientComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ClientLeaseExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO */
  OwnerHost: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_CLIENT_INFO = 48;

export function allocDHCP_CLIENT_INFO(data?: Partial<DHCP_CLIENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClientIpAddress !== undefined) view.setUint32(0, Number(data.ClientIpAddress), true);
  // 0x04: u32
  if (data?.SubnetMask !== undefined) view.setUint32(4, Number(data.SubnetMask), true);
  // 0x08: pointer
  if (data?.ClientHardwareAddress !== undefined) view.setBigUint64(8, data.ClientHardwareAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientHardwareAddress))), true);
  // 0x10: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ClientComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClientComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.ClientLeaseExpires !== undefined) view.setBigUint64(32, data.ClientLeaseExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientLeaseExpires))), true);
  // 0x28: pointer
  if (data?.OwnerHost !== undefined) view.setBigUint64(40, data.OwnerHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwnerHost))), true);
  return buf;
}

export class DHCP_CLIENT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClientIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubnetMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ClientHardwareAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ClientComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ClientLeaseExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OwnerHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ClientIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubnetMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ClientHardwareAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ClientComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set ClientLeaseExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OwnerHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_ARRAY (size: 16)
 */
export interface DHCP_CLIENT_INFO_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Clients: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLIENT_INFO_ARRAY = 16;

export function allocDHCP_CLIENT_INFO_ARRAY(data?: Partial<DHCP_CLIENT_INFO_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Clients !== undefined) view.setBigUint64(8, data.Clients === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Clients))), true);
  return buf;
}

export class DHCP_CLIENT_INFO_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Clients(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Clients(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_VQ (size: 72)
 */
export interface DHCP_CLIENT_INFO_VQ {
  /** u32 */
  ClientIpAddress: number;
  /** u32 */
  SubnetMask: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientHardwareAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClientComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ClientLeaseExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO */
  OwnerHost: Uint8Array | Deno.PointerValue;
  /** u8 */
  bClientType: number;
  /** u8 */
  AddressState: number;
  /** Windows.Win32.NetworkManagement.Dhcp.QuarantineStatus */
  Status: QuarantineStatus;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ProbationEnds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  QuarantineCapable: boolean;
}

export const sizeofDHCP_CLIENT_INFO_VQ = 72;

export function allocDHCP_CLIENT_INFO_VQ(data?: Partial<DHCP_CLIENT_INFO_VQ>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_VQ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClientIpAddress !== undefined) view.setUint32(0, Number(data.ClientIpAddress), true);
  // 0x04: u32
  if (data?.SubnetMask !== undefined) view.setUint32(4, Number(data.SubnetMask), true);
  // 0x08: pointer
  if (data?.ClientHardwareAddress !== undefined) view.setBigUint64(8, data.ClientHardwareAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientHardwareAddress))), true);
  // 0x10: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ClientComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClientComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.ClientLeaseExpires !== undefined) view.setBigUint64(32, data.ClientLeaseExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientLeaseExpires))), true);
  // 0x28: pointer
  if (data?.OwnerHost !== undefined) view.setBigUint64(40, data.OwnerHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwnerHost))), true);
  // 0x30: u8
  if (data?.bClientType !== undefined) view.setUint8(48, Number(data.bClientType));
  // 0x31: u8
  if (data?.AddressState !== undefined) view.setUint8(49, Number(data.AddressState));
  // 0x32: i32
  if (data?.Status !== undefined) view.setInt32(50, Number(data.Status), true);
  // 0x36: pad2
  // 0x38: pointer
  if (data?.ProbationEnds !== undefined) view.setBigUint64(56, data.ProbationEnds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProbationEnds))), true);
  // 0x40: i32
  if (data?.QuarantineCapable !== undefined) view.setInt32(64, Number(data.QuarantineCapable), true);
  // 0x44: pad4
  return buf;
}

export class DHCP_CLIENT_INFO_VQView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClientIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubnetMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ClientHardwareAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ClientComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ClientLeaseExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OwnerHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u8
  get bClientType(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get AddressState(): number {
    return this.view.getUint8(49);
  }

  // 0x32: i32
  get Status(): number {
    return this.view.getInt32(50, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  get ProbationEnds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: i32
  get QuarantineCapable(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set ClientIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubnetMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ClientHardwareAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ClientComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set ClientLeaseExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OwnerHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u8
  set bClientType(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set AddressState(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: i32
  set Status(value: number) {
    this.view.setInt32(50, value, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  set ProbationEnds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: i32
  set QuarantineCapable(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_ARRAY_VQ (size: 16)
 */
export interface DHCP_CLIENT_INFO_ARRAY_VQ {
  /** u32 */
  NumElements: number;
  /** ptr */
  Clients: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLIENT_INFO_ARRAY_VQ = 16;

export function allocDHCP_CLIENT_INFO_ARRAY_VQ(data?: Partial<DHCP_CLIENT_INFO_ARRAY_VQ>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_ARRAY_VQ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Clients !== undefined) view.setBigUint64(8, data.Clients === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Clients))), true);
  return buf;
}

export class DHCP_CLIENT_INFO_ARRAY_VQView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Clients(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Clients(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_FILTER_STATUS_INFO (size: 72)
 */
export interface DHCP_CLIENT_FILTER_STATUS_INFO {
  /** u32 */
  ClientIpAddress: number;
  /** u32 */
  SubnetMask: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientHardwareAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClientComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ClientLeaseExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO */
  OwnerHost: Uint8Array | Deno.PointerValue;
  /** u8 */
  bClientType: number;
  /** u8 */
  AddressState: number;
  /** Windows.Win32.NetworkManagement.Dhcp.QuarantineStatus */
  Status: QuarantineStatus;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ProbationEnds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  QuarantineCapable: boolean;
  /** u32 */
  FilterStatus: number;
}

export const sizeofDHCP_CLIENT_FILTER_STATUS_INFO = 72;

export function allocDHCP_CLIENT_FILTER_STATUS_INFO(data?: Partial<DHCP_CLIENT_FILTER_STATUS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_FILTER_STATUS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClientIpAddress !== undefined) view.setUint32(0, Number(data.ClientIpAddress), true);
  // 0x04: u32
  if (data?.SubnetMask !== undefined) view.setUint32(4, Number(data.SubnetMask), true);
  // 0x08: pointer
  if (data?.ClientHardwareAddress !== undefined) view.setBigUint64(8, data.ClientHardwareAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientHardwareAddress))), true);
  // 0x10: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ClientComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClientComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.ClientLeaseExpires !== undefined) view.setBigUint64(32, data.ClientLeaseExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientLeaseExpires))), true);
  // 0x28: pointer
  if (data?.OwnerHost !== undefined) view.setBigUint64(40, data.OwnerHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwnerHost))), true);
  // 0x30: u8
  if (data?.bClientType !== undefined) view.setUint8(48, Number(data.bClientType));
  // 0x31: u8
  if (data?.AddressState !== undefined) view.setUint8(49, Number(data.AddressState));
  // 0x32: i32
  if (data?.Status !== undefined) view.setInt32(50, Number(data.Status), true);
  // 0x36: pad2
  // 0x38: pointer
  if (data?.ProbationEnds !== undefined) view.setBigUint64(56, data.ProbationEnds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProbationEnds))), true);
  // 0x40: i32
  if (data?.QuarantineCapable !== undefined) view.setInt32(64, Number(data.QuarantineCapable), true);
  // 0x44: u32
  if (data?.FilterStatus !== undefined) view.setUint32(68, Number(data.FilterStatus), true);
  return buf;
}

export class DHCP_CLIENT_FILTER_STATUS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClientIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubnetMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ClientHardwareAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ClientComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ClientLeaseExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OwnerHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u8
  get bClientType(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get AddressState(): number {
    return this.view.getUint8(49);
  }

  // 0x32: i32
  get Status(): number {
    return this.view.getInt32(50, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  get ProbationEnds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: i32
  get QuarantineCapable(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get FilterStatus(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: u32
  set ClientIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubnetMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ClientHardwareAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ClientComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set ClientLeaseExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OwnerHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u8
  set bClientType(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set AddressState(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: i32
  set Status(value: number) {
    this.view.setInt32(50, value, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  set ProbationEnds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: i32
  set QuarantineCapable(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set FilterStatus(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_FILTER_STATUS_INFO_ARRAY (size: 16)
 */
export interface DHCP_CLIENT_FILTER_STATUS_INFO_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Clients: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLIENT_FILTER_STATUS_INFO_ARRAY = 16;

export function allocDHCP_CLIENT_FILTER_STATUS_INFO_ARRAY(data?: Partial<DHCP_CLIENT_FILTER_STATUS_INFO_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_FILTER_STATUS_INFO_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Clients !== undefined) view.setBigUint64(8, data.Clients === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Clients))), true);
  return buf;
}

export class DHCP_CLIENT_FILTER_STATUS_INFO_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Clients(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Clients(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_PB (size: 80)
 */
export interface DHCP_CLIENT_INFO_PB {
  /** u32 */
  ClientIpAddress: number;
  /** u32 */
  SubnetMask: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientHardwareAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClientComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ClientLeaseExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO */
  OwnerHost: Uint8Array | Deno.PointerValue;
  /** u8 */
  bClientType: number;
  /** u8 */
  AddressState: number;
  /** Windows.Win32.NetworkManagement.Dhcp.QuarantineStatus */
  Status: QuarantineStatus;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ProbationEnds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  QuarantineCapable: boolean;
  /** u32 */
  FilterStatus: number;
  /** Windows.Win32.Foundation.PWSTR */
  PolicyName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDHCP_CLIENT_INFO_PB = 80;

export function allocDHCP_CLIENT_INFO_PB(data?: Partial<DHCP_CLIENT_INFO_PB>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_PB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClientIpAddress !== undefined) view.setUint32(0, Number(data.ClientIpAddress), true);
  // 0x04: u32
  if (data?.SubnetMask !== undefined) view.setUint32(4, Number(data.SubnetMask), true);
  // 0x08: pointer
  if (data?.ClientHardwareAddress !== undefined) view.setBigUint64(8, data.ClientHardwareAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientHardwareAddress))), true);
  // 0x10: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ClientComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClientComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.ClientLeaseExpires !== undefined) view.setBigUint64(32, data.ClientLeaseExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientLeaseExpires))), true);
  // 0x28: pointer
  if (data?.OwnerHost !== undefined) view.setBigUint64(40, data.OwnerHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwnerHost))), true);
  // 0x30: u8
  if (data?.bClientType !== undefined) view.setUint8(48, Number(data.bClientType));
  // 0x31: u8
  if (data?.AddressState !== undefined) view.setUint8(49, Number(data.AddressState));
  // 0x32: i32
  if (data?.Status !== undefined) view.setInt32(50, Number(data.Status), true);
  // 0x36: pad2
  // 0x38: pointer
  if (data?.ProbationEnds !== undefined) view.setBigUint64(56, data.ProbationEnds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProbationEnds))), true);
  // 0x40: i32
  if (data?.QuarantineCapable !== undefined) view.setInt32(64, Number(data.QuarantineCapable), true);
  // 0x44: u32
  if (data?.FilterStatus !== undefined) view.setUint32(68, Number(data.FilterStatus), true);
  // 0x48: buffer
  if (data?.PolicyName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.PolicyName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class DHCP_CLIENT_INFO_PBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClientIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubnetMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ClientHardwareAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ClientComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ClientLeaseExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OwnerHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u8
  get bClientType(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get AddressState(): number {
    return this.view.getUint8(49);
  }

  // 0x32: i32
  get Status(): number {
    return this.view.getInt32(50, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  get ProbationEnds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: i32
  get QuarantineCapable(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get FilterStatus(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: buffer
  get PolicyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ClientIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubnetMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ClientHardwareAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ClientComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set ClientLeaseExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OwnerHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u8
  set bClientType(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set AddressState(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: i32
  set Status(value: number) {
    this.view.setInt32(50, value, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  set ProbationEnds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: i32
  set QuarantineCapable(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set FilterStatus(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: buffer
  set PolicyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_PB_ARRAY (size: 16)
 */
export interface DHCP_CLIENT_INFO_PB_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Clients: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLIENT_INFO_PB_ARRAY = 16;

export function allocDHCP_CLIENT_INFO_PB_ARRAY(data?: Partial<DHCP_CLIENT_INFO_PB_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_PB_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Clients !== undefined) view.setBigUint64(8, data.Clients === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Clients))), true);
  return buf;
}

export class DHCP_CLIENT_INFO_PB_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Clients(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Clients(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * DHCP_CLIENT_SEARCH_UNION (size: 24)
 */
export interface DHCP_CLIENT_SEARCH_UNION {
  /** u32 */
  ClientIpAddress: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientHardwareAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDHCP_CLIENT_SEARCH_UNION = 24;

export function allocDHCP_CLIENT_SEARCH_UNION(data?: Partial<DHCP_CLIENT_SEARCH_UNION>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_SEARCH_UNION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClientIpAddress !== undefined) view.setUint32(0, Number(data.ClientIpAddress), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ClientHardwareAddress !== undefined) view.setBigUint64(8, data.ClientHardwareAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientHardwareAddress))), true);
  // 0x10: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DHCP_CLIENT_SEARCH_UNIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClientIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ClientHardwareAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ClientIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ClientHardwareAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SEARCH_INFO (size: 16)
 */
export interface DHCP_SEARCH_INFO {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_SEARCH_INFO_TYPE */
  SearchType: DHCP_SEARCH_INFO_TYPE;
  /** DHCP_CLIENT_SEARCH_UNION */
  SearchInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_SEARCH_INFO = 16;

export function allocDHCP_SEARCH_INFO(data?: Partial<DHCP_SEARCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SEARCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SearchType !== undefined) view.setInt32(0, Number(data.SearchType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SearchInfo !== undefined) view.setBigUint64(8, data.SearchInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SearchInfo))), true);
  return buf;
}

export class DHCP_SEARCH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get SearchType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SearchInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set SearchType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SearchInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _DHCP_PROPERTY_VALUE_UNION (size: 24)
 */
export interface _DHCP_PROPERTY_VALUE_UNION {
  /** u8 */
  ByteValue: number;
  /** u16 */
  WordValue: number;
  /** u32 */
  DWordValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  StringValue: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  BinaryValue: Uint8Array | Deno.PointerValue;
}

export const sizeof_DHCP_PROPERTY_VALUE_UNION = 24;

export function alloc_DHCP_PROPERTY_VALUE_UNION(data?: Partial<_DHCP_PROPERTY_VALUE_UNION>): Uint8Array {
  const buf = new Uint8Array(sizeof_DHCP_PROPERTY_VALUE_UNION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ByteValue !== undefined) view.setUint8(0, Number(data.ByteValue));
  // 0x01: u16
  if (data?.WordValue !== undefined) view.setUint16(1, Number(data.WordValue), true);
  // 0x03: u32
  if (data?.DWordValue !== undefined) view.setUint32(3, Number(data.DWordValue), true);
  // 0x07: pad1
  // 0x08: buffer
  if (data?.StringValue !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.StringValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.BinaryValue !== undefined) view.setBigUint64(16, data.BinaryValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BinaryValue))), true);
  return buf;
}

export class _DHCP_PROPERTY_VALUE_UNIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get ByteValue(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get WordValue(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: u32
  get DWordValue(): number {
    return this.view.getUint32(3, true);
  }

  // 0x07: pad1

  // 0x08: buffer
  get StringValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get BinaryValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set ByteValue(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set WordValue(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: u32
  set DWordValue(value: number) {
    this.view.setUint32(3, value, true);
  }

  // 0x07: pad1

  // 0x08: buffer
  set StringValue(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set BinaryValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_PROPERTY (size: 16)
 */
export interface DHCP_PROPERTY {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_PROPERTY_ID */
  ID: DHCP_PROPERTY_ID;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_PROPERTY_TYPE */
  Type: DHCP_PROPERTY_TYPE;
  /** _DHCP_PROPERTY_VALUE_UNION */
  Value: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_PROPERTY = 16;

export function allocDHCP_PROPERTY(data?: Partial<DHCP_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ID !== undefined) view.setInt32(0, Number(data.ID), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Value))), true);
  return buf;
}

export class DHCP_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ID(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set ID(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_PROPERTY_ARRAY (size: 16)
 */
export interface DHCP_PROPERTY_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_PROPERTY_ARRAY = 16;

export function allocDHCP_PROPERTY_ARRAY(data?: Partial<DHCP_PROPERTY_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_PROPERTY_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_PROPERTY_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_EX (size: 88)
 */
export interface DHCP_CLIENT_INFO_EX {
  /** u32 */
  ClientIpAddress: number;
  /** u32 */
  SubnetMask: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientHardwareAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClientComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ClientLeaseExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO */
  OwnerHost: Uint8Array | Deno.PointerValue;
  /** u8 */
  bClientType: number;
  /** u8 */
  AddressState: number;
  /** Windows.Win32.NetworkManagement.Dhcp.QuarantineStatus */
  Status: QuarantineStatus;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ProbationEnds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  QuarantineCapable: boolean;
  /** u32 */
  FilterStatus: number;
  /** Windows.Win32.Foundation.PWSTR */
  PolicyName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Properties: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLIENT_INFO_EX = 88;

export function allocDHCP_CLIENT_INFO_EX(data?: Partial<DHCP_CLIENT_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClientIpAddress !== undefined) view.setUint32(0, Number(data.ClientIpAddress), true);
  // 0x04: u32
  if (data?.SubnetMask !== undefined) view.setUint32(4, Number(data.SubnetMask), true);
  // 0x08: pointer
  if (data?.ClientHardwareAddress !== undefined) view.setBigUint64(8, data.ClientHardwareAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientHardwareAddress))), true);
  // 0x10: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ClientComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClientComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.ClientLeaseExpires !== undefined) view.setBigUint64(32, data.ClientLeaseExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientLeaseExpires))), true);
  // 0x28: pointer
  if (data?.OwnerHost !== undefined) view.setBigUint64(40, data.OwnerHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwnerHost))), true);
  // 0x30: u8
  if (data?.bClientType !== undefined) view.setUint8(48, Number(data.bClientType));
  // 0x31: u8
  if (data?.AddressState !== undefined) view.setUint8(49, Number(data.AddressState));
  // 0x32: i32
  if (data?.Status !== undefined) view.setInt32(50, Number(data.Status), true);
  // 0x36: pad2
  // 0x38: pointer
  if (data?.ProbationEnds !== undefined) view.setBigUint64(56, data.ProbationEnds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProbationEnds))), true);
  // 0x40: i32
  if (data?.QuarantineCapable !== undefined) view.setInt32(64, Number(data.QuarantineCapable), true);
  // 0x44: u32
  if (data?.FilterStatus !== undefined) view.setUint32(68, Number(data.FilterStatus), true);
  // 0x48: buffer
  if (data?.PolicyName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.PolicyName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: pointer
  if (data?.Properties !== undefined) view.setBigUint64(80, data.Properties === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Properties))), true);
  return buf;
}

export class DHCP_CLIENT_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClientIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubnetMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ClientHardwareAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ClientComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ClientLeaseExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OwnerHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u8
  get bClientType(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get AddressState(): number {
    return this.view.getUint8(49);
  }

  // 0x32: i32
  get Status(): number {
    return this.view.getInt32(50, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  get ProbationEnds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: i32
  get QuarantineCapable(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get FilterStatus(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: buffer
  get PolicyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get Properties(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ClientIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubnetMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ClientHardwareAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ClientComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set ClientLeaseExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OwnerHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u8
  set bClientType(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set AddressState(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: i32
  set Status(value: number) {
    this.view.setInt32(50, value, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  set ProbationEnds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: i32
  set QuarantineCapable(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set FilterStatus(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: buffer
  set PolicyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: pointer
  set Properties(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_EX_ARRAY (size: 16)
 */
export interface DHCP_CLIENT_INFO_EX_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Clients: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLIENT_INFO_EX_ARRAY = 16;

export function allocDHCP_CLIENT_INFO_EX_ARRAY(data?: Partial<DHCP_CLIENT_INFO_EX_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_EX_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Clients !== undefined) view.setBigUint64(8, data.Clients === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Clients))), true);
  return buf;
}

export class DHCP_CLIENT_INFO_EX_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Clients(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Clients(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.SCOPE_MIB_INFO (size: 16)
 */
export interface SCOPE_MIB_INFO {
  /** u32 */
  Subnet: number;
  /** u32 */
  NumAddressesInuse: number;
  /** u32 */
  NumAddressesFree: number;
  /** u32 */
  NumPendingOffers: number;
}

export const sizeofSCOPE_MIB_INFO = 16;

export function allocSCOPE_MIB_INFO(data?: Partial<SCOPE_MIB_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCOPE_MIB_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Subnet !== undefined) view.setUint32(0, Number(data.Subnet), true);
  // 0x04: u32
  if (data?.NumAddressesInuse !== undefined) view.setUint32(4, Number(data.NumAddressesInuse), true);
  // 0x08: u32
  if (data?.NumAddressesFree !== undefined) view.setUint32(8, Number(data.NumAddressesFree), true);
  // 0x0c: u32
  if (data?.NumPendingOffers !== undefined) view.setUint32(12, Number(data.NumPendingOffers), true);
  return buf;
}

export class SCOPE_MIB_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Subnet(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumAddressesInuse(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumAddressesFree(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumPendingOffers(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Subnet(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumAddressesInuse(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumAddressesFree(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumPendingOffers(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_MIB_INFO (size: 56)
 */
export interface DHCP_MIB_INFO {
  /** u32 */
  Discovers: number;
  /** u32 */
  Offers: number;
  /** u32 */
  Requests: number;
  /** u32 */
  Acks: number;
  /** u32 */
  Naks: number;
  /** u32 */
  Declines: number;
  /** u32 */
  Releases: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ServerStartTime: Uint8Array | Deno.PointerValue;
  /** u32 */
  Scopes: number;
  /** ptr */
  ScopeInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_MIB_INFO = 56;

export function allocDHCP_MIB_INFO(data?: Partial<DHCP_MIB_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_MIB_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Discovers !== undefined) view.setUint32(0, Number(data.Discovers), true);
  // 0x04: u32
  if (data?.Offers !== undefined) view.setUint32(4, Number(data.Offers), true);
  // 0x08: u32
  if (data?.Requests !== undefined) view.setUint32(8, Number(data.Requests), true);
  // 0x0c: u32
  if (data?.Acks !== undefined) view.setUint32(12, Number(data.Acks), true);
  // 0x10: u32
  if (data?.Naks !== undefined) view.setUint32(16, Number(data.Naks), true);
  // 0x14: u32
  if (data?.Declines !== undefined) view.setUint32(20, Number(data.Declines), true);
  // 0x18: u32
  if (data?.Releases !== undefined) view.setUint32(24, Number(data.Releases), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ServerStartTime !== undefined) view.setBigUint64(32, data.ServerStartTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerStartTime))), true);
  // 0x28: u32
  if (data?.Scopes !== undefined) view.setUint32(40, Number(data.Scopes), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ScopeInfo !== undefined) view.setBigUint64(48, data.ScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeInfo))), true);
  return buf;
}

export class DHCP_MIB_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Discovers(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Offers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Requests(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Acks(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Naks(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Declines(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Releases(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ServerStartTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Scopes(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Discovers(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Offers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Requests(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Acks(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Naks(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Declines(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Releases(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ServerStartTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Scopes(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.SCOPE_MIB_INFO_VQ (size: 40)
 */
export interface SCOPE_MIB_INFO_VQ {
  /** u32 */
  Subnet: number;
  /** u32 */
  NumAddressesInuse: number;
  /** u32 */
  NumAddressesFree: number;
  /** u32 */
  NumPendingOffers: number;
  /** u32 */
  QtnNumLeases: number;
  /** u32 */
  QtnPctQtnLeases: number;
  /** u32 */
  QtnProbationLeases: number;
  /** u32 */
  QtnNonQtnLeases: number;
  /** u32 */
  QtnExemptLeases: number;
  /** u32 */
  QtnCapableClients: number;
}

export const sizeofSCOPE_MIB_INFO_VQ = 40;

export function allocSCOPE_MIB_INFO_VQ(data?: Partial<SCOPE_MIB_INFO_VQ>): Uint8Array {
  const buf = new Uint8Array(sizeofSCOPE_MIB_INFO_VQ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Subnet !== undefined) view.setUint32(0, Number(data.Subnet), true);
  // 0x04: u32
  if (data?.NumAddressesInuse !== undefined) view.setUint32(4, Number(data.NumAddressesInuse), true);
  // 0x08: u32
  if (data?.NumAddressesFree !== undefined) view.setUint32(8, Number(data.NumAddressesFree), true);
  // 0x0c: u32
  if (data?.NumPendingOffers !== undefined) view.setUint32(12, Number(data.NumPendingOffers), true);
  // 0x10: u32
  if (data?.QtnNumLeases !== undefined) view.setUint32(16, Number(data.QtnNumLeases), true);
  // 0x14: u32
  if (data?.QtnPctQtnLeases !== undefined) view.setUint32(20, Number(data.QtnPctQtnLeases), true);
  // 0x18: u32
  if (data?.QtnProbationLeases !== undefined) view.setUint32(24, Number(data.QtnProbationLeases), true);
  // 0x1c: u32
  if (data?.QtnNonQtnLeases !== undefined) view.setUint32(28, Number(data.QtnNonQtnLeases), true);
  // 0x20: u32
  if (data?.QtnExemptLeases !== undefined) view.setUint32(32, Number(data.QtnExemptLeases), true);
  // 0x24: u32
  if (data?.QtnCapableClients !== undefined) view.setUint32(36, Number(data.QtnCapableClients), true);
  return buf;
}

export class SCOPE_MIB_INFO_VQView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Subnet(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumAddressesInuse(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumAddressesFree(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumPendingOffers(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get QtnNumLeases(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get QtnPctQtnLeases(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get QtnProbationLeases(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get QtnNonQtnLeases(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get QtnExemptLeases(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get QtnCapableClients(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set Subnet(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumAddressesInuse(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumAddressesFree(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumPendingOffers(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set QtnNumLeases(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set QtnPctQtnLeases(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set QtnProbationLeases(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set QtnNonQtnLeases(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set QtnExemptLeases(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set QtnCapableClients(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_MIB_INFO_VQ (size: 80)
 */
export interface DHCP_MIB_INFO_VQ {
  /** u32 */
  Discovers: number;
  /** u32 */
  Offers: number;
  /** u32 */
  Requests: number;
  /** u32 */
  Acks: number;
  /** u32 */
  Naks: number;
  /** u32 */
  Declines: number;
  /** u32 */
  Releases: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ServerStartTime: Uint8Array | Deno.PointerValue;
  /** u32 */
  QtnNumLeases: number;
  /** u32 */
  QtnPctQtnLeases: number;
  /** u32 */
  QtnProbationLeases: number;
  /** u32 */
  QtnNonQtnLeases: number;
  /** u32 */
  QtnExemptLeases: number;
  /** u32 */
  QtnCapableClients: number;
  /** u32 */
  QtnIASErrors: number;
  /** u32 */
  Scopes: number;
  /** ptr */
  ScopeInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_MIB_INFO_VQ = 80;

export function allocDHCP_MIB_INFO_VQ(data?: Partial<DHCP_MIB_INFO_VQ>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_MIB_INFO_VQ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Discovers !== undefined) view.setUint32(0, Number(data.Discovers), true);
  // 0x04: u32
  if (data?.Offers !== undefined) view.setUint32(4, Number(data.Offers), true);
  // 0x08: u32
  if (data?.Requests !== undefined) view.setUint32(8, Number(data.Requests), true);
  // 0x0c: u32
  if (data?.Acks !== undefined) view.setUint32(12, Number(data.Acks), true);
  // 0x10: u32
  if (data?.Naks !== undefined) view.setUint32(16, Number(data.Naks), true);
  // 0x14: u32
  if (data?.Declines !== undefined) view.setUint32(20, Number(data.Declines), true);
  // 0x18: u32
  if (data?.Releases !== undefined) view.setUint32(24, Number(data.Releases), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ServerStartTime !== undefined) view.setBigUint64(32, data.ServerStartTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerStartTime))), true);
  // 0x28: u32
  if (data?.QtnNumLeases !== undefined) view.setUint32(40, Number(data.QtnNumLeases), true);
  // 0x2c: u32
  if (data?.QtnPctQtnLeases !== undefined) view.setUint32(44, Number(data.QtnPctQtnLeases), true);
  // 0x30: u32
  if (data?.QtnProbationLeases !== undefined) view.setUint32(48, Number(data.QtnProbationLeases), true);
  // 0x34: u32
  if (data?.QtnNonQtnLeases !== undefined) view.setUint32(52, Number(data.QtnNonQtnLeases), true);
  // 0x38: u32
  if (data?.QtnExemptLeases !== undefined) view.setUint32(56, Number(data.QtnExemptLeases), true);
  // 0x3c: u32
  if (data?.QtnCapableClients !== undefined) view.setUint32(60, Number(data.QtnCapableClients), true);
  // 0x40: u32
  if (data?.QtnIASErrors !== undefined) view.setUint32(64, Number(data.QtnIASErrors), true);
  // 0x44: u32
  if (data?.Scopes !== undefined) view.setUint32(68, Number(data.Scopes), true);
  // 0x48: pointer
  if (data?.ScopeInfo !== undefined) view.setBigUint64(72, data.ScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeInfo))), true);
  return buf;
}

export class DHCP_MIB_INFO_VQView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Discovers(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Offers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Requests(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Acks(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Naks(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Declines(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Releases(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ServerStartTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get QtnNumLeases(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get QtnPctQtnLeases(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get QtnProbationLeases(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get QtnNonQtnLeases(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get QtnExemptLeases(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get QtnCapableClients(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get QtnIASErrors(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get Scopes(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: pointer
  get ScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Discovers(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Offers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Requests(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Acks(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Naks(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Declines(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Releases(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ServerStartTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set QtnNumLeases(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set QtnPctQtnLeases(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set QtnProbationLeases(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set QtnNonQtnLeases(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set QtnExemptLeases(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set QtnCapableClients(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set QtnIASErrors(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set Scopes(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: pointer
  set ScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.SCOPE_MIB_INFO_V5 (size: 16)
 */
export interface SCOPE_MIB_INFO_V5 {
  /** u32 */
  Subnet: number;
  /** u32 */
  NumAddressesInuse: number;
  /** u32 */
  NumAddressesFree: number;
  /** u32 */
  NumPendingOffers: number;
}

export const sizeofSCOPE_MIB_INFO_V5 = 16;

export function allocSCOPE_MIB_INFO_V5(data?: Partial<SCOPE_MIB_INFO_V5>): Uint8Array {
  const buf = new Uint8Array(sizeofSCOPE_MIB_INFO_V5);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Subnet !== undefined) view.setUint32(0, Number(data.Subnet), true);
  // 0x04: u32
  if (data?.NumAddressesInuse !== undefined) view.setUint32(4, Number(data.NumAddressesInuse), true);
  // 0x08: u32
  if (data?.NumAddressesFree !== undefined) view.setUint32(8, Number(data.NumAddressesFree), true);
  // 0x0c: u32
  if (data?.NumPendingOffers !== undefined) view.setUint32(12, Number(data.NumPendingOffers), true);
  return buf;
}

export class SCOPE_MIB_INFO_V5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Subnet(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumAddressesInuse(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumAddressesFree(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumPendingOffers(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Subnet(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumAddressesInuse(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumAddressesFree(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumPendingOffers(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_MIB_INFO_V5 (size: 88)
 */
export interface DHCP_MIB_INFO_V5 {
  /** u32 */
  Discovers: number;
  /** u32 */
  Offers: number;
  /** u32 */
  Requests: number;
  /** u32 */
  Acks: number;
  /** u32 */
  Naks: number;
  /** u32 */
  Declines: number;
  /** u32 */
  Releases: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ServerStartTime: Uint8Array | Deno.PointerValue;
  /** u32 */
  QtnNumLeases: number;
  /** u32 */
  QtnPctQtnLeases: number;
  /** u32 */
  QtnProbationLeases: number;
  /** u32 */
  QtnNonQtnLeases: number;
  /** u32 */
  QtnExemptLeases: number;
  /** u32 */
  QtnCapableClients: number;
  /** u32 */
  QtnIASErrors: number;
  /** u32 */
  DelayedOffers: number;
  /** u32 */
  ScopesWithDelayedOffers: number;
  /** u32 */
  Scopes: number;
  /** ptr */
  ScopeInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_MIB_INFO_V5 = 88;

export function allocDHCP_MIB_INFO_V5(data?: Partial<DHCP_MIB_INFO_V5>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_MIB_INFO_V5);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Discovers !== undefined) view.setUint32(0, Number(data.Discovers), true);
  // 0x04: u32
  if (data?.Offers !== undefined) view.setUint32(4, Number(data.Offers), true);
  // 0x08: u32
  if (data?.Requests !== undefined) view.setUint32(8, Number(data.Requests), true);
  // 0x0c: u32
  if (data?.Acks !== undefined) view.setUint32(12, Number(data.Acks), true);
  // 0x10: u32
  if (data?.Naks !== undefined) view.setUint32(16, Number(data.Naks), true);
  // 0x14: u32
  if (data?.Declines !== undefined) view.setUint32(20, Number(data.Declines), true);
  // 0x18: u32
  if (data?.Releases !== undefined) view.setUint32(24, Number(data.Releases), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ServerStartTime !== undefined) view.setBigUint64(32, data.ServerStartTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerStartTime))), true);
  // 0x28: u32
  if (data?.QtnNumLeases !== undefined) view.setUint32(40, Number(data.QtnNumLeases), true);
  // 0x2c: u32
  if (data?.QtnPctQtnLeases !== undefined) view.setUint32(44, Number(data.QtnPctQtnLeases), true);
  // 0x30: u32
  if (data?.QtnProbationLeases !== undefined) view.setUint32(48, Number(data.QtnProbationLeases), true);
  // 0x34: u32
  if (data?.QtnNonQtnLeases !== undefined) view.setUint32(52, Number(data.QtnNonQtnLeases), true);
  // 0x38: u32
  if (data?.QtnExemptLeases !== undefined) view.setUint32(56, Number(data.QtnExemptLeases), true);
  // 0x3c: u32
  if (data?.QtnCapableClients !== undefined) view.setUint32(60, Number(data.QtnCapableClients), true);
  // 0x40: u32
  if (data?.QtnIASErrors !== undefined) view.setUint32(64, Number(data.QtnIASErrors), true);
  // 0x44: u32
  if (data?.DelayedOffers !== undefined) view.setUint32(68, Number(data.DelayedOffers), true);
  // 0x48: u32
  if (data?.ScopesWithDelayedOffers !== undefined) view.setUint32(72, Number(data.ScopesWithDelayedOffers), true);
  // 0x4c: u32
  if (data?.Scopes !== undefined) view.setUint32(76, Number(data.Scopes), true);
  // 0x50: pointer
  if (data?.ScopeInfo !== undefined) view.setBigUint64(80, data.ScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeInfo))), true);
  return buf;
}

export class DHCP_MIB_INFO_V5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Discovers(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Offers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Requests(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Acks(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Naks(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Declines(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Releases(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ServerStartTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get QtnNumLeases(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get QtnPctQtnLeases(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get QtnProbationLeases(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get QtnNonQtnLeases(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get QtnExemptLeases(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get QtnCapableClients(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get QtnIASErrors(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get DelayedOffers(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get ScopesWithDelayedOffers(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get Scopes(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: pointer
  get ScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Discovers(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Offers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Requests(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Acks(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Naks(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Declines(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Releases(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ServerStartTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set QtnNumLeases(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set QtnPctQtnLeases(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set QtnProbationLeases(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set QtnNonQtnLeases(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set QtnExemptLeases(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set QtnCapableClients(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set QtnIASErrors(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set DelayedOffers(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set ScopesWithDelayedOffers(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set Scopes(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: pointer
  set ScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SERVER_CONFIG_INFO (size: 56)
 */
export interface DHCP_SERVER_CONFIG_INFO {
  /** u32 */
  APIProtocolSupport: number;
  /** Windows.Win32.Foundation.PWSTR */
  DatabaseName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DatabasePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  BackupPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  BackupInterval: number;
  /** u32 */
  DatabaseLoggingFlag: number;
  /** u32 */
  RestoreFlag: number;
  /** u32 */
  DatabaseCleanupInterval: number;
  /** u32 */
  DebugFlag: number;
}

export const sizeofDHCP_SERVER_CONFIG_INFO = 56;

export function allocDHCP_SERVER_CONFIG_INFO(data?: Partial<DHCP_SERVER_CONFIG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SERVER_CONFIG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.APIProtocolSupport !== undefined) view.setUint32(0, Number(data.APIProtocolSupport), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.DatabaseName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DatabaseName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.DatabasePath !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.DatabasePath);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.BackupPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.BackupPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.BackupInterval !== undefined) view.setUint32(32, Number(data.BackupInterval), true);
  // 0x24: u32
  if (data?.DatabaseLoggingFlag !== undefined) view.setUint32(36, Number(data.DatabaseLoggingFlag), true);
  // 0x28: u32
  if (data?.RestoreFlag !== undefined) view.setUint32(40, Number(data.RestoreFlag), true);
  // 0x2c: u32
  if (data?.DatabaseCleanupInterval !== undefined) view.setUint32(44, Number(data.DatabaseCleanupInterval), true);
  // 0x30: u32
  if (data?.DebugFlag !== undefined) view.setUint32(48, Number(data.DebugFlag), true);
  // 0x34: pad4
  return buf;
}

export class DHCP_SERVER_CONFIG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get APIProtocolSupport(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get DatabaseName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get DatabasePath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get BackupPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get BackupInterval(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DatabaseLoggingFlag(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get RestoreFlag(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get DatabaseCleanupInterval(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get DebugFlag(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set APIProtocolSupport(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set DatabaseName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set DatabasePath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set BackupPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set BackupInterval(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DatabaseLoggingFlag(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set RestoreFlag(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set DatabaseCleanupInterval(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set DebugFlag(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SCAN_ITEM (size: 8)
 */
export interface DHCP_SCAN_ITEM {
  /** u32 */
  IpAddress: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_SCAN_FLAG */
  ScanFlag: DHCP_SCAN_FLAG;
}

export const sizeofDHCP_SCAN_ITEM = 8;

export function allocDHCP_SCAN_ITEM(data?: Partial<DHCP_SCAN_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SCAN_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IpAddress !== undefined) view.setUint32(0, Number(data.IpAddress), true);
  // 0x04: i32
  if (data?.ScanFlag !== undefined) view.setInt32(4, Number(data.ScanFlag), true);
  return buf;
}

export class DHCP_SCAN_ITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get IpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ScanFlag(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set IpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ScanFlag(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SCAN_LIST (size: 16)
 */
export interface DHCP_SCAN_LIST {
  /** u32 */
  NumScanItems: number;
  /** ptr */
  ScanItems: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_SCAN_LIST = 16;

export function allocDHCP_SCAN_LIST(data?: Partial<DHCP_SCAN_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SCAN_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumScanItems !== undefined) view.setUint32(0, Number(data.NumScanItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ScanItems !== undefined) view.setBigUint64(8, data.ScanItems === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScanItems))), true);
  return buf;
}

export class DHCP_SCAN_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumScanItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ScanItems(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumScanItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ScanItems(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLASS_INFO (size: 40)
 */
export interface DHCP_CLASS_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  ClassName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClassComment: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ClassDataLength: number;
  /** Windows.Win32.Foundation.BOOL */
  IsVendor: boolean;
  /** u32 */
  Flags: number;
  /** ptr */
  ClassData: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLASS_INFO = 40;

export function allocDHCP_CLASS_INFO(data?: Partial<DHCP_CLASS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLASS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.ClassName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.ClassName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.ClassComment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ClassComment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.ClassDataLength !== undefined) view.setUint32(16, Number(data.ClassDataLength), true);
  // 0x14: i32
  if (data?.IsVendor !== undefined) view.setInt32(20, Number(data.IsVendor), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ClassData !== undefined) view.setBigUint64(32, data.ClassData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClassData))), true);
  return buf;
}

export class DHCP_CLASS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get ClassName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get ClassComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ClassDataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get IsVendor(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ClassData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set ClassName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set ClassComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set ClassDataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set IsVendor(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ClassData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLASS_INFO_ARRAY (size: 16)
 */
export interface DHCP_CLASS_INFO_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Classes: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLASS_INFO_ARRAY = 16;

export function allocDHCP_CLASS_INFO_ARRAY(data?: Partial<DHCP_CLASS_INFO_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLASS_INFO_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Classes !== undefined) view.setBigUint64(8, data.Classes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Classes))), true);
  return buf;
}

export class DHCP_CLASS_INFO_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Classes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Classes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLASS_INFO_V6 (size: 40)
 */
export interface DHCP_CLASS_INFO_V6 {
  /** Windows.Win32.Foundation.PWSTR */
  ClassName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClassComment: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ClassDataLength: number;
  /** Windows.Win32.Foundation.BOOL */
  IsVendor: boolean;
  /** u32 */
  EnterpriseNumber: number;
  /** u32 */
  Flags: number;
  /** ptr */
  ClassData: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLASS_INFO_V6 = 40;

export function allocDHCP_CLASS_INFO_V6(data?: Partial<DHCP_CLASS_INFO_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLASS_INFO_V6);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.ClassName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.ClassName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.ClassComment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ClassComment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.ClassDataLength !== undefined) view.setUint32(16, Number(data.ClassDataLength), true);
  // 0x14: i32
  if (data?.IsVendor !== undefined) view.setInt32(20, Number(data.IsVendor), true);
  // 0x18: u32
  if (data?.EnterpriseNumber !== undefined) view.setUint32(24, Number(data.EnterpriseNumber), true);
  // 0x1c: u32
  if (data?.Flags !== undefined) view.setUint32(28, Number(data.Flags), true);
  // 0x20: pointer
  if (data?.ClassData !== undefined) view.setBigUint64(32, data.ClassData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClassData))), true);
  return buf;
}

export class DHCP_CLASS_INFO_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get ClassName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get ClassComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ClassDataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get IsVendor(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get EnterpriseNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Flags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get ClassData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set ClassName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set ClassComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set ClassDataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set IsVendor(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set EnterpriseNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Flags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set ClassData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLASS_INFO_ARRAY_V6 (size: 16)
 */
export interface DHCP_CLASS_INFO_ARRAY_V6 {
  /** u32 */
  NumElements: number;
  /** ptr */
  Classes: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLASS_INFO_ARRAY_V6 = 16;

export function allocDHCP_CLASS_INFO_ARRAY_V6(data?: Partial<DHCP_CLASS_INFO_ARRAY_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLASS_INFO_ARRAY_V6);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Classes !== undefined) view.setBigUint64(8, data.Classes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Classes))), true);
  return buf;
}

export class DHCP_CLASS_INFO_ARRAY_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Classes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Classes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SERVER_SPECIFIC_STRINGS (size: 16)
 */
export interface DHCP_SERVER_SPECIFIC_STRINGS {
  /** Windows.Win32.Foundation.PWSTR */
  DefaultVendorClassName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DefaultUserClassName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDHCP_SERVER_SPECIFIC_STRINGS = 16;

export function allocDHCP_SERVER_SPECIFIC_STRINGS(data?: Partial<DHCP_SERVER_SPECIFIC_STRINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SERVER_SPECIFIC_STRINGS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.DefaultVendorClassName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.DefaultVendorClassName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.DefaultUserClassName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DefaultUserClassName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class DHCP_SERVER_SPECIFIC_STRINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get DefaultVendorClassName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get DefaultUserClassName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set DefaultVendorClassName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set DefaultUserClassName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_IP_RESERVATION_V4 (size: 24)
 */
export interface DHCP_IP_RESERVATION_V4 {
  /** u32 */
  ReservedIpAddress: number;
  /** ptr */
  ReservedForClient: Deno.PointerValue | Uint8Array;
  /** u8 */
  bAllowedClientTypes: number;
}

export const sizeofDHCP_IP_RESERVATION_V4 = 24;

export function allocDHCP_IP_RESERVATION_V4(data?: Partial<DHCP_IP_RESERVATION_V4>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_IP_RESERVATION_V4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReservedIpAddress !== undefined) view.setUint32(0, Number(data.ReservedIpAddress), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ReservedForClient !== undefined) view.setBigUint64(8, data.ReservedForClient === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedForClient))), true);
  // 0x10: u8
  if (data?.bAllowedClientTypes !== undefined) view.setUint8(16, Number(data.bAllowedClientTypes));
  // 0x11: pad7
  return buf;
}

export class DHCP_IP_RESERVATION_V4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ReservedIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ReservedForClient(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get bAllowedClientTypes(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x00: u32
  set ReservedIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ReservedForClient(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set bAllowedClientTypes(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_IP_RESERVATION_INFO (size: 40)
 */
export interface DHCP_IP_RESERVATION_INFO {
  /** u32 */
  ReservedIpAddress: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ReservedForClient: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ReservedClientName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ReservedClientDesc: string | null | Uint8Array | Uint16Array;
  /** u8 */
  bAllowedClientTypes: number;
  /** u8 */
  fOptionsPresent: number;
}

export const sizeofDHCP_IP_RESERVATION_INFO = 40;

export function allocDHCP_IP_RESERVATION_INFO(data?: Partial<DHCP_IP_RESERVATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_IP_RESERVATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReservedIpAddress !== undefined) view.setUint32(0, Number(data.ReservedIpAddress), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ReservedForClient !== undefined) view.setBigUint64(8, data.ReservedForClient === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedForClient))), true);
  // 0x10: buffer
  if (data?.ReservedClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ReservedClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ReservedClientDesc !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ReservedClientDesc);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u8
  if (data?.bAllowedClientTypes !== undefined) view.setUint8(32, Number(data.bAllowedClientTypes));
  // 0x21: u8
  if (data?.fOptionsPresent !== undefined) view.setUint8(33, Number(data.fOptionsPresent));
  // 0x22: pad6
  return buf;
}

export class DHCP_IP_RESERVATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ReservedIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ReservedForClient(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ReservedClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ReservedClientDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u8
  get bAllowedClientTypes(): number {
    return this.view.getUint8(32);
  }

  // 0x21: u8
  get fOptionsPresent(): number {
    return this.view.getUint8(33);
  }

  // 0x22: pad6

  // 0x00: u32
  set ReservedIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ReservedForClient(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ReservedClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ReservedClientDesc(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u8
  set bAllowedClientTypes(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: u8
  set fOptionsPresent(value: number) {
    this.view.setUint8(33, value);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_RESERVATION_INFO_ARRAY (size: 16)
 */
export interface DHCP_RESERVATION_INFO_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_RESERVATION_INFO_ARRAY = 16;

export function allocDHCP_RESERVATION_INFO_ARRAY(data?: Partial<DHCP_RESERVATION_INFO_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_RESERVATION_INFO_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_RESERVATION_INFO_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * DHCP_SUBNET_ELEMENT_UNION_V4 (size: 40)
 */
export interface DHCP_SUBNET_ELEMENT_UNION_V4 {
  /** ptr */
  IpRange: Deno.PointerValue | Uint8Array;
  /** ptr */
  SecondaryHost: Deno.PointerValue | Uint8Array;
  /** ptr */
  ReservedIp: Deno.PointerValue | Uint8Array;
  /** ptr */
  ExcludeIpRange: Deno.PointerValue | Uint8Array;
  /** ptr */
  IpUsedCluster: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_SUBNET_ELEMENT_UNION_V4 = 40;

export function allocDHCP_SUBNET_ELEMENT_UNION_V4(data?: Partial<DHCP_SUBNET_ELEMENT_UNION_V4>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_ELEMENT_UNION_V4);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IpRange !== undefined) view.setBigUint64(0, data.IpRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IpRange))), true);
  // 0x08: pointer
  if (data?.SecondaryHost !== undefined) view.setBigUint64(8, data.SecondaryHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SecondaryHost))), true);
  // 0x10: pointer
  if (data?.ReservedIp !== undefined) view.setBigUint64(16, data.ReservedIp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedIp))), true);
  // 0x18: pointer
  if (data?.ExcludeIpRange !== undefined) view.setBigUint64(24, data.ExcludeIpRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExcludeIpRange))), true);
  // 0x20: pointer
  if (data?.IpUsedCluster !== undefined) view.setBigUint64(32, data.IpUsedCluster === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IpUsedCluster))), true);
  return buf;
}

export class DHCP_SUBNET_ELEMENT_UNION_V4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IpRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get SecondaryHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ReservedIp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExcludeIpRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get IpUsedCluster(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set IpRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set SecondaryHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ReservedIp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExcludeIpRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set IpUsedCluster(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_DATA_V4 (size: 16)
 */
export interface DHCP_SUBNET_ELEMENT_DATA_V4 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_TYPE */
  ElementType: DHCP_SUBNET_ELEMENT_TYPE;
  /** DHCP_SUBNET_ELEMENT_UNION_V4 */
  Element: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_SUBNET_ELEMENT_DATA_V4 = 16;

export function allocDHCP_SUBNET_ELEMENT_DATA_V4(data?: Partial<DHCP_SUBNET_ELEMENT_DATA_V4>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_ELEMENT_DATA_V4);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ElementType !== undefined) view.setInt32(0, Number(data.ElementType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class DHCP_SUBNET_ELEMENT_DATA_V4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ElementType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set ElementType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4 (size: 16)
 */
export interface DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4 {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_SUBNET_ELEMENT_INFO_ARRAY_V4 = 16;

export function allocDHCP_SUBNET_ELEMENT_INFO_ARRAY_V4(data?: Partial<DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_ELEMENT_INFO_ARRAY_V4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_V4 (size: 56)
 */
export interface DHCP_CLIENT_INFO_V4 {
  /** u32 */
  ClientIpAddress: number;
  /** u32 */
  SubnetMask: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientHardwareAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClientComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ClientLeaseExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO */
  OwnerHost: Uint8Array | Deno.PointerValue;
  /** u8 */
  bClientType: number;
}

export const sizeofDHCP_CLIENT_INFO_V4 = 56;

export function allocDHCP_CLIENT_INFO_V4(data?: Partial<DHCP_CLIENT_INFO_V4>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_V4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClientIpAddress !== undefined) view.setUint32(0, Number(data.ClientIpAddress), true);
  // 0x04: u32
  if (data?.SubnetMask !== undefined) view.setUint32(4, Number(data.SubnetMask), true);
  // 0x08: pointer
  if (data?.ClientHardwareAddress !== undefined) view.setBigUint64(8, data.ClientHardwareAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientHardwareAddress))), true);
  // 0x10: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ClientComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClientComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.ClientLeaseExpires !== undefined) view.setBigUint64(32, data.ClientLeaseExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientLeaseExpires))), true);
  // 0x28: pointer
  if (data?.OwnerHost !== undefined) view.setBigUint64(40, data.OwnerHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwnerHost))), true);
  // 0x30: u8
  if (data?.bClientType !== undefined) view.setUint8(48, Number(data.bClientType));
  // 0x31: pad7
  return buf;
}

export class DHCP_CLIENT_INFO_V4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClientIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubnetMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ClientHardwareAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ClientComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ClientLeaseExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OwnerHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u8
  get bClientType(): number {
    return this.view.getUint8(48);
  }

  // 0x31: pad7

  // 0x00: u32
  set ClientIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubnetMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ClientHardwareAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ClientComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set ClientLeaseExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OwnerHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u8
  set bClientType(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: pad7
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_ARRAY_V4 (size: 16)
 */
export interface DHCP_CLIENT_INFO_ARRAY_V4 {
  /** u32 */
  NumElements: number;
  /** ptr */
  Clients: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLIENT_INFO_ARRAY_V4 = 16;

export function allocDHCP_CLIENT_INFO_ARRAY_V4(data?: Partial<DHCP_CLIENT_INFO_ARRAY_V4>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_ARRAY_V4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Clients !== undefined) view.setBigUint64(8, data.Clients === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Clients))), true);
  return buf;
}

export class DHCP_CLIENT_INFO_ARRAY_V4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Clients(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Clients(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SERVER_CONFIG_INFO_V4 (size: 80)
 */
export interface DHCP_SERVER_CONFIG_INFO_V4 {
  /** u32 */
  APIProtocolSupport: number;
  /** Windows.Win32.Foundation.PWSTR */
  DatabaseName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DatabasePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  BackupPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  BackupInterval: number;
  /** u32 */
  DatabaseLoggingFlag: number;
  /** u32 */
  RestoreFlag: number;
  /** u32 */
  DatabaseCleanupInterval: number;
  /** u32 */
  DebugFlag: number;
  /** u32 */
  dwPingRetries: number;
  /** u32 */
  cbBootTableString: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszBootTableString: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fAuditLog: boolean;
}

export const sizeofDHCP_SERVER_CONFIG_INFO_V4 = 80;

export function allocDHCP_SERVER_CONFIG_INFO_V4(data?: Partial<DHCP_SERVER_CONFIG_INFO_V4>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SERVER_CONFIG_INFO_V4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.APIProtocolSupport !== undefined) view.setUint32(0, Number(data.APIProtocolSupport), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.DatabaseName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DatabaseName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.DatabasePath !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.DatabasePath);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.BackupPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.BackupPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.BackupInterval !== undefined) view.setUint32(32, Number(data.BackupInterval), true);
  // 0x24: u32
  if (data?.DatabaseLoggingFlag !== undefined) view.setUint32(36, Number(data.DatabaseLoggingFlag), true);
  // 0x28: u32
  if (data?.RestoreFlag !== undefined) view.setUint32(40, Number(data.RestoreFlag), true);
  // 0x2c: u32
  if (data?.DatabaseCleanupInterval !== undefined) view.setUint32(44, Number(data.DatabaseCleanupInterval), true);
  // 0x30: u32
  if (data?.DebugFlag !== undefined) view.setUint32(48, Number(data.DebugFlag), true);
  // 0x34: u32
  if (data?.dwPingRetries !== undefined) view.setUint32(52, Number(data.dwPingRetries), true);
  // 0x38: u32
  if (data?.cbBootTableString !== undefined) view.setUint32(56, Number(data.cbBootTableString), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.wszBootTableString !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.wszBootTableString);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: i32
  if (data?.fAuditLog !== undefined) view.setInt32(72, Number(data.fAuditLog), true);
  // 0x4c: pad4
  return buf;
}

export class DHCP_SERVER_CONFIG_INFO_V4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get APIProtocolSupport(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get DatabaseName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get DatabasePath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get BackupPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get BackupInterval(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DatabaseLoggingFlag(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get RestoreFlag(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get DatabaseCleanupInterval(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get DebugFlag(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwPingRetries(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get cbBootTableString(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get wszBootTableString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i32
  get fAuditLog(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u32
  set APIProtocolSupport(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set DatabaseName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set DatabasePath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set BackupPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set BackupInterval(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DatabaseLoggingFlag(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set RestoreFlag(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set DatabaseCleanupInterval(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set DebugFlag(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwPingRetries(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set cbBootTableString(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set wszBootTableString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: i32
  set fAuditLog(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SERVER_CONFIG_INFO_VQ (size: 88)
 */
export interface DHCP_SERVER_CONFIG_INFO_VQ {
  /** u32 */
  APIProtocolSupport: number;
  /** Windows.Win32.Foundation.PWSTR */
  DatabaseName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DatabasePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  BackupPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  BackupInterval: number;
  /** u32 */
  DatabaseLoggingFlag: number;
  /** u32 */
  RestoreFlag: number;
  /** u32 */
  DatabaseCleanupInterval: number;
  /** u32 */
  DebugFlag: number;
  /** u32 */
  dwPingRetries: number;
  /** u32 */
  cbBootTableString: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszBootTableString: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fAuditLog: boolean;
  /** Windows.Win32.Foundation.BOOL */
  QuarantineOn: boolean;
  /** u32 */
  QuarDefFail: number;
  /** Windows.Win32.Foundation.BOOL */
  QuarRuntimeStatus: boolean;
}

export const sizeofDHCP_SERVER_CONFIG_INFO_VQ = 88;

export function allocDHCP_SERVER_CONFIG_INFO_VQ(data?: Partial<DHCP_SERVER_CONFIG_INFO_VQ>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SERVER_CONFIG_INFO_VQ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.APIProtocolSupport !== undefined) view.setUint32(0, Number(data.APIProtocolSupport), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.DatabaseName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DatabaseName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.DatabasePath !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.DatabasePath);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.BackupPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.BackupPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.BackupInterval !== undefined) view.setUint32(32, Number(data.BackupInterval), true);
  // 0x24: u32
  if (data?.DatabaseLoggingFlag !== undefined) view.setUint32(36, Number(data.DatabaseLoggingFlag), true);
  // 0x28: u32
  if (data?.RestoreFlag !== undefined) view.setUint32(40, Number(data.RestoreFlag), true);
  // 0x2c: u32
  if (data?.DatabaseCleanupInterval !== undefined) view.setUint32(44, Number(data.DatabaseCleanupInterval), true);
  // 0x30: u32
  if (data?.DebugFlag !== undefined) view.setUint32(48, Number(data.DebugFlag), true);
  // 0x34: u32
  if (data?.dwPingRetries !== undefined) view.setUint32(52, Number(data.dwPingRetries), true);
  // 0x38: u32
  if (data?.cbBootTableString !== undefined) view.setUint32(56, Number(data.cbBootTableString), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.wszBootTableString !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.wszBootTableString);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: i32
  if (data?.fAuditLog !== undefined) view.setInt32(72, Number(data.fAuditLog), true);
  // 0x4c: i32
  if (data?.QuarantineOn !== undefined) view.setInt32(76, Number(data.QuarantineOn), true);
  // 0x50: u32
  if (data?.QuarDefFail !== undefined) view.setUint32(80, Number(data.QuarDefFail), true);
  // 0x54: i32
  if (data?.QuarRuntimeStatus !== undefined) view.setInt32(84, Number(data.QuarRuntimeStatus), true);
  return buf;
}

export class DHCP_SERVER_CONFIG_INFO_VQView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get APIProtocolSupport(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get DatabaseName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get DatabasePath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get BackupPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get BackupInterval(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DatabaseLoggingFlag(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get RestoreFlag(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get DatabaseCleanupInterval(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get DebugFlag(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwPingRetries(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get cbBootTableString(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get wszBootTableString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i32
  get fAuditLog(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: i32
  get QuarantineOn(): number {
    return this.view.getInt32(76, true);
  }

  // 0x50: u32
  get QuarDefFail(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: i32
  get QuarRuntimeStatus(): number {
    return this.view.getInt32(84, true);
  }

  // 0x00: u32
  set APIProtocolSupport(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set DatabaseName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set DatabasePath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set BackupPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set BackupInterval(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DatabaseLoggingFlag(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set RestoreFlag(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set DatabaseCleanupInterval(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set DebugFlag(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwPingRetries(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set cbBootTableString(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set wszBootTableString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: i32
  set fAuditLog(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: i32
  set QuarantineOn(value: number) {
    this.view.setInt32(76, value, true);
  }

  // 0x50: u32
  set QuarDefFail(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: i32
  set QuarRuntimeStatus(value: number) {
    this.view.setInt32(84, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SERVER_CONFIG_INFO_V6 (size: 40)
 */
export interface DHCP_SERVER_CONFIG_INFO_V6 {
  /** Windows.Win32.Foundation.BOOL */
  UnicastFlag: boolean;
  /** Windows.Win32.Foundation.BOOL */
  RapidCommitFlag: boolean;
  /** u32 */
  PreferredLifetime: number;
  /** u32 */
  ValidLifetime: number;
  /** u32 */
  T1: number;
  /** u32 */
  T2: number;
  /** u32 */
  PreferredLifetimeIATA: number;
  /** u32 */
  ValidLifetimeIATA: number;
  /** Windows.Win32.Foundation.BOOL */
  fAuditLog: boolean;
}

export const sizeofDHCP_SERVER_CONFIG_INFO_V6 = 40;

export function allocDHCP_SERVER_CONFIG_INFO_V6(data?: Partial<DHCP_SERVER_CONFIG_INFO_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SERVER_CONFIG_INFO_V6);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.UnicastFlag !== undefined) view.setInt32(0, Number(data.UnicastFlag), true);
  // 0x04: i32
  if (data?.RapidCommitFlag !== undefined) view.setInt32(4, Number(data.RapidCommitFlag), true);
  // 0x08: u32
  if (data?.PreferredLifetime !== undefined) view.setUint32(8, Number(data.PreferredLifetime), true);
  // 0x0c: u32
  if (data?.ValidLifetime !== undefined) view.setUint32(12, Number(data.ValidLifetime), true);
  // 0x10: u32
  if (data?.T1 !== undefined) view.setUint32(16, Number(data.T1), true);
  // 0x14: u32
  if (data?.T2 !== undefined) view.setUint32(20, Number(data.T2), true);
  // 0x18: u32
  if (data?.PreferredLifetimeIATA !== undefined) view.setUint32(24, Number(data.PreferredLifetimeIATA), true);
  // 0x1c: u32
  if (data?.ValidLifetimeIATA !== undefined) view.setUint32(28, Number(data.ValidLifetimeIATA), true);
  // 0x20: i32
  if (data?.fAuditLog !== undefined) view.setInt32(32, Number(data.fAuditLog), true);
  // 0x24: pad4
  return buf;
}

export class DHCP_SERVER_CONFIG_INFO_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get UnicastFlag(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get RapidCommitFlag(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get PreferredLifetime(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ValidLifetime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get T1(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get T2(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get PreferredLifetimeIATA(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ValidLifetimeIATA(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get fAuditLog(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: i32
  set UnicastFlag(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set RapidCommitFlag(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set PreferredLifetime(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ValidLifetime(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set T1(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set T2(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set PreferredLifetimeIATA(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ValidLifetimeIATA(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set fAuditLog(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUPER_SCOPE_TABLE_ENTRY (size: 24)
 */
export interface DHCP_SUPER_SCOPE_TABLE_ENTRY {
  /** u32 */
  SubnetAddress: number;
  /** u32 */
  SuperScopeNumber: number;
  /** u32 */
  NextInSuperScope: number;
  /** Windows.Win32.Foundation.PWSTR */
  SuperScopeName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDHCP_SUPER_SCOPE_TABLE_ENTRY = 24;

export function allocDHCP_SUPER_SCOPE_TABLE_ENTRY(data?: Partial<DHCP_SUPER_SCOPE_TABLE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUPER_SCOPE_TABLE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SubnetAddress !== undefined) view.setUint32(0, Number(data.SubnetAddress), true);
  // 0x04: u32
  if (data?.SuperScopeNumber !== undefined) view.setUint32(4, Number(data.SuperScopeNumber), true);
  // 0x08: u32
  if (data?.NextInSuperScope !== undefined) view.setUint32(8, Number(data.NextInSuperScope), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.SuperScopeName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.SuperScopeName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DHCP_SUPER_SCOPE_TABLE_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SubnetAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SuperScopeNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NextInSuperScope(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get SuperScopeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set SubnetAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SuperScopeNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NextInSuperScope(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set SuperScopeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUPER_SCOPE_TABLE (size: 16)
 */
export interface DHCP_SUPER_SCOPE_TABLE {
  /** u32 */
  cEntries: number;
  /** ptr */
  pEntries: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_SUPER_SCOPE_TABLE = 16;

export function allocDHCP_SUPER_SCOPE_TABLE(data?: Partial<DHCP_SUPER_SCOPE_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUPER_SCOPE_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEntries !== undefined) view.setBigUint64(8, data.pEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEntries))), true);
  return buf;
}

export class DHCP_SUPER_SCOPE_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_V5 (size: 56)
 */
export interface DHCP_CLIENT_INFO_V5 {
  /** u32 */
  ClientIpAddress: number;
  /** u32 */
  SubnetMask: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientHardwareAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClientComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ClientLeaseExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO */
  OwnerHost: Uint8Array | Deno.PointerValue;
  /** u8 */
  bClientType: number;
  /** u8 */
  AddressState: number;
}

export const sizeofDHCP_CLIENT_INFO_V5 = 56;

export function allocDHCP_CLIENT_INFO_V5(data?: Partial<DHCP_CLIENT_INFO_V5>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_V5);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClientIpAddress !== undefined) view.setUint32(0, Number(data.ClientIpAddress), true);
  // 0x04: u32
  if (data?.SubnetMask !== undefined) view.setUint32(4, Number(data.SubnetMask), true);
  // 0x08: pointer
  if (data?.ClientHardwareAddress !== undefined) view.setBigUint64(8, data.ClientHardwareAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientHardwareAddress))), true);
  // 0x10: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ClientComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClientComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.ClientLeaseExpires !== undefined) view.setBigUint64(32, data.ClientLeaseExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientLeaseExpires))), true);
  // 0x28: pointer
  if (data?.OwnerHost !== undefined) view.setBigUint64(40, data.OwnerHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwnerHost))), true);
  // 0x30: u8
  if (data?.bClientType !== undefined) view.setUint8(48, Number(data.bClientType));
  // 0x31: u8
  if (data?.AddressState !== undefined) view.setUint8(49, Number(data.AddressState));
  // 0x32: pad6
  return buf;
}

export class DHCP_CLIENT_INFO_V5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClientIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubnetMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ClientHardwareAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ClientComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ClientLeaseExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OwnerHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u8
  get bClientType(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get AddressState(): number {
    return this.view.getUint8(49);
  }

  // 0x32: pad6

  // 0x00: u32
  set ClientIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubnetMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ClientHardwareAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ClientComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set ClientLeaseExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OwnerHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u8
  set bClientType(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set AddressState(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: pad6
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_ARRAY_V5 (size: 16)
 */
export interface DHCP_CLIENT_INFO_ARRAY_V5 {
  /** u32 */
  NumElements: number;
  /** ptr */
  Clients: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLIENT_INFO_ARRAY_V5 = 16;

export function allocDHCP_CLIENT_INFO_ARRAY_V5(data?: Partial<DHCP_CLIENT_INFO_ARRAY_V5>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_ARRAY_V5);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Clients !== undefined) view.setBigUint64(8, data.Clients === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Clients))), true);
  return buf;
}

export class DHCP_CLIENT_INFO_ARRAY_V5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Clients(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Clients(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_ALL_OPTIONS (size: 32)
 */
export interface DHCP_ALL_OPTIONS {
  /** u32 */
  Flags: number;
  /** ptr */
  NonVendorOptions: Deno.PointerValue | Uint8Array;
  /** u32 */
  NumVendorOptions: number;
  /** ptr */
  VendorOptions: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_ALL_OPTIONS = 32;

export function allocDHCP_ALL_OPTIONS(data?: Partial<DHCP_ALL_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_ALL_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.NonVendorOptions !== undefined) view.setBigUint64(8, data.NonVendorOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NonVendorOptions))), true);
  // 0x10: u32
  if (data?.NumVendorOptions !== undefined) view.setUint32(16, Number(data.NumVendorOptions), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.VendorOptions !== undefined) view.setBigUint64(24, data.VendorOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VendorOptions))), true);
  return buf;
}

export class DHCP_ALL_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get NonVendorOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get NumVendorOptions(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get VendorOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set NonVendorOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set NumVendorOptions(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set VendorOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_ALL_OPTION_VALUES (size: 16)
 */
export interface DHCP_ALL_OPTION_VALUES {
  /** u32 */
  Flags: number;
  /** u32 */
  NumElements: number;
  /** ptr */
  Options: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_ALL_OPTION_VALUES = 16;

export function allocDHCP_ALL_OPTION_VALUES(data?: Partial<DHCP_ALL_OPTION_VALUES>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_ALL_OPTION_VALUES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.NumElements !== undefined) view.setUint32(4, Number(data.NumElements), true);
  // 0x08: pointer
  if (data?.Options !== undefined) view.setBigUint64(8, data.Options === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Options))), true);
  return buf;
}

export class DHCP_ALL_OPTION_VALUESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumElements(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Options(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumElements(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Options(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_ALL_OPTION_VALUES_PB (size: 16)
 */
export interface DHCP_ALL_OPTION_VALUES_PB {
  /** u32 */
  Flags: number;
  /** u32 */
  NumElements: number;
  /** ptr */
  Options: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_ALL_OPTION_VALUES_PB = 16;

export function allocDHCP_ALL_OPTION_VALUES_PB(data?: Partial<DHCP_ALL_OPTION_VALUES_PB>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_ALL_OPTION_VALUES_PB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.NumElements !== undefined) view.setUint32(4, Number(data.NumElements), true);
  // 0x08: pointer
  if (data?.Options !== undefined) view.setBigUint64(8, data.Options === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Options))), true);
  return buf;
}

export class DHCP_ALL_OPTION_VALUES_PBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumElements(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Options(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumElements(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Options(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPDS_SERVER (size: 48)
 */
export interface DHCPDS_SERVER {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PWSTR */
  ServerName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ServerAddress: number;
  /** u32 */
  Flags: number;
  /** u32 */
  State: number;
  /** Windows.Win32.Foundation.PWSTR */
  DsLocation: string | null | Uint8Array | Uint16Array;
  /** u32 */
  DsLocType: number;
}

export const sizeofDHCPDS_SERVER = 48;

export function allocDHCPDS_SERVER(data?: Partial<DHCPDS_SERVER>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPDS_SERVER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.ServerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ServerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.ServerAddress !== undefined) view.setUint32(16, Number(data.ServerAddress), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: u32
  if (data?.State !== undefined) view.setUint32(24, Number(data.State), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.DsLocation !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.DsLocation);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.DsLocType !== undefined) view.setUint32(40, Number(data.DsLocType), true);
  // 0x2c: pad4
  return buf;
}

export class DHCPDS_SERVERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get ServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ServerAddress(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get State(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get DsLocation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get DsLocType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set ServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set ServerAddress(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set State(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set DsLocation(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set DsLocType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPDS_SERVERS (size: 16)
 */
export interface DHCPDS_SERVERS {
  /** u32 */
  Flags: number;
  /** u32 */
  NumElements: number;
  /** ptr */
  Servers: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCPDS_SERVERS = 16;

export function allocDHCPDS_SERVERS(data?: Partial<DHCPDS_SERVERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPDS_SERVERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.NumElements !== undefined) view.setUint32(4, Number(data.NumElements), true);
  // 0x08: pointer
  if (data?.Servers !== undefined) view.setBigUint64(8, data.Servers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Servers))), true);
  return buf;
}

export class DHCPDS_SERVERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumElements(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Servers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumElements(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Servers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_ATTRIB (size: 16)
 */
export interface DHCP_ATTRIB {
  /** u32 */
  DhcpAttribId: number;
  /** u32 */
  DhcpAttribType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_ATTRIB = 16;

export function allocDHCP_ATTRIB(data?: Partial<DHCP_ATTRIB>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_ATTRIB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DhcpAttribId !== undefined) view.setUint32(0, Number(data.DhcpAttribId), true);
  // 0x04: u32
  if (data?.DhcpAttribType !== undefined) view.setUint32(4, Number(data.DhcpAttribType), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class DHCP_ATTRIBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DhcpAttribId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DhcpAttribType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set DhcpAttribId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DhcpAttribType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_ATTRIB_ARRAY (size: 16)
 */
export interface DHCP_ATTRIB_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  DhcpAttribs: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_ATTRIB_ARRAY = 16;

export function allocDHCP_ATTRIB_ARRAY(data?: Partial<DHCP_ATTRIB_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_ATTRIB_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DhcpAttribs !== undefined) view.setBigUint64(8, data.DhcpAttribs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpAttribs))), true);
  return buf;
}

export class DHCP_ATTRIB_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DhcpAttribs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DhcpAttribs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_BOOTP_IP_RANGE (size: 16)
 */
export interface DHCP_BOOTP_IP_RANGE {
  /** u32 */
  StartAddress: number;
  /** u32 */
  EndAddress: number;
  /** u32 */
  BootpAllocated: number;
  /** u32 */
  MaxBootpAllowed: number;
}

export const sizeofDHCP_BOOTP_IP_RANGE = 16;

export function allocDHCP_BOOTP_IP_RANGE(data?: Partial<DHCP_BOOTP_IP_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_BOOTP_IP_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartAddress !== undefined) view.setUint32(0, Number(data.StartAddress), true);
  // 0x04: u32
  if (data?.EndAddress !== undefined) view.setUint32(4, Number(data.EndAddress), true);
  // 0x08: u32
  if (data?.BootpAllocated !== undefined) view.setUint32(8, Number(data.BootpAllocated), true);
  // 0x0c: u32
  if (data?.MaxBootpAllowed !== undefined) view.setUint32(12, Number(data.MaxBootpAllowed), true);
  return buf;
}

export class DHCP_BOOTP_IP_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StartAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get EndAddress(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get BootpAllocated(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MaxBootpAllowed(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set StartAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set EndAddress(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set BootpAllocated(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MaxBootpAllowed(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * _DHCP_SUBNET_ELEMENT_UNION_V5 (size: 40)
 */
export interface _DHCP_SUBNET_ELEMENT_UNION_V5 {
  /** ptr */
  IpRange: Deno.PointerValue | Uint8Array;
  /** ptr */
  SecondaryHost: Deno.PointerValue | Uint8Array;
  /** ptr */
  ReservedIp: Deno.PointerValue | Uint8Array;
  /** ptr */
  ExcludeIpRange: Deno.PointerValue | Uint8Array;
  /** ptr */
  IpUsedCluster: Deno.PointerValue | Uint8Array;
}

export const sizeof_DHCP_SUBNET_ELEMENT_UNION_V5 = 40;

export function alloc_DHCP_SUBNET_ELEMENT_UNION_V5(data?: Partial<_DHCP_SUBNET_ELEMENT_UNION_V5>): Uint8Array {
  const buf = new Uint8Array(sizeof_DHCP_SUBNET_ELEMENT_UNION_V5);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IpRange !== undefined) view.setBigUint64(0, data.IpRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IpRange))), true);
  // 0x08: pointer
  if (data?.SecondaryHost !== undefined) view.setBigUint64(8, data.SecondaryHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SecondaryHost))), true);
  // 0x10: pointer
  if (data?.ReservedIp !== undefined) view.setBigUint64(16, data.ReservedIp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedIp))), true);
  // 0x18: pointer
  if (data?.ExcludeIpRange !== undefined) view.setBigUint64(24, data.ExcludeIpRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExcludeIpRange))), true);
  // 0x20: pointer
  if (data?.IpUsedCluster !== undefined) view.setBigUint64(32, data.IpUsedCluster === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IpUsedCluster))), true);
  return buf;
}

export class _DHCP_SUBNET_ELEMENT_UNION_V5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IpRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get SecondaryHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ReservedIp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExcludeIpRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get IpUsedCluster(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set IpRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set SecondaryHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ReservedIp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExcludeIpRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set IpUsedCluster(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_DATA_V5 (size: 16)
 */
export interface DHCP_SUBNET_ELEMENT_DATA_V5 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_TYPE */
  ElementType: DHCP_SUBNET_ELEMENT_TYPE;
  /** _DHCP_SUBNET_ELEMENT_UNION_V5 */
  Element: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_SUBNET_ELEMENT_DATA_V5 = 16;

export function allocDHCP_SUBNET_ELEMENT_DATA_V5(data?: Partial<DHCP_SUBNET_ELEMENT_DATA_V5>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_ELEMENT_DATA_V5);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ElementType !== undefined) view.setInt32(0, Number(data.ElementType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class DHCP_SUBNET_ELEMENT_DATA_V5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ElementType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set ElementType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5 (size: 16)
 */
export interface DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5 {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_SUBNET_ELEMENT_INFO_ARRAY_V5 = 16;

export function allocDHCP_SUBNET_ELEMENT_INFO_ARRAY_V5(data?: Partial<DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_ELEMENT_INFO_ARRAY_V5);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_PERF_STATS (size: 80)
 */
export interface DHCP_PERF_STATS {
  /** u32 */
  dwNumPacketsReceived: number;
  /** u32 */
  dwNumPacketsDuplicate: number;
  /** u32 */
  dwNumPacketsExpired: number;
  /** u32 */
  dwNumMilliSecondsProcessed: number;
  /** u32 */
  dwNumPacketsInActiveQueue: number;
  /** u32 */
  dwNumPacketsInPingQueue: number;
  /** u32 */
  dwNumDiscoversReceived: number;
  /** u32 */
  dwNumOffersSent: number;
  /** u32 */
  dwNumRequestsReceived: number;
  /** u32 */
  dwNumInformsReceived: number;
  /** u32 */
  dwNumAcksSent: number;
  /** u32 */
  dwNumNacksSent: number;
  /** u32 */
  dwNumDeclinesReceived: number;
  /** u32 */
  dwNumReleasesReceived: number;
  /** u32 */
  dwNumDelayedOfferInQueue: number;
  /** u32 */
  dwNumPacketsProcessed: number;
  /** u32 */
  dwNumPacketsInQuarWaitingQueue: number;
  /** u32 */
  dwNumPacketsInQuarReadyQueue: number;
  /** u32 */
  dwNumPacketsInQuarDecisionQueue: number;
}

export const sizeofDHCP_PERF_STATS = 80;

export function allocDHCP_PERF_STATS(data?: Partial<DHCP_PERF_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_PERF_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumPacketsReceived !== undefined) view.setUint32(0, Number(data.dwNumPacketsReceived), true);
  // 0x04: u32
  if (data?.dwNumPacketsDuplicate !== undefined) view.setUint32(4, Number(data.dwNumPacketsDuplicate), true);
  // 0x08: u32
  if (data?.dwNumPacketsExpired !== undefined) view.setUint32(8, Number(data.dwNumPacketsExpired), true);
  // 0x0c: u32
  if (data?.dwNumMilliSecondsProcessed !== undefined) view.setUint32(12, Number(data.dwNumMilliSecondsProcessed), true);
  // 0x10: u32
  if (data?.dwNumPacketsInActiveQueue !== undefined) view.setUint32(16, Number(data.dwNumPacketsInActiveQueue), true);
  // 0x14: u32
  if (data?.dwNumPacketsInPingQueue !== undefined) view.setUint32(20, Number(data.dwNumPacketsInPingQueue), true);
  // 0x18: u32
  if (data?.dwNumDiscoversReceived !== undefined) view.setUint32(24, Number(data.dwNumDiscoversReceived), true);
  // 0x1c: u32
  if (data?.dwNumOffersSent !== undefined) view.setUint32(28, Number(data.dwNumOffersSent), true);
  // 0x20: u32
  if (data?.dwNumRequestsReceived !== undefined) view.setUint32(32, Number(data.dwNumRequestsReceived), true);
  // 0x24: u32
  if (data?.dwNumInformsReceived !== undefined) view.setUint32(36, Number(data.dwNumInformsReceived), true);
  // 0x28: u32
  if (data?.dwNumAcksSent !== undefined) view.setUint32(40, Number(data.dwNumAcksSent), true);
  // 0x2c: u32
  if (data?.dwNumNacksSent !== undefined) view.setUint32(44, Number(data.dwNumNacksSent), true);
  // 0x30: u32
  if (data?.dwNumDeclinesReceived !== undefined) view.setUint32(48, Number(data.dwNumDeclinesReceived), true);
  // 0x34: u32
  if (data?.dwNumReleasesReceived !== undefined) view.setUint32(52, Number(data.dwNumReleasesReceived), true);
  // 0x38: u32
  if (data?.dwNumDelayedOfferInQueue !== undefined) view.setUint32(56, Number(data.dwNumDelayedOfferInQueue), true);
  // 0x3c: u32
  if (data?.dwNumPacketsProcessed !== undefined) view.setUint32(60, Number(data.dwNumPacketsProcessed), true);
  // 0x40: u32
  if (data?.dwNumPacketsInQuarWaitingQueue !== undefined) view.setUint32(64, Number(data.dwNumPacketsInQuarWaitingQueue), true);
  // 0x44: u32
  if (data?.dwNumPacketsInQuarReadyQueue !== undefined) view.setUint32(68, Number(data.dwNumPacketsInQuarReadyQueue), true);
  // 0x48: u32
  if (data?.dwNumPacketsInQuarDecisionQueue !== undefined) view.setUint32(72, Number(data.dwNumPacketsInQuarDecisionQueue), true);
  // 0x4c: pad4
  return buf;
}

export class DHCP_PERF_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumPacketsReceived(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNumPacketsDuplicate(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNumPacketsExpired(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwNumMilliSecondsProcessed(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwNumPacketsInActiveQueue(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwNumPacketsInPingQueue(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwNumDiscoversReceived(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwNumOffersSent(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwNumRequestsReceived(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwNumInformsReceived(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwNumAcksSent(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwNumNacksSent(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwNumDeclinesReceived(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwNumReleasesReceived(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwNumDelayedOfferInQueue(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwNumPacketsProcessed(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwNumPacketsInQuarWaitingQueue(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwNumPacketsInQuarReadyQueue(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwNumPacketsInQuarDecisionQueue(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u32
  set dwNumPacketsReceived(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNumPacketsDuplicate(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNumPacketsExpired(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwNumMilliSecondsProcessed(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwNumPacketsInActiveQueue(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwNumPacketsInPingQueue(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwNumDiscoversReceived(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwNumOffersSent(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwNumRequestsReceived(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwNumInformsReceived(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwNumAcksSent(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwNumNacksSent(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwNumDeclinesReceived(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwNumReleasesReceived(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwNumDelayedOfferInQueue(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwNumPacketsProcessed(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwNumPacketsInQuarWaitingQueue(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwNumPacketsInQuarReadyQueue(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwNumPacketsInQuarDecisionQueue(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_BIND_ELEMENT (size: 40)
 */
export interface DHCP_BIND_ELEMENT {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.BOOL */
  fBoundToDHCPServer: boolean;
  /** u32 */
  AdapterPrimaryAddress: number;
  /** u32 */
  AdapterSubnetAddress: number;
  /** Windows.Win32.Foundation.PWSTR */
  IfDescription: string | null | Uint8Array | Uint16Array;
  /** u32 */
  IfIdSize: number;
  /** ptr */
  IfId: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_BIND_ELEMENT = 40;

export function allocDHCP_BIND_ELEMENT(data?: Partial<DHCP_BIND_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_BIND_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: i32
  if (data?.fBoundToDHCPServer !== undefined) view.setInt32(4, Number(data.fBoundToDHCPServer), true);
  // 0x08: u32
  if (data?.AdapterPrimaryAddress !== undefined) view.setUint32(8, Number(data.AdapterPrimaryAddress), true);
  // 0x0c: u32
  if (data?.AdapterSubnetAddress !== undefined) view.setUint32(12, Number(data.AdapterSubnetAddress), true);
  // 0x10: buffer
  if (data?.IfDescription !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.IfDescription);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.IfIdSize !== undefined) view.setUint32(24, Number(data.IfIdSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.IfId !== undefined) view.setBigUint64(32, data.IfId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IfId))), true);
  return buf;
}

export class DHCP_BIND_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get fBoundToDHCPServer(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get AdapterPrimaryAddress(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get AdapterSubnetAddress(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: buffer
  get IfDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get IfIdSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get IfId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set fBoundToDHCPServer(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set AdapterPrimaryAddress(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set AdapterSubnetAddress(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: buffer
  set IfDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set IfIdSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set IfId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_BIND_ELEMENT_ARRAY (size: 16)
 */
export interface DHCP_BIND_ELEMENT_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_BIND_ELEMENT_ARRAY = 16;

export function allocDHCP_BIND_ELEMENT_ARRAY(data?: Partial<DHCP_BIND_ELEMENT_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_BIND_ELEMENT_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_BIND_ELEMENT_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV6_BIND_ELEMENT (size: 48)
 */
export interface DHCPV6_BIND_ELEMENT {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.BOOL */
  fBoundToDHCPServer: boolean;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  AdapterPrimaryAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  AdapterSubnetAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  IfDescription: string | null | Uint8Array | Uint16Array;
  /** u32 */
  IpV6IfIndex: number;
  /** u32 */
  IfIdSize: number;
  /** ptr */
  IfId: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCPV6_BIND_ELEMENT = 48;

export function allocDHCPV6_BIND_ELEMENT(data?: Partial<DHCPV6_BIND_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV6_BIND_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: i32
  if (data?.fBoundToDHCPServer !== undefined) view.setInt32(4, Number(data.fBoundToDHCPServer), true);
  // 0x08: pointer
  if (data?.AdapterPrimaryAddress !== undefined) view.setBigUint64(8, data.AdapterPrimaryAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdapterPrimaryAddress))), true);
  // 0x10: pointer
  if (data?.AdapterSubnetAddress !== undefined) view.setBigUint64(16, data.AdapterSubnetAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdapterSubnetAddress))), true);
  // 0x18: buffer
  if (data?.IfDescription !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.IfDescription);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.IpV6IfIndex !== undefined) view.setUint32(32, Number(data.IpV6IfIndex), true);
  // 0x24: u32
  if (data?.IfIdSize !== undefined) view.setUint32(36, Number(data.IfIdSize), true);
  // 0x28: pointer
  if (data?.IfId !== undefined) view.setBigUint64(40, data.IfId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IfId))), true);
  return buf;
}

export class DHCPV6_BIND_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get fBoundToDHCPServer(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get AdapterPrimaryAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get AdapterSubnetAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get IfDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get IpV6IfIndex(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get IfIdSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get IfId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set fBoundToDHCPServer(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set AdapterPrimaryAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set AdapterSubnetAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set IfDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set IpV6IfIndex(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set IfIdSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set IfId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV6_BIND_ELEMENT_ARRAY (size: 16)
 */
export interface DHCPV6_BIND_ELEMENT_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCPV6_BIND_ELEMENT_ARRAY = 16;

export function allocDHCPV6_BIND_ELEMENT_ARRAY(data?: Partial<DHCPV6_BIND_ELEMENT_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV6_BIND_ELEMENT_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCPV6_BIND_ELEMENT_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_IP_RANGE_V6 (size: 16)
 */
export interface DHCP_IP_RANGE_V6 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  StartAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  EndAddress: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_IP_RANGE_V6 = 16;

export function allocDHCP_IP_RANGE_V6(data?: Partial<DHCP_IP_RANGE_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_IP_RANGE_V6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartAddress !== undefined) view.setBigUint64(0, data.StartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StartAddress))), true);
  // 0x08: pointer
  if (data?.EndAddress !== undefined) view.setBigUint64(8, data.EndAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndAddress))), true);
  return buf;
}

export class DHCP_IP_RANGE_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get EndAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set StartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set EndAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO_V6 (size: 24)
 */
export interface DHCP_HOST_INFO_V6 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  IpAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  NetBiosName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  HostName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDHCP_HOST_INFO_V6 = 24;

export function allocDHCP_HOST_INFO_V6(data?: Partial<DHCP_HOST_INFO_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_HOST_INFO_V6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IpAddress !== undefined) view.setBigUint64(0, data.IpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IpAddress))), true);
  // 0x08: buffer
  if (data?.NetBiosName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.NetBiosName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.HostName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.HostName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DHCP_HOST_INFO_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get NetBiosName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get HostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set IpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set NetBiosName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set HostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_INFO_V6 (size: 40)
 */
export interface DHCP_SUBNET_INFO_V6 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  SubnetAddress: Uint8Array | Deno.PointerValue;
  /** u32 */
  Prefix: number;
  /** u16 */
  Preference: number;
  /** Windows.Win32.Foundation.PWSTR */
  SubnetName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SubnetComment: string | null | Uint8Array | Uint16Array;
  /** u32 */
  State: number;
  /** u32 */
  ScopeId: number;
}

export const sizeofDHCP_SUBNET_INFO_V6 = 40;

export function allocDHCP_SUBNET_INFO_V6(data?: Partial<DHCP_SUBNET_INFO_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_INFO_V6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubnetAddress !== undefined) view.setBigUint64(0, data.SubnetAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SubnetAddress))), true);
  // 0x08: u32
  if (data?.Prefix !== undefined) view.setUint32(8, Number(data.Prefix), true);
  // 0x0c: u16
  if (data?.Preference !== undefined) view.setUint16(12, Number(data.Preference), true);
  // 0x0e: pad2
  // 0x10: buffer
  if (data?.SubnetName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.SubnetName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.SubnetComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.SubnetComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.State !== undefined) view.setUint32(32, Number(data.State), true);
  // 0x24: u32
  if (data?.ScopeId !== undefined) view.setUint32(36, Number(data.ScopeId), true);
  return buf;
}

export class DHCP_SUBNET_INFO_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SubnetAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Prefix(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get Preference(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: pad2

  // 0x10: buffer
  get SubnetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get SubnetComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get State(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ScopeId(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: pointer
  set SubnetAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Prefix(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set Preference(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: pad2

  // 0x10: buffer
  set SubnetName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set SubnetComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set State(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ScopeId(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.SCOPE_MIB_INFO_V6 (size: 32)
 */
export interface SCOPE_MIB_INFO_V6 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  Subnet: Uint8Array | Deno.PointerValue;
  /** u64 */
  NumAddressesInuse: bigint | number;
  /** u64 */
  NumAddressesFree: bigint | number;
  /** u64 */
  NumPendingAdvertises: bigint | number;
}

export const sizeofSCOPE_MIB_INFO_V6 = 32;

export function allocSCOPE_MIB_INFO_V6(data?: Partial<SCOPE_MIB_INFO_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofSCOPE_MIB_INFO_V6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Subnet !== undefined) view.setBigUint64(0, data.Subnet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Subnet))), true);
  // 0x08: u64
  if (data?.NumAddressesInuse !== undefined) view.setBigUint64(8, BigInt(data.NumAddressesInuse), true);
  // 0x10: u64
  if (data?.NumAddressesFree !== undefined) view.setBigUint64(16, BigInt(data.NumAddressesFree), true);
  // 0x18: u64
  if (data?.NumPendingAdvertises !== undefined) view.setBigUint64(24, BigInt(data.NumPendingAdvertises), true);
  return buf;
}

export class SCOPE_MIB_INFO_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Subnet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u64
  get NumAddressesInuse(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get NumAddressesFree(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get NumPendingAdvertises(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: pointer
  set Subnet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u64
  set NumAddressesInuse(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set NumAddressesFree(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set NumPendingAdvertises(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_MIB_INFO_V6 (size: 64)
 */
export interface DHCP_MIB_INFO_V6 {
  /** u32 */
  Solicits: number;
  /** u32 */
  Advertises: number;
  /** u32 */
  Requests: number;
  /** u32 */
  Renews: number;
  /** u32 */
  Rebinds: number;
  /** u32 */
  Replies: number;
  /** u32 */
  Confirms: number;
  /** u32 */
  Declines: number;
  /** u32 */
  Releases: number;
  /** u32 */
  Informs: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ServerStartTime: Uint8Array | Deno.PointerValue;
  /** u32 */
  Scopes: number;
  /** ptr */
  ScopeInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_MIB_INFO_V6 = 64;

export function allocDHCP_MIB_INFO_V6(data?: Partial<DHCP_MIB_INFO_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_MIB_INFO_V6);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Solicits !== undefined) view.setUint32(0, Number(data.Solicits), true);
  // 0x04: u32
  if (data?.Advertises !== undefined) view.setUint32(4, Number(data.Advertises), true);
  // 0x08: u32
  if (data?.Requests !== undefined) view.setUint32(8, Number(data.Requests), true);
  // 0x0c: u32
  if (data?.Renews !== undefined) view.setUint32(12, Number(data.Renews), true);
  // 0x10: u32
  if (data?.Rebinds !== undefined) view.setUint32(16, Number(data.Rebinds), true);
  // 0x14: u32
  if (data?.Replies !== undefined) view.setUint32(20, Number(data.Replies), true);
  // 0x18: u32
  if (data?.Confirms !== undefined) view.setUint32(24, Number(data.Confirms), true);
  // 0x1c: u32
  if (data?.Declines !== undefined) view.setUint32(28, Number(data.Declines), true);
  // 0x20: u32
  if (data?.Releases !== undefined) view.setUint32(32, Number(data.Releases), true);
  // 0x24: u32
  if (data?.Informs !== undefined) view.setUint32(36, Number(data.Informs), true);
  // 0x28: pointer
  if (data?.ServerStartTime !== undefined) view.setBigUint64(40, data.ServerStartTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerStartTime))), true);
  // 0x30: u32
  if (data?.Scopes !== undefined) view.setUint32(48, Number(data.Scopes), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ScopeInfo !== undefined) view.setBigUint64(56, data.ScopeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeInfo))), true);
  return buf;
}

export class DHCP_MIB_INFO_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Solicits(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Advertises(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Requests(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Renews(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Rebinds(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Replies(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Confirms(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Declines(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Releases(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Informs(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get ServerStartTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get Scopes(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ScopeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Solicits(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Advertises(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Requests(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Renews(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Rebinds(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Replies(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Confirms(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Declines(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Releases(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Informs(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set ServerStartTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set Scopes(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ScopeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_IP_RESERVATION_V6 (size: 24)
 */
export interface DHCP_IP_RESERVATION_V6 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  ReservedIpAddress: Uint8Array | Deno.PointerValue;
  /** ptr */
  ReservedForClient: Deno.PointerValue | Uint8Array;
  /** u32 */
  InterfaceId: number;
}

export const sizeofDHCP_IP_RESERVATION_V6 = 24;

export function allocDHCP_IP_RESERVATION_V6(data?: Partial<DHCP_IP_RESERVATION_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_IP_RESERVATION_V6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ReservedIpAddress !== undefined) view.setBigUint64(0, data.ReservedIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedIpAddress))), true);
  // 0x08: pointer
  if (data?.ReservedForClient !== undefined) view.setBigUint64(8, data.ReservedForClient === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedForClient))), true);
  // 0x10: u32
  if (data?.InterfaceId !== undefined) view.setUint32(16, Number(data.InterfaceId), true);
  // 0x14: pad4
  return buf;
}

export class DHCP_IP_RESERVATION_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ReservedIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ReservedForClient(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get InterfaceId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set ReservedIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ReservedForClient(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set InterfaceId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * DHCP_SUBNET_ELEMENT_UNION_V6 (size: 24)
 */
export interface DHCP_SUBNET_ELEMENT_UNION_V6 {
  /** ptr */
  IpRange: Deno.PointerValue | Uint8Array;
  /** ptr */
  ReservedIp: Deno.PointerValue | Uint8Array;
  /** ptr */
  ExcludeIpRange: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_SUBNET_ELEMENT_UNION_V6 = 24;

export function allocDHCP_SUBNET_ELEMENT_UNION_V6(data?: Partial<DHCP_SUBNET_ELEMENT_UNION_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_ELEMENT_UNION_V6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IpRange !== undefined) view.setBigUint64(0, data.IpRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IpRange))), true);
  // 0x08: pointer
  if (data?.ReservedIp !== undefined) view.setBigUint64(8, data.ReservedIp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReservedIp))), true);
  // 0x10: pointer
  if (data?.ExcludeIpRange !== undefined) view.setBigUint64(16, data.ExcludeIpRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExcludeIpRange))), true);
  return buf;
}

export class DHCP_SUBNET_ELEMENT_UNION_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IpRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ReservedIp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ExcludeIpRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set IpRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ReservedIp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ExcludeIpRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_DATA_V6 (size: 16)
 */
export interface DHCP_SUBNET_ELEMENT_DATA_V6 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_TYPE_V6 */
  ElementType: DHCP_SUBNET_ELEMENT_TYPE_V6;
  /** DHCP_SUBNET_ELEMENT_UNION_V6 */
  Element: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_SUBNET_ELEMENT_DATA_V6 = 16;

export function allocDHCP_SUBNET_ELEMENT_DATA_V6(data?: Partial<DHCP_SUBNET_ELEMENT_DATA_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_ELEMENT_DATA_V6);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ElementType !== undefined) view.setInt32(0, Number(data.ElementType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class DHCP_SUBNET_ELEMENT_DATA_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ElementType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set ElementType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6 (size: 16)
 */
export interface DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6 {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_SUBNET_ELEMENT_INFO_ARRAY_V6 = 16;

export function allocDHCP_SUBNET_ELEMENT_INFO_ARRAY_V6(data?: Partial<DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SUBNET_ELEMENT_INFO_ARRAY_V6);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_V6 (size: 64)
 */
export interface DHCP_CLIENT_INFO_V6 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  ClientIpAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientDUID: Uint8Array | Deno.PointerValue;
  /** u32 */
  AddressType: number;
  /** u32 */
  IAID: number;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClientComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ClientValidLeaseExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ClientPrefLeaseExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO_V6 */
  OwnerHost: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_CLIENT_INFO_V6 = 64;

export function allocDHCP_CLIENT_INFO_V6(data?: Partial<DHCP_CLIENT_INFO_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_V6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClientIpAddress !== undefined) view.setBigUint64(0, data.ClientIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientIpAddress))), true);
  // 0x08: pointer
  if (data?.ClientDUID !== undefined) view.setBigUint64(8, data.ClientDUID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientDUID))), true);
  // 0x10: u32
  if (data?.AddressType !== undefined) view.setUint32(16, Number(data.AddressType), true);
  // 0x14: u32
  if (data?.IAID !== undefined) view.setUint32(20, Number(data.IAID), true);
  // 0x18: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.ClientComment !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ClientComment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.ClientValidLeaseExpires !== undefined) view.setBigUint64(40, data.ClientValidLeaseExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientValidLeaseExpires))), true);
  // 0x30: pointer
  if (data?.ClientPrefLeaseExpires !== undefined) view.setBigUint64(48, data.ClientPrefLeaseExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientPrefLeaseExpires))), true);
  // 0x38: pointer
  if (data?.OwnerHost !== undefined) view.setBigUint64(56, data.OwnerHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwnerHost))), true);
  return buf;
}

export class DHCP_CLIENT_INFO_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClientIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ClientDUID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get AddressType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get IAID(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get ClientComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ClientValidLeaseExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ClientPrefLeaseExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get OwnerHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ClientIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ClientDUID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set AddressType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set IAID(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set ClientComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set ClientValidLeaseExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ClientPrefLeaseExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set OwnerHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV6_IP_ARRAY (size: 16)
 */
export interface DHCPV6_IP_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCPV6_IP_ARRAY = 16;

export function allocDHCPV6_IP_ARRAY(data?: Partial<DHCPV6_IP_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV6_IP_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCPV6_IP_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_CLIENT_INFO_ARRAY_V6 (size: 16)
 */
export interface DHCP_CLIENT_INFO_ARRAY_V6 {
  /** u32 */
  NumElements: number;
  /** ptr */
  Clients: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_CLIENT_INFO_ARRAY_V6 = 16;

export function allocDHCP_CLIENT_INFO_ARRAY_V6(data?: Partial<DHCP_CLIENT_INFO_ARRAY_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_CLIENT_INFO_ARRAY_V6);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Clients !== undefined) view.setBigUint64(8, data.Clients === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Clients))), true);
  return buf;
}

export class DHCP_CLIENT_INFO_ARRAY_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Clients(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Clients(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _DHCP_CLIENT_SEARCH_UNION_V6 (size: 24)
 */
export interface _DHCP_CLIENT_SEARCH_UNION_V6 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  ClientIpAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientDUID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_DHCP_CLIENT_SEARCH_UNION_V6 = 24;

export function alloc_DHCP_CLIENT_SEARCH_UNION_V6(data?: Partial<_DHCP_CLIENT_SEARCH_UNION_V6>): Uint8Array {
  const buf = new Uint8Array(sizeof_DHCP_CLIENT_SEARCH_UNION_V6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClientIpAddress !== undefined) view.setBigUint64(0, data.ClientIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientIpAddress))), true);
  // 0x08: pointer
  if (data?.ClientDUID !== undefined) view.setBigUint64(8, data.ClientDUID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientDUID))), true);
  // 0x10: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class _DHCP_CLIENT_SEARCH_UNION_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClientIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ClientDUID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ClientIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ClientDUID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_SEARCH_INFO_V6 (size: 16)
 */
export interface DHCP_SEARCH_INFO_V6 {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_SEARCH_INFO_TYPE_V6 */
  SearchType: DHCP_SEARCH_INFO_TYPE_V6;
  /** _DHCP_CLIENT_SEARCH_UNION_V6 */
  SearchInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofDHCP_SEARCH_INFO_V6 = 16;

export function allocDHCP_SEARCH_INFO_V6(data?: Partial<DHCP_SEARCH_INFO_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_SEARCH_INFO_V6);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SearchType !== undefined) view.setInt32(0, Number(data.SearchType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SearchInfo !== undefined) view.setBigUint64(8, data.SearchInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SearchInfo))), true);
  return buf;
}

export class DHCP_SEARCH_INFO_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get SearchType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SearchInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set SearchType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SearchInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_COND (size: 48)
 */
export interface DHCP_POL_COND {
  /** u32 */
  ParentExpr: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_ATTR_TYPE */
  Type: DHCP_POL_ATTR_TYPE;
  /** u32 */
  OptionID: number;
  /** u32 */
  SubOptionID: number;
  /** Windows.Win32.Foundation.PWSTR */
  VendorName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_COMPARATOR */
  Operator: DHCP_POL_COMPARATOR;
  /** ptr */
  Value: Deno.PointerValue | Uint8Array;
  /** u32 */
  ValueLength: number;
}

export const sizeofDHCP_POL_COND = 48;

export function allocDHCP_POL_COND(data?: Partial<DHCP_POL_COND>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_POL_COND);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ParentExpr !== undefined) view.setUint32(0, Number(data.ParentExpr), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.OptionID !== undefined) view.setUint32(8, Number(data.OptionID), true);
  // 0x0c: u32
  if (data?.SubOptionID !== undefined) view.setUint32(12, Number(data.SubOptionID), true);
  // 0x10: buffer
  if (data?.VendorName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.VendorName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.Operator !== undefined) view.setInt32(24, Number(data.Operator), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Value !== undefined) view.setBigUint64(32, data.Value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Value))), true);
  // 0x28: u32
  if (data?.ValueLength !== undefined) view.setUint32(40, Number(data.ValueLength), true);
  // 0x2c: pad4
  return buf;
}

export class DHCP_POL_CONDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ParentExpr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get OptionID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SubOptionID(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: buffer
  get VendorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get Operator(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get ValueLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set ParentExpr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set OptionID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SubOptionID(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: buffer
  set VendorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set Operator(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set ValueLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_COND_ARRAY (size: 16)
 */
export interface DHCP_POL_COND_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_POL_COND_ARRAY = 16;

export function allocDHCP_POL_COND_ARRAY(data?: Partial<DHCP_POL_COND_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_POL_COND_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_POL_COND_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_EXPR (size: 8)
 */
export interface DHCP_POL_EXPR {
  /** u32 */
  ParentExpr: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_LOGIC_OPER */
  Operator: DHCP_POL_LOGIC_OPER;
}

export const sizeofDHCP_POL_EXPR = 8;

export function allocDHCP_POL_EXPR(data?: Partial<DHCP_POL_EXPR>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_POL_EXPR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ParentExpr !== undefined) view.setUint32(0, Number(data.ParentExpr), true);
  // 0x04: i32
  if (data?.Operator !== undefined) view.setInt32(4, Number(data.Operator), true);
  return buf;
}

export class DHCP_POL_EXPRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ParentExpr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Operator(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set ParentExpr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Operator(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_EXPR_ARRAY (size: 16)
 */
export interface DHCP_POL_EXPR_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_POL_EXPR_ARRAY = 16;

export function allocDHCP_POL_EXPR_ARRAY(data?: Partial<DHCP_POL_EXPR_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_POL_EXPR_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_POL_EXPR_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_IP_RANGE_ARRAY (size: 16)
 */
export interface DHCP_IP_RANGE_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_IP_RANGE_ARRAY = 16;

export function allocDHCP_IP_RANGE_ARRAY(data?: Partial<DHCP_IP_RANGE_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_IP_RANGE_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_IP_RANGE_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_POLICY (size: 64)
 */
export interface DHCP_POLICY {
  /** Windows.Win32.Foundation.PWSTR */
  PolicyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  IsGlobalPolicy: boolean;
  /** u32 */
  Subnet: number;
  /** u32 */
  ProcessingOrder: number;
  /** ptr */
  Conditions: Deno.PointerValue | Uint8Array;
  /** ptr */
  Expressions: Deno.PointerValue | Uint8Array;
  /** ptr */
  Ranges: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  Description: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  Enabled: boolean;
}

export const sizeofDHCP_POLICY = 64;

export function allocDHCP_POLICY(data?: Partial<DHCP_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.PolicyName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.PolicyName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.IsGlobalPolicy !== undefined) view.setInt32(8, Number(data.IsGlobalPolicy), true);
  // 0x0c: u32
  if (data?.Subnet !== undefined) view.setUint32(12, Number(data.Subnet), true);
  // 0x10: u32
  if (data?.ProcessingOrder !== undefined) view.setUint32(16, Number(data.ProcessingOrder), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Conditions !== undefined) view.setBigUint64(24, data.Conditions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Conditions))), true);
  // 0x20: pointer
  if (data?.Expressions !== undefined) view.setBigUint64(32, data.Expressions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Expressions))), true);
  // 0x28: pointer
  if (data?.Ranges !== undefined) view.setBigUint64(40, data.Ranges === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Ranges))), true);
  // 0x30: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.Description);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: i32
  if (data?.Enabled !== undefined) view.setInt32(56, Number(data.Enabled), true);
  // 0x3c: pad4
  return buf;
}

export class DHCP_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get PolicyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get IsGlobalPolicy(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Subnet(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProcessingOrder(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Conditions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Expressions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Ranges(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get Description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get Enabled(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x00: buffer
  set PolicyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set IsGlobalPolicy(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Subnet(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProcessingOrder(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Conditions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Expressions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Ranges(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: buffer
  set Description(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: i32
  set Enabled(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_POLICY_ARRAY (size: 16)
 */
export interface DHCP_POLICY_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_POLICY_ARRAY = 16;

export function allocDHCP_POLICY_ARRAY(data?: Partial<DHCP_POLICY_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_POLICY_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_POLICY_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_POLICY_EX (size: 72)
 */
export interface DHCP_POLICY_EX {
  /** Windows.Win32.Foundation.PWSTR */
  PolicyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  IsGlobalPolicy: boolean;
  /** u32 */
  Subnet: number;
  /** u32 */
  ProcessingOrder: number;
  /** ptr */
  Conditions: Deno.PointerValue | Uint8Array;
  /** ptr */
  Expressions: Deno.PointerValue | Uint8Array;
  /** ptr */
  Ranges: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  Description: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  Enabled: boolean;
  /** ptr */
  Properties: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_POLICY_EX = 72;

export function allocDHCP_POLICY_EX(data?: Partial<DHCP_POLICY_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_POLICY_EX);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.PolicyName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.PolicyName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.IsGlobalPolicy !== undefined) view.setInt32(8, Number(data.IsGlobalPolicy), true);
  // 0x0c: u32
  if (data?.Subnet !== undefined) view.setUint32(12, Number(data.Subnet), true);
  // 0x10: u32
  if (data?.ProcessingOrder !== undefined) view.setUint32(16, Number(data.ProcessingOrder), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Conditions !== undefined) view.setBigUint64(24, data.Conditions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Conditions))), true);
  // 0x20: pointer
  if (data?.Expressions !== undefined) view.setBigUint64(32, data.Expressions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Expressions))), true);
  // 0x28: pointer
  if (data?.Ranges !== undefined) view.setBigUint64(40, data.Ranges === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Ranges))), true);
  // 0x30: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.Description);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: i32
  if (data?.Enabled !== undefined) view.setInt32(56, Number(data.Enabled), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.Properties !== undefined) view.setBigUint64(64, data.Properties === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Properties))), true);
  return buf;
}

export class DHCP_POLICY_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get PolicyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get IsGlobalPolicy(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Subnet(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProcessingOrder(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Conditions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Expressions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Ranges(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get Description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get Enabled(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get Properties(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set PolicyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set IsGlobalPolicy(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Subnet(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProcessingOrder(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Conditions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Expressions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Ranges(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: buffer
  set Description(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: i32
  set Enabled(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set Properties(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_POLICY_EX_ARRAY (size: 16)
 */
export interface DHCP_POLICY_EX_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_POLICY_EX_ARRAY = 16;

export function allocDHCP_POLICY_EX_ARRAY(data?: Partial<DHCP_POLICY_EX_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_POLICY_EX_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class DHCP_POLICY_EX_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV6_STATELESS_PARAMS (size: 8)
 */
export interface DHCPV6_STATELESS_PARAMS {
  /** Windows.Win32.Foundation.BOOL */
  Status: boolean;
  /** u32 */
  PurgeInterval: number;
}

export const sizeofDHCPV6_STATELESS_PARAMS = 8;

export function allocDHCPV6_STATELESS_PARAMS(data?: Partial<DHCPV6_STATELESS_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV6_STATELESS_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Status !== undefined) view.setInt32(0, Number(data.Status), true);
  // 0x04: u32
  if (data?.PurgeInterval !== undefined) view.setUint32(4, Number(data.PurgeInterval), true);
  return buf;
}

export class DHCPV6_STATELESS_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Status(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get PurgeInterval(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Status(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set PurgeInterval(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV6_STATELESS_SCOPE_STATS (size: 24)
 */
export interface DHCPV6_STATELESS_SCOPE_STATS {
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */
  SubnetAddress: Uint8Array | Deno.PointerValue;
  /** u64 */
  NumStatelessClientsAdded: bigint | number;
  /** u64 */
  NumStatelessClientsRemoved: bigint | number;
}

export const sizeofDHCPV6_STATELESS_SCOPE_STATS = 24;

export function allocDHCPV6_STATELESS_SCOPE_STATS(data?: Partial<DHCPV6_STATELESS_SCOPE_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV6_STATELESS_SCOPE_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubnetAddress !== undefined) view.setBigUint64(0, data.SubnetAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SubnetAddress))), true);
  // 0x08: u64
  if (data?.NumStatelessClientsAdded !== undefined) view.setBigUint64(8, BigInt(data.NumStatelessClientsAdded), true);
  // 0x10: u64
  if (data?.NumStatelessClientsRemoved !== undefined) view.setBigUint64(16, BigInt(data.NumStatelessClientsRemoved), true);
  return buf;
}

export class DHCPV6_STATELESS_SCOPE_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SubnetAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u64
  get NumStatelessClientsAdded(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get NumStatelessClientsRemoved(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set SubnetAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u64
  set NumStatelessClientsAdded(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set NumStatelessClientsRemoved(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV6_STATELESS_STATS (size: 16)
 */
export interface DHCPV6_STATELESS_STATS {
  /** u32 */
  NumScopes: number;
  /** ptr */
  ScopeStats: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCPV6_STATELESS_STATS = 16;

export function allocDHCPV6_STATELESS_STATS(data?: Partial<DHCPV6_STATELESS_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV6_STATELESS_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumScopes !== undefined) view.setUint32(0, Number(data.NumScopes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ScopeStats !== undefined) view.setBigUint64(8, data.ScopeStats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeStats))), true);
  return buf;
}

export class DHCPV6_STATELESS_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumScopes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ScopeStats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumScopes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ScopeStats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_FAILOVER_RELATIONSHIP (size: 80)
 */
export interface DHCP_FAILOVER_RELATIONSHIP {
  /** u32 */
  PrimaryServer: number;
  /** u32 */
  SecondaryServer: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_FAILOVER_MODE */
  Mode: DHCP_FAILOVER_MODE;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_FAILOVER_SERVER */
  ServerType: DHCP_FAILOVER_SERVER;
  /** Windows.Win32.NetworkManagement.Dhcp.FSM_STATE */
  State: FSM_STATE;
  /** Windows.Win32.NetworkManagement.Dhcp.FSM_STATE */
  PrevState: FSM_STATE;
  /** u32 */
  Mclt: number;
  /** u32 */
  SafePeriod: number;
  /** Windows.Win32.Foundation.PWSTR */
  RelationshipName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  PrimaryServerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SecondaryServerName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pScopes: Deno.PointerValue | Uint8Array;
  /** u8 */
  Percentage: number;
  /** Windows.Win32.Foundation.PWSTR */
  SharedSecret: string | null | Uint8Array | Uint16Array;
}

export const sizeofDHCP_FAILOVER_RELATIONSHIP = 80;

export function allocDHCP_FAILOVER_RELATIONSHIP(data?: Partial<DHCP_FAILOVER_RELATIONSHIP>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_FAILOVER_RELATIONSHIP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PrimaryServer !== undefined) view.setUint32(0, Number(data.PrimaryServer), true);
  // 0x04: u32
  if (data?.SecondaryServer !== undefined) view.setUint32(4, Number(data.SecondaryServer), true);
  // 0x08: i32
  if (data?.Mode !== undefined) view.setInt32(8, Number(data.Mode), true);
  // 0x0c: i32
  if (data?.ServerType !== undefined) view.setInt32(12, Number(data.ServerType), true);
  // 0x10: i32
  if (data?.State !== undefined) view.setInt32(16, Number(data.State), true);
  // 0x14: i32
  if (data?.PrevState !== undefined) view.setInt32(20, Number(data.PrevState), true);
  // 0x18: u32
  if (data?.Mclt !== undefined) view.setUint32(24, Number(data.Mclt), true);
  // 0x1c: u32
  if (data?.SafePeriod !== undefined) view.setUint32(28, Number(data.SafePeriod), true);
  // 0x20: buffer
  if (data?.RelationshipName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.RelationshipName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.PrimaryServerName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.PrimaryServerName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.SecondaryServerName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.SecondaryServerName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: pointer
  if (data?.pScopes !== undefined) view.setBigUint64(56, data.pScopes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pScopes))), true);
  // 0x40: u8
  if (data?.Percentage !== undefined) view.setUint8(64, Number(data.Percentage));
  // 0x41: pad7
  // 0x48: buffer
  if (data?.SharedSecret !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.SharedSecret);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class DHCP_FAILOVER_RELATIONSHIPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PrimaryServer(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SecondaryServer(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Mode(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get ServerType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get State(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get PrevState(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get Mclt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get SafePeriod(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: buffer
  get RelationshipName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get PrimaryServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get SecondaryServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pScopes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u8
  get Percentage(): number {
    return this.view.getUint8(64);
  }

  // 0x41: pad7

  // 0x48: buffer
  get SharedSecret(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set PrimaryServer(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SecondaryServer(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Mode(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set ServerType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set State(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set PrevState(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set Mclt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set SafePeriod(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: buffer
  set RelationshipName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set PrimaryServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set SecondaryServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: pointer
  set pScopes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u8
  set Percentage(value: number) {
    this.view.setUint8(64, value);
  }

  // 0x41: pad7

  // 0x48: buffer
  set SharedSecret(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_FAILOVER_RELATIONSHIP_ARRAY (size: 16)
 */
export interface DHCP_FAILOVER_RELATIONSHIP_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  pRelationships: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCP_FAILOVER_RELATIONSHIP_ARRAY = 16;

export function allocDHCP_FAILOVER_RELATIONSHIP_ARRAY(data?: Partial<DHCP_FAILOVER_RELATIONSHIP_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_FAILOVER_RELATIONSHIP_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pRelationships !== undefined) view.setBigUint64(8, data.pRelationships === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRelationships))), true);
  return buf;
}

export class DHCP_FAILOVER_RELATIONSHIP_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pRelationships(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pRelationships(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV4_FAILOVER_CLIENT_INFO (size: 112)
 */
export interface DHCPV4_FAILOVER_CLIENT_INFO {
  /** u32 */
  ClientIpAddress: number;
  /** u32 */
  SubnetMask: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientHardwareAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClientComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ClientLeaseExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO */
  OwnerHost: Uint8Array | Deno.PointerValue;
  /** u8 */
  bClientType: number;
  /** u8 */
  AddressState: number;
  /** Windows.Win32.NetworkManagement.Dhcp.QuarantineStatus */
  Status: QuarantineStatus;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ProbationEnds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  QuarantineCapable: boolean;
  /** u32 */
  SentPotExpTime: number;
  /** u32 */
  AckPotExpTime: number;
  /** u32 */
  RecvPotExpTime: number;
  /** u32 */
  StartTime: number;
  /** u32 */
  CltLastTransTime: number;
  /** u32 */
  LastBndUpdTime: number;
  /** u32 */
  BndMsgStatus: number;
  /** Windows.Win32.Foundation.PWSTR */
  PolicyName: string | null | Uint8Array | Uint16Array;
  /** u8 */
  Flags: number;
}

export const sizeofDHCPV4_FAILOVER_CLIENT_INFO = 112;

export function allocDHCPV4_FAILOVER_CLIENT_INFO(data?: Partial<DHCPV4_FAILOVER_CLIENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV4_FAILOVER_CLIENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClientIpAddress !== undefined) view.setUint32(0, Number(data.ClientIpAddress), true);
  // 0x04: u32
  if (data?.SubnetMask !== undefined) view.setUint32(4, Number(data.SubnetMask), true);
  // 0x08: pointer
  if (data?.ClientHardwareAddress !== undefined) view.setBigUint64(8, data.ClientHardwareAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientHardwareAddress))), true);
  // 0x10: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ClientComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClientComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.ClientLeaseExpires !== undefined) view.setBigUint64(32, data.ClientLeaseExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientLeaseExpires))), true);
  // 0x28: pointer
  if (data?.OwnerHost !== undefined) view.setBigUint64(40, data.OwnerHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwnerHost))), true);
  // 0x30: u8
  if (data?.bClientType !== undefined) view.setUint8(48, Number(data.bClientType));
  // 0x31: u8
  if (data?.AddressState !== undefined) view.setUint8(49, Number(data.AddressState));
  // 0x32: i32
  if (data?.Status !== undefined) view.setInt32(50, Number(data.Status), true);
  // 0x36: pad2
  // 0x38: pointer
  if (data?.ProbationEnds !== undefined) view.setBigUint64(56, data.ProbationEnds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProbationEnds))), true);
  // 0x40: i32
  if (data?.QuarantineCapable !== undefined) view.setInt32(64, Number(data.QuarantineCapable), true);
  // 0x44: u32
  if (data?.SentPotExpTime !== undefined) view.setUint32(68, Number(data.SentPotExpTime), true);
  // 0x48: u32
  if (data?.AckPotExpTime !== undefined) view.setUint32(72, Number(data.AckPotExpTime), true);
  // 0x4c: u32
  if (data?.RecvPotExpTime !== undefined) view.setUint32(76, Number(data.RecvPotExpTime), true);
  // 0x50: u32
  if (data?.StartTime !== undefined) view.setUint32(80, Number(data.StartTime), true);
  // 0x54: u32
  if (data?.CltLastTransTime !== undefined) view.setUint32(84, Number(data.CltLastTransTime), true);
  // 0x58: u32
  if (data?.LastBndUpdTime !== undefined) view.setUint32(88, Number(data.LastBndUpdTime), true);
  // 0x5c: u32
  if (data?.BndMsgStatus !== undefined) view.setUint32(92, Number(data.BndMsgStatus), true);
  // 0x60: buffer
  if (data?.PolicyName !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.PolicyName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: u8
  if (data?.Flags !== undefined) view.setUint8(104, Number(data.Flags));
  // 0x69: pad7
  return buf;
}

export class DHCPV4_FAILOVER_CLIENT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClientIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubnetMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ClientHardwareAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ClientComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ClientLeaseExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OwnerHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u8
  get bClientType(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get AddressState(): number {
    return this.view.getUint8(49);
  }

  // 0x32: i32
  get Status(): number {
    return this.view.getInt32(50, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  get ProbationEnds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: i32
  get QuarantineCapable(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get SentPotExpTime(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get AckPotExpTime(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get RecvPotExpTime(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get StartTime(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get CltLastTransTime(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get LastBndUpdTime(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get BndMsgStatus(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: buffer
  get PolicyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u8
  get Flags(): number {
    return this.view.getUint8(104);
  }

  // 0x69: pad7

  // 0x00: u32
  set ClientIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubnetMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ClientHardwareAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ClientComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set ClientLeaseExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OwnerHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u8
  set bClientType(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set AddressState(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: i32
  set Status(value: number) {
    this.view.setInt32(50, value, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  set ProbationEnds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: i32
  set QuarantineCapable(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set SentPotExpTime(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set AckPotExpTime(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set RecvPotExpTime(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set StartTime(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set CltLastTransTime(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set LastBndUpdTime(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set BndMsgStatus(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: buffer
  set PolicyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: u8
  set Flags(value: number) {
    this.view.setUint8(104, value);
  }

  // 0x69: pad7
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV4_FAILOVER_CLIENT_INFO_ARRAY (size: 16)
 */
export interface DHCPV4_FAILOVER_CLIENT_INFO_ARRAY {
  /** u32 */
  NumElements: number;
  /** ptr */
  Clients: Deno.PointerValue | Uint8Array;
}

export const sizeofDHCPV4_FAILOVER_CLIENT_INFO_ARRAY = 16;

export function allocDHCPV4_FAILOVER_CLIENT_INFO_ARRAY(data?: Partial<DHCPV4_FAILOVER_CLIENT_INFO_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV4_FAILOVER_CLIENT_INFO_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumElements !== undefined) view.setUint32(0, Number(data.NumElements), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Clients !== undefined) view.setBigUint64(8, data.Clients === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Clients))), true);
  return buf;
}

export class DHCPV4_FAILOVER_CLIENT_INFO_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumElements(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Clients(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumElements(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Clients(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCPV4_FAILOVER_CLIENT_INFO_EX (size: 112)
 */
export interface DHCPV4_FAILOVER_CLIENT_INFO_EX {
  /** u32 */
  ClientIpAddress: number;
  /** u32 */
  SubnetMask: number;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_BINARY_DATA */
  ClientHardwareAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ClientName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClientComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ClientLeaseExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Dhcp.DHCP_HOST_INFO */
  OwnerHost: Uint8Array | Deno.PointerValue;
  /** u8 */
  bClientType: number;
  /** u8 */
  AddressState: number;
  /** Windows.Win32.NetworkManagement.Dhcp.QuarantineStatus */
  Status: QuarantineStatus;
  /** Windows.Win32.NetworkManagement.Dhcp.DATE_TIME */
  ProbationEnds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  QuarantineCapable: boolean;
  /** u32 */
  SentPotExpTime: number;
  /** u32 */
  AckPotExpTime: number;
  /** u32 */
  RecvPotExpTime: number;
  /** u32 */
  StartTime: number;
  /** u32 */
  CltLastTransTime: number;
  /** u32 */
  LastBndUpdTime: number;
  /** u32 */
  BndMsgStatus: number;
  /** Windows.Win32.Foundation.PWSTR */
  PolicyName: string | null | Uint8Array | Uint16Array;
  /** u8 */
  Flags: number;
  /** u32 */
  AddressStateEx: number;
}

export const sizeofDHCPV4_FAILOVER_CLIENT_INFO_EX = 112;

export function allocDHCPV4_FAILOVER_CLIENT_INFO_EX(data?: Partial<DHCPV4_FAILOVER_CLIENT_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCPV4_FAILOVER_CLIENT_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClientIpAddress !== undefined) view.setUint32(0, Number(data.ClientIpAddress), true);
  // 0x04: u32
  if (data?.SubnetMask !== undefined) view.setUint32(4, Number(data.SubnetMask), true);
  // 0x08: pointer
  if (data?.ClientHardwareAddress !== undefined) view.setBigUint64(8, data.ClientHardwareAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientHardwareAddress))), true);
  // 0x10: buffer
  if (data?.ClientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ClientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ClientComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClientComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.ClientLeaseExpires !== undefined) view.setBigUint64(32, data.ClientLeaseExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientLeaseExpires))), true);
  // 0x28: pointer
  if (data?.OwnerHost !== undefined) view.setBigUint64(40, data.OwnerHost === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwnerHost))), true);
  // 0x30: u8
  if (data?.bClientType !== undefined) view.setUint8(48, Number(data.bClientType));
  // 0x31: u8
  if (data?.AddressState !== undefined) view.setUint8(49, Number(data.AddressState));
  // 0x32: i32
  if (data?.Status !== undefined) view.setInt32(50, Number(data.Status), true);
  // 0x36: pad2
  // 0x38: pointer
  if (data?.ProbationEnds !== undefined) view.setBigUint64(56, data.ProbationEnds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProbationEnds))), true);
  // 0x40: i32
  if (data?.QuarantineCapable !== undefined) view.setInt32(64, Number(data.QuarantineCapable), true);
  // 0x44: u32
  if (data?.SentPotExpTime !== undefined) view.setUint32(68, Number(data.SentPotExpTime), true);
  // 0x48: u32
  if (data?.AckPotExpTime !== undefined) view.setUint32(72, Number(data.AckPotExpTime), true);
  // 0x4c: u32
  if (data?.RecvPotExpTime !== undefined) view.setUint32(76, Number(data.RecvPotExpTime), true);
  // 0x50: u32
  if (data?.StartTime !== undefined) view.setUint32(80, Number(data.StartTime), true);
  // 0x54: u32
  if (data?.CltLastTransTime !== undefined) view.setUint32(84, Number(data.CltLastTransTime), true);
  // 0x58: u32
  if (data?.LastBndUpdTime !== undefined) view.setUint32(88, Number(data.LastBndUpdTime), true);
  // 0x5c: u32
  if (data?.BndMsgStatus !== undefined) view.setUint32(92, Number(data.BndMsgStatus), true);
  // 0x60: buffer
  if (data?.PolicyName !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.PolicyName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: u8
  if (data?.Flags !== undefined) view.setUint8(104, Number(data.Flags));
  // 0x69: u32
  if (data?.AddressStateEx !== undefined) view.setUint32(105, Number(data.AddressStateEx), true);
  // 0x6d: pad3
  return buf;
}

export class DHCPV4_FAILOVER_CLIENT_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClientIpAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubnetMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ClientHardwareAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ClientComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ClientLeaseExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OwnerHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u8
  get bClientType(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get AddressState(): number {
    return this.view.getUint8(49);
  }

  // 0x32: i32
  get Status(): number {
    return this.view.getInt32(50, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  get ProbationEnds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: i32
  get QuarantineCapable(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get SentPotExpTime(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get AckPotExpTime(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get RecvPotExpTime(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get StartTime(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get CltLastTransTime(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get LastBndUpdTime(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get BndMsgStatus(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: buffer
  get PolicyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u8
  get Flags(): number {
    return this.view.getUint8(104);
  }

  // 0x69: u32
  get AddressStateEx(): number {
    return this.view.getUint32(105, true);
  }

  // 0x6d: pad3

  // 0x00: u32
  set ClientIpAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubnetMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ClientHardwareAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ClientComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set ClientLeaseExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OwnerHost(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u8
  set bClientType(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set AddressState(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: i32
  set Status(value: number) {
    this.view.setInt32(50, value, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  set ProbationEnds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: i32
  set QuarantineCapable(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set SentPotExpTime(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set AckPotExpTime(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set RecvPotExpTime(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set StartTime(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set CltLastTransTime(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set LastBndUpdTime(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set BndMsgStatus(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: buffer
  set PolicyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: u8
  set Flags(value: number) {
    this.view.setUint8(104, value);
  }

  // 0x69: u32
  set AddressStateEx(value: number) {
    this.view.setUint32(105, value, true);
  }

  // 0x6d: pad3
}

/**
 * Windows.Win32.NetworkManagement.Dhcp.DHCP_FAILOVER_STATISTICS (size: 32)
 */
export interface DHCP_FAILOVER_STATISTICS {
  /** u32 */
  NumAddr: number;
  /** u32 */
  AddrFree: number;
  /** u32 */
  AddrInUse: number;
  /** u32 */
  PartnerAddrFree: number;
  /** u32 */
  ThisAddrFree: number;
  /** u32 */
  PartnerAddrInUse: number;
  /** u32 */
  ThisAddrInUse: number;
}

export const sizeofDHCP_FAILOVER_STATISTICS = 32;

export function allocDHCP_FAILOVER_STATISTICS(data?: Partial<DHCP_FAILOVER_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDHCP_FAILOVER_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumAddr !== undefined) view.setUint32(0, Number(data.NumAddr), true);
  // 0x04: u32
  if (data?.AddrFree !== undefined) view.setUint32(4, Number(data.AddrFree), true);
  // 0x08: u32
  if (data?.AddrInUse !== undefined) view.setUint32(8, Number(data.AddrInUse), true);
  // 0x0c: u32
  if (data?.PartnerAddrFree !== undefined) view.setUint32(12, Number(data.PartnerAddrFree), true);
  // 0x10: u32
  if (data?.ThisAddrFree !== undefined) view.setUint32(16, Number(data.ThisAddrFree), true);
  // 0x14: u32
  if (data?.PartnerAddrInUse !== undefined) view.setUint32(20, Number(data.PartnerAddrInUse), true);
  // 0x18: u32
  if (data?.ThisAddrInUse !== undefined) view.setUint32(24, Number(data.ThisAddrInUse), true);
  // 0x1c: pad4
  return buf;
}

export class DHCP_FAILOVER_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumAddr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AddrFree(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get AddrInUse(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PartnerAddrFree(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ThisAddrFree(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PartnerAddrInUse(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ThisAddrInUse(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set NumAddr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AddrFree(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set AddrInUse(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PartnerAddrFree(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ThisAddrFree(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PartnerAddrInUse(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ThisAddrInUse(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

// Native Libraries

try {
  var libdhcpcsvc6_dll = Deno.dlopen("dhcpcsvc6.dll", {
    Dhcpv6CApiInitialize: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    Dhcpv6CApiCleanup: {
      parameters: [],
      result: "void",
      optional: true,
    },
    Dhcpv6RequestParams: {
      parameters: ["i32", "pointer", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    Dhcpv6RequestPrefix: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    Dhcpv6RenewPrefix: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
      optional: true,
    },
    Dhcpv6ReleasePrefix: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libdhcpcsvc_dll = Deno.dlopen("dhcpcsvc.dll", {
    DhcpCApiInitialize: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    DhcpCApiCleanup: {
      parameters: [],
      result: "void",
      optional: true,
    },
    DhcpRequestParams: {
      parameters: ["u32", "pointer", "buffer", "pointer", "pointer", "pointer", "pointer", "pointer", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpUndoRequestParams: {
      parameters: ["u32", "pointer", "buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpRegisterParamChange: {
      parameters: ["u32", "pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpDeRegisterParamChange: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRemoveDNSRegistrations: {
      parameters: [],
      result: "u32",
      optional: true,
    },
    DhcpGetOriginalSubnetMask: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libDHCPSAPI_dll = Deno.dlopen("DHCPSAPI.dll", {
    DhcpAddFilterV4: {
      parameters: ["buffer", "pointer", "i32"],
      result: "u32",
      optional: true,
    },
    DhcpDeleteFilterV4: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetFilterV4: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetFilterV4: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumFilterV4: {
      parameters: ["buffer", "pointer", "u32", "i32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpCreateSubnet: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetSubnetInfo: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetSubnetInfo: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnets: {
      parameters: ["buffer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpAddSubnetElement: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnetElements: {
      parameters: ["buffer", "u32", "i32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRemoveSubnetElement: {
      parameters: ["buffer", "u32", "pointer", "i32"],
      result: "u32",
      optional: true,
    },
    DhcpDeleteSubnet: {
      parameters: ["buffer", "u32", "i32"],
      result: "u32",
      optional: true,
    },
    DhcpCreateOption: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetOptionInfo: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetOptionInfo: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumOptions: {
      parameters: ["buffer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRemoveOption: {
      parameters: ["buffer", "u32"],
      result: "u32",
      optional: true,
    },
    DhcpSetOptionValue: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetOptionValues: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetOptionValue: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumOptionValues: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRemoveOptionValue: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpCreateClientInfoVQ: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetClientInfoVQ: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetClientInfoVQ: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnetClientsVQ: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnetClientsFilterStatusInfo: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpCreateClientInfo: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetClientInfo: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetClientInfo: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpDeleteClientInfo: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnetClients: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetClientOptions: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetMibInfo: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerSetConfig: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerGetConfig: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpScanDatabase: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRpcFreeMemory: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    DhcpGetVersion: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpAddSubnetElementV4: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnetElementsV4: {
      parameters: ["buffer", "u32", "i32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRemoveSubnetElementV4: {
      parameters: ["buffer", "u32", "pointer", "i32"],
      result: "u32",
      optional: true,
    },
    DhcpCreateClientInfoV4: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetClientInfoV4: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetClientInfoV4: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnetClientsV4: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerSetConfigV4: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerGetConfigV4: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetSuperScopeV4: {
      parameters: ["buffer", "u32", "buffer", "i32"],
      result: "u32",
      optional: true,
    },
    DhcpDeleteSuperScopeV4: {
      parameters: ["buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpGetSuperScopeInfoV4: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnetClientsV5: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpCreateOptionV5: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetOptionInfoV5: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetOptionInfoV5: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumOptionsV5: {
      parameters: ["buffer", "u32", "buffer", "buffer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRemoveOptionV5: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpSetOptionValueV5: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetOptionValuesV5: {
      parameters: ["buffer", "u32", "buffer", "buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetOptionValueV5: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetOptionValueV6: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumOptionValuesV5: {
      parameters: ["buffer", "u32", "buffer", "buffer", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRemoveOptionValueV5: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpCreateClass: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpModifyClass: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpDeleteClass: {
      parameters: ["buffer", "u32", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpGetClassInfo: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumClasses: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetAllOptions: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetAllOptionsV6: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetAllOptionValues: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetAllOptionValuesV6: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumServers: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpAddServer: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpDeleteServer: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetServerBindingInfo: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetServerBindingInfo: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpAddSubnetElementV5: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnetElementsV5: {
      parameters: ["buffer", "u32", "i32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRemoveSubnetElementV5: {
      parameters: ["buffer", "u32", "pointer", "i32"],
      result: "u32",
      optional: true,
    },
    DhcpV4EnumSubnetReservations: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpCreateOptionV6: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRemoveOptionV6: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumOptionsV6: {
      parameters: ["buffer", "u32", "buffer", "buffer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRemoveOptionValueV6: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetOptionInfoV6: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetOptionInfoV6: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetOptionValueV6: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetSubnetInfoVQ: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpCreateSubnetVQ: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetSubnetInfoVQ: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumOptionValuesV6: {
      parameters: ["buffer", "u32", "buffer", "buffer", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpDsInit: {
      parameters: [],
      result: "u32",
      optional: true,
    },
    DhcpDsCleanup: {
      parameters: [],
      result: "void",
      optional: true,
    },
    DhcpSetThreadOptions: {
      parameters: ["u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetThreadOptions: {
      parameters: ["pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerQueryAttribute: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerQueryAttributes: {
      parameters: ["buffer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerRedoAuthorization: {
      parameters: ["buffer", "u32"],
      result: "u32",
      optional: true,
    },
    DhcpAuditLogSetParams: {
      parameters: ["buffer", "u32", "buffer", "u32", "u32", "u32"],
      result: "u32",
      optional: true,
    },
    DhcpAuditLogGetParams: {
      parameters: ["buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerQueryDnsRegCredentials: {
      parameters: ["buffer", "u32", "buffer", "u32", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpServerSetDnsRegCredentials: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpServerSetDnsRegCredentialsV5: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpServerBackupDatabase: {
      parameters: ["buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpServerRestoreDatabase: {
      parameters: ["buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpServerSetConfigVQ: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerGetConfigVQ: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetServerSpecificStrings: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerAuditlogParamsFree: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    DhcpCreateSubnetV6: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpDeleteSubnetV6: {
      parameters: ["buffer", "pointer", "i32"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnetsV6: {
      parameters: ["buffer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpAddSubnetElementV6: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpRemoveSubnetElementV6: {
      parameters: ["buffer", "pointer", "pointer", "i32"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnetElementsV6: {
      parameters: ["buffer", "pointer", "i32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetSubnetInfoV6: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumSubnetClientsV6: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerGetConfigV6: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpServerSetConfigV6: {
      parameters: ["buffer", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetSubnetInfoV6: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetMibInfoV6: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetServerBindingInfoV6: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetServerBindingInfoV6: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetClientInfoV6: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetClientInfoV6: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpDeleteClientInfoV6: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpCreateClassV6: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpModifyClassV6: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpDeleteClassV6: {
      parameters: ["buffer", "u32", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpEnumClassesV6: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpSetSubnetDelayOffer: {
      parameters: ["buffer", "u32", "u16"],
      result: "u32",
      optional: true,
    },
    DhcpGetSubnetDelayOffer: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpGetMibInfoV5: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpAddSecurityGroup: {
      parameters: ["buffer"],
      result: "u32",
      optional: true,
    },
    DhcpV4GetOptionValue: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4SetOptionValue: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4SetOptionValues: {
      parameters: ["buffer", "u32", "buffer", "buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4RemoveOptionValue: {
      parameters: ["buffer", "u32", "u32", "buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4GetAllOptionValues: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverCreateRelationship: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverSetRelationship: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverDeleteRelationship: {
      parameters: ["buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverGetRelationship: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverEnumRelationship: {
      parameters: ["buffer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverAddScopeToRelationship: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverDeleteScopeFromRelationship: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverGetScopeRelationship: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverGetScopeStatistics: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverGetClientInfo: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverGetSystemTime: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverGetAddressStatus: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4FailoverTriggerAddrAllocation: {
      parameters: ["buffer", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpHlprCreateV4Policy: {
      parameters: ["buffer", "i32", "u32", "u32", "i32", "buffer", "i32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpHlprCreateV4PolicyEx: {
      parameters: ["buffer", "i32", "u32", "u32", "i32", "buffer", "i32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpHlprAddV4PolicyExpr: {
      parameters: ["pointer", "u32", "i32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpHlprAddV4PolicyCondition: {
      parameters: ["pointer", "u32", "i32", "u32", "u32", "buffer", "i32", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpHlprAddV4PolicyRange: {
      parameters: ["pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpHlprResetV4PolicyExpr: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    DhcpHlprModifyV4PolicyExpr: {
      parameters: ["pointer", "i32"],
      result: "u32",
      optional: true,
    },
    DhcpHlprFreeV4Policy: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    DhcpHlprFreeV4PolicyArray: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    DhcpHlprFreeV4PolicyEx: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    DhcpHlprFreeV4PolicyExArray: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    DhcpHlprFreeV4DhcpProperty: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    DhcpHlprFreeV4DhcpPropertyArray: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    DhcpHlprFindV4DhcpProperty: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
      optional: true,
    },
    DhcpHlprIsV4PolicySingleUC: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    DhcpV4QueryPolicyEnforcement: {
      parameters: ["buffer", "i32", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4SetPolicyEnforcement: {
      parameters: ["buffer", "i32", "u32", "i32"],
      result: "u32",
      optional: true,
    },
    DhcpHlprIsV4PolicyWellFormed: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    DhcpHlprIsV4PolicyValid: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4CreatePolicy: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4GetPolicy: {
      parameters: ["buffer", "i32", "u32", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4SetPolicy: {
      parameters: ["buffer", "u32", "i32", "u32", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4DeletePolicy: {
      parameters: ["buffer", "i32", "u32", "buffer"],
      result: "u32",
      optional: true,
    },
    DhcpV4EnumPolicies: {
      parameters: ["buffer", "pointer", "u32", "i32", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4AddPolicyRange: {
      parameters: ["buffer", "u32", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4RemovePolicyRange: {
      parameters: ["buffer", "u32", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV6SetStatelessStoreParams: {
      parameters: ["buffer", "i32", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV6GetStatelessStoreParams: {
      parameters: ["buffer", "i32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV6GetStatelessStatistics: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4CreateClientInfo: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4EnumSubnetClients: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4GetClientInfo: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV6CreateClientInfo: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4GetFreeIPAddress: {
      parameters: ["buffer", "u32", "u32", "u32", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV6GetFreeIPAddress: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4CreateClientInfoEx: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4EnumSubnetClientsEx: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4GetClientInfoEx: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4CreatePolicyEx: {
      parameters: ["buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4GetPolicyEx: {
      parameters: ["buffer", "i32", "u32", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4SetPolicyEx: {
      parameters: ["buffer", "u32", "i32", "u32", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    DhcpV4EnumPoliciesEx: {
      parameters: ["buffer", "pointer", "u32", "i32", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function Dhcpv6CApiInitialize(
  Version: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libdhcpcsvc6_dll.Dhcpv6CApiInitialize!(util.toPointer(Version));
}

export function Dhcpv6CApiCleanup(): void /* void */ {
  return libdhcpcsvc6_dll.Dhcpv6CApiCleanup!();
}

export function Dhcpv6RequestParams(
  forceNewInform: boolean /* Windows.Win32.Foundation.BOOL */,
  reserved: Deno.PointerValue | Uint8Array /* ptr */,
  adapterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  classId: Deno.PointerValue | Uint8Array /* ptr */,
  recdParams: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCPV6CAPI_PARAMS_ARRAY */,
  buffer: Deno.PointerValue | Uint8Array /* ptr */,
  pSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libdhcpcsvc6_dll.Dhcpv6RequestParams!(util.boolToFfi(forceNewInform), util.toPointer(reserved), util.pwstrToFfi(adapterName), util.toPointer(classId), util.toPointer(recdParams), util.toPointer(buffer), util.toPointer(pSize));
}

export function Dhcpv6RequestPrefix(
  adapterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pclassId: Deno.PointerValue | Uint8Array /* ptr */,
  prefixleaseInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pdwTimeToWait: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libdhcpcsvc6_dll.Dhcpv6RequestPrefix!(util.pwstrToFfi(adapterName), util.toPointer(pclassId), util.toPointer(prefixleaseInfo), util.toPointer(pdwTimeToWait));
}

export function Dhcpv6RenewPrefix(
  adapterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pclassId: Deno.PointerValue | Uint8Array /* ptr */,
  prefixleaseInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pdwTimeToWait: Deno.PointerValue | Uint8Array /* ptr */,
  bValidatePrefix: number /* u32 */,
): number /* u32 */ {
  return libdhcpcsvc6_dll.Dhcpv6RenewPrefix!(util.pwstrToFfi(adapterName), util.toPointer(pclassId), util.toPointer(prefixleaseInfo), util.toPointer(pdwTimeToWait), bValidatePrefix);
}

export function Dhcpv6ReleasePrefix(
  adapterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  classId: Deno.PointerValue | Uint8Array /* ptr */,
  leaseInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libdhcpcsvc6_dll.Dhcpv6ReleasePrefix!(util.pwstrToFfi(adapterName), util.toPointer(classId), util.toPointer(leaseInfo));
}

export function DhcpCApiInitialize(
  Version: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libdhcpcsvc_dll.DhcpCApiInitialize!(util.toPointer(Version));
}

export function DhcpCApiCleanup(): void /* void */ {
  return libdhcpcsvc_dll.DhcpCApiCleanup!();
}

export function DhcpRequestParams(
  Flags: number /* u32 */,
  Reserved: Deno.PointerValue | Uint8Array /* ptr */,
  AdapterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClassId: Deno.PointerValue | Uint8Array /* ptr */,
  SendParams: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCPCAPI_PARAMS_ARRAY */,
  RecdParams: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCPCAPI_PARAMS_ARRAY */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  pSize: Deno.PointerValue | Uint8Array /* ptr */,
  RequestIdStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libdhcpcsvc_dll.DhcpRequestParams!(Flags, util.toPointer(Reserved), util.pwstrToFfi(AdapterName), util.toPointer(ClassId), util.toPointer(SendParams), util.toPointer(RecdParams), util.toPointer(Buffer), util.toPointer(pSize), util.pwstrToFfi(RequestIdStr));
}

export function DhcpUndoRequestParams(
  Flags: number /* u32 */,
  Reserved: Deno.PointerValue | Uint8Array /* ptr */,
  AdapterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  RequestIdStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libdhcpcsvc_dll.DhcpUndoRequestParams!(Flags, util.toPointer(Reserved), util.pwstrToFfi(AdapterName), util.pwstrToFfi(RequestIdStr));
}

export function DhcpRegisterParamChange(
  Flags: number /* u32 */,
  Reserved: Deno.PointerValue | Uint8Array /* ptr */,
  AdapterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClassId: Deno.PointerValue | Uint8Array /* ptr */,
  Params: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCPCAPI_PARAMS_ARRAY */,
  Handle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libdhcpcsvc_dll.DhcpRegisterParamChange!(Flags, util.toPointer(Reserved), util.pwstrToFfi(AdapterName), util.toPointer(ClassId), util.toPointer(Params), util.toPointer(Handle));
}

export function DhcpDeRegisterParamChange(
  Flags: number /* u32 */,
  Reserved: Deno.PointerValue | Uint8Array /* ptr */,
  Event: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libdhcpcsvc_dll.DhcpDeRegisterParamChange!(Flags, util.toPointer(Reserved), util.toPointer(Event));
}

export function DhcpRemoveDNSRegistrations(): number /* u32 */ {
  return libdhcpcsvc_dll.DhcpRemoveDNSRegistrations!();
}

export function DhcpGetOriginalSubnetMask(
  sAdapterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwSubnetMask: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libdhcpcsvc_dll.DhcpGetOriginalSubnetMask!(util.pwstrToFfi(sAdapterName), util.toPointer(dwSubnetMask));
}

export function DhcpAddFilterV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  AddFilterInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ForceFlag: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpAddFilterV4!(util.pwstrToFfi(ServerIpAddress), util.toPointer(AddFilterInfo), util.boolToFfi(ForceFlag));
}

export function DhcpDeleteFilterV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DeleteFilterInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpDeleteFilterV4!(util.pwstrToFfi(ServerIpAddress), util.toPointer(DeleteFilterInfo));
}

export function DhcpSetFilterV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  GlobalFilterInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetFilterV4!(util.pwstrToFfi(ServerIpAddress), util.toPointer(GlobalFilterInfo));
}

export function DhcpGetFilterV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  GlobalFilterInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetFilterV4!(util.pwstrToFfi(ServerIpAddress), util.toPointer(GlobalFilterInfo));
}

export function DhcpEnumFilterV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  ListType: DHCP_FILTER_LIST_TYPE /* Windows.Win32.NetworkManagement.Dhcp.DHCP_FILTER_LIST_TYPE */,
  EnumFilterInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumFilterV4!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ResumeHandle), PreferredMaximum, ListType, util.toPointer(EnumFilterInfo), util.toPointer(ElementsRead), util.toPointer(ElementsTotal));
}

export function DhcpCreateSubnet(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  SubnetInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpCreateSubnet!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(SubnetInfo));
}

export function DhcpSetSubnetInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  SubnetInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetSubnetInfo!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(SubnetInfo));
}

export function DhcpGetSubnetInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  SubnetInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetSubnetInfo!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(SubnetInfo));
}

export function DhcpEnumSubnets(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  EnumInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnets!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(EnumInfo), util.toPointer(ElementsRead), util.toPointer(ElementsTotal));
}

export function DhcpAddSubnetElement(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  AddElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpAddSubnetElement!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(AddElementInfo));
}

export function DhcpEnumSubnetElements(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  EnumElementType: DHCP_SUBNET_ELEMENT_TYPE /* Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_TYPE */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  EnumElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnetElements!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, EnumElementType, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(EnumElementInfo), util.toPointer(ElementsRead), util.toPointer(ElementsTotal));
}

export function DhcpRemoveSubnetElement(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  RemoveElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ForceFlag: DHCP_FORCE_FLAG /* Windows.Win32.NetworkManagement.Dhcp.DHCP_FORCE_FLAG */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpRemoveSubnetElement!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(RemoveElementInfo), ForceFlag);
}

export function DhcpDeleteSubnet(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  ForceFlag: DHCP_FORCE_FLAG /* Windows.Win32.NetworkManagement.Dhcp.DHCP_FORCE_FLAG */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpDeleteSubnet!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, ForceFlag);
}

export function DhcpCreateOption(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionID: number /* u32 */,
  OptionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpCreateOption!(util.pwstrToFfi(ServerIpAddress), OptionID, util.toPointer(OptionInfo));
}

export function DhcpSetOptionInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionID: number /* u32 */,
  OptionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetOptionInfo!(util.pwstrToFfi(ServerIpAddress), OptionID, util.toPointer(OptionInfo));
}

export function DhcpGetOptionInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionID: number /* u32 */,
  OptionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetOptionInfo!(util.pwstrToFfi(ServerIpAddress), OptionID, util.toPointer(OptionInfo));
}

export function DhcpEnumOptions(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  Options: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsRead: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumOptions!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(Options), util.toPointer(OptionsRead), util.toPointer(OptionsTotal));
}

export function DhcpRemoveOption(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionID: number /* u32 */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpRemoveOption!(util.pwstrToFfi(ServerIpAddress), OptionID);
}

export function DhcpSetOptionValue(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionID: number /* u32 */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OptionValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetOptionValue!(util.pwstrToFfi(ServerIpAddress), OptionID, util.toPointer(ScopeInfo), util.toPointer(OptionValue));
}

export function DhcpSetOptionValues(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OptionValues: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetOptionValues!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ScopeInfo), util.toPointer(OptionValues));
}

export function DhcpGetOptionValue(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionID: number /* u32 */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OptionValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetOptionValue!(util.pwstrToFfi(ServerIpAddress), OptionID, util.toPointer(ScopeInfo), util.toPointer(OptionValue));
}

export function DhcpEnumOptionValues(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  OptionValues: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsRead: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumOptionValues!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ScopeInfo), util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(OptionValues), util.toPointer(OptionsRead), util.toPointer(OptionsTotal));
}

export function DhcpRemoveOptionValue(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionID: number /* u32 */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpRemoveOptionValue!(util.pwstrToFfi(ServerIpAddress), OptionID, util.toPointer(ScopeInfo));
}

export function DhcpCreateClientInfoVQ(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpCreateClientInfoVQ!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpSetClientInfoVQ(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetClientInfoVQ!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpGetClientInfoVQ(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SearchInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetClientInfoVQ!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SearchInfo), util.toPointer(ClientInfo));
}

export function DhcpEnumSubnetClientsVQ(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnetClientsVQ!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(ClientInfo), util.toPointer(ClientsRead), util.toPointer(ClientsTotal));
}

export function DhcpEnumSubnetClientsFilterStatusInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnetClientsFilterStatusInfo!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(ClientInfo), util.toPointer(ClientsRead), util.toPointer(ClientsTotal));
}

export function DhcpCreateClientInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpCreateClientInfo!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpSetClientInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetClientInfo!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpGetClientInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SearchInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetClientInfo!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SearchInfo), util.toPointer(ClientInfo));
}

export function DhcpDeleteClientInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpDeleteClientInfo!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpEnumSubnetClients(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnetClients!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(ClientInfo), util.toPointer(ClientsRead), util.toPointer(ClientsTotal));
}

export function DhcpGetClientOptions(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientIpAddress: number /* u32 */,
  ClientSubnetMask: number /* u32 */,
  ClientOptions: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetClientOptions!(util.pwstrToFfi(ServerIpAddress), ClientIpAddress, ClientSubnetMask, util.toPointer(ClientOptions));
}

export function DhcpGetMibInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  MibInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetMibInfo!(util.pwstrToFfi(ServerIpAddress), util.toPointer(MibInfo));
}

export function DhcpServerSetConfig(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FieldsToSet: number /* u32 */,
  ConfigInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerSetConfig!(util.pwstrToFfi(ServerIpAddress), FieldsToSet, util.toPointer(ConfigInfo));
}

export function DhcpServerGetConfig(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ConfigInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerGetConfig!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ConfigInfo));
}

export function DhcpScanDatabase(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  FixFlag: number /* u32 */,
  ScanList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpScanDatabase!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, FixFlag, util.toPointer(ScanList));
}

export function DhcpRpcFreeMemory(
  BufferPointer: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libDHCPSAPI_dll.DhcpRpcFreeMemory!(util.toPointer(BufferPointer));
}

export function DhcpGetVersion(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  MajorVersion: Deno.PointerValue | Uint8Array /* ptr */,
  MinorVersion: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetVersion!(util.pwstrToFfi(ServerIpAddress), util.toPointer(MajorVersion), util.toPointer(MinorVersion));
}

export function DhcpAddSubnetElementV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  AddElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpAddSubnetElementV4!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(AddElementInfo));
}

export function DhcpEnumSubnetElementsV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  EnumElementType: DHCP_SUBNET_ELEMENT_TYPE /* Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_TYPE */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  EnumElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnetElementsV4!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, EnumElementType, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(EnumElementInfo), util.toPointer(ElementsRead), util.toPointer(ElementsTotal));
}

export function DhcpRemoveSubnetElementV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  RemoveElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ForceFlag: DHCP_FORCE_FLAG /* Windows.Win32.NetworkManagement.Dhcp.DHCP_FORCE_FLAG */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpRemoveSubnetElementV4!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(RemoveElementInfo), ForceFlag);
}

export function DhcpCreateClientInfoV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpCreateClientInfoV4!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpSetClientInfoV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetClientInfoV4!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpGetClientInfoV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SearchInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetClientInfoV4!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SearchInfo), util.toPointer(ClientInfo));
}

export function DhcpEnumSubnetClientsV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnetClientsV4!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(ClientInfo), util.toPointer(ClientsRead), util.toPointer(ClientsTotal));
}

export function DhcpServerSetConfigV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FieldsToSet: number /* u32 */,
  ConfigInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerSetConfigV4!(util.pwstrToFfi(ServerIpAddress), FieldsToSet, util.toPointer(ConfigInfo));
}

export function DhcpServerGetConfigV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ConfigInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerGetConfigV4!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ConfigInfo));
}

export function DhcpSetSuperScopeV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  SuperScopeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ChangeExisting: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetSuperScopeV4!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.pwstrToFfi(SuperScopeName), util.boolToFfi(ChangeExisting));
}

export function DhcpDeleteSuperScopeV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SuperScopeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpDeleteSuperScopeV4!(util.pwstrToFfi(ServerIpAddress), util.pwstrToFfi(SuperScopeName));
}

export function DhcpGetSuperScopeInfoV4(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SuperScopeTable: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetSuperScopeInfoV4!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SuperScopeTable));
}

export function DhcpEnumSubnetClientsV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnetClientsV5!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(ClientInfo), util.toPointer(ClientsRead), util.toPointer(ClientsTotal));
}

export function DhcpCreateOptionV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionId: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpCreateOptionV5!(util.pwstrToFfi(ServerIpAddress), Flags, OptionId, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(OptionInfo));
}

export function DhcpSetOptionInfoV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetOptionInfoV5!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(OptionInfo));
}

export function DhcpGetOptionInfoV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetOptionInfoV5!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(OptionInfo));
}

export function DhcpEnumOptionsV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  Options: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsRead: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumOptionsV5!(util.pwstrToFfi(ServerIpAddress), Flags, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(Options), util.toPointer(OptionsRead), util.toPointer(OptionsTotal));
}

export function DhcpRemoveOptionV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpRemoveOptionV5!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName));
}

export function DhcpSetOptionValueV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionId: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OptionValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetOptionValueV5!(util.pwstrToFfi(ServerIpAddress), Flags, OptionId, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo), util.toPointer(OptionValue));
}

export function DhcpSetOptionValuesV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OptionValues: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetOptionValuesV5!(util.pwstrToFfi(ServerIpAddress), Flags, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo), util.toPointer(OptionValues));
}

export function DhcpGetOptionValueV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OptionValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetOptionValueV5!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo), util.toPointer(OptionValue));
}

export function DhcpGetOptionValueV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OptionValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetOptionValueV6!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo), util.toPointer(OptionValue));
}

export function DhcpEnumOptionValuesV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  OptionValues: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsRead: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumOptionValuesV5!(util.pwstrToFfi(ServerIpAddress), Flags, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo), util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(OptionValues), util.toPointer(OptionsRead), util.toPointer(OptionsTotal));
}

export function DhcpRemoveOptionValueV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpRemoveOptionValueV5!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo));
}

export function DhcpCreateClass(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ReservedMustBeZero: number /* u32 */,
  ClassInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpCreateClass!(util.pwstrToFfi(ServerIpAddress), ReservedMustBeZero, util.toPointer(ClassInfo));
}

export function DhcpModifyClass(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ReservedMustBeZero: number /* u32 */,
  ClassInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpModifyClass!(util.pwstrToFfi(ServerIpAddress), ReservedMustBeZero, util.toPointer(ClassInfo));
}

export function DhcpDeleteClass(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ReservedMustBeZero: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpDeleteClass!(util.pwstrToFfi(ServerIpAddress), ReservedMustBeZero, util.pwstrToFfi(ClassName));
}

export function DhcpGetClassInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ReservedMustBeZero: number /* u32 */,
  PartialClassInfo: Deno.PointerValue | Uint8Array /* ptr */,
  FilledClassInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetClassInfo!(util.pwstrToFfi(ServerIpAddress), ReservedMustBeZero, util.toPointer(PartialClassInfo), util.toPointer(FilledClassInfo));
}

export function DhcpEnumClasses(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ReservedMustBeZero: number /* u32 */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  ClassInfoArray: Deno.PointerValue | Uint8Array /* ptr */,
  nRead: Deno.PointerValue | Uint8Array /* ptr */,
  nTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumClasses!(util.pwstrToFfi(ServerIpAddress), ReservedMustBeZero, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(ClassInfoArray), util.toPointer(nRead), util.toPointer(nTotal));
}

export function DhcpGetAllOptions(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionStruct: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetAllOptions!(util.pwstrToFfi(ServerIpAddress), Flags, util.toPointer(OptionStruct));
}

export function DhcpGetAllOptionsV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionStruct: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetAllOptionsV6!(util.pwstrToFfi(ServerIpAddress), Flags, util.toPointer(OptionStruct));
}

export function DhcpGetAllOptionValues(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Values: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetAllOptionValues!(util.pwstrToFfi(ServerIpAddress), Flags, util.toPointer(ScopeInfo), util.toPointer(Values));
}

export function DhcpGetAllOptionValuesV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Values: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetAllOptionValuesV6!(util.pwstrToFfi(ServerIpAddress), Flags, util.toPointer(ScopeInfo), util.toPointer(Values));
}

export function DhcpEnumServers(
  Flags: number /* u32 */,
  IdInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Servers: Deno.PointerValue | Uint8Array /* ptr */,
  CallbackFn: Deno.PointerValue | Uint8Array /* ptr */,
  CallbackData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumServers!(Flags, util.toPointer(IdInfo), util.toPointer(Servers), util.toPointer(CallbackFn), util.toPointer(CallbackData));
}

export function DhcpAddServer(
  Flags: number /* u32 */,
  IdInfo: Deno.PointerValue | Uint8Array /* ptr */,
  NewServer: Deno.PointerValue | Uint8Array /* ptr */,
  CallbackFn: Deno.PointerValue | Uint8Array /* ptr */,
  CallbackData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpAddServer!(Flags, util.toPointer(IdInfo), util.toPointer(NewServer), util.toPointer(CallbackFn), util.toPointer(CallbackData));
}

export function DhcpDeleteServer(
  Flags: number /* u32 */,
  IdInfo: Deno.PointerValue | Uint8Array /* ptr */,
  NewServer: Deno.PointerValue | Uint8Array /* ptr */,
  CallbackFn: Deno.PointerValue | Uint8Array /* ptr */,
  CallbackData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpDeleteServer!(Flags, util.toPointer(IdInfo), util.toPointer(NewServer), util.toPointer(CallbackFn), util.toPointer(CallbackData));
}

export function DhcpGetServerBindingInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  BindElementsInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetServerBindingInfo!(util.pwstrToFfi(ServerIpAddress), Flags, util.toPointer(BindElementsInfo));
}

export function DhcpSetServerBindingInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  BindElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetServerBindingInfo!(util.pwstrToFfi(ServerIpAddress), Flags, util.toPointer(BindElementInfo));
}

export function DhcpAddSubnetElementV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  AddElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpAddSubnetElementV5!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(AddElementInfo));
}

export function DhcpEnumSubnetElementsV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  EnumElementType: DHCP_SUBNET_ELEMENT_TYPE /* Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_TYPE */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  EnumElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnetElementsV5!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, EnumElementType, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(EnumElementInfo), util.toPointer(ElementsRead), util.toPointer(ElementsTotal));
}

export function DhcpRemoveSubnetElementV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  RemoveElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ForceFlag: DHCP_FORCE_FLAG /* Windows.Win32.NetworkManagement.Dhcp.DHCP_FORCE_FLAG */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpRemoveSubnetElementV5!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(RemoveElementInfo), ForceFlag);
}

export function DhcpV4EnumSubnetReservations(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  EnumElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4EnumSubnetReservations!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(EnumElementInfo), util.toPointer(ElementsRead), util.toPointer(ElementsTotal));
}

export function DhcpCreateOptionV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionId: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpCreateOptionV6!(util.pwstrToFfi(ServerIpAddress), Flags, OptionId, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(OptionInfo));
}

export function DhcpRemoveOptionV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpRemoveOptionV6!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName));
}

export function DhcpEnumOptionsV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  Options: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsRead: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumOptionsV6!(util.pwstrToFfi(ServerIpAddress), Flags, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(Options), util.toPointer(OptionsRead), util.toPointer(OptionsTotal));
}

export function DhcpRemoveOptionValueV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpRemoveOptionValueV6!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo));
}

export function DhcpGetOptionInfoV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetOptionInfoV6!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(OptionInfo));
}

export function DhcpSetOptionInfoV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetOptionInfoV6!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(OptionInfo));
}

export function DhcpSetOptionValueV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionId: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OptionValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetOptionValueV6!(util.pwstrToFfi(ServerIpAddress), Flags, OptionId, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo), util.toPointer(OptionValue));
}

export function DhcpGetSubnetInfoVQ(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  SubnetInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetSubnetInfoVQ!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(SubnetInfo));
}

export function DhcpCreateSubnetVQ(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  SubnetInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpCreateSubnetVQ!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(SubnetInfo));
}

export function DhcpSetSubnetInfoVQ(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  SubnetInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetSubnetInfoVQ!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(SubnetInfo));
}

export function DhcpEnumOptionValuesV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  OptionValues: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsRead: Deno.PointerValue | Uint8Array /* ptr */,
  OptionsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumOptionValuesV6!(util.pwstrToFfi(ServerIpAddress), Flags, util.pwstrToFfi(ClassName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo), util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(OptionValues), util.toPointer(OptionsRead), util.toPointer(OptionsTotal));
}

export function DhcpDsInit(): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpDsInit!();
}

export function DhcpDsCleanup(): void /* void */ {
  return libDHCPSAPI_dll.DhcpDsCleanup!();
}

export function DhcpSetThreadOptions(
  Flags: number /* u32 */,
  Reserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetThreadOptions!(Flags, util.toPointer(Reserved));
}

export function DhcpGetThreadOptions(
  pFlags: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetThreadOptions!(util.toPointer(pFlags), util.toPointer(Reserved));
}

export function DhcpServerQueryAttribute(
  ServerIpAddr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: number /* u32 */,
  DhcpAttribId: number /* u32 */,
  pDhcpAttrib: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerQueryAttribute!(util.pwstrToFfi(ServerIpAddr), dwReserved, DhcpAttribId, util.toPointer(pDhcpAttrib));
}

export function DhcpServerQueryAttributes(
  ServerIpAddr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: number /* u32 */,
  dwAttribCount: number /* u32 */,
  pDhcpAttribs: Deno.PointerValue | Uint8Array /* ptr */,
  pDhcpAttribArr: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerQueryAttributes!(util.pwstrToFfi(ServerIpAddr), dwReserved, dwAttribCount, util.toPointer(pDhcpAttribs), util.toPointer(pDhcpAttribArr));
}

export function DhcpServerRedoAuthorization(
  ServerIpAddr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: number /* u32 */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerRedoAuthorization!(util.pwstrToFfi(ServerIpAddr), dwReserved);
}

export function DhcpAuditLogSetParams(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  AuditLogDir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DiskCheckInterval: number /* u32 */,
  MaxLogFilesSize: number /* u32 */,
  MinSpaceOnDisk: number /* u32 */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpAuditLogSetParams!(util.pwstrToFfi(ServerIpAddress), Flags, util.pwstrToFfi(AuditLogDir), DiskCheckInterval, MaxLogFilesSize, MinSpaceOnDisk);
}

export function DhcpAuditLogGetParams(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  AuditLogDir: Deno.PointerValue | Uint8Array /* ptr */,
  DiskCheckInterval: Deno.PointerValue | Uint8Array /* ptr */,
  MaxLogFilesSize: Deno.PointerValue | Uint8Array /* ptr */,
  MinSpaceOnDisk: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpAuditLogGetParams!(util.pwstrToFfi(ServerIpAddress), Flags, util.toPointer(AuditLogDir), util.toPointer(DiskCheckInterval), util.toPointer(MaxLogFilesSize), util.toPointer(MinSpaceOnDisk));
}

export function DhcpServerQueryDnsRegCredentials(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  UnameSize: number /* u32 */,
  Uname: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DomainSize: number /* u32 */,
  Domain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerQueryDnsRegCredentials!(util.pwstrToFfi(ServerIpAddress), UnameSize, util.pwstrToFfi(Uname), DomainSize, util.pwstrToFfi(Domain));
}

export function DhcpServerSetDnsRegCredentials(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Uname: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Domain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Passwd: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerSetDnsRegCredentials!(util.pwstrToFfi(ServerIpAddress), util.pwstrToFfi(Uname), util.pwstrToFfi(Domain), util.pwstrToFfi(Passwd));
}

export function DhcpServerSetDnsRegCredentialsV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Uname: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Domain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Passwd: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerSetDnsRegCredentialsV5!(util.pwstrToFfi(ServerIpAddress), util.pwstrToFfi(Uname), util.pwstrToFfi(Domain), util.pwstrToFfi(Passwd));
}

export function DhcpServerBackupDatabase(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Path: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerBackupDatabase!(util.pwstrToFfi(ServerIpAddress), util.pwstrToFfi(Path));
}

export function DhcpServerRestoreDatabase(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Path: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerRestoreDatabase!(util.pwstrToFfi(ServerIpAddress), util.pwstrToFfi(Path));
}

export function DhcpServerSetConfigVQ(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FieldsToSet: number /* u32 */,
  ConfigInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerSetConfigVQ!(util.pwstrToFfi(ServerIpAddress), FieldsToSet, util.toPointer(ConfigInfo));
}

export function DhcpServerGetConfigVQ(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ConfigInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerGetConfigVQ!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ConfigInfo));
}

export function DhcpGetServerSpecificStrings(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ServerSpecificStrings: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetServerSpecificStrings!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ServerSpecificStrings));
}

export function DhcpServerAuditlogParamsFree(
  ConfigInfo: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libDHCPSAPI_dll.DhcpServerAuditlogParamsFree!(util.toPointer(ConfigInfo));
}

export function DhcpCreateSubnetV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  SubnetInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpCreateSubnetV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SubnetAddress), util.toPointer(SubnetInfo));
}

export function DhcpDeleteSubnetV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  ForceFlag: DHCP_FORCE_FLAG /* Windows.Win32.NetworkManagement.Dhcp.DHCP_FORCE_FLAG */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpDeleteSubnetV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SubnetAddress), ForceFlag);
}

export function DhcpEnumSubnetsV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  EnumInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnetsV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(EnumInfo), util.toPointer(ElementsRead), util.toPointer(ElementsTotal));
}

export function DhcpAddSubnetElementV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  AddElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpAddSubnetElementV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SubnetAddress), util.toPointer(AddElementInfo));
}

export function DhcpRemoveSubnetElementV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  RemoveElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ForceFlag: DHCP_FORCE_FLAG /* Windows.Win32.NetworkManagement.Dhcp.DHCP_FORCE_FLAG */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpRemoveSubnetElementV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SubnetAddress), util.toPointer(RemoveElementInfo), ForceFlag);
}

export function DhcpEnumSubnetElementsV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  EnumElementType: DHCP_SUBNET_ELEMENT_TYPE_V6 /* Windows.Win32.NetworkManagement.Dhcp.DHCP_SUBNET_ELEMENT_TYPE_V6 */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  EnumElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnetElementsV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SubnetAddress), EnumElementType, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(EnumElementInfo), util.toPointer(ElementsRead), util.toPointer(ElementsTotal));
}

export function DhcpGetSubnetInfoV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  SubnetInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetSubnetInfoV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SubnetAddress), util.toPointer(SubnetInfo));
}

export function DhcpEnumSubnetClientsV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumSubnetClientsV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SubnetAddress), util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(ClientInfo), util.toPointer(ClientsRead), util.toPointer(ClientsTotal));
}

export function DhcpServerGetConfigV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ConfigInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerGetConfigV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ScopeInfo), util.toPointer(ConfigInfo));
}

export function DhcpServerSetConfigV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  FieldsToSet: number /* u32 */,
  ConfigInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpServerSetConfigV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ScopeInfo), FieldsToSet, util.toPointer(ConfigInfo));
}

export function DhcpSetSubnetInfoV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  SubnetInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetSubnetInfoV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SubnetAddress), util.toPointer(SubnetInfo));
}

export function DhcpGetMibInfoV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  MibInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetMibInfoV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(MibInfo));
}

export function DhcpGetServerBindingInfoV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  BindElementsInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetServerBindingInfoV6!(util.pwstrToFfi(ServerIpAddress), Flags, util.toPointer(BindElementsInfo));
}

export function DhcpSetServerBindingInfoV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  BindElementInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetServerBindingInfoV6!(util.pwstrToFfi(ServerIpAddress), Flags, util.toPointer(BindElementInfo));
}

export function DhcpSetClientInfoV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetClientInfoV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpGetClientInfoV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SearchInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetClientInfoV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SearchInfo), util.toPointer(ClientInfo));
}

export function DhcpDeleteClientInfoV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpDeleteClientInfoV6!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpCreateClassV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ReservedMustBeZero: number /* u32 */,
  ClassInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpCreateClassV6!(util.pwstrToFfi(ServerIpAddress), ReservedMustBeZero, util.toPointer(ClassInfo));
}

export function DhcpModifyClassV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ReservedMustBeZero: number /* u32 */,
  ClassInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpModifyClassV6!(util.pwstrToFfi(ServerIpAddress), ReservedMustBeZero, util.toPointer(ClassInfo));
}

export function DhcpDeleteClassV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ReservedMustBeZero: number /* u32 */,
  ClassName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpDeleteClassV6!(util.pwstrToFfi(ServerIpAddress), ReservedMustBeZero, util.pwstrToFfi(ClassName));
}

export function DhcpEnumClassesV6(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ReservedMustBeZero: number /* u32 */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  ClassInfoArray: Deno.PointerValue | Uint8Array /* ptr */,
  nRead: Deno.PointerValue | Uint8Array /* ptr */,
  nTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpEnumClassesV6!(util.pwstrToFfi(ServerIpAddress), ReservedMustBeZero, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(ClassInfoArray), util.toPointer(nRead), util.toPointer(nTotal));
}

export function DhcpSetSubnetDelayOffer(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  TimeDelayInMilliseconds: number /* u16 */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpSetSubnetDelayOffer!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, TimeDelayInMilliseconds);
}

export function DhcpGetSubnetDelayOffer(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  TimeDelayInMilliseconds: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetSubnetDelayOffer!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(TimeDelayInMilliseconds));
}

export function DhcpGetMibInfoV5(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  MibInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpGetMibInfoV5!(util.pwstrToFfi(ServerIpAddress), util.toPointer(MibInfo));
}

export function DhcpAddSecurityGroup(
  pServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpAddSecurityGroup!(util.pwstrToFfi(pServer));
}

export function DhcpV4GetOptionValue(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OptionValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4GetOptionValue!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(PolicyName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo), util.toPointer(OptionValue));
}

export function DhcpV4SetOptionValue(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionId: number /* u32 */,
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OptionValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4SetOptionValue!(util.pwstrToFfi(ServerIpAddress), Flags, OptionId, util.pwstrToFfi(PolicyName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo), util.toPointer(OptionValue));
}

export function DhcpV4SetOptionValues(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OptionValues: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4SetOptionValues!(util.pwstrToFfi(ServerIpAddress), Flags, util.pwstrToFfi(PolicyName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo), util.toPointer(OptionValues));
}

export function DhcpV4RemoveOptionValue(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  OptionID: number /* u32 */,
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4RemoveOptionValue!(util.pwstrToFfi(ServerIpAddress), Flags, OptionID, util.pwstrToFfi(PolicyName), util.pwstrToFfi(VendorName), util.toPointer(ScopeInfo));
}

export function DhcpV4GetAllOptionValues(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  ScopeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Values: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4GetAllOptionValues!(util.pwstrToFfi(ServerIpAddress), Flags, util.toPointer(ScopeInfo), util.toPointer(Values));
}

export function DhcpV4FailoverCreateRelationship(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pRelationship: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverCreateRelationship!(util.pwstrToFfi(ServerIpAddress), util.toPointer(pRelationship));
}

export function DhcpV4FailoverSetRelationship(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  pRelationship: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverSetRelationship!(util.pwstrToFfi(ServerIpAddress), Flags, util.toPointer(pRelationship));
}

export function DhcpV4FailoverDeleteRelationship(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pRelationshipName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverDeleteRelationship!(util.pwstrToFfi(ServerIpAddress), util.pwstrToFfi(pRelationshipName));
}

export function DhcpV4FailoverGetRelationship(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pRelationshipName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pRelationship: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverGetRelationship!(util.pwstrToFfi(ServerIpAddress), util.pwstrToFfi(pRelationshipName), util.toPointer(pRelationship));
}

export function DhcpV4FailoverEnumRelationship(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  pRelationship: Deno.PointerValue | Uint8Array /* ptr */,
  RelationshipRead: Deno.PointerValue | Uint8Array /* ptr */,
  RelationshipTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverEnumRelationship!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(pRelationship), util.toPointer(RelationshipRead), util.toPointer(RelationshipTotal));
}

export function DhcpV4FailoverAddScopeToRelationship(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pRelationship: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverAddScopeToRelationship!(util.pwstrToFfi(ServerIpAddress), util.toPointer(pRelationship));
}

export function DhcpV4FailoverDeleteScopeFromRelationship(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pRelationship: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverDeleteScopeFromRelationship!(util.pwstrToFfi(ServerIpAddress), util.toPointer(pRelationship));
}

export function DhcpV4FailoverGetScopeRelationship(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeId: number /* u32 */,
  pRelationship: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverGetScopeRelationship!(util.pwstrToFfi(ServerIpAddress), ScopeId, util.toPointer(pRelationship));
}

export function DhcpV4FailoverGetScopeStatistics(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeId: number /* u32 */,
  pStats: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverGetScopeStatistics!(util.pwstrToFfi(ServerIpAddress), ScopeId, util.toPointer(pStats));
}

export function DhcpV4FailoverGetClientInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SearchInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverGetClientInfo!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SearchInfo), util.toPointer(ClientInfo));
}

export function DhcpV4FailoverGetSystemTime(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pTime: Deno.PointerValue | Uint8Array /* ptr */,
  pMaxAllowedDeltaTime: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverGetSystemTime!(util.pwstrToFfi(ServerIpAddress), util.toPointer(pTime), util.toPointer(pMaxAllowedDeltaTime));
}

export function DhcpV4FailoverGetAddressStatus(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  pStatus: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverGetAddressStatus!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(pStatus));
}

export function DhcpV4FailoverTriggerAddrAllocation(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pFailRelName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4FailoverTriggerAddrAllocation!(util.pwstrToFfi(ServerIpAddress), util.pwstrToFfi(pFailRelName));
}

export function DhcpHlprCreateV4Policy(
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fGlobalPolicy: boolean /* Windows.Win32.Foundation.BOOL */,
  Subnet: number /* u32 */,
  ProcessingOrder: number /* u32 */,
  RootOperator: DHCP_POL_LOGIC_OPER /* Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_LOGIC_OPER */,
  Description: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Enabled: boolean /* Windows.Win32.Foundation.BOOL */,
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpHlprCreateV4Policy!(util.pwstrToFfi(PolicyName), util.boolToFfi(fGlobalPolicy), Subnet, ProcessingOrder, RootOperator, util.pwstrToFfi(Description), util.boolToFfi(Enabled), util.toPointer(Policy));
}

export function DhcpHlprCreateV4PolicyEx(
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fGlobalPolicy: boolean /* Windows.Win32.Foundation.BOOL */,
  Subnet: number /* u32 */,
  ProcessingOrder: number /* u32 */,
  RootOperator: DHCP_POL_LOGIC_OPER /* Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_LOGIC_OPER */,
  Description: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Enabled: boolean /* Windows.Win32.Foundation.BOOL */,
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpHlprCreateV4PolicyEx!(util.pwstrToFfi(PolicyName), util.boolToFfi(fGlobalPolicy), Subnet, ProcessingOrder, RootOperator, util.pwstrToFfi(Description), util.boolToFfi(Enabled), util.toPointer(Policy));
}

export function DhcpHlprAddV4PolicyExpr(
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
  ParentExpr: number /* u32 */,
  Operator: DHCP_POL_LOGIC_OPER /* Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_LOGIC_OPER */,
  ExprIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpHlprAddV4PolicyExpr!(util.toPointer(Policy), ParentExpr, Operator, util.toPointer(ExprIndex));
}

export function DhcpHlprAddV4PolicyCondition(
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
  ParentExpr: number /* u32 */,
  Type: DHCP_POL_ATTR_TYPE /* Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_ATTR_TYPE */,
  OptionID: number /* u32 */,
  SubOptionID: number /* u32 */,
  VendorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Operator: DHCP_POL_COMPARATOR /* Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_COMPARATOR */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  ValueLength: number /* u32 */,
  ConditionIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpHlprAddV4PolicyCondition!(util.toPointer(Policy), ParentExpr, Type, OptionID, SubOptionID, util.pwstrToFfi(VendorName), Operator, util.toPointer(Value), ValueLength, util.toPointer(ConditionIndex));
}

export function DhcpHlprAddV4PolicyRange(
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
  Range: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpHlprAddV4PolicyRange!(util.toPointer(Policy), util.toPointer(Range));
}

export function DhcpHlprResetV4PolicyExpr(
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpHlprResetV4PolicyExpr!(util.toPointer(Policy));
}

export function DhcpHlprModifyV4PolicyExpr(
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
  Operator: DHCP_POL_LOGIC_OPER /* Windows.Win32.NetworkManagement.Dhcp.DHCP_POL_LOGIC_OPER */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpHlprModifyV4PolicyExpr!(util.toPointer(Policy), Operator);
}

export function DhcpHlprFreeV4Policy(
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libDHCPSAPI_dll.DhcpHlprFreeV4Policy!(util.toPointer(Policy));
}

export function DhcpHlprFreeV4PolicyArray(
  PolicyArray: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libDHCPSAPI_dll.DhcpHlprFreeV4PolicyArray!(util.toPointer(PolicyArray));
}

export function DhcpHlprFreeV4PolicyEx(
  PolicyEx: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libDHCPSAPI_dll.DhcpHlprFreeV4PolicyEx!(util.toPointer(PolicyEx));
}

export function DhcpHlprFreeV4PolicyExArray(
  PolicyExArray: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libDHCPSAPI_dll.DhcpHlprFreeV4PolicyExArray!(util.toPointer(PolicyExArray));
}

export function DhcpHlprFreeV4DhcpProperty(
  Property: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libDHCPSAPI_dll.DhcpHlprFreeV4DhcpProperty!(util.toPointer(Property));
}

export function DhcpHlprFreeV4DhcpPropertyArray(
  PropertyArray: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libDHCPSAPI_dll.DhcpHlprFreeV4DhcpPropertyArray!(util.toPointer(PropertyArray));
}

export function DhcpHlprFindV4DhcpProperty(
  PropertyArray: Deno.PointerValue | Uint8Array /* ptr */,
  ID: DHCP_PROPERTY_ID /* Windows.Win32.NetworkManagement.Dhcp.DHCP_PROPERTY_ID */,
  Type: DHCP_PROPERTY_TYPE /* Windows.Win32.NetworkManagement.Dhcp.DHCP_PROPERTY_TYPE */,
): Deno.PointerValue /* ptr */ {
  return libDHCPSAPI_dll.DhcpHlprFindV4DhcpProperty!(util.toPointer(PropertyArray), ID, Type);
}

export function DhcpHlprIsV4PolicySingleUC(
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDHCPSAPI_dll.DhcpHlprIsV4PolicySingleUC!(util.toPointer(Policy)));
}

export function DhcpV4QueryPolicyEnforcement(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fGlobalPolicy: boolean /* Windows.Win32.Foundation.BOOL */,
  SubnetAddress: number /* u32 */,
  Enabled: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4QueryPolicyEnforcement!(util.pwstrToFfi(ServerIpAddress), util.boolToFfi(fGlobalPolicy), SubnetAddress, util.toPointer(Enabled));
}

export function DhcpV4SetPolicyEnforcement(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fGlobalPolicy: boolean /* Windows.Win32.Foundation.BOOL */,
  SubnetAddress: number /* u32 */,
  Enable: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4SetPolicyEnforcement!(util.pwstrToFfi(ServerIpAddress), util.boolToFfi(fGlobalPolicy), SubnetAddress, util.boolToFfi(Enable));
}

export function DhcpHlprIsV4PolicyWellFormed(
  pPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDHCPSAPI_dll.DhcpHlprIsV4PolicyWellFormed!(util.toPointer(pPolicy)));
}

export function DhcpHlprIsV4PolicyValid(
  pPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpHlprIsV4PolicyValid!(util.toPointer(pPolicy));
}

export function DhcpV4CreatePolicy(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4CreatePolicy!(util.pwstrToFfi(ServerIpAddress), util.toPointer(pPolicy));
}

export function DhcpV4GetPolicy(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fGlobalPolicy: boolean /* Windows.Win32.Foundation.BOOL */,
  SubnetAddress: number /* u32 */,
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4GetPolicy!(util.pwstrToFfi(ServerIpAddress), util.boolToFfi(fGlobalPolicy), SubnetAddress, util.pwstrToFfi(PolicyName), util.toPointer(Policy));
}

export function DhcpV4SetPolicy(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FieldsModified: number /* u32 */,
  fGlobalPolicy: boolean /* Windows.Win32.Foundation.BOOL */,
  SubnetAddress: number /* u32 */,
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4SetPolicy!(util.pwstrToFfi(ServerIpAddress), FieldsModified, util.boolToFfi(fGlobalPolicy), SubnetAddress, util.pwstrToFfi(PolicyName), util.toPointer(Policy));
}

export function DhcpV4DeletePolicy(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fGlobalPolicy: boolean /* Windows.Win32.Foundation.BOOL */,
  SubnetAddress: number /* u32 */,
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4DeletePolicy!(util.pwstrToFfi(ServerIpAddress), util.boolToFfi(fGlobalPolicy), SubnetAddress, util.pwstrToFfi(PolicyName));
}

export function DhcpV4EnumPolicies(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  fGlobalPolicy: boolean /* Windows.Win32.Foundation.BOOL */,
  SubnetAddress: number /* u32 */,
  EnumInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4EnumPolicies!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ResumeHandle), PreferredMaximum, util.boolToFfi(fGlobalPolicy), SubnetAddress, util.toPointer(EnumInfo), util.toPointer(ElementsRead), util.toPointer(ElementsTotal));
}

export function DhcpV4AddPolicyRange(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Range: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4AddPolicyRange!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.pwstrToFfi(PolicyName), util.toPointer(Range));
}

export function DhcpV4RemovePolicyRange(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Range: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4RemovePolicyRange!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.pwstrToFfi(PolicyName), util.toPointer(Range));
}

export function DhcpV6SetStatelessStoreParams(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fServerLevel: boolean /* Windows.Win32.Foundation.BOOL */,
  SubnetAddress: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  FieldModified: number /* u32 */,
  Params: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV6SetStatelessStoreParams!(util.pwstrToFfi(ServerIpAddress), util.boolToFfi(fServerLevel), util.toPointer(SubnetAddress), FieldModified, util.toPointer(Params));
}

export function DhcpV6GetStatelessStoreParams(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fServerLevel: boolean /* Windows.Win32.Foundation.BOOL */,
  SubnetAddress: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  Params: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV6GetStatelessStoreParams!(util.pwstrToFfi(ServerIpAddress), util.boolToFfi(fServerLevel), util.toPointer(SubnetAddress), util.toPointer(Params));
}

export function DhcpV6GetStatelessStatistics(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  StatelessStats: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV6GetStatelessStatistics!(util.pwstrToFfi(ServerIpAddress), util.toPointer(StatelessStats));
}

export function DhcpV4CreateClientInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4CreateClientInfo!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpV4EnumSubnetClients(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4EnumSubnetClients!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(ClientInfo), util.toPointer(ClientsRead), util.toPointer(ClientsTotal));
}

export function DhcpV4GetClientInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SearchInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4GetClientInfo!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SearchInfo), util.toPointer(ClientInfo));
}

export function DhcpV6CreateClientInfo(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV6CreateClientInfo!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpV4GetFreeIPAddress(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeId: number /* u32 */,
  StartIP: number /* u32 */,
  EndIP: number /* u32 */,
  NumFreeAddrReq: number /* u32 */,
  IPAddrList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4GetFreeIPAddress!(util.pwstrToFfi(ServerIpAddress), ScopeId, StartIP, EndIP, NumFreeAddrReq, util.toPointer(IPAddrList));
}

export function DhcpV6GetFreeIPAddress(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ScopeId: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  StartIP: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  EndIP: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Dhcp.DHCP_IPV6_ADDRESS */,
  NumFreeAddrReq: number /* u32 */,
  IPAddrList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV6GetFreeIPAddress!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ScopeId), util.toPointer(StartIP), util.toPointer(EndIP), NumFreeAddrReq, util.toPointer(IPAddrList));
}

export function DhcpV4CreateClientInfoEx(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4CreateClientInfoEx!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ClientInfo));
}

export function DhcpV4EnumSubnetClientsEx(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SubnetAddress: number /* u32 */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ClientsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4EnumSubnetClientsEx!(util.pwstrToFfi(ServerIpAddress), SubnetAddress, util.toPointer(ResumeHandle), PreferredMaximum, util.toPointer(ClientInfo), util.toPointer(ClientsRead), util.toPointer(ClientsTotal));
}

export function DhcpV4GetClientInfoEx(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SearchInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4GetClientInfoEx!(util.pwstrToFfi(ServerIpAddress), util.toPointer(SearchInfo), util.toPointer(ClientInfo));
}

export function DhcpV4CreatePolicyEx(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  PolicyEx: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4CreatePolicyEx!(util.pwstrToFfi(ServerIpAddress), util.toPointer(PolicyEx));
}

export function DhcpV4GetPolicyEx(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  GlobalPolicy: boolean /* Windows.Win32.Foundation.BOOL */,
  SubnetAddress: number /* u32 */,
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4GetPolicyEx!(util.pwstrToFfi(ServerIpAddress), util.boolToFfi(GlobalPolicy), SubnetAddress, util.pwstrToFfi(PolicyName), util.toPointer(Policy));
}

export function DhcpV4SetPolicyEx(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  FieldsModified: number /* u32 */,
  GlobalPolicy: boolean /* Windows.Win32.Foundation.BOOL */,
  SubnetAddress: number /* u32 */,
  PolicyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Policy: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4SetPolicyEx!(util.pwstrToFfi(ServerIpAddress), FieldsModified, util.boolToFfi(GlobalPolicy), SubnetAddress, util.pwstrToFfi(PolicyName), util.toPointer(Policy));
}

export function DhcpV4EnumPoliciesEx(
  ServerIpAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ResumeHandle: Deno.PointerValue | Uint8Array /* ptr */,
  PreferredMaximum: number /* u32 */,
  GlobalPolicy: boolean /* Windows.Win32.Foundation.BOOL */,
  SubnetAddress: number /* u32 */,
  EnumInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsRead: Deno.PointerValue | Uint8Array /* ptr */,
  ElementsTotal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDHCPSAPI_dll.DhcpV4EnumPoliciesEx!(util.pwstrToFfi(ServerIpAddress), util.toPointer(ResumeHandle), PreferredMaximum, util.boolToFfi(GlobalPolicy), SubnetAddress, util.toPointer(EnumInfo), util.toPointer(ElementsRead), util.toPointer(ElementsTotal));
}

