/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.WindowsFirewall.Apis

import * as util from "../../util.ts";

// Enums
export type NETCON_CHARACTERISTIC_FLAGS = number;
export type NETCON_STATUS = number;
export type NETCON_TYPE = number;
export type NETCON_MEDIATYPE = number;
export type NETCONMGR_ENUM_FLAGS = number;
export type NETCONUI_CONNECT_FLAGS = number;
export type SHARINGCONNECTIONTYPE = number;
export type SHARINGCONNECTION_ENUM_FLAGS = number;
export type ICS_TARGETTYPE = number;
export type NET_FW_POLICY_TYPE = number;
export type NET_FW_PROFILE_TYPE = number;
export type NET_FW_PROFILE_TYPE2 = number;
export type NET_FW_IP_VERSION = number;
export type NET_FW_SCOPE = number;
export type NET_FW_IP_PROTOCOL = number;
export type NET_FW_SERVICE_TYPE = number;
export type NET_FW_RULE_DIRECTION = number;
export type NET_FW_ACTION = number;
export type NET_FW_MODIFY_STATE = number;
export type NET_FW_RULE_CATEGORY = number;
export type NET_FW_EDGE_TRAVERSAL_TYPE = number;
export type NET_FW_AUTHENTICATE_TYPE = number;
export type NETISO_FLAG = number;
export type INET_FIREWALL_AC_CREATION_TYPE = number;
export type INET_FIREWALL_AC_CHANGE_TYPE = number;
export type NETISO_ERROR_TYPE = number;
export type _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE = number;
export type _tag_FW_DYNAMIC_KEYWORD_ADDRESS_FLAGS = number;
export type _tag_FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS = number;

// Constants
export const NETCON_MAX_NAME_LEN = 256;
export const S_OBJECT_NO_LONGER_VALID = 4415226380290;
export const NETISO_GEID_FOR_WDAG = 1;
export const NETISO_GEID_FOR_NEUTRAL_AWARE = 2;
export const NCCF_NONE = 0;
export const NCCF_ALL_USERS = 1;
export const NCCF_ALLOW_DUPLICATION = 2;
export const NCCF_ALLOW_REMOVAL = 4;
export const NCCF_ALLOW_RENAME = 8;
export const NCCF_INCOMING_ONLY = 32;
export const NCCF_OUTGOING_ONLY = 64;
export const NCCF_BRANDED = 128;
export const NCCF_SHARED = 256;
export const NCCF_BRIDGED = 512;
export const NCCF_FIREWALLED = 1024;
export const NCCF_DEFAULT = 2048;
export const NCCF_HOMENET_CAPABLE = 4096;
export const NCCF_SHARED_PRIVATE = 8192;
export const NCCF_QUARANTINED = 16384;
export const NCCF_RESERVED = 32768;
export const NCCF_HOSTED_NETWORK = 65536;
export const NCCF_VIRTUAL_STATION = 131072;
export const NCCF_WIFI_DIRECT = 262144;
export const NCCF_BLUETOOTH_MASK = 983040;
export const NCCF_LAN_MASK = 15728640;
export const NCS_DISCONNECTED = 0;
export const NCS_CONNECTING = 1;
export const NCS_CONNECTED = 2;
export const NCS_DISCONNECTING = 3;
export const NCS_HARDWARE_NOT_PRESENT = 4;
export const NCS_HARDWARE_DISABLED = 5;
export const NCS_HARDWARE_MALFUNCTION = 6;
export const NCS_MEDIA_DISCONNECTED = 7;
export const NCS_AUTHENTICATING = 8;
export const NCS_AUTHENTICATION_SUCCEEDED = 9;
export const NCS_AUTHENTICATION_FAILED = 10;
export const NCS_INVALID_ADDRESS = 11;
export const NCS_CREDENTIALS_REQUIRED = 12;
export const NCS_ACTION_REQUIRED = 13;
export const NCS_ACTION_REQUIRED_RETRY = 14;
export const NCS_CONNECT_FAILED = 15;
export const NCT_DIRECT_CONNECT = 0;
export const NCT_INBOUND = 1;
export const NCT_INTERNET = 2;
export const NCT_LAN = 3;
export const NCT_PHONE = 4;
export const NCT_TUNNEL = 5;
export const NCT_BRIDGE = 6;
export const NCM_NONE = 0;
export const NCM_DIRECT = 1;
export const NCM_ISDN = 2;
export const NCM_LAN = 3;
export const NCM_PHONE = 4;
export const NCM_TUNNEL = 5;
export const NCM_PPPOE = 6;
export const NCM_BRIDGE = 7;
export const NCM_SHAREDACCESSHOST_LAN = 8;
export const NCM_SHAREDACCESSHOST_RAS = 9;
export const NCME_DEFAULT = 0;
export const NCME_HIDDEN = 1;
export const NCUC_DEFAULT = 0;
export const NCUC_NO_UI = 1;
export const NCUC_ENABLE_DISABLE = 2;
export const ICSSHARINGTYPE_PUBLIC = 0;
export const ICSSHARINGTYPE_PRIVATE = 1;
export const ICSSC_DEFAULT = 0;
export const ICSSC_ENABLED = 1;
export const ICSTT_NAME = 0;
export const ICSTT_IPADDRESS = 1;
export const NET_FW_POLICY_GROUP = 0;
export const NET_FW_POLICY_LOCAL = 1;
export const NET_FW_POLICY_EFFECTIVE = 2;
export const NET_FW_POLICY_TYPE_MAX = 3;
export const NET_FW_PROFILE_DOMAIN = 0;
export const NET_FW_PROFILE_STANDARD = 1;
export const NET_FW_PROFILE_CURRENT = 2;
export const NET_FW_PROFILE_TYPE_MAX = 3;
export const NET_FW_PROFILE2_DOMAIN = 1;
export const NET_FW_PROFILE2_PRIVATE = 2;
export const NET_FW_PROFILE2_PUBLIC = 4;
export const NET_FW_PROFILE2_ALL = 2147483647;
export const NET_FW_IP_VERSION_V4 = 0;
export const NET_FW_IP_VERSION_V6 = 1;
export const NET_FW_IP_VERSION_ANY = 2;
export const NET_FW_IP_VERSION_MAX = 3;
export const NET_FW_SCOPE_ALL = 0;
export const NET_FW_SCOPE_LOCAL_SUBNET = 1;
export const NET_FW_SCOPE_CUSTOM = 2;
export const NET_FW_SCOPE_MAX = 3;
export const NET_FW_IP_PROTOCOL_TCP = 6;
export const NET_FW_IP_PROTOCOL_UDP = 17;
export const NET_FW_IP_PROTOCOL_ANY = 256;
export const NET_FW_SERVICE_FILE_AND_PRINT = 0;
export const NET_FW_SERVICE_UPNP = 1;
export const NET_FW_SERVICE_REMOTE_DESKTOP = 2;
export const NET_FW_SERVICE_NONE = 3;
export const NET_FW_SERVICE_TYPE_MAX = 4;
export const NET_FW_RULE_DIR_IN = 1;
export const NET_FW_RULE_DIR_OUT = 2;
export const NET_FW_RULE_DIR_MAX = 3;
export const NET_FW_ACTION_BLOCK = 0;
export const NET_FW_ACTION_ALLOW = 1;
export const NET_FW_ACTION_MAX = 2;
export const NET_FW_MODIFY_STATE_OK = 0;
export const NET_FW_MODIFY_STATE_GP_OVERRIDE = 1;
export const NET_FW_MODIFY_STATE_INBOUND_BLOCKED = 2;
export const NET_FW_RULE_CATEGORY_BOOT = 0;
export const NET_FW_RULE_CATEGORY_STEALTH = 1;
export const NET_FW_RULE_CATEGORY_FIREWALL = 2;
export const NET_FW_RULE_CATEGORY_CONSEC = 3;
export const NET_FW_RULE_CATEGORY_MAX = 4;
export const NET_FW_EDGE_TRAVERSAL_TYPE_DENY = 0;
export const NET_FW_EDGE_TRAVERSAL_TYPE_ALLOW = 1;
export const NET_FW_EDGE_TRAVERSAL_TYPE_DEFER_TO_APP = 2;
export const NET_FW_EDGE_TRAVERSAL_TYPE_DEFER_TO_USER = 3;
export const NET_FW_AUTHENTICATE_NONE = 0;
export const NET_FW_AUTHENTICATE_NO_ENCAPSULATION = 1;
export const NET_FW_AUTHENTICATE_WITH_INTEGRITY = 2;
export const NET_FW_AUTHENTICATE_AND_NEGOTIATE_ENCRYPTION = 3;
export const NET_FW_AUTHENTICATE_AND_ENCRYPT = 4;
export const NETISO_FLAG_FORCE_COMPUTE_BINARIES = 1;
export const NETISO_FLAG_MAX = 2;
export const INET_FIREWALL_AC_NONE = 0;
export const INET_FIREWALL_AC_PACKAGE_ID_ONLY = 1;
export const INET_FIREWALL_AC_BINARY = 2;
export const INET_FIREWALL_AC_MAX = 4;
export const INET_FIREWALL_AC_CHANGE_INVALID = 0;
export const INET_FIREWALL_AC_CHANGE_CREATE = 1;
export const INET_FIREWALL_AC_CHANGE_DELETE = 2;
export const INET_FIREWALL_AC_CHANGE_MAX = 3;
export const NETISO_ERROR_TYPE_NONE = 0;
export const NETISO_ERROR_TYPE_PRIVATE_NETWORK = 1;
export const NETISO_ERROR_TYPE_INTERNET_CLIENT = 2;
export const NETISO_ERROR_TYPE_INTERNET_CLIENT_SERVER = 3;
export const NETISO_ERROR_TYPE_MAX = 4;
export const FW_DYNAMIC_KEYWORD_ORIGIN_INVALID = 0;
export const FW_DYNAMIC_KEYWORD_ORIGIN_LOCAL = 1;
export const FW_DYNAMIC_KEYWORD_ORIGIN_MDM = 2;
export const FW_DYNAMIC_KEYWORD_ADDRESS_FLAGS_AUTO_RESOLVE = 1;
export const FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS_AUTO_RESOLVE = 1;
export const FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS_NON_AUTO_RESOLVE = 2;
export const FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS_ALL = 3;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.NetworkManagement.WindowsFirewall.NETCON_PROPERTIES (size: 56)
 */
export interface NETCON_PROPERTIES {
  /** System.Guid */
  guidId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszwName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszwDeviceName: string | null;
  /** Windows.Win32.NetworkManagement.WindowsFirewall.NETCON_STATUS */
  Status: NETCON_STATUS;
  /** Windows.Win32.NetworkManagement.WindowsFirewall.NETCON_MEDIATYPE */
  MediaType: NETCON_MEDIATYPE;
  /** u32 */
  dwCharacter: number;
  /** System.Guid */
  clsidThisObject: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidUiObject: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNETCON_PROPERTIES = 56;

export function allocNETCON_PROPERTIES(data?: Partial<NETCON_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofNETCON_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidId !== undefined) view.setBigUint64(0, data.guidId === null ? 0n : BigInt(util.toPointer(data.guidId)), true);
  // 0x08: buffer
  if (data?.pszwName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszwName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszwDeviceName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszwDeviceName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.Status !== undefined) view.setInt32(24, Number(data.Status), true);
  // 0x1c: i32
  if (data?.MediaType !== undefined) view.setInt32(28, Number(data.MediaType), true);
  // 0x20: u32
  if (data?.dwCharacter !== undefined) view.setUint32(32, Number(data.dwCharacter), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.clsidThisObject !== undefined) view.setBigUint64(40, data.clsidThisObject === null ? 0n : BigInt(util.toPointer(data.clsidThisObject)), true);
  // 0x30: pointer
  if (data?.clsidUiObject !== undefined) view.setBigUint64(48, data.clsidUiObject === null ? 0n : BigInt(util.toPointer(data.clsidUiObject)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFirewall.INET_FIREWALL_AC_CAPABILITIES (size: 16)
 */
export interface INET_FIREWALL_AC_CAPABILITIES {
  /** u32 */
  count: number;
  /** ptr */
  capabilities: Deno.PointerValue | Uint8Array | null;
}

export const sizeofINET_FIREWALL_AC_CAPABILITIES = 16;

export function allocINET_FIREWALL_AC_CAPABILITIES(data?: Partial<INET_FIREWALL_AC_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofINET_FIREWALL_AC_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.count !== undefined) view.setUint32(0, Number(data.count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.capabilities !== undefined) view.setBigUint64(8, data.capabilities === null ? 0n : BigInt(util.toPointer(data.capabilities)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFirewall.INET_FIREWALL_AC_BINARIES (size: 16)
 */
export interface INET_FIREWALL_AC_BINARIES {
  /** u32 */
  count: number;
  /** ptr */
  binaries: Deno.PointerValue | Uint8Array | null;
}

export const sizeofINET_FIREWALL_AC_BINARIES = 16;

export function allocINET_FIREWALL_AC_BINARIES(data?: Partial<INET_FIREWALL_AC_BINARIES>): Uint8Array {
  const buf = new Uint8Array(sizeofINET_FIREWALL_AC_BINARIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.count !== undefined) view.setUint32(0, Number(data.count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.binaries !== undefined) view.setBigUint64(8, data.binaries === null ? 0n : BigInt(util.toPointer(data.binaries)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFirewall.INET_FIREWALL_AC_CHANGE (size: 40)
 */
export interface INET_FIREWALL_AC_CHANGE {
  /** Windows.Win32.NetworkManagement.WindowsFirewall.INET_FIREWALL_AC_CHANGE_TYPE */
  changeType: INET_FIREWALL_AC_CHANGE_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFirewall.INET_FIREWALL_AC_CREATION_TYPE */
  createType: INET_FIREWALL_AC_CREATION_TYPE;
  /** ptr */
  appContainerSid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  userSid: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  displayName: string | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINET_FIREWALL_AC_CHANGE = 40;

export function allocINET_FIREWALL_AC_CHANGE(data?: Partial<INET_FIREWALL_AC_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofINET_FIREWALL_AC_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.changeType !== undefined) view.setInt32(0, Number(data.changeType), true);
  // 0x04: i32
  if (data?.createType !== undefined) view.setInt32(4, Number(data.createType), true);
  // 0x08: pointer
  if (data?.appContainerSid !== undefined) view.setBigUint64(8, data.appContainerSid === null ? 0n : BigInt(util.toPointer(data.appContainerSid)), true);
  // 0x10: pointer
  if (data?.userSid !== undefined) view.setBigUint64(16, data.userSid === null ? 0n : BigInt(util.toPointer(data.userSid)), true);
  // 0x18: buffer
  if (data?.displayName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.displayName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFirewall.INET_FIREWALL_APP_CONTAINER (size: 72)
 */
export interface INET_FIREWALL_APP_CONTAINER {
  /** ptr */
  appContainerSid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  userSid: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  appContainerName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  displayName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  description: string | null;
  /** Windows.Win32.NetworkManagement.WindowsFirewall.INET_FIREWALL_AC_CAPABILITIES */
  capabilities: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFirewall.INET_FIREWALL_AC_BINARIES */
  binaries: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  workingDirectory: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  packageFullName: string | null;
}

export const sizeofINET_FIREWALL_APP_CONTAINER = 72;

export function allocINET_FIREWALL_APP_CONTAINER(data?: Partial<INET_FIREWALL_APP_CONTAINER>): Uint8Array {
  const buf = new Uint8Array(sizeofINET_FIREWALL_APP_CONTAINER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.appContainerSid !== undefined) view.setBigUint64(0, data.appContainerSid === null ? 0n : BigInt(util.toPointer(data.appContainerSid)), true);
  // 0x08: pointer
  if (data?.userSid !== undefined) view.setBigUint64(8, data.userSid === null ? 0n : BigInt(util.toPointer(data.userSid)), true);
  // 0x10: buffer
  if (data?.appContainerName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.appContainerName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.displayName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.displayName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.description !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.description);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.capabilities !== undefined) view.setBigUint64(40, data.capabilities === null ? 0n : BigInt(util.toPointer(data.capabilities)), true);
  // 0x30: pointer
  if (data?.binaries !== undefined) view.setBigUint64(48, data.binaries === null ? 0n : BigInt(util.toPointer(data.binaries)), true);
  // 0x38: buffer
  if (data?.workingDirectory !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.workingDirectory);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.packageFullName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.packageFullName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFirewall._tag_FW_DYNAMIC_KEYWORD_ADDRESS0 (size: 32)
 */
export interface _tag_FW_DYNAMIC_KEYWORD_ADDRESS0 {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  keyword: string | null;
  /** u32 */
  flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  addresses: string | null;
}

export const sizeof_tag_FW_DYNAMIC_KEYWORD_ADDRESS0 = 32;

export function alloc_tag_FW_DYNAMIC_KEYWORD_ADDRESS0(data?: Partial<_tag_FW_DYNAMIC_KEYWORD_ADDRESS0>): Uint8Array {
  const buf = new Uint8Array(sizeof_tag_FW_DYNAMIC_KEYWORD_ADDRESS0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: buffer
  if (data?.keyword !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.keyword);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.addresses !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.addresses);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFirewall._tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0 (size: 24)
 */
export interface _tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0 {
  /** Windows.Win32.NetworkManagement.WindowsFirewall._tag_FW_DYNAMIC_KEYWORD_ADDRESS0 */
  dynamicKeywordAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  next: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  schemaVersion: number;
  /** Windows.Win32.NetworkManagement.WindowsFirewall._tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE */
  originType: _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE;
}

export const sizeof_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0 = 24;

export function alloc_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0(data?: Partial<_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0>): Uint8Array {
  const buf = new Uint8Array(sizeof_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dynamicKeywordAddress !== undefined) view.setBigUint64(0, data.dynamicKeywordAddress === null ? 0n : BigInt(util.toPointer(data.dynamicKeywordAddress)), true);
  // 0x08: pointer
  if (data?.next !== undefined) view.setBigUint64(8, data.next === null ? 0n : BigInt(util.toPointer(data.next)), true);
  // 0x10: u16
  if (data?.schemaVersion !== undefined) view.setUint16(16, Number(data.schemaVersion), true);
  // 0x12: i32
  if (data?.originType !== undefined) view.setInt32(18, Number(data.originType), true);
  // 0x16: pad2
  return buf;
}

export type PSID = Deno.PointerValue;

export type BOOL = number;

export type HRESULT = number;

export type HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var libapi_ms_win_net_isolation_l1_1_0 = Deno.dlopen("api-ms-win-net-isolation-l1-1-0", {
    NetworkIsolationSetupAppContainerBinaries: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "i32", "pointer", "u32"],
      result: "pointer",
    },
    NetworkIsolationRegisterForAppContainerChanges: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetworkIsolationUnregisterForAppContainerChanges: {
      parameters: ["pointer"],
      result: "u32",
    },
    NetworkIsolationFreeAppContainers: {
      parameters: ["pointer"],
      result: "u32",
    },
    NetworkIsolationEnumAppContainers: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    NetworkIsolationGetAppContainerConfig: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NetworkIsolationSetAppContainerConfig: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    NetworkIsolationDiagnoseConnectFailureAndGetInfo: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function NetworkIsolationSetupAppContainerBinaries(
  applicationContainerSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  packageFullName: string | null /* Windows.Win32.Foundation.PWSTR */,
  packageFolder: string | null /* Windows.Win32.Foundation.PWSTR */,
  displayName: string | null /* Windows.Win32.Foundation.PWSTR */,
  bBinariesFullyComputed: boolean /* Windows.Win32.Foundation.BOOL */,
  binaries: Deno.PointerValue | Uint8Array | null /* ptr */,
  binariesCount: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_net_isolation_l1_1_0.NetworkIsolationSetupAppContainerBinaries(util.toPointer(applicationContainerSid), util.pwstrToFfi(packageFullName), util.pwstrToFfi(packageFolder), util.pwstrToFfi(displayName), util.boolToFfi(bBinariesFullyComputed), util.toPointer(binaries), binariesCount));
}

export function NetworkIsolationRegisterForAppContainerChanges(
  flags: number /* u32 */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFirewall.PAC_CHANGES_CALLBACK_FN */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  registrationObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_net_isolation_l1_1_0.NetworkIsolationRegisterForAppContainerChanges(flags, util.toPointer(callback), util.toPointer(context), util.toPointer(registrationObject));
}

export function NetworkIsolationUnregisterForAppContainerChanges(
  registrationObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libapi_ms_win_net_isolation_l1_1_0.NetworkIsolationUnregisterForAppContainerChanges(util.toPointer(registrationObject));
}

export function NetworkIsolationFreeAppContainers(
  pPublicAppCs: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_net_isolation_l1_1_0.NetworkIsolationFreeAppContainers(util.toPointer(pPublicAppCs));
}

export function NetworkIsolationEnumAppContainers(
  Flags: number /* u32 */,
  pdwNumPublicAppCs: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppPublicAppCs: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_net_isolation_l1_1_0.NetworkIsolationEnumAppContainers(Flags, util.toPointer(pdwNumPublicAppCs), util.toPointer(ppPublicAppCs));
}

export function NetworkIsolationGetAppContainerConfig(
  pdwNumPublicAppCs: Deno.PointerValue | Uint8Array | null /* ptr */,
  appContainerSids: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_net_isolation_l1_1_0.NetworkIsolationGetAppContainerConfig(util.toPointer(pdwNumPublicAppCs), util.toPointer(appContainerSids));
}

export function NetworkIsolationSetAppContainerConfig(
  dwNumPublicAppCs: number /* u32 */,
  appContainerSids: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_net_isolation_l1_1_0.NetworkIsolationSetAppContainerConfig(dwNumPublicAppCs, util.toPointer(appContainerSids));
}

export function NetworkIsolationDiagnoseConnectFailureAndGetInfo(
  wszServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  netIsoError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_net_isolation_l1_1_0.NetworkIsolationDiagnoseConnectFailureAndGetInfo(util.pwstrToFfi(wszServerName), util.toPointer(netIsoError));
}

