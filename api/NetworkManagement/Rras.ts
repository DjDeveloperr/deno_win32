/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.Rras.Apis

import * as util from "../../util.ts";

// Enums
export type MPR_INTERFACE_DIAL_MODE = number;
export type RASENTRY_DIAL_MODE = number;
export type RAS_FLAGS = number;
export type MPR_ET = number;
export type RASPPP_PROJECTION_INFO_SERVER_AUTH_DATA = number;
export type PPP_LCP = number;
export type RASPPP_PROJECTION_INFO_SERVER_AUTH_PROTOCOL = number;
export type PPP_LCP_INFO_AUTH_DATA = number;
export type RASIKEV_PROJECTION_INFO_FLAGS = number;
export type MPR_VS = number;
export type SECURITY_MESSAGE_MSG_ID = number;
export type RASAPIVERSION = number;
export type RASCONNSTATE = number;
export type RASCONNSUBSTATE = number;
export type RASPROJECTION = number;
export type RIP_INFO_TYPE = number;
export type RASPROJECTION_INFO_TYPE = number;
export type IKEV2_ID_PAYLOAD_TYPE = number;
export type ROUTER_INTERFACE_TYPE = number;
export type ROUTER_CONNECTION_STATE = number;
export type RAS_PORT_CONDITION = number;
export type RAS_HARDWARE_CONDITION = number;
export type RAS_QUARANTINE_STATE = number;
export type MPRAPI_OBJECT_TYPE = number;
export type MPR_VPN_TS_TYPE = number;
export type MGM_ENUM_TYPES = number;
export type RTM_EVENT_TYPE = number;

// Constants
export const MPRDM_DialFirst = 0;
export const MPRDM_DialAll = 1;
export const MPRDM_DialAsNeeded = 2;
export const RASEDM_DialAll = 1;
export const RASEDM_DialAsNeeded = 2;
export const RAS_FLAGS_PPP_CONNECTION = 1;
export const RAS_FLAGS_MESSENGER_PRESENT = 2;
export const RAS_FLAGS_QUARANTINE_PRESENT = 8;
export const RAS_FLAGS_ARAP_CONNECTION = 16;
export const RAS_FLAGS_IKEV2_CONNECTION = 16;
export const RAS_FLAGS_DORMANT = 32;
export const MPR_ET_None = 0;
export const MPR_ET_Require = 1;
export const MPR_ET_RequireMax = 2;
export const MPR_ET_Optional = 3;
export const RASLCPAD_CHAP_MD5 = 5;
export const RASLCPAD_CHAP_MS = 128;
export const RASLCPAD_CHAP_MSV2 = 129;
export const PPP_LCP_PAP = 49187;
export const PPP_LCP_CHAP = 49699;
export const PPP_LCP_EAP = 49703;
export const PPP_LCP_SPAP = 49191;
export const RASLCPAP_PAP = 49187;
export const RASLCPAP_SPAP = 49191;
export const RASLCPAP_CHAP = 49699;
export const RASLCPAP_EAP = 49703;
export const PPP_LCP_CHAP_MD5 = 5;
export const PPP_LCP_CHAP_MS = 128;
export const PPP_LCP_CHAP_MSV2 = 129;
export const RASIKEv2_FLAGS_MOBIKESUPPORTED = 1;
export const RASIKEv2_FLAGS_BEHIND_NAT = 2;
export const RASIKEv2_FLAGS_SERVERBEHIND_NAT = 4;
export const MPR_VS_Default = 0;
export const MPR_VS_PptpOnly = 1;
export const MPR_VS_PptpFirst = 2;
export const MPR_VS_L2tpOnly = 3;
export const MPR_VS_L2tpFirst = 4;
export const SECURITYMSG_SUCCESS = 1;
export const SECURITYMSG_FAILURE = 2;
export const SECURITYMSG_ERROR = 3;
export const RASNAP_ProbationTime = 1;
export const RASTUNNELENDPOINT_UNKNOWN = 0;
export const RASTUNNELENDPOINT_IPv4 = 1;
export const RASTUNNELENDPOINT_IPv6 = 2;
export const RAS_MaxDeviceType = 16;
export const RAS_MaxPhoneNumber = 128;
export const RAS_MaxIpAddress = 15;
export const RAS_MaxIpxAddress = 21;
export const RAS_MaxEntryName = 256;
export const RAS_MaxDeviceName = 128;
export const RAS_MaxCallbackNumber = 128;
export const RAS_MaxAreaCode = 10;
export const RAS_MaxPadType = 32;
export const RAS_MaxX25Address = 200;
export const RAS_MaxFacilities = 200;
export const RAS_MaxUserData = 200;
export const RAS_MaxReplyMessage = 1024;
export const RAS_MaxDnsSuffix = 256;
export const RASCF_AllUsers = 1;
export const RASCF_GlobalCreds = 2;
export const RASCF_OwnerKnown = 4;
export const RASCF_OwnerMatch = 8;
export const RAS_MaxIDSize = 256;
export const RASCS_PAUSED = 4096;
export const RASCS_DONE = 8192;
export const RASCSS_DONE = 8192;
export const RDEOPT_UsePrefixSuffix = 1;
export const RDEOPT_PausedStates = 2;
export const RDEOPT_IgnoreModemSpeaker = 4;
export const RDEOPT_SetModemSpeaker = 8;
export const RDEOPT_IgnoreSoftwareCompression = 16;
export const RDEOPT_SetSoftwareCompression = 32;
export const RDEOPT_DisableConnectedUI = 64;
export const RDEOPT_DisableReconnectUI = 128;
export const RDEOPT_DisableReconnect = 256;
export const RDEOPT_NoUser = 512;
export const RDEOPT_PauseOnScript = 1024;
export const RDEOPT_Router = 2048;
export const RDEOPT_CustomDial = 4096;
export const RDEOPT_UseCustomScripting = 8192;
export const RDEOPT_InvokeAutoTriggerCredentialUI = 16384;
export const RDEOPT_EapInfoCryptInCapable = 32768;
export const REN_User = 0;
export const REN_AllUsers = 1;
export const RASIPO_VJ = 1;
export const RASLCPO_PFC = 1;
export const RASLCPO_ACFC = 2;
export const RASLCPO_SSHF = 4;
export const RASLCPO_DES_56 = 8;
export const RASLCPO_3_DES = 16;
export const RASLCPO_AES_128 = 32;
export const RASLCPO_AES_256 = 64;
export const RASLCPO_AES_192 = 128;
export const RASLCPO_GCM_AES_128 = 256;
export const RASLCPO_GCM_AES_192 = 512;
export const RASLCPO_GCM_AES_256 = 1024;
export const RASCCPCA_MPPC = 6;
export const RASCCPCA_STAC = 5;
export const RASCCPO_Compression = 1;
export const RASCCPO_HistoryLess = 2;
export const RASCCPO_Encryption56bit = 16;
export const RASCCPO_Encryption40bit = 32;
export const RASCCPO_Encryption128bit = 64;
export const RASIKEv2_AUTH_MACHINECERTIFICATES = 1;
export const RASIKEv2_AUTH_EAP = 2;
export const RASIKEv2_AUTH_PSK = 3;
export const RASDIALEVENT = `RasDialEvent`;
export const WM_RASDIALEVENT = 52429;
export const ET_None = 0;
export const ET_Require = 1;
export const ET_RequireMax = 2;
export const ET_Optional = 3;
export const VS_Default = 0;
export const VS_PptpOnly = 1;
export const VS_PptpFirst = 2;
export const VS_L2tpOnly = 3;
export const VS_L2tpFirst = 4;
export const VS_SstpOnly = 5;
export const VS_SstpFirst = 6;
export const VS_Ikev2Only = 7;
export const VS_Ikev2First = 8;
export const VS_GREOnly = 9;
export const VS_PptpSstp = 12;
export const VS_L2tpSstp = 13;
export const VS_Ikev2Sstp = 14;
export const VS_ProtocolList = 15;
export const RASEO_UseCountryAndAreaCodes = 1;
export const RASEO_SpecificIpAddr = 2;
export const RASEO_SpecificNameServers = 4;
export const RASEO_IpHeaderCompression = 8;
export const RASEO_RemoteDefaultGateway = 16;
export const RASEO_DisableLcpExtensions = 32;
export const RASEO_TerminalBeforeDial = 64;
export const RASEO_TerminalAfterDial = 128;
export const RASEO_ModemLights = 256;
export const RASEO_SwCompression = 512;
export const RASEO_RequireEncryptedPw = 1024;
export const RASEO_RequireMsEncryptedPw = 2048;
export const RASEO_RequireDataEncryption = 4096;
export const RASEO_NetworkLogon = 8192;
export const RASEO_UseLogonCredentials = 16384;
export const RASEO_PromoteAlternates = 32768;
export const RASEO_SecureLocalFiles = 65536;
export const RASEO_RequireEAP = 131072;
export const RASEO_RequirePAP = 262144;
export const RASEO_RequireSPAP = 524288;
export const RASEO_Custom = 1048576;
export const RASEO_PreviewPhoneNumber = 2097152;
export const RASEO_SharedPhoneNumbers = 8388608;
export const RASEO_PreviewUserPw = 16777216;
export const RASEO_PreviewDomain = 33554432;
export const RASEO_ShowDialingProgress = 67108864;
export const RASEO_RequireCHAP = 134217728;
export const RASEO_RequireMsCHAP = 268435456;
export const RASEO_RequireMsCHAP2 = 536870912;
export const RASEO_RequireW95MSCHAP = 1073741824;
export const RASEO_CustomScript = 2147483648;
export const RASEO2_SecureFileAndPrint = 1;
export const RASEO2_SecureClientForMSNet = 2;
export const RASEO2_DontNegotiateMultilink = 4;
export const RASEO2_DontUseRasCredentials = 8;
export const RASEO2_UsePreSharedKey = 16;
export const RASEO2_Internet = 32;
export const RASEO2_DisableNbtOverIP = 64;
export const RASEO2_UseGlobalDeviceSettings = 128;
export const RASEO2_ReconnectIfDropped = 256;
export const RASEO2_SharePhoneNumbers = 512;
export const RASEO2_SecureRoutingCompartment = 1024;
export const RASEO2_UseTypicalSettings = 2048;
export const RASEO2_IPv6SpecificNameServers = 4096;
export const RASEO2_IPv6RemoteDefaultGateway = 8192;
export const RASEO2_RegisterIpWithDNS = 16384;
export const RASEO2_UseDNSSuffixForRegistration = 32768;
export const RASEO2_IPv4ExplicitMetric = 65536;
export const RASEO2_IPv6ExplicitMetric = 131072;
export const RASEO2_DisableIKENameEkuCheck = 262144;
export const RASEO2_DisableClassBasedStaticRoute = 524288;
export const RASEO2_SpecificIPv6Addr = 1048576;
export const RASEO2_DisableMobility = 2097152;
export const RASEO2_RequireMachineCertificates = 4194304;
export const RASEO2_UsePreSharedKeyForIkev2Initiator = 8388608;
export const RASEO2_UsePreSharedKeyForIkev2Responder = 16777216;
export const RASEO2_CacheCredentials = 33554432;
export const RASEO2_AutoTriggerCapable = 67108864;
export const RASEO2_IsThirdPartyProfile = 134217728;
export const RASEO2_AuthTypeIsOtp = 268435456;
export const RASEO2_IsAlwaysOn = 536870912;
export const RASEO2_IsPrivateNetwork = 1073741824;
export const RASEO2_PlumbIKEv2TSAsRoutes = 2147483648;
export const RASNP_NetBEUI = 1;
export const RASNP_Ipx = 2;
export const RASNP_Ip = 4;
export const RASNP_Ipv6 = 8;
export const RASFP_Ppp = 1;
export const RASFP_Slip = 2;
export const RASFP_Ras = 4;
export const RASDT_Modem = `modem`;
export const RASDT_Isdn = `isdn`;
export const RASDT_X25 = `x25`;
export const RASDT_Vpn = `vpn`;
export const RASDT_Pad = `pad`;
export const RASDT_Generic = `GENERIC`;
export const RASDT_Serial = `SERIAL`;
export const RASDT_FrameRelay = `FRAMERELAY`;
export const RASDT_Atm = `ATM`;
export const RASDT_Sonet = `SONET`;
export const RASDT_SW56 = `SW56`;
export const RASDT_Irda = `IRDA`;
export const RASDT_Parallel = `PARALLEL`;
export const RASDT_PPPoE = `PPPoE`;
export const RASET_Phone = 1;
export const RASET_Vpn = 2;
export const RASET_Direct = 3;
export const RASET_Internet = 4;
export const RASET_Broadband = 5;
export const RASCN_Connection = 1;
export const RASCN_Disconnection = 2;
export const RASCN_BandwidthAdded = 4;
export const RASCN_BandwidthRemoved = 8;
export const RASCN_Dormant = 16;
export const RASCN_ReConnection = 32;
export const RASCN_EPDGPacketArrival = 64;
export const RASIDS_Disabled = 4294967295;
export const RASIDS_UseGlobalValue = 0;
export const RASADFLG_PositionDlg = 1;
export const RASCM_UserName = 1;
export const RASCM_Password = 2;
export const RASCM_Domain = 4;
export const RASCM_DefaultCreds = 8;
export const RASCM_PreSharedKey = 16;
export const RASCM_ServerPreSharedKey = 32;
export const RASCM_DDMPreSharedKey = 64;
export const RASADP_DisableConnectionQuery = 0;
export const RASADP_LoginSessionDisable = 1;
export const RASADP_SavedAddressesLimit = 2;
export const RASADP_FailedConnectionTimeout = 3;
export const RASADP_ConnectionQueryTimeout = 4;
export const RASEAPF_NonInteractive = 2;
export const RASEAPF_Logon = 4;
export const RASEAPF_Preview = 8;
export const RCD_SingleUser = 0;
export const RCD_AllUsers = 1;
export const RCD_Eap = 2;
export const RCD_Logon = 4;
export const RASPBDEVENT_AddEntry = 1;
export const RASPBDEVENT_EditEntry = 2;
export const RASPBDEVENT_RemoveEntry = 3;
export const RASPBDEVENT_DialEntry = 4;
export const RASPBDEVENT_EditGlobals = 5;
export const RASPBDEVENT_NoUser = 6;
export const RASPBDEVENT_NoUserEdit = 7;
export const RASNOUSER_SmartCard = 1;
export const RASPBDFLAG_PositionDlg = 1;
export const RASPBDFLAG_ForceCloseOnDial = 2;
export const RASPBDFLAG_NoUser = 16;
export const RASPBDFLAG_UpdateDefaults = 2147483648;
export const RASEDFLAG_PositionDlg = 1;
export const RASEDFLAG_NewEntry = 2;
export const RASEDFLAG_CloneEntry = 4;
export const RASEDFLAG_NoRename = 8;
export const RASEDFLAG_ShellOwned = 1073741824;
export const RASEDFLAG_NewPhoneEntry = 16;
export const RASEDFLAG_NewTunnelEntry = 32;
export const RASEDFLAG_NewDirectEntry = 64;
export const RASEDFLAG_NewBroadbandEntry = 128;
export const RASEDFLAG_InternetEntry = 256;
export const RASEDFLAG_NAT = 512;
export const RASEDFLAG_IncomingConnection = 1024;
export const RASDDFLAG_PositionDlg = 1;
export const RASDDFLAG_NoPrompt = 2;
export const RASDDFLAG_AoacRedial = 4;
export const RASDDFLAG_LinkFailure = 2147483648;
export const RRAS_SERVICE_NAME = `RemoteAccess`;
export const PID_IPX = 43;
export const PID_IP = 33;
export const PID_IPV6 = 87;
export const PID_NBF = 63;
export const PID_ATALK = 41;
export const MPR_INTERFACE_OUT_OF_RESOURCES = 1;
export const MPR_INTERFACE_ADMIN_DISABLED = 2;
export const MPR_INTERFACE_CONNECTION_FAILURE = 4;
export const MPR_INTERFACE_SERVICE_PAUSED = 8;
export const MPR_INTERFACE_DIALOUT_HOURS_RESTRICTION = 16;
export const MPR_INTERFACE_NO_MEDIA_SENSE = 32;
export const MPR_INTERFACE_NO_DEVICE = 64;
export const MPR_MaxDeviceType = 16;
export const MPR_MaxPhoneNumber = 128;
export const MPR_MaxIpAddress = 15;
export const MPR_MaxIpxAddress = 21;
export const MPR_MaxEntryName = 256;
export const MPR_MaxDeviceName = 128;
export const MPR_MaxCallbackNumber = 128;
export const MPR_MaxAreaCode = 10;
export const MPR_MaxPadType = 32;
export const MPR_MaxX25Address = 200;
export const MPR_MaxFacilities = 200;
export const MPR_MaxUserData = 200;
export const MPRIO_SpecificIpAddr = 2;
export const MPRIO_SpecificNameServers = 4;
export const MPRIO_IpHeaderCompression = 8;
export const MPRIO_RemoteDefaultGateway = 16;
export const MPRIO_DisableLcpExtensions = 32;
export const MPRIO_SwCompression = 512;
export const MPRIO_RequireEncryptedPw = 1024;
export const MPRIO_RequireMsEncryptedPw = 2048;
export const MPRIO_RequireDataEncryption = 4096;
export const MPRIO_NetworkLogon = 8192;
export const MPRIO_PromoteAlternates = 32768;
export const MPRIO_SecureLocalFiles = 65536;
export const MPRIO_RequireEAP = 131072;
export const MPRIO_RequirePAP = 262144;
export const MPRIO_RequireSPAP = 524288;
export const MPRIO_SharedPhoneNumbers = 8388608;
export const MPRIO_RequireCHAP = 134217728;
export const MPRIO_RequireMsCHAP = 268435456;
export const MPRIO_RequireMsCHAP2 = 536870912;
export const MPRIO_IpSecPreSharedKey = 2147483648;
export const MPRIO_RequireMachineCertificates = 16777216;
export const MPRIO_UsePreSharedKeyForIkev2Initiator = 33554432;
export const MPRIO_UsePreSharedKeyForIkev2Responder = 67108864;
export const MPRNP_Ipx = 2;
export const MPRNP_Ip = 4;
export const MPRNP_Ipv6 = 8;
export const MPRDT_Modem = `modem`;
export const MPRDT_Isdn = `isdn`;
export const MPRDT_X25 = `x25`;
export const MPRDT_Vpn = `vpn`;
export const MPRDT_Pad = `pad`;
export const MPRDT_Generic = `GENERIC`;
export const MPRDT_Serial = `SERIAL`;
export const MPRDT_FrameRelay = `FRAMERELAY`;
export const MPRDT_Atm = `ATM`;
export const MPRDT_Sonet = `SONET`;
export const MPRDT_SW56 = `SW56`;
export const MPRDT_Irda = `IRDA`;
export const MPRDT_Parallel = `PARALLEL`;
export const MPRET_Phone = 1;
export const MPRET_Vpn = 2;
export const MPRET_Direct = 3;
export const MPRIDS_Disabled = 4294967295;
export const MPRIDS_UseGlobalValue = 0;
export const MPR_VS_Ikev2Only = 7;
export const MPR_VS_Ikev2First = 8;
export const MPR_ENABLE_RAS_ON_DEVICE = 1;
export const MPR_ENABLE_ROUTING_ON_DEVICE = 2;
export const IPADDRESSLEN = 15;
export const IPXADDRESSLEN = 22;
export const ATADDRESSLEN = 32;
export const MAXIPADRESSLEN = 64;
export const PPP_IPCP_VJ = 1;
export const PPP_CCP_COMPRESSION = 1;
export const PPP_CCP_ENCRYPTION40BITOLD = 16;
export const PPP_CCP_ENCRYPTION40BIT = 32;
export const PPP_CCP_ENCRYPTION128BIT = 64;
export const PPP_CCP_ENCRYPTION56BIT = 128;
export const PPP_CCP_HISTORYLESS = 16777216;
export const PPP_LCP_MULTILINK_FRAMING = 1;
export const PPP_LCP_PFC = 2;
export const PPP_LCP_ACFC = 4;
export const PPP_LCP_SSHF = 8;
export const PPP_LCP_DES_56 = 16;
export const PPP_LCP_3_DES = 32;
export const PPP_LCP_AES_128 = 64;
export const PPP_LCP_AES_256 = 128;
export const PPP_LCP_AES_192 = 256;
export const PPP_LCP_GCM_AES_128 = 512;
export const PPP_LCP_GCM_AES_192 = 1024;
export const PPP_LCP_GCM_AES_256 = 2048;
export const RAS_FLAGS_RAS_CONNECTION = 4;
export const RASPRIV_NoCallback = 1;
export const RASPRIV_AdminSetCallback = 2;
export const RASPRIV_CallerSetCallback = 4;
export const RASPRIV_DialinPrivilege = 8;
export const RASPRIV2_DialinPolicy = 1;
export const MPRAPI_IKEV2_AUTH_USING_CERT = 1;
export const MPRAPI_IKEV2_AUTH_USING_EAP = 2;
export const MPRAPI_PPP_PROJECTION_INFO_TYPE = 1;
export const MPRAPI_IKEV2_PROJECTION_INFO_TYPE = 2;
export const MPRAPI_RAS_CONNECTION_OBJECT_REVISION_1 = 1;
export const MPRAPI_MPR_IF_CUSTOM_CONFIG_OBJECT_REVISION_1 = 1;
export const MPRAPI_IF_CUSTOM_CONFIG_FOR_IKEV2 = 1;
export const MPRAPI_MPR_IF_CUSTOM_CONFIG_OBJECT_REVISION_3 = 3;
export const MPRAPI_MPR_IF_CUSTOM_CONFIG_OBJECT_REVISION_2 = 2;
export const MPRAPI_IKEV2_SET_TUNNEL_CONFIG_PARAMS = 1;
export const MPRAPI_L2TP_SET_TUNNEL_CONFIG_PARAMS = 1;
export const MAX_SSTP_HASH_SIZE = 32;
export const MPRAPI_MPR_SERVER_OBJECT_REVISION_1 = 1;
export const MPRAPI_MPR_SERVER_OBJECT_REVISION_2 = 2;
export const MPRAPI_MPR_SERVER_OBJECT_REVISION_3 = 3;
export const MPRAPI_MPR_SERVER_OBJECT_REVISION_4 = 4;
export const MPRAPI_MPR_SERVER_OBJECT_REVISION_5 = 5;
export const MPRAPI_MPR_SERVER_SET_CONFIG_OBJECT_REVISION_1 = 1;
export const MPRAPI_MPR_SERVER_SET_CONFIG_OBJECT_REVISION_2 = 2;
export const MPRAPI_MPR_SERVER_SET_CONFIG_OBJECT_REVISION_3 = 3;
export const MPRAPI_MPR_SERVER_SET_CONFIG_OBJECT_REVISION_4 = 4;
export const MPRAPI_MPR_SERVER_SET_CONFIG_OBJECT_REVISION_5 = 5;
export const MPRAPI_SET_CONFIG_PROTOCOL_FOR_PPTP = 1;
export const MPRAPI_SET_CONFIG_PROTOCOL_FOR_L2TP = 2;
export const MPRAPI_SET_CONFIG_PROTOCOL_FOR_SSTP = 4;
export const MPRAPI_SET_CONFIG_PROTOCOL_FOR_IKEV2 = 8;
export const MPRAPI_SET_CONFIG_PROTOCOL_FOR_GRE = 16;
export const ALLOW_NO_AUTH = 1;
export const DO_NOT_ALLOW_NO_AUTH = 0;
export const MPRAPI_RAS_UPDATE_CONNECTION_OBJECT_REVISION_1 = 1;
export const MPRAPI_ADMIN_DLL_VERSION_1 = 1;
export const MPRAPI_ADMIN_DLL_VERSION_2 = 2;
export const MGM_JOIN_STATE_FLAG = 1;
export const MGM_FORWARD_STATE_FLAG = 2;
export const MGM_MFE_STATS_0 = 1;
export const MGM_MFE_STATS_1 = 2;
export const RTM_MAX_ADDRESS_SIZE = 16;
export const RTM_MAX_VIEWS = 32;
export const RTM_VIEW_ID_UCAST = 0;
export const RTM_VIEW_ID_MCAST = 1;
export const RTM_VIEW_MASK_SIZE = 32;
export const RTM_VIEW_MASK_NONE = 0;
export const RTM_VIEW_MASK_ANY = 0;
export const RTM_VIEW_MASK_UCAST = 1;
export const RTM_VIEW_MASK_MCAST = 2;
export const RTM_VIEW_MASK_ALL = 4294967295;
export const IPV6_ADDRESS_LEN_IN_BYTES = 16;
export const RTM_DEST_FLAG_NATURAL_NET = 1;
export const RTM_DEST_FLAG_FWD_ENGIN_ADD = 2;
export const RTM_DEST_FLAG_DONT_FORWARD = 4;
export const RTM_ROUTE_STATE_CREATED = 0;
export const RTM_ROUTE_STATE_DELETING = 1;
export const RTM_ROUTE_STATE_DELETED = 2;
export const RTM_ROUTE_FLAGS_MARTIAN = 1;
export const RTM_ROUTE_FLAGS_BLACKHOLE = 2;
export const RTM_ROUTE_FLAGS_DISCARD = 4;
export const RTM_ROUTE_FLAGS_INACTIVE = 8;
export const RTM_ROUTE_FLAGS_LOCAL = 16;
export const RTM_ROUTE_FLAGS_REMOTE = 32;
export const RTM_ROUTE_FLAGS_MYSELF = 64;
export const RTM_ROUTE_FLAGS_LOOPBACK = 128;
export const RTM_ROUTE_FLAGS_MCAST = 256;
export const RTM_ROUTE_FLAGS_LOCAL_MCAST = 512;
export const RTM_ROUTE_FLAGS_LIMITED_BC = 1024;
export const RTM_ROUTE_FLAGS_ZEROS_NETBC = 4096;
export const RTM_ROUTE_FLAGS_ZEROS_SUBNETBC = 8192;
export const RTM_ROUTE_FLAGS_ONES_NETBC = 16384;
export const RTM_ROUTE_FLAGS_ONES_SUBNETBC = 32768;
export const RTM_NEXTHOP_STATE_CREATED = 0;
export const RTM_NEXTHOP_STATE_DELETED = 1;
export const RTM_NEXTHOP_FLAGS_REMOTE = 1;
export const RTM_NEXTHOP_FLAGS_DOWN = 2;
export const METHOD_TYPE_ALL_METHODS = 4294967295;
export const METHOD_RIP2_NEIGHBOUR_ADDR = 1;
export const METHOD_RIP2_OUTBOUND_INTF = 2;
export const METHOD_RIP2_ROUTE_TAG = 4;
export const METHOD_RIP2_ROUTE_TIMESTAMP = 8;
export const METHOD_BGP4_AS_PATH = 1;
export const METHOD_BGP4_PEER_ID = 2;
export const METHOD_BGP4_PA_ORIGIN = 4;
export const METHOD_BGP4_NEXTHOP_ATTR = 8;
export const RTM_RESUME_METHODS = 0;
export const RTM_BLOCK_METHODS = 1;
export const RTM_ROUTE_CHANGE_FIRST = 1;
export const RTM_ROUTE_CHANGE_NEW = 2;
export const RTM_ROUTE_CHANGE_BEST = 65536;
export const RTM_NEXTHOP_CHANGE_NEW = 1;
export const RTM_MATCH_NONE = 0;
export const RTM_MATCH_OWNER = 1;
export const RTM_MATCH_NEIGHBOUR = 2;
export const RTM_MATCH_PREF = 4;
export const RTM_MATCH_NEXTHOP = 8;
export const RTM_MATCH_INTERFACE = 16;
export const RTM_MATCH_FULL = 65535;
export const RTM_ENUM_START = 0;
export const RTM_ENUM_NEXT = 1;
export const RTM_ENUM_RANGE = 2;
export const RTM_ENUM_ALL_DESTS = 0;
export const RTM_ENUM_OWN_DESTS = 16777216;
export const RTM_ENUM_ALL_ROUTES = 0;
export const RTM_ENUM_OWN_ROUTES = 65536;
export const RTM_NUM_CHANGE_TYPES = 3;
export const RTM_CHANGE_TYPE_ALL = 1;
export const RTM_CHANGE_TYPE_BEST = 2;
export const RTM_CHANGE_TYPE_FORWARDING = 4;
export const RTM_NOTIFY_ONLY_MARKED_DESTS = 65536;
export const RASBASE = 600;
export const PENDING = 600;
export const ERROR_INVALID_PORT_HANDLE = 601;
export const ERROR_PORT_ALREADY_OPEN = 602;
export const ERROR_BUFFER_TOO_SMALL = 603;
export const ERROR_WRONG_INFO_SPECIFIED = 604;
export const ERROR_CANNOT_SET_PORT_INFO = 605;
export const ERROR_PORT_NOT_CONNECTED = 606;
export const ERROR_EVENT_INVALID = 607;
export const ERROR_DEVICE_DOES_NOT_EXIST = 608;
export const ERROR_DEVICETYPE_DOES_NOT_EXIST = 609;
export const ERROR_BUFFER_INVALID = 610;
export const ERROR_ROUTE_NOT_AVAILABLE = 611;
export const ERROR_ROUTE_NOT_ALLOCATED = 612;
export const ERROR_INVALID_COMPRESSION_SPECIFIED = 613;
export const ERROR_OUT_OF_BUFFERS = 614;
export const ERROR_PORT_NOT_FOUND = 615;
export const ERROR_ASYNC_REQUEST_PENDING = 616;
export const ERROR_ALREADY_DISCONNECTING = 617;
export const ERROR_PORT_NOT_OPEN = 618;
export const ERROR_PORT_DISCONNECTED = 619;
export const ERROR_NO_ENDPOINTS = 620;
export const ERROR_CANNOT_OPEN_PHONEBOOK = 621;
export const ERROR_CANNOT_LOAD_PHONEBOOK = 622;
export const ERROR_CANNOT_FIND_PHONEBOOK_ENTRY = 623;
export const ERROR_CANNOT_WRITE_PHONEBOOK = 624;
export const ERROR_CORRUPT_PHONEBOOK = 625;
export const ERROR_CANNOT_LOAD_STRING = 626;
export const ERROR_KEY_NOT_FOUND = 627;
export const ERROR_DISCONNECTION = 628;
export const ERROR_REMOTE_DISCONNECTION = 629;
export const ERROR_HARDWARE_FAILURE = 630;
export const ERROR_USER_DISCONNECTION = 631;
export const ERROR_INVALID_SIZE = 632;
export const ERROR_PORT_NOT_AVAILABLE = 633;
export const ERROR_CANNOT_PROJECT_CLIENT = 634;
export const ERROR_UNKNOWN = 635;
export const ERROR_WRONG_DEVICE_ATTACHED = 636;
export const ERROR_BAD_STRING = 637;
export const ERROR_REQUEST_TIMEOUT = 638;
export const ERROR_CANNOT_GET_LANA = 639;
export const ERROR_NETBIOS_ERROR = 640;
export const ERROR_SERVER_OUT_OF_RESOURCES = 641;
export const ERROR_NAME_EXISTS_ON_NET = 642;
export const ERROR_SERVER_GENERAL_NET_FAILURE = 643;
export const WARNING_MSG_ALIAS_NOT_ADDED = 644;
export const ERROR_AUTH_INTERNAL = 645;
export const ERROR_RESTRICTED_LOGON_HOURS = 646;
export const ERROR_ACCT_DISABLED = 647;
export const ERROR_PASSWD_EXPIRED = 648;
export const ERROR_NO_DIALIN_PERMISSION = 649;
export const ERROR_SERVER_NOT_RESPONDING = 650;
export const ERROR_FROM_DEVICE = 651;
export const ERROR_UNRECOGNIZED_RESPONSE = 652;
export const ERROR_MACRO_NOT_FOUND = 653;
export const ERROR_MACRO_NOT_DEFINED = 654;
export const ERROR_MESSAGE_MACRO_NOT_FOUND = 655;
export const ERROR_DEFAULTOFF_MACRO_NOT_FOUND = 656;
export const ERROR_FILE_COULD_NOT_BE_OPENED = 657;
export const ERROR_DEVICENAME_TOO_LONG = 658;
export const ERROR_DEVICENAME_NOT_FOUND = 659;
export const ERROR_NO_RESPONSES = 660;
export const ERROR_NO_COMMAND_FOUND = 661;
export const ERROR_WRONG_KEY_SPECIFIED = 662;
export const ERROR_UNKNOWN_DEVICE_TYPE = 663;
export const ERROR_ALLOCATING_MEMORY = 664;
export const ERROR_PORT_NOT_CONFIGURED = 665;
export const ERROR_DEVICE_NOT_READY = 666;
export const ERROR_READING_INI_FILE = 667;
export const ERROR_NO_CONNECTION = 668;
export const ERROR_BAD_USAGE_IN_INI_FILE = 669;
export const ERROR_READING_SECTIONNAME = 670;
export const ERROR_READING_DEVICETYPE = 671;
export const ERROR_READING_DEVICENAME = 672;
export const ERROR_READING_USAGE = 673;
export const ERROR_READING_MAXCONNECTBPS = 674;
export const ERROR_READING_MAXCARRIERBPS = 675;
export const ERROR_LINE_BUSY = 676;
export const ERROR_VOICE_ANSWER = 677;
export const ERROR_NO_ANSWER = 678;
export const ERROR_NO_CARRIER = 679;
export const ERROR_NO_DIALTONE = 680;
export const ERROR_IN_COMMAND = 681;
export const ERROR_WRITING_SECTIONNAME = 682;
export const ERROR_WRITING_DEVICETYPE = 683;
export const ERROR_WRITING_DEVICENAME = 684;
export const ERROR_WRITING_MAXCONNECTBPS = 685;
export const ERROR_WRITING_MAXCARRIERBPS = 686;
export const ERROR_WRITING_USAGE = 687;
export const ERROR_WRITING_DEFAULTOFF = 688;
export const ERROR_READING_DEFAULTOFF = 689;
export const ERROR_EMPTY_INI_FILE = 690;
export const ERROR_AUTHENTICATION_FAILURE = 691;
export const ERROR_PORT_OR_DEVICE = 692;
export const ERROR_NOT_BINARY_MACRO = 693;
export const ERROR_DCB_NOT_FOUND = 694;
export const ERROR_STATE_MACHINES_NOT_STARTED = 695;
export const ERROR_STATE_MACHINES_ALREADY_STARTED = 696;
export const ERROR_PARTIAL_RESPONSE_LOOPING = 697;
export const ERROR_UNKNOWN_RESPONSE_KEY = 698;
export const ERROR_RECV_BUF_FULL = 699;
export const ERROR_CMD_TOO_LONG = 700;
export const ERROR_UNSUPPORTED_BPS = 701;
export const ERROR_UNEXPECTED_RESPONSE = 702;
export const ERROR_INTERACTIVE_MODE = 703;
export const ERROR_BAD_CALLBACK_NUMBER = 704;
export const ERROR_INVALID_AUTH_STATE = 705;
export const ERROR_WRITING_INITBPS = 706;
export const ERROR_X25_DIAGNOSTIC = 707;
export const ERROR_ACCT_EXPIRED = 708;
export const ERROR_CHANGING_PASSWORD = 709;
export const ERROR_OVERRUN = 710;
export const ERROR_RASMAN_CANNOT_INITIALIZE = 711;
export const ERROR_BIPLEX_PORT_NOT_AVAILABLE = 712;
export const ERROR_NO_ACTIVE_ISDN_LINES = 713;
export const ERROR_NO_ISDN_CHANNELS_AVAILABLE = 714;
export const ERROR_TOO_MANY_LINE_ERRORS = 715;
export const ERROR_IP_CONFIGURATION = 716;
export const ERROR_NO_IP_ADDRESSES = 717;
export const ERROR_PPP_TIMEOUT = 718;
export const ERROR_PPP_REMOTE_TERMINATED = 719;
export const ERROR_PPP_NO_PROTOCOLS_CONFIGURED = 720;
export const ERROR_PPP_NO_RESPONSE = 721;
export const ERROR_PPP_INVALID_PACKET = 722;
export const ERROR_PHONE_NUMBER_TOO_LONG = 723;
export const ERROR_IPXCP_NO_DIALOUT_CONFIGURED = 724;
export const ERROR_IPXCP_NO_DIALIN_CONFIGURED = 725;
export const ERROR_IPXCP_DIALOUT_ALREADY_ACTIVE = 726;
export const ERROR_ACCESSING_TCPCFGDLL = 727;
export const ERROR_NO_IP_RAS_ADAPTER = 728;
export const ERROR_SLIP_REQUIRES_IP = 729;
export const ERROR_PROJECTION_NOT_COMPLETE = 730;
export const ERROR_PROTOCOL_NOT_CONFIGURED = 731;
export const ERROR_PPP_NOT_CONVERGING = 732;
export const ERROR_PPP_CP_REJECTED = 733;
export const ERROR_PPP_LCP_TERMINATED = 734;
export const ERROR_PPP_REQUIRED_ADDRESS_REJECTED = 735;
export const ERROR_PPP_NCP_TERMINATED = 736;
export const ERROR_PPP_LOOPBACK_DETECTED = 737;
export const ERROR_PPP_NO_ADDRESS_ASSIGNED = 738;
export const ERROR_CANNOT_USE_LOGON_CREDENTIALS = 739;
export const ERROR_TAPI_CONFIGURATION = 740;
export const ERROR_NO_LOCAL_ENCRYPTION = 741;
export const ERROR_NO_REMOTE_ENCRYPTION = 742;
export const ERROR_REMOTE_REQUIRES_ENCRYPTION = 743;
export const ERROR_IPXCP_NET_NUMBER_CONFLICT = 744;
export const ERROR_INVALID_SMM = 745;
export const ERROR_SMM_UNINITIALIZED = 746;
export const ERROR_NO_MAC_FOR_PORT = 747;
export const ERROR_SMM_TIMEOUT = 748;
export const ERROR_BAD_PHONE_NUMBER = 749;
export const ERROR_WRONG_MODULE = 750;
export const ERROR_INVALID_CALLBACK_NUMBER = 751;
export const ERROR_SCRIPT_SYNTAX = 752;
export const ERROR_HANGUP_FAILED = 753;
export const ERROR_BUNDLE_NOT_FOUND = 754;
export const ERROR_CANNOT_DO_CUSTOMDIAL = 755;
export const ERROR_DIAL_ALREADY_IN_PROGRESS = 756;
export const ERROR_RASAUTO_CANNOT_INITIALIZE = 757;
export const ERROR_CONNECTION_ALREADY_SHARED = 758;
export const ERROR_SHARING_CHANGE_FAILED = 759;
export const ERROR_SHARING_ROUTER_INSTALL = 760;
export const ERROR_SHARE_CONNECTION_FAILED = 761;
export const ERROR_SHARING_PRIVATE_INSTALL = 762;
export const ERROR_CANNOT_SHARE_CONNECTION = 763;
export const ERROR_NO_SMART_CARD_READER = 764;
export const ERROR_SHARING_ADDRESS_EXISTS = 765;
export const ERROR_NO_CERTIFICATE = 766;
export const ERROR_SHARING_MULTIPLE_ADDRESSES = 767;
export const ERROR_FAILED_TO_ENCRYPT = 768;
export const ERROR_BAD_ADDRESS_SPECIFIED = 769;
export const ERROR_CONNECTION_REJECT = 770;
export const ERROR_CONGESTION = 771;
export const ERROR_INCOMPATIBLE = 772;
export const ERROR_NUMBERCHANGED = 773;
export const ERROR_TEMPFAILURE = 774;
export const ERROR_BLOCKED = 775;
export const ERROR_DONOTDISTURB = 776;
export const ERROR_OUTOFORDER = 777;
export const ERROR_UNABLE_TO_AUTHENTICATE_SERVER = 778;
export const ERROR_SMART_CARD_REQUIRED = 779;
export const ERROR_INVALID_FUNCTION_FOR_ENTRY = 780;
export const ERROR_CERT_FOR_ENCRYPTION_NOT_FOUND = 781;
export const ERROR_SHARING_RRAS_CONFLICT = 782;
export const ERROR_SHARING_NO_PRIVATE_LAN = 783;
export const ERROR_NO_DIFF_USER_AT_LOGON = 784;
export const ERROR_NO_REG_CERT_AT_LOGON = 785;
export const ERROR_OAKLEY_NO_CERT = 786;
export const ERROR_OAKLEY_AUTH_FAIL = 787;
export const ERROR_OAKLEY_ATTRIB_FAIL = 788;
export const ERROR_OAKLEY_GENERAL_PROCESSING = 789;
export const ERROR_OAKLEY_NO_PEER_CERT = 790;
export const ERROR_OAKLEY_NO_POLICY = 791;
export const ERROR_OAKLEY_TIMED_OUT = 792;
export const ERROR_OAKLEY_ERROR = 793;
export const ERROR_UNKNOWN_FRAMED_PROTOCOL = 794;
export const ERROR_WRONG_TUNNEL_TYPE = 795;
export const ERROR_UNKNOWN_SERVICE_TYPE = 796;
export const ERROR_CONNECTING_DEVICE_NOT_FOUND = 797;
export const ERROR_NO_EAPTLS_CERTIFICATE = 798;
export const ERROR_SHARING_HOST_ADDRESS_CONFLICT = 799;
export const ERROR_AUTOMATIC_VPN_FAILED = 800;
export const ERROR_VALIDATING_SERVER_CERT = 801;
export const ERROR_READING_SCARD = 802;
export const ERROR_INVALID_PEAP_COOKIE_CONFIG = 803;
export const ERROR_INVALID_PEAP_COOKIE_USER = 804;
export const ERROR_INVALID_MSCHAPV2_CONFIG = 805;
export const ERROR_VPN_GRE_BLOCKED = 806;
export const ERROR_VPN_DISCONNECT = 807;
export const ERROR_VPN_REFUSED = 808;
export const ERROR_VPN_TIMEOUT = 809;
export const ERROR_VPN_BAD_CERT = 810;
export const ERROR_VPN_BAD_PSK = 811;
export const ERROR_SERVER_POLICY = 812;
export const ERROR_BROADBAND_ACTIVE = 813;
export const ERROR_BROADBAND_NO_NIC = 814;
export const ERROR_BROADBAND_TIMEOUT = 815;
export const ERROR_FEATURE_DEPRECATED = 816;
export const ERROR_CANNOT_DELETE = 817;
export const ERROR_RASQEC_RESOURCE_CREATION_FAILED = 818;
export const ERROR_RASQEC_NAPAGENT_NOT_ENABLED = 819;
export const ERROR_RASQEC_NAPAGENT_NOT_CONNECTED = 820;
export const ERROR_RASQEC_CONN_DOESNOTEXIST = 821;
export const ERROR_RASQEC_TIMEOUT = 822;
export const ERROR_PEAP_CRYPTOBINDING_INVALID = 823;
export const ERROR_PEAP_CRYPTOBINDING_NOTRECEIVED = 824;
export const ERROR_INVALID_VPNSTRATEGY = 825;
export const ERROR_EAPTLS_CACHE_CREDENTIALS_INVALID = 826;
export const ERROR_IPSEC_SERVICE_STOPPED = 827;
export const ERROR_IDLE_TIMEOUT = 828;
export const ERROR_LINK_FAILURE = 829;
export const ERROR_USER_LOGOFF = 830;
export const ERROR_FAST_USER_SWITCH = 831;
export const ERROR_HIBERNATION = 832;
export const ERROR_SYSTEM_SUSPENDED = 833;
export const ERROR_RASMAN_SERVICE_STOPPED = 834;
export const ERROR_INVALID_SERVER_CERT = 835;
export const ERROR_NOT_NAP_CAPABLE = 836;
export const ERROR_INVALID_TUNNELID = 837;
export const ERROR_UPDATECONNECTION_REQUEST_IN_PROCESS = 838;
export const ERROR_PROTOCOL_ENGINE_DISABLED = 839;
export const ERROR_INTERNAL_ADDRESS_FAILURE = 840;
export const ERROR_FAILED_CP_REQUIRED = 841;
export const ERROR_TS_UNACCEPTABLE = 842;
export const ERROR_MOBIKE_DISABLED = 843;
export const ERROR_CANNOT_INITIATE_MOBIKE_UPDATE = 844;
export const ERROR_PEAP_SERVER_REJECTED_CLIENT_TLV = 845;
export const ERROR_INVALID_PREFERENCES = 846;
export const ERROR_EAPTLS_SCARD_CACHE_CREDENTIALS_INVALID = 847;
export const ERROR_SSTP_COOKIE_SET_FAILURE = 848;
export const ERROR_INVALID_PEAP_COOKIE_ATTRIBUTES = 849;
export const ERROR_EAP_METHOD_NOT_INSTALLED = 850;
export const ERROR_EAP_METHOD_DOES_NOT_SUPPORT_SSO = 851;
export const ERROR_EAP_METHOD_OPERATION_NOT_SUPPORTED = 852;
export const ERROR_EAP_USER_CERT_INVALID = 853;
export const ERROR_EAP_USER_CERT_EXPIRED = 854;
export const ERROR_EAP_USER_CERT_REVOKED = 855;
export const ERROR_EAP_USER_CERT_OTHER_ERROR = 856;
export const ERROR_EAP_SERVER_CERT_INVALID = 857;
export const ERROR_EAP_SERVER_CERT_EXPIRED = 858;
export const ERROR_EAP_SERVER_CERT_REVOKED = 859;
export const ERROR_EAP_SERVER_CERT_OTHER_ERROR = 860;
export const ERROR_EAP_USER_ROOT_CERT_NOT_FOUND = 861;
export const ERROR_EAP_USER_ROOT_CERT_INVALID = 862;
export const ERROR_EAP_USER_ROOT_CERT_EXPIRED = 863;
export const ERROR_EAP_SERVER_ROOT_CERT_NOT_FOUND = 864;
export const ERROR_EAP_SERVER_ROOT_CERT_INVALID = 865;
export const ERROR_EAP_SERVER_ROOT_CERT_NAME_REQUIRED = 866;
export const ERROR_PEAP_IDENTITY_MISMATCH = 867;
export const ERROR_DNSNAME_NOT_RESOLVABLE = 868;
export const ERROR_EAPTLS_PASSWD_INVALID = 869;
export const ERROR_IKEV2_PSK_INTERFACE_ALREADY_EXISTS = 870;
export const ERROR_INVALID_DESTINATION_IP = 871;
export const ERROR_INVALID_INTERFACE_CONFIG = 872;
export const ERROR_VPN_PLUGIN_GENERIC = 873;
export const ERROR_SSO_CERT_MISSING = 874;
export const ERROR_DEVICE_COMPLIANCE = 875;
export const ERROR_PLUGIN_NOT_INSTALLED = 876;
export const ERROR_ACTION_REQUIRED = 877;
export const RASBASEEND = 877;
export const RASAPIVERSION_500 = 1;
export const RASAPIVERSION_501 = 2;
export const RASAPIVERSION_600 = 3;
export const RASAPIVERSION_601 = 4;
export const RASCS_OpenPort = 0;
export const RASCS_PortOpened = 1;
export const RASCS_ConnectDevice = 2;
export const RASCS_DeviceConnected = 3;
export const RASCS_AllDevicesConnected = 4;
export const RASCS_Authenticate = 5;
export const RASCS_AuthNotify = 6;
export const RASCS_AuthRetry = 7;
export const RASCS_AuthCallback = 8;
export const RASCS_AuthChangePassword = 9;
export const RASCS_AuthProject = 10;
export const RASCS_AuthLinkSpeed = 11;
export const RASCS_AuthAck = 12;
export const RASCS_ReAuthenticate = 13;
export const RASCS_Authenticated = 14;
export const RASCS_PrepareForCallback = 15;
export const RASCS_WaitForModemReset = 16;
export const RASCS_WaitForCallback = 17;
export const RASCS_Projected = 18;
export const RASCS_StartAuthentication = 19;
export const RASCS_CallbackComplete = 20;
export const RASCS_LogonNetwork = 21;
export const RASCS_SubEntryConnected = 22;
export const RASCS_SubEntryDisconnected = 23;
export const RASCS_ApplySettings = 24;
export const RASCS_Interactive = 4096;
export const RASCS_RetryAuthentication = 4097;
export const RASCS_CallbackSetByCaller = 4098;
export const RASCS_PasswordExpired = 4099;
export const RASCS_InvokeEapUI = 4100;
export const RASCS_Connected = 8192;
export const RASCS_Disconnected = 8193;
export const RASCSS_None = 0;
export const RASCSS_Dormant = 1;
export const RASCSS_Reconnecting = 2;
export const RASCSS_Reconnected = 8192;
export const RASP_Amb = 65536;
export const RASP_PppNbf = 32831;
export const RASP_PppIpx = 32811;
export const RASP_PppIp = 32801;
export const RASP_PppCcp = 33021;
export const RASP_PppLcp = 49185;
export const RASP_PppIpv6 = 32855;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const PROJECTION_INFO_TYPE_PPP = 1;
export const PROJECTION_INFO_TYPE_IKEv2 = 2;
export const IKEV2_ID_PAYLOAD_TYPE_INVALID = 0;
export const IKEV2_ID_PAYLOAD_TYPE_IPV4_ADDR = 1;
export const IKEV2_ID_PAYLOAD_TYPE_FQDN = 2;
export const IKEV2_ID_PAYLOAD_TYPE_RFC822_ADDR = 3;
export const IKEV2_ID_PAYLOAD_TYPE_RESERVED1 = 4;
export const IKEV2_ID_PAYLOAD_TYPE_ID_IPV6_ADDR = 5;
export const IKEV2_ID_PAYLOAD_TYPE_RESERVED2 = 6;
export const IKEV2_ID_PAYLOAD_TYPE_RESERVED3 = 7;
export const IKEV2_ID_PAYLOAD_TYPE_RESERVED4 = 8;
export const IKEV2_ID_PAYLOAD_TYPE_DER_ASN1_DN = 9;
export const IKEV2_ID_PAYLOAD_TYPE_DER_ASN1_GN = 10;
export const IKEV2_ID_PAYLOAD_TYPE_KEY_ID = 11;
export const IKEV2_ID_PAYLOAD_TYPE_MAX = 12;
export const ROUTER_IF_TYPE_CLIENT = 0;
export const ROUTER_IF_TYPE_HOME_ROUTER = 1;
export const ROUTER_IF_TYPE_FULL_ROUTER = 2;
export const ROUTER_IF_TYPE_DEDICATED = 3;
export const ROUTER_IF_TYPE_INTERNAL = 4;
export const ROUTER_IF_TYPE_LOOPBACK = 5;
export const ROUTER_IF_TYPE_TUNNEL1 = 6;
export const ROUTER_IF_TYPE_DIALOUT = 7;
export const ROUTER_IF_TYPE_MAX = 8;
export const ROUTER_IF_STATE_UNREACHABLE = 0;
export const ROUTER_IF_STATE_DISCONNECTED = 1;
export const ROUTER_IF_STATE_CONNECTING = 2;
export const ROUTER_IF_STATE_CONNECTED = 3;
export const RAS_PORT_NON_OPERATIONAL = 0;
export const RAS_PORT_DISCONNECTED = 1;
export const RAS_PORT_CALLING_BACK = 2;
export const RAS_PORT_LISTENING = 3;
export const RAS_PORT_AUTHENTICATING = 4;
export const RAS_PORT_AUTHENTICATED = 5;
export const RAS_PORT_INITIALIZING = 6;
export const RAS_HARDWARE_OPERATIONAL = 0;
export const RAS_HARDWARE_FAILURE = 1;
export const RAS_QUAR_STATE_NORMAL = 0;
export const RAS_QUAR_STATE_QUARANTINE = 1;
export const RAS_QUAR_STATE_PROBATION = 2;
export const RAS_QUAR_STATE_NOT_CAPABLE = 3;
export const MPRAPI_OBJECT_TYPE_RAS_CONNECTION_OBJECT = 1;
export const MPRAPI_OBJECT_TYPE_MPR_SERVER_OBJECT = 2;
export const MPRAPI_OBJECT_TYPE_MPR_SERVER_SET_CONFIG_OBJECT = 3;
export const MPRAPI_OBJECT_TYPE_AUTH_VALIDATION_OBJECT = 4;
export const MPRAPI_OBJECT_TYPE_UPDATE_CONNECTION_OBJECT = 5;
export const MPRAPI_OBJECT_TYPE_IF_CUSTOM_CONFIG_OBJECT = 6;
export const MPR_VPN_TS_IPv4_ADDR_RANGE = 7;
export const MPR_VPN_TS_IPv6_ADDR_RANGE = 8;
export const ANY_SOURCE = 0;
export const ALL_SOURCES = 1;
export const RTM_ENTITY_REGISTERED = 0;
export const RTM_ENTITY_DEREGISTERED = 1;
export const RTM_ROUTE_EXPIRED = 2;
export const RTM_CHANGE_NOTIFICATION = 3;

// Structs

export type HRASCONN = Deno.PointerValue;

/**
 * Windows.Win32.NetworkManagement.Rras.RASIPADDR (size: 8)
 */
export interface RASIPADDR {
  /** u8 */
  a: number;
  /** u8 */
  b: number;
  /** u8 */
  c: number;
  /** u8 */
  d: number;
}

export const sizeofRASIPADDR = 8;

export function allocRASIPADDR(data?: Partial<RASIPADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofRASIPADDR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.a !== undefined) view.setUint8(0, Number(data.a));
  // 0x01: u8
  if (data?.b !== undefined) view.setUint8(1, Number(data.b));
  // 0x02: u8
  if (data?.c !== undefined) view.setUint8(2, Number(data.c));
  // 0x03: u8
  if (data?.d !== undefined) view.setUint8(3, Number(data.d));
  // 0x04: pad4
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASTUNNELENDPOINT (size: 16)
 */
export interface RASTUNNELENDPOINT {
  /** u32 */
  dwType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRASTUNNELENDPOINT = 16;

export function allocRASTUNNELENDPOINT(data?: Partial<RASTUNNELENDPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofRASTUNNELENDPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASCONNW (size: 88)
 */
export interface RASCONNW {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.NetworkManagement.Rras.HRASCONN */
  hrasconn: Uint8Array | Deno.PointerValue | null;
  /** array */
  szEntryName: Deno.PointerValue | null;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szPhonebook: Deno.PointerValue | null;
  /** u32 */
  dwSubEntry: number;
  /** System.Guid */
  guidEntry: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.LUID */
  luid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidCorrelationId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRASCONNW = 88;

export function allocRASCONNW(data?: Partial<RASCONNW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASCONNW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hrasconn !== undefined) view.setBigUint64(8, data.hrasconn === null ? 0n : BigInt(util.toPointer(data.hrasconn)), true);
  // 0x10: pointer
  if (data?.szEntryName !== undefined) view.setBigUint64(16, data.szEntryName === null ? 0n : BigInt(util.toPointer(data.szEntryName)), true);
  // 0x18: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(24, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x20: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(32, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x28: pointer
  if (data?.szPhonebook !== undefined) view.setBigUint64(40, data.szPhonebook === null ? 0n : BigInt(util.toPointer(data.szPhonebook)), true);
  // 0x30: u32
  if (data?.dwSubEntry !== undefined) view.setUint32(48, Number(data.dwSubEntry), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.guidEntry !== undefined) view.setBigUint64(56, data.guidEntry === null ? 0n : BigInt(util.toPointer(data.guidEntry)), true);
  // 0x40: u32
  if (data?.dwFlags !== undefined) view.setUint32(64, Number(data.dwFlags), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.luid !== undefined) view.setBigUint64(72, data.luid === null ? 0n : BigInt(util.toPointer(data.luid)), true);
  // 0x50: pointer
  if (data?.guidCorrelationId !== undefined) view.setBigUint64(80, data.guidCorrelationId === null ? 0n : BigInt(util.toPointer(data.guidCorrelationId)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASCONNA (size: 88)
 */
export interface RASCONNA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.NetworkManagement.Rras.HRASCONN */
  hrasconn: Uint8Array | Deno.PointerValue | null;
  /** array */
  szEntryName: Deno.PointerValue | null;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szPhonebook: Deno.PointerValue | null;
  /** u32 */
  dwSubEntry: number;
  /** System.Guid */
  guidEntry: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.LUID */
  luid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidCorrelationId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRASCONNA = 88;

export function allocRASCONNA(data?: Partial<RASCONNA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASCONNA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hrasconn !== undefined) view.setBigUint64(8, data.hrasconn === null ? 0n : BigInt(util.toPointer(data.hrasconn)), true);
  // 0x10: pointer
  if (data?.szEntryName !== undefined) view.setBigUint64(16, data.szEntryName === null ? 0n : BigInt(util.toPointer(data.szEntryName)), true);
  // 0x18: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(24, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x20: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(32, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x28: pointer
  if (data?.szPhonebook !== undefined) view.setBigUint64(40, data.szPhonebook === null ? 0n : BigInt(util.toPointer(data.szPhonebook)), true);
  // 0x30: u32
  if (data?.dwSubEntry !== undefined) view.setUint32(48, Number(data.dwSubEntry), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.guidEntry !== undefined) view.setBigUint64(56, data.guidEntry === null ? 0n : BigInt(util.toPointer(data.guidEntry)), true);
  // 0x40: u32
  if (data?.dwFlags !== undefined) view.setUint32(64, Number(data.dwFlags), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.luid !== undefined) view.setBigUint64(72, data.luid === null ? 0n : BigInt(util.toPointer(data.luid)), true);
  // 0x50: pointer
  if (data?.guidCorrelationId !== undefined) view.setBigUint64(80, data.guidCorrelationId === null ? 0n : BigInt(util.toPointer(data.guidCorrelationId)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASCONNSTATUSW (size: 64)
 */
export interface RASCONNSTATUSW {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.NetworkManagement.Rras.RASCONNSTATE */
  rasconnstate: RASCONNSTATE;
  /** u32 */
  dwError: number;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szPhoneNumber: Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASTUNNELENDPOINT */
  localEndPoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASTUNNELENDPOINT */
  remoteEndPoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASCONNSUBSTATE */
  rasconnsubstate: RASCONNSUBSTATE;
}

export const sizeofRASCONNSTATUSW = 64;

export function allocRASCONNSTATUSW(data?: Partial<RASCONNSTATUSW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASCONNSTATUSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.rasconnstate !== undefined) view.setInt32(4, Number(data.rasconnstate), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(16, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x18: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(24, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x20: pointer
  if (data?.szPhoneNumber !== undefined) view.setBigUint64(32, data.szPhoneNumber === null ? 0n : BigInt(util.toPointer(data.szPhoneNumber)), true);
  // 0x28: pointer
  if (data?.localEndPoint !== undefined) view.setBigUint64(40, data.localEndPoint === null ? 0n : BigInt(util.toPointer(data.localEndPoint)), true);
  // 0x30: pointer
  if (data?.remoteEndPoint !== undefined) view.setBigUint64(48, data.remoteEndPoint === null ? 0n : BigInt(util.toPointer(data.remoteEndPoint)), true);
  // 0x38: i32
  if (data?.rasconnsubstate !== undefined) view.setInt32(56, Number(data.rasconnsubstate), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASCONNSTATUSA (size: 64)
 */
export interface RASCONNSTATUSA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.NetworkManagement.Rras.RASCONNSTATE */
  rasconnstate: RASCONNSTATE;
  /** u32 */
  dwError: number;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szPhoneNumber: Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASTUNNELENDPOINT */
  localEndPoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASTUNNELENDPOINT */
  remoteEndPoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASCONNSUBSTATE */
  rasconnsubstate: RASCONNSUBSTATE;
}

export const sizeofRASCONNSTATUSA = 64;

export function allocRASCONNSTATUSA(data?: Partial<RASCONNSTATUSA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASCONNSTATUSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.rasconnstate !== undefined) view.setInt32(4, Number(data.rasconnstate), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(16, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x18: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(24, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x20: pointer
  if (data?.szPhoneNumber !== undefined) view.setBigUint64(32, data.szPhoneNumber === null ? 0n : BigInt(util.toPointer(data.szPhoneNumber)), true);
  // 0x28: pointer
  if (data?.localEndPoint !== undefined) view.setBigUint64(40, data.localEndPoint === null ? 0n : BigInt(util.toPointer(data.localEndPoint)), true);
  // 0x30: pointer
  if (data?.remoteEndPoint !== undefined) view.setBigUint64(48, data.remoteEndPoint === null ? 0n : BigInt(util.toPointer(data.remoteEndPoint)), true);
  // 0x38: i32
  if (data?.rasconnsubstate !== undefined) view.setInt32(56, Number(data.rasconnsubstate), true);
  // 0x3c: pad4
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.NetworkManagement.Rras.RASDIALPARAMSW (size: 88)
 */
export interface RASDIALPARAMSW {
  /** u32 */
  dwSize: number;
  /** array */
  szEntryName: Deno.PointerValue | null;
  /** array */
  szPhoneNumber: Deno.PointerValue | null;
  /** array */
  szCallbackNumber: Deno.PointerValue | null;
  /** array */
  szUserName: Deno.PointerValue | null;
  /** array */
  szPassword: Deno.PointerValue | null;
  /** array */
  szDomain: Deno.PointerValue | null;
  /** u32 */
  dwSubEntry: number;
  /** usize */
  dwCallbackId: Deno.PointerValue;
  /** u32 */
  dwIfIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  szEncPassword: string | null | Uint8Array | Uint16Array;
}

export const sizeofRASDIALPARAMSW = 88;

export function allocRASDIALPARAMSW(data?: Partial<RASDIALPARAMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASDIALPARAMSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szEntryName !== undefined) view.setBigUint64(8, data.szEntryName === null ? 0n : BigInt(util.toPointer(data.szEntryName)), true);
  // 0x10: pointer
  if (data?.szPhoneNumber !== undefined) view.setBigUint64(16, data.szPhoneNumber === null ? 0n : BigInt(util.toPointer(data.szPhoneNumber)), true);
  // 0x18: pointer
  if (data?.szCallbackNumber !== undefined) view.setBigUint64(24, data.szCallbackNumber === null ? 0n : BigInt(util.toPointer(data.szCallbackNumber)), true);
  // 0x20: pointer
  if (data?.szUserName !== undefined) view.setBigUint64(32, data.szUserName === null ? 0n : BigInt(util.toPointer(data.szUserName)), true);
  // 0x28: pointer
  if (data?.szPassword !== undefined) view.setBigUint64(40, data.szPassword === null ? 0n : BigInt(util.toPointer(data.szPassword)), true);
  // 0x30: pointer
  if (data?.szDomain !== undefined) view.setBigUint64(48, data.szDomain === null ? 0n : BigInt(util.toPointer(data.szDomain)), true);
  // 0x38: u32
  if (data?.dwSubEntry !== undefined) view.setUint32(56, Number(data.dwSubEntry), true);
  // 0x3c: pad4
  // 0x40: usize
  if (data?.dwCallbackId !== undefined) view.setBigUint64(64, BigInt(data.dwCallbackId), true);
  // 0x48: u32
  if (data?.dwIfIndex !== undefined) view.setUint32(72, Number(data.dwIfIndex), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.szEncPassword !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.szEncPassword);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.NetworkManagement.Rras.RASDIALPARAMSA (size: 88)
 */
export interface RASDIALPARAMSA {
  /** u32 */
  dwSize: number;
  /** array */
  szEntryName: Deno.PointerValue | null;
  /** array */
  szPhoneNumber: Deno.PointerValue | null;
  /** array */
  szCallbackNumber: Deno.PointerValue | null;
  /** array */
  szUserName: Deno.PointerValue | null;
  /** array */
  szPassword: Deno.PointerValue | null;
  /** array */
  szDomain: Deno.PointerValue | null;
  /** u32 */
  dwSubEntry: number;
  /** usize */
  dwCallbackId: Deno.PointerValue;
  /** u32 */
  dwIfIndex: number;
  /** Windows.Win32.Foundation.PSTR */
  szEncPassword: string | null | Uint8Array;
}

export const sizeofRASDIALPARAMSA = 88;

export function allocRASDIALPARAMSA(data?: Partial<RASDIALPARAMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASDIALPARAMSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szEntryName !== undefined) view.setBigUint64(8, data.szEntryName === null ? 0n : BigInt(util.toPointer(data.szEntryName)), true);
  // 0x10: pointer
  if (data?.szPhoneNumber !== undefined) view.setBigUint64(16, data.szPhoneNumber === null ? 0n : BigInt(util.toPointer(data.szPhoneNumber)), true);
  // 0x18: pointer
  if (data?.szCallbackNumber !== undefined) view.setBigUint64(24, data.szCallbackNumber === null ? 0n : BigInt(util.toPointer(data.szCallbackNumber)), true);
  // 0x20: pointer
  if (data?.szUserName !== undefined) view.setBigUint64(32, data.szUserName === null ? 0n : BigInt(util.toPointer(data.szUserName)), true);
  // 0x28: pointer
  if (data?.szPassword !== undefined) view.setBigUint64(40, data.szPassword === null ? 0n : BigInt(util.toPointer(data.szPassword)), true);
  // 0x30: pointer
  if (data?.szDomain !== undefined) view.setBigUint64(48, data.szDomain === null ? 0n : BigInt(util.toPointer(data.szDomain)), true);
  // 0x38: u32
  if (data?.dwSubEntry !== undefined) view.setUint32(56, Number(data.dwSubEntry), true);
  // 0x3c: pad4
  // 0x40: usize
  if (data?.dwCallbackId !== undefined) view.setBigUint64(64, BigInt(data.dwCallbackId), true);
  // 0x48: u32
  if (data?.dwIfIndex !== undefined) view.setUint32(72, Number(data.dwIfIndex), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.szEncPassword !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.szEncPassword);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASEAPINFO (size: 16)
 */
export interface RASEAPINFO {
  /** u32 */
  dwSizeofEapInfo: number;
  /** ptr */
  pbEapInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRASEAPINFO = 16;

export function allocRASEAPINFO(data?: Partial<RASEAPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRASEAPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeofEapInfo !== undefined) view.setUint32(0, Number(data.dwSizeofEapInfo), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbEapInfo !== undefined) view.setBigUint64(8, data.pbEapInfo === null ? 0n : BigInt(util.toPointer(data.pbEapInfo)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASDEVSPECIFICINFO (size: 16)
 */
export interface RASDEVSPECIFICINFO {
  /** u32 */
  dwSize: number;
  /** ptr */
  pbDevSpecificInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRASDEVSPECIFICINFO = 16;

export function allocRASDEVSPECIFICINFO(data?: Partial<RASDEVSPECIFICINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRASDEVSPECIFICINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbDevSpecificInfo !== undefined) view.setBigUint64(8, data.pbDevSpecificInfo === null ? 0n : BigInt(util.toPointer(data.pbDevSpecificInfo)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

export type BOOL = number;

/**
 * Windows.Win32.NetworkManagement.Rras.RASDIALEXTENSIONS (size: 56)
 */
export interface RASDIALEXTENSIONS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwfOptions: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** usize */
  reserved: Deno.PointerValue;
  /** usize */
  reserved1: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Rras.RASEAPINFO */
  RasEapInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSkipPppAuth: boolean;
  /** Windows.Win32.NetworkManagement.Rras.RASDEVSPECIFICINFO */
  RasDevSpecificInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRASDIALEXTENSIONS = 56;

export function allocRASDIALEXTENSIONS(data?: Partial<RASDIALEXTENSIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofRASDIALEXTENSIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwfOptions !== undefined) view.setUint32(4, Number(data.dwfOptions), true);
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: usize
  if (data?.reserved !== undefined) view.setBigUint64(16, BigInt(data.reserved), true);
  // 0x18: usize
  if (data?.reserved1 !== undefined) view.setBigUint64(24, BigInt(data.reserved1), true);
  // 0x20: pointer
  if (data?.RasEapInfo !== undefined) view.setBigUint64(32, data.RasEapInfo === null ? 0n : BigInt(util.toPointer(data.RasEapInfo)), true);
  // 0x28: i32
  if (data?.fSkipPppAuth !== undefined) view.setInt32(40, Number(data.fSkipPppAuth), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.RasDevSpecificInfo !== undefined) view.setBigUint64(48, data.RasDevSpecificInfo === null ? 0n : BigInt(util.toPointer(data.RasDevSpecificInfo)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASENTRYNAMEW (size: 32)
 */
export interface RASENTRYNAMEW {
  /** u32 */
  dwSize: number;
  /** array */
  szEntryName: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** array */
  szPhonebookPath: Deno.PointerValue | null;
}

export const sizeofRASENTRYNAMEW = 32;

export function allocRASENTRYNAMEW(data?: Partial<RASENTRYNAMEW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASENTRYNAMEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szEntryName !== undefined) view.setBigUint64(8, data.szEntryName === null ? 0n : BigInt(util.toPointer(data.szEntryName)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szPhonebookPath !== undefined) view.setBigUint64(24, data.szPhonebookPath === null ? 0n : BigInt(util.toPointer(data.szPhonebookPath)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASENTRYNAMEA (size: 32)
 */
export interface RASENTRYNAMEA {
  /** u32 */
  dwSize: number;
  /** array */
  szEntryName: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** array */
  szPhonebookPath: Deno.PointerValue | null;
}

export const sizeofRASENTRYNAMEA = 32;

export function allocRASENTRYNAMEA(data?: Partial<RASENTRYNAMEA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASENTRYNAMEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szEntryName !== undefined) view.setBigUint64(8, data.szEntryName === null ? 0n : BigInt(util.toPointer(data.szEntryName)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szPhonebookPath !== undefined) view.setBigUint64(24, data.szPhonebookPath === null ? 0n : BigInt(util.toPointer(data.szPhonebookPath)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASAMBW (size: 24)
 */
export interface RASAMBW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwError: number;
  /** array */
  szNetBiosError: Deno.PointerValue | null;
  /** u8 */
  bLana: number;
}

export const sizeofRASAMBW = 24;

export function allocRASAMBW(data?: Partial<RASAMBW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASAMBW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: pointer
  if (data?.szNetBiosError !== undefined) view.setBigUint64(8, data.szNetBiosError === null ? 0n : BigInt(util.toPointer(data.szNetBiosError)), true);
  // 0x10: u8
  if (data?.bLana !== undefined) view.setUint8(16, Number(data.bLana));
  // 0x11: pad7
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASAMBA (size: 24)
 */
export interface RASAMBA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwError: number;
  /** array */
  szNetBiosError: Deno.PointerValue | null;
  /** u8 */
  bLana: number;
}

export const sizeofRASAMBA = 24;

export function allocRASAMBA(data?: Partial<RASAMBA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASAMBA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: pointer
  if (data?.szNetBiosError !== undefined) view.setBigUint64(8, data.szNetBiosError === null ? 0n : BigInt(util.toPointer(data.szNetBiosError)), true);
  // 0x10: u8
  if (data?.bLana !== undefined) view.setUint8(16, Number(data.bLana));
  // 0x11: pad7
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPPPNBFW (size: 40)
 */
export interface RASPPPNBFW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwError: number;
  /** u32 */
  dwNetBiosError: number;
  /** array */
  szNetBiosError: Deno.PointerValue | null;
  /** array */
  szWorkstationName: Deno.PointerValue | null;
  /** u8 */
  bLana: number;
}

export const sizeofRASPPPNBFW = 40;

export function allocRASPPPNBFW(data?: Partial<RASPPPNBFW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPPPNBFW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: u32
  if (data?.dwNetBiosError !== undefined) view.setUint32(8, Number(data.dwNetBiosError), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szNetBiosError !== undefined) view.setBigUint64(16, data.szNetBiosError === null ? 0n : BigInt(util.toPointer(data.szNetBiosError)), true);
  // 0x18: pointer
  if (data?.szWorkstationName !== undefined) view.setBigUint64(24, data.szWorkstationName === null ? 0n : BigInt(util.toPointer(data.szWorkstationName)), true);
  // 0x20: u8
  if (data?.bLana !== undefined) view.setUint8(32, Number(data.bLana));
  // 0x21: pad7
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPPPNBFA (size: 40)
 */
export interface RASPPPNBFA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwError: number;
  /** u32 */
  dwNetBiosError: number;
  /** array */
  szNetBiosError: Deno.PointerValue | null;
  /** array */
  szWorkstationName: Deno.PointerValue | null;
  /** u8 */
  bLana: number;
}

export const sizeofRASPPPNBFA = 40;

export function allocRASPPPNBFA(data?: Partial<RASPPPNBFA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPPPNBFA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: u32
  if (data?.dwNetBiosError !== undefined) view.setUint32(8, Number(data.dwNetBiosError), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szNetBiosError !== undefined) view.setBigUint64(16, data.szNetBiosError === null ? 0n : BigInt(util.toPointer(data.szNetBiosError)), true);
  // 0x18: pointer
  if (data?.szWorkstationName !== undefined) view.setBigUint64(24, data.szWorkstationName === null ? 0n : BigInt(util.toPointer(data.szWorkstationName)), true);
  // 0x20: u8
  if (data?.bLana !== undefined) view.setUint8(32, Number(data.bLana));
  // 0x21: pad7
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASIPXW (size: 16)
 */
export interface RASIPXW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwError: number;
  /** array */
  szIpxAddress: Deno.PointerValue | null;
}

export const sizeofRASIPXW = 16;

export function allocRASIPXW(data?: Partial<RASIPXW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASIPXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: pointer
  if (data?.szIpxAddress !== undefined) view.setBigUint64(8, data.szIpxAddress === null ? 0n : BigInt(util.toPointer(data.szIpxAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPPPIPXA (size: 16)
 */
export interface RASPPPIPXA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwError: number;
  /** array */
  szIpxAddress: Deno.PointerValue | null;
}

export const sizeofRASPPPIPXA = 16;

export function allocRASPPPIPXA(data?: Partial<RASPPPIPXA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPPPIPXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: pointer
  if (data?.szIpxAddress !== undefined) view.setBigUint64(8, data.szIpxAddress === null ? 0n : BigInt(util.toPointer(data.szIpxAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPPPIPW (size: 32)
 */
export interface RASPPPIPW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwError: number;
  /** array */
  szIpAddress: Deno.PointerValue | null;
  /** array */
  szServerIpAddress: Deno.PointerValue | null;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwServerOptions: number;
}

export const sizeofRASPPPIPW = 32;

export function allocRASPPPIPW(data?: Partial<RASPPPIPW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPPPIPW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: pointer
  if (data?.szIpAddress !== undefined) view.setBigUint64(8, data.szIpAddress === null ? 0n : BigInt(util.toPointer(data.szIpAddress)), true);
  // 0x10: pointer
  if (data?.szServerIpAddress !== undefined) view.setBigUint64(16, data.szServerIpAddress === null ? 0n : BigInt(util.toPointer(data.szServerIpAddress)), true);
  // 0x18: u32
  if (data?.dwOptions !== undefined) view.setUint32(24, Number(data.dwOptions), true);
  // 0x1c: u32
  if (data?.dwServerOptions !== undefined) view.setUint32(28, Number(data.dwServerOptions), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPPPIPA (size: 32)
 */
export interface RASPPPIPA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwError: number;
  /** array */
  szIpAddress: Deno.PointerValue | null;
  /** array */
  szServerIpAddress: Deno.PointerValue | null;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwServerOptions: number;
}

export const sizeofRASPPPIPA = 32;

export function allocRASPPPIPA(data?: Partial<RASPPPIPA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPPPIPA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: pointer
  if (data?.szIpAddress !== undefined) view.setBigUint64(8, data.szIpAddress === null ? 0n : BigInt(util.toPointer(data.szIpAddress)), true);
  // 0x10: pointer
  if (data?.szServerIpAddress !== undefined) view.setBigUint64(16, data.szServerIpAddress === null ? 0n : BigInt(util.toPointer(data.szServerIpAddress)), true);
  // 0x18: u32
  if (data?.dwOptions !== undefined) view.setUint32(24, Number(data.dwOptions), true);
  // 0x1c: u32
  if (data?.dwServerOptions !== undefined) view.setUint32(28, Number(data.dwServerOptions), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPPPIPV6 (size: 40)
 */
export interface RASPPPIPV6 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwError: number;
  /** array */
  bLocalInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bPeerInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bLocalCompressionProtocol: Deno.PointerValue | null;
  /** array */
  bPeerCompressionProtocol: Deno.PointerValue | null;
}

export const sizeofRASPPPIPV6 = 40;

export function allocRASPPPIPV6(data?: Partial<RASPPPIPV6>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPPPIPV6);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: pointer
  if (data?.bLocalInterfaceIdentifier !== undefined) view.setBigUint64(8, data.bLocalInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bLocalInterfaceIdentifier)), true);
  // 0x10: pointer
  if (data?.bPeerInterfaceIdentifier !== undefined) view.setBigUint64(16, data.bPeerInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bPeerInterfaceIdentifier)), true);
  // 0x18: pointer
  if (data?.bLocalCompressionProtocol !== undefined) view.setBigUint64(24, data.bLocalCompressionProtocol === null ? 0n : BigInt(util.toPointer(data.bLocalCompressionProtocol)), true);
  // 0x20: pointer
  if (data?.bPeerCompressionProtocol !== undefined) view.setBigUint64(32, data.bPeerCompressionProtocol === null ? 0n : BigInt(util.toPointer(data.bPeerCompressionProtocol)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPPPLCPW (size: 64)
 */
export interface RASPPPLCPW {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fBundled: boolean;
  /** u32 */
  dwError: number;
  /** u32 */
  dwAuthenticationProtocol: number;
  /** u32 */
  dwAuthenticationData: number;
  /** u32 */
  dwEapTypeId: number;
  /** u32 */
  dwServerAuthenticationProtocol: number;
  /** u32 */
  dwServerAuthenticationData: number;
  /** u32 */
  dwServerEapTypeId: number;
  /** Windows.Win32.Foundation.BOOL */
  fMultilink: boolean;
  /** u32 */
  dwTerminateReason: number;
  /** u32 */
  dwServerTerminateReason: number;
  /** array */
  szReplyMessage: Deno.PointerValue | null;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwServerOptions: number;
}

export const sizeofRASPPPLCPW = 64;

export function allocRASPPPLCPW(data?: Partial<RASPPPLCPW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPPPLCPW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.fBundled !== undefined) view.setInt32(4, Number(data.fBundled), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: u32
  if (data?.dwAuthenticationProtocol !== undefined) view.setUint32(12, Number(data.dwAuthenticationProtocol), true);
  // 0x10: u32
  if (data?.dwAuthenticationData !== undefined) view.setUint32(16, Number(data.dwAuthenticationData), true);
  // 0x14: u32
  if (data?.dwEapTypeId !== undefined) view.setUint32(20, Number(data.dwEapTypeId), true);
  // 0x18: u32
  if (data?.dwServerAuthenticationProtocol !== undefined) view.setUint32(24, Number(data.dwServerAuthenticationProtocol), true);
  // 0x1c: u32
  if (data?.dwServerAuthenticationData !== undefined) view.setUint32(28, Number(data.dwServerAuthenticationData), true);
  // 0x20: u32
  if (data?.dwServerEapTypeId !== undefined) view.setUint32(32, Number(data.dwServerEapTypeId), true);
  // 0x24: i32
  if (data?.fMultilink !== undefined) view.setInt32(36, Number(data.fMultilink), true);
  // 0x28: u32
  if (data?.dwTerminateReason !== undefined) view.setUint32(40, Number(data.dwTerminateReason), true);
  // 0x2c: u32
  if (data?.dwServerTerminateReason !== undefined) view.setUint32(44, Number(data.dwServerTerminateReason), true);
  // 0x30: pointer
  if (data?.szReplyMessage !== undefined) view.setBigUint64(48, data.szReplyMessage === null ? 0n : BigInt(util.toPointer(data.szReplyMessage)), true);
  // 0x38: u32
  if (data?.dwOptions !== undefined) view.setUint32(56, Number(data.dwOptions), true);
  // 0x3c: u32
  if (data?.dwServerOptions !== undefined) view.setUint32(60, Number(data.dwServerOptions), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPPPLCPA (size: 64)
 */
export interface RASPPPLCPA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fBundled: boolean;
  /** u32 */
  dwError: number;
  /** u32 */
  dwAuthenticationProtocol: number;
  /** u32 */
  dwAuthenticationData: number;
  /** u32 */
  dwEapTypeId: number;
  /** u32 */
  dwServerAuthenticationProtocol: number;
  /** u32 */
  dwServerAuthenticationData: number;
  /** u32 */
  dwServerEapTypeId: number;
  /** Windows.Win32.Foundation.BOOL */
  fMultilink: boolean;
  /** u32 */
  dwTerminateReason: number;
  /** u32 */
  dwServerTerminateReason: number;
  /** array */
  szReplyMessage: Deno.PointerValue | null;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwServerOptions: number;
}

export const sizeofRASPPPLCPA = 64;

export function allocRASPPPLCPA(data?: Partial<RASPPPLCPA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPPPLCPA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.fBundled !== undefined) view.setInt32(4, Number(data.fBundled), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: u32
  if (data?.dwAuthenticationProtocol !== undefined) view.setUint32(12, Number(data.dwAuthenticationProtocol), true);
  // 0x10: u32
  if (data?.dwAuthenticationData !== undefined) view.setUint32(16, Number(data.dwAuthenticationData), true);
  // 0x14: u32
  if (data?.dwEapTypeId !== undefined) view.setUint32(20, Number(data.dwEapTypeId), true);
  // 0x18: u32
  if (data?.dwServerAuthenticationProtocol !== undefined) view.setUint32(24, Number(data.dwServerAuthenticationProtocol), true);
  // 0x1c: u32
  if (data?.dwServerAuthenticationData !== undefined) view.setUint32(28, Number(data.dwServerAuthenticationData), true);
  // 0x20: u32
  if (data?.dwServerEapTypeId !== undefined) view.setUint32(32, Number(data.dwServerEapTypeId), true);
  // 0x24: i32
  if (data?.fMultilink !== undefined) view.setInt32(36, Number(data.fMultilink), true);
  // 0x28: u32
  if (data?.dwTerminateReason !== undefined) view.setUint32(40, Number(data.dwTerminateReason), true);
  // 0x2c: u32
  if (data?.dwServerTerminateReason !== undefined) view.setUint32(44, Number(data.dwServerTerminateReason), true);
  // 0x30: pointer
  if (data?.szReplyMessage !== undefined) view.setBigUint64(48, data.szReplyMessage === null ? 0n : BigInt(util.toPointer(data.szReplyMessage)), true);
  // 0x38: u32
  if (data?.dwOptions !== undefined) view.setUint32(56, Number(data.dwOptions), true);
  // 0x3c: u32
  if (data?.dwServerOptions !== undefined) view.setUint32(60, Number(data.dwServerOptions), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPPPCCP (size: 24)
 */
export interface RASPPPCCP {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwError: number;
  /** u32 */
  dwCompressionAlgorithm: number;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwServerCompressionAlgorithm: number;
  /** u32 */
  dwServerOptions: number;
}

export const sizeofRASPPPCCP = 24;

export function allocRASPPPCCP(data?: Partial<RASPPPCCP>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPPPCCP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: u32
  if (data?.dwCompressionAlgorithm !== undefined) view.setUint32(8, Number(data.dwCompressionAlgorithm), true);
  // 0x0c: u32
  if (data?.dwOptions !== undefined) view.setUint32(12, Number(data.dwOptions), true);
  // 0x10: u32
  if (data?.dwServerCompressionAlgorithm !== undefined) view.setUint32(16, Number(data.dwServerCompressionAlgorithm), true);
  // 0x14: u32
  if (data?.dwServerOptions !== undefined) view.setUint32(20, Number(data.dwServerOptions), true);
  return buf;
}

/**
 * _S_un_ports_e__Struct (size: 8)
 */
export interface _S_un_ports_e__Struct {
  /** u16 */
  s_srcport: number;
  /** u16 */
  s_dstport: number;
}

export const sizeof_S_un_ports_e__Struct = 8;

export function alloc_S_un_ports_e__Struct(data?: Partial<_S_un_ports_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_ports_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.s_srcport !== undefined) view.setUint16(0, Number(data.s_srcport), true);
  // 0x02: u16
  if (data?.s_dstport !== undefined) view.setUint16(2, Number(data.s_dstport), true);
  // 0x04: pad4
  return buf;
}

/**
 * _S_un_icmp_e__Struct (size: 8)
 */
export interface _S_un_icmp_e__Struct {
  /** u8 */
  s_type: number;
  /** u8 */
  s_code: number;
  /** u16 */
  filler: number;
}

export const sizeof_S_un_icmp_e__Struct = 8;

export function alloc_S_un_icmp_e__Struct(data?: Partial<_S_un_icmp_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_icmp_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.s_type !== undefined) view.setUint8(0, Number(data.s_type));
  // 0x01: u8
  if (data?.s_code !== undefined) view.setUint8(1, Number(data.s_code));
  // 0x02: u16
  if (data?.filler !== undefined) view.setUint16(2, Number(data.filler), true);
  // 0x04: pad4
  return buf;
}

/**
 * _S_un_e__Union (size: 24)
 */
export interface _S_un_e__Union {
  /** _S_un_ports_e__Struct */
  S_un_ports: Uint8Array | Deno.PointerValue | null;
  /** _S_un_icmp_e__Struct */
  S_un_icmp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  S_Spi: number;
}

export const sizeof_S_un_e__Union = 24;

export function alloc_S_un_e__Union(data?: Partial<_S_un_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un_ports !== undefined) view.setBigUint64(0, data.S_un_ports === null ? 0n : BigInt(util.toPointer(data.S_un_ports)), true);
  // 0x08: pointer
  if (data?.S_un_icmp !== undefined) view.setBigUint64(8, data.S_un_icmp === null ? 0n : BigInt(util.toPointer(data.S_un_icmp)), true);
  // 0x10: u32
  if (data?.S_Spi !== undefined) view.setUint32(16, Number(data.S_Spi), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN_ADDR (size: 8)
 */
export interface IN_ADDR {
  /** _S_un_e__Union */
  S_un: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIN_ADDR = 8;

export function allocIN_ADDR(data?: Partial<IN_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un !== undefined) view.setBigUint64(0, data.S_un === null ? 0n : BigInt(util.toPointer(data.S_un)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPPP_PROJECTION_INFO (size: 120)
 */
export interface RASPPP_PROJECTION_INFO {
  /** u32 */
  dwIPv4NegotiationError: number;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  ipv4Address: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  ipv4ServerAddress: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwIPv4Options: number;
  /** u32 */
  dwIPv4ServerOptions: number;
  /** u32 */
  dwIPv6NegotiationError: number;
  /** array */
  bInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bServerInterfaceIdentifier: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fBundled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fMultilink: boolean;
  /** Windows.Win32.NetworkManagement.Rras.RASPPP_PROJECTION_INFO_SERVER_AUTH_PROTOCOL */
  dwAuthenticationProtocol: RASPPP_PROJECTION_INFO_SERVER_AUTH_PROTOCOL;
  /** Windows.Win32.NetworkManagement.Rras.RASPPP_PROJECTION_INFO_SERVER_AUTH_DATA */
  dwAuthenticationData: RASPPP_PROJECTION_INFO_SERVER_AUTH_DATA;
  /** Windows.Win32.NetworkManagement.Rras.RASPPP_PROJECTION_INFO_SERVER_AUTH_PROTOCOL */
  dwServerAuthenticationProtocol: RASPPP_PROJECTION_INFO_SERVER_AUTH_PROTOCOL;
  /** Windows.Win32.NetworkManagement.Rras.RASPPP_PROJECTION_INFO_SERVER_AUTH_DATA */
  dwServerAuthenticationData: RASPPP_PROJECTION_INFO_SERVER_AUTH_DATA;
  /** u32 */
  dwEapTypeId: number;
  /** u32 */
  dwServerEapTypeId: number;
  /** u32 */
  dwLcpOptions: number;
  /** u32 */
  dwLcpServerOptions: number;
  /** u32 */
  dwCcpError: number;
  /** u32 */
  dwCcpCompressionAlgorithm: number;
  /** u32 */
  dwCcpServerCompressionAlgorithm: number;
  /** u32 */
  dwCcpOptions: number;
  /** u32 */
  dwCcpServerOptions: number;
}

export const sizeofRASPPP_PROJECTION_INFO = 120;

export function allocRASPPP_PROJECTION_INFO(data?: Partial<RASPPP_PROJECTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPPP_PROJECTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIPv4NegotiationError !== undefined) view.setUint32(0, Number(data.dwIPv4NegotiationError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ipv4Address !== undefined) view.setBigUint64(8, data.ipv4Address === null ? 0n : BigInt(util.toPointer(data.ipv4Address)), true);
  // 0x10: pointer
  if (data?.ipv4ServerAddress !== undefined) view.setBigUint64(16, data.ipv4ServerAddress === null ? 0n : BigInt(util.toPointer(data.ipv4ServerAddress)), true);
  // 0x18: u32
  if (data?.dwIPv4Options !== undefined) view.setUint32(24, Number(data.dwIPv4Options), true);
  // 0x1c: u32
  if (data?.dwIPv4ServerOptions !== undefined) view.setUint32(28, Number(data.dwIPv4ServerOptions), true);
  // 0x20: u32
  if (data?.dwIPv6NegotiationError !== undefined) view.setUint32(32, Number(data.dwIPv6NegotiationError), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.bInterfaceIdentifier !== undefined) view.setBigUint64(40, data.bInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bInterfaceIdentifier)), true);
  // 0x30: pointer
  if (data?.bServerInterfaceIdentifier !== undefined) view.setBigUint64(48, data.bServerInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bServerInterfaceIdentifier)), true);
  // 0x38: i32
  if (data?.fBundled !== undefined) view.setInt32(56, Number(data.fBundled), true);
  // 0x3c: i32
  if (data?.fMultilink !== undefined) view.setInt32(60, Number(data.fMultilink), true);
  // 0x40: u32
  if (data?.dwAuthenticationProtocol !== undefined) view.setUint32(64, Number(data.dwAuthenticationProtocol), true);
  // 0x44: u32
  if (data?.dwAuthenticationData !== undefined) view.setUint32(68, Number(data.dwAuthenticationData), true);
  // 0x48: u32
  if (data?.dwServerAuthenticationProtocol !== undefined) view.setUint32(72, Number(data.dwServerAuthenticationProtocol), true);
  // 0x4c: u32
  if (data?.dwServerAuthenticationData !== undefined) view.setUint32(76, Number(data.dwServerAuthenticationData), true);
  // 0x50: u32
  if (data?.dwEapTypeId !== undefined) view.setUint32(80, Number(data.dwEapTypeId), true);
  // 0x54: u32
  if (data?.dwServerEapTypeId !== undefined) view.setUint32(84, Number(data.dwServerEapTypeId), true);
  // 0x58: u32
  if (data?.dwLcpOptions !== undefined) view.setUint32(88, Number(data.dwLcpOptions), true);
  // 0x5c: u32
  if (data?.dwLcpServerOptions !== undefined) view.setUint32(92, Number(data.dwLcpServerOptions), true);
  // 0x60: u32
  if (data?.dwCcpError !== undefined) view.setUint32(96, Number(data.dwCcpError), true);
  // 0x64: u32
  if (data?.dwCcpCompressionAlgorithm !== undefined) view.setUint32(100, Number(data.dwCcpCompressionAlgorithm), true);
  // 0x68: u32
  if (data?.dwCcpServerCompressionAlgorithm !== undefined) view.setUint32(104, Number(data.dwCcpServerCompressionAlgorithm), true);
  // 0x6c: u32
  if (data?.dwCcpOptions !== undefined) view.setUint32(108, Number(data.dwCcpOptions), true);
  // 0x70: u32
  if (data?.dwCcpServerOptions !== undefined) view.setUint32(112, Number(data.dwCcpServerOptions), true);
  // 0x74: pad4
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null | Uint8Array;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN6_ADDR (size: 8)
 */
export interface IN6_ADDR {
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIN6_ADDR = 8;

export function allocIN6_ADDR(data?: Partial<IN6_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN6_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u !== undefined) view.setBigUint64(0, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASIKEV2_PROJECTION_INFO (size: 96)
 */
export interface RASIKEV2_PROJECTION_INFO {
  /** u32 */
  dwIPv4NegotiationError: number;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  ipv4Address: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  ipv4ServerAddress: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwIPv6NegotiationError: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipv6Address: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipv6ServerAddress: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPrefixLength: number;
  /** u32 */
  dwAuthenticationProtocol: number;
  /** u32 */
  dwEapTypeId: number;
  /** Windows.Win32.NetworkManagement.Rras.RASIKEV_PROJECTION_INFO_FLAGS */
  dwFlags: RASIKEV_PROJECTION_INFO_FLAGS;
  /** u32 */
  dwEncryptionMethod: number;
  /** u32 */
  numIPv4ServerAddresses: number;
  /** ptr */
  ipv4ServerAddresses: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  numIPv6ServerAddresses: number;
  /** ptr */
  ipv6ServerAddresses: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRASIKEV2_PROJECTION_INFO = 96;

export function allocRASIKEV2_PROJECTION_INFO(data?: Partial<RASIKEV2_PROJECTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRASIKEV2_PROJECTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIPv4NegotiationError !== undefined) view.setUint32(0, Number(data.dwIPv4NegotiationError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ipv4Address !== undefined) view.setBigUint64(8, data.ipv4Address === null ? 0n : BigInt(util.toPointer(data.ipv4Address)), true);
  // 0x10: pointer
  if (data?.ipv4ServerAddress !== undefined) view.setBigUint64(16, data.ipv4ServerAddress === null ? 0n : BigInt(util.toPointer(data.ipv4ServerAddress)), true);
  // 0x18: u32
  if (data?.dwIPv6NegotiationError !== undefined) view.setUint32(24, Number(data.dwIPv6NegotiationError), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ipv6Address !== undefined) view.setBigUint64(32, data.ipv6Address === null ? 0n : BigInt(util.toPointer(data.ipv6Address)), true);
  // 0x28: pointer
  if (data?.ipv6ServerAddress !== undefined) view.setBigUint64(40, data.ipv6ServerAddress === null ? 0n : BigInt(util.toPointer(data.ipv6ServerAddress)), true);
  // 0x30: u32
  if (data?.dwPrefixLength !== undefined) view.setUint32(48, Number(data.dwPrefixLength), true);
  // 0x34: u32
  if (data?.dwAuthenticationProtocol !== undefined) view.setUint32(52, Number(data.dwAuthenticationProtocol), true);
  // 0x38: u32
  if (data?.dwEapTypeId !== undefined) view.setUint32(56, Number(data.dwEapTypeId), true);
  // 0x3c: u32
  if (data?.dwFlags !== undefined) view.setUint32(60, Number(data.dwFlags), true);
  // 0x40: u32
  if (data?.dwEncryptionMethod !== undefined) view.setUint32(64, Number(data.dwEncryptionMethod), true);
  // 0x44: u32
  if (data?.numIPv4ServerAddresses !== undefined) view.setUint32(68, Number(data.numIPv4ServerAddresses), true);
  // 0x48: pointer
  if (data?.ipv4ServerAddresses !== undefined) view.setBigUint64(72, data.ipv4ServerAddresses === null ? 0n : BigInt(util.toPointer(data.ipv4ServerAddresses)), true);
  // 0x50: u32
  if (data?.numIPv6ServerAddresses !== undefined) view.setUint32(80, Number(data.numIPv6ServerAddresses), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.ipv6ServerAddresses !== undefined) view.setBigUint64(88, data.ipv6ServerAddresses === null ? 0n : BigInt(util.toPointer(data.ipv6ServerAddresses)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_PROJECTION_INFO (size: 16)
 */
export interface RAS_PROJECTION_INFO {
  /** Windows.Win32.NetworkManagement.Rras.RASAPIVERSION */
  version: RASAPIVERSION;
  /** Windows.Win32.NetworkManagement.Rras.RASPROJECTION_INFO_TYPE */
  type: RASPROJECTION_INFO_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRAS_PROJECTION_INFO = 16;

export function allocRAS_PROJECTION_INFO(data?: Partial<RAS_PROJECTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_PROJECTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.version !== undefined) view.setInt32(0, Number(data.version), true);
  // 0x04: i32
  if (data?.type !== undefined) view.setInt32(4, Number(data.type), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASDEVINFOW (size: 24)
 */
export interface RASDEVINFOW {
  /** u32 */
  dwSize: number;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
}

export const sizeofRASDEVINFOW = 24;

export function allocRASDEVINFOW(data?: Partial<RASDEVINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASDEVINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(8, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x10: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(16, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASDEVINFOA (size: 24)
 */
export interface RASDEVINFOA {
  /** u32 */
  dwSize: number;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
}

export const sizeofRASDEVINFOA = 24;

export function allocRASDEVINFOA(data?: Partial<RASDEVINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASDEVINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(8, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x10: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(16, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASCTRYINFO (size: 24)
 */
export interface RASCTRYINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCountryID: number;
  /** u32 */
  dwNextCountryID: number;
  /** u32 */
  dwCountryCode: number;
  /** u32 */
  dwCountryNameOffset: number;
}

export const sizeofRASCTRYINFO = 24;

export function allocRASCTRYINFO(data?: Partial<RASCTRYINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRASCTRYINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCountryID !== undefined) view.setUint32(4, Number(data.dwCountryID), true);
  // 0x08: u32
  if (data?.dwNextCountryID !== undefined) view.setUint32(8, Number(data.dwNextCountryID), true);
  // 0x0c: u32
  if (data?.dwCountryCode !== undefined) view.setUint32(12, Number(data.dwCountryCode), true);
  // 0x10: u32
  if (data?.dwCountryNameOffset !== undefined) view.setUint32(16, Number(data.dwCountryNameOffset), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASENTRYA (size: 368)
 */
export interface RASENTRYA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwfOptions: number;
  /** u32 */
  dwCountryID: number;
  /** u32 */
  dwCountryCode: number;
  /** array */
  szAreaCode: Deno.PointerValue | null;
  /** array */
  szLocalPhoneNumber: Deno.PointerValue | null;
  /** u32 */
  dwAlternateOffset: number;
  /** Windows.Win32.NetworkManagement.Rras.RASIPADDR */
  ipaddr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASIPADDR */
  ipaddrDns: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASIPADDR */
  ipaddrDnsAlt: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASIPADDR */
  ipaddrWins: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASIPADDR */
  ipaddrWinsAlt: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFrameSize: number;
  /** u32 */
  dwfNetProtocols: number;
  /** u32 */
  dwFramingProtocol: number;
  /** array */
  szScript: Deno.PointerValue | null;
  /** array */
  szAutodialDll: Deno.PointerValue | null;
  /** array */
  szAutodialFunc: Deno.PointerValue | null;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szX25PadType: Deno.PointerValue | null;
  /** array */
  szX25Address: Deno.PointerValue | null;
  /** array */
  szX25Facilities: Deno.PointerValue | null;
  /** array */
  szX25UserData: Deno.PointerValue | null;
  /** u32 */
  dwChannels: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwSubEntries: number;
  /** Windows.Win32.NetworkManagement.Rras.RASENTRY_DIAL_MODE */
  dwDialMode: RASENTRY_DIAL_MODE;
  /** u32 */
  dwDialExtraPercent: number;
  /** u32 */
  dwDialExtraSampleSeconds: number;
  /** u32 */
  dwHangUpExtraPercent: number;
  /** u32 */
  dwHangUpExtraSampleSeconds: number;
  /** u32 */
  dwIdleDisconnectSeconds: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwEncryptionType: number;
  /** u32 */
  dwCustomAuthKey: number;
  /** System.Guid */
  guidId: Uint8Array | Deno.PointerValue | null;
  /** array */
  szCustomDialDll: Deno.PointerValue | null;
  /** u32 */
  dwVpnStrategy: number;
  /** u32 */
  dwfOptions2: number;
  /** u32 */
  dwfOptions3: number;
  /** array */
  szDnsSuffix: Deno.PointerValue | null;
  /** u32 */
  dwTcpWindowSize: number;
  /** array */
  szPrerequisitePbk: Deno.PointerValue | null;
  /** array */
  szPrerequisiteEntry: Deno.PointerValue | null;
  /** u32 */
  dwRedialCount: number;
  /** u32 */
  dwRedialPause: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipv6addrDns: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipv6addrDnsAlt: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwIPv4InterfaceMetric: number;
  /** u32 */
  dwIPv6InterfaceMetric: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipv6addr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwIPv6PrefixLength: number;
  /** u32 */
  dwNetworkOutageTime: number;
  /** array */
  szIDi: Deno.PointerValue | null;
  /** array */
  szIDr: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fIsImsConfig: boolean;
  /** Windows.Win32.NetworkManagement.Rras.IKEV2_ID_PAYLOAD_TYPE */
  IdiType: IKEV2_ID_PAYLOAD_TYPE;
  /** Windows.Win32.NetworkManagement.Rras.IKEV2_ID_PAYLOAD_TYPE */
  IdrType: IKEV2_ID_PAYLOAD_TYPE;
  /** Windows.Win32.Foundation.BOOL */
  fDisableIKEv2Fragmentation: boolean;
}

export const sizeofRASENTRYA = 368;

export function allocRASENTRYA(data?: Partial<RASENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwfOptions !== undefined) view.setUint32(4, Number(data.dwfOptions), true);
  // 0x08: u32
  if (data?.dwCountryID !== undefined) view.setUint32(8, Number(data.dwCountryID), true);
  // 0x0c: u32
  if (data?.dwCountryCode !== undefined) view.setUint32(12, Number(data.dwCountryCode), true);
  // 0x10: pointer
  if (data?.szAreaCode !== undefined) view.setBigUint64(16, data.szAreaCode === null ? 0n : BigInt(util.toPointer(data.szAreaCode)), true);
  // 0x18: pointer
  if (data?.szLocalPhoneNumber !== undefined) view.setBigUint64(24, data.szLocalPhoneNumber === null ? 0n : BigInt(util.toPointer(data.szLocalPhoneNumber)), true);
  // 0x20: u32
  if (data?.dwAlternateOffset !== undefined) view.setUint32(32, Number(data.dwAlternateOffset), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ipaddr !== undefined) view.setBigUint64(40, data.ipaddr === null ? 0n : BigInt(util.toPointer(data.ipaddr)), true);
  // 0x30: pointer
  if (data?.ipaddrDns !== undefined) view.setBigUint64(48, data.ipaddrDns === null ? 0n : BigInt(util.toPointer(data.ipaddrDns)), true);
  // 0x38: pointer
  if (data?.ipaddrDnsAlt !== undefined) view.setBigUint64(56, data.ipaddrDnsAlt === null ? 0n : BigInt(util.toPointer(data.ipaddrDnsAlt)), true);
  // 0x40: pointer
  if (data?.ipaddrWins !== undefined) view.setBigUint64(64, data.ipaddrWins === null ? 0n : BigInt(util.toPointer(data.ipaddrWins)), true);
  // 0x48: pointer
  if (data?.ipaddrWinsAlt !== undefined) view.setBigUint64(72, data.ipaddrWinsAlt === null ? 0n : BigInt(util.toPointer(data.ipaddrWinsAlt)), true);
  // 0x50: u32
  if (data?.dwFrameSize !== undefined) view.setUint32(80, Number(data.dwFrameSize), true);
  // 0x54: u32
  if (data?.dwfNetProtocols !== undefined) view.setUint32(84, Number(data.dwfNetProtocols), true);
  // 0x58: u32
  if (data?.dwFramingProtocol !== undefined) view.setUint32(88, Number(data.dwFramingProtocol), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szScript !== undefined) view.setBigUint64(96, data.szScript === null ? 0n : BigInt(util.toPointer(data.szScript)), true);
  // 0x68: pointer
  if (data?.szAutodialDll !== undefined) view.setBigUint64(104, data.szAutodialDll === null ? 0n : BigInt(util.toPointer(data.szAutodialDll)), true);
  // 0x70: pointer
  if (data?.szAutodialFunc !== undefined) view.setBigUint64(112, data.szAutodialFunc === null ? 0n : BigInt(util.toPointer(data.szAutodialFunc)), true);
  // 0x78: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(120, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x80: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(128, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x88: pointer
  if (data?.szX25PadType !== undefined) view.setBigUint64(136, data.szX25PadType === null ? 0n : BigInt(util.toPointer(data.szX25PadType)), true);
  // 0x90: pointer
  if (data?.szX25Address !== undefined) view.setBigUint64(144, data.szX25Address === null ? 0n : BigInt(util.toPointer(data.szX25Address)), true);
  // 0x98: pointer
  if (data?.szX25Facilities !== undefined) view.setBigUint64(152, data.szX25Facilities === null ? 0n : BigInt(util.toPointer(data.szX25Facilities)), true);
  // 0xa0: pointer
  if (data?.szX25UserData !== undefined) view.setBigUint64(160, data.szX25UserData === null ? 0n : BigInt(util.toPointer(data.szX25UserData)), true);
  // 0xa8: u32
  if (data?.dwChannels !== undefined) view.setUint32(168, Number(data.dwChannels), true);
  // 0xac: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(172, Number(data.dwReserved1), true);
  // 0xb0: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(176, Number(data.dwReserved2), true);
  // 0xb4: u32
  if (data?.dwSubEntries !== undefined) view.setUint32(180, Number(data.dwSubEntries), true);
  // 0xb8: u32
  if (data?.dwDialMode !== undefined) view.setUint32(184, Number(data.dwDialMode), true);
  // 0xbc: u32
  if (data?.dwDialExtraPercent !== undefined) view.setUint32(188, Number(data.dwDialExtraPercent), true);
  // 0xc0: u32
  if (data?.dwDialExtraSampleSeconds !== undefined) view.setUint32(192, Number(data.dwDialExtraSampleSeconds), true);
  // 0xc4: u32
  if (data?.dwHangUpExtraPercent !== undefined) view.setUint32(196, Number(data.dwHangUpExtraPercent), true);
  // 0xc8: u32
  if (data?.dwHangUpExtraSampleSeconds !== undefined) view.setUint32(200, Number(data.dwHangUpExtraSampleSeconds), true);
  // 0xcc: u32
  if (data?.dwIdleDisconnectSeconds !== undefined) view.setUint32(204, Number(data.dwIdleDisconnectSeconds), true);
  // 0xd0: u32
  if (data?.dwType !== undefined) view.setUint32(208, Number(data.dwType), true);
  // 0xd4: u32
  if (data?.dwEncryptionType !== undefined) view.setUint32(212, Number(data.dwEncryptionType), true);
  // 0xd8: u32
  if (data?.dwCustomAuthKey !== undefined) view.setUint32(216, Number(data.dwCustomAuthKey), true);
  // 0xdc: pad4
  // 0xe0: pointer
  if (data?.guidId !== undefined) view.setBigUint64(224, data.guidId === null ? 0n : BigInt(util.toPointer(data.guidId)), true);
  // 0xe8: pointer
  if (data?.szCustomDialDll !== undefined) view.setBigUint64(232, data.szCustomDialDll === null ? 0n : BigInt(util.toPointer(data.szCustomDialDll)), true);
  // 0xf0: u32
  if (data?.dwVpnStrategy !== undefined) view.setUint32(240, Number(data.dwVpnStrategy), true);
  // 0xf4: u32
  if (data?.dwfOptions2 !== undefined) view.setUint32(244, Number(data.dwfOptions2), true);
  // 0xf8: u32
  if (data?.dwfOptions3 !== undefined) view.setUint32(248, Number(data.dwfOptions3), true);
  // 0xfc: pad4
  // 0x100: pointer
  if (data?.szDnsSuffix !== undefined) view.setBigUint64(256, data.szDnsSuffix === null ? 0n : BigInt(util.toPointer(data.szDnsSuffix)), true);
  // 0x108: u32
  if (data?.dwTcpWindowSize !== undefined) view.setUint32(264, Number(data.dwTcpWindowSize), true);
  // 0x10c: pad4
  // 0x110: pointer
  if (data?.szPrerequisitePbk !== undefined) view.setBigUint64(272, data.szPrerequisitePbk === null ? 0n : BigInt(util.toPointer(data.szPrerequisitePbk)), true);
  // 0x118: pointer
  if (data?.szPrerequisiteEntry !== undefined) view.setBigUint64(280, data.szPrerequisiteEntry === null ? 0n : BigInt(util.toPointer(data.szPrerequisiteEntry)), true);
  // 0x120: u32
  if (data?.dwRedialCount !== undefined) view.setUint32(288, Number(data.dwRedialCount), true);
  // 0x124: u32
  if (data?.dwRedialPause !== undefined) view.setUint32(292, Number(data.dwRedialPause), true);
  // 0x128: pointer
  if (data?.ipv6addrDns !== undefined) view.setBigUint64(296, data.ipv6addrDns === null ? 0n : BigInt(util.toPointer(data.ipv6addrDns)), true);
  // 0x130: pointer
  if (data?.ipv6addrDnsAlt !== undefined) view.setBigUint64(304, data.ipv6addrDnsAlt === null ? 0n : BigInt(util.toPointer(data.ipv6addrDnsAlt)), true);
  // 0x138: u32
  if (data?.dwIPv4InterfaceMetric !== undefined) view.setUint32(312, Number(data.dwIPv4InterfaceMetric), true);
  // 0x13c: u32
  if (data?.dwIPv6InterfaceMetric !== undefined) view.setUint32(316, Number(data.dwIPv6InterfaceMetric), true);
  // 0x140: pointer
  if (data?.ipv6addr !== undefined) view.setBigUint64(320, data.ipv6addr === null ? 0n : BigInt(util.toPointer(data.ipv6addr)), true);
  // 0x148: u32
  if (data?.dwIPv6PrefixLength !== undefined) view.setUint32(328, Number(data.dwIPv6PrefixLength), true);
  // 0x14c: u32
  if (data?.dwNetworkOutageTime !== undefined) view.setUint32(332, Number(data.dwNetworkOutageTime), true);
  // 0x150: pointer
  if (data?.szIDi !== undefined) view.setBigUint64(336, data.szIDi === null ? 0n : BigInt(util.toPointer(data.szIDi)), true);
  // 0x158: pointer
  if (data?.szIDr !== undefined) view.setBigUint64(344, data.szIDr === null ? 0n : BigInt(util.toPointer(data.szIDr)), true);
  // 0x160: i32
  if (data?.fIsImsConfig !== undefined) view.setInt32(352, Number(data.fIsImsConfig), true);
  // 0x164: i32
  if (data?.IdiType !== undefined) view.setInt32(356, Number(data.IdiType), true);
  // 0x168: i32
  if (data?.IdrType !== undefined) view.setInt32(360, Number(data.IdrType), true);
  // 0x16c: i32
  if (data?.fDisableIKEv2Fragmentation !== undefined) view.setInt32(364, Number(data.fDisableIKEv2Fragmentation), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASENTRYW (size: 368)
 */
export interface RASENTRYW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwfOptions: number;
  /** u32 */
  dwCountryID: number;
  /** u32 */
  dwCountryCode: number;
  /** array */
  szAreaCode: Deno.PointerValue | null;
  /** array */
  szLocalPhoneNumber: Deno.PointerValue | null;
  /** u32 */
  dwAlternateOffset: number;
  /** Windows.Win32.NetworkManagement.Rras.RASIPADDR */
  ipaddr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASIPADDR */
  ipaddrDns: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASIPADDR */
  ipaddrDnsAlt: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASIPADDR */
  ipaddrWins: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASIPADDR */
  ipaddrWinsAlt: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFrameSize: number;
  /** u32 */
  dwfNetProtocols: number;
  /** u32 */
  dwFramingProtocol: number;
  /** array */
  szScript: Deno.PointerValue | null;
  /** array */
  szAutodialDll: Deno.PointerValue | null;
  /** array */
  szAutodialFunc: Deno.PointerValue | null;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szX25PadType: Deno.PointerValue | null;
  /** array */
  szX25Address: Deno.PointerValue | null;
  /** array */
  szX25Facilities: Deno.PointerValue | null;
  /** array */
  szX25UserData: Deno.PointerValue | null;
  /** u32 */
  dwChannels: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwSubEntries: number;
  /** Windows.Win32.NetworkManagement.Rras.RASENTRY_DIAL_MODE */
  dwDialMode: RASENTRY_DIAL_MODE;
  /** u32 */
  dwDialExtraPercent: number;
  /** u32 */
  dwDialExtraSampleSeconds: number;
  /** u32 */
  dwHangUpExtraPercent: number;
  /** u32 */
  dwHangUpExtraSampleSeconds: number;
  /** u32 */
  dwIdleDisconnectSeconds: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwEncryptionType: number;
  /** u32 */
  dwCustomAuthKey: number;
  /** System.Guid */
  guidId: Uint8Array | Deno.PointerValue | null;
  /** array */
  szCustomDialDll: Deno.PointerValue | null;
  /** u32 */
  dwVpnStrategy: number;
  /** u32 */
  dwfOptions2: number;
  /** u32 */
  dwfOptions3: number;
  /** array */
  szDnsSuffix: Deno.PointerValue | null;
  /** u32 */
  dwTcpWindowSize: number;
  /** array */
  szPrerequisitePbk: Deno.PointerValue | null;
  /** array */
  szPrerequisiteEntry: Deno.PointerValue | null;
  /** u32 */
  dwRedialCount: number;
  /** u32 */
  dwRedialPause: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipv6addrDns: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipv6addrDnsAlt: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwIPv4InterfaceMetric: number;
  /** u32 */
  dwIPv6InterfaceMetric: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipv6addr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwIPv6PrefixLength: number;
  /** u32 */
  dwNetworkOutageTime: number;
  /** array */
  szIDi: Deno.PointerValue | null;
  /** array */
  szIDr: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fIsImsConfig: boolean;
  /** Windows.Win32.NetworkManagement.Rras.IKEV2_ID_PAYLOAD_TYPE */
  IdiType: IKEV2_ID_PAYLOAD_TYPE;
  /** Windows.Win32.NetworkManagement.Rras.IKEV2_ID_PAYLOAD_TYPE */
  IdrType: IKEV2_ID_PAYLOAD_TYPE;
  /** Windows.Win32.Foundation.BOOL */
  fDisableIKEv2Fragmentation: boolean;
}

export const sizeofRASENTRYW = 368;

export function allocRASENTRYW(data?: Partial<RASENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwfOptions !== undefined) view.setUint32(4, Number(data.dwfOptions), true);
  // 0x08: u32
  if (data?.dwCountryID !== undefined) view.setUint32(8, Number(data.dwCountryID), true);
  // 0x0c: u32
  if (data?.dwCountryCode !== undefined) view.setUint32(12, Number(data.dwCountryCode), true);
  // 0x10: pointer
  if (data?.szAreaCode !== undefined) view.setBigUint64(16, data.szAreaCode === null ? 0n : BigInt(util.toPointer(data.szAreaCode)), true);
  // 0x18: pointer
  if (data?.szLocalPhoneNumber !== undefined) view.setBigUint64(24, data.szLocalPhoneNumber === null ? 0n : BigInt(util.toPointer(data.szLocalPhoneNumber)), true);
  // 0x20: u32
  if (data?.dwAlternateOffset !== undefined) view.setUint32(32, Number(data.dwAlternateOffset), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ipaddr !== undefined) view.setBigUint64(40, data.ipaddr === null ? 0n : BigInt(util.toPointer(data.ipaddr)), true);
  // 0x30: pointer
  if (data?.ipaddrDns !== undefined) view.setBigUint64(48, data.ipaddrDns === null ? 0n : BigInt(util.toPointer(data.ipaddrDns)), true);
  // 0x38: pointer
  if (data?.ipaddrDnsAlt !== undefined) view.setBigUint64(56, data.ipaddrDnsAlt === null ? 0n : BigInt(util.toPointer(data.ipaddrDnsAlt)), true);
  // 0x40: pointer
  if (data?.ipaddrWins !== undefined) view.setBigUint64(64, data.ipaddrWins === null ? 0n : BigInt(util.toPointer(data.ipaddrWins)), true);
  // 0x48: pointer
  if (data?.ipaddrWinsAlt !== undefined) view.setBigUint64(72, data.ipaddrWinsAlt === null ? 0n : BigInt(util.toPointer(data.ipaddrWinsAlt)), true);
  // 0x50: u32
  if (data?.dwFrameSize !== undefined) view.setUint32(80, Number(data.dwFrameSize), true);
  // 0x54: u32
  if (data?.dwfNetProtocols !== undefined) view.setUint32(84, Number(data.dwfNetProtocols), true);
  // 0x58: u32
  if (data?.dwFramingProtocol !== undefined) view.setUint32(88, Number(data.dwFramingProtocol), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szScript !== undefined) view.setBigUint64(96, data.szScript === null ? 0n : BigInt(util.toPointer(data.szScript)), true);
  // 0x68: pointer
  if (data?.szAutodialDll !== undefined) view.setBigUint64(104, data.szAutodialDll === null ? 0n : BigInt(util.toPointer(data.szAutodialDll)), true);
  // 0x70: pointer
  if (data?.szAutodialFunc !== undefined) view.setBigUint64(112, data.szAutodialFunc === null ? 0n : BigInt(util.toPointer(data.szAutodialFunc)), true);
  // 0x78: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(120, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x80: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(128, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x88: pointer
  if (data?.szX25PadType !== undefined) view.setBigUint64(136, data.szX25PadType === null ? 0n : BigInt(util.toPointer(data.szX25PadType)), true);
  // 0x90: pointer
  if (data?.szX25Address !== undefined) view.setBigUint64(144, data.szX25Address === null ? 0n : BigInt(util.toPointer(data.szX25Address)), true);
  // 0x98: pointer
  if (data?.szX25Facilities !== undefined) view.setBigUint64(152, data.szX25Facilities === null ? 0n : BigInt(util.toPointer(data.szX25Facilities)), true);
  // 0xa0: pointer
  if (data?.szX25UserData !== undefined) view.setBigUint64(160, data.szX25UserData === null ? 0n : BigInt(util.toPointer(data.szX25UserData)), true);
  // 0xa8: u32
  if (data?.dwChannels !== undefined) view.setUint32(168, Number(data.dwChannels), true);
  // 0xac: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(172, Number(data.dwReserved1), true);
  // 0xb0: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(176, Number(data.dwReserved2), true);
  // 0xb4: u32
  if (data?.dwSubEntries !== undefined) view.setUint32(180, Number(data.dwSubEntries), true);
  // 0xb8: u32
  if (data?.dwDialMode !== undefined) view.setUint32(184, Number(data.dwDialMode), true);
  // 0xbc: u32
  if (data?.dwDialExtraPercent !== undefined) view.setUint32(188, Number(data.dwDialExtraPercent), true);
  // 0xc0: u32
  if (data?.dwDialExtraSampleSeconds !== undefined) view.setUint32(192, Number(data.dwDialExtraSampleSeconds), true);
  // 0xc4: u32
  if (data?.dwHangUpExtraPercent !== undefined) view.setUint32(196, Number(data.dwHangUpExtraPercent), true);
  // 0xc8: u32
  if (data?.dwHangUpExtraSampleSeconds !== undefined) view.setUint32(200, Number(data.dwHangUpExtraSampleSeconds), true);
  // 0xcc: u32
  if (data?.dwIdleDisconnectSeconds !== undefined) view.setUint32(204, Number(data.dwIdleDisconnectSeconds), true);
  // 0xd0: u32
  if (data?.dwType !== undefined) view.setUint32(208, Number(data.dwType), true);
  // 0xd4: u32
  if (data?.dwEncryptionType !== undefined) view.setUint32(212, Number(data.dwEncryptionType), true);
  // 0xd8: u32
  if (data?.dwCustomAuthKey !== undefined) view.setUint32(216, Number(data.dwCustomAuthKey), true);
  // 0xdc: pad4
  // 0xe0: pointer
  if (data?.guidId !== undefined) view.setBigUint64(224, data.guidId === null ? 0n : BigInt(util.toPointer(data.guidId)), true);
  // 0xe8: pointer
  if (data?.szCustomDialDll !== undefined) view.setBigUint64(232, data.szCustomDialDll === null ? 0n : BigInt(util.toPointer(data.szCustomDialDll)), true);
  // 0xf0: u32
  if (data?.dwVpnStrategy !== undefined) view.setUint32(240, Number(data.dwVpnStrategy), true);
  // 0xf4: u32
  if (data?.dwfOptions2 !== undefined) view.setUint32(244, Number(data.dwfOptions2), true);
  // 0xf8: u32
  if (data?.dwfOptions3 !== undefined) view.setUint32(248, Number(data.dwfOptions3), true);
  // 0xfc: pad4
  // 0x100: pointer
  if (data?.szDnsSuffix !== undefined) view.setBigUint64(256, data.szDnsSuffix === null ? 0n : BigInt(util.toPointer(data.szDnsSuffix)), true);
  // 0x108: u32
  if (data?.dwTcpWindowSize !== undefined) view.setUint32(264, Number(data.dwTcpWindowSize), true);
  // 0x10c: pad4
  // 0x110: pointer
  if (data?.szPrerequisitePbk !== undefined) view.setBigUint64(272, data.szPrerequisitePbk === null ? 0n : BigInt(util.toPointer(data.szPrerequisitePbk)), true);
  // 0x118: pointer
  if (data?.szPrerequisiteEntry !== undefined) view.setBigUint64(280, data.szPrerequisiteEntry === null ? 0n : BigInt(util.toPointer(data.szPrerequisiteEntry)), true);
  // 0x120: u32
  if (data?.dwRedialCount !== undefined) view.setUint32(288, Number(data.dwRedialCount), true);
  // 0x124: u32
  if (data?.dwRedialPause !== undefined) view.setUint32(292, Number(data.dwRedialPause), true);
  // 0x128: pointer
  if (data?.ipv6addrDns !== undefined) view.setBigUint64(296, data.ipv6addrDns === null ? 0n : BigInt(util.toPointer(data.ipv6addrDns)), true);
  // 0x130: pointer
  if (data?.ipv6addrDnsAlt !== undefined) view.setBigUint64(304, data.ipv6addrDnsAlt === null ? 0n : BigInt(util.toPointer(data.ipv6addrDnsAlt)), true);
  // 0x138: u32
  if (data?.dwIPv4InterfaceMetric !== undefined) view.setUint32(312, Number(data.dwIPv4InterfaceMetric), true);
  // 0x13c: u32
  if (data?.dwIPv6InterfaceMetric !== undefined) view.setUint32(316, Number(data.dwIPv6InterfaceMetric), true);
  // 0x140: pointer
  if (data?.ipv6addr !== undefined) view.setBigUint64(320, data.ipv6addr === null ? 0n : BigInt(util.toPointer(data.ipv6addr)), true);
  // 0x148: u32
  if (data?.dwIPv6PrefixLength !== undefined) view.setUint32(328, Number(data.dwIPv6PrefixLength), true);
  // 0x14c: u32
  if (data?.dwNetworkOutageTime !== undefined) view.setUint32(332, Number(data.dwNetworkOutageTime), true);
  // 0x150: pointer
  if (data?.szIDi !== undefined) view.setBigUint64(336, data.szIDi === null ? 0n : BigInt(util.toPointer(data.szIDi)), true);
  // 0x158: pointer
  if (data?.szIDr !== undefined) view.setBigUint64(344, data.szIDr === null ? 0n : BigInt(util.toPointer(data.szIDr)), true);
  // 0x160: i32
  if (data?.fIsImsConfig !== undefined) view.setInt32(352, Number(data.fIsImsConfig), true);
  // 0x164: i32
  if (data?.IdiType !== undefined) view.setInt32(356, Number(data.IdiType), true);
  // 0x168: i32
  if (data?.IdrType !== undefined) view.setInt32(360, Number(data.IdrType), true);
  // 0x16c: i32
  if (data?.fDisableIKEv2Fragmentation !== undefined) view.setInt32(364, Number(data.fDisableIKEv2Fragmentation), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASADPARAMS (size: 32)
 */
export interface RASADPARAMS {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** i32 */
  xDlg: number;
  /** i32 */
  yDlg: number;
}

export const sizeofRASADPARAMS = 32;

export function allocRASADPARAMS(data?: Partial<RASADPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofRASADPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: i32
  if (data?.xDlg !== undefined) view.setInt32(20, Number(data.xDlg), true);
  // 0x18: i32
  if (data?.yDlg !== undefined) view.setInt32(24, Number(data.yDlg), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASSUBENTRYA (size: 40)
 */
export interface RASSUBENTRYA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwfFlags: number;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szLocalPhoneNumber: Deno.PointerValue | null;
  /** u32 */
  dwAlternateOffset: number;
}

export const sizeofRASSUBENTRYA = 40;

export function allocRASSUBENTRYA(data?: Partial<RASSUBENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASSUBENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwfFlags !== undefined) view.setUint32(4, Number(data.dwfFlags), true);
  // 0x08: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(8, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x10: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(16, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x18: pointer
  if (data?.szLocalPhoneNumber !== undefined) view.setBigUint64(24, data.szLocalPhoneNumber === null ? 0n : BigInt(util.toPointer(data.szLocalPhoneNumber)), true);
  // 0x20: u32
  if (data?.dwAlternateOffset !== undefined) view.setUint32(32, Number(data.dwAlternateOffset), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASSUBENTRYW (size: 40)
 */
export interface RASSUBENTRYW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwfFlags: number;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szLocalPhoneNumber: Deno.PointerValue | null;
  /** u32 */
  dwAlternateOffset: number;
}

export const sizeofRASSUBENTRYW = 40;

export function allocRASSUBENTRYW(data?: Partial<RASSUBENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASSUBENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwfFlags !== undefined) view.setUint32(4, Number(data.dwfFlags), true);
  // 0x08: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(8, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x10: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(16, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x18: pointer
  if (data?.szLocalPhoneNumber !== undefined) view.setBigUint64(24, data.szLocalPhoneNumber === null ? 0n : BigInt(util.toPointer(data.szLocalPhoneNumber)), true);
  // 0x20: u32
  if (data?.dwAlternateOffset !== undefined) view.setUint32(32, Number(data.dwAlternateOffset), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASCREDENTIALSA (size: 32)
 */
export interface RASCREDENTIALSA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwMask: number;
  /** array */
  szUserName: Deno.PointerValue | null;
  /** array */
  szPassword: Deno.PointerValue | null;
  /** array */
  szDomain: Deno.PointerValue | null;
}

export const sizeofRASCREDENTIALSA = 32;

export function allocRASCREDENTIALSA(data?: Partial<RASCREDENTIALSA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASCREDENTIALSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: pointer
  if (data?.szUserName !== undefined) view.setBigUint64(8, data.szUserName === null ? 0n : BigInt(util.toPointer(data.szUserName)), true);
  // 0x10: pointer
  if (data?.szPassword !== undefined) view.setBigUint64(16, data.szPassword === null ? 0n : BigInt(util.toPointer(data.szPassword)), true);
  // 0x18: pointer
  if (data?.szDomain !== undefined) view.setBigUint64(24, data.szDomain === null ? 0n : BigInt(util.toPointer(data.szDomain)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASCREDENTIALSW (size: 32)
 */
export interface RASCREDENTIALSW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwMask: number;
  /** array */
  szUserName: Deno.PointerValue | null;
  /** array */
  szPassword: Deno.PointerValue | null;
  /** array */
  szDomain: Deno.PointerValue | null;
}

export const sizeofRASCREDENTIALSW = 32;

export function allocRASCREDENTIALSW(data?: Partial<RASCREDENTIALSW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASCREDENTIALSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: pointer
  if (data?.szUserName !== undefined) view.setBigUint64(8, data.szUserName === null ? 0n : BigInt(util.toPointer(data.szUserName)), true);
  // 0x10: pointer
  if (data?.szPassword !== undefined) view.setBigUint64(16, data.szPassword === null ? 0n : BigInt(util.toPointer(data.szPassword)), true);
  // 0x18: pointer
  if (data?.szDomain !== undefined) view.setBigUint64(24, data.szDomain === null ? 0n : BigInt(util.toPointer(data.szDomain)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASAUTODIALENTRYA (size: 24)
 */
export interface RASAUTODIALENTRYA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwDialingLocation: number;
  /** array */
  szEntry: Deno.PointerValue | null;
}

export const sizeofRASAUTODIALENTRYA = 24;

export function allocRASAUTODIALENTRYA(data?: Partial<RASAUTODIALENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASAUTODIALENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwDialingLocation !== undefined) view.setUint32(8, Number(data.dwDialingLocation), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szEntry !== undefined) view.setBigUint64(16, data.szEntry === null ? 0n : BigInt(util.toPointer(data.szEntry)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASAUTODIALENTRYW (size: 24)
 */
export interface RASAUTODIALENTRYW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwDialingLocation: number;
  /** array */
  szEntry: Deno.PointerValue | null;
}

export const sizeofRASAUTODIALENTRYW = 24;

export function allocRASAUTODIALENTRYW(data?: Partial<RASAUTODIALENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASAUTODIALENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwDialingLocation !== undefined) view.setUint32(8, Number(data.dwDialingLocation), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szEntry !== undefined) view.setBigUint64(16, data.szEntry === null ? 0n : BigInt(util.toPointer(data.szEntry)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASEAPUSERIDENTITYA (size: 24)
 */
export interface RASEAPUSERIDENTITYA {
  /** array */
  szUserName: Deno.PointerValue | null;
  /** u32 */
  dwSizeofEapInfo: number;
  /** array */
  pbEapInfo: Deno.PointerValue | null;
}

export const sizeofRASEAPUSERIDENTITYA = 24;

export function allocRASEAPUSERIDENTITYA(data?: Partial<RASEAPUSERIDENTITYA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASEAPUSERIDENTITYA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szUserName !== undefined) view.setBigUint64(0, data.szUserName === null ? 0n : BigInt(util.toPointer(data.szUserName)), true);
  // 0x08: u32
  if (data?.dwSizeofEapInfo !== undefined) view.setUint32(8, Number(data.dwSizeofEapInfo), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pbEapInfo !== undefined) view.setBigUint64(16, data.pbEapInfo === null ? 0n : BigInt(util.toPointer(data.pbEapInfo)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASEAPUSERIDENTITYW (size: 24)
 */
export interface RASEAPUSERIDENTITYW {
  /** array */
  szUserName: Deno.PointerValue | null;
  /** u32 */
  dwSizeofEapInfo: number;
  /** array */
  pbEapInfo: Deno.PointerValue | null;
}

export const sizeofRASEAPUSERIDENTITYW = 24;

export function allocRASEAPUSERIDENTITYW(data?: Partial<RASEAPUSERIDENTITYW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASEAPUSERIDENTITYW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szUserName !== undefined) view.setBigUint64(0, data.szUserName === null ? 0n : BigInt(util.toPointer(data.szUserName)), true);
  // 0x08: u32
  if (data?.dwSizeofEapInfo !== undefined) view.setUint32(8, Number(data.dwSizeofEapInfo), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pbEapInfo !== undefined) view.setBigUint64(16, data.pbEapInfo === null ? 0n : BigInt(util.toPointer(data.pbEapInfo)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASCOMMSETTINGS (size: 8)
 */
export interface RASCOMMSETTINGS {
  /** u32 */
  dwSize: number;
  /** u8 */
  bParity: number;
  /** u8 */
  bStop: number;
  /** u8 */
  bByteSize: number;
  /** u8 */
  bAlign: number;
}

export const sizeofRASCOMMSETTINGS = 8;

export function allocRASCOMMSETTINGS(data?: Partial<RASCOMMSETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofRASCOMMSETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u8
  if (data?.bParity !== undefined) view.setUint8(4, Number(data.bParity));
  // 0x05: u8
  if (data?.bStop !== undefined) view.setUint8(5, Number(data.bStop));
  // 0x06: u8
  if (data?.bByteSize !== undefined) view.setUint8(6, Number(data.bByteSize));
  // 0x07: u8
  if (data?.bAlign !== undefined) view.setUint8(7, Number(data.bAlign));
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASCUSTOMSCRIPTEXTENSIONS (size: 16)
 */
export interface RASCUSTOMSCRIPTEXTENSIONS {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.NetworkManagement.Rras.PFNRASSETCOMMSETTINGS */
  pfnRasSetCommSettings: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRASCUSTOMSCRIPTEXTENSIONS = 16;

export function allocRASCUSTOMSCRIPTEXTENSIONS(data?: Partial<RASCUSTOMSCRIPTEXTENSIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofRASCUSTOMSCRIPTEXTENSIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnRasSetCommSettings !== undefined) view.setBigUint64(8, data.pfnRasSetCommSettings === null ? 0n : BigInt(util.toPointer(data.pfnRasSetCommSettings)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_STATS (size: 64)
 */
export interface RAS_STATS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwBytesXmited: number;
  /** u32 */
  dwBytesRcved: number;
  /** u32 */
  dwFramesXmited: number;
  /** u32 */
  dwFramesRcved: number;
  /** u32 */
  dwCrcErr: number;
  /** u32 */
  dwTimeoutErr: number;
  /** u32 */
  dwAlignmentErr: number;
  /** u32 */
  dwHardwareOverrunErr: number;
  /** u32 */
  dwFramingErr: number;
  /** u32 */
  dwBufferOverrunErr: number;
  /** u32 */
  dwCompressionRatioIn: number;
  /** u32 */
  dwCompressionRatioOut: number;
  /** u32 */
  dwBps: number;
  /** u32 */
  dwConnectDuration: number;
}

export const sizeofRAS_STATS = 64;

export function allocRAS_STATS(data?: Partial<RAS_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwBytesXmited !== undefined) view.setUint32(4, Number(data.dwBytesXmited), true);
  // 0x08: u32
  if (data?.dwBytesRcved !== undefined) view.setUint32(8, Number(data.dwBytesRcved), true);
  // 0x0c: u32
  if (data?.dwFramesXmited !== undefined) view.setUint32(12, Number(data.dwFramesXmited), true);
  // 0x10: u32
  if (data?.dwFramesRcved !== undefined) view.setUint32(16, Number(data.dwFramesRcved), true);
  // 0x14: u32
  if (data?.dwCrcErr !== undefined) view.setUint32(20, Number(data.dwCrcErr), true);
  // 0x18: u32
  if (data?.dwTimeoutErr !== undefined) view.setUint32(24, Number(data.dwTimeoutErr), true);
  // 0x1c: u32
  if (data?.dwAlignmentErr !== undefined) view.setUint32(28, Number(data.dwAlignmentErr), true);
  // 0x20: u32
  if (data?.dwHardwareOverrunErr !== undefined) view.setUint32(32, Number(data.dwHardwareOverrunErr), true);
  // 0x24: u32
  if (data?.dwFramingErr !== undefined) view.setUint32(36, Number(data.dwFramingErr), true);
  // 0x28: u32
  if (data?.dwBufferOverrunErr !== undefined) view.setUint32(40, Number(data.dwBufferOverrunErr), true);
  // 0x2c: u32
  if (data?.dwCompressionRatioIn !== undefined) view.setUint32(44, Number(data.dwCompressionRatioIn), true);
  // 0x30: u32
  if (data?.dwCompressionRatioOut !== undefined) view.setUint32(48, Number(data.dwCompressionRatioOut), true);
  // 0x34: u32
  if (data?.dwBps !== undefined) view.setUint32(52, Number(data.dwBps), true);
  // 0x38: u32
  if (data?.dwConnectDuration !== undefined) view.setUint32(56, Number(data.dwConnectDuration), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASUPDATECONN (size: 32)
 */
export interface RASUPDATECONN {
  /** Windows.Win32.NetworkManagement.Rras.RASAPIVERSION */
  version: RASAPIVERSION;
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwIfIndex: number;
  /** Windows.Win32.NetworkManagement.Rras.RASTUNNELENDPOINT */
  localEndPoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RASTUNNELENDPOINT */
  remoteEndPoint: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRASUPDATECONN = 32;

export function allocRASUPDATECONN(data?: Partial<RASUPDATECONN>): Uint8Array {
  const buf = new Uint8Array(sizeofRASUPDATECONN);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.version !== undefined) view.setInt32(0, Number(data.version), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwIfIndex !== undefined) view.setUint32(12, Number(data.dwIfIndex), true);
  // 0x10: pointer
  if (data?.localEndPoint !== undefined) view.setBigUint64(16, data.localEndPoint === null ? 0n : BigInt(util.toPointer(data.localEndPoint)), true);
  // 0x18: pointer
  if (data?.remoteEndPoint !== undefined) view.setBigUint64(24, data.remoteEndPoint === null ? 0n : BigInt(util.toPointer(data.remoteEndPoint)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASNOUSERW (size: 40)
 */
export interface RASNOUSERW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwTimeoutMs: number;
  /** array */
  szUserName: Deno.PointerValue | null;
  /** array */
  szPassword: Deno.PointerValue | null;
  /** array */
  szDomain: Deno.PointerValue | null;
}

export const sizeofRASNOUSERW = 40;

export function allocRASNOUSERW(data?: Partial<RASNOUSERW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASNOUSERW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwTimeoutMs !== undefined) view.setUint32(8, Number(data.dwTimeoutMs), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szUserName !== undefined) view.setBigUint64(16, data.szUserName === null ? 0n : BigInt(util.toPointer(data.szUserName)), true);
  // 0x18: pointer
  if (data?.szPassword !== undefined) view.setBigUint64(24, data.szPassword === null ? 0n : BigInt(util.toPointer(data.szPassword)), true);
  // 0x20: pointer
  if (data?.szDomain !== undefined) view.setBigUint64(32, data.szDomain === null ? 0n : BigInt(util.toPointer(data.szDomain)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASNOUSERA (size: 40)
 */
export interface RASNOUSERA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwTimeoutMs: number;
  /** array */
  szUserName: Deno.PointerValue | null;
  /** array */
  szPassword: Deno.PointerValue | null;
  /** array */
  szDomain: Deno.PointerValue | null;
}

export const sizeofRASNOUSERA = 40;

export function allocRASNOUSERA(data?: Partial<RASNOUSERA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASNOUSERA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwTimeoutMs !== undefined) view.setUint32(8, Number(data.dwTimeoutMs), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szUserName !== undefined) view.setBigUint64(16, data.szUserName === null ? 0n : BigInt(util.toPointer(data.szUserName)), true);
  // 0x18: pointer
  if (data?.szPassword !== undefined) view.setBigUint64(24, data.szPassword === null ? 0n : BigInt(util.toPointer(data.szPassword)), true);
  // 0x20: pointer
  if (data?.szDomain !== undefined) view.setBigUint64(32, data.szDomain === null ? 0n : BigInt(util.toPointer(data.szDomain)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPBDLGW (size: 72)
 */
export interface RASPBDLGW {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** i32 */
  xDlg: number;
  /** i32 */
  yDlg: number;
  /** usize */
  dwCallbackId: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Rras.RASPBDLGFUNCW */
  pCallback: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwError: number;
  /** usize */
  reserved: Deno.PointerValue;
  /** usize */
  reserved2: Deno.PointerValue;
}

export const sizeofRASPBDLGW = 72;

export function allocRASPBDLGW(data?: Partial<RASPBDLGW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPBDLGW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: i32
  if (data?.xDlg !== undefined) view.setInt32(20, Number(data.xDlg), true);
  // 0x18: i32
  if (data?.yDlg !== undefined) view.setInt32(24, Number(data.yDlg), true);
  // 0x1c: pad4
  // 0x20: usize
  if (data?.dwCallbackId !== undefined) view.setBigUint64(32, BigInt(data.dwCallbackId), true);
  // 0x28: pointer
  if (data?.pCallback !== undefined) view.setBigUint64(40, data.pCallback === null ? 0n : BigInt(util.toPointer(data.pCallback)), true);
  // 0x30: u32
  if (data?.dwError !== undefined) view.setUint32(48, Number(data.dwError), true);
  // 0x34: pad4
  // 0x38: usize
  if (data?.reserved !== undefined) view.setBigUint64(56, BigInt(data.reserved), true);
  // 0x40: usize
  if (data?.reserved2 !== undefined) view.setBigUint64(64, BigInt(data.reserved2), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASPBDLGA (size: 72)
 */
export interface RASPBDLGA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** i32 */
  xDlg: number;
  /** i32 */
  yDlg: number;
  /** usize */
  dwCallbackId: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Rras.RASPBDLGFUNCA */
  pCallback: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwError: number;
  /** usize */
  reserved: Deno.PointerValue;
  /** usize */
  reserved2: Deno.PointerValue;
}

export const sizeofRASPBDLGA = 72;

export function allocRASPBDLGA(data?: Partial<RASPBDLGA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASPBDLGA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: i32
  if (data?.xDlg !== undefined) view.setInt32(20, Number(data.xDlg), true);
  // 0x18: i32
  if (data?.yDlg !== undefined) view.setInt32(24, Number(data.yDlg), true);
  // 0x1c: pad4
  // 0x20: usize
  if (data?.dwCallbackId !== undefined) view.setBigUint64(32, BigInt(data.dwCallbackId), true);
  // 0x28: pointer
  if (data?.pCallback !== undefined) view.setBigUint64(40, data.pCallback === null ? 0n : BigInt(util.toPointer(data.pCallback)), true);
  // 0x30: u32
  if (data?.dwError !== undefined) view.setUint32(48, Number(data.dwError), true);
  // 0x34: pad4
  // 0x38: usize
  if (data?.reserved !== undefined) view.setBigUint64(56, BigInt(data.reserved), true);
  // 0x40: usize
  if (data?.reserved2 !== undefined) view.setBigUint64(64, BigInt(data.reserved2), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASENTRYDLGW (size: 64)
 */
export interface RASENTRYDLGW {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** i32 */
  xDlg: number;
  /** i32 */
  yDlg: number;
  /** array */
  szEntry: Deno.PointerValue | null;
  /** u32 */
  dwError: number;
  /** usize */
  reserved: Deno.PointerValue;
  /** usize */
  reserved2: Deno.PointerValue;
}

export const sizeofRASENTRYDLGW = 64;

export function allocRASENTRYDLGW(data?: Partial<RASENTRYDLGW>): Uint8Array {
  const buf = new Uint8Array(sizeofRASENTRYDLGW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: i32
  if (data?.xDlg !== undefined) view.setInt32(20, Number(data.xDlg), true);
  // 0x18: i32
  if (data?.yDlg !== undefined) view.setInt32(24, Number(data.yDlg), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szEntry !== undefined) view.setBigUint64(32, data.szEntry === null ? 0n : BigInt(util.toPointer(data.szEntry)), true);
  // 0x28: u32
  if (data?.dwError !== undefined) view.setUint32(40, Number(data.dwError), true);
  // 0x2c: pad4
  // 0x30: usize
  if (data?.reserved !== undefined) view.setBigUint64(48, BigInt(data.reserved), true);
  // 0x38: usize
  if (data?.reserved2 !== undefined) view.setBigUint64(56, BigInt(data.reserved2), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASENTRYDLGA (size: 64)
 */
export interface RASENTRYDLGA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** i32 */
  xDlg: number;
  /** i32 */
  yDlg: number;
  /** array */
  szEntry: Deno.PointerValue | null;
  /** u32 */
  dwError: number;
  /** usize */
  reserved: Deno.PointerValue;
  /** usize */
  reserved2: Deno.PointerValue;
}

export const sizeofRASENTRYDLGA = 64;

export function allocRASENTRYDLGA(data?: Partial<RASENTRYDLGA>): Uint8Array {
  const buf = new Uint8Array(sizeofRASENTRYDLGA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: i32
  if (data?.xDlg !== undefined) view.setInt32(20, Number(data.xDlg), true);
  // 0x18: i32
  if (data?.yDlg !== undefined) view.setInt32(24, Number(data.yDlg), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szEntry !== undefined) view.setBigUint64(32, data.szEntry === null ? 0n : BigInt(util.toPointer(data.szEntry)), true);
  // 0x28: u32
  if (data?.dwError !== undefined) view.setUint32(40, Number(data.dwError), true);
  // 0x2c: pad4
  // 0x30: usize
  if (data?.reserved !== undefined) view.setBigUint64(48, BigInt(data.reserved), true);
  // 0x38: usize
  if (data?.reserved2 !== undefined) view.setBigUint64(56, BigInt(data.reserved2), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RASDIALDLG (size: 56)
 */
export interface RASDIALDLG {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** i32 */
  xDlg: number;
  /** i32 */
  yDlg: number;
  /** u32 */
  dwSubEntry: number;
  /** u32 */
  dwError: number;
  /** usize */
  reserved: Deno.PointerValue;
  /** usize */
  reserved2: Deno.PointerValue;
}

export const sizeofRASDIALDLG = 56;

export function allocRASDIALDLG(data?: Partial<RASDIALDLG>): Uint8Array {
  const buf = new Uint8Array(sizeofRASDIALDLG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: i32
  if (data?.xDlg !== undefined) view.setInt32(20, Number(data.xDlg), true);
  // 0x18: i32
  if (data?.yDlg !== undefined) view.setInt32(24, Number(data.yDlg), true);
  // 0x1c: u32
  if (data?.dwSubEntry !== undefined) view.setUint32(28, Number(data.dwSubEntry), true);
  // 0x20: u32
  if (data?.dwError !== undefined) view.setUint32(32, Number(data.dwError), true);
  // 0x24: pad4
  // 0x28: usize
  if (data?.reserved !== undefined) view.setBigUint64(40, BigInt(data.reserved), true);
  // 0x30: usize
  if (data?.reserved2 !== undefined) view.setBigUint64(48, BigInt(data.reserved2), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_INTERFACE_0 (size: 40)
 */
export interface MPR_INTERFACE_0 {
  /** array */
  wszInterfaceName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hInterface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fEnabled: boolean;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_INTERFACE_TYPE */
  dwIfType: ROUTER_INTERFACE_TYPE;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_CONNECTION_STATE */
  dwConnectionState: ROUTER_CONNECTION_STATE;
  /** u32 */
  fUnReachabilityReasons: number;
  /** u32 */
  dwLastError: number;
}

export const sizeofMPR_INTERFACE_0 = 40;

export function allocMPR_INTERFACE_0(data?: Partial<MPR_INTERFACE_0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_INTERFACE_0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszInterfaceName !== undefined) view.setBigUint64(0, data.wszInterfaceName === null ? 0n : BigInt(util.toPointer(data.wszInterfaceName)), true);
  // 0x08: pointer
  if (data?.hInterface !== undefined) view.setBigUint64(8, data.hInterface === null ? 0n : BigInt(util.toPointer(data.hInterface)), true);
  // 0x10: i32
  if (data?.fEnabled !== undefined) view.setInt32(16, Number(data.fEnabled), true);
  // 0x14: i32
  if (data?.dwIfType !== undefined) view.setInt32(20, Number(data.dwIfType), true);
  // 0x18: i32
  if (data?.dwConnectionState !== undefined) view.setInt32(24, Number(data.dwConnectionState), true);
  // 0x1c: u32
  if (data?.fUnReachabilityReasons !== undefined) view.setUint32(28, Number(data.fUnReachabilityReasons), true);
  // 0x20: u32
  if (data?.dwLastError !== undefined) view.setUint32(32, Number(data.dwLastError), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_IPINIP_INTERFACE_0 (size: 16)
 */
export interface MPR_IPINIP_INTERFACE_0 {
  /** array */
  wszFriendlyName: Deno.PointerValue | null;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPR_IPINIP_INTERFACE_0 = 16;

export function allocMPR_IPINIP_INTERFACE_0(data?: Partial<MPR_IPINIP_INTERFACE_0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_IPINIP_INTERFACE_0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszFriendlyName !== undefined) view.setBigUint64(0, data.wszFriendlyName === null ? 0n : BigInt(util.toPointer(data.wszFriendlyName)), true);
  // 0x08: pointer
  if (data?.Guid !== undefined) view.setBigUint64(8, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_INTERFACE_1 (size: 48)
 */
export interface MPR_INTERFACE_1 {
  /** array */
  wszInterfaceName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hInterface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fEnabled: boolean;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_INTERFACE_TYPE */
  dwIfType: ROUTER_INTERFACE_TYPE;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_CONNECTION_STATE */
  dwConnectionState: ROUTER_CONNECTION_STATE;
  /** u32 */
  fUnReachabilityReasons: number;
  /** u32 */
  dwLastError: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwsDialoutHoursRestriction: string | null | Uint8Array | Uint16Array;
}

export const sizeofMPR_INTERFACE_1 = 48;

export function allocMPR_INTERFACE_1(data?: Partial<MPR_INTERFACE_1>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_INTERFACE_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszInterfaceName !== undefined) view.setBigUint64(0, data.wszInterfaceName === null ? 0n : BigInt(util.toPointer(data.wszInterfaceName)), true);
  // 0x08: pointer
  if (data?.hInterface !== undefined) view.setBigUint64(8, data.hInterface === null ? 0n : BigInt(util.toPointer(data.hInterface)), true);
  // 0x10: i32
  if (data?.fEnabled !== undefined) view.setInt32(16, Number(data.fEnabled), true);
  // 0x14: i32
  if (data?.dwIfType !== undefined) view.setInt32(20, Number(data.dwIfType), true);
  // 0x18: i32
  if (data?.dwConnectionState !== undefined) view.setInt32(24, Number(data.dwConnectionState), true);
  // 0x1c: u32
  if (data?.fUnReachabilityReasons !== undefined) view.setUint32(28, Number(data.fUnReachabilityReasons), true);
  // 0x20: u32
  if (data?.dwLastError !== undefined) view.setUint32(32, Number(data.dwLastError), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpwsDialoutHoursRestriction !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpwsDialoutHoursRestriction);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_INTERFACE_2 (size: 200)
 */
export interface MPR_INTERFACE_2 {
  /** array */
  wszInterfaceName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hInterface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fEnabled: boolean;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_INTERFACE_TYPE */
  dwIfType: ROUTER_INTERFACE_TYPE;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_CONNECTION_STATE */
  dwConnectionState: ROUTER_CONNECTION_STATE;
  /** u32 */
  fUnReachabilityReasons: number;
  /** u32 */
  dwLastError: number;
  /** u32 */
  dwfOptions: number;
  /** array */
  szLocalPhoneNumber: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  szAlternates: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ipaddr: number;
  /** u32 */
  ipaddrDns: number;
  /** u32 */
  ipaddrDnsAlt: number;
  /** u32 */
  ipaddrWins: number;
  /** u32 */
  ipaddrWinsAlt: number;
  /** u32 */
  dwfNetProtocols: number;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szX25PadType: Deno.PointerValue | null;
  /** array */
  szX25Address: Deno.PointerValue | null;
  /** array */
  szX25Facilities: Deno.PointerValue | null;
  /** array */
  szX25UserData: Deno.PointerValue | null;
  /** u32 */
  dwChannels: number;
  /** u32 */
  dwSubEntries: number;
  /** Windows.Win32.NetworkManagement.Rras.MPR_INTERFACE_DIAL_MODE */
  dwDialMode: MPR_INTERFACE_DIAL_MODE;
  /** u32 */
  dwDialExtraPercent: number;
  /** u32 */
  dwDialExtraSampleSeconds: number;
  /** u32 */
  dwHangUpExtraPercent: number;
  /** u32 */
  dwHangUpExtraSampleSeconds: number;
  /** u32 */
  dwIdleDisconnectSeconds: number;
  /** u32 */
  dwType: number;
  /** Windows.Win32.NetworkManagement.Rras.MPR_ET */
  dwEncryptionType: MPR_ET;
  /** u32 */
  dwCustomAuthKey: number;
  /** u32 */
  dwCustomAuthDataSize: number;
  /** ptr */
  lpbCustomAuthData: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  guidId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.MPR_VS */
  dwVpnStrategy: MPR_VS;
}

export const sizeofMPR_INTERFACE_2 = 200;

export function allocMPR_INTERFACE_2(data?: Partial<MPR_INTERFACE_2>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_INTERFACE_2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszInterfaceName !== undefined) view.setBigUint64(0, data.wszInterfaceName === null ? 0n : BigInt(util.toPointer(data.wszInterfaceName)), true);
  // 0x08: pointer
  if (data?.hInterface !== undefined) view.setBigUint64(8, data.hInterface === null ? 0n : BigInt(util.toPointer(data.hInterface)), true);
  // 0x10: i32
  if (data?.fEnabled !== undefined) view.setInt32(16, Number(data.fEnabled), true);
  // 0x14: i32
  if (data?.dwIfType !== undefined) view.setInt32(20, Number(data.dwIfType), true);
  // 0x18: i32
  if (data?.dwConnectionState !== undefined) view.setInt32(24, Number(data.dwConnectionState), true);
  // 0x1c: u32
  if (data?.fUnReachabilityReasons !== undefined) view.setUint32(28, Number(data.fUnReachabilityReasons), true);
  // 0x20: u32
  if (data?.dwLastError !== undefined) view.setUint32(32, Number(data.dwLastError), true);
  // 0x24: u32
  if (data?.dwfOptions !== undefined) view.setUint32(36, Number(data.dwfOptions), true);
  // 0x28: pointer
  if (data?.szLocalPhoneNumber !== undefined) view.setBigUint64(40, data.szLocalPhoneNumber === null ? 0n : BigInt(util.toPointer(data.szLocalPhoneNumber)), true);
  // 0x30: buffer
  if (data?.szAlternates !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.szAlternates);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.ipaddr !== undefined) view.setUint32(56, Number(data.ipaddr), true);
  // 0x3c: u32
  if (data?.ipaddrDns !== undefined) view.setUint32(60, Number(data.ipaddrDns), true);
  // 0x40: u32
  if (data?.ipaddrDnsAlt !== undefined) view.setUint32(64, Number(data.ipaddrDnsAlt), true);
  // 0x44: u32
  if (data?.ipaddrWins !== undefined) view.setUint32(68, Number(data.ipaddrWins), true);
  // 0x48: u32
  if (data?.ipaddrWinsAlt !== undefined) view.setUint32(72, Number(data.ipaddrWinsAlt), true);
  // 0x4c: u32
  if (data?.dwfNetProtocols !== undefined) view.setUint32(76, Number(data.dwfNetProtocols), true);
  // 0x50: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(80, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x58: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(88, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x60: pointer
  if (data?.szX25PadType !== undefined) view.setBigUint64(96, data.szX25PadType === null ? 0n : BigInt(util.toPointer(data.szX25PadType)), true);
  // 0x68: pointer
  if (data?.szX25Address !== undefined) view.setBigUint64(104, data.szX25Address === null ? 0n : BigInt(util.toPointer(data.szX25Address)), true);
  // 0x70: pointer
  if (data?.szX25Facilities !== undefined) view.setBigUint64(112, data.szX25Facilities === null ? 0n : BigInt(util.toPointer(data.szX25Facilities)), true);
  // 0x78: pointer
  if (data?.szX25UserData !== undefined) view.setBigUint64(120, data.szX25UserData === null ? 0n : BigInt(util.toPointer(data.szX25UserData)), true);
  // 0x80: u32
  if (data?.dwChannels !== undefined) view.setUint32(128, Number(data.dwChannels), true);
  // 0x84: u32
  if (data?.dwSubEntries !== undefined) view.setUint32(132, Number(data.dwSubEntries), true);
  // 0x88: u32
  if (data?.dwDialMode !== undefined) view.setUint32(136, Number(data.dwDialMode), true);
  // 0x8c: u32
  if (data?.dwDialExtraPercent !== undefined) view.setUint32(140, Number(data.dwDialExtraPercent), true);
  // 0x90: u32
  if (data?.dwDialExtraSampleSeconds !== undefined) view.setUint32(144, Number(data.dwDialExtraSampleSeconds), true);
  // 0x94: u32
  if (data?.dwHangUpExtraPercent !== undefined) view.setUint32(148, Number(data.dwHangUpExtraPercent), true);
  // 0x98: u32
  if (data?.dwHangUpExtraSampleSeconds !== undefined) view.setUint32(152, Number(data.dwHangUpExtraSampleSeconds), true);
  // 0x9c: u32
  if (data?.dwIdleDisconnectSeconds !== undefined) view.setUint32(156, Number(data.dwIdleDisconnectSeconds), true);
  // 0xa0: u32
  if (data?.dwType !== undefined) view.setUint32(160, Number(data.dwType), true);
  // 0xa4: u32
  if (data?.dwEncryptionType !== undefined) view.setUint32(164, Number(data.dwEncryptionType), true);
  // 0xa8: u32
  if (data?.dwCustomAuthKey !== undefined) view.setUint32(168, Number(data.dwCustomAuthKey), true);
  // 0xac: u32
  if (data?.dwCustomAuthDataSize !== undefined) view.setUint32(172, Number(data.dwCustomAuthDataSize), true);
  // 0xb0: pointer
  if (data?.lpbCustomAuthData !== undefined) view.setBigUint64(176, data.lpbCustomAuthData === null ? 0n : BigInt(util.toPointer(data.lpbCustomAuthData)), true);
  // 0xb8: pointer
  if (data?.guidId !== undefined) view.setBigUint64(184, data.guidId === null ? 0n : BigInt(util.toPointer(data.guidId)), true);
  // 0xc0: u32
  if (data?.dwVpnStrategy !== undefined) view.setUint32(192, Number(data.dwVpnStrategy), true);
  // 0xc4: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_INTERFACE_3 (size: 224)
 */
export interface MPR_INTERFACE_3 {
  /** array */
  wszInterfaceName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hInterface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fEnabled: boolean;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_INTERFACE_TYPE */
  dwIfType: ROUTER_INTERFACE_TYPE;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_CONNECTION_STATE */
  dwConnectionState: ROUTER_CONNECTION_STATE;
  /** u32 */
  fUnReachabilityReasons: number;
  /** u32 */
  dwLastError: number;
  /** u32 */
  dwfOptions: number;
  /** array */
  szLocalPhoneNumber: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  szAlternates: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ipaddr: number;
  /** u32 */
  ipaddrDns: number;
  /** u32 */
  ipaddrDnsAlt: number;
  /** u32 */
  ipaddrWins: number;
  /** u32 */
  ipaddrWinsAlt: number;
  /** u32 */
  dwfNetProtocols: number;
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szX25PadType: Deno.PointerValue | null;
  /** array */
  szX25Address: Deno.PointerValue | null;
  /** array */
  szX25Facilities: Deno.PointerValue | null;
  /** array */
  szX25UserData: Deno.PointerValue | null;
  /** u32 */
  dwChannels: number;
  /** u32 */
  dwSubEntries: number;
  /** Windows.Win32.NetworkManagement.Rras.MPR_INTERFACE_DIAL_MODE */
  dwDialMode: MPR_INTERFACE_DIAL_MODE;
  /** u32 */
  dwDialExtraPercent: number;
  /** u32 */
  dwDialExtraSampleSeconds: number;
  /** u32 */
  dwHangUpExtraPercent: number;
  /** u32 */
  dwHangUpExtraSampleSeconds: number;
  /** u32 */
  dwIdleDisconnectSeconds: number;
  /** u32 */
  dwType: number;
  /** Windows.Win32.NetworkManagement.Rras.MPR_ET */
  dwEncryptionType: MPR_ET;
  /** u32 */
  dwCustomAuthKey: number;
  /** u32 */
  dwCustomAuthDataSize: number;
  /** ptr */
  lpbCustomAuthData: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  guidId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.MPR_VS */
  dwVpnStrategy: MPR_VS;
  /** u32 */
  AddressCount: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipv6addrDns: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipv6addrDnsAlt: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ipv6addr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMPR_INTERFACE_3 = 224;

export function allocMPR_INTERFACE_3(data?: Partial<MPR_INTERFACE_3>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_INTERFACE_3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszInterfaceName !== undefined) view.setBigUint64(0, data.wszInterfaceName === null ? 0n : BigInt(util.toPointer(data.wszInterfaceName)), true);
  // 0x08: pointer
  if (data?.hInterface !== undefined) view.setBigUint64(8, data.hInterface === null ? 0n : BigInt(util.toPointer(data.hInterface)), true);
  // 0x10: i32
  if (data?.fEnabled !== undefined) view.setInt32(16, Number(data.fEnabled), true);
  // 0x14: i32
  if (data?.dwIfType !== undefined) view.setInt32(20, Number(data.dwIfType), true);
  // 0x18: i32
  if (data?.dwConnectionState !== undefined) view.setInt32(24, Number(data.dwConnectionState), true);
  // 0x1c: u32
  if (data?.fUnReachabilityReasons !== undefined) view.setUint32(28, Number(data.fUnReachabilityReasons), true);
  // 0x20: u32
  if (data?.dwLastError !== undefined) view.setUint32(32, Number(data.dwLastError), true);
  // 0x24: u32
  if (data?.dwfOptions !== undefined) view.setUint32(36, Number(data.dwfOptions), true);
  // 0x28: pointer
  if (data?.szLocalPhoneNumber !== undefined) view.setBigUint64(40, data.szLocalPhoneNumber === null ? 0n : BigInt(util.toPointer(data.szLocalPhoneNumber)), true);
  // 0x30: buffer
  if (data?.szAlternates !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.szAlternates);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.ipaddr !== undefined) view.setUint32(56, Number(data.ipaddr), true);
  // 0x3c: u32
  if (data?.ipaddrDns !== undefined) view.setUint32(60, Number(data.ipaddrDns), true);
  // 0x40: u32
  if (data?.ipaddrDnsAlt !== undefined) view.setUint32(64, Number(data.ipaddrDnsAlt), true);
  // 0x44: u32
  if (data?.ipaddrWins !== undefined) view.setUint32(68, Number(data.ipaddrWins), true);
  // 0x48: u32
  if (data?.ipaddrWinsAlt !== undefined) view.setUint32(72, Number(data.ipaddrWinsAlt), true);
  // 0x4c: u32
  if (data?.dwfNetProtocols !== undefined) view.setUint32(76, Number(data.dwfNetProtocols), true);
  // 0x50: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(80, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x58: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(88, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x60: pointer
  if (data?.szX25PadType !== undefined) view.setBigUint64(96, data.szX25PadType === null ? 0n : BigInt(util.toPointer(data.szX25PadType)), true);
  // 0x68: pointer
  if (data?.szX25Address !== undefined) view.setBigUint64(104, data.szX25Address === null ? 0n : BigInt(util.toPointer(data.szX25Address)), true);
  // 0x70: pointer
  if (data?.szX25Facilities !== undefined) view.setBigUint64(112, data.szX25Facilities === null ? 0n : BigInt(util.toPointer(data.szX25Facilities)), true);
  // 0x78: pointer
  if (data?.szX25UserData !== undefined) view.setBigUint64(120, data.szX25UserData === null ? 0n : BigInt(util.toPointer(data.szX25UserData)), true);
  // 0x80: u32
  if (data?.dwChannels !== undefined) view.setUint32(128, Number(data.dwChannels), true);
  // 0x84: u32
  if (data?.dwSubEntries !== undefined) view.setUint32(132, Number(data.dwSubEntries), true);
  // 0x88: u32
  if (data?.dwDialMode !== undefined) view.setUint32(136, Number(data.dwDialMode), true);
  // 0x8c: u32
  if (data?.dwDialExtraPercent !== undefined) view.setUint32(140, Number(data.dwDialExtraPercent), true);
  // 0x90: u32
  if (data?.dwDialExtraSampleSeconds !== undefined) view.setUint32(144, Number(data.dwDialExtraSampleSeconds), true);
  // 0x94: u32
  if (data?.dwHangUpExtraPercent !== undefined) view.setUint32(148, Number(data.dwHangUpExtraPercent), true);
  // 0x98: u32
  if (data?.dwHangUpExtraSampleSeconds !== undefined) view.setUint32(152, Number(data.dwHangUpExtraSampleSeconds), true);
  // 0x9c: u32
  if (data?.dwIdleDisconnectSeconds !== undefined) view.setUint32(156, Number(data.dwIdleDisconnectSeconds), true);
  // 0xa0: u32
  if (data?.dwType !== undefined) view.setUint32(160, Number(data.dwType), true);
  // 0xa4: u32
  if (data?.dwEncryptionType !== undefined) view.setUint32(164, Number(data.dwEncryptionType), true);
  // 0xa8: u32
  if (data?.dwCustomAuthKey !== undefined) view.setUint32(168, Number(data.dwCustomAuthKey), true);
  // 0xac: u32
  if (data?.dwCustomAuthDataSize !== undefined) view.setUint32(172, Number(data.dwCustomAuthDataSize), true);
  // 0xb0: pointer
  if (data?.lpbCustomAuthData !== undefined) view.setBigUint64(176, data.lpbCustomAuthData === null ? 0n : BigInt(util.toPointer(data.lpbCustomAuthData)), true);
  // 0xb8: pointer
  if (data?.guidId !== undefined) view.setBigUint64(184, data.guidId === null ? 0n : BigInt(util.toPointer(data.guidId)), true);
  // 0xc0: u32
  if (data?.dwVpnStrategy !== undefined) view.setUint32(192, Number(data.dwVpnStrategy), true);
  // 0xc4: u32
  if (data?.AddressCount !== undefined) view.setUint32(196, Number(data.AddressCount), true);
  // 0xc8: pointer
  if (data?.ipv6addrDns !== undefined) view.setBigUint64(200, data.ipv6addrDns === null ? 0n : BigInt(util.toPointer(data.ipv6addrDns)), true);
  // 0xd0: pointer
  if (data?.ipv6addrDnsAlt !== undefined) view.setBigUint64(208, data.ipv6addrDnsAlt === null ? 0n : BigInt(util.toPointer(data.ipv6addrDnsAlt)), true);
  // 0xd8: pointer
  if (data?.ipv6addr !== undefined) view.setBigUint64(216, data.ipv6addr === null ? 0n : BigInt(util.toPointer(data.ipv6addr)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_DEVICE_0 (size: 16)
 */
export interface MPR_DEVICE_0 {
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
}

export const sizeofMPR_DEVICE_0 = 16;

export function allocMPR_DEVICE_0(data?: Partial<MPR_DEVICE_0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_DEVICE_0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(0, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x08: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(8, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_DEVICE_1 (size: 32)
 */
export interface MPR_DEVICE_1 {
  /** array */
  szDeviceType: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szLocalPhoneNumber: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  szAlternates: string | null | Uint8Array | Uint16Array;
}

export const sizeofMPR_DEVICE_1 = 32;

export function allocMPR_DEVICE_1(data?: Partial<MPR_DEVICE_1>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_DEVICE_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szDeviceType !== undefined) view.setBigUint64(0, data.szDeviceType === null ? 0n : BigInt(util.toPointer(data.szDeviceType)), true);
  // 0x08: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(8, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x10: pointer
  if (data?.szLocalPhoneNumber !== undefined) view.setBigUint64(16, data.szLocalPhoneNumber === null ? 0n : BigInt(util.toPointer(data.szLocalPhoneNumber)), true);
  // 0x18: buffer
  if (data?.szAlternates !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szAlternates);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_CREDENTIALSEX_0 (size: 16)
 */
export interface MPR_CREDENTIALSEX_0 {
  /** u32 */
  dwSize: number;
  /** ptr */
  lpbCredentialsInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMPR_CREDENTIALSEX_0 = 16;

export function allocMPR_CREDENTIALSEX_0(data?: Partial<MPR_CREDENTIALSEX_0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_CREDENTIALSEX_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbCredentialsInfo !== undefined) view.setBigUint64(8, data.lpbCredentialsInfo === null ? 0n : BigInt(util.toPointer(data.lpbCredentialsInfo)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_CREDENTIALSEX_1 (size: 16)
 */
export interface MPR_CREDENTIALSEX_1 {
  /** u32 */
  dwSize: number;
  /** ptr */
  lpbCredentialsInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMPR_CREDENTIALSEX_1 = 16;

export function allocMPR_CREDENTIALSEX_1(data?: Partial<MPR_CREDENTIALSEX_1>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_CREDENTIALSEX_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbCredentialsInfo !== undefined) view.setBigUint64(8, data.lpbCredentialsInfo === null ? 0n : BigInt(util.toPointer(data.lpbCredentialsInfo)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_TRANSPORT_0 (size: 24)
 */
export interface MPR_TRANSPORT_0 {
  /** u32 */
  dwTransportId: number;
  /** Windows.Win32.Foundation.HANDLE */
  hTransport: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszTransportName: Deno.PointerValue | null;
}

export const sizeofMPR_TRANSPORT_0 = 24;

export function allocMPR_TRANSPORT_0(data?: Partial<MPR_TRANSPORT_0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_TRANSPORT_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTransportId !== undefined) view.setUint32(0, Number(data.dwTransportId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hTransport !== undefined) view.setBigUint64(8, data.hTransport === null ? 0n : BigInt(util.toPointer(data.hTransport)), true);
  // 0x10: pointer
  if (data?.wszTransportName !== undefined) view.setBigUint64(16, data.wszTransportName === null ? 0n : BigInt(util.toPointer(data.wszTransportName)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_IFTRANSPORT_0 (size: 24)
 */
export interface MPR_IFTRANSPORT_0 {
  /** u32 */
  dwTransportId: number;
  /** Windows.Win32.Foundation.HANDLE */
  hIfTransport: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszIfTransportName: Deno.PointerValue | null;
}

export const sizeofMPR_IFTRANSPORT_0 = 24;

export function allocMPR_IFTRANSPORT_0(data?: Partial<MPR_IFTRANSPORT_0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_IFTRANSPORT_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTransportId !== undefined) view.setUint32(0, Number(data.dwTransportId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hIfTransport !== undefined) view.setBigUint64(8, data.hIfTransport === null ? 0n : BigInt(util.toPointer(data.hIfTransport)), true);
  // 0x10: pointer
  if (data?.wszIfTransportName !== undefined) view.setBigUint64(16, data.wszIfTransportName === null ? 0n : BigInt(util.toPointer(data.wszIfTransportName)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_SERVER_0 (size: 16)
 */
export interface MPR_SERVER_0 {
  /** Windows.Win32.Foundation.BOOL */
  fLanOnlyMode: boolean;
  /** u32 */
  dwUpTime: number;
  /** u32 */
  dwTotalPorts: number;
  /** u32 */
  dwPortsInUse: number;
}

export const sizeofMPR_SERVER_0 = 16;

export function allocMPR_SERVER_0(data?: Partial<MPR_SERVER_0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_SERVER_0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fLanOnlyMode !== undefined) view.setInt32(0, Number(data.fLanOnlyMode), true);
  // 0x04: u32
  if (data?.dwUpTime !== undefined) view.setUint32(4, Number(data.dwUpTime), true);
  // 0x08: u32
  if (data?.dwTotalPorts !== undefined) view.setUint32(8, Number(data.dwTotalPorts), true);
  // 0x0c: u32
  if (data?.dwPortsInUse !== undefined) view.setUint32(12, Number(data.dwPortsInUse), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_SERVER_1 (size: 16)
 */
export interface MPR_SERVER_1 {
  /** u32 */
  dwNumPptpPorts: number;
  /** u32 */
  dwPptpPortFlags: number;
  /** u32 */
  dwNumL2tpPorts: number;
  /** u32 */
  dwL2tpPortFlags: number;
}

export const sizeofMPR_SERVER_1 = 16;

export function allocMPR_SERVER_1(data?: Partial<MPR_SERVER_1>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_SERVER_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumPptpPorts !== undefined) view.setUint32(0, Number(data.dwNumPptpPorts), true);
  // 0x04: u32
  if (data?.dwPptpPortFlags !== undefined) view.setUint32(4, Number(data.dwPptpPortFlags), true);
  // 0x08: u32
  if (data?.dwNumL2tpPorts !== undefined) view.setUint32(8, Number(data.dwNumL2tpPorts), true);
  // 0x0c: u32
  if (data?.dwL2tpPortFlags !== undefined) view.setUint32(12, Number(data.dwL2tpPortFlags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_SERVER_2 (size: 24)
 */
export interface MPR_SERVER_2 {
  /** u32 */
  dwNumPptpPorts: number;
  /** u32 */
  dwPptpPortFlags: number;
  /** u32 */
  dwNumL2tpPorts: number;
  /** u32 */
  dwL2tpPortFlags: number;
  /** u32 */
  dwNumSstpPorts: number;
  /** u32 */
  dwSstpPortFlags: number;
}

export const sizeofMPR_SERVER_2 = 24;

export function allocMPR_SERVER_2(data?: Partial<MPR_SERVER_2>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_SERVER_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumPptpPorts !== undefined) view.setUint32(0, Number(data.dwNumPptpPorts), true);
  // 0x04: u32
  if (data?.dwPptpPortFlags !== undefined) view.setUint32(4, Number(data.dwPptpPortFlags), true);
  // 0x08: u32
  if (data?.dwNumL2tpPorts !== undefined) view.setUint32(8, Number(data.dwNumL2tpPorts), true);
  // 0x0c: u32
  if (data?.dwL2tpPortFlags !== undefined) view.setUint32(12, Number(data.dwL2tpPortFlags), true);
  // 0x10: u32
  if (data?.dwNumSstpPorts !== undefined) view.setUint32(16, Number(data.dwNumSstpPorts), true);
  // 0x14: u32
  if (data?.dwSstpPortFlags !== undefined) view.setUint32(20, Number(data.dwSstpPortFlags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_PORT_0 (size: 64)
 */
export interface RAS_PORT_0 {
  /** Windows.Win32.Foundation.HANDLE */
  hPort: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hConnection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RAS_PORT_CONDITION */
  dwPortCondition: RAS_PORT_CONDITION;
  /** u32 */
  dwTotalNumberOfCalls: number;
  /** u32 */
  dwConnectDuration: number;
  /** array */
  wszPortName: Deno.PointerValue | null;
  /** array */
  wszMediaName: Deno.PointerValue | null;
  /** array */
  wszDeviceName: Deno.PointerValue | null;
  /** array */
  wszDeviceType: Deno.PointerValue | null;
}

export const sizeofRAS_PORT_0 = 64;

export function allocRAS_PORT_0(data?: Partial<RAS_PORT_0>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_PORT_0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hPort !== undefined) view.setBigUint64(0, data.hPort === null ? 0n : BigInt(util.toPointer(data.hPort)), true);
  // 0x08: pointer
  if (data?.hConnection !== undefined) view.setBigUint64(8, data.hConnection === null ? 0n : BigInt(util.toPointer(data.hConnection)), true);
  // 0x10: i32
  if (data?.dwPortCondition !== undefined) view.setInt32(16, Number(data.dwPortCondition), true);
  // 0x14: u32
  if (data?.dwTotalNumberOfCalls !== undefined) view.setUint32(20, Number(data.dwTotalNumberOfCalls), true);
  // 0x18: u32
  if (data?.dwConnectDuration !== undefined) view.setUint32(24, Number(data.dwConnectDuration), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.wszPortName !== undefined) view.setBigUint64(32, data.wszPortName === null ? 0n : BigInt(util.toPointer(data.wszPortName)), true);
  // 0x28: pointer
  if (data?.wszMediaName !== undefined) view.setBigUint64(40, data.wszMediaName === null ? 0n : BigInt(util.toPointer(data.wszMediaName)), true);
  // 0x30: pointer
  if (data?.wszDeviceName !== undefined) view.setBigUint64(48, data.wszDeviceName === null ? 0n : BigInt(util.toPointer(data.wszDeviceName)), true);
  // 0x38: pointer
  if (data?.wszDeviceType !== undefined) view.setBigUint64(56, data.wszDeviceType === null ? 0n : BigInt(util.toPointer(data.wszDeviceType)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_PORT_1 (size: 72)
 */
export interface RAS_PORT_1 {
  /** Windows.Win32.Foundation.HANDLE */
  hPort: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hConnection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RAS_HARDWARE_CONDITION */
  dwHardwareCondition: RAS_HARDWARE_CONDITION;
  /** u32 */
  dwLineSpeed: number;
  /** u32 */
  dwBytesXmited: number;
  /** u32 */
  dwBytesRcved: number;
  /** u32 */
  dwFramesXmited: number;
  /** u32 */
  dwFramesRcved: number;
  /** u32 */
  dwCrcErr: number;
  /** u32 */
  dwTimeoutErr: number;
  /** u32 */
  dwAlignmentErr: number;
  /** u32 */
  dwHardwareOverrunErr: number;
  /** u32 */
  dwFramingErr: number;
  /** u32 */
  dwBufferOverrunErr: number;
  /** u32 */
  dwCompressionRatioIn: number;
  /** u32 */
  dwCompressionRatioOut: number;
}

export const sizeofRAS_PORT_1 = 72;

export function allocRAS_PORT_1(data?: Partial<RAS_PORT_1>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_PORT_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hPort !== undefined) view.setBigUint64(0, data.hPort === null ? 0n : BigInt(util.toPointer(data.hPort)), true);
  // 0x08: pointer
  if (data?.hConnection !== undefined) view.setBigUint64(8, data.hConnection === null ? 0n : BigInt(util.toPointer(data.hConnection)), true);
  // 0x10: i32
  if (data?.dwHardwareCondition !== undefined) view.setInt32(16, Number(data.dwHardwareCondition), true);
  // 0x14: u32
  if (data?.dwLineSpeed !== undefined) view.setUint32(20, Number(data.dwLineSpeed), true);
  // 0x18: u32
  if (data?.dwBytesXmited !== undefined) view.setUint32(24, Number(data.dwBytesXmited), true);
  // 0x1c: u32
  if (data?.dwBytesRcved !== undefined) view.setUint32(28, Number(data.dwBytesRcved), true);
  // 0x20: u32
  if (data?.dwFramesXmited !== undefined) view.setUint32(32, Number(data.dwFramesXmited), true);
  // 0x24: u32
  if (data?.dwFramesRcved !== undefined) view.setUint32(36, Number(data.dwFramesRcved), true);
  // 0x28: u32
  if (data?.dwCrcErr !== undefined) view.setUint32(40, Number(data.dwCrcErr), true);
  // 0x2c: u32
  if (data?.dwTimeoutErr !== undefined) view.setUint32(44, Number(data.dwTimeoutErr), true);
  // 0x30: u32
  if (data?.dwAlignmentErr !== undefined) view.setUint32(48, Number(data.dwAlignmentErr), true);
  // 0x34: u32
  if (data?.dwHardwareOverrunErr !== undefined) view.setUint32(52, Number(data.dwHardwareOverrunErr), true);
  // 0x38: u32
  if (data?.dwFramingErr !== undefined) view.setUint32(56, Number(data.dwFramingErr), true);
  // 0x3c: u32
  if (data?.dwBufferOverrunErr !== undefined) view.setUint32(60, Number(data.dwBufferOverrunErr), true);
  // 0x40: u32
  if (data?.dwCompressionRatioIn !== undefined) view.setUint32(64, Number(data.dwCompressionRatioIn), true);
  // 0x44: u32
  if (data?.dwCompressionRatioOut !== undefined) view.setUint32(68, Number(data.dwCompressionRatioOut), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_PORT_2 (size: 168)
 */
export interface RAS_PORT_2 {
  /** Windows.Win32.Foundation.HANDLE */
  hPort: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hConnection: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwConn_State: number;
  /** array */
  wszPortName: Deno.PointerValue | null;
  /** array */
  wszMediaName: Deno.PointerValue | null;
  /** array */
  wszDeviceName: Deno.PointerValue | null;
  /** array */
  wszDeviceType: Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RAS_HARDWARE_CONDITION */
  dwHardwareCondition: RAS_HARDWARE_CONDITION;
  /** u32 */
  dwLineSpeed: number;
  /** u32 */
  dwCrcErr: number;
  /** u32 */
  dwSerialOverRunErrs: number;
  /** u32 */
  dwTimeoutErr: number;
  /** u32 */
  dwAlignmentErr: number;
  /** u32 */
  dwHardwareOverrunErr: number;
  /** u32 */
  dwFramingErr: number;
  /** u32 */
  dwBufferOverrunErr: number;
  /** u32 */
  dwCompressionRatioIn: number;
  /** u32 */
  dwCompressionRatioOut: number;
  /** u32 */
  dwTotalErrors: number;
  /** u64 */
  ullBytesXmited: Deno.PointerValue;
  /** u64 */
  ullBytesRcved: Deno.PointerValue;
  /** u64 */
  ullFramesXmited: Deno.PointerValue;
  /** u64 */
  ullFramesRcved: Deno.PointerValue;
  /** u64 */
  ullBytesTxUncompressed: Deno.PointerValue;
  /** u64 */
  ullBytesTxCompressed: Deno.PointerValue;
  /** u64 */
  ullBytesRcvUncompressed: Deno.PointerValue;
  /** u64 */
  ullBytesRcvCompressed: Deno.PointerValue;
}

export const sizeofRAS_PORT_2 = 168;

export function allocRAS_PORT_2(data?: Partial<RAS_PORT_2>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_PORT_2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hPort !== undefined) view.setBigUint64(0, data.hPort === null ? 0n : BigInt(util.toPointer(data.hPort)), true);
  // 0x08: pointer
  if (data?.hConnection !== undefined) view.setBigUint64(8, data.hConnection === null ? 0n : BigInt(util.toPointer(data.hConnection)), true);
  // 0x10: u32
  if (data?.dwConn_State !== undefined) view.setUint32(16, Number(data.dwConn_State), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.wszPortName !== undefined) view.setBigUint64(24, data.wszPortName === null ? 0n : BigInt(util.toPointer(data.wszPortName)), true);
  // 0x20: pointer
  if (data?.wszMediaName !== undefined) view.setBigUint64(32, data.wszMediaName === null ? 0n : BigInt(util.toPointer(data.wszMediaName)), true);
  // 0x28: pointer
  if (data?.wszDeviceName !== undefined) view.setBigUint64(40, data.wszDeviceName === null ? 0n : BigInt(util.toPointer(data.wszDeviceName)), true);
  // 0x30: pointer
  if (data?.wszDeviceType !== undefined) view.setBigUint64(48, data.wszDeviceType === null ? 0n : BigInt(util.toPointer(data.wszDeviceType)), true);
  // 0x38: i32
  if (data?.dwHardwareCondition !== undefined) view.setInt32(56, Number(data.dwHardwareCondition), true);
  // 0x3c: u32
  if (data?.dwLineSpeed !== undefined) view.setUint32(60, Number(data.dwLineSpeed), true);
  // 0x40: u32
  if (data?.dwCrcErr !== undefined) view.setUint32(64, Number(data.dwCrcErr), true);
  // 0x44: u32
  if (data?.dwSerialOverRunErrs !== undefined) view.setUint32(68, Number(data.dwSerialOverRunErrs), true);
  // 0x48: u32
  if (data?.dwTimeoutErr !== undefined) view.setUint32(72, Number(data.dwTimeoutErr), true);
  // 0x4c: u32
  if (data?.dwAlignmentErr !== undefined) view.setUint32(76, Number(data.dwAlignmentErr), true);
  // 0x50: u32
  if (data?.dwHardwareOverrunErr !== undefined) view.setUint32(80, Number(data.dwHardwareOverrunErr), true);
  // 0x54: u32
  if (data?.dwFramingErr !== undefined) view.setUint32(84, Number(data.dwFramingErr), true);
  // 0x58: u32
  if (data?.dwBufferOverrunErr !== undefined) view.setUint32(88, Number(data.dwBufferOverrunErr), true);
  // 0x5c: u32
  if (data?.dwCompressionRatioIn !== undefined) view.setUint32(92, Number(data.dwCompressionRatioIn), true);
  // 0x60: u32
  if (data?.dwCompressionRatioOut !== undefined) view.setUint32(96, Number(data.dwCompressionRatioOut), true);
  // 0x64: u32
  if (data?.dwTotalErrors !== undefined) view.setUint32(100, Number(data.dwTotalErrors), true);
  // 0x68: u64
  if (data?.ullBytesXmited !== undefined) view.setBigUint64(104, BigInt(data.ullBytesXmited), true);
  // 0x70: u64
  if (data?.ullBytesRcved !== undefined) view.setBigUint64(112, BigInt(data.ullBytesRcved), true);
  // 0x78: u64
  if (data?.ullFramesXmited !== undefined) view.setBigUint64(120, BigInt(data.ullFramesXmited), true);
  // 0x80: u64
  if (data?.ullFramesRcved !== undefined) view.setBigUint64(128, BigInt(data.ullFramesRcved), true);
  // 0x88: u64
  if (data?.ullBytesTxUncompressed !== undefined) view.setBigUint64(136, BigInt(data.ullBytesTxUncompressed), true);
  // 0x90: u64
  if (data?.ullBytesTxCompressed !== undefined) view.setBigUint64(144, BigInt(data.ullBytesTxCompressed), true);
  // 0x98: u64
  if (data?.ullBytesRcvUncompressed !== undefined) view.setBigUint64(152, BigInt(data.ullBytesRcvUncompressed), true);
  // 0xa0: u64
  if (data?.ullBytesRcvCompressed !== undefined) view.setBigUint64(160, BigInt(data.ullBytesRcvCompressed), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_NBFCP_INFO (size: 16)
 */
export interface PPP_NBFCP_INFO {
  /** u32 */
  dwError: number;
  /** array */
  wszWksta: Deno.PointerValue | null;
}

export const sizeofPPP_NBFCP_INFO = 16;

export function allocPPP_NBFCP_INFO(data?: Partial<PPP_NBFCP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_NBFCP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszWksta !== undefined) view.setBigUint64(8, data.wszWksta === null ? 0n : BigInt(util.toPointer(data.wszWksta)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_IPCP_INFO (size: 24)
 */
export interface PPP_IPCP_INFO {
  /** u32 */
  dwError: number;
  /** array */
  wszAddress: Deno.PointerValue | null;
  /** array */
  wszRemoteAddress: Deno.PointerValue | null;
}

export const sizeofPPP_IPCP_INFO = 24;

export function allocPPP_IPCP_INFO(data?: Partial<PPP_IPCP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_IPCP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszAddress !== undefined) view.setBigUint64(8, data.wszAddress === null ? 0n : BigInt(util.toPointer(data.wszAddress)), true);
  // 0x10: pointer
  if (data?.wszRemoteAddress !== undefined) view.setBigUint64(16, data.wszRemoteAddress === null ? 0n : BigInt(util.toPointer(data.wszRemoteAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_IPCP_INFO2 (size: 32)
 */
export interface PPP_IPCP_INFO2 {
  /** u32 */
  dwError: number;
  /** array */
  wszAddress: Deno.PointerValue | null;
  /** array */
  wszRemoteAddress: Deno.PointerValue | null;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwRemoteOptions: number;
}

export const sizeofPPP_IPCP_INFO2 = 32;

export function allocPPP_IPCP_INFO2(data?: Partial<PPP_IPCP_INFO2>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_IPCP_INFO2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszAddress !== undefined) view.setBigUint64(8, data.wszAddress === null ? 0n : BigInt(util.toPointer(data.wszAddress)), true);
  // 0x10: pointer
  if (data?.wszRemoteAddress !== undefined) view.setBigUint64(16, data.wszRemoteAddress === null ? 0n : BigInt(util.toPointer(data.wszRemoteAddress)), true);
  // 0x18: u32
  if (data?.dwOptions !== undefined) view.setUint32(24, Number(data.dwOptions), true);
  // 0x1c: u32
  if (data?.dwRemoteOptions !== undefined) view.setUint32(28, Number(data.dwRemoteOptions), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_IPXCP_INFO (size: 16)
 */
export interface PPP_IPXCP_INFO {
  /** u32 */
  dwError: number;
  /** array */
  wszAddress: Deno.PointerValue | null;
}

export const sizeofPPP_IPXCP_INFO = 16;

export function allocPPP_IPXCP_INFO(data?: Partial<PPP_IPXCP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_IPXCP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszAddress !== undefined) view.setBigUint64(8, data.wszAddress === null ? 0n : BigInt(util.toPointer(data.wszAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_ATCP_INFO (size: 16)
 */
export interface PPP_ATCP_INFO {
  /** u32 */
  dwError: number;
  /** array */
  wszAddress: Deno.PointerValue | null;
}

export const sizeofPPP_ATCP_INFO = 16;

export function allocPPP_ATCP_INFO(data?: Partial<PPP_ATCP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_ATCP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszAddress !== undefined) view.setBigUint64(8, data.wszAddress === null ? 0n : BigInt(util.toPointer(data.wszAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_IPV6_CP_INFO (size: 56)
 */
export interface PPP_IPV6_CP_INFO {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwSize: number;
  /** u32 */
  dwError: number;
  /** array */
  bInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bRemoteInterfaceIdentifier: Deno.PointerValue | null;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwRemoteOptions: number;
  /** array */
  bPrefix: Deno.PointerValue | null;
  /** u32 */
  dwPrefixLength: number;
}

export const sizeofPPP_IPV6_CP_INFO = 56;

export function allocPPP_IPV6_CP_INFO(data?: Partial<PPP_IPV6_CP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_IPV6_CP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.bInterfaceIdentifier !== undefined) view.setBigUint64(16, data.bInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bInterfaceIdentifier)), true);
  // 0x18: pointer
  if (data?.bRemoteInterfaceIdentifier !== undefined) view.setBigUint64(24, data.bRemoteInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bRemoteInterfaceIdentifier)), true);
  // 0x20: u32
  if (data?.dwOptions !== undefined) view.setUint32(32, Number(data.dwOptions), true);
  // 0x24: u32
  if (data?.dwRemoteOptions !== undefined) view.setUint32(36, Number(data.dwRemoteOptions), true);
  // 0x28: pointer
  if (data?.bPrefix !== undefined) view.setBigUint64(40, data.bPrefix === null ? 0n : BigInt(util.toPointer(data.bPrefix)), true);
  // 0x30: u32
  if (data?.dwPrefixLength !== undefined) view.setUint32(48, Number(data.dwPrefixLength), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_INFO (size: 32)
 */
export interface PPP_INFO {
  /** Windows.Win32.NetworkManagement.Rras.PPP_NBFCP_INFO */
  nbf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_IPCP_INFO */
  ip: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_IPXCP_INFO */
  ipx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_ATCP_INFO */
  at: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPPP_INFO = 32;

export function allocPPP_INFO(data?: Partial<PPP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nbf !== undefined) view.setBigUint64(0, data.nbf === null ? 0n : BigInt(util.toPointer(data.nbf)), true);
  // 0x08: pointer
  if (data?.ip !== undefined) view.setBigUint64(8, data.ip === null ? 0n : BigInt(util.toPointer(data.ip)), true);
  // 0x10: pointer
  if (data?.ipx !== undefined) view.setBigUint64(16, data.ipx === null ? 0n : BigInt(util.toPointer(data.ipx)), true);
  // 0x18: pointer
  if (data?.at !== undefined) view.setBigUint64(24, data.at === null ? 0n : BigInt(util.toPointer(data.at)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_CCP_INFO (size: 24)
 */
export interface PPP_CCP_INFO {
  /** u32 */
  dwError: number;
  /** u32 */
  dwCompressionAlgorithm: number;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwRemoteCompressionAlgorithm: number;
  /** u32 */
  dwRemoteOptions: number;
}

export const sizeofPPP_CCP_INFO = 24;

export function allocPPP_CCP_INFO(data?: Partial<PPP_CCP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_CCP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwCompressionAlgorithm !== undefined) view.setUint32(4, Number(data.dwCompressionAlgorithm), true);
  // 0x08: u32
  if (data?.dwOptions !== undefined) view.setUint32(8, Number(data.dwOptions), true);
  // 0x0c: u32
  if (data?.dwRemoteCompressionAlgorithm !== undefined) view.setUint32(12, Number(data.dwRemoteCompressionAlgorithm), true);
  // 0x10: u32
  if (data?.dwRemoteOptions !== undefined) view.setUint32(16, Number(data.dwRemoteOptions), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_LCP_INFO (size: 48)
 */
export interface PPP_LCP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP */
  dwAuthenticationProtocol: PPP_LCP;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP_INFO_AUTH_DATA */
  dwAuthenticationData: PPP_LCP_INFO_AUTH_DATA;
  /** u32 */
  dwRemoteAuthenticationProtocol: number;
  /** u32 */
  dwRemoteAuthenticationData: number;
  /** u32 */
  dwTerminateReason: number;
  /** u32 */
  dwRemoteTerminateReason: number;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwRemoteOptions: number;
  /** u32 */
  dwEapTypeId: number;
  /** u32 */
  dwRemoteEapTypeId: number;
}

export const sizeofPPP_LCP_INFO = 48;

export function allocPPP_LCP_INFO(data?: Partial<PPP_LCP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_LCP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwAuthenticationProtocol !== undefined) view.setUint32(4, Number(data.dwAuthenticationProtocol), true);
  // 0x08: u32
  if (data?.dwAuthenticationData !== undefined) view.setUint32(8, Number(data.dwAuthenticationData), true);
  // 0x0c: u32
  if (data?.dwRemoteAuthenticationProtocol !== undefined) view.setUint32(12, Number(data.dwRemoteAuthenticationProtocol), true);
  // 0x10: u32
  if (data?.dwRemoteAuthenticationData !== undefined) view.setUint32(16, Number(data.dwRemoteAuthenticationData), true);
  // 0x14: u32
  if (data?.dwTerminateReason !== undefined) view.setUint32(20, Number(data.dwTerminateReason), true);
  // 0x18: u32
  if (data?.dwRemoteTerminateReason !== undefined) view.setUint32(24, Number(data.dwRemoteTerminateReason), true);
  // 0x1c: u32
  if (data?.dwOptions !== undefined) view.setUint32(28, Number(data.dwOptions), true);
  // 0x20: u32
  if (data?.dwRemoteOptions !== undefined) view.setUint32(32, Number(data.dwRemoteOptions), true);
  // 0x24: u32
  if (data?.dwEapTypeId !== undefined) view.setUint32(36, Number(data.dwEapTypeId), true);
  // 0x28: u32
  if (data?.dwRemoteEapTypeId !== undefined) view.setUint32(40, Number(data.dwRemoteEapTypeId), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_INFO_2 (size: 48)
 */
export interface PPP_INFO_2 {
  /** Windows.Win32.NetworkManagement.Rras.PPP_NBFCP_INFO */
  nbf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_IPCP_INFO2 */
  ip: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_IPXCP_INFO */
  ipx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_ATCP_INFO */
  at: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_CCP_INFO */
  ccp: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP_INFO */
  lcp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPPP_INFO_2 = 48;

export function allocPPP_INFO_2(data?: Partial<PPP_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nbf !== undefined) view.setBigUint64(0, data.nbf === null ? 0n : BigInt(util.toPointer(data.nbf)), true);
  // 0x08: pointer
  if (data?.ip !== undefined) view.setBigUint64(8, data.ip === null ? 0n : BigInt(util.toPointer(data.ip)), true);
  // 0x10: pointer
  if (data?.ipx !== undefined) view.setBigUint64(16, data.ipx === null ? 0n : BigInt(util.toPointer(data.ipx)), true);
  // 0x18: pointer
  if (data?.at !== undefined) view.setBigUint64(24, data.at === null ? 0n : BigInt(util.toPointer(data.at)), true);
  // 0x20: pointer
  if (data?.ccp !== undefined) view.setBigUint64(32, data.ccp === null ? 0n : BigInt(util.toPointer(data.ccp)), true);
  // 0x28: pointer
  if (data?.lcp !== undefined) view.setBigUint64(40, data.lcp === null ? 0n : BigInt(util.toPointer(data.lcp)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_INFO_3 (size: 40)
 */
export interface PPP_INFO_3 {
  /** Windows.Win32.NetworkManagement.Rras.PPP_NBFCP_INFO */
  nbf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_IPCP_INFO2 */
  ip: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_IPV6_CP_INFO */
  ipv6: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_CCP_INFO */
  ccp: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP_INFO */
  lcp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPPP_INFO_3 = 40;

export function allocPPP_INFO_3(data?: Partial<PPP_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nbf !== undefined) view.setBigUint64(0, data.nbf === null ? 0n : BigInt(util.toPointer(data.nbf)), true);
  // 0x08: pointer
  if (data?.ip !== undefined) view.setBigUint64(8, data.ip === null ? 0n : BigInt(util.toPointer(data.ip)), true);
  // 0x10: pointer
  if (data?.ipv6 !== undefined) view.setBigUint64(16, data.ipv6 === null ? 0n : BigInt(util.toPointer(data.ipv6)), true);
  // 0x18: pointer
  if (data?.ccp !== undefined) view.setBigUint64(24, data.ccp === null ? 0n : BigInt(util.toPointer(data.ccp)), true);
  // 0x20: pointer
  if (data?.lcp !== undefined) view.setBigUint64(32, data.lcp === null ? 0n : BigInt(util.toPointer(data.lcp)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_CONNECTION_0 (size: 64)
 */
export interface RAS_CONNECTION_0 {
  /** Windows.Win32.Foundation.HANDLE */
  hConnection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hInterface: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwConnectDuration: number;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_INTERFACE_TYPE */
  dwInterfaceType: ROUTER_INTERFACE_TYPE;
  /** Windows.Win32.NetworkManagement.Rras.RAS_FLAGS */
  dwConnectionFlags: RAS_FLAGS;
  /** array */
  wszInterfaceName: Deno.PointerValue | null;
  /** array */
  wszUserName: Deno.PointerValue | null;
  /** array */
  wszLogonDomain: Deno.PointerValue | null;
  /** array */
  wszRemoteComputer: Deno.PointerValue | null;
}

export const sizeofRAS_CONNECTION_0 = 64;

export function allocRAS_CONNECTION_0(data?: Partial<RAS_CONNECTION_0>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_CONNECTION_0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hConnection !== undefined) view.setBigUint64(0, data.hConnection === null ? 0n : BigInt(util.toPointer(data.hConnection)), true);
  // 0x08: pointer
  if (data?.hInterface !== undefined) view.setBigUint64(8, data.hInterface === null ? 0n : BigInt(util.toPointer(data.hInterface)), true);
  // 0x10: u32
  if (data?.dwConnectDuration !== undefined) view.setUint32(16, Number(data.dwConnectDuration), true);
  // 0x14: i32
  if (data?.dwInterfaceType !== undefined) view.setInt32(20, Number(data.dwInterfaceType), true);
  // 0x18: u32
  if (data?.dwConnectionFlags !== undefined) view.setUint32(24, Number(data.dwConnectionFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.wszInterfaceName !== undefined) view.setBigUint64(32, data.wszInterfaceName === null ? 0n : BigInt(util.toPointer(data.wszInterfaceName)), true);
  // 0x28: pointer
  if (data?.wszUserName !== undefined) view.setBigUint64(40, data.wszUserName === null ? 0n : BigInt(util.toPointer(data.wszUserName)), true);
  // 0x30: pointer
  if (data?.wszLogonDomain !== undefined) view.setBigUint64(48, data.wszLogonDomain === null ? 0n : BigInt(util.toPointer(data.wszLogonDomain)), true);
  // 0x38: pointer
  if (data?.wszRemoteComputer !== undefined) view.setBigUint64(56, data.wszRemoteComputer === null ? 0n : BigInt(util.toPointer(data.wszRemoteComputer)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_CONNECTION_1 (size: 72)
 */
export interface RAS_CONNECTION_1 {
  /** Windows.Win32.Foundation.HANDLE */
  hConnection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hInterface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_INFO */
  PppInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBytesXmited: number;
  /** u32 */
  dwBytesRcved: number;
  /** u32 */
  dwFramesXmited: number;
  /** u32 */
  dwFramesRcved: number;
  /** u32 */
  dwCrcErr: number;
  /** u32 */
  dwTimeoutErr: number;
  /** u32 */
  dwAlignmentErr: number;
  /** u32 */
  dwHardwareOverrunErr: number;
  /** u32 */
  dwFramingErr: number;
  /** u32 */
  dwBufferOverrunErr: number;
  /** u32 */
  dwCompressionRatioIn: number;
  /** u32 */
  dwCompressionRatioOut: number;
}

export const sizeofRAS_CONNECTION_1 = 72;

export function allocRAS_CONNECTION_1(data?: Partial<RAS_CONNECTION_1>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_CONNECTION_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hConnection !== undefined) view.setBigUint64(0, data.hConnection === null ? 0n : BigInt(util.toPointer(data.hConnection)), true);
  // 0x08: pointer
  if (data?.hInterface !== undefined) view.setBigUint64(8, data.hInterface === null ? 0n : BigInt(util.toPointer(data.hInterface)), true);
  // 0x10: pointer
  if (data?.PppInfo !== undefined) view.setBigUint64(16, data.PppInfo === null ? 0n : BigInt(util.toPointer(data.PppInfo)), true);
  // 0x18: u32
  if (data?.dwBytesXmited !== undefined) view.setUint32(24, Number(data.dwBytesXmited), true);
  // 0x1c: u32
  if (data?.dwBytesRcved !== undefined) view.setUint32(28, Number(data.dwBytesRcved), true);
  // 0x20: u32
  if (data?.dwFramesXmited !== undefined) view.setUint32(32, Number(data.dwFramesXmited), true);
  // 0x24: u32
  if (data?.dwFramesRcved !== undefined) view.setUint32(36, Number(data.dwFramesRcved), true);
  // 0x28: u32
  if (data?.dwCrcErr !== undefined) view.setUint32(40, Number(data.dwCrcErr), true);
  // 0x2c: u32
  if (data?.dwTimeoutErr !== undefined) view.setUint32(44, Number(data.dwTimeoutErr), true);
  // 0x30: u32
  if (data?.dwAlignmentErr !== undefined) view.setUint32(48, Number(data.dwAlignmentErr), true);
  // 0x34: u32
  if (data?.dwHardwareOverrunErr !== undefined) view.setUint32(52, Number(data.dwHardwareOverrunErr), true);
  // 0x38: u32
  if (data?.dwFramingErr !== undefined) view.setUint32(56, Number(data.dwFramingErr), true);
  // 0x3c: u32
  if (data?.dwBufferOverrunErr !== undefined) view.setUint32(60, Number(data.dwBufferOverrunErr), true);
  // 0x40: u32
  if (data?.dwCompressionRatioIn !== undefined) view.setUint32(64, Number(data.dwCompressionRatioIn), true);
  // 0x44: u32
  if (data?.dwCompressionRatioOut !== undefined) view.setUint32(68, Number(data.dwCompressionRatioOut), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_CONNECTION_2 (size: 40)
 */
export interface RAS_CONNECTION_2 {
  /** Windows.Win32.Foundation.HANDLE */
  hConnection: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszUserName: Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_INTERFACE_TYPE */
  dwInterfaceType: ROUTER_INTERFACE_TYPE;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_INFO_2 */
  PppInfo2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRAS_CONNECTION_2 = 40;

export function allocRAS_CONNECTION_2(data?: Partial<RAS_CONNECTION_2>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_CONNECTION_2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hConnection !== undefined) view.setBigUint64(0, data.hConnection === null ? 0n : BigInt(util.toPointer(data.hConnection)), true);
  // 0x08: pointer
  if (data?.wszUserName !== undefined) view.setBigUint64(8, data.wszUserName === null ? 0n : BigInt(util.toPointer(data.wszUserName)), true);
  // 0x10: i32
  if (data?.dwInterfaceType !== undefined) view.setInt32(16, Number(data.dwInterfaceType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.guid !== undefined) view.setBigUint64(24, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x20: pointer
  if (data?.PppInfo2 !== undefined) view.setBigUint64(32, data.PppInfo2 === null ? 0n : BigInt(util.toPointer(data.PppInfo2)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_CONNECTION_3 (size: 64)
 */
export interface RAS_CONNECTION_3 {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hConnection: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszUserName: Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_INTERFACE_TYPE */
  dwInterfaceType: ROUTER_INTERFACE_TYPE;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPP_INFO_3 */
  PppInfo3: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RAS_QUARANTINE_STATE */
  rasQuarState: RAS_QUARANTINE_STATE;
  /** Windows.Win32.Foundation.FILETIME */
  timer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRAS_CONNECTION_3 = 64;

export function allocRAS_CONNECTION_3(data?: Partial<RAS_CONNECTION_3>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_CONNECTION_3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  // 0x08: pointer
  if (data?.hConnection !== undefined) view.setBigUint64(8, data.hConnection === null ? 0n : BigInt(util.toPointer(data.hConnection)), true);
  // 0x10: pointer
  if (data?.wszUserName !== undefined) view.setBigUint64(16, data.wszUserName === null ? 0n : BigInt(util.toPointer(data.wszUserName)), true);
  // 0x18: i32
  if (data?.dwInterfaceType !== undefined) view.setInt32(24, Number(data.dwInterfaceType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.guid !== undefined) view.setBigUint64(32, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x28: pointer
  if (data?.PppInfo3 !== undefined) view.setBigUint64(40, data.PppInfo3 === null ? 0n : BigInt(util.toPointer(data.PppInfo3)), true);
  // 0x30: i32
  if (data?.rasQuarState !== undefined) view.setInt32(48, Number(data.rasQuarState), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.timer !== undefined) view.setBigUint64(56, data.timer === null ? 0n : BigInt(util.toPointer(data.timer)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_USER_0 (size: 16)
 */
export interface RAS_USER_0 {
  /** u8 */
  bfPrivilege: number;
  /** array */
  wszPhoneNumber: Deno.PointerValue | null;
}

export const sizeofRAS_USER_0 = 16;

export function allocRAS_USER_0(data?: Partial<RAS_USER_0>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_USER_0);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bfPrivilege !== undefined) view.setUint8(0, Number(data.bfPrivilege));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.wszPhoneNumber !== undefined) view.setBigUint64(8, data.wszPhoneNumber === null ? 0n : BigInt(util.toPointer(data.wszPhoneNumber)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_USER_1 (size: 24)
 */
export interface RAS_USER_1 {
  /** u8 */
  bfPrivilege: number;
  /** array */
  wszPhoneNumber: Deno.PointerValue | null;
  /** u8 */
  bfPrivilege2: number;
}

export const sizeofRAS_USER_1 = 24;

export function allocRAS_USER_1(data?: Partial<RAS_USER_1>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_USER_1);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bfPrivilege !== undefined) view.setUint8(0, Number(data.bfPrivilege));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.wszPhoneNumber !== undefined) view.setBigUint64(8, data.wszPhoneNumber === null ? 0n : BigInt(util.toPointer(data.wszPhoneNumber)), true);
  // 0x10: u8
  if (data?.bfPrivilege2 !== undefined) view.setUint8(16, Number(data.bfPrivilege2));
  // 0x11: pad7
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_FILTER_0 (size: 8)
 */
export interface MPR_FILTER_0 {
  /** Windows.Win32.Foundation.BOOL */
  fEnable: boolean;
}

export const sizeofMPR_FILTER_0 = 8;

export function allocMPR_FILTER_0(data?: Partial<MPR_FILTER_0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_FILTER_0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fEnable !== undefined) view.setInt32(0, Number(data.fEnable), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPRAPI_OBJECT_HEADER (size: 8)
 */
export interface MPRAPI_OBJECT_HEADER {
  /** u8 */
  revision: number;
  /** u8 */
  type: number;
  /** u16 */
  size: number;
}

export const sizeofMPRAPI_OBJECT_HEADER = 8;

export function allocMPRAPI_OBJECT_HEADER(data?: Partial<MPRAPI_OBJECT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMPRAPI_OBJECT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.revision !== undefined) view.setUint8(0, Number(data.revision));
  // 0x01: u8
  if (data?.type !== undefined) view.setUint8(1, Number(data.type));
  // 0x02: u16
  if (data?.size !== undefined) view.setUint16(2, Number(data.size), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_PROJECTION_INFO (size: 152)
 */
export interface PPP_PROJECTION_INFO {
  /** u32 */
  dwIPv4NegotiationError: number;
  /** array */
  wszAddress: Deno.PointerValue | null;
  /** array */
  wszRemoteAddress: Deno.PointerValue | null;
  /** u32 */
  dwIPv4Options: number;
  /** u32 */
  dwIPv4RemoteOptions: number;
  /** u64 */
  IPv4SubInterfaceIndex: Deno.PointerValue;
  /** u32 */
  dwIPv6NegotiationError: number;
  /** array */
  bInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bRemoteInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bPrefix: Deno.PointerValue | null;
  /** u32 */
  dwPrefixLength: number;
  /** u64 */
  IPv6SubInterfaceIndex: Deno.PointerValue;
  /** u32 */
  dwLcpError: number;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP */
  dwAuthenticationProtocol: PPP_LCP;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP_INFO_AUTH_DATA */
  dwAuthenticationData: PPP_LCP_INFO_AUTH_DATA;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP */
  dwRemoteAuthenticationProtocol: PPP_LCP;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP_INFO_AUTH_DATA */
  dwRemoteAuthenticationData: PPP_LCP_INFO_AUTH_DATA;
  /** u32 */
  dwLcpTerminateReason: number;
  /** u32 */
  dwLcpRemoteTerminateReason: number;
  /** u32 */
  dwLcpOptions: number;
  /** u32 */
  dwLcpRemoteOptions: number;
  /** u32 */
  dwEapTypeId: number;
  /** u32 */
  dwRemoteEapTypeId: number;
  /** u32 */
  dwCcpError: number;
  /** u32 */
  dwCompressionAlgorithm: number;
  /** u32 */
  dwCcpOptions: number;
  /** u32 */
  dwRemoteCompressionAlgorithm: number;
  /** u32 */
  dwCcpRemoteOptions: number;
}

export const sizeofPPP_PROJECTION_INFO = 152;

export function allocPPP_PROJECTION_INFO(data?: Partial<PPP_PROJECTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_PROJECTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIPv4NegotiationError !== undefined) view.setUint32(0, Number(data.dwIPv4NegotiationError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszAddress !== undefined) view.setBigUint64(8, data.wszAddress === null ? 0n : BigInt(util.toPointer(data.wszAddress)), true);
  // 0x10: pointer
  if (data?.wszRemoteAddress !== undefined) view.setBigUint64(16, data.wszRemoteAddress === null ? 0n : BigInt(util.toPointer(data.wszRemoteAddress)), true);
  // 0x18: u32
  if (data?.dwIPv4Options !== undefined) view.setUint32(24, Number(data.dwIPv4Options), true);
  // 0x1c: u32
  if (data?.dwIPv4RemoteOptions !== undefined) view.setUint32(28, Number(data.dwIPv4RemoteOptions), true);
  // 0x20: u64
  if (data?.IPv4SubInterfaceIndex !== undefined) view.setBigUint64(32, BigInt(data.IPv4SubInterfaceIndex), true);
  // 0x28: u32
  if (data?.dwIPv6NegotiationError !== undefined) view.setUint32(40, Number(data.dwIPv6NegotiationError), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.bInterfaceIdentifier !== undefined) view.setBigUint64(48, data.bInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bInterfaceIdentifier)), true);
  // 0x38: pointer
  if (data?.bRemoteInterfaceIdentifier !== undefined) view.setBigUint64(56, data.bRemoteInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bRemoteInterfaceIdentifier)), true);
  // 0x40: pointer
  if (data?.bPrefix !== undefined) view.setBigUint64(64, data.bPrefix === null ? 0n : BigInt(util.toPointer(data.bPrefix)), true);
  // 0x48: u32
  if (data?.dwPrefixLength !== undefined) view.setUint32(72, Number(data.dwPrefixLength), true);
  // 0x4c: pad4
  // 0x50: u64
  if (data?.IPv6SubInterfaceIndex !== undefined) view.setBigUint64(80, BigInt(data.IPv6SubInterfaceIndex), true);
  // 0x58: u32
  if (data?.dwLcpError !== undefined) view.setUint32(88, Number(data.dwLcpError), true);
  // 0x5c: u32
  if (data?.dwAuthenticationProtocol !== undefined) view.setUint32(92, Number(data.dwAuthenticationProtocol), true);
  // 0x60: u32
  if (data?.dwAuthenticationData !== undefined) view.setUint32(96, Number(data.dwAuthenticationData), true);
  // 0x64: u32
  if (data?.dwRemoteAuthenticationProtocol !== undefined) view.setUint32(100, Number(data.dwRemoteAuthenticationProtocol), true);
  // 0x68: u32
  if (data?.dwRemoteAuthenticationData !== undefined) view.setUint32(104, Number(data.dwRemoteAuthenticationData), true);
  // 0x6c: u32
  if (data?.dwLcpTerminateReason !== undefined) view.setUint32(108, Number(data.dwLcpTerminateReason), true);
  // 0x70: u32
  if (data?.dwLcpRemoteTerminateReason !== undefined) view.setUint32(112, Number(data.dwLcpRemoteTerminateReason), true);
  // 0x74: u32
  if (data?.dwLcpOptions !== undefined) view.setUint32(116, Number(data.dwLcpOptions), true);
  // 0x78: u32
  if (data?.dwLcpRemoteOptions !== undefined) view.setUint32(120, Number(data.dwLcpRemoteOptions), true);
  // 0x7c: u32
  if (data?.dwEapTypeId !== undefined) view.setUint32(124, Number(data.dwEapTypeId), true);
  // 0x80: u32
  if (data?.dwRemoteEapTypeId !== undefined) view.setUint32(128, Number(data.dwRemoteEapTypeId), true);
  // 0x84: u32
  if (data?.dwCcpError !== undefined) view.setUint32(132, Number(data.dwCcpError), true);
  // 0x88: u32
  if (data?.dwCompressionAlgorithm !== undefined) view.setUint32(136, Number(data.dwCompressionAlgorithm), true);
  // 0x8c: u32
  if (data?.dwCcpOptions !== undefined) view.setUint32(140, Number(data.dwCcpOptions), true);
  // 0x90: u32
  if (data?.dwRemoteCompressionAlgorithm !== undefined) view.setUint32(144, Number(data.dwRemoteCompressionAlgorithm), true);
  // 0x94: u32
  if (data?.dwCcpRemoteOptions !== undefined) view.setUint32(148, Number(data.dwCcpRemoteOptions), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPP_PROJECTION_INFO2 (size: 160)
 */
export interface PPP_PROJECTION_INFO2 {
  /** u32 */
  dwIPv4NegotiationError: number;
  /** array */
  wszAddress: Deno.PointerValue | null;
  /** array */
  wszRemoteAddress: Deno.PointerValue | null;
  /** u32 */
  dwIPv4Options: number;
  /** u32 */
  dwIPv4RemoteOptions: number;
  /** u64 */
  IPv4SubInterfaceIndex: Deno.PointerValue;
  /** u32 */
  dwIPv6NegotiationError: number;
  /** array */
  bInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bRemoteInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bPrefix: Deno.PointerValue | null;
  /** u32 */
  dwPrefixLength: number;
  /** u64 */
  IPv6SubInterfaceIndex: Deno.PointerValue;
  /** u32 */
  dwLcpError: number;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP */
  dwAuthenticationProtocol: PPP_LCP;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP_INFO_AUTH_DATA */
  dwAuthenticationData: PPP_LCP_INFO_AUTH_DATA;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP */
  dwRemoteAuthenticationProtocol: PPP_LCP;
  /** Windows.Win32.NetworkManagement.Rras.PPP_LCP_INFO_AUTH_DATA */
  dwRemoteAuthenticationData: PPP_LCP_INFO_AUTH_DATA;
  /** u32 */
  dwLcpTerminateReason: number;
  /** u32 */
  dwLcpRemoteTerminateReason: number;
  /** u32 */
  dwLcpOptions: number;
  /** u32 */
  dwLcpRemoteOptions: number;
  /** u32 */
  dwEapTypeId: number;
  /** u32 */
  dwEmbeddedEAPTypeId: number;
  /** u32 */
  dwRemoteEapTypeId: number;
  /** u32 */
  dwCcpError: number;
  /** u32 */
  dwCompressionAlgorithm: number;
  /** u32 */
  dwCcpOptions: number;
  /** u32 */
  dwRemoteCompressionAlgorithm: number;
  /** u32 */
  dwCcpRemoteOptions: number;
}

export const sizeofPPP_PROJECTION_INFO2 = 160;

export function allocPPP_PROJECTION_INFO2(data?: Partial<PPP_PROJECTION_INFO2>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_PROJECTION_INFO2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIPv4NegotiationError !== undefined) view.setUint32(0, Number(data.dwIPv4NegotiationError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszAddress !== undefined) view.setBigUint64(8, data.wszAddress === null ? 0n : BigInt(util.toPointer(data.wszAddress)), true);
  // 0x10: pointer
  if (data?.wszRemoteAddress !== undefined) view.setBigUint64(16, data.wszRemoteAddress === null ? 0n : BigInt(util.toPointer(data.wszRemoteAddress)), true);
  // 0x18: u32
  if (data?.dwIPv4Options !== undefined) view.setUint32(24, Number(data.dwIPv4Options), true);
  // 0x1c: u32
  if (data?.dwIPv4RemoteOptions !== undefined) view.setUint32(28, Number(data.dwIPv4RemoteOptions), true);
  // 0x20: u64
  if (data?.IPv4SubInterfaceIndex !== undefined) view.setBigUint64(32, BigInt(data.IPv4SubInterfaceIndex), true);
  // 0x28: u32
  if (data?.dwIPv6NegotiationError !== undefined) view.setUint32(40, Number(data.dwIPv6NegotiationError), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.bInterfaceIdentifier !== undefined) view.setBigUint64(48, data.bInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bInterfaceIdentifier)), true);
  // 0x38: pointer
  if (data?.bRemoteInterfaceIdentifier !== undefined) view.setBigUint64(56, data.bRemoteInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bRemoteInterfaceIdentifier)), true);
  // 0x40: pointer
  if (data?.bPrefix !== undefined) view.setBigUint64(64, data.bPrefix === null ? 0n : BigInt(util.toPointer(data.bPrefix)), true);
  // 0x48: u32
  if (data?.dwPrefixLength !== undefined) view.setUint32(72, Number(data.dwPrefixLength), true);
  // 0x4c: pad4
  // 0x50: u64
  if (data?.IPv6SubInterfaceIndex !== undefined) view.setBigUint64(80, BigInt(data.IPv6SubInterfaceIndex), true);
  // 0x58: u32
  if (data?.dwLcpError !== undefined) view.setUint32(88, Number(data.dwLcpError), true);
  // 0x5c: u32
  if (data?.dwAuthenticationProtocol !== undefined) view.setUint32(92, Number(data.dwAuthenticationProtocol), true);
  // 0x60: u32
  if (data?.dwAuthenticationData !== undefined) view.setUint32(96, Number(data.dwAuthenticationData), true);
  // 0x64: u32
  if (data?.dwRemoteAuthenticationProtocol !== undefined) view.setUint32(100, Number(data.dwRemoteAuthenticationProtocol), true);
  // 0x68: u32
  if (data?.dwRemoteAuthenticationData !== undefined) view.setUint32(104, Number(data.dwRemoteAuthenticationData), true);
  // 0x6c: u32
  if (data?.dwLcpTerminateReason !== undefined) view.setUint32(108, Number(data.dwLcpTerminateReason), true);
  // 0x70: u32
  if (data?.dwLcpRemoteTerminateReason !== undefined) view.setUint32(112, Number(data.dwLcpRemoteTerminateReason), true);
  // 0x74: u32
  if (data?.dwLcpOptions !== undefined) view.setUint32(116, Number(data.dwLcpOptions), true);
  // 0x78: u32
  if (data?.dwLcpRemoteOptions !== undefined) view.setUint32(120, Number(data.dwLcpRemoteOptions), true);
  // 0x7c: u32
  if (data?.dwEapTypeId !== undefined) view.setUint32(124, Number(data.dwEapTypeId), true);
  // 0x80: u32
  if (data?.dwEmbeddedEAPTypeId !== undefined) view.setUint32(128, Number(data.dwEmbeddedEAPTypeId), true);
  // 0x84: u32
  if (data?.dwRemoteEapTypeId !== undefined) view.setUint32(132, Number(data.dwRemoteEapTypeId), true);
  // 0x88: u32
  if (data?.dwCcpError !== undefined) view.setUint32(136, Number(data.dwCcpError), true);
  // 0x8c: u32
  if (data?.dwCompressionAlgorithm !== undefined) view.setUint32(140, Number(data.dwCompressionAlgorithm), true);
  // 0x90: u32
  if (data?.dwCcpOptions !== undefined) view.setUint32(144, Number(data.dwCcpOptions), true);
  // 0x94: u32
  if (data?.dwRemoteCompressionAlgorithm !== undefined) view.setUint32(148, Number(data.dwRemoteCompressionAlgorithm), true);
  // 0x98: u32
  if (data?.dwCcpRemoteOptions !== undefined) view.setUint32(152, Number(data.dwCcpRemoteOptions), true);
  // 0x9c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.IKEV2_PROJECTION_INFO (size: 104)
 */
export interface IKEV2_PROJECTION_INFO {
  /** u32 */
  dwIPv4NegotiationError: number;
  /** array */
  wszAddress: Deno.PointerValue | null;
  /** array */
  wszRemoteAddress: Deno.PointerValue | null;
  /** u64 */
  IPv4SubInterfaceIndex: Deno.PointerValue;
  /** u32 */
  dwIPv6NegotiationError: number;
  /** array */
  bInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bRemoteInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bPrefix: Deno.PointerValue | null;
  /** u32 */
  dwPrefixLength: number;
  /** u64 */
  IPv6SubInterfaceIndex: Deno.PointerValue;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwAuthenticationProtocol: number;
  /** u32 */
  dwEapTypeId: number;
  /** u32 */
  dwCompressionAlgorithm: number;
  /** u32 */
  dwEncryptionMethod: number;
}

export const sizeofIKEV2_PROJECTION_INFO = 104;

export function allocIKEV2_PROJECTION_INFO(data?: Partial<IKEV2_PROJECTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEV2_PROJECTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIPv4NegotiationError !== undefined) view.setUint32(0, Number(data.dwIPv4NegotiationError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszAddress !== undefined) view.setBigUint64(8, data.wszAddress === null ? 0n : BigInt(util.toPointer(data.wszAddress)), true);
  // 0x10: pointer
  if (data?.wszRemoteAddress !== undefined) view.setBigUint64(16, data.wszRemoteAddress === null ? 0n : BigInt(util.toPointer(data.wszRemoteAddress)), true);
  // 0x18: u64
  if (data?.IPv4SubInterfaceIndex !== undefined) view.setBigUint64(24, BigInt(data.IPv4SubInterfaceIndex), true);
  // 0x20: u32
  if (data?.dwIPv6NegotiationError !== undefined) view.setUint32(32, Number(data.dwIPv6NegotiationError), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.bInterfaceIdentifier !== undefined) view.setBigUint64(40, data.bInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bInterfaceIdentifier)), true);
  // 0x30: pointer
  if (data?.bRemoteInterfaceIdentifier !== undefined) view.setBigUint64(48, data.bRemoteInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bRemoteInterfaceIdentifier)), true);
  // 0x38: pointer
  if (data?.bPrefix !== undefined) view.setBigUint64(56, data.bPrefix === null ? 0n : BigInt(util.toPointer(data.bPrefix)), true);
  // 0x40: u32
  if (data?.dwPrefixLength !== undefined) view.setUint32(64, Number(data.dwPrefixLength), true);
  // 0x44: pad4
  // 0x48: u64
  if (data?.IPv6SubInterfaceIndex !== undefined) view.setBigUint64(72, BigInt(data.IPv6SubInterfaceIndex), true);
  // 0x50: u32
  if (data?.dwOptions !== undefined) view.setUint32(80, Number(data.dwOptions), true);
  // 0x54: u32
  if (data?.dwAuthenticationProtocol !== undefined) view.setUint32(84, Number(data.dwAuthenticationProtocol), true);
  // 0x58: u32
  if (data?.dwEapTypeId !== undefined) view.setUint32(88, Number(data.dwEapTypeId), true);
  // 0x5c: u32
  if (data?.dwCompressionAlgorithm !== undefined) view.setUint32(92, Number(data.dwCompressionAlgorithm), true);
  // 0x60: u32
  if (data?.dwEncryptionMethod !== undefined) view.setUint32(96, Number(data.dwEncryptionMethod), true);
  // 0x64: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.IKEV2_PROJECTION_INFO2 (size: 104)
 */
export interface IKEV2_PROJECTION_INFO2 {
  /** u32 */
  dwIPv4NegotiationError: number;
  /** array */
  wszAddress: Deno.PointerValue | null;
  /** array */
  wszRemoteAddress: Deno.PointerValue | null;
  /** u64 */
  IPv4SubInterfaceIndex: Deno.PointerValue;
  /** u32 */
  dwIPv6NegotiationError: number;
  /** array */
  bInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bRemoteInterfaceIdentifier: Deno.PointerValue | null;
  /** array */
  bPrefix: Deno.PointerValue | null;
  /** u32 */
  dwPrefixLength: number;
  /** u64 */
  IPv6SubInterfaceIndex: Deno.PointerValue;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwAuthenticationProtocol: number;
  /** u32 */
  dwEapTypeId: number;
  /** u32 */
  dwEmbeddedEAPTypeId: number;
  /** u32 */
  dwCompressionAlgorithm: number;
  /** u32 */
  dwEncryptionMethod: number;
}

export const sizeofIKEV2_PROJECTION_INFO2 = 104;

export function allocIKEV2_PROJECTION_INFO2(data?: Partial<IKEV2_PROJECTION_INFO2>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEV2_PROJECTION_INFO2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIPv4NegotiationError !== undefined) view.setUint32(0, Number(data.dwIPv4NegotiationError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszAddress !== undefined) view.setBigUint64(8, data.wszAddress === null ? 0n : BigInt(util.toPointer(data.wszAddress)), true);
  // 0x10: pointer
  if (data?.wszRemoteAddress !== undefined) view.setBigUint64(16, data.wszRemoteAddress === null ? 0n : BigInt(util.toPointer(data.wszRemoteAddress)), true);
  // 0x18: u64
  if (data?.IPv4SubInterfaceIndex !== undefined) view.setBigUint64(24, BigInt(data.IPv4SubInterfaceIndex), true);
  // 0x20: u32
  if (data?.dwIPv6NegotiationError !== undefined) view.setUint32(32, Number(data.dwIPv6NegotiationError), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.bInterfaceIdentifier !== undefined) view.setBigUint64(40, data.bInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bInterfaceIdentifier)), true);
  // 0x30: pointer
  if (data?.bRemoteInterfaceIdentifier !== undefined) view.setBigUint64(48, data.bRemoteInterfaceIdentifier === null ? 0n : BigInt(util.toPointer(data.bRemoteInterfaceIdentifier)), true);
  // 0x38: pointer
  if (data?.bPrefix !== undefined) view.setBigUint64(56, data.bPrefix === null ? 0n : BigInt(util.toPointer(data.bPrefix)), true);
  // 0x40: u32
  if (data?.dwPrefixLength !== undefined) view.setUint32(64, Number(data.dwPrefixLength), true);
  // 0x44: pad4
  // 0x48: u64
  if (data?.IPv6SubInterfaceIndex !== undefined) view.setBigUint64(72, BigInt(data.IPv6SubInterfaceIndex), true);
  // 0x50: u32
  if (data?.dwOptions !== undefined) view.setUint32(80, Number(data.dwOptions), true);
  // 0x54: u32
  if (data?.dwAuthenticationProtocol !== undefined) view.setUint32(84, Number(data.dwAuthenticationProtocol), true);
  // 0x58: u32
  if (data?.dwEapTypeId !== undefined) view.setUint32(88, Number(data.dwEapTypeId), true);
  // 0x5c: u32
  if (data?.dwEmbeddedEAPTypeId !== undefined) view.setUint32(92, Number(data.dwEmbeddedEAPTypeId), true);
  // 0x60: u32
  if (data?.dwCompressionAlgorithm !== undefined) view.setUint32(96, Number(data.dwCompressionAlgorithm), true);
  // 0x64: u32
  if (data?.dwEncryptionMethod !== undefined) view.setUint32(100, Number(data.dwEncryptionMethod), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PROJECTION_INFO (size: 16)
 */
export interface PROJECTION_INFO {
  /** u8 */
  projectionInfoType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROJECTION_INFO = 16;

export function allocPROJECTION_INFO(data?: Partial<PROJECTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROJECTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.projectionInfoType !== undefined) view.setUint8(0, Number(data.projectionInfoType));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PROJECTION_INFO2 (size: 16)
 */
export interface PROJECTION_INFO2 {
  /** u8 */
  projectionInfoType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROJECTION_INFO2 = 16;

export function allocPROJECTION_INFO2(data?: Partial<PROJECTION_INFO2>): Uint8Array {
  const buf = new Uint8Array(sizeofPROJECTION_INFO2);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.projectionInfoType !== undefined) view.setUint8(0, Number(data.projectionInfoType));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_CONNECTION_EX (size: 176)
 */
export interface RAS_CONNECTION_EX {
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwConnectDuration: number;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_INTERFACE_TYPE */
  dwInterfaceType: ROUTER_INTERFACE_TYPE;
  /** Windows.Win32.NetworkManagement.Rras.RAS_FLAGS */
  dwConnectionFlags: RAS_FLAGS;
  /** array */
  wszInterfaceName: Deno.PointerValue | null;
  /** array */
  wszUserName: Deno.PointerValue | null;
  /** array */
  wszLogonDomain: Deno.PointerValue | null;
  /** array */
  wszRemoteComputer: Deno.PointerValue | null;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RAS_QUARANTINE_STATE */
  rasQuarState: RAS_QUARANTINE_STATE;
  /** Windows.Win32.Foundation.FILETIME */
  probationTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBytesXmited: number;
  /** u32 */
  dwBytesRcved: number;
  /** u32 */
  dwFramesXmited: number;
  /** u32 */
  dwFramesRcved: number;
  /** u32 */
  dwCrcErr: number;
  /** u32 */
  dwTimeoutErr: number;
  /** u32 */
  dwAlignmentErr: number;
  /** u32 */
  dwHardwareOverrunErr: number;
  /** u32 */
  dwFramingErr: number;
  /** u32 */
  dwBufferOverrunErr: number;
  /** u32 */
  dwCompressionRatioIn: number;
  /** u32 */
  dwCompressionRatioOut: number;
  /** u32 */
  dwNumSwitchOvers: number;
  /** array */
  wszRemoteEndpointAddress: Deno.PointerValue | null;
  /** array */
  wszLocalEndpointAddress: Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PROJECTION_INFO */
  ProjectionInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hConnection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hInterface: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRAS_CONNECTION_EX = 176;

export function allocRAS_CONNECTION_EX(data?: Partial<RAS_CONNECTION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_CONNECTION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.dwConnectDuration !== undefined) view.setUint32(8, Number(data.dwConnectDuration), true);
  // 0x0c: i32
  if (data?.dwInterfaceType !== undefined) view.setInt32(12, Number(data.dwInterfaceType), true);
  // 0x10: u32
  if (data?.dwConnectionFlags !== undefined) view.setUint32(16, Number(data.dwConnectionFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.wszInterfaceName !== undefined) view.setBigUint64(24, data.wszInterfaceName === null ? 0n : BigInt(util.toPointer(data.wszInterfaceName)), true);
  // 0x20: pointer
  if (data?.wszUserName !== undefined) view.setBigUint64(32, data.wszUserName === null ? 0n : BigInt(util.toPointer(data.wszUserName)), true);
  // 0x28: pointer
  if (data?.wszLogonDomain !== undefined) view.setBigUint64(40, data.wszLogonDomain === null ? 0n : BigInt(util.toPointer(data.wszLogonDomain)), true);
  // 0x30: pointer
  if (data?.wszRemoteComputer !== undefined) view.setBigUint64(48, data.wszRemoteComputer === null ? 0n : BigInt(util.toPointer(data.wszRemoteComputer)), true);
  // 0x38: pointer
  if (data?.guid !== undefined) view.setBigUint64(56, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x40: i32
  if (data?.rasQuarState !== undefined) view.setInt32(64, Number(data.rasQuarState), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.probationTime !== undefined) view.setBigUint64(72, data.probationTime === null ? 0n : BigInt(util.toPointer(data.probationTime)), true);
  // 0x50: u32
  if (data?.dwBytesXmited !== undefined) view.setUint32(80, Number(data.dwBytesXmited), true);
  // 0x54: u32
  if (data?.dwBytesRcved !== undefined) view.setUint32(84, Number(data.dwBytesRcved), true);
  // 0x58: u32
  if (data?.dwFramesXmited !== undefined) view.setUint32(88, Number(data.dwFramesXmited), true);
  // 0x5c: u32
  if (data?.dwFramesRcved !== undefined) view.setUint32(92, Number(data.dwFramesRcved), true);
  // 0x60: u32
  if (data?.dwCrcErr !== undefined) view.setUint32(96, Number(data.dwCrcErr), true);
  // 0x64: u32
  if (data?.dwTimeoutErr !== undefined) view.setUint32(100, Number(data.dwTimeoutErr), true);
  // 0x68: u32
  if (data?.dwAlignmentErr !== undefined) view.setUint32(104, Number(data.dwAlignmentErr), true);
  // 0x6c: u32
  if (data?.dwHardwareOverrunErr !== undefined) view.setUint32(108, Number(data.dwHardwareOverrunErr), true);
  // 0x70: u32
  if (data?.dwFramingErr !== undefined) view.setUint32(112, Number(data.dwFramingErr), true);
  // 0x74: u32
  if (data?.dwBufferOverrunErr !== undefined) view.setUint32(116, Number(data.dwBufferOverrunErr), true);
  // 0x78: u32
  if (data?.dwCompressionRatioIn !== undefined) view.setUint32(120, Number(data.dwCompressionRatioIn), true);
  // 0x7c: u32
  if (data?.dwCompressionRatioOut !== undefined) view.setUint32(124, Number(data.dwCompressionRatioOut), true);
  // 0x80: u32
  if (data?.dwNumSwitchOvers !== undefined) view.setUint32(128, Number(data.dwNumSwitchOvers), true);
  // 0x84: pad4
  // 0x88: pointer
  if (data?.wszRemoteEndpointAddress !== undefined) view.setBigUint64(136, data.wszRemoteEndpointAddress === null ? 0n : BigInt(util.toPointer(data.wszRemoteEndpointAddress)), true);
  // 0x90: pointer
  if (data?.wszLocalEndpointAddress !== undefined) view.setBigUint64(144, data.wszLocalEndpointAddress === null ? 0n : BigInt(util.toPointer(data.wszLocalEndpointAddress)), true);
  // 0x98: pointer
  if (data?.ProjectionInfo !== undefined) view.setBigUint64(152, data.ProjectionInfo === null ? 0n : BigInt(util.toPointer(data.ProjectionInfo)), true);
  // 0xa0: pointer
  if (data?.hConnection !== undefined) view.setBigUint64(160, data.hConnection === null ? 0n : BigInt(util.toPointer(data.hConnection)), true);
  // 0xa8: pointer
  if (data?.hInterface !== undefined) view.setBigUint64(168, data.hInterface === null ? 0n : BigInt(util.toPointer(data.hInterface)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_CONNECTION_4 (size: 192)
 */
export interface RAS_CONNECTION_4 {
  /** u32 */
  dwConnectDuration: number;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_INTERFACE_TYPE */
  dwInterfaceType: ROUTER_INTERFACE_TYPE;
  /** Windows.Win32.NetworkManagement.Rras.RAS_FLAGS */
  dwConnectionFlags: RAS_FLAGS;
  /** array */
  wszInterfaceName: Deno.PointerValue | null;
  /** array */
  wszUserName: Deno.PointerValue | null;
  /** array */
  wszLogonDomain: Deno.PointerValue | null;
  /** array */
  wszRemoteComputer: Deno.PointerValue | null;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.RAS_QUARANTINE_STATE */
  rasQuarState: RAS_QUARANTINE_STATE;
  /** Windows.Win32.Foundation.FILETIME */
  probationTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  connectionStartTime: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullBytesXmited: Deno.PointerValue;
  /** u64 */
  ullBytesRcved: Deno.PointerValue;
  /** u32 */
  dwFramesXmited: number;
  /** u32 */
  dwFramesRcved: number;
  /** u32 */
  dwCrcErr: number;
  /** u32 */
  dwTimeoutErr: number;
  /** u32 */
  dwAlignmentErr: number;
  /** u32 */
  dwHardwareOverrunErr: number;
  /** u32 */
  dwFramingErr: number;
  /** u32 */
  dwBufferOverrunErr: number;
  /** u32 */
  dwCompressionRatioIn: number;
  /** u32 */
  dwCompressionRatioOut: number;
  /** u32 */
  dwNumSwitchOvers: number;
  /** array */
  wszRemoteEndpointAddress: Deno.PointerValue | null;
  /** array */
  wszLocalEndpointAddress: Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PROJECTION_INFO2 */
  ProjectionInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hConnection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hInterface: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDeviceType: number;
}

export const sizeofRAS_CONNECTION_4 = 192;

export function allocRAS_CONNECTION_4(data?: Partial<RAS_CONNECTION_4>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_CONNECTION_4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwConnectDuration !== undefined) view.setUint32(0, Number(data.dwConnectDuration), true);
  // 0x04: i32
  if (data?.dwInterfaceType !== undefined) view.setInt32(4, Number(data.dwInterfaceType), true);
  // 0x08: u32
  if (data?.dwConnectionFlags !== undefined) view.setUint32(8, Number(data.dwConnectionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wszInterfaceName !== undefined) view.setBigUint64(16, data.wszInterfaceName === null ? 0n : BigInt(util.toPointer(data.wszInterfaceName)), true);
  // 0x18: pointer
  if (data?.wszUserName !== undefined) view.setBigUint64(24, data.wszUserName === null ? 0n : BigInt(util.toPointer(data.wszUserName)), true);
  // 0x20: pointer
  if (data?.wszLogonDomain !== undefined) view.setBigUint64(32, data.wszLogonDomain === null ? 0n : BigInt(util.toPointer(data.wszLogonDomain)), true);
  // 0x28: pointer
  if (data?.wszRemoteComputer !== undefined) view.setBigUint64(40, data.wszRemoteComputer === null ? 0n : BigInt(util.toPointer(data.wszRemoteComputer)), true);
  // 0x30: pointer
  if (data?.guid !== undefined) view.setBigUint64(48, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x38: i32
  if (data?.rasQuarState !== undefined) view.setInt32(56, Number(data.rasQuarState), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.probationTime !== undefined) view.setBigUint64(64, data.probationTime === null ? 0n : BigInt(util.toPointer(data.probationTime)), true);
  // 0x48: pointer
  if (data?.connectionStartTime !== undefined) view.setBigUint64(72, data.connectionStartTime === null ? 0n : BigInt(util.toPointer(data.connectionStartTime)), true);
  // 0x50: u64
  if (data?.ullBytesXmited !== undefined) view.setBigUint64(80, BigInt(data.ullBytesXmited), true);
  // 0x58: u64
  if (data?.ullBytesRcved !== undefined) view.setBigUint64(88, BigInt(data.ullBytesRcved), true);
  // 0x60: u32
  if (data?.dwFramesXmited !== undefined) view.setUint32(96, Number(data.dwFramesXmited), true);
  // 0x64: u32
  if (data?.dwFramesRcved !== undefined) view.setUint32(100, Number(data.dwFramesRcved), true);
  // 0x68: u32
  if (data?.dwCrcErr !== undefined) view.setUint32(104, Number(data.dwCrcErr), true);
  // 0x6c: u32
  if (data?.dwTimeoutErr !== undefined) view.setUint32(108, Number(data.dwTimeoutErr), true);
  // 0x70: u32
  if (data?.dwAlignmentErr !== undefined) view.setUint32(112, Number(data.dwAlignmentErr), true);
  // 0x74: u32
  if (data?.dwHardwareOverrunErr !== undefined) view.setUint32(116, Number(data.dwHardwareOverrunErr), true);
  // 0x78: u32
  if (data?.dwFramingErr !== undefined) view.setUint32(120, Number(data.dwFramingErr), true);
  // 0x7c: u32
  if (data?.dwBufferOverrunErr !== undefined) view.setUint32(124, Number(data.dwBufferOverrunErr), true);
  // 0x80: u32
  if (data?.dwCompressionRatioIn !== undefined) view.setUint32(128, Number(data.dwCompressionRatioIn), true);
  // 0x84: u32
  if (data?.dwCompressionRatioOut !== undefined) view.setUint32(132, Number(data.dwCompressionRatioOut), true);
  // 0x88: u32
  if (data?.dwNumSwitchOvers !== undefined) view.setUint32(136, Number(data.dwNumSwitchOvers), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.wszRemoteEndpointAddress !== undefined) view.setBigUint64(144, data.wszRemoteEndpointAddress === null ? 0n : BigInt(util.toPointer(data.wszRemoteEndpointAddress)), true);
  // 0x98: pointer
  if (data?.wszLocalEndpointAddress !== undefined) view.setBigUint64(152, data.wszLocalEndpointAddress === null ? 0n : BigInt(util.toPointer(data.wszLocalEndpointAddress)), true);
  // 0xa0: pointer
  if (data?.ProjectionInfo !== undefined) view.setBigUint64(160, data.ProjectionInfo === null ? 0n : BigInt(util.toPointer(data.ProjectionInfo)), true);
  // 0xa8: pointer
  if (data?.hConnection !== undefined) view.setBigUint64(168, data.hConnection === null ? 0n : BigInt(util.toPointer(data.hConnection)), true);
  // 0xb0: pointer
  if (data?.hInterface !== undefined) view.setBigUint64(176, data.hInterface === null ? 0n : BigInt(util.toPointer(data.hInterface)), true);
  // 0xb8: u32
  if (data?.dwDeviceType !== undefined) view.setUint32(184, Number(data.dwDeviceType), true);
  // 0xbc: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.ROUTER_CUSTOM_IKEv2_POLICY0 (size: 24)
 */
export interface ROUTER_CUSTOM_IKEv2_POLICY0 {
  /** u32 */
  dwIntegrityMethod: number;
  /** u32 */
  dwEncryptionMethod: number;
  /** u32 */
  dwCipherTransformConstant: number;
  /** u32 */
  dwAuthTransformConstant: number;
  /** u32 */
  dwPfsGroup: number;
  /** u32 */
  dwDhGroup: number;
}

export const sizeofROUTER_CUSTOM_IKEv2_POLICY0 = 24;

export function allocROUTER_CUSTOM_IKEv2_POLICY0(data?: Partial<ROUTER_CUSTOM_IKEv2_POLICY0>): Uint8Array {
  const buf = new Uint8Array(sizeofROUTER_CUSTOM_IKEv2_POLICY0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIntegrityMethod !== undefined) view.setUint32(0, Number(data.dwIntegrityMethod), true);
  // 0x04: u32
  if (data?.dwEncryptionMethod !== undefined) view.setUint32(4, Number(data.dwEncryptionMethod), true);
  // 0x08: u32
  if (data?.dwCipherTransformConstant !== undefined) view.setUint32(8, Number(data.dwCipherTransformConstant), true);
  // 0x0c: u32
  if (data?.dwAuthTransformConstant !== undefined) view.setUint32(12, Number(data.dwAuthTransformConstant), true);
  // 0x10: u32
  if (data?.dwPfsGroup !== undefined) view.setUint32(16, Number(data.dwPfsGroup), true);
  // 0x14: u32
  if (data?.dwDhGroup !== undefined) view.setUint32(20, Number(data.dwDhGroup), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB (size: 16)
 */
export interface CRYPTOAPI_BLOB {
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTOAPI_BLOB = 16;

export function allocCRYPTOAPI_BLOB(data?: Partial<CRYPTOAPI_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTOAPI_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.ROUTER_IKEv2_IF_CUSTOM_CONFIG0 (size: 24)
 */
export interface ROUTER_IKEv2_IF_CUSTOM_CONFIG0 {
  /** u32 */
  dwSaLifeTime: number;
  /** u32 */
  dwSaDataSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  certificateName: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  customPolicy: Deno.PointerValue | Uint8Array | null;
}

export const sizeofROUTER_IKEv2_IF_CUSTOM_CONFIG0 = 24;

export function allocROUTER_IKEv2_IF_CUSTOM_CONFIG0(data?: Partial<ROUTER_IKEv2_IF_CUSTOM_CONFIG0>): Uint8Array {
  const buf = new Uint8Array(sizeofROUTER_IKEv2_IF_CUSTOM_CONFIG0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSaLifeTime !== undefined) view.setUint32(0, Number(data.dwSaLifeTime), true);
  // 0x04: u32
  if (data?.dwSaDataSize !== undefined) view.setUint32(4, Number(data.dwSaDataSize), true);
  // 0x08: pointer
  if (data?.certificateName !== undefined) view.setBigUint64(8, data.certificateName === null ? 0n : BigInt(util.toPointer(data.certificateName)), true);
  // 0x10: pointer
  if (data?.customPolicy !== undefined) view.setBigUint64(16, data.customPolicy === null ? 0n : BigInt(util.toPointer(data.customPolicy)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_IF_CUSTOMINFOEX0 (size: 24)
 */
export interface MPR_IF_CUSTOMINFOEX0 {
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_IKEv2_IF_CUSTOM_CONFIG0 */
  customIkev2Config: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPR_IF_CUSTOMINFOEX0 = 24;

export function allocMPR_IF_CUSTOMINFOEX0(data?: Partial<MPR_IF_CUSTOMINFOEX0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_IF_CUSTOMINFOEX0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.customIkev2Config !== undefined) view.setBigUint64(16, data.customIkev2Config === null ? 0n : BigInt(util.toPointer(data.customIkev2Config)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_CERT_EKU (size: 16)
 */
export interface MPR_CERT_EKU {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.BOOL */
  IsEKUOID: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  pwszEKU: string | null | Uint8Array | Uint16Array;
}

export const sizeofMPR_CERT_EKU = 16;

export function allocMPR_CERT_EKU(data?: Partial<MPR_CERT_EKU>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_CERT_EKU);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.IsEKUOID !== undefined) view.setInt32(4, Number(data.IsEKUOID), true);
  // 0x08: buffer
  if (data?.pwszEKU !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszEKU);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.VPN_TS_IP_ADDRESS (size: 16)
 */
export interface VPN_TS_IP_ADDRESS {
  /** u16 */
  Type: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVPN_TS_IP_ADDRESS = 16;

export function allocVPN_TS_IP_ADDRESS(data?: Partial<VPN_TS_IP_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofVPN_TS_IP_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_VPN_TRAFFIC_SELECTOR (size: 32)
 */
export interface MPR_VPN_TRAFFIC_SELECTOR {
  /** Windows.Win32.NetworkManagement.Rras.MPR_VPN_TS_TYPE */
  type: MPR_VPN_TS_TYPE;
  /** u8 */
  protocolId: number;
  /** u16 */
  portStart: number;
  /** u16 */
  portEnd: number;
  /** u16 */
  tsPayloadId: number;
  /** Windows.Win32.NetworkManagement.Rras.VPN_TS_IP_ADDRESS */
  addrStart: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.VPN_TS_IP_ADDRESS */
  addrEnd: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPR_VPN_TRAFFIC_SELECTOR = 32;

export function allocMPR_VPN_TRAFFIC_SELECTOR(data?: Partial<MPR_VPN_TRAFFIC_SELECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_VPN_TRAFFIC_SELECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: u8
  if (data?.protocolId !== undefined) view.setUint8(4, Number(data.protocolId));
  // 0x05: u16
  if (data?.portStart !== undefined) view.setUint16(5, Number(data.portStart), true);
  // 0x07: u16
  if (data?.portEnd !== undefined) view.setUint16(7, Number(data.portEnd), true);
  // 0x09: u16
  if (data?.tsPayloadId !== undefined) view.setUint16(9, Number(data.tsPayloadId), true);
  // 0x0b: pad5
  // 0x10: pointer
  if (data?.addrStart !== undefined) view.setBigUint64(16, data.addrStart === null ? 0n : BigInt(util.toPointer(data.addrStart)), true);
  // 0x18: pointer
  if (data?.addrEnd !== undefined) view.setBigUint64(24, data.addrEnd === null ? 0n : BigInt(util.toPointer(data.addrEnd)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_VPN_TRAFFIC_SELECTORS (size: 24)
 */
export interface MPR_VPN_TRAFFIC_SELECTORS {
  /** u32 */
  numTsi: number;
  /** u32 */
  numTsr: number;
  /** ptr */
  tsI: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  tsR: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMPR_VPN_TRAFFIC_SELECTORS = 24;

export function allocMPR_VPN_TRAFFIC_SELECTORS(data?: Partial<MPR_VPN_TRAFFIC_SELECTORS>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_VPN_TRAFFIC_SELECTORS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numTsi !== undefined) view.setUint32(0, Number(data.numTsi), true);
  // 0x04: u32
  if (data?.numTsr !== undefined) view.setUint32(4, Number(data.numTsr), true);
  // 0x08: pointer
  if (data?.tsI !== undefined) view.setBigUint64(8, data.tsI === null ? 0n : BigInt(util.toPointer(data.tsI)), true);
  // 0x10: pointer
  if (data?.tsR !== undefined) view.setBigUint64(16, data.tsR === null ? 0n : BigInt(util.toPointer(data.tsR)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.ROUTER_IKEv2_IF_CUSTOM_CONFIG2 (size: 48)
 */
export interface ROUTER_IKEv2_IF_CUSTOM_CONFIG2 {
  /** u32 */
  dwSaLifeTime: number;
  /** u32 */
  dwSaDataSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  certificateName: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  customPolicy: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  certificateHash: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwMmSaLifeTime: number;
  /** Windows.Win32.NetworkManagement.Rras.MPR_VPN_TRAFFIC_SELECTORS */
  vpnTrafficSelectors: Uint8Array | Deno.PointerValue | null;
}

export const sizeofROUTER_IKEv2_IF_CUSTOM_CONFIG2 = 48;

export function allocROUTER_IKEv2_IF_CUSTOM_CONFIG2(data?: Partial<ROUTER_IKEv2_IF_CUSTOM_CONFIG2>): Uint8Array {
  const buf = new Uint8Array(sizeofROUTER_IKEv2_IF_CUSTOM_CONFIG2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSaLifeTime !== undefined) view.setUint32(0, Number(data.dwSaLifeTime), true);
  // 0x04: u32
  if (data?.dwSaDataSize !== undefined) view.setUint32(4, Number(data.dwSaDataSize), true);
  // 0x08: pointer
  if (data?.certificateName !== undefined) view.setBigUint64(8, data.certificateName === null ? 0n : BigInt(util.toPointer(data.certificateName)), true);
  // 0x10: pointer
  if (data?.customPolicy !== undefined) view.setBigUint64(16, data.customPolicy === null ? 0n : BigInt(util.toPointer(data.customPolicy)), true);
  // 0x18: pointer
  if (data?.certificateHash !== undefined) view.setBigUint64(24, data.certificateHash === null ? 0n : BigInt(util.toPointer(data.certificateHash)), true);
  // 0x20: u32
  if (data?.dwMmSaLifeTime !== undefined) view.setUint32(32, Number(data.dwMmSaLifeTime), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.vpnTrafficSelectors !== undefined) view.setBigUint64(40, data.vpnTrafficSelectors === null ? 0n : BigInt(util.toPointer(data.vpnTrafficSelectors)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_IF_CUSTOMINFOEX2 (size: 24)
 */
export interface MPR_IF_CUSTOMINFOEX2 {
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_IKEv2_IF_CUSTOM_CONFIG2 */
  customIkev2Config: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPR_IF_CUSTOMINFOEX2 = 24;

export function allocMPR_IF_CUSTOMINFOEX2(data?: Partial<MPR_IF_CUSTOMINFOEX2>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_IF_CUSTOMINFOEX2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.customIkev2Config !== undefined) view.setBigUint64(16, data.customIkev2Config === null ? 0n : BigInt(util.toPointer(data.customIkev2Config)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.IKEV2_TUNNEL_CONFIG_PARAMS4 (size: 88)
 */
export interface IKEV2_TUNNEL_CONFIG_PARAMS4 {
  /** u32 */
  dwIdleTimeout: number;
  /** u32 */
  dwNetworkBlackoutTime: number;
  /** u32 */
  dwSaLifeTime: number;
  /** u32 */
  dwSaDataSizeForRenegotiation: number;
  /** u32 */
  dwConfigOptions: number;
  /** u32 */
  dwTotalCertificates: number;
  /** ptr */
  certificateNames: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  machineCertificateName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEncryptionType: number;
  /** ptr */
  customPolicy: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwTotalEkus: number;
  /** ptr */
  certificateEKUs: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  machineCertificateHash: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwMmSaLifeTime: number;
}

export const sizeofIKEV2_TUNNEL_CONFIG_PARAMS4 = 88;

export function allocIKEV2_TUNNEL_CONFIG_PARAMS4(data?: Partial<IKEV2_TUNNEL_CONFIG_PARAMS4>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEV2_TUNNEL_CONFIG_PARAMS4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIdleTimeout !== undefined) view.setUint32(0, Number(data.dwIdleTimeout), true);
  // 0x04: u32
  if (data?.dwNetworkBlackoutTime !== undefined) view.setUint32(4, Number(data.dwNetworkBlackoutTime), true);
  // 0x08: u32
  if (data?.dwSaLifeTime !== undefined) view.setUint32(8, Number(data.dwSaLifeTime), true);
  // 0x0c: u32
  if (data?.dwSaDataSizeForRenegotiation !== undefined) view.setUint32(12, Number(data.dwSaDataSizeForRenegotiation), true);
  // 0x10: u32
  if (data?.dwConfigOptions !== undefined) view.setUint32(16, Number(data.dwConfigOptions), true);
  // 0x14: u32
  if (data?.dwTotalCertificates !== undefined) view.setUint32(20, Number(data.dwTotalCertificates), true);
  // 0x18: pointer
  if (data?.certificateNames !== undefined) view.setBigUint64(24, data.certificateNames === null ? 0n : BigInt(util.toPointer(data.certificateNames)), true);
  // 0x20: pointer
  if (data?.machineCertificateName !== undefined) view.setBigUint64(32, data.machineCertificateName === null ? 0n : BigInt(util.toPointer(data.machineCertificateName)), true);
  // 0x28: u32
  if (data?.dwEncryptionType !== undefined) view.setUint32(40, Number(data.dwEncryptionType), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.customPolicy !== undefined) view.setBigUint64(48, data.customPolicy === null ? 0n : BigInt(util.toPointer(data.customPolicy)), true);
  // 0x38: u32
  if (data?.dwTotalEkus !== undefined) view.setUint32(56, Number(data.dwTotalEkus), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.certificateEKUs !== undefined) view.setBigUint64(64, data.certificateEKUs === null ? 0n : BigInt(util.toPointer(data.certificateEKUs)), true);
  // 0x48: pointer
  if (data?.machineCertificateHash !== undefined) view.setBigUint64(72, data.machineCertificateHash === null ? 0n : BigInt(util.toPointer(data.machineCertificateHash)), true);
  // 0x50: u32
  if (data?.dwMmSaLifeTime !== undefined) view.setUint32(80, Number(data.dwMmSaLifeTime), true);
  // 0x54: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.ROUTER_IKEv2_IF_CUSTOM_CONFIG1 (size: 32)
 */
export interface ROUTER_IKEv2_IF_CUSTOM_CONFIG1 {
  /** u32 */
  dwSaLifeTime: number;
  /** u32 */
  dwSaDataSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  certificateName: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  customPolicy: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  certificateHash: Uint8Array | Deno.PointerValue | null;
}

export const sizeofROUTER_IKEv2_IF_CUSTOM_CONFIG1 = 32;

export function allocROUTER_IKEv2_IF_CUSTOM_CONFIG1(data?: Partial<ROUTER_IKEv2_IF_CUSTOM_CONFIG1>): Uint8Array {
  const buf = new Uint8Array(sizeofROUTER_IKEv2_IF_CUSTOM_CONFIG1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSaLifeTime !== undefined) view.setUint32(0, Number(data.dwSaLifeTime), true);
  // 0x04: u32
  if (data?.dwSaDataSize !== undefined) view.setUint32(4, Number(data.dwSaDataSize), true);
  // 0x08: pointer
  if (data?.certificateName !== undefined) view.setBigUint64(8, data.certificateName === null ? 0n : BigInt(util.toPointer(data.certificateName)), true);
  // 0x10: pointer
  if (data?.customPolicy !== undefined) view.setBigUint64(16, data.customPolicy === null ? 0n : BigInt(util.toPointer(data.customPolicy)), true);
  // 0x18: pointer
  if (data?.certificateHash !== undefined) view.setBigUint64(24, data.certificateHash === null ? 0n : BigInt(util.toPointer(data.certificateHash)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_IF_CUSTOMINFOEX1 (size: 24)
 */
export interface MPR_IF_CUSTOMINFOEX1 {
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.NetworkManagement.Rras.ROUTER_IKEv2_IF_CUSTOM_CONFIG1 */
  customIkev2Config: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPR_IF_CUSTOMINFOEX1 = 24;

export function allocMPR_IF_CUSTOMINFOEX1(data?: Partial<MPR_IF_CUSTOMINFOEX1>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_IF_CUSTOMINFOEX1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.customIkev2Config !== undefined) view.setBigUint64(16, data.customIkev2Config === null ? 0n : BigInt(util.toPointer(data.customIkev2Config)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.IKEV2_TUNNEL_CONFIG_PARAMS3 (size: 80)
 */
export interface IKEV2_TUNNEL_CONFIG_PARAMS3 {
  /** u32 */
  dwIdleTimeout: number;
  /** u32 */
  dwNetworkBlackoutTime: number;
  /** u32 */
  dwSaLifeTime: number;
  /** u32 */
  dwSaDataSizeForRenegotiation: number;
  /** u32 */
  dwConfigOptions: number;
  /** u32 */
  dwTotalCertificates: number;
  /** ptr */
  certificateNames: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  machineCertificateName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEncryptionType: number;
  /** ptr */
  customPolicy: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwTotalEkus: number;
  /** ptr */
  certificateEKUs: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  machineCertificateHash: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEV2_TUNNEL_CONFIG_PARAMS3 = 80;

export function allocIKEV2_TUNNEL_CONFIG_PARAMS3(data?: Partial<IKEV2_TUNNEL_CONFIG_PARAMS3>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEV2_TUNNEL_CONFIG_PARAMS3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIdleTimeout !== undefined) view.setUint32(0, Number(data.dwIdleTimeout), true);
  // 0x04: u32
  if (data?.dwNetworkBlackoutTime !== undefined) view.setUint32(4, Number(data.dwNetworkBlackoutTime), true);
  // 0x08: u32
  if (data?.dwSaLifeTime !== undefined) view.setUint32(8, Number(data.dwSaLifeTime), true);
  // 0x0c: u32
  if (data?.dwSaDataSizeForRenegotiation !== undefined) view.setUint32(12, Number(data.dwSaDataSizeForRenegotiation), true);
  // 0x10: u32
  if (data?.dwConfigOptions !== undefined) view.setUint32(16, Number(data.dwConfigOptions), true);
  // 0x14: u32
  if (data?.dwTotalCertificates !== undefined) view.setUint32(20, Number(data.dwTotalCertificates), true);
  // 0x18: pointer
  if (data?.certificateNames !== undefined) view.setBigUint64(24, data.certificateNames === null ? 0n : BigInt(util.toPointer(data.certificateNames)), true);
  // 0x20: pointer
  if (data?.machineCertificateName !== undefined) view.setBigUint64(32, data.machineCertificateName === null ? 0n : BigInt(util.toPointer(data.machineCertificateName)), true);
  // 0x28: u32
  if (data?.dwEncryptionType !== undefined) view.setUint32(40, Number(data.dwEncryptionType), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.customPolicy !== undefined) view.setBigUint64(48, data.customPolicy === null ? 0n : BigInt(util.toPointer(data.customPolicy)), true);
  // 0x38: u32
  if (data?.dwTotalEkus !== undefined) view.setUint32(56, Number(data.dwTotalEkus), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.certificateEKUs !== undefined) view.setBigUint64(64, data.certificateEKUs === null ? 0n : BigInt(util.toPointer(data.certificateEKUs)), true);
  // 0x48: pointer
  if (data?.machineCertificateHash !== undefined) view.setBigUint64(72, data.machineCertificateHash === null ? 0n : BigInt(util.toPointer(data.machineCertificateHash)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.IKEV2_TUNNEL_CONFIG_PARAMS2 (size: 56)
 */
export interface IKEV2_TUNNEL_CONFIG_PARAMS2 {
  /** u32 */
  dwIdleTimeout: number;
  /** u32 */
  dwNetworkBlackoutTime: number;
  /** u32 */
  dwSaLifeTime: number;
  /** u32 */
  dwSaDataSizeForRenegotiation: number;
  /** u32 */
  dwConfigOptions: number;
  /** u32 */
  dwTotalCertificates: number;
  /** ptr */
  certificateNames: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  machineCertificateName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEncryptionType: number;
  /** ptr */
  customPolicy: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIKEV2_TUNNEL_CONFIG_PARAMS2 = 56;

export function allocIKEV2_TUNNEL_CONFIG_PARAMS2(data?: Partial<IKEV2_TUNNEL_CONFIG_PARAMS2>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEV2_TUNNEL_CONFIG_PARAMS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIdleTimeout !== undefined) view.setUint32(0, Number(data.dwIdleTimeout), true);
  // 0x04: u32
  if (data?.dwNetworkBlackoutTime !== undefined) view.setUint32(4, Number(data.dwNetworkBlackoutTime), true);
  // 0x08: u32
  if (data?.dwSaLifeTime !== undefined) view.setUint32(8, Number(data.dwSaLifeTime), true);
  // 0x0c: u32
  if (data?.dwSaDataSizeForRenegotiation !== undefined) view.setUint32(12, Number(data.dwSaDataSizeForRenegotiation), true);
  // 0x10: u32
  if (data?.dwConfigOptions !== undefined) view.setUint32(16, Number(data.dwConfigOptions), true);
  // 0x14: u32
  if (data?.dwTotalCertificates !== undefined) view.setUint32(20, Number(data.dwTotalCertificates), true);
  // 0x18: pointer
  if (data?.certificateNames !== undefined) view.setBigUint64(24, data.certificateNames === null ? 0n : BigInt(util.toPointer(data.certificateNames)), true);
  // 0x20: pointer
  if (data?.machineCertificateName !== undefined) view.setBigUint64(32, data.machineCertificateName === null ? 0n : BigInt(util.toPointer(data.machineCertificateName)), true);
  // 0x28: u32
  if (data?.dwEncryptionType !== undefined) view.setUint32(40, Number(data.dwEncryptionType), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.customPolicy !== undefined) view.setBigUint64(48, data.customPolicy === null ? 0n : BigInt(util.toPointer(data.customPolicy)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.L2TP_TUNNEL_CONFIG_PARAMS2 (size: 32)
 */
export interface L2TP_TUNNEL_CONFIG_PARAMS2 {
  /** u32 */
  dwIdleTimeout: number;
  /** u32 */
  dwEncryptionType: number;
  /** u32 */
  dwSaLifeTime: number;
  /** u32 */
  dwSaDataSizeForRenegotiation: number;
  /** ptr */
  customPolicy: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwMmSaLifeTime: number;
}

export const sizeofL2TP_TUNNEL_CONFIG_PARAMS2 = 32;

export function allocL2TP_TUNNEL_CONFIG_PARAMS2(data?: Partial<L2TP_TUNNEL_CONFIG_PARAMS2>): Uint8Array {
  const buf = new Uint8Array(sizeofL2TP_TUNNEL_CONFIG_PARAMS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIdleTimeout !== undefined) view.setUint32(0, Number(data.dwIdleTimeout), true);
  // 0x04: u32
  if (data?.dwEncryptionType !== undefined) view.setUint32(4, Number(data.dwEncryptionType), true);
  // 0x08: u32
  if (data?.dwSaLifeTime !== undefined) view.setUint32(8, Number(data.dwSaLifeTime), true);
  // 0x0c: u32
  if (data?.dwSaDataSizeForRenegotiation !== undefined) view.setUint32(12, Number(data.dwSaDataSizeForRenegotiation), true);
  // 0x10: pointer
  if (data?.customPolicy !== undefined) view.setBigUint64(16, data.customPolicy === null ? 0n : BigInt(util.toPointer(data.customPolicy)), true);
  // 0x18: u32
  if (data?.dwMmSaLifeTime !== undefined) view.setUint32(24, Number(data.dwMmSaLifeTime), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.L2TP_TUNNEL_CONFIG_PARAMS1 (size: 24)
 */
export interface L2TP_TUNNEL_CONFIG_PARAMS1 {
  /** u32 */
  dwIdleTimeout: number;
  /** u32 */
  dwEncryptionType: number;
  /** u32 */
  dwSaLifeTime: number;
  /** u32 */
  dwSaDataSizeForRenegotiation: number;
  /** ptr */
  customPolicy: Deno.PointerValue | Uint8Array | null;
}

export const sizeofL2TP_TUNNEL_CONFIG_PARAMS1 = 24;

export function allocL2TP_TUNNEL_CONFIG_PARAMS1(data?: Partial<L2TP_TUNNEL_CONFIG_PARAMS1>): Uint8Array {
  const buf = new Uint8Array(sizeofL2TP_TUNNEL_CONFIG_PARAMS1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIdleTimeout !== undefined) view.setUint32(0, Number(data.dwIdleTimeout), true);
  // 0x04: u32
  if (data?.dwEncryptionType !== undefined) view.setUint32(4, Number(data.dwEncryptionType), true);
  // 0x08: u32
  if (data?.dwSaLifeTime !== undefined) view.setUint32(8, Number(data.dwSaLifeTime), true);
  // 0x0c: u32
  if (data?.dwSaDataSizeForRenegotiation !== undefined) view.setUint32(12, Number(data.dwSaDataSizeForRenegotiation), true);
  // 0x10: pointer
  if (data?.customPolicy !== undefined) view.setBigUint64(16, data.customPolicy === null ? 0n : BigInt(util.toPointer(data.customPolicy)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.IKEV2_CONFIG_PARAMS (size: 24)
 */
export interface IKEV2_CONFIG_PARAMS {
  /** u32 */
  dwNumPorts: number;
  /** u32 */
  dwPortFlags: number;
  /** u32 */
  dwTunnelConfigParamFlags: number;
  /** Windows.Win32.NetworkManagement.Rras.IKEV2_TUNNEL_CONFIG_PARAMS4 */
  TunnelConfigParams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEV2_CONFIG_PARAMS = 24;

export function allocIKEV2_CONFIG_PARAMS(data?: Partial<IKEV2_CONFIG_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEV2_CONFIG_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumPorts !== undefined) view.setUint32(0, Number(data.dwNumPorts), true);
  // 0x04: u32
  if (data?.dwPortFlags !== undefined) view.setUint32(4, Number(data.dwPortFlags), true);
  // 0x08: u32
  if (data?.dwTunnelConfigParamFlags !== undefined) view.setUint32(8, Number(data.dwTunnelConfigParamFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.TunnelConfigParams !== undefined) view.setBigUint64(16, data.TunnelConfigParams === null ? 0n : BigInt(util.toPointer(data.TunnelConfigParams)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.PPTP_CONFIG_PARAMS (size: 8)
 */
export interface PPTP_CONFIG_PARAMS {
  /** u32 */
  dwNumPorts: number;
  /** u32 */
  dwPortFlags: number;
}

export const sizeofPPTP_CONFIG_PARAMS = 8;

export function allocPPTP_CONFIG_PARAMS(data?: Partial<PPTP_CONFIG_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofPPTP_CONFIG_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumPorts !== undefined) view.setUint32(0, Number(data.dwNumPorts), true);
  // 0x04: u32
  if (data?.dwPortFlags !== undefined) view.setUint32(4, Number(data.dwPortFlags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.L2TP_CONFIG_PARAMS1 (size: 24)
 */
export interface L2TP_CONFIG_PARAMS1 {
  /** u32 */
  dwNumPorts: number;
  /** u32 */
  dwPortFlags: number;
  /** u32 */
  dwTunnelConfigParamFlags: number;
  /** Windows.Win32.NetworkManagement.Rras.L2TP_TUNNEL_CONFIG_PARAMS2 */
  TunnelConfigParams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofL2TP_CONFIG_PARAMS1 = 24;

export function allocL2TP_CONFIG_PARAMS1(data?: Partial<L2TP_CONFIG_PARAMS1>): Uint8Array {
  const buf = new Uint8Array(sizeofL2TP_CONFIG_PARAMS1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumPorts !== undefined) view.setUint32(0, Number(data.dwNumPorts), true);
  // 0x04: u32
  if (data?.dwPortFlags !== undefined) view.setUint32(4, Number(data.dwPortFlags), true);
  // 0x08: u32
  if (data?.dwTunnelConfigParamFlags !== undefined) view.setUint32(8, Number(data.dwTunnelConfigParamFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.TunnelConfigParams !== undefined) view.setBigUint64(16, data.TunnelConfigParams === null ? 0n : BigInt(util.toPointer(data.TunnelConfigParams)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.GRE_CONFIG_PARAMS0 (size: 8)
 */
export interface GRE_CONFIG_PARAMS0 {
  /** u32 */
  dwNumPorts: number;
  /** u32 */
  dwPortFlags: number;
}

export const sizeofGRE_CONFIG_PARAMS0 = 8;

export function allocGRE_CONFIG_PARAMS0(data?: Partial<GRE_CONFIG_PARAMS0>): Uint8Array {
  const buf = new Uint8Array(sizeofGRE_CONFIG_PARAMS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumPorts !== undefined) view.setUint32(0, Number(data.dwNumPorts), true);
  // 0x04: u32
  if (data?.dwPortFlags !== undefined) view.setUint32(4, Number(data.dwPortFlags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.L2TP_CONFIG_PARAMS0 (size: 8)
 */
export interface L2TP_CONFIG_PARAMS0 {
  /** u32 */
  dwNumPorts: number;
  /** u32 */
  dwPortFlags: number;
}

export const sizeofL2TP_CONFIG_PARAMS0 = 8;

export function allocL2TP_CONFIG_PARAMS0(data?: Partial<L2TP_CONFIG_PARAMS0>): Uint8Array {
  const buf = new Uint8Array(sizeofL2TP_CONFIG_PARAMS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumPorts !== undefined) view.setUint32(0, Number(data.dwNumPorts), true);
  // 0x04: u32
  if (data?.dwPortFlags !== undefined) view.setUint32(4, Number(data.dwPortFlags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.SSTP_CERT_INFO (size: 16)
 */
export interface SSTP_CERT_INFO {
  /** Windows.Win32.Foundation.BOOL */
  isDefault: boolean;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  certBlob: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSSTP_CERT_INFO = 16;

export function allocSSTP_CERT_INFO(data?: Partial<SSTP_CERT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSSTP_CERT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.isDefault !== undefined) view.setInt32(0, Number(data.isDefault), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.certBlob !== undefined) view.setBigUint64(8, data.certBlob === null ? 0n : BigInt(util.toPointer(data.certBlob)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.SSTP_CONFIG_PARAMS (size: 24)
 */
export interface SSTP_CONFIG_PARAMS {
  /** u32 */
  dwNumPorts: number;
  /** u32 */
  dwPortFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  isUseHttps: boolean;
  /** u32 */
  certAlgorithm: number;
  /** Windows.Win32.NetworkManagement.Rras.SSTP_CERT_INFO */
  sstpCertDetails: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSSTP_CONFIG_PARAMS = 24;

export function allocSSTP_CONFIG_PARAMS(data?: Partial<SSTP_CONFIG_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSSTP_CONFIG_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumPorts !== undefined) view.setUint32(0, Number(data.dwNumPorts), true);
  // 0x04: u32
  if (data?.dwPortFlags !== undefined) view.setUint32(4, Number(data.dwPortFlags), true);
  // 0x08: i32
  if (data?.isUseHttps !== undefined) view.setInt32(8, Number(data.isUseHttps), true);
  // 0x0c: u32
  if (data?.certAlgorithm !== undefined) view.setUint32(12, Number(data.certAlgorithm), true);
  // 0x10: pointer
  if (data?.sstpCertDetails !== undefined) view.setBigUint64(16, data.sstpCertDetails === null ? 0n : BigInt(util.toPointer(data.sstpCertDetails)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPRAPI_TUNNEL_CONFIG_PARAMS0 (size: 32)
 */
export interface MPRAPI_TUNNEL_CONFIG_PARAMS0 {
  /** Windows.Win32.NetworkManagement.Rras.IKEV2_CONFIG_PARAMS */
  IkeConfigParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPTP_CONFIG_PARAMS */
  PptpConfigParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.L2TP_CONFIG_PARAMS1 */
  L2tpConfigParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.SSTP_CONFIG_PARAMS */
  SstpConfigParams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPRAPI_TUNNEL_CONFIG_PARAMS0 = 32;

export function allocMPRAPI_TUNNEL_CONFIG_PARAMS0(data?: Partial<MPRAPI_TUNNEL_CONFIG_PARAMS0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPRAPI_TUNNEL_CONFIG_PARAMS0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IkeConfigParams !== undefined) view.setBigUint64(0, data.IkeConfigParams === null ? 0n : BigInt(util.toPointer(data.IkeConfigParams)), true);
  // 0x08: pointer
  if (data?.PptpConfigParams !== undefined) view.setBigUint64(8, data.PptpConfigParams === null ? 0n : BigInt(util.toPointer(data.PptpConfigParams)), true);
  // 0x10: pointer
  if (data?.L2tpConfigParams !== undefined) view.setBigUint64(16, data.L2tpConfigParams === null ? 0n : BigInt(util.toPointer(data.L2tpConfigParams)), true);
  // 0x18: pointer
  if (data?.SstpConfigParams !== undefined) view.setBigUint64(24, data.SstpConfigParams === null ? 0n : BigInt(util.toPointer(data.SstpConfigParams)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPRAPI_TUNNEL_CONFIG_PARAMS1 (size: 40)
 */
export interface MPRAPI_TUNNEL_CONFIG_PARAMS1 {
  /** Windows.Win32.NetworkManagement.Rras.IKEV2_CONFIG_PARAMS */
  IkeConfigParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PPTP_CONFIG_PARAMS */
  PptpConfigParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.L2TP_CONFIG_PARAMS1 */
  L2tpConfigParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.SSTP_CONFIG_PARAMS */
  SstpConfigParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.GRE_CONFIG_PARAMS0 */
  GREConfigParams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPRAPI_TUNNEL_CONFIG_PARAMS1 = 40;

export function allocMPRAPI_TUNNEL_CONFIG_PARAMS1(data?: Partial<MPRAPI_TUNNEL_CONFIG_PARAMS1>): Uint8Array {
  const buf = new Uint8Array(sizeofMPRAPI_TUNNEL_CONFIG_PARAMS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IkeConfigParams !== undefined) view.setBigUint64(0, data.IkeConfigParams === null ? 0n : BigInt(util.toPointer(data.IkeConfigParams)), true);
  // 0x08: pointer
  if (data?.PptpConfigParams !== undefined) view.setBigUint64(8, data.PptpConfigParams === null ? 0n : BigInt(util.toPointer(data.PptpConfigParams)), true);
  // 0x10: pointer
  if (data?.L2tpConfigParams !== undefined) view.setBigUint64(16, data.L2tpConfigParams === null ? 0n : BigInt(util.toPointer(data.L2tpConfigParams)), true);
  // 0x18: pointer
  if (data?.SstpConfigParams !== undefined) view.setBigUint64(24, data.SstpConfigParams === null ? 0n : BigInt(util.toPointer(data.SstpConfigParams)), true);
  // 0x20: pointer
  if (data?.GREConfigParams !== undefined) view.setBigUint64(32, data.GREConfigParams === null ? 0n : BigInt(util.toPointer(data.GREConfigParams)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_SERVER_EX0 (size: 40)
 */
export interface MPR_SERVER_EX0 {
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fLanOnlyMode: number;
  /** u32 */
  dwUpTime: number;
  /** u32 */
  dwTotalPorts: number;
  /** u32 */
  dwPortsInUse: number;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_TUNNEL_CONFIG_PARAMS0 */
  ConfigParams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPR_SERVER_EX0 = 40;

export function allocMPR_SERVER_EX0(data?: Partial<MPR_SERVER_EX0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_SERVER_EX0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.fLanOnlyMode !== undefined) view.setUint32(8, Number(data.fLanOnlyMode), true);
  // 0x0c: u32
  if (data?.dwUpTime !== undefined) view.setUint32(12, Number(data.dwUpTime), true);
  // 0x10: u32
  if (data?.dwTotalPorts !== undefined) view.setUint32(16, Number(data.dwTotalPorts), true);
  // 0x14: u32
  if (data?.dwPortsInUse !== undefined) view.setUint32(20, Number(data.dwPortsInUse), true);
  // 0x18: u32
  if (data?.Reserved !== undefined) view.setUint32(24, Number(data.Reserved), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ConfigParams !== undefined) view.setBigUint64(32, data.ConfigParams === null ? 0n : BigInt(util.toPointer(data.ConfigParams)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_SERVER_EX1 (size: 40)
 */
export interface MPR_SERVER_EX1 {
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fLanOnlyMode: number;
  /** u32 */
  dwUpTime: number;
  /** u32 */
  dwTotalPorts: number;
  /** u32 */
  dwPortsInUse: number;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_TUNNEL_CONFIG_PARAMS1 */
  ConfigParams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPR_SERVER_EX1 = 40;

export function allocMPR_SERVER_EX1(data?: Partial<MPR_SERVER_EX1>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_SERVER_EX1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.fLanOnlyMode !== undefined) view.setUint32(8, Number(data.fLanOnlyMode), true);
  // 0x0c: u32
  if (data?.dwUpTime !== undefined) view.setUint32(12, Number(data.dwUpTime), true);
  // 0x10: u32
  if (data?.dwTotalPorts !== undefined) view.setUint32(16, Number(data.dwTotalPorts), true);
  // 0x14: u32
  if (data?.dwPortsInUse !== undefined) view.setUint32(20, Number(data.dwPortsInUse), true);
  // 0x18: u32
  if (data?.Reserved !== undefined) view.setUint32(24, Number(data.Reserved), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ConfigParams !== undefined) view.setBigUint64(32, data.ConfigParams === null ? 0n : BigInt(util.toPointer(data.ConfigParams)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_SERVER_SET_CONFIG_EX0 (size: 24)
 */
export interface MPR_SERVER_SET_CONFIG_EX0 {
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  setConfigForProtocols: number;
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_TUNNEL_CONFIG_PARAMS0 */
  ConfigParams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPR_SERVER_SET_CONFIG_EX0 = 24;

export function allocMPR_SERVER_SET_CONFIG_EX0(data?: Partial<MPR_SERVER_SET_CONFIG_EX0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_SERVER_SET_CONFIG_EX0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.setConfigForProtocols !== undefined) view.setUint32(8, Number(data.setConfigForProtocols), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ConfigParams !== undefined) view.setBigUint64(16, data.ConfigParams === null ? 0n : BigInt(util.toPointer(data.ConfigParams)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPR_SERVER_SET_CONFIG_EX1 (size: 24)
 */
export interface MPR_SERVER_SET_CONFIG_EX1 {
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  setConfigForProtocols: number;
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_TUNNEL_CONFIG_PARAMS1 */
  ConfigParams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPR_SERVER_SET_CONFIG_EX1 = 24;

export function allocMPR_SERVER_SET_CONFIG_EX1(data?: Partial<MPR_SERVER_SET_CONFIG_EX1>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_SERVER_SET_CONFIG_EX1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.setConfigForProtocols !== undefined) view.setUint32(8, Number(data.setConfigForProtocols), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ConfigParams !== undefined) view.setBigUint64(16, data.ConfigParams === null ? 0n : BigInt(util.toPointer(data.ConfigParams)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.AUTH_VALIDATION_EX (size: 48)
 */
export interface AUTH_VALIDATION_EX {
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hRasConnection: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszUserName: Deno.PointerValue | null;
  /** array */
  wszLogonDomain: Deno.PointerValue | null;
  /** u32 */
  AuthInfoSize: number;
  /** array */
  AuthInfo: Deno.PointerValue | null;
}

export const sizeofAUTH_VALIDATION_EX = 48;

export function allocAUTH_VALIDATION_EX(data?: Partial<AUTH_VALIDATION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTH_VALIDATION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.hRasConnection !== undefined) view.setBigUint64(8, data.hRasConnection === null ? 0n : BigInt(util.toPointer(data.hRasConnection)), true);
  // 0x10: pointer
  if (data?.wszUserName !== undefined) view.setBigUint64(16, data.wszUserName === null ? 0n : BigInt(util.toPointer(data.wszUserName)), true);
  // 0x18: pointer
  if (data?.wszLogonDomain !== undefined) view.setBigUint64(24, data.wszLogonDomain === null ? 0n : BigInt(util.toPointer(data.wszLogonDomain)), true);
  // 0x20: u32
  if (data?.AuthInfoSize !== undefined) view.setUint32(32, Number(data.AuthInfoSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.AuthInfo !== undefined) view.setBigUint64(40, data.AuthInfo === null ? 0n : BigInt(util.toPointer(data.AuthInfo)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_UPDATE_CONNECTION (size: 32)
 */
export interface RAS_UPDATE_CONNECTION {
  /** Windows.Win32.NetworkManagement.Rras.MPRAPI_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwIfIndex: number;
  /** array */
  wszLocalEndpointAddress: Deno.PointerValue | null;
  /** array */
  wszRemoteEndpointAddress: Deno.PointerValue | null;
}

export const sizeofRAS_UPDATE_CONNECTION = 32;

export function allocRAS_UPDATE_CONNECTION(data?: Partial<RAS_UPDATE_CONNECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_UPDATE_CONNECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.dwIfIndex !== undefined) view.setUint32(8, Number(data.dwIfIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wszLocalEndpointAddress !== undefined) view.setBigUint64(16, data.wszLocalEndpointAddress === null ? 0n : BigInt(util.toPointer(data.wszLocalEndpointAddress)), true);
  // 0x18: pointer
  if (data?.wszRemoteEndpointAddress !== undefined) view.setBigUint64(24, data.wszRemoteEndpointAddress === null ? 0n : BigInt(util.toPointer(data.wszRemoteEndpointAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MPRAPI_ADMIN_DLL_CALLBACKS (size: 104)
 */
export interface MPRAPI_ADMIN_DLL_CALLBACKS {
  /** u8 */
  revision: number;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINGETIPADDRESSFORUSER */
  lpfnMprAdminGetIpAddressForUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINRELEASEIPADRESS */
  lpfnMprAdminReleaseIpAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINGETIPV6ADDRESSFORUSER */
  lpfnMprAdminGetIpv6AddressForUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINRELEASEIPV6ADDRESSFORUSER */
  lpfnMprAdminReleaseIpV6AddressForUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINACCEPTNEWLINK */
  lpfnRasAdminAcceptNewLink: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINLINKHANGUPNOTIFICATION */
  lpfnRasAdminLinkHangupNotification: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINTERMINATEDLL */
  lpfnRasAdminTerminateDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINACCEPTNEWCONNECTIONEX */
  lpfnRasAdminAcceptNewConnectionEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINACCEPTTUNNELENDPOINTCHANGEEX */
  lpfnRasAdminAcceptEndpointChangeEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINACCEPTREAUTHENTICATIONEX */
  lpfnRasAdminAcceptReauthenticationEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINCONNECTIONHANGUPNOTIFICATIONEX */
  lpfnRasAdminConnectionHangupNotificationEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMPRADMINRASVALIDATEPREAUTHENTICATEDCONNECTIONEX */
  lpfnRASValidatePreAuthenticatedConnectionEx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPRAPI_ADMIN_DLL_CALLBACKS = 104;

export function allocMPRAPI_ADMIN_DLL_CALLBACKS(data?: Partial<MPRAPI_ADMIN_DLL_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofMPRAPI_ADMIN_DLL_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.revision !== undefined) view.setUint8(0, Number(data.revision));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.lpfnMprAdminGetIpAddressForUser !== undefined) view.setBigUint64(8, data.lpfnMprAdminGetIpAddressForUser === null ? 0n : BigInt(util.toPointer(data.lpfnMprAdminGetIpAddressForUser)), true);
  // 0x10: pointer
  if (data?.lpfnMprAdminReleaseIpAddress !== undefined) view.setBigUint64(16, data.lpfnMprAdminReleaseIpAddress === null ? 0n : BigInt(util.toPointer(data.lpfnMprAdminReleaseIpAddress)), true);
  // 0x18: pointer
  if (data?.lpfnMprAdminGetIpv6AddressForUser !== undefined) view.setBigUint64(24, data.lpfnMprAdminGetIpv6AddressForUser === null ? 0n : BigInt(util.toPointer(data.lpfnMprAdminGetIpv6AddressForUser)), true);
  // 0x20: pointer
  if (data?.lpfnMprAdminReleaseIpV6AddressForUser !== undefined) view.setBigUint64(32, data.lpfnMprAdminReleaseIpV6AddressForUser === null ? 0n : BigInt(util.toPointer(data.lpfnMprAdminReleaseIpV6AddressForUser)), true);
  // 0x28: pointer
  if (data?.lpfnRasAdminAcceptNewLink !== undefined) view.setBigUint64(40, data.lpfnRasAdminAcceptNewLink === null ? 0n : BigInt(util.toPointer(data.lpfnRasAdminAcceptNewLink)), true);
  // 0x30: pointer
  if (data?.lpfnRasAdminLinkHangupNotification !== undefined) view.setBigUint64(48, data.lpfnRasAdminLinkHangupNotification === null ? 0n : BigInt(util.toPointer(data.lpfnRasAdminLinkHangupNotification)), true);
  // 0x38: pointer
  if (data?.lpfnRasAdminTerminateDll !== undefined) view.setBigUint64(56, data.lpfnRasAdminTerminateDll === null ? 0n : BigInt(util.toPointer(data.lpfnRasAdminTerminateDll)), true);
  // 0x40: pointer
  if (data?.lpfnRasAdminAcceptNewConnectionEx !== undefined) view.setBigUint64(64, data.lpfnRasAdminAcceptNewConnectionEx === null ? 0n : BigInt(util.toPointer(data.lpfnRasAdminAcceptNewConnectionEx)), true);
  // 0x48: pointer
  if (data?.lpfnRasAdminAcceptEndpointChangeEx !== undefined) view.setBigUint64(72, data.lpfnRasAdminAcceptEndpointChangeEx === null ? 0n : BigInt(util.toPointer(data.lpfnRasAdminAcceptEndpointChangeEx)), true);
  // 0x50: pointer
  if (data?.lpfnRasAdminAcceptReauthenticationEx !== undefined) view.setBigUint64(80, data.lpfnRasAdminAcceptReauthenticationEx === null ? 0n : BigInt(util.toPointer(data.lpfnRasAdminAcceptReauthenticationEx)), true);
  // 0x58: pointer
  if (data?.lpfnRasAdminConnectionHangupNotificationEx !== undefined) view.setBigUint64(88, data.lpfnRasAdminConnectionHangupNotificationEx === null ? 0n : BigInt(util.toPointer(data.lpfnRasAdminConnectionHangupNotificationEx)), true);
  // 0x60: pointer
  if (data?.lpfnRASValidatePreAuthenticatedConnectionEx !== undefined) view.setBigUint64(96, data.lpfnRASValidatePreAuthenticatedConnectionEx === null ? 0n : BigInt(util.toPointer(data.lpfnRASValidatePreAuthenticatedConnectionEx)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.SECURITY_MESSAGE (size: 40)
 */
export interface SECURITY_MESSAGE {
  /** Windows.Win32.NetworkManagement.Rras.SECURITY_MESSAGE_MSG_ID */
  dwMsgId: SECURITY_MESSAGE_MSG_ID;
  /** isize */
  hPort: Deno.PointerValue;
  /** u32 */
  dwError: number;
  /** array */
  UserName: Deno.PointerValue | null;
  /** array */
  Domain: Deno.PointerValue | null;
}

export const sizeofSECURITY_MESSAGE = 40;

export function allocSECURITY_MESSAGE(data?: Partial<SECURITY_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMsgId !== undefined) view.setUint32(0, Number(data.dwMsgId), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.hPort !== undefined) view.setBigInt64(8, BigInt(data.hPort), true);
  // 0x10: u32
  if (data?.dwError !== undefined) view.setUint32(16, Number(data.dwError), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.UserName !== undefined) view.setBigUint64(24, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x20: pointer
  if (data?.Domain !== undefined) view.setBigUint64(32, data.Domain === null ? 0n : BigInt(util.toPointer(data.Domain)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RAS_SECURITY_INFO (size: 16)
 */
export interface RAS_SECURITY_INFO {
  /** u32 */
  LastError: number;
  /** u32 */
  BytesReceived: number;
  /** array */
  DeviceName: Deno.PointerValue | null;
}

export const sizeofRAS_SECURITY_INFO = 16;

export function allocRAS_SECURITY_INFO(data?: Partial<RAS_SECURITY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_SECURITY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LastError !== undefined) view.setUint32(0, Number(data.LastError), true);
  // 0x04: u32
  if (data?.BytesReceived !== undefined) view.setUint32(4, Number(data.BytesReceived), true);
  // 0x08: pointer
  if (data?.DeviceName !== undefined) view.setBigUint64(8, data.DeviceName === null ? 0n : BigInt(util.toPointer(data.DeviceName)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.MGM_IF_ENTRY (size: 16)
 */
export interface MGM_IF_ENTRY {
  /** u32 */
  dwIfIndex: number;
  /** u32 */
  dwIfNextHopAddr: number;
  /** Windows.Win32.Foundation.BOOL */
  bIGMP: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bIsEnabled: boolean;
}

export const sizeofMGM_IF_ENTRY = 16;

export function allocMGM_IF_ENTRY(data?: Partial<MGM_IF_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofMGM_IF_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIfIndex !== undefined) view.setUint32(0, Number(data.dwIfIndex), true);
  // 0x04: u32
  if (data?.dwIfNextHopAddr !== undefined) view.setUint32(4, Number(data.dwIfNextHopAddr), true);
  // 0x08: i32
  if (data?.bIGMP !== undefined) view.setInt32(8, Number(data.bIGMP), true);
  // 0x0c: i32
  if (data?.bIsEnabled !== undefined) view.setInt32(12, Number(data.bIsEnabled), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.ROUTING_PROTOCOL_CONFIG (size: 80)
 */
export interface ROUTING_PROTOCOL_CONFIG {
  /** u32 */
  dwCallbackFlags: number;
  /** Windows.Win32.NetworkManagement.Rras.PMGM_RPF_CALLBACK */
  pfnRpfCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMGM_CREATION_ALERT_CALLBACK */
  pfnCreationAlertCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMGM_PRUNE_ALERT_CALLBACK */
  pfnPruneAlertCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMGM_JOIN_ALERT_CALLBACK */
  pfnJoinAlertCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMGM_WRONG_IF_CALLBACK */
  pfnWrongIfCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMGM_LOCAL_JOIN_CALLBACK */
  pfnLocalJoinCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMGM_LOCAL_LEAVE_CALLBACK */
  pfnLocalLeaveCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMGM_DISABLE_IGMP_CALLBACK */
  pfnDisableIgmpCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Rras.PMGM_ENABLE_IGMP_CALLBACK */
  pfnEnableIgmpCallback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofROUTING_PROTOCOL_CONFIG = 80;

export function allocROUTING_PROTOCOL_CONFIG(data?: Partial<ROUTING_PROTOCOL_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofROUTING_PROTOCOL_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCallbackFlags !== undefined) view.setUint32(0, Number(data.dwCallbackFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnRpfCallback !== undefined) view.setBigUint64(8, data.pfnRpfCallback === null ? 0n : BigInt(util.toPointer(data.pfnRpfCallback)), true);
  // 0x10: pointer
  if (data?.pfnCreationAlertCallback !== undefined) view.setBigUint64(16, data.pfnCreationAlertCallback === null ? 0n : BigInt(util.toPointer(data.pfnCreationAlertCallback)), true);
  // 0x18: pointer
  if (data?.pfnPruneAlertCallback !== undefined) view.setBigUint64(24, data.pfnPruneAlertCallback === null ? 0n : BigInt(util.toPointer(data.pfnPruneAlertCallback)), true);
  // 0x20: pointer
  if (data?.pfnJoinAlertCallback !== undefined) view.setBigUint64(32, data.pfnJoinAlertCallback === null ? 0n : BigInt(util.toPointer(data.pfnJoinAlertCallback)), true);
  // 0x28: pointer
  if (data?.pfnWrongIfCallback !== undefined) view.setBigUint64(40, data.pfnWrongIfCallback === null ? 0n : BigInt(util.toPointer(data.pfnWrongIfCallback)), true);
  // 0x30: pointer
  if (data?.pfnLocalJoinCallback !== undefined) view.setBigUint64(48, data.pfnLocalJoinCallback === null ? 0n : BigInt(util.toPointer(data.pfnLocalJoinCallback)), true);
  // 0x38: pointer
  if (data?.pfnLocalLeaveCallback !== undefined) view.setBigUint64(56, data.pfnLocalLeaveCallback === null ? 0n : BigInt(util.toPointer(data.pfnLocalLeaveCallback)), true);
  // 0x40: pointer
  if (data?.pfnDisableIgmpCallback !== undefined) view.setBigUint64(64, data.pfnDisableIgmpCallback === null ? 0n : BigInt(util.toPointer(data.pfnDisableIgmpCallback)), true);
  // 0x48: pointer
  if (data?.pfnEnableIgmpCallback !== undefined) view.setBigUint64(72, data.pfnEnableIgmpCallback === null ? 0n : BigInt(util.toPointer(data.pfnEnableIgmpCallback)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.SOURCE_GROUP_ENTRY (size: 16)
 */
export interface SOURCE_GROUP_ENTRY {
  /** u32 */
  dwSourceAddr: number;
  /** u32 */
  dwSourceMask: number;
  /** u32 */
  dwGroupAddr: number;
  /** u32 */
  dwGroupMask: number;
}

export const sizeofSOURCE_GROUP_ENTRY = 16;

export function allocSOURCE_GROUP_ENTRY(data?: Partial<SOURCE_GROUP_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSOURCE_GROUP_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSourceAddr !== undefined) view.setUint32(0, Number(data.dwSourceAddr), true);
  // 0x04: u32
  if (data?.dwSourceMask !== undefined) view.setUint32(4, Number(data.dwSourceMask), true);
  // 0x08: u32
  if (data?.dwGroupAddr !== undefined) view.setUint32(8, Number(data.dwGroupAddr), true);
  // 0x0c: u32
  if (data?.dwGroupMask !== undefined) view.setUint32(12, Number(data.dwGroupMask), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_REGN_PROFILE (size: 16)
 */
export interface RTM_REGN_PROFILE {
  /** u32 */
  MaxNextHopsInRoute: number;
  /** u32 */
  MaxHandlesInEnum: number;
  /** u32 */
  ViewsSupported: number;
  /** u32 */
  NumberOfViews: number;
}

export const sizeofRTM_REGN_PROFILE = 16;

export function allocRTM_REGN_PROFILE(data?: Partial<RTM_REGN_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_REGN_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxNextHopsInRoute !== undefined) view.setUint32(0, Number(data.MaxNextHopsInRoute), true);
  // 0x04: u32
  if (data?.MaxHandlesInEnum !== undefined) view.setUint32(4, Number(data.MaxHandlesInEnum), true);
  // 0x08: u32
  if (data?.ViewsSupported !== undefined) view.setUint32(8, Number(data.ViewsSupported), true);
  // 0x0c: u32
  if (data?.NumberOfViews !== undefined) view.setUint32(12, Number(data.NumberOfViews), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_NET_ADDRESS (size: 16)
 */
export interface RTM_NET_ADDRESS {
  /** u16 */
  AddressFamily: number;
  /** u16 */
  NumBits: number;
  /** array */
  AddrBits: Deno.PointerValue | null;
}

export const sizeofRTM_NET_ADDRESS = 16;

export function allocRTM_NET_ADDRESS(data?: Partial<RTM_NET_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_NET_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AddressFamily !== undefined) view.setUint16(0, Number(data.AddressFamily), true);
  // 0x02: u16
  if (data?.NumBits !== undefined) view.setUint16(2, Number(data.NumBits), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AddrBits !== undefined) view.setBigUint64(8, data.AddrBits === null ? 0n : BigInt(util.toPointer(data.AddrBits)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_PREF_INFO (size: 8)
 */
export interface RTM_PREF_INFO {
  /** u32 */
  Metric: number;
  /** u32 */
  Preference: number;
}

export const sizeofRTM_PREF_INFO = 8;

export function allocRTM_PREF_INFO(data?: Partial<RTM_PREF_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_PREF_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Metric !== undefined) view.setUint32(0, Number(data.Metric), true);
  // 0x04: u32
  if (data?.Preference !== undefined) view.setUint32(4, Number(data.Preference), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_NEXTHOP_LIST (size: 16)
 */
export interface RTM_NEXTHOP_LIST {
  /** u16 */
  NumNextHops: number;
  /** array */
  NextHops: Deno.PointerValue | null;
}

export const sizeofRTM_NEXTHOP_LIST = 16;

export function allocRTM_NEXTHOP_LIST(data?: Partial<RTM_NEXTHOP_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_NEXTHOP_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.NumNextHops !== undefined) view.setUint16(0, Number(data.NumNextHops), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.NextHops !== undefined) view.setBigUint64(8, data.NextHops === null ? 0n : BigInt(util.toPointer(data.NextHops)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_DEST_INFO (size: 40)
 */
export interface RTM_DEST_INFO {
  /** isize */
  DestHandle: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Rras.RTM_NET_ADDRESS */
  DestAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  LastChanged: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BelongsToViews: number;
  /** u32 */
  NumberOfViews: number;
  /** array */
  ViewInfo: Deno.PointerValue | null;
}

export const sizeofRTM_DEST_INFO = 40;

export function allocRTM_DEST_INFO(data?: Partial<RTM_DEST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_DEST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.DestHandle !== undefined) view.setBigInt64(0, BigInt(data.DestHandle), true);
  // 0x08: pointer
  if (data?.DestAddress !== undefined) view.setBigUint64(8, data.DestAddress === null ? 0n : BigInt(util.toPointer(data.DestAddress)), true);
  // 0x10: pointer
  if (data?.LastChanged !== undefined) view.setBigUint64(16, data.LastChanged === null ? 0n : BigInt(util.toPointer(data.LastChanged)), true);
  // 0x18: u32
  if (data?.BelongsToViews !== undefined) view.setUint32(24, Number(data.BelongsToViews), true);
  // 0x1c: u32
  if (data?.NumberOfViews !== undefined) view.setUint32(28, Number(data.NumberOfViews), true);
  // 0x20: pointer
  if (data?.ViewInfo !== undefined) view.setBigUint64(32, data.ViewInfo === null ? 0n : BigInt(util.toPointer(data.ViewInfo)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_ROUTE_INFO (size: 64)
 */
export interface RTM_ROUTE_INFO {
  /** isize */
  DestHandle: Deno.PointerValue;
  /** isize */
  RouteOwner: Deno.PointerValue;
  /** isize */
  Neighbour: Deno.PointerValue;
  /** u8 */
  State: number;
  /** u8 */
  Flags1: number;
  /** u16 */
  Flags: number;
  /** Windows.Win32.NetworkManagement.Rras.RTM_PREF_INFO */
  PrefInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BelongsToViews: number;
  /** ptr */
  EntitySpecificInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.Rras.RTM_NEXTHOP_LIST */
  NextHopsList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRTM_ROUTE_INFO = 64;

export function allocRTM_ROUTE_INFO(data?: Partial<RTM_ROUTE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_ROUTE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.DestHandle !== undefined) view.setBigInt64(0, BigInt(data.DestHandle), true);
  // 0x08: isize
  if (data?.RouteOwner !== undefined) view.setBigInt64(8, BigInt(data.RouteOwner), true);
  // 0x10: isize
  if (data?.Neighbour !== undefined) view.setBigInt64(16, BigInt(data.Neighbour), true);
  // 0x18: u8
  if (data?.State !== undefined) view.setUint8(24, Number(data.State));
  // 0x19: u8
  if (data?.Flags1 !== undefined) view.setUint8(25, Number(data.Flags1));
  // 0x1a: u16
  if (data?.Flags !== undefined) view.setUint16(26, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.PrefInfo !== undefined) view.setBigUint64(32, data.PrefInfo === null ? 0n : BigInt(util.toPointer(data.PrefInfo)), true);
  // 0x28: u32
  if (data?.BelongsToViews !== undefined) view.setUint32(40, Number(data.BelongsToViews), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.EntitySpecificInfo !== undefined) view.setBigUint64(48, data.EntitySpecificInfo === null ? 0n : BigInt(util.toPointer(data.EntitySpecificInfo)), true);
  // 0x38: pointer
  if (data?.NextHopsList !== undefined) view.setBigUint64(56, data.NextHopsList === null ? 0n : BigInt(util.toPointer(data.NextHopsList)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_NEXTHOP_INFO (size: 40)
 */
export interface RTM_NEXTHOP_INFO {
  /** Windows.Win32.NetworkManagement.Rras.RTM_NET_ADDRESS */
  NextHopAddress: Uint8Array | Deno.PointerValue | null;
  /** isize */
  NextHopOwner: Deno.PointerValue;
  /** u32 */
  InterfaceIndex: number;
  /** u16 */
  State: number;
  /** u16 */
  Flags: number;
  /** ptr */
  EntitySpecificInfo: Deno.PointerValue | Uint8Array | null;
  /** isize */
  RemoteNextHop: Deno.PointerValue;
}

export const sizeofRTM_NEXTHOP_INFO = 40;

export function allocRTM_NEXTHOP_INFO(data?: Partial<RTM_NEXTHOP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_NEXTHOP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NextHopAddress !== undefined) view.setBigUint64(0, data.NextHopAddress === null ? 0n : BigInt(util.toPointer(data.NextHopAddress)), true);
  // 0x08: isize
  if (data?.NextHopOwner !== undefined) view.setBigInt64(8, BigInt(data.NextHopOwner), true);
  // 0x10: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(16, Number(data.InterfaceIndex), true);
  // 0x14: u16
  if (data?.State !== undefined) view.setUint16(20, Number(data.State), true);
  // 0x16: u16
  if (data?.Flags !== undefined) view.setUint16(22, Number(data.Flags), true);
  // 0x18: pointer
  if (data?.EntitySpecificInfo !== undefined) view.setBigUint64(24, data.EntitySpecificInfo === null ? 0n : BigInt(util.toPointer(data.EntitySpecificInfo)), true);
  // 0x20: isize
  if (data?.RemoteNextHop !== undefined) view.setBigInt64(32, BigInt(data.RemoteNextHop), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_ENTITY_ID (size: 8)
 */
export interface RTM_ENTITY_ID {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRTM_ENTITY_ID = 8;

export function allocRTM_ENTITY_ID(data?: Partial<RTM_ENTITY_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_ENTITY_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_ENTITY_INFO (size: 16)
 */
export interface RTM_ENTITY_INFO {
  /** u16 */
  RtmInstanceId: number;
  /** u16 */
  AddressFamily: number;
  /** Windows.Win32.NetworkManagement.Rras.RTM_ENTITY_ID */
  EntityId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRTM_ENTITY_INFO = 16;

export function allocRTM_ENTITY_INFO(data?: Partial<RTM_ENTITY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_ENTITY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.RtmInstanceId !== undefined) view.setUint16(0, Number(data.RtmInstanceId), true);
  // 0x02: u16
  if (data?.AddressFamily !== undefined) view.setUint16(2, Number(data.AddressFamily), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EntityId !== undefined) view.setBigUint64(8, data.EntityId === null ? 0n : BigInt(util.toPointer(data.EntityId)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_ENTITY_METHOD_INPUT (size: 16)
 */
export interface RTM_ENTITY_METHOD_INPUT {
  /** u32 */
  MethodType: number;
  /** u32 */
  InputSize: number;
  /** array */
  InputData: Deno.PointerValue | null;
}

export const sizeofRTM_ENTITY_METHOD_INPUT = 16;

export function allocRTM_ENTITY_METHOD_INPUT(data?: Partial<RTM_ENTITY_METHOD_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_ENTITY_METHOD_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MethodType !== undefined) view.setUint32(0, Number(data.MethodType), true);
  // 0x04: u32
  if (data?.InputSize !== undefined) view.setUint32(4, Number(data.InputSize), true);
  // 0x08: pointer
  if (data?.InputData !== undefined) view.setBigUint64(8, data.InputData === null ? 0n : BigInt(util.toPointer(data.InputData)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_ENTITY_METHOD_OUTPUT (size: 24)
 */
export interface RTM_ENTITY_METHOD_OUTPUT {
  /** u32 */
  MethodType: number;
  /** u32 */
  MethodStatus: number;
  /** u32 */
  OutputSize: number;
  /** array */
  OutputData: Deno.PointerValue | null;
}

export const sizeofRTM_ENTITY_METHOD_OUTPUT = 24;

export function allocRTM_ENTITY_METHOD_OUTPUT(data?: Partial<RTM_ENTITY_METHOD_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_ENTITY_METHOD_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MethodType !== undefined) view.setUint32(0, Number(data.MethodType), true);
  // 0x04: u32
  if (data?.MethodStatus !== undefined) view.setUint32(4, Number(data.MethodStatus), true);
  // 0x08: u32
  if (data?.OutputSize !== undefined) view.setUint32(8, Number(data.OutputSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.OutputData !== undefined) view.setBigUint64(16, data.OutputData === null ? 0n : BigInt(util.toPointer(data.OutputData)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Rras.RTM_ENTITY_EXPORT_METHODS (size: 16)
 */
export interface RTM_ENTITY_EXPORT_METHODS {
  /** u32 */
  NumMethods: number;
  /** array */
  Methods: Deno.PointerValue | null;
}

export const sizeofRTM_ENTITY_EXPORT_METHODS = 16;

export function allocRTM_ENTITY_EXPORT_METHODS(data?: Partial<RTM_ENTITY_EXPORT_METHODS>): Uint8Array {
  const buf = new Uint8Array(sizeofRTM_ENTITY_EXPORT_METHODS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumMethods !== undefined) view.setUint32(0, Number(data.NumMethods), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Methods !== undefined) view.setBigUint64(8, data.Methods === null ? 0n : BigInt(util.toPointer(data.Methods)), true);
  return buf;
}

// Native Libraries

try {
  var libRASAPI32_dll = Deno.dlopen("RASAPI32.dll", {
    RasDialA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    RasDialW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    RasEnumConnectionsA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasEnumConnectionsW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasEnumEntriesA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasEnumEntriesW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasGetConnectStatusA: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RasGetConnectStatusW: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RasGetErrorStringA: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    RasGetErrorStringW: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    RasHangUpA: {
      parameters: ["pointer"],
      result: "u32",
    },
    RasHangUpW: {
      parameters: ["pointer"],
      result: "u32",
    },
    RasGetProjectionInfoA: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    RasGetProjectionInfoW: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    RasCreatePhonebookEntryA: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    RasCreatePhonebookEntryW: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    RasEditPhonebookEntryA: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "u32",
    },
    RasEditPhonebookEntryW: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "u32",
    },
    RasSetEntryDialParamsA: {
      parameters: ["buffer", "pointer", "i32"],
      result: "u32",
    },
    RasSetEntryDialParamsW: {
      parameters: ["buffer", "pointer", "i32"],
      result: "u32",
    },
    RasGetEntryDialParamsA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
    },
    RasGetEntryDialParamsW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
    },
    RasEnumDevicesA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasEnumDevicesW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasGetCountryInfoA: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RasGetCountryInfoW: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RasGetEntryPropertiesA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasGetEntryPropertiesW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasSetEntryPropertiesA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    RasSetEntryPropertiesW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    RasRenameEntryA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "u32",
    },
    RasRenameEntryW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "u32",
    },
    RasDeleteEntryA: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    RasDeleteEntryW: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    RasValidateEntryNameA: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    RasValidateEntryNameW: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    RasConnectionNotificationA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    RasConnectionNotificationW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    RasGetSubEntryHandleA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    RasGetSubEntryHandleW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    RasGetCredentialsA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    RasGetCredentialsW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    RasSetCredentialsA: {
      parameters: ["buffer", "buffer", "pointer", "i32"],
      result: "u32",
    },
    RasSetCredentialsW: {
      parameters: ["buffer", "buffer", "pointer", "i32"],
      result: "u32",
    },
    RasGetSubEntryPropertiesA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasGetSubEntryPropertiesW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasSetSubEntryPropertiesA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    RasSetSubEntryPropertiesW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    RasGetAutodialAddressA: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasGetAutodialAddressW: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasSetAutodialAddressA: {
      parameters: ["buffer", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    RasSetAutodialAddressW: {
      parameters: ["buffer", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    RasEnumAutodialAddressesA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasEnumAutodialAddressesW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    RasGetAutodialEnableA: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    RasGetAutodialEnableW: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    RasSetAutodialEnableA: {
      parameters: ["u32", "i32"],
      result: "u32",
    },
    RasSetAutodialEnableW: {
      parameters: ["u32", "i32"],
      result: "u32",
    },
    RasGetAutodialParamA: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    RasGetAutodialParamW: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    RasSetAutodialParamA: {
      parameters: ["u32", "pointer", "u32"],
      result: "u32",
    },
    RasSetAutodialParamW: {
      parameters: ["u32", "pointer", "u32"],
      result: "u32",
    },
    RasGetPCscf: {
      parameters: ["buffer"],
      result: "u32",
    },
    RasInvokeEapUI: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    RasGetLinkStatistics: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    RasGetConnectionStatistics: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RasClearLinkStatistics: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    RasClearConnectionStatistics: {
      parameters: ["pointer"],
      result: "u32",
    },
    RasGetEapUserDataA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    RasGetEapUserDataW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    RasSetEapUserDataA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    RasSetEapUserDataW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    RasGetCustomAuthDataA: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    RasGetCustomAuthDataW: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    RasSetCustomAuthDataA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    RasSetCustomAuthDataW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    RasGetEapUserIdentityW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    RasGetEapUserIdentityA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    RasFreeEapUserIdentityW: {
      parameters: ["pointer"],
      result: "void",
    },
    RasFreeEapUserIdentityA: {
      parameters: ["pointer"],
      result: "void",
    },
    RasDeleteSubEntryA: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    RasDeleteSubEntryW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    RasUpdateConnection: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RasGetProjectionInfoEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libRASDLG_dll = Deno.dlopen("RASDLG.dll", {
    RasPhonebookDlgA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
    },
    RasPhonebookDlgW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
    },
    RasEntryDlgA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
    },
    RasEntryDlgW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
    },
    RasDialDlgA: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    RasDialDlgW: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMPRAPI_dll = Deno.dlopen("MPRAPI.dll", {
    MprAdminConnectionEnumEx: {
      parameters: ["isize", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminConnectionGetInfoEx: {
      parameters: ["isize", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminServerGetInfoEx: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    MprAdminServerSetInfoEx: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    MprConfigServerGetInfoEx: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    MprConfigServerSetInfoEx: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    MprAdminUpdateConnection: {
      parameters: ["isize", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminIsServiceInitialized: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceSetCustomInfoEx: {
      parameters: ["isize", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceGetCustomInfoEx: {
      parameters: ["isize", "pointer", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceGetCustomInfoEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceSetCustomInfoEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminConnectionEnum: {
      parameters: ["isize", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminPortEnum: {
      parameters: ["isize", "u32", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminConnectionGetInfo: {
      parameters: ["isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminPortGetInfo: {
      parameters: ["isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminConnectionClearStats: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    MprAdminPortClearStats: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    MprAdminPortReset: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    MprAdminPortDisconnect: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    MprAdminConnectionRemoveQuarantine: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    MprAdminUserGetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    MprAdminUserSetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    MprAdminSendUserMessage: {
      parameters: ["isize", "pointer", "buffer"],
      result: "u32",
    },
    MprAdminGetPDCServer: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "u32",
    },
    MprAdminIsServiceRunning: {
      parameters: ["buffer"],
      result: "i32",
    },
    MprAdminServerConnect: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    MprAdminServerDisconnect: {
      parameters: ["isize"],
      result: "void",
    },
    MprAdminServerGetCredentials: {
      parameters: ["isize", "u32", "pointer"],
      result: "u32",
    },
    MprAdminServerSetCredentials: {
      parameters: ["isize", "u32", "pointer"],
      result: "u32",
    },
    MprAdminBufferFree: {
      parameters: ["pointer"],
      result: "u32",
    },
    MprAdminGetErrorString: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    MprAdminServerGetInfo: {
      parameters: ["isize", "u32", "pointer"],
      result: "u32",
    },
    MprAdminServerSetInfo: {
      parameters: ["isize", "u32", "pointer"],
      result: "u32",
    },
    MprAdminEstablishDomainRasServer: {
      parameters: ["buffer", "buffer", "i32"],
      result: "u32",
    },
    MprAdminIsDomainRasServer: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    MprAdminTransportCreate: {
      parameters: ["isize", "u32", "buffer", "pointer", "u32", "pointer", "u32", "buffer"],
      result: "u32",
    },
    MprAdminTransportSetInfo: {
      parameters: ["isize", "u32", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    MprAdminTransportGetInfo: {
      parameters: ["isize", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminDeviceEnum: {
      parameters: ["isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceGetHandle: {
      parameters: ["isize", "buffer", "pointer", "i32"],
      result: "u32",
    },
    MprAdminInterfaceCreate: {
      parameters: ["isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceGetInfo: {
      parameters: ["isize", "pointer", "u32", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceSetInfo: {
      parameters: ["isize", "pointer", "u32", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceDelete: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceDeviceGetInfo: {
      parameters: ["isize", "pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceDeviceSetInfo: {
      parameters: ["isize", "pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceTransportRemove: {
      parameters: ["isize", "pointer", "u32"],
      result: "u32",
    },
    MprAdminInterfaceTransportAdd: {
      parameters: ["isize", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    MprAdminInterfaceTransportGetInfo: {
      parameters: ["isize", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceTransportSetInfo: {
      parameters: ["isize", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    MprAdminInterfaceEnum: {
      parameters: ["isize", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceSetCredentials: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "buffer"],
      result: "u32",
    },
    MprAdminInterfaceGetCredentials: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "buffer"],
      result: "u32",
    },
    MprAdminInterfaceSetCredentialsEx: {
      parameters: ["isize", "pointer", "u32", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceGetCredentialsEx: {
      parameters: ["isize", "pointer", "u32", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceConnect: {
      parameters: ["isize", "pointer", "pointer", "i32"],
      result: "u32",
    },
    MprAdminInterfaceDisconnect: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceUpdateRoutes: {
      parameters: ["isize", "pointer", "u32", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceQueryUpdateResult: {
      parameters: ["isize", "pointer", "u32", "pointer"],
      result: "u32",
    },
    MprAdminInterfaceUpdatePhonebookInfo: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    MprAdminRegisterConnectionNotification: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    MprAdminDeregisterConnectionNotification: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    MprAdminMIBServerConnect: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    MprAdminMIBServerDisconnect: {
      parameters: ["isize"],
      result: "void",
    },
    MprAdminMIBEntryCreate: {
      parameters: ["isize", "u32", "u32", "pointer", "u32"],
      result: "u32",
    },
    MprAdminMIBEntryDelete: {
      parameters: ["isize", "u32", "u32", "pointer", "u32"],
      result: "u32",
    },
    MprAdminMIBEntrySet: {
      parameters: ["isize", "u32", "u32", "pointer", "u32"],
      result: "u32",
    },
    MprAdminMIBEntryGet: {
      parameters: ["isize", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminMIBEntryGetFirst: {
      parameters: ["isize", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminMIBEntryGetNext: {
      parameters: ["isize", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprAdminMIBBufferFree: {
      parameters: ["pointer"],
      result: "u32",
    },
    MprConfigServerInstall: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    MprConfigServerConnect: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    MprConfigServerDisconnect: {
      parameters: ["pointer"],
      result: "void",
    },
    MprConfigServerRefresh: {
      parameters: ["pointer"],
      result: "u32",
    },
    MprConfigBufferFree: {
      parameters: ["pointer"],
      result: "u32",
    },
    MprConfigServerGetInfo: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    MprConfigServerSetInfo: {
      parameters: ["isize", "u32", "pointer"],
      result: "u32",
    },
    MprConfigServerBackup: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    MprConfigServerRestore: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    MprConfigTransportCreate: {
      parameters: ["pointer", "u32", "buffer", "pointer", "u32", "pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    MprConfigTransportDelete: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    MprConfigTransportGetHandle: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    MprConfigTransportSetInfo: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32", "buffer"],
      result: "u32",
    },
    MprConfigTransportGetInfo: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprConfigTransportEnum: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceCreate: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceDelete: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceGetHandle: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceGetInfo: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceSetInfo: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceEnum: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceTransportAdd: {
      parameters: ["pointer", "pointer", "u32", "buffer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceTransportRemove: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceTransportGetHandle: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceTransportGetInfo: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprConfigInterfaceTransportSetInfo: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    MprConfigInterfaceTransportEnum: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprConfigGetFriendlyName: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    MprConfigGetGuidName: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    MprConfigFilterGetInfo: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    MprConfigFilterSetInfo: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    MprInfoCreate: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    MprInfoDelete: {
      parameters: ["pointer"],
      result: "u32",
    },
    MprInfoRemoveAll: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    MprInfoDuplicate: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    MprInfoBlockAdd: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprInfoBlockRemove: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    MprInfoBlockSet: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MprInfoBlockFind: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MprInfoBlockQuerySize: {
      parameters: ["pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var librtm_dll = Deno.dlopen("rtm.dll", {
    MgmRegisterMProtocol: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    MgmDeRegisterMProtocol: {
      parameters: ["pointer"],
      result: "u32",
    },
    MgmTakeInterfaceOwnership: {
      parameters: ["pointer", "u32", "u32"],
      result: "u32",
    },
    MgmReleaseInterfaceOwnership: {
      parameters: ["pointer", "u32", "u32"],
      result: "u32",
    },
    MgmGetProtocolOnInterface: {
      parameters: ["u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MgmAddGroupMembershipEntry: {
      parameters: ["pointer", "u32", "u32", "u32", "u32", "u32", "u32", "u32"],
      result: "u32",
    },
    MgmDeleteGroupMembershipEntry: {
      parameters: ["pointer", "u32", "u32", "u32", "u32", "u32", "u32", "u32"],
      result: "u32",
    },
    MgmGetMfe: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    MgmGetFirstMfe: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    MgmGetNextMfe: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MgmGetMfeStats: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    MgmGetFirstMfeStats: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    MgmGetNextMfeStats: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    MgmGroupEnumerationStart: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    MgmGroupEnumerationGetNext: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MgmGroupEnumerationEnd: {
      parameters: ["pointer"],
      result: "u32",
    },
    RtmConvertNetAddressToIpv6AddressAndLength: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    RtmConvertIpv6AddressAndLengthToNetAddress: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    RtmRegisterEntity: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    RtmDeregisterEntity: {
      parameters: ["isize"],
      result: "u32",
    },
    RtmGetRegisteredEntities: {
      parameters: ["isize", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RtmReleaseEntities: {
      parameters: ["isize", "u32", "pointer"],
      result: "u32",
    },
    RtmLockDestination: {
      parameters: ["isize", "isize", "i32", "i32"],
      result: "u32",
    },
    RtmGetOpaqueInformationPointer: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    RtmGetEntityMethods: {
      parameters: ["isize", "isize", "pointer", "pointer"],
      result: "u32",
    },
    RtmInvokeMethod: {
      parameters: ["isize", "isize", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RtmBlockMethods: {
      parameters: ["isize", "pointer", "u8", "u32"],
      result: "u32",
    },
    RtmGetEntityInfo: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    RtmGetDestInfo: {
      parameters: ["isize", "isize", "u32", "u32", "pointer"],
      result: "u32",
    },
    RtmGetRouteInfo: {
      parameters: ["isize", "isize", "pointer", "pointer"],
      result: "u32",
    },
    RtmGetNextHopInfo: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    RtmReleaseEntityInfo: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    RtmReleaseDestInfo: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    RtmReleaseRouteInfo: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    RtmReleaseNextHopInfo: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    RtmAddRouteToDest: {
      parameters: ["isize", "pointer", "pointer", "pointer", "u32", "isize", "u32", "isize", "pointer"],
      result: "u32",
    },
    RtmDeleteRouteToDest: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    RtmHoldDestination: {
      parameters: ["isize", "isize", "u32", "u32"],
      result: "u32",
    },
    RtmGetRoutePointer: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    RtmLockRoute: {
      parameters: ["isize", "isize", "i32", "i32", "pointer"],
      result: "u32",
    },
    RtmUpdateAndUnlockRoute: {
      parameters: ["isize", "isize", "u32", "isize", "u32", "isize", "pointer"],
      result: "u32",
    },
    RtmGetExactMatchDestination: {
      parameters: ["isize", "pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    RtmGetMostSpecificDestination: {
      parameters: ["isize", "pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    RtmGetLessSpecificDestination: {
      parameters: ["isize", "isize", "u32", "u32", "pointer"],
      result: "u32",
    },
    RtmGetExactMatchRoute: {
      parameters: ["isize", "pointer", "u32", "pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    RtmIsBestRoute: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    RtmAddNextHop: {
      parameters: ["isize", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RtmFindNextHop: {
      parameters: ["isize", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RtmDeleteNextHop: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    RtmGetNextHopPointer: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    RtmLockNextHop: {
      parameters: ["isize", "isize", "i32", "i32", "pointer"],
      result: "u32",
    },
    RtmCreateDestEnum: {
      parameters: ["isize", "u32", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    RtmGetEnumDests: {
      parameters: ["isize", "isize", "pointer", "pointer"],
      result: "u32",
    },
    RtmReleaseDests: {
      parameters: ["isize", "u32", "pointer"],
      result: "u32",
    },
    RtmCreateRouteEnum: {
      parameters: ["isize", "isize", "u32", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    RtmGetEnumRoutes: {
      parameters: ["isize", "isize", "pointer", "pointer"],
      result: "u32",
    },
    RtmReleaseRoutes: {
      parameters: ["isize", "u32", "pointer"],
      result: "u32",
    },
    RtmCreateNextHopEnum: {
      parameters: ["isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    RtmGetEnumNextHops: {
      parameters: ["isize", "isize", "pointer", "pointer"],
      result: "u32",
    },
    RtmReleaseNextHops: {
      parameters: ["isize", "u32", "pointer"],
      result: "u32",
    },
    RtmDeleteEnumHandle: {
      parameters: ["isize", "isize"],
      result: "u32",
    },
    RtmRegisterForChangeNotification: {
      parameters: ["isize", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    RtmGetChangedDests: {
      parameters: ["isize", "isize", "pointer", "pointer"],
      result: "u32",
    },
    RtmReleaseChangedDests: {
      parameters: ["isize", "isize", "u32", "pointer"],
      result: "u32",
    },
    RtmIgnoreChangedDests: {
      parameters: ["isize", "isize", "u32", "pointer"],
      result: "u32",
    },
    RtmGetChangeStatus: {
      parameters: ["isize", "isize", "isize", "pointer"],
      result: "u32",
    },
    RtmMarkDestForChangeNotification: {
      parameters: ["isize", "isize", "isize", "i32"],
      result: "u32",
    },
    RtmIsMarkedForChangeNotification: {
      parameters: ["isize", "isize", "isize", "pointer"],
      result: "u32",
    },
    RtmDeregisterFromChangeNotification: {
      parameters: ["isize", "isize"],
      result: "u32",
    },
    RtmCreateRouteList: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    RtmInsertInRouteList: {
      parameters: ["isize", "isize", "u32", "pointer"],
      result: "u32",
    },
    RtmCreateRouteListEnum: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    RtmGetListEnumRoutes: {
      parameters: ["isize", "isize", "pointer", "pointer"],
      result: "u32",
    },
    RtmDeleteRouteList: {
      parameters: ["isize", "isize"],
      result: "u32",
    },
    RtmReferenceHandles: {
      parameters: ["isize", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function RasDialA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: number /* u32 */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
  param5: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasDialA(util.toPointer(param0), util.pstrToFfi(param1), util.toPointer(param2), param3, util.toPointer(param4), util.toPointer(param5));
}

export function RasDialW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: number /* u32 */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
  param5: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasDialW(util.toPointer(param0), util.pwstrToFfi(param1), util.toPointer(param2), param3, util.toPointer(param4), util.toPointer(param5));
}

export function RasEnumConnectionsA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasEnumConnectionsA(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2));
}

export function RasEnumConnectionsW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasEnumConnectionsW(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2));
}

export function RasEnumEntriesA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasEnumEntriesA(util.pstrToFfi(param0), util.pstrToFfi(param1), util.toPointer(param2), util.toPointer(param3), util.toPointer(param4));
}

export function RasEnumEntriesW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasEnumEntriesW(util.pwstrToFfi(param0), util.pwstrToFfi(param1), util.toPointer(param2), util.toPointer(param3), util.toPointer(param4));
}

export function RasGetConnectStatusA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetConnectStatusA(util.toPointer(param0), util.toPointer(param1));
}

export function RasGetConnectStatusW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetConnectStatusW(util.toPointer(param0), util.toPointer(param1));
}

export function RasGetErrorStringA(
  ResourceId: number /* u32 */,
  lpszString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InBufSize: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetErrorStringA(ResourceId, util.pstrToFfi(lpszString), InBufSize);
}

export function RasGetErrorStringW(
  ResourceId: number /* u32 */,
  lpszString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InBufSize: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetErrorStringW(ResourceId, util.pwstrToFfi(lpszString), InBufSize);
}

export function RasHangUpA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
): number /* u32 */ {
  return libRASAPI32_dll.RasHangUpA(util.toPointer(param0));
}

export function RasHangUpW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
): number /* u32 */ {
  return libRASAPI32_dll.RasHangUpW(util.toPointer(param0));
}

export function RasGetProjectionInfoA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  param1: RASPROJECTION /* Windows.Win32.NetworkManagement.Rras.RASPROJECTION */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetProjectionInfoA(util.toPointer(param0), param1, util.toPointer(param2), util.toPointer(param3));
}

export function RasGetProjectionInfoW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  param1: RASPROJECTION /* Windows.Win32.NetworkManagement.Rras.RASPROJECTION */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetProjectionInfoW(util.toPointer(param0), param1, util.toPointer(param2), util.toPointer(param3));
}

export function RasCreatePhonebookEntryA(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libRASAPI32_dll.RasCreatePhonebookEntryA(util.hwndToFfi(param0), util.pstrToFfi(param1));
}

export function RasCreatePhonebookEntryW(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libRASAPI32_dll.RasCreatePhonebookEntryW(util.hwndToFfi(param0), util.pwstrToFfi(param1));
}

export function RasEditPhonebookEntryA(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libRASAPI32_dll.RasEditPhonebookEntryA(util.hwndToFfi(param0), util.pstrToFfi(param1), util.pstrToFfi(param2));
}

export function RasEditPhonebookEntryW(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libRASAPI32_dll.RasEditPhonebookEntryW(util.hwndToFfi(param0), util.pwstrToFfi(param1), util.pwstrToFfi(param2));
}

export function RasSetEntryDialParamsA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetEntryDialParamsA(util.pstrToFfi(param0), util.toPointer(param1), util.boolToFfi(param2));
}

export function RasSetEntryDialParamsW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetEntryDialParamsW(util.pwstrToFfi(param0), util.toPointer(param1), util.boolToFfi(param2));
}

export function RasGetEntryDialParamsA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetEntryDialParamsA(util.pstrToFfi(param0), util.toPointer(param1), util.toPointer(param2));
}

export function RasGetEntryDialParamsW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetEntryDialParamsW(util.pwstrToFfi(param0), util.toPointer(param1), util.toPointer(param2));
}

export function RasEnumDevicesA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasEnumDevicesA(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2));
}

export function RasEnumDevicesW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasEnumDevicesW(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2));
}

export function RasGetCountryInfoA(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetCountryInfoA(util.toPointer(param0), util.toPointer(param1));
}

export function RasGetCountryInfoW(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetCountryInfoW(util.toPointer(param0), util.toPointer(param1));
}

export function RasGetEntryPropertiesA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
  param5: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetEntryPropertiesA(util.pstrToFfi(param0), util.pstrToFfi(param1), util.toPointer(param2), util.toPointer(param3), util.toPointer(param4), util.toPointer(param5));
}

export function RasGetEntryPropertiesW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
  param5: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetEntryPropertiesW(util.pwstrToFfi(param0), util.pwstrToFfi(param1), util.toPointer(param2), util.toPointer(param3), util.toPointer(param4), util.toPointer(param5));
}

export function RasSetEntryPropertiesA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: number /* u32 */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
  param5: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetEntryPropertiesA(util.pstrToFfi(param0), util.pstrToFfi(param1), util.toPointer(param2), param3, util.toPointer(param4), param5);
}

export function RasSetEntryPropertiesW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: number /* u32 */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
  param5: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetEntryPropertiesW(util.pwstrToFfi(param0), util.pwstrToFfi(param1), util.toPointer(param2), param3, util.toPointer(param4), param5);
}

export function RasRenameEntryA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libRASAPI32_dll.RasRenameEntryA(util.pstrToFfi(param0), util.pstrToFfi(param1), util.pstrToFfi(param2));
}

export function RasRenameEntryW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libRASAPI32_dll.RasRenameEntryW(util.pwstrToFfi(param0), util.pwstrToFfi(param1), util.pwstrToFfi(param2));
}

export function RasDeleteEntryA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libRASAPI32_dll.RasDeleteEntryA(util.pstrToFfi(param0), util.pstrToFfi(param1));
}

export function RasDeleteEntryW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libRASAPI32_dll.RasDeleteEntryW(util.pwstrToFfi(param0), util.pwstrToFfi(param1));
}

export function RasValidateEntryNameA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libRASAPI32_dll.RasValidateEntryNameA(util.pstrToFfi(param0), util.pstrToFfi(param1));
}

export function RasValidateEntryNameW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libRASAPI32_dll.RasValidateEntryNameW(util.pwstrToFfi(param0), util.pwstrToFfi(param1));
}

export function RasConnectionNotificationA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  param2: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasConnectionNotificationA(util.toPointer(param0), util.toPointer(param1), param2);
}

export function RasConnectionNotificationW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  param2: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasConnectionNotificationW(util.toPointer(param0), util.toPointer(param1), param2);
}

export function RasGetSubEntryHandleA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetSubEntryHandleA(util.toPointer(param0), param1, util.toPointer(param2));
}

export function RasGetSubEntryHandleW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetSubEntryHandleW(util.toPointer(param0), param1, util.toPointer(param2));
}

export function RasGetCredentialsA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetCredentialsA(util.pstrToFfi(param0), util.pstrToFfi(param1), util.toPointer(param2));
}

export function RasGetCredentialsW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetCredentialsW(util.pwstrToFfi(param0), util.pwstrToFfi(param1), util.toPointer(param2));
}

export function RasSetCredentialsA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetCredentialsA(util.pstrToFfi(param0), util.pstrToFfi(param1), util.toPointer(param2), util.boolToFfi(param3));
}

export function RasSetCredentialsW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetCredentialsW(util.pwstrToFfi(param0), util.pwstrToFfi(param1), util.toPointer(param2), util.boolToFfi(param3));
}

export function RasGetSubEntryPropertiesA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: number /* u32 */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
  param5: Deno.PointerValue | Uint8Array | null /* ptr */,
  param6: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetSubEntryPropertiesA(util.pstrToFfi(param0), util.pstrToFfi(param1), param2, util.toPointer(param3), util.toPointer(param4), util.toPointer(param5), util.toPointer(param6));
}

export function RasGetSubEntryPropertiesW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: number /* u32 */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
  param5: Deno.PointerValue | Uint8Array | null /* ptr */,
  param6: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetSubEntryPropertiesW(util.pwstrToFfi(param0), util.pwstrToFfi(param1), param2, util.toPointer(param3), util.toPointer(param4), util.toPointer(param5), util.toPointer(param6));
}

export function RasSetSubEntryPropertiesA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: number /* u32 */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
  param4: number /* u32 */,
  param5: Deno.PointerValue | Uint8Array | null /* ptr */,
  param6: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetSubEntryPropertiesA(util.pstrToFfi(param0), util.pstrToFfi(param1), param2, util.toPointer(param3), param4, util.toPointer(param5), param6);
}

export function RasSetSubEntryPropertiesW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: number /* u32 */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
  param4: number /* u32 */,
  param5: Deno.PointerValue | Uint8Array | null /* ptr */,
  param6: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetSubEntryPropertiesW(util.pwstrToFfi(param0), util.pwstrToFfi(param1), param2, util.toPointer(param3), param4, util.toPointer(param5), param6);
}

export function RasGetAutodialAddressA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetAutodialAddressA(util.pstrToFfi(param0), util.toPointer(param1), util.toPointer(param2), util.toPointer(param3), util.toPointer(param4));
}

export function RasGetAutodialAddressW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetAutodialAddressW(util.pwstrToFfi(param0), util.toPointer(param1), util.toPointer(param2), util.toPointer(param3), util.toPointer(param4));
}

export function RasSetAutodialAddressA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: number /* u32 */,
  param4: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetAutodialAddressA(util.pstrToFfi(param0), param1, util.toPointer(param2), param3, param4);
}

export function RasSetAutodialAddressW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: number /* u32 */,
  param4: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetAutodialAddressW(util.pwstrToFfi(param0), param1, util.toPointer(param2), param3, param4);
}

export function RasEnumAutodialAddressesA(
  lppRasAutodialAddresses: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwcbRasAutodialAddresses: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwcRasAutodialAddresses: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasEnumAutodialAddressesA(util.toPointer(lppRasAutodialAddresses), util.toPointer(lpdwcbRasAutodialAddresses), util.toPointer(lpdwcRasAutodialAddresses));
}

export function RasEnumAutodialAddressesW(
  lppRasAutodialAddresses: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwcbRasAutodialAddresses: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwcRasAutodialAddresses: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasEnumAutodialAddressesW(util.toPointer(lppRasAutodialAddresses), util.toPointer(lpdwcbRasAutodialAddresses), util.toPointer(lpdwcRasAutodialAddresses));
}

export function RasGetAutodialEnableA(
  param0: number /* u32 */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetAutodialEnableA(param0, util.toPointer(param1));
}

export function RasGetAutodialEnableW(
  param0: number /* u32 */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetAutodialEnableW(param0, util.toPointer(param1));
}

export function RasSetAutodialEnableA(
  param0: number /* u32 */,
  param1: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetAutodialEnableA(param0, util.boolToFfi(param1));
}

export function RasSetAutodialEnableW(
  param0: number /* u32 */,
  param1: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetAutodialEnableW(param0, util.boolToFfi(param1));
}

export function RasGetAutodialParamA(
  param0: number /* u32 */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetAutodialParamA(param0, util.toPointer(param1), util.toPointer(param2));
}

export function RasGetAutodialParamW(
  param0: number /* u32 */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetAutodialParamW(param0, util.toPointer(param1), util.toPointer(param2));
}

export function RasSetAutodialParamA(
  param0: number /* u32 */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetAutodialParamA(param0, util.toPointer(param1), param2);
}

export function RasSetAutodialParamW(
  param0: number /* u32 */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetAutodialParamW(param0, util.toPointer(param1), param2);
}

export function RasGetPCscf(
  lpszPCscf: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetPCscf(util.pwstrToFfi(lpszPCscf));
}

export function RasInvokeEapUI(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
  param3: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): number /* u32 */ {
  return libRASAPI32_dll.RasInvokeEapUI(util.toPointer(param0), param1, util.toPointer(param2), util.hwndToFfi(param3));
}

export function RasGetLinkStatistics(
  hRasConn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  dwSubEntry: number /* u32 */,
  lpStatistics: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetLinkStatistics(util.toPointer(hRasConn), dwSubEntry, util.toPointer(lpStatistics));
}

export function RasGetConnectionStatistics(
  hRasConn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  lpStatistics: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetConnectionStatistics(util.toPointer(hRasConn), util.toPointer(lpStatistics));
}

export function RasClearLinkStatistics(
  hRasConn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  dwSubEntry: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasClearLinkStatistics(util.toPointer(hRasConn), dwSubEntry);
}

export function RasClearConnectionStatistics(
  hRasConn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
): number /* u32 */ {
  return libRASAPI32_dll.RasClearConnectionStatistics(util.toPointer(hRasConn));
}

export function RasGetEapUserDataA(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pszPhonebook: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEntry: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pbEapData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSizeofEapData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetEapUserDataA(util.toPointer(hToken), util.pstrToFfi(pszPhonebook), util.pstrToFfi(pszEntry), util.toPointer(pbEapData), util.toPointer(pdwSizeofEapData));
}

export function RasGetEapUserDataW(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pszPhonebook: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEntry: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbEapData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSizeofEapData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetEapUserDataW(util.toPointer(hToken), util.pwstrToFfi(pszPhonebook), util.pwstrToFfi(pszEntry), util.toPointer(pbEapData), util.toPointer(pdwSizeofEapData));
}

export function RasSetEapUserDataA(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pszPhonebook: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEntry: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pbEapData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSizeofEapData: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetEapUserDataA(util.toPointer(hToken), util.pstrToFfi(pszPhonebook), util.pstrToFfi(pszEntry), util.toPointer(pbEapData), dwSizeofEapData);
}

export function RasSetEapUserDataW(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pszPhonebook: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEntry: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbEapData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSizeofEapData: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetEapUserDataW(util.toPointer(hToken), util.pwstrToFfi(pszPhonebook), util.pwstrToFfi(pszEntry), util.toPointer(pbEapData), dwSizeofEapData);
}

export function RasGetCustomAuthDataA(
  pszPhonebook: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEntry: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pbCustomAuthData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSizeofCustomAuthData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetCustomAuthDataA(util.pstrToFfi(pszPhonebook), util.pstrToFfi(pszEntry), util.toPointer(pbCustomAuthData), util.toPointer(pdwSizeofCustomAuthData));
}

export function RasGetCustomAuthDataW(
  pszPhonebook: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEntry: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbCustomAuthData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSizeofCustomAuthData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetCustomAuthDataW(util.pwstrToFfi(pszPhonebook), util.pwstrToFfi(pszEntry), util.toPointer(pbCustomAuthData), util.toPointer(pdwSizeofCustomAuthData));
}

export function RasSetCustomAuthDataA(
  pszPhonebook: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEntry: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pbCustomAuthData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSizeofCustomAuthData: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetCustomAuthDataA(util.pstrToFfi(pszPhonebook), util.pstrToFfi(pszEntry), util.toPointer(pbCustomAuthData), dwSizeofCustomAuthData);
}

export function RasSetCustomAuthDataW(
  pszPhonebook: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEntry: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbCustomAuthData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSizeofCustomAuthData: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasSetCustomAuthDataW(util.pwstrToFfi(pszPhonebook), util.pwstrToFfi(pszEntry), util.toPointer(pbCustomAuthData), dwSizeofCustomAuthData);
}

export function RasGetEapUserIdentityW(
  pszPhonebook: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEntry: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  ppRasEapUserIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetEapUserIdentityW(util.pwstrToFfi(pszPhonebook), util.pwstrToFfi(pszEntry), dwFlags, util.hwndToFfi(hwnd), util.toPointer(ppRasEapUserIdentity));
}

export function RasGetEapUserIdentityA(
  pszPhonebook: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEntry: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  ppRasEapUserIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetEapUserIdentityA(util.pstrToFfi(pszPhonebook), util.pstrToFfi(pszEntry), dwFlags, util.hwndToFfi(hwnd), util.toPointer(ppRasEapUserIdentity));
}

export function RasFreeEapUserIdentityW(
  pRasEapUserIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRASAPI32_dll.RasFreeEapUserIdentityW(util.toPointer(pRasEapUserIdentity));
}

export function RasFreeEapUserIdentityA(
  pRasEapUserIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRASAPI32_dll.RasFreeEapUserIdentityA(util.toPointer(pRasEapUserIdentity));
}

export function RasDeleteSubEntryA(
  pszPhonebook: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEntry: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwSubentryId: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasDeleteSubEntryA(util.pstrToFfi(pszPhonebook), util.pstrToFfi(pszEntry), dwSubentryId);
}

export function RasDeleteSubEntryW(
  pszPhonebook: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEntry: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwSubEntryId: number /* u32 */,
): number /* u32 */ {
  return libRASAPI32_dll.RasDeleteSubEntryW(util.pwstrToFfi(pszPhonebook), util.pwstrToFfi(pszEntry), dwSubEntryId);
}

export function RasUpdateConnection(
  hrasconn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  lprasupdateconn: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasUpdateConnection(util.toPointer(hrasconn), util.toPointer(lprasupdateconn));
}

export function RasGetProjectionInfoEx(
  hrasconn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.HRASCONN */,
  pRasProjection: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRASAPI32_dll.RasGetProjectionInfoEx(util.toPointer(hrasconn), util.toPointer(pRasProjection), util.toPointer(lpdwSize));
}

export function RasPhonebookDlgA(
  lpszPhonebook: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszEntry: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRASDLG_dll.RasPhonebookDlgA(util.pstrToFfi(lpszPhonebook), util.pstrToFfi(lpszEntry), util.toPointer(lpInfo)));
}

export function RasPhonebookDlgW(
  lpszPhonebook: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszEntry: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRASDLG_dll.RasPhonebookDlgW(util.pwstrToFfi(lpszPhonebook), util.pwstrToFfi(lpszEntry), util.toPointer(lpInfo)));
}

export function RasEntryDlgA(
  lpszPhonebook: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszEntry: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRASDLG_dll.RasEntryDlgA(util.pstrToFfi(lpszPhonebook), util.pstrToFfi(lpszEntry), util.toPointer(lpInfo)));
}

export function RasEntryDlgW(
  lpszPhonebook: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszEntry: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRASDLG_dll.RasEntryDlgW(util.pwstrToFfi(lpszPhonebook), util.pwstrToFfi(lpszEntry), util.toPointer(lpInfo)));
}

export function RasDialDlgA(
  lpszPhonebook: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszEntry: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszPhoneNumber: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRASDLG_dll.RasDialDlgA(util.pstrToFfi(lpszPhonebook), util.pstrToFfi(lpszEntry), util.pstrToFfi(lpszPhoneNumber), util.toPointer(lpInfo)));
}

export function RasDialDlgW(
  lpszPhonebook: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszEntry: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszPhoneNumber: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRASDLG_dll.RasDialDlgW(util.pwstrToFfi(lpszPhonebook), util.pwstrToFfi(lpszEntry), util.pwstrToFfi(lpszPhoneNumber), util.toPointer(lpInfo)));
}

export function MprAdminConnectionEnumEx(
  hRasServer: Deno.PointerValue /* isize */,
  pObjectHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwPreferedMaxLen: number /* u32 */,
  lpdwEntriesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwTotalEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppRasConn: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminConnectionEnumEx(hRasServer, util.toPointer(pObjectHeader), dwPreferedMaxLen, util.toPointer(lpdwEntriesRead), util.toPointer(lpdwTotalEntries), util.toPointer(ppRasConn), util.toPointer(lpdwResumeHandle));
}

export function MprAdminConnectionGetInfoEx(
  hRasServer: Deno.PointerValue /* isize */,
  hRasConnection: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pRasConnection: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminConnectionGetInfoEx(hRasServer, util.toPointer(hRasConnection), util.toPointer(pRasConnection));
}

export function MprAdminServerGetInfoEx(
  hMprServer: Deno.PointerValue /* isize */,
  pServerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminServerGetInfoEx(hMprServer, util.toPointer(pServerInfo));
}

export function MprAdminServerSetInfoEx(
  hMprServer: Deno.PointerValue /* isize */,
  pServerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminServerSetInfoEx(hMprServer, util.toPointer(pServerInfo));
}

export function MprConfigServerGetInfoEx(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pServerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigServerGetInfoEx(util.toPointer(hMprConfig), util.toPointer(pServerInfo));
}

export function MprConfigServerSetInfoEx(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pSetServerConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigServerSetInfoEx(util.toPointer(hMprConfig), util.toPointer(pSetServerConfig));
}

export function MprAdminUpdateConnection(
  hRasServer: Deno.PointerValue /* isize */,
  hRasConnection: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pRasUpdateConnection: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminUpdateConnection(hRasServer, util.toPointer(hRasConnection), util.toPointer(pRasUpdateConnection));
}

export function MprAdminIsServiceInitialized(
  lpwsServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fIsServiceInitialized: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminIsServiceInitialized(util.pwstrToFfi(lpwsServerName), util.toPointer(fIsServiceInitialized));
}

export function MprAdminInterfaceSetCustomInfoEx(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pCustomInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceSetCustomInfoEx(hMprServer, util.toPointer(hInterface), util.toPointer(pCustomInfo));
}

export function MprAdminInterfaceGetCustomInfoEx(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pCustomInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceGetCustomInfoEx(hMprServer, util.toPointer(hInterface), util.toPointer(pCustomInfo));
}

export function MprConfigInterfaceGetCustomInfoEx(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pCustomInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceGetCustomInfoEx(util.toPointer(hMprConfig), util.toPointer(hRouterInterface), util.toPointer(pCustomInfo));
}

export function MprConfigInterfaceSetCustomInfoEx(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pCustomInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceSetCustomInfoEx(util.toPointer(hMprConfig), util.toPointer(hRouterInterface), util.toPointer(pCustomInfo));
}

export function MprAdminConnectionEnum(
  hRasServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  lplpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwPrefMaxLen: number /* u32 */,
  lpdwEntriesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwTotalEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminConnectionEnum(hRasServer, dwLevel, util.toPointer(lplpbBuffer), dwPrefMaxLen, util.toPointer(lpdwEntriesRead), util.toPointer(lpdwTotalEntries), util.toPointer(lpdwResumeHandle));
}

export function MprAdminPortEnum(
  hRasServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  hRasConnection: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lplpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwPrefMaxLen: number /* u32 */,
  lpdwEntriesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwTotalEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminPortEnum(hRasServer, dwLevel, util.toPointer(hRasConnection), util.toPointer(lplpbBuffer), dwPrefMaxLen, util.toPointer(lpdwEntriesRead), util.toPointer(lpdwTotalEntries), util.toPointer(lpdwResumeHandle));
}

export function MprAdminConnectionGetInfo(
  hRasServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  hRasConnection: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lplpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminConnectionGetInfo(hRasServer, dwLevel, util.toPointer(hRasConnection), util.toPointer(lplpbBuffer));
}

export function MprAdminPortGetInfo(
  hRasServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  hPort: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lplpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminPortGetInfo(hRasServer, dwLevel, util.toPointer(hPort), util.toPointer(lplpbBuffer));
}

export function MprAdminConnectionClearStats(
  hRasServer: Deno.PointerValue /* isize */,
  hRasConnection: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminConnectionClearStats(hRasServer, util.toPointer(hRasConnection));
}

export function MprAdminPortClearStats(
  hRasServer: Deno.PointerValue /* isize */,
  hPort: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminPortClearStats(hRasServer, util.toPointer(hPort));
}

export function MprAdminPortReset(
  hRasServer: Deno.PointerValue /* isize */,
  hPort: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminPortReset(hRasServer, util.toPointer(hPort));
}

export function MprAdminPortDisconnect(
  hRasServer: Deno.PointerValue /* isize */,
  hPort: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminPortDisconnect(hRasServer, util.toPointer(hPort));
}

export function MprAdminConnectionRemoveQuarantine(
  hRasServer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRasConnection: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  fIsIpAddress: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminConnectionRemoveQuarantine(util.toPointer(hRasServer), util.toPointer(hRasConnection), util.boolToFfi(fIsIpAddress));
}

export function MprAdminUserGetInfo(
  lpszServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszUser: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwLevel: number /* u32 */,
  lpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminUserGetInfo(util.pwstrToFfi(lpszServer), util.pwstrToFfi(lpszUser), dwLevel, util.toPointer(lpbBuffer));
}

export function MprAdminUserSetInfo(
  lpszServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszUser: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwLevel: number /* u32 */,
  lpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminUserSetInfo(util.pwstrToFfi(lpszServer), util.pwstrToFfi(lpszUser), dwLevel, util.toPointer(lpbBuffer));
}

export function MprAdminSendUserMessage(
  hMprServer: Deno.PointerValue /* isize */,
  hConnection: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpwszMessage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminSendUserMessage(hMprServer, util.toPointer(hConnection), util.pwstrToFfi(lpwszMessage));
}

export function MprAdminGetPDCServer(
  lpszDomain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszPDCServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminGetPDCServer(util.pwstrToFfi(lpszDomain), util.pwstrToFfi(lpszServer), util.pwstrToFfi(lpszPDCServer));
}

export function MprAdminIsServiceRunning(
  lpwsServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMPRAPI_dll.MprAdminIsServiceRunning(util.pwstrToFfi(lpwsServerName)));
}

export function MprAdminServerConnect(
  lpwsServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phMprServer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminServerConnect(util.pwstrToFfi(lpwsServerName), util.toPointer(phMprServer));
}

export function MprAdminServerDisconnect(
  hMprServer: Deno.PointerValue /* isize */,
): void /* void */ {
  return libMPRAPI_dll.MprAdminServerDisconnect(hMprServer);
}

export function MprAdminServerGetCredentials(
  hMprServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  lplpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminServerGetCredentials(hMprServer, dwLevel, util.toPointer(lplpbBuffer));
}

export function MprAdminServerSetCredentials(
  hMprServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  lpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminServerSetCredentials(hMprServer, dwLevel, util.toPointer(lpbBuffer));
}

export function MprAdminBufferFree(
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminBufferFree(util.toPointer(pBuffer));
}

export function MprAdminGetErrorString(
  dwError: number /* u32 */,
  lplpwsErrorString: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminGetErrorString(dwError, util.toPointer(lplpwsErrorString));
}

export function MprAdminServerGetInfo(
  hMprServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  lplpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminServerGetInfo(hMprServer, dwLevel, util.toPointer(lplpbBuffer));
}

export function MprAdminServerSetInfo(
  hMprServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  lpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminServerSetInfo(hMprServer, dwLevel, util.toPointer(lpbBuffer));
}

export function MprAdminEstablishDomainRasServer(
  pszDomain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszMachine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bEnable: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminEstablishDomainRasServer(util.pwstrToFfi(pszDomain), util.pwstrToFfi(pszMachine), util.boolToFfi(bEnable));
}

export function MprAdminIsDomainRasServer(
  pszDomain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszMachine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbIsRasServer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminIsDomainRasServer(util.pwstrToFfi(pszDomain), util.pwstrToFfi(pszMachine), util.toPointer(pbIsRasServer));
}

export function MprAdminTransportCreate(
  hMprServer: Deno.PointerValue /* isize */,
  dwTransportId: number /* u32 */,
  lpwsTransportName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pGlobalInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwGlobalInfoSize: number /* u32 */,
  pClientInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwClientInterfaceInfoSize: number /* u32 */,
  lpwsDLLPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminTransportCreate(hMprServer, dwTransportId, util.pwstrToFfi(lpwsTransportName), util.toPointer(pGlobalInfo), dwGlobalInfoSize, util.toPointer(pClientInterfaceInfo), dwClientInterfaceInfoSize, util.pwstrToFfi(lpwsDLLPath));
}

export function MprAdminTransportSetInfo(
  hMprServer: Deno.PointerValue /* isize */,
  dwTransportId: number /* u32 */,
  pGlobalInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwGlobalInfoSize: number /* u32 */,
  pClientInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwClientInterfaceInfoSize: number /* u32 */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminTransportSetInfo(hMprServer, dwTransportId, util.toPointer(pGlobalInfo), dwGlobalInfoSize, util.toPointer(pClientInterfaceInfo), dwClientInterfaceInfoSize);
}

export function MprAdminTransportGetInfo(
  hMprServer: Deno.PointerValue /* isize */,
  dwTransportId: number /* u32 */,
  ppGlobalInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwGlobalInfoSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppClientInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwClientInterfaceInfoSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminTransportGetInfo(hMprServer, dwTransportId, util.toPointer(ppGlobalInfo), util.toPointer(lpdwGlobalInfoSize), util.toPointer(ppClientInterfaceInfo), util.toPointer(lpdwClientInterfaceInfoSize));
}

export function MprAdminDeviceEnum(
  hMprServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  lplpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwTotalEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminDeviceEnum(hMprServer, dwLevel, util.toPointer(lplpbBuffer), util.toPointer(lpdwTotalEntries));
}

export function MprAdminInterfaceGetHandle(
  hMprServer: Deno.PointerValue /* isize */,
  lpwsInterfaceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  fIncludeClientInterfaces: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceGetHandle(hMprServer, util.pwstrToFfi(lpwsInterfaceName), util.toPointer(phInterface), util.boolToFfi(fIncludeClientInterfaces));
}

export function MprAdminInterfaceCreate(
  hMprServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  lpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  phInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceCreate(hMprServer, dwLevel, util.toPointer(lpbBuffer), util.toPointer(phInterface));
}

export function MprAdminInterfaceGetInfo(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  lplpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceGetInfo(hMprServer, util.toPointer(hInterface), dwLevel, util.toPointer(lplpbBuffer));
}

export function MprAdminInterfaceSetInfo(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  lpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceSetInfo(hMprServer, util.toPointer(hInterface), dwLevel, util.toPointer(lpbBuffer));
}

export function MprAdminInterfaceDelete(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceDelete(hMprServer, util.toPointer(hInterface));
}

export function MprAdminInterfaceDeviceGetInfo(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwIndex: number /* u32 */,
  dwLevel: number /* u32 */,
  lplpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceDeviceGetInfo(hMprServer, util.toPointer(hInterface), dwIndex, dwLevel, util.toPointer(lplpBuffer));
}

export function MprAdminInterfaceDeviceSetInfo(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwIndex: number /* u32 */,
  dwLevel: number /* u32 */,
  lpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceDeviceSetInfo(hMprServer, util.toPointer(hInterface), dwIndex, dwLevel, util.toPointer(lpbBuffer));
}

export function MprAdminInterfaceTransportRemove(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwTransportId: number /* u32 */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceTransportRemove(hMprServer, util.toPointer(hInterface), dwTransportId);
}

export function MprAdminInterfaceTransportAdd(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwTransportId: number /* u32 */,
  pInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInterfaceInfoSize: number /* u32 */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceTransportAdd(hMprServer, util.toPointer(hInterface), dwTransportId, util.toPointer(pInterfaceInfo), dwInterfaceInfoSize);
}

export function MprAdminInterfaceTransportGetInfo(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwTransportId: number /* u32 */,
  ppInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwInterfaceInfoSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceTransportGetInfo(hMprServer, util.toPointer(hInterface), dwTransportId, util.toPointer(ppInterfaceInfo), util.toPointer(lpdwInterfaceInfoSize));
}

export function MprAdminInterfaceTransportSetInfo(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwTransportId: number /* u32 */,
  pInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInterfaceInfoSize: number /* u32 */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceTransportSetInfo(hMprServer, util.toPointer(hInterface), dwTransportId, util.toPointer(pInterfaceInfo), dwInterfaceInfoSize);
}

export function MprAdminInterfaceEnum(
  hMprServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  lplpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwPrefMaxLen: number /* u32 */,
  lpdwEntriesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwTotalEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceEnum(hMprServer, dwLevel, util.toPointer(lplpbBuffer), dwPrefMaxLen, util.toPointer(lpdwEntriesRead), util.toPointer(lpdwTotalEntries), util.toPointer(lpdwResumeHandle));
}

export function MprAdminInterfaceSetCredentials(
  lpwsServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpwsInterfaceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpwsUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpwsDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpwsPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceSetCredentials(util.pwstrToFfi(lpwsServer), util.pwstrToFfi(lpwsInterfaceName), util.pwstrToFfi(lpwsUserName), util.pwstrToFfi(lpwsDomainName), util.pwstrToFfi(lpwsPassword));
}

export function MprAdminInterfaceGetCredentials(
  lpwsServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpwsInterfaceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpwsUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpwsPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpwsDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceGetCredentials(util.pwstrToFfi(lpwsServer), util.pwstrToFfi(lpwsInterfaceName), util.pwstrToFfi(lpwsUserName), util.pwstrToFfi(lpwsPassword), util.pwstrToFfi(lpwsDomainName));
}

export function MprAdminInterfaceSetCredentialsEx(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  lpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceSetCredentialsEx(hMprServer, util.toPointer(hInterface), dwLevel, util.toPointer(lpbBuffer));
}

export function MprAdminInterfaceGetCredentialsEx(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  lplpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceGetCredentialsEx(hMprServer, util.toPointer(hInterface), dwLevel, util.toPointer(lplpbBuffer));
}

export function MprAdminInterfaceConnect(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  fSynchronous: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceConnect(hMprServer, util.toPointer(hInterface), util.toPointer(hEvent), util.boolToFfi(fSynchronous));
}

export function MprAdminInterfaceDisconnect(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceDisconnect(hMprServer, util.toPointer(hInterface));
}

export function MprAdminInterfaceUpdateRoutes(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwProtocolId: number /* u32 */,
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceUpdateRoutes(hMprServer, util.toPointer(hInterface), dwProtocolId, util.toPointer(hEvent));
}

export function MprAdminInterfaceQueryUpdateResult(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwProtocolId: number /* u32 */,
  lpdwUpdateResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceQueryUpdateResult(hMprServer, util.toPointer(hInterface), dwProtocolId, util.toPointer(lpdwUpdateResult));
}

export function MprAdminInterfaceUpdatePhonebookInfo(
  hMprServer: Deno.PointerValue /* isize */,
  hInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminInterfaceUpdatePhonebookInfo(hMprServer, util.toPointer(hInterface));
}

export function MprAdminRegisterConnectionNotification(
  hMprServer: Deno.PointerValue /* isize */,
  hEventNotification: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminRegisterConnectionNotification(hMprServer, util.toPointer(hEventNotification));
}

export function MprAdminDeregisterConnectionNotification(
  hMprServer: Deno.PointerValue /* isize */,
  hEventNotification: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminDeregisterConnectionNotification(hMprServer, util.toPointer(hEventNotification));
}

export function MprAdminMIBServerConnect(
  lpwsServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phMibServer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminMIBServerConnect(util.pwstrToFfi(lpwsServerName), util.toPointer(phMibServer));
}

export function MprAdminMIBServerDisconnect(
  hMibServer: Deno.PointerValue /* isize */,
): void /* void */ {
  return libMPRAPI_dll.MprAdminMIBServerDisconnect(hMibServer);
}

export function MprAdminMIBEntryCreate(
  hMibServer: Deno.PointerValue /* isize */,
  dwPid: number /* u32 */,
  dwRoutingPid: number /* u32 */,
  lpEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwEntrySize: number /* u32 */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminMIBEntryCreate(hMibServer, dwPid, dwRoutingPid, util.toPointer(lpEntry), dwEntrySize);
}

export function MprAdminMIBEntryDelete(
  hMibServer: Deno.PointerValue /* isize */,
  dwProtocolId: number /* u32 */,
  dwRoutingPid: number /* u32 */,
  lpEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwEntrySize: number /* u32 */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminMIBEntryDelete(hMibServer, dwProtocolId, dwRoutingPid, util.toPointer(lpEntry), dwEntrySize);
}

export function MprAdminMIBEntrySet(
  hMibServer: Deno.PointerValue /* isize */,
  dwProtocolId: number /* u32 */,
  dwRoutingPid: number /* u32 */,
  lpEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwEntrySize: number /* u32 */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminMIBEntrySet(hMibServer, dwProtocolId, dwRoutingPid, util.toPointer(lpEntry), dwEntrySize);
}

export function MprAdminMIBEntryGet(
  hMibServer: Deno.PointerValue /* isize */,
  dwProtocolId: number /* u32 */,
  dwRoutingPid: number /* u32 */,
  lpInEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInEntrySize: number /* u32 */,
  lplpOutEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOutEntrySize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminMIBEntryGet(hMibServer, dwProtocolId, dwRoutingPid, util.toPointer(lpInEntry), dwInEntrySize, util.toPointer(lplpOutEntry), util.toPointer(lpOutEntrySize));
}

export function MprAdminMIBEntryGetFirst(
  hMibServer: Deno.PointerValue /* isize */,
  dwProtocolId: number /* u32 */,
  dwRoutingPid: number /* u32 */,
  lpInEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInEntrySize: number /* u32 */,
  lplpOutEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOutEntrySize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminMIBEntryGetFirst(hMibServer, dwProtocolId, dwRoutingPid, util.toPointer(lpInEntry), dwInEntrySize, util.toPointer(lplpOutEntry), util.toPointer(lpOutEntrySize));
}

export function MprAdminMIBEntryGetNext(
  hMibServer: Deno.PointerValue /* isize */,
  dwProtocolId: number /* u32 */,
  dwRoutingPid: number /* u32 */,
  lpInEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInEntrySize: number /* u32 */,
  lplpOutEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOutEntrySize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminMIBEntryGetNext(hMibServer, dwProtocolId, dwRoutingPid, util.toPointer(lpInEntry), dwInEntrySize, util.toPointer(lplpOutEntry), util.toPointer(lpOutEntrySize));
}

export function MprAdminMIBBufferFree(
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprAdminMIBBufferFree(util.toPointer(pBuffer));
}

export function MprConfigServerInstall(
  dwLevel: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigServerInstall(dwLevel, util.toPointer(pBuffer));
}

export function MprConfigServerConnect(
  lpwsServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phMprConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigServerConnect(util.pwstrToFfi(lpwsServerName), util.toPointer(phMprConfig));
}

export function MprConfigServerDisconnect(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libMPRAPI_dll.MprConfigServerDisconnect(util.toPointer(hMprConfig));
}

export function MprConfigServerRefresh(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigServerRefresh(util.toPointer(hMprConfig));
}

export function MprConfigBufferFree(
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigBufferFree(util.toPointer(pBuffer));
}

export function MprConfigServerGetInfo(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  lplpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigServerGetInfo(util.toPointer(hMprConfig), dwLevel, util.toPointer(lplpbBuffer));
}

export function MprConfigServerSetInfo(
  hMprServer: Deno.PointerValue /* isize */,
  dwLevel: number /* u32 */,
  lpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigServerSetInfo(hMprServer, dwLevel, util.toPointer(lpbBuffer));
}

export function MprConfigServerBackup(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpwsPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigServerBackup(util.toPointer(hMprConfig), util.pwstrToFfi(lpwsPath));
}

export function MprConfigServerRestore(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpwsPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigServerRestore(util.toPointer(hMprConfig), util.pwstrToFfi(lpwsPath));
}

export function MprConfigTransportCreate(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwTransportId: number /* u32 */,
  lpwsTransportName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pGlobalInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwGlobalInfoSize: number /* u32 */,
  pClientInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwClientInterfaceInfoSize: number /* u32 */,
  lpwsDLLPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phRouterTransport: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigTransportCreate(util.toPointer(hMprConfig), dwTransportId, util.pwstrToFfi(lpwsTransportName), util.toPointer(pGlobalInfo), dwGlobalInfoSize, util.toPointer(pClientInterfaceInfo), dwClientInterfaceInfoSize, util.pwstrToFfi(lpwsDLLPath), util.toPointer(phRouterTransport));
}

export function MprConfigTransportDelete(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterTransport: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigTransportDelete(util.toPointer(hMprConfig), util.toPointer(hRouterTransport));
}

export function MprConfigTransportGetHandle(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwTransportId: number /* u32 */,
  phRouterTransport: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigTransportGetHandle(util.toPointer(hMprConfig), dwTransportId, util.toPointer(phRouterTransport));
}

export function MprConfigTransportSetInfo(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterTransport: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pGlobalInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwGlobalInfoSize: number /* u32 */,
  pClientInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwClientInterfaceInfoSize: number /* u32 */,
  lpwsDLLPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigTransportSetInfo(util.toPointer(hMprConfig), util.toPointer(hRouterTransport), util.toPointer(pGlobalInfo), dwGlobalInfoSize, util.toPointer(pClientInterfaceInfo), dwClientInterfaceInfoSize, util.pwstrToFfi(lpwsDLLPath));
}

export function MprConfigTransportGetInfo(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterTransport: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppGlobalInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwGlobalInfoSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppClientInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwClientInterfaceInfoSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpwsDLLPath: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigTransportGetInfo(util.toPointer(hMprConfig), util.toPointer(hRouterTransport), util.toPointer(ppGlobalInfo), util.toPointer(lpdwGlobalInfoSize), util.toPointer(ppClientInterfaceInfo), util.toPointer(lpdwClientInterfaceInfoSize), util.toPointer(lplpwsDLLPath));
}

export function MprConfigTransportEnum(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  lplpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwPrefMaxLen: number /* u32 */,
  lpdwEntriesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwTotalEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigTransportEnum(util.toPointer(hMprConfig), dwLevel, util.toPointer(lplpBuffer), dwPrefMaxLen, util.toPointer(lpdwEntriesRead), util.toPointer(lpdwTotalEntries), util.toPointer(lpdwResumeHandle));
}

export function MprConfigInterfaceCreate(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  lpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  phRouterInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceCreate(util.toPointer(hMprConfig), dwLevel, util.toPointer(lpbBuffer), util.toPointer(phRouterInterface));
}

export function MprConfigInterfaceDelete(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceDelete(util.toPointer(hMprConfig), util.toPointer(hRouterInterface));
}

export function MprConfigInterfaceGetHandle(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpwsInterfaceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phRouterInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceGetHandle(util.toPointer(hMprConfig), util.pwstrToFfi(lpwsInterfaceName), util.toPointer(phRouterInterface));
}

export function MprConfigInterfaceGetInfo(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  lplpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceGetInfo(util.toPointer(hMprConfig), util.toPointer(hRouterInterface), dwLevel, util.toPointer(lplpBuffer), util.toPointer(lpdwBufferSize));
}

export function MprConfigInterfaceSetInfo(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  lpbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceSetInfo(util.toPointer(hMprConfig), util.toPointer(hRouterInterface), dwLevel, util.toPointer(lpbBuffer));
}

export function MprConfigInterfaceEnum(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  lplpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwPrefMaxLen: number /* u32 */,
  lpdwEntriesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwTotalEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceEnum(util.toPointer(hMprConfig), dwLevel, util.toPointer(lplpBuffer), dwPrefMaxLen, util.toPointer(lpdwEntriesRead), util.toPointer(lpdwTotalEntries), util.toPointer(lpdwResumeHandle));
}

export function MprConfigInterfaceTransportAdd(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwTransportId: number /* u32 */,
  lpwsTransportName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInterfaceInfoSize: number /* u32 */,
  phRouterIfTransport: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceTransportAdd(util.toPointer(hMprConfig), util.toPointer(hRouterInterface), dwTransportId, util.pwstrToFfi(lpwsTransportName), util.toPointer(pInterfaceInfo), dwInterfaceInfoSize, util.toPointer(phRouterIfTransport));
}

export function MprConfigInterfaceTransportRemove(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterIfTransport: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceTransportRemove(util.toPointer(hMprConfig), util.toPointer(hRouterInterface), util.toPointer(hRouterIfTransport));
}

export function MprConfigInterfaceTransportGetHandle(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwTransportId: number /* u32 */,
  phRouterIfTransport: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceTransportGetHandle(util.toPointer(hMprConfig), util.toPointer(hRouterInterface), dwTransportId, util.toPointer(phRouterIfTransport));
}

export function MprConfigInterfaceTransportGetInfo(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterIfTransport: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwInterfaceInfoSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceTransportGetInfo(util.toPointer(hMprConfig), util.toPointer(hRouterInterface), util.toPointer(hRouterIfTransport), util.toPointer(ppInterfaceInfo), util.toPointer(lpdwInterfaceInfoSize));
}

export function MprConfigInterfaceTransportSetInfo(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterIfTransport: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInterfaceInfoSize: number /* u32 */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceTransportSetInfo(util.toPointer(hMprConfig), util.toPointer(hRouterInterface), util.toPointer(hRouterIfTransport), util.toPointer(pInterfaceInfo), dwInterfaceInfoSize);
}

export function MprConfigInterfaceTransportEnum(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hRouterInterface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  lplpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwPrefMaxLen: number /* u32 */,
  lpdwEntriesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwTotalEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigInterfaceTransportEnum(util.toPointer(hMprConfig), util.toPointer(hRouterInterface), dwLevel, util.toPointer(lplpBuffer), dwPrefMaxLen, util.toPointer(lpdwEntriesRead), util.toPointer(lpdwTotalEntries), util.toPointer(lpdwResumeHandle));
}

export function MprConfigGetFriendlyName(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pszGuidName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwBufferSize: number /* u32 */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigGetFriendlyName(util.toPointer(hMprConfig), util.pwstrToFfi(pszGuidName), util.pwstrToFfi(pszBuffer), dwBufferSize);
}

export function MprConfigGetGuidName(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pszFriendlyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwBufferSize: number /* u32 */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigGetGuidName(util.toPointer(hMprConfig), util.pwstrToFfi(pszFriendlyName), util.pwstrToFfi(pszBuffer), dwBufferSize);
}

export function MprConfigFilterGetInfo(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  dwTransportId: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigFilterGetInfo(util.toPointer(hMprConfig), dwLevel, dwTransportId, util.toPointer(lpBuffer));
}

export function MprConfigFilterSetInfo(
  hMprConfig: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLevel: number /* u32 */,
  dwTransportId: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprConfigFilterSetInfo(util.toPointer(hMprConfig), dwLevel, dwTransportId, util.toPointer(lpBuffer));
}

export function MprInfoCreate(
  dwVersion: number /* u32 */,
  lplpNewHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprInfoCreate(dwVersion, util.toPointer(lplpNewHeader));
}

export function MprInfoDelete(
  lpHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprInfoDelete(util.toPointer(lpHeader));
}

export function MprInfoRemoveAll(
  lpHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpNewHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprInfoRemoveAll(util.toPointer(lpHeader), util.toPointer(lplpNewHeader));
}

export function MprInfoDuplicate(
  lpHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpNewHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprInfoDuplicate(util.toPointer(lpHeader), util.toPointer(lplpNewHeader));
}

export function MprInfoBlockAdd(
  lpHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInfoType: number /* u32 */,
  dwItemSize: number /* u32 */,
  dwItemCount: number /* u32 */,
  lpItemData: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpNewHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprInfoBlockAdd(util.toPointer(lpHeader), dwInfoType, dwItemSize, dwItemCount, util.toPointer(lpItemData), util.toPointer(lplpNewHeader));
}

export function MprInfoBlockRemove(
  lpHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInfoType: number /* u32 */,
  lplpNewHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprInfoBlockRemove(util.toPointer(lpHeader), dwInfoType, util.toPointer(lplpNewHeader));
}

export function MprInfoBlockSet(
  lpHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInfoType: number /* u32 */,
  dwItemSize: number /* u32 */,
  dwItemCount: number /* u32 */,
  lpItemData: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpNewHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprInfoBlockSet(util.toPointer(lpHeader), dwInfoType, dwItemSize, dwItemCount, util.toPointer(lpItemData), util.toPointer(lplpNewHeader));
}

export function MprInfoBlockFind(
  lpHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInfoType: number /* u32 */,
  lpdwItemSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwItemCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  lplpItemData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprInfoBlockFind(util.toPointer(lpHeader), dwInfoType, util.toPointer(lpdwItemSize), util.toPointer(lpdwItemCount), util.toPointer(lplpItemData));
}

export function MprInfoBlockQuerySize(
  lpHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMPRAPI_dll.MprInfoBlockQuerySize(util.toPointer(lpHeader));
}

export function MgmRegisterMProtocol(
  prpiInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwProtocolId: number /* u32 */,
  dwComponentId: number /* u32 */,
  phProtocol: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.MgmRegisterMProtocol(util.toPointer(prpiInfo), dwProtocolId, dwComponentId, util.toPointer(phProtocol));
}

export function MgmDeRegisterMProtocol(
  hProtocol: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return librtm_dll.MgmDeRegisterMProtocol(util.toPointer(hProtocol));
}

export function MgmTakeInterfaceOwnership(
  hProtocol: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwIfIndex: number /* u32 */,
  dwIfNextHopAddr: number /* u32 */,
): number /* u32 */ {
  return librtm_dll.MgmTakeInterfaceOwnership(util.toPointer(hProtocol), dwIfIndex, dwIfNextHopAddr);
}

export function MgmReleaseInterfaceOwnership(
  hProtocol: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwIfIndex: number /* u32 */,
  dwIfNextHopAddr: number /* u32 */,
): number /* u32 */ {
  return librtm_dll.MgmReleaseInterfaceOwnership(util.toPointer(hProtocol), dwIfIndex, dwIfNextHopAddr);
}

export function MgmGetProtocolOnInterface(
  dwIfIndex: number /* u32 */,
  dwIfNextHopAddr: number /* u32 */,
  pdwIfProtocolId: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwIfComponentId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.MgmGetProtocolOnInterface(dwIfIndex, dwIfNextHopAddr, util.toPointer(pdwIfProtocolId), util.toPointer(pdwIfComponentId));
}

export function MgmAddGroupMembershipEntry(
  hProtocol: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwSourceAddr: number /* u32 */,
  dwSourceMask: number /* u32 */,
  dwGroupAddr: number /* u32 */,
  dwGroupMask: number /* u32 */,
  dwIfIndex: number /* u32 */,
  dwIfNextHopIPAddr: number /* u32 */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return librtm_dll.MgmAddGroupMembershipEntry(util.toPointer(hProtocol), dwSourceAddr, dwSourceMask, dwGroupAddr, dwGroupMask, dwIfIndex, dwIfNextHopIPAddr, dwFlags);
}

export function MgmDeleteGroupMembershipEntry(
  hProtocol: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwSourceAddr: number /* u32 */,
  dwSourceMask: number /* u32 */,
  dwGroupAddr: number /* u32 */,
  dwGroupMask: number /* u32 */,
  dwIfIndex: number /* u32 */,
  dwIfNextHopIPAddr: number /* u32 */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return librtm_dll.MgmDeleteGroupMembershipEntry(util.toPointer(hProtocol), dwSourceAddr, dwSourceMask, dwGroupAddr, dwGroupMask, dwIfIndex, dwIfNextHopIPAddr, dwFlags);
}

export function MgmGetMfe(
  pimm: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.MgmGetMfe(util.toPointer(pimm), util.toPointer(pdwBufferSize), util.toPointer(pbBuffer));
}

export function MgmGetFirstMfe(
  pdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwNumEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.MgmGetFirstMfe(util.toPointer(pdwBufferSize), util.toPointer(pbBuffer), util.toPointer(pdwNumEntries));
}

export function MgmGetNextMfe(
  pimmStart: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwNumEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.MgmGetNextMfe(util.toPointer(pimmStart), util.toPointer(pdwBufferSize), util.toPointer(pbBuffer), util.toPointer(pdwNumEntries));
}

export function MgmGetMfeStats(
  pimm: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return librtm_dll.MgmGetMfeStats(util.toPointer(pimm), util.toPointer(pdwBufferSize), util.toPointer(pbBuffer), dwFlags);
}

export function MgmGetFirstMfeStats(
  pdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwNumEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return librtm_dll.MgmGetFirstMfeStats(util.toPointer(pdwBufferSize), util.toPointer(pbBuffer), util.toPointer(pdwNumEntries), dwFlags);
}

export function MgmGetNextMfeStats(
  pimmStart: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwNumEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return librtm_dll.MgmGetNextMfeStats(util.toPointer(pimmStart), util.toPointer(pdwBufferSize), util.toPointer(pbBuffer), util.toPointer(pdwNumEntries), dwFlags);
}

export function MgmGroupEnumerationStart(
  hProtocol: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  metEnumType: MGM_ENUM_TYPES /* Windows.Win32.NetworkManagement.Rras.MGM_ENUM_TYPES */,
  phEnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.MgmGroupEnumerationStart(util.toPointer(hProtocol), metEnumType, util.toPointer(phEnumHandle));
}

export function MgmGroupEnumerationGetNext(
  hEnum: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwNumEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.MgmGroupEnumerationGetNext(util.toPointer(hEnum), util.toPointer(pdwBufferSize), util.toPointer(pbBuffer), util.toPointer(pdwNumEntries));
}

export function MgmGroupEnumerationEnd(
  hEnum: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return librtm_dll.MgmGroupEnumerationEnd(util.toPointer(hEnum));
}

export function RtmConvertNetAddressToIpv6AddressAndLength(
  pNetAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  pLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAddressSize: number /* u32 */,
): number /* u32 */ {
  return librtm_dll.RtmConvertNetAddressToIpv6AddressAndLength(util.toPointer(pNetAddress), util.toPointer(pAddress), util.toPointer(pLength), dwAddressSize);
}

export function RtmConvertIpv6AddressAndLengthToNetAddress(
  pNetAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  Address: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.IN6_ADDR */,
  dwLength: number /* u32 */,
  dwAddressSize: number /* u32 */,
): number /* u32 */ {
  return librtm_dll.RtmConvertIpv6AddressAndLengthToNetAddress(util.toPointer(pNetAddress), util.toPointer(Address), dwLength, dwAddressSize);
}

export function RtmRegisterEntity(
  RtmEntityInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ExportMethods: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Rras.RTM_EVENT_CALLBACK */,
  ReserveOpaquePointer: boolean /* Windows.Win32.Foundation.BOOL */,
  RtmRegProfile: Deno.PointerValue | Uint8Array | null /* ptr */,
  RtmRegHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmRegisterEntity(util.toPointer(RtmEntityInfo), util.toPointer(ExportMethods), util.toPointer(EventCallback), util.boolToFfi(ReserveOpaquePointer), util.toPointer(RtmRegProfile), util.toPointer(RtmRegHandle));
}

export function RtmDeregisterEntity(
  RtmRegHandle: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return librtm_dll.RtmDeregisterEntity(RtmRegHandle);
}

export function RtmGetRegisteredEntities(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NumEntities: Deno.PointerValue | Uint8Array | null /* ptr */,
  EntityHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
  EntityInfos: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetRegisteredEntities(RtmRegHandle, util.toPointer(NumEntities), util.toPointer(EntityHandles), util.toPointer(EntityInfos));
}

export function RtmReleaseEntities(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NumEntities: number /* u32 */,
  EntityHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmReleaseEntities(RtmRegHandle, NumEntities, util.toPointer(EntityHandles));
}

export function RtmLockDestination(
  RtmRegHandle: Deno.PointerValue /* isize */,
  DestHandle: Deno.PointerValue /* isize */,
  Exclusive: boolean /* Windows.Win32.Foundation.BOOL */,
  LockDest: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return librtm_dll.RtmLockDestination(RtmRegHandle, DestHandle, util.boolToFfi(Exclusive), util.boolToFfi(LockDest));
}

export function RtmGetOpaqueInformationPointer(
  RtmRegHandle: Deno.PointerValue /* isize */,
  DestHandle: Deno.PointerValue /* isize */,
  OpaqueInfoPointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetOpaqueInformationPointer(RtmRegHandle, DestHandle, util.toPointer(OpaqueInfoPointer));
}

export function RtmGetEntityMethods(
  RtmRegHandle: Deno.PointerValue /* isize */,
  EntityHandle: Deno.PointerValue /* isize */,
  NumMethods: Deno.PointerValue | Uint8Array | null /* ptr */,
  ExptMethods: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetEntityMethods(RtmRegHandle, EntityHandle, util.toPointer(NumMethods), util.toPointer(ExptMethods));
}

export function RtmInvokeMethod(
  RtmRegHandle: Deno.PointerValue /* isize */,
  EntityHandle: Deno.PointerValue /* isize */,
  Input: Deno.PointerValue | Uint8Array | null /* ptr */,
  OutputSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Output: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmInvokeMethod(RtmRegHandle, EntityHandle, util.toPointer(Input), util.toPointer(OutputSize), util.toPointer(Output));
}

export function RtmBlockMethods(
  RtmRegHandle: Deno.PointerValue /* isize */,
  TargetHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  TargetType: number /* u8 */,
  BlockingFlag: number /* u32 */,
): number /* u32 */ {
  return librtm_dll.RtmBlockMethods(RtmRegHandle, util.toPointer(TargetHandle), TargetType, BlockingFlag);
}

export function RtmGetEntityInfo(
  RtmRegHandle: Deno.PointerValue /* isize */,
  EntityHandle: Deno.PointerValue /* isize */,
  EntityInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetEntityInfo(RtmRegHandle, EntityHandle, util.toPointer(EntityInfo));
}

export function RtmGetDestInfo(
  RtmRegHandle: Deno.PointerValue /* isize */,
  DestHandle: Deno.PointerValue /* isize */,
  ProtocolId: number /* u32 */,
  TargetViews: number /* u32 */,
  DestInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetDestInfo(RtmRegHandle, DestHandle, ProtocolId, TargetViews, util.toPointer(DestInfo));
}

export function RtmGetRouteInfo(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteHandle: Deno.PointerValue /* isize */,
  RouteInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  DestAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetRouteInfo(RtmRegHandle, RouteHandle, util.toPointer(RouteInfo), util.toPointer(DestAddress));
}

export function RtmGetNextHopInfo(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NextHopHandle: Deno.PointerValue /* isize */,
  NextHopInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetNextHopInfo(RtmRegHandle, NextHopHandle, util.toPointer(NextHopInfo));
}

export function RtmReleaseEntityInfo(
  RtmRegHandle: Deno.PointerValue /* isize */,
  EntityInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmReleaseEntityInfo(RtmRegHandle, util.toPointer(EntityInfo));
}

export function RtmReleaseDestInfo(
  RtmRegHandle: Deno.PointerValue /* isize */,
  DestInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmReleaseDestInfo(RtmRegHandle, util.toPointer(DestInfo));
}

export function RtmReleaseRouteInfo(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmReleaseRouteInfo(RtmRegHandle, util.toPointer(RouteInfo));
}

export function RtmReleaseNextHopInfo(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NextHopInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmReleaseNextHopInfo(RtmRegHandle, util.toPointer(NextHopInfo));
}

export function RtmAddRouteToDest(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  DestAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  RouteInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  TimeToLive: number /* u32 */,
  RouteListHandle: Deno.PointerValue /* isize */,
  NotifyType: number /* u32 */,
  NotifyHandle: Deno.PointerValue /* isize */,
  ChangeFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmAddRouteToDest(RtmRegHandle, util.toPointer(RouteHandle), util.toPointer(DestAddress), util.toPointer(RouteInfo), TimeToLive, RouteListHandle, NotifyType, NotifyHandle, util.toPointer(ChangeFlags));
}

export function RtmDeleteRouteToDest(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteHandle: Deno.PointerValue /* isize */,
  ChangeFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmDeleteRouteToDest(RtmRegHandle, RouteHandle, util.toPointer(ChangeFlags));
}

export function RtmHoldDestination(
  RtmRegHandle: Deno.PointerValue /* isize */,
  DestHandle: Deno.PointerValue /* isize */,
  TargetViews: number /* u32 */,
  HoldTime: number /* u32 */,
): number /* u32 */ {
  return librtm_dll.RtmHoldDestination(RtmRegHandle, DestHandle, TargetViews, HoldTime);
}

export function RtmGetRoutePointer(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteHandle: Deno.PointerValue /* isize */,
  RoutePointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetRoutePointer(RtmRegHandle, RouteHandle, util.toPointer(RoutePointer));
}

export function RtmLockRoute(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteHandle: Deno.PointerValue /* isize */,
  Exclusive: boolean /* Windows.Win32.Foundation.BOOL */,
  LockRoute: boolean /* Windows.Win32.Foundation.BOOL */,
  RoutePointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmLockRoute(RtmRegHandle, RouteHandle, util.boolToFfi(Exclusive), util.boolToFfi(LockRoute), util.toPointer(RoutePointer));
}

export function RtmUpdateAndUnlockRoute(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteHandle: Deno.PointerValue /* isize */,
  TimeToLive: number /* u32 */,
  RouteListHandle: Deno.PointerValue /* isize */,
  NotifyType: number /* u32 */,
  NotifyHandle: Deno.PointerValue /* isize */,
  ChangeFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmUpdateAndUnlockRoute(RtmRegHandle, RouteHandle, TimeToLive, RouteListHandle, NotifyType, NotifyHandle, util.toPointer(ChangeFlags));
}

export function RtmGetExactMatchDestination(
  RtmRegHandle: Deno.PointerValue /* isize */,
  DestAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProtocolId: number /* u32 */,
  TargetViews: number /* u32 */,
  DestInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetExactMatchDestination(RtmRegHandle, util.toPointer(DestAddress), ProtocolId, TargetViews, util.toPointer(DestInfo));
}

export function RtmGetMostSpecificDestination(
  RtmRegHandle: Deno.PointerValue /* isize */,
  DestAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProtocolId: number /* u32 */,
  TargetViews: number /* u32 */,
  DestInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetMostSpecificDestination(RtmRegHandle, util.toPointer(DestAddress), ProtocolId, TargetViews, util.toPointer(DestInfo));
}

export function RtmGetLessSpecificDestination(
  RtmRegHandle: Deno.PointerValue /* isize */,
  DestHandle: Deno.PointerValue /* isize */,
  ProtocolId: number /* u32 */,
  TargetViews: number /* u32 */,
  DestInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetLessSpecificDestination(RtmRegHandle, DestHandle, ProtocolId, TargetViews, util.toPointer(DestInfo));
}

export function RtmGetExactMatchRoute(
  RtmRegHandle: Deno.PointerValue /* isize */,
  DestAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  MatchingFlags: number /* u32 */,
  RouteInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterfaceIndex: number /* u32 */,
  TargetViews: number /* u32 */,
  RouteHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetExactMatchRoute(RtmRegHandle, util.toPointer(DestAddress), MatchingFlags, util.toPointer(RouteInfo), InterfaceIndex, TargetViews, util.toPointer(RouteHandle));
}

export function RtmIsBestRoute(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteHandle: Deno.PointerValue /* isize */,
  BestInViews: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmIsBestRoute(RtmRegHandle, RouteHandle, util.toPointer(BestInViews));
}

export function RtmAddNextHop(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NextHopInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  NextHopHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ChangeFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmAddNextHop(RtmRegHandle, util.toPointer(NextHopInfo), util.toPointer(NextHopHandle), util.toPointer(ChangeFlags));
}

export function RtmFindNextHop(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NextHopInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  NextHopHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  NextHopPointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmFindNextHop(RtmRegHandle, util.toPointer(NextHopInfo), util.toPointer(NextHopHandle), util.toPointer(NextHopPointer));
}

export function RtmDeleteNextHop(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NextHopHandle: Deno.PointerValue /* isize */,
  NextHopInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmDeleteNextHop(RtmRegHandle, NextHopHandle, util.toPointer(NextHopInfo));
}

export function RtmGetNextHopPointer(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NextHopHandle: Deno.PointerValue /* isize */,
  NextHopPointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetNextHopPointer(RtmRegHandle, NextHopHandle, util.toPointer(NextHopPointer));
}

export function RtmLockNextHop(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NextHopHandle: Deno.PointerValue /* isize */,
  Exclusive: boolean /* Windows.Win32.Foundation.BOOL */,
  LockNextHop: boolean /* Windows.Win32.Foundation.BOOL */,
  NextHopPointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmLockNextHop(RtmRegHandle, NextHopHandle, util.boolToFfi(Exclusive), util.boolToFfi(LockNextHop), util.toPointer(NextHopPointer));
}

export function RtmCreateDestEnum(
  RtmRegHandle: Deno.PointerValue /* isize */,
  TargetViews: number /* u32 */,
  EnumFlags: number /* u32 */,
  NetAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  ProtocolId: number /* u32 */,
  RtmEnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmCreateDestEnum(RtmRegHandle, TargetViews, EnumFlags, util.toPointer(NetAddress), ProtocolId, util.toPointer(RtmEnumHandle));
}

export function RtmGetEnumDests(
  RtmRegHandle: Deno.PointerValue /* isize */,
  EnumHandle: Deno.PointerValue /* isize */,
  NumDests: Deno.PointerValue | Uint8Array | null /* ptr */,
  DestInfos: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetEnumDests(RtmRegHandle, EnumHandle, util.toPointer(NumDests), util.toPointer(DestInfos));
}

export function RtmReleaseDests(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NumDests: number /* u32 */,
  DestInfos: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmReleaseDests(RtmRegHandle, NumDests, util.toPointer(DestInfos));
}

export function RtmCreateRouteEnum(
  RtmRegHandle: Deno.PointerValue /* isize */,
  DestHandle: Deno.PointerValue /* isize */,
  TargetViews: number /* u32 */,
  EnumFlags: number /* u32 */,
  StartDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  MatchingFlags: number /* u32 */,
  CriteriaRoute: Deno.PointerValue | Uint8Array | null /* ptr */,
  CriteriaInterface: number /* u32 */,
  RtmEnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmCreateRouteEnum(RtmRegHandle, DestHandle, TargetViews, EnumFlags, util.toPointer(StartDest), MatchingFlags, util.toPointer(CriteriaRoute), CriteriaInterface, util.toPointer(RtmEnumHandle));
}

export function RtmGetEnumRoutes(
  RtmRegHandle: Deno.PointerValue /* isize */,
  EnumHandle: Deno.PointerValue /* isize */,
  NumRoutes: Deno.PointerValue | Uint8Array | null /* ptr */,
  RouteHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetEnumRoutes(RtmRegHandle, EnumHandle, util.toPointer(NumRoutes), util.toPointer(RouteHandles));
}

export function RtmReleaseRoutes(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NumRoutes: number /* u32 */,
  RouteHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmReleaseRoutes(RtmRegHandle, NumRoutes, util.toPointer(RouteHandles));
}

export function RtmCreateNextHopEnum(
  RtmRegHandle: Deno.PointerValue /* isize */,
  EnumFlags: number /* u32 */,
  NetAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  RtmEnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmCreateNextHopEnum(RtmRegHandle, EnumFlags, util.toPointer(NetAddress), util.toPointer(RtmEnumHandle));
}

export function RtmGetEnumNextHops(
  RtmRegHandle: Deno.PointerValue /* isize */,
  EnumHandle: Deno.PointerValue /* isize */,
  NumNextHops: Deno.PointerValue | Uint8Array | null /* ptr */,
  NextHopHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetEnumNextHops(RtmRegHandle, EnumHandle, util.toPointer(NumNextHops), util.toPointer(NextHopHandles));
}

export function RtmReleaseNextHops(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NumNextHops: number /* u32 */,
  NextHopHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmReleaseNextHops(RtmRegHandle, NumNextHops, util.toPointer(NextHopHandles));
}

export function RtmDeleteEnumHandle(
  RtmRegHandle: Deno.PointerValue /* isize */,
  EnumHandle: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return librtm_dll.RtmDeleteEnumHandle(RtmRegHandle, EnumHandle);
}

export function RtmRegisterForChangeNotification(
  RtmRegHandle: Deno.PointerValue /* isize */,
  TargetViews: number /* u32 */,
  NotifyFlags: number /* u32 */,
  NotifyContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  NotifyHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmRegisterForChangeNotification(RtmRegHandle, TargetViews, NotifyFlags, util.toPointer(NotifyContext), util.toPointer(NotifyHandle));
}

export function RtmGetChangedDests(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NotifyHandle: Deno.PointerValue /* isize */,
  NumDests: Deno.PointerValue | Uint8Array | null /* ptr */,
  ChangedDests: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetChangedDests(RtmRegHandle, NotifyHandle, util.toPointer(NumDests), util.toPointer(ChangedDests));
}

export function RtmReleaseChangedDests(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NotifyHandle: Deno.PointerValue /* isize */,
  NumDests: number /* u32 */,
  ChangedDests: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmReleaseChangedDests(RtmRegHandle, NotifyHandle, NumDests, util.toPointer(ChangedDests));
}

export function RtmIgnoreChangedDests(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NotifyHandle: Deno.PointerValue /* isize */,
  NumDests: number /* u32 */,
  ChangedDests: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmIgnoreChangedDests(RtmRegHandle, NotifyHandle, NumDests, util.toPointer(ChangedDests));
}

export function RtmGetChangeStatus(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NotifyHandle: Deno.PointerValue /* isize */,
  DestHandle: Deno.PointerValue /* isize */,
  ChangeStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetChangeStatus(RtmRegHandle, NotifyHandle, DestHandle, util.toPointer(ChangeStatus));
}

export function RtmMarkDestForChangeNotification(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NotifyHandle: Deno.PointerValue /* isize */,
  DestHandle: Deno.PointerValue /* isize */,
  MarkDest: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return librtm_dll.RtmMarkDestForChangeNotification(RtmRegHandle, NotifyHandle, DestHandle, util.boolToFfi(MarkDest));
}

export function RtmIsMarkedForChangeNotification(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NotifyHandle: Deno.PointerValue /* isize */,
  DestHandle: Deno.PointerValue /* isize */,
  DestMarked: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmIsMarkedForChangeNotification(RtmRegHandle, NotifyHandle, DestHandle, util.toPointer(DestMarked));
}

export function RtmDeregisterFromChangeNotification(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NotifyHandle: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return librtm_dll.RtmDeregisterFromChangeNotification(RtmRegHandle, NotifyHandle);
}

export function RtmCreateRouteList(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteListHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmCreateRouteList(RtmRegHandle, util.toPointer(RouteListHandle));
}

export function RtmInsertInRouteList(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteListHandle: Deno.PointerValue /* isize */,
  NumRoutes: number /* u32 */,
  RouteHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmInsertInRouteList(RtmRegHandle, RouteListHandle, NumRoutes, util.toPointer(RouteHandles));
}

export function RtmCreateRouteListEnum(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteListHandle: Deno.PointerValue /* isize */,
  RtmEnumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmCreateRouteListEnum(RtmRegHandle, RouteListHandle, util.toPointer(RtmEnumHandle));
}

export function RtmGetListEnumRoutes(
  RtmRegHandle: Deno.PointerValue /* isize */,
  EnumHandle: Deno.PointerValue /* isize */,
  NumRoutes: Deno.PointerValue | Uint8Array | null /* ptr */,
  RouteHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmGetListEnumRoutes(RtmRegHandle, EnumHandle, util.toPointer(NumRoutes), util.toPointer(RouteHandles));
}

export function RtmDeleteRouteList(
  RtmRegHandle: Deno.PointerValue /* isize */,
  RouteListHandle: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return librtm_dll.RtmDeleteRouteList(RtmRegHandle, RouteListHandle);
}

export function RtmReferenceHandles(
  RtmRegHandle: Deno.PointerValue /* isize */,
  NumHandles: number /* u32 */,
  RtmHandles: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtm_dll.RtmReferenceHandles(RtmRegHandle, NumHandles, util.toPointer(RtmHandles));
}

