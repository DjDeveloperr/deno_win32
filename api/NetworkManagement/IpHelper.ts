/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.IpHelper.Apis

import * as util from "../../util.ts";

// Enums
export type GET_ADAPTERS_ADDRESSES_FLAGS = number;
export type IF_ACCESS_TYPE = number;
export type INTERNAL_IF_OPER_STATUS = number;
export type MIB_NOTIFICATION_TYPE = number;
export type TUNNEL_TYPE = number;
export type NDIS_MEDIUM = number;
export type NDIS_PHYSICAL_MEDIUM = number;
export type NET_IF_ACCESS_TYPE = number;
export type NET_IF_DIRECTION_TYPE = number;
export type IF_OPER_STATUS = number;
export type NET_IF_ADMIN_STATUS = number;
export type NET_IF_MEDIA_CONNECT_STATE = number;
export type NET_IF_CONNECTION_TYPE = number;
export type MIB_IF_ENTRY_LEVEL = number;
export type MIB_IF_TABLE_LEVEL = number;
export type NL_ROUTER_DISCOVERY_BEHAVIOR = number;
export type NL_LINK_LOCAL_ADDRESS_BEHAVIOR = number;
export type RIP_INFO_TYPE = number;
export type NL_PREFIX_ORIGIN = number;
export type NL_SUFFIX_ORIGIN = number;
export type NL_DAD_STATE = number;
export type NL_ROUTE_PROTOCOL = number;
export type NL_ROUTE_ORIGIN = number;
export type NL_NEIGHBOR_STATE = number;
export type DNS_SERVER_PROPERTY_TYPE = number;
export type MIB_IPFORWARD_TYPE = number;
export type MIB_IPNET_TYPE = number;
export type MIB_IPSTATS_FORWARDING = number;
export type ICMP6_TYPE = number;
export type ICMP4_TYPE = number;
export type MIB_TCP_STATE = number;
export type TCP_CONNECTION_OFFLOAD_STATE = number;
export type TCP_RTO_ALGORITHM = number;
export type TCP_TABLE_CLASS = number;
export type UDP_TABLE_CLASS = number;
export type TCPIP_OWNER_MODULE_INFO_CLASS = number;
export type TCP_ESTATS_TYPE = number;
export type TCP_BOOLEAN_OPTIONAL = number;
export type TCP_SOFT_ERROR = number;
export type NET_ADDRESS_FORMAT = number;
export type GLOBAL_FILTER = number;
export type PFFORWARD_ACTION = number;
export type PFADDRESSTYPE = number;
export type PFFRAMETYPE = number;
export type ADDRESS_FAMILY = number;
export type WIN32_ERROR = number;

// Constants
export const GAA_FLAG_SKIP_UNICAST = 1;
export const GAA_FLAG_SKIP_ANYCAST = 2;
export const GAA_FLAG_SKIP_MULTICAST = 4;
export const GAA_FLAG_SKIP_DNS_SERVER = 8;
export const GAA_FLAG_INCLUDE_PREFIX = 16;
export const GAA_FLAG_SKIP_FRIENDLY_NAME = 32;
export const GAA_FLAG_INCLUDE_WINS_INFO = 64;
export const GAA_FLAG_INCLUDE_GATEWAYS = 128;
export const GAA_FLAG_INCLUDE_ALL_INTERFACES = 256;
export const GAA_FLAG_INCLUDE_ALL_COMPARTMENTS = 512;
export const GAA_FLAG_INCLUDE_TUNNEL_BINDINGORDER = 1024;
export const ANY_SIZE = 1;
export const MAXLEN_PHYSADDR = 8;
export const MAXLEN_IFDESCR = 256;
export const MAX_INTERFACE_NAME_LEN = 256;
export const MIN_IF_TYPE = 1;
export const IF_TYPE_OTHER = 1;
export const IF_TYPE_REGULAR_1822 = 2;
export const IF_TYPE_HDH_1822 = 3;
export const IF_TYPE_DDN_X25 = 4;
export const IF_TYPE_RFC877_X25 = 5;
export const IF_TYPE_ETHERNET_CSMACD = 6;
export const IF_TYPE_IS088023_CSMACD = 7;
export const IF_TYPE_ISO88024_TOKENBUS = 8;
export const IF_TYPE_ISO88025_TOKENRING = 9;
export const IF_TYPE_ISO88026_MAN = 10;
export const IF_TYPE_STARLAN = 11;
export const IF_TYPE_PROTEON_10MBIT = 12;
export const IF_TYPE_PROTEON_80MBIT = 13;
export const IF_TYPE_HYPERCHANNEL = 14;
export const IF_TYPE_FDDI = 15;
export const IF_TYPE_LAP_B = 16;
export const IF_TYPE_SDLC = 17;
export const IF_TYPE_DS1 = 18;
export const IF_TYPE_E1 = 19;
export const IF_TYPE_BASIC_ISDN = 20;
export const IF_TYPE_PRIMARY_ISDN = 21;
export const IF_TYPE_PROP_POINT2POINT_SERIAL = 22;
export const IF_TYPE_PPP = 23;
export const IF_TYPE_SOFTWARE_LOOPBACK = 24;
export const IF_TYPE_EON = 25;
export const IF_TYPE_ETHERNET_3MBIT = 26;
export const IF_TYPE_NSIP = 27;
export const IF_TYPE_SLIP = 28;
export const IF_TYPE_ULTRA = 29;
export const IF_TYPE_DS3 = 30;
export const IF_TYPE_SIP = 31;
export const IF_TYPE_FRAMERELAY = 32;
export const IF_TYPE_RS232 = 33;
export const IF_TYPE_PARA = 34;
export const IF_TYPE_ARCNET = 35;
export const IF_TYPE_ARCNET_PLUS = 36;
export const IF_TYPE_ATM = 37;
export const IF_TYPE_MIO_X25 = 38;
export const IF_TYPE_SONET = 39;
export const IF_TYPE_X25_PLE = 40;
export const IF_TYPE_ISO88022_LLC = 41;
export const IF_TYPE_LOCALTALK = 42;
export const IF_TYPE_SMDS_DXI = 43;
export const IF_TYPE_FRAMERELAY_SERVICE = 44;
export const IF_TYPE_V35 = 45;
export const IF_TYPE_HSSI = 46;
export const IF_TYPE_HIPPI = 47;
export const IF_TYPE_MODEM = 48;
export const IF_TYPE_AAL5 = 49;
export const IF_TYPE_SONET_PATH = 50;
export const IF_TYPE_SONET_VT = 51;
export const IF_TYPE_SMDS_ICIP = 52;
export const IF_TYPE_PROP_VIRTUAL = 53;
export const IF_TYPE_PROP_MULTIPLEXOR = 54;
export const IF_TYPE_IEEE80212 = 55;
export const IF_TYPE_FIBRECHANNEL = 56;
export const IF_TYPE_HIPPIINTERFACE = 57;
export const IF_TYPE_FRAMERELAY_INTERCONNECT = 58;
export const IF_TYPE_AFLANE_8023 = 59;
export const IF_TYPE_AFLANE_8025 = 60;
export const IF_TYPE_CCTEMUL = 61;
export const IF_TYPE_FASTETHER = 62;
export const IF_TYPE_ISDN = 63;
export const IF_TYPE_V11 = 64;
export const IF_TYPE_V36 = 65;
export const IF_TYPE_G703_64K = 66;
export const IF_TYPE_G703_2MB = 67;
export const IF_TYPE_QLLC = 68;
export const IF_TYPE_FASTETHER_FX = 69;
export const IF_TYPE_CHANNEL = 70;
export const IF_TYPE_IEEE80211 = 71;
export const IF_TYPE_IBM370PARCHAN = 72;
export const IF_TYPE_ESCON = 73;
export const IF_TYPE_DLSW = 74;
export const IF_TYPE_ISDN_S = 75;
export const IF_TYPE_ISDN_U = 76;
export const IF_TYPE_LAP_D = 77;
export const IF_TYPE_IPSWITCH = 78;
export const IF_TYPE_RSRB = 79;
export const IF_TYPE_ATM_LOGICAL = 80;
export const IF_TYPE_DS0 = 81;
export const IF_TYPE_DS0_BUNDLE = 82;
export const IF_TYPE_BSC = 83;
export const IF_TYPE_ASYNC = 84;
export const IF_TYPE_CNR = 85;
export const IF_TYPE_ISO88025R_DTR = 86;
export const IF_TYPE_EPLRS = 87;
export const IF_TYPE_ARAP = 88;
export const IF_TYPE_PROP_CNLS = 89;
export const IF_TYPE_HOSTPAD = 90;
export const IF_TYPE_TERMPAD = 91;
export const IF_TYPE_FRAMERELAY_MPI = 92;
export const IF_TYPE_X213 = 93;
export const IF_TYPE_ADSL = 94;
export const IF_TYPE_RADSL = 95;
export const IF_TYPE_SDSL = 96;
export const IF_TYPE_VDSL = 97;
export const IF_TYPE_ISO88025_CRFPRINT = 98;
export const IF_TYPE_MYRINET = 99;
export const IF_TYPE_VOICE_EM = 100;
export const IF_TYPE_VOICE_FXO = 101;
export const IF_TYPE_VOICE_FXS = 102;
export const IF_TYPE_VOICE_ENCAP = 103;
export const IF_TYPE_VOICE_OVERIP = 104;
export const IF_TYPE_ATM_DXI = 105;
export const IF_TYPE_ATM_FUNI = 106;
export const IF_TYPE_ATM_IMA = 107;
export const IF_TYPE_PPPMULTILINKBUNDLE = 108;
export const IF_TYPE_IPOVER_CDLC = 109;
export const IF_TYPE_IPOVER_CLAW = 110;
export const IF_TYPE_STACKTOSTACK = 111;
export const IF_TYPE_VIRTUALIPADDRESS = 112;
export const IF_TYPE_MPC = 113;
export const IF_TYPE_IPOVER_ATM = 114;
export const IF_TYPE_ISO88025_FIBER = 115;
export const IF_TYPE_TDLC = 116;
export const IF_TYPE_GIGABITETHERNET = 117;
export const IF_TYPE_HDLC = 118;
export const IF_TYPE_LAP_F = 119;
export const IF_TYPE_V37 = 120;
export const IF_TYPE_X25_MLP = 121;
export const IF_TYPE_X25_HUNTGROUP = 122;
export const IF_TYPE_TRANSPHDLC = 123;
export const IF_TYPE_INTERLEAVE = 124;
export const IF_TYPE_FAST = 125;
export const IF_TYPE_IP = 126;
export const IF_TYPE_DOCSCABLE_MACLAYER = 127;
export const IF_TYPE_DOCSCABLE_DOWNSTREAM = 128;
export const IF_TYPE_DOCSCABLE_UPSTREAM = 129;
export const IF_TYPE_A12MPPSWITCH = 130;
export const IF_TYPE_TUNNEL = 131;
export const IF_TYPE_COFFEE = 132;
export const IF_TYPE_CES = 133;
export const IF_TYPE_ATM_SUBINTERFACE = 134;
export const IF_TYPE_L2_VLAN = 135;
export const IF_TYPE_L3_IPVLAN = 136;
export const IF_TYPE_L3_IPXVLAN = 137;
export const IF_TYPE_DIGITALPOWERLINE = 138;
export const IF_TYPE_MEDIAMAILOVERIP = 139;
export const IF_TYPE_DTM = 140;
export const IF_TYPE_DCN = 141;
export const IF_TYPE_IPFORWARD = 142;
export const IF_TYPE_MSDSL = 143;
export const IF_TYPE_IEEE1394 = 144;
export const IF_TYPE_IF_GSN = 145;
export const IF_TYPE_DVBRCC_MACLAYER = 146;
export const IF_TYPE_DVBRCC_DOWNSTREAM = 147;
export const IF_TYPE_DVBRCC_UPSTREAM = 148;
export const IF_TYPE_ATM_VIRTUAL = 149;
export const IF_TYPE_MPLS_TUNNEL = 150;
export const IF_TYPE_SRP = 151;
export const IF_TYPE_VOICEOVERATM = 152;
export const IF_TYPE_VOICEOVERFRAMERELAY = 153;
export const IF_TYPE_IDSL = 154;
export const IF_TYPE_COMPOSITELINK = 155;
export const IF_TYPE_SS7_SIGLINK = 156;
export const IF_TYPE_PROP_WIRELESS_P2P = 157;
export const IF_TYPE_FR_FORWARD = 158;
export const IF_TYPE_RFC1483 = 159;
export const IF_TYPE_USB = 160;
export const IF_TYPE_IEEE8023AD_LAG = 161;
export const IF_TYPE_BGP_POLICY_ACCOUNTING = 162;
export const IF_TYPE_FRF16_MFR_BUNDLE = 163;
export const IF_TYPE_H323_GATEKEEPER = 164;
export const IF_TYPE_H323_PROXY = 165;
export const IF_TYPE_MPLS = 166;
export const IF_TYPE_MF_SIGLINK = 167;
export const IF_TYPE_HDSL2 = 168;
export const IF_TYPE_SHDSL = 169;
export const IF_TYPE_DS1_FDL = 170;
export const IF_TYPE_POS = 171;
export const IF_TYPE_DVB_ASI_IN = 172;
export const IF_TYPE_DVB_ASI_OUT = 173;
export const IF_TYPE_PLC = 174;
export const IF_TYPE_NFAS = 175;
export const IF_TYPE_TR008 = 176;
export const IF_TYPE_GR303_RDT = 177;
export const IF_TYPE_GR303_IDT = 178;
export const IF_TYPE_ISUP = 179;
export const IF_TYPE_PROP_DOCS_WIRELESS_MACLAYER = 180;
export const IF_TYPE_PROP_DOCS_WIRELESS_DOWNSTREAM = 181;
export const IF_TYPE_PROP_DOCS_WIRELESS_UPSTREAM = 182;
export const IF_TYPE_HIPERLAN2 = 183;
export const IF_TYPE_PROP_BWA_P2MP = 184;
export const IF_TYPE_SONET_OVERHEAD_CHANNEL = 185;
export const IF_TYPE_DIGITAL_WRAPPER_OVERHEAD_CHANNEL = 186;
export const IF_TYPE_AAL2 = 187;
export const IF_TYPE_RADIO_MAC = 188;
export const IF_TYPE_ATM_RADIO = 189;
export const IF_TYPE_IMT = 190;
export const IF_TYPE_MVL = 191;
export const IF_TYPE_REACH_DSL = 192;
export const IF_TYPE_FR_DLCI_ENDPT = 193;
export const IF_TYPE_ATM_VCI_ENDPT = 194;
export const IF_TYPE_OPTICAL_CHANNEL = 195;
export const IF_TYPE_OPTICAL_TRANSPORT = 196;
export const IF_TYPE_IEEE80216_WMAN = 237;
export const IF_TYPE_WWANPP = 243;
export const IF_TYPE_WWANPP2 = 244;
export const IF_TYPE_IEEE802154 = 259;
export const IF_TYPE_XBOX_WIRELESS = 281;
export const MAX_IF_TYPE = 281;
export const IF_CHECK_NONE = 0;
export const IF_CHECK_MCAST = 1;
export const IF_CHECK_SEND = 2;
export const IF_CONNECTION_DEDICATED = 1;
export const IF_CONNECTION_PASSIVE = 2;
export const IF_CONNECTION_DEMAND = 3;
export const IF_ADMIN_STATUS_UP = 1;
export const IF_ADMIN_STATUS_DOWN = 2;
export const IF_ADMIN_STATUS_TESTING = 3;
export const MIB_IF_TYPE_OTHER = 1;
export const MIB_IF_TYPE_ETHERNET = 6;
export const MIB_IF_TYPE_TOKENRING = 9;
export const MIB_IF_TYPE_FDDI = 15;
export const MIB_IF_TYPE_PPP = 23;
export const MIB_IF_TYPE_LOOPBACK = 24;
export const MIB_IF_TYPE_SLIP = 28;
export const MIB_IF_ADMIN_STATUS_UP = 1;
export const MIB_IF_ADMIN_STATUS_DOWN = 2;
export const MIB_IF_ADMIN_STATUS_TESTING = 3;
export const MIB_IPADDR_PRIMARY = 1;
export const MIB_IPADDR_DYNAMIC = 4;
export const MIB_IPADDR_DISCONNECTED = 8;
export const MIB_IPADDR_DELETED = 64;
export const MIB_IPADDR_TRANSIENT = 128;
export const MIB_IPADDR_DNS_ELIGIBLE = 256;
export const MIB_IPROUTE_METRIC_UNUSED = 4294967295;
export const MIB_USE_CURRENT_TTL = 4294967295;
export const MIB_USE_CURRENT_FORWARDING = 4294967295;
export const ICMP6_INFOMSG_MASK = 128;
export const IPRTRMGR_PID = 10000;
export const IF_NUMBER = 0;
export const IF_TABLE = 1;
export const IF_ROW = 2;
export const IP_STATS = 3;
export const IP_ADDRTABLE = 4;
export const IP_ADDRROW = 5;
export const IP_FORWARDNUMBER = 6;
export const IP_FORWARDTABLE = 7;
export const IP_FORWARDROW = 8;
export const IP_NETTABLE = 9;
export const IP_NETROW = 10;
export const ICMP_STATS = 11;
export const TCP_STATS = 12;
export const TCP_TABLE = 13;
export const TCP_ROW = 14;
export const UDP_STATS = 15;
export const UDP_TABLE = 16;
export const UDP_ROW = 17;
export const MCAST_MFE = 18;
export const MCAST_MFE_STATS = 19;
export const BEST_IF = 20;
export const BEST_ROUTE = 21;
export const PROXY_ARP = 22;
export const MCAST_IF_ENTRY = 23;
export const MCAST_GLOBAL = 24;
export const IF_STATUS = 25;
export const MCAST_BOUNDARY = 26;
export const MCAST_SCOPE = 27;
export const DEST_MATCHING = 28;
export const DEST_LONGER = 29;
export const DEST_SHORTER = 30;
export const ROUTE_MATCHING = 31;
export const ROUTE_LONGER = 32;
export const ROUTE_SHORTER = 33;
export const ROUTE_STATE = 34;
export const MCAST_MFE_STATS_EX = 35;
export const IP6_STATS = 36;
export const UDP6_STATS = 37;
export const TCP6_STATS = 38;
export const NUMBER_OF_EXPORTED_VARIABLES = 39;
export const MAX_SCOPE_NAME_LEN = 255;
export const MAX_MIB_OFFSET = 8;
export const MIB_INVALID_TEREDO_PORT_NUMBER = 0;
export const DNS_SETTINGS_VERSION1 = 1;
export const DNS_SETTINGS_VERSION2 = 2;
export const DNS_INTERFACE_SETTINGS_VERSION1 = 1;
export const DNS_INTERFACE_SETTINGS_VERSION2 = 2;
export const DNS_INTERFACE_SETTINGS_VERSION3 = 3;
export const DNS_SETTING_IPV6 = 1;
export const DNS_SETTING_NAMESERVER = 2;
export const DNS_SETTING_SEARCHLIST = 4;
export const DNS_SETTING_REGISTRATION_ENABLED = 8;
export const DNS_SETTING_REGISTER_ADAPTER_NAME = 16;
export const DNS_SETTING_DOMAIN = 32;
export const DNS_SETTING_HOSTNAME = 64;
export const DNS_SETTINGS_ENABLE_LLMNR = 128;
export const DNS_SETTINGS_QUERY_ADAPTER_NAME = 256;
export const DNS_SETTING_PROFILE_NAMESERVER = 512;
export const DNS_SETTING_DISABLE_UNCONSTRAINED_QUERIES = 1024;
export const DNS_SETTING_SUPPLEMENTAL_SEARCH_LIST = 2048;
export const DNS_SETTING_DOH = 4096;
export const DNS_SETTING_DOH_PROFILE = 8192;
export const DNS_ENABLE_DOH = 1;
export const DNS_DOH_POLICY_NOT_CONFIGURED = 4;
export const DNS_DOH_POLICY_DISABLE = 8;
export const DNS_DOH_POLICY_AUTO = 16;
export const DNS_DOH_POLICY_REQUIRED = 32;
export const DNS_SERVER_PROPERTY_VERSION1 = 1;
export const DNS_DOH_SERVER_SETTINGS_ENABLE_AUTO = 1;
export const DNS_DOH_SERVER_SETTINGS_ENABLE = 2;
export const DNS_DOH_SERVER_SETTINGS_FALLBACK_TO_UDP = 4;
export const DNS_DOH_AUTO_UPGRADE_SERVER = 8;
export const TCPIP_OWNING_MODULE_SIZE = 16;
export const FD_FLAGS_NOSYN = 1;
export const FD_FLAGS_ALLFLAGS = 1;
export const LB_SRC_ADDR_USE_SRCADDR_FLAG = 1;
export const LB_SRC_ADDR_USE_DSTADDR_FLAG = 2;
export const LB_DST_ADDR_USE_SRCADDR_FLAG = 4;
export const LB_DST_ADDR_USE_DSTADDR_FLAG = 8;
export const LB_SRC_MASK_LATE_FLAG = 16;
export const LB_DST_MASK_LATE_FLAG = 32;
export const ERROR_BASE = 23000;
export const PFERROR_NO_PF_INTERFACE = 23000;
export const PFERROR_NO_FILTERS_GIVEN = 23001;
export const PFERROR_BUFFER_TOO_SMALL = 23002;
export const ERROR_IPV6_NOT_IMPLEMENTED = 23003;
export const IP_EXPORT_INCLUDED = 1;
export const MAX_ADAPTER_NAME = 128;
export const IP_STATUS_BASE = 11000;
export const IP_SUCCESS = 0;
export const IP_BUF_TOO_SMALL = 11001;
export const IP_DEST_NET_UNREACHABLE = 11002;
export const IP_DEST_HOST_UNREACHABLE = 11003;
export const IP_DEST_PROT_UNREACHABLE = 11004;
export const IP_DEST_PORT_UNREACHABLE = 11005;
export const IP_NO_RESOURCES = 11006;
export const IP_BAD_OPTION = 11007;
export const IP_HW_ERROR = 11008;
export const IP_PACKET_TOO_BIG = 11009;
export const IP_REQ_TIMED_OUT = 11010;
export const IP_BAD_REQ = 11011;
export const IP_BAD_ROUTE = 11012;
export const IP_TTL_EXPIRED_TRANSIT = 11013;
export const IP_TTL_EXPIRED_REASSEM = 11014;
export const IP_PARAM_PROBLEM = 11015;
export const IP_SOURCE_QUENCH = 11016;
export const IP_OPTION_TOO_BIG = 11017;
export const IP_BAD_DESTINATION = 11018;
export const IP_DEST_NO_ROUTE = 11002;
export const IP_DEST_ADDR_UNREACHABLE = 11003;
export const IP_DEST_PROHIBITED = 11004;
export const IP_HOP_LIMIT_EXCEEDED = 11013;
export const IP_REASSEMBLY_TIME_EXCEEDED = 11014;
export const IP_PARAMETER_PROBLEM = 11015;
export const IP_DEST_UNREACHABLE = 11040;
export const IP_TIME_EXCEEDED = 11041;
export const IP_BAD_HEADER = 11042;
export const IP_UNRECOGNIZED_NEXT_HEADER = 11043;
export const IP_ICMP_ERROR = 11044;
export const IP_DEST_SCOPE_MISMATCH = 11045;
export const IP_ADDR_DELETED = 11019;
export const IP_SPEC_MTU_CHANGE = 11020;
export const IP_MTU_CHANGE = 11021;
export const IP_UNLOAD = 11022;
export const IP_ADDR_ADDED = 11023;
export const IP_MEDIA_CONNECT = 11024;
export const IP_MEDIA_DISCONNECT = 11025;
export const IP_BIND_ADAPTER = 11026;
export const IP_UNBIND_ADAPTER = 11027;
export const IP_DEVICE_DOES_NOT_EXIST = 11028;
export const IP_DUPLICATE_ADDRESS = 11029;
export const IP_INTERFACE_METRIC_CHANGE = 11030;
export const IP_RECONFIG_SECFLTR = 11031;
export const IP_NEGOTIATING_IPSEC = 11032;
export const IP_INTERFACE_WOL_CAPABILITY_CHANGE = 11033;
export const IP_DUPLICATE_IPADD = 11034;
export const IP_GENERAL_FAILURE = 11050;
export const MAX_IP_STATUS = 11050;
export const IP_PENDING = 11255;
export const IP_FLAG_REVERSE = 1;
export const IP_FLAG_DF = 2;
export const MAX_OPT_SIZE = 40;
export const IOCTL_IP_RTCHANGE_NOTIFY_REQUEST = 101;
export const IOCTL_IP_ADDCHANGE_NOTIFY_REQUEST = 102;
export const IOCTL_ARP_SEND_REQUEST = 103;
export const IOCTL_IP_INTERFACE_INFO = 104;
export const IOCTL_IP_GET_BEST_INTERFACE = 105;
export const IOCTL_IP_UNIDIRECTIONAL_ADAPTER_ADDRESS = 106;
export const NET_STRING_IPV4_ADDRESS = 1;
export const NET_STRING_IPV4_SERVICE = 2;
export const NET_STRING_IPV4_NETWORK = 4;
export const NET_STRING_IPV6_ADDRESS = 8;
export const NET_STRING_IPV6_ADDRESS_NO_SCOPE = 16;
export const NET_STRING_IPV6_SERVICE = 32;
export const NET_STRING_IPV6_SERVICE_NO_SCOPE = 64;
export const NET_STRING_IPV6_NETWORK = 128;
export const NET_STRING_NAMED_ADDRESS = 256;
export const NET_STRING_NAMED_SERVICE = 512;
export const MAX_ADAPTER_DESCRIPTION_LENGTH = 128;
export const MAX_ADAPTER_NAME_LENGTH = 256;
export const MAX_ADAPTER_ADDRESS_LENGTH = 8;
export const DEFAULT_MINIMUM_ENTITIES = 32;
export const MAX_HOSTNAME_LEN = 128;
export const MAX_DOMAIN_NAME_LEN = 128;
export const MAX_SCOPE_ID_LEN = 256;
export const MAX_DHCPV6_DUID_LENGTH = 130;
export const MAX_DNS_SUFFIX_STRING_LENGTH = 256;
export const BROADCAST_NODETYPE = 1;
export const PEER_TO_PEER_NODETYPE = 2;
export const MIXED_NODETYPE = 4;
export const HYBRID_NODETYPE = 8;
export const IP_ADAPTER_ADDRESS_DNS_ELIGIBLE = 1;
export const IP_ADAPTER_ADDRESS_TRANSIENT = 2;
export const IP_ADAPTER_DDNS_ENABLED = 1;
export const IP_ADAPTER_REGISTER_ADAPTER_SUFFIX = 2;
export const IP_ADAPTER_DHCP_ENABLED = 4;
export const IP_ADAPTER_RECEIVE_ONLY = 8;
export const IP_ADAPTER_NO_MULTICAST = 16;
export const IP_ADAPTER_IPV6_OTHER_STATEFUL_CONFIG = 32;
export const IP_ADAPTER_NETBIOS_OVER_TCPIP_ENABLED = 64;
export const IP_ADAPTER_IPV4_ENABLED = 128;
export const IP_ADAPTER_IPV6_ENABLED = 256;
export const IP_ADAPTER_IPV6_MANAGE_ADDRESS_CONFIG = 512;
export const GAA_FLAG_SKIP_DNS_INFO = 2048;
export const IP_ROUTER_MANAGER_VERSION = 1;
export const IP_GENERAL_INFO_BASE = 4294901760;
export const IP_IN_FILTER_INFO = 4294901761;
export const IP_OUT_FILTER_INFO = 4294901762;
export const IP_GLOBAL_INFO = 4294901763;
export const IP_INTERFACE_STATUS_INFO = 4294901764;
export const IP_ROUTE_INFO = 4294901765;
export const IP_PROT_PRIORITY_INFO = 4294901766;
export const IP_ROUTER_DISC_INFO = 4294901767;
export const IP_DEMAND_DIAL_FILTER_INFO = 4294901769;
export const IP_MCAST_HEARBEAT_INFO = 4294901770;
export const IP_MCAST_BOUNDARY_INFO = 4294901771;
export const IP_IPINIP_CFG_INFO = 4294901772;
export const IP_IFFILTER_INFO = 4294901773;
export const IP_MCAST_LIMIT_INFO = 4294901774;
export const IPV6_GLOBAL_INFO = 4294901775;
export const IPV6_ROUTE_INFO = 4294901776;
export const IP_IN_FILTER_INFO_V6 = 4294901777;
export const IP_OUT_FILTER_INFO_V6 = 4294901778;
export const IP_DEMAND_DIAL_FILTER_INFO_V6 = 4294901779;
export const IP_IFFILTER_INFO_V6 = 4294901780;
export const IP_FILTER_ENABLE_INFO = 4294901781;
export const IP_FILTER_ENABLE_INFO_V6 = 4294901782;
export const IP_PROT_PRIORITY_INFO_EX = 4294901783;
export const IF_ACCESS_LOOPBACK = 1;
export const IF_ACCESS_BROADCAST = 2;
export const IF_ACCESS_POINT_TO_POINT = 3;
export const IF_ACCESS_POINTTOPOINT = 3;
export const IF_ACCESS_POINT_TO_MULTI_POINT = 4;
export const IF_ACCESS_POINTTOMULTIPOINT = 4;
export const IF_OPER_STATUS_NON_OPERATIONAL = 0;
export const IF_OPER_STATUS_UNREACHABLE = 1;
export const IF_OPER_STATUS_DISCONNECTED = 2;
export const IF_OPER_STATUS_CONNECTING = 3;
export const IF_OPER_STATUS_CONNECTED = 4;
export const IF_OPER_STATUS_OPERATIONAL = 5;
export const MibParameterNotification = 0;
export const MibAddInstance = 1;
export const MibDeleteInstance = 2;
export const MibInitialNotification = 3;
export const TUNNEL_TYPE_NONE = 0;
export const TUNNEL_TYPE_OTHER = 1;
export const TUNNEL_TYPE_DIRECT = 2;
export const TUNNEL_TYPE_6TO4 = 11;
export const TUNNEL_TYPE_ISATAP = 13;
export const TUNNEL_TYPE_TEREDO = 14;
export const TUNNEL_TYPE_IPHTTPS = 15;
export const NdisMedium802_3 = 0;
export const NdisMedium802_5 = 1;
export const NdisMediumFddi = 2;
export const NdisMediumWan = 3;
export const NdisMediumLocalTalk = 4;
export const NdisMediumDix = 5;
export const NdisMediumArcnetRaw = 6;
export const NdisMediumArcnet878_2 = 7;
export const NdisMediumAtm = 8;
export const NdisMediumWirelessWan = 9;
export const NdisMediumIrda = 10;
export const NdisMediumBpc = 11;
export const NdisMediumCoWan = 12;
export const NdisMedium1394 = 13;
export const NdisMediumInfiniBand = 14;
export const NdisMediumTunnel = 15;
export const NdisMediumNative802_11 = 16;
export const NdisMediumLoopback = 17;
export const NdisMediumWiMAX = 18;
export const NdisMediumIP = 19;
export const NdisMediumMax = 20;
export const NdisPhysicalMediumUnspecified = 0;
export const NdisPhysicalMediumWirelessLan = 1;
export const NdisPhysicalMediumCableModem = 2;
export const NdisPhysicalMediumPhoneLine = 3;
export const NdisPhysicalMediumPowerLine = 4;
export const NdisPhysicalMediumDSL = 5;
export const NdisPhysicalMediumFibreChannel = 6;
export const NdisPhysicalMedium1394 = 7;
export const NdisPhysicalMediumWirelessWan = 8;
export const NdisPhysicalMediumNative802_11 = 9;
export const NdisPhysicalMediumBluetooth = 10;
export const NdisPhysicalMediumInfiniband = 11;
export const NdisPhysicalMediumWiMax = 12;
export const NdisPhysicalMediumUWB = 13;
export const NdisPhysicalMedium802_3 = 14;
export const NdisPhysicalMedium802_5 = 15;
export const NdisPhysicalMediumIrda = 16;
export const NdisPhysicalMediumWiredWAN = 17;
export const NdisPhysicalMediumWiredCoWan = 18;
export const NdisPhysicalMediumOther = 19;
export const NdisPhysicalMediumNative802_15_4 = 20;
export const NdisPhysicalMediumMax = 21;
export const NET_IF_ACCESS_LOOPBACK = 1;
export const NET_IF_ACCESS_BROADCAST = 2;
export const NET_IF_ACCESS_POINT_TO_POINT = 3;
export const NET_IF_ACCESS_POINT_TO_MULTI_POINT = 4;
export const NET_IF_ACCESS_MAXIMUM = 5;
export const NET_IF_DIRECTION_SENDRECEIVE = 0;
export const NET_IF_DIRECTION_SENDONLY = 1;
export const NET_IF_DIRECTION_RECEIVEONLY = 2;
export const NET_IF_DIRECTION_MAXIMUM = 3;
export const IfOperStatusUp = 1;
export const IfOperStatusDown = 2;
export const IfOperStatusTesting = 3;
export const IfOperStatusUnknown = 4;
export const IfOperStatusDormant = 5;
export const IfOperStatusNotPresent = 6;
export const IfOperStatusLowerLayerDown = 7;
export const NET_IF_ADMIN_STATUS_UP = 1;
export const NET_IF_ADMIN_STATUS_DOWN = 2;
export const NET_IF_ADMIN_STATUS_TESTING = 3;
export const MediaConnectStateUnknown = 0;
export const MediaConnectStateConnected = 1;
export const MediaConnectStateDisconnected = 2;
export const NET_IF_CONNECTION_DEDICATED = 1;
export const NET_IF_CONNECTION_PASSIVE = 2;
export const NET_IF_CONNECTION_DEMAND = 3;
export const NET_IF_CONNECTION_MAXIMUM = 4;
export const MibIfEntryNormal = 0;
export const MibIfEntryNormalWithoutStatistics = 2;
export const MibIfTableNormal = 0;
export const MibIfTableRaw = 1;
export const MibIfTableNormalWithoutStatistics = 2;
export const RouterDiscoveryDisabled = 0;
export const RouterDiscoveryEnabled = 1;
export const RouterDiscoveryDhcp = 2;
export const RouterDiscoveryUnchanged = `-1`;
export const LinkLocalAlwaysOff = 0;
export const LinkLocalDelayed = 1;
export const LinkLocalAlwaysOn = 2;
export const LinkLocalUnchanged = `-1`;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const IpPrefixOriginOther = 0;
export const IpPrefixOriginManual = 1;
export const IpPrefixOriginWellKnown = 2;
export const IpPrefixOriginDhcp = 3;
export const IpPrefixOriginRouterAdvertisement = 4;
export const IpPrefixOriginUnchanged = 16;
export const NlsoOther = 0;
export const NlsoManual = 1;
export const NlsoWellKnown = 2;
export const NlsoDhcp = 3;
export const NlsoLinkLayerAddress = 4;
export const NlsoRandom = 5;
export const IpSuffixOriginOther = 0;
export const IpSuffixOriginManual = 1;
export const IpSuffixOriginWellKnown = 2;
export const IpSuffixOriginDhcp = 3;
export const IpSuffixOriginLinkLayerAddress = 4;
export const IpSuffixOriginRandom = 5;
export const IpSuffixOriginUnchanged = 16;
export const NldsInvalid = 0;
export const NldsTentative = 1;
export const NldsDuplicate = 2;
export const NldsDeprecated = 3;
export const NldsPreferred = 4;
export const IpDadStateInvalid = 0;
export const IpDadStateTentative = 1;
export const IpDadStateDuplicate = 2;
export const IpDadStateDeprecated = 3;
export const IpDadStatePreferred = 4;
export const RouteProtocolOther = 1;
export const RouteProtocolLocal = 2;
export const RouteProtocolNetMgmt = 3;
export const RouteProtocolIcmp = 4;
export const RouteProtocolEgp = 5;
export const RouteProtocolGgp = 6;
export const RouteProtocolHello = 7;
export const RouteProtocolRip = 8;
export const RouteProtocolIsIs = 9;
export const RouteProtocolEsIs = 10;
export const RouteProtocolCisco = 11;
export const RouteProtocolBbn = 12;
export const RouteProtocolOspf = 13;
export const RouteProtocolBgp = 14;
export const RouteProtocolIdpr = 15;
export const RouteProtocolEigrp = 16;
export const RouteProtocolDvmrp = 17;
export const RouteProtocolRpl = 18;
export const RouteProtocolDhcp = 19;
export const MIB_IPPROTO_OTHER = 1;
export const PROTO_IP_OTHER = 1;
export const MIB_IPPROTO_LOCAL = 2;
export const PROTO_IP_LOCAL = 2;
export const MIB_IPPROTO_NETMGMT = 3;
export const PROTO_IP_NETMGMT = 3;
export const MIB_IPPROTO_ICMP = 4;
export const PROTO_IP_ICMP = 4;
export const MIB_IPPROTO_EGP = 5;
export const PROTO_IP_EGP = 5;
export const MIB_IPPROTO_GGP = 6;
export const PROTO_IP_GGP = 6;
export const MIB_IPPROTO_HELLO = 7;
export const PROTO_IP_HELLO = 7;
export const MIB_IPPROTO_RIP = 8;
export const PROTO_IP_RIP = 8;
export const MIB_IPPROTO_IS_IS = 9;
export const PROTO_IP_IS_IS = 9;
export const MIB_IPPROTO_ES_IS = 10;
export const PROTO_IP_ES_IS = 10;
export const MIB_IPPROTO_CISCO = 11;
export const PROTO_IP_CISCO = 11;
export const MIB_IPPROTO_BBN = 12;
export const PROTO_IP_BBN = 12;
export const MIB_IPPROTO_OSPF = 13;
export const PROTO_IP_OSPF = 13;
export const MIB_IPPROTO_BGP = 14;
export const PROTO_IP_BGP = 14;
export const MIB_IPPROTO_IDPR = 15;
export const PROTO_IP_IDPR = 15;
export const MIB_IPPROTO_EIGRP = 16;
export const PROTO_IP_EIGRP = 16;
export const MIB_IPPROTO_DVMRP = 17;
export const PROTO_IP_DVMRP = 17;
export const MIB_IPPROTO_RPL = 18;
export const PROTO_IP_RPL = 18;
export const MIB_IPPROTO_DHCP = 19;
export const PROTO_IP_DHCP = 19;
export const MIB_IPPROTO_NT_AUTOSTATIC = 10002;
export const PROTO_IP_NT_AUTOSTATIC = 10002;
export const MIB_IPPROTO_NT_STATIC = 10006;
export const PROTO_IP_NT_STATIC = 10006;
export const MIB_IPPROTO_NT_STATIC_NON_DOD = 10007;
export const PROTO_IP_NT_STATIC_NON_DOD = 10007;
export const NlroManual = 0;
export const NlroWellKnown = 1;
export const NlroDHCP = 2;
export const NlroRouterAdvertisement = 3;
export const Nlro6to4 = 4;
export const NlnsUnreachable = 0;
export const NlnsIncomplete = 1;
export const NlnsProbe = 2;
export const NlnsDelay = 3;
export const NlnsStale = 4;
export const NlnsReachable = 5;
export const NlnsPermanent = 6;
export const NlnsMaximum = 7;
export const DnsServerInvalidProperty = 0;
export const DnsServerDohProperty = 1;
export const MIB_IPROUTE_TYPE_OTHER = 1;
export const MIB_IPROUTE_TYPE_INVALID = 2;
export const MIB_IPROUTE_TYPE_DIRECT = 3;
export const MIB_IPROUTE_TYPE_INDIRECT = 4;
export const MIB_IPNET_TYPE_OTHER = 1;
export const MIB_IPNET_TYPE_INVALID = 2;
export const MIB_IPNET_TYPE_DYNAMIC = 3;
export const MIB_IPNET_TYPE_STATIC = 4;
export const MIB_IP_FORWARDING = 1;
export const MIB_IP_NOT_FORWARDING = 2;
export const ICMP6_DST_UNREACH = 1;
export const ICMP6_PACKET_TOO_BIG = 2;
export const ICMP6_TIME_EXCEEDED = 3;
export const ICMP6_PARAM_PROB = 4;
export const ICMP6_ECHO_REQUEST = 128;
export const ICMP6_ECHO_REPLY = 129;
export const ICMP6_MEMBERSHIP_QUERY = 130;
export const ICMP6_MEMBERSHIP_REPORT = 131;
export const ICMP6_MEMBERSHIP_REDUCTION = 132;
export const ND_ROUTER_SOLICIT = 133;
export const ND_ROUTER_ADVERT = 134;
export const ND_NEIGHBOR_SOLICIT = 135;
export const ND_NEIGHBOR_ADVERT = 136;
export const ND_REDIRECT = 137;
export const ICMP6_V2_MEMBERSHIP_REPORT = 143;
export const ICMP4_ECHO_REPLY = 0;
export const ICMP4_DST_UNREACH = 3;
export const ICMP4_SOURCE_QUENCH = 4;
export const ICMP4_REDIRECT = 5;
export const ICMP4_ECHO_REQUEST = 8;
export const ICMP4_ROUTER_ADVERT = 9;
export const ICMP4_ROUTER_SOLICIT = 10;
export const ICMP4_TIME_EXCEEDED = 11;
export const ICMP4_PARAM_PROB = 12;
export const ICMP4_TIMESTAMP_REQUEST = 13;
export const ICMP4_TIMESTAMP_REPLY = 14;
export const ICMP4_MASK_REQUEST = 17;
export const ICMP4_MASK_REPLY = 18;
export const MIB_TCP_STATE_CLOSED = 1;
export const MIB_TCP_STATE_LISTEN = 2;
export const MIB_TCP_STATE_SYN_SENT = 3;
export const MIB_TCP_STATE_SYN_RCVD = 4;
export const MIB_TCP_STATE_ESTAB = 5;
export const MIB_TCP_STATE_FIN_WAIT1 = 6;
export const MIB_TCP_STATE_FIN_WAIT2 = 7;
export const MIB_TCP_STATE_CLOSE_WAIT = 8;
export const MIB_TCP_STATE_CLOSING = 9;
export const MIB_TCP_STATE_LAST_ACK = 10;
export const MIB_TCP_STATE_TIME_WAIT = 11;
export const MIB_TCP_STATE_DELETE_TCB = 12;
export const MIB_TCP_STATE_RESERVED = 100;
export const TcpConnectionOffloadStateInHost = 0;
export const TcpConnectionOffloadStateOffloading = 1;
export const TcpConnectionOffloadStateOffloaded = 2;
export const TcpConnectionOffloadStateUploading = 3;
export const TcpConnectionOffloadStateMax = 4;
export const TcpRtoAlgorithmOther = 1;
export const TcpRtoAlgorithmConstant = 2;
export const TcpRtoAlgorithmRsre = 3;
export const TcpRtoAlgorithmVanj = 4;
export const MIB_TCP_RTO_OTHER = 1;
export const MIB_TCP_RTO_CONSTANT = 2;
export const MIB_TCP_RTO_RSRE = 3;
export const MIB_TCP_RTO_VANJ = 4;
export const TCP_TABLE_BASIC_LISTENER = 0;
export const TCP_TABLE_BASIC_CONNECTIONS = 1;
export const TCP_TABLE_BASIC_ALL = 2;
export const TCP_TABLE_OWNER_PID_LISTENER = 3;
export const TCP_TABLE_OWNER_PID_CONNECTIONS = 4;
export const TCP_TABLE_OWNER_PID_ALL = 5;
export const TCP_TABLE_OWNER_MODULE_LISTENER = 6;
export const TCP_TABLE_OWNER_MODULE_CONNECTIONS = 7;
export const TCP_TABLE_OWNER_MODULE_ALL = 8;
export const UDP_TABLE_BASIC = 0;
export const UDP_TABLE_OWNER_PID = 1;
export const UDP_TABLE_OWNER_MODULE = 2;
export const TCPIP_OWNER_MODULE_INFO_BASIC = 0;
export const TcpConnectionEstatsSynOpts = 0;
export const TcpConnectionEstatsData = 1;
export const TcpConnectionEstatsSndCong = 2;
export const TcpConnectionEstatsPath = 3;
export const TcpConnectionEstatsSendBuff = 4;
export const TcpConnectionEstatsRec = 5;
export const TcpConnectionEstatsObsRec = 6;
export const TcpConnectionEstatsBandwidth = 7;
export const TcpConnectionEstatsFineRtt = 8;
export const TcpConnectionEstatsMaximum = 9;
export const TcpBoolOptDisabled = 0;
export const TcpBoolOptEnabled = 1;
export const TcpBoolOptUnchanged = `-1`;
export const TcpErrorNone = 0;
export const TcpErrorBelowDataWindow = 1;
export const TcpErrorAboveDataWindow = 2;
export const TcpErrorBelowAckWindow = 3;
export const TcpErrorAboveAckWindow = 4;
export const TcpErrorBelowTsWindow = 5;
export const TcpErrorAboveTsWindow = 6;
export const TcpErrorDataChecksumError = 7;
export const TcpErrorDataLengthError = 8;
export const TcpErrorMaxSoftError = 9;
export const NET_ADDRESS_FORMAT_UNSPECIFIED = 0;
export const NET_ADDRESS_DNS_NAME = 1;
export const NET_ADDRESS_IPV4 = 2;
export const NET_ADDRESS_IPV6 = 3;
export const GF_FRAGMENTS = 2;
export const GF_STRONGHOST = 8;
export const GF_FRAGCACHE = 9;
export const PF_ACTION_FORWARD = 0;
export const PF_ACTION_DROP = 1;
export const PF_IPV4 = 0;
export const PF_IPV6 = 1;
export const PFFT_FILTER = 1;
export const PFFT_FRAG = 2;
export const PFFT_SPOOF = 3;
export const AF_INET = 2;
export const AF_INET6 = 23;
export const AF_UNSPEC = 0;
export const NO_ERROR = 0;
export const WAIT_OBJECT_0 = 0;
export const WAIT_ABANDONED = 128;
export const WAIT_ABANDONED_0 = 128;
export const WAIT_IO_COMPLETION = 192;
export const WAIT_TIMEOUT = 258;
export const WAIT_FAILED = 4294967295;
export const ERROR_SUCCESS = 0;
export const ERROR_INVALID_FUNCTION = 1;
export const ERROR_FILE_NOT_FOUND = 2;
export const ERROR_PATH_NOT_FOUND = 3;
export const ERROR_TOO_MANY_OPEN_FILES = 4;
export const ERROR_ACCESS_DENIED = 5;
export const ERROR_INVALID_HANDLE = 6;
export const ERROR_ARENA_TRASHED = 7;
export const ERROR_NOT_ENOUGH_MEMORY = 8;
export const ERROR_INVALID_BLOCK = 9;
export const ERROR_BAD_ENVIRONMENT = 10;
export const ERROR_BAD_FORMAT = 11;
export const ERROR_INVALID_ACCESS = 12;
export const ERROR_INVALID_DATA = 13;
export const ERROR_OUTOFMEMORY = 14;
export const ERROR_INVALID_DRIVE = 15;
export const ERROR_CURRENT_DIRECTORY = 16;
export const ERROR_NOT_SAME_DEVICE = 17;
export const ERROR_NO_MORE_FILES = 18;
export const ERROR_WRITE_PROTECT = 19;
export const ERROR_BAD_UNIT = 20;
export const ERROR_NOT_READY = 21;
export const ERROR_BAD_COMMAND = 22;
export const ERROR_CRC = 23;
export const ERROR_BAD_LENGTH = 24;
export const ERROR_SEEK = 25;
export const ERROR_NOT_DOS_DISK = 26;
export const ERROR_SECTOR_NOT_FOUND = 27;
export const ERROR_OUT_OF_PAPER = 28;
export const ERROR_WRITE_FAULT = 29;
export const ERROR_READ_FAULT = 30;
export const ERROR_GEN_FAILURE = 31;
export const ERROR_SHARING_VIOLATION = 32;
export const ERROR_LOCK_VIOLATION = 33;
export const ERROR_WRONG_DISK = 34;
export const ERROR_SHARING_BUFFER_EXCEEDED = 36;
export const ERROR_HANDLE_EOF = 38;
export const ERROR_HANDLE_DISK_FULL = 39;
export const ERROR_NOT_SUPPORTED = 50;
export const ERROR_REM_NOT_LIST = 51;
export const ERROR_DUP_NAME = 52;
export const ERROR_BAD_NETPATH = 53;
export const ERROR_NETWORK_BUSY = 54;
export const ERROR_DEV_NOT_EXIST = 55;
export const ERROR_TOO_MANY_CMDS = 56;
export const ERROR_ADAP_HDW_ERR = 57;
export const ERROR_BAD_NET_RESP = 58;
export const ERROR_UNEXP_NET_ERR = 59;
export const ERROR_BAD_REM_ADAP = 60;
export const ERROR_PRINTQ_FULL = 61;
export const ERROR_NO_SPOOL_SPACE = 62;
export const ERROR_PRINT_CANCELLED = 63;
export const ERROR_NETNAME_DELETED = 64;
export const ERROR_NETWORK_ACCESS_DENIED = 65;
export const ERROR_BAD_DEV_TYPE = 66;
export const ERROR_BAD_NET_NAME = 67;
export const ERROR_TOO_MANY_NAMES = 68;
export const ERROR_TOO_MANY_SESS = 69;
export const ERROR_SHARING_PAUSED = 70;
export const ERROR_REQ_NOT_ACCEP = 71;
export const ERROR_REDIR_PAUSED = 72;
export const ERROR_FILE_EXISTS = 80;
export const ERROR_CANNOT_MAKE = 82;
export const ERROR_FAIL_I24 = 83;
export const ERROR_OUT_OF_STRUCTURES = 84;
export const ERROR_ALREADY_ASSIGNED = 85;
export const ERROR_INVALID_PASSWORD = 86;
export const ERROR_INVALID_PARAMETER = 87;
export const ERROR_NET_WRITE_FAULT = 88;
export const ERROR_NO_PROC_SLOTS = 89;
export const ERROR_TOO_MANY_SEMAPHORES = 100;
export const ERROR_EXCL_SEM_ALREADY_OWNED = 101;
export const ERROR_SEM_IS_SET = 102;
export const ERROR_TOO_MANY_SEM_REQUESTS = 103;
export const ERROR_INVALID_AT_INTERRUPT_TIME = 104;
export const ERROR_SEM_OWNER_DIED = 105;
export const ERROR_SEM_USER_LIMIT = 106;
export const ERROR_DISK_CHANGE = 107;
export const ERROR_DRIVE_LOCKED = 108;
export const ERROR_BROKEN_PIPE = 109;
export const ERROR_OPEN_FAILED = 110;
export const ERROR_BUFFER_OVERFLOW = 111;
export const ERROR_DISK_FULL = 112;
export const ERROR_NO_MORE_SEARCH_HANDLES = 113;
export const ERROR_INVALID_TARGET_HANDLE = 114;
export const ERROR_INVALID_CATEGORY = 117;
export const ERROR_INVALID_VERIFY_SWITCH = 118;
export const ERROR_BAD_DRIVER_LEVEL = 119;
export const ERROR_CALL_NOT_IMPLEMENTED = 120;
export const ERROR_SEM_TIMEOUT = 121;
export const ERROR_INSUFFICIENT_BUFFER = 122;
export const ERROR_INVALID_NAME = 123;
export const ERROR_INVALID_LEVEL = 124;
export const ERROR_NO_VOLUME_LABEL = 125;
export const ERROR_MOD_NOT_FOUND = 126;
export const ERROR_PROC_NOT_FOUND = 127;
export const ERROR_WAIT_NO_CHILDREN = 128;
export const ERROR_CHILD_NOT_COMPLETE = 129;
export const ERROR_DIRECT_ACCESS_HANDLE = 130;
export const ERROR_NEGATIVE_SEEK = 131;
export const ERROR_SEEK_ON_DEVICE = 132;
export const ERROR_IS_JOIN_TARGET = 133;
export const ERROR_IS_JOINED = 134;
export const ERROR_IS_SUBSTED = 135;
export const ERROR_NOT_JOINED = 136;
export const ERROR_NOT_SUBSTED = 137;
export const ERROR_JOIN_TO_JOIN = 138;
export const ERROR_SUBST_TO_SUBST = 139;
export const ERROR_JOIN_TO_SUBST = 140;
export const ERROR_SUBST_TO_JOIN = 141;
export const ERROR_BUSY_DRIVE = 142;
export const ERROR_SAME_DRIVE = 143;
export const ERROR_DIR_NOT_ROOT = 144;
export const ERROR_DIR_NOT_EMPTY = 145;
export const ERROR_IS_SUBST_PATH = 146;
export const ERROR_IS_JOIN_PATH = 147;
export const ERROR_PATH_BUSY = 148;
export const ERROR_IS_SUBST_TARGET = 149;
export const ERROR_SYSTEM_TRACE = 150;
export const ERROR_INVALID_EVENT_COUNT = 151;
export const ERROR_TOO_MANY_MUXWAITERS = 152;
export const ERROR_INVALID_LIST_FORMAT = 153;
export const ERROR_LABEL_TOO_LONG = 154;
export const ERROR_TOO_MANY_TCBS = 155;
export const ERROR_SIGNAL_REFUSED = 156;
export const ERROR_DISCARDED = 157;
export const ERROR_NOT_LOCKED = 158;
export const ERROR_BAD_THREADID_ADDR = 159;
export const ERROR_BAD_ARGUMENTS = 160;
export const ERROR_BAD_PATHNAME = 161;
export const ERROR_SIGNAL_PENDING = 162;
export const ERROR_MAX_THRDS_REACHED = 164;
export const ERROR_LOCK_FAILED = 167;
export const ERROR_BUSY = 170;
export const ERROR_DEVICE_SUPPORT_IN_PROGRESS = 171;
export const ERROR_CANCEL_VIOLATION = 173;
export const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174;
export const ERROR_INVALID_SEGMENT_NUMBER = 180;
export const ERROR_INVALID_ORDINAL = 182;
export const ERROR_ALREADY_EXISTS = 183;
export const ERROR_INVALID_FLAG_NUMBER = 186;
export const ERROR_SEM_NOT_FOUND = 187;
export const ERROR_INVALID_STARTING_CODESEG = 188;
export const ERROR_INVALID_STACKSEG = 189;
export const ERROR_INVALID_MODULETYPE = 190;
export const ERROR_INVALID_EXE_SIGNATURE = 191;
export const ERROR_EXE_MARKED_INVALID = 192;
export const ERROR_BAD_EXE_FORMAT = 193;
export const ERROR_ITERATED_DATA_EXCEEDS_64k = 194;
export const ERROR_INVALID_MINALLOCSIZE = 195;
export const ERROR_DYNLINK_FROM_INVALID_RING = 196;
export const ERROR_IOPL_NOT_ENABLED = 197;
export const ERROR_INVALID_SEGDPL = 198;
export const ERROR_AUTODATASEG_EXCEEDS_64k = 199;
export const ERROR_RING2SEG_MUST_BE_MOVABLE = 200;
export const ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201;
export const ERROR_INFLOOP_IN_RELOC_CHAIN = 202;
export const ERROR_ENVVAR_NOT_FOUND = 203;
export const ERROR_NO_SIGNAL_SENT = 205;
export const ERROR_FILENAME_EXCED_RANGE = 206;
export const ERROR_RING2_STACK_IN_USE = 207;
export const ERROR_META_EXPANSION_TOO_LONG = 208;
export const ERROR_INVALID_SIGNAL_NUMBER = 209;
export const ERROR_THREAD_1_INACTIVE = 210;
export const ERROR_LOCKED = 212;
export const ERROR_TOO_MANY_MODULES = 214;
export const ERROR_NESTING_NOT_ALLOWED = 215;
export const ERROR_EXE_MACHINE_TYPE_MISMATCH = 216;
export const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217;
export const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218;
export const ERROR_FILE_CHECKED_OUT = 220;
export const ERROR_CHECKOUT_REQUIRED = 221;
export const ERROR_BAD_FILE_TYPE = 222;
export const ERROR_FILE_TOO_LARGE = 223;
export const ERROR_FORMS_AUTH_REQUIRED = 224;
export const ERROR_VIRUS_INFECTED = 225;
export const ERROR_VIRUS_DELETED = 226;
export const ERROR_PIPE_LOCAL = 229;
export const ERROR_BAD_PIPE = 230;
export const ERROR_PIPE_BUSY = 231;
export const ERROR_NO_DATA = 232;
export const ERROR_PIPE_NOT_CONNECTED = 233;
export const ERROR_MORE_DATA = 234;
export const ERROR_NO_WORK_DONE = 235;
export const ERROR_VC_DISCONNECTED = 240;
export const ERROR_INVALID_EA_NAME = 254;
export const ERROR_EA_LIST_INCONSISTENT = 255;
export const ERROR_NO_MORE_ITEMS = 259;
export const ERROR_CANNOT_COPY = 266;
export const ERROR_DIRECTORY = 267;
export const ERROR_EAS_DIDNT_FIT = 275;
export const ERROR_EA_FILE_CORRUPT = 276;
export const ERROR_EA_TABLE_FULL = 277;
export const ERROR_INVALID_EA_HANDLE = 278;
export const ERROR_EAS_NOT_SUPPORTED = 282;
export const ERROR_NOT_OWNER = 288;
export const ERROR_TOO_MANY_POSTS = 298;
export const ERROR_PARTIAL_COPY = 299;
export const ERROR_OPLOCK_NOT_GRANTED = 300;
export const ERROR_INVALID_OPLOCK_PROTOCOL = 301;
export const ERROR_DISK_TOO_FRAGMENTED = 302;
export const ERROR_DELETE_PENDING = 303;
export const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304;
export const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305;
export const ERROR_SECURITY_STREAM_IS_INCONSISTENT = 306;
export const ERROR_INVALID_LOCK_RANGE = 307;
export const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = 308;
export const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = 309;
export const ERROR_INVALID_EXCEPTION_HANDLER = 310;
export const ERROR_DUPLICATE_PRIVILEGES = 311;
export const ERROR_NO_RANGES_PROCESSED = 312;
export const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = 313;
export const ERROR_DISK_RESOURCES_EXHAUSTED = 314;
export const ERROR_INVALID_TOKEN = 315;
export const ERROR_DEVICE_FEATURE_NOT_SUPPORTED = 316;
export const ERROR_MR_MID_NOT_FOUND = 317;
export const ERROR_SCOPE_NOT_FOUND = 318;
export const ERROR_UNDEFINED_SCOPE = 319;
export const ERROR_INVALID_CAP = 320;
export const ERROR_DEVICE_UNREACHABLE = 321;
export const ERROR_DEVICE_NO_RESOURCES = 322;
export const ERROR_DATA_CHECKSUM_ERROR = 323;
export const ERROR_INTERMIXED_KERNEL_EA_OPERATION = 324;
export const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = 326;
export const ERROR_OFFSET_ALIGNMENT_VIOLATION = 327;
export const ERROR_INVALID_FIELD_IN_PARAMETER_LIST = 328;
export const ERROR_OPERATION_IN_PROGRESS = 329;
export const ERROR_BAD_DEVICE_PATH = 330;
export const ERROR_TOO_MANY_DESCRIPTORS = 331;
export const ERROR_SCRUB_DATA_DISABLED = 332;
export const ERROR_NOT_REDUNDANT_STORAGE = 333;
export const ERROR_RESIDENT_FILE_NOT_SUPPORTED = 334;
export const ERROR_COMPRESSED_FILE_NOT_SUPPORTED = 335;
export const ERROR_DIRECTORY_NOT_SUPPORTED = 336;
export const ERROR_NOT_READ_FROM_COPY = 337;
export const ERROR_FT_WRITE_FAILURE = 338;
export const ERROR_FT_DI_SCAN_REQUIRED = 339;
export const ERROR_INVALID_KERNEL_INFO_VERSION = 340;
export const ERROR_INVALID_PEP_INFO_VERSION = 341;
export const ERROR_OBJECT_NOT_EXTERNALLY_BACKED = 342;
export const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = 343;
export const ERROR_COMPRESSION_NOT_BENEFICIAL = 344;
export const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = 345;
export const ERROR_BLOCKED_BY_PARENTAL_CONTROLS = 346;
export const ERROR_BLOCK_TOO_MANY_REFERENCES = 347;
export const ERROR_MARKED_TO_DISALLOW_WRITES = 348;
export const ERROR_ENCLAVE_FAILURE = 349;
export const ERROR_FAIL_NOACTION_REBOOT = 350;
export const ERROR_FAIL_SHUTDOWN = 351;
export const ERROR_FAIL_RESTART = 352;
export const ERROR_MAX_SESSIONS_REACHED = 353;
export const ERROR_NETWORK_ACCESS_DENIED_EDP = 354;
export const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = 355;
export const ERROR_EDP_POLICY_DENIES_OPERATION = 356;
export const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = 357;
export const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = 358;
export const ERROR_DEVICE_IN_MAINTENANCE = 359;
export const ERROR_NOT_SUPPORTED_ON_DAX = 360;
export const ERROR_DAX_MAPPING_EXISTS = 361;
export const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = 362;
export const ERROR_CLOUD_FILE_METADATA_CORRUPT = 363;
export const ERROR_CLOUD_FILE_METADATA_TOO_LARGE = 364;
export const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = 365;
export const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = 366;
export const ERROR_CHILD_PROCESS_BLOCKED = 367;
export const ERROR_STORAGE_LOST_DATA_PERSISTENCE = 368;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = 369;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = 370;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = 371;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = 372;
export const ERROR_GDI_HANDLE_LEAK = 373;
export const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = 374;
export const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = 375;
export const ERROR_NOT_A_CLOUD_FILE = 376;
export const ERROR_CLOUD_FILE_NOT_IN_SYNC = 377;
export const ERROR_CLOUD_FILE_ALREADY_CONNECTED = 378;
export const ERROR_CLOUD_FILE_NOT_SUPPORTED = 379;
export const ERROR_CLOUD_FILE_INVALID_REQUEST = 380;
export const ERROR_CLOUD_FILE_READ_ONLY_VOLUME = 381;
export const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = 382;
export const ERROR_CLOUD_FILE_VALIDATION_FAILED = 383;
export const ERROR_SMB1_NOT_AVAILABLE = 384;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = 385;
export const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = 386;
export const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = 387;
export const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = 388;
export const ERROR_CLOUD_FILE_UNSUCCESSFUL = 389;
export const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = 390;
export const ERROR_CLOUD_FILE_IN_USE = 391;
export const ERROR_CLOUD_FILE_PINNED = 392;
export const ERROR_CLOUD_FILE_REQUEST_ABORTED = 393;
export const ERROR_CLOUD_FILE_PROPERTY_CORRUPT = 394;
export const ERROR_CLOUD_FILE_ACCESS_DENIED = 395;
export const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = 396;
export const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = 397;
export const ERROR_CLOUD_FILE_REQUEST_CANCELED = 398;
export const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = 399;
export const ERROR_THREAD_MODE_ALREADY_BACKGROUND = 400;
export const ERROR_THREAD_MODE_NOT_BACKGROUND = 401;
export const ERROR_PROCESS_MODE_ALREADY_BACKGROUND = 402;
export const ERROR_PROCESS_MODE_NOT_BACKGROUND = 403;
export const ERROR_CLOUD_FILE_PROVIDER_TERMINATED = 404;
export const ERROR_NOT_A_CLOUD_SYNC_ROOT = 405;
export const ERROR_FILE_PROTECTED_UNDER_DPL = 406;
export const ERROR_VOLUME_NOT_CLUSTER_ALIGNED = 407;
export const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = 408;
export const ERROR_APPX_FILE_NOT_ENCRYPTED = 409;
export const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = 410;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = 411;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = 412;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = 413;
export const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = 414;
export const ERROR_FT_READ_FAILURE = 415;
export const ERROR_STORAGE_RESERVE_ID_INVALID = 416;
export const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = 417;
export const ERROR_STORAGE_RESERVE_ALREADY_EXISTS = 418;
export const ERROR_STORAGE_RESERVE_NOT_EMPTY = 419;
export const ERROR_NOT_A_DAX_VOLUME = 420;
export const ERROR_NOT_DAX_MAPPABLE = 421;
export const ERROR_TIME_SENSITIVE_THREAD = 422;
export const ERROR_DPL_NOT_SUPPORTED_FOR_USER = 423;
export const ERROR_CASE_DIFFERING_NAMES_IN_DIR = 424;
export const ERROR_FILE_NOT_SUPPORTED = 425;
export const ERROR_CLOUD_FILE_REQUEST_TIMEOUT = 426;
export const ERROR_NO_TASK_QUEUE = 427;
export const ERROR_SRC_SRV_DLL_LOAD_FAILED = 428;
export const ERROR_NOT_SUPPORTED_WITH_BTT = 429;
export const ERROR_ENCRYPTION_DISABLED = 430;
export const ERROR_ENCRYPTING_METADATA_DISALLOWED = 431;
export const ERROR_CANT_CLEAR_ENCRYPTION_FLAG = 432;
export const ERROR_NO_SUCH_DEVICE = 433;
export const ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED = 434;
export const ERROR_FILE_SNAP_IN_PROGRESS = 435;
export const ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = 436;
export const ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED = 437;
export const ERROR_FILE_SNAP_IO_NOT_COORDINATED = 438;
export const ERROR_FILE_SNAP_UNEXPECTED_ERROR = 439;
export const ERROR_FILE_SNAP_INVALID_PARAMETER = 440;
export const ERROR_UNSATISFIED_DEPENDENCIES = 441;
export const ERROR_CASE_SENSITIVE_PATH = 442;
export const ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR = 443;
export const ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED = 444;
export const ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION = 445;
export const ERROR_DLP_POLICY_DENIES_OPERATION = 446;
export const ERROR_SECURITY_DENIES_OPERATION = 447;
export const ERROR_UNTRUSTED_MOUNT_POINT = 448;
export const ERROR_DLP_POLICY_SILENTLY_FAIL = 449;
export const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = 450;
export const ERROR_CAPAUTHZ_CHANGE_TYPE = 451;
export const ERROR_CAPAUTHZ_NOT_PROVISIONED = 452;
export const ERROR_CAPAUTHZ_NOT_AUTHORIZED = 453;
export const ERROR_CAPAUTHZ_NO_POLICY = 454;
export const ERROR_CAPAUTHZ_DB_CORRUPTED = 455;
export const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = 456;
export const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = 457;
export const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = 458;
export const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = 459;
export const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = 460;
export const ERROR_CIMFS_IMAGE_CORRUPT = 470;
export const ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = 471;
export const ERROR_STORAGE_STACK_ACCESS_DENIED = 472;
export const ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = 473;
export const ERROR_INDEX_OUT_OF_BOUNDS = 474;
export const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = 480;
export const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = 481;
export const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = 482;
export const ERROR_DEVICE_HARDWARE_ERROR = 483;
export const ERROR_INVALID_ADDRESS = 487;
export const ERROR_HAS_SYSTEM_CRITICAL_FILES = 488;
export const ERROR_ENCRYPTED_FILE_NOT_SUPPORTED = 489;
export const ERROR_SPARSE_FILE_NOT_SUPPORTED = 490;
export const ERROR_PAGEFILE_NOT_SUPPORTED = 491;
export const ERROR_VOLUME_NOT_SUPPORTED = 492;
export const ERROR_NOT_SUPPORTED_WITH_BYPASSIO = 493;
export const ERROR_NO_BYPASSIO_DRIVER_SUPPORT = 494;
export const ERROR_NOT_SUPPORTED_WITH_ENCRYPTION = 495;
export const ERROR_NOT_SUPPORTED_WITH_COMPRESSION = 496;
export const ERROR_NOT_SUPPORTED_WITH_REPLICATION = 497;
export const ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION = 498;
export const ERROR_NOT_SUPPORTED_WITH_AUDITING = 499;
export const ERROR_USER_PROFILE_LOAD = 500;
export const ERROR_SESSION_KEY_TOO_SHORT = 501;
export const ERROR_ACCESS_DENIED_APPDATA = 502;
export const ERROR_NOT_SUPPORTED_WITH_MONITORING = 503;
export const ERROR_NOT_SUPPORTED_WITH_SNAPSHOT = 504;
export const ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION = 505;
export const ERROR_BYPASSIO_FLT_NOT_SUPPORTED = 506;
export const ERROR_DEVICE_RESET_REQUIRED = 507;
export const ERROR_VOLUME_WRITE_ACCESS_DENIED = 508;
export const ERROR_ARITHMETIC_OVERFLOW = 534;
export const ERROR_PIPE_CONNECTED = 535;
export const ERROR_PIPE_LISTENING = 536;
export const ERROR_VERIFIER_STOP = 537;
export const ERROR_ABIOS_ERROR = 538;
export const ERROR_WX86_WARNING = 539;
export const ERROR_WX86_ERROR = 540;
export const ERROR_TIMER_NOT_CANCELED = 541;
export const ERROR_UNWIND = 542;
export const ERROR_BAD_STACK = 543;
export const ERROR_INVALID_UNWIND_TARGET = 544;
export const ERROR_INVALID_PORT_ATTRIBUTES = 545;
export const ERROR_PORT_MESSAGE_TOO_LONG = 546;
export const ERROR_INVALID_QUOTA_LOWER = 547;
export const ERROR_DEVICE_ALREADY_ATTACHED = 548;
export const ERROR_INSTRUCTION_MISALIGNMENT = 549;
export const ERROR_PROFILING_NOT_STARTED = 550;
export const ERROR_PROFILING_NOT_STOPPED = 551;
export const ERROR_COULD_NOT_INTERPRET = 552;
export const ERROR_PROFILING_AT_LIMIT = 553;
export const ERROR_CANT_WAIT = 554;
export const ERROR_CANT_TERMINATE_SELF = 555;
export const ERROR_UNEXPECTED_MM_CREATE_ERR = 556;
export const ERROR_UNEXPECTED_MM_MAP_ERROR = 557;
export const ERROR_UNEXPECTED_MM_EXTEND_ERR = 558;
export const ERROR_BAD_FUNCTION_TABLE = 559;
export const ERROR_NO_GUID_TRANSLATION = 560;
export const ERROR_INVALID_LDT_SIZE = 561;
export const ERROR_INVALID_LDT_OFFSET = 563;
export const ERROR_INVALID_LDT_DESCRIPTOR = 564;
export const ERROR_TOO_MANY_THREADS = 565;
export const ERROR_THREAD_NOT_IN_PROCESS = 566;
export const ERROR_PAGEFILE_QUOTA_EXCEEDED = 567;
export const ERROR_LOGON_SERVER_CONFLICT = 568;
export const ERROR_SYNCHRONIZATION_REQUIRED = 569;
export const ERROR_NET_OPEN_FAILED = 570;
export const ERROR_IO_PRIVILEGE_FAILED = 571;
export const ERROR_CONTROL_C_EXIT = 572;
export const ERROR_MISSING_SYSTEMFILE = 573;
export const ERROR_UNHANDLED_EXCEPTION = 574;
export const ERROR_APP_INIT_FAILURE = 575;
export const ERROR_PAGEFILE_CREATE_FAILED = 576;
export const ERROR_INVALID_IMAGE_HASH = 577;
export const ERROR_NO_PAGEFILE = 578;
export const ERROR_ILLEGAL_FLOAT_CONTEXT = 579;
export const ERROR_NO_EVENT_PAIR = 580;
export const ERROR_DOMAIN_CTRLR_CONFIG_ERROR = 581;
export const ERROR_ILLEGAL_CHARACTER = 582;
export const ERROR_UNDEFINED_CHARACTER = 583;
export const ERROR_FLOPPY_VOLUME = 584;
export const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = 585;
export const ERROR_BACKUP_CONTROLLER = 586;
export const ERROR_MUTANT_LIMIT_EXCEEDED = 587;
export const ERROR_FS_DRIVER_REQUIRED = 588;
export const ERROR_CANNOT_LOAD_REGISTRY_FILE = 589;
export const ERROR_DEBUG_ATTACH_FAILED = 590;
export const ERROR_SYSTEM_PROCESS_TERMINATED = 591;
export const ERROR_DATA_NOT_ACCEPTED = 592;
export const ERROR_VDM_HARD_ERROR = 593;
export const ERROR_DRIVER_CANCEL_TIMEOUT = 594;
export const ERROR_REPLY_MESSAGE_MISMATCH = 595;
export const ERROR_LOST_WRITEBEHIND_DATA = 596;
export const ERROR_CLIENT_SERVER_PARAMETERS_INVALID = 597;
export const ERROR_NOT_TINY_STREAM = 598;
export const ERROR_STACK_OVERFLOW_READ = 599;
export const ERROR_CONVERT_TO_LARGE = 600;
export const ERROR_FOUND_OUT_OF_SCOPE = 601;
export const ERROR_ALLOCATE_BUCKET = 602;
export const ERROR_MARSHALL_OVERFLOW = 603;
export const ERROR_INVALID_VARIANT = 604;
export const ERROR_BAD_COMPRESSION_BUFFER = 605;
export const ERROR_AUDIT_FAILED = 606;
export const ERROR_TIMER_RESOLUTION_NOT_SET = 607;
export const ERROR_INSUFFICIENT_LOGON_INFO = 608;
export const ERROR_BAD_DLL_ENTRYPOINT = 609;
export const ERROR_BAD_SERVICE_ENTRYPOINT = 610;
export const ERROR_IP_ADDRESS_CONFLICT1 = 611;
export const ERROR_IP_ADDRESS_CONFLICT2 = 612;
export const ERROR_REGISTRY_QUOTA_LIMIT = 613;
export const ERROR_NO_CALLBACK_ACTIVE = 614;
export const ERROR_PWD_TOO_SHORT = 615;
export const ERROR_PWD_TOO_RECENT = 616;
export const ERROR_PWD_HISTORY_CONFLICT = 617;
export const ERROR_UNSUPPORTED_COMPRESSION = 618;
export const ERROR_INVALID_HW_PROFILE = 619;
export const ERROR_INVALID_PLUGPLAY_DEVICE_PATH = 620;
export const ERROR_QUOTA_LIST_INCONSISTENT = 621;
export const ERROR_EVALUATION_EXPIRATION = 622;
export const ERROR_ILLEGAL_DLL_RELOCATION = 623;
export const ERROR_DLL_INIT_FAILED_LOGOFF = 624;
export const ERROR_VALIDATE_CONTINUE = 625;
export const ERROR_NO_MORE_MATCHES = 626;
export const ERROR_RANGE_LIST_CONFLICT = 627;
export const ERROR_SERVER_SID_MISMATCH = 628;
export const ERROR_CANT_ENABLE_DENY_ONLY = 629;
export const ERROR_FLOAT_MULTIPLE_FAULTS = 630;
export const ERROR_FLOAT_MULTIPLE_TRAPS = 631;
export const ERROR_NOINTERFACE = 632;
export const ERROR_DRIVER_FAILED_SLEEP = 633;
export const ERROR_CORRUPT_SYSTEM_FILE = 634;
export const ERROR_COMMITMENT_MINIMUM = 635;
export const ERROR_PNP_RESTART_ENUMERATION = 636;
export const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = 637;
export const ERROR_PNP_REBOOT_REQUIRED = 638;
export const ERROR_INSUFFICIENT_POWER = 639;
export const ERROR_MULTIPLE_FAULT_VIOLATION = 640;
export const ERROR_SYSTEM_SHUTDOWN = 641;
export const ERROR_PORT_NOT_SET = 642;
export const ERROR_DS_VERSION_CHECK_FAILURE = 643;
export const ERROR_RANGE_NOT_FOUND = 644;
export const ERROR_NOT_SAFE_MODE_DRIVER = 646;
export const ERROR_FAILED_DRIVER_ENTRY = 647;
export const ERROR_DEVICE_ENUMERATION_ERROR = 648;
export const ERROR_MOUNT_POINT_NOT_RESOLVED = 649;
export const ERROR_INVALID_DEVICE_OBJECT_PARAMETER = 650;
export const ERROR_MCA_OCCURED = 651;
export const ERROR_DRIVER_DATABASE_ERROR = 652;
export const ERROR_SYSTEM_HIVE_TOO_LARGE = 653;
export const ERROR_DRIVER_FAILED_PRIOR_UNLOAD = 654;
export const ERROR_VOLSNAP_PREPARE_HIBERNATE = 655;
export const ERROR_HIBERNATION_FAILURE = 656;
export const ERROR_PWD_TOO_LONG = 657;
export const ERROR_FILE_SYSTEM_LIMITATION = 665;
export const ERROR_ASSERTION_FAILURE = 668;
export const ERROR_ACPI_ERROR = 669;
export const ERROR_WOW_ASSERTION = 670;
export const ERROR_PNP_BAD_MPS_TABLE = 671;
export const ERROR_PNP_TRANSLATION_FAILED = 672;
export const ERROR_PNP_IRQ_TRANSLATION_FAILED = 673;
export const ERROR_PNP_INVALID_ID = 674;
export const ERROR_WAKE_SYSTEM_DEBUGGER = 675;
export const ERROR_HANDLES_CLOSED = 676;
export const ERROR_EXTRANEOUS_INFORMATION = 677;
export const ERROR_RXACT_COMMIT_NECESSARY = 678;
export const ERROR_MEDIA_CHECK = 679;
export const ERROR_GUID_SUBSTITUTION_MADE = 680;
export const ERROR_STOPPED_ON_SYMLINK = 681;
export const ERROR_LONGJUMP = 682;
export const ERROR_PLUGPLAY_QUERY_VETOED = 683;
export const ERROR_UNWIND_CONSOLIDATE = 684;
export const ERROR_REGISTRY_HIVE_RECOVERED = 685;
export const ERROR_DLL_MIGHT_BE_INSECURE = 686;
export const ERROR_DLL_MIGHT_BE_INCOMPATIBLE = 687;
export const ERROR_DBG_EXCEPTION_NOT_HANDLED = 688;
export const ERROR_DBG_REPLY_LATER = 689;
export const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = 690;
export const ERROR_DBG_TERMINATE_THREAD = 691;
export const ERROR_DBG_TERMINATE_PROCESS = 692;
export const ERROR_DBG_CONTROL_C = 693;
export const ERROR_DBG_PRINTEXCEPTION_C = 694;
export const ERROR_DBG_RIPEXCEPTION = 695;
export const ERROR_DBG_CONTROL_BREAK = 696;
export const ERROR_DBG_COMMAND_EXCEPTION = 697;
export const ERROR_OBJECT_NAME_EXISTS = 698;
export const ERROR_THREAD_WAS_SUSPENDED = 699;
export const ERROR_IMAGE_NOT_AT_BASE = 700;
export const ERROR_RXACT_STATE_CREATED = 701;
export const ERROR_SEGMENT_NOTIFICATION = 702;
export const ERROR_BAD_CURRENT_DIRECTORY = 703;
export const ERROR_FT_READ_RECOVERY_FROM_BACKUP = 704;
export const ERROR_FT_WRITE_RECOVERY = 705;
export const ERROR_IMAGE_MACHINE_TYPE_MISMATCH = 706;
export const ERROR_RECEIVE_PARTIAL = 707;
export const ERROR_RECEIVE_EXPEDITED = 708;
export const ERROR_RECEIVE_PARTIAL_EXPEDITED = 709;
export const ERROR_EVENT_DONE = 710;
export const ERROR_EVENT_PENDING = 711;
export const ERROR_CHECKING_FILE_SYSTEM = 712;
export const ERROR_FATAL_APP_EXIT = 713;
export const ERROR_PREDEFINED_HANDLE = 714;
export const ERROR_WAS_UNLOCKED = 715;
export const ERROR_SERVICE_NOTIFICATION = 716;
export const ERROR_WAS_LOCKED = 717;
export const ERROR_LOG_HARD_ERROR = 718;
export const ERROR_ALREADY_WIN32 = 719;
export const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720;
export const ERROR_NO_YIELD_PERFORMED = 721;
export const ERROR_TIMER_RESUME_IGNORED = 722;
export const ERROR_ARBITRATION_UNHANDLED = 723;
export const ERROR_CARDBUS_NOT_SUPPORTED = 724;
export const ERROR_MP_PROCESSOR_MISMATCH = 725;
export const ERROR_HIBERNATED = 726;
export const ERROR_RESUME_HIBERNATION = 727;
export const ERROR_FIRMWARE_UPDATED = 728;
export const ERROR_DRIVERS_LEAKING_LOCKED_PAGES = 729;
export const ERROR_WAKE_SYSTEM = 730;
export const ERROR_WAIT_1 = 731;
export const ERROR_WAIT_2 = 732;
export const ERROR_WAIT_3 = 733;
export const ERROR_WAIT_63 = 734;
export const ERROR_ABANDONED_WAIT_0 = 735;
export const ERROR_ABANDONED_WAIT_63 = 736;
export const ERROR_USER_APC = 737;
export const ERROR_KERNEL_APC = 738;
export const ERROR_ALERTED = 739;
export const ERROR_ELEVATION_REQUIRED = 740;
export const ERROR_REPARSE = 741;
export const ERROR_OPLOCK_BREAK_IN_PROGRESS = 742;
export const ERROR_VOLUME_MOUNTED = 743;
export const ERROR_RXACT_COMMITTED = 744;
export const ERROR_NOTIFY_CLEANUP = 745;
export const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = 746;
export const ERROR_PAGE_FAULT_TRANSITION = 747;
export const ERROR_PAGE_FAULT_DEMAND_ZERO = 748;
export const ERROR_PAGE_FAULT_COPY_ON_WRITE = 749;
export const ERROR_PAGE_FAULT_GUARD_PAGE = 750;
export const ERROR_PAGE_FAULT_PAGING_FILE = 751;
export const ERROR_CACHE_PAGE_LOCKED = 752;
export const ERROR_CRASH_DUMP = 753;
export const ERROR_BUFFER_ALL_ZEROS = 754;
export const ERROR_REPARSE_OBJECT = 755;
export const ERROR_RESOURCE_REQUIREMENTS_CHANGED = 756;
export const ERROR_TRANSLATION_COMPLETE = 757;
export const ERROR_NOTHING_TO_TERMINATE = 758;
export const ERROR_PROCESS_NOT_IN_JOB = 759;
export const ERROR_PROCESS_IN_JOB = 760;
export const ERROR_VOLSNAP_HIBERNATE_READY = 761;
export const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762;
export const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = 763;
export const ERROR_INTERRUPT_STILL_CONNECTED = 764;
export const ERROR_WAIT_FOR_OPLOCK = 765;
export const ERROR_DBG_EXCEPTION_HANDLED = 766;
export const ERROR_DBG_CONTINUE = 767;
export const ERROR_CALLBACK_POP_STACK = 768;
export const ERROR_COMPRESSION_DISABLED = 769;
export const ERROR_CANTFETCHBACKWARDS = 770;
export const ERROR_CANTSCROLLBACKWARDS = 771;
export const ERROR_ROWSNOTRELEASED = 772;
export const ERROR_BAD_ACCESSOR_FLAGS = 773;
export const ERROR_ERRORS_ENCOUNTERED = 774;
export const ERROR_NOT_CAPABLE = 775;
export const ERROR_REQUEST_OUT_OF_SEQUENCE = 776;
export const ERROR_VERSION_PARSE_ERROR = 777;
export const ERROR_BADSTARTPOSITION = 778;
export const ERROR_MEMORY_HARDWARE = 779;
export const ERROR_DISK_REPAIR_DISABLED = 780;
export const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781;
export const ERROR_SYSTEM_POWERSTATE_TRANSITION = 782;
export const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783;
export const ERROR_MCA_EXCEPTION = 784;
export const ERROR_ACCESS_AUDIT_BY_POLICY = 785;
export const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786;
export const ERROR_ABANDON_HIBERFILE = 787;
export const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788;
export const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789;
export const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790;
export const ERROR_BAD_MCFG_TABLE = 791;
export const ERROR_DISK_REPAIR_REDIRECTED = 792;
export const ERROR_DISK_REPAIR_UNSUCCESSFUL = 793;
export const ERROR_CORRUPT_LOG_OVERFULL = 794;
export const ERROR_CORRUPT_LOG_CORRUPTED = 795;
export const ERROR_CORRUPT_LOG_UNAVAILABLE = 796;
export const ERROR_CORRUPT_LOG_DELETED_FULL = 797;
export const ERROR_CORRUPT_LOG_CLEARED = 798;
export const ERROR_ORPHAN_NAME_EXHAUSTED = 799;
export const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = 800;
export const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = 801;
export const ERROR_CANNOT_BREAK_OPLOCK = 802;
export const ERROR_OPLOCK_HANDLE_CLOSED = 803;
export const ERROR_NO_ACE_CONDITION = 804;
export const ERROR_INVALID_ACE_CONDITION = 805;
export const ERROR_FILE_HANDLE_REVOKED = 806;
export const ERROR_IMAGE_AT_DIFFERENT_BASE = 807;
export const ERROR_ENCRYPTED_IO_NOT_POSSIBLE = 808;
export const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = 809;
export const ERROR_QUOTA_ACTIVITY = 810;
export const ERROR_HANDLE_REVOKED = 811;
export const ERROR_CALLBACK_INVOKE_INLINE = 812;
export const ERROR_CPU_SET_INVALID = 813;
export const ERROR_ENCLAVE_NOT_TERMINATED = 814;
export const ERROR_ENCLAVE_VIOLATION = 815;
export const ERROR_SERVER_TRANSPORT_CONFLICT = 816;
export const ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT = 817;
export const ERROR_FT_READ_FROM_COPY_FAILURE = 818;
export const ERROR_SECTION_DIRECT_MAP_ONLY = 819;
export const ERROR_EA_ACCESS_DENIED = 994;
export const ERROR_OPERATION_ABORTED = 995;
export const ERROR_IO_INCOMPLETE = 996;
export const ERROR_IO_PENDING = 997;
export const ERROR_NOACCESS = 998;
export const ERROR_SWAPERROR = 999;
export const ERROR_STACK_OVERFLOW = 1001;
export const ERROR_INVALID_MESSAGE = 1002;
export const ERROR_CAN_NOT_COMPLETE = 1003;
export const ERROR_INVALID_FLAGS = 1004;
export const ERROR_UNRECOGNIZED_VOLUME = 1005;
export const ERROR_FILE_INVALID = 1006;
export const ERROR_FULLSCREEN_MODE = 1007;
export const ERROR_NO_TOKEN = 1008;
export const ERROR_BADDB = 1009;
export const ERROR_BADKEY = 1010;
export const ERROR_CANTOPEN = 1011;
export const ERROR_CANTREAD = 1012;
export const ERROR_CANTWRITE = 1013;
export const ERROR_REGISTRY_RECOVERED = 1014;
export const ERROR_REGISTRY_CORRUPT = 1015;
export const ERROR_REGISTRY_IO_FAILED = 1016;
export const ERROR_NOT_REGISTRY_FILE = 1017;
export const ERROR_KEY_DELETED = 1018;
export const ERROR_NO_LOG_SPACE = 1019;
export const ERROR_KEY_HAS_CHILDREN = 1020;
export const ERROR_CHILD_MUST_BE_VOLATILE = 1021;
export const ERROR_NOTIFY_ENUM_DIR = 1022;
export const ERROR_DEPENDENT_SERVICES_RUNNING = 1051;
export const ERROR_INVALID_SERVICE_CONTROL = 1052;
export const ERROR_SERVICE_REQUEST_TIMEOUT = 1053;
export const ERROR_SERVICE_NO_THREAD = 1054;
export const ERROR_SERVICE_DATABASE_LOCKED = 1055;
export const ERROR_SERVICE_ALREADY_RUNNING = 1056;
export const ERROR_INVALID_SERVICE_ACCOUNT = 1057;
export const ERROR_SERVICE_DISABLED = 1058;
export const ERROR_CIRCULAR_DEPENDENCY = 1059;
export const ERROR_SERVICE_DOES_NOT_EXIST = 1060;
export const ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061;
export const ERROR_SERVICE_NOT_ACTIVE = 1062;
export const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063;
export const ERROR_EXCEPTION_IN_SERVICE = 1064;
export const ERROR_DATABASE_DOES_NOT_EXIST = 1065;
export const ERROR_SERVICE_SPECIFIC_ERROR = 1066;
export const ERROR_PROCESS_ABORTED = 1067;
export const ERROR_SERVICE_DEPENDENCY_FAIL = 1068;
export const ERROR_SERVICE_LOGON_FAILED = 1069;
export const ERROR_SERVICE_START_HANG = 1070;
export const ERROR_INVALID_SERVICE_LOCK = 1071;
export const ERROR_SERVICE_MARKED_FOR_DELETE = 1072;
export const ERROR_SERVICE_EXISTS = 1073;
export const ERROR_ALREADY_RUNNING_LKG = 1074;
export const ERROR_SERVICE_DEPENDENCY_DELETED = 1075;
export const ERROR_BOOT_ALREADY_ACCEPTED = 1076;
export const ERROR_SERVICE_NEVER_STARTED = 1077;
export const ERROR_DUPLICATE_SERVICE_NAME = 1078;
export const ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079;
export const ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080;
export const ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081;
export const ERROR_NO_RECOVERY_PROGRAM = 1082;
export const ERROR_SERVICE_NOT_IN_EXE = 1083;
export const ERROR_NOT_SAFEBOOT_SERVICE = 1084;
export const ERROR_END_OF_MEDIA = 1100;
export const ERROR_FILEMARK_DETECTED = 1101;
export const ERROR_BEGINNING_OF_MEDIA = 1102;
export const ERROR_SETMARK_DETECTED = 1103;
export const ERROR_NO_DATA_DETECTED = 1104;
export const ERROR_PARTITION_FAILURE = 1105;
export const ERROR_INVALID_BLOCK_LENGTH = 1106;
export const ERROR_DEVICE_NOT_PARTITIONED = 1107;
export const ERROR_UNABLE_TO_LOCK_MEDIA = 1108;
export const ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109;
export const ERROR_MEDIA_CHANGED = 1110;
export const ERROR_BUS_RESET = 1111;
export const ERROR_NO_MEDIA_IN_DRIVE = 1112;
export const ERROR_NO_UNICODE_TRANSLATION = 1113;
export const ERROR_DLL_INIT_FAILED = 1114;
export const ERROR_SHUTDOWN_IN_PROGRESS = 1115;
export const ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116;
export const ERROR_IO_DEVICE = 1117;
export const ERROR_SERIAL_NO_DEVICE = 1118;
export const ERROR_IRQ_BUSY = 1119;
export const ERROR_MORE_WRITES = 1120;
export const ERROR_COUNTER_TIMEOUT = 1121;
export const ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122;
export const ERROR_FLOPPY_WRONG_CYLINDER = 1123;
export const ERROR_FLOPPY_UNKNOWN_ERROR = 1124;
export const ERROR_FLOPPY_BAD_REGISTERS = 1125;
export const ERROR_DISK_RECALIBRATE_FAILED = 1126;
export const ERROR_DISK_OPERATION_FAILED = 1127;
export const ERROR_DISK_RESET_FAILED = 1128;
export const ERROR_EOM_OVERFLOW = 1129;
export const ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130;
export const ERROR_POSSIBLE_DEADLOCK = 1131;
export const ERROR_MAPPED_ALIGNMENT = 1132;
export const ERROR_SET_POWER_STATE_VETOED = 1140;
export const ERROR_SET_POWER_STATE_FAILED = 1141;
export const ERROR_TOO_MANY_LINKS = 1142;
export const ERROR_OLD_WIN_VERSION = 1150;
export const ERROR_APP_WRONG_OS = 1151;
export const ERROR_SINGLE_INSTANCE_APP = 1152;
export const ERROR_RMODE_APP = 1153;
export const ERROR_INVALID_DLL = 1154;
export const ERROR_NO_ASSOCIATION = 1155;
export const ERROR_DDE_FAIL = 1156;
export const ERROR_DLL_NOT_FOUND = 1157;
export const ERROR_NO_MORE_USER_HANDLES = 1158;
export const ERROR_MESSAGE_SYNC_ONLY = 1159;
export const ERROR_SOURCE_ELEMENT_EMPTY = 1160;
export const ERROR_DESTINATION_ELEMENT_FULL = 1161;
export const ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162;
export const ERROR_MAGAZINE_NOT_PRESENT = 1163;
export const ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164;
export const ERROR_DEVICE_REQUIRES_CLEANING = 1165;
export const ERROR_DEVICE_DOOR_OPEN = 1166;
export const ERROR_DEVICE_NOT_CONNECTED = 1167;
export const ERROR_NOT_FOUND = 1168;
export const ERROR_NO_MATCH = 1169;
export const ERROR_SET_NOT_FOUND = 1170;
export const ERROR_POINT_NOT_FOUND = 1171;
export const ERROR_NO_TRACKING_SERVICE = 1172;
export const ERROR_NO_VOLUME_ID = 1173;
export const ERROR_UNABLE_TO_REMOVE_REPLACED = 1175;
export const ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176;
export const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177;
export const ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178;
export const ERROR_JOURNAL_NOT_ACTIVE = 1179;
export const ERROR_POTENTIAL_FILE_FOUND = 1180;
export const ERROR_JOURNAL_ENTRY_DELETED = 1181;
export const ERROR_PARTITION_TERMINATING = 1184;
export const ERROR_SHUTDOWN_IS_SCHEDULED = 1190;
export const ERROR_SHUTDOWN_USERS_LOGGED_ON = 1191;
export const ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE = 1192;
export const ERROR_BAD_DEVICE = 1200;
export const ERROR_CONNECTION_UNAVAIL = 1201;
export const ERROR_DEVICE_ALREADY_REMEMBERED = 1202;
export const ERROR_NO_NET_OR_BAD_PATH = 1203;
export const ERROR_BAD_PROVIDER = 1204;
export const ERROR_CANNOT_OPEN_PROFILE = 1205;
export const ERROR_BAD_PROFILE = 1206;
export const ERROR_NOT_CONTAINER = 1207;
export const ERROR_EXTENDED_ERROR = 1208;
export const ERROR_INVALID_GROUPNAME = 1209;
export const ERROR_INVALID_COMPUTERNAME = 1210;
export const ERROR_INVALID_EVENTNAME = 1211;
export const ERROR_INVALID_DOMAINNAME = 1212;
export const ERROR_INVALID_SERVICENAME = 1213;
export const ERROR_INVALID_NETNAME = 1214;
export const ERROR_INVALID_SHARENAME = 1215;
export const ERROR_INVALID_PASSWORDNAME = 1216;
export const ERROR_INVALID_MESSAGENAME = 1217;
export const ERROR_INVALID_MESSAGEDEST = 1218;
export const ERROR_SESSION_CREDENTIAL_CONFLICT = 1219;
export const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220;
export const ERROR_DUP_DOMAINNAME = 1221;
export const ERROR_NO_NETWORK = 1222;
export const ERROR_CANCELLED = 1223;
export const ERROR_USER_MAPPED_FILE = 1224;
export const ERROR_CONNECTION_REFUSED = 1225;
export const ERROR_GRACEFUL_DISCONNECT = 1226;
export const ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227;
export const ERROR_ADDRESS_NOT_ASSOCIATED = 1228;
export const ERROR_CONNECTION_INVALID = 1229;
export const ERROR_CONNECTION_ACTIVE = 1230;
export const ERROR_NETWORK_UNREACHABLE = 1231;
export const ERROR_HOST_UNREACHABLE = 1232;
export const ERROR_PROTOCOL_UNREACHABLE = 1233;
export const ERROR_PORT_UNREACHABLE = 1234;
export const ERROR_REQUEST_ABORTED = 1235;
export const ERROR_CONNECTION_ABORTED = 1236;
export const ERROR_RETRY = 1237;
export const ERROR_CONNECTION_COUNT_LIMIT = 1238;
export const ERROR_LOGIN_TIME_RESTRICTION = 1239;
export const ERROR_LOGIN_WKSTA_RESTRICTION = 1240;
export const ERROR_INCORRECT_ADDRESS = 1241;
export const ERROR_ALREADY_REGISTERED = 1242;
export const ERROR_SERVICE_NOT_FOUND = 1243;
export const ERROR_NOT_AUTHENTICATED = 1244;
export const ERROR_NOT_LOGGED_ON = 1245;
export const ERROR_CONTINUE = 1246;
export const ERROR_ALREADY_INITIALIZED = 1247;
export const ERROR_NO_MORE_DEVICES = 1248;
export const ERROR_NO_SUCH_SITE = 1249;
export const ERROR_DOMAIN_CONTROLLER_EXISTS = 1250;
export const ERROR_ONLY_IF_CONNECTED = 1251;
export const ERROR_OVERRIDE_NOCHANGES = 1252;
export const ERROR_BAD_USER_PROFILE = 1253;
export const ERROR_NOT_SUPPORTED_ON_SBS = 1254;
export const ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255;
export const ERROR_HOST_DOWN = 1256;
export const ERROR_NON_ACCOUNT_SID = 1257;
export const ERROR_NON_DOMAIN_SID = 1258;
export const ERROR_APPHELP_BLOCK = 1259;
export const ERROR_ACCESS_DISABLED_BY_POLICY = 1260;
export const ERROR_REG_NAT_CONSUMPTION = 1261;
export const ERROR_CSCSHARE_OFFLINE = 1262;
export const ERROR_PKINIT_FAILURE = 1263;
export const ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264;
export const ERROR_DOWNGRADE_DETECTED = 1265;
export const ERROR_MACHINE_LOCKED = 1271;
export const ERROR_SMB_GUEST_LOGON_BLOCKED = 1272;
export const ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273;
export const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274;
export const ERROR_DRIVER_BLOCKED = 1275;
export const ERROR_INVALID_IMPORT_OF_NON_DLL = 1276;
export const ERROR_ACCESS_DISABLED_WEBBLADE = 1277;
export const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278;
export const ERROR_RECOVERY_FAILURE = 1279;
export const ERROR_ALREADY_FIBER = 1280;
export const ERROR_ALREADY_THREAD = 1281;
export const ERROR_STACK_BUFFER_OVERRUN = 1282;
export const ERROR_PARAMETER_QUOTA_EXCEEDED = 1283;
export const ERROR_DEBUGGER_INACTIVE = 1284;
export const ERROR_DELAY_LOAD_FAILED = 1285;
export const ERROR_VDM_DISALLOWED = 1286;
export const ERROR_UNIDENTIFIED_ERROR = 1287;
export const ERROR_INVALID_CRUNTIME_PARAMETER = 1288;
export const ERROR_BEYOND_VDL = 1289;
export const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = 1290;
export const ERROR_DRIVER_PROCESS_TERMINATED = 1291;
export const ERROR_IMPLEMENTATION_LIMIT = 1292;
export const ERROR_PROCESS_IS_PROTECTED = 1293;
export const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = 1294;
export const ERROR_DISK_QUOTA_EXCEEDED = 1295;
export const ERROR_CONTENT_BLOCKED = 1296;
export const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = 1297;
export const ERROR_APP_HANG = 1298;
export const ERROR_INVALID_LABEL = 1299;
export const ERROR_NOT_ALL_ASSIGNED = 1300;
export const ERROR_SOME_NOT_MAPPED = 1301;
export const ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302;
export const ERROR_LOCAL_USER_SESSION_KEY = 1303;
export const ERROR_NULL_LM_PASSWORD = 1304;
export const ERROR_UNKNOWN_REVISION = 1305;
export const ERROR_REVISION_MISMATCH = 1306;
export const ERROR_INVALID_OWNER = 1307;
export const ERROR_INVALID_PRIMARY_GROUP = 1308;
export const ERROR_NO_IMPERSONATION_TOKEN = 1309;
export const ERROR_CANT_DISABLE_MANDATORY = 1310;
export const ERROR_NO_LOGON_SERVERS = 1311;
export const ERROR_NO_SUCH_LOGON_SESSION = 1312;
export const ERROR_NO_SUCH_PRIVILEGE = 1313;
export const ERROR_PRIVILEGE_NOT_HELD = 1314;
export const ERROR_INVALID_ACCOUNT_NAME = 1315;
export const ERROR_USER_EXISTS = 1316;
export const ERROR_NO_SUCH_USER = 1317;
export const ERROR_GROUP_EXISTS = 1318;
export const ERROR_NO_SUCH_GROUP = 1319;
export const ERROR_MEMBER_IN_GROUP = 1320;
export const ERROR_MEMBER_NOT_IN_GROUP = 1321;
export const ERROR_LAST_ADMIN = 1322;
export const ERROR_WRONG_PASSWORD = 1323;
export const ERROR_ILL_FORMED_PASSWORD = 1324;
export const ERROR_PASSWORD_RESTRICTION = 1325;
export const ERROR_LOGON_FAILURE = 1326;
export const ERROR_ACCOUNT_RESTRICTION = 1327;
export const ERROR_INVALID_LOGON_HOURS = 1328;
export const ERROR_INVALID_WORKSTATION = 1329;
export const ERROR_PASSWORD_EXPIRED = 1330;
export const ERROR_ACCOUNT_DISABLED = 1331;
export const ERROR_NONE_MAPPED = 1332;
export const ERROR_TOO_MANY_LUIDS_REQUESTED = 1333;
export const ERROR_LUIDS_EXHAUSTED = 1334;
export const ERROR_INVALID_SUB_AUTHORITY = 1335;
export const ERROR_INVALID_ACL = 1336;
export const ERROR_INVALID_SID = 1337;
export const ERROR_INVALID_SECURITY_DESCR = 1338;
export const ERROR_BAD_INHERITANCE_ACL = 1340;
export const ERROR_SERVER_DISABLED = 1341;
export const ERROR_SERVER_NOT_DISABLED = 1342;
export const ERROR_INVALID_ID_AUTHORITY = 1343;
export const ERROR_ALLOTTED_SPACE_EXCEEDED = 1344;
export const ERROR_INVALID_GROUP_ATTRIBUTES = 1345;
export const ERROR_BAD_IMPERSONATION_LEVEL = 1346;
export const ERROR_CANT_OPEN_ANONYMOUS = 1347;
export const ERROR_BAD_VALIDATION_CLASS = 1348;
export const ERROR_BAD_TOKEN_TYPE = 1349;
export const ERROR_NO_SECURITY_ON_OBJECT = 1350;
export const ERROR_CANT_ACCESS_DOMAIN_INFO = 1351;
export const ERROR_INVALID_SERVER_STATE = 1352;
export const ERROR_INVALID_DOMAIN_STATE = 1353;
export const ERROR_INVALID_DOMAIN_ROLE = 1354;
export const ERROR_NO_SUCH_DOMAIN = 1355;
export const ERROR_DOMAIN_EXISTS = 1356;
export const ERROR_DOMAIN_LIMIT_EXCEEDED = 1357;
export const ERROR_INTERNAL_DB_CORRUPTION = 1358;
export const ERROR_INTERNAL_ERROR = 1359;
export const ERROR_GENERIC_NOT_MAPPED = 1360;
export const ERROR_BAD_DESCRIPTOR_FORMAT = 1361;
export const ERROR_NOT_LOGON_PROCESS = 1362;
export const ERROR_LOGON_SESSION_EXISTS = 1363;
export const ERROR_NO_SUCH_PACKAGE = 1364;
export const ERROR_BAD_LOGON_SESSION_STATE = 1365;
export const ERROR_LOGON_SESSION_COLLISION = 1366;
export const ERROR_INVALID_LOGON_TYPE = 1367;
export const ERROR_CANNOT_IMPERSONATE = 1368;
export const ERROR_RXACT_INVALID_STATE = 1369;
export const ERROR_RXACT_COMMIT_FAILURE = 1370;
export const ERROR_SPECIAL_ACCOUNT = 1371;
export const ERROR_SPECIAL_GROUP = 1372;
export const ERROR_SPECIAL_USER = 1373;
export const ERROR_MEMBERS_PRIMARY_GROUP = 1374;
export const ERROR_TOKEN_ALREADY_IN_USE = 1375;
export const ERROR_NO_SUCH_ALIAS = 1376;
export const ERROR_MEMBER_NOT_IN_ALIAS = 1377;
export const ERROR_MEMBER_IN_ALIAS = 1378;
export const ERROR_ALIAS_EXISTS = 1379;
export const ERROR_LOGON_NOT_GRANTED = 1380;
export const ERROR_TOO_MANY_SECRETS = 1381;
export const ERROR_SECRET_TOO_LONG = 1382;
export const ERROR_INTERNAL_DB_ERROR = 1383;
export const ERROR_TOO_MANY_CONTEXT_IDS = 1384;
export const ERROR_LOGON_TYPE_NOT_GRANTED = 1385;
export const ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386;
export const ERROR_NO_SUCH_MEMBER = 1387;
export const ERROR_INVALID_MEMBER = 1388;
export const ERROR_TOO_MANY_SIDS = 1389;
export const ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390;
export const ERROR_NO_INHERITANCE = 1391;
export const ERROR_FILE_CORRUPT = 1392;
export const ERROR_DISK_CORRUPT = 1393;
export const ERROR_NO_USER_SESSION_KEY = 1394;
export const ERROR_LICENSE_QUOTA_EXCEEDED = 1395;
export const ERROR_WRONG_TARGET_NAME = 1396;
export const ERROR_MUTUAL_AUTH_FAILED = 1397;
export const ERROR_TIME_SKEW = 1398;
export const ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399;
export const ERROR_INVALID_WINDOW_HANDLE = 1400;
export const ERROR_INVALID_MENU_HANDLE = 1401;
export const ERROR_INVALID_CURSOR_HANDLE = 1402;
export const ERROR_INVALID_ACCEL_HANDLE = 1403;
export const ERROR_INVALID_HOOK_HANDLE = 1404;
export const ERROR_INVALID_DWP_HANDLE = 1405;
export const ERROR_TLW_WITH_WSCHILD = 1406;
export const ERROR_CANNOT_FIND_WND_CLASS = 1407;
export const ERROR_WINDOW_OF_OTHER_THREAD = 1408;
export const ERROR_HOTKEY_ALREADY_REGISTERED = 1409;
export const ERROR_CLASS_ALREADY_EXISTS = 1410;
export const ERROR_CLASS_DOES_NOT_EXIST = 1411;
export const ERROR_CLASS_HAS_WINDOWS = 1412;
export const ERROR_INVALID_INDEX = 1413;
export const ERROR_INVALID_ICON_HANDLE = 1414;
export const ERROR_PRIVATE_DIALOG_INDEX = 1415;
export const ERROR_LISTBOX_ID_NOT_FOUND = 1416;
export const ERROR_NO_WILDCARD_CHARACTERS = 1417;
export const ERROR_CLIPBOARD_NOT_OPEN = 1418;
export const ERROR_HOTKEY_NOT_REGISTERED = 1419;
export const ERROR_WINDOW_NOT_DIALOG = 1420;
export const ERROR_CONTROL_ID_NOT_FOUND = 1421;
export const ERROR_INVALID_COMBOBOX_MESSAGE = 1422;
export const ERROR_WINDOW_NOT_COMBOBOX = 1423;
export const ERROR_INVALID_EDIT_HEIGHT = 1424;
export const ERROR_DC_NOT_FOUND = 1425;
export const ERROR_INVALID_HOOK_FILTER = 1426;
export const ERROR_INVALID_FILTER_PROC = 1427;
export const ERROR_HOOK_NEEDS_HMOD = 1428;
export const ERROR_GLOBAL_ONLY_HOOK = 1429;
export const ERROR_JOURNAL_HOOK_SET = 1430;
export const ERROR_HOOK_NOT_INSTALLED = 1431;
export const ERROR_INVALID_LB_MESSAGE = 1432;
export const ERROR_SETCOUNT_ON_BAD_LB = 1433;
export const ERROR_LB_WITHOUT_TABSTOPS = 1434;
export const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435;
export const ERROR_CHILD_WINDOW_MENU = 1436;
export const ERROR_NO_SYSTEM_MENU = 1437;
export const ERROR_INVALID_MSGBOX_STYLE = 1438;
export const ERROR_INVALID_SPI_VALUE = 1439;
export const ERROR_SCREEN_ALREADY_LOCKED = 1440;
export const ERROR_HWNDS_HAVE_DIFF_PARENT = 1441;
export const ERROR_NOT_CHILD_WINDOW = 1442;
export const ERROR_INVALID_GW_COMMAND = 1443;
export const ERROR_INVALID_THREAD_ID = 1444;
export const ERROR_NON_MDICHILD_WINDOW = 1445;
export const ERROR_POPUP_ALREADY_ACTIVE = 1446;
export const ERROR_NO_SCROLLBARS = 1447;
export const ERROR_INVALID_SCROLLBAR_RANGE = 1448;
export const ERROR_INVALID_SHOWWIN_COMMAND = 1449;
export const ERROR_NO_SYSTEM_RESOURCES = 1450;
export const ERROR_NONPAGED_SYSTEM_RESOURCES = 1451;
export const ERROR_PAGED_SYSTEM_RESOURCES = 1452;
export const ERROR_WORKING_SET_QUOTA = 1453;
export const ERROR_PAGEFILE_QUOTA = 1454;
export const ERROR_COMMITMENT_LIMIT = 1455;
export const ERROR_MENU_ITEM_NOT_FOUND = 1456;
export const ERROR_INVALID_KEYBOARD_HANDLE = 1457;
export const ERROR_HOOK_TYPE_NOT_ALLOWED = 1458;
export const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459;
export const ERROR_TIMEOUT = 1460;
export const ERROR_INVALID_MONITOR_HANDLE = 1461;
export const ERROR_INCORRECT_SIZE = 1462;
export const ERROR_SYMLINK_CLASS_DISABLED = 1463;
export const ERROR_SYMLINK_NOT_SUPPORTED = 1464;
export const ERROR_XML_PARSE_ERROR = 1465;
export const ERROR_XMLDSIG_ERROR = 1466;
export const ERROR_RESTART_APPLICATION = 1467;
export const ERROR_WRONG_COMPARTMENT = 1468;
export const ERROR_AUTHIP_FAILURE = 1469;
export const ERROR_NO_NVRAM_RESOURCES = 1470;
export const ERROR_NOT_GUI_PROCESS = 1471;
export const ERROR_EVENTLOG_FILE_CORRUPT = 1500;
export const ERROR_EVENTLOG_CANT_START = 1501;
export const ERROR_LOG_FILE_FULL = 1502;
export const ERROR_EVENTLOG_FILE_CHANGED = 1503;
export const ERROR_CONTAINER_ASSIGNED = 1504;
export const ERROR_JOB_NO_CONTAINER = 1505;
export const ERROR_INVALID_TASK_NAME = 1550;
export const ERROR_INVALID_TASK_INDEX = 1551;
export const ERROR_THREAD_ALREADY_IN_TASK = 1552;
export const ERROR_INSTALL_SERVICE_FAILURE = 1601;
export const ERROR_INSTALL_USEREXIT = 1602;
export const ERROR_INSTALL_FAILURE = 1603;
export const ERROR_INSTALL_SUSPEND = 1604;
export const ERROR_UNKNOWN_PRODUCT = 1605;
export const ERROR_UNKNOWN_FEATURE = 1606;
export const ERROR_UNKNOWN_COMPONENT = 1607;
export const ERROR_UNKNOWN_PROPERTY = 1608;
export const ERROR_INVALID_HANDLE_STATE = 1609;
export const ERROR_BAD_CONFIGURATION = 1610;
export const ERROR_INDEX_ABSENT = 1611;
export const ERROR_INSTALL_SOURCE_ABSENT = 1612;
export const ERROR_INSTALL_PACKAGE_VERSION = 1613;
export const ERROR_PRODUCT_UNINSTALLED = 1614;
export const ERROR_BAD_QUERY_SYNTAX = 1615;
export const ERROR_INVALID_FIELD = 1616;
export const ERROR_DEVICE_REMOVED = 1617;
export const ERROR_INSTALL_ALREADY_RUNNING = 1618;
export const ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619;
export const ERROR_INSTALL_PACKAGE_INVALID = 1620;
export const ERROR_INSTALL_UI_FAILURE = 1621;
export const ERROR_INSTALL_LOG_FAILURE = 1622;
export const ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623;
export const ERROR_INSTALL_TRANSFORM_FAILURE = 1624;
export const ERROR_INSTALL_PACKAGE_REJECTED = 1625;
export const ERROR_FUNCTION_NOT_CALLED = 1626;
export const ERROR_FUNCTION_FAILED = 1627;
export const ERROR_INVALID_TABLE = 1628;
export const ERROR_DATATYPE_MISMATCH = 1629;
export const ERROR_UNSUPPORTED_TYPE = 1630;
export const ERROR_CREATE_FAILED = 1631;
export const ERROR_INSTALL_TEMP_UNWRITABLE = 1632;
export const ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633;
export const ERROR_INSTALL_NOTUSED = 1634;
export const ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635;
export const ERROR_PATCH_PACKAGE_INVALID = 1636;
export const ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637;
export const ERROR_PRODUCT_VERSION = 1638;
export const ERROR_INVALID_COMMAND_LINE = 1639;
export const ERROR_INSTALL_REMOTE_DISALLOWED = 1640;
export const ERROR_SUCCESS_REBOOT_INITIATED = 1641;
export const ERROR_PATCH_TARGET_NOT_FOUND = 1642;
export const ERROR_PATCH_PACKAGE_REJECTED = 1643;
export const ERROR_INSTALL_TRANSFORM_REJECTED = 1644;
export const ERROR_INSTALL_REMOTE_PROHIBITED = 1645;
export const ERROR_PATCH_REMOVAL_UNSUPPORTED = 1646;
export const ERROR_UNKNOWN_PATCH = 1647;
export const ERROR_PATCH_NO_SEQUENCE = 1648;
export const ERROR_PATCH_REMOVAL_DISALLOWED = 1649;
export const ERROR_INVALID_PATCH_XML = 1650;
export const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = 1651;
export const ERROR_INSTALL_SERVICE_SAFEBOOT = 1652;
export const ERROR_FAIL_FAST_EXCEPTION = 1653;
export const ERROR_INSTALL_REJECTED = 1654;
export const ERROR_DYNAMIC_CODE_BLOCKED = 1655;
export const ERROR_NOT_SAME_OBJECT = 1656;
export const ERROR_STRICT_CFG_VIOLATION = 1657;
export const ERROR_SET_CONTEXT_DENIED = 1660;
export const ERROR_CROSS_PARTITION_VIOLATION = 1661;
export const ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT = 1662;
export const ERROR_INVALID_USER_BUFFER = 1784;
export const ERROR_UNRECOGNIZED_MEDIA = 1785;
export const ERROR_NO_TRUST_LSA_SECRET = 1786;
export const ERROR_NO_TRUST_SAM_ACCOUNT = 1787;
export const ERROR_TRUSTED_DOMAIN_FAILURE = 1788;
export const ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789;
export const ERROR_TRUST_FAILURE = 1790;
export const ERROR_NETLOGON_NOT_STARTED = 1792;
export const ERROR_ACCOUNT_EXPIRED = 1793;
export const ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794;
export const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795;
export const ERROR_UNKNOWN_PORT = 1796;
export const ERROR_UNKNOWN_PRINTER_DRIVER = 1797;
export const ERROR_UNKNOWN_PRINTPROCESSOR = 1798;
export const ERROR_INVALID_SEPARATOR_FILE = 1799;
export const ERROR_INVALID_PRIORITY = 1800;
export const ERROR_INVALID_PRINTER_NAME = 1801;
export const ERROR_PRINTER_ALREADY_EXISTS = 1802;
export const ERROR_INVALID_PRINTER_COMMAND = 1803;
export const ERROR_INVALID_DATATYPE = 1804;
export const ERROR_INVALID_ENVIRONMENT = 1805;
export const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807;
export const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808;
export const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809;
export const ERROR_DOMAIN_TRUST_INCONSISTENT = 1810;
export const ERROR_SERVER_HAS_OPEN_HANDLES = 1811;
export const ERROR_RESOURCE_DATA_NOT_FOUND = 1812;
export const ERROR_RESOURCE_TYPE_NOT_FOUND = 1813;
export const ERROR_RESOURCE_NAME_NOT_FOUND = 1814;
export const ERROR_RESOURCE_LANG_NOT_FOUND = 1815;
export const ERROR_NOT_ENOUGH_QUOTA = 1816;
export const ERROR_INVALID_TIME = 1901;
export const ERROR_INVALID_FORM_NAME = 1902;
export const ERROR_INVALID_FORM_SIZE = 1903;
export const ERROR_ALREADY_WAITING = 1904;
export const ERROR_PRINTER_DELETED = 1905;
export const ERROR_INVALID_PRINTER_STATE = 1906;
export const ERROR_PASSWORD_MUST_CHANGE = 1907;
export const ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908;
export const ERROR_ACCOUNT_LOCKED_OUT = 1909;
export const ERROR_NO_SITENAME = 1919;
export const ERROR_CANT_ACCESS_FILE = 1920;
export const ERROR_CANT_RESOLVE_FILENAME = 1921;
export const ERROR_KM_DRIVER_BLOCKED = 1930;
export const ERROR_CONTEXT_EXPIRED = 1931;
export const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932;
export const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933;
export const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934;
export const ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935;
export const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936;
export const ERROR_NTLM_BLOCKED = 1937;
export const ERROR_PASSWORD_CHANGE_REQUIRED = 1938;
export const ERROR_LOST_MODE_LOGON_RESTRICTION = 1939;
export const ERROR_INVALID_PIXEL_FORMAT = 2000;
export const ERROR_BAD_DRIVER = 2001;
export const ERROR_INVALID_WINDOW_STYLE = 2002;
export const ERROR_METAFILE_NOT_SUPPORTED = 2003;
export const ERROR_TRANSFORM_NOT_SUPPORTED = 2004;
export const ERROR_CLIPPING_NOT_SUPPORTED = 2005;
export const ERROR_INVALID_CMM = 2010;
export const ERROR_INVALID_PROFILE = 2011;
export const ERROR_TAG_NOT_FOUND = 2012;
export const ERROR_TAG_NOT_PRESENT = 2013;
export const ERROR_DUPLICATE_TAG = 2014;
export const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015;
export const ERROR_PROFILE_NOT_FOUND = 2016;
export const ERROR_INVALID_COLORSPACE = 2017;
export const ERROR_ICM_NOT_ENABLED = 2018;
export const ERROR_DELETING_ICM_XFORM = 2019;
export const ERROR_INVALID_TRANSFORM = 2020;
export const ERROR_COLORSPACE_MISMATCH = 2021;
export const ERROR_INVALID_COLORINDEX = 2022;
export const ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = 2023;
export const ERROR_CONNECTED_OTHER_PASSWORD = 2108;
export const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109;
export const ERROR_BAD_USERNAME = 2202;
export const ERROR_NOT_CONNECTED = 2250;
export const ERROR_OPEN_FILES = 2401;
export const ERROR_ACTIVE_CONNECTIONS = 2402;
export const ERROR_DEVICE_IN_USE = 2404;
export const ERROR_UNKNOWN_PRINT_MONITOR = 3000;
export const ERROR_PRINTER_DRIVER_IN_USE = 3001;
export const ERROR_SPOOL_FILE_NOT_FOUND = 3002;
export const ERROR_SPL_NO_STARTDOC = 3003;
export const ERROR_SPL_NO_ADDJOB = 3004;
export const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005;
export const ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006;
export const ERROR_INVALID_PRINT_MONITOR = 3007;
export const ERROR_PRINT_MONITOR_IN_USE = 3008;
export const ERROR_PRINTER_HAS_JOBS_QUEUED = 3009;
export const ERROR_SUCCESS_REBOOT_REQUIRED = 3010;
export const ERROR_SUCCESS_RESTART_REQUIRED = 3011;
export const ERROR_PRINTER_NOT_FOUND = 3012;
export const ERROR_PRINTER_DRIVER_WARNED = 3013;
export const ERROR_PRINTER_DRIVER_BLOCKED = 3014;
export const ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = 3015;
export const ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = 3016;
export const ERROR_FAIL_REBOOT_REQUIRED = 3017;
export const ERROR_FAIL_REBOOT_INITIATED = 3018;
export const ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019;
export const ERROR_PRINT_JOB_RESTART_REQUIRED = 3020;
export const ERROR_INVALID_PRINTER_DRIVER_MANIFEST = 3021;
export const ERROR_PRINTER_NOT_SHAREABLE = 3022;
export const ERROR_REQUEST_PAUSED = 3050;
export const ERROR_APPEXEC_CONDITION_NOT_SATISFIED = 3060;
export const ERROR_APPEXEC_HANDLE_INVALIDATED = 3061;
export const ERROR_APPEXEC_INVALID_HOST_GENERATION = 3062;
export const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = 3063;
export const ERROR_APPEXEC_INVALID_HOST_STATE = 3064;
export const ERROR_APPEXEC_NO_DONOR = 3065;
export const ERROR_APPEXEC_HOST_ID_MISMATCH = 3066;
export const ERROR_APPEXEC_UNKNOWN_USER = 3067;
export const ERROR_APPEXEC_APP_COMPAT_BLOCK = 3068;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT = 3069;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION = 3070;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING = 3071;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES = 3072;
export const ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED = 3080;
export const ERROR_VRF_VOLATILE_NOT_STOPPABLE = 3081;
export const ERROR_VRF_VOLATILE_SAFE_MODE = 3082;
export const ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = 3083;
export const ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = 3084;
export const ERROR_VRF_VOLATILE_PROTECTED_DRIVER = 3085;
export const ERROR_VRF_VOLATILE_NMI_REGISTERED = 3086;
export const ERROR_VRF_VOLATILE_SETTINGS_CONFLICT = 3087;
export const ERROR_DIF_IOCALLBACK_NOT_REPLACED = 3190;
export const ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED = 3191;
export const ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED = 3192;
export const ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED = 3193;
export const ERROR_DIF_VOLATILE_INVALID_INFO = 3194;
export const ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = 3195;
export const ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = 3196;
export const ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = 3197;
export const ERROR_DIF_VOLATILE_NOT_ALLOWED = 3198;
export const ERROR_DIF_BINDING_API_NOT_FOUND = 3199;
export const ERROR_IO_REISSUE_AS_CACHED = 3950;
export const ERROR_WINS_INTERNAL = 4000;
export const ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001;
export const ERROR_STATIC_INIT = 4002;
export const ERROR_INC_BACKUP = 4003;
export const ERROR_FULL_BACKUP = 4004;
export const ERROR_REC_NON_EXISTENT = 4005;
export const ERROR_RPL_NOT_ALLOWED = 4006;
export const ERROR_DHCP_ADDRESS_CONFLICT = 4100;
export const ERROR_WMI_GUID_NOT_FOUND = 4200;
export const ERROR_WMI_INSTANCE_NOT_FOUND = 4201;
export const ERROR_WMI_ITEMID_NOT_FOUND = 4202;
export const ERROR_WMI_TRY_AGAIN = 4203;
export const ERROR_WMI_DP_NOT_FOUND = 4204;
export const ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205;
export const ERROR_WMI_ALREADY_ENABLED = 4206;
export const ERROR_WMI_GUID_DISCONNECTED = 4207;
export const ERROR_WMI_SERVER_UNAVAILABLE = 4208;
export const ERROR_WMI_DP_FAILED = 4209;
export const ERROR_WMI_INVALID_MOF = 4210;
export const ERROR_WMI_INVALID_REGINFO = 4211;
export const ERROR_WMI_ALREADY_DISABLED = 4212;
export const ERROR_WMI_READ_ONLY = 4213;
export const ERROR_WMI_SET_FAILURE = 4214;
export const ERROR_NOT_APPCONTAINER = 4250;
export const ERROR_APPCONTAINER_REQUIRED = 4251;
export const ERROR_NOT_SUPPORTED_IN_APPCONTAINER = 4252;
export const ERROR_INVALID_PACKAGE_SID_LENGTH = 4253;
export const ERROR_INVALID_MEDIA = 4300;
export const ERROR_INVALID_LIBRARY = 4301;
export const ERROR_INVALID_MEDIA_POOL = 4302;
export const ERROR_DRIVE_MEDIA_MISMATCH = 4303;
export const ERROR_MEDIA_OFFLINE = 4304;
export const ERROR_LIBRARY_OFFLINE = 4305;
export const ERROR_EMPTY = 4306;
export const ERROR_NOT_EMPTY = 4307;
export const ERROR_MEDIA_UNAVAILABLE = 4308;
export const ERROR_RESOURCE_DISABLED = 4309;
export const ERROR_INVALID_CLEANER = 4310;
export const ERROR_UNABLE_TO_CLEAN = 4311;
export const ERROR_OBJECT_NOT_FOUND = 4312;
export const ERROR_DATABASE_FAILURE = 4313;
export const ERROR_DATABASE_FULL = 4314;
export const ERROR_MEDIA_INCOMPATIBLE = 4315;
export const ERROR_RESOURCE_NOT_PRESENT = 4316;
export const ERROR_INVALID_OPERATION = 4317;
export const ERROR_MEDIA_NOT_AVAILABLE = 4318;
export const ERROR_DEVICE_NOT_AVAILABLE = 4319;
export const ERROR_REQUEST_REFUSED = 4320;
export const ERROR_INVALID_DRIVE_OBJECT = 4321;
export const ERROR_LIBRARY_FULL = 4322;
export const ERROR_MEDIUM_NOT_ACCESSIBLE = 4323;
export const ERROR_UNABLE_TO_LOAD_MEDIUM = 4324;
export const ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325;
export const ERROR_UNABLE_TO_INVENTORY_SLOT = 4326;
export const ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327;
export const ERROR_TRANSPORT_FULL = 4328;
export const ERROR_CONTROLLING_IEPORT = 4329;
export const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330;
export const ERROR_CLEANER_SLOT_SET = 4331;
export const ERROR_CLEANER_SLOT_NOT_SET = 4332;
export const ERROR_CLEANER_CARTRIDGE_SPENT = 4333;
export const ERROR_UNEXPECTED_OMID = 4334;
export const ERROR_CANT_DELETE_LAST_ITEM = 4335;
export const ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336;
export const ERROR_VOLUME_CONTAINS_SYS_FILES = 4337;
export const ERROR_INDIGENOUS_TYPE = 4338;
export const ERROR_NO_SUPPORTING_DRIVES = 4339;
export const ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340;
export const ERROR_IEPORT_FULL = 4341;
export const ERROR_FILE_OFFLINE = 4350;
export const ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351;
export const ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352;
export const ERROR_NOT_A_REPARSE_POINT = 4390;
export const ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391;
export const ERROR_INVALID_REPARSE_DATA = 4392;
export const ERROR_REPARSE_TAG_INVALID = 4393;
export const ERROR_REPARSE_TAG_MISMATCH = 4394;
export const ERROR_REPARSE_POINT_ENCOUNTERED = 4395;
export const ERROR_APP_DATA_NOT_FOUND = 4400;
export const ERROR_APP_DATA_EXPIRED = 4401;
export const ERROR_APP_DATA_CORRUPT = 4402;
export const ERROR_APP_DATA_LIMIT_EXCEEDED = 4403;
export const ERROR_APP_DATA_REBOOT_REQUIRED = 4404;
export const ERROR_SECUREBOOT_ROLLBACK_DETECTED = 4420;
export const ERROR_SECUREBOOT_POLICY_VIOLATION = 4421;
export const ERROR_SECUREBOOT_INVALID_POLICY = 4422;
export const ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = 4423;
export const ERROR_SECUREBOOT_POLICY_NOT_SIGNED = 4424;
export const ERROR_SECUREBOOT_NOT_ENABLED = 4425;
export const ERROR_SECUREBOOT_FILE_REPLACED = 4426;
export const ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = 4427;
export const ERROR_SECUREBOOT_POLICY_UNKNOWN = 4428;
export const ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = 4429;
export const ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = 4430;
export const ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = 4431;
export const ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = 4432;
export const ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = 4433;
export const ERROR_SECUREBOOT_NOT_BASE_POLICY = 4434;
export const ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = 4435;
export const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = 4440;
export const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = 4441;
export const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = 4442;
export const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = 4443;
export const ERROR_ALREADY_HAS_STREAM_ID = 4444;
export const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = 4445;
export const ERROR_WOF_WIM_HEADER_CORRUPT = 4446;
export const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = 4447;
export const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = 4448;
export const ERROR_OBJECT_IS_IMMUTABLE = 4449;
export const ERROR_VOLUME_NOT_SIS_ENABLED = 4500;
export const ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = 4550;
export const ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = 4551;
export const ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = 4552;
export const ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = 4553;
export const ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = 4554;
export const ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = 4555;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS = 4556;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA = 4557;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT = 4558;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE = 4559;
export const ERROR_VSM_NOT_INITIALIZED = 4560;
export const ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = 4561;
export const ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = 4570;
export const ERROR_PLATFORM_MANIFEST_INVALID = 4571;
export const ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = 4572;
export const ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = 4573;
export const ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = 4574;
export const ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = 4575;
export const ERROR_PLATFORM_MANIFEST_NOT_SIGNED = 4576;
export const ERROR_DEPENDENT_RESOURCE_EXISTS = 5001;
export const ERROR_DEPENDENCY_NOT_FOUND = 5002;
export const ERROR_DEPENDENCY_ALREADY_EXISTS = 5003;
export const ERROR_RESOURCE_NOT_ONLINE = 5004;
export const ERROR_HOST_NODE_NOT_AVAILABLE = 5005;
export const ERROR_RESOURCE_NOT_AVAILABLE = 5006;
export const ERROR_RESOURCE_NOT_FOUND = 5007;
export const ERROR_SHUTDOWN_CLUSTER = 5008;
export const ERROR_CANT_EVICT_ACTIVE_NODE = 5009;
export const ERROR_OBJECT_ALREADY_EXISTS = 5010;
export const ERROR_OBJECT_IN_LIST = 5011;
export const ERROR_GROUP_NOT_AVAILABLE = 5012;
export const ERROR_GROUP_NOT_FOUND = 5013;
export const ERROR_GROUP_NOT_ONLINE = 5014;
export const ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015;
export const ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016;
export const ERROR_RESMON_CREATE_FAILED = 5017;
export const ERROR_RESMON_ONLINE_FAILED = 5018;
export const ERROR_RESOURCE_ONLINE = 5019;
export const ERROR_QUORUM_RESOURCE = 5020;
export const ERROR_NOT_QUORUM_CAPABLE = 5021;
export const ERROR_CLUSTER_SHUTTING_DOWN = 5022;
export const ERROR_INVALID_STATE = 5023;
export const ERROR_RESOURCE_PROPERTIES_STORED = 5024;
export const ERROR_NOT_QUORUM_CLASS = 5025;
export const ERROR_CORE_RESOURCE = 5026;
export const ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027;
export const ERROR_QUORUMLOG_OPEN_FAILED = 5028;
export const ERROR_CLUSTERLOG_CORRUPT = 5029;
export const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030;
export const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031;
export const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032;
export const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033;
export const ERROR_QUORUM_OWNER_ALIVE = 5034;
export const ERROR_NETWORK_NOT_AVAILABLE = 5035;
export const ERROR_NODE_NOT_AVAILABLE = 5036;
export const ERROR_ALL_NODES_NOT_AVAILABLE = 5037;
export const ERROR_RESOURCE_FAILED = 5038;
export const ERROR_CLUSTER_INVALID_NODE = 5039;
export const ERROR_CLUSTER_NODE_EXISTS = 5040;
export const ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041;
export const ERROR_CLUSTER_NODE_NOT_FOUND = 5042;
export const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043;
export const ERROR_CLUSTER_NETWORK_EXISTS = 5044;
export const ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045;
export const ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046;
export const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047;
export const ERROR_CLUSTER_INVALID_REQUEST = 5048;
export const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049;
export const ERROR_CLUSTER_NODE_DOWN = 5050;
export const ERROR_CLUSTER_NODE_UNREACHABLE = 5051;
export const ERROR_CLUSTER_NODE_NOT_MEMBER = 5052;
export const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053;
export const ERROR_CLUSTER_INVALID_NETWORK = 5054;
export const ERROR_CLUSTER_NODE_UP = 5056;
export const ERROR_CLUSTER_IPADDR_IN_USE = 5057;
export const ERROR_CLUSTER_NODE_NOT_PAUSED = 5058;
export const ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059;
export const ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060;
export const ERROR_CLUSTER_NODE_ALREADY_UP = 5061;
export const ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062;
export const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063;
export const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064;
export const ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065;
export const ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066;
export const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067;
export const ERROR_INVALID_OPERATION_ON_QUORUM = 5068;
export const ERROR_DEPENDENCY_NOT_ALLOWED = 5069;
export const ERROR_CLUSTER_NODE_PAUSED = 5070;
export const ERROR_NODE_CANT_HOST_RESOURCE = 5071;
export const ERROR_CLUSTER_NODE_NOT_READY = 5072;
export const ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073;
export const ERROR_CLUSTER_JOIN_ABORTED = 5074;
export const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075;
export const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076;
export const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077;
export const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078;
export const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079;
export const ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080;
export const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081;
export const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082;
export const ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083;
export const ERROR_RESMON_INVALID_STATE = 5084;
export const ERROR_CLUSTER_GUM_NOT_LOCKER = 5085;
export const ERROR_QUORUM_DISK_NOT_FOUND = 5086;
export const ERROR_DATABASE_BACKUP_CORRUPT = 5087;
export const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088;
export const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089;
export const ERROR_NO_ADMIN_ACCESS_POINT = 5090;
export const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890;
export const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891;
export const ERROR_CLUSTER_MEMBERSHIP_HALT = 5892;
export const ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893;
export const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894;
export const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895;
export const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896;
export const ERROR_CLUSTER_PARAMETER_MISMATCH = 5897;
export const ERROR_NODE_CANNOT_BE_CLUSTERED = 5898;
export const ERROR_CLUSTER_WRONG_OS_VERSION = 5899;
export const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900;
export const ERROR_CLUSCFG_ALREADY_COMMITTED = 5901;
export const ERROR_CLUSCFG_ROLLBACK_FAILED = 5902;
export const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903;
export const ERROR_CLUSTER_OLD_VERSION = 5904;
export const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905;
export const ERROR_CLUSTER_NO_NET_ADAPTERS = 5906;
export const ERROR_CLUSTER_POISONED = 5907;
export const ERROR_CLUSTER_GROUP_MOVING = 5908;
export const ERROR_CLUSTER_RESOURCE_TYPE_BUSY = 5909;
export const ERROR_RESOURCE_CALL_TIMED_OUT = 5910;
export const ERROR_INVALID_CLUSTER_IPV6_ADDRESS = 5911;
export const ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = 5912;
export const ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = 5913;
export const ERROR_CLUSTER_PARTIAL_SEND = 5914;
export const ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = 5915;
export const ERROR_CLUSTER_INVALID_STRING_TERMINATION = 5916;
export const ERROR_CLUSTER_INVALID_STRING_FORMAT = 5917;
export const ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = 5918;
export const ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = 5919;
export const ERROR_CLUSTER_NULL_DATA = 5920;
export const ERROR_CLUSTER_PARTIAL_READ = 5921;
export const ERROR_CLUSTER_PARTIAL_WRITE = 5922;
export const ERROR_CLUSTER_CANT_DESERIALIZE_DATA = 5923;
export const ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = 5924;
export const ERROR_CLUSTER_NO_QUORUM = 5925;
export const ERROR_CLUSTER_INVALID_IPV6_NETWORK = 5926;
export const ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = 5927;
export const ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = 5928;
export const ERROR_DEPENDENCY_TREE_TOO_COMPLEX = 5929;
export const ERROR_EXCEPTION_IN_RESOURCE_CALL = 5930;
export const ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = 5931;
export const ERROR_CLUSTER_NOT_INSTALLED = 5932;
export const ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = 5933;
export const ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = 5934;
export const ERROR_CLUSTER_TOO_MANY_NODES = 5935;
export const ERROR_CLUSTER_OBJECT_ALREADY_USED = 5936;
export const ERROR_NONCORE_GROUPS_FOUND = 5937;
export const ERROR_FILE_SHARE_RESOURCE_CONFLICT = 5938;
export const ERROR_CLUSTER_EVICT_INVALID_REQUEST = 5939;
export const ERROR_CLUSTER_SINGLETON_RESOURCE = 5940;
export const ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = 5941;
export const ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = 5942;
export const ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = 5943;
export const ERROR_CLUSTER_GROUP_BUSY = 5944;
export const ERROR_CLUSTER_NOT_SHARED_VOLUME = 5945;
export const ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = 5946;
export const ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = 5947;
export const ERROR_CLUSTER_USE_SHARED_VOLUMES_API = 5948;
export const ERROR_CLUSTER_BACKUP_IN_PROGRESS = 5949;
export const ERROR_NON_CSV_PATH = 5950;
export const ERROR_CSV_VOLUME_NOT_LOCAL = 5951;
export const ERROR_CLUSTER_WATCHDOG_TERMINATING = 5952;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = 5953;
export const ERROR_CLUSTER_INVALID_NODE_WEIGHT = 5954;
export const ERROR_CLUSTER_RESOURCE_VETOED_CALL = 5955;
export const ERROR_RESMON_SYSTEM_RESOURCES_LACKING = 5956;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION = 5957;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE = 5958;
export const ERROR_CLUSTER_GROUP_QUEUED = 5959;
export const ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = 5960;
export const ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = 5961;
export const ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = 5962;
export const ERROR_CLUSTER_DISK_NOT_CONNECTED = 5963;
export const ERROR_DISK_NOT_CSV_CAPABLE = 5964;
export const ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = 5965;
export const ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = 5966;
export const ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = 5967;
export const ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = 5968;
export const ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES = 5969;
export const ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = 5970;
export const ERROR_CLUSTER_AFFINITY_CONFLICT = 5971;
export const ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = 5972;
export const ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = 5973;
export const ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = 5974;
export const ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = 5975;
export const ERROR_CLUSTER_UPGRADE_IN_PROGRESS = 5976;
export const ERROR_CLUSTER_UPGRADE_INCOMPLETE = 5977;
export const ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = 5978;
export const ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = 5979;
export const ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = 5980;
export const ERROR_CLUSTER_RESOURCE_NOT_MONITORED = 5981;
export const ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = 5982;
export const ERROR_CLUSTER_RESOURCE_IS_REPLICATED = 5983;
export const ERROR_CLUSTER_NODE_ISOLATED = 5984;
export const ERROR_CLUSTER_NODE_QUARANTINED = 5985;
export const ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = 5986;
export const ERROR_CLUSTER_SPACE_DEGRADED = 5987;
export const ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = 5988;
export const ERROR_CLUSTER_CSV_INVALID_HANDLE = 5989;
export const ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = 5990;
export const ERROR_GROUPSET_NOT_AVAILABLE = 5991;
export const ERROR_GROUPSET_NOT_FOUND = 5992;
export const ERROR_GROUPSET_CANT_PROVIDE = 5993;
export const ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = 5994;
export const ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = 5995;
export const ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = 5996;
export const ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = 5997;
export const ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = 5998;
export const ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = 5999;
export const ERROR_ENCRYPTION_FAILED = 6000;
export const ERROR_DECRYPTION_FAILED = 6001;
export const ERROR_FILE_ENCRYPTED = 6002;
export const ERROR_NO_RECOVERY_POLICY = 6003;
export const ERROR_NO_EFS = 6004;
export const ERROR_WRONG_EFS = 6005;
export const ERROR_NO_USER_KEYS = 6006;
export const ERROR_FILE_NOT_ENCRYPTED = 6007;
export const ERROR_NOT_EXPORT_FORMAT = 6008;
export const ERROR_FILE_READ_ONLY = 6009;
export const ERROR_DIR_EFS_DISALLOWED = 6010;
export const ERROR_EFS_SERVER_NOT_TRUSTED = 6011;
export const ERROR_BAD_RECOVERY_POLICY = 6012;
export const ERROR_EFS_ALG_BLOB_TOO_BIG = 6013;
export const ERROR_VOLUME_NOT_SUPPORT_EFS = 6014;
export const ERROR_EFS_DISABLED = 6015;
export const ERROR_EFS_VERSION_NOT_SUPPORT = 6016;
export const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 6017;
export const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = 6018;
export const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 6019;
export const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 6020;
export const ERROR_CS_ENCRYPTION_FILE_NOT_CSE = 6021;
export const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = 6022;
export const ERROR_WIP_ENCRYPTION_FAILED = 6023;
export const ERROR_NO_BROWSER_SERVERS_FOUND = 6118;
export const ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM = 6250;
export const ERROR_LOG_SECTOR_INVALID = 6600;
export const ERROR_LOG_SECTOR_PARITY_INVALID = 6601;
export const ERROR_LOG_SECTOR_REMAPPED = 6602;
export const ERROR_LOG_BLOCK_INCOMPLETE = 6603;
export const ERROR_LOG_INVALID_RANGE = 6604;
export const ERROR_LOG_BLOCKS_EXHAUSTED = 6605;
export const ERROR_LOG_READ_CONTEXT_INVALID = 6606;
export const ERROR_LOG_RESTART_INVALID = 6607;
export const ERROR_LOG_BLOCK_VERSION = 6608;
export const ERROR_LOG_BLOCK_INVALID = 6609;
export const ERROR_LOG_READ_MODE_INVALID = 6610;
export const ERROR_LOG_NO_RESTART = 6611;
export const ERROR_LOG_METADATA_CORRUPT = 6612;
export const ERROR_LOG_METADATA_INVALID = 6613;
export const ERROR_LOG_METADATA_INCONSISTENT = 6614;
export const ERROR_LOG_RESERVATION_INVALID = 6615;
export const ERROR_LOG_CANT_DELETE = 6616;
export const ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = 6617;
export const ERROR_LOG_START_OF_LOG = 6618;
export const ERROR_LOG_POLICY_ALREADY_INSTALLED = 6619;
export const ERROR_LOG_POLICY_NOT_INSTALLED = 6620;
export const ERROR_LOG_POLICY_INVALID = 6621;
export const ERROR_LOG_POLICY_CONFLICT = 6622;
export const ERROR_LOG_PINNED_ARCHIVE_TAIL = 6623;
export const ERROR_LOG_RECORD_NONEXISTENT = 6624;
export const ERROR_LOG_RECORDS_RESERVED_INVALID = 6625;
export const ERROR_LOG_SPACE_RESERVED_INVALID = 6626;
export const ERROR_LOG_TAIL_INVALID = 6627;
export const ERROR_LOG_FULL = 6628;
export const ERROR_COULD_NOT_RESIZE_LOG = 6629;
export const ERROR_LOG_MULTIPLEXED = 6630;
export const ERROR_LOG_DEDICATED = 6631;
export const ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = 6632;
export const ERROR_LOG_ARCHIVE_IN_PROGRESS = 6633;
export const ERROR_LOG_EPHEMERAL = 6634;
export const ERROR_LOG_NOT_ENOUGH_CONTAINERS = 6635;
export const ERROR_LOG_CLIENT_ALREADY_REGISTERED = 6636;
export const ERROR_LOG_CLIENT_NOT_REGISTERED = 6637;
export const ERROR_LOG_FULL_HANDLER_IN_PROGRESS = 6638;
export const ERROR_LOG_CONTAINER_READ_FAILED = 6639;
export const ERROR_LOG_CONTAINER_WRITE_FAILED = 6640;
export const ERROR_LOG_CONTAINER_OPEN_FAILED = 6641;
export const ERROR_LOG_CONTAINER_STATE_INVALID = 6642;
export const ERROR_LOG_STATE_INVALID = 6643;
export const ERROR_LOG_PINNED = 6644;
export const ERROR_LOG_METADATA_FLUSH_FAILED = 6645;
export const ERROR_LOG_INCONSISTENT_SECURITY = 6646;
export const ERROR_LOG_APPENDED_FLUSH_FAILED = 6647;
export const ERROR_LOG_PINNED_RESERVATION = 6648;
export const ERROR_INVALID_TRANSACTION = 6700;
export const ERROR_TRANSACTION_NOT_ACTIVE = 6701;
export const ERROR_TRANSACTION_REQUEST_NOT_VALID = 6702;
export const ERROR_TRANSACTION_NOT_REQUESTED = 6703;
export const ERROR_TRANSACTION_ALREADY_ABORTED = 6704;
export const ERROR_TRANSACTION_ALREADY_COMMITTED = 6705;
export const ERROR_TM_INITIALIZATION_FAILED = 6706;
export const ERROR_RESOURCEMANAGER_READ_ONLY = 6707;
export const ERROR_TRANSACTION_NOT_JOINED = 6708;
export const ERROR_TRANSACTION_SUPERIOR_EXISTS = 6709;
export const ERROR_CRM_PROTOCOL_ALREADY_EXISTS = 6710;
export const ERROR_TRANSACTION_PROPAGATION_FAILED = 6711;
export const ERROR_CRM_PROTOCOL_NOT_FOUND = 6712;
export const ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = 6713;
export const ERROR_CURRENT_TRANSACTION_NOT_VALID = 6714;
export const ERROR_TRANSACTION_NOT_FOUND = 6715;
export const ERROR_RESOURCEMANAGER_NOT_FOUND = 6716;
export const ERROR_ENLISTMENT_NOT_FOUND = 6717;
export const ERROR_TRANSACTIONMANAGER_NOT_FOUND = 6718;
export const ERROR_TRANSACTIONMANAGER_NOT_ONLINE = 6719;
export const ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 6720;
export const ERROR_TRANSACTION_NOT_ROOT = 6721;
export const ERROR_TRANSACTION_OBJECT_EXPIRED = 6722;
export const ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = 6723;
export const ERROR_TRANSACTION_RECORD_TOO_LONG = 6724;
export const ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = 6725;
export const ERROR_TRANSACTION_INTEGRITY_VIOLATED = 6726;
export const ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = 6727;
export const ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = 6728;
export const ERROR_TRANSACTION_MUST_WRITETHROUGH = 6729;
export const ERROR_TRANSACTION_NO_SUPERIOR = 6730;
export const ERROR_HEURISTIC_DAMAGE_POSSIBLE = 6731;
export const ERROR_TRANSACTIONAL_CONFLICT = 6800;
export const ERROR_RM_NOT_ACTIVE = 6801;
export const ERROR_RM_METADATA_CORRUPT = 6802;
export const ERROR_DIRECTORY_NOT_RM = 6803;
export const ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = 6805;
export const ERROR_LOG_RESIZE_INVALID_SIZE = 6806;
export const ERROR_OBJECT_NO_LONGER_EXISTS = 6807;
export const ERROR_STREAM_MINIVERSION_NOT_FOUND = 6808;
export const ERROR_STREAM_MINIVERSION_NOT_VALID = 6809;
export const ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 6810;
export const ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 6811;
export const ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = 6812;
export const ERROR_REMOTE_FILE_VERSION_MISMATCH = 6814;
export const ERROR_HANDLE_NO_LONGER_VALID = 6815;
export const ERROR_NO_TXF_METADATA = 6816;
export const ERROR_LOG_CORRUPTION_DETECTED = 6817;
export const ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = 6818;
export const ERROR_RM_DISCONNECTED = 6819;
export const ERROR_ENLISTMENT_NOT_SUPERIOR = 6820;
export const ERROR_RECOVERY_NOT_NEEDED = 6821;
export const ERROR_RM_ALREADY_STARTED = 6822;
export const ERROR_FILE_IDENTITY_NOT_PERSISTENT = 6823;
export const ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 6824;
export const ERROR_CANT_CROSS_RM_BOUNDARY = 6825;
export const ERROR_TXF_DIR_NOT_EMPTY = 6826;
export const ERROR_INDOUBT_TRANSACTIONS_EXIST = 6827;
export const ERROR_TM_VOLATILE = 6828;
export const ERROR_ROLLBACK_TIMER_EXPIRED = 6829;
export const ERROR_TXF_ATTRIBUTE_CORRUPT = 6830;
export const ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = 6831;
export const ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = 6832;
export const ERROR_LOG_GROWTH_FAILED = 6833;
export const ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 6834;
export const ERROR_TXF_METADATA_ALREADY_PRESENT = 6835;
export const ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 6836;
export const ERROR_TRANSACTION_REQUIRED_PROMOTION = 6837;
export const ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = 6838;
export const ERROR_TRANSACTIONS_NOT_FROZEN = 6839;
export const ERROR_TRANSACTION_FREEZE_IN_PROGRESS = 6840;
export const ERROR_NOT_SNAPSHOT_VOLUME = 6841;
export const ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = 6842;
export const ERROR_DATA_LOST_REPAIR = 6843;
export const ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = 6844;
export const ERROR_TM_IDENTITY_MISMATCH = 6845;
export const ERROR_FLOATED_SECTION = 6846;
export const ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = 6847;
export const ERROR_CANNOT_ABORT_TRANSACTIONS = 6848;
export const ERROR_BAD_CLUSTERS = 6849;
export const ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 6850;
export const ERROR_VOLUME_DIRTY = 6851;
export const ERROR_NO_LINK_TRACKING_IN_TRANSACTION = 6852;
export const ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 6853;
export const ERROR_EXPIRED_HANDLE = 6854;
export const ERROR_TRANSACTION_NOT_ENLISTED = 6855;
export const ERROR_CTX_WINSTATION_NAME_INVALID = 7001;
export const ERROR_CTX_INVALID_PD = 7002;
export const ERROR_CTX_PD_NOT_FOUND = 7003;
export const ERROR_CTX_WD_NOT_FOUND = 7004;
export const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005;
export const ERROR_CTX_SERVICE_NAME_COLLISION = 7006;
export const ERROR_CTX_CLOSE_PENDING = 7007;
export const ERROR_CTX_NO_OUTBUF = 7008;
export const ERROR_CTX_MODEM_INF_NOT_FOUND = 7009;
export const ERROR_CTX_INVALID_MODEMNAME = 7010;
export const ERROR_CTX_MODEM_RESPONSE_ERROR = 7011;
export const ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012;
export const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013;
export const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014;
export const ERROR_CTX_MODEM_RESPONSE_BUSY = 7015;
export const ERROR_CTX_MODEM_RESPONSE_VOICE = 7016;
export const ERROR_CTX_TD_ERROR = 7017;
export const ERROR_CTX_WINSTATION_NOT_FOUND = 7022;
export const ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023;
export const ERROR_CTX_WINSTATION_BUSY = 7024;
export const ERROR_CTX_BAD_VIDEO_MODE = 7025;
export const ERROR_CTX_GRAPHICS_INVALID = 7035;
export const ERROR_CTX_LOGON_DISABLED = 7037;
export const ERROR_CTX_NOT_CONSOLE = 7038;
export const ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040;
export const ERROR_CTX_CONSOLE_DISCONNECT = 7041;
export const ERROR_CTX_CONSOLE_CONNECT = 7042;
export const ERROR_CTX_SHADOW_DENIED = 7044;
export const ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045;
export const ERROR_CTX_INVALID_WD = 7049;
export const ERROR_CTX_SHADOW_INVALID = 7050;
export const ERROR_CTX_SHADOW_DISABLED = 7051;
export const ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052;
export const ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053;
export const ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054;
export const ERROR_CTX_LICENSE_CLIENT_INVALID = 7055;
export const ERROR_CTX_LICENSE_EXPIRED = 7056;
export const ERROR_CTX_SHADOW_NOT_RUNNING = 7057;
export const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058;
export const ERROR_ACTIVATION_COUNT_EXCEEDED = 7059;
export const ERROR_CTX_WINSTATIONS_DISABLED = 7060;
export const ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = 7061;
export const ERROR_CTX_SESSION_IN_USE = 7062;
export const ERROR_CTX_NO_FORCE_LOGOFF = 7063;
export const ERROR_CTX_ACCOUNT_RESTRICTION = 7064;
export const ERROR_RDP_PROTOCOL_ERROR = 7065;
export const ERROR_CTX_CDM_CONNECT = 7066;
export const ERROR_CTX_CDM_DISCONNECT = 7067;
export const ERROR_CTX_SECURITY_LAYER_ERROR = 7068;
export const ERROR_TS_INCOMPATIBLE_SESSIONS = 7069;
export const ERROR_TS_VIDEO_SUBSYSTEM_ERROR = 7070;
export const ERROR_DS_NOT_INSTALLED = 8200;
export const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201;
export const ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202;
export const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203;
export const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204;
export const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205;
export const ERROR_DS_BUSY = 8206;
export const ERROR_DS_UNAVAILABLE = 8207;
export const ERROR_DS_NO_RIDS_ALLOCATED = 8208;
export const ERROR_DS_NO_MORE_RIDS = 8209;
export const ERROR_DS_INCORRECT_ROLE_OWNER = 8210;
export const ERROR_DS_RIDMGR_INIT_ERROR = 8211;
export const ERROR_DS_OBJ_CLASS_VIOLATION = 8212;
export const ERROR_DS_CANT_ON_NON_LEAF = 8213;
export const ERROR_DS_CANT_ON_RDN = 8214;
export const ERROR_DS_CANT_MOD_OBJ_CLASS = 8215;
export const ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216;
export const ERROR_DS_GC_NOT_AVAILABLE = 8217;
export const ERROR_SHARED_POLICY = 8218;
export const ERROR_POLICY_OBJECT_NOT_FOUND = 8219;
export const ERROR_POLICY_ONLY_IN_DS = 8220;
export const ERROR_PROMOTION_ACTIVE = 8221;
export const ERROR_NO_PROMOTION_ACTIVE = 8222;
export const ERROR_DS_OPERATIONS_ERROR = 8224;
export const ERROR_DS_PROTOCOL_ERROR = 8225;
export const ERROR_DS_TIMELIMIT_EXCEEDED = 8226;
export const ERROR_DS_SIZELIMIT_EXCEEDED = 8227;
export const ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228;
export const ERROR_DS_COMPARE_FALSE = 8229;
export const ERROR_DS_COMPARE_TRUE = 8230;
export const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231;
export const ERROR_DS_STRONG_AUTH_REQUIRED = 8232;
export const ERROR_DS_INAPPROPRIATE_AUTH = 8233;
export const ERROR_DS_AUTH_UNKNOWN = 8234;
export const ERROR_DS_REFERRAL = 8235;
export const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236;
export const ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237;
export const ERROR_DS_INAPPROPRIATE_MATCHING = 8238;
export const ERROR_DS_CONSTRAINT_VIOLATION = 8239;
export const ERROR_DS_NO_SUCH_OBJECT = 8240;
export const ERROR_DS_ALIAS_PROBLEM = 8241;
export const ERROR_DS_INVALID_DN_SYNTAX = 8242;
export const ERROR_DS_IS_LEAF = 8243;
export const ERROR_DS_ALIAS_DEREF_PROBLEM = 8244;
export const ERROR_DS_UNWILLING_TO_PERFORM = 8245;
export const ERROR_DS_LOOP_DETECT = 8246;
export const ERROR_DS_NAMING_VIOLATION = 8247;
export const ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248;
export const ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249;
export const ERROR_DS_SERVER_DOWN = 8250;
export const ERROR_DS_LOCAL_ERROR = 8251;
export const ERROR_DS_ENCODING_ERROR = 8252;
export const ERROR_DS_DECODING_ERROR = 8253;
export const ERROR_DS_FILTER_UNKNOWN = 8254;
export const ERROR_DS_PARAM_ERROR = 8255;
export const ERROR_DS_NOT_SUPPORTED = 8256;
export const ERROR_DS_NO_RESULTS_RETURNED = 8257;
export const ERROR_DS_CONTROL_NOT_FOUND = 8258;
export const ERROR_DS_CLIENT_LOOP = 8259;
export const ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260;
export const ERROR_DS_SORT_CONTROL_MISSING = 8261;
export const ERROR_DS_OFFSET_RANGE_ERROR = 8262;
export const ERROR_DS_RIDMGR_DISABLED = 8263;
export const ERROR_DS_ROOT_MUST_BE_NC = 8301;
export const ERROR_DS_ADD_REPLICA_INHIBITED = 8302;
export const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303;
export const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304;
export const ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305;
export const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306;
export const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307;
export const ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308;
export const ERROR_DS_USER_BUFFER_TO_SMALL = 8309;
export const ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310;
export const ERROR_DS_ILLEGAL_MOD_OPERATION = 8311;
export const ERROR_DS_OBJ_TOO_LARGE = 8312;
export const ERROR_DS_BAD_INSTANCE_TYPE = 8313;
export const ERROR_DS_MASTERDSA_REQUIRED = 8314;
export const ERROR_DS_OBJECT_CLASS_REQUIRED = 8315;
export const ERROR_DS_MISSING_REQUIRED_ATT = 8316;
export const ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317;
export const ERROR_DS_ATT_ALREADY_EXISTS = 8318;
export const ERROR_DS_CANT_ADD_ATT_VALUES = 8320;
export const ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321;
export const ERROR_DS_RANGE_CONSTRAINT = 8322;
export const ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323;
export const ERROR_DS_CANT_REM_MISSING_ATT = 8324;
export const ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325;
export const ERROR_DS_ROOT_CANT_BE_SUBREF = 8326;
export const ERROR_DS_NO_CHAINING = 8327;
export const ERROR_DS_NO_CHAINED_EVAL = 8328;
export const ERROR_DS_NO_PARENT_OBJECT = 8329;
export const ERROR_DS_PARENT_IS_AN_ALIAS = 8330;
export const ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331;
export const ERROR_DS_CHILDREN_EXIST = 8332;
export const ERROR_DS_OBJ_NOT_FOUND = 8333;
export const ERROR_DS_ALIASED_OBJ_MISSING = 8334;
export const ERROR_DS_BAD_NAME_SYNTAX = 8335;
export const ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336;
export const ERROR_DS_CANT_DEREF_ALIAS = 8337;
export const ERROR_DS_OUT_OF_SCOPE = 8338;
export const ERROR_DS_OBJECT_BEING_REMOVED = 8339;
export const ERROR_DS_CANT_DELETE_DSA_OBJ = 8340;
export const ERROR_DS_GENERIC_ERROR = 8341;
export const ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342;
export const ERROR_DS_CLASS_NOT_DSA = 8343;
export const ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344;
export const ERROR_DS_ILLEGAL_SUPERIOR = 8345;
export const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346;
export const ERROR_DS_NAME_TOO_MANY_PARTS = 8347;
export const ERROR_DS_NAME_TOO_LONG = 8348;
export const ERROR_DS_NAME_VALUE_TOO_LONG = 8349;
export const ERROR_DS_NAME_UNPARSEABLE = 8350;
export const ERROR_DS_NAME_TYPE_UNKNOWN = 8351;
export const ERROR_DS_NOT_AN_OBJECT = 8352;
export const ERROR_DS_SEC_DESC_TOO_SHORT = 8353;
export const ERROR_DS_SEC_DESC_INVALID = 8354;
export const ERROR_DS_NO_DELETED_NAME = 8355;
export const ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356;
export const ERROR_DS_NCNAME_MUST_BE_NC = 8357;
export const ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358;
export const ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359;
export const ERROR_DS_INVALID_DMD = 8360;
export const ERROR_DS_OBJ_GUID_EXISTS = 8361;
export const ERROR_DS_NOT_ON_BACKLINK = 8362;
export const ERROR_DS_NO_CROSSREF_FOR_NC = 8363;
export const ERROR_DS_SHUTTING_DOWN = 8364;
export const ERROR_DS_UNKNOWN_OPERATION = 8365;
export const ERROR_DS_INVALID_ROLE_OWNER = 8366;
export const ERROR_DS_COULDNT_CONTACT_FSMO = 8367;
export const ERROR_DS_CROSS_NC_DN_RENAME = 8368;
export const ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369;
export const ERROR_DS_REPLICATOR_ONLY = 8370;
export const ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371;
export const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372;
export const ERROR_DS_NAME_REFERENCE_INVALID = 8373;
export const ERROR_DS_CROSS_REF_EXISTS = 8374;
export const ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375;
export const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376;
export const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377;
export const ERROR_DS_DUP_RDN = 8378;
export const ERROR_DS_DUP_OID = 8379;
export const ERROR_DS_DUP_MAPI_ID = 8380;
export const ERROR_DS_DUP_SCHEMA_ID_GUID = 8381;
export const ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382;
export const ERROR_DS_SEMANTIC_ATT_TEST = 8383;
export const ERROR_DS_SYNTAX_MISMATCH = 8384;
export const ERROR_DS_EXISTS_IN_MUST_HAVE = 8385;
export const ERROR_DS_EXISTS_IN_MAY_HAVE = 8386;
export const ERROR_DS_NONEXISTENT_MAY_HAVE = 8387;
export const ERROR_DS_NONEXISTENT_MUST_HAVE = 8388;
export const ERROR_DS_AUX_CLS_TEST_FAIL = 8389;
export const ERROR_DS_NONEXISTENT_POSS_SUP = 8390;
export const ERROR_DS_SUB_CLS_TEST_FAIL = 8391;
export const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392;
export const ERROR_DS_EXISTS_IN_AUX_CLS = 8393;
export const ERROR_DS_EXISTS_IN_SUB_CLS = 8394;
export const ERROR_DS_EXISTS_IN_POSS_SUP = 8395;
export const ERROR_DS_RECALCSCHEMA_FAILED = 8396;
export const ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397;
export const ERROR_DS_CANT_DELETE = 8398;
export const ERROR_DS_ATT_SCHEMA_REQ_ID = 8399;
export const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400;
export const ERROR_DS_CANT_CACHE_ATT = 8401;
export const ERROR_DS_CANT_CACHE_CLASS = 8402;
export const ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403;
export const ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404;
export const ERROR_DS_CANT_RETRIEVE_DN = 8405;
export const ERROR_DS_MISSING_SUPREF = 8406;
export const ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407;
export const ERROR_DS_CODE_INCONSISTENCY = 8408;
export const ERROR_DS_DATABASE_ERROR = 8409;
export const ERROR_DS_GOVERNSID_MISSING = 8410;
export const ERROR_DS_MISSING_EXPECTED_ATT = 8411;
export const ERROR_DS_NCNAME_MISSING_CR_REF = 8412;
export const ERROR_DS_SECURITY_CHECKING_ERROR = 8413;
export const ERROR_DS_SCHEMA_NOT_LOADED = 8414;
export const ERROR_DS_SCHEMA_ALLOC_FAILED = 8415;
export const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416;
export const ERROR_DS_GCVERIFY_ERROR = 8417;
export const ERROR_DS_DRA_SCHEMA_MISMATCH = 8418;
export const ERROR_DS_CANT_FIND_DSA_OBJ = 8419;
export const ERROR_DS_CANT_FIND_EXPECTED_NC = 8420;
export const ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421;
export const ERROR_DS_CANT_RETRIEVE_CHILD = 8422;
export const ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423;
export const ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424;
export const ERROR_DS_BAD_HIERARCHY_FILE = 8425;
export const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426;
export const ERROR_DS_CONFIG_PARAM_MISSING = 8427;
export const ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428;
export const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429;
export const ERROR_DS_INTERNAL_FAILURE = 8430;
export const ERROR_DS_UNKNOWN_ERROR = 8431;
export const ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432;
export const ERROR_DS_REFUSING_FSMO_ROLES = 8433;
export const ERROR_DS_MISSING_FSMO_SETTINGS = 8434;
export const ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435;
export const ERROR_DS_DRA_GENERIC = 8436;
export const ERROR_DS_DRA_INVALID_PARAMETER = 8437;
export const ERROR_DS_DRA_BUSY = 8438;
export const ERROR_DS_DRA_BAD_DN = 8439;
export const ERROR_DS_DRA_BAD_NC = 8440;
export const ERROR_DS_DRA_DN_EXISTS = 8441;
export const ERROR_DS_DRA_INTERNAL_ERROR = 8442;
export const ERROR_DS_DRA_INCONSISTENT_DIT = 8443;
export const ERROR_DS_DRA_CONNECTION_FAILED = 8444;
export const ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445;
export const ERROR_DS_DRA_OUT_OF_MEM = 8446;
export const ERROR_DS_DRA_MAIL_PROBLEM = 8447;
export const ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448;
export const ERROR_DS_DRA_REF_NOT_FOUND = 8449;
export const ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450;
export const ERROR_DS_DRA_DB_ERROR = 8451;
export const ERROR_DS_DRA_NO_REPLICA = 8452;
export const ERROR_DS_DRA_ACCESS_DENIED = 8453;
export const ERROR_DS_DRA_NOT_SUPPORTED = 8454;
export const ERROR_DS_DRA_RPC_CANCELLED = 8455;
export const ERROR_DS_DRA_SOURCE_DISABLED = 8456;
export const ERROR_DS_DRA_SINK_DISABLED = 8457;
export const ERROR_DS_DRA_NAME_COLLISION = 8458;
export const ERROR_DS_DRA_SOURCE_REINSTALLED = 8459;
export const ERROR_DS_DRA_MISSING_PARENT = 8460;
export const ERROR_DS_DRA_PREEMPTED = 8461;
export const ERROR_DS_DRA_ABANDON_SYNC = 8462;
export const ERROR_DS_DRA_SHUTDOWN = 8463;
export const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464;
export const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465;
export const ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466;
export const ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467;
export const ERROR_DS_DUP_LINK_ID = 8468;
export const ERROR_DS_NAME_ERROR_RESOLVING = 8469;
export const ERROR_DS_NAME_ERROR_NOT_FOUND = 8470;
export const ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471;
export const ERROR_DS_NAME_ERROR_NO_MAPPING = 8472;
export const ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473;
export const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474;
export const ERROR_DS_CONSTRUCTED_ATT_MOD = 8475;
export const ERROR_DS_WRONG_OM_OBJ_CLASS = 8476;
export const ERROR_DS_DRA_REPL_PENDING = 8477;
export const ERROR_DS_DS_REQUIRED = 8478;
export const ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479;
export const ERROR_DS_NON_BASE_SEARCH = 8480;
export const ERROR_DS_CANT_RETRIEVE_ATTS = 8481;
export const ERROR_DS_BACKLINK_WITHOUT_LINK = 8482;
export const ERROR_DS_EPOCH_MISMATCH = 8483;
export const ERROR_DS_SRC_NAME_MISMATCH = 8484;
export const ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485;
export const ERROR_DS_DST_NC_MISMATCH = 8486;
export const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487;
export const ERROR_DS_SRC_GUID_MISMATCH = 8488;
export const ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489;
export const ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490;
export const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491;
export const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492;
export const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493;
export const ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494;
export const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495;
export const ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496;
export const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497;
export const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498;
export const ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499;
export const ERROR_DS_INVALID_SEARCH_FLAG = 8500;
export const ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501;
export const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502;
export const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503;
export const ERROR_DS_SAM_INIT_FAILURE = 8504;
export const ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505;
export const ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506;
export const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507;
export const ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508;
export const ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509;
export const ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510;
export const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511;
export const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512;
export const ERROR_DS_INVALID_GROUP_TYPE = 8513;
export const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514;
export const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515;
export const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516;
export const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517;
export const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518;
export const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519;
export const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520;
export const ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521;
export const ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522;
export const ERROR_DS_NAMING_MASTER_GC = 8523;
export const ERROR_DS_DNS_LOOKUP_FAILURE = 8524;
export const ERROR_DS_COULDNT_UPDATE_SPNS = 8525;
export const ERROR_DS_CANT_RETRIEVE_SD = 8526;
export const ERROR_DS_KEY_NOT_UNIQUE = 8527;
export const ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528;
export const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529;
export const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530;
export const ERROR_DS_CANT_START = 8531;
export const ERROR_DS_INIT_FAILURE = 8532;
export const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533;
export const ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534;
export const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535;
export const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536;
export const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537;
export const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538;
export const ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539;
export const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540;
export const ERROR_SAM_INIT_FAILURE = 8541;
export const ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542;
export const ERROR_DS_DRA_SCHEMA_CONFLICT = 8543;
export const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544;
export const ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545;
export const ERROR_DS_NC_STILL_HAS_DSAS = 8546;
export const ERROR_DS_GC_REQUIRED = 8547;
export const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548;
export const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549;
export const ERROR_DS_CANT_ADD_TO_GC = 8550;
export const ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551;
export const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552;
export const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553;
export const ERROR_DS_INVALID_NAME_FOR_SPN = 8554;
export const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555;
export const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556;
export const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557;
export const ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558;
export const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559;
export const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560;
export const ERROR_DS_INIT_FAILURE_CONSOLE = 8561;
export const ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562;
export const ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563;
export const ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564;
export const ERROR_DS_FOREST_VERSION_TOO_LOW = 8565;
export const ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566;
export const ERROR_DS_INCOMPATIBLE_VERSION = 8567;
export const ERROR_DS_LOW_DSA_VERSION = 8568;
export const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569;
export const ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570;
export const ERROR_DS_NAME_NOT_UNIQUE = 8571;
export const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572;
export const ERROR_DS_OUT_OF_VERSION_STORE = 8573;
export const ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574;
export const ERROR_DS_NO_REF_DOMAIN = 8575;
export const ERROR_DS_RESERVED_LINK_ID = 8576;
export const ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577;
export const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578;
export const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579;
export const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580;
export const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581;
export const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582;
export const ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583;
export const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584;
export const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585;
export const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586;
export const ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587;
export const ERROR_DS_NOT_CLOSEST = 8588;
export const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589;
export const ERROR_DS_SINGLE_USER_MODE_FAILED = 8590;
export const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591;
export const ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592;
export const ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593;
export const ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594;
export const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595;
export const ERROR_DS_NO_MSDS_INTID = 8596;
export const ERROR_DS_DUP_MSDS_INTID = 8597;
export const ERROR_DS_EXISTS_IN_RDNATTID = 8598;
export const ERROR_DS_AUTHORIZATION_FAILED = 8599;
export const ERROR_DS_INVALID_SCRIPT = 8600;
export const ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601;
export const ERROR_DS_CROSS_REF_BUSY = 8602;
export const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603;
export const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604;
export const ERROR_DS_DUPLICATE_ID_FOUND = 8605;
export const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606;
export const ERROR_DS_GROUP_CONVERSION_ERROR = 8607;
export const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608;
export const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609;
export const ERROR_DS_ROLE_NOT_VERIFIED = 8610;
export const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611;
export const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612;
export const ERROR_DS_EXISTING_AD_CHILD_NC = 8613;
export const ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614;
export const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615;
export const ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616;
export const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617;
export const ERROR_DS_POLICY_NOT_KNOWN = 8618;
export const ERROR_NO_SITE_SETTINGS_OBJECT = 8619;
export const ERROR_NO_SECRETS = 8620;
export const ERROR_NO_WRITABLE_DC_FOUND = 8621;
export const ERROR_DS_NO_SERVER_OBJECT = 8622;
export const ERROR_DS_NO_NTDSA_OBJECT = 8623;
export const ERROR_DS_NON_ASQ_SEARCH = 8624;
export const ERROR_DS_AUDIT_FAILURE = 8625;
export const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = 8626;
export const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = 8627;
export const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = 8628;
export const ERROR_DS_DRA_CORRUPT_UTD_VECTOR = 8629;
export const ERROR_DS_DRA_SECRETS_DENIED = 8630;
export const ERROR_DS_RESERVED_MAPI_ID = 8631;
export const ERROR_DS_MAPI_ID_NOT_AVAILABLE = 8632;
export const ERROR_DS_DRA_MISSING_KRBTGT_SECRET = 8633;
export const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = 8634;
export const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = 8635;
export const ERROR_INVALID_USER_PRINCIPAL_NAME = 8636;
export const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 8637;
export const ERROR_DS_OID_NOT_FOUND = 8638;
export const ERROR_DS_DRA_RECYCLED_TARGET = 8639;
export const ERROR_DS_DISALLOWED_NC_REDIRECT = 8640;
export const ERROR_DS_HIGH_ADLDS_FFL = 8641;
export const ERROR_DS_HIGH_DSA_VERSION = 8642;
export const ERROR_DS_LOW_ADLDS_FFL = 8643;
export const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = 8644;
export const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = 8645;
export const ERROR_INCORRECT_ACCOUNT_TYPE = 8646;
export const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = 8647;
export const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = 8648;
export const ERROR_DS_MISSING_FOREST_TRUST = 8649;
export const ERROR_DS_VALUE_KEY_NOT_UNIQUE = 8650;
export const ERROR_WEAK_WHFBKEY_BLOCKED = 8651;
export const DNS_ERROR_RESPONSE_CODES_BASE = 9000;
export const DNS_ERROR_RCODE_NO_ERROR = 0;
export const DNS_ERROR_MASK = 9000;
export const DNS_ERROR_RCODE_FORMAT_ERROR = 9001;
export const DNS_ERROR_RCODE_SERVER_FAILURE = 9002;
export const DNS_ERROR_RCODE_NAME_ERROR = 9003;
export const DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004;
export const DNS_ERROR_RCODE_REFUSED = 9005;
export const DNS_ERROR_RCODE_YXDOMAIN = 9006;
export const DNS_ERROR_RCODE_YXRRSET = 9007;
export const DNS_ERROR_RCODE_NXRRSET = 9008;
export const DNS_ERROR_RCODE_NOTAUTH = 9009;
export const DNS_ERROR_RCODE_NOTZONE = 9010;
export const DNS_ERROR_RCODE_BADSIG = 9016;
export const DNS_ERROR_RCODE_BADKEY = 9017;
export const DNS_ERROR_RCODE_BADTIME = 9018;
export const DNS_ERROR_RCODE_LAST = 9018;
export const DNS_ERROR_DNSSEC_BASE = 9100;
export const DNS_ERROR_KEYMASTER_REQUIRED = 9101;
export const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = 9102;
export const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = 9103;
export const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = 9104;
export const DNS_ERROR_UNSUPPORTED_ALGORITHM = 9105;
export const DNS_ERROR_INVALID_KEY_SIZE = 9106;
export const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = 9107;
export const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = 9108;
export const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = 9109;
export const DNS_ERROR_UNEXPECTED_CNG_ERROR = 9110;
export const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = 9111;
export const DNS_ERROR_KSP_NOT_ACCESSIBLE = 9112;
export const DNS_ERROR_TOO_MANY_SKDS = 9113;
export const DNS_ERROR_INVALID_ROLLOVER_PERIOD = 9114;
export const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = 9115;
export const DNS_ERROR_ROLLOVER_IN_PROGRESS = 9116;
export const DNS_ERROR_STANDBY_KEY_NOT_PRESENT = 9117;
export const DNS_ERROR_NOT_ALLOWED_ON_ZSK = 9118;
export const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = 9119;
export const DNS_ERROR_ROLLOVER_ALREADY_QUEUED = 9120;
export const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = 9121;
export const DNS_ERROR_BAD_KEYMASTER = 9122;
export const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = 9123;
export const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = 9124;
export const DNS_ERROR_DNSSEC_IS_DISABLED = 9125;
export const DNS_ERROR_INVALID_XML = 9126;
export const DNS_ERROR_NO_VALID_TRUST_ANCHORS = 9127;
export const DNS_ERROR_ROLLOVER_NOT_POKEABLE = 9128;
export const DNS_ERROR_NSEC3_NAME_COLLISION = 9129;
export const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = 9130;
export const DNS_ERROR_PACKET_FMT_BASE = 9500;
export const DNS_ERROR_BAD_PACKET = 9502;
export const DNS_ERROR_NO_PACKET = 9503;
export const DNS_ERROR_RCODE = 9504;
export const DNS_ERROR_UNSECURE_PACKET = 9505;
export const DNS_ERROR_NO_MEMORY = 14;
export const DNS_ERROR_INVALID_NAME = 123;
export const DNS_ERROR_INVALID_DATA = 13;
export const DNS_ERROR_GENERAL_API_BASE = 9550;
export const DNS_ERROR_INVALID_TYPE = 9551;
export const DNS_ERROR_INVALID_IP_ADDRESS = 9552;
export const DNS_ERROR_INVALID_PROPERTY = 9553;
export const DNS_ERROR_TRY_AGAIN_LATER = 9554;
export const DNS_ERROR_NOT_UNIQUE = 9555;
export const DNS_ERROR_NON_RFC_NAME = 9556;
export const DNS_ERROR_INVALID_NAME_CHAR = 9560;
export const DNS_ERROR_NUMERIC_NAME = 9561;
export const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562;
export const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563;
export const DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564;
export const DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565;
export const DNS_ERROR_DWORD_VALUE_TOO_SMALL = 9566;
export const DNS_ERROR_DWORD_VALUE_TOO_LARGE = 9567;
export const DNS_ERROR_BACKGROUND_LOADING = 9568;
export const DNS_ERROR_NOT_ALLOWED_ON_RODC = 9569;
export const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = 9570;
export const DNS_ERROR_DELEGATION_REQUIRED = 9571;
export const DNS_ERROR_INVALID_POLICY_TABLE = 9572;
export const DNS_ERROR_ADDRESS_REQUIRED = 9573;
export const DNS_ERROR_ZONE_BASE = 9600;
export const DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601;
export const DNS_ERROR_NO_ZONE_INFO = 9602;
export const DNS_ERROR_INVALID_ZONE_OPERATION = 9603;
export const DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604;
export const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605;
export const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606;
export const DNS_ERROR_ZONE_LOCKED = 9607;
export const DNS_ERROR_ZONE_CREATION_FAILED = 9608;
export const DNS_ERROR_ZONE_ALREADY_EXISTS = 9609;
export const DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610;
export const DNS_ERROR_INVALID_ZONE_TYPE = 9611;
export const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612;
export const DNS_ERROR_ZONE_NOT_SECONDARY = 9613;
export const DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614;
export const DNS_ERROR_WINS_INIT_FAILED = 9615;
export const DNS_ERROR_NEED_WINS_SERVERS = 9616;
export const DNS_ERROR_NBSTAT_INIT_FAILED = 9617;
export const DNS_ERROR_SOA_DELETE_INVALID = 9618;
export const DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619;
export const DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620;
export const DNS_ERROR_ZONE_IS_SHUTDOWN = 9621;
export const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = 9622;
export const DNS_ERROR_DATAFILE_BASE = 9650;
export const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651;
export const DNS_ERROR_INVALID_DATAFILE_NAME = 9652;
export const DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653;
export const DNS_ERROR_FILE_WRITEBACK_FAILED = 9654;
export const DNS_ERROR_DATAFILE_PARSING = 9655;
export const DNS_ERROR_DATABASE_BASE = 9700;
export const DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701;
export const DNS_ERROR_RECORD_FORMAT = 9702;
export const DNS_ERROR_NODE_CREATION_FAILED = 9703;
export const DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704;
export const DNS_ERROR_RECORD_TIMED_OUT = 9705;
export const DNS_ERROR_NAME_NOT_IN_ZONE = 9706;
export const DNS_ERROR_CNAME_LOOP = 9707;
export const DNS_ERROR_NODE_IS_CNAME = 9708;
export const DNS_ERROR_CNAME_COLLISION = 9709;
export const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710;
export const DNS_ERROR_RECORD_ALREADY_EXISTS = 9711;
export const DNS_ERROR_SECONDARY_DATA = 9712;
export const DNS_ERROR_NO_CREATE_CACHE_DATA = 9713;
export const DNS_ERROR_NAME_DOES_NOT_EXIST = 9714;
export const DNS_ERROR_DS_UNAVAILABLE = 9717;
export const DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718;
export const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719;
export const DNS_ERROR_NODE_IS_DNAME = 9720;
export const DNS_ERROR_DNAME_COLLISION = 9721;
export const DNS_ERROR_ALIAS_LOOP = 9722;
export const DNS_ERROR_OPERATION_BASE = 9750;
export const DNS_ERROR_AXFR = 9752;
export const DNS_ERROR_SECURE_BASE = 9800;
export const DNS_ERROR_SETUP_BASE = 9850;
export const DNS_ERROR_NO_TCPIP = 9851;
export const DNS_ERROR_NO_DNS_SERVERS = 9852;
export const DNS_ERROR_DP_BASE = 9900;
export const DNS_ERROR_DP_DOES_NOT_EXIST = 9901;
export const DNS_ERROR_DP_ALREADY_EXISTS = 9902;
export const DNS_ERROR_DP_NOT_ENLISTED = 9903;
export const DNS_ERROR_DP_ALREADY_ENLISTED = 9904;
export const DNS_ERROR_DP_NOT_AVAILABLE = 9905;
export const DNS_ERROR_DP_FSMO_ERROR = 9906;
export const DNS_ERROR_RRL_NOT_ENABLED = 9911;
export const DNS_ERROR_RRL_INVALID_WINDOW_SIZE = 9912;
export const DNS_ERROR_RRL_INVALID_IPV4_PREFIX = 9913;
export const DNS_ERROR_RRL_INVALID_IPV6_PREFIX = 9914;
export const DNS_ERROR_RRL_INVALID_TC_RATE = 9915;
export const DNS_ERROR_RRL_INVALID_LEAK_RATE = 9916;
export const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = 9917;
export const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = 9921;
export const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = 9922;
export const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = 9923;
export const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = 9924;
export const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = 9925;
export const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = 9951;
export const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = 9952;
export const DNS_ERROR_DEFAULT_ZONESCOPE = 9953;
export const DNS_ERROR_INVALID_ZONESCOPE_NAME = 9954;
export const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = 9955;
export const DNS_ERROR_LOAD_ZONESCOPE_FAILED = 9956;
export const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = 9957;
export const DNS_ERROR_INVALID_SCOPE_NAME = 9958;
export const DNS_ERROR_SCOPE_DOES_NOT_EXIST = 9959;
export const DNS_ERROR_DEFAULT_SCOPE = 9960;
export const DNS_ERROR_INVALID_SCOPE_OPERATION = 9961;
export const DNS_ERROR_SCOPE_LOCKED = 9962;
export const DNS_ERROR_SCOPE_ALREADY_EXISTS = 9963;
export const DNS_ERROR_POLICY_ALREADY_EXISTS = 9971;
export const DNS_ERROR_POLICY_DOES_NOT_EXIST = 9972;
export const DNS_ERROR_POLICY_INVALID_CRITERIA = 9973;
export const DNS_ERROR_POLICY_INVALID_SETTINGS = 9974;
export const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = 9975;
export const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = 9976;
export const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = 9977;
export const DNS_ERROR_SUBNET_DOES_NOT_EXIST = 9978;
export const DNS_ERROR_SUBNET_ALREADY_EXISTS = 9979;
export const DNS_ERROR_POLICY_LOCKED = 9980;
export const DNS_ERROR_POLICY_INVALID_WEIGHT = 9981;
export const DNS_ERROR_POLICY_INVALID_NAME = 9982;
export const DNS_ERROR_POLICY_MISSING_CRITERIA = 9983;
export const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = 9984;
export const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = 9985;
export const DNS_ERROR_POLICY_SCOPE_MISSING = 9986;
export const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = 9987;
export const DNS_ERROR_SERVERSCOPE_IS_REFERENCED = 9988;
export const DNS_ERROR_ZONESCOPE_IS_REFERENCED = 9989;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = 9990;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = 9991;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = 9992;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = 9993;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = 9994;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = 9995;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = 9996;
export const ERROR_IPSEC_QM_POLICY_EXISTS = 13000;
export const ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001;
export const ERROR_IPSEC_QM_POLICY_IN_USE = 13002;
export const ERROR_IPSEC_MM_POLICY_EXISTS = 13003;
export const ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004;
export const ERROR_IPSEC_MM_POLICY_IN_USE = 13005;
export const ERROR_IPSEC_MM_FILTER_EXISTS = 13006;
export const ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007;
export const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008;
export const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009;
export const ERROR_IPSEC_MM_AUTH_EXISTS = 13010;
export const ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011;
export const ERROR_IPSEC_MM_AUTH_IN_USE = 13012;
export const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013;
export const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014;
export const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015;
export const ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016;
export const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017;
export const ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018;
export const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019;
export const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020;
export const ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021;
export const ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022;
export const ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023;
export const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800;
export const ERROR_IPSEC_IKE_AUTH_FAIL = 13801;
export const ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802;
export const ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803;
export const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804;
export const ERROR_IPSEC_IKE_TIMED_OUT = 13805;
export const ERROR_IPSEC_IKE_NO_CERT = 13806;
export const ERROR_IPSEC_IKE_SA_DELETED = 13807;
export const ERROR_IPSEC_IKE_SA_REAPED = 13808;
export const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809;
export const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810;
export const ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811;
export const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812;
export const ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813;
export const ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814;
export const ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815;
export const ERROR_IPSEC_IKE_ERROR = 13816;
export const ERROR_IPSEC_IKE_CRL_FAILED = 13817;
export const ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818;
export const ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819;
export const ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820;
export const ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = 13821;
export const ERROR_IPSEC_IKE_DH_FAIL = 13822;
export const ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = 13823;
export const ERROR_IPSEC_IKE_INVALID_HEADER = 13824;
export const ERROR_IPSEC_IKE_NO_POLICY = 13825;
export const ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826;
export const ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827;
export const ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828;
export const ERROR_IPSEC_IKE_PROCESS_ERR = 13829;
export const ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830;
export const ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831;
export const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832;
export const ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833;
export const ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834;
export const ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835;
export const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836;
export const ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837;
export const ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840;
export const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841;
export const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842;
export const ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843;
export const ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844;
export const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845;
export const ERROR_IPSEC_IKE_INVALID_COOKIE = 13846;
export const ERROR_IPSEC_IKE_NO_PEER_CERT = 13847;
export const ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848;
export const ERROR_IPSEC_IKE_POLICY_CHANGE = 13849;
export const ERROR_IPSEC_IKE_NO_MM_POLICY = 13850;
export const ERROR_IPSEC_IKE_NOTCBPRIV = 13851;
export const ERROR_IPSEC_IKE_SECLOADFAIL = 13852;
export const ERROR_IPSEC_IKE_FAILSSPINIT = 13853;
export const ERROR_IPSEC_IKE_FAILQUERYSSP = 13854;
export const ERROR_IPSEC_IKE_SRVACQFAIL = 13855;
export const ERROR_IPSEC_IKE_SRVQUERYCRED = 13856;
export const ERROR_IPSEC_IKE_GETSPIFAIL = 13857;
export const ERROR_IPSEC_IKE_INVALID_FILTER = 13858;
export const ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859;
export const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860;
export const ERROR_IPSEC_IKE_INVALID_POLICY = 13861;
export const ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862;
export const ERROR_IPSEC_IKE_INVALID_SITUATION = 13863;
export const ERROR_IPSEC_IKE_DH_FAILURE = 13864;
export const ERROR_IPSEC_IKE_INVALID_GROUP = 13865;
export const ERROR_IPSEC_IKE_ENCRYPT = 13866;
export const ERROR_IPSEC_IKE_DECRYPT = 13867;
export const ERROR_IPSEC_IKE_POLICY_MATCH = 13868;
export const ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869;
export const ERROR_IPSEC_IKE_INVALID_HASH = 13870;
export const ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871;
export const ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872;
export const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873;
export const ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874;
export const ERROR_IPSEC_IKE_INVALID_SIG = 13875;
export const ERROR_IPSEC_IKE_LOAD_FAILED = 13876;
export const ERROR_IPSEC_IKE_RPC_DELETE = 13877;
export const ERROR_IPSEC_IKE_BENIGN_REINIT = 13878;
export const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879;
export const ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = 13880;
export const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881;
export const ERROR_IPSEC_IKE_MM_LIMIT = 13882;
export const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883;
export const ERROR_IPSEC_IKE_QM_LIMIT = 13884;
export const ERROR_IPSEC_IKE_MM_EXPIRED = 13885;
export const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886;
export const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887;
export const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888;
export const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889;
export const ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890;
export const ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891;
export const ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893;
export const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894;
export const ERROR_IPSEC_IKE_QM_EXPIRED = 13895;
export const ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896;
export const ERROR_IPSEC_IKE_NEG_STATUS_END = 13897;
export const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898;
export const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899;
export const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900;
export const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901;
export const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902;
export const ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903;
export const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904;
export const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905;
export const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906;
export const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907;
export const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908;
export const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909;
export const ERROR_IPSEC_BAD_SPI = 13910;
export const ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911;
export const ERROR_IPSEC_WRONG_SA = 13912;
export const ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913;
export const ERROR_IPSEC_INVALID_PACKET = 13914;
export const ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915;
export const ERROR_IPSEC_CLEAR_TEXT_DROP = 13916;
export const ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917;
export const ERROR_IPSEC_THROTTLE_DROP = 13918;
export const ERROR_IPSEC_DOSP_BLOCK = 13925;
export const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926;
export const ERROR_IPSEC_DOSP_INVALID_PACKET = 13927;
export const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928;
export const ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929;
export const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930;
export const ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931;
export const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932;
export const ERROR_SXS_SECTION_NOT_FOUND = 14000;
export const ERROR_SXS_CANT_GEN_ACTCTX = 14001;
export const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002;
export const ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003;
export const ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004;
export const ERROR_SXS_MANIFEST_PARSE_ERROR = 14005;
export const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006;
export const ERROR_SXS_KEY_NOT_FOUND = 14007;
export const ERROR_SXS_VERSION_CONFLICT = 14008;
export const ERROR_SXS_WRONG_SECTION_TYPE = 14009;
export const ERROR_SXS_THREAD_QUERIES_DISABLED = 14010;
export const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011;
export const ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012;
export const ERROR_SXS_UNKNOWN_ENCODING = 14013;
export const ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014;
export const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015;
export const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016;
export const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017;
export const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018;
export const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019;
export const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020;
export const ERROR_SXS_DUPLICATE_DLL_NAME = 14021;
export const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022;
export const ERROR_SXS_DUPLICATE_CLSID = 14023;
export const ERROR_SXS_DUPLICATE_IID = 14024;
export const ERROR_SXS_DUPLICATE_TLBID = 14025;
export const ERROR_SXS_DUPLICATE_PROGID = 14026;
export const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027;
export const ERROR_SXS_FILE_HASH_MISMATCH = 14028;
export const ERROR_SXS_POLICY_PARSE_ERROR = 14029;
export const ERROR_SXS_XML_E_MISSINGQUOTE = 14030;
export const ERROR_SXS_XML_E_COMMENTSYNTAX = 14031;
export const ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032;
export const ERROR_SXS_XML_E_BADNAMECHAR = 14033;
export const ERROR_SXS_XML_E_BADCHARINSTRING = 14034;
export const ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035;
export const ERROR_SXS_XML_E_BADCHARDATA = 14036;
export const ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037;
export const ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038;
export const ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039;
export const ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040;
export const ERROR_SXS_XML_E_INTERNALERROR = 14041;
export const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042;
export const ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043;
export const ERROR_SXS_XML_E_MISSING_PAREN = 14044;
export const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045;
export const ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046;
export const ERROR_SXS_XML_E_INVALID_DECIMAL = 14047;
export const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048;
export const ERROR_SXS_XML_E_INVALID_UNICODE = 14049;
export const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050;
export const ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051;
export const ERROR_SXS_XML_E_UNCLOSEDTAG = 14052;
export const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053;
export const ERROR_SXS_XML_E_MULTIPLEROOTS = 14054;
export const ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055;
export const ERROR_SXS_XML_E_BADXMLDECL = 14056;
export const ERROR_SXS_XML_E_MISSINGROOT = 14057;
export const ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058;
export const ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059;
export const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060;
export const ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061;
export const ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062;
export const ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063;
export const ERROR_SXS_XML_E_UNCLOSEDDECL = 14064;
export const ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065;
export const ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066;
export const ERROR_SXS_XML_E_INVALIDENCODING = 14067;
export const ERROR_SXS_XML_E_INVALIDSWITCH = 14068;
export const ERROR_SXS_XML_E_BADXMLCASE = 14069;
export const ERROR_SXS_XML_E_INVALID_STANDALONE = 14070;
export const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071;
export const ERROR_SXS_XML_E_INVALID_VERSION = 14072;
export const ERROR_SXS_XML_E_MISSINGEQUALS = 14073;
export const ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074;
export const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075;
export const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076;
export const ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077;
export const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078;
export const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079;
export const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080;
export const ERROR_SXS_ASSEMBLY_MISSING = 14081;
export const ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082;
export const ERROR_SXS_CORRUPTION = 14083;
export const ERROR_SXS_EARLY_DEACTIVATION = 14084;
export const ERROR_SXS_INVALID_DEACTIVATION = 14085;
export const ERROR_SXS_MULTIPLE_DEACTIVATION = 14086;
export const ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087;
export const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088;
export const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089;
export const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090;
export const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091;
export const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092;
export const ERROR_SXS_IDENTITY_PARSE_ERROR = 14093;
export const ERROR_MALFORMED_SUBSTITUTION_STRING = 14094;
export const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095;
export const ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096;
export const ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097;
export const ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098;
export const ERROR_ADVANCED_INSTALLER_FAILED = 14099;
export const ERROR_XML_ENCODING_MISMATCH = 14100;
export const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101;
export const ERROR_SXS_IDENTITIES_DIFFERENT = 14102;
export const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103;
export const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104;
export const ERROR_SXS_MANIFEST_TOO_BIG = 14105;
export const ERROR_SXS_SETTING_NOT_REGISTERED = 14106;
export const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107;
export const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108;
export const ERROR_GENERIC_COMMAND_FAILED = 14109;
export const ERROR_SXS_FILE_HASH_MISSING = 14110;
export const ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = 14111;
export const ERROR_EVT_INVALID_CHANNEL_PATH = 15000;
export const ERROR_EVT_INVALID_QUERY = 15001;
export const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002;
export const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003;
export const ERROR_EVT_INVALID_PUBLISHER_NAME = 15004;
export const ERROR_EVT_INVALID_EVENT_DATA = 15005;
export const ERROR_EVT_CHANNEL_NOT_FOUND = 15007;
export const ERROR_EVT_MALFORMED_XML_TEXT = 15008;
export const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009;
export const ERROR_EVT_CONFIGURATION_ERROR = 15010;
export const ERROR_EVT_QUERY_RESULT_STALE = 15011;
export const ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012;
export const ERROR_EVT_NON_VALIDATING_MSXML = 15013;
export const ERROR_EVT_FILTER_ALREADYSCOPED = 15014;
export const ERROR_EVT_FILTER_NOTELTSET = 15015;
export const ERROR_EVT_FILTER_INVARG = 15016;
export const ERROR_EVT_FILTER_INVTEST = 15017;
export const ERROR_EVT_FILTER_INVTYPE = 15018;
export const ERROR_EVT_FILTER_PARSEERR = 15019;
export const ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020;
export const ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021;
export const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022;
export const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023;
export const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024;
export const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025;
export const ERROR_EVT_FILTER_TOO_COMPLEX = 15026;
export const ERROR_EVT_MESSAGE_NOT_FOUND = 15027;
export const ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028;
export const ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029;
export const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030;
export const ERROR_EVT_MAX_INSERTS_REACHED = 15031;
export const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032;
export const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033;
export const ERROR_EVT_VERSION_TOO_OLD = 15034;
export const ERROR_EVT_VERSION_TOO_NEW = 15035;
export const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036;
export const ERROR_EVT_PUBLISHER_DISABLED = 15037;
export const ERROR_EVT_FILTER_OUT_OF_RANGE = 15038;
export const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080;
export const ERROR_EC_LOG_DISABLED = 15081;
export const ERROR_EC_CIRCULAR_FORWARDING = 15082;
export const ERROR_EC_CREDSTORE_FULL = 15083;
export const ERROR_EC_CRED_NOT_FOUND = 15084;
export const ERROR_EC_NO_ACTIVE_CHANNEL = 15085;
export const ERROR_MUI_FILE_NOT_FOUND = 15100;
export const ERROR_MUI_INVALID_FILE = 15101;
export const ERROR_MUI_INVALID_RC_CONFIG = 15102;
export const ERROR_MUI_INVALID_LOCALE_NAME = 15103;
export const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104;
export const ERROR_MUI_FILE_NOT_LOADED = 15105;
export const ERROR_RESOURCE_ENUM_USER_STOP = 15106;
export const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107;
export const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108;
export const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = 15110;
export const ERROR_MRM_INVALID_PRICONFIG = 15111;
export const ERROR_MRM_INVALID_FILE_TYPE = 15112;
export const ERROR_MRM_UNKNOWN_QUALIFIER = 15113;
export const ERROR_MRM_INVALID_QUALIFIER_VALUE = 15114;
export const ERROR_MRM_NO_CANDIDATE = 15115;
export const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = 15116;
export const ERROR_MRM_RESOURCE_TYPE_MISMATCH = 15117;
export const ERROR_MRM_DUPLICATE_MAP_NAME = 15118;
export const ERROR_MRM_DUPLICATE_ENTRY = 15119;
export const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = 15120;
export const ERROR_MRM_FILEPATH_TOO_LONG = 15121;
export const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = 15122;
export const ERROR_MRM_INVALID_PRI_FILE = 15126;
export const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = 15127;
export const ERROR_MRM_MAP_NOT_FOUND = 15135;
export const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = 15136;
export const ERROR_MRM_INVALID_QUALIFIER_OPERATOR = 15137;
export const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = 15138;
export const ERROR_MRM_AUTOMERGE_ENABLED = 15139;
export const ERROR_MRM_TOO_MANY_RESOURCES = 15140;
export const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = 15141;
export const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = 15142;
export const ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = 15143;
export const ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = 15144;
export const ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = 15145;
export const ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = 15146;
export const ERROR_MRM_GENERATION_COUNT_MISMATCH = 15147;
export const ERROR_PRI_MERGE_VERSION_MISMATCH = 15148;
export const ERROR_PRI_MERGE_MISSING_SCHEMA = 15149;
export const ERROR_PRI_MERGE_LOAD_FILE_FAILED = 15150;
export const ERROR_PRI_MERGE_ADD_FILE_FAILED = 15151;
export const ERROR_PRI_MERGE_WRITE_FILE_FAILED = 15152;
export const ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = 15153;
export const ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = 15154;
export const ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = 15155;
export const ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = 15156;
export const ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = 15157;
export const ERROR_PRI_MERGE_INVALID_FILE_NAME = 15158;
export const ERROR_MRM_PACKAGE_NOT_FOUND = 15159;
export const ERROR_MRM_MISSING_DEFAULT_LANGUAGE = 15160;
export const ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200;
export const ERROR_MCA_INVALID_VCP_VERSION = 15201;
export const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202;
export const ERROR_MCA_MCCS_VERSION_MISMATCH = 15203;
export const ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204;
export const ERROR_MCA_INTERNAL_ERROR = 15205;
export const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206;
export const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207;
export const ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250;
export const ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299;
export const ERROR_HASH_NOT_SUPPORTED = 15300;
export const ERROR_HASH_NOT_PRESENT = 15301;
export const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = 15321;
export const ERROR_GPIO_CLIENT_INFORMATION_INVALID = 15322;
export const ERROR_GPIO_VERSION_NOT_SUPPORTED = 15323;
export const ERROR_GPIO_INVALID_REGISTRATION_PACKET = 15324;
export const ERROR_GPIO_OPERATION_DENIED = 15325;
export const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = 15326;
export const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = 15327;
export const ERROR_CANNOT_SWITCH_RUNLEVEL = 15400;
export const ERROR_INVALID_RUNLEVEL_SETTING = 15401;
export const ERROR_RUNLEVEL_SWITCH_TIMEOUT = 15402;
export const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = 15403;
export const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = 15404;
export const ERROR_SERVICES_FAILED_AUTOSTART = 15405;
export const ERROR_COM_TASK_STOP_PENDING = 15501;
export const ERROR_INSTALL_OPEN_PACKAGE_FAILED = 15600;
export const ERROR_INSTALL_PACKAGE_NOT_FOUND = 15601;
export const ERROR_INSTALL_INVALID_PACKAGE = 15602;
export const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = 15603;
export const ERROR_INSTALL_OUT_OF_DISK_SPACE = 15604;
export const ERROR_INSTALL_NETWORK_FAILURE = 15605;
export const ERROR_INSTALL_REGISTRATION_FAILURE = 15606;
export const ERROR_INSTALL_DEREGISTRATION_FAILURE = 15607;
export const ERROR_INSTALL_CANCEL = 15608;
export const ERROR_INSTALL_FAILED = 15609;
export const ERROR_REMOVE_FAILED = 15610;
export const ERROR_PACKAGE_ALREADY_EXISTS = 15611;
export const ERROR_NEEDS_REMEDIATION = 15612;
export const ERROR_INSTALL_PREREQUISITE_FAILED = 15613;
export const ERROR_PACKAGE_REPOSITORY_CORRUPTED = 15614;
export const ERROR_INSTALL_POLICY_FAILURE = 15615;
export const ERROR_PACKAGE_UPDATING = 15616;
export const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = 15617;
export const ERROR_PACKAGES_IN_USE = 15618;
export const ERROR_RECOVERY_FILE_CORRUPT = 15619;
export const ERROR_INVALID_STAGED_SIGNATURE = 15620;
export const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = 15621;
export const ERROR_INSTALL_PACKAGE_DOWNGRADE = 15622;
export const ERROR_SYSTEM_NEEDS_REMEDIATION = 15623;
export const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = 15624;
export const ERROR_RESILIENCY_FILE_CORRUPT = 15625;
export const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = 15626;
export const ERROR_PACKAGE_MOVE_FAILED = 15627;
export const ERROR_INSTALL_VOLUME_NOT_EMPTY = 15628;
export const ERROR_INSTALL_VOLUME_OFFLINE = 15629;
export const ERROR_INSTALL_VOLUME_CORRUPT = 15630;
export const ERROR_NEEDS_REGISTRATION = 15631;
export const ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = 15632;
export const ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = 15633;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = 15634;
export const ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = 15635;
export const ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = 15636;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = 15637;
export const ERROR_PACKAGE_STAGING_ONHOLD = 15638;
export const ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = 15639;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15640;
export const ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = 15641;
export const ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED = 15642;
export const ERROR_PACKAGES_REPUTATION_CHECK_FAILED = 15643;
export const ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = 15644;
export const ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = 15645;
export const ERROR_APPINSTALLER_ACTIVATION_BLOCKED = 15646;
export const ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = 15647;
export const ERROR_APPX_RAW_DATA_WRITE_FAILED = 15648;
export const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = 15649;
export const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = 15650;
export const ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = 15651;
export const ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = 15652;
export const ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = 15653;
export const ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = 15654;
export const ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = 15655;
export const ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = 15656;
export const ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED = 15657;
export const ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST = 15658;
export const ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT = 15659;
export const ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15660;
export const ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15661;
export const ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED = 15662;
export const ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15663;
export const ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS = 15664;
export const ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED = 15665;
export const ERROR_MACHINE_SCOPE_NOT_ALLOWED = 15666;
export const ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED = 15667;
export const ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE = 15668;
export const ERROR_PACKAGE_NOT_REGISTERED_FOR_USER = 15669;
export const ERROR_STATE_LOAD_STORE_FAILED = 15800;
export const ERROR_STATE_GET_VERSION_FAILED = 15801;
export const ERROR_STATE_SET_VERSION_FAILED = 15802;
export const ERROR_STATE_STRUCTURED_RESET_FAILED = 15803;
export const ERROR_STATE_OPEN_CONTAINER_FAILED = 15804;
export const ERROR_STATE_CREATE_CONTAINER_FAILED = 15805;
export const ERROR_STATE_DELETE_CONTAINER_FAILED = 15806;
export const ERROR_STATE_READ_SETTING_FAILED = 15807;
export const ERROR_STATE_WRITE_SETTING_FAILED = 15808;
export const ERROR_STATE_DELETE_SETTING_FAILED = 15809;
export const ERROR_STATE_QUERY_SETTING_FAILED = 15810;
export const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = 15811;
export const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = 15812;
export const ERROR_STATE_ENUMERATE_CONTAINER_FAILED = 15813;
export const ERROR_STATE_ENUMERATE_SETTINGS_FAILED = 15814;
export const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15815;
export const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15816;
export const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = 15817;
export const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = 15818;
export const ERROR_API_UNAVAILABLE = 15841;
export const ERROR_NDIS_INTERFACE_CLOSING = 2150891522;
export const ERROR_NDIS_BAD_VERSION = 2150891524;
export const ERROR_NDIS_BAD_CHARACTERISTICS = 2150891525;
export const ERROR_NDIS_ADAPTER_NOT_FOUND = 2150891526;
export const ERROR_NDIS_OPEN_FAILED = 2150891527;
export const ERROR_NDIS_DEVICE_FAILED = 2150891528;
export const ERROR_NDIS_MULTICAST_FULL = 2150891529;
export const ERROR_NDIS_MULTICAST_EXISTS = 2150891530;
export const ERROR_NDIS_MULTICAST_NOT_FOUND = 2150891531;
export const ERROR_NDIS_REQUEST_ABORTED = 2150891532;
export const ERROR_NDIS_RESET_IN_PROGRESS = 2150891533;
export const ERROR_NDIS_NOT_SUPPORTED = 2150891707;
export const ERROR_NDIS_INVALID_PACKET = 2150891535;
export const ERROR_NDIS_ADAPTER_NOT_READY = 2150891537;
export const ERROR_NDIS_INVALID_LENGTH = 2150891540;
export const ERROR_NDIS_INVALID_DATA = 2150891541;
export const ERROR_NDIS_BUFFER_TOO_SHORT = 2150891542;
export const ERROR_NDIS_INVALID_OID = 2150891543;
export const ERROR_NDIS_ADAPTER_REMOVED = 2150891544;
export const ERROR_NDIS_UNSUPPORTED_MEDIA = 2150891545;
export const ERROR_NDIS_GROUP_ADDRESS_IN_USE = 2150891546;
export const ERROR_NDIS_FILE_NOT_FOUND = 2150891547;
export const ERROR_NDIS_ERROR_READING_FILE = 2150891548;
export const ERROR_NDIS_ALREADY_MAPPED = 2150891549;
export const ERROR_NDIS_RESOURCE_CONFLICT = 2150891550;
export const ERROR_NDIS_MEDIA_DISCONNECTED = 2150891551;
export const ERROR_NDIS_INVALID_ADDRESS = 2150891554;
export const ERROR_NDIS_INVALID_DEVICE_REQUEST = 2150891536;
export const ERROR_NDIS_PAUSED = 2150891562;
export const ERROR_NDIS_INTERFACE_NOT_FOUND = 2150891563;
export const ERROR_NDIS_UNSUPPORTED_REVISION = 2150891564;
export const ERROR_NDIS_INVALID_PORT = 2150891565;
export const ERROR_NDIS_INVALID_PORT_STATE = 2150891566;
export const ERROR_NDIS_LOW_POWER_STATE = 2150891567;
export const ERROR_NDIS_REINIT_REQUIRED = 2150891568;
export const ERROR_NDIS_NO_QUEUES = 2150891569;
export const ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = 2150899712;
export const ERROR_NDIS_DOT11_MEDIA_IN_USE = 2150899713;
export const ERROR_NDIS_DOT11_POWER_STATE_INVALID = 2150899714;
export const ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = 2150899715;
export const ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = 2150899716;
export const ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = 2150899717;
export const ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = 2150899718;
export const ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = 2150899719;
export const ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED = 2150899720;
export const ERROR_NDIS_INDICATION_REQUIRED = 3407873;
export const ERROR_NDIS_OFFLOAD_POLICY = 3224637455;
export const ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = 3224637458;
export const ERROR_NDIS_OFFLOAD_PATH_REJECTED = 3224637459;
export const ERROR_HV_INVALID_HYPERCALL_CODE = 3224698882;
export const ERROR_HV_INVALID_HYPERCALL_INPUT = 3224698883;
export const ERROR_HV_INVALID_ALIGNMENT = 3224698884;
export const ERROR_HV_INVALID_PARAMETER = 3224698885;
export const ERROR_HV_ACCESS_DENIED = 3224698886;
export const ERROR_HV_INVALID_PARTITION_STATE = 3224698887;
export const ERROR_HV_OPERATION_DENIED = 3224698888;
export const ERROR_HV_UNKNOWN_PROPERTY = 3224698889;
export const ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = 3224698890;
export const ERROR_HV_INSUFFICIENT_MEMORY = 3224698891;
export const ERROR_HV_PARTITION_TOO_DEEP = 3224698892;
export const ERROR_HV_INVALID_PARTITION_ID = 3224698893;
export const ERROR_HV_INVALID_VP_INDEX = 3224698894;
export const ERROR_HV_INVALID_PORT_ID = 3224698897;
export const ERROR_HV_INVALID_CONNECTION_ID = 3224698898;
export const ERROR_HV_INSUFFICIENT_BUFFERS = 3224698899;
export const ERROR_HV_NOT_ACKNOWLEDGED = 3224698900;
export const ERROR_HV_INVALID_VP_STATE = 3224698901;
export const ERROR_HV_ACKNOWLEDGED = 3224698902;
export const ERROR_HV_INVALID_SAVE_RESTORE_STATE = 3224698903;
export const ERROR_HV_INVALID_SYNIC_STATE = 3224698904;
export const ERROR_HV_OBJECT_IN_USE = 3224698905;
export const ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = 3224698906;
export const ERROR_HV_NO_DATA = 3224698907;
export const ERROR_HV_INACTIVE = 3224698908;
export const ERROR_HV_NO_RESOURCES = 3224698909;
export const ERROR_HV_FEATURE_UNAVAILABLE = 3224698910;
export const ERROR_HV_INSUFFICIENT_BUFFER = 3224698931;
export const ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS = 3224698936;
export const ERROR_HV_CPUID_FEATURE_VALIDATION = 3224698940;
export const ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION = 3224698941;
export const ERROR_HV_PROCESSOR_STARTUP_TIMEOUT = 3224698942;
export const ERROR_HV_SMX_ENABLED = 3224698943;
export const ERROR_HV_INVALID_LP_INDEX = 3224698945;
export const ERROR_HV_INVALID_REGISTER_VALUE = 3224698960;
export const ERROR_HV_INVALID_VTL_STATE = 3224698961;
export const ERROR_HV_NX_NOT_DETECTED = 3224698965;
export const ERROR_HV_INVALID_DEVICE_ID = 3224698967;
export const ERROR_HV_INVALID_DEVICE_STATE = 3224698968;
export const ERROR_HV_PENDING_PAGE_REQUESTS = 3473497;
export const ERROR_HV_PAGE_REQUEST_INVALID = 3224698976;
export const ERROR_HV_INVALID_CPU_GROUP_ID = 3224698991;
export const ERROR_HV_INVALID_CPU_GROUP_STATE = 3224698992;
export const ERROR_HV_OPERATION_FAILED = 3224698993;
export const ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = 3224698994;
export const ERROR_HV_INSUFFICIENT_ROOT_MEMORY = 3224698995;
export const ERROR_HV_EVENT_BUFFER_ALREADY_FREED = 3224698996;
export const ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = 3224698997;
export const ERROR_HV_DEVICE_NOT_IN_DOMAIN = 3224698998;
export const ERROR_HV_NESTED_VM_EXIT = 3224698999;
export const ERROR_HV_MSR_ACCESS_FAILED = 3224699008;
export const ERROR_HV_NOT_PRESENT = 3224702976;
export const ERROR_VID_DUPLICATE_HANDLER = 3224829953;
export const ERROR_VID_TOO_MANY_HANDLERS = 3224829954;
export const ERROR_VID_QUEUE_FULL = 3224829955;
export const ERROR_VID_HANDLER_NOT_PRESENT = 3224829956;
export const ERROR_VID_INVALID_OBJECT_NAME = 3224829957;
export const ERROR_VID_PARTITION_NAME_TOO_LONG = 3224829958;
export const ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = 3224829959;
export const ERROR_VID_PARTITION_ALREADY_EXISTS = 3224829960;
export const ERROR_VID_PARTITION_DOES_NOT_EXIST = 3224829961;
export const ERROR_VID_PARTITION_NAME_NOT_FOUND = 3224829962;
export const ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = 3224829963;
export const ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = 3224829964;
export const ERROR_VID_MB_STILL_REFERENCED = 3224829965;
export const ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = 3224829966;
export const ERROR_VID_INVALID_NUMA_SETTINGS = 3224829967;
export const ERROR_VID_INVALID_NUMA_NODE_INDEX = 3224829968;
export const ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = 3224829969;
export const ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = 3224829970;
export const ERROR_VID_PAGE_RANGE_OVERFLOW = 3224829971;
export const ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = 3224829972;
export const ERROR_VID_INVALID_GPA_RANGE_HANDLE = 3224829973;
export const ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = 3224829974;
export const ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = 3224829975;
export const ERROR_VID_INVALID_PPM_HANDLE = 3224829976;
export const ERROR_VID_MBPS_ARE_LOCKED = 3224829977;
export const ERROR_VID_MESSAGE_QUEUE_CLOSED = 3224829978;
export const ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = 3224829979;
export const ERROR_VID_STOP_PENDING = 3224829980;
export const ERROR_VID_INVALID_PROCESSOR_STATE = 3224829981;
export const ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = 3224829982;
export const ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = 3224829983;
export const ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = 3224829984;
export const ERROR_VID_MMIO_RANGE_DESTROYED = 3224829985;
export const ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = 3224829986;
export const ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = 3224829987;
export const ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = 3224829988;
export const ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = 3224829989;
export const ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = 3224829990;
export const ERROR_VID_SAVED_STATE_CORRUPT = 3224829991;
export const ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = 3224829992;
export const ERROR_VID_SAVED_STATE_INCOMPATIBLE = 3224829993;
export const ERROR_VID_VTL_ACCESS_DENIED = 3224829994;
export const ERROR_VMCOMPUTE_TERMINATED_DURING_START = 3224830208;
export const ERROR_VMCOMPUTE_IMAGE_MISMATCH = 3224830209;
export const ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED = 3224830210;
export const ERROR_VMCOMPUTE_OPERATION_PENDING = 3224830211;
export const ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS = 3224830212;
export const ERROR_VMCOMPUTE_INVALID_STATE = 3224830213;
export const ERROR_VMCOMPUTE_UNEXPECTED_EXIT = 3224830214;
export const ERROR_VMCOMPUTE_TERMINATED = 3224830215;
export const ERROR_VMCOMPUTE_CONNECT_FAILED = 3224830216;
export const ERROR_VMCOMPUTE_TIMEOUT = 3224830217;
export const ERROR_VMCOMPUTE_CONNECTION_CLOSED = 3224830218;
export const ERROR_VMCOMPUTE_UNKNOWN_MESSAGE = 3224830219;
export const ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION = 3224830220;
export const ERROR_VMCOMPUTE_INVALID_JSON = 3224830221;
export const ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND = 3224830222;
export const ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS = 3224830223;
export const ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED = 3224830224;
export const ERROR_VMCOMPUTE_PROTOCOL_ERROR = 3224830225;
export const ERROR_VMCOMPUTE_INVALID_LAYER = 3224830226;
export const ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED = 3224830227;
export const ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND = 3224830464;
export const ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = 2151088129;
export const ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND = 3224830976;
export const ERROR_VSMB_SAVED_STATE_CORRUPT = 3224830977;
export const ERROR_VOLMGR_INCOMPLETE_REGENERATION = 2151153665;
export const ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = 2151153666;
export const ERROR_VOLMGR_DATABASE_FULL = 3224895489;
export const ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = 3224895490;
export const ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = 3224895491;
export const ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = 3224895492;
export const ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = 3224895493;
export const ERROR_VOLMGR_DISK_DUPLICATE = 3224895494;
export const ERROR_VOLMGR_DISK_DYNAMIC = 3224895495;
export const ERROR_VOLMGR_DISK_ID_INVALID = 3224895496;
export const ERROR_VOLMGR_DISK_INVALID = 3224895497;
export const ERROR_VOLMGR_DISK_LAST_VOTER = 3224895498;
export const ERROR_VOLMGR_DISK_LAYOUT_INVALID = 3224895499;
export const ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = 3224895500;
export const ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = 3224895501;
export const ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = 3224895502;
export const ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = 3224895503;
export const ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = 3224895504;
export const ERROR_VOLMGR_DISK_MISSING = 3224895505;
export const ERROR_VOLMGR_DISK_NOT_EMPTY = 3224895506;
export const ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = 3224895507;
export const ERROR_VOLMGR_DISK_REVECTORING_FAILED = 3224895508;
export const ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = 3224895509;
export const ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = 3224895510;
export const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = 3224895511;
export const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = 3224895512;
export const ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = 3224895513;
export const ERROR_VOLMGR_EXTENT_ALREADY_USED = 3224895514;
export const ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = 3224895515;
export const ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = 3224895516;
export const ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = 3224895517;
export const ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = 3224895518;
export const ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = 3224895519;
export const ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = 3224895520;
export const ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = 3224895521;
export const ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = 3224895522;
export const ERROR_VOLMGR_MEMBER_IN_SYNC = 3224895523;
export const ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = 3224895524;
export const ERROR_VOLMGR_MEMBER_INDEX_INVALID = 3224895525;
export const ERROR_VOLMGR_MEMBER_MISSING = 3224895526;
export const ERROR_VOLMGR_MEMBER_NOT_DETACHED = 3224895527;
export const ERROR_VOLMGR_MEMBER_REGENERATING = 3224895528;
export const ERROR_VOLMGR_ALL_DISKS_FAILED = 3224895529;
export const ERROR_VOLMGR_NO_REGISTERED_USERS = 3224895530;
export const ERROR_VOLMGR_NO_SUCH_USER = 3224895531;
export const ERROR_VOLMGR_NOTIFICATION_RESET = 3224895532;
export const ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = 3224895533;
export const ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = 3224895534;
export const ERROR_VOLMGR_PACK_DUPLICATE = 3224895535;
export const ERROR_VOLMGR_PACK_ID_INVALID = 3224895536;
export const ERROR_VOLMGR_PACK_INVALID = 3224895537;
export const ERROR_VOLMGR_PACK_NAME_INVALID = 3224895538;
export const ERROR_VOLMGR_PACK_OFFLINE = 3224895539;
export const ERROR_VOLMGR_PACK_HAS_QUORUM = 3224895540;
export const ERROR_VOLMGR_PACK_WITHOUT_QUORUM = 3224895541;
export const ERROR_VOLMGR_PARTITION_STYLE_INVALID = 3224895542;
export const ERROR_VOLMGR_PARTITION_UPDATE_FAILED = 3224895543;
export const ERROR_VOLMGR_PLEX_IN_SYNC = 3224895544;
export const ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = 3224895545;
export const ERROR_VOLMGR_PLEX_INDEX_INVALID = 3224895546;
export const ERROR_VOLMGR_PLEX_LAST_ACTIVE = 3224895547;
export const ERROR_VOLMGR_PLEX_MISSING = 3224895548;
export const ERROR_VOLMGR_PLEX_REGENERATING = 3224895549;
export const ERROR_VOLMGR_PLEX_TYPE_INVALID = 3224895550;
export const ERROR_VOLMGR_PLEX_NOT_RAID5 = 3224895551;
export const ERROR_VOLMGR_PLEX_NOT_SIMPLE = 3224895552;
export const ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = 3224895553;
export const ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = 3224895554;
export const ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = 3224895555;
export const ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = 3224895556;
export const ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = 3224895557;
export const ERROR_VOLMGR_VOLUME_ID_INVALID = 3224895558;
export const ERROR_VOLMGR_VOLUME_LENGTH_INVALID = 3224895559;
export const ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = 3224895560;
export const ERROR_VOLMGR_VOLUME_NOT_MIRRORED = 3224895561;
export const ERROR_VOLMGR_VOLUME_NOT_RETAINED = 3224895562;
export const ERROR_VOLMGR_VOLUME_OFFLINE = 3224895563;
export const ERROR_VOLMGR_VOLUME_RETAINED = 3224895564;
export const ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = 3224895565;
export const ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = 3224895566;
export const ERROR_VOLMGR_BAD_BOOT_DISK = 3224895567;
export const ERROR_VOLMGR_PACK_CONFIG_OFFLINE = 3224895568;
export const ERROR_VOLMGR_PACK_CONFIG_ONLINE = 3224895569;
export const ERROR_VOLMGR_NOT_PRIMARY_PACK = 3224895570;
export const ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = 3224895571;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = 3224895572;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = 3224895573;
export const ERROR_VOLMGR_VOLUME_MIRRORED = 3224895574;
export const ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = 3224895575;
export const ERROR_VOLMGR_NO_VALID_LOG_COPIES = 3224895576;
export const ERROR_VOLMGR_PRIMARY_PACK_PRESENT = 3224895577;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = 3224895578;
export const ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = 3224895579;
export const ERROR_VOLMGR_RAID5_NOT_SUPPORTED = 3224895580;
export const ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = 2151219201;
export const ERROR_BCD_TOO_MANY_ELEMENTS = 3224961026;
export const ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = 2151219203;
export const ERROR_VHD_DRIVE_FOOTER_MISSING = 3225026561;
export const ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = 3225026562;
export const ERROR_VHD_DRIVE_FOOTER_CORRUPT = 3225026563;
export const ERROR_VHD_FORMAT_UNKNOWN = 3225026564;
export const ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = 3225026565;
export const ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = 3225026566;
export const ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = 3225026567;
export const ERROR_VHD_SPARSE_HEADER_CORRUPT = 3225026568;
export const ERROR_VHD_BLOCK_ALLOCATION_FAILURE = 3225026569;
export const ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = 3225026570;
export const ERROR_VHD_INVALID_BLOCK_SIZE = 3225026571;
export const ERROR_VHD_BITMAP_MISMATCH = 3225026572;
export const ERROR_VHD_PARENT_VHD_NOT_FOUND = 3225026573;
export const ERROR_VHD_CHILD_PARENT_ID_MISMATCH = 3225026574;
export const ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = 3225026575;
export const ERROR_VHD_METADATA_READ_FAILURE = 3225026576;
export const ERROR_VHD_METADATA_WRITE_FAILURE = 3225026577;
export const ERROR_VHD_INVALID_SIZE = 3225026578;
export const ERROR_VHD_INVALID_FILE_SIZE = 3225026579;
export const ERROR_VIRTDISK_PROVIDER_NOT_FOUND = 3225026580;
export const ERROR_VIRTDISK_NOT_VIRTUAL_DISK = 3225026581;
export const ERROR_VHD_PARENT_VHD_ACCESS_DENIED = 3225026582;
export const ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = 3225026583;
export const ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = 3225026584;
export const ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = 3225026585;
export const ERROR_VIRTUAL_DISK_LIMITATION = 3225026586;
export const ERROR_VHD_INVALID_TYPE = 3225026587;
export const ERROR_VHD_INVALID_STATE = 3225026588;
export const ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = 3225026589;
export const ERROR_VIRTDISK_DISK_ALREADY_OWNED = 3225026590;
export const ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE = 3225026591;
export const ERROR_CTLOG_TRACKING_NOT_INITIALIZED = 3225026592;
export const ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = 3225026593;
export const ERROR_CTLOG_VHD_CHANGED_OFFLINE = 3225026594;
export const ERROR_CTLOG_INVALID_TRACKING_STATE = 3225026595;
export const ERROR_CTLOG_INCONSISTENT_TRACKING_FILE = 3225026596;
export const ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA = 3225026597;
export const ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = 3225026598;
export const ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = 3225026599;
export const ERROR_VHD_METADATA_FULL = 3225026600;
export const ERROR_VHD_INVALID_CHANGE_TRACKING_ID = 3225026601;
export const ERROR_VHD_CHANGE_TRACKING_DISABLED = 3225026602;
export const ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION = 3225026608;
export const ERROR_QUERY_STORAGE_ERROR = 2151284737;

// Structs

export type IcmpHandle = Deno.PointerValue;

export type HIFTIMESTAMPCHANGE = Deno.PointerValue;

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_OPTION_INFORMATION32 (size: 16)
 */
export interface IP_OPTION_INFORMATION32 {
  /** u8 */
  Ttl: number;
  /** u8 */
  Tos: number;
  /** u8 */
  Flags: number;
  /** u8 */
  OptionsSize: number;
  /** ptr */
  OptionsData: Deno.PointerValue | Uint8Array;
}

export const sizeofIP_OPTION_INFORMATION32 = 16;

export function allocIP_OPTION_INFORMATION32(data?: Partial<IP_OPTION_INFORMATION32>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_OPTION_INFORMATION32);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Ttl !== undefined) view.setUint8(0, Number(data.Ttl));
  // 0x01: u8
  if (data?.Tos !== undefined) view.setUint8(1, Number(data.Tos));
  // 0x02: u8
  if (data?.Flags !== undefined) view.setUint8(2, Number(data.Flags));
  // 0x03: u8
  if (data?.OptionsSize !== undefined) view.setUint8(3, Number(data.OptionsSize));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OptionsData !== undefined) view.setBigUint64(8, data.OptionsData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OptionsData))), true);
  return buf;
}

export class IP_OPTION_INFORMATION32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Ttl(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Tos(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get Flags(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get OptionsSize(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get OptionsData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set Ttl(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Tos(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set Flags(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set OptionsSize(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set OptionsData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.ICMP_ECHO_REPLY32 (size: 32)
 */
export interface ICMP_ECHO_REPLY32 {
  /** u32 */
  Address: number;
  /** u32 */
  Status: number;
  /** u32 */
  RoundTripTime: number;
  /** u16 */
  DataSize: number;
  /** u16 */
  Reserved: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_OPTION_INFORMATION32 */
  Options: Uint8Array | Deno.PointerValue;
}

export const sizeofICMP_ECHO_REPLY32 = 32;

export function allocICMP_ECHO_REPLY32(data?: Partial<ICMP_ECHO_REPLY32>): Uint8Array {
  const buf = new Uint8Array(sizeofICMP_ECHO_REPLY32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Address !== undefined) view.setUint32(0, Number(data.Address), true);
  // 0x04: u32
  if (data?.Status !== undefined) view.setUint32(4, Number(data.Status), true);
  // 0x08: u32
  if (data?.RoundTripTime !== undefined) view.setUint32(8, Number(data.RoundTripTime), true);
  // 0x0c: u16
  if (data?.DataSize !== undefined) view.setUint16(12, Number(data.DataSize), true);
  // 0x0e: u16
  if (data?.Reserved !== undefined) view.setUint16(14, Number(data.Reserved), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  // 0x18: pointer
  if (data?.Options !== undefined) view.setBigUint64(24, data.Options === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Options))), true);
  return buf;
}

export class ICMP_ECHO_REPLY32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Address(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Status(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get RoundTripTime(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get DataSize(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get Reserved(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Options(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Address(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Status(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set RoundTripTime(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set DataSize(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set Reserved(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Options(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_OPTION_INFORMATION (size: 16)
 */
export interface IP_OPTION_INFORMATION {
  /** u8 */
  Ttl: number;
  /** u8 */
  Tos: number;
  /** u8 */
  Flags: number;
  /** u8 */
  OptionsSize: number;
  /** ptr */
  OptionsData: Deno.PointerValue | Uint8Array;
}

export const sizeofIP_OPTION_INFORMATION = 16;

export function allocIP_OPTION_INFORMATION(data?: Partial<IP_OPTION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_OPTION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Ttl !== undefined) view.setUint8(0, Number(data.Ttl));
  // 0x01: u8
  if (data?.Tos !== undefined) view.setUint8(1, Number(data.Tos));
  // 0x02: u8
  if (data?.Flags !== undefined) view.setUint8(2, Number(data.Flags));
  // 0x03: u8
  if (data?.OptionsSize !== undefined) view.setUint8(3, Number(data.OptionsSize));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OptionsData !== undefined) view.setBigUint64(8, data.OptionsData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OptionsData))), true);
  return buf;
}

export class IP_OPTION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Ttl(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Tos(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get Flags(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get OptionsSize(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get OptionsData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set Ttl(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Tos(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set Flags(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set OptionsSize(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set OptionsData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.ICMP_ECHO_REPLY (size: 32)
 */
export interface ICMP_ECHO_REPLY {
  /** u32 */
  Address: number;
  /** u32 */
  Status: number;
  /** u32 */
  RoundTripTime: number;
  /** u16 */
  DataSize: number;
  /** u16 */
  Reserved: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_OPTION_INFORMATION */
  Options: Uint8Array | Deno.PointerValue;
}

export const sizeofICMP_ECHO_REPLY = 32;

export function allocICMP_ECHO_REPLY(data?: Partial<ICMP_ECHO_REPLY>): Uint8Array {
  const buf = new Uint8Array(sizeofICMP_ECHO_REPLY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Address !== undefined) view.setUint32(0, Number(data.Address), true);
  // 0x04: u32
  if (data?.Status !== undefined) view.setUint32(4, Number(data.Status), true);
  // 0x08: u32
  if (data?.RoundTripTime !== undefined) view.setUint32(8, Number(data.RoundTripTime), true);
  // 0x0c: u16
  if (data?.DataSize !== undefined) view.setUint16(12, Number(data.DataSize), true);
  // 0x0e: u16
  if (data?.Reserved !== undefined) view.setUint16(14, Number(data.Reserved), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  // 0x18: pointer
  if (data?.Options !== undefined) view.setBigUint64(24, data.Options === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Options))), true);
  return buf;
}

export class ICMP_ECHO_REPLYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Address(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Status(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get RoundTripTime(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get DataSize(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get Reserved(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Options(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Address(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Status(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set RoundTripTime(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set DataSize(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set Reserved(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Options(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IPV6_ADDRESS_EX (size: 24)
 */
export interface IPV6_ADDRESS_EX {
  /** u16 */
  sin6_port: number;
  /** u32 */
  sin6_flowinfo: number;
  /** array */
  sin6_addr: Deno.PointerValue;
  /** u32 */
  sin6_scope_id: number;
}

export const sizeofIPV6_ADDRESS_EX = 24;

export function allocIPV6_ADDRESS_EX(data?: Partial<IPV6_ADDRESS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV6_ADDRESS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sin6_port !== undefined) view.setUint16(0, Number(data.sin6_port), true);
  // 0x02: u32
  if (data?.sin6_flowinfo !== undefined) view.setUint32(2, Number(data.sin6_flowinfo), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.sin6_addr !== undefined) view.setBigUint64(8, data.sin6_addr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sin6_addr))), true);
  // 0x10: u32
  if (data?.sin6_scope_id !== undefined) view.setUint32(16, Number(data.sin6_scope_id), true);
  // 0x14: pad4
  return buf;
}

export class IPV6_ADDRESS_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get sin6_port(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get sin6_flowinfo(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get sin6_addr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get sin6_scope_id(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u16
  set sin6_port(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set sin6_flowinfo(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set sin6_addr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set sin6_scope_id(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.ICMPV6_ECHO_REPLY_LH (size: 16)
 */
export interface ICMPV6_ECHO_REPLY_LH {
  /** Windows.Win32.NetworkManagement.IpHelper.IPV6_ADDRESS_EX */
  Address: Uint8Array | Deno.PointerValue;
  /** u32 */
  Status: number;
  /** u32 */
  RoundTripTime: number;
}

export const sizeofICMPV6_ECHO_REPLY_LH = 16;

export function allocICMPV6_ECHO_REPLY_LH(data?: Partial<ICMPV6_ECHO_REPLY_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofICMPV6_ECHO_REPLY_LH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x08: u32
  if (data?.Status !== undefined) view.setUint32(8, Number(data.Status), true);
  // 0x0c: u32
  if (data?.RoundTripTime !== undefined) view.setUint32(12, Number(data.RoundTripTime), true);
  return buf;
}

export class ICMPV6_ECHO_REPLY_LHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Status(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get RoundTripTime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Status(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set RoundTripTime(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.ARP_SEND_REPLY (size: 8)
 */
export interface ARP_SEND_REPLY {
  /** u32 */
  DestAddress: number;
  /** u32 */
  SrcAddress: number;
}

export const sizeofARP_SEND_REPLY = 8;

export function allocARP_SEND_REPLY(data?: Partial<ARP_SEND_REPLY>): Uint8Array {
  const buf = new Uint8Array(sizeofARP_SEND_REPLY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DestAddress !== undefined) view.setUint32(0, Number(data.DestAddress), true);
  // 0x04: u32
  if (data?.SrcAddress !== undefined) view.setUint32(4, Number(data.SrcAddress), true);
  return buf;
}

export class ARP_SEND_REPLYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DestAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SrcAddress(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set DestAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SrcAddress(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_RESERVE_PORT_RANGE (size: 8)
 */
export interface TCP_RESERVE_PORT_RANGE {
  /** u16 */
  UpperRange: number;
  /** u16 */
  LowerRange: number;
}

export const sizeofTCP_RESERVE_PORT_RANGE = 8;

export function allocTCP_RESERVE_PORT_RANGE(data?: Partial<TCP_RESERVE_PORT_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_RESERVE_PORT_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UpperRange !== undefined) view.setUint16(0, Number(data.UpperRange), true);
  // 0x02: u16
  if (data?.LowerRange !== undefined) view.setUint16(2, Number(data.LowerRange), true);
  // 0x04: pad4
  return buf;
}

export class TCP_RESERVE_PORT_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UpperRange(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get LowerRange(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set UpperRange(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set LowerRange(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_INDEX_MAP (size: 16)
 */
export interface IP_ADAPTER_INDEX_MAP {
  /** u32 */
  Index: number;
  /** array */
  Name: Deno.PointerValue;
}

export const sizeofIP_ADAPTER_INDEX_MAP = 16;

export function allocIP_ADAPTER_INDEX_MAP(data?: Partial<IP_ADAPTER_INDEX_MAP>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_INDEX_MAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Index !== undefined) view.setUint32(0, Number(data.Index), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  return buf;
}

export class IP_ADAPTER_INDEX_MAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Index(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Index(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_INTERFACE_INFO (size: 16)
 */
export interface IP_INTERFACE_INFO {
  /** i32 */
  NumAdapters: number;
  /** array */
  Adapter: Deno.PointerValue;
}

export const sizeofIP_INTERFACE_INFO = 16;

export function allocIP_INTERFACE_INFO(data?: Partial<IP_INTERFACE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_INTERFACE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.NumAdapters !== undefined) view.setInt32(0, Number(data.NumAdapters), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Adapter !== undefined) view.setBigUint64(8, data.Adapter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Adapter))), true);
  return buf;
}

export class IP_INTERFACE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get NumAdapters(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Adapter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set NumAdapters(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Adapter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_UNIDIRECTIONAL_ADAPTER_ADDRESS (size: 16)
 */
export interface IP_UNIDIRECTIONAL_ADAPTER_ADDRESS {
  /** u32 */
  NumAdapters: number;
  /** array */
  Address: Deno.PointerValue;
}

export const sizeofIP_UNIDIRECTIONAL_ADAPTER_ADDRESS = 16;

export function allocIP_UNIDIRECTIONAL_ADAPTER_ADDRESS(data?: Partial<IP_UNIDIRECTIONAL_ADAPTER_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_UNIDIRECTIONAL_ADAPTER_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumAdapters !== undefined) view.setUint32(0, Number(data.NumAdapters), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  return buf;
}

export class IP_UNIDIRECTIONAL_ADAPTER_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumAdapters(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumAdapters(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_ORDER_MAP (size: 16)
 */
export interface IP_ADAPTER_ORDER_MAP {
  /** u32 */
  NumAdapters: number;
  /** array */
  AdapterOrder: Deno.PointerValue;
}

export const sizeofIP_ADAPTER_ORDER_MAP = 16;

export function allocIP_ADAPTER_ORDER_MAP(data?: Partial<IP_ADAPTER_ORDER_MAP>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_ORDER_MAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumAdapters !== undefined) view.setUint32(0, Number(data.NumAdapters), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AdapterOrder !== undefined) view.setBigUint64(8, data.AdapterOrder === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdapterOrder))), true);
  return buf;
}

export class IP_ADAPTER_ORDER_MAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumAdapters(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get AdapterOrder(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumAdapters(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set AdapterOrder(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_MCAST_COUNTER_INFO (size: 32)
 */
export interface IP_MCAST_COUNTER_INFO {
  /** u64 */
  InMcastOctets: Deno.PointerValue;
  /** u64 */
  OutMcastOctets: Deno.PointerValue;
  /** u64 */
  InMcastPkts: Deno.PointerValue;
  /** u64 */
  OutMcastPkts: Deno.PointerValue;
}

export const sizeofIP_MCAST_COUNTER_INFO = 32;

export function allocIP_MCAST_COUNTER_INFO(data?: Partial<IP_MCAST_COUNTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_MCAST_COUNTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.InMcastOctets !== undefined) view.setBigUint64(0, BigInt(data.InMcastOctets), true);
  // 0x08: u64
  if (data?.OutMcastOctets !== undefined) view.setBigUint64(8, BigInt(data.OutMcastOctets), true);
  // 0x10: u64
  if (data?.InMcastPkts !== undefined) view.setBigUint64(16, BigInt(data.InMcastPkts), true);
  // 0x18: u64
  if (data?.OutMcastPkts !== undefined) view.setBigUint64(24, BigInt(data.OutMcastPkts), true);
  return buf;
}

export class IP_MCAST_COUNTER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get InMcastOctets(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get OutMcastOctets(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get InMcastPkts(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get OutMcastPkts(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: u64
  set InMcastOctets(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set OutMcastOctets(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set InMcastPkts(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set OutMcastPkts(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * _Info_e__Struct (size: 8)
 */
export interface _Info_e__Struct {
  /** u64 */
  _bitfield: Deno.PointerValue;
}

export const sizeof_Info_e__Struct = 8;

export function alloc_Info_e__Struct(data?: Partial<_Info_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Info_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?._bitfield !== undefined) view.setBigUint64(0, BigInt(data._bitfield), true);
  return buf;
}

export class _Info_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get _bitfield(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: u64
  set _bitfield(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH (size: 16)
 */
export interface NET_LUID_LH {
  /** u64 */
  Value: Deno.PointerValue;
  /** _Info_e__Struct */
  Info: Uint8Array | Deno.PointerValue;
}

export const sizeofNET_LUID_LH = 16;

export function allocNET_LUID_LH(data?: Partial<NET_LUID_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_LUID_LH);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Value !== undefined) view.setBigUint64(0, BigInt(data.Value), true);
  // 0x08: pointer
  if (data?.Info !== undefined) view.setBigUint64(8, data.Info === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Info))), true);
  return buf;
}

export class NET_LUID_LHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Value(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get Info(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set Value(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set Info(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _InterfaceAndOperStatusFlags_e__Struct (size: 8)
 */
export interface _InterfaceAndOperStatusFlags_e__Struct {
  /** u8 */
  _bitfield: number;
}

export const sizeof_InterfaceAndOperStatusFlags_e__Struct = 8;

export function alloc_InterfaceAndOperStatusFlags_e__Struct(data?: Partial<_InterfaceAndOperStatusFlags_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_InterfaceAndOperStatusFlags_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

export class _InterfaceAndOperStatusFlags_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get _bitfield(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set _bitfield(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IF_ROW2 (size: 296)
 */
export interface MIB_IF_ROW2 {
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  InterfaceLuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  InterfaceIndex: number;
  /** System.Guid */
  InterfaceGuid: Uint8Array | Deno.PointerValue;
  /** array */
  Alias: Deno.PointerValue;
  /** array */
  Description: Deno.PointerValue;
  /** u32 */
  PhysicalAddressLength: number;
  /** array */
  PhysicalAddress: Deno.PointerValue;
  /** array */
  PermanentPhysicalAddress: Deno.PointerValue;
  /** u32 */
  Mtu: number;
  /** u32 */
  Type: number;
  /** Windows.Win32.NetworkManagement.Ndis.TUNNEL_TYPE */
  TunnelType: TUNNEL_TYPE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_MEDIUM */
  MediaType: NDIS_MEDIUM;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PHYSICAL_MEDIUM */
  PhysicalMediumType: NDIS_PHYSICAL_MEDIUM;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_ACCESS_TYPE */
  AccessType: NET_IF_ACCESS_TYPE;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_DIRECTION_TYPE */
  DirectionType: NET_IF_DIRECTION_TYPE;
  /** _InterfaceAndOperStatusFlags_e__Struct */
  InterfaceAndOperStatusFlags: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Ndis.IF_OPER_STATUS */
  OperStatus: IF_OPER_STATUS;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_ADMIN_STATUS */
  AdminStatus: NET_IF_ADMIN_STATUS;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_MEDIA_CONNECT_STATE */
  MediaConnectState: NET_IF_MEDIA_CONNECT_STATE;
  /** System.Guid */
  NetworkGuid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_CONNECTION_TYPE */
  ConnectionType: NET_IF_CONNECTION_TYPE;
  /** u64 */
  TransmitLinkSpeed: Deno.PointerValue;
  /** u64 */
  ReceiveLinkSpeed: Deno.PointerValue;
  /** u64 */
  InOctets: Deno.PointerValue;
  /** u64 */
  InUcastPkts: Deno.PointerValue;
  /** u64 */
  InNUcastPkts: Deno.PointerValue;
  /** u64 */
  InDiscards: Deno.PointerValue;
  /** u64 */
  InErrors: Deno.PointerValue;
  /** u64 */
  InUnknownProtos: Deno.PointerValue;
  /** u64 */
  InUcastOctets: Deno.PointerValue;
  /** u64 */
  InMulticastOctets: Deno.PointerValue;
  /** u64 */
  InBroadcastOctets: Deno.PointerValue;
  /** u64 */
  OutOctets: Deno.PointerValue;
  /** u64 */
  OutUcastPkts: Deno.PointerValue;
  /** u64 */
  OutNUcastPkts: Deno.PointerValue;
  /** u64 */
  OutDiscards: Deno.PointerValue;
  /** u64 */
  OutErrors: Deno.PointerValue;
  /** u64 */
  OutUcastOctets: Deno.PointerValue;
  /** u64 */
  OutMulticastOctets: Deno.PointerValue;
  /** u64 */
  OutBroadcastOctets: Deno.PointerValue;
  /** u64 */
  OutQLen: Deno.PointerValue;
}

export const sizeofMIB_IF_ROW2 = 296;

export function allocMIB_IF_ROW2(data?: Partial<MIB_IF_ROW2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IF_ROW2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InterfaceLuid !== undefined) view.setBigUint64(0, data.InterfaceLuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceLuid))), true);
  // 0x08: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(8, Number(data.InterfaceIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.InterfaceGuid !== undefined) view.setBigUint64(16, data.InterfaceGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceGuid))), true);
  // 0x18: pointer
  if (data?.Alias !== undefined) view.setBigUint64(24, data.Alias === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Alias))), true);
  // 0x20: pointer
  if (data?.Description !== undefined) view.setBigUint64(32, data.Description === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Description))), true);
  // 0x28: u32
  if (data?.PhysicalAddressLength !== undefined) view.setUint32(40, Number(data.PhysicalAddressLength), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.PhysicalAddress !== undefined) view.setBigUint64(48, data.PhysicalAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhysicalAddress))), true);
  // 0x38: pointer
  if (data?.PermanentPhysicalAddress !== undefined) view.setBigUint64(56, data.PermanentPhysicalAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PermanentPhysicalAddress))), true);
  // 0x40: u32
  if (data?.Mtu !== undefined) view.setUint32(64, Number(data.Mtu), true);
  // 0x44: u32
  if (data?.Type !== undefined) view.setUint32(68, Number(data.Type), true);
  // 0x48: i32
  if (data?.TunnelType !== undefined) view.setInt32(72, Number(data.TunnelType), true);
  // 0x4c: i32
  if (data?.MediaType !== undefined) view.setInt32(76, Number(data.MediaType), true);
  // 0x50: i32
  if (data?.PhysicalMediumType !== undefined) view.setInt32(80, Number(data.PhysicalMediumType), true);
  // 0x54: i32
  if (data?.AccessType !== undefined) view.setInt32(84, Number(data.AccessType), true);
  // 0x58: i32
  if (data?.DirectionType !== undefined) view.setInt32(88, Number(data.DirectionType), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.InterfaceAndOperStatusFlags !== undefined) view.setBigUint64(96, data.InterfaceAndOperStatusFlags === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceAndOperStatusFlags))), true);
  // 0x68: i32
  if (data?.OperStatus !== undefined) view.setInt32(104, Number(data.OperStatus), true);
  // 0x6c: i32
  if (data?.AdminStatus !== undefined) view.setInt32(108, Number(data.AdminStatus), true);
  // 0x70: i32
  if (data?.MediaConnectState !== undefined) view.setInt32(112, Number(data.MediaConnectState), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.NetworkGuid !== undefined) view.setBigUint64(120, data.NetworkGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NetworkGuid))), true);
  // 0x80: i32
  if (data?.ConnectionType !== undefined) view.setInt32(128, Number(data.ConnectionType), true);
  // 0x84: pad4
  // 0x88: u64
  if (data?.TransmitLinkSpeed !== undefined) view.setBigUint64(136, BigInt(data.TransmitLinkSpeed), true);
  // 0x90: u64
  if (data?.ReceiveLinkSpeed !== undefined) view.setBigUint64(144, BigInt(data.ReceiveLinkSpeed), true);
  // 0x98: u64
  if (data?.InOctets !== undefined) view.setBigUint64(152, BigInt(data.InOctets), true);
  // 0xa0: u64
  if (data?.InUcastPkts !== undefined) view.setBigUint64(160, BigInt(data.InUcastPkts), true);
  // 0xa8: u64
  if (data?.InNUcastPkts !== undefined) view.setBigUint64(168, BigInt(data.InNUcastPkts), true);
  // 0xb0: u64
  if (data?.InDiscards !== undefined) view.setBigUint64(176, BigInt(data.InDiscards), true);
  // 0xb8: u64
  if (data?.InErrors !== undefined) view.setBigUint64(184, BigInt(data.InErrors), true);
  // 0xc0: u64
  if (data?.InUnknownProtos !== undefined) view.setBigUint64(192, BigInt(data.InUnknownProtos), true);
  // 0xc8: u64
  if (data?.InUcastOctets !== undefined) view.setBigUint64(200, BigInt(data.InUcastOctets), true);
  // 0xd0: u64
  if (data?.InMulticastOctets !== undefined) view.setBigUint64(208, BigInt(data.InMulticastOctets), true);
  // 0xd8: u64
  if (data?.InBroadcastOctets !== undefined) view.setBigUint64(216, BigInt(data.InBroadcastOctets), true);
  // 0xe0: u64
  if (data?.OutOctets !== undefined) view.setBigUint64(224, BigInt(data.OutOctets), true);
  // 0xe8: u64
  if (data?.OutUcastPkts !== undefined) view.setBigUint64(232, BigInt(data.OutUcastPkts), true);
  // 0xf0: u64
  if (data?.OutNUcastPkts !== undefined) view.setBigUint64(240, BigInt(data.OutNUcastPkts), true);
  // 0xf8: u64
  if (data?.OutDiscards !== undefined) view.setBigUint64(248, BigInt(data.OutDiscards), true);
  // 0x100: u64
  if (data?.OutErrors !== undefined) view.setBigUint64(256, BigInt(data.OutErrors), true);
  // 0x108: u64
  if (data?.OutUcastOctets !== undefined) view.setBigUint64(264, BigInt(data.OutUcastOctets), true);
  // 0x110: u64
  if (data?.OutMulticastOctets !== undefined) view.setBigUint64(272, BigInt(data.OutMulticastOctets), true);
  // 0x118: u64
  if (data?.OutBroadcastOctets !== undefined) view.setBigUint64(280, BigInt(data.OutBroadcastOctets), true);
  // 0x120: u64
  if (data?.OutQLen !== undefined) view.setBigUint64(288, BigInt(data.OutQLen), true);
  return buf;
}

export class MIB_IF_ROW2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InterfaceLuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get InterfaceIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get InterfaceGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Alias(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get PhysicalAddressLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get PhysicalAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get PermanentPhysicalAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get Mtu(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get Type(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: i32
  get TunnelType(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: i32
  get MediaType(): number {
    return this.view.getInt32(76, true);
  }

  // 0x50: i32
  get PhysicalMediumType(): number {
    return this.view.getInt32(80, true);
  }

  // 0x54: i32
  get AccessType(): number {
    return this.view.getInt32(84, true);
  }

  // 0x58: i32
  get DirectionType(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get InterfaceAndOperStatusFlags(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: i32
  get OperStatus(): number {
    return this.view.getInt32(104, true);
  }

  // 0x6c: i32
  get AdminStatus(): number {
    return this.view.getInt32(108, true);
  }

  // 0x70: i32
  get MediaConnectState(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get NetworkGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: i32
  get ConnectionType(): number {
    return this.view.getInt32(128, true);
  }

  // 0x84: pad4

  // 0x88: u64
  get TransmitLinkSpeed(): Deno.PointerValue {
    return Number(this.view.getBigUint64(136, true));
  }

  // 0x90: u64
  get ReceiveLinkSpeed(): Deno.PointerValue {
    return Number(this.view.getBigUint64(144, true));
  }

  // 0x98: u64
  get InOctets(): Deno.PointerValue {
    return Number(this.view.getBigUint64(152, true));
  }

  // 0xa0: u64
  get InUcastPkts(): Deno.PointerValue {
    return Number(this.view.getBigUint64(160, true));
  }

  // 0xa8: u64
  get InNUcastPkts(): Deno.PointerValue {
    return Number(this.view.getBigUint64(168, true));
  }

  // 0xb0: u64
  get InDiscards(): Deno.PointerValue {
    return Number(this.view.getBigUint64(176, true));
  }

  // 0xb8: u64
  get InErrors(): Deno.PointerValue {
    return Number(this.view.getBigUint64(184, true));
  }

  // 0xc0: u64
  get InUnknownProtos(): Deno.PointerValue {
    return Number(this.view.getBigUint64(192, true));
  }

  // 0xc8: u64
  get InUcastOctets(): Deno.PointerValue {
    return Number(this.view.getBigUint64(200, true));
  }

  // 0xd0: u64
  get InMulticastOctets(): Deno.PointerValue {
    return Number(this.view.getBigUint64(208, true));
  }

  // 0xd8: u64
  get InBroadcastOctets(): Deno.PointerValue {
    return Number(this.view.getBigUint64(216, true));
  }

  // 0xe0: u64
  get OutOctets(): Deno.PointerValue {
    return Number(this.view.getBigUint64(224, true));
  }

  // 0xe8: u64
  get OutUcastPkts(): Deno.PointerValue {
    return Number(this.view.getBigUint64(232, true));
  }

  // 0xf0: u64
  get OutNUcastPkts(): Deno.PointerValue {
    return Number(this.view.getBigUint64(240, true));
  }

  // 0xf8: u64
  get OutDiscards(): Deno.PointerValue {
    return Number(this.view.getBigUint64(248, true));
  }

  // 0x100: u64
  get OutErrors(): Deno.PointerValue {
    return Number(this.view.getBigUint64(256, true));
  }

  // 0x108: u64
  get OutUcastOctets(): Deno.PointerValue {
    return Number(this.view.getBigUint64(264, true));
  }

  // 0x110: u64
  get OutMulticastOctets(): Deno.PointerValue {
    return Number(this.view.getBigUint64(272, true));
  }

  // 0x118: u64
  get OutBroadcastOctets(): Deno.PointerValue {
    return Number(this.view.getBigUint64(280, true));
  }

  // 0x120: u64
  get OutQLen(): Deno.PointerValue {
    return Number(this.view.getBigUint64(288, true));
  }

  // 0x00: pointer
  set InterfaceLuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set InterfaceIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set InterfaceGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Alias(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Description(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set PhysicalAddressLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set PhysicalAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set PermanentPhysicalAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set Mtu(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set Type(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: i32
  set TunnelType(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: i32
  set MediaType(value: number) {
    this.view.setInt32(76, value, true);
  }

  // 0x50: i32
  set PhysicalMediumType(value: number) {
    this.view.setInt32(80, value, true);
  }

  // 0x54: i32
  set AccessType(value: number) {
    this.view.setInt32(84, value, true);
  }

  // 0x58: i32
  set DirectionType(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set InterfaceAndOperStatusFlags(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: i32
  set OperStatus(value: number) {
    this.view.setInt32(104, value, true);
  }

  // 0x6c: i32
  set AdminStatus(value: number) {
    this.view.setInt32(108, value, true);
  }

  // 0x70: i32
  set MediaConnectState(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set NetworkGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: i32
  set ConnectionType(value: number) {
    this.view.setInt32(128, value, true);
  }

  // 0x84: pad4

  // 0x88: u64
  set TransmitLinkSpeed(value: Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(value), true);
  }

  // 0x90: u64
  set ReceiveLinkSpeed(value: Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(value), true);
  }

  // 0x98: u64
  set InOctets(value: Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(value), true);
  }

  // 0xa0: u64
  set InUcastPkts(value: Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(value), true);
  }

  // 0xa8: u64
  set InNUcastPkts(value: Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(value), true);
  }

  // 0xb0: u64
  set InDiscards(value: Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(value), true);
  }

  // 0xb8: u64
  set InErrors(value: Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(value), true);
  }

  // 0xc0: u64
  set InUnknownProtos(value: Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(value), true);
  }

  // 0xc8: u64
  set InUcastOctets(value: Deno.PointerValue) {
    this.view.setBigUint64(200, BigInt(value), true);
  }

  // 0xd0: u64
  set InMulticastOctets(value: Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(value), true);
  }

  // 0xd8: u64
  set InBroadcastOctets(value: Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(value), true);
  }

  // 0xe0: u64
  set OutOctets(value: Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(value), true);
  }

  // 0xe8: u64
  set OutUcastPkts(value: Deno.PointerValue) {
    this.view.setBigUint64(232, BigInt(value), true);
  }

  // 0xf0: u64
  set OutNUcastPkts(value: Deno.PointerValue) {
    this.view.setBigUint64(240, BigInt(value), true);
  }

  // 0xf8: u64
  set OutDiscards(value: Deno.PointerValue) {
    this.view.setBigUint64(248, BigInt(value), true);
  }

  // 0x100: u64
  set OutErrors(value: Deno.PointerValue) {
    this.view.setBigUint64(256, BigInt(value), true);
  }

  // 0x108: u64
  set OutUcastOctets(value: Deno.PointerValue) {
    this.view.setBigUint64(264, BigInt(value), true);
  }

  // 0x110: u64
  set OutMulticastOctets(value: Deno.PointerValue) {
    this.view.setBigUint64(272, BigInt(value), true);
  }

  // 0x118: u64
  set OutBroadcastOctets(value: Deno.PointerValue) {
    this.view.setBigUint64(280, BigInt(value), true);
  }

  // 0x120: u64
  set OutQLen(value: Deno.PointerValue) {
    this.view.setBigUint64(288, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IF_TABLE2 (size: 16)
 */
export interface MIB_IF_TABLE2 {
  /** u32 */
  NumEntries: number;
  /** array */
  Table: Deno.PointerValue;
}

export const sizeofMIB_IF_TABLE2 = 16;

export function allocMIB_IF_TABLE2(data?: Partial<MIB_IF_TABLE2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IF_TABLE2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEntries !== undefined) view.setUint32(0, Number(data.NumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Table))), true);
  return buf;
}

export class MIB_IF_TABLE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Networking.WinSock.NL_INTERFACE_OFFLOAD_ROD (size: 8)
 */
export interface NL_INTERFACE_OFFLOAD_ROD {
  /** u8 */
  _bitfield: number;
}

export const sizeofNL_INTERFACE_OFFLOAD_ROD = 8;

export function allocNL_INTERFACE_OFFLOAD_ROD(data?: Partial<NL_INTERFACE_OFFLOAD_ROD>): Uint8Array {
  const buf = new Uint8Array(sizeofNL_INTERFACE_OFFLOAD_ROD);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

export class NL_INTERFACE_OFFLOAD_RODView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get _bitfield(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set _bitfield(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPINTERFACE_ROW (size: 232)
 */
export interface MIB_IPINTERFACE_ROW {
  /** u16 */
  Family: number;
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  InterfaceLuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  InterfaceIndex: number;
  /** u32 */
  MaxReassemblySize: number;
  /** u64 */
  InterfaceIdentifier: Deno.PointerValue;
  /** u32 */
  MinRouterAdvertisementInterval: number;
  /** u32 */
  MaxRouterAdvertisementInterval: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  AdvertisingEnabled: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  ForwardingEnabled: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  WeakHostSend: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  WeakHostReceive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  UseAutomaticMetric: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  UseNeighborUnreachabilityDetection: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  ManagedAddressConfigurationSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  OtherStatefulConfigurationSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  AdvertiseDefaultRoute: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.NL_ROUTER_DISCOVERY_BEHAVIOR */
  RouterDiscoveryBehavior: NL_ROUTER_DISCOVERY_BEHAVIOR;
  /** u32 */
  DadTransmits: number;
  /** u32 */
  BaseReachableTime: number;
  /** u32 */
  RetransmitTime: number;
  /** u32 */
  PathMtuDiscoveryTimeout: number;
  /** Windows.Win32.Networking.WinSock.NL_LINK_LOCAL_ADDRESS_BEHAVIOR */
  LinkLocalAddressBehavior: NL_LINK_LOCAL_ADDRESS_BEHAVIOR;
  /** u32 */
  LinkLocalAddressTimeout: number;
  /** array */
  ZoneIndices: Deno.PointerValue;
  /** u32 */
  SitePrefixLength: number;
  /** u32 */
  Metric: number;
  /** u32 */
  NlMtu: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Connected: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  SupportsWakeUpPatterns: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  SupportsNeighborDiscovery: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  SupportsRouterDiscovery: Uint8Array | Deno.PointerValue;
  /** u32 */
  ReachableTime: number;
  /** Windows.Win32.Networking.WinSock.NL_INTERFACE_OFFLOAD_ROD */
  TransmitOffload: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.NL_INTERFACE_OFFLOAD_ROD */
  ReceiveOffload: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  DisableDefaultRoutes: Uint8Array | Deno.PointerValue;
}

export const sizeofMIB_IPINTERFACE_ROW = 232;

export function allocMIB_IPINTERFACE_ROW(data?: Partial<MIB_IPINTERFACE_ROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPINTERFACE_ROW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Family !== undefined) view.setUint16(0, Number(data.Family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.InterfaceLuid !== undefined) view.setBigUint64(8, data.InterfaceLuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceLuid))), true);
  // 0x10: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(16, Number(data.InterfaceIndex), true);
  // 0x14: u32
  if (data?.MaxReassemblySize !== undefined) view.setUint32(20, Number(data.MaxReassemblySize), true);
  // 0x18: u64
  if (data?.InterfaceIdentifier !== undefined) view.setBigUint64(24, BigInt(data.InterfaceIdentifier), true);
  // 0x20: u32
  if (data?.MinRouterAdvertisementInterval !== undefined) view.setUint32(32, Number(data.MinRouterAdvertisementInterval), true);
  // 0x24: u32
  if (data?.MaxRouterAdvertisementInterval !== undefined) view.setUint32(36, Number(data.MaxRouterAdvertisementInterval), true);
  // 0x28: pointer
  if (data?.AdvertisingEnabled !== undefined) view.setBigUint64(40, data.AdvertisingEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdvertisingEnabled))), true);
  // 0x30: pointer
  if (data?.ForwardingEnabled !== undefined) view.setBigUint64(48, data.ForwardingEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ForwardingEnabled))), true);
  // 0x38: pointer
  if (data?.WeakHostSend !== undefined) view.setBigUint64(56, data.WeakHostSend === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WeakHostSend))), true);
  // 0x40: pointer
  if (data?.WeakHostReceive !== undefined) view.setBigUint64(64, data.WeakHostReceive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WeakHostReceive))), true);
  // 0x48: pointer
  if (data?.UseAutomaticMetric !== undefined) view.setBigUint64(72, data.UseAutomaticMetric === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UseAutomaticMetric))), true);
  // 0x50: pointer
  if (data?.UseNeighborUnreachabilityDetection !== undefined) view.setBigUint64(80, data.UseNeighborUnreachabilityDetection === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UseNeighborUnreachabilityDetection))), true);
  // 0x58: pointer
  if (data?.ManagedAddressConfigurationSupported !== undefined) view.setBigUint64(88, data.ManagedAddressConfigurationSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ManagedAddressConfigurationSupported))), true);
  // 0x60: pointer
  if (data?.OtherStatefulConfigurationSupported !== undefined) view.setBigUint64(96, data.OtherStatefulConfigurationSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OtherStatefulConfigurationSupported))), true);
  // 0x68: pointer
  if (data?.AdvertiseDefaultRoute !== undefined) view.setBigUint64(104, data.AdvertiseDefaultRoute === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdvertiseDefaultRoute))), true);
  // 0x70: i32
  if (data?.RouterDiscoveryBehavior !== undefined) view.setInt32(112, Number(data.RouterDiscoveryBehavior), true);
  // 0x74: u32
  if (data?.DadTransmits !== undefined) view.setUint32(116, Number(data.DadTransmits), true);
  // 0x78: u32
  if (data?.BaseReachableTime !== undefined) view.setUint32(120, Number(data.BaseReachableTime), true);
  // 0x7c: u32
  if (data?.RetransmitTime !== undefined) view.setUint32(124, Number(data.RetransmitTime), true);
  // 0x80: u32
  if (data?.PathMtuDiscoveryTimeout !== undefined) view.setUint32(128, Number(data.PathMtuDiscoveryTimeout), true);
  // 0x84: i32
  if (data?.LinkLocalAddressBehavior !== undefined) view.setInt32(132, Number(data.LinkLocalAddressBehavior), true);
  // 0x88: u32
  if (data?.LinkLocalAddressTimeout !== undefined) view.setUint32(136, Number(data.LinkLocalAddressTimeout), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.ZoneIndices !== undefined) view.setBigUint64(144, data.ZoneIndices === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ZoneIndices))), true);
  // 0x98: u32
  if (data?.SitePrefixLength !== undefined) view.setUint32(152, Number(data.SitePrefixLength), true);
  // 0x9c: u32
  if (data?.Metric !== undefined) view.setUint32(156, Number(data.Metric), true);
  // 0xa0: u32
  if (data?.NlMtu !== undefined) view.setUint32(160, Number(data.NlMtu), true);
  // 0xa4: pad4
  // 0xa8: pointer
  if (data?.Connected !== undefined) view.setBigUint64(168, data.Connected === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Connected))), true);
  // 0xb0: pointer
  if (data?.SupportsWakeUpPatterns !== undefined) view.setBigUint64(176, data.SupportsWakeUpPatterns === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SupportsWakeUpPatterns))), true);
  // 0xb8: pointer
  if (data?.SupportsNeighborDiscovery !== undefined) view.setBigUint64(184, data.SupportsNeighborDiscovery === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SupportsNeighborDiscovery))), true);
  // 0xc0: pointer
  if (data?.SupportsRouterDiscovery !== undefined) view.setBigUint64(192, data.SupportsRouterDiscovery === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SupportsRouterDiscovery))), true);
  // 0xc8: u32
  if (data?.ReachableTime !== undefined) view.setUint32(200, Number(data.ReachableTime), true);
  // 0xcc: pad4
  // 0xd0: pointer
  if (data?.TransmitOffload !== undefined) view.setBigUint64(208, data.TransmitOffload === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TransmitOffload))), true);
  // 0xd8: pointer
  if (data?.ReceiveOffload !== undefined) view.setBigUint64(216, data.ReceiveOffload === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReceiveOffload))), true);
  // 0xe0: pointer
  if (data?.DisableDefaultRoutes !== undefined) view.setBigUint64(224, data.DisableDefaultRoutes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DisableDefaultRoutes))), true);
  return buf;
}

export class MIB_IPINTERFACE_ROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Family(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get InterfaceLuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get InterfaceIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MaxReassemblySize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get InterfaceIdentifier(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get MinRouterAdvertisementInterval(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get MaxRouterAdvertisementInterval(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get AdvertisingEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ForwardingEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get WeakHostSend(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get WeakHostReceive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get UseAutomaticMetric(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get UseNeighborUnreachabilityDetection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ManagedAddressConfigurationSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get OtherStatefulConfigurationSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get AdvertiseDefaultRoute(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: i32
  get RouterDiscoveryBehavior(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: u32
  get DadTransmits(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get BaseReachableTime(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get RetransmitTime(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get PathMtuDiscoveryTimeout(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: i32
  get LinkLocalAddressBehavior(): number {
    return this.view.getInt32(132, true);
  }

  // 0x88: u32
  get LinkLocalAddressTimeout(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get ZoneIndices(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: u32
  get SitePrefixLength(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get Metric(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get NlMtu(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: pad4

  // 0xa8: pointer
  get Connected(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: pointer
  get SupportsWakeUpPatterns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: pointer
  get SupportsNeighborDiscovery(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: pointer
  get SupportsRouterDiscovery(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get ReachableTime(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: pad4

  // 0xd0: pointer
  get TransmitOffload(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: pointer
  get ReceiveOffload(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: pointer
  get DisableDefaultRoutes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(224, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Family(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set InterfaceLuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set InterfaceIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MaxReassemblySize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set InterfaceIdentifier(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set MinRouterAdvertisementInterval(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set MaxRouterAdvertisementInterval(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set AdvertisingEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ForwardingEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set WeakHostSend(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set WeakHostReceive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set UseAutomaticMetric(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set UseNeighborUnreachabilityDetection(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set ManagedAddressConfigurationSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set OtherStatefulConfigurationSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set AdvertiseDefaultRoute(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: i32
  set RouterDiscoveryBehavior(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: u32
  set DadTransmits(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set BaseReachableTime(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set RetransmitTime(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set PathMtuDiscoveryTimeout(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: i32
  set LinkLocalAddressBehavior(value: number) {
    this.view.setInt32(132, value, true);
  }

  // 0x88: u32
  set LinkLocalAddressTimeout(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set ZoneIndices(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: u32
  set SitePrefixLength(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set Metric(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set NlMtu(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: pad4

  // 0xa8: pointer
  set Connected(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: pointer
  set SupportsWakeUpPatterns(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: pointer
  set SupportsNeighborDiscovery(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: pointer
  set SupportsRouterDiscovery(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set ReachableTime(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: pad4

  // 0xd0: pointer
  set TransmitOffload(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: pointer
  set ReceiveOffload(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: pointer
  set DisableDefaultRoutes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPINTERFACE_TABLE (size: 16)
 */
export interface MIB_IPINTERFACE_TABLE {
  /** u32 */
  NumEntries: number;
  /** array */
  Table: Deno.PointerValue;
}

export const sizeofMIB_IPINTERFACE_TABLE = 16;

export function allocMIB_IPINTERFACE_TABLE(data?: Partial<MIB_IPINTERFACE_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPINTERFACE_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEntries !== undefined) view.setUint32(0, Number(data.NumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Table))), true);
  return buf;
}

export class MIB_IPINTERFACE_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IFSTACK_ROW (size: 8)
 */
export interface MIB_IFSTACK_ROW {
  /** u32 */
  HigherLayerInterfaceIndex: number;
  /** u32 */
  LowerLayerInterfaceIndex: number;
}

export const sizeofMIB_IFSTACK_ROW = 8;

export function allocMIB_IFSTACK_ROW(data?: Partial<MIB_IFSTACK_ROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IFSTACK_ROW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HigherLayerInterfaceIndex !== undefined) view.setUint32(0, Number(data.HigherLayerInterfaceIndex), true);
  // 0x04: u32
  if (data?.LowerLayerInterfaceIndex !== undefined) view.setUint32(4, Number(data.LowerLayerInterfaceIndex), true);
  return buf;
}

export class MIB_IFSTACK_ROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get HigherLayerInterfaceIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get LowerLayerInterfaceIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set HigherLayerInterfaceIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set LowerLayerInterfaceIndex(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_INVERTEDIFSTACK_ROW (size: 8)
 */
export interface MIB_INVERTEDIFSTACK_ROW {
  /** u32 */
  LowerLayerInterfaceIndex: number;
  /** u32 */
  HigherLayerInterfaceIndex: number;
}

export const sizeofMIB_INVERTEDIFSTACK_ROW = 8;

export function allocMIB_INVERTEDIFSTACK_ROW(data?: Partial<MIB_INVERTEDIFSTACK_ROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_INVERTEDIFSTACK_ROW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowerLayerInterfaceIndex !== undefined) view.setUint32(0, Number(data.LowerLayerInterfaceIndex), true);
  // 0x04: u32
  if (data?.HigherLayerInterfaceIndex !== undefined) view.setUint32(4, Number(data.HigherLayerInterfaceIndex), true);
  return buf;
}

export class MIB_INVERTEDIFSTACK_ROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LowerLayerInterfaceIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get HigherLayerInterfaceIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set LowerLayerInterfaceIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set HigherLayerInterfaceIndex(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IFSTACK_TABLE (size: 16)
 */
export interface MIB_IFSTACK_TABLE {
  /** u32 */
  NumEntries: number;
  /** array */
  Table: Deno.PointerValue;
}

export const sizeofMIB_IFSTACK_TABLE = 16;

export function allocMIB_IFSTACK_TABLE(data?: Partial<MIB_IFSTACK_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IFSTACK_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEntries !== undefined) view.setUint32(0, Number(data.NumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Table))), true);
  return buf;
}

export class MIB_IFSTACK_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_INVERTEDIFSTACK_TABLE (size: 16)
 */
export interface MIB_INVERTEDIFSTACK_TABLE {
  /** u32 */
  NumEntries: number;
  /** array */
  Table: Deno.PointerValue;
}

export const sizeofMIB_INVERTEDIFSTACK_TABLE = 16;

export function allocMIB_INVERTEDIFSTACK_TABLE(data?: Partial<MIB_INVERTEDIFSTACK_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_INVERTEDIFSTACK_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEntries !== undefined) view.setUint32(0, Number(data.NumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Table))), true);
  return buf;
}

export class MIB_INVERTEDIFSTACK_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinSock.NL_BANDWIDTH_INFORMATION (size: 24)
 */
export interface NL_BANDWIDTH_INFORMATION {
  /** u64 */
  Bandwidth: Deno.PointerValue;
  /** u64 */
  Instability: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  BandwidthPeaked: Uint8Array | Deno.PointerValue;
}

export const sizeofNL_BANDWIDTH_INFORMATION = 24;

export function allocNL_BANDWIDTH_INFORMATION(data?: Partial<NL_BANDWIDTH_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNL_BANDWIDTH_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Bandwidth !== undefined) view.setBigUint64(0, BigInt(data.Bandwidth), true);
  // 0x08: u64
  if (data?.Instability !== undefined) view.setBigUint64(8, BigInt(data.Instability), true);
  // 0x10: pointer
  if (data?.BandwidthPeaked !== undefined) view.setBigUint64(16, data.BandwidthPeaked === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BandwidthPeaked))), true);
  return buf;
}

export class NL_BANDWIDTH_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Bandwidth(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Instability(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get BandwidthPeaked(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set Bandwidth(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Instability(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set BandwidthPeaked(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES (size: 16)
 */
export interface MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES {
  /** Windows.Win32.Networking.WinSock.NL_BANDWIDTH_INFORMATION */
  InboundBandwidthInformation: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.NL_BANDWIDTH_INFORMATION */
  OutboundBandwidthInformation: Uint8Array | Deno.PointerValue;
}

export const sizeofMIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES = 16;

export function allocMIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES(data?: Partial<MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InboundBandwidthInformation !== undefined) view.setBigUint64(0, data.InboundBandwidthInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InboundBandwidthInformation))), true);
  // 0x08: pointer
  if (data?.OutboundBandwidthInformation !== undefined) view.setBigUint64(8, data.OutboundBandwidthInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutboundBandwidthInformation))), true);
  return buf;
}

export class MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InboundBandwidthInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get OutboundBandwidthInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set InboundBandwidthInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set OutboundBandwidthInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _S_un_ports_e__Struct (size: 8)
 */
export interface _S_un_ports_e__Struct {
  /** u16 */
  s_srcport: number;
  /** u16 */
  s_dstport: number;
}

export const sizeof_S_un_ports_e__Struct = 8;

export function alloc_S_un_ports_e__Struct(data?: Partial<_S_un_ports_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_ports_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.s_srcport !== undefined) view.setUint16(0, Number(data.s_srcport), true);
  // 0x02: u16
  if (data?.s_dstport !== undefined) view.setUint16(2, Number(data.s_dstport), true);
  // 0x04: pad4
  return buf;
}

export class _S_un_ports_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get s_srcport(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get s_dstport(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set s_srcport(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set s_dstport(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * _S_un_icmp_e__Struct (size: 8)
 */
export interface _S_un_icmp_e__Struct {
  /** u8 */
  s_type: number;
  /** u8 */
  s_code: number;
  /** u16 */
  filler: number;
}

export const sizeof_S_un_icmp_e__Struct = 8;

export function alloc_S_un_icmp_e__Struct(data?: Partial<_S_un_icmp_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_icmp_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.s_type !== undefined) view.setUint8(0, Number(data.s_type));
  // 0x01: u8
  if (data?.s_code !== undefined) view.setUint8(1, Number(data.s_code));
  // 0x02: u16
  if (data?.filler !== undefined) view.setUint16(2, Number(data.filler), true);
  // 0x04: pad4
  return buf;
}

export class _S_un_icmp_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get s_type(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get s_code(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get filler(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u8
  set s_type(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set s_code(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set filler(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * _S_un_e__Union (size: 24)
 */
export interface _S_un_e__Union {
  /** _S_un_ports_e__Struct */
  S_un_ports: Uint8Array | Deno.PointerValue;
  /** _S_un_icmp_e__Struct */
  S_un_icmp: Uint8Array | Deno.PointerValue;
  /** u32 */
  S_Spi: number;
}

export const sizeof_S_un_e__Union = 24;

export function alloc_S_un_e__Union(data?: Partial<_S_un_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un_ports !== undefined) view.setBigUint64(0, data.S_un_ports === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.S_un_ports))), true);
  // 0x08: pointer
  if (data?.S_un_icmp !== undefined) view.setBigUint64(8, data.S_un_icmp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.S_un_icmp))), true);
  // 0x10: u32
  if (data?.S_Spi !== undefined) view.setUint32(16, Number(data.S_Spi), true);
  // 0x14: pad4
  return buf;
}

export class _S_un_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get S_un_ports(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get S_un_icmp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get S_Spi(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set S_un_ports(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set S_un_icmp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set S_Spi(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Networking.WinSock.IN_ADDR (size: 8)
 */
export interface IN_ADDR {
  /** _S_un_e__Union */
  S_un: Uint8Array | Deno.PointerValue;
}

export const sizeofIN_ADDR = 8;

export function allocIN_ADDR(data?: Partial<IN_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un !== undefined) view.setBigUint64(0, data.S_un === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.S_un))), true);
  return buf;
}

export class IN_ADDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get S_un(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set S_un(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_IN (size: 24)
 */
export interface SOCKADDR_IN {
  /** u16 */
  sin_family: number;
  /** u16 */
  sin_port: number;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  sin_addr: Uint8Array | Deno.PointerValue;
  /** array */
  sin_zero: Deno.PointerValue;
}

export const sizeofSOCKADDR_IN = 24;

export function allocSOCKADDR_IN(data?: Partial<SOCKADDR_IN>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_IN);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sin_family !== undefined) view.setUint16(0, Number(data.sin_family), true);
  // 0x02: u16
  if (data?.sin_port !== undefined) view.setUint16(2, Number(data.sin_port), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sin_addr !== undefined) view.setBigUint64(8, data.sin_addr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sin_addr))), true);
  // 0x10: pointer
  if (data?.sin_zero !== undefined) view.setBigUint64(16, data.sin_zero === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sin_zero))), true);
  return buf;
}

export class SOCKADDR_INView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get sin_family(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get sin_port(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get sin_addr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get sin_zero(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set sin_family(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set sin_port(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set sin_addr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set sin_zero(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionCode))), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionRecord))), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionAddress))), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionInformation))), true);
  return buf;
}

export class EXCEPTION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionCode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExceptionAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NumberParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ExceptionCode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExceptionAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set NumberParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionRecord))), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export class EXCEPTION_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFirstChance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFirstChance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hThread))), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpThreadLocalBase))), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStartAddress))), true);
  return buf;
}

export class CREATE_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hFile))), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hProcess))), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hThread))), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfImage))), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpThreadLocalBase))), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStartAddress))), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpImageName))), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

export class CREATE_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpBaseOfImage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u16
  get fUnicode(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpBaseOfImage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u16
  set fUnicode(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hFile))), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfDll))), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpImageName))), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

export class LOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get fUnicode(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set fUnicode(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfDll))), true);
  return buf;
}

export class UNLOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null | Uint8Array;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

export class OUTPUT_DEBUG_STRING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpDebugStringData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get fUnicode(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get nDebugStringLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set lpDebugStringData(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u16
  set fUnicode(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set nDebugStringLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

export class RIP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwError(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwError(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Exception))), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateThread))), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateProcessInfo))), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExitThread))), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExitProcess))), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LoadDll))), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnloadDll))), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DebugString))), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RipInfo))), true);
  return buf;
}

export class _u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Exception(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get CreateThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateProcessInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExitThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ExitProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get LoadDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get UnloadDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get DebugString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get RipInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Exception(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set CreateThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateProcessInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExitThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ExitProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set LoadDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set UnloadDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set DebugString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set RipInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinSock.IN6_ADDR (size: 8)
 */
export interface IN6_ADDR {
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue;
}

export const sizeofIN6_ADDR = 8;

export function allocIN6_ADDR(data?: Partial<IN6_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN6_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u !== undefined) view.setBigUint64(0, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  return buf;
}

export class IN6_ADDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_IN6 (size: 24)
 */
export interface SOCKADDR_IN6 {
  /** u16 */
  sin6_family: number;
  /** u16 */
  sin6_port: number;
  /** u32 */
  sin6_flowinfo: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  sin6_addr: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofSOCKADDR_IN6 = 24;

export function allocSOCKADDR_IN6(data?: Partial<SOCKADDR_IN6>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_IN6);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sin6_family !== undefined) view.setUint16(0, Number(data.sin6_family), true);
  // 0x02: u16
  if (data?.sin6_port !== undefined) view.setUint16(2, Number(data.sin6_port), true);
  // 0x04: u32
  if (data?.sin6_flowinfo !== undefined) view.setUint32(4, Number(data.sin6_flowinfo), true);
  // 0x08: pointer
  if (data?.sin6_addr !== undefined) view.setBigUint64(8, data.sin6_addr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sin6_addr))), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class SOCKADDR_IN6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get sin6_family(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get sin6_port(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get sin6_flowinfo(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get sin6_addr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set sin6_family(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set sin6_port(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set sin6_flowinfo(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set sin6_addr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_INET (size: 24)
 */
export interface SOCKADDR_INET {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_IN */
  Ipv4: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_IN6 */
  Ipv6: Uint8Array | Deno.PointerValue;
  /** u16 */
  si_family: number;
}

export const sizeofSOCKADDR_INET = 24;

export function allocSOCKADDR_INET(data?: Partial<SOCKADDR_INET>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_INET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ipv4 !== undefined) view.setBigUint64(0, data.Ipv4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Ipv4))), true);
  // 0x08: pointer
  if (data?.Ipv6 !== undefined) view.setBigUint64(8, data.Ipv6 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Ipv6))), true);
  // 0x10: u16
  if (data?.si_family !== undefined) view.setUint16(16, Number(data.si_family), true);
  // 0x12: pad6
  return buf;
}

export class SOCKADDR_INETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Ipv4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Ipv6(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get si_family(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: pointer
  set Ipv4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Ipv6(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set si_family(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.Networking.WinSock.SCOPE_ID (size: 8)
 */
export interface SCOPE_ID {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofSCOPE_ID = 8;

export function allocSCOPE_ID(data?: Partial<SCOPE_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofSCOPE_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class SCOPE_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get QuadPart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set QuadPart(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UNICASTIPADDRESS_ROW (size: 72)
 */
export interface MIB_UNICASTIPADDRESS_ROW {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_INET */
  Address: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  InterfaceLuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  InterfaceIndex: number;
  /** Windows.Win32.Networking.WinSock.NL_PREFIX_ORIGIN */
  PrefixOrigin: NL_PREFIX_ORIGIN;
  /** Windows.Win32.Networking.WinSock.NL_SUFFIX_ORIGIN */
  SuffixOrigin: NL_SUFFIX_ORIGIN;
  /** u32 */
  ValidLifetime: number;
  /** u32 */
  PreferredLifetime: number;
  /** u8 */
  OnLinkPrefixLength: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  SkipAsSource: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.NL_DAD_STATE */
  DadState: NL_DAD_STATE;
  /** Windows.Win32.Networking.WinSock.SCOPE_ID */
  ScopeId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CreationTimeStamp: Uint8Array | Deno.PointerValue;
}

export const sizeofMIB_UNICASTIPADDRESS_ROW = 72;

export function allocMIB_UNICASTIPADDRESS_ROW(data?: Partial<MIB_UNICASTIPADDRESS_ROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UNICASTIPADDRESS_ROW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x08: pointer
  if (data?.InterfaceLuid !== undefined) view.setBigUint64(8, data.InterfaceLuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceLuid))), true);
  // 0x10: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(16, Number(data.InterfaceIndex), true);
  // 0x14: i32
  if (data?.PrefixOrigin !== undefined) view.setInt32(20, Number(data.PrefixOrigin), true);
  // 0x18: i32
  if (data?.SuffixOrigin !== undefined) view.setInt32(24, Number(data.SuffixOrigin), true);
  // 0x1c: u32
  if (data?.ValidLifetime !== undefined) view.setUint32(28, Number(data.ValidLifetime), true);
  // 0x20: u32
  if (data?.PreferredLifetime !== undefined) view.setUint32(32, Number(data.PreferredLifetime), true);
  // 0x24: u8
  if (data?.OnLinkPrefixLength !== undefined) view.setUint8(36, Number(data.OnLinkPrefixLength));
  // 0x25: pad3
  // 0x28: pointer
  if (data?.SkipAsSource !== undefined) view.setBigUint64(40, data.SkipAsSource === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SkipAsSource))), true);
  // 0x30: i32
  if (data?.DadState !== undefined) view.setInt32(48, Number(data.DadState), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ScopeId !== undefined) view.setBigUint64(56, data.ScopeId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeId))), true);
  // 0x40: pointer
  if (data?.CreationTimeStamp !== undefined) view.setBigUint64(64, data.CreationTimeStamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreationTimeStamp))), true);
  return buf;
}

export class MIB_UNICASTIPADDRESS_ROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get InterfaceLuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get InterfaceIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get PrefixOrigin(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get SuffixOrigin(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get ValidLifetime(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PreferredLifetime(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u8
  get OnLinkPrefixLength(): number {
    return this.view.getUint8(36);
  }

  // 0x25: pad3

  // 0x28: pointer
  get SkipAsSource(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get DadState(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ScopeId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get CreationTimeStamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set InterfaceLuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set InterfaceIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set PrefixOrigin(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set SuffixOrigin(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set ValidLifetime(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PreferredLifetime(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u8
  set OnLinkPrefixLength(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: pad3

  // 0x28: pointer
  set SkipAsSource(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set DadState(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ScopeId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set CreationTimeStamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UNICASTIPADDRESS_TABLE (size: 16)
 */
export interface MIB_UNICASTIPADDRESS_TABLE {
  /** u32 */
  NumEntries: number;
  /** array */
  Table: Deno.PointerValue;
}

export const sizeofMIB_UNICASTIPADDRESS_TABLE = 16;

export function allocMIB_UNICASTIPADDRESS_TABLE(data?: Partial<MIB_UNICASTIPADDRESS_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UNICASTIPADDRESS_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEntries !== undefined) view.setUint32(0, Number(data.NumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Table))), true);
  return buf;
}

export class MIB_UNICASTIPADDRESS_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_ANYCASTIPADDRESS_ROW (size: 32)
 */
export interface MIB_ANYCASTIPADDRESS_ROW {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_INET */
  Address: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  InterfaceLuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  InterfaceIndex: number;
  /** Windows.Win32.Networking.WinSock.SCOPE_ID */
  ScopeId: Uint8Array | Deno.PointerValue;
}

export const sizeofMIB_ANYCASTIPADDRESS_ROW = 32;

export function allocMIB_ANYCASTIPADDRESS_ROW(data?: Partial<MIB_ANYCASTIPADDRESS_ROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_ANYCASTIPADDRESS_ROW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x08: pointer
  if (data?.InterfaceLuid !== undefined) view.setBigUint64(8, data.InterfaceLuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceLuid))), true);
  // 0x10: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(16, Number(data.InterfaceIndex), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ScopeId !== undefined) view.setBigUint64(24, data.ScopeId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeId))), true);
  return buf;
}

export class MIB_ANYCASTIPADDRESS_ROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get InterfaceLuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get InterfaceIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ScopeId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set InterfaceLuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set InterfaceIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ScopeId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_ANYCASTIPADDRESS_TABLE (size: 16)
 */
export interface MIB_ANYCASTIPADDRESS_TABLE {
  /** u32 */
  NumEntries: number;
  /** array */
  Table: Deno.PointerValue;
}

export const sizeofMIB_ANYCASTIPADDRESS_TABLE = 16;

export function allocMIB_ANYCASTIPADDRESS_TABLE(data?: Partial<MIB_ANYCASTIPADDRESS_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_ANYCASTIPADDRESS_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEntries !== undefined) view.setUint32(0, Number(data.NumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Table))), true);
  return buf;
}

export class MIB_ANYCASTIPADDRESS_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_MULTICASTIPADDRESS_ROW (size: 32)
 */
export interface MIB_MULTICASTIPADDRESS_ROW {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_INET */
  Address: Uint8Array | Deno.PointerValue;
  /** u32 */
  InterfaceIndex: number;
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  InterfaceLuid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.SCOPE_ID */
  ScopeId: Uint8Array | Deno.PointerValue;
}

export const sizeofMIB_MULTICASTIPADDRESS_ROW = 32;

export function allocMIB_MULTICASTIPADDRESS_ROW(data?: Partial<MIB_MULTICASTIPADDRESS_ROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_MULTICASTIPADDRESS_ROW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x08: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(8, Number(data.InterfaceIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.InterfaceLuid !== undefined) view.setBigUint64(16, data.InterfaceLuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceLuid))), true);
  // 0x18: pointer
  if (data?.ScopeId !== undefined) view.setBigUint64(24, data.ScopeId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeId))), true);
  return buf;
}

export class MIB_MULTICASTIPADDRESS_ROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get InterfaceIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get InterfaceLuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ScopeId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set InterfaceIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set InterfaceLuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ScopeId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_MULTICASTIPADDRESS_TABLE (size: 16)
 */
export interface MIB_MULTICASTIPADDRESS_TABLE {
  /** u32 */
  NumEntries: number;
  /** array */
  Table: Deno.PointerValue;
}

export const sizeofMIB_MULTICASTIPADDRESS_TABLE = 16;

export function allocMIB_MULTICASTIPADDRESS_TABLE(data?: Partial<MIB_MULTICASTIPADDRESS_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_MULTICASTIPADDRESS_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEntries !== undefined) view.setUint32(0, Number(data.NumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Table))), true);
  return buf;
}

export class MIB_MULTICASTIPADDRESS_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADDRESS_PREFIX (size: 16)
 */
export interface IP_ADDRESS_PREFIX {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_INET */
  Prefix: Uint8Array | Deno.PointerValue;
  /** u8 */
  PrefixLength: number;
}

export const sizeofIP_ADDRESS_PREFIX = 16;

export function allocIP_ADDRESS_PREFIX(data?: Partial<IP_ADDRESS_PREFIX>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADDRESS_PREFIX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Prefix !== undefined) view.setBigUint64(0, data.Prefix === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Prefix))), true);
  // 0x08: u8
  if (data?.PrefixLength !== undefined) view.setUint8(8, Number(data.PrefixLength));
  // 0x09: pad7
  return buf;
}

export class IP_ADDRESS_PREFIXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Prefix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get PrefixLength(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: pointer
  set Prefix(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set PrefixLength(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPFORWARD_ROW2 (size: 96)
 */
export interface MIB_IPFORWARD_ROW2 {
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  InterfaceLuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  InterfaceIndex: number;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_ADDRESS_PREFIX */
  DestinationPrefix: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_INET */
  NextHop: Uint8Array | Deno.PointerValue;
  /** u8 */
  SitePrefixLength: number;
  /** u32 */
  ValidLifetime: number;
  /** u32 */
  PreferredLifetime: number;
  /** u32 */
  Metric: number;
  /** Windows.Win32.Networking.WinSock.NL_ROUTE_PROTOCOL */
  Protocol: NL_ROUTE_PROTOCOL;
  /** Windows.Win32.Foundation.BOOLEAN */
  Loopback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  AutoconfigureAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Publish: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Immortal: Uint8Array | Deno.PointerValue;
  /** u32 */
  Age: number;
  /** Windows.Win32.Networking.WinSock.NL_ROUTE_ORIGIN */
  Origin: NL_ROUTE_ORIGIN;
}

export const sizeofMIB_IPFORWARD_ROW2 = 96;

export function allocMIB_IPFORWARD_ROW2(data?: Partial<MIB_IPFORWARD_ROW2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPFORWARD_ROW2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InterfaceLuid !== undefined) view.setBigUint64(0, data.InterfaceLuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceLuid))), true);
  // 0x08: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(8, Number(data.InterfaceIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DestinationPrefix !== undefined) view.setBigUint64(16, data.DestinationPrefix === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestinationPrefix))), true);
  // 0x18: pointer
  if (data?.NextHop !== undefined) view.setBigUint64(24, data.NextHop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NextHop))), true);
  // 0x20: u8
  if (data?.SitePrefixLength !== undefined) view.setUint8(32, Number(data.SitePrefixLength));
  // 0x21: u32
  if (data?.ValidLifetime !== undefined) view.setUint32(33, Number(data.ValidLifetime), true);
  // 0x25: u32
  if (data?.PreferredLifetime !== undefined) view.setUint32(37, Number(data.PreferredLifetime), true);
  // 0x29: u32
  if (data?.Metric !== undefined) view.setUint32(41, Number(data.Metric), true);
  // 0x2d: i32
  if (data?.Protocol !== undefined) view.setInt32(45, Number(data.Protocol), true);
  // 0x31: pad7
  // 0x38: pointer
  if (data?.Loopback !== undefined) view.setBigUint64(56, data.Loopback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Loopback))), true);
  // 0x40: pointer
  if (data?.AutoconfigureAddress !== undefined) view.setBigUint64(64, data.AutoconfigureAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AutoconfigureAddress))), true);
  // 0x48: pointer
  if (data?.Publish !== undefined) view.setBigUint64(72, data.Publish === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Publish))), true);
  // 0x50: pointer
  if (data?.Immortal !== undefined) view.setBigUint64(80, data.Immortal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Immortal))), true);
  // 0x58: u32
  if (data?.Age !== undefined) view.setUint32(88, Number(data.Age), true);
  // 0x5c: i32
  if (data?.Origin !== undefined) view.setInt32(92, Number(data.Origin), true);
  return buf;
}

export class MIB_IPFORWARD_ROW2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InterfaceLuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get InterfaceIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get DestinationPrefix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get NextHop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u8
  get SitePrefixLength(): number {
    return this.view.getUint8(32);
  }

  // 0x21: u32
  get ValidLifetime(): number {
    return this.view.getUint32(33, true);
  }

  // 0x25: u32
  get PreferredLifetime(): number {
    return this.view.getUint32(37, true);
  }

  // 0x29: u32
  get Metric(): number {
    return this.view.getUint32(41, true);
  }

  // 0x2d: i32
  get Protocol(): number {
    return this.view.getInt32(45, true);
  }

  // 0x31: pad7

  // 0x38: pointer
  get Loopback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get AutoconfigureAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Publish(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get Immortal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get Age(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: i32
  get Origin(): number {
    return this.view.getInt32(92, true);
  }

  // 0x00: pointer
  set InterfaceLuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set InterfaceIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set DestinationPrefix(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set NextHop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u8
  set SitePrefixLength(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: u32
  set ValidLifetime(value: number) {
    this.view.setUint32(33, value, true);
  }

  // 0x25: u32
  set PreferredLifetime(value: number) {
    this.view.setUint32(37, value, true);
  }

  // 0x29: u32
  set Metric(value: number) {
    this.view.setUint32(41, value, true);
  }

  // 0x2d: i32
  set Protocol(value: number) {
    this.view.setInt32(45, value, true);
  }

  // 0x31: pad7

  // 0x38: pointer
  set Loopback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set AutoconfigureAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Publish(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set Immortal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set Age(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: i32
  set Origin(value: number) {
    this.view.setInt32(92, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPFORWARD_TABLE2 (size: 16)
 */
export interface MIB_IPFORWARD_TABLE2 {
  /** u32 */
  NumEntries: number;
  /** array */
  Table: Deno.PointerValue;
}

export const sizeofMIB_IPFORWARD_TABLE2 = 16;

export function allocMIB_IPFORWARD_TABLE2(data?: Partial<MIB_IPFORWARD_TABLE2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPFORWARD_TABLE2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEntries !== undefined) view.setUint32(0, Number(data.NumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Table))), true);
  return buf;
}

export class MIB_IPFORWARD_TABLE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPPATH_ROW (size: 88)
 */
export interface MIB_IPPATH_ROW {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_INET */
  Source: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_INET */
  Destination: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  InterfaceLuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  InterfaceIndex: number;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_INET */
  CurrentNextHop: Uint8Array | Deno.PointerValue;
  /** u32 */
  PathMtu: number;
  /** u32 */
  RttMean: number;
  /** u32 */
  RttDeviation: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsReachable: Uint8Array | Deno.PointerValue;
  /** u64 */
  LinkTransmitSpeed: Deno.PointerValue;
  /** u64 */
  LinkReceiveSpeed: Deno.PointerValue;
}

export const sizeofMIB_IPPATH_ROW = 88;

export function allocMIB_IPPATH_ROW(data?: Partial<MIB_IPPATH_ROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPPATH_ROW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Source !== undefined) view.setBigUint64(0, data.Source === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Source))), true);
  // 0x08: pointer
  if (data?.Destination !== undefined) view.setBigUint64(8, data.Destination === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Destination))), true);
  // 0x10: pointer
  if (data?.InterfaceLuid !== undefined) view.setBigUint64(16, data.InterfaceLuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceLuid))), true);
  // 0x18: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(24, Number(data.InterfaceIndex), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.CurrentNextHop !== undefined) view.setBigUint64(32, data.CurrentNextHop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentNextHop))), true);
  // 0x28: u32
  if (data?.PathMtu !== undefined) view.setUint32(40, Number(data.PathMtu), true);
  // 0x2c: u32
  if (data?.RttMean !== undefined) view.setUint32(44, Number(data.RttMean), true);
  // 0x30: u32
  if (data?.RttDeviation !== undefined) view.setUint32(48, Number(data.RttDeviation), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(56, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x40: pointer
  if (data?.IsReachable !== undefined) view.setBigUint64(64, data.IsReachable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IsReachable))), true);
  // 0x48: u64
  if (data?.LinkTransmitSpeed !== undefined) view.setBigUint64(72, BigInt(data.LinkTransmitSpeed), true);
  // 0x50: u64
  if (data?.LinkReceiveSpeed !== undefined) view.setBigUint64(80, BigInt(data.LinkReceiveSpeed), true);
  return buf;
}

export class MIB_IPPATH_ROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Source(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Destination(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get InterfaceLuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get InterfaceIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get CurrentNextHop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get PathMtu(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get RttMean(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get RttDeviation(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get IsReachable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u64
  get LinkTransmitSpeed(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get LinkReceiveSpeed(): Deno.PointerValue {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x00: pointer
  set Source(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Destination(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set InterfaceLuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set InterfaceIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set CurrentNextHop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set PathMtu(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set RttMean(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set RttDeviation(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set IsReachable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u64
  set LinkTransmitSpeed(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set LinkReceiveSpeed(value: Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPPATH_TABLE (size: 16)
 */
export interface MIB_IPPATH_TABLE {
  /** u32 */
  NumEntries: number;
  /** array */
  Table: Deno.PointerValue;
}

export const sizeofMIB_IPPATH_TABLE = 16;

export function allocMIB_IPPATH_TABLE(data?: Partial<MIB_IPPATH_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPPATH_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEntries !== undefined) view.setUint32(0, Number(data.NumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Table))), true);
  return buf;
}

export class MIB_IPPATH_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _ReachabilityTime_e__Union (size: 8)
 */
export interface _ReachabilityTime_e__Union {
  /** u32 */
  LastReachable: number;
  /** u32 */
  LastUnreachable: number;
}

export const sizeof_ReachabilityTime_e__Union = 8;

export function alloc_ReachabilityTime_e__Union(data?: Partial<_ReachabilityTime_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_ReachabilityTime_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LastReachable !== undefined) view.setUint32(0, Number(data.LastReachable), true);
  // 0x04: u32
  if (data?.LastUnreachable !== undefined) view.setUint32(4, Number(data.LastUnreachable), true);
  return buf;
}

export class _ReachabilityTime_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LastReachable(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get LastUnreachable(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set LastReachable(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set LastUnreachable(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPNET_ROW2 (size: 56)
 */
export interface MIB_IPNET_ROW2 {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_INET */
  Address: Uint8Array | Deno.PointerValue;
  /** u32 */
  InterfaceIndex: number;
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  InterfaceLuid: Uint8Array | Deno.PointerValue;
  /** array */
  PhysicalAddress: Deno.PointerValue;
  /** u32 */
  PhysicalAddressLength: number;
  /** Windows.Win32.Networking.WinSock.NL_NEIGHBOR_STATE */
  State: NL_NEIGHBOR_STATE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _ReachabilityTime_e__Union */
  ReachabilityTime: Uint8Array | Deno.PointerValue;
}

export const sizeofMIB_IPNET_ROW2 = 56;

export function allocMIB_IPNET_ROW2(data?: Partial<MIB_IPNET_ROW2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPNET_ROW2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x08: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(8, Number(data.InterfaceIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.InterfaceLuid !== undefined) view.setBigUint64(16, data.InterfaceLuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceLuid))), true);
  // 0x18: pointer
  if (data?.PhysicalAddress !== undefined) view.setBigUint64(24, data.PhysicalAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhysicalAddress))), true);
  // 0x20: u32
  if (data?.PhysicalAddressLength !== undefined) view.setUint32(32, Number(data.PhysicalAddressLength), true);
  // 0x24: i32
  if (data?.State !== undefined) view.setInt32(36, Number(data.State), true);
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x30: pointer
  if (data?.ReachabilityTime !== undefined) view.setBigUint64(48, data.ReachabilityTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReachabilityTime))), true);
  return buf;
}

export class MIB_IPNET_ROW2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get InterfaceIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get InterfaceLuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PhysicalAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get PhysicalAddressLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get State(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ReachabilityTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set InterfaceIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set InterfaceLuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set PhysicalAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set PhysicalAddressLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set State(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ReachabilityTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPNET_TABLE2 (size: 16)
 */
export interface MIB_IPNET_TABLE2 {
  /** u32 */
  NumEntries: number;
  /** array */
  Table: Deno.PointerValue;
}

export const sizeofMIB_IPNET_TABLE2 = 16;

export function allocMIB_IPNET_TABLE2(data?: Partial<MIB_IPNET_TABLE2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPNET_TABLE2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEntries !== undefined) view.setUint32(0, Number(data.NumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Table))), true);
  return buf;
}

export class MIB_IPNET_TABLE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.DNS_SETTINGS (size: 40)
 */
export interface DNS_SETTINGS {
  /** u32 */
  Version: number;
  /** u64 */
  Flags: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  Hostname: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Domain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SearchList: string | null | Uint8Array | Uint16Array;
}

export const sizeofDNS_SETTINGS = 40;

export function allocDNS_SETTINGS(data?: Partial<DNS_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  // 0x10: buffer
  if (data?.Hostname !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Hostname);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.Domain !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Domain);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.SearchList !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.SearchList);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  return buf;
}

export class DNS_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Flags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: buffer
  get Hostname(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get SearchList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Flags(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: buffer
  set Hostname(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set SearchList(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.DNS_SETTINGS2 (size: 48)
 */
export interface DNS_SETTINGS2 {
  /** u32 */
  Version: number;
  /** u64 */
  Flags: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  Hostname: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Domain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SearchList: string | null | Uint8Array | Uint16Array;
  /** u64 */
  SettingFlags: Deno.PointerValue;
}

export const sizeofDNS_SETTINGS2 = 48;

export function allocDNS_SETTINGS2(data?: Partial<DNS_SETTINGS2>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SETTINGS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  // 0x10: buffer
  if (data?.Hostname !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Hostname);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.Domain !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Domain);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.SearchList !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.SearchList);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u64
  if (data?.SettingFlags !== undefined) view.setBigUint64(40, BigInt(data.SettingFlags), true);
  return buf;
}

export class DNS_SETTINGS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Flags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: buffer
  get Hostname(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get SearchList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u64
  get SettingFlags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Flags(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: buffer
  set Hostname(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set SearchList(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u64
  set SettingFlags(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.DNS_DOH_SERVER_SETTINGS (size: 16)
 */
export interface DNS_DOH_SERVER_SETTINGS {
  /** Windows.Win32.Foundation.PWSTR */
  Template: string | null | Uint8Array | Uint16Array;
  /** u64 */
  Flags: Deno.PointerValue;
}

export const sizeofDNS_DOH_SERVER_SETTINGS = 16;

export function allocDNS_DOH_SERVER_SETTINGS(data?: Partial<DNS_DOH_SERVER_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_DOH_SERVER_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Template !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Template);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  return buf;
}

export class DNS_DOH_SERVER_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Template(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u64
  get Flags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: buffer
  set Template(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u64
  set Flags(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.DNS_SERVER_PROPERTY_TYPES (size: 8)
 */
export interface DNS_SERVER_PROPERTY_TYPES {
  /** ptr */
  DohSettings: Deno.PointerValue | Uint8Array;
}

export const sizeofDNS_SERVER_PROPERTY_TYPES = 8;

export function allocDNS_SERVER_PROPERTY_TYPES(data?: Partial<DNS_SERVER_PROPERTY_TYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SERVER_PROPERTY_TYPES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DohSettings !== undefined) view.setBigUint64(0, data.DohSettings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DohSettings))), true);
  return buf;
}

export class DNS_SERVER_PROPERTY_TYPESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DohSettings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DohSettings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.DNS_SERVER_PROPERTY (size: 24)
 */
export interface DNS_SERVER_PROPERTY {
  /** u32 */
  Version: number;
  /** u32 */
  ServerIndex: number;
  /** Windows.Win32.NetworkManagement.IpHelper.DNS_SERVER_PROPERTY_TYPE */
  Type: DNS_SERVER_PROPERTY_TYPE;
  /** Windows.Win32.NetworkManagement.IpHelper.DNS_SERVER_PROPERTY_TYPES */
  Property: Uint8Array | Deno.PointerValue;
}

export const sizeofDNS_SERVER_PROPERTY = 24;

export function allocDNS_SERVER_PROPERTY(data?: Partial<DNS_SERVER_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SERVER_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.ServerIndex !== undefined) view.setUint32(4, Number(data.ServerIndex), true);
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Property !== undefined) view.setBigUint64(16, data.Property === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Property))), true);
  return buf;
}

export class DNS_SERVER_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ServerIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Property(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ServerIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Property(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.DNS_INTERFACE_SETTINGS (size: 64)
 */
export interface DNS_INTERFACE_SETTINGS {
  /** u32 */
  Version: number;
  /** u64 */
  Flags: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  Domain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  NameServer: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SearchList: string | null | Uint8Array | Uint16Array;
  /** u32 */
  RegistrationEnabled: number;
  /** u32 */
  RegisterAdapterName: number;
  /** u32 */
  EnableLLMNR: number;
  /** u32 */
  QueryAdapterName: number;
  /** Windows.Win32.Foundation.PWSTR */
  ProfileNameServer: string | null | Uint8Array | Uint16Array;
}

export const sizeofDNS_INTERFACE_SETTINGS = 64;

export function allocDNS_INTERFACE_SETTINGS(data?: Partial<DNS_INTERFACE_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_INTERFACE_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  // 0x10: buffer
  if (data?.Domain !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Domain);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.NameServer !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.NameServer);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.SearchList !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.SearchList);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.RegistrationEnabled !== undefined) view.setUint32(40, Number(data.RegistrationEnabled), true);
  // 0x2c: u32
  if (data?.RegisterAdapterName !== undefined) view.setUint32(44, Number(data.RegisterAdapterName), true);
  // 0x30: u32
  if (data?.EnableLLMNR !== undefined) view.setUint32(48, Number(data.EnableLLMNR), true);
  // 0x34: u32
  if (data?.QueryAdapterName !== undefined) view.setUint32(52, Number(data.QueryAdapterName), true);
  // 0x38: buffer
  if (data?.ProfileNameServer !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.ProfileNameServer);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  return buf;
}

export class DNS_INTERFACE_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Flags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: buffer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get NameServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get SearchList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get RegistrationEnabled(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get RegisterAdapterName(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get EnableLLMNR(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get QueryAdapterName(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: buffer
  get ProfileNameServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Flags(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: buffer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set NameServer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set SearchList(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set RegistrationEnabled(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set RegisterAdapterName(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set EnableLLMNR(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set QueryAdapterName(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: buffer
  set ProfileNameServer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.DNS_INTERFACE_SETTINGS_EX (size: 24)
 */
export interface DNS_INTERFACE_SETTINGS_EX {
  /** Windows.Win32.NetworkManagement.IpHelper.DNS_INTERFACE_SETTINGS */
  SettingsV1: Uint8Array | Deno.PointerValue;
  /** u32 */
  DisableUnconstrainedQueries: number;
  /** Windows.Win32.Foundation.PWSTR */
  SupplementalSearchList: string | null | Uint8Array | Uint16Array;
}

export const sizeofDNS_INTERFACE_SETTINGS_EX = 24;

export function allocDNS_INTERFACE_SETTINGS_EX(data?: Partial<DNS_INTERFACE_SETTINGS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_INTERFACE_SETTINGS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SettingsV1 !== undefined) view.setBigUint64(0, data.SettingsV1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SettingsV1))), true);
  // 0x08: u32
  if (data?.DisableUnconstrainedQueries !== undefined) view.setUint32(8, Number(data.DisableUnconstrainedQueries), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.SupplementalSearchList !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.SupplementalSearchList);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DNS_INTERFACE_SETTINGS_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SettingsV1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get DisableUnconstrainedQueries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get SupplementalSearchList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SettingsV1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set DisableUnconstrainedQueries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set SupplementalSearchList(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.DNS_INTERFACE_SETTINGS3 (size: 112)
 */
export interface DNS_INTERFACE_SETTINGS3 {
  /** u32 */
  Version: number;
  /** u64 */
  Flags: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  Domain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  NameServer: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SearchList: string | null | Uint8Array | Uint16Array;
  /** u32 */
  RegistrationEnabled: number;
  /** u32 */
  RegisterAdapterName: number;
  /** u32 */
  EnableLLMNR: number;
  /** u32 */
  QueryAdapterName: number;
  /** Windows.Win32.Foundation.PWSTR */
  ProfileNameServer: string | null | Uint8Array | Uint16Array;
  /** u32 */
  DisableUnconstrainedQueries: number;
  /** Windows.Win32.Foundation.PWSTR */
  SupplementalSearchList: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cServerProperties: number;
  /** ptr */
  ServerProperties: Deno.PointerValue | Uint8Array;
  /** u32 */
  cProfileServerProperties: number;
  /** ptr */
  ProfileServerProperties: Deno.PointerValue | Uint8Array;
}

export const sizeofDNS_INTERFACE_SETTINGS3 = 112;

export function allocDNS_INTERFACE_SETTINGS3(data?: Partial<DNS_INTERFACE_SETTINGS3>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_INTERFACE_SETTINGS3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  // 0x10: buffer
  if (data?.Domain !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Domain);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.NameServer !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.NameServer);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.SearchList !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.SearchList);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.RegistrationEnabled !== undefined) view.setUint32(40, Number(data.RegistrationEnabled), true);
  // 0x2c: u32
  if (data?.RegisterAdapterName !== undefined) view.setUint32(44, Number(data.RegisterAdapterName), true);
  // 0x30: u32
  if (data?.EnableLLMNR !== undefined) view.setUint32(48, Number(data.EnableLLMNR), true);
  // 0x34: u32
  if (data?.QueryAdapterName !== undefined) view.setUint32(52, Number(data.QueryAdapterName), true);
  // 0x38: buffer
  if (data?.ProfileNameServer !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.ProfileNameServer);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: u32
  if (data?.DisableUnconstrainedQueries !== undefined) view.setUint32(64, Number(data.DisableUnconstrainedQueries), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.SupplementalSearchList !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.SupplementalSearchList);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: u32
  if (data?.cServerProperties !== undefined) view.setUint32(80, Number(data.cServerProperties), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.ServerProperties !== undefined) view.setBigUint64(88, data.ServerProperties === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerProperties))), true);
  // 0x60: u32
  if (data?.cProfileServerProperties !== undefined) view.setUint32(96, Number(data.cProfileServerProperties), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.ProfileServerProperties !== undefined) view.setBigUint64(104, data.ProfileServerProperties === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProfileServerProperties))), true);
  return buf;
}

export class DNS_INTERFACE_SETTINGS3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Flags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: buffer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get NameServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get SearchList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get RegistrationEnabled(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get RegisterAdapterName(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get EnableLLMNR(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get QueryAdapterName(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: buffer
  get ProfileNameServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get DisableUnconstrainedQueries(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  get SupplementalSearchList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get cServerProperties(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get ServerProperties(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get cProfileServerProperties(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get ProfileServerProperties(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Flags(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: buffer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set NameServer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set SearchList(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set RegistrationEnabled(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set RegisterAdapterName(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set EnableLLMNR(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set QueryAdapterName(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: buffer
  set ProfileNameServer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: u32
  set DisableUnconstrainedQueries(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  set SupplementalSearchList(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: u32
  set cServerProperties(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set ServerProperties(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set cProfileServerProperties(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set ProfileServerProperties(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_OPAQUE_QUERY (size: 16)
 */
export interface MIB_OPAQUE_QUERY {
  /** u32 */
  dwVarId: number;
  /** array */
  rgdwVarIndex: Deno.PointerValue;
}

export const sizeofMIB_OPAQUE_QUERY = 16;

export function allocMIB_OPAQUE_QUERY(data?: Partial<MIB_OPAQUE_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_OPAQUE_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVarId !== undefined) view.setUint32(0, Number(data.dwVarId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgdwVarIndex !== undefined) view.setBigUint64(8, data.rgdwVarIndex === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgdwVarIndex))), true);
  return buf;
}

export class MIB_OPAQUE_QUERYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVarId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgdwVarIndex(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwVarId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgdwVarIndex(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IFNUMBER (size: 8)
 */
export interface MIB_IFNUMBER {
  /** u32 */
  dwValue: number;
}

export const sizeofMIB_IFNUMBER = 8;

export function allocMIB_IFNUMBER(data?: Partial<MIB_IFNUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IFNUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  return buf;
}

export class MIB_IFNUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IFROW (size: 112)
 */
export interface MIB_IFROW {
  /** array */
  wszName: Deno.PointerValue;
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwMtu: number;
  /** u32 */
  dwSpeed: number;
  /** u32 */
  dwPhysAddrLen: number;
  /** array */
  bPhysAddr: Deno.PointerValue;
  /** u32 */
  dwAdminStatus: number;
  /** Windows.Win32.NetworkManagement.IpHelper.INTERNAL_IF_OPER_STATUS */
  dwOperStatus: INTERNAL_IF_OPER_STATUS;
  /** u32 */
  dwLastChange: number;
  /** u32 */
  dwInOctets: number;
  /** u32 */
  dwInUcastPkts: number;
  /** u32 */
  dwInNUcastPkts: number;
  /** u32 */
  dwInDiscards: number;
  /** u32 */
  dwInErrors: number;
  /** u32 */
  dwInUnknownProtos: number;
  /** u32 */
  dwOutOctets: number;
  /** u32 */
  dwOutUcastPkts: number;
  /** u32 */
  dwOutNUcastPkts: number;
  /** u32 */
  dwOutDiscards: number;
  /** u32 */
  dwOutErrors: number;
  /** u32 */
  dwOutQLen: number;
  /** u32 */
  dwDescrLen: number;
  /** array */
  bDescr: Deno.PointerValue;
}

export const sizeofMIB_IFROW = 112;

export function allocMIB_IFROW(data?: Partial<MIB_IFROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IFROW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszName !== undefined) view.setBigUint64(0, data.wszName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszName))), true);
  // 0x08: u32
  if (data?.dwIndex !== undefined) view.setUint32(8, Number(data.dwIndex), true);
  // 0x0c: u32
  if (data?.dwType !== undefined) view.setUint32(12, Number(data.dwType), true);
  // 0x10: u32
  if (data?.dwMtu !== undefined) view.setUint32(16, Number(data.dwMtu), true);
  // 0x14: u32
  if (data?.dwSpeed !== undefined) view.setUint32(20, Number(data.dwSpeed), true);
  // 0x18: u32
  if (data?.dwPhysAddrLen !== undefined) view.setUint32(24, Number(data.dwPhysAddrLen), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.bPhysAddr !== undefined) view.setBigUint64(32, data.bPhysAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bPhysAddr))), true);
  // 0x28: u32
  if (data?.dwAdminStatus !== undefined) view.setUint32(40, Number(data.dwAdminStatus), true);
  // 0x2c: i32
  if (data?.dwOperStatus !== undefined) view.setInt32(44, Number(data.dwOperStatus), true);
  // 0x30: u32
  if (data?.dwLastChange !== undefined) view.setUint32(48, Number(data.dwLastChange), true);
  // 0x34: u32
  if (data?.dwInOctets !== undefined) view.setUint32(52, Number(data.dwInOctets), true);
  // 0x38: u32
  if (data?.dwInUcastPkts !== undefined) view.setUint32(56, Number(data.dwInUcastPkts), true);
  // 0x3c: u32
  if (data?.dwInNUcastPkts !== undefined) view.setUint32(60, Number(data.dwInNUcastPkts), true);
  // 0x40: u32
  if (data?.dwInDiscards !== undefined) view.setUint32(64, Number(data.dwInDiscards), true);
  // 0x44: u32
  if (data?.dwInErrors !== undefined) view.setUint32(68, Number(data.dwInErrors), true);
  // 0x48: u32
  if (data?.dwInUnknownProtos !== undefined) view.setUint32(72, Number(data.dwInUnknownProtos), true);
  // 0x4c: u32
  if (data?.dwOutOctets !== undefined) view.setUint32(76, Number(data.dwOutOctets), true);
  // 0x50: u32
  if (data?.dwOutUcastPkts !== undefined) view.setUint32(80, Number(data.dwOutUcastPkts), true);
  // 0x54: u32
  if (data?.dwOutNUcastPkts !== undefined) view.setUint32(84, Number(data.dwOutNUcastPkts), true);
  // 0x58: u32
  if (data?.dwOutDiscards !== undefined) view.setUint32(88, Number(data.dwOutDiscards), true);
  // 0x5c: u32
  if (data?.dwOutErrors !== undefined) view.setUint32(92, Number(data.dwOutErrors), true);
  // 0x60: u32
  if (data?.dwOutQLen !== undefined) view.setUint32(96, Number(data.dwOutQLen), true);
  // 0x64: u32
  if (data?.dwDescrLen !== undefined) view.setUint32(100, Number(data.dwDescrLen), true);
  // 0x68: pointer
  if (data?.bDescr !== undefined) view.setBigUint64(104, data.bDescr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDescr))), true);
  return buf;
}

export class MIB_IFROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwMtu(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwSpeed(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwPhysAddrLen(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get bPhysAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwAdminStatus(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get dwOperStatus(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: u32
  get dwLastChange(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwInOctets(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwInUcastPkts(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwInNUcastPkts(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwInDiscards(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwInErrors(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwInUnknownProtos(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwOutOctets(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwOutUcastPkts(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwOutNUcastPkts(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwOutDiscards(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwOutErrors(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dwOutQLen(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get dwDescrLen(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: pointer
  get bDescr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set wszName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwMtu(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwSpeed(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwPhysAddrLen(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set bPhysAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwAdminStatus(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set dwOperStatus(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: u32
  set dwLastChange(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwInOctets(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwInUcastPkts(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwInNUcastPkts(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwInDiscards(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwInErrors(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwInUnknownProtos(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwOutOctets(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwOutUcastPkts(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwOutNUcastPkts(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwOutDiscards(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwOutErrors(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dwOutQLen(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set dwDescrLen(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: pointer
  set bDescr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IFTABLE (size: 16)
 */
export interface MIB_IFTABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_IFTABLE = 16;

export function allocMIB_IFTABLE(data?: Partial<MIB_IFTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IFTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_IFTABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPADDRROW_XP (size: 24)
 */
export interface MIB_IPADDRROW_XP {
  /** u32 */
  dwAddr: number;
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwMask: number;
  /** u32 */
  dwBCastAddr: number;
  /** u32 */
  dwReasmSize: number;
  /** u16 */
  unused1: number;
  /** u16 */
  wType: number;
}

export const sizeofMIB_IPADDRROW_XP = 24;

export function allocMIB_IPADDRROW_XP(data?: Partial<MIB_IPADDRROW_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPADDRROW_XP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAddr !== undefined) view.setUint32(0, Number(data.dwAddr), true);
  // 0x04: u32
  if (data?.dwIndex !== undefined) view.setUint32(4, Number(data.dwIndex), true);
  // 0x08: u32
  if (data?.dwMask !== undefined) view.setUint32(8, Number(data.dwMask), true);
  // 0x0c: u32
  if (data?.dwBCastAddr !== undefined) view.setUint32(12, Number(data.dwBCastAddr), true);
  // 0x10: u32
  if (data?.dwReasmSize !== undefined) view.setUint32(16, Number(data.dwReasmSize), true);
  // 0x14: u16
  if (data?.unused1 !== undefined) view.setUint16(20, Number(data.unused1), true);
  // 0x16: u16
  if (data?.wType !== undefined) view.setUint16(22, Number(data.wType), true);
  return buf;
}

export class MIB_IPADDRROW_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAddr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwBCastAddr(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwReasmSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get unused1(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get wType(): number {
    return this.view.getUint16(22, true);
  }

  // 0x00: u32
  set dwAddr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwBCastAddr(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwReasmSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set unused1(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set wType(value: number) {
    this.view.setUint16(22, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPADDRROW_W2K (size: 24)
 */
export interface MIB_IPADDRROW_W2K {
  /** u32 */
  dwAddr: number;
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwMask: number;
  /** u32 */
  dwBCastAddr: number;
  /** u32 */
  dwReasmSize: number;
  /** u16 */
  unused1: number;
  /** u16 */
  unused2: number;
}

export const sizeofMIB_IPADDRROW_W2K = 24;

export function allocMIB_IPADDRROW_W2K(data?: Partial<MIB_IPADDRROW_W2K>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPADDRROW_W2K);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAddr !== undefined) view.setUint32(0, Number(data.dwAddr), true);
  // 0x04: u32
  if (data?.dwIndex !== undefined) view.setUint32(4, Number(data.dwIndex), true);
  // 0x08: u32
  if (data?.dwMask !== undefined) view.setUint32(8, Number(data.dwMask), true);
  // 0x0c: u32
  if (data?.dwBCastAddr !== undefined) view.setUint32(12, Number(data.dwBCastAddr), true);
  // 0x10: u32
  if (data?.dwReasmSize !== undefined) view.setUint32(16, Number(data.dwReasmSize), true);
  // 0x14: u16
  if (data?.unused1 !== undefined) view.setUint16(20, Number(data.unused1), true);
  // 0x16: u16
  if (data?.unused2 !== undefined) view.setUint16(22, Number(data.unused2), true);
  return buf;
}

export class MIB_IPADDRROW_W2KView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAddr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwBCastAddr(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwReasmSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get unused1(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get unused2(): number {
    return this.view.getUint16(22, true);
  }

  // 0x00: u32
  set dwAddr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwBCastAddr(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwReasmSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set unused1(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set unused2(value: number) {
    this.view.setUint16(22, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPADDRTABLE (size: 16)
 */
export interface MIB_IPADDRTABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_IPADDRTABLE = 16;

export function allocMIB_IPADDRTABLE(data?: Partial<MIB_IPADDRTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPADDRTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_IPADDRTABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPFORWARDNUMBER (size: 8)
 */
export interface MIB_IPFORWARDNUMBER {
  /** u32 */
  dwValue: number;
}

export const sizeofMIB_IPFORWARDNUMBER = 8;

export function allocMIB_IPFORWARDNUMBER(data?: Partial<MIB_IPFORWARDNUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPFORWARDNUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  return buf;
}

export class MIB_IPFORWARDNUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psid))), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguid))), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObjectTypes))), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIpAddress))), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get u(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set Data0(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: usize
  set u(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPFORWARDROW (size: 72)
 */
export interface MIB_IPFORWARDROW {
  /** u32 */
  dwForwardDest: number;
  /** u32 */
  dwForwardMask: number;
  /** u32 */
  dwForwardPolicy: number;
  /** u32 */
  dwForwardNextHop: number;
  /** u32 */
  dwForwardIfIndex: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwForwardAge: number;
  /** u32 */
  dwForwardNextHopAS: number;
  /** u32 */
  dwForwardMetric1: number;
  /** u32 */
  dwForwardMetric2: number;
  /** u32 */
  dwForwardMetric3: number;
  /** u32 */
  dwForwardMetric4: number;
  /** u32 */
  dwForwardMetric5: number;
}

export const sizeofMIB_IPFORWARDROW = 72;

export function allocMIB_IPFORWARDROW(data?: Partial<MIB_IPFORWARDROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPFORWARDROW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwForwardDest !== undefined) view.setUint32(0, Number(data.dwForwardDest), true);
  // 0x04: u32
  if (data?.dwForwardMask !== undefined) view.setUint32(4, Number(data.dwForwardMask), true);
  // 0x08: u32
  if (data?.dwForwardPolicy !== undefined) view.setUint32(8, Number(data.dwForwardPolicy), true);
  // 0x0c: u32
  if (data?.dwForwardNextHop !== undefined) view.setUint32(12, Number(data.dwForwardNextHop), true);
  // 0x10: u32
  if (data?.dwForwardIfIndex !== undefined) view.setUint32(16, Number(data.dwForwardIfIndex), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x28: u32
  if (data?.dwForwardAge !== undefined) view.setUint32(40, Number(data.dwForwardAge), true);
  // 0x2c: u32
  if (data?.dwForwardNextHopAS !== undefined) view.setUint32(44, Number(data.dwForwardNextHopAS), true);
  // 0x30: u32
  if (data?.dwForwardMetric1 !== undefined) view.setUint32(48, Number(data.dwForwardMetric1), true);
  // 0x34: u32
  if (data?.dwForwardMetric2 !== undefined) view.setUint32(52, Number(data.dwForwardMetric2), true);
  // 0x38: u32
  if (data?.dwForwardMetric3 !== undefined) view.setUint32(56, Number(data.dwForwardMetric3), true);
  // 0x3c: u32
  if (data?.dwForwardMetric4 !== undefined) view.setUint32(60, Number(data.dwForwardMetric4), true);
  // 0x40: u32
  if (data?.dwForwardMetric5 !== undefined) view.setUint32(64, Number(data.dwForwardMetric5), true);
  // 0x44: pad4
  return buf;
}

export class MIB_IPFORWARDROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwForwardDest(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwForwardMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwForwardPolicy(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwForwardNextHop(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwForwardIfIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwForwardAge(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwForwardNextHopAS(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwForwardMetric1(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwForwardMetric2(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwForwardMetric3(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwForwardMetric4(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwForwardMetric5(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set dwForwardDest(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwForwardMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwForwardPolicy(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwForwardNextHop(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwForwardIfIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwForwardAge(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwForwardNextHopAS(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwForwardMetric1(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwForwardMetric2(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwForwardMetric3(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwForwardMetric4(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwForwardMetric5(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPFORWARDTABLE (size: 16)
 */
export interface MIB_IPFORWARDTABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_IPFORWARDTABLE = 16;

export function allocMIB_IPFORWARDTABLE(data?: Partial<MIB_IPFORWARDTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPFORWARDTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_IPFORWARDTABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPNETROW_LH (size: 32)
 */
export interface MIB_IPNETROW_LH {
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwPhysAddrLen: number;
  /** array */
  bPhysAddr: Deno.PointerValue;
  /** u32 */
  dwAddr: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofMIB_IPNETROW_LH = 32;

export function allocMIB_IPNETROW_LH(data?: Partial<MIB_IPNETROW_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPNETROW_LH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIndex !== undefined) view.setUint32(0, Number(data.dwIndex), true);
  // 0x04: u32
  if (data?.dwPhysAddrLen !== undefined) view.setUint32(4, Number(data.dwPhysAddrLen), true);
  // 0x08: pointer
  if (data?.bPhysAddr !== undefined) view.setBigUint64(8, data.bPhysAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bPhysAddr))), true);
  // 0x10: u32
  if (data?.dwAddr !== undefined) view.setUint32(16, Number(data.dwAddr), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class MIB_IPNETROW_LHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPhysAddrLen(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get bPhysAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwAddr(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPhysAddrLen(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set bPhysAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwAddr(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPNETROW_W2K (size: 24)
 */
export interface MIB_IPNETROW_W2K {
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwPhysAddrLen: number;
  /** array */
  bPhysAddr: Deno.PointerValue;
  /** u32 */
  dwAddr: number;
  /** u32 */
  dwType: number;
}

export const sizeofMIB_IPNETROW_W2K = 24;

export function allocMIB_IPNETROW_W2K(data?: Partial<MIB_IPNETROW_W2K>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPNETROW_W2K);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIndex !== undefined) view.setUint32(0, Number(data.dwIndex), true);
  // 0x04: u32
  if (data?.dwPhysAddrLen !== undefined) view.setUint32(4, Number(data.dwPhysAddrLen), true);
  // 0x08: pointer
  if (data?.bPhysAddr !== undefined) view.setBigUint64(8, data.bPhysAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bPhysAddr))), true);
  // 0x10: u32
  if (data?.dwAddr !== undefined) view.setUint32(16, Number(data.dwAddr), true);
  // 0x14: u32
  if (data?.dwType !== undefined) view.setUint32(20, Number(data.dwType), true);
  return buf;
}

export class MIB_IPNETROW_W2KView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPhysAddrLen(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get bPhysAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwAddr(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set dwIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPhysAddrLen(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set bPhysAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwAddr(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwType(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPNETTABLE (size: 16)
 */
export interface MIB_IPNETTABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_IPNETTABLE = 16;

export function allocMIB_IPNETTABLE(data?: Partial<MIB_IPNETTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPNETTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_IPNETTABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPSTATS_LH (size: 96)
 */
export interface MIB_IPSTATS_LH {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwDefaultTTL: number;
  /** u32 */
  dwInReceives: number;
  /** u32 */
  dwInHdrErrors: number;
  /** u32 */
  dwInAddrErrors: number;
  /** u32 */
  dwForwDatagrams: number;
  /** u32 */
  dwInUnknownProtos: number;
  /** u32 */
  dwInDiscards: number;
  /** u32 */
  dwInDelivers: number;
  /** u32 */
  dwOutRequests: number;
  /** u32 */
  dwRoutingDiscards: number;
  /** u32 */
  dwOutDiscards: number;
  /** u32 */
  dwOutNoRoutes: number;
  /** u32 */
  dwReasmTimeout: number;
  /** u32 */
  dwReasmReqds: number;
  /** u32 */
  dwReasmOks: number;
  /** u32 */
  dwReasmFails: number;
  /** u32 */
  dwFragOks: number;
  /** u32 */
  dwFragFails: number;
  /** u32 */
  dwFragCreates: number;
  /** u32 */
  dwNumIf: number;
  /** u32 */
  dwNumAddr: number;
  /** u32 */
  dwNumRoutes: number;
}

export const sizeofMIB_IPSTATS_LH = 96;

export function allocMIB_IPSTATS_LH(data?: Partial<MIB_IPSTATS_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPSTATS_LH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: u32
  if (data?.dwDefaultTTL !== undefined) view.setUint32(8, Number(data.dwDefaultTTL), true);
  // 0x0c: u32
  if (data?.dwInReceives !== undefined) view.setUint32(12, Number(data.dwInReceives), true);
  // 0x10: u32
  if (data?.dwInHdrErrors !== undefined) view.setUint32(16, Number(data.dwInHdrErrors), true);
  // 0x14: u32
  if (data?.dwInAddrErrors !== undefined) view.setUint32(20, Number(data.dwInAddrErrors), true);
  // 0x18: u32
  if (data?.dwForwDatagrams !== undefined) view.setUint32(24, Number(data.dwForwDatagrams), true);
  // 0x1c: u32
  if (data?.dwInUnknownProtos !== undefined) view.setUint32(28, Number(data.dwInUnknownProtos), true);
  // 0x20: u32
  if (data?.dwInDiscards !== undefined) view.setUint32(32, Number(data.dwInDiscards), true);
  // 0x24: u32
  if (data?.dwInDelivers !== undefined) view.setUint32(36, Number(data.dwInDelivers), true);
  // 0x28: u32
  if (data?.dwOutRequests !== undefined) view.setUint32(40, Number(data.dwOutRequests), true);
  // 0x2c: u32
  if (data?.dwRoutingDiscards !== undefined) view.setUint32(44, Number(data.dwRoutingDiscards), true);
  // 0x30: u32
  if (data?.dwOutDiscards !== undefined) view.setUint32(48, Number(data.dwOutDiscards), true);
  // 0x34: u32
  if (data?.dwOutNoRoutes !== undefined) view.setUint32(52, Number(data.dwOutNoRoutes), true);
  // 0x38: u32
  if (data?.dwReasmTimeout !== undefined) view.setUint32(56, Number(data.dwReasmTimeout), true);
  // 0x3c: u32
  if (data?.dwReasmReqds !== undefined) view.setUint32(60, Number(data.dwReasmReqds), true);
  // 0x40: u32
  if (data?.dwReasmOks !== undefined) view.setUint32(64, Number(data.dwReasmOks), true);
  // 0x44: u32
  if (data?.dwReasmFails !== undefined) view.setUint32(68, Number(data.dwReasmFails), true);
  // 0x48: u32
  if (data?.dwFragOks !== undefined) view.setUint32(72, Number(data.dwFragOks), true);
  // 0x4c: u32
  if (data?.dwFragFails !== undefined) view.setUint32(76, Number(data.dwFragFails), true);
  // 0x50: u32
  if (data?.dwFragCreates !== undefined) view.setUint32(80, Number(data.dwFragCreates), true);
  // 0x54: u32
  if (data?.dwNumIf !== undefined) view.setUint32(84, Number(data.dwNumIf), true);
  // 0x58: u32
  if (data?.dwNumAddr !== undefined) view.setUint32(88, Number(data.dwNumAddr), true);
  // 0x5c: u32
  if (data?.dwNumRoutes !== undefined) view.setUint32(92, Number(data.dwNumRoutes), true);
  return buf;
}

export class MIB_IPSTATS_LHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwDefaultTTL(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwInReceives(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwInHdrErrors(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwInAddrErrors(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwForwDatagrams(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwInUnknownProtos(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwInDiscards(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwInDelivers(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwOutRequests(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwRoutingDiscards(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwOutDiscards(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwOutNoRoutes(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwReasmTimeout(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwReasmReqds(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwReasmOks(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwReasmFails(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwFragOks(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwFragFails(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwFragCreates(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwNumIf(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwNumAddr(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwNumRoutes(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwDefaultTTL(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwInReceives(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwInHdrErrors(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwInAddrErrors(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwForwDatagrams(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwInUnknownProtos(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwInDiscards(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwInDelivers(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwOutRequests(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwRoutingDiscards(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwOutDiscards(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwOutNoRoutes(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwReasmTimeout(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwReasmReqds(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwReasmOks(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwReasmFails(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwFragOks(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwFragFails(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwFragCreates(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwNumIf(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwNumAddr(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwNumRoutes(value: number) {
    this.view.setUint32(92, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPSTATS_W2K (size: 96)
 */
export interface MIB_IPSTATS_W2K {
  /** u32 */
  dwForwarding: number;
  /** u32 */
  dwDefaultTTL: number;
  /** u32 */
  dwInReceives: number;
  /** u32 */
  dwInHdrErrors: number;
  /** u32 */
  dwInAddrErrors: number;
  /** u32 */
  dwForwDatagrams: number;
  /** u32 */
  dwInUnknownProtos: number;
  /** u32 */
  dwInDiscards: number;
  /** u32 */
  dwInDelivers: number;
  /** u32 */
  dwOutRequests: number;
  /** u32 */
  dwRoutingDiscards: number;
  /** u32 */
  dwOutDiscards: number;
  /** u32 */
  dwOutNoRoutes: number;
  /** u32 */
  dwReasmTimeout: number;
  /** u32 */
  dwReasmReqds: number;
  /** u32 */
  dwReasmOks: number;
  /** u32 */
  dwReasmFails: number;
  /** u32 */
  dwFragOks: number;
  /** u32 */
  dwFragFails: number;
  /** u32 */
  dwFragCreates: number;
  /** u32 */
  dwNumIf: number;
  /** u32 */
  dwNumAddr: number;
  /** u32 */
  dwNumRoutes: number;
}

export const sizeofMIB_IPSTATS_W2K = 96;

export function allocMIB_IPSTATS_W2K(data?: Partial<MIB_IPSTATS_W2K>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPSTATS_W2K);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwForwarding !== undefined) view.setUint32(0, Number(data.dwForwarding), true);
  // 0x04: u32
  if (data?.dwDefaultTTL !== undefined) view.setUint32(4, Number(data.dwDefaultTTL), true);
  // 0x08: u32
  if (data?.dwInReceives !== undefined) view.setUint32(8, Number(data.dwInReceives), true);
  // 0x0c: u32
  if (data?.dwInHdrErrors !== undefined) view.setUint32(12, Number(data.dwInHdrErrors), true);
  // 0x10: u32
  if (data?.dwInAddrErrors !== undefined) view.setUint32(16, Number(data.dwInAddrErrors), true);
  // 0x14: u32
  if (data?.dwForwDatagrams !== undefined) view.setUint32(20, Number(data.dwForwDatagrams), true);
  // 0x18: u32
  if (data?.dwInUnknownProtos !== undefined) view.setUint32(24, Number(data.dwInUnknownProtos), true);
  // 0x1c: u32
  if (data?.dwInDiscards !== undefined) view.setUint32(28, Number(data.dwInDiscards), true);
  // 0x20: u32
  if (data?.dwInDelivers !== undefined) view.setUint32(32, Number(data.dwInDelivers), true);
  // 0x24: u32
  if (data?.dwOutRequests !== undefined) view.setUint32(36, Number(data.dwOutRequests), true);
  // 0x28: u32
  if (data?.dwRoutingDiscards !== undefined) view.setUint32(40, Number(data.dwRoutingDiscards), true);
  // 0x2c: u32
  if (data?.dwOutDiscards !== undefined) view.setUint32(44, Number(data.dwOutDiscards), true);
  // 0x30: u32
  if (data?.dwOutNoRoutes !== undefined) view.setUint32(48, Number(data.dwOutNoRoutes), true);
  // 0x34: u32
  if (data?.dwReasmTimeout !== undefined) view.setUint32(52, Number(data.dwReasmTimeout), true);
  // 0x38: u32
  if (data?.dwReasmReqds !== undefined) view.setUint32(56, Number(data.dwReasmReqds), true);
  // 0x3c: u32
  if (data?.dwReasmOks !== undefined) view.setUint32(60, Number(data.dwReasmOks), true);
  // 0x40: u32
  if (data?.dwReasmFails !== undefined) view.setUint32(64, Number(data.dwReasmFails), true);
  // 0x44: u32
  if (data?.dwFragOks !== undefined) view.setUint32(68, Number(data.dwFragOks), true);
  // 0x48: u32
  if (data?.dwFragFails !== undefined) view.setUint32(72, Number(data.dwFragFails), true);
  // 0x4c: u32
  if (data?.dwFragCreates !== undefined) view.setUint32(76, Number(data.dwFragCreates), true);
  // 0x50: u32
  if (data?.dwNumIf !== undefined) view.setUint32(80, Number(data.dwNumIf), true);
  // 0x54: u32
  if (data?.dwNumAddr !== undefined) view.setUint32(84, Number(data.dwNumAddr), true);
  // 0x58: u32
  if (data?.dwNumRoutes !== undefined) view.setUint32(88, Number(data.dwNumRoutes), true);
  // 0x5c: pad4
  return buf;
}

export class MIB_IPSTATS_W2KView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwForwarding(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwDefaultTTL(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwInReceives(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwInHdrErrors(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwInAddrErrors(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwForwDatagrams(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwInUnknownProtos(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwInDiscards(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwInDelivers(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwOutRequests(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwRoutingDiscards(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwOutDiscards(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwOutNoRoutes(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwReasmTimeout(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwReasmReqds(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwReasmOks(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwReasmFails(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwFragOks(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwFragFails(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwFragCreates(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwNumIf(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwNumAddr(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwNumRoutes(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x00: u32
  set dwForwarding(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwDefaultTTL(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwInReceives(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwInHdrErrors(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwInAddrErrors(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwForwDatagrams(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwInUnknownProtos(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwInDiscards(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwInDelivers(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwOutRequests(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwRoutingDiscards(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwOutDiscards(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwOutNoRoutes(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwReasmTimeout(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwReasmReqds(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwReasmOks(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwReasmFails(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwFragOks(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwFragFails(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwFragCreates(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwNumIf(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwNumAddr(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwNumRoutes(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIBICMPSTATS (size: 56)
 */
export interface MIBICMPSTATS {
  /** u32 */
  dwMsgs: number;
  /** u32 */
  dwErrors: number;
  /** u32 */
  dwDestUnreachs: number;
  /** u32 */
  dwTimeExcds: number;
  /** u32 */
  dwParmProbs: number;
  /** u32 */
  dwSrcQuenchs: number;
  /** u32 */
  dwRedirects: number;
  /** u32 */
  dwEchos: number;
  /** u32 */
  dwEchoReps: number;
  /** u32 */
  dwTimestamps: number;
  /** u32 */
  dwTimestampReps: number;
  /** u32 */
  dwAddrMasks: number;
  /** u32 */
  dwAddrMaskReps: number;
}

export const sizeofMIBICMPSTATS = 56;

export function allocMIBICMPSTATS(data?: Partial<MIBICMPSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofMIBICMPSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMsgs !== undefined) view.setUint32(0, Number(data.dwMsgs), true);
  // 0x04: u32
  if (data?.dwErrors !== undefined) view.setUint32(4, Number(data.dwErrors), true);
  // 0x08: u32
  if (data?.dwDestUnreachs !== undefined) view.setUint32(8, Number(data.dwDestUnreachs), true);
  // 0x0c: u32
  if (data?.dwTimeExcds !== undefined) view.setUint32(12, Number(data.dwTimeExcds), true);
  // 0x10: u32
  if (data?.dwParmProbs !== undefined) view.setUint32(16, Number(data.dwParmProbs), true);
  // 0x14: u32
  if (data?.dwSrcQuenchs !== undefined) view.setUint32(20, Number(data.dwSrcQuenchs), true);
  // 0x18: u32
  if (data?.dwRedirects !== undefined) view.setUint32(24, Number(data.dwRedirects), true);
  // 0x1c: u32
  if (data?.dwEchos !== undefined) view.setUint32(28, Number(data.dwEchos), true);
  // 0x20: u32
  if (data?.dwEchoReps !== undefined) view.setUint32(32, Number(data.dwEchoReps), true);
  // 0x24: u32
  if (data?.dwTimestamps !== undefined) view.setUint32(36, Number(data.dwTimestamps), true);
  // 0x28: u32
  if (data?.dwTimestampReps !== undefined) view.setUint32(40, Number(data.dwTimestampReps), true);
  // 0x2c: u32
  if (data?.dwAddrMasks !== undefined) view.setUint32(44, Number(data.dwAddrMasks), true);
  // 0x30: u32
  if (data?.dwAddrMaskReps !== undefined) view.setUint32(48, Number(data.dwAddrMaskReps), true);
  // 0x34: pad4
  return buf;
}

export class MIBICMPSTATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMsgs(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwErrors(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDestUnreachs(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwTimeExcds(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwParmProbs(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwSrcQuenchs(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwRedirects(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwEchos(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwEchoReps(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwTimestamps(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwTimestampReps(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwAddrMasks(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwAddrMaskReps(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set dwMsgs(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwErrors(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDestUnreachs(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwTimeExcds(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwParmProbs(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwSrcQuenchs(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwRedirects(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwEchos(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwEchoReps(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwTimestamps(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwTimestampReps(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwAddrMasks(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwAddrMaskReps(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIBICMPINFO (size: 16)
 */
export interface MIBICMPINFO {
  /** Windows.Win32.NetworkManagement.IpHelper.MIBICMPSTATS */
  icmpInStats: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.IpHelper.MIBICMPSTATS */
  icmpOutStats: Uint8Array | Deno.PointerValue;
}

export const sizeofMIBICMPINFO = 16;

export function allocMIBICMPINFO(data?: Partial<MIBICMPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIBICMPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.icmpInStats !== undefined) view.setBigUint64(0, data.icmpInStats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.icmpInStats))), true);
  // 0x08: pointer
  if (data?.icmpOutStats !== undefined) view.setBigUint64(8, data.icmpOutStats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.icmpOutStats))), true);
  return buf;
}

export class MIBICMPINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get icmpInStats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get icmpOutStats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set icmpInStats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set icmpOutStats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_ICMP (size: 8)
 */
export interface MIB_ICMP {
  /** Windows.Win32.NetworkManagement.IpHelper.MIBICMPINFO */
  stats: Uint8Array | Deno.PointerValue;
}

export const sizeofMIB_ICMP = 8;

export function allocMIB_ICMP(data?: Partial<MIB_ICMP>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_ICMP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.stats !== undefined) view.setBigUint64(0, data.stats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stats))), true);
  return buf;
}

export class MIB_ICMPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get stats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set stats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIBICMPSTATS_EX_XPSP1 (size: 16)
 */
export interface MIBICMPSTATS_EX_XPSP1 {
  /** u32 */
  dwMsgs: number;
  /** u32 */
  dwErrors: number;
  /** array */
  rgdwTypeCount: Deno.PointerValue;
}

export const sizeofMIBICMPSTATS_EX_XPSP1 = 16;

export function allocMIBICMPSTATS_EX_XPSP1(data?: Partial<MIBICMPSTATS_EX_XPSP1>): Uint8Array {
  const buf = new Uint8Array(sizeofMIBICMPSTATS_EX_XPSP1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMsgs !== undefined) view.setUint32(0, Number(data.dwMsgs), true);
  // 0x04: u32
  if (data?.dwErrors !== undefined) view.setUint32(4, Number(data.dwErrors), true);
  // 0x08: pointer
  if (data?.rgdwTypeCount !== undefined) view.setBigUint64(8, data.rgdwTypeCount === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgdwTypeCount))), true);
  return buf;
}

export class MIBICMPSTATS_EX_XPSP1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMsgs(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwErrors(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgdwTypeCount(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwMsgs(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwErrors(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgdwTypeCount(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_ICMP_EX_XPSP1 (size: 16)
 */
export interface MIB_ICMP_EX_XPSP1 {
  /** Windows.Win32.NetworkManagement.IpHelper.MIBICMPSTATS_EX_XPSP1 */
  icmpInStats: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.IpHelper.MIBICMPSTATS_EX_XPSP1 */
  icmpOutStats: Uint8Array | Deno.PointerValue;
}

export const sizeofMIB_ICMP_EX_XPSP1 = 16;

export function allocMIB_ICMP_EX_XPSP1(data?: Partial<MIB_ICMP_EX_XPSP1>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_ICMP_EX_XPSP1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.icmpInStats !== undefined) view.setBigUint64(0, data.icmpInStats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.icmpInStats))), true);
  // 0x08: pointer
  if (data?.icmpOutStats !== undefined) view.setBigUint64(8, data.icmpOutStats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.icmpOutStats))), true);
  return buf;
}

export class MIB_ICMP_EX_XPSP1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get icmpInStats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get icmpOutStats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set icmpInStats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set icmpOutStats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_OIF_XP (size: 16)
 */
export interface MIB_IPMCAST_OIF_XP {
  /** u32 */
  dwOutIfIndex: number;
  /** u32 */
  dwNextHopAddr: number;
  /** u32 */
  dwReserved: number;
  /** u32 */
  dwReserved1: number;
}

export const sizeofMIB_IPMCAST_OIF_XP = 16;

export function allocMIB_IPMCAST_OIF_XP(data?: Partial<MIB_IPMCAST_OIF_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_OIF_XP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOutIfIndex !== undefined) view.setUint32(0, Number(data.dwOutIfIndex), true);
  // 0x04: u32
  if (data?.dwNextHopAddr !== undefined) view.setUint32(4, Number(data.dwNextHopAddr), true);
  // 0x08: u32
  if (data?.dwReserved !== undefined) view.setUint32(8, Number(data.dwReserved), true);
  // 0x0c: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(12, Number(data.dwReserved1), true);
  return buf;
}

export class MIB_IPMCAST_OIF_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOutIfIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNextHopAddr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwReserved(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved1(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwOutIfIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNextHopAddr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwReserved(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved1(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_OIF_W2K (size: 24)
 */
export interface MIB_IPMCAST_OIF_W2K {
  /** u32 */
  dwOutIfIndex: number;
  /** u32 */
  dwNextHopAddr: number;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwReserved: number;
}

export const sizeofMIB_IPMCAST_OIF_W2K = 24;

export function allocMIB_IPMCAST_OIF_W2K(data?: Partial<MIB_IPMCAST_OIF_W2K>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_OIF_W2K);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOutIfIndex !== undefined) view.setUint32(0, Number(data.dwOutIfIndex), true);
  // 0x04: u32
  if (data?.dwNextHopAddr !== undefined) view.setUint32(4, Number(data.dwNextHopAddr), true);
  // 0x08: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(8, data.pvReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvReserved))), true);
  // 0x10: u32
  if (data?.dwReserved !== undefined) view.setUint32(16, Number(data.dwReserved), true);
  // 0x14: pad4
  return buf;
}

export class MIB_IPMCAST_OIF_W2KView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOutIfIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNextHopAddr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pvReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwReserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwOutIfIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNextHopAddr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pvReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwReserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_MFE (size: 72)
 */
export interface MIB_IPMCAST_MFE {
  /** u32 */
  dwGroup: number;
  /** u32 */
  dwSource: number;
  /** u32 */
  dwSrcMask: number;
  /** u32 */
  dwUpStrmNgbr: number;
  /** u32 */
  dwInIfIndex: number;
  /** u32 */
  dwInIfProtocol: number;
  /** u32 */
  dwRouteProtocol: number;
  /** u32 */
  dwRouteNetwork: number;
  /** u32 */
  dwRouteMask: number;
  /** u32 */
  ulUpTime: number;
  /** u32 */
  ulExpiryTime: number;
  /** u32 */
  ulTimeOut: number;
  /** u32 */
  ulNumOutIf: number;
  /** u32 */
  fFlags: number;
  /** u32 */
  dwReserved: number;
  /** array */
  rgmioOutInfo: Deno.PointerValue;
}

export const sizeofMIB_IPMCAST_MFE = 72;

export function allocMIB_IPMCAST_MFE(data?: Partial<MIB_IPMCAST_MFE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_MFE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwGroup !== undefined) view.setUint32(0, Number(data.dwGroup), true);
  // 0x04: u32
  if (data?.dwSource !== undefined) view.setUint32(4, Number(data.dwSource), true);
  // 0x08: u32
  if (data?.dwSrcMask !== undefined) view.setUint32(8, Number(data.dwSrcMask), true);
  // 0x0c: u32
  if (data?.dwUpStrmNgbr !== undefined) view.setUint32(12, Number(data.dwUpStrmNgbr), true);
  // 0x10: u32
  if (data?.dwInIfIndex !== undefined) view.setUint32(16, Number(data.dwInIfIndex), true);
  // 0x14: u32
  if (data?.dwInIfProtocol !== undefined) view.setUint32(20, Number(data.dwInIfProtocol), true);
  // 0x18: u32
  if (data?.dwRouteProtocol !== undefined) view.setUint32(24, Number(data.dwRouteProtocol), true);
  // 0x1c: u32
  if (data?.dwRouteNetwork !== undefined) view.setUint32(28, Number(data.dwRouteNetwork), true);
  // 0x20: u32
  if (data?.dwRouteMask !== undefined) view.setUint32(32, Number(data.dwRouteMask), true);
  // 0x24: u32
  if (data?.ulUpTime !== undefined) view.setUint32(36, Number(data.ulUpTime), true);
  // 0x28: u32
  if (data?.ulExpiryTime !== undefined) view.setUint32(40, Number(data.ulExpiryTime), true);
  // 0x2c: u32
  if (data?.ulTimeOut !== undefined) view.setUint32(44, Number(data.ulTimeOut), true);
  // 0x30: u32
  if (data?.ulNumOutIf !== undefined) view.setUint32(48, Number(data.ulNumOutIf), true);
  // 0x34: u32
  if (data?.fFlags !== undefined) view.setUint32(52, Number(data.fFlags), true);
  // 0x38: u32
  if (data?.dwReserved !== undefined) view.setUint32(56, Number(data.dwReserved), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.rgmioOutInfo !== undefined) view.setBigUint64(64, data.rgmioOutInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgmioOutInfo))), true);
  return buf;
}

export class MIB_IPMCAST_MFEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwGroup(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSource(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSrcMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwUpStrmNgbr(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwInIfIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwInIfProtocol(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwRouteProtocol(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwRouteNetwork(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwRouteMask(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ulUpTime(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ulExpiryTime(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ulTimeOut(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ulNumOutIf(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get fFlags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwReserved(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get rgmioOutInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwGroup(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSource(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSrcMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwUpStrmNgbr(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwInIfIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwInIfProtocol(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwRouteProtocol(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwRouteNetwork(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwRouteMask(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ulUpTime(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ulExpiryTime(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ulTimeOut(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ulNumOutIf(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set fFlags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwReserved(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set rgmioOutInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_MFE_TABLE (size: 16)
 */
export interface MIB_MFE_TABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_MFE_TABLE = 16;

export function allocMIB_MFE_TABLE(data?: Partial<MIB_MFE_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_MFE_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_MFE_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_OIF_STATS_LH (size: 32)
 */
export interface MIB_IPMCAST_OIF_STATS_LH {
  /** u32 */
  dwOutIfIndex: number;
  /** u32 */
  dwNextHopAddr: number;
  /** u32 */
  dwDialContext: number;
  /** u32 */
  ulTtlTooLow: number;
  /** u32 */
  ulFragNeeded: number;
  /** u32 */
  ulOutPackets: number;
  /** u32 */
  ulOutDiscards: number;
}

export const sizeofMIB_IPMCAST_OIF_STATS_LH = 32;

export function allocMIB_IPMCAST_OIF_STATS_LH(data?: Partial<MIB_IPMCAST_OIF_STATS_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_OIF_STATS_LH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOutIfIndex !== undefined) view.setUint32(0, Number(data.dwOutIfIndex), true);
  // 0x04: u32
  if (data?.dwNextHopAddr !== undefined) view.setUint32(4, Number(data.dwNextHopAddr), true);
  // 0x08: u32
  if (data?.dwDialContext !== undefined) view.setUint32(8, Number(data.dwDialContext), true);
  // 0x0c: u32
  if (data?.ulTtlTooLow !== undefined) view.setUint32(12, Number(data.ulTtlTooLow), true);
  // 0x10: u32
  if (data?.ulFragNeeded !== undefined) view.setUint32(16, Number(data.ulFragNeeded), true);
  // 0x14: u32
  if (data?.ulOutPackets !== undefined) view.setUint32(20, Number(data.ulOutPackets), true);
  // 0x18: u32
  if (data?.ulOutDiscards !== undefined) view.setUint32(24, Number(data.ulOutDiscards), true);
  // 0x1c: pad4
  return buf;
}

export class MIB_IPMCAST_OIF_STATS_LHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOutIfIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNextHopAddr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDialContext(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulTtlTooLow(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulFragNeeded(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ulOutPackets(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ulOutDiscards(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwOutIfIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNextHopAddr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDialContext(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulTtlTooLow(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulFragNeeded(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ulOutPackets(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ulOutDiscards(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_OIF_STATS_W2K (size: 32)
 */
export interface MIB_IPMCAST_OIF_STATS_W2K {
  /** u32 */
  dwOutIfIndex: number;
  /** u32 */
  dwNextHopAddr: number;
  /** ptr */
  pvDialContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  ulTtlTooLow: number;
  /** u32 */
  ulFragNeeded: number;
  /** u32 */
  ulOutPackets: number;
  /** u32 */
  ulOutDiscards: number;
}

export const sizeofMIB_IPMCAST_OIF_STATS_W2K = 32;

export function allocMIB_IPMCAST_OIF_STATS_W2K(data?: Partial<MIB_IPMCAST_OIF_STATS_W2K>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_OIF_STATS_W2K);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOutIfIndex !== undefined) view.setUint32(0, Number(data.dwOutIfIndex), true);
  // 0x04: u32
  if (data?.dwNextHopAddr !== undefined) view.setUint32(4, Number(data.dwNextHopAddr), true);
  // 0x08: pointer
  if (data?.pvDialContext !== undefined) view.setBigUint64(8, data.pvDialContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvDialContext))), true);
  // 0x10: u32
  if (data?.ulTtlTooLow !== undefined) view.setUint32(16, Number(data.ulTtlTooLow), true);
  // 0x14: u32
  if (data?.ulFragNeeded !== undefined) view.setUint32(20, Number(data.ulFragNeeded), true);
  // 0x18: u32
  if (data?.ulOutPackets !== undefined) view.setUint32(24, Number(data.ulOutPackets), true);
  // 0x1c: u32
  if (data?.ulOutDiscards !== undefined) view.setUint32(28, Number(data.ulOutDiscards), true);
  return buf;
}

export class MIB_IPMCAST_OIF_STATS_W2KView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOutIfIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNextHopAddr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pvDialContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ulTtlTooLow(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ulFragNeeded(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ulOutPackets(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulOutDiscards(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set dwOutIfIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNextHopAddr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pvDialContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ulTtlTooLow(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ulFragNeeded(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ulOutPackets(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulOutDiscards(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_MFE_STATS (size: 72)
 */
export interface MIB_IPMCAST_MFE_STATS {
  /** u32 */
  dwGroup: number;
  /** u32 */
  dwSource: number;
  /** u32 */
  dwSrcMask: number;
  /** u32 */
  dwUpStrmNgbr: number;
  /** u32 */
  dwInIfIndex: number;
  /** u32 */
  dwInIfProtocol: number;
  /** u32 */
  dwRouteProtocol: number;
  /** u32 */
  dwRouteNetwork: number;
  /** u32 */
  dwRouteMask: number;
  /** u32 */
  ulUpTime: number;
  /** u32 */
  ulExpiryTime: number;
  /** u32 */
  ulNumOutIf: number;
  /** u32 */
  ulInPkts: number;
  /** u32 */
  ulInOctets: number;
  /** u32 */
  ulPktsDifferentIf: number;
  /** u32 */
  ulQueueOverflow: number;
  /** array */
  rgmiosOutStats: Deno.PointerValue;
}

export const sizeofMIB_IPMCAST_MFE_STATS = 72;

export function allocMIB_IPMCAST_MFE_STATS(data?: Partial<MIB_IPMCAST_MFE_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_MFE_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwGroup !== undefined) view.setUint32(0, Number(data.dwGroup), true);
  // 0x04: u32
  if (data?.dwSource !== undefined) view.setUint32(4, Number(data.dwSource), true);
  // 0x08: u32
  if (data?.dwSrcMask !== undefined) view.setUint32(8, Number(data.dwSrcMask), true);
  // 0x0c: u32
  if (data?.dwUpStrmNgbr !== undefined) view.setUint32(12, Number(data.dwUpStrmNgbr), true);
  // 0x10: u32
  if (data?.dwInIfIndex !== undefined) view.setUint32(16, Number(data.dwInIfIndex), true);
  // 0x14: u32
  if (data?.dwInIfProtocol !== undefined) view.setUint32(20, Number(data.dwInIfProtocol), true);
  // 0x18: u32
  if (data?.dwRouteProtocol !== undefined) view.setUint32(24, Number(data.dwRouteProtocol), true);
  // 0x1c: u32
  if (data?.dwRouteNetwork !== undefined) view.setUint32(28, Number(data.dwRouteNetwork), true);
  // 0x20: u32
  if (data?.dwRouteMask !== undefined) view.setUint32(32, Number(data.dwRouteMask), true);
  // 0x24: u32
  if (data?.ulUpTime !== undefined) view.setUint32(36, Number(data.ulUpTime), true);
  // 0x28: u32
  if (data?.ulExpiryTime !== undefined) view.setUint32(40, Number(data.ulExpiryTime), true);
  // 0x2c: u32
  if (data?.ulNumOutIf !== undefined) view.setUint32(44, Number(data.ulNumOutIf), true);
  // 0x30: u32
  if (data?.ulInPkts !== undefined) view.setUint32(48, Number(data.ulInPkts), true);
  // 0x34: u32
  if (data?.ulInOctets !== undefined) view.setUint32(52, Number(data.ulInOctets), true);
  // 0x38: u32
  if (data?.ulPktsDifferentIf !== undefined) view.setUint32(56, Number(data.ulPktsDifferentIf), true);
  // 0x3c: u32
  if (data?.ulQueueOverflow !== undefined) view.setUint32(60, Number(data.ulQueueOverflow), true);
  // 0x40: pointer
  if (data?.rgmiosOutStats !== undefined) view.setBigUint64(64, data.rgmiosOutStats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgmiosOutStats))), true);
  return buf;
}

export class MIB_IPMCAST_MFE_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwGroup(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSource(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSrcMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwUpStrmNgbr(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwInIfIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwInIfProtocol(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwRouteProtocol(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwRouteNetwork(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwRouteMask(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ulUpTime(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ulExpiryTime(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ulNumOutIf(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ulInPkts(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get ulInOctets(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get ulPktsDifferentIf(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get ulQueueOverflow(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get rgmiosOutStats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwGroup(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSource(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSrcMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwUpStrmNgbr(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwInIfIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwInIfProtocol(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwRouteProtocol(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwRouteNetwork(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwRouteMask(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ulUpTime(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ulExpiryTime(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ulNumOutIf(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ulInPkts(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set ulInOctets(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set ulPktsDifferentIf(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set ulQueueOverflow(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set rgmiosOutStats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_MFE_STATS_TABLE (size: 16)
 */
export interface MIB_MFE_STATS_TABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_MFE_STATS_TABLE = 16;

export function allocMIB_MFE_STATS_TABLE(data?: Partial<MIB_MFE_STATS_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_MFE_STATS_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_MFE_STATS_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_MFE_STATS_EX_XP (size: 96)
 */
export interface MIB_IPMCAST_MFE_STATS_EX_XP {
  /** u32 */
  dwGroup: number;
  /** u32 */
  dwSource: number;
  /** u32 */
  dwSrcMask: number;
  /** u32 */
  dwUpStrmNgbr: number;
  /** u32 */
  dwInIfIndex: number;
  /** u32 */
  dwInIfProtocol: number;
  /** u32 */
  dwRouteProtocol: number;
  /** u32 */
  dwRouteNetwork: number;
  /** u32 */
  dwRouteMask: number;
  /** u32 */
  ulUpTime: number;
  /** u32 */
  ulExpiryTime: number;
  /** u32 */
  ulNumOutIf: number;
  /** u32 */
  ulInPkts: number;
  /** u32 */
  ulInOctets: number;
  /** u32 */
  ulPktsDifferentIf: number;
  /** u32 */
  ulQueueOverflow: number;
  /** u32 */
  ulUninitMfe: number;
  /** u32 */
  ulNegativeMfe: number;
  /** u32 */
  ulInDiscards: number;
  /** u32 */
  ulInHdrErrors: number;
  /** u32 */
  ulTotalOutPackets: number;
  /** array */
  rgmiosOutStats: Deno.PointerValue;
}

export const sizeofMIB_IPMCAST_MFE_STATS_EX_XP = 96;

export function allocMIB_IPMCAST_MFE_STATS_EX_XP(data?: Partial<MIB_IPMCAST_MFE_STATS_EX_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_MFE_STATS_EX_XP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwGroup !== undefined) view.setUint32(0, Number(data.dwGroup), true);
  // 0x04: u32
  if (data?.dwSource !== undefined) view.setUint32(4, Number(data.dwSource), true);
  // 0x08: u32
  if (data?.dwSrcMask !== undefined) view.setUint32(8, Number(data.dwSrcMask), true);
  // 0x0c: u32
  if (data?.dwUpStrmNgbr !== undefined) view.setUint32(12, Number(data.dwUpStrmNgbr), true);
  // 0x10: u32
  if (data?.dwInIfIndex !== undefined) view.setUint32(16, Number(data.dwInIfIndex), true);
  // 0x14: u32
  if (data?.dwInIfProtocol !== undefined) view.setUint32(20, Number(data.dwInIfProtocol), true);
  // 0x18: u32
  if (data?.dwRouteProtocol !== undefined) view.setUint32(24, Number(data.dwRouteProtocol), true);
  // 0x1c: u32
  if (data?.dwRouteNetwork !== undefined) view.setUint32(28, Number(data.dwRouteNetwork), true);
  // 0x20: u32
  if (data?.dwRouteMask !== undefined) view.setUint32(32, Number(data.dwRouteMask), true);
  // 0x24: u32
  if (data?.ulUpTime !== undefined) view.setUint32(36, Number(data.ulUpTime), true);
  // 0x28: u32
  if (data?.ulExpiryTime !== undefined) view.setUint32(40, Number(data.ulExpiryTime), true);
  // 0x2c: u32
  if (data?.ulNumOutIf !== undefined) view.setUint32(44, Number(data.ulNumOutIf), true);
  // 0x30: u32
  if (data?.ulInPkts !== undefined) view.setUint32(48, Number(data.ulInPkts), true);
  // 0x34: u32
  if (data?.ulInOctets !== undefined) view.setUint32(52, Number(data.ulInOctets), true);
  // 0x38: u32
  if (data?.ulPktsDifferentIf !== undefined) view.setUint32(56, Number(data.ulPktsDifferentIf), true);
  // 0x3c: u32
  if (data?.ulQueueOverflow !== undefined) view.setUint32(60, Number(data.ulQueueOverflow), true);
  // 0x40: u32
  if (data?.ulUninitMfe !== undefined) view.setUint32(64, Number(data.ulUninitMfe), true);
  // 0x44: u32
  if (data?.ulNegativeMfe !== undefined) view.setUint32(68, Number(data.ulNegativeMfe), true);
  // 0x48: u32
  if (data?.ulInDiscards !== undefined) view.setUint32(72, Number(data.ulInDiscards), true);
  // 0x4c: u32
  if (data?.ulInHdrErrors !== undefined) view.setUint32(76, Number(data.ulInHdrErrors), true);
  // 0x50: u32
  if (data?.ulTotalOutPackets !== undefined) view.setUint32(80, Number(data.ulTotalOutPackets), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.rgmiosOutStats !== undefined) view.setBigUint64(88, data.rgmiosOutStats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgmiosOutStats))), true);
  return buf;
}

export class MIB_IPMCAST_MFE_STATS_EX_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwGroup(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSource(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSrcMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwUpStrmNgbr(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwInIfIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwInIfProtocol(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwRouteProtocol(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwRouteNetwork(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwRouteMask(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ulUpTime(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ulExpiryTime(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ulNumOutIf(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ulInPkts(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get ulInOctets(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get ulPktsDifferentIf(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get ulQueueOverflow(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get ulUninitMfe(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get ulNegativeMfe(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get ulInDiscards(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get ulInHdrErrors(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get ulTotalOutPackets(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get rgmiosOutStats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwGroup(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSource(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSrcMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwUpStrmNgbr(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwInIfIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwInIfProtocol(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwRouteProtocol(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwRouteNetwork(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwRouteMask(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ulUpTime(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ulExpiryTime(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ulNumOutIf(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ulInPkts(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set ulInOctets(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set ulPktsDifferentIf(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set ulQueueOverflow(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set ulUninitMfe(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set ulNegativeMfe(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set ulInDiscards(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set ulInHdrErrors(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set ulTotalOutPackets(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set rgmiosOutStats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_MFE_STATS_TABLE_EX_XP (size: 16)
 */
export interface MIB_MFE_STATS_TABLE_EX_XP {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_MFE_STATS_TABLE_EX_XP = 16;

export function allocMIB_MFE_STATS_TABLE_EX_XP(data?: Partial<MIB_MFE_STATS_TABLE_EX_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_MFE_STATS_TABLE_EX_XP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_MFE_STATS_TABLE_EX_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_GLOBAL (size: 8)
 */
export interface MIB_IPMCAST_GLOBAL {
  /** u32 */
  dwEnable: number;
}

export const sizeofMIB_IPMCAST_GLOBAL = 8;

export function allocMIB_IPMCAST_GLOBAL(data?: Partial<MIB_IPMCAST_GLOBAL>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_GLOBAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwEnable !== undefined) view.setUint32(0, Number(data.dwEnable), true);
  // 0x04: pad4
  return buf;
}

export class MIB_IPMCAST_GLOBALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwEnable(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwEnable(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_IF_ENTRY (size: 24)
 */
export interface MIB_IPMCAST_IF_ENTRY {
  /** u32 */
  dwIfIndex: number;
  /** u32 */
  dwTtl: number;
  /** u32 */
  dwProtocol: number;
  /** u32 */
  dwRateLimit: number;
  /** u32 */
  ulInMcastOctets: number;
  /** u32 */
  ulOutMcastOctets: number;
}

export const sizeofMIB_IPMCAST_IF_ENTRY = 24;

export function allocMIB_IPMCAST_IF_ENTRY(data?: Partial<MIB_IPMCAST_IF_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_IF_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIfIndex !== undefined) view.setUint32(0, Number(data.dwIfIndex), true);
  // 0x04: u32
  if (data?.dwTtl !== undefined) view.setUint32(4, Number(data.dwTtl), true);
  // 0x08: u32
  if (data?.dwProtocol !== undefined) view.setUint32(8, Number(data.dwProtocol), true);
  // 0x0c: u32
  if (data?.dwRateLimit !== undefined) view.setUint32(12, Number(data.dwRateLimit), true);
  // 0x10: u32
  if (data?.ulInMcastOctets !== undefined) view.setUint32(16, Number(data.ulInMcastOctets), true);
  // 0x14: u32
  if (data?.ulOutMcastOctets !== undefined) view.setUint32(20, Number(data.ulOutMcastOctets), true);
  return buf;
}

export class MIB_IPMCAST_IF_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwIfIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwTtl(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwProtocol(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwRateLimit(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulInMcastOctets(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ulOutMcastOctets(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set dwIfIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwTtl(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwProtocol(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwRateLimit(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulInMcastOctets(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ulOutMcastOctets(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_IF_TABLE (size: 16)
 */
export interface MIB_IPMCAST_IF_TABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_IPMCAST_IF_TABLE = 16;

export function allocMIB_IPMCAST_IF_TABLE(data?: Partial<MIB_IPMCAST_IF_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_IF_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_IPMCAST_IF_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPROW_LH (size: 24)
 */
export interface MIB_TCPROW_LH {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwLocalAddr: number;
  /** u32 */
  dwLocalPort: number;
  /** u32 */
  dwRemoteAddr: number;
  /** u32 */
  dwRemotePort: number;
}

export const sizeofMIB_TCPROW_LH = 24;

export function allocMIB_TCPROW_LH(data?: Partial<MIB_TCPROW_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPROW_LH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: u32
  if (data?.dwLocalAddr !== undefined) view.setUint32(8, Number(data.dwLocalAddr), true);
  // 0x0c: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(12, Number(data.dwLocalPort), true);
  // 0x10: u32
  if (data?.dwRemoteAddr !== undefined) view.setUint32(16, Number(data.dwRemoteAddr), true);
  // 0x14: u32
  if (data?.dwRemotePort !== undefined) view.setUint32(20, Number(data.dwRemotePort), true);
  return buf;
}

export class MIB_TCPROW_LHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwLocalAddr(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwLocalPort(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwRemoteAddr(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwRemotePort(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwLocalAddr(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwRemoteAddr(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwRemotePort(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPROW_W2K (size: 24)
 */
export interface MIB_TCPROW_W2K {
  /** u32 */
  dwState: number;
  /** u32 */
  dwLocalAddr: number;
  /** u32 */
  dwLocalPort: number;
  /** u32 */
  dwRemoteAddr: number;
  /** u32 */
  dwRemotePort: number;
}

export const sizeofMIB_TCPROW_W2K = 24;

export function allocMIB_TCPROW_W2K(data?: Partial<MIB_TCPROW_W2K>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPROW_W2K);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwState !== undefined) view.setUint32(0, Number(data.dwState), true);
  // 0x04: u32
  if (data?.dwLocalAddr !== undefined) view.setUint32(4, Number(data.dwLocalAddr), true);
  // 0x08: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(8, Number(data.dwLocalPort), true);
  // 0x0c: u32
  if (data?.dwRemoteAddr !== undefined) view.setUint32(12, Number(data.dwRemoteAddr), true);
  // 0x10: u32
  if (data?.dwRemotePort !== undefined) view.setUint32(16, Number(data.dwRemotePort), true);
  // 0x14: pad4
  return buf;
}

export class MIB_TCPROW_W2KView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwState(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwLocalAddr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwLocalPort(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwRemoteAddr(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwRemotePort(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwState(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwLocalAddr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwRemoteAddr(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwRemotePort(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPTABLE (size: 16)
 */
export interface MIB_TCPTABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_TCPTABLE = 16;

export function allocMIB_TCPTABLE(data?: Partial<MIB_TCPTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_TCPTABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPROW2 (size: 32)
 */
export interface MIB_TCPROW2 {
  /** u32 */
  dwState: number;
  /** u32 */
  dwLocalAddr: number;
  /** u32 */
  dwLocalPort: number;
  /** u32 */
  dwRemoteAddr: number;
  /** u32 */
  dwRemotePort: number;
  /** u32 */
  dwOwningPid: number;
  /** Windows.Win32.NetworkManagement.IpHelper.TCP_CONNECTION_OFFLOAD_STATE */
  dwOffloadState: TCP_CONNECTION_OFFLOAD_STATE;
}

export const sizeofMIB_TCPROW2 = 32;

export function allocMIB_TCPROW2(data?: Partial<MIB_TCPROW2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPROW2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwState !== undefined) view.setUint32(0, Number(data.dwState), true);
  // 0x04: u32
  if (data?.dwLocalAddr !== undefined) view.setUint32(4, Number(data.dwLocalAddr), true);
  // 0x08: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(8, Number(data.dwLocalPort), true);
  // 0x0c: u32
  if (data?.dwRemoteAddr !== undefined) view.setUint32(12, Number(data.dwRemoteAddr), true);
  // 0x10: u32
  if (data?.dwRemotePort !== undefined) view.setUint32(16, Number(data.dwRemotePort), true);
  // 0x14: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(20, Number(data.dwOwningPid), true);
  // 0x18: i32
  if (data?.dwOffloadState !== undefined) view.setInt32(24, Number(data.dwOffloadState), true);
  // 0x1c: pad4
  return buf;
}

export class MIB_TCPROW2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwState(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwLocalAddr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwLocalPort(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwRemoteAddr(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwRemotePort(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwOwningPid(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get dwOffloadState(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwState(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwLocalAddr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwRemoteAddr(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwRemotePort(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set dwOffloadState(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPTABLE2 (size: 16)
 */
export interface MIB_TCPTABLE2 {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_TCPTABLE2 = 16;

export function allocMIB_TCPTABLE2(data?: Partial<MIB_TCPTABLE2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPTABLE2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_TCPTABLE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPROW_OWNER_PID (size: 24)
 */
export interface MIB_TCPROW_OWNER_PID {
  /** u32 */
  dwState: number;
  /** u32 */
  dwLocalAddr: number;
  /** u32 */
  dwLocalPort: number;
  /** u32 */
  dwRemoteAddr: number;
  /** u32 */
  dwRemotePort: number;
  /** u32 */
  dwOwningPid: number;
}

export const sizeofMIB_TCPROW_OWNER_PID = 24;

export function allocMIB_TCPROW_OWNER_PID(data?: Partial<MIB_TCPROW_OWNER_PID>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPROW_OWNER_PID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwState !== undefined) view.setUint32(0, Number(data.dwState), true);
  // 0x04: u32
  if (data?.dwLocalAddr !== undefined) view.setUint32(4, Number(data.dwLocalAddr), true);
  // 0x08: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(8, Number(data.dwLocalPort), true);
  // 0x0c: u32
  if (data?.dwRemoteAddr !== undefined) view.setUint32(12, Number(data.dwRemoteAddr), true);
  // 0x10: u32
  if (data?.dwRemotePort !== undefined) view.setUint32(16, Number(data.dwRemotePort), true);
  // 0x14: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(20, Number(data.dwOwningPid), true);
  return buf;
}

export class MIB_TCPROW_OWNER_PIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwState(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwLocalAddr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwLocalPort(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwRemoteAddr(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwRemotePort(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwOwningPid(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set dwState(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwLocalAddr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwRemoteAddr(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwRemotePort(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPTABLE_OWNER_PID (size: 16)
 */
export interface MIB_TCPTABLE_OWNER_PID {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_TCPTABLE_OWNER_PID = 16;

export function allocMIB_TCPTABLE_OWNER_PID(data?: Partial<MIB_TCPTABLE_OWNER_PID>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPTABLE_OWNER_PID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_TCPTABLE_OWNER_PIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPROW_OWNER_MODULE (size: 40)
 */
export interface MIB_TCPROW_OWNER_MODULE {
  /** u32 */
  dwState: number;
  /** u32 */
  dwLocalAddr: number;
  /** u32 */
  dwLocalPort: number;
  /** u32 */
  dwRemoteAddr: number;
  /** u32 */
  dwRemotePort: number;
  /** u32 */
  dwOwningPid: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liCreateTimestamp: Uint8Array | Deno.PointerValue;
  /** array */
  OwningModuleInfo: Deno.PointerValue;
}

export const sizeofMIB_TCPROW_OWNER_MODULE = 40;

export function allocMIB_TCPROW_OWNER_MODULE(data?: Partial<MIB_TCPROW_OWNER_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPROW_OWNER_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwState !== undefined) view.setUint32(0, Number(data.dwState), true);
  // 0x04: u32
  if (data?.dwLocalAddr !== undefined) view.setUint32(4, Number(data.dwLocalAddr), true);
  // 0x08: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(8, Number(data.dwLocalPort), true);
  // 0x0c: u32
  if (data?.dwRemoteAddr !== undefined) view.setUint32(12, Number(data.dwRemoteAddr), true);
  // 0x10: u32
  if (data?.dwRemotePort !== undefined) view.setUint32(16, Number(data.dwRemotePort), true);
  // 0x14: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(20, Number(data.dwOwningPid), true);
  // 0x18: pointer
  if (data?.liCreateTimestamp !== undefined) view.setBigUint64(24, data.liCreateTimestamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liCreateTimestamp))), true);
  // 0x20: pointer
  if (data?.OwningModuleInfo !== undefined) view.setBigUint64(32, data.OwningModuleInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwningModuleInfo))), true);
  return buf;
}

export class MIB_TCPROW_OWNER_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwState(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwLocalAddr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwLocalPort(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwRemoteAddr(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwRemotePort(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwOwningPid(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get liCreateTimestamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get OwningModuleInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwState(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwLocalAddr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwRemoteAddr(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwRemotePort(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set liCreateTimestamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set OwningModuleInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPTABLE_OWNER_MODULE (size: 16)
 */
export interface MIB_TCPTABLE_OWNER_MODULE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_TCPTABLE_OWNER_MODULE = 16;

export function allocMIB_TCPTABLE_OWNER_MODULE(data?: Partial<MIB_TCPTABLE_OWNER_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPTABLE_OWNER_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_TCPTABLE_OWNER_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCP6ROW (size: 40)
 */
export interface MIB_TCP6ROW {
  /** Windows.Win32.NetworkManagement.IpHelper.MIB_TCP_STATE */
  State: MIB_TCP_STATE;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  LocalAddr: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwLocalScopeId: number;
  /** u32 */
  dwLocalPort: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  RemoteAddr: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwRemoteScopeId: number;
  /** u32 */
  dwRemotePort: number;
}

export const sizeofMIB_TCP6ROW = 40;

export function allocMIB_TCP6ROW(data?: Partial<MIB_TCP6ROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCP6ROW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.State !== undefined) view.setInt32(0, Number(data.State), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LocalAddr !== undefined) view.setBigUint64(8, data.LocalAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LocalAddr))), true);
  // 0x10: u32
  if (data?.dwLocalScopeId !== undefined) view.setUint32(16, Number(data.dwLocalScopeId), true);
  // 0x14: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(20, Number(data.dwLocalPort), true);
  // 0x18: pointer
  if (data?.RemoteAddr !== undefined) view.setBigUint64(24, data.RemoteAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RemoteAddr))), true);
  // 0x20: u32
  if (data?.dwRemoteScopeId !== undefined) view.setUint32(32, Number(data.dwRemoteScopeId), true);
  // 0x24: u32
  if (data?.dwRemotePort !== undefined) view.setUint32(36, Number(data.dwRemotePort), true);
  return buf;
}

export class MIB_TCP6ROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get State(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LocalAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwLocalScopeId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwLocalPort(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get RemoteAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwRemoteScopeId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwRemotePort(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: i32
  set State(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LocalAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwLocalScopeId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set RemoteAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwRemoteScopeId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwRemotePort(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCP6TABLE (size: 16)
 */
export interface MIB_TCP6TABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_TCP6TABLE = 16;

export function allocMIB_TCP6TABLE(data?: Partial<MIB_TCP6TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCP6TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_TCP6TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCP6ROW2 (size: 48)
 */
export interface MIB_TCP6ROW2 {
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  LocalAddr: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwLocalScopeId: number;
  /** u32 */
  dwLocalPort: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  RemoteAddr: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwRemoteScopeId: number;
  /** u32 */
  dwRemotePort: number;
  /** Windows.Win32.NetworkManagement.IpHelper.MIB_TCP_STATE */
  State: MIB_TCP_STATE;
  /** u32 */
  dwOwningPid: number;
  /** Windows.Win32.NetworkManagement.IpHelper.TCP_CONNECTION_OFFLOAD_STATE */
  dwOffloadState: TCP_CONNECTION_OFFLOAD_STATE;
}

export const sizeofMIB_TCP6ROW2 = 48;

export function allocMIB_TCP6ROW2(data?: Partial<MIB_TCP6ROW2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCP6ROW2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LocalAddr !== undefined) view.setBigUint64(0, data.LocalAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LocalAddr))), true);
  // 0x08: u32
  if (data?.dwLocalScopeId !== undefined) view.setUint32(8, Number(data.dwLocalScopeId), true);
  // 0x0c: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(12, Number(data.dwLocalPort), true);
  // 0x10: pointer
  if (data?.RemoteAddr !== undefined) view.setBigUint64(16, data.RemoteAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RemoteAddr))), true);
  // 0x18: u32
  if (data?.dwRemoteScopeId !== undefined) view.setUint32(24, Number(data.dwRemoteScopeId), true);
  // 0x1c: u32
  if (data?.dwRemotePort !== undefined) view.setUint32(28, Number(data.dwRemotePort), true);
  // 0x20: i32
  if (data?.State !== undefined) view.setInt32(32, Number(data.State), true);
  // 0x24: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(36, Number(data.dwOwningPid), true);
  // 0x28: i32
  if (data?.dwOffloadState !== undefined) view.setInt32(40, Number(data.dwOffloadState), true);
  // 0x2c: pad4
  return buf;
}

export class MIB_TCP6ROW2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LocalAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwLocalScopeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwLocalPort(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get RemoteAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwRemoteScopeId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwRemotePort(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get State(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get dwOwningPid(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get dwOffloadState(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set LocalAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwLocalScopeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set RemoteAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwRemoteScopeId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwRemotePort(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set State(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set dwOffloadState(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCP6TABLE2 (size: 16)
 */
export interface MIB_TCP6TABLE2 {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_TCP6TABLE2 = 16;

export function allocMIB_TCP6TABLE2(data?: Partial<MIB_TCP6TABLE2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCP6TABLE2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_TCP6TABLE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCP6ROW_OWNER_PID (size: 40)
 */
export interface MIB_TCP6ROW_OWNER_PID {
  /** array */
  ucLocalAddr: Deno.PointerValue;
  /** u32 */
  dwLocalScopeId: number;
  /** u32 */
  dwLocalPort: number;
  /** array */
  ucRemoteAddr: Deno.PointerValue;
  /** u32 */
  dwRemoteScopeId: number;
  /** u32 */
  dwRemotePort: number;
  /** u32 */
  dwState: number;
  /** u32 */
  dwOwningPid: number;
}

export const sizeofMIB_TCP6ROW_OWNER_PID = 40;

export function allocMIB_TCP6ROW_OWNER_PID(data?: Partial<MIB_TCP6ROW_OWNER_PID>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCP6ROW_OWNER_PID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucLocalAddr !== undefined) view.setBigUint64(0, data.ucLocalAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucLocalAddr))), true);
  // 0x08: u32
  if (data?.dwLocalScopeId !== undefined) view.setUint32(8, Number(data.dwLocalScopeId), true);
  // 0x0c: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(12, Number(data.dwLocalPort), true);
  // 0x10: pointer
  if (data?.ucRemoteAddr !== undefined) view.setBigUint64(16, data.ucRemoteAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucRemoteAddr))), true);
  // 0x18: u32
  if (data?.dwRemoteScopeId !== undefined) view.setUint32(24, Number(data.dwRemoteScopeId), true);
  // 0x1c: u32
  if (data?.dwRemotePort !== undefined) view.setUint32(28, Number(data.dwRemotePort), true);
  // 0x20: u32
  if (data?.dwState !== undefined) view.setUint32(32, Number(data.dwState), true);
  // 0x24: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(36, Number(data.dwOwningPid), true);
  return buf;
}

export class MIB_TCP6ROW_OWNER_PIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucLocalAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwLocalScopeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwLocalPort(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ucRemoteAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwRemoteScopeId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwRemotePort(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwState(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwOwningPid(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: pointer
  set ucLocalAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwLocalScopeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ucRemoteAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwRemoteScopeId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwRemotePort(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwState(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCP6TABLE_OWNER_PID (size: 16)
 */
export interface MIB_TCP6TABLE_OWNER_PID {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_TCP6TABLE_OWNER_PID = 16;

export function allocMIB_TCP6TABLE_OWNER_PID(data?: Partial<MIB_TCP6TABLE_OWNER_PID>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCP6TABLE_OWNER_PID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_TCP6TABLE_OWNER_PIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCP6ROW_OWNER_MODULE (size: 56)
 */
export interface MIB_TCP6ROW_OWNER_MODULE {
  /** array */
  ucLocalAddr: Deno.PointerValue;
  /** u32 */
  dwLocalScopeId: number;
  /** u32 */
  dwLocalPort: number;
  /** array */
  ucRemoteAddr: Deno.PointerValue;
  /** u32 */
  dwRemoteScopeId: number;
  /** u32 */
  dwRemotePort: number;
  /** u32 */
  dwState: number;
  /** u32 */
  dwOwningPid: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liCreateTimestamp: Uint8Array | Deno.PointerValue;
  /** array */
  OwningModuleInfo: Deno.PointerValue;
}

export const sizeofMIB_TCP6ROW_OWNER_MODULE = 56;

export function allocMIB_TCP6ROW_OWNER_MODULE(data?: Partial<MIB_TCP6ROW_OWNER_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCP6ROW_OWNER_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucLocalAddr !== undefined) view.setBigUint64(0, data.ucLocalAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucLocalAddr))), true);
  // 0x08: u32
  if (data?.dwLocalScopeId !== undefined) view.setUint32(8, Number(data.dwLocalScopeId), true);
  // 0x0c: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(12, Number(data.dwLocalPort), true);
  // 0x10: pointer
  if (data?.ucRemoteAddr !== undefined) view.setBigUint64(16, data.ucRemoteAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucRemoteAddr))), true);
  // 0x18: u32
  if (data?.dwRemoteScopeId !== undefined) view.setUint32(24, Number(data.dwRemoteScopeId), true);
  // 0x1c: u32
  if (data?.dwRemotePort !== undefined) view.setUint32(28, Number(data.dwRemotePort), true);
  // 0x20: u32
  if (data?.dwState !== undefined) view.setUint32(32, Number(data.dwState), true);
  // 0x24: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(36, Number(data.dwOwningPid), true);
  // 0x28: pointer
  if (data?.liCreateTimestamp !== undefined) view.setBigUint64(40, data.liCreateTimestamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liCreateTimestamp))), true);
  // 0x30: pointer
  if (data?.OwningModuleInfo !== undefined) view.setBigUint64(48, data.OwningModuleInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwningModuleInfo))), true);
  return buf;
}

export class MIB_TCP6ROW_OWNER_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucLocalAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwLocalScopeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwLocalPort(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ucRemoteAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwRemoteScopeId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwRemotePort(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwState(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwOwningPid(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get liCreateTimestamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get OwningModuleInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ucLocalAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwLocalScopeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ucRemoteAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwRemoteScopeId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwRemotePort(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwState(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set liCreateTimestamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set OwningModuleInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCP6TABLE_OWNER_MODULE (size: 16)
 */
export interface MIB_TCP6TABLE_OWNER_MODULE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_TCP6TABLE_OWNER_MODULE = 16;

export function allocMIB_TCP6TABLE_OWNER_MODULE(data?: Partial<MIB_TCP6TABLE_OWNER_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCP6TABLE_OWNER_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_TCP6TABLE_OWNER_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPSTATS_LH (size: 64)
 */
export interface MIB_TCPSTATS_LH {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwRtoMin: number;
  /** u32 */
  dwRtoMax: number;
  /** u32 */
  dwMaxConn: number;
  /** u32 */
  dwActiveOpens: number;
  /** u32 */
  dwPassiveOpens: number;
  /** u32 */
  dwAttemptFails: number;
  /** u32 */
  dwEstabResets: number;
  /** u32 */
  dwCurrEstab: number;
  /** u32 */
  dwInSegs: number;
  /** u32 */
  dwOutSegs: number;
  /** u32 */
  dwRetransSegs: number;
  /** u32 */
  dwInErrs: number;
  /** u32 */
  dwOutRsts: number;
  /** u32 */
  dwNumConns: number;
}

export const sizeofMIB_TCPSTATS_LH = 64;

export function allocMIB_TCPSTATS_LH(data?: Partial<MIB_TCPSTATS_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPSTATS_LH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: u32
  if (data?.dwRtoMin !== undefined) view.setUint32(8, Number(data.dwRtoMin), true);
  // 0x0c: u32
  if (data?.dwRtoMax !== undefined) view.setUint32(12, Number(data.dwRtoMax), true);
  // 0x10: u32
  if (data?.dwMaxConn !== undefined) view.setUint32(16, Number(data.dwMaxConn), true);
  // 0x14: u32
  if (data?.dwActiveOpens !== undefined) view.setUint32(20, Number(data.dwActiveOpens), true);
  // 0x18: u32
  if (data?.dwPassiveOpens !== undefined) view.setUint32(24, Number(data.dwPassiveOpens), true);
  // 0x1c: u32
  if (data?.dwAttemptFails !== undefined) view.setUint32(28, Number(data.dwAttemptFails), true);
  // 0x20: u32
  if (data?.dwEstabResets !== undefined) view.setUint32(32, Number(data.dwEstabResets), true);
  // 0x24: u32
  if (data?.dwCurrEstab !== undefined) view.setUint32(36, Number(data.dwCurrEstab), true);
  // 0x28: u32
  if (data?.dwInSegs !== undefined) view.setUint32(40, Number(data.dwInSegs), true);
  // 0x2c: u32
  if (data?.dwOutSegs !== undefined) view.setUint32(44, Number(data.dwOutSegs), true);
  // 0x30: u32
  if (data?.dwRetransSegs !== undefined) view.setUint32(48, Number(data.dwRetransSegs), true);
  // 0x34: u32
  if (data?.dwInErrs !== undefined) view.setUint32(52, Number(data.dwInErrs), true);
  // 0x38: u32
  if (data?.dwOutRsts !== undefined) view.setUint32(56, Number(data.dwOutRsts), true);
  // 0x3c: u32
  if (data?.dwNumConns !== undefined) view.setUint32(60, Number(data.dwNumConns), true);
  return buf;
}

export class MIB_TCPSTATS_LHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwRtoMin(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwRtoMax(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwMaxConn(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwActiveOpens(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwPassiveOpens(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwAttemptFails(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwEstabResets(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwCurrEstab(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwInSegs(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwOutSegs(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwRetransSegs(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwInErrs(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwOutRsts(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwNumConns(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwRtoMin(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwRtoMax(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwMaxConn(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwActiveOpens(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwPassiveOpens(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwAttemptFails(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwEstabResets(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwCurrEstab(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwInSegs(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwOutSegs(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwRetransSegs(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwInErrs(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwOutRsts(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwNumConns(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPSTATS_W2K (size: 64)
 */
export interface MIB_TCPSTATS_W2K {
  /** u32 */
  dwRtoAlgorithm: number;
  /** u32 */
  dwRtoMin: number;
  /** u32 */
  dwRtoMax: number;
  /** u32 */
  dwMaxConn: number;
  /** u32 */
  dwActiveOpens: number;
  /** u32 */
  dwPassiveOpens: number;
  /** u32 */
  dwAttemptFails: number;
  /** u32 */
  dwEstabResets: number;
  /** u32 */
  dwCurrEstab: number;
  /** u32 */
  dwInSegs: number;
  /** u32 */
  dwOutSegs: number;
  /** u32 */
  dwRetransSegs: number;
  /** u32 */
  dwInErrs: number;
  /** u32 */
  dwOutRsts: number;
  /** u32 */
  dwNumConns: number;
}

export const sizeofMIB_TCPSTATS_W2K = 64;

export function allocMIB_TCPSTATS_W2K(data?: Partial<MIB_TCPSTATS_W2K>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPSTATS_W2K);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRtoAlgorithm !== undefined) view.setUint32(0, Number(data.dwRtoAlgorithm), true);
  // 0x04: u32
  if (data?.dwRtoMin !== undefined) view.setUint32(4, Number(data.dwRtoMin), true);
  // 0x08: u32
  if (data?.dwRtoMax !== undefined) view.setUint32(8, Number(data.dwRtoMax), true);
  // 0x0c: u32
  if (data?.dwMaxConn !== undefined) view.setUint32(12, Number(data.dwMaxConn), true);
  // 0x10: u32
  if (data?.dwActiveOpens !== undefined) view.setUint32(16, Number(data.dwActiveOpens), true);
  // 0x14: u32
  if (data?.dwPassiveOpens !== undefined) view.setUint32(20, Number(data.dwPassiveOpens), true);
  // 0x18: u32
  if (data?.dwAttemptFails !== undefined) view.setUint32(24, Number(data.dwAttemptFails), true);
  // 0x1c: u32
  if (data?.dwEstabResets !== undefined) view.setUint32(28, Number(data.dwEstabResets), true);
  // 0x20: u32
  if (data?.dwCurrEstab !== undefined) view.setUint32(32, Number(data.dwCurrEstab), true);
  // 0x24: u32
  if (data?.dwInSegs !== undefined) view.setUint32(36, Number(data.dwInSegs), true);
  // 0x28: u32
  if (data?.dwOutSegs !== undefined) view.setUint32(40, Number(data.dwOutSegs), true);
  // 0x2c: u32
  if (data?.dwRetransSegs !== undefined) view.setUint32(44, Number(data.dwRetransSegs), true);
  // 0x30: u32
  if (data?.dwInErrs !== undefined) view.setUint32(48, Number(data.dwInErrs), true);
  // 0x34: u32
  if (data?.dwOutRsts !== undefined) view.setUint32(52, Number(data.dwOutRsts), true);
  // 0x38: u32
  if (data?.dwNumConns !== undefined) view.setUint32(56, Number(data.dwNumConns), true);
  // 0x3c: pad4
  return buf;
}

export class MIB_TCPSTATS_W2KView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwRtoAlgorithm(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRtoMin(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwRtoMax(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwMaxConn(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwActiveOpens(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwPassiveOpens(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwAttemptFails(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwEstabResets(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwCurrEstab(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwInSegs(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwOutSegs(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwRetransSegs(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwInErrs(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwOutRsts(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwNumConns(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set dwRtoAlgorithm(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRtoMin(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwRtoMax(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwMaxConn(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwActiveOpens(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwPassiveOpens(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwAttemptFails(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwEstabResets(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwCurrEstab(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwInSegs(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwOutSegs(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwRetransSegs(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwInErrs(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwOutRsts(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwNumConns(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_TCPSTATS2 (size: 72)
 */
export interface MIB_TCPSTATS2 {
  /** Windows.Win32.NetworkManagement.IpHelper.TCP_RTO_ALGORITHM */
  RtoAlgorithm: TCP_RTO_ALGORITHM;
  /** u32 */
  dwRtoMin: number;
  /** u32 */
  dwRtoMax: number;
  /** u32 */
  dwMaxConn: number;
  /** u32 */
  dwActiveOpens: number;
  /** u32 */
  dwPassiveOpens: number;
  /** u32 */
  dwAttemptFails: number;
  /** u32 */
  dwEstabResets: number;
  /** u32 */
  dwCurrEstab: number;
  /** u64 */
  dw64InSegs: Deno.PointerValue;
  /** u64 */
  dw64OutSegs: Deno.PointerValue;
  /** u32 */
  dwRetransSegs: number;
  /** u32 */
  dwInErrs: number;
  /** u32 */
  dwOutRsts: number;
  /** u32 */
  dwNumConns: number;
}

export const sizeofMIB_TCPSTATS2 = 72;

export function allocMIB_TCPSTATS2(data?: Partial<MIB_TCPSTATS2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_TCPSTATS2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RtoAlgorithm !== undefined) view.setInt32(0, Number(data.RtoAlgorithm), true);
  // 0x04: u32
  if (data?.dwRtoMin !== undefined) view.setUint32(4, Number(data.dwRtoMin), true);
  // 0x08: u32
  if (data?.dwRtoMax !== undefined) view.setUint32(8, Number(data.dwRtoMax), true);
  // 0x0c: u32
  if (data?.dwMaxConn !== undefined) view.setUint32(12, Number(data.dwMaxConn), true);
  // 0x10: u32
  if (data?.dwActiveOpens !== undefined) view.setUint32(16, Number(data.dwActiveOpens), true);
  // 0x14: u32
  if (data?.dwPassiveOpens !== undefined) view.setUint32(20, Number(data.dwPassiveOpens), true);
  // 0x18: u32
  if (data?.dwAttemptFails !== undefined) view.setUint32(24, Number(data.dwAttemptFails), true);
  // 0x1c: u32
  if (data?.dwEstabResets !== undefined) view.setUint32(28, Number(data.dwEstabResets), true);
  // 0x20: u32
  if (data?.dwCurrEstab !== undefined) view.setUint32(32, Number(data.dwCurrEstab), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.dw64InSegs !== undefined) view.setBigUint64(40, BigInt(data.dw64InSegs), true);
  // 0x30: u64
  if (data?.dw64OutSegs !== undefined) view.setBigUint64(48, BigInt(data.dw64OutSegs), true);
  // 0x38: u32
  if (data?.dwRetransSegs !== undefined) view.setUint32(56, Number(data.dwRetransSegs), true);
  // 0x3c: u32
  if (data?.dwInErrs !== undefined) view.setUint32(60, Number(data.dwInErrs), true);
  // 0x40: u32
  if (data?.dwOutRsts !== undefined) view.setUint32(64, Number(data.dwOutRsts), true);
  // 0x44: u32
  if (data?.dwNumConns !== undefined) view.setUint32(68, Number(data.dwNumConns), true);
  return buf;
}

export class MIB_TCPSTATS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get RtoAlgorithm(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwRtoMin(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwRtoMax(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwMaxConn(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwActiveOpens(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwPassiveOpens(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwAttemptFails(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwEstabResets(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwCurrEstab(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: u64
  get dw64InSegs(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get dw64OutSegs(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u32
  get dwRetransSegs(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwInErrs(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwOutRsts(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwNumConns(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: i32
  set RtoAlgorithm(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwRtoMin(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwRtoMax(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwMaxConn(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwActiveOpens(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwPassiveOpens(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwAttemptFails(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwEstabResets(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwCurrEstab(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: u64
  set dw64InSegs(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set dw64OutSegs(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u32
  set dwRetransSegs(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwInErrs(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwOutRsts(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwNumConns(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDPROW (size: 8)
 */
export interface MIB_UDPROW {
  /** u32 */
  dwLocalAddr: number;
  /** u32 */
  dwLocalPort: number;
}

export const sizeofMIB_UDPROW = 8;

export function allocMIB_UDPROW(data?: Partial<MIB_UDPROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDPROW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLocalAddr !== undefined) view.setUint32(0, Number(data.dwLocalAddr), true);
  // 0x04: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(4, Number(data.dwLocalPort), true);
  return buf;
}

export class MIB_UDPROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLocalAddr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwLocalPort(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLocalAddr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDPTABLE (size: 16)
 */
export interface MIB_UDPTABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_UDPTABLE = 16;

export function allocMIB_UDPTABLE(data?: Partial<MIB_UDPTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDPTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_UDPTABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDPROW_OWNER_PID (size: 16)
 */
export interface MIB_UDPROW_OWNER_PID {
  /** u32 */
  dwLocalAddr: number;
  /** u32 */
  dwLocalPort: number;
  /** u32 */
  dwOwningPid: number;
}

export const sizeofMIB_UDPROW_OWNER_PID = 16;

export function allocMIB_UDPROW_OWNER_PID(data?: Partial<MIB_UDPROW_OWNER_PID>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDPROW_OWNER_PID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLocalAddr !== undefined) view.setUint32(0, Number(data.dwLocalAddr), true);
  // 0x04: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(4, Number(data.dwLocalPort), true);
  // 0x08: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(8, Number(data.dwOwningPid), true);
  // 0x0c: pad4
  return buf;
}

export class MIB_UDPROW_OWNER_PIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLocalAddr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwLocalPort(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwOwningPid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwLocalAddr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDPTABLE_OWNER_PID (size: 16)
 */
export interface MIB_UDPTABLE_OWNER_PID {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_UDPTABLE_OWNER_PID = 16;

export function allocMIB_UDPTABLE_OWNER_PID(data?: Partial<MIB_UDPTABLE_OWNER_PID>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDPTABLE_OWNER_PID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_UDPTABLE_OWNER_PIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDPROW_OWNER_MODULE (size: 40)
 */
export interface MIB_UDPROW_OWNER_MODULE {
  /** u32 */
  dwLocalAddr: number;
  /** u32 */
  dwLocalPort: number;
  /** u32 */
  dwOwningPid: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liCreateTimestamp: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  OwningModuleInfo: Deno.PointerValue;
}

export const sizeofMIB_UDPROW_OWNER_MODULE = 40;

export function allocMIB_UDPROW_OWNER_MODULE(data?: Partial<MIB_UDPROW_OWNER_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDPROW_OWNER_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLocalAddr !== undefined) view.setUint32(0, Number(data.dwLocalAddr), true);
  // 0x04: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(4, Number(data.dwLocalPort), true);
  // 0x08: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(8, Number(data.dwOwningPid), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.liCreateTimestamp !== undefined) view.setBigUint64(16, data.liCreateTimestamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liCreateTimestamp))), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x20: pointer
  if (data?.OwningModuleInfo !== undefined) view.setBigUint64(32, data.OwningModuleInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwningModuleInfo))), true);
  return buf;
}

export class MIB_UDPROW_OWNER_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLocalAddr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwLocalPort(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwOwningPid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get liCreateTimestamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get OwningModuleInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwLocalAddr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set liCreateTimestamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set OwningModuleInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDPTABLE_OWNER_MODULE (size: 16)
 */
export interface MIB_UDPTABLE_OWNER_MODULE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_UDPTABLE_OWNER_MODULE = 16;

export function allocMIB_UDPTABLE_OWNER_MODULE(data?: Partial<MIB_UDPTABLE_OWNER_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDPTABLE_OWNER_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_UDPTABLE_OWNER_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDPROW2 (size: 48)
 */
export interface MIB_UDPROW2 {
  /** u32 */
  dwLocalAddr: number;
  /** u32 */
  dwLocalPort: number;
  /** u32 */
  dwOwningPid: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liCreateTimestamp: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  OwningModuleInfo: Deno.PointerValue;
  /** u32 */
  dwRemoteAddr: number;
  /** u32 */
  dwRemotePort: number;
}

export const sizeofMIB_UDPROW2 = 48;

export function allocMIB_UDPROW2(data?: Partial<MIB_UDPROW2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDPROW2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLocalAddr !== undefined) view.setUint32(0, Number(data.dwLocalAddr), true);
  // 0x04: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(4, Number(data.dwLocalPort), true);
  // 0x08: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(8, Number(data.dwOwningPid), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.liCreateTimestamp !== undefined) view.setBigUint64(16, data.liCreateTimestamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liCreateTimestamp))), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x20: pointer
  if (data?.OwningModuleInfo !== undefined) view.setBigUint64(32, data.OwningModuleInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwningModuleInfo))), true);
  // 0x28: u32
  if (data?.dwRemoteAddr !== undefined) view.setUint32(40, Number(data.dwRemoteAddr), true);
  // 0x2c: u32
  if (data?.dwRemotePort !== undefined) view.setUint32(44, Number(data.dwRemotePort), true);
  return buf;
}

export class MIB_UDPROW2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLocalAddr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwLocalPort(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwOwningPid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get liCreateTimestamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get OwningModuleInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwRemoteAddr(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwRemotePort(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set dwLocalAddr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set liCreateTimestamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set OwningModuleInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwRemoteAddr(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwRemotePort(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDPTABLE2 (size: 16)
 */
export interface MIB_UDPTABLE2 {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_UDPTABLE2 = 16;

export function allocMIB_UDPTABLE2(data?: Partial<MIB_UDPTABLE2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDPTABLE2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_UDPTABLE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDP6ROW (size: 16)
 */
export interface MIB_UDP6ROW {
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  dwLocalAddr: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwLocalScopeId: number;
  /** u32 */
  dwLocalPort: number;
}

export const sizeofMIB_UDP6ROW = 16;

export function allocMIB_UDP6ROW(data?: Partial<MIB_UDP6ROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDP6ROW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dwLocalAddr !== undefined) view.setBigUint64(0, data.dwLocalAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwLocalAddr))), true);
  // 0x08: u32
  if (data?.dwLocalScopeId !== undefined) view.setUint32(8, Number(data.dwLocalScopeId), true);
  // 0x0c: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(12, Number(data.dwLocalPort), true);
  return buf;
}

export class MIB_UDP6ROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dwLocalAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwLocalScopeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwLocalPort(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set dwLocalAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwLocalScopeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDP6TABLE (size: 16)
 */
export interface MIB_UDP6TABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_UDP6TABLE = 16;

export function allocMIB_UDP6TABLE(data?: Partial<MIB_UDP6TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDP6TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_UDP6TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDP6ROW_OWNER_PID (size: 24)
 */
export interface MIB_UDP6ROW_OWNER_PID {
  /** array */
  ucLocalAddr: Deno.PointerValue;
  /** u32 */
  dwLocalScopeId: number;
  /** u32 */
  dwLocalPort: number;
  /** u32 */
  dwOwningPid: number;
}

export const sizeofMIB_UDP6ROW_OWNER_PID = 24;

export function allocMIB_UDP6ROW_OWNER_PID(data?: Partial<MIB_UDP6ROW_OWNER_PID>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDP6ROW_OWNER_PID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucLocalAddr !== undefined) view.setBigUint64(0, data.ucLocalAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucLocalAddr))), true);
  // 0x08: u32
  if (data?.dwLocalScopeId !== undefined) view.setUint32(8, Number(data.dwLocalScopeId), true);
  // 0x0c: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(12, Number(data.dwLocalPort), true);
  // 0x10: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(16, Number(data.dwOwningPid), true);
  // 0x14: pad4
  return buf;
}

export class MIB_UDP6ROW_OWNER_PIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucLocalAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwLocalScopeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwLocalPort(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwOwningPid(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set ucLocalAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwLocalScopeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDP6TABLE_OWNER_PID (size: 16)
 */
export interface MIB_UDP6TABLE_OWNER_PID {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_UDP6TABLE_OWNER_PID = 16;

export function allocMIB_UDP6TABLE_OWNER_PID(data?: Partial<MIB_UDP6TABLE_OWNER_PID>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDP6TABLE_OWNER_PID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_UDP6TABLE_OWNER_PIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDP6ROW_OWNER_MODULE (size: 48)
 */
export interface MIB_UDP6ROW_OWNER_MODULE {
  /** array */
  ucLocalAddr: Deno.PointerValue;
  /** u32 */
  dwLocalScopeId: number;
  /** u32 */
  dwLocalPort: number;
  /** u32 */
  dwOwningPid: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liCreateTimestamp: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  OwningModuleInfo: Deno.PointerValue;
}

export const sizeofMIB_UDP6ROW_OWNER_MODULE = 48;

export function allocMIB_UDP6ROW_OWNER_MODULE(data?: Partial<MIB_UDP6ROW_OWNER_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDP6ROW_OWNER_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucLocalAddr !== undefined) view.setBigUint64(0, data.ucLocalAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucLocalAddr))), true);
  // 0x08: u32
  if (data?.dwLocalScopeId !== undefined) view.setUint32(8, Number(data.dwLocalScopeId), true);
  // 0x0c: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(12, Number(data.dwLocalPort), true);
  // 0x10: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(16, Number(data.dwOwningPid), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.liCreateTimestamp !== undefined) view.setBigUint64(24, data.liCreateTimestamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liCreateTimestamp))), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x28: pointer
  if (data?.OwningModuleInfo !== undefined) view.setBigUint64(40, data.OwningModuleInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwningModuleInfo))), true);
  return buf;
}

export class MIB_UDP6ROW_OWNER_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucLocalAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwLocalScopeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwLocalPort(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwOwningPid(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get liCreateTimestamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OwningModuleInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ucLocalAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwLocalScopeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set liCreateTimestamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OwningModuleInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDP6TABLE_OWNER_MODULE (size: 16)
 */
export interface MIB_UDP6TABLE_OWNER_MODULE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_UDP6TABLE_OWNER_MODULE = 16;

export function allocMIB_UDP6TABLE_OWNER_MODULE(data?: Partial<MIB_UDP6TABLE_OWNER_MODULE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDP6TABLE_OWNER_MODULE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_UDP6TABLE_OWNER_MODULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDP6ROW2 (size: 64)
 */
export interface MIB_UDP6ROW2 {
  /** array */
  ucLocalAddr: Deno.PointerValue;
  /** u32 */
  dwLocalScopeId: number;
  /** u32 */
  dwLocalPort: number;
  /** u32 */
  dwOwningPid: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liCreateTimestamp: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  OwningModuleInfo: Deno.PointerValue;
  /** array */
  ucRemoteAddr: Deno.PointerValue;
  /** u32 */
  dwRemoteScopeId: number;
  /** u32 */
  dwRemotePort: number;
}

export const sizeofMIB_UDP6ROW2 = 64;

export function allocMIB_UDP6ROW2(data?: Partial<MIB_UDP6ROW2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDP6ROW2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucLocalAddr !== undefined) view.setBigUint64(0, data.ucLocalAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucLocalAddr))), true);
  // 0x08: u32
  if (data?.dwLocalScopeId !== undefined) view.setUint32(8, Number(data.dwLocalScopeId), true);
  // 0x0c: u32
  if (data?.dwLocalPort !== undefined) view.setUint32(12, Number(data.dwLocalPort), true);
  // 0x10: u32
  if (data?.dwOwningPid !== undefined) view.setUint32(16, Number(data.dwOwningPid), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.liCreateTimestamp !== undefined) view.setBigUint64(24, data.liCreateTimestamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liCreateTimestamp))), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x28: pointer
  if (data?.OwningModuleInfo !== undefined) view.setBigUint64(40, data.OwningModuleInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwningModuleInfo))), true);
  // 0x30: pointer
  if (data?.ucRemoteAddr !== undefined) view.setBigUint64(48, data.ucRemoteAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucRemoteAddr))), true);
  // 0x38: u32
  if (data?.dwRemoteScopeId !== undefined) view.setUint32(56, Number(data.dwRemoteScopeId), true);
  // 0x3c: u32
  if (data?.dwRemotePort !== undefined) view.setUint32(60, Number(data.dwRemotePort), true);
  return buf;
}

export class MIB_UDP6ROW2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucLocalAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwLocalScopeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwLocalPort(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwOwningPid(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get liCreateTimestamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OwningModuleInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ucRemoteAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwRemoteScopeId(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwRemotePort(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: pointer
  set ucLocalAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwLocalScopeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwLocalPort(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwOwningPid(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set liCreateTimestamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OwningModuleInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ucRemoteAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwRemoteScopeId(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwRemotePort(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDP6TABLE2 (size: 16)
 */
export interface MIB_UDP6TABLE2 {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_UDP6TABLE2 = 16;

export function allocMIB_UDP6TABLE2(data?: Partial<MIB_UDP6TABLE2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDP6TABLE2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_UDP6TABLE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDPSTATS (size: 24)
 */
export interface MIB_UDPSTATS {
  /** u32 */
  dwInDatagrams: number;
  /** u32 */
  dwNoPorts: number;
  /** u32 */
  dwInErrors: number;
  /** u32 */
  dwOutDatagrams: number;
  /** u32 */
  dwNumAddrs: number;
}

export const sizeofMIB_UDPSTATS = 24;

export function allocMIB_UDPSTATS(data?: Partial<MIB_UDPSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDPSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwInDatagrams !== undefined) view.setUint32(0, Number(data.dwInDatagrams), true);
  // 0x04: u32
  if (data?.dwNoPorts !== undefined) view.setUint32(4, Number(data.dwNoPorts), true);
  // 0x08: u32
  if (data?.dwInErrors !== undefined) view.setUint32(8, Number(data.dwInErrors), true);
  // 0x0c: u32
  if (data?.dwOutDatagrams !== undefined) view.setUint32(12, Number(data.dwOutDatagrams), true);
  // 0x10: u32
  if (data?.dwNumAddrs !== undefined) view.setUint32(16, Number(data.dwNumAddrs), true);
  // 0x14: pad4
  return buf;
}

export class MIB_UDPSTATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwInDatagrams(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNoPorts(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwInErrors(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwOutDatagrams(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwNumAddrs(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwInDatagrams(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNoPorts(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwInErrors(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwOutDatagrams(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwNumAddrs(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_UDPSTATS2 (size: 32)
 */
export interface MIB_UDPSTATS2 {
  /** u64 */
  dw64InDatagrams: Deno.PointerValue;
  /** u32 */
  dwNoPorts: number;
  /** u32 */
  dwInErrors: number;
  /** u64 */
  dw64OutDatagrams: Deno.PointerValue;
  /** u32 */
  dwNumAddrs: number;
}

export const sizeofMIB_UDPSTATS2 = 32;

export function allocMIB_UDPSTATS2(data?: Partial<MIB_UDPSTATS2>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_UDPSTATS2);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.dw64InDatagrams !== undefined) view.setBigUint64(0, BigInt(data.dw64InDatagrams), true);
  // 0x08: u32
  if (data?.dwNoPorts !== undefined) view.setUint32(8, Number(data.dwNoPorts), true);
  // 0x0c: u32
  if (data?.dwInErrors !== undefined) view.setUint32(12, Number(data.dwInErrors), true);
  // 0x10: u64
  if (data?.dw64OutDatagrams !== undefined) view.setBigUint64(16, BigInt(data.dw64OutDatagrams), true);
  // 0x18: u32
  if (data?.dwNumAddrs !== undefined) view.setUint32(24, Number(data.dwNumAddrs), true);
  // 0x1c: pad4
  return buf;
}

export class MIB_UDPSTATS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get dw64InDatagrams(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get dwNoPorts(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwInErrors(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get dw64OutDatagrams(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get dwNumAddrs(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u64
  set dw64InDatagrams(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set dwNoPorts(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwInErrors(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set dw64OutDatagrams(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set dwNumAddrs(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCPIP_OWNER_MODULE_BASIC_INFO (size: 16)
 */
export interface TCPIP_OWNER_MODULE_BASIC_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pModuleName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pModulePath: string | null | Uint8Array | Uint16Array;
}

export const sizeofTCPIP_OWNER_MODULE_BASIC_INFO = 16;

export function allocTCPIP_OWNER_MODULE_BASIC_INFO(data?: Partial<TCPIP_OWNER_MODULE_BASIC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTCPIP_OWNER_MODULE_BASIC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pModuleName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pModuleName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pModulePath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pModulePath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class TCPIP_OWNER_MODULE_BASIC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pModuleName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pModulePath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pModuleName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pModulePath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_BOUNDARY (size: 16)
 */
export interface MIB_IPMCAST_BOUNDARY {
  /** u32 */
  dwIfIndex: number;
  /** u32 */
  dwGroupAddress: number;
  /** u32 */
  dwGroupMask: number;
  /** u32 */
  dwStatus: number;
}

export const sizeofMIB_IPMCAST_BOUNDARY = 16;

export function allocMIB_IPMCAST_BOUNDARY(data?: Partial<MIB_IPMCAST_BOUNDARY>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_BOUNDARY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIfIndex !== undefined) view.setUint32(0, Number(data.dwIfIndex), true);
  // 0x04: u32
  if (data?.dwGroupAddress !== undefined) view.setUint32(4, Number(data.dwGroupAddress), true);
  // 0x08: u32
  if (data?.dwGroupMask !== undefined) view.setUint32(8, Number(data.dwGroupMask), true);
  // 0x0c: u32
  if (data?.dwStatus !== undefined) view.setUint32(12, Number(data.dwStatus), true);
  return buf;
}

export class MIB_IPMCAST_BOUNDARYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwIfIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwGroupAddress(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwGroupMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwStatus(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwIfIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwGroupAddress(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwGroupMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwStatus(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_BOUNDARY_TABLE (size: 16)
 */
export interface MIB_IPMCAST_BOUNDARY_TABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_IPMCAST_BOUNDARY_TABLE = 16;

export function allocMIB_IPMCAST_BOUNDARY_TABLE(data?: Partial<MIB_IPMCAST_BOUNDARY_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_BOUNDARY_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_IPMCAST_BOUNDARY_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_BOUNDARYROW (size: 8)
 */
export interface MIB_BOUNDARYROW {
  /** u32 */
  dwGroupAddress: number;
  /** u32 */
  dwGroupMask: number;
}

export const sizeofMIB_BOUNDARYROW = 8;

export function allocMIB_BOUNDARYROW(data?: Partial<MIB_BOUNDARYROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_BOUNDARYROW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwGroupAddress !== undefined) view.setUint32(0, Number(data.dwGroupAddress), true);
  // 0x04: u32
  if (data?.dwGroupMask !== undefined) view.setUint32(4, Number(data.dwGroupMask), true);
  return buf;
}

export class MIB_BOUNDARYROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwGroupAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwGroupMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwGroupAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwGroupMask(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_MCAST_LIMIT_ROW (size: 8)
 */
export interface MIB_MCAST_LIMIT_ROW {
  /** u32 */
  dwTtl: number;
  /** u32 */
  dwRateLimit: number;
}

export const sizeofMIB_MCAST_LIMIT_ROW = 8;

export function allocMIB_MCAST_LIMIT_ROW(data?: Partial<MIB_MCAST_LIMIT_ROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_MCAST_LIMIT_ROW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTtl !== undefined) view.setUint32(0, Number(data.dwTtl), true);
  // 0x04: u32
  if (data?.dwRateLimit !== undefined) view.setUint32(4, Number(data.dwRateLimit), true);
  return buf;
}

export class MIB_MCAST_LIMIT_ROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTtl(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRateLimit(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwTtl(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRateLimit(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPMCAST_SCOPE (size: 24)
 */
export interface MIB_IPMCAST_SCOPE {
  /** u32 */
  dwGroupAddress: number;
  /** u32 */
  dwGroupMask: number;
  /** array */
  snNameBuffer: Deno.PointerValue;
  /** u32 */
  dwStatus: number;
}

export const sizeofMIB_IPMCAST_SCOPE = 24;

export function allocMIB_IPMCAST_SCOPE(data?: Partial<MIB_IPMCAST_SCOPE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPMCAST_SCOPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwGroupAddress !== undefined) view.setUint32(0, Number(data.dwGroupAddress), true);
  // 0x04: u32
  if (data?.dwGroupMask !== undefined) view.setUint32(4, Number(data.dwGroupMask), true);
  // 0x08: pointer
  if (data?.snNameBuffer !== undefined) view.setBigUint64(8, data.snNameBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.snNameBuffer))), true);
  // 0x10: u32
  if (data?.dwStatus !== undefined) view.setUint32(16, Number(data.dwStatus), true);
  // 0x14: pad4
  return buf;
}

export class MIB_IPMCAST_SCOPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwGroupAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwGroupMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get snNameBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwStatus(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwGroupAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwGroupMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set snNameBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwStatus(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPDESTROW (size: 16)
 */
export interface MIB_IPDESTROW {
  /** Windows.Win32.NetworkManagement.IpHelper.MIB_IPFORWARDROW */
  ForwardRow: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwForwardPreference: number;
  /** u32 */
  dwForwardViewSet: number;
}

export const sizeofMIB_IPDESTROW = 16;

export function allocMIB_IPDESTROW(data?: Partial<MIB_IPDESTROW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPDESTROW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ForwardRow !== undefined) view.setBigUint64(0, data.ForwardRow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ForwardRow))), true);
  // 0x08: u32
  if (data?.dwForwardPreference !== undefined) view.setUint32(8, Number(data.dwForwardPreference), true);
  // 0x0c: u32
  if (data?.dwForwardViewSet !== undefined) view.setUint32(12, Number(data.dwForwardViewSet), true);
  return buf;
}

export class MIB_IPDESTROWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ForwardRow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwForwardPreference(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwForwardViewSet(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set ForwardRow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwForwardPreference(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwForwardViewSet(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IPDESTTABLE (size: 16)
 */
export interface MIB_IPDESTTABLE {
  /** u32 */
  dwNumEntries: number;
  /** array */
  table: Deno.PointerValue;
}

export const sizeofMIB_IPDESTTABLE = 16;

export function allocMIB_IPDESTTABLE(data?: Partial<MIB_IPDESTTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IPDESTTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(0, Number(data.dwNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.table !== undefined) view.setBigUint64(8, data.table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.table))), true);
  return buf;
}

export class MIB_IPDESTTABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_BEST_IF (size: 8)
 */
export interface MIB_BEST_IF {
  /** u32 */
  dwDestAddr: number;
  /** u32 */
  dwIfIndex: number;
}

export const sizeofMIB_BEST_IF = 8;

export function allocMIB_BEST_IF(data?: Partial<MIB_BEST_IF>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_BEST_IF);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDestAddr !== undefined) view.setUint32(0, Number(data.dwDestAddr), true);
  // 0x04: u32
  if (data?.dwIfIndex !== undefined) view.setUint32(4, Number(data.dwIfIndex), true);
  return buf;
}

export class MIB_BEST_IFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDestAddr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwIfIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwDestAddr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwIfIndex(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_PROXYARP (size: 16)
 */
export interface MIB_PROXYARP {
  /** u32 */
  dwAddress: number;
  /** u32 */
  dwMask: number;
  /** u32 */
  dwIfIndex: number;
}

export const sizeofMIB_PROXYARP = 16;

export function allocMIB_PROXYARP(data?: Partial<MIB_PROXYARP>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_PROXYARP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAddress !== undefined) view.setUint32(0, Number(data.dwAddress), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u32
  if (data?.dwIfIndex !== undefined) view.setUint32(8, Number(data.dwIfIndex), true);
  // 0x0c: pad4
  return buf;
}

export class MIB_PROXYARPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwIfIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwIfIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type BOOL = number;

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_IFSTATUS (size: 24)
 */
export interface MIB_IFSTATUS {
  /** u32 */
  dwIfIndex: number;
  /** u32 */
  dwAdminStatus: number;
  /** u32 */
  dwOperationalStatus: number;
  /** Windows.Win32.Foundation.BOOL */
  bMHbeatActive: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bMHbeatAlive: boolean;
}

export const sizeofMIB_IFSTATUS = 24;

export function allocMIB_IFSTATUS(data?: Partial<MIB_IFSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_IFSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIfIndex !== undefined) view.setUint32(0, Number(data.dwIfIndex), true);
  // 0x04: u32
  if (data?.dwAdminStatus !== undefined) view.setUint32(4, Number(data.dwAdminStatus), true);
  // 0x08: u32
  if (data?.dwOperationalStatus !== undefined) view.setUint32(8, Number(data.dwOperationalStatus), true);
  // 0x0c: i32
  if (data?.bMHbeatActive !== undefined) view.setInt32(12, Number(data.bMHbeatActive), true);
  // 0x10: i32
  if (data?.bMHbeatAlive !== undefined) view.setInt32(16, Number(data.bMHbeatAlive), true);
  // 0x14: pad4
  return buf;
}

export class MIB_IFSTATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwIfIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwAdminStatus(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwOperationalStatus(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get bMHbeatActive(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get bMHbeatAlive(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwIfIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwAdminStatus(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwOperationalStatus(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set bMHbeatActive(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set bMHbeatAlive(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_ROUTESTATE (size: 8)
 */
export interface MIB_ROUTESTATE {
  /** Windows.Win32.Foundation.BOOL */
  bRoutesSetToStack: boolean;
}

export const sizeofMIB_ROUTESTATE = 8;

export function allocMIB_ROUTESTATE(data?: Partial<MIB_ROUTESTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_ROUTESTATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bRoutesSetToStack !== undefined) view.setInt32(0, Number(data.bRoutesSetToStack), true);
  // 0x04: pad4
  return buf;
}

export class MIB_ROUTESTATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get bRoutesSetToStack(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set bRoutesSetToStack(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.MIB_OPAQUE_INFO (size: 16)
 */
export interface MIB_OPAQUE_INFO {
  /** u32 */
  dwId: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofMIB_OPAQUE_INFO = 16;

export function allocMIB_OPAQUE_INFO(data?: Partial<MIB_OPAQUE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIB_OPAQUE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwId !== undefined) view.setUint32(0, Number(data.dwId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class MIB_OPAQUE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADDRESS_STRING (size: 8)
 */
export interface IP_ADDRESS_STRING {
  /** array */
  String: Deno.PointerValue;
}

export const sizeofIP_ADDRESS_STRING = 8;

export function allocIP_ADDRESS_STRING(data?: Partial<IP_ADDRESS_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADDRESS_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.String !== undefined) view.setBigUint64(0, data.String === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.String))), true);
  return buf;
}

export class IP_ADDRESS_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set String(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADDR_STRING (size: 32)
 */
export interface IP_ADDR_STRING {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_ADDRESS_STRING */
  IpAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_ADDRESS_STRING */
  IpMask: Uint8Array | Deno.PointerValue;
  /** u32 */
  Context: number;
}

export const sizeofIP_ADDR_STRING = 32;

export function allocIP_ADDR_STRING(data?: Partial<IP_ADDR_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADDR_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: pointer
  if (data?.IpAddress !== undefined) view.setBigUint64(8, data.IpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IpAddress))), true);
  // 0x10: pointer
  if (data?.IpMask !== undefined) view.setBigUint64(16, data.IpMask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IpMask))), true);
  // 0x18: u32
  if (data?.Context !== undefined) view.setUint32(24, Number(data.Context), true);
  // 0x1c: pad4
  return buf;
}

export class IP_ADDR_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get IpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get IpMask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Context(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set IpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set IpMask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set Context(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_INFO (size: 136)
 */
export interface IP_ADAPTER_INFO {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** u32 */
  ComboIndex: number;
  /** array */
  AdapterName: Deno.PointerValue;
  /** array */
  Description: Deno.PointerValue;
  /** u32 */
  AddressLength: number;
  /** array */
  Address: Deno.PointerValue;
  /** u32 */
  Index: number;
  /** u32 */
  Type: number;
  /** u32 */
  DhcpEnabled: number;
  /** ptr */
  CurrentIpAddress: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_ADDR_STRING */
  IpAddressList: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_ADDR_STRING */
  GatewayList: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_ADDR_STRING */
  DhcpServer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  HaveWins: boolean;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_ADDR_STRING */
  PrimaryWinsServer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_ADDR_STRING */
  SecondaryWinsServer: Uint8Array | Deno.PointerValue;
  /** i64 */
  LeaseObtained: Deno.PointerValue;
  /** i64 */
  LeaseExpires: Deno.PointerValue;
}

export const sizeofIP_ADAPTER_INFO = 136;

export function allocIP_ADAPTER_INFO(data?: Partial<IP_ADAPTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: u32
  if (data?.ComboIndex !== undefined) view.setUint32(8, Number(data.ComboIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.AdapterName !== undefined) view.setBigUint64(16, data.AdapterName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdapterName))), true);
  // 0x18: pointer
  if (data?.Description !== undefined) view.setBigUint64(24, data.Description === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Description))), true);
  // 0x20: u32
  if (data?.AddressLength !== undefined) view.setUint32(32, Number(data.AddressLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Address !== undefined) view.setBigUint64(40, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x30: u32
  if (data?.Index !== undefined) view.setUint32(48, Number(data.Index), true);
  // 0x34: u32
  if (data?.Type !== undefined) view.setUint32(52, Number(data.Type), true);
  // 0x38: u32
  if (data?.DhcpEnabled !== undefined) view.setUint32(56, Number(data.DhcpEnabled), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.CurrentIpAddress !== undefined) view.setBigUint64(64, data.CurrentIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentIpAddress))), true);
  // 0x48: pointer
  if (data?.IpAddressList !== undefined) view.setBigUint64(72, data.IpAddressList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IpAddressList))), true);
  // 0x50: pointer
  if (data?.GatewayList !== undefined) view.setBigUint64(80, data.GatewayList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GatewayList))), true);
  // 0x58: pointer
  if (data?.DhcpServer !== undefined) view.setBigUint64(88, data.DhcpServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DhcpServer))), true);
  // 0x60: i32
  if (data?.HaveWins !== undefined) view.setInt32(96, Number(data.HaveWins), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.PrimaryWinsServer !== undefined) view.setBigUint64(104, data.PrimaryWinsServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrimaryWinsServer))), true);
  // 0x70: pointer
  if (data?.SecondaryWinsServer !== undefined) view.setBigUint64(112, data.SecondaryWinsServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SecondaryWinsServer))), true);
  // 0x78: i64
  if (data?.LeaseObtained !== undefined) view.setBigInt64(120, BigInt(data.LeaseObtained), true);
  // 0x80: i64
  if (data?.LeaseExpires !== undefined) view.setBigInt64(128, BigInt(data.LeaseExpires), true);
  return buf;
}

export class IP_ADAPTER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ComboIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get AdapterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get AddressLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get Index(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get Type(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get DhcpEnabled(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get CurrentIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get IpAddressList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get GatewayList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get DhcpServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: i32
  get HaveWins(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get PrimaryWinsServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get SecondaryWinsServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: i64
  get LeaseObtained(): Deno.PointerValue {
    return Number(this.view.getBigInt64(120, true));
  }

  // 0x80: i64
  get LeaseExpires(): Deno.PointerValue {
    return Number(this.view.getBigInt64(128, true));
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ComboIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set AdapterName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Description(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set AddressLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set Index(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set Type(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set DhcpEnabled(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set CurrentIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set IpAddressList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set GatewayList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set DhcpServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: i32
  set HaveWins(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set PrimaryWinsServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set SecondaryWinsServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: i64
  set LeaseObtained(value: Deno.PointerValue) {
    this.view.setBigInt64(120, BigInt(value), true);
  }

  // 0x80: i64
  set LeaseExpires(value: Deno.PointerValue) {
    this.view.setBigInt64(128, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Networking.WinSock.SOCKET_ADDRESS (size: 16)
 */
export interface SOCKET_ADDRESS {
  /** ptr */
  lpSockaddr: Deno.PointerValue | Uint8Array;
  /** i32 */
  iSockaddrLength: number;
}

export const sizeofSOCKET_ADDRESS = 16;

export function allocSOCKET_ADDRESS(data?: Partial<SOCKET_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpSockaddr !== undefined) view.setBigUint64(0, data.lpSockaddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSockaddr))), true);
  // 0x08: i32
  if (data?.iSockaddrLength !== undefined) view.setInt32(8, Number(data.iSockaddrLength), true);
  // 0x0c: pad4
  return buf;
}

export class SOCKET_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpSockaddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iSockaddrLength(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set lpSockaddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iSockaddrLength(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_UNICAST_ADDRESS_LH (size: 56)
 */
export interface IP_ADAPTER_UNICAST_ADDRESS_LH {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  Address: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.NL_PREFIX_ORIGIN */
  PrefixOrigin: NL_PREFIX_ORIGIN;
  /** Windows.Win32.Networking.WinSock.NL_SUFFIX_ORIGIN */
  SuffixOrigin: NL_SUFFIX_ORIGIN;
  /** Windows.Win32.Networking.WinSock.NL_DAD_STATE */
  DadState: NL_DAD_STATE;
  /** u32 */
  ValidLifetime: number;
  /** u32 */
  PreferredLifetime: number;
  /** u32 */
  LeaseLifetime: number;
  /** u8 */
  OnLinkPrefixLength: number;
}

export const sizeofIP_ADAPTER_UNICAST_ADDRESS_LH = 56;

export function allocIP_ADAPTER_UNICAST_ADDRESS_LH(data?: Partial<IP_ADAPTER_UNICAST_ADDRESS_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_UNICAST_ADDRESS_LH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: pointer
  if (data?.Address !== undefined) view.setBigUint64(16, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x18: i32
  if (data?.PrefixOrigin !== undefined) view.setInt32(24, Number(data.PrefixOrigin), true);
  // 0x1c: i32
  if (data?.SuffixOrigin !== undefined) view.setInt32(28, Number(data.SuffixOrigin), true);
  // 0x20: i32
  if (data?.DadState !== undefined) view.setInt32(32, Number(data.DadState), true);
  // 0x24: u32
  if (data?.ValidLifetime !== undefined) view.setUint32(36, Number(data.ValidLifetime), true);
  // 0x28: u32
  if (data?.PreferredLifetime !== undefined) view.setUint32(40, Number(data.PreferredLifetime), true);
  // 0x2c: u32
  if (data?.LeaseLifetime !== undefined) view.setUint32(44, Number(data.LeaseLifetime), true);
  // 0x30: u8
  if (data?.OnLinkPrefixLength !== undefined) view.setUint8(48, Number(data.OnLinkPrefixLength));
  // 0x31: pad7
  return buf;
}

export class IP_ADAPTER_UNICAST_ADDRESS_LHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get PrefixOrigin(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get SuffixOrigin(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get DadState(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get ValidLifetime(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get PreferredLifetime(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get LeaseLifetime(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u8
  get OnLinkPrefixLength(): number {
    return this.view.getUint8(48);
  }

  // 0x31: pad7

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set PrefixOrigin(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set SuffixOrigin(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set DadState(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set ValidLifetime(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set PreferredLifetime(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set LeaseLifetime(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u8
  set OnLinkPrefixLength(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: pad7
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_UNICAST_ADDRESS_XP (size: 48)
 */
export interface IP_ADAPTER_UNICAST_ADDRESS_XP {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  Address: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.NL_PREFIX_ORIGIN */
  PrefixOrigin: NL_PREFIX_ORIGIN;
  /** Windows.Win32.Networking.WinSock.NL_SUFFIX_ORIGIN */
  SuffixOrigin: NL_SUFFIX_ORIGIN;
  /** Windows.Win32.Networking.WinSock.NL_DAD_STATE */
  DadState: NL_DAD_STATE;
  /** u32 */
  ValidLifetime: number;
  /** u32 */
  PreferredLifetime: number;
  /** u32 */
  LeaseLifetime: number;
}

export const sizeofIP_ADAPTER_UNICAST_ADDRESS_XP = 48;

export function allocIP_ADAPTER_UNICAST_ADDRESS_XP(data?: Partial<IP_ADAPTER_UNICAST_ADDRESS_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_UNICAST_ADDRESS_XP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: pointer
  if (data?.Address !== undefined) view.setBigUint64(16, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x18: i32
  if (data?.PrefixOrigin !== undefined) view.setInt32(24, Number(data.PrefixOrigin), true);
  // 0x1c: i32
  if (data?.SuffixOrigin !== undefined) view.setInt32(28, Number(data.SuffixOrigin), true);
  // 0x20: i32
  if (data?.DadState !== undefined) view.setInt32(32, Number(data.DadState), true);
  // 0x24: u32
  if (data?.ValidLifetime !== undefined) view.setUint32(36, Number(data.ValidLifetime), true);
  // 0x28: u32
  if (data?.PreferredLifetime !== undefined) view.setUint32(40, Number(data.PreferredLifetime), true);
  // 0x2c: u32
  if (data?.LeaseLifetime !== undefined) view.setUint32(44, Number(data.LeaseLifetime), true);
  return buf;
}

export class IP_ADAPTER_UNICAST_ADDRESS_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get PrefixOrigin(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get SuffixOrigin(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get DadState(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get ValidLifetime(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get PreferredLifetime(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get LeaseLifetime(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set PrefixOrigin(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set SuffixOrigin(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set DadState(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set ValidLifetime(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set PreferredLifetime(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set LeaseLifetime(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_ANYCAST_ADDRESS_XP (size: 24)
 */
export interface IP_ADAPTER_ANYCAST_ADDRESS_XP {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  Address: Uint8Array | Deno.PointerValue;
}

export const sizeofIP_ADAPTER_ANYCAST_ADDRESS_XP = 24;

export function allocIP_ADAPTER_ANYCAST_ADDRESS_XP(data?: Partial<IP_ADAPTER_ANYCAST_ADDRESS_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_ANYCAST_ADDRESS_XP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: pointer
  if (data?.Address !== undefined) view.setBigUint64(16, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  return buf;
}

export class IP_ADAPTER_ANYCAST_ADDRESS_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_MULTICAST_ADDRESS_XP (size: 24)
 */
export interface IP_ADAPTER_MULTICAST_ADDRESS_XP {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  Address: Uint8Array | Deno.PointerValue;
}

export const sizeofIP_ADAPTER_MULTICAST_ADDRESS_XP = 24;

export function allocIP_ADAPTER_MULTICAST_ADDRESS_XP(data?: Partial<IP_ADAPTER_MULTICAST_ADDRESS_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_MULTICAST_ADDRESS_XP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: pointer
  if (data?.Address !== undefined) view.setBigUint64(16, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  return buf;
}

export class IP_ADAPTER_MULTICAST_ADDRESS_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_DNS_SERVER_ADDRESS_XP (size: 24)
 */
export interface IP_ADAPTER_DNS_SERVER_ADDRESS_XP {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  Address: Uint8Array | Deno.PointerValue;
}

export const sizeofIP_ADAPTER_DNS_SERVER_ADDRESS_XP = 24;

export function allocIP_ADAPTER_DNS_SERVER_ADDRESS_XP(data?: Partial<IP_ADAPTER_DNS_SERVER_ADDRESS_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_DNS_SERVER_ADDRESS_XP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: pointer
  if (data?.Address !== undefined) view.setBigUint64(16, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  return buf;
}

export class IP_ADAPTER_DNS_SERVER_ADDRESS_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_WINS_SERVER_ADDRESS_LH (size: 24)
 */
export interface IP_ADAPTER_WINS_SERVER_ADDRESS_LH {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  Address: Uint8Array | Deno.PointerValue;
}

export const sizeofIP_ADAPTER_WINS_SERVER_ADDRESS_LH = 24;

export function allocIP_ADAPTER_WINS_SERVER_ADDRESS_LH(data?: Partial<IP_ADAPTER_WINS_SERVER_ADDRESS_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_WINS_SERVER_ADDRESS_LH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: pointer
  if (data?.Address !== undefined) view.setBigUint64(16, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  return buf;
}

export class IP_ADAPTER_WINS_SERVER_ADDRESS_LHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_GATEWAY_ADDRESS_LH (size: 24)
 */
export interface IP_ADAPTER_GATEWAY_ADDRESS_LH {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  Address: Uint8Array | Deno.PointerValue;
}

export const sizeofIP_ADAPTER_GATEWAY_ADDRESS_LH = 24;

export function allocIP_ADAPTER_GATEWAY_ADDRESS_LH(data?: Partial<IP_ADAPTER_GATEWAY_ADDRESS_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_GATEWAY_ADDRESS_LH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: pointer
  if (data?.Address !== undefined) view.setBigUint64(16, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  return buf;
}

export class IP_ADAPTER_GATEWAY_ADDRESS_LHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_PREFIX_XP (size: 32)
 */
export interface IP_ADAPTER_PREFIX_XP {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  Address: Uint8Array | Deno.PointerValue;
  /** u32 */
  PrefixLength: number;
}

export const sizeofIP_ADAPTER_PREFIX_XP = 32;

export function allocIP_ADAPTER_PREFIX_XP(data?: Partial<IP_ADAPTER_PREFIX_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_PREFIX_XP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: pointer
  if (data?.Address !== undefined) view.setBigUint64(16, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x18: u32
  if (data?.PrefixLength !== undefined) view.setUint32(24, Number(data.PrefixLength), true);
  // 0x1c: pad4
  return buf;
}

export class IP_ADAPTER_PREFIX_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get PrefixLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set PrefixLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_DNS_SUFFIX (size: 16)
 */
export interface IP_ADAPTER_DNS_SUFFIX {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** array */
  String: Deno.PointerValue;
}

export const sizeofIP_ADAPTER_DNS_SUFFIX = 16;

export function allocIP_ADAPTER_DNS_SUFFIX(data?: Partial<IP_ADAPTER_DNS_SUFFIX>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_DNS_SUFFIX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: pointer
  if (data?.String !== undefined) view.setBigUint64(8, data.String === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.String))), true);
  return buf;
}

export class IP_ADAPTER_DNS_SUFFIXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set String(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_ADDRESSES_LH (size: 248)
 */
export interface IP_ADAPTER_ADDRESSES_LH {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  AdapterName: string | null | Uint8Array;
  /** ptr */
  FirstUnicastAddress: Deno.PointerValue | Uint8Array;
  /** ptr */
  FirstAnycastAddress: Deno.PointerValue | Uint8Array;
  /** ptr */
  FirstMulticastAddress: Deno.PointerValue | Uint8Array;
  /** ptr */
  FirstDnsServerAddress: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsSuffix: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Description: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  FriendlyName: string | null | Uint8Array | Uint16Array;
  /** array */
  PhysicalAddress: Deno.PointerValue;
  /** u32 */
  PhysicalAddressLength: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** u32 */
  Mtu: number;
  /** u32 */
  IfType: number;
  /** Windows.Win32.NetworkManagement.Ndis.IF_OPER_STATUS */
  OperStatus: IF_OPER_STATUS;
  /** u32 */
  Ipv6IfIndex: number;
  /** array */
  ZoneIndices: Deno.PointerValue;
  /** ptr */
  FirstPrefix: Deno.PointerValue | Uint8Array;
  /** u64 */
  TransmitLinkSpeed: Deno.PointerValue;
  /** u64 */
  ReceiveLinkSpeed: Deno.PointerValue;
  /** ptr */
  FirstWinsServerAddress: Deno.PointerValue | Uint8Array;
  /** ptr */
  FirstGatewayAddress: Deno.PointerValue | Uint8Array;
  /** u32 */
  Ipv4Metric: number;
  /** u32 */
  Ipv6Metric: number;
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  Luid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  Dhcpv4Server: Uint8Array | Deno.PointerValue;
  /** u32 */
  CompartmentId: number;
  /** System.Guid */
  NetworkGuid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_CONNECTION_TYPE */
  ConnectionType: NET_IF_CONNECTION_TYPE;
  /** Windows.Win32.NetworkManagement.Ndis.TUNNEL_TYPE */
  TunnelType: TUNNEL_TYPE;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  Dhcpv6Server: Uint8Array | Deno.PointerValue;
  /** array */
  Dhcpv6ClientDuid: Deno.PointerValue;
  /** u32 */
  Dhcpv6ClientDuidLength: number;
  /** u32 */
  Dhcpv6Iaid: number;
  /** ptr */
  FirstDnsSuffix: Deno.PointerValue | Uint8Array;
}

export const sizeofIP_ADAPTER_ADDRESSES_LH = 248;

export function allocIP_ADAPTER_ADDRESSES_LH(data?: Partial<IP_ADAPTER_ADDRESSES_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_ADDRESSES_LH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: buffer
  if (data?.AdapterName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.AdapterName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.FirstUnicastAddress !== undefined) view.setBigUint64(24, data.FirstUnicastAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstUnicastAddress))), true);
  // 0x20: pointer
  if (data?.FirstAnycastAddress !== undefined) view.setBigUint64(32, data.FirstAnycastAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstAnycastAddress))), true);
  // 0x28: pointer
  if (data?.FirstMulticastAddress !== undefined) view.setBigUint64(40, data.FirstMulticastAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstMulticastAddress))), true);
  // 0x30: pointer
  if (data?.FirstDnsServerAddress !== undefined) view.setBigUint64(48, data.FirstDnsServerAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstDnsServerAddress))), true);
  // 0x38: buffer
  if (data?.DnsSuffix !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.DnsSuffix);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.Description);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.FriendlyName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.FriendlyName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: pointer
  if (data?.PhysicalAddress !== undefined) view.setBigUint64(80, data.PhysicalAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhysicalAddress))), true);
  // 0x58: u32
  if (data?.PhysicalAddressLength !== undefined) view.setUint32(88, Number(data.PhysicalAddressLength), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(96, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x68: u32
  if (data?.Mtu !== undefined) view.setUint32(104, Number(data.Mtu), true);
  // 0x6c: u32
  if (data?.IfType !== undefined) view.setUint32(108, Number(data.IfType), true);
  // 0x70: i32
  if (data?.OperStatus !== undefined) view.setInt32(112, Number(data.OperStatus), true);
  // 0x74: u32
  if (data?.Ipv6IfIndex !== undefined) view.setUint32(116, Number(data.Ipv6IfIndex), true);
  // 0x78: pointer
  if (data?.ZoneIndices !== undefined) view.setBigUint64(120, data.ZoneIndices === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ZoneIndices))), true);
  // 0x80: pointer
  if (data?.FirstPrefix !== undefined) view.setBigUint64(128, data.FirstPrefix === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstPrefix))), true);
  // 0x88: u64
  if (data?.TransmitLinkSpeed !== undefined) view.setBigUint64(136, BigInt(data.TransmitLinkSpeed), true);
  // 0x90: u64
  if (data?.ReceiveLinkSpeed !== undefined) view.setBigUint64(144, BigInt(data.ReceiveLinkSpeed), true);
  // 0x98: pointer
  if (data?.FirstWinsServerAddress !== undefined) view.setBigUint64(152, data.FirstWinsServerAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstWinsServerAddress))), true);
  // 0xa0: pointer
  if (data?.FirstGatewayAddress !== undefined) view.setBigUint64(160, data.FirstGatewayAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstGatewayAddress))), true);
  // 0xa8: u32
  if (data?.Ipv4Metric !== undefined) view.setUint32(168, Number(data.Ipv4Metric), true);
  // 0xac: u32
  if (data?.Ipv6Metric !== undefined) view.setUint32(172, Number(data.Ipv6Metric), true);
  // 0xb0: pointer
  if (data?.Luid !== undefined) view.setBigUint64(176, data.Luid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Luid))), true);
  // 0xb8: pointer
  if (data?.Dhcpv4Server !== undefined) view.setBigUint64(184, data.Dhcpv4Server === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dhcpv4Server))), true);
  // 0xc0: u32
  if (data?.CompartmentId !== undefined) view.setUint32(192, Number(data.CompartmentId), true);
  // 0xc4: pad4
  // 0xc8: pointer
  if (data?.NetworkGuid !== undefined) view.setBigUint64(200, data.NetworkGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NetworkGuid))), true);
  // 0xd0: i32
  if (data?.ConnectionType !== undefined) view.setInt32(208, Number(data.ConnectionType), true);
  // 0xd4: i32
  if (data?.TunnelType !== undefined) view.setInt32(212, Number(data.TunnelType), true);
  // 0xd8: pointer
  if (data?.Dhcpv6Server !== undefined) view.setBigUint64(216, data.Dhcpv6Server === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dhcpv6Server))), true);
  // 0xe0: pointer
  if (data?.Dhcpv6ClientDuid !== undefined) view.setBigUint64(224, data.Dhcpv6ClientDuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dhcpv6ClientDuid))), true);
  // 0xe8: u32
  if (data?.Dhcpv6ClientDuidLength !== undefined) view.setUint32(232, Number(data.Dhcpv6ClientDuidLength), true);
  // 0xec: u32
  if (data?.Dhcpv6Iaid !== undefined) view.setUint32(236, Number(data.Dhcpv6Iaid), true);
  // 0xf0: pointer
  if (data?.FirstDnsSuffix !== undefined) view.setBigUint64(240, data.FirstDnsSuffix === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstDnsSuffix))), true);
  return buf;
}

export class IP_ADAPTER_ADDRESSES_LHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get AdapterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FirstUnicastAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get FirstAnycastAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get FirstMulticastAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get FirstDnsServerAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get DnsSuffix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get Description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get FriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get PhysicalAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get PhysicalAddressLength(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get Mtu(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get IfType(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: i32
  get OperStatus(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: u32
  get Ipv6IfIndex(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: pointer
  get ZoneIndices(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get FirstPrefix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: u64
  get TransmitLinkSpeed(): Deno.PointerValue {
    return Number(this.view.getBigUint64(136, true));
  }

  // 0x90: u64
  get ReceiveLinkSpeed(): Deno.PointerValue {
    return Number(this.view.getBigUint64(144, true));
  }

  // 0x98: pointer
  get FirstWinsServerAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get FirstGatewayAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: u32
  get Ipv4Metric(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get Ipv6Metric(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: pointer
  get Luid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: pointer
  get Dhcpv4Server(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: u32
  get CompartmentId(): number {
    return this.view.getUint32(192, true);
  }

  // 0xc4: pad4

  // 0xc8: pointer
  get NetworkGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(200, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd0: i32
  get ConnectionType(): number {
    return this.view.getInt32(208, true);
  }

  // 0xd4: i32
  get TunnelType(): number {
    return this.view.getInt32(212, true);
  }

  // 0xd8: pointer
  get Dhcpv6Server(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: pointer
  get Dhcpv6ClientDuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(224, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe8: u32
  get Dhcpv6ClientDuidLength(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: u32
  get Dhcpv6Iaid(): number {
    return this.view.getUint32(236, true);
  }

  // 0xf0: pointer
  get FirstDnsSuffix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(240, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set AdapterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set FirstUnicastAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set FirstAnycastAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set FirstMulticastAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set FirstDnsServerAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: buffer
  set DnsSuffix(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set Description(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set FriendlyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: pointer
  set PhysicalAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set PhysicalAddressLength(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set Mtu(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set IfType(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: i32
  set OperStatus(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: u32
  set Ipv6IfIndex(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: pointer
  set ZoneIndices(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set FirstPrefix(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: u64
  set TransmitLinkSpeed(value: Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(value), true);
  }

  // 0x90: u64
  set ReceiveLinkSpeed(value: Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(value), true);
  }

  // 0x98: pointer
  set FirstWinsServerAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set FirstGatewayAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: u32
  set Ipv4Metric(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set Ipv6Metric(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: pointer
  set Luid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: pointer
  set Dhcpv4Server(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: u32
  set CompartmentId(value: number) {
    this.view.setUint32(192, value, true);
  }

  // 0xc4: pad4

  // 0xc8: pointer
  set NetworkGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(200, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd0: i32
  set ConnectionType(value: number) {
    this.view.setInt32(208, value, true);
  }

  // 0xd4: i32
  set TunnelType(value: number) {
    this.view.setInt32(212, value, true);
  }

  // 0xd8: pointer
  set Dhcpv6Server(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: pointer
  set Dhcpv6ClientDuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe8: u32
  set Dhcpv6ClientDuidLength(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: u32
  set Dhcpv6Iaid(value: number) {
    this.view.setUint32(236, value, true);
  }

  // 0xf0: pointer
  set FirstDnsSuffix(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(240, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_ADAPTER_ADDRESSES_XP (size: 128)
 */
export interface IP_ADAPTER_ADDRESSES_XP {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  AdapterName: string | null | Uint8Array;
  /** ptr */
  FirstUnicastAddress: Deno.PointerValue | Uint8Array;
  /** ptr */
  FirstAnycastAddress: Deno.PointerValue | Uint8Array;
  /** ptr */
  FirstMulticastAddress: Deno.PointerValue | Uint8Array;
  /** ptr */
  FirstDnsServerAddress: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsSuffix: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Description: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  FriendlyName: string | null | Uint8Array | Uint16Array;
  /** array */
  PhysicalAddress: Deno.PointerValue;
  /** u32 */
  PhysicalAddressLength: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Mtu: number;
  /** u32 */
  IfType: number;
  /** Windows.Win32.NetworkManagement.Ndis.IF_OPER_STATUS */
  OperStatus: IF_OPER_STATUS;
  /** u32 */
  Ipv6IfIndex: number;
  /** array */
  ZoneIndices: Deno.PointerValue;
  /** ptr */
  FirstPrefix: Deno.PointerValue | Uint8Array;
}

export const sizeofIP_ADAPTER_ADDRESSES_XP = 128;

export function allocIP_ADAPTER_ADDRESSES_XP(data?: Partial<IP_ADAPTER_ADDRESSES_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_ADAPTER_ADDRESSES_XP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: buffer
  if (data?.AdapterName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.AdapterName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.FirstUnicastAddress !== undefined) view.setBigUint64(24, data.FirstUnicastAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstUnicastAddress))), true);
  // 0x20: pointer
  if (data?.FirstAnycastAddress !== undefined) view.setBigUint64(32, data.FirstAnycastAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstAnycastAddress))), true);
  // 0x28: pointer
  if (data?.FirstMulticastAddress !== undefined) view.setBigUint64(40, data.FirstMulticastAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstMulticastAddress))), true);
  // 0x30: pointer
  if (data?.FirstDnsServerAddress !== undefined) view.setBigUint64(48, data.FirstDnsServerAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstDnsServerAddress))), true);
  // 0x38: buffer
  if (data?.DnsSuffix !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.DnsSuffix);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.Description);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.FriendlyName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.FriendlyName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: pointer
  if (data?.PhysicalAddress !== undefined) view.setBigUint64(80, data.PhysicalAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhysicalAddress))), true);
  // 0x58: u32
  if (data?.PhysicalAddressLength !== undefined) view.setUint32(88, Number(data.PhysicalAddressLength), true);
  // 0x5c: u32
  if (data?.Flags !== undefined) view.setUint32(92, Number(data.Flags), true);
  // 0x60: u32
  if (data?.Mtu !== undefined) view.setUint32(96, Number(data.Mtu), true);
  // 0x64: u32
  if (data?.IfType !== undefined) view.setUint32(100, Number(data.IfType), true);
  // 0x68: i32
  if (data?.OperStatus !== undefined) view.setInt32(104, Number(data.OperStatus), true);
  // 0x6c: u32
  if (data?.Ipv6IfIndex !== undefined) view.setUint32(108, Number(data.Ipv6IfIndex), true);
  // 0x70: pointer
  if (data?.ZoneIndices !== undefined) view.setBigUint64(112, data.ZoneIndices === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ZoneIndices))), true);
  // 0x78: pointer
  if (data?.FirstPrefix !== undefined) view.setBigUint64(120, data.FirstPrefix === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstPrefix))), true);
  return buf;
}

export class IP_ADAPTER_ADDRESSES_XPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get AdapterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FirstUnicastAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get FirstAnycastAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get FirstMulticastAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get FirstDnsServerAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get DnsSuffix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get Description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get FriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get PhysicalAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get PhysicalAddressLength(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get Flags(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get Mtu(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get IfType(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: i32
  get OperStatus(): number {
    return this.view.getInt32(104, true);
  }

  // 0x6c: u32
  get Ipv6IfIndex(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: pointer
  get ZoneIndices(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get FirstPrefix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set AdapterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set FirstUnicastAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set FirstAnycastAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set FirstMulticastAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set FirstDnsServerAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: buffer
  set DnsSuffix(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set Description(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set FriendlyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: pointer
  set PhysicalAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set PhysicalAddressLength(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set Flags(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set Mtu(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set IfType(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: i32
  set OperStatus(value: number) {
    this.view.setInt32(104, value, true);
  }

  // 0x6c: u32
  set Ipv6IfIndex(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: pointer
  set ZoneIndices(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set FirstPrefix(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_PER_ADAPTER_INFO_W2KSP1 (size: 24)
 */
export interface IP_PER_ADAPTER_INFO_W2KSP1 {
  /** u32 */
  AutoconfigEnabled: number;
  /** u32 */
  AutoconfigActive: number;
  /** ptr */
  CurrentDnsServer: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_ADDR_STRING */
  DnsServerList: Uint8Array | Deno.PointerValue;
}

export const sizeofIP_PER_ADAPTER_INFO_W2KSP1 = 24;

export function allocIP_PER_ADAPTER_INFO_W2KSP1(data?: Partial<IP_PER_ADAPTER_INFO_W2KSP1>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_PER_ADAPTER_INFO_W2KSP1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AutoconfigEnabled !== undefined) view.setUint32(0, Number(data.AutoconfigEnabled), true);
  // 0x04: u32
  if (data?.AutoconfigActive !== undefined) view.setUint32(4, Number(data.AutoconfigActive), true);
  // 0x08: pointer
  if (data?.CurrentDnsServer !== undefined) view.setBigUint64(8, data.CurrentDnsServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentDnsServer))), true);
  // 0x10: pointer
  if (data?.DnsServerList !== undefined) view.setBigUint64(16, data.DnsServerList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DnsServerList))), true);
  return buf;
}

export class IP_PER_ADAPTER_INFO_W2KSP1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AutoconfigEnabled(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AutoconfigActive(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get CurrentDnsServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DnsServerList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AutoconfigEnabled(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AutoconfigActive(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set CurrentDnsServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DnsServerList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.FIXED_INFO_W2KSP1 (size: 64)
 */
export interface FIXED_INFO_W2KSP1 {
  /** array */
  HostName: Deno.PointerValue;
  /** array */
  DomainName: Deno.PointerValue;
  /** ptr */
  CurrentDnsServer: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.IpHelper.IP_ADDR_STRING */
  DnsServerList: Uint8Array | Deno.PointerValue;
  /** u32 */
  NodeType: number;
  /** array */
  ScopeId: Deno.PointerValue;
  /** u32 */
  EnableRouting: number;
  /** u32 */
  EnableProxy: number;
  /** u32 */
  EnableDns: number;
}

export const sizeofFIXED_INFO_W2KSP1 = 64;

export function allocFIXED_INFO_W2KSP1(data?: Partial<FIXED_INFO_W2KSP1>): Uint8Array {
  const buf = new Uint8Array(sizeofFIXED_INFO_W2KSP1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HostName !== undefined) view.setBigUint64(0, data.HostName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HostName))), true);
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x10: pointer
  if (data?.CurrentDnsServer !== undefined) view.setBigUint64(16, data.CurrentDnsServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentDnsServer))), true);
  // 0x18: pointer
  if (data?.DnsServerList !== undefined) view.setBigUint64(24, data.DnsServerList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DnsServerList))), true);
  // 0x20: u32
  if (data?.NodeType !== undefined) view.setUint32(32, Number(data.NodeType), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ScopeId !== undefined) view.setBigUint64(40, data.ScopeId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScopeId))), true);
  // 0x30: u32
  if (data?.EnableRouting !== undefined) view.setUint32(48, Number(data.EnableRouting), true);
  // 0x34: u32
  if (data?.EnableProxy !== undefined) view.setUint32(52, Number(data.EnableProxy), true);
  // 0x38: u32
  if (data?.EnableDns !== undefined) view.setUint32(56, Number(data.EnableDns), true);
  // 0x3c: pad4
  return buf;
}

export class FIXED_INFO_W2KSP1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get HostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CurrentDnsServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DnsServerList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NodeType(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ScopeId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get EnableRouting(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get EnableProxy(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get EnableDns(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set HostName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CurrentDnsServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DnsServerList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set NodeType(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ScopeId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set EnableRouting(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set EnableProxy(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set EnableDns(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.IP_INTERFACE_NAME_INFO_W2KSP1 (size: 32)
 */
export interface IP_INTERFACE_NAME_INFO_W2KSP1 {
  /** u32 */
  Index: number;
  /** u32 */
  MediaType: number;
  /** u8 */
  ConnectionType: number;
  /** u8 */
  AccessType: number;
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  InterfaceGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofIP_INTERFACE_NAME_INFO_W2KSP1 = 32;

export function allocIP_INTERFACE_NAME_INFO_W2KSP1(data?: Partial<IP_INTERFACE_NAME_INFO_W2KSP1>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_INTERFACE_NAME_INFO_W2KSP1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Index !== undefined) view.setUint32(0, Number(data.Index), true);
  // 0x04: u32
  if (data?.MediaType !== undefined) view.setUint32(4, Number(data.MediaType), true);
  // 0x08: u8
  if (data?.ConnectionType !== undefined) view.setUint8(8, Number(data.ConnectionType));
  // 0x09: u8
  if (data?.AccessType !== undefined) view.setUint8(9, Number(data.AccessType));
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(16, data.DeviceGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceGuid))), true);
  // 0x18: pointer
  if (data?.InterfaceGuid !== undefined) view.setBigUint64(24, data.InterfaceGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceGuid))), true);
  return buf;
}

export class IP_INTERFACE_NAME_INFO_W2KSP1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Index(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MediaType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get ConnectionType(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get AccessType(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get DeviceGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get InterfaceGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Index(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MediaType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set ConnectionType(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set AccessType(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set DeviceGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set InterfaceGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_SYN_OPTS_ROS_v0 (size: 16)
 */
export interface TCP_ESTATS_SYN_OPTS_ROS_v0 {
  /** Windows.Win32.Foundation.BOOLEAN */
  ActiveOpen: Uint8Array | Deno.PointerValue;
  /** u32 */
  MssRcvd: number;
  /** u32 */
  MssSent: number;
}

export const sizeofTCP_ESTATS_SYN_OPTS_ROS_v0 = 16;

export function allocTCP_ESTATS_SYN_OPTS_ROS_v0(data?: Partial<TCP_ESTATS_SYN_OPTS_ROS_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_SYN_OPTS_ROS_v0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ActiveOpen !== undefined) view.setBigUint64(0, data.ActiveOpen === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ActiveOpen))), true);
  // 0x08: u32
  if (data?.MssRcvd !== undefined) view.setUint32(8, Number(data.MssRcvd), true);
  // 0x0c: u32
  if (data?.MssSent !== undefined) view.setUint32(12, Number(data.MssSent), true);
  return buf;
}

export class TCP_ESTATS_SYN_OPTS_ROS_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ActiveOpen(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get MssRcvd(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MssSent(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set ActiveOpen(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set MssRcvd(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MssSent(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_DATA_ROD_v0 (size: 96)
 */
export interface TCP_ESTATS_DATA_ROD_v0 {
  /** u64 */
  DataBytesOut: Deno.PointerValue;
  /** u64 */
  DataSegsOut: Deno.PointerValue;
  /** u64 */
  DataBytesIn: Deno.PointerValue;
  /** u64 */
  DataSegsIn: Deno.PointerValue;
  /** u64 */
  SegsOut: Deno.PointerValue;
  /** u64 */
  SegsIn: Deno.PointerValue;
  /** u32 */
  SoftErrors: number;
  /** u32 */
  SoftErrorReason: number;
  /** u32 */
  SndUna: number;
  /** u32 */
  SndNxt: number;
  /** u32 */
  SndMax: number;
  /** u64 */
  ThruBytesAcked: Deno.PointerValue;
  /** u32 */
  RcvNxt: number;
  /** u64 */
  ThruBytesReceived: Deno.PointerValue;
}

export const sizeofTCP_ESTATS_DATA_ROD_v0 = 96;

export function allocTCP_ESTATS_DATA_ROD_v0(data?: Partial<TCP_ESTATS_DATA_ROD_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_DATA_ROD_v0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DataBytesOut !== undefined) view.setBigUint64(0, BigInt(data.DataBytesOut), true);
  // 0x08: u64
  if (data?.DataSegsOut !== undefined) view.setBigUint64(8, BigInt(data.DataSegsOut), true);
  // 0x10: u64
  if (data?.DataBytesIn !== undefined) view.setBigUint64(16, BigInt(data.DataBytesIn), true);
  // 0x18: u64
  if (data?.DataSegsIn !== undefined) view.setBigUint64(24, BigInt(data.DataSegsIn), true);
  // 0x20: u64
  if (data?.SegsOut !== undefined) view.setBigUint64(32, BigInt(data.SegsOut), true);
  // 0x28: u64
  if (data?.SegsIn !== undefined) view.setBigUint64(40, BigInt(data.SegsIn), true);
  // 0x30: u32
  if (data?.SoftErrors !== undefined) view.setUint32(48, Number(data.SoftErrors), true);
  // 0x34: u32
  if (data?.SoftErrorReason !== undefined) view.setUint32(52, Number(data.SoftErrorReason), true);
  // 0x38: u32
  if (data?.SndUna !== undefined) view.setUint32(56, Number(data.SndUna), true);
  // 0x3c: u32
  if (data?.SndNxt !== undefined) view.setUint32(60, Number(data.SndNxt), true);
  // 0x40: u32
  if (data?.SndMax !== undefined) view.setUint32(64, Number(data.SndMax), true);
  // 0x44: pad4
  // 0x48: u64
  if (data?.ThruBytesAcked !== undefined) view.setBigUint64(72, BigInt(data.ThruBytesAcked), true);
  // 0x50: u32
  if (data?.RcvNxt !== undefined) view.setUint32(80, Number(data.RcvNxt), true);
  // 0x54: pad4
  // 0x58: u64
  if (data?.ThruBytesReceived !== undefined) view.setBigUint64(88, BigInt(data.ThruBytesReceived), true);
  return buf;
}

export class TCP_ESTATS_DATA_ROD_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get DataBytesOut(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get DataSegsOut(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get DataBytesIn(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get DataSegsIn(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get SegsOut(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get SegsIn(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u32
  get SoftErrors(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get SoftErrorReason(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get SndUna(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get SndNxt(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get SndMax(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: u64
  get ThruBytesAcked(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u32
  get RcvNxt(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: u64
  get ThruBytesReceived(): Deno.PointerValue {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x00: u64
  set DataBytesOut(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set DataSegsOut(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set DataBytesIn(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set DataSegsIn(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set SegsOut(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set SegsIn(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u32
  set SoftErrors(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set SoftErrorReason(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set SndUna(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set SndNxt(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set SndMax(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: u64
  set ThruBytesAcked(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u32
  set RcvNxt(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: u64
  set ThruBytesReceived(value: Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_DATA_RW_v0 (size: 8)
 */
export interface TCP_ESTATS_DATA_RW_v0 {
  /** Windows.Win32.Foundation.BOOLEAN */
  EnableCollection: Uint8Array | Deno.PointerValue;
}

export const sizeofTCP_ESTATS_DATA_RW_v0 = 8;

export function allocTCP_ESTATS_DATA_RW_v0(data?: Partial<TCP_ESTATS_DATA_RW_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_DATA_RW_v0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EnableCollection !== undefined) view.setBigUint64(0, data.EnableCollection === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnableCollection))), true);
  return buf;
}

export class TCP_ESTATS_DATA_RW_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EnableCollection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EnableCollection(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_SND_CONG_ROD_v0 (size: 88)
 */
export interface TCP_ESTATS_SND_CONG_ROD_v0 {
  /** u32 */
  SndLimTransRwin: number;
  /** u32 */
  SndLimTimeRwin: number;
  /** usize */
  SndLimBytesRwin: Deno.PointerValue;
  /** u32 */
  SndLimTransCwnd: number;
  /** u32 */
  SndLimTimeCwnd: number;
  /** usize */
  SndLimBytesCwnd: Deno.PointerValue;
  /** u32 */
  SndLimTransSnd: number;
  /** u32 */
  SndLimTimeSnd: number;
  /** usize */
  SndLimBytesSnd: Deno.PointerValue;
  /** u32 */
  SlowStart: number;
  /** u32 */
  CongAvoid: number;
  /** u32 */
  OtherReductions: number;
  /** u32 */
  CurCwnd: number;
  /** u32 */
  MaxSsCwnd: number;
  /** u32 */
  MaxCaCwnd: number;
  /** u32 */
  CurSsthresh: number;
  /** u32 */
  MaxSsthresh: number;
  /** u32 */
  MinSsthresh: number;
}

export const sizeofTCP_ESTATS_SND_CONG_ROD_v0 = 88;

export function allocTCP_ESTATS_SND_CONG_ROD_v0(data?: Partial<TCP_ESTATS_SND_CONG_ROD_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_SND_CONG_ROD_v0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SndLimTransRwin !== undefined) view.setUint32(0, Number(data.SndLimTransRwin), true);
  // 0x04: u32
  if (data?.SndLimTimeRwin !== undefined) view.setUint32(4, Number(data.SndLimTimeRwin), true);
  // 0x08: usize
  if (data?.SndLimBytesRwin !== undefined) view.setBigUint64(8, BigInt(data.SndLimBytesRwin), true);
  // 0x10: u32
  if (data?.SndLimTransCwnd !== undefined) view.setUint32(16, Number(data.SndLimTransCwnd), true);
  // 0x14: u32
  if (data?.SndLimTimeCwnd !== undefined) view.setUint32(20, Number(data.SndLimTimeCwnd), true);
  // 0x18: usize
  if (data?.SndLimBytesCwnd !== undefined) view.setBigUint64(24, BigInt(data.SndLimBytesCwnd), true);
  // 0x20: u32
  if (data?.SndLimTransSnd !== undefined) view.setUint32(32, Number(data.SndLimTransSnd), true);
  // 0x24: u32
  if (data?.SndLimTimeSnd !== undefined) view.setUint32(36, Number(data.SndLimTimeSnd), true);
  // 0x28: usize
  if (data?.SndLimBytesSnd !== undefined) view.setBigUint64(40, BigInt(data.SndLimBytesSnd), true);
  // 0x30: u32
  if (data?.SlowStart !== undefined) view.setUint32(48, Number(data.SlowStart), true);
  // 0x34: u32
  if (data?.CongAvoid !== undefined) view.setUint32(52, Number(data.CongAvoid), true);
  // 0x38: u32
  if (data?.OtherReductions !== undefined) view.setUint32(56, Number(data.OtherReductions), true);
  // 0x3c: u32
  if (data?.CurCwnd !== undefined) view.setUint32(60, Number(data.CurCwnd), true);
  // 0x40: u32
  if (data?.MaxSsCwnd !== undefined) view.setUint32(64, Number(data.MaxSsCwnd), true);
  // 0x44: u32
  if (data?.MaxCaCwnd !== undefined) view.setUint32(68, Number(data.MaxCaCwnd), true);
  // 0x48: u32
  if (data?.CurSsthresh !== undefined) view.setUint32(72, Number(data.CurSsthresh), true);
  // 0x4c: u32
  if (data?.MaxSsthresh !== undefined) view.setUint32(76, Number(data.MaxSsthresh), true);
  // 0x50: u32
  if (data?.MinSsthresh !== undefined) view.setUint32(80, Number(data.MinSsthresh), true);
  // 0x54: pad4
  return buf;
}

export class TCP_ESTATS_SND_CONG_ROD_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SndLimTransRwin(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SndLimTimeRwin(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: usize
  get SndLimBytesRwin(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get SndLimTransCwnd(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SndLimTimeCwnd(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: usize
  get SndLimBytesCwnd(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get SndLimTransSnd(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get SndLimTimeSnd(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: usize
  get SndLimBytesSnd(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u32
  get SlowStart(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get CongAvoid(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get OtherReductions(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get CurCwnd(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get MaxSsCwnd(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get MaxCaCwnd(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get CurSsthresh(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get MaxSsthresh(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get MinSsthresh(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set SndLimTransRwin(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SndLimTimeRwin(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: usize
  set SndLimBytesRwin(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set SndLimTransCwnd(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SndLimTimeCwnd(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: usize
  set SndLimBytesCwnd(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set SndLimTransSnd(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set SndLimTimeSnd(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: usize
  set SndLimBytesSnd(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u32
  set SlowStart(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set CongAvoid(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set OtherReductions(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set CurCwnd(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set MaxSsCwnd(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set MaxCaCwnd(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set CurSsthresh(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set MaxSsthresh(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set MinSsthresh(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_SND_CONG_ROS_v0 (size: 8)
 */
export interface TCP_ESTATS_SND_CONG_ROS_v0 {
  /** u32 */
  LimCwnd: number;
}

export const sizeofTCP_ESTATS_SND_CONG_ROS_v0 = 8;

export function allocTCP_ESTATS_SND_CONG_ROS_v0(data?: Partial<TCP_ESTATS_SND_CONG_ROS_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_SND_CONG_ROS_v0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LimCwnd !== undefined) view.setUint32(0, Number(data.LimCwnd), true);
  // 0x04: pad4
  return buf;
}

export class TCP_ESTATS_SND_CONG_ROS_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LimCwnd(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set LimCwnd(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_SND_CONG_RW_v0 (size: 8)
 */
export interface TCP_ESTATS_SND_CONG_RW_v0 {
  /** Windows.Win32.Foundation.BOOLEAN */
  EnableCollection: Uint8Array | Deno.PointerValue;
}

export const sizeofTCP_ESTATS_SND_CONG_RW_v0 = 8;

export function allocTCP_ESTATS_SND_CONG_RW_v0(data?: Partial<TCP_ESTATS_SND_CONG_RW_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_SND_CONG_RW_v0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EnableCollection !== undefined) view.setBigUint64(0, data.EnableCollection === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnableCollection))), true);
  return buf;
}

export class TCP_ESTATS_SND_CONG_RW_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EnableCollection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EnableCollection(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_PATH_ROD_v0 (size: 160)
 */
export interface TCP_ESTATS_PATH_ROD_v0 {
  /** u32 */
  FastRetran: number;
  /** u32 */
  Timeouts: number;
  /** u32 */
  SubsequentTimeouts: number;
  /** u32 */
  CurTimeoutCount: number;
  /** u32 */
  AbruptTimeouts: number;
  /** u32 */
  PktsRetrans: number;
  /** u32 */
  BytesRetrans: number;
  /** u32 */
  DupAcksIn: number;
  /** u32 */
  SacksRcvd: number;
  /** u32 */
  SackBlocksRcvd: number;
  /** u32 */
  CongSignals: number;
  /** u32 */
  PreCongSumCwnd: number;
  /** u32 */
  PreCongSumRtt: number;
  /** u32 */
  PostCongSumRtt: number;
  /** u32 */
  PostCongCountRtt: number;
  /** u32 */
  EcnSignals: number;
  /** u32 */
  EceRcvd: number;
  /** u32 */
  SendStall: number;
  /** u32 */
  QuenchRcvd: number;
  /** u32 */
  RetranThresh: number;
  /** u32 */
  SndDupAckEpisodes: number;
  /** u32 */
  SumBytesReordered: number;
  /** u32 */
  NonRecovDa: number;
  /** u32 */
  NonRecovDaEpisodes: number;
  /** u32 */
  AckAfterFr: number;
  /** u32 */
  DsackDups: number;
  /** u32 */
  SampleRtt: number;
  /** u32 */
  SmoothedRtt: number;
  /** u32 */
  RttVar: number;
  /** u32 */
  MaxRtt: number;
  /** u32 */
  MinRtt: number;
  /** u32 */
  SumRtt: number;
  /** u32 */
  CountRtt: number;
  /** u32 */
  CurRto: number;
  /** u32 */
  MaxRto: number;
  /** u32 */
  MinRto: number;
  /** u32 */
  CurMss: number;
  /** u32 */
  MaxMss: number;
  /** u32 */
  MinMss: number;
  /** u32 */
  SpuriousRtoDetections: number;
}

export const sizeofTCP_ESTATS_PATH_ROD_v0 = 160;

export function allocTCP_ESTATS_PATH_ROD_v0(data?: Partial<TCP_ESTATS_PATH_ROD_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_PATH_ROD_v0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FastRetran !== undefined) view.setUint32(0, Number(data.FastRetran), true);
  // 0x04: u32
  if (data?.Timeouts !== undefined) view.setUint32(4, Number(data.Timeouts), true);
  // 0x08: u32
  if (data?.SubsequentTimeouts !== undefined) view.setUint32(8, Number(data.SubsequentTimeouts), true);
  // 0x0c: u32
  if (data?.CurTimeoutCount !== undefined) view.setUint32(12, Number(data.CurTimeoutCount), true);
  // 0x10: u32
  if (data?.AbruptTimeouts !== undefined) view.setUint32(16, Number(data.AbruptTimeouts), true);
  // 0x14: u32
  if (data?.PktsRetrans !== undefined) view.setUint32(20, Number(data.PktsRetrans), true);
  // 0x18: u32
  if (data?.BytesRetrans !== undefined) view.setUint32(24, Number(data.BytesRetrans), true);
  // 0x1c: u32
  if (data?.DupAcksIn !== undefined) view.setUint32(28, Number(data.DupAcksIn), true);
  // 0x20: u32
  if (data?.SacksRcvd !== undefined) view.setUint32(32, Number(data.SacksRcvd), true);
  // 0x24: u32
  if (data?.SackBlocksRcvd !== undefined) view.setUint32(36, Number(data.SackBlocksRcvd), true);
  // 0x28: u32
  if (data?.CongSignals !== undefined) view.setUint32(40, Number(data.CongSignals), true);
  // 0x2c: u32
  if (data?.PreCongSumCwnd !== undefined) view.setUint32(44, Number(data.PreCongSumCwnd), true);
  // 0x30: u32
  if (data?.PreCongSumRtt !== undefined) view.setUint32(48, Number(data.PreCongSumRtt), true);
  // 0x34: u32
  if (data?.PostCongSumRtt !== undefined) view.setUint32(52, Number(data.PostCongSumRtt), true);
  // 0x38: u32
  if (data?.PostCongCountRtt !== undefined) view.setUint32(56, Number(data.PostCongCountRtt), true);
  // 0x3c: u32
  if (data?.EcnSignals !== undefined) view.setUint32(60, Number(data.EcnSignals), true);
  // 0x40: u32
  if (data?.EceRcvd !== undefined) view.setUint32(64, Number(data.EceRcvd), true);
  // 0x44: u32
  if (data?.SendStall !== undefined) view.setUint32(68, Number(data.SendStall), true);
  // 0x48: u32
  if (data?.QuenchRcvd !== undefined) view.setUint32(72, Number(data.QuenchRcvd), true);
  // 0x4c: u32
  if (data?.RetranThresh !== undefined) view.setUint32(76, Number(data.RetranThresh), true);
  // 0x50: u32
  if (data?.SndDupAckEpisodes !== undefined) view.setUint32(80, Number(data.SndDupAckEpisodes), true);
  // 0x54: u32
  if (data?.SumBytesReordered !== undefined) view.setUint32(84, Number(data.SumBytesReordered), true);
  // 0x58: u32
  if (data?.NonRecovDa !== undefined) view.setUint32(88, Number(data.NonRecovDa), true);
  // 0x5c: u32
  if (data?.NonRecovDaEpisodes !== undefined) view.setUint32(92, Number(data.NonRecovDaEpisodes), true);
  // 0x60: u32
  if (data?.AckAfterFr !== undefined) view.setUint32(96, Number(data.AckAfterFr), true);
  // 0x64: u32
  if (data?.DsackDups !== undefined) view.setUint32(100, Number(data.DsackDups), true);
  // 0x68: u32
  if (data?.SampleRtt !== undefined) view.setUint32(104, Number(data.SampleRtt), true);
  // 0x6c: u32
  if (data?.SmoothedRtt !== undefined) view.setUint32(108, Number(data.SmoothedRtt), true);
  // 0x70: u32
  if (data?.RttVar !== undefined) view.setUint32(112, Number(data.RttVar), true);
  // 0x74: u32
  if (data?.MaxRtt !== undefined) view.setUint32(116, Number(data.MaxRtt), true);
  // 0x78: u32
  if (data?.MinRtt !== undefined) view.setUint32(120, Number(data.MinRtt), true);
  // 0x7c: u32
  if (data?.SumRtt !== undefined) view.setUint32(124, Number(data.SumRtt), true);
  // 0x80: u32
  if (data?.CountRtt !== undefined) view.setUint32(128, Number(data.CountRtt), true);
  // 0x84: u32
  if (data?.CurRto !== undefined) view.setUint32(132, Number(data.CurRto), true);
  // 0x88: u32
  if (data?.MaxRto !== undefined) view.setUint32(136, Number(data.MaxRto), true);
  // 0x8c: u32
  if (data?.MinRto !== undefined) view.setUint32(140, Number(data.MinRto), true);
  // 0x90: u32
  if (data?.CurMss !== undefined) view.setUint32(144, Number(data.CurMss), true);
  // 0x94: u32
  if (data?.MaxMss !== undefined) view.setUint32(148, Number(data.MaxMss), true);
  // 0x98: u32
  if (data?.MinMss !== undefined) view.setUint32(152, Number(data.MinMss), true);
  // 0x9c: u32
  if (data?.SpuriousRtoDetections !== undefined) view.setUint32(156, Number(data.SpuriousRtoDetections), true);
  return buf;
}

export class TCP_ESTATS_PATH_ROD_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FastRetran(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Timeouts(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SubsequentTimeouts(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CurTimeoutCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AbruptTimeouts(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PktsRetrans(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BytesRetrans(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DupAcksIn(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get SacksRcvd(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get SackBlocksRcvd(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get CongSignals(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get PreCongSumCwnd(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get PreCongSumRtt(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get PostCongSumRtt(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get PostCongCountRtt(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get EcnSignals(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get EceRcvd(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get SendStall(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get QuenchRcvd(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get RetranThresh(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get SndDupAckEpisodes(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get SumBytesReordered(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get NonRecovDa(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get NonRecovDaEpisodes(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get AckAfterFr(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get DsackDups(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get SampleRtt(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get SmoothedRtt(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get RttVar(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get MaxRtt(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get MinRtt(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get SumRtt(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get CountRtt(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get CurRto(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get MaxRto(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get MinRto(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get CurMss(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get MaxMss(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get MinMss(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get SpuriousRtoDetections(): number {
    return this.view.getUint32(156, true);
  }

  // 0x00: u32
  set FastRetran(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Timeouts(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SubsequentTimeouts(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CurTimeoutCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AbruptTimeouts(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PktsRetrans(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BytesRetrans(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DupAcksIn(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set SacksRcvd(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set SackBlocksRcvd(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set CongSignals(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set PreCongSumCwnd(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set PreCongSumRtt(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set PostCongSumRtt(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set PostCongCountRtt(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set EcnSignals(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set EceRcvd(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set SendStall(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set QuenchRcvd(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set RetranThresh(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set SndDupAckEpisodes(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set SumBytesReordered(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set NonRecovDa(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set NonRecovDaEpisodes(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set AckAfterFr(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set DsackDups(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set SampleRtt(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set SmoothedRtt(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set RttVar(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set MaxRtt(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set MinRtt(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set SumRtt(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set CountRtt(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set CurRto(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set MaxRto(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set MinRto(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set CurMss(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set MaxMss(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set MinMss(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set SpuriousRtoDetections(value: number) {
    this.view.setUint32(156, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_PATH_RW_v0 (size: 8)
 */
export interface TCP_ESTATS_PATH_RW_v0 {
  /** Windows.Win32.Foundation.BOOLEAN */
  EnableCollection: Uint8Array | Deno.PointerValue;
}

export const sizeofTCP_ESTATS_PATH_RW_v0 = 8;

export function allocTCP_ESTATS_PATH_RW_v0(data?: Partial<TCP_ESTATS_PATH_RW_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_PATH_RW_v0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EnableCollection !== undefined) view.setBigUint64(0, data.EnableCollection === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnableCollection))), true);
  return buf;
}

export class TCP_ESTATS_PATH_RW_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EnableCollection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EnableCollection(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_SEND_BUFF_ROD_v0 (size: 32)
 */
export interface TCP_ESTATS_SEND_BUFF_ROD_v0 {
  /** usize */
  CurRetxQueue: Deno.PointerValue;
  /** usize */
  MaxRetxQueue: Deno.PointerValue;
  /** usize */
  CurAppWQueue: Deno.PointerValue;
  /** usize */
  MaxAppWQueue: Deno.PointerValue;
}

export const sizeofTCP_ESTATS_SEND_BUFF_ROD_v0 = 32;

export function allocTCP_ESTATS_SEND_BUFF_ROD_v0(data?: Partial<TCP_ESTATS_SEND_BUFF_ROD_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_SEND_BUFF_ROD_v0);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.CurRetxQueue !== undefined) view.setBigUint64(0, BigInt(data.CurRetxQueue), true);
  // 0x08: usize
  if (data?.MaxRetxQueue !== undefined) view.setBigUint64(8, BigInt(data.MaxRetxQueue), true);
  // 0x10: usize
  if (data?.CurAppWQueue !== undefined) view.setBigUint64(16, BigInt(data.CurAppWQueue), true);
  // 0x18: usize
  if (data?.MaxAppWQueue !== undefined) view.setBigUint64(24, BigInt(data.MaxAppWQueue), true);
  return buf;
}

export class TCP_ESTATS_SEND_BUFF_ROD_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get CurRetxQueue(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get MaxRetxQueue(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get CurAppWQueue(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get MaxAppWQueue(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: usize
  set CurRetxQueue(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set MaxRetxQueue(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set CurAppWQueue(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set MaxAppWQueue(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_SEND_BUFF_RW_v0 (size: 8)
 */
export interface TCP_ESTATS_SEND_BUFF_RW_v0 {
  /** Windows.Win32.Foundation.BOOLEAN */
  EnableCollection: Uint8Array | Deno.PointerValue;
}

export const sizeofTCP_ESTATS_SEND_BUFF_RW_v0 = 8;

export function allocTCP_ESTATS_SEND_BUFF_RW_v0(data?: Partial<TCP_ESTATS_SEND_BUFF_RW_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_SEND_BUFF_RW_v0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EnableCollection !== undefined) view.setBigUint64(0, data.EnableCollection === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnableCollection))), true);
  return buf;
}

export class TCP_ESTATS_SEND_BUFF_RW_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EnableCollection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EnableCollection(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_REC_ROD_v0 (size: 72)
 */
export interface TCP_ESTATS_REC_ROD_v0 {
  /** u32 */
  CurRwinSent: number;
  /** u32 */
  MaxRwinSent: number;
  /** u32 */
  MinRwinSent: number;
  /** u32 */
  LimRwin: number;
  /** u32 */
  DupAckEpisodes: number;
  /** u32 */
  DupAcksOut: number;
  /** u32 */
  CeRcvd: number;
  /** u32 */
  EcnSent: number;
  /** u32 */
  EcnNoncesRcvd: number;
  /** u32 */
  CurReasmQueue: number;
  /** u32 */
  MaxReasmQueue: number;
  /** usize */
  CurAppRQueue: Deno.PointerValue;
  /** usize */
  MaxAppRQueue: Deno.PointerValue;
  /** u8 */
  WinScaleSent: number;
}

export const sizeofTCP_ESTATS_REC_ROD_v0 = 72;

export function allocTCP_ESTATS_REC_ROD_v0(data?: Partial<TCP_ESTATS_REC_ROD_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_REC_ROD_v0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CurRwinSent !== undefined) view.setUint32(0, Number(data.CurRwinSent), true);
  // 0x04: u32
  if (data?.MaxRwinSent !== undefined) view.setUint32(4, Number(data.MaxRwinSent), true);
  // 0x08: u32
  if (data?.MinRwinSent !== undefined) view.setUint32(8, Number(data.MinRwinSent), true);
  // 0x0c: u32
  if (data?.LimRwin !== undefined) view.setUint32(12, Number(data.LimRwin), true);
  // 0x10: u32
  if (data?.DupAckEpisodes !== undefined) view.setUint32(16, Number(data.DupAckEpisodes), true);
  // 0x14: u32
  if (data?.DupAcksOut !== undefined) view.setUint32(20, Number(data.DupAcksOut), true);
  // 0x18: u32
  if (data?.CeRcvd !== undefined) view.setUint32(24, Number(data.CeRcvd), true);
  // 0x1c: u32
  if (data?.EcnSent !== undefined) view.setUint32(28, Number(data.EcnSent), true);
  // 0x20: u32
  if (data?.EcnNoncesRcvd !== undefined) view.setUint32(32, Number(data.EcnNoncesRcvd), true);
  // 0x24: u32
  if (data?.CurReasmQueue !== undefined) view.setUint32(36, Number(data.CurReasmQueue), true);
  // 0x28: u32
  if (data?.MaxReasmQueue !== undefined) view.setUint32(40, Number(data.MaxReasmQueue), true);
  // 0x2c: pad4
  // 0x30: usize
  if (data?.CurAppRQueue !== undefined) view.setBigUint64(48, BigInt(data.CurAppRQueue), true);
  // 0x38: usize
  if (data?.MaxAppRQueue !== undefined) view.setBigUint64(56, BigInt(data.MaxAppRQueue), true);
  // 0x40: u8
  if (data?.WinScaleSent !== undefined) view.setUint8(64, Number(data.WinScaleSent));
  // 0x41: pad7
  return buf;
}

export class TCP_ESTATS_REC_ROD_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CurRwinSent(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxRwinSent(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MinRwinSent(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get LimRwin(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DupAckEpisodes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DupAcksOut(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get CeRcvd(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get EcnSent(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get EcnNoncesRcvd(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CurReasmQueue(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get MaxReasmQueue(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: usize
  get CurAppRQueue(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: usize
  get MaxAppRQueue(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u8
  get WinScaleSent(): number {
    return this.view.getUint8(64);
  }

  // 0x41: pad7

  // 0x00: u32
  set CurRwinSent(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxRwinSent(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MinRwinSent(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set LimRwin(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DupAckEpisodes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DupAcksOut(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set CeRcvd(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set EcnSent(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set EcnNoncesRcvd(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CurReasmQueue(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set MaxReasmQueue(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: usize
  set CurAppRQueue(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: usize
  set MaxAppRQueue(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u8
  set WinScaleSent(value: number) {
    this.view.setUint8(64, value);
  }

  // 0x41: pad7
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_REC_RW_v0 (size: 8)
 */
export interface TCP_ESTATS_REC_RW_v0 {
  /** Windows.Win32.Foundation.BOOLEAN */
  EnableCollection: Uint8Array | Deno.PointerValue;
}

export const sizeofTCP_ESTATS_REC_RW_v0 = 8;

export function allocTCP_ESTATS_REC_RW_v0(data?: Partial<TCP_ESTATS_REC_RW_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_REC_RW_v0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EnableCollection !== undefined) view.setBigUint64(0, data.EnableCollection === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnableCollection))), true);
  return buf;
}

export class TCP_ESTATS_REC_RW_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EnableCollection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EnableCollection(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_OBS_REC_ROD_v0 (size: 16)
 */
export interface TCP_ESTATS_OBS_REC_ROD_v0 {
  /** u32 */
  CurRwinRcvd: number;
  /** u32 */
  MaxRwinRcvd: number;
  /** u32 */
  MinRwinRcvd: number;
  /** u8 */
  WinScaleRcvd: number;
}

export const sizeofTCP_ESTATS_OBS_REC_ROD_v0 = 16;

export function allocTCP_ESTATS_OBS_REC_ROD_v0(data?: Partial<TCP_ESTATS_OBS_REC_ROD_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_OBS_REC_ROD_v0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CurRwinRcvd !== undefined) view.setUint32(0, Number(data.CurRwinRcvd), true);
  // 0x04: u32
  if (data?.MaxRwinRcvd !== undefined) view.setUint32(4, Number(data.MaxRwinRcvd), true);
  // 0x08: u32
  if (data?.MinRwinRcvd !== undefined) view.setUint32(8, Number(data.MinRwinRcvd), true);
  // 0x0c: u8
  if (data?.WinScaleRcvd !== undefined) view.setUint8(12, Number(data.WinScaleRcvd));
  // 0x0d: pad3
  return buf;
}

export class TCP_ESTATS_OBS_REC_ROD_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CurRwinRcvd(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxRwinRcvd(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MinRwinRcvd(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get WinScaleRcvd(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: pad3

  // 0x00: u32
  set CurRwinRcvd(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxRwinRcvd(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MinRwinRcvd(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set WinScaleRcvd(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: pad3
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_OBS_REC_RW_v0 (size: 8)
 */
export interface TCP_ESTATS_OBS_REC_RW_v0 {
  /** Windows.Win32.Foundation.BOOLEAN */
  EnableCollection: Uint8Array | Deno.PointerValue;
}

export const sizeofTCP_ESTATS_OBS_REC_RW_v0 = 8;

export function allocTCP_ESTATS_OBS_REC_RW_v0(data?: Partial<TCP_ESTATS_OBS_REC_RW_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_OBS_REC_RW_v0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EnableCollection !== undefined) view.setBigUint64(0, data.EnableCollection === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnableCollection))), true);
  return buf;
}

export class TCP_ESTATS_OBS_REC_RW_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EnableCollection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EnableCollection(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_BANDWIDTH_RW_v0 (size: 8)
 */
export interface TCP_ESTATS_BANDWIDTH_RW_v0 {
  /** Windows.Win32.NetworkManagement.IpHelper.TCP_BOOLEAN_OPTIONAL */
  EnableCollectionOutbound: TCP_BOOLEAN_OPTIONAL;
  /** Windows.Win32.NetworkManagement.IpHelper.TCP_BOOLEAN_OPTIONAL */
  EnableCollectionInbound: TCP_BOOLEAN_OPTIONAL;
}

export const sizeofTCP_ESTATS_BANDWIDTH_RW_v0 = 8;

export function allocTCP_ESTATS_BANDWIDTH_RW_v0(data?: Partial<TCP_ESTATS_BANDWIDTH_RW_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_BANDWIDTH_RW_v0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.EnableCollectionOutbound !== undefined) view.setInt32(0, Number(data.EnableCollectionOutbound), true);
  // 0x04: i32
  if (data?.EnableCollectionInbound !== undefined) view.setInt32(4, Number(data.EnableCollectionInbound), true);
  return buf;
}

export class TCP_ESTATS_BANDWIDTH_RW_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get EnableCollectionOutbound(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get EnableCollectionInbound(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set EnableCollectionOutbound(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set EnableCollectionInbound(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_BANDWIDTH_ROD_v0 (size: 48)
 */
export interface TCP_ESTATS_BANDWIDTH_ROD_v0 {
  /** u64 */
  OutboundBandwidth: Deno.PointerValue;
  /** u64 */
  InboundBandwidth: Deno.PointerValue;
  /** u64 */
  OutboundInstability: Deno.PointerValue;
  /** u64 */
  InboundInstability: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  OutboundBandwidthPeaked: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  InboundBandwidthPeaked: Uint8Array | Deno.PointerValue;
}

export const sizeofTCP_ESTATS_BANDWIDTH_ROD_v0 = 48;

export function allocTCP_ESTATS_BANDWIDTH_ROD_v0(data?: Partial<TCP_ESTATS_BANDWIDTH_ROD_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_BANDWIDTH_ROD_v0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.OutboundBandwidth !== undefined) view.setBigUint64(0, BigInt(data.OutboundBandwidth), true);
  // 0x08: u64
  if (data?.InboundBandwidth !== undefined) view.setBigUint64(8, BigInt(data.InboundBandwidth), true);
  // 0x10: u64
  if (data?.OutboundInstability !== undefined) view.setBigUint64(16, BigInt(data.OutboundInstability), true);
  // 0x18: u64
  if (data?.InboundInstability !== undefined) view.setBigUint64(24, BigInt(data.InboundInstability), true);
  // 0x20: pointer
  if (data?.OutboundBandwidthPeaked !== undefined) view.setBigUint64(32, data.OutboundBandwidthPeaked === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutboundBandwidthPeaked))), true);
  // 0x28: pointer
  if (data?.InboundBandwidthPeaked !== undefined) view.setBigUint64(40, data.InboundBandwidthPeaked === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InboundBandwidthPeaked))), true);
  return buf;
}

export class TCP_ESTATS_BANDWIDTH_ROD_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get OutboundBandwidth(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get InboundBandwidth(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get OutboundInstability(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get InboundInstability(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get OutboundBandwidthPeaked(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get InboundBandwidthPeaked(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set OutboundBandwidth(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set InboundBandwidth(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set OutboundInstability(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set InboundInstability(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set OutboundBandwidthPeaked(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set InboundBandwidthPeaked(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_FINE_RTT_RW_v0 (size: 8)
 */
export interface TCP_ESTATS_FINE_RTT_RW_v0 {
  /** Windows.Win32.Foundation.BOOLEAN */
  EnableCollection: Uint8Array | Deno.PointerValue;
}

export const sizeofTCP_ESTATS_FINE_RTT_RW_v0 = 8;

export function allocTCP_ESTATS_FINE_RTT_RW_v0(data?: Partial<TCP_ESTATS_FINE_RTT_RW_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_FINE_RTT_RW_v0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EnableCollection !== undefined) view.setBigUint64(0, data.EnableCollection === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnableCollection))), true);
  return buf;
}

export class TCP_ESTATS_FINE_RTT_RW_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EnableCollection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EnableCollection(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_FINE_RTT_ROD_v0 (size: 16)
 */
export interface TCP_ESTATS_FINE_RTT_ROD_v0 {
  /** u32 */
  RttVar: number;
  /** u32 */
  MaxRtt: number;
  /** u32 */
  MinRtt: number;
  /** u32 */
  SumRtt: number;
}

export const sizeofTCP_ESTATS_FINE_RTT_ROD_v0 = 16;

export function allocTCP_ESTATS_FINE_RTT_ROD_v0(data?: Partial<TCP_ESTATS_FINE_RTT_ROD_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ESTATS_FINE_RTT_ROD_v0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RttVar !== undefined) view.setUint32(0, Number(data.RttVar), true);
  // 0x04: u32
  if (data?.MaxRtt !== undefined) view.setUint32(4, Number(data.MaxRtt), true);
  // 0x08: u32
  if (data?.MinRtt !== undefined) view.setUint32(8, Number(data.MinRtt), true);
  // 0x0c: u32
  if (data?.SumRtt !== undefined) view.setUint32(12, Number(data.SumRtt), true);
  return buf;
}

export class TCP_ESTATS_FINE_RTT_ROD_v0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RttVar(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxRtt(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MinRtt(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SumRtt(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set RttVar(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxRtt(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MinRtt(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SumRtt(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES (size: 88)
 */
export interface INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES {
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv4EventMessageReceive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv4AllMessageReceive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv4EventMessageTransmit: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv4AllMessageTransmit: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv6EventMessageReceive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv6AllMessageReceive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv6EventMessageTransmit: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv6AllMessageTransmit: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  AllReceive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  AllTransmit: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  TaggedTransmit: Uint8Array | Deno.PointerValue;
}

export const sizeofINTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES = 88;

export function allocINTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES(data?: Partial<INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PtpV2OverUdpIPv4EventMessageReceive !== undefined) view.setBigUint64(0, data.PtpV2OverUdpIPv4EventMessageReceive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PtpV2OverUdpIPv4EventMessageReceive))), true);
  // 0x08: pointer
  if (data?.PtpV2OverUdpIPv4AllMessageReceive !== undefined) view.setBigUint64(8, data.PtpV2OverUdpIPv4AllMessageReceive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PtpV2OverUdpIPv4AllMessageReceive))), true);
  // 0x10: pointer
  if (data?.PtpV2OverUdpIPv4EventMessageTransmit !== undefined) view.setBigUint64(16, data.PtpV2OverUdpIPv4EventMessageTransmit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PtpV2OverUdpIPv4EventMessageTransmit))), true);
  // 0x18: pointer
  if (data?.PtpV2OverUdpIPv4AllMessageTransmit !== undefined) view.setBigUint64(24, data.PtpV2OverUdpIPv4AllMessageTransmit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PtpV2OverUdpIPv4AllMessageTransmit))), true);
  // 0x20: pointer
  if (data?.PtpV2OverUdpIPv6EventMessageReceive !== undefined) view.setBigUint64(32, data.PtpV2OverUdpIPv6EventMessageReceive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PtpV2OverUdpIPv6EventMessageReceive))), true);
  // 0x28: pointer
  if (data?.PtpV2OverUdpIPv6AllMessageReceive !== undefined) view.setBigUint64(40, data.PtpV2OverUdpIPv6AllMessageReceive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PtpV2OverUdpIPv6AllMessageReceive))), true);
  // 0x30: pointer
  if (data?.PtpV2OverUdpIPv6EventMessageTransmit !== undefined) view.setBigUint64(48, data.PtpV2OverUdpIPv6EventMessageTransmit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PtpV2OverUdpIPv6EventMessageTransmit))), true);
  // 0x38: pointer
  if (data?.PtpV2OverUdpIPv6AllMessageTransmit !== undefined) view.setBigUint64(56, data.PtpV2OverUdpIPv6AllMessageTransmit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PtpV2OverUdpIPv6AllMessageTransmit))), true);
  // 0x40: pointer
  if (data?.AllReceive !== undefined) view.setBigUint64(64, data.AllReceive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllReceive))), true);
  // 0x48: pointer
  if (data?.AllTransmit !== undefined) view.setBigUint64(72, data.AllTransmit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllTransmit))), true);
  // 0x50: pointer
  if (data?.TaggedTransmit !== undefined) view.setBigUint64(80, data.TaggedTransmit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TaggedTransmit))), true);
  return buf;
}

export class INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PtpV2OverUdpIPv4EventMessageReceive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PtpV2OverUdpIPv4AllMessageReceive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get PtpV2OverUdpIPv4EventMessageTransmit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PtpV2OverUdpIPv4AllMessageTransmit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get PtpV2OverUdpIPv6EventMessageReceive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get PtpV2OverUdpIPv6AllMessageReceive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get PtpV2OverUdpIPv6EventMessageTransmit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get PtpV2OverUdpIPv6AllMessageTransmit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get AllReceive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get AllTransmit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get TaggedTransmit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set PtpV2OverUdpIPv4EventMessageReceive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PtpV2OverUdpIPv4AllMessageReceive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set PtpV2OverUdpIPv4EventMessageTransmit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set PtpV2OverUdpIPv4AllMessageTransmit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set PtpV2OverUdpIPv6EventMessageReceive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set PtpV2OverUdpIPv6AllMessageReceive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set PtpV2OverUdpIPv6EventMessageTransmit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set PtpV2OverUdpIPv6AllMessageTransmit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set AllReceive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set AllTransmit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set TaggedTransmit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES (size: 24)
 */
export interface INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES {
  /** Windows.Win32.Foundation.BOOLEAN */
  AllReceive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  AllTransmit: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  TaggedTransmit: Uint8Array | Deno.PointerValue;
}

export const sizeofINTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES = 24;

export function allocINTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES(data?: Partial<INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllReceive !== undefined) view.setBigUint64(0, data.AllReceive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllReceive))), true);
  // 0x08: pointer
  if (data?.AllTransmit !== undefined) view.setBigUint64(8, data.AllTransmit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllTransmit))), true);
  // 0x10: pointer
  if (data?.TaggedTransmit !== undefined) view.setBigUint64(16, data.TaggedTransmit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TaggedTransmit))), true);
  return buf;
}

export class INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AllReceive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get AllTransmit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get TaggedTransmit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set AllReceive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set AllTransmit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set TaggedTransmit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.INTERFACE_TIMESTAMP_CAPABILITIES (size: 32)
 */
export interface INTERFACE_TIMESTAMP_CAPABILITIES {
  /** u64 */
  HardwareClockFrequencyHz: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  SupportsCrossTimestamp: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.IpHelper.INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES */
  HardwareCapabilities: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.IpHelper.INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES */
  SoftwareCapabilities: Uint8Array | Deno.PointerValue;
}

export const sizeofINTERFACE_TIMESTAMP_CAPABILITIES = 32;

export function allocINTERFACE_TIMESTAMP_CAPABILITIES(data?: Partial<INTERFACE_TIMESTAMP_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERFACE_TIMESTAMP_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.HardwareClockFrequencyHz !== undefined) view.setBigUint64(0, BigInt(data.HardwareClockFrequencyHz), true);
  // 0x08: pointer
  if (data?.SupportsCrossTimestamp !== undefined) view.setBigUint64(8, data.SupportsCrossTimestamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SupportsCrossTimestamp))), true);
  // 0x10: pointer
  if (data?.HardwareCapabilities !== undefined) view.setBigUint64(16, data.HardwareCapabilities === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HardwareCapabilities))), true);
  // 0x18: pointer
  if (data?.SoftwareCapabilities !== undefined) view.setBigUint64(24, data.SoftwareCapabilities === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SoftwareCapabilities))), true);
  return buf;
}

export class INTERFACE_TIMESTAMP_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get HardwareClockFrequencyHz(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get SupportsCrossTimestamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get HardwareCapabilities(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SoftwareCapabilities(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set HardwareClockFrequencyHz(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set SupportsCrossTimestamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set HardwareCapabilities(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SoftwareCapabilities(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.INTERFACE_HARDWARE_CROSSTIMESTAMP (size: 24)
 */
export interface INTERFACE_HARDWARE_CROSSTIMESTAMP {
  /** u64 */
  SystemTimestamp1: Deno.PointerValue;
  /** u64 */
  HardwareClockTimestamp: Deno.PointerValue;
  /** u64 */
  SystemTimestamp2: Deno.PointerValue;
}

export const sizeofINTERFACE_HARDWARE_CROSSTIMESTAMP = 24;

export function allocINTERFACE_HARDWARE_CROSSTIMESTAMP(data?: Partial<INTERFACE_HARDWARE_CROSSTIMESTAMP>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERFACE_HARDWARE_CROSSTIMESTAMP);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SystemTimestamp1 !== undefined) view.setBigUint64(0, BigInt(data.SystemTimestamp1), true);
  // 0x08: u64
  if (data?.HardwareClockTimestamp !== undefined) view.setBigUint64(8, BigInt(data.HardwareClockTimestamp), true);
  // 0x10: u64
  if (data?.SystemTimestamp2 !== undefined) view.setBigUint64(16, BigInt(data.SystemTimestamp2), true);
  return buf;
}

export class INTERFACE_HARDWARE_CROSSTIMESTAMPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get SystemTimestamp1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get HardwareClockTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get SystemTimestamp2(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: u64
  set SystemTimestamp1(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set HardwareClockTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set SystemTimestamp2(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.PF_FILTER_DESCRIPTOR (size: 64)
 */
export interface PF_FILTER_DESCRIPTOR {
  /** u32 */
  dwFilterFlags: number;
  /** u32 */
  dwRule: number;
  /** Windows.Win32.NetworkManagement.IpHelper.PFADDRESSTYPE */
  pfatType: PFADDRESSTYPE;
  /** ptr */
  SrcAddr: Deno.PointerValue | Uint8Array;
  /** ptr */
  SrcMask: Deno.PointerValue | Uint8Array;
  /** ptr */
  DstAddr: Deno.PointerValue | Uint8Array;
  /** ptr */
  DstMask: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwProtocol: number;
  /** u32 */
  fLateBound: number;
  /** u16 */
  wSrcPort: number;
  /** u16 */
  wDstPort: number;
  /** u16 */
  wSrcPortHighRange: number;
  /** u16 */
  wDstPortHighRange: number;
}

export const sizeofPF_FILTER_DESCRIPTOR = 64;

export function allocPF_FILTER_DESCRIPTOR(data?: Partial<PF_FILTER_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofPF_FILTER_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFilterFlags !== undefined) view.setUint32(0, Number(data.dwFilterFlags), true);
  // 0x04: u32
  if (data?.dwRule !== undefined) view.setUint32(4, Number(data.dwRule), true);
  // 0x08: i32
  if (data?.pfatType !== undefined) view.setInt32(8, Number(data.pfatType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SrcAddr !== undefined) view.setBigUint64(16, data.SrcAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SrcAddr))), true);
  // 0x18: pointer
  if (data?.SrcMask !== undefined) view.setBigUint64(24, data.SrcMask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SrcMask))), true);
  // 0x20: pointer
  if (data?.DstAddr !== undefined) view.setBigUint64(32, data.DstAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DstAddr))), true);
  // 0x28: pointer
  if (data?.DstMask !== undefined) view.setBigUint64(40, data.DstMask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DstMask))), true);
  // 0x30: u32
  if (data?.dwProtocol !== undefined) view.setUint32(48, Number(data.dwProtocol), true);
  // 0x34: u32
  if (data?.fLateBound !== undefined) view.setUint32(52, Number(data.fLateBound), true);
  // 0x38: u16
  if (data?.wSrcPort !== undefined) view.setUint16(56, Number(data.wSrcPort), true);
  // 0x3a: u16
  if (data?.wDstPort !== undefined) view.setUint16(58, Number(data.wDstPort), true);
  // 0x3c: u16
  if (data?.wSrcPortHighRange !== undefined) view.setUint16(60, Number(data.wSrcPortHighRange), true);
  // 0x3e: u16
  if (data?.wDstPortHighRange !== undefined) view.setUint16(62, Number(data.wDstPortHighRange), true);
  return buf;
}

export class PF_FILTER_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFilterFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRule(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get pfatType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get SrcAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SrcMask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DstAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DstMask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwProtocol(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get fLateBound(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u16
  get wSrcPort(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get wDstPort(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: u16
  get wSrcPortHighRange(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: u16
  get wDstPortHighRange(): number {
    return this.view.getUint16(62, true);
  }

  // 0x00: u32
  set dwFilterFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRule(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set pfatType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set SrcAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SrcMask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DstAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DstMask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwProtocol(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set fLateBound(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u16
  set wSrcPort(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set wDstPort(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: u16
  set wSrcPortHighRange(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: u16
  set wDstPortHighRange(value: number) {
    this.view.setUint16(62, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.PF_FILTER_STATS (size: 16)
 */
export interface PF_FILTER_STATS {
  /** u32 */
  dwNumPacketsFiltered: number;
  /** Windows.Win32.NetworkManagement.IpHelper.PF_FILTER_DESCRIPTOR */
  info: Uint8Array | Deno.PointerValue;
}

export const sizeofPF_FILTER_STATS = 16;

export function allocPF_FILTER_STATS(data?: Partial<PF_FILTER_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofPF_FILTER_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumPacketsFiltered !== undefined) view.setUint32(0, Number(data.dwNumPacketsFiltered), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.info !== undefined) view.setBigUint64(8, data.info === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.info))), true);
  return buf;
}

export class PF_FILTER_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumPacketsFiltered(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get info(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumPacketsFiltered(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set info(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.PF_INTERFACE_STATS (size: 88)
 */
export interface PF_INTERFACE_STATS {
  /** ptr */
  pvDriverContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwInDrops: number;
  /** u32 */
  dwOutDrops: number;
  /** Windows.Win32.NetworkManagement.IpHelper.PFFORWARD_ACTION */
  eaInAction: PFFORWARD_ACTION;
  /** Windows.Win32.NetworkManagement.IpHelper.PFFORWARD_ACTION */
  eaOutAction: PFFORWARD_ACTION;
  /** u32 */
  dwNumInFilters: number;
  /** u32 */
  dwNumOutFilters: number;
  /** u32 */
  dwFrag: number;
  /** u32 */
  dwSpoof: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liSYN: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liTotalLogged: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwLostLogEntries: number;
  /** array */
  FilterInfo: Deno.PointerValue;
}

export const sizeofPF_INTERFACE_STATS = 88;

export function allocPF_INTERFACE_STATS(data?: Partial<PF_INTERFACE_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofPF_INTERFACE_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pvDriverContext !== undefined) view.setBigUint64(0, data.pvDriverContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvDriverContext))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwInDrops !== undefined) view.setUint32(12, Number(data.dwInDrops), true);
  // 0x10: u32
  if (data?.dwOutDrops !== undefined) view.setUint32(16, Number(data.dwOutDrops), true);
  // 0x14: i32
  if (data?.eaInAction !== undefined) view.setInt32(20, Number(data.eaInAction), true);
  // 0x18: i32
  if (data?.eaOutAction !== undefined) view.setInt32(24, Number(data.eaOutAction), true);
  // 0x1c: u32
  if (data?.dwNumInFilters !== undefined) view.setUint32(28, Number(data.dwNumInFilters), true);
  // 0x20: u32
  if (data?.dwNumOutFilters !== undefined) view.setUint32(32, Number(data.dwNumOutFilters), true);
  // 0x24: u32
  if (data?.dwFrag !== undefined) view.setUint32(36, Number(data.dwFrag), true);
  // 0x28: u32
  if (data?.dwSpoof !== undefined) view.setUint32(40, Number(data.dwSpoof), true);
  // 0x2c: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(44, Number(data.dwReserved1), true);
  // 0x30: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(48, Number(data.dwReserved2), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.liSYN !== undefined) view.setBigUint64(56, data.liSYN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liSYN))), true);
  // 0x40: pointer
  if (data?.liTotalLogged !== undefined) view.setBigUint64(64, data.liTotalLogged === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liTotalLogged))), true);
  // 0x48: u32
  if (data?.dwLostLogEntries !== undefined) view.setUint32(72, Number(data.dwLostLogEntries), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.FilterInfo !== undefined) view.setBigUint64(80, data.FilterInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FilterInfo))), true);
  return buf;
}

export class PF_INTERFACE_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pvDriverContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwInDrops(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwOutDrops(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get eaInAction(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get eaOutAction(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get dwNumInFilters(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwNumOutFilters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwFrag(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwSpoof(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwReserved1(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwReserved2(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get liSYN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get liTotalLogged(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get dwLostLogEntries(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get FilterInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pvDriverContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwInDrops(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwOutDrops(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set eaInAction(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set eaOutAction(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set dwNumInFilters(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwNumOutFilters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwFrag(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwSpoof(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwReserved1(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwReserved2(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set liSYN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set liTotalLogged(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set dwLostLogEntries(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set FilterInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.PF_LATEBIND_INFO (size: 24)
 */
export interface PF_LATEBIND_INFO {
  /** ptr */
  SrcAddr: Deno.PointerValue | Uint8Array;
  /** ptr */
  DstAddr: Deno.PointerValue | Uint8Array;
  /** ptr */
  Mask: Deno.PointerValue | Uint8Array;
}

export const sizeofPF_LATEBIND_INFO = 24;

export function allocPF_LATEBIND_INFO(data?: Partial<PF_LATEBIND_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPF_LATEBIND_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SrcAddr !== undefined) view.setBigUint64(0, data.SrcAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SrcAddr))), true);
  // 0x08: pointer
  if (data?.DstAddr !== undefined) view.setBigUint64(8, data.DstAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DstAddr))), true);
  // 0x10: pointer
  if (data?.Mask !== undefined) view.setBigUint64(16, data.Mask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Mask))), true);
  return buf;
}

export class PF_LATEBIND_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SrcAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DstAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Mask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SrcAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DstAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Mask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.IpHelper.PFLOGFRAME (size: 40)
 */
export interface PFLOGFRAME {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Timestamp: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.IpHelper.PFFRAMETYPE */
  pfeTypeOfFrame: PFFRAMETYPE;
  /** u32 */
  dwTotalSizeUsed: number;
  /** u32 */
  dwFilterRule: number;
  /** u16 */
  wSizeOfAdditionalData: number;
  /** u16 */
  wSizeOfIpHeader: number;
  /** u32 */
  dwInterfaceName: number;
  /** u32 */
  dwIPIndex: number;
  /** array */
  bPacketData: Deno.PointerValue;
}

export const sizeofPFLOGFRAME = 40;

export function allocPFLOGFRAME(data?: Partial<PFLOGFRAME>): Uint8Array {
  const buf = new Uint8Array(sizeofPFLOGFRAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Timestamp !== undefined) view.setBigUint64(0, data.Timestamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Timestamp))), true);
  // 0x08: i32
  if (data?.pfeTypeOfFrame !== undefined) view.setInt32(8, Number(data.pfeTypeOfFrame), true);
  // 0x0c: u32
  if (data?.dwTotalSizeUsed !== undefined) view.setUint32(12, Number(data.dwTotalSizeUsed), true);
  // 0x10: u32
  if (data?.dwFilterRule !== undefined) view.setUint32(16, Number(data.dwFilterRule), true);
  // 0x14: u16
  if (data?.wSizeOfAdditionalData !== undefined) view.setUint16(20, Number(data.wSizeOfAdditionalData), true);
  // 0x16: u16
  if (data?.wSizeOfIpHeader !== undefined) view.setUint16(22, Number(data.wSizeOfIpHeader), true);
  // 0x18: u32
  if (data?.dwInterfaceName !== undefined) view.setUint32(24, Number(data.dwInterfaceName), true);
  // 0x1c: u32
  if (data?.dwIPIndex !== undefined) view.setUint32(28, Number(data.dwIPIndex), true);
  // 0x20: pointer
  if (data?.bPacketData !== undefined) view.setBigUint64(32, data.bPacketData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bPacketData))), true);
  return buf;
}

export class PFLOGFRAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Timestamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get pfeTypeOfFrame(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwTotalSizeUsed(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFilterRule(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get wSizeOfAdditionalData(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get wSizeOfIpHeader(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: u32
  get dwInterfaceName(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwIPIndex(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get bPacketData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Timestamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set pfeTypeOfFrame(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwTotalSizeUsed(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFilterRule(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set wSizeOfAdditionalData(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set wSizeOfIpHeader(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: u32
  set dwInterfaceName(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwIPIndex(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set bPacketData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

// Native Libraries

try {
  var libIPHLPAPI_dll = Deno.dlopen("IPHLPAPI.dll", {
    GetIfEntry2: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetIfEntry2Ex: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    GetIfTable2: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetIfTable2Ex: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    GetIfStackTable: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetInvertedIfStackTable: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetIpInterfaceEntry: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetIpInterfaceTable: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    InitializeIpInterfaceEntry: {
      parameters: ["pointer"],
      result: "void",
    },
    NotifyIpInterfaceChange: {
      parameters: ["u16", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SetIpInterfaceEntry: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetIpNetworkConnectionBandwidthEstimates: {
      parameters: ["u32", "u16", "pointer"],
      result: "pointer",
    },
    CreateUnicastIpAddressEntry: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DeleteUnicastIpAddressEntry: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetUnicastIpAddressEntry: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetUnicastIpAddressTable: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    InitializeUnicastIpAddressEntry: {
      parameters: ["pointer"],
      result: "void",
    },
    NotifyUnicastIpAddressChange: {
      parameters: ["u16", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    NotifyStableUnicastIpAddressTable: {
      parameters: ["u16", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SetUnicastIpAddressEntry: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateAnycastIpAddressEntry: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DeleteAnycastIpAddressEntry: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetAnycastIpAddressEntry: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetAnycastIpAddressTable: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    GetMulticastIpAddressEntry: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetMulticastIpAddressTable: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    CreateIpForwardEntry2: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DeleteIpForwardEntry2: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetBestRoute2: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    GetIpForwardEntry2: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetIpForwardTable2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    InitializeIpForwardEntry: {
      parameters: ["pointer"],
      result: "void",
    },
    NotifyRouteChange2: {
      parameters: ["u16", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SetIpForwardEntry2: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FlushIpPathTable: {
      parameters: ["u16"],
      result: "pointer",
    },
    GetIpPathEntry: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetIpPathTable: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    CreateIpNetEntry2: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DeleteIpNetEntry2: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FlushIpNetTable2: {
      parameters: ["u16", "u32"],
      result: "pointer",
    },
    GetIpNetEntry2: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetIpNetTable2: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    ResolveIpNetEntry2: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SetIpNetEntry2: {
      parameters: ["pointer"],
      result: "pointer",
    },
    NotifyTeredoPortChange: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    GetTeredoPort: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CancelMibChangeNotify2: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FreeMibTable: {
      parameters: ["pointer"],
      result: "void",
    },
    CreateSortedAddressPairs: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    ConvertCompartmentGuidToId: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ConvertCompartmentIdToGuid: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    ConvertInterfaceNameToLuidA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ConvertInterfaceNameToLuidW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ConvertInterfaceLuidToNameA: {
      parameters: ["pointer", "buffer", "usize"],
      result: "pointer",
    },
    ConvertInterfaceLuidToNameW: {
      parameters: ["pointer", "buffer", "usize"],
      result: "pointer",
    },
    ConvertInterfaceLuidToIndex: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ConvertInterfaceIndexToLuid: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    ConvertInterfaceLuidToAlias: {
      parameters: ["pointer", "buffer", "usize"],
      result: "pointer",
    },
    ConvertInterfaceAliasToLuid: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ConvertInterfaceLuidToGuid: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ConvertInterfaceGuidToLuid: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    if_nametoindex: {
      parameters: ["buffer"],
      result: "u32",
    },
    if_indextoname: {
      parameters: ["u32", "buffer"],
      result: "buffer",
    },
    GetCurrentThreadCompartmentId: {
      parameters: [],
      result: "u32",
    },
    SetCurrentThreadCompartmentId: {
      parameters: ["u32"],
      result: "pointer",
    },
    GetCurrentThreadCompartmentScope: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    SetCurrentThreadCompartmentScope: {
      parameters: ["u32"],
      result: "pointer",
    },
    GetJobCompartmentId: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetJobCompartmentId: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    GetSessionCompartmentId: {
      parameters: ["u32"],
      result: "u32",
    },
    SetSessionCompartmentId: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    GetDefaultCompartmentId: {
      parameters: [],
      result: "u32",
    },
    GetNetworkInformation: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "u32"],
      result: "pointer",
    },
    SetNetworkInformation: {
      parameters: ["pointer", "u32", "buffer"],
      result: "pointer",
    },
    ConvertLengthToIpv4Mask: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    ConvertIpv4MaskToLength: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    GetDnsSettings: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FreeDnsSettings: {
      parameters: ["pointer"],
      result: "void",
    },
    SetDnsSettings: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetInterfaceDnsSettings: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    FreeInterfaceDnsSettings: {
      parameters: ["pointer"],
      result: "void",
    },
    SetInterfaceDnsSettings: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetNetworkConnectivityHint: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetNetworkConnectivityHintForInterface: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    NotifyNetworkConnectivityHintChange: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    IcmpCreateFile: {
      parameters: [],
      result: "pointer",
    },
    Icmp6CreateFile: {
      parameters: [],
      result: "pointer",
    },
    IcmpCloseHandle: {
      parameters: ["pointer"],
      result: "i32",
    },
    IcmpSendEcho: {
      parameters: ["pointer", "u32", "pointer", "u16", "pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    IcmpSendEcho2: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer", "u16", "pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    IcmpSendEcho2Ex: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "u32", "pointer", "u16", "pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    Icmp6SendEcho2: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u16", "pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    IcmpParseReplies: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    Icmp6ParseReplies: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    GetNumberOfInterfaces: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetIfEntry: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetIfTable: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    GetIpAddrTable: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    GetIpNetTable: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    GetIpForwardTable: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    GetTcpTable: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    GetExtendedTcpTable: {
      parameters: ["pointer", "pointer", "i32", "u32", "i32", "u32"],
      result: "u32",
    },
    GetOwnerModuleFromTcpEntry: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    GetUdpTable: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    GetExtendedUdpTable: {
      parameters: ["pointer", "pointer", "i32", "u32", "i32", "u32"],
      result: "u32",
    },
    GetOwnerModuleFromUdpEntry: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    GetTcpTable2: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    GetTcp6Table: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    GetTcp6Table2: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    GetPerTcpConnectionEStats: {
      parameters: ["pointer", "i32", "pointer", "u32", "u32", "pointer", "u32", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    SetPerTcpConnectionEStats: {
      parameters: ["pointer", "i32", "pointer", "u32", "u32", "u32"],
      result: "u32",
    },
    GetPerTcp6ConnectionEStats: {
      parameters: ["pointer", "i32", "pointer", "u32", "u32", "pointer", "u32", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    SetPerTcp6ConnectionEStats: {
      parameters: ["pointer", "i32", "pointer", "u32", "u32", "u32"],
      result: "u32",
    },
    GetOwnerModuleFromTcp6Entry: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    GetUdp6Table: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    GetOwnerModuleFromUdp6Entry: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    GetOwnerModuleFromPidAndInfo: {
      parameters: ["u32", "pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    GetIpStatistics: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetIcmpStatistics: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetTcpStatistics: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetUdpStatistics: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetIpStatisticsEx: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    GetIpStatisticsEx: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    GetIcmpStatisticsEx: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    GetTcpStatisticsEx: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    GetUdpStatisticsEx: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    GetTcpStatisticsEx2: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    GetUdpStatisticsEx2: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    SetIfEntry: {
      parameters: ["pointer"],
      result: "u32",
    },
    CreateIpForwardEntry: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetIpForwardEntry: {
      parameters: ["pointer"],
      result: "u32",
    },
    DeleteIpForwardEntry: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetIpStatistics: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetIpTTL: {
      parameters: ["u32"],
      result: "u32",
    },
    CreateIpNetEntry: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetIpNetEntry: {
      parameters: ["pointer"],
      result: "u32",
    },
    DeleteIpNetEntry: {
      parameters: ["pointer"],
      result: "u32",
    },
    FlushIpNetTable: {
      parameters: ["u32"],
      result: "u32",
    },
    CreateProxyArpEntry: {
      parameters: ["u32", "u32", "u32"],
      result: "u32",
    },
    DeleteProxyArpEntry: {
      parameters: ["u32", "u32", "u32"],
      result: "u32",
    },
    SetTcpEntry: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetInterfaceInfo: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetUniDirectionalAdapterInfo: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NhpAllocateAndGetInterfaceInfoFromStack: {
      parameters: ["pointer", "pointer", "i32", "pointer", "u32"],
      result: "u32",
    },
    GetBestInterface: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    GetBestInterfaceEx: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetBestRoute: {
      parameters: ["u32", "u32", "pointer"],
      result: "u32",
    },
    NotifyAddrChange: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NotifyRouteChange: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    CancelIPChangeNotify: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetAdapterIndex: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    AddIPAddress: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DeleteIPAddress: {
      parameters: ["u32"],
      result: "u32",
    },
    GetNetworkParams: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetAdaptersInfo: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetAdapterOrderMap: {
      parameters: [],
      result: "pointer",
    },
    GetAdaptersAddresses: {
      parameters: ["u32", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    GetPerAdapterInfo: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    GetInterfaceActiveTimestampCapabilities: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetInterfaceSupportedTimestampCapabilities: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    CaptureInterfaceHardwareCrossTimestamp: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RegisterInterfaceTimestampConfigChange: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    UnregisterInterfaceTimestampConfigChange: {
      parameters: ["pointer"],
      result: "void",
    },
    IpReleaseAddress: {
      parameters: ["pointer"],
      result: "u32",
    },
    IpRenewAddress: {
      parameters: ["pointer"],
      result: "u32",
    },
    SendARP: {
      parameters: ["u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    GetRTTAndHopCount: {
      parameters: ["u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetFriendlyIfIndex: {
      parameters: ["u32"],
      result: "u32",
    },
    EnableRouter: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    UnenableRouter: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    DisableMediaSense: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RestoreMediaSense: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetIpErrorString: {
      parameters: ["u32", "buffer", "pointer"],
      result: "u32",
    },
    ResolveNeighbor: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    CreatePersistentTcpPortReservation: {
      parameters: ["u16", "u16", "pointer"],
      result: "u32",
    },
    CreatePersistentUdpPortReservation: {
      parameters: ["u16", "u16", "pointer"],
      result: "u32",
    },
    DeletePersistentTcpPortReservation: {
      parameters: ["u16", "u16"],
      result: "u32",
    },
    DeletePersistentUdpPortReservation: {
      parameters: ["u16", "u16"],
      result: "u32",
    },
    LookupPersistentTcpPortReservation: {
      parameters: ["u16", "u16", "pointer"],
      result: "u32",
    },
    LookupPersistentUdpPortReservation: {
      parameters: ["u16", "u16", "pointer"],
      result: "u32",
    },
    PfCreateInterface: {
      parameters: ["u32", "i32", "i32", "i32", "i32", "pointer"],
      result: "u32",
    },
    PfDeleteInterface: {
      parameters: ["pointer"],
      result: "u32",
    },
    PfAddFiltersToInterface: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PfRemoveFiltersFromInterface: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    PfRemoveFilterHandles: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    PfUnBindInterface: {
      parameters: ["pointer"],
      result: "u32",
    },
    PfBindInterfaceToIndex: {
      parameters: ["pointer", "u32", "i32", "pointer"],
      result: "u32",
    },
    PfBindInterfaceToIPAddress: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    PfRebindFilters: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    PfAddGlobalFilterToInterface: {
      parameters: ["pointer", "i32"],
      result: "u32",
    },
    PfRemoveGlobalFilterFromInterface: {
      parameters: ["pointer", "i32"],
      result: "u32",
    },
    PfMakeLog: {
      parameters: ["pointer"],
      result: "u32",
    },
    PfSetLogBuffer: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PfDeleteLog: {
      parameters: [],
      result: "u32",
    },
    PfGetInterfaceStatistics: {
      parameters: ["pointer", "pointer", "pointer", "i32"],
      result: "u32",
    },
    PfTestPacket: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetIfEntry2(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIfEntry2(util.toPointer(Row));
}

export function GetIfEntry2Ex(
  Level: MIB_IF_ENTRY_LEVEL /* Windows.Win32.NetworkManagement.IpHelper.MIB_IF_ENTRY_LEVEL */,
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIfEntry2Ex(Level, util.toPointer(Row));
}

export function GetIfTable2(
  Table: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIfTable2(util.toPointer(Table));
}

export function GetIfTable2Ex(
  Level: MIB_IF_TABLE_LEVEL /* Windows.Win32.NetworkManagement.IpHelper.MIB_IF_TABLE_LEVEL */,
  Table: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIfTable2Ex(Level, util.toPointer(Table));
}

export function GetIfStackTable(
  Table: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIfStackTable(util.toPointer(Table));
}

export function GetInvertedIfStackTable(
  Table: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetInvertedIfStackTable(util.toPointer(Table));
}

export function GetIpInterfaceEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIpInterfaceEntry(util.toPointer(Row));
}

export function GetIpInterfaceTable(
  Family: number /* u16 */,
  Table: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIpInterfaceTable(Family, util.toPointer(Table));
}

export function InitializeIpInterfaceEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libIPHLPAPI_dll.InitializeIpInterfaceEntry(util.toPointer(Row));
}

export function NotifyIpInterfaceChange(
  Family: number /* u16 */,
  Callback: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.PIPINTERFACE_CHANGE_CALLBACK */,
  CallerContext: Deno.PointerValue | Uint8Array /* ptr */,
  InitialNotification: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  NotificationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.NotifyIpInterfaceChange(Family, util.toPointer(Callback), util.toPointer(CallerContext), util.toPointer(InitialNotification), util.toPointer(NotificationHandle));
}

export function SetIpInterfaceEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.SetIpInterfaceEntry(util.toPointer(Row));
}

export function GetIpNetworkConnectionBandwidthEstimates(
  InterfaceIndex: number /* u32 */,
  AddressFamily: number /* u16 */,
  BandwidthEstimates: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIpNetworkConnectionBandwidthEstimates(InterfaceIndex, AddressFamily, util.toPointer(BandwidthEstimates));
}

export function CreateUnicastIpAddressEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.CreateUnicastIpAddressEntry(util.toPointer(Row));
}

export function DeleteUnicastIpAddressEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.DeleteUnicastIpAddressEntry(util.toPointer(Row));
}

export function GetUnicastIpAddressEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetUnicastIpAddressEntry(util.toPointer(Row));
}

export function GetUnicastIpAddressTable(
  Family: number /* u16 */,
  Table: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetUnicastIpAddressTable(Family, util.toPointer(Table));
}

export function InitializeUnicastIpAddressEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libIPHLPAPI_dll.InitializeUnicastIpAddressEntry(util.toPointer(Row));
}

export function NotifyUnicastIpAddressChange(
  Family: number /* u16 */,
  Callback: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.PUNICAST_IPADDRESS_CHANGE_CALLBACK */,
  CallerContext: Deno.PointerValue | Uint8Array /* ptr */,
  InitialNotification: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  NotificationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.NotifyUnicastIpAddressChange(Family, util.toPointer(Callback), util.toPointer(CallerContext), util.toPointer(InitialNotification), util.toPointer(NotificationHandle));
}

export function NotifyStableUnicastIpAddressTable(
  Family: number /* u16 */,
  Table: Deno.PointerValue | Uint8Array /* ptr */,
  CallerCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK */,
  CallerContext: Deno.PointerValue | Uint8Array /* ptr */,
  NotificationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.NotifyStableUnicastIpAddressTable(Family, util.toPointer(Table), util.toPointer(CallerCallback), util.toPointer(CallerContext), util.toPointer(NotificationHandle));
}

export function SetUnicastIpAddressEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.SetUnicastIpAddressEntry(util.toPointer(Row));
}

export function CreateAnycastIpAddressEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.CreateAnycastIpAddressEntry(util.toPointer(Row));
}

export function DeleteAnycastIpAddressEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.DeleteAnycastIpAddressEntry(util.toPointer(Row));
}

export function GetAnycastIpAddressEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetAnycastIpAddressEntry(util.toPointer(Row));
}

export function GetAnycastIpAddressTable(
  Family: number /* u16 */,
  Table: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetAnycastIpAddressTable(Family, util.toPointer(Table));
}

export function GetMulticastIpAddressEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetMulticastIpAddressEntry(util.toPointer(Row));
}

export function GetMulticastIpAddressTable(
  Family: number /* u16 */,
  Table: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetMulticastIpAddressTable(Family, util.toPointer(Table));
}

export function CreateIpForwardEntry2(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.CreateIpForwardEntry2(util.toPointer(Row));
}

export function DeleteIpForwardEntry2(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.DeleteIpForwardEntry2(util.toPointer(Row));
}

export function GetBestRoute2(
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
  InterfaceIndex: number /* u32 */,
  SourceAddress: Deno.PointerValue | Uint8Array /* ptr */,
  DestinationAddress: Deno.PointerValue | Uint8Array /* ptr */,
  AddressSortOptions: number /* u32 */,
  BestRoute: Deno.PointerValue | Uint8Array /* ptr */,
  BestSourceAddress: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetBestRoute2(util.toPointer(InterfaceLuid), InterfaceIndex, util.toPointer(SourceAddress), util.toPointer(DestinationAddress), AddressSortOptions, util.toPointer(BestRoute), util.toPointer(BestSourceAddress));
}

export function GetIpForwardEntry2(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIpForwardEntry2(util.toPointer(Row));
}

export function GetIpForwardTable2(
  Family: number /* u16 */,
  Table: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIpForwardTable2(Family, util.toPointer(Table));
}

export function InitializeIpForwardEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libIPHLPAPI_dll.InitializeIpForwardEntry(util.toPointer(Row));
}

export function NotifyRouteChange2(
  AddressFamily: number /* u16 */,
  Callback: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.PIPFORWARD_CHANGE_CALLBACK */,
  CallerContext: Deno.PointerValue | Uint8Array /* ptr */,
  InitialNotification: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  NotificationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.NotifyRouteChange2(AddressFamily, util.toPointer(Callback), util.toPointer(CallerContext), util.toPointer(InitialNotification), util.toPointer(NotificationHandle));
}

export function SetIpForwardEntry2(
  Route: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.SetIpForwardEntry2(util.toPointer(Route));
}

export function FlushIpPathTable(
  Family: number /* u16 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.FlushIpPathTable(Family);
}

export function GetIpPathEntry(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIpPathEntry(util.toPointer(Row));
}

export function GetIpPathTable(
  Family: number /* u16 */,
  Table: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIpPathTable(Family, util.toPointer(Table));
}

export function CreateIpNetEntry2(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.CreateIpNetEntry2(util.toPointer(Row));
}

export function DeleteIpNetEntry2(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.DeleteIpNetEntry2(util.toPointer(Row));
}

export function FlushIpNetTable2(
  Family: number /* u16 */,
  InterfaceIndex: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.FlushIpNetTable2(Family, InterfaceIndex);
}

export function GetIpNetEntry2(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIpNetEntry2(util.toPointer(Row));
}

export function GetIpNetTable2(
  Family: number /* u16 */,
  Table: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetIpNetTable2(Family, util.toPointer(Table));
}

export function ResolveIpNetEntry2(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
  SourceAddress: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ResolveIpNetEntry2(util.toPointer(Row), util.toPointer(SourceAddress));
}

export function SetIpNetEntry2(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.SetIpNetEntry2(util.toPointer(Row));
}

export function NotifyTeredoPortChange(
  Callback: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.PTEREDO_PORT_CHANGE_CALLBACK */,
  CallerContext: Deno.PointerValue | Uint8Array /* ptr */,
  InitialNotification: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  NotificationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.NotifyTeredoPortChange(util.toPointer(Callback), util.toPointer(CallerContext), util.toPointer(InitialNotification), util.toPointer(NotificationHandle));
}

export function GetTeredoPort(
  Port: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetTeredoPort(util.toPointer(Port));
}

export function CancelMibChangeNotify2(
  NotificationHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.CancelMibChangeNotify2(util.toPointer(NotificationHandle));
}

export function FreeMibTable(
  Memory: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libIPHLPAPI_dll.FreeMibTable(util.toPointer(Memory));
}

export function CreateSortedAddressPairs(
  SourceAddressList: Deno.PointerValue | Uint8Array /* ptr */,
  SourceAddressCount: number /* u32 */,
  DestinationAddressList: Deno.PointerValue | Uint8Array /* ptr */,
  DestinationAddressCount: number /* u32 */,
  AddressSortOptions: number /* u32 */,
  SortedAddressPairList: Deno.PointerValue | Uint8Array /* ptr */,
  SortedAddressPairCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.CreateSortedAddressPairs(util.toPointer(SourceAddressList), SourceAddressCount, util.toPointer(DestinationAddressList), DestinationAddressCount, AddressSortOptions, util.toPointer(SortedAddressPairList), util.toPointer(SortedAddressPairCount));
}

export function ConvertCompartmentGuidToId(
  CompartmentGuid: Deno.PointerValue | Uint8Array /* ptr */,
  CompartmentId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertCompartmentGuidToId(util.toPointer(CompartmentGuid), util.toPointer(CompartmentId));
}

export function ConvertCompartmentIdToGuid(
  CompartmentId: number /* u32 */,
  CompartmentGuid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertCompartmentIdToGuid(CompartmentId, util.toPointer(CompartmentGuid));
}

export function ConvertInterfaceNameToLuidA(
  InterfaceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertInterfaceNameToLuidA(util.pstrToFfi(InterfaceName), util.toPointer(InterfaceLuid));
}

export function ConvertInterfaceNameToLuidW(
  InterfaceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertInterfaceNameToLuidW(util.pwstrToFfi(InterfaceName), util.toPointer(InterfaceLuid));
}

export function ConvertInterfaceLuidToNameA(
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
  InterfaceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Length: Deno.PointerValue /* usize */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertInterfaceLuidToNameA(util.toPointer(InterfaceLuid), util.pstrToFfi(InterfaceName), Length);
}

export function ConvertInterfaceLuidToNameW(
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
  InterfaceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Length: Deno.PointerValue /* usize */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertInterfaceLuidToNameW(util.toPointer(InterfaceLuid), util.pwstrToFfi(InterfaceName), Length);
}

export function ConvertInterfaceLuidToIndex(
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
  InterfaceIndex: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertInterfaceLuidToIndex(util.toPointer(InterfaceLuid), util.toPointer(InterfaceIndex));
}

export function ConvertInterfaceIndexToLuid(
  InterfaceIndex: number /* u32 */,
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertInterfaceIndexToLuid(InterfaceIndex, util.toPointer(InterfaceLuid));
}

export function ConvertInterfaceLuidToAlias(
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
  InterfaceAlias: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Length: Deno.PointerValue /* usize */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertInterfaceLuidToAlias(util.toPointer(InterfaceLuid), util.pwstrToFfi(InterfaceAlias), Length);
}

export function ConvertInterfaceAliasToLuid(
  InterfaceAlias: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertInterfaceAliasToLuid(util.pwstrToFfi(InterfaceAlias), util.toPointer(InterfaceLuid));
}

export function ConvertInterfaceLuidToGuid(
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
  InterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertInterfaceLuidToGuid(util.toPointer(InterfaceLuid), util.toPointer(InterfaceGuid));
}

export function ConvertInterfaceGuidToLuid(
  InterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertInterfaceGuidToLuid(util.toPointer(InterfaceGuid), util.toPointer(InterfaceLuid));
}

export function if_nametoindex(
  InterfaceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libIPHLPAPI_dll.if_nametoindex(util.pstrToFfi(InterfaceName));
}

export function if_indextoname(
  InterfaceIndex: number /* u32 */,
  InterfaceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libIPHLPAPI_dll.if_indextoname(InterfaceIndex, util.pstrToFfi(InterfaceName)));
}

export function GetCurrentThreadCompartmentId(): number /* u32 */ {
  return libIPHLPAPI_dll.GetCurrentThreadCompartmentId();
}

export function SetCurrentThreadCompartmentId(
  CompartmentId: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.SetCurrentThreadCompartmentId(CompartmentId);
}

export function GetCurrentThreadCompartmentScope(
  CompartmentScope: Deno.PointerValue | Uint8Array /* ptr */,
  CompartmentId: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libIPHLPAPI_dll.GetCurrentThreadCompartmentScope(util.toPointer(CompartmentScope), util.toPointer(CompartmentId));
}

export function SetCurrentThreadCompartmentScope(
  CompartmentScope: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.SetCurrentThreadCompartmentScope(CompartmentScope);
}

export function GetJobCompartmentId(
  JobHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetJobCompartmentId(util.toPointer(JobHandle));
}

export function SetJobCompartmentId(
  JobHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  CompartmentId: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.SetJobCompartmentId(util.toPointer(JobHandle), CompartmentId);
}

export function GetSessionCompartmentId(
  SessionId: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetSessionCompartmentId(SessionId);
}

export function SetSessionCompartmentId(
  SessionId: number /* u32 */,
  CompartmentId: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.SetSessionCompartmentId(SessionId, CompartmentId);
}

export function GetDefaultCompartmentId(): number /* u32 */ {
  return libIPHLPAPI_dll.GetDefaultCompartmentId();
}

export function GetNetworkInformation(
  NetworkGuid: Deno.PointerValue | Uint8Array /* ptr */,
  CompartmentId: Deno.PointerValue | Uint8Array /* ptr */,
  SiteId: Deno.PointerValue | Uint8Array /* ptr */,
  NetworkName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Length: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetNetworkInformation(util.toPointer(NetworkGuid), util.toPointer(CompartmentId), util.toPointer(SiteId), util.pwstrToFfi(NetworkName), Length);
}

export function SetNetworkInformation(
  NetworkGuid: Deno.PointerValue | Uint8Array /* ptr */,
  CompartmentId: number /* u32 */,
  NetworkName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.SetNetworkInformation(util.toPointer(NetworkGuid), CompartmentId, util.pwstrToFfi(NetworkName));
}

export function ConvertLengthToIpv4Mask(
  MaskLength: number /* u32 */,
  Mask: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertLengthToIpv4Mask(MaskLength, util.toPointer(Mask));
}

export function ConvertIpv4MaskToLength(
  Mask: number /* u32 */,
  MaskLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.ConvertIpv4MaskToLength(Mask, util.toPointer(MaskLength));
}

export function GetDnsSettings(
  Settings: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetDnsSettings(util.toPointer(Settings));
}

export function FreeDnsSettings(
  Settings: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libIPHLPAPI_dll.FreeDnsSettings(util.toPointer(Settings));
}

export function SetDnsSettings(
  Settings: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.SetDnsSettings(util.toPointer(Settings));
}

export function GetInterfaceDnsSettings(
  Interface: Uint8Array | Deno.PointerValue /* System.Guid */,
  Settings: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetInterfaceDnsSettings(util.toPointer(Interface), util.toPointer(Settings));
}

export function FreeInterfaceDnsSettings(
  Settings: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libIPHLPAPI_dll.FreeInterfaceDnsSettings(util.toPointer(Settings));
}

export function SetInterfaceDnsSettings(
  Interface: Uint8Array | Deno.PointerValue /* System.Guid */,
  Settings: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.SetInterfaceDnsSettings(util.toPointer(Interface), util.toPointer(Settings));
}

export function GetNetworkConnectivityHint(
  ConnectivityHint: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetNetworkConnectivityHint(util.toPointer(ConnectivityHint));
}

export function GetNetworkConnectivityHintForInterface(
  InterfaceIndex: number /* u32 */,
  ConnectivityHint: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.GetNetworkConnectivityHintForInterface(InterfaceIndex, util.toPointer(ConnectivityHint));
}

export function NotifyNetworkConnectivityHintChange(
  Callback: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK */,
  CallerContext: Deno.PointerValue | Uint8Array /* ptr */,
  InitialNotification: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  NotificationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libIPHLPAPI_dll.NotifyNetworkConnectivityHintChange(util.toPointer(Callback), util.toPointer(CallerContext), util.toPointer(InitialNotification), util.toPointer(NotificationHandle));
}

export function IcmpCreateFile(): Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.IcmpHandle */ {
  return libIPHLPAPI_dll.IcmpCreateFile();
}

export function Icmp6CreateFile(): Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.IcmpHandle */ {
  return libIPHLPAPI_dll.Icmp6CreateFile();
}

export function IcmpCloseHandle(
  IcmpHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.IcmpHandle */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIPHLPAPI_dll.IcmpCloseHandle(util.toPointer(IcmpHandle)));
}

export function IcmpSendEcho(
  IcmpHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.IcmpHandle */,
  DestinationAddress: number /* u32 */,
  RequestData: Deno.PointerValue | Uint8Array /* ptr */,
  RequestSize: number /* u16 */,
  RequestOptions: Deno.PointerValue | Uint8Array /* ptr */,
  ReplyBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ReplySize: number /* u32 */,
  Timeout: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.IcmpSendEcho(util.toPointer(IcmpHandle), DestinationAddress, util.toPointer(RequestData), RequestSize, util.toPointer(RequestOptions), util.toPointer(ReplyBuffer), ReplySize, Timeout);
}

export function IcmpSendEcho2(
  IcmpHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.IcmpHandle */,
  Event: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ApcRoutine: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.PIO_APC_ROUTINE */,
  ApcContext: Deno.PointerValue | Uint8Array /* ptr */,
  DestinationAddress: number /* u32 */,
  RequestData: Deno.PointerValue | Uint8Array /* ptr */,
  RequestSize: number /* u16 */,
  RequestOptions: Deno.PointerValue | Uint8Array /* ptr */,
  ReplyBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ReplySize: number /* u32 */,
  Timeout: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.IcmpSendEcho2(util.toPointer(IcmpHandle), util.toPointer(Event), util.toPointer(ApcRoutine), util.toPointer(ApcContext), DestinationAddress, util.toPointer(RequestData), RequestSize, util.toPointer(RequestOptions), util.toPointer(ReplyBuffer), ReplySize, Timeout);
}

export function IcmpSendEcho2Ex(
  IcmpHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.IcmpHandle */,
  Event: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ApcRoutine: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.PIO_APC_ROUTINE */,
  ApcContext: Deno.PointerValue | Uint8Array /* ptr */,
  SourceAddress: number /* u32 */,
  DestinationAddress: number /* u32 */,
  RequestData: Deno.PointerValue | Uint8Array /* ptr */,
  RequestSize: number /* u16 */,
  RequestOptions: Deno.PointerValue | Uint8Array /* ptr */,
  ReplyBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ReplySize: number /* u32 */,
  Timeout: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.IcmpSendEcho2Ex(util.toPointer(IcmpHandle), util.toPointer(Event), util.toPointer(ApcRoutine), util.toPointer(ApcContext), SourceAddress, DestinationAddress, util.toPointer(RequestData), RequestSize, util.toPointer(RequestOptions), util.toPointer(ReplyBuffer), ReplySize, Timeout);
}

export function Icmp6SendEcho2(
  IcmpHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.IcmpHandle */,
  Event: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ApcRoutine: Uint8Array | Deno.PointerValue /* Windows.Win32.System.WindowsProgramming.PIO_APC_ROUTINE */,
  ApcContext: Deno.PointerValue | Uint8Array /* ptr */,
  SourceAddress: Deno.PointerValue | Uint8Array /* ptr */,
  DestinationAddress: Deno.PointerValue | Uint8Array /* ptr */,
  RequestData: Deno.PointerValue | Uint8Array /* ptr */,
  RequestSize: number /* u16 */,
  RequestOptions: Deno.PointerValue | Uint8Array /* ptr */,
  ReplyBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ReplySize: number /* u32 */,
  Timeout: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.Icmp6SendEcho2(util.toPointer(IcmpHandle), util.toPointer(Event), util.toPointer(ApcRoutine), util.toPointer(ApcContext), util.toPointer(SourceAddress), util.toPointer(DestinationAddress), util.toPointer(RequestData), RequestSize, util.toPointer(RequestOptions), util.toPointer(ReplyBuffer), ReplySize, Timeout);
}

export function IcmpParseReplies(
  ReplyBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ReplySize: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.IcmpParseReplies(util.toPointer(ReplyBuffer), ReplySize);
}

export function Icmp6ParseReplies(
  ReplyBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ReplySize: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.Icmp6ParseReplies(util.toPointer(ReplyBuffer), ReplySize);
}

export function GetNumberOfInterfaces(
  pdwNumIf: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetNumberOfInterfaces(util.toPointer(pdwNumIf));
}

export function GetIfEntry(
  pIfRow: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetIfEntry(util.toPointer(pIfRow));
}

export function GetIfTable(
  pIfTable: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
  bOrder: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetIfTable(util.toPointer(pIfTable), util.toPointer(pdwSize), util.boolToFfi(bOrder));
}

export function GetIpAddrTable(
  pIpAddrTable: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
  bOrder: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetIpAddrTable(util.toPointer(pIpAddrTable), util.toPointer(pdwSize), util.boolToFfi(bOrder));
}

export function GetIpNetTable(
  IpNetTable: Deno.PointerValue | Uint8Array /* ptr */,
  SizePointer: Deno.PointerValue | Uint8Array /* ptr */,
  Order: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetIpNetTable(util.toPointer(IpNetTable), util.toPointer(SizePointer), util.boolToFfi(Order));
}

export function GetIpForwardTable(
  pIpForwardTable: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
  bOrder: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetIpForwardTable(util.toPointer(pIpForwardTable), util.toPointer(pdwSize), util.boolToFfi(bOrder));
}

export function GetTcpTable(
  TcpTable: Deno.PointerValue | Uint8Array /* ptr */,
  SizePointer: Deno.PointerValue | Uint8Array /* ptr */,
  Order: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetTcpTable(util.toPointer(TcpTable), util.toPointer(SizePointer), util.boolToFfi(Order));
}

export function GetExtendedTcpTable(
  pTcpTable: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
  bOrder: boolean /* Windows.Win32.Foundation.BOOL */,
  ulAf: number /* u32 */,
  TableClass: TCP_TABLE_CLASS /* Windows.Win32.NetworkManagement.IpHelper.TCP_TABLE_CLASS */,
  Reserved: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetExtendedTcpTable(util.toPointer(pTcpTable), util.toPointer(pdwSize), util.boolToFfi(bOrder), ulAf, TableClass, Reserved);
}

export function GetOwnerModuleFromTcpEntry(
  pTcpEntry: Deno.PointerValue | Uint8Array /* ptr */,
  Class: TCPIP_OWNER_MODULE_INFO_CLASS /* Windows.Win32.NetworkManagement.IpHelper.TCPIP_OWNER_MODULE_INFO_CLASS */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetOwnerModuleFromTcpEntry(util.toPointer(pTcpEntry), Class, util.toPointer(pBuffer), util.toPointer(pdwSize));
}

export function GetUdpTable(
  UdpTable: Deno.PointerValue | Uint8Array /* ptr */,
  SizePointer: Deno.PointerValue | Uint8Array /* ptr */,
  Order: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetUdpTable(util.toPointer(UdpTable), util.toPointer(SizePointer), util.boolToFfi(Order));
}

export function GetExtendedUdpTable(
  pUdpTable: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
  bOrder: boolean /* Windows.Win32.Foundation.BOOL */,
  ulAf: number /* u32 */,
  TableClass: UDP_TABLE_CLASS /* Windows.Win32.NetworkManagement.IpHelper.UDP_TABLE_CLASS */,
  Reserved: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetExtendedUdpTable(util.toPointer(pUdpTable), util.toPointer(pdwSize), util.boolToFfi(bOrder), ulAf, TableClass, Reserved);
}

export function GetOwnerModuleFromUdpEntry(
  pUdpEntry: Deno.PointerValue | Uint8Array /* ptr */,
  Class: TCPIP_OWNER_MODULE_INFO_CLASS /* Windows.Win32.NetworkManagement.IpHelper.TCPIP_OWNER_MODULE_INFO_CLASS */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetOwnerModuleFromUdpEntry(util.toPointer(pUdpEntry), Class, util.toPointer(pBuffer), util.toPointer(pdwSize));
}

export function GetTcpTable2(
  TcpTable: Deno.PointerValue | Uint8Array /* ptr */,
  SizePointer: Deno.PointerValue | Uint8Array /* ptr */,
  Order: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetTcpTable2(util.toPointer(TcpTable), util.toPointer(SizePointer), util.boolToFfi(Order));
}

export function GetTcp6Table(
  TcpTable: Deno.PointerValue | Uint8Array /* ptr */,
  SizePointer: Deno.PointerValue | Uint8Array /* ptr */,
  Order: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetTcp6Table(util.toPointer(TcpTable), util.toPointer(SizePointer), util.boolToFfi(Order));
}

export function GetTcp6Table2(
  TcpTable: Deno.PointerValue | Uint8Array /* ptr */,
  SizePointer: Deno.PointerValue | Uint8Array /* ptr */,
  Order: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetTcp6Table2(util.toPointer(TcpTable), util.toPointer(SizePointer), util.boolToFfi(Order));
}

export function GetPerTcpConnectionEStats(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
  EstatsType: TCP_ESTATS_TYPE /* Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_TYPE */,
  Rw: Deno.PointerValue | Uint8Array /* ptr */,
  RwVersion: number /* u32 */,
  RwSize: number /* u32 */,
  Ros: Deno.PointerValue | Uint8Array /* ptr */,
  RosVersion: number /* u32 */,
  RosSize: number /* u32 */,
  Rod: Deno.PointerValue | Uint8Array /* ptr */,
  RodVersion: number /* u32 */,
  RodSize: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetPerTcpConnectionEStats(util.toPointer(Row), EstatsType, util.toPointer(Rw), RwVersion, RwSize, util.toPointer(Ros), RosVersion, RosSize, util.toPointer(Rod), RodVersion, RodSize);
}

export function SetPerTcpConnectionEStats(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
  EstatsType: TCP_ESTATS_TYPE /* Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_TYPE */,
  Rw: Deno.PointerValue | Uint8Array /* ptr */,
  RwVersion: number /* u32 */,
  RwSize: number /* u32 */,
  Offset: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.SetPerTcpConnectionEStats(util.toPointer(Row), EstatsType, util.toPointer(Rw), RwVersion, RwSize, Offset);
}

export function GetPerTcp6ConnectionEStats(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
  EstatsType: TCP_ESTATS_TYPE /* Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_TYPE */,
  Rw: Deno.PointerValue | Uint8Array /* ptr */,
  RwVersion: number /* u32 */,
  RwSize: number /* u32 */,
  Ros: Deno.PointerValue | Uint8Array /* ptr */,
  RosVersion: number /* u32 */,
  RosSize: number /* u32 */,
  Rod: Deno.PointerValue | Uint8Array /* ptr */,
  RodVersion: number /* u32 */,
  RodSize: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetPerTcp6ConnectionEStats(util.toPointer(Row), EstatsType, util.toPointer(Rw), RwVersion, RwSize, util.toPointer(Ros), RosVersion, RosSize, util.toPointer(Rod), RodVersion, RodSize);
}

export function SetPerTcp6ConnectionEStats(
  Row: Deno.PointerValue | Uint8Array /* ptr */,
  EstatsType: TCP_ESTATS_TYPE /* Windows.Win32.NetworkManagement.IpHelper.TCP_ESTATS_TYPE */,
  Rw: Deno.PointerValue | Uint8Array /* ptr */,
  RwVersion: number /* u32 */,
  RwSize: number /* u32 */,
  Offset: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.SetPerTcp6ConnectionEStats(util.toPointer(Row), EstatsType, util.toPointer(Rw), RwVersion, RwSize, Offset);
}

export function GetOwnerModuleFromTcp6Entry(
  pTcpEntry: Deno.PointerValue | Uint8Array /* ptr */,
  Class: TCPIP_OWNER_MODULE_INFO_CLASS /* Windows.Win32.NetworkManagement.IpHelper.TCPIP_OWNER_MODULE_INFO_CLASS */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetOwnerModuleFromTcp6Entry(util.toPointer(pTcpEntry), Class, util.toPointer(pBuffer), util.toPointer(pdwSize));
}

export function GetUdp6Table(
  Udp6Table: Deno.PointerValue | Uint8Array /* ptr */,
  SizePointer: Deno.PointerValue | Uint8Array /* ptr */,
  Order: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetUdp6Table(util.toPointer(Udp6Table), util.toPointer(SizePointer), util.boolToFfi(Order));
}

export function GetOwnerModuleFromUdp6Entry(
  pUdpEntry: Deno.PointerValue | Uint8Array /* ptr */,
  Class: TCPIP_OWNER_MODULE_INFO_CLASS /* Windows.Win32.NetworkManagement.IpHelper.TCPIP_OWNER_MODULE_INFO_CLASS */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetOwnerModuleFromUdp6Entry(util.toPointer(pUdpEntry), Class, util.toPointer(pBuffer), util.toPointer(pdwSize));
}

export function GetOwnerModuleFromPidAndInfo(
  ulPid: number /* u32 */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Class: TCPIP_OWNER_MODULE_INFO_CLASS /* Windows.Win32.NetworkManagement.IpHelper.TCPIP_OWNER_MODULE_INFO_CLASS */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetOwnerModuleFromPidAndInfo(ulPid, util.toPointer(pInfo), Class, util.toPointer(pBuffer), util.toPointer(pdwSize));
}

export function GetIpStatistics(
  Statistics: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetIpStatistics(util.toPointer(Statistics));
}

export function GetIcmpStatistics(
  Statistics: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetIcmpStatistics(util.toPointer(Statistics));
}

export function GetTcpStatistics(
  Statistics: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetTcpStatistics(util.toPointer(Statistics));
}

export function GetUdpStatistics(
  Stats: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetUdpStatistics(util.toPointer(Stats));
}

export function SetIpStatisticsEx(
  Statistics: Deno.PointerValue | Uint8Array /* ptr */,
  Family: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.SetIpStatisticsEx(util.toPointer(Statistics), Family);
}

export function GetIpStatisticsEx(
  Statistics: Deno.PointerValue | Uint8Array /* ptr */,
  Family: ADDRESS_FAMILY /* Windows.Win32.Networking.WinSock.ADDRESS_FAMILY */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetIpStatisticsEx(util.toPointer(Statistics), Family);
}

export function GetIcmpStatisticsEx(
  Statistics: Deno.PointerValue | Uint8Array /* ptr */,
  Family: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetIcmpStatisticsEx(util.toPointer(Statistics), Family);
}

export function GetTcpStatisticsEx(
  Statistics: Deno.PointerValue | Uint8Array /* ptr */,
  Family: ADDRESS_FAMILY /* Windows.Win32.Networking.WinSock.ADDRESS_FAMILY */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetTcpStatisticsEx(util.toPointer(Statistics), Family);
}

export function GetUdpStatisticsEx(
  Statistics: Deno.PointerValue | Uint8Array /* ptr */,
  Family: ADDRESS_FAMILY /* Windows.Win32.Networking.WinSock.ADDRESS_FAMILY */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetUdpStatisticsEx(util.toPointer(Statistics), Family);
}

export function GetTcpStatisticsEx2(
  Statistics: Deno.PointerValue | Uint8Array /* ptr */,
  Family: ADDRESS_FAMILY /* Windows.Win32.Networking.WinSock.ADDRESS_FAMILY */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetTcpStatisticsEx2(util.toPointer(Statistics), Family);
}

export function GetUdpStatisticsEx2(
  Statistics: Deno.PointerValue | Uint8Array /* ptr */,
  Family: ADDRESS_FAMILY /* Windows.Win32.Networking.WinSock.ADDRESS_FAMILY */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetUdpStatisticsEx2(util.toPointer(Statistics), Family);
}

export function SetIfEntry(
  pIfRow: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.SetIfEntry(util.toPointer(pIfRow));
}

export function CreateIpForwardEntry(
  pRoute: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.CreateIpForwardEntry(util.toPointer(pRoute));
}

export function SetIpForwardEntry(
  pRoute: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.SetIpForwardEntry(util.toPointer(pRoute));
}

export function DeleteIpForwardEntry(
  pRoute: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.DeleteIpForwardEntry(util.toPointer(pRoute));
}

export function SetIpStatistics(
  pIpStats: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.SetIpStatistics(util.toPointer(pIpStats));
}

export function SetIpTTL(
  nTTL: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.SetIpTTL(nTTL);
}

export function CreateIpNetEntry(
  pArpEntry: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.CreateIpNetEntry(util.toPointer(pArpEntry));
}

export function SetIpNetEntry(
  pArpEntry: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.SetIpNetEntry(util.toPointer(pArpEntry));
}

export function DeleteIpNetEntry(
  pArpEntry: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.DeleteIpNetEntry(util.toPointer(pArpEntry));
}

export function FlushIpNetTable(
  dwIfIndex: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.FlushIpNetTable(dwIfIndex);
}

export function CreateProxyArpEntry(
  dwAddress: number /* u32 */,
  dwMask: number /* u32 */,
  dwIfIndex: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.CreateProxyArpEntry(dwAddress, dwMask, dwIfIndex);
}

export function DeleteProxyArpEntry(
  dwAddress: number /* u32 */,
  dwMask: number /* u32 */,
  dwIfIndex: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.DeleteProxyArpEntry(dwAddress, dwMask, dwIfIndex);
}

export function SetTcpEntry(
  pTcpRow: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.SetTcpEntry(util.toPointer(pTcpRow));
}

export function GetInterfaceInfo(
  pIfTable: Deno.PointerValue | Uint8Array /* ptr */,
  dwOutBufLen: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetInterfaceInfo(util.toPointer(pIfTable), util.toPointer(dwOutBufLen));
}

export function GetUniDirectionalAdapterInfo(
  pIPIfInfo: Deno.PointerValue | Uint8Array /* ptr */,
  dwOutBufLen: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetUniDirectionalAdapterInfo(util.toPointer(pIPIfInfo), util.toPointer(dwOutBufLen));
}

export function NhpAllocateAndGetInterfaceInfoFromStack(
  ppTable: Deno.PointerValue | Uint8Array /* ptr */,
  pdwCount: Deno.PointerValue | Uint8Array /* ptr */,
  bOrder: boolean /* Windows.Win32.Foundation.BOOL */,
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.NhpAllocateAndGetInterfaceInfoFromStack(util.toPointer(ppTable), util.toPointer(pdwCount), util.boolToFfi(bOrder), util.toPointer(hHeap), dwFlags);
}

export function GetBestInterface(
  dwDestAddr: number /* u32 */,
  pdwBestIfIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetBestInterface(dwDestAddr, util.toPointer(pdwBestIfIndex));
}

export function GetBestInterfaceEx(
  pDestAddr: Deno.PointerValue | Uint8Array /* ptr */,
  pdwBestIfIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetBestInterfaceEx(util.toPointer(pDestAddr), util.toPointer(pdwBestIfIndex));
}

export function GetBestRoute(
  dwDestAddr: number /* u32 */,
  dwSourceAddr: number /* u32 */,
  pBestRoute: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetBestRoute(dwDestAddr, dwSourceAddr, util.toPointer(pBestRoute));
}

export function NotifyAddrChange(
  Handle: Deno.PointerValue | Uint8Array /* ptr */,
  overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.NotifyAddrChange(util.toPointer(Handle), util.toPointer(overlapped));
}

export function NotifyRouteChange(
  Handle: Deno.PointerValue | Uint8Array /* ptr */,
  overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.NotifyRouteChange(util.toPointer(Handle), util.toPointer(overlapped));
}

export function CancelIPChangeNotify(
  notifyOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIPHLPAPI_dll.CancelIPChangeNotify(util.toPointer(notifyOverlapped)));
}

export function GetAdapterIndex(
  AdapterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  IfIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetAdapterIndex(util.pwstrToFfi(AdapterName), util.toPointer(IfIndex));
}

export function AddIPAddress(
  Address: number /* u32 */,
  IpMask: number /* u32 */,
  IfIndex: number /* u32 */,
  NTEContext: Deno.PointerValue | Uint8Array /* ptr */,
  NTEInstance: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.AddIPAddress(Address, IpMask, IfIndex, util.toPointer(NTEContext), util.toPointer(NTEInstance));
}

export function DeleteIPAddress(
  NTEContext: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.DeleteIPAddress(NTEContext);
}

export function GetNetworkParams(
  pFixedInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pOutBufLen: Deno.PointerValue | Uint8Array /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libIPHLPAPI_dll.GetNetworkParams(util.toPointer(pFixedInfo), util.toPointer(pOutBufLen));
}

export function GetAdaptersInfo(
  AdapterInfo: Deno.PointerValue | Uint8Array /* ptr */,
  SizePointer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetAdaptersInfo(util.toPointer(AdapterInfo), util.toPointer(SizePointer));
}

export function GetAdapterOrderMap(): Deno.PointerValue /* ptr */ {
  return libIPHLPAPI_dll.GetAdapterOrderMap();
}

export function GetAdaptersAddresses(
  Family: ADDRESS_FAMILY /* Windows.Win32.Networking.WinSock.ADDRESS_FAMILY */,
  Flags: GET_ADAPTERS_ADDRESSES_FLAGS /* Windows.Win32.NetworkManagement.IpHelper.GET_ADAPTERS_ADDRESSES_FLAGS */,
  Reserved: Deno.PointerValue | Uint8Array /* ptr */,
  AdapterAddresses: Deno.PointerValue | Uint8Array /* ptr */,
  SizePointer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetAdaptersAddresses(Family, Flags, util.toPointer(Reserved), util.toPointer(AdapterAddresses), util.toPointer(SizePointer));
}

export function GetPerAdapterInfo(
  IfIndex: number /* u32 */,
  pPerAdapterInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pOutBufLen: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetPerAdapterInfo(IfIndex, util.toPointer(pPerAdapterInfo), util.toPointer(pOutBufLen));
}

export function GetInterfaceActiveTimestampCapabilities(
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
  TimestampCapabilites: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetInterfaceActiveTimestampCapabilities(util.toPointer(InterfaceLuid), util.toPointer(TimestampCapabilites));
}

export function GetInterfaceSupportedTimestampCapabilities(
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
  TimestampCapabilites: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetInterfaceSupportedTimestampCapabilities(util.toPointer(InterfaceLuid), util.toPointer(TimestampCapabilites));
}

export function CaptureInterfaceHardwareCrossTimestamp(
  InterfaceLuid: Deno.PointerValue | Uint8Array /* ptr */,
  CrossTimestamp: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.CaptureInterfaceHardwareCrossTimestamp(util.toPointer(InterfaceLuid), util.toPointer(CrossTimestamp));
}

export function RegisterInterfaceTimestampConfigChange(
  Callback: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK */,
  CallerContext: Deno.PointerValue | Uint8Array /* ptr */,
  NotificationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.RegisterInterfaceTimestampConfigChange(util.toPointer(Callback), util.toPointer(CallerContext), util.toPointer(NotificationHandle));
}

export function UnregisterInterfaceTimestampConfigChange(
  NotificationHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.IpHelper.HIFTIMESTAMPCHANGE */,
): void /* void */ {
  return libIPHLPAPI_dll.UnregisterInterfaceTimestampConfigChange(util.toPointer(NotificationHandle));
}

export function IpReleaseAddress(
  AdapterInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.IpReleaseAddress(util.toPointer(AdapterInfo));
}

export function IpRenewAddress(
  AdapterInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.IpRenewAddress(util.toPointer(AdapterInfo));
}

export function SendARP(
  DestIP: number /* u32 */,
  SrcIP: number /* u32 */,
  pMacAddr: Deno.PointerValue | Uint8Array /* ptr */,
  PhyAddrLen: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.SendARP(DestIP, SrcIP, util.toPointer(pMacAddr), util.toPointer(PhyAddrLen));
}

export function GetRTTAndHopCount(
  DestIpAddress: number /* u32 */,
  HopCount: Deno.PointerValue | Uint8Array /* ptr */,
  MaxHops: number /* u32 */,
  RTT: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIPHLPAPI_dll.GetRTTAndHopCount(DestIpAddress, util.toPointer(HopCount), MaxHops, util.toPointer(RTT)));
}

export function GetFriendlyIfIndex(
  IfIndex: number /* u32 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetFriendlyIfIndex(IfIndex);
}

export function EnableRouter(
  pHandle: Deno.PointerValue | Uint8Array /* ptr */,
  pOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.EnableRouter(util.toPointer(pHandle), util.toPointer(pOverlapped));
}

export function UnenableRouter(
  pOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwEnableCount: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.UnenableRouter(util.toPointer(pOverlapped), util.toPointer(lpdwEnableCount));
}

export function DisableMediaSense(
  pHandle: Deno.PointerValue | Uint8Array /* ptr */,
  pOverLapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.DisableMediaSense(util.toPointer(pHandle), util.toPointer(pOverLapped));
}

export function RestoreMediaSense(
  pOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwEnableCount: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.RestoreMediaSense(util.toPointer(pOverlapped), util.toPointer(lpdwEnableCount));
}

export function GetIpErrorString(
  ErrorCode: number /* u32 */,
  Buffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Size: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.GetIpErrorString(ErrorCode, util.pwstrToFfi(Buffer), util.toPointer(Size));
}

export function ResolveNeighbor(
  NetworkAddress: Deno.PointerValue | Uint8Array /* ptr */,
  PhysicalAddress: Deno.PointerValue | Uint8Array /* ptr */,
  PhysicalAddressLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.ResolveNeighbor(util.toPointer(NetworkAddress), util.toPointer(PhysicalAddress), util.toPointer(PhysicalAddressLength));
}

export function CreatePersistentTcpPortReservation(
  StartPort: number /* u16 */,
  NumberOfPorts: number /* u16 */,
  Token: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.CreatePersistentTcpPortReservation(StartPort, NumberOfPorts, util.toPointer(Token));
}

export function CreatePersistentUdpPortReservation(
  StartPort: number /* u16 */,
  NumberOfPorts: number /* u16 */,
  Token: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.CreatePersistentUdpPortReservation(StartPort, NumberOfPorts, util.toPointer(Token));
}

export function DeletePersistentTcpPortReservation(
  StartPort: number /* u16 */,
  NumberOfPorts: number /* u16 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.DeletePersistentTcpPortReservation(StartPort, NumberOfPorts);
}

export function DeletePersistentUdpPortReservation(
  StartPort: number /* u16 */,
  NumberOfPorts: number /* u16 */,
): number /* u32 */ {
  return libIPHLPAPI_dll.DeletePersistentUdpPortReservation(StartPort, NumberOfPorts);
}

export function LookupPersistentTcpPortReservation(
  StartPort: number /* u16 */,
  NumberOfPorts: number /* u16 */,
  Token: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.LookupPersistentTcpPortReservation(StartPort, NumberOfPorts, util.toPointer(Token));
}

export function LookupPersistentUdpPortReservation(
  StartPort: number /* u16 */,
  NumberOfPorts: number /* u16 */,
  Token: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.LookupPersistentUdpPortReservation(StartPort, NumberOfPorts, util.toPointer(Token));
}

export function PfCreateInterface(
  dwName: number /* u32 */,
  inAction: PFFORWARD_ACTION /* Windows.Win32.NetworkManagement.IpHelper.PFFORWARD_ACTION */,
  outAction: PFFORWARD_ACTION /* Windows.Win32.NetworkManagement.IpHelper.PFFORWARD_ACTION */,
  bUseLog: boolean /* Windows.Win32.Foundation.BOOL */,
  bMustBeUnique: boolean /* Windows.Win32.Foundation.BOOL */,
  ppInterface: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfCreateInterface(dwName, inAction, outAction, util.boolToFfi(bUseLog), util.boolToFfi(bMustBeUnique), util.toPointer(ppInterface));
}

export function PfDeleteInterface(
  pInterface: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfDeleteInterface(util.toPointer(pInterface));
}

export function PfAddFiltersToInterface(
  ih: Deno.PointerValue | Uint8Array /* ptr */,
  cInFilters: number /* u32 */,
  pfiltIn: Deno.PointerValue | Uint8Array /* ptr */,
  cOutFilters: number /* u32 */,
  pfiltOut: Deno.PointerValue | Uint8Array /* ptr */,
  pfHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfAddFiltersToInterface(util.toPointer(ih), cInFilters, util.toPointer(pfiltIn), cOutFilters, util.toPointer(pfiltOut), util.toPointer(pfHandle));
}

export function PfRemoveFiltersFromInterface(
  ih: Deno.PointerValue | Uint8Array /* ptr */,
  cInFilters: number /* u32 */,
  pfiltIn: Deno.PointerValue | Uint8Array /* ptr */,
  cOutFilters: number /* u32 */,
  pfiltOut: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfRemoveFiltersFromInterface(util.toPointer(ih), cInFilters, util.toPointer(pfiltIn), cOutFilters, util.toPointer(pfiltOut));
}

export function PfRemoveFilterHandles(
  pInterface: Deno.PointerValue | Uint8Array /* ptr */,
  cFilters: number /* u32 */,
  pvHandles: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfRemoveFilterHandles(util.toPointer(pInterface), cFilters, util.toPointer(pvHandles));
}

export function PfUnBindInterface(
  pInterface: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfUnBindInterface(util.toPointer(pInterface));
}

export function PfBindInterfaceToIndex(
  pInterface: Deno.PointerValue | Uint8Array /* ptr */,
  dwIndex: number /* u32 */,
  pfatLinkType: PFADDRESSTYPE /* Windows.Win32.NetworkManagement.IpHelper.PFADDRESSTYPE */,
  LinkIPAddress: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfBindInterfaceToIndex(util.toPointer(pInterface), dwIndex, pfatLinkType, util.toPointer(LinkIPAddress));
}

export function PfBindInterfaceToIPAddress(
  pInterface: Deno.PointerValue | Uint8Array /* ptr */,
  pfatType: PFADDRESSTYPE /* Windows.Win32.NetworkManagement.IpHelper.PFADDRESSTYPE */,
  IPAddress: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfBindInterfaceToIPAddress(util.toPointer(pInterface), pfatType, util.toPointer(IPAddress));
}

export function PfRebindFilters(
  pInterface: Deno.PointerValue | Uint8Array /* ptr */,
  pLateBindInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfRebindFilters(util.toPointer(pInterface), util.toPointer(pLateBindInfo));
}

export function PfAddGlobalFilterToInterface(
  pInterface: Deno.PointerValue | Uint8Array /* ptr */,
  gfFilter: GLOBAL_FILTER /* Windows.Win32.NetworkManagement.IpHelper.GLOBAL_FILTER */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfAddGlobalFilterToInterface(util.toPointer(pInterface), gfFilter);
}

export function PfRemoveGlobalFilterFromInterface(
  pInterface: Deno.PointerValue | Uint8Array /* ptr */,
  gfFilter: GLOBAL_FILTER /* Windows.Win32.NetworkManagement.IpHelper.GLOBAL_FILTER */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfRemoveGlobalFilterFromInterface(util.toPointer(pInterface), gfFilter);
}

export function PfMakeLog(
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfMakeLog(util.toPointer(hEvent));
}

export function PfSetLogBuffer(
  pbBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwSize: number /* u32 */,
  dwThreshold: number /* u32 */,
  dwEntries: number /* u32 */,
  pdwLoggedEntries: Deno.PointerValue | Uint8Array /* ptr */,
  pdwLostEntries: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSizeUsed: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfSetLogBuffer(util.toPointer(pbBuffer), dwSize, dwThreshold, dwEntries, util.toPointer(pdwLoggedEntries), util.toPointer(pdwLostEntries), util.toPointer(pdwSizeUsed));
}

export function PfDeleteLog(): number /* u32 */ {
  return libIPHLPAPI_dll.PfDeleteLog();
}

export function PfGetInterfaceStatistics(
  pInterface: Deno.PointerValue | Uint8Array /* ptr */,
  ppfStats: Deno.PointerValue | Uint8Array /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  fResetCounters: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfGetInterfaceStatistics(util.toPointer(pInterface), util.toPointer(ppfStats), util.toPointer(pdwBufferSize), util.boolToFfi(fResetCounters));
}

export function PfTestPacket(
  pInInterface: Deno.PointerValue | Uint8Array /* ptr */,
  pOutInterface: Deno.PointerValue | Uint8Array /* ptr */,
  cBytes: number /* u32 */,
  pbPacket: Deno.PointerValue | Uint8Array /* ptr */,
  ppAction: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libIPHLPAPI_dll.PfTestPacket(util.toPointer(pInInterface), util.toPointer(pOutInterface), cBytes, util.toPointer(pbPacket), util.toPointer(ppAction));
}

