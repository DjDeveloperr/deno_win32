/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.NetShell.Apis

import * as util from "../../util.ts";

// Enums
export type NS_CMD_FLAGS = number;
export type NS_REQS = number;
export type NS_EVENTS = number;
export type NS_MODE_CHANGE = number;

// Constants
export const NETSH_ERROR_BASE = 15000;
export const ERROR_NO_ENTRIES = 15000;
export const ERROR_INVALID_SYNTAX = 15001;
export const ERROR_PROTOCOL_NOT_IN_TRANSPORT = 15002;
export const ERROR_NO_CHANGE = 15003;
export const ERROR_CMD_NOT_FOUND = 15004;
export const ERROR_ENTRY_PT_NOT_FOUND = 15005;
export const ERROR_DLL_LOAD_FAILED = 15006;
export const ERROR_INIT_DISPLAY = 15007;
export const ERROR_TAG_ALREADY_PRESENT = 15008;
export const ERROR_INVALID_OPTION_TAG = 15009;
export const ERROR_NO_TAG = 15010;
export const ERROR_MISSING_OPTION = 15011;
export const ERROR_TRANSPORT_NOT_PRESENT = 15012;
export const ERROR_SHOW_USAGE = 15013;
export const ERROR_INVALID_OPTION_VALUE = 15014;
export const ERROR_OKAY = 15015;
export const ERROR_CONTINUE_IN_PARENT_CONTEXT = 15016;
export const ERROR_SUPPRESS_OUTPUT = 15017;
export const ERROR_HELPER_ALREADY_REGISTERED = 15018;
export const ERROR_CONTEXT_ALREADY_REGISTERED = 15019;
export const ERROR_PARSING_FAILURE = 15020;
export const NETSH_ERROR_END = 15019;
export const MAX_NAME_LEN = 48;
export const NETSH_VERSION_50 = 20480;
export const NETSH_MAX_TOKEN_LENGTH = 64;
export const NETSH_MAX_CMD_TOKEN_LENGTH = 128;
export const DEFAULT_CONTEXT_PRIORITY = 100;
export const CMD_FLAG_PRIVATE = 1;
export const CMD_FLAG_INTERACTIVE = 2;
export const CMD_FLAG_LOCAL = 8;
export const CMD_FLAG_ONLINE = 16;
export const CMD_FLAG_HIDDEN = 32;
export const CMD_FLAG_LIMIT_MASK = 65535;
export const CMD_FLAG_PRIORITY = "-2147483648";
export const NS_REQ_ZERO = 0;
export const NS_REQ_PRESENT = 1;
export const NS_REQ_ALLOW_MULTIPLE = 2;
export const NS_REQ_ONE_OR_MORE = 3;
export const NS_EVENT_LOOP = 65536;
export const NS_EVENT_LAST_N = 1;
export const NS_EVENT_LAST_SECS = 2;
export const NS_EVENT_FROM_N = 4;
export const NS_EVENT_FROM_START = 8;
export const NETSH_COMMIT = 0;
export const NETSH_UNCOMMIT = 1;
export const NETSH_FLUSH = 2;
export const NETSH_COMMIT_STATE = 3;
export const NETSH_SAVE = 4;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.NetworkManagement.NetShell.TOKEN_VALUE (size: 16)
 */
export interface TOKEN_VALUE {
  /** Windows.Win32.Foundation.PWSTR */
  pwszToken: string | null;
  /** u32 */
  dwValue: number;
}

export const sizeofTOKEN_VALUE = 16;

export function allocTOKEN_VALUE(data?: Partial<TOKEN_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszToken !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszToken);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwValue !== undefined) view.setUint32(8, Number(data.dwValue), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetShell.NS_HELPER_ATTRIBUTES (size: 32)
 */
export interface NS_HELPER_ATTRIBUTES {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidHelper: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.NetShell.PNS_HELPER_START_FN */
  pfnStart: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.NetShell.PNS_HELPER_STOP_FN */
  pfnStop: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNS_HELPER_ATTRIBUTES = 32;

export function allocNS_HELPER_ATTRIBUTES(data?: Partial<NS_HELPER_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofNS_HELPER_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.guidHelper !== undefined) view.setBigUint64(8, data.guidHelper === null ? 0n : BigInt(util.toPointer(data.guidHelper)), true);
  // 0x10: pointer
  if (data?.pfnStart !== undefined) view.setBigUint64(16, data.pfnStart === null ? 0n : BigInt(util.toPointer(data.pfnStart)), true);
  // 0x18: pointer
  if (data?.pfnStop !== undefined) view.setBigUint64(24, data.pfnStop === null ? 0n : BigInt(util.toPointer(data.pfnStop)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetShell.CMD_ENTRY (size: 40)
 */
export interface CMD_ENTRY {
  /** Windows.Win32.Foundation.PWSTR */
  pwszCmdToken: string | null;
  /** Windows.Win32.NetworkManagement.NetShell.PFN_HANDLE_CMD */
  pfnCmdHandler: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwShortCmdHelpToken: number;
  /** u32 */
  dwCmdHlpToken: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.NetworkManagement.NetShell.PNS_OSVERSIONCHECK */
  pOsVersionCheck: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMD_ENTRY = 40;

export function allocCMD_ENTRY(data?: Partial<CMD_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCMD_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszCmdToken !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszCmdToken);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pfnCmdHandler !== undefined) view.setBigUint64(8, data.pfnCmdHandler === null ? 0n : BigInt(util.toPointer(data.pfnCmdHandler)), true);
  // 0x10: u32
  if (data?.dwShortCmdHelpToken !== undefined) view.setUint32(16, Number(data.dwShortCmdHelpToken), true);
  // 0x14: u32
  if (data?.dwCmdHlpToken !== undefined) view.setUint32(20, Number(data.dwCmdHlpToken), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pOsVersionCheck !== undefined) view.setBigUint64(32, data.pOsVersionCheck === null ? 0n : BigInt(util.toPointer(data.pOsVersionCheck)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetShell.CMD_GROUP_ENTRY (size: 40)
 */
export interface CMD_GROUP_ENTRY {
  /** Windows.Win32.Foundation.PWSTR */
  pwszCmdGroupToken: string | null;
  /** u32 */
  dwShortCmdHelpToken: number;
  /** u32 */
  ulCmdGroupSize: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pCmdGroup: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.NetShell.PNS_OSVERSIONCHECK */
  pOsVersionCheck: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMD_GROUP_ENTRY = 40;

export function allocCMD_GROUP_ENTRY(data?: Partial<CMD_GROUP_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCMD_GROUP_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszCmdGroupToken !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszCmdGroupToken);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwShortCmdHelpToken !== undefined) view.setUint32(8, Number(data.dwShortCmdHelpToken), true);
  // 0x0c: u32
  if (data?.ulCmdGroupSize !== undefined) view.setUint32(12, Number(data.ulCmdGroupSize), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pCmdGroup !== undefined) view.setBigUint64(24, data.pCmdGroup === null ? 0n : BigInt(util.toPointer(data.pCmdGroup)), true);
  // 0x20: pointer
  if (data?.pOsVersionCheck !== undefined) view.setBigUint64(32, data.pOsVersionCheck === null ? 0n : BigInt(util.toPointer(data.pOsVersionCheck)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetShell.NS_CONTEXT_ATTRIBUTES (size: 104)
 */
export interface NS_CONTEXT_ATTRIBUTES {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszContext: string | null;
  /** System.Guid */
  guidHelper: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  ulPriority: number;
  /** u32 */
  ulNumTopCmds: number;
  /** ptr */
  pTopCmds: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulNumGroups: number;
  /** ptr */
  pCmdGroups: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.NetShell.PNS_CONTEXT_COMMIT_FN */
  pfnCommitFn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.NetShell.PNS_CONTEXT_DUMP_FN */
  pfnDumpFn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.NetShell.PNS_CONTEXT_CONNECT_FN */
  pfnConnectFn: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.NetShell.PNS_OSVERSIONCHECK */
  pfnOsVersionCheck: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNS_CONTEXT_ATTRIBUTES = 104;

export function allocNS_CONTEXT_ATTRIBUTES(data?: Partial<NS_CONTEXT_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofNS_CONTEXT_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: buffer
  if (data?.pwszContext !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszContext);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.guidHelper !== undefined) view.setBigUint64(16, data.guidHelper === null ? 0n : BigInt(util.toPointer(data.guidHelper)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: u32
  if (data?.ulPriority !== undefined) view.setUint32(28, Number(data.ulPriority), true);
  // 0x20: u32
  if (data?.ulNumTopCmds !== undefined) view.setUint32(32, Number(data.ulNumTopCmds), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pTopCmds !== undefined) view.setBigUint64(40, data.pTopCmds === null ? 0n : BigInt(util.toPointer(data.pTopCmds)), true);
  // 0x30: u32
  if (data?.ulNumGroups !== undefined) view.setUint32(48, Number(data.ulNumGroups), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pCmdGroups !== undefined) view.setBigUint64(56, data.pCmdGroups === null ? 0n : BigInt(util.toPointer(data.pCmdGroups)), true);
  // 0x40: pointer
  if (data?.pfnCommitFn !== undefined) view.setBigUint64(64, data.pfnCommitFn === null ? 0n : BigInt(util.toPointer(data.pfnCommitFn)), true);
  // 0x48: pointer
  if (data?.pfnDumpFn !== undefined) view.setBigUint64(72, data.pfnDumpFn === null ? 0n : BigInt(util.toPointer(data.pfnDumpFn)), true);
  // 0x50: pointer
  if (data?.pfnConnectFn !== undefined) view.setBigUint64(80, data.pfnConnectFn === null ? 0n : BigInt(util.toPointer(data.pfnConnectFn)), true);
  // 0x58: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(88, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  // 0x60: pointer
  if (data?.pfnOsVersionCheck !== undefined) view.setBigUint64(96, data.pfnOsVersionCheck === null ? 0n : BigInt(util.toPointer(data.pfnOsVersionCheck)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.NetworkManagement.NetShell.TAG_TYPE (size: 16)
 */
export interface TAG_TYPE {
  /** Windows.Win32.Foundation.PWSTR */
  pwszTag: string | null;
  /** u32 */
  dwRequired: number;
  /** Windows.Win32.Foundation.BOOL */
  bPresent: boolean;
}

export const sizeofTAG_TYPE = 16;

export function allocTAG_TYPE(data?: Partial<TAG_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofTAG_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszTag !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszTag);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwRequired !== undefined) view.setUint32(8, Number(data.dwRequired), true);
  // 0x0c: i32
  if (data?.bPresent !== undefined) view.setInt32(12, Number(data.bPresent), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var libNETSH = Deno.dlopen("NETSH", {
    MatchEnumTag: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    MatchToken: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PreprocessCommand: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "u32", "u32", "u32", "pointer"],
      result: "u32",
    },
    PrintError: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    PrintMessageFromModule: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    PrintMessage: {
      parameters: ["buffer"],
      result: "u32",
    },
    RegisterContext: {
      parameters: ["pointer"],
      result: "u32",
    },
    RegisterHelper: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function MatchEnumTag(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pwcArg: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwNumArg: number /* u32 */,
  pEnumTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETSH.MatchEnumTag(util.toPointer(hModule), util.pwstrToFfi(pwcArg), dwNumArg, util.toPointer(pEnumTable), util.toPointer(pdwValue));
}

export function MatchToken(
  pwszUserToken: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwszCmdToken: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libNETSH.MatchToken(util.pwstrToFfi(pwszUserToken), util.pwstrToFfi(pwszCmdToken)));
}

export function PreprocessCommand(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppwcArguments: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCurrentIndex: number /* u32 */,
  dwArgCount: number /* u32 */,
  pttTags: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwTagCount: number /* u32 */,
  dwMinArgs: number /* u32 */,
  dwMaxArgs: number /* u32 */,
  pdwTagType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETSH.PreprocessCommand(util.toPointer(hModule), util.toPointer(ppwcArguments), dwCurrentIndex, dwArgCount, util.toPointer(pttTags), dwTagCount, dwMinArgs, dwMaxArgs, util.toPointer(pdwTagType));
}

export function PrintError(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwErrId: number /* u32 */,
): number /* u32 */ {
  return libNETSH.PrintError(util.toPointer(hModule), dwErrId);
}

export function PrintMessageFromModule(
  hModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwMsgId: number /* u32 */,
): number /* u32 */ {
  return libNETSH.PrintMessageFromModule(util.toPointer(hModule), dwMsgId);
}

export function PrintMessage(
  pwszFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETSH.PrintMessage(util.pwstrToFfi(pwszFormat));
}

export function RegisterContext(
  pChildContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETSH.RegisterContext(util.toPointer(pChildContext));
}

export function RegisterHelper(
  pguidParentContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnRegisterSubContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETSH.RegisterHelper(util.toPointer(pguidParentContext), util.toPointer(pfnRegisterSubContext));
}

