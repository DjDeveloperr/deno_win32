/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.NetManagement.Apis

import * as util from "../../util.ts";

// Enums
export type NET_REQUEST_PROVISION_OPTIONS = number;
export type NET_JOIN_DOMAIN_JOIN_OPTIONS = number;
export type NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS = number;
export type FORCE_LEVEL_FLAGS = number;
export type NET_SERVER_TYPE = number;
export type NET_USER_ENUM_FILTER_FLAGS = number;
export type NETSETUP_PROVISION = number;
export type USER_ACCOUNT_FLAGS = number;
export type AF_OP = number;
export type SERVER_INFO_SECURITY = number;
export type USER_PRIV = number;
export type USE_INFO_ASG_TYPE = number;
export type SERVER_INFO_HIDDEN = number;
export type USER_MODALS_ROLES = number;
export type SID_NAME_USE = number;
export type NET_VALIDATE_PASSWORD_TYPE = number;
export type MSA_INFO_LEVEL = number;
export type MSA_INFO_STATE = number;
export type TRANSPORT_TYPE = number;
export type NETSETUP_NAME_TYPE = number;
export type DSREG_JOIN_TYPE = number;
export type NET_COMPUTER_NAME_TYPE = number;
export type NETSETUP_JOIN_STATUS = number;
export type OBO_TOKEN_TYPE = number;
export type COMPONENT_CHARACTERISTICS = number;
export type NCRP_FLAGS = number;
export type SUPPORTS_BINDING_INTERFACE_FLAGS = number;
export type ENUM_BINDING_PATHS_FLAGS = number;
export type NCPNP_RECONFIG_LAYER = number;
export type NETWORK_INSTALL_TIME = number;
export type NETWORK_UPGRADE_TYPE = number;
export type DEFAULT_PAGES = number;
export type BIND_FLAGS1 = number;
export type RASCON_UIINFO_FLAGS = number;

// Constants
export const NETSETUP_PROVISION_ONLINE_CALLER = 1073741824;
export const NETSETUP_JOIN_DOMAIN = 1;
export const NETSETUP_ACCT_CREATE = 2;
export const NETSETUP_WIN9X_UPGRADE = 16;
export const NETSETUP_DOMAIN_JOIN_IF_JOINED = 32;
export const NETSETUP_JOIN_UNSECURE = 64;
export const NETSETUP_MACHINE_PWD_PASSED = 128;
export const NETSETUP_DEFER_SPN_SET = 256;
export const NETSETUP_JOIN_DC_ACCOUNT = 512;
export const NETSETUP_JOIN_WITH_NEW_NAME = 1024;
export const NETSETUP_JOIN_READONLY = 2048;
export const NETSETUP_AMBIGUOUS_DC = 4096;
export const NETSETUP_NO_NETLOGON_CACHE = 8192;
export const NETSETUP_DONT_CONTROL_SERVICES = 16384;
export const NETSETUP_SET_MACHINE_NAME = 32768;
export const NETSETUP_FORCE_SPN_SET = 65536;
export const NETSETUP_NO_ACCT_REUSE = 131072;
export const NETSETUP_IGNORE_UNSUPPORTED_FLAGS = 268435456;
export const SUPPORTS_REMOTE_ADMIN_PROTOCOL = 2;
export const SUPPORTS_RPC = 4;
export const SUPPORTS_SAM_PROTOCOL = 8;
export const SUPPORTS_UNICODE = 16;
export const SUPPORTS_LOCAL = 32;
export const USE_NOFORCE = 0;
export const USE_FORCE = 1;
export const USE_LOTS_OF_FORCE = 2;
export const SV_TYPE_WORKSTATION = 1;
export const SV_TYPE_SERVER = 2;
export const SV_TYPE_SQLSERVER = 4;
export const SV_TYPE_DOMAIN_CTRL = 8;
export const SV_TYPE_DOMAIN_BAKCTRL = 16;
export const SV_TYPE_TIME_SOURCE = 32;
export const SV_TYPE_AFP = 64;
export const SV_TYPE_NOVELL = 128;
export const SV_TYPE_DOMAIN_MEMBER = 256;
export const SV_TYPE_PRINTQ_SERVER = 512;
export const SV_TYPE_DIALIN_SERVER = 1024;
export const SV_TYPE_XENIX_SERVER = 2048;
export const SV_TYPE_SERVER_UNIX = 2048;
export const SV_TYPE_NT = 4096;
export const SV_TYPE_WFW = 8192;
export const SV_TYPE_SERVER_MFPN = 16384;
export const SV_TYPE_SERVER_NT = 32768;
export const SV_TYPE_POTENTIAL_BROWSER = 65536;
export const SV_TYPE_BACKUP_BROWSER = 131072;
export const SV_TYPE_MASTER_BROWSER = 262144;
export const SV_TYPE_DOMAIN_MASTER = 524288;
export const SV_TYPE_SERVER_OSF = 1048576;
export const SV_TYPE_SERVER_VMS = 2097152;
export const SV_TYPE_WINDOWS = 4194304;
export const SV_TYPE_DFS = 8388608;
export const SV_TYPE_CLUSTER_NT = 16777216;
export const SV_TYPE_TERMINALSERVER = 33554432;
export const SV_TYPE_CLUSTER_VS_NT = 67108864;
export const SV_TYPE_DCE = 268435456;
export const SV_TYPE_ALTERNATE_XPORT = 536870912;
export const SV_TYPE_LOCAL_LIST_ONLY = 1073741824;
export const SV_TYPE_DOMAIN_ENUM = 2147483648;
export const SV_TYPE_ALL = 4294967295;
export const FILTER_TEMP_DUPLICATE_ACCOUNT = 1;
export const FILTER_NORMAL_ACCOUNT = 2;
export const FILTER_INTERDOMAIN_TRUST_ACCOUNT = 8;
export const FILTER_WORKSTATION_TRUST_ACCOUNT = 16;
export const FILTER_SERVER_TRUST_ACCOUNT = 32;
export const NETSETUP_PROVISION_DOWNLEVEL_PRIV_SUPPORT = 1;
export const NETSETUP_PROVISION_REUSE_ACCOUNT = 2;
export const NETSETUP_PROVISION_USE_DEFAULT_PASSWORD = 4;
export const NETSETUP_PROVISION_SKIP_ACCOUNT_SEARCH = 8;
export const NETSETUP_PROVISION_ROOT_CA_CERTS = 16;
export const UF_SCRIPT = 1;
export const UF_ACCOUNTDISABLE = 2;
export const UF_HOMEDIR_REQUIRED = 8;
export const UF_PASSWD_NOTREQD = 32;
export const UF_PASSWD_CANT_CHANGE = 64;
export const UF_LOCKOUT = 16;
export const UF_DONT_EXPIRE_PASSWD = 65536;
export const UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128;
export const UF_NOT_DELEGATED = 1048576;
export const UF_SMARTCARD_REQUIRED = 262144;
export const UF_USE_DES_KEY_ONLY = 2097152;
export const UF_DONT_REQUIRE_PREAUTH = 4194304;
export const UF_TRUSTED_FOR_DELEGATION = 524288;
export const UF_PASSWORD_EXPIRED = 8388608;
export const UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216;
export const AF_OP_PRINT = 1;
export const AF_OP_COMM = 2;
export const AF_OP_SERVER = 4;
export const AF_OP_ACCOUNTS = 8;
export const SV_SHARESECURITY = 0;
export const SV_USERSECURITY = 1;
export const USER_PRIV_GUEST = 0;
export const USER_PRIV_USER = 1;
export const USER_PRIV_ADMIN = 2;
export const USE_WILDCARD = 4294967295;
export const USE_DISKDEV = 0;
export const USE_SPOOLDEV = 1;
export const USE_IPC = 3;
export const SV_VISIBLE = 0;
export const SV_HIDDEN = 1;
export const UAS_ROLE_STANDALONE = 0;
export const UAS_ROLE_MEMBER = 1;
export const UAS_ROLE_BACKUP = 2;
export const UAS_ROLE_PRIMARY = 3;
export const NERR_BASE = 2100;
export const NERR_PasswordExpired = 2242;
export const CNLEN = 15;
export const LM20_CNLEN = 15;
export const DNLEN = 15;
export const LM20_DNLEN = 15;
export const UNCLEN = 17;
export const LM20_UNCLEN = 17;
export const LM20_NNLEN = 12;
export const SNLEN = 80;
export const LM20_SNLEN = 15;
export const STXTLEN = 256;
export const LM20_STXTLEN = 63;
export const PATHLEN = 256;
export const LM20_PATHLEN = 256;
export const DEVLEN = 80;
export const LM20_DEVLEN = 8;
export const EVLEN = 16;
export const UNLEN = 256;
export const LM20_UNLEN = 20;
export const GNLEN = 256;
export const LM20_GNLEN = 20;
export const PWLEN = 256;
export const LM20_PWLEN = 14;
export const SHPWLEN = 8;
export const CLTYPE_LEN = 12;
export const MAXCOMMENTSZ = 256;
export const LM20_MAXCOMMENTSZ = 48;
export const QNLEN = 80;
export const LM20_QNLEN = 12;
export const ALERTSZ = 128;
export const NETBIOS_NAME_LEN = 16;
export const MAX_PREFERRED_LENGTH = 4294967295;
export const CRYPT_KEY_LEN = 7;
export const CRYPT_TXT_LEN = 8;
export const ENCRYPTED_PWLEN = 16;
export const SESSION_PWLEN = 24;
export const SESSION_CRYPT_KLEN = 21;
export const PARMNUM_ALL = 0;
export const PARM_ERROR_UNKNOWN = 4294967295;
export const PARM_ERROR_NONE = 0;
export const PARMNUM_BASE_INFOLEVEL = 1000;
export const MESSAGE_FILENAME = `NETMSG`;
export const OS2MSG_FILENAME = `BASE`;
export const HELP_MSG_FILENAME = `NETH`;
export const BACKUP_MSG_FILENAME = `BAK.MSG`;
export const PLATFORM_ID_DOS = 300;
export const PLATFORM_ID_OS2 = 400;
export const PLATFORM_ID_NT = 500;
export const PLATFORM_ID_OSF = 600;
export const PLATFORM_ID_VMS = 700;
export const MIN_LANMAN_MESSAGE_ID = 2100;
export const MAX_LANMAN_MESSAGE_ID = 5899;
export const NERR_Success = 0;
export const NERR_NetNotStarted = 2102;
export const NERR_UnknownServer = 2103;
export const NERR_ShareMem = 2104;
export const NERR_NoNetworkResource = 2105;
export const NERR_RemoteOnly = 2106;
export const NERR_DevNotRedirected = 2107;
export const NERR_ServerNotStarted = 2114;
export const NERR_ItemNotFound = 2115;
export const NERR_UnknownDevDir = 2116;
export const NERR_RedirectedPath = 2117;
export const NERR_DuplicateShare = 2118;
export const NERR_NoRoom = 2119;
export const NERR_TooManyItems = 2121;
export const NERR_InvalidMaxUsers = 2122;
export const NERR_BufTooSmall = 2123;
export const NERR_RemoteErr = 2127;
export const NERR_LanmanIniError = 2131;
export const NERR_NetworkError = 2136;
export const NERR_WkstaInconsistentState = 2137;
export const NERR_WkstaNotStarted = 2138;
export const NERR_BrowserNotStarted = 2139;
export const NERR_InternalError = 2140;
export const NERR_BadTransactConfig = 2141;
export const NERR_InvalidAPI = 2142;
export const NERR_BadEventName = 2143;
export const NERR_DupNameReboot = 2144;
export const NERR_CfgCompNotFound = 2146;
export const NERR_CfgParamNotFound = 2147;
export const NERR_LineTooLong = 2149;
export const NERR_QNotFound = 2150;
export const NERR_JobNotFound = 2151;
export const NERR_DestNotFound = 2152;
export const NERR_DestExists = 2153;
export const NERR_QExists = 2154;
export const NERR_QNoRoom = 2155;
export const NERR_JobNoRoom = 2156;
export const NERR_DestNoRoom = 2157;
export const NERR_DestIdle = 2158;
export const NERR_DestInvalidOp = 2159;
export const NERR_ProcNoRespond = 2160;
export const NERR_SpoolerNotLoaded = 2161;
export const NERR_DestInvalidState = 2162;
export const NERR_QInvalidState = 2163;
export const NERR_JobInvalidState = 2164;
export const NERR_SpoolNoMemory = 2165;
export const NERR_DriverNotFound = 2166;
export const NERR_DataTypeInvalid = 2167;
export const NERR_ProcNotFound = 2168;
export const NERR_ServiceTableLocked = 2180;
export const NERR_ServiceTableFull = 2181;
export const NERR_ServiceInstalled = 2182;
export const NERR_ServiceEntryLocked = 2183;
export const NERR_ServiceNotInstalled = 2184;
export const NERR_BadServiceName = 2185;
export const NERR_ServiceCtlTimeout = 2186;
export const NERR_ServiceCtlBusy = 2187;
export const NERR_BadServiceProgName = 2188;
export const NERR_ServiceNotCtrl = 2189;
export const NERR_ServiceKillProc = 2190;
export const NERR_ServiceCtlNotValid = 2191;
export const NERR_NotInDispatchTbl = 2192;
export const NERR_BadControlRecv = 2193;
export const NERR_ServiceNotStarting = 2194;
export const NERR_AlreadyLoggedOn = 2200;
export const NERR_NotLoggedOn = 2201;
export const NERR_BadUsername = 2202;
export const NERR_BadPassword = 2203;
export const NERR_UnableToAddName_W = 2204;
export const NERR_UnableToAddName_F = 2205;
export const NERR_UnableToDelName_W = 2206;
export const NERR_UnableToDelName_F = 2207;
export const NERR_LogonsPaused = 2209;
export const NERR_LogonServerConflict = 2210;
export const NERR_LogonNoUserPath = 2211;
export const NERR_LogonScriptError = 2212;
export const NERR_StandaloneLogon = 2214;
export const NERR_LogonServerNotFound = 2215;
export const NERR_LogonDomainExists = 2216;
export const NERR_NonValidatedLogon = 2217;
export const NERR_ACFNotFound = 2219;
export const NERR_GroupNotFound = 2220;
export const NERR_UserNotFound = 2221;
export const NERR_ResourceNotFound = 2222;
export const NERR_GroupExists = 2223;
export const NERR_UserExists = 2224;
export const NERR_ResourceExists = 2225;
export const NERR_NotPrimary = 2226;
export const NERR_ACFNotLoaded = 2227;
export const NERR_ACFNoRoom = 2228;
export const NERR_ACFFileIOFail = 2229;
export const NERR_ACFTooManyLists = 2230;
export const NERR_UserLogon = 2231;
export const NERR_ACFNoParent = 2232;
export const NERR_CanNotGrowSegment = 2233;
export const NERR_SpeGroupOp = 2234;
export const NERR_NotInCache = 2235;
export const NERR_UserInGroup = 2236;
export const NERR_UserNotInGroup = 2237;
export const NERR_AccountUndefined = 2238;
export const NERR_AccountExpired = 2239;
export const NERR_InvalidWorkstation = 2240;
export const NERR_InvalidLogonHours = 2241;
export const NERR_PasswordCantChange = 2243;
export const NERR_PasswordHistConflict = 2244;
export const NERR_PasswordTooShort = 2245;
export const NERR_PasswordTooRecent = 2246;
export const NERR_InvalidDatabase = 2247;
export const NERR_DatabaseUpToDate = 2248;
export const NERR_SyncRequired = 2249;
export const NERR_UseNotFound = 2250;
export const NERR_BadAsgType = 2251;
export const NERR_DeviceIsShared = 2252;
export const NERR_SameAsComputerName = 2253;
export const NERR_NoComputerName = 2270;
export const NERR_MsgAlreadyStarted = 2271;
export const NERR_MsgInitFailed = 2272;
export const NERR_NameNotFound = 2273;
export const NERR_AlreadyForwarded = 2274;
export const NERR_AddForwarded = 2275;
export const NERR_AlreadyExists = 2276;
export const NERR_TooManyNames = 2277;
export const NERR_DelComputerName = 2278;
export const NERR_LocalForward = 2279;
export const NERR_GrpMsgProcessor = 2280;
export const NERR_PausedRemote = 2281;
export const NERR_BadReceive = 2282;
export const NERR_NameInUse = 2283;
export const NERR_MsgNotStarted = 2284;
export const NERR_NotLocalName = 2285;
export const NERR_NoForwardName = 2286;
export const NERR_RemoteFull = 2287;
export const NERR_NameNotForwarded = 2288;
export const NERR_TruncatedBroadcast = 2289;
export const NERR_InvalidDevice = 2294;
export const NERR_WriteFault = 2295;
export const NERR_DuplicateName = 2297;
export const NERR_DeleteLater = 2298;
export const NERR_IncompleteDel = 2299;
export const NERR_MultipleNets = 2300;
export const NERR_NetNameNotFound = 2310;
export const NERR_DeviceNotShared = 2311;
export const NERR_ClientNameNotFound = 2312;
export const NERR_FileIdNotFound = 2314;
export const NERR_ExecFailure = 2315;
export const NERR_TmpFile = 2316;
export const NERR_TooMuchData = 2317;
export const NERR_DeviceShareConflict = 2318;
export const NERR_BrowserTableIncomplete = 2319;
export const NERR_NotLocalDomain = 2320;
export const NERR_IsDfsShare = 2321;
export const NERR_DevInvalidOpCode = 2331;
export const NERR_DevNotFound = 2332;
export const NERR_DevNotOpen = 2333;
export const NERR_BadQueueDevString = 2334;
export const NERR_BadQueuePriority = 2335;
export const NERR_NoCommDevs = 2337;
export const NERR_QueueNotFound = 2338;
export const NERR_BadDevString = 2340;
export const NERR_BadDev = 2341;
export const NERR_InUseBySpooler = 2342;
export const NERR_CommDevInUse = 2343;
export const NERR_InvalidComputer = 2351;
export const NERR_MaxLenExceeded = 2354;
export const NERR_BadComponent = 2356;
export const NERR_CantType = 2357;
export const NERR_TooManyEntries = 2362;
export const NERR_ProfileFileTooBig = 2370;
export const NERR_ProfileOffset = 2371;
export const NERR_ProfileCleanup = 2372;
export const NERR_ProfileUnknownCmd = 2373;
export const NERR_ProfileLoadErr = 2374;
export const NERR_ProfileSaveErr = 2375;
export const NERR_LogOverflow = 2377;
export const NERR_LogFileChanged = 2378;
export const NERR_LogFileCorrupt = 2379;
export const NERR_SourceIsDir = 2380;
export const NERR_BadSource = 2381;
export const NERR_BadDest = 2382;
export const NERR_DifferentServers = 2383;
export const NERR_RunSrvPaused = 2385;
export const NERR_ErrCommRunSrv = 2389;
export const NERR_ErrorExecingGhost = 2391;
export const NERR_ShareNotFound = 2392;
export const NERR_InvalidLana = 2400;
export const NERR_OpenFiles = 2401;
export const NERR_ActiveConns = 2402;
export const NERR_BadPasswordCore = 2403;
export const NERR_DevInUse = 2404;
export const NERR_LocalDrive = 2405;
export const NERR_AlertExists = 2430;
export const NERR_TooManyAlerts = 2431;
export const NERR_NoSuchAlert = 2432;
export const NERR_BadRecipient = 2433;
export const NERR_AcctLimitExceeded = 2434;
export const NERR_InvalidLogSeek = 2440;
export const NERR_BadUasConfig = 2450;
export const NERR_InvalidUASOp = 2451;
export const NERR_LastAdmin = 2452;
export const NERR_DCNotFound = 2453;
export const NERR_LogonTrackingError = 2454;
export const NERR_NetlogonNotStarted = 2455;
export const NERR_CanNotGrowUASFile = 2456;
export const NERR_TimeDiffAtDC = 2457;
export const NERR_PasswordMismatch = 2458;
export const NERR_NoSuchServer = 2460;
export const NERR_NoSuchSession = 2461;
export const NERR_NoSuchConnection = 2462;
export const NERR_TooManyServers = 2463;
export const NERR_TooManySessions = 2464;
export const NERR_TooManyConnections = 2465;
export const NERR_TooManyFiles = 2466;
export const NERR_NoAlternateServers = 2467;
export const NERR_TryDownLevel = 2470;
export const NERR_UPSDriverNotStarted = 2480;
export const NERR_UPSInvalidConfig = 2481;
export const NERR_UPSInvalidCommPort = 2482;
export const NERR_UPSSignalAsserted = 2483;
export const NERR_UPSShutdownFailed = 2484;
export const NERR_BadDosRetCode = 2500;
export const NERR_ProgNeedsExtraMem = 2501;
export const NERR_BadDosFunction = 2502;
export const NERR_RemoteBootFailed = 2503;
export const NERR_BadFileCheckSum = 2504;
export const NERR_NoRplBootSystem = 2505;
export const NERR_RplLoadrNetBiosErr = 2506;
export const NERR_RplLoadrDiskErr = 2507;
export const NERR_ImageParamErr = 2508;
export const NERR_TooManyImageParams = 2509;
export const NERR_NonDosFloppyUsed = 2510;
export const NERR_RplBootRestart = 2511;
export const NERR_RplSrvrCallFailed = 2512;
export const NERR_CantConnectRplSrvr = 2513;
export const NERR_CantOpenImageFile = 2514;
export const NERR_CallingRplSrvr = 2515;
export const NERR_StartingRplBoot = 2516;
export const NERR_RplBootServiceTerm = 2517;
export const NERR_RplBootStartFailed = 2518;
export const NERR_RPL_CONNECTED = 2519;
export const NERR_BrowserConfiguredToNotRun = 2550;
export const NERR_RplNoAdaptersStarted = 2610;
export const NERR_RplBadRegistry = 2611;
export const NERR_RplBadDatabase = 2612;
export const NERR_RplRplfilesShare = 2613;
export const NERR_RplNotRplServer = 2614;
export const NERR_RplCannotEnum = 2615;
export const NERR_RplWkstaInfoCorrupted = 2616;
export const NERR_RplWkstaNotFound = 2617;
export const NERR_RplWkstaNameUnavailable = 2618;
export const NERR_RplProfileInfoCorrupted = 2619;
export const NERR_RplProfileNotFound = 2620;
export const NERR_RplProfileNameUnavailable = 2621;
export const NERR_RplProfileNotEmpty = 2622;
export const NERR_RplConfigInfoCorrupted = 2623;
export const NERR_RplConfigNotFound = 2624;
export const NERR_RplAdapterInfoCorrupted = 2625;
export const NERR_RplInternal = 2626;
export const NERR_RplVendorInfoCorrupted = 2627;
export const NERR_RplBootInfoCorrupted = 2628;
export const NERR_RplWkstaNeedsUserAcct = 2629;
export const NERR_RplNeedsRPLUSERAcct = 2630;
export const NERR_RplBootNotFound = 2631;
export const NERR_RplIncompatibleProfile = 2632;
export const NERR_RplAdapterNameUnavailable = 2633;
export const NERR_RplConfigNotEmpty = 2634;
export const NERR_RplBootInUse = 2635;
export const NERR_RplBackupDatabase = 2636;
export const NERR_RplAdapterNotFound = 2637;
export const NERR_RplVendorNotFound = 2638;
export const NERR_RplVendorNameUnavailable = 2639;
export const NERR_RplBootNameUnavailable = 2640;
export const NERR_RplConfigNameUnavailable = 2641;
export const NERR_DfsInternalCorruption = 2660;
export const NERR_DfsVolumeDataCorrupt = 2661;
export const NERR_DfsNoSuchVolume = 2662;
export const NERR_DfsVolumeAlreadyExists = 2663;
export const NERR_DfsAlreadyShared = 2664;
export const NERR_DfsNoSuchShare = 2665;
export const NERR_DfsNotALeafVolume = 2666;
export const NERR_DfsLeafVolume = 2667;
export const NERR_DfsVolumeHasMultipleServers = 2668;
export const NERR_DfsCantCreateJunctionPoint = 2669;
export const NERR_DfsServerNotDfsAware = 2670;
export const NERR_DfsBadRenamePath = 2671;
export const NERR_DfsVolumeIsOffline = 2672;
export const NERR_DfsNoSuchServer = 2673;
export const NERR_DfsCyclicalName = 2674;
export const NERR_DfsNotSupportedInServerDfs = 2675;
export const NERR_DfsDuplicateService = 2676;
export const NERR_DfsCantRemoveLastServerShare = 2677;
export const NERR_DfsVolumeIsInterDfs = 2678;
export const NERR_DfsInconsistent = 2679;
export const NERR_DfsServerUpgraded = 2680;
export const NERR_DfsDataIsIdentical = 2681;
export const NERR_DfsCantRemoveDfsRoot = 2682;
export const NERR_DfsChildOrParentInDfs = 2683;
export const NERR_DfsInternalError = 2690;
export const NERR_SetupAlreadyJoined = 2691;
export const NERR_SetupNotJoined = 2692;
export const NERR_SetupDomainController = 2693;
export const NERR_DefaultJoinRequired = 2694;
export const NERR_InvalidWorkgroupName = 2695;
export const NERR_NameUsesIncompatibleCodePage = 2696;
export const NERR_ComputerAccountNotFound = 2697;
export const NERR_PersonalSku = 2698;
export const NERR_SetupCheckDNSConfig = 2699;
export const NERR_AlreadyCloudDomainJoined = 2700;
export const NERR_PasswordMustChange = 2701;
export const NERR_AccountLockedOut = 2702;
export const NERR_PasswordTooLong = 2703;
export const NERR_PasswordNotComplexEnough = 2704;
export const NERR_PasswordFilterError = 2705;
export const NERR_NoOfflineJoinInfo = 2709;
export const NERR_BadOfflineJoinInfo = 2710;
export const NERR_CantCreateJoinInfo = 2711;
export const NERR_BadDomainJoinInfo = 2712;
export const NERR_JoinPerformedMustRestart = 2713;
export const NERR_NoJoinPending = 2714;
export const NERR_ValuesNotSet = 2715;
export const NERR_CantVerifyHostname = 2716;
export const NERR_CantLoadOfflineHive = 2717;
export const NERR_ConnectionInsecure = 2718;
export const NERR_ProvisioningBlobUnsupported = 2719;
export const NERR_DS8DCRequired = 2720;
export const NERR_LDAPCapableDCRequired = 2721;
export const NERR_DS8DCNotFound = 2722;
export const NERR_TargetVersionUnsupported = 2723;
export const NERR_InvalidMachineNameForJoin = 2724;
export const NERR_DS9DCNotFound = 2725;
export const NERR_PlainTextSecretsRequired = 2726;
export const NERR_CannotUnjoinAadDomain = 2727;
export const MAX_NERR = 2999;
export const UF_TEMP_DUPLICATE_ACCOUNT = 256;
export const UF_NORMAL_ACCOUNT = 512;
export const UF_INTERDOMAIN_TRUST_ACCOUNT = 2048;
export const UF_WORKSTATION_TRUST_ACCOUNT = 4096;
export const UF_SERVER_TRUST_ACCOUNT = 8192;
export const UF_MNS_LOGON_ACCOUNT = 131072;
export const UF_NO_AUTH_DATA_REQUIRED = 33554432;
export const UF_PARTIAL_SECRETS_ACCOUNT = 67108864;
export const UF_USE_AES_KEYS = 134217728;
export const LG_INCLUDE_INDIRECT = 1;
export const USER_NAME_PARMNUM = 1;
export const USER_PASSWORD_PARMNUM = 3;
export const USER_PASSWORD_AGE_PARMNUM = 4;
export const USER_PRIV_PARMNUM = 5;
export const USER_HOME_DIR_PARMNUM = 6;
export const USER_COMMENT_PARMNUM = 7;
export const USER_FLAGS_PARMNUM = 8;
export const USER_SCRIPT_PATH_PARMNUM = 9;
export const USER_AUTH_FLAGS_PARMNUM = 10;
export const USER_FULL_NAME_PARMNUM = 11;
export const USER_USR_COMMENT_PARMNUM = 12;
export const USER_PARMS_PARMNUM = 13;
export const USER_WORKSTATIONS_PARMNUM = 14;
export const USER_LAST_LOGON_PARMNUM = 15;
export const USER_LAST_LOGOFF_PARMNUM = 16;
export const USER_ACCT_EXPIRES_PARMNUM = 17;
export const USER_MAX_STORAGE_PARMNUM = 18;
export const USER_UNITS_PER_WEEK_PARMNUM = 19;
export const USER_LOGON_HOURS_PARMNUM = 20;
export const USER_PAD_PW_COUNT_PARMNUM = 21;
export const USER_NUM_LOGONS_PARMNUM = 22;
export const USER_LOGON_SERVER_PARMNUM = 23;
export const USER_COUNTRY_CODE_PARMNUM = 24;
export const USER_CODE_PAGE_PARMNUM = 25;
export const USER_PRIMARY_GROUP_PARMNUM = 51;
export const USER_PROFILE = 52;
export const USER_PROFILE_PARMNUM = 52;
export const USER_HOME_DIR_DRIVE_PARMNUM = 53;
export const NULL_USERSETINFO_PASSWD = `              `;
export const UNITS_PER_DAY = 24;
export const USER_PRIV_MASK = 3;
export const MAX_PASSWD_LEN = 256;
export const DEF_MIN_PWLEN = 6;
export const DEF_PWUNIQUENESS = 5;
export const DEF_MAX_PWHIST = 8;
export const DEF_MAX_BADPW = 0;
export const VALIDATED_LOGON = 0;
export const PASSWORD_EXPIRED = 2;
export const NON_VALIDATED_LOGON = 3;
export const VALID_LOGOFF = 1;
export const MODALS_MIN_PASSWD_LEN_PARMNUM = 1;
export const MODALS_MAX_PASSWD_AGE_PARMNUM = 2;
export const MODALS_MIN_PASSWD_AGE_PARMNUM = 3;
export const MODALS_FORCE_LOGOFF_PARMNUM = 4;
export const MODALS_PASSWD_HIST_LEN_PARMNUM = 5;
export const MODALS_ROLE_PARMNUM = 6;
export const MODALS_PRIMARY_PARMNUM = 7;
export const MODALS_DOMAIN_NAME_PARMNUM = 8;
export const MODALS_DOMAIN_ID_PARMNUM = 9;
export const MODALS_LOCKOUT_DURATION_PARMNUM = 10;
export const MODALS_LOCKOUT_OBSERVATION_WINDOW_PARMNUM = 11;
export const MODALS_LOCKOUT_THRESHOLD_PARMNUM = 12;
export const GROUPIDMASK = 32768;
export const GROUP_SPECIALGRP_USERS = `USERS`;
export const GROUP_SPECIALGRP_ADMINS = `ADMINS`;
export const GROUP_SPECIALGRP_GUESTS = `GUESTS`;
export const GROUP_SPECIALGRP_LOCAL = `LOCAL`;
export const GROUP_ALL_PARMNUM = 0;
export const GROUP_NAME_PARMNUM = 1;
export const GROUP_COMMENT_PARMNUM = 2;
export const GROUP_ATTRIBUTES_PARMNUM = 3;
export const LOCALGROUP_NAME_PARMNUM = 1;
export const LOCALGROUP_COMMENT_PARMNUM = 2;
export const MAXPERMENTRIES = 64;
export const ACCESS_NONE = 0;
export const ACCESS_GROUP = 32768;
export const ACCESS_AUDIT = 1;
export const ACCESS_SUCCESS_OPEN = 16;
export const ACCESS_SUCCESS_WRITE = 32;
export const ACCESS_SUCCESS_DELETE = 64;
export const ACCESS_SUCCESS_ACL = 128;
export const ACCESS_SUCCESS_MASK = 240;
export const ACCESS_FAIL_OPEN = 256;
export const ACCESS_FAIL_WRITE = 512;
export const ACCESS_FAIL_DELETE = 1024;
export const ACCESS_FAIL_ACL = 2048;
export const ACCESS_FAIL_MASK = 3840;
export const ACCESS_FAIL_SHIFT = 4;
export const ACCESS_RESOURCE_NAME_PARMNUM = 1;
export const ACCESS_ATTR_PARMNUM = 2;
export const ACCESS_COUNT_PARMNUM = 3;
export const ACCESS_ACCESS_LIST_PARMNUM = 4;
export const ACCESS_LETTERS = `RWCXDAP         `;
export const NET_VALIDATE_PASSWORD_LAST_SET = 1;
export const NET_VALIDATE_BAD_PASSWORD_TIME = 2;
export const NET_VALIDATE_LOCKOUT_TIME = 4;
export const NET_VALIDATE_BAD_PASSWORD_COUNT = 8;
export const NET_VALIDATE_PASSWORD_HISTORY_LENGTH = 16;
export const NET_VALIDATE_PASSWORD_HISTORY = 32;
export const NETLOGON_CONTROL_QUERY = 1;
export const NETLOGON_CONTROL_REPLICATE = 2;
export const NETLOGON_CONTROL_SYNCHRONIZE = 3;
export const NETLOGON_CONTROL_PDC_REPLICATE = 4;
export const NETLOGON_CONTROL_REDISCOVER = 5;
export const NETLOGON_CONTROL_TC_QUERY = 6;
export const NETLOGON_CONTROL_TRANSPORT_NOTIFY = 7;
export const NETLOGON_CONTROL_FIND_USER = 8;
export const NETLOGON_CONTROL_CHANGE_PASSWORD = 9;
export const NETLOGON_CONTROL_TC_VERIFY = 10;
export const NETLOGON_CONTROL_FORCE_DNS_REG = 11;
export const NETLOGON_CONTROL_QUERY_DNS_REG = 12;
export const NETLOGON_CONTROL_QUERY_ENC_TYPES = 13;
export const NETLOGON_CONTROL_UNLOAD_NETLOGON_DLL = 65531;
export const NETLOGON_CONTROL_BACKUP_CHANGE_LOG = 65532;
export const NETLOGON_CONTROL_TRUNCATE_LOG = 65533;
export const NETLOGON_CONTROL_SET_DBFLAG = 65534;
export const NETLOGON_CONTROL_BREAKPOINT = 65535;
export const NETLOGON_REPLICATION_NEEDED = 1;
export const NETLOGON_REPLICATION_IN_PROGRESS = 2;
export const NETLOGON_FULL_SYNC_REPLICATION = 4;
export const NETLOGON_REDO_NEEDED = 8;
export const NETLOGON_HAS_IP = 16;
export const NETLOGON_HAS_TIMESERV = 32;
export const NETLOGON_DNS_UPDATE_FAILURE = 64;
export const NETLOGON_VERIFY_STATUS_RETURNED = 128;
export const SERVICE_ACCOUNT_PASSWORD = `_SA_{262E99C9-6160-4871-ACEC-4E61736B6F21}`;
export const SERVICE_ACCOUNT_SECRET_PREFIX = `_SC_{262E99C9-6160-4871-ACEC-4E61736B6F21}_`;
export const SERVICE_ACCOUNT_FLAG_LINK_TO_HOST_ONLY = 1;
export const SERVICE_ACCOUNT_FLAG_ADD_AGAINST_RODC = 2;
export const SERVICE_ACCOUNT_FLAG_UNLINK_FROM_HOST_ONLY = 1;
export const SERVICE_ACCOUNT_FLAG_REMOVE_OFFLINE = 2;
export const ALERTER_MAILSLOT = `\\.\MAILSLOT\Alerter`;
export const ALERT_PRINT_EVENT = `PRINTING`;
export const ALERT_MESSAGE_EVENT = `MESSAGE`;
export const ALERT_ERRORLOG_EVENT = `ERRORLOG`;
export const ALERT_ADMIN_EVENT = `ADMIN`;
export const ALERT_USER_EVENT = `USER`;
export const PRJOB_QSTATUS = 3;
export const PRJOB_DEVSTATUS = 508;
export const PRJOB_COMPLETE = 4;
export const PRJOB_INTERV = 8;
export const PRJOB_ERROR = 16;
export const PRJOB_DESTOFFLINE = 32;
export const PRJOB_DESTPAUSED = 64;
export const PRJOB_NOTIFY = 128;
export const PRJOB_DESTNOPAPER = 256;
export const PRJOB_DELETED = 32768;
export const PRJOB_QS_QUEUED = 0;
export const PRJOB_QS_PAUSED = 1;
export const PRJOB_QS_SPOOLING = 2;
export const PRJOB_QS_PRINTING = 3;
export const JOB_RUN_PERIODICALLY = 1;
export const JOB_EXEC_ERROR = 2;
export const JOB_RUNS_TODAY = 4;
export const JOB_ADD_CURRENT_DATE = 8;
export const JOB_NONINTERACTIVE = 16;
export const LOGFLAGS_FORWARD = 0;
export const LOGFLAGS_BACKWARD = 1;
export const LOGFLAGS_SEEK = 2;
export const ACTION_LOCKOUT = 0;
export const ACTION_ADMINUNLOCK = 1;
export const AE_SRVSTATUS = 0;
export const AE_SESSLOGON = 1;
export const AE_SESSLOGOFF = 2;
export const AE_SESSPWERR = 3;
export const AE_CONNSTART = 4;
export const AE_CONNSTOP = 5;
export const AE_CONNREJ = 6;
export const AE_RESACCESS = 7;
export const AE_RESACCESSREJ = 8;
export const AE_CLOSEFILE = 9;
export const AE_SERVICESTAT = 11;
export const AE_ACLMOD = 12;
export const AE_UASMOD = 13;
export const AE_NETLOGON = 14;
export const AE_NETLOGOFF = 15;
export const AE_NETLOGDENIED = 16;
export const AE_ACCLIMITEXCD = 17;
export const AE_RESACCESS2 = 18;
export const AE_ACLMODFAIL = 19;
export const AE_LOCKOUT = 20;
export const AE_GENERIC_TYPE = 21;
export const AE_SRVSTART = 0;
export const AE_SRVPAUSED = 1;
export const AE_SRVCONT = 2;
export const AE_SRVSTOP = 3;
export const AE_GUEST = 0;
export const AE_USER = 1;
export const AE_ADMIN = 2;
export const AE_NORMAL = 0;
export const AE_USERLIMIT = 0;
export const AE_GENERAL = 0;
export const AE_ERROR = 1;
export const AE_SESSDIS = 1;
export const AE_BADPW = 1;
export const AE_AUTODIS = 2;
export const AE_UNSHARE = 2;
export const AE_ADMINPRIVREQD = 2;
export const AE_ADMINDIS = 3;
export const AE_NOACCESSPERM = 3;
export const AE_ACCRESTRICT = 4;
export const AE_NORMAL_CLOSE = 0;
export const AE_SES_CLOSE = 1;
export const AE_ADMIN_CLOSE = 2;
export const AE_LIM_UNKNOWN = 0;
export const AE_LIM_LOGONHOURS = 1;
export const AE_LIM_EXPIRED = 2;
export const AE_LIM_INVAL_WKSTA = 3;
export const AE_LIM_DISABLED = 4;
export const AE_LIM_DELETED = 5;
export const AE_MOD = 0;
export const AE_DELETE = 1;
export const AE_ADD = 2;
export const AE_UAS_USER = 0;
export const AE_UAS_GROUP = 1;
export const AE_UAS_MODALS = 2;
export const SVAUD_SERVICE = 1;
export const SVAUD_GOODSESSLOGON = 6;
export const SVAUD_BADSESSLOGON = 24;
export const SVAUD_GOODNETLOGON = 96;
export const SVAUD_BADNETLOGON = 384;
export const SVAUD_GOODUSE = 1536;
export const SVAUD_BADUSE = 6144;
export const SVAUD_USERLIST = 8192;
export const SVAUD_PERMISSIONS = 16384;
export const SVAUD_RESOURCE = 32768;
export const SVAUD_LOGONLIM = 65536;
export const AA_AUDIT_ALL = 1;
export const AA_A_OWNER = 4;
export const AA_CLOSE = 8;
export const AA_S_OPEN = 16;
export const AA_S_WRITE = 32;
export const AA_S_CREATE = 32;
export const AA_S_DELETE = 64;
export const AA_S_ACL = 128;
export const AA_F_OPEN = 256;
export const AA_F_WRITE = 512;
export const AA_F_CREATE = 512;
export const AA_F_DELETE = 1024;
export const AA_F_ACL = 2048;
export const AA_A_OPEN = 4096;
export const AA_A_WRITE = 8192;
export const AA_A_CREATE = 8192;
export const AA_A_DELETE = 16384;
export const AA_A_ACL = 32768;
export const ERRLOG_BASE = 3100;
export const NELOG_Internal_Error = 3100;
export const NELOG_Resource_Shortage = 3101;
export const NELOG_Unable_To_Lock_Segment = 3102;
export const NELOG_Unable_To_Unlock_Segment = 3103;
export const NELOG_Uninstall_Service = 3104;
export const NELOG_Init_Exec_Fail = 3105;
export const NELOG_Ncb_Error = 3106;
export const NELOG_Net_Not_Started = 3107;
export const NELOG_Ioctl_Error = 3108;
export const NELOG_System_Semaphore = 3109;
export const NELOG_Init_OpenCreate_Err = 3110;
export const NELOG_NetBios = 3111;
export const NELOG_SMB_Illegal = 3112;
export const NELOG_Service_Fail = 3113;
export const NELOG_Entries_Lost = 3114;
export const NELOG_Init_Seg_Overflow = 3120;
export const NELOG_Srv_No_Mem_Grow = 3121;
export const NELOG_Access_File_Bad = 3122;
export const NELOG_Srvnet_Not_Started = 3123;
export const NELOG_Init_Chardev_Err = 3124;
export const NELOG_Remote_API = 3125;
export const NELOG_Ncb_TooManyErr = 3126;
export const NELOG_Mailslot_err = 3127;
export const NELOG_ReleaseMem_Alert = 3128;
export const NELOG_AT_cannot_write = 3129;
export const NELOG_Cant_Make_Msg_File = 3130;
export const NELOG_Exec_Netservr_NoMem = 3131;
export const NELOG_Server_Lock_Failure = 3132;
export const NELOG_Msg_Shutdown = 3140;
export const NELOG_Msg_Sem_Shutdown = 3141;
export const NELOG_Msg_Log_Err = 3150;
export const NELOG_VIO_POPUP_ERR = 3151;
export const NELOG_Msg_Unexpected_SMB_Type = 3152;
export const NELOG_Wksta_Infoseg = 3160;
export const NELOG_Wksta_Compname = 3161;
export const NELOG_Wksta_BiosThreadFailure = 3162;
export const NELOG_Wksta_IniSeg = 3163;
export const NELOG_Wksta_HostTab_Full = 3164;
export const NELOG_Wksta_Bad_Mailslot_SMB = 3165;
export const NELOG_Wksta_UASInit = 3166;
export const NELOG_Wksta_SSIRelogon = 3167;
export const NELOG_Build_Name = 3170;
export const NELOG_Name_Expansion = 3171;
export const NELOG_Message_Send = 3172;
export const NELOG_Mail_Slt_Err = 3173;
export const NELOG_AT_cannot_read = 3174;
export const NELOG_AT_sched_err = 3175;
export const NELOG_AT_schedule_file_created = 3176;
export const NELOG_Srvnet_NB_Open = 3177;
export const NELOG_AT_Exec_Err = 3178;
export const NELOG_Lazy_Write_Err = 3180;
export const NELOG_HotFix = 3181;
export const NELOG_HardErr_From_Server = 3182;
export const NELOG_LocalSecFail1 = 3183;
export const NELOG_LocalSecFail2 = 3184;
export const NELOG_LocalSecFail3 = 3185;
export const NELOG_LocalSecGeneralFail = 3186;
export const NELOG_NetWkSta_Internal_Error = 3190;
export const NELOG_NetWkSta_No_Resource = 3191;
export const NELOG_NetWkSta_SMB_Err = 3192;
export const NELOG_NetWkSta_VC_Err = 3193;
export const NELOG_NetWkSta_Stuck_VC_Err = 3194;
export const NELOG_NetWkSta_NCB_Err = 3195;
export const NELOG_NetWkSta_Write_Behind_Err = 3196;
export const NELOG_NetWkSta_Reset_Err = 3197;
export const NELOG_NetWkSta_Too_Many = 3198;
export const NELOG_Srv_Thread_Failure = 3204;
export const NELOG_Srv_Close_Failure = 3205;
export const NELOG_ReplUserCurDir = 3206;
export const NELOG_ReplCannotMasterDir = 3207;
export const NELOG_ReplUpdateError = 3208;
export const NELOG_ReplLostMaster = 3209;
export const NELOG_NetlogonAuthDCFail = 3210;
export const NELOG_ReplLogonFailed = 3211;
export const NELOG_ReplNetErr = 3212;
export const NELOG_ReplMaxFiles = 3213;
export const NELOG_ReplMaxTreeDepth = 3214;
export const NELOG_ReplBadMsg = 3215;
export const NELOG_ReplSysErr = 3216;
export const NELOG_ReplUserLoged = 3217;
export const NELOG_ReplBadImport = 3218;
export const NELOG_ReplBadExport = 3219;
export const NELOG_ReplSignalFileErr = 3220;
export const NELOG_DiskFT = 3221;
export const NELOG_ReplAccessDenied = 3222;
export const NELOG_NetlogonFailedPrimary = 3223;
export const NELOG_NetlogonPasswdSetFailed = 3224;
export const NELOG_NetlogonTrackingError = 3225;
export const NELOG_NetlogonSyncError = 3226;
export const NELOG_NetlogonRequireSignOrSealError = 3227;
export const NELOG_UPS_PowerOut = 3230;
export const NELOG_UPS_Shutdown = 3231;
export const NELOG_UPS_CmdFileError = 3232;
export const NELOG_UPS_CannotOpenDriver = 3233;
export const NELOG_UPS_PowerBack = 3234;
export const NELOG_UPS_CmdFileConfig = 3235;
export const NELOG_UPS_CmdFileExec = 3236;
export const NELOG_Missing_Parameter = 3250;
export const NELOG_Invalid_Config_Line = 3251;
export const NELOG_Invalid_Config_File = 3252;
export const NELOG_File_Changed = 3253;
export const NELOG_Files_Dont_Fit = 3254;
export const NELOG_Wrong_DLL_Version = 3255;
export const NELOG_Error_in_DLL = 3256;
export const NELOG_System_Error = 3257;
export const NELOG_FT_ErrLog_Too_Large = 3258;
export const NELOG_FT_Update_In_Progress = 3259;
export const NELOG_Joined_Domain = 3260;
export const NELOG_Joined_Workgroup = 3261;
export const NELOG_OEM_Code = 3299;
export const ERRLOG2_BASE = 5700;
export const NELOG_NetlogonSSIInitError = 5700;
export const NELOG_NetlogonFailedToUpdateTrustList = 5701;
export const NELOG_NetlogonFailedToAddRpcInterface = 5702;
export const NELOG_NetlogonFailedToReadMailslot = 5703;
export const NELOG_NetlogonFailedToRegisterSC = 5704;
export const NELOG_NetlogonChangeLogCorrupt = 5705;
export const NELOG_NetlogonFailedToCreateShare = 5706;
export const NELOG_NetlogonDownLevelLogonFailed = 5707;
export const NELOG_NetlogonDownLevelLogoffFailed = 5708;
export const NELOG_NetlogonNTLogonFailed = 5709;
export const NELOG_NetlogonNTLogoffFailed = 5710;
export const NELOG_NetlogonPartialSyncCallSuccess = 5711;
export const NELOG_NetlogonPartialSyncCallFailed = 5712;
export const NELOG_NetlogonFullSyncCallSuccess = 5713;
export const NELOG_NetlogonFullSyncCallFailed = 5714;
export const NELOG_NetlogonPartialSyncSuccess = 5715;
export const NELOG_NetlogonPartialSyncFailed = 5716;
export const NELOG_NetlogonFullSyncSuccess = 5717;
export const NELOG_NetlogonFullSyncFailed = 5718;
export const NELOG_NetlogonAuthNoDomainController = 5719;
export const NELOG_NetlogonAuthNoTrustLsaSecret = 5720;
export const NELOG_NetlogonAuthNoTrustSamAccount = 5721;
export const NELOG_NetlogonServerAuthFailed = 5722;
export const NELOG_NetlogonServerAuthNoTrustSamAccount = 5723;
export const NELOG_FailedToRegisterSC = 5724;
export const NELOG_FailedToSetServiceStatus = 5725;
export const NELOG_FailedToGetComputerName = 5726;
export const NELOG_DriverNotLoaded = 5727;
export const NELOG_NoTranportLoaded = 5728;
export const NELOG_NetlogonFailedDomainDelta = 5729;
export const NELOG_NetlogonFailedGlobalGroupDelta = 5730;
export const NELOG_NetlogonFailedLocalGroupDelta = 5731;
export const NELOG_NetlogonFailedUserDelta = 5732;
export const NELOG_NetlogonFailedPolicyDelta = 5733;
export const NELOG_NetlogonFailedTrustedDomainDelta = 5734;
export const NELOG_NetlogonFailedAccountDelta = 5735;
export const NELOG_NetlogonFailedSecretDelta = 5736;
export const NELOG_NetlogonSystemError = 5737;
export const NELOG_NetlogonDuplicateMachineAccounts = 5738;
export const NELOG_NetlogonTooManyGlobalGroups = 5739;
export const NELOG_NetlogonBrowserDriver = 5740;
export const NELOG_NetlogonAddNameFailure = 5741;
export const NELOG_RplMessages = 5742;
export const NELOG_RplXnsBoot = 5743;
export const NELOG_RplSystem = 5744;
export const NELOG_RplWkstaTimeout = 5745;
export const NELOG_RplWkstaFileOpen = 5746;
export const NELOG_RplWkstaFileRead = 5747;
export const NELOG_RplWkstaMemory = 5748;
export const NELOG_RplWkstaFileChecksum = 5749;
export const NELOG_RplWkstaFileLineCount = 5750;
export const NELOG_RplWkstaBbcFile = 5751;
export const NELOG_RplWkstaFileSize = 5752;
export const NELOG_RplWkstaInternal = 5753;
export const NELOG_RplWkstaWrongVersion = 5754;
export const NELOG_RplWkstaNetwork = 5755;
export const NELOG_RplAdapterResource = 5756;
export const NELOG_RplFileCopy = 5757;
export const NELOG_RplFileDelete = 5758;
export const NELOG_RplFilePerms = 5759;
export const NELOG_RplCheckConfigs = 5760;
export const NELOG_RplCreateProfiles = 5761;
export const NELOG_RplRegistry = 5762;
export const NELOG_RplReplaceRPLDISK = 5763;
export const NELOG_RplCheckSecurity = 5764;
export const NELOG_RplBackupDatabase = 5765;
export const NELOG_RplInitDatabase = 5766;
export const NELOG_RplRestoreDatabaseFailure = 5767;
export const NELOG_RplRestoreDatabaseSuccess = 5768;
export const NELOG_RplInitRestoredDatabase = 5769;
export const NELOG_NetlogonSessionTypeWrong = 5770;
export const NELOG_RplUpgradeDBTo40 = 5771;
export const NELOG_NetlogonLanmanBdcsNotAllowed = 5772;
export const NELOG_NetlogonNoDynamicDns = 5773;
export const NELOG_NetlogonDynamicDnsRegisterFailure = 5774;
export const NELOG_NetlogonDynamicDnsDeregisterFailure = 5775;
export const NELOG_NetlogonFailedFileCreate = 5776;
export const NELOG_NetlogonGetSubnetToSite = 5777;
export const NELOG_NetlogonNoSiteForClient = 5778;
export const NELOG_NetlogonBadSiteName = 5779;
export const NELOG_NetlogonBadSubnetName = 5780;
export const NELOG_NetlogonDynamicDnsServerFailure = 5781;
export const NELOG_NetlogonDynamicDnsFailure = 5782;
export const NELOG_NetlogonRpcCallCancelled = 5783;
export const NELOG_NetlogonDcSiteCovered = 5784;
export const NELOG_NetlogonDcSiteNotCovered = 5785;
export const NELOG_NetlogonGcSiteCovered = 5786;
export const NELOG_NetlogonGcSiteNotCovered = 5787;
export const NELOG_NetlogonFailedSpnUpdate = 5788;
export const NELOG_NetlogonFailedDnsHostNameUpdate = 5789;
export const NELOG_NetlogonAuthNoUplevelDomainController = 5790;
export const NELOG_NetlogonAuthDomainDowngraded = 5791;
export const NELOG_NetlogonNdncSiteCovered = 5792;
export const NELOG_NetlogonNdncSiteNotCovered = 5793;
export const NELOG_NetlogonDcOldSiteCovered = 5794;
export const NELOG_NetlogonDcSiteNotCoveredAuto = 5795;
export const NELOG_NetlogonGcOldSiteCovered = 5796;
export const NELOG_NetlogonGcSiteNotCoveredAuto = 5797;
export const NELOG_NetlogonNdncOldSiteCovered = 5798;
export const NELOG_NetlogonNdncSiteNotCoveredAuto = 5799;
export const NELOG_NetlogonSpnMultipleSamAccountNames = 5800;
export const NELOG_NetlogonSpnCrackNamesFailure = 5801;
export const NELOG_NetlogonNoAddressToSiteMapping = 5802;
export const NELOG_NetlogonInvalidGenericParameterValue = 5803;
export const NELOG_NetlogonInvalidDwordParameterValue = 5804;
export const NELOG_NetlogonServerAuthFailedNoAccount = 5805;
export const NELOG_NetlogonNoDynamicDnsManual = 5806;
export const NELOG_NetlogonNoSiteForClients = 5807;
export const NELOG_NetlogonDnsDeregAborted = 5808;
export const NELOG_NetlogonRpcPortRequestFailure = 5809;
export const NELOG_NetlogonPartialSiteMappingForClients = 5810;
export const NELOG_NetlogonRemoteDynamicDnsRegisterFailure = 5811;
export const NELOG_NetlogonRemoteDynamicDnsDeregisterFailure = 5812;
export const NELOG_NetlogonRejectedRemoteDynamicDnsRegister = 5813;
export const NELOG_NetlogonRejectedRemoteDynamicDnsDeregister = 5814;
export const NELOG_NetlogonRemoteDynamicDnsUpdateRequestFailure = 5815;
export const NELOG_NetlogonUserValidationReqInitialTimeOut = 5816;
export const NELOG_NetlogonUserValidationReqRecurringTimeOut = 5817;
export const NELOG_NetlogonUserValidationReqWaitInitialWarning = 5818;
export const NELOG_NetlogonUserValidationReqWaitRecurringWarning = 5819;
export const NELOG_NetlogonFailedToAddAuthzRpcInterface = 5820;
export const NELOG_NetLogonFailedToInitializeAuthzRm = 5821;
export const NELOG_NetLogonFailedToInitializeRPCSD = 5822;
export const NELOG_NetlogonMachinePasswdSetSucceeded = 5823;
export const NELOG_NetlogonMsaPasswdSetSucceeded = 5824;
export const NELOG_NetlogonDnsHostNameLowerCasingFailed = 5825;
export const NETLOG_NetlogonNonWindowsSupportsSecureRpc = 5826;
export const NETLOG_NetlogonUnsecureRpcClient = 5827;
export const NETLOG_NetlogonUnsecureRpcTrust = 5828;
export const NETLOG_NetlogonUnsecuredRpcMachineTemporarilyAllowed = 5829;
export const NETLOG_NetlogonUnsecureRpcMachineAllowedBySsdl = 5830;
export const NETLOG_NetlogonUnsecureRpcTrustAllowedBySsdl = 5831;
export const NETSETUP_ACCT_DELETE = 4;
export const NETSETUP_DNS_NAME_CHANGES_ONLY = 4096;
export const NETSETUP_INSTALL_INVOCATION = 262144;
export const NETSETUP_ALT_SAMACCOUNTNAME = 131072;
export const NET_IGNORE_UNSUPPORTED_FLAGS = 1;
export const NETSETUP_PROVISION_PERSISTENTSITE = 32;
export const NETSETUP_PROVISION_CHECK_PWD_ONLY = 2147483648;
export const NETSETUP_PROVISIONING_PARAMS_WIN8_VERSION = 1;
export const NETSETUP_PROVISIONING_PARAMS_CURRENT_VERSION = 2;
export const MSGNAME_NOT_FORWARDED = 0;
export const MSGNAME_FORWARDED_TO = 4;
export const MSGNAME_FORWARDED_FROM = 16;
export const SUPPORTS_ANY = `-1`;
export const NO_PERMISSION_REQUIRED = 1;
export const ALLOCATE_RESPONSE = 2;
export const USE_SPECIFIC_TRANSPORT = 2147483648;
export const SV_PLATFORM_ID_OS2 = 400;
export const SV_PLATFORM_ID_NT = 500;
export const MAJOR_VERSION_MASK = 15;
export const SV_NODISC = `-1`;
export const SV_PLATFORM_ID_PARMNUM = 101;
export const SV_NAME_PARMNUM = 102;
export const SV_VERSION_MAJOR_PARMNUM = 103;
export const SV_VERSION_MINOR_PARMNUM = 104;
export const SV_TYPE_PARMNUM = 105;
export const SV_COMMENT_PARMNUM = 5;
export const SV_USERS_PARMNUM = 107;
export const SV_DISC_PARMNUM = 10;
export const SV_HIDDEN_PARMNUM = 16;
export const SV_ANNOUNCE_PARMNUM = 17;
export const SV_ANNDELTA_PARMNUM = 18;
export const SV_USERPATH_PARMNUM = 112;
export const SV_ULIST_MTIME_PARMNUM = 401;
export const SV_GLIST_MTIME_PARMNUM = 402;
export const SV_ALIST_MTIME_PARMNUM = 403;
export const SV_ALERTS_PARMNUM = 11;
export const SV_SECURITY_PARMNUM = 405;
export const SV_NUMADMIN_PARMNUM = 406;
export const SV_LANMASK_PARMNUM = 407;
export const SV_GUESTACC_PARMNUM = 408;
export const SV_CHDEVQ_PARMNUM = 410;
export const SV_CHDEVJOBS_PARMNUM = 411;
export const SV_CONNECTIONS_PARMNUM = 412;
export const SV_SHARES_PARMNUM = 413;
export const SV_OPENFILES_PARMNUM = 414;
export const SV_SESSREQS_PARMNUM = 417;
export const SV_ACTIVELOCKS_PARMNUM = 419;
export const SV_NUMREQBUF_PARMNUM = 420;
export const SV_NUMBIGBUF_PARMNUM = 422;
export const SV_NUMFILETASKS_PARMNUM = 423;
export const SV_ALERTSCHED_PARMNUM = 37;
export const SV_ERRORALERT_PARMNUM = 38;
export const SV_LOGONALERT_PARMNUM = 39;
export const SV_ACCESSALERT_PARMNUM = 40;
export const SV_DISKALERT_PARMNUM = 41;
export const SV_NETIOALERT_PARMNUM = 42;
export const SV_MAXAUDITSZ_PARMNUM = 43;
export const SV_SRVHEURISTICS_PARMNUM = 431;
export const SV_SESSOPENS_PARMNUM = 501;
export const SV_SESSVCS_PARMNUM = 502;
export const SV_OPENSEARCH_PARMNUM = 503;
export const SV_SIZREQBUF_PARMNUM = 504;
export const SV_INITWORKITEMS_PARMNUM = 505;
export const SV_MAXWORKITEMS_PARMNUM = 506;
export const SV_RAWWORKITEMS_PARMNUM = 507;
export const SV_IRPSTACKSIZE_PARMNUM = 508;
export const SV_MAXRAWBUFLEN_PARMNUM = 509;
export const SV_SESSUSERS_PARMNUM = 510;
export const SV_SESSCONNS_PARMNUM = 511;
export const SV_MAXNONPAGEDMEMORYUSAGE_PARMNUM = 512;
export const SV_MAXPAGEDMEMORYUSAGE_PARMNUM = 513;
export const SV_ENABLESOFTCOMPAT_PARMNUM = 514;
export const SV_ENABLEFORCEDLOGOFF_PARMNUM = 515;
export const SV_TIMESOURCE_PARMNUM = 516;
export const SV_ACCEPTDOWNLEVELAPIS_PARMNUM = 517;
export const SV_LMANNOUNCE_PARMNUM = 518;
export const SV_DOMAIN_PARMNUM = 519;
export const SV_MAXCOPYREADLEN_PARMNUM = 520;
export const SV_MAXCOPYWRITELEN_PARMNUM = 521;
export const SV_MINKEEPSEARCH_PARMNUM = 522;
export const SV_MAXKEEPSEARCH_PARMNUM = 523;
export const SV_MINKEEPCOMPLSEARCH_PARMNUM = 524;
export const SV_MAXKEEPCOMPLSEARCH_PARMNUM = 525;
export const SV_THREADCOUNTADD_PARMNUM = 526;
export const SV_NUMBLOCKTHREADS_PARMNUM = 527;
export const SV_SCAVTIMEOUT_PARMNUM = 528;
export const SV_MINRCVQUEUE_PARMNUM = 529;
export const SV_MINFREEWORKITEMS_PARMNUM = 530;
export const SV_XACTMEMSIZE_PARMNUM = 531;
export const SV_THREADPRIORITY_PARMNUM = 532;
export const SV_MAXMPXCT_PARMNUM = 533;
export const SV_OPLOCKBREAKWAIT_PARMNUM = 534;
export const SV_OPLOCKBREAKRESPONSEWAIT_PARMNUM = 535;
export const SV_ENABLEOPLOCKS_PARMNUM = 536;
export const SV_ENABLEOPLOCKFORCECLOSE_PARMNUM = 537;
export const SV_ENABLEFCBOPENS_PARMNUM = 538;
export const SV_ENABLERAW_PARMNUM = 539;
export const SV_ENABLESHAREDNETDRIVES_PARMNUM = 540;
export const SV_MINFREECONNECTIONS_PARMNUM = 541;
export const SV_MAXFREECONNECTIONS_PARMNUM = 542;
export const SV_INITSESSTABLE_PARMNUM = 543;
export const SV_INITCONNTABLE_PARMNUM = 544;
export const SV_INITFILETABLE_PARMNUM = 545;
export const SV_INITSEARCHTABLE_PARMNUM = 546;
export const SV_ALERTSCHEDULE_PARMNUM = 547;
export const SV_ERRORTHRESHOLD_PARMNUM = 548;
export const SV_NETWORKERRORTHRESHOLD_PARMNUM = 549;
export const SV_DISKSPACETHRESHOLD_PARMNUM = 550;
export const SV_MAXLINKDELAY_PARMNUM = 552;
export const SV_MINLINKTHROUGHPUT_PARMNUM = 553;
export const SV_LINKINFOVALIDTIME_PARMNUM = 554;
export const SV_SCAVQOSINFOUPDATETIME_PARMNUM = 555;
export const SV_MAXWORKITEMIDLETIME_PARMNUM = 556;
export const SV_MAXRAWWORKITEMS_PARMNUM = 557;
export const SV_PRODUCTTYPE_PARMNUM = 560;
export const SV_SERVERSIZE_PARMNUM = 561;
export const SV_CONNECTIONLESSAUTODISC_PARMNUM = 562;
export const SV_SHARINGVIOLATIONRETRIES_PARMNUM = 563;
export const SV_SHARINGVIOLATIONDELAY_PARMNUM = 564;
export const SV_MAXGLOBALOPENSEARCH_PARMNUM = 565;
export const SV_REMOVEDUPLICATESEARCHES_PARMNUM = 566;
export const SV_LOCKVIOLATIONRETRIES_PARMNUM = 567;
export const SV_LOCKVIOLATIONOFFSET_PARMNUM = 568;
export const SV_LOCKVIOLATIONDELAY_PARMNUM = 569;
export const SV_MDLREADSWITCHOVER_PARMNUM = 570;
export const SV_CACHEDOPENLIMIT_PARMNUM = 571;
export const SV_CRITICALTHREADS_PARMNUM = 572;
export const SV_RESTRICTNULLSESSACCESS_PARMNUM = 573;
export const SV_ENABLEWFW311DIRECTIPX_PARMNUM = 574;
export const SV_OTHERQUEUEAFFINITY_PARMNUM = 575;
export const SV_QUEUESAMPLESECS_PARMNUM = 576;
export const SV_BALANCECOUNT_PARMNUM = 577;
export const SV_PREFERREDAFFINITY_PARMNUM = 578;
export const SV_MAXFREERFCBS_PARMNUM = 579;
export const SV_MAXFREEMFCBS_PARMNUM = 580;
export const SV_MAXFREELFCBS_PARMNUM = 581;
export const SV_MAXFREEPAGEDPOOLCHUNKS_PARMNUM = 582;
export const SV_MINPAGEDPOOLCHUNKSIZE_PARMNUM = 583;
export const SV_MAXPAGEDPOOLCHUNKSIZE_PARMNUM = 584;
export const SV_SENDSFROMPREFERREDPROCESSOR_PARMNUM = 585;
export const SV_MAXTHREADSPERQUEUE_PARMNUM = 586;
export const SV_CACHEDDIRECTORYLIMIT_PARMNUM = 587;
export const SV_MAXCOPYLENGTH_PARMNUM = 588;
export const SV_ENABLECOMPRESSION_PARMNUM = 590;
export const SV_AUTOSHAREWKS_PARMNUM = 591;
export const SV_AUTOSHARESERVER_PARMNUM = 592;
export const SV_ENABLESECURITYSIGNATURE_PARMNUM = 593;
export const SV_REQUIRESECURITYSIGNATURE_PARMNUM = 594;
export const SV_MINCLIENTBUFFERSIZE_PARMNUM = 595;
export const SV_CONNECTIONNOSESSIONSTIMEOUT_PARMNUM = 596;
export const SV_IDLETHREADTIMEOUT_PARMNUM = 597;
export const SV_ENABLEW9XSECURITYSIGNATURE_PARMNUM = 598;
export const SV_ENFORCEKERBEROSREAUTHENTICATION_PARMNUM = 599;
export const SV_DISABLEDOS_PARMNUM = 600;
export const SV_LOWDISKSPACEMINIMUM_PARMNUM = 601;
export const SV_DISABLESTRICTNAMECHECKING_PARMNUM = 602;
export const SV_ENABLEAUTHENTICATEUSERSHARING_PARMNUM = 603;
export const SVI1_NUM_ELEMENTS = 5;
export const SVI2_NUM_ELEMENTS = 40;
export const SVI3_NUM_ELEMENTS = 44;
export const SV_MAX_CMD_LEN = 256;
export const SW_AUTOPROF_LOAD_MASK = 1;
export const SW_AUTOPROF_SAVE_MASK = 2;
export const SV_MAX_SRV_HEUR_LEN = 32;
export const SV_USERS_PER_LICENSE = 5;
export const SVTI2_REMAP_PIPE_NAMES = 2;
export const SVTI2_SCOPED_NAME = 4;
export const SVTI2_CLUSTER_NAME = 8;
export const SVTI2_CLUSTER_DNN_NAME = 16;
export const SVTI2_UNICODE_TRANSPORT_ADDRESS = 32;
export const SVTI2_RESERVED1 = 4096;
export const SVTI2_RESERVED2 = 8192;
export const SVTI2_RESERVED3 = 16384;
export const SRV_SUPPORT_HASH_GENERATION = 1;
export const SRV_HASH_GENERATION_ACTIVE = 2;
export const SERVICE_INSTALL_STATE = 3;
export const SERVICE_UNINSTALLED = 0;
export const SERVICE_INSTALL_PENDING = 1;
export const SERVICE_UNINSTALL_PENDING = 2;
export const SERVICE_INSTALLED = 3;
export const SERVICE_PAUSE_STATE = 12;
export const LM20_SERVICE_ACTIVE = 0;
export const LM20_SERVICE_CONTINUE_PENDING = 4;
export const LM20_SERVICE_PAUSE_PENDING = 8;
export const LM20_SERVICE_PAUSED = 12;
export const SERVICE_NOT_UNINSTALLABLE = 0;
export const SERVICE_UNINSTALLABLE = 16;
export const SERVICE_NOT_PAUSABLE = 0;
export const SERVICE_PAUSABLE = 32;
export const SERVICE_REDIR_PAUSED = 1792;
export const SERVICE_REDIR_DISK_PAUSED = 256;
export const SERVICE_REDIR_PRINT_PAUSED = 512;
export const SERVICE_REDIR_COMM_PAUSED = 1024;
export const SERVICE_DOS_ENCRYPTION = `ENCRYPT`;
export const SERVICE_CTRL_INTERROGATE = 0;
export const SERVICE_CTRL_PAUSE = 1;
export const SERVICE_CTRL_CONTINUE = 2;
export const SERVICE_CTRL_UNINSTALL = 3;
export const SERVICE_CTRL_REDIR_DISK = 1;
export const SERVICE_CTRL_REDIR_PRINT = 2;
export const SERVICE_CTRL_REDIR_COMM = 4;
export const SERVICE_IP_NO_HINT = 0;
export const SERVICE_CCP_NO_HINT = 0;
export const SERVICE_IP_QUERY_HINT = 65536;
export const SERVICE_CCP_QUERY_HINT = 65536;
export const SERVICE_IP_CHKPT_NUM = 255;
export const SERVICE_CCP_CHKPT_NUM = 255;
export const SERVICE_IP_WAIT_TIME = 65280;
export const SERVICE_CCP_WAIT_TIME = 65280;
export const SERVICE_IP_WAITTIME_SHIFT = 8;
export const SERVICE_NTIP_WAITTIME_SHIFT = 12;
export const UPPER_HINT_MASK = 65280;
export const LOWER_HINT_MASK = 255;
export const UPPER_GET_HINT_MASK = 267386880;
export const LOWER_GET_HINT_MASK = 65280;
export const SERVICE_NT_MAXTIME = 65535;
export const SERVICE_RESRV_MASK = 131071;
export const SERVICE_MAXTIME = 255;
export const SERVICE_BASE = 3050;
export const SERVICE_UIC_NORMAL = 0;
export const SERVICE_UIC_BADPARMVAL = 3051;
export const SERVICE_UIC_MISSPARM = 3052;
export const SERVICE_UIC_UNKPARM = 3053;
export const SERVICE_UIC_RESOURCE = 3054;
export const SERVICE_UIC_CONFIG = 3055;
export const SERVICE_UIC_SYSTEM = 3056;
export const SERVICE_UIC_INTERNAL = 3057;
export const SERVICE_UIC_AMBIGPARM = 3058;
export const SERVICE_UIC_DUPPARM = 3059;
export const SERVICE_UIC_KILL = 3060;
export const SERVICE_UIC_EXEC = 3061;
export const SERVICE_UIC_SUBSERV = 3062;
export const SERVICE_UIC_CONFLPARM = 3063;
export const SERVICE_UIC_FILE = 3064;
export const SERVICE_UIC_M_NULL = 0;
export const SERVICE_UIC_M_MEMORY = 3070;
export const SERVICE_UIC_M_DISK = 3071;
export const SERVICE_UIC_M_THREADS = 3072;
export const SERVICE_UIC_M_PROCESSES = 3073;
export const SERVICE_UIC_M_SECURITY = 3074;
export const SERVICE_UIC_M_LANROOT = 3075;
export const SERVICE_UIC_M_REDIR = 3076;
export const SERVICE_UIC_M_SERVER = 3077;
export const SERVICE_UIC_M_SEC_FILE_ERR = 3078;
export const SERVICE_UIC_M_FILES = 3079;
export const SERVICE_UIC_M_LOGS = 3080;
export const SERVICE_UIC_M_LANGROUP = 3081;
export const SERVICE_UIC_M_MSGNAME = 3082;
export const SERVICE_UIC_M_ANNOUNCE = 3083;
export const SERVICE_UIC_M_UAS = 3084;
export const SERVICE_UIC_M_SERVER_SEC_ERR = 3085;
export const SERVICE_UIC_M_WKSTA = 3087;
export const SERVICE_UIC_M_ERRLOG = 3088;
export const SERVICE_UIC_M_FILE_UW = 3089;
export const SERVICE_UIC_M_ADDPAK = 3090;
export const SERVICE_UIC_M_LAZY = 3091;
export const SERVICE_UIC_M_UAS_MACHINE_ACCT = 3092;
export const SERVICE_UIC_M_UAS_SERVERS_NMEMB = 3093;
export const SERVICE_UIC_M_UAS_SERVERS_NOGRP = 3094;
export const SERVICE_UIC_M_UAS_INVALID_ROLE = 3095;
export const SERVICE_UIC_M_NETLOGON_NO_DC = 3096;
export const SERVICE_UIC_M_NETLOGON_DC_CFLCT = 3097;
export const SERVICE_UIC_M_NETLOGON_AUTH = 3098;
export const SERVICE_UIC_M_UAS_PROLOG = 3099;
export const SERVICE2_BASE = 5600;
export const SERVICE_UIC_M_NETLOGON_MPATH = 5600;
export const SERVICE_UIC_M_LSA_MACHINE_ACCT = 5601;
export const SERVICE_UIC_M_DATABASE_ERROR = 5602;
export const USE_FLAG_GLOBAL_MAPPING = 65536;
export const USE_LOCAL_PARMNUM = 1;
export const USE_REMOTE_PARMNUM = 2;
export const USE_PASSWORD_PARMNUM = 3;
export const USE_ASGTYPE_PARMNUM = 4;
export const USE_USERNAME_PARMNUM = 5;
export const USE_DOMAINNAME_PARMNUM = 6;
export const USE_FLAGS_PARMNUM = 7;
export const USE_AUTHIDENTITY_PARMNUM = 8;
export const USE_SD_PARMNUM = 9;
export const USE_OPTIONS_PARMNUM = 10;
export const USE_OK = 0;
export const USE_PAUSED = 1;
export const USE_SESSLOST = 2;
export const USE_DISCONN = 2;
export const USE_NETERR = 3;
export const USE_CONN = 4;
export const USE_RECONN = 5;
export const USE_CHARDEV = 2;
export const CREATE_NO_CONNECT = 1;
export const CREATE_BYPASS_CSC = 2;
export const CREATE_CRED_RESET = 4;
export const USE_DEFAULT_CREDENTIALS = 4;
export const CREATE_REQUIRE_CONNECTION_INTEGRITY = 8;
export const CREATE_REQUIRE_CONNECTION_PRIVACY = 16;
export const CREATE_PERSIST_MAPPING = 32;
export const CREATE_WRITE_THROUGH_SEMANTICS = 64;
export const CREATE_GLOBAL_MAPPING = 256;
export const WKSTA_PLATFORM_ID_PARMNUM = 100;
export const WKSTA_COMPUTERNAME_PARMNUM = 1;
export const WKSTA_LANGROUP_PARMNUM = 2;
export const WKSTA_VER_MAJOR_PARMNUM = 4;
export const WKSTA_VER_MINOR_PARMNUM = 5;
export const WKSTA_LOGGED_ON_USERS_PARMNUM = 6;
export const WKSTA_LANROOT_PARMNUM = 7;
export const WKSTA_LOGON_DOMAIN_PARMNUM = 8;
export const WKSTA_LOGON_SERVER_PARMNUM = 9;
export const WKSTA_CHARWAIT_PARMNUM = 10;
export const WKSTA_CHARTIME_PARMNUM = 11;
export const WKSTA_CHARCOUNT_PARMNUM = 12;
export const WKSTA_KEEPCONN_PARMNUM = 13;
export const WKSTA_KEEPSEARCH_PARMNUM = 14;
export const WKSTA_MAXCMDS_PARMNUM = 15;
export const WKSTA_NUMWORKBUF_PARMNUM = 16;
export const WKSTA_MAXWRKCACHE_PARMNUM = 17;
export const WKSTA_SESSTIMEOUT_PARMNUM = 18;
export const WKSTA_SIZERROR_PARMNUM = 19;
export const WKSTA_NUMALERTS_PARMNUM = 20;
export const WKSTA_NUMSERVICES_PARMNUM = 21;
export const WKSTA_NUMCHARBUF_PARMNUM = 22;
export const WKSTA_SIZCHARBUF_PARMNUM = 23;
export const WKSTA_ERRLOGSZ_PARMNUM = 27;
export const WKSTA_PRINTBUFTIME_PARMNUM = 28;
export const WKSTA_SIZWORKBUF_PARMNUM = 29;
export const WKSTA_MAILSLOTS_PARMNUM = 30;
export const WKSTA_NUMDGRAMBUF_PARMNUM = 31;
export const WKSTA_WRKHEURISTICS_PARMNUM = 32;
export const WKSTA_MAXTHREADS_PARMNUM = 33;
export const WKSTA_LOCKQUOTA_PARMNUM = 41;
export const WKSTA_LOCKINCREMENT_PARMNUM = 42;
export const WKSTA_LOCKMAXIMUM_PARMNUM = 43;
export const WKSTA_PIPEINCREMENT_PARMNUM = 44;
export const WKSTA_PIPEMAXIMUM_PARMNUM = 45;
export const WKSTA_DORMANTFILELIMIT_PARMNUM = 46;
export const WKSTA_CACHEFILETIMEOUT_PARMNUM = 47;
export const WKSTA_USEOPPORTUNISTICLOCKING_PARMNUM = 48;
export const WKSTA_USEUNLOCKBEHIND_PARMNUM = 49;
export const WKSTA_USECLOSEBEHIND_PARMNUM = 50;
export const WKSTA_BUFFERNAMEDPIPES_PARMNUM = 51;
export const WKSTA_USELOCKANDREADANDUNLOCK_PARMNUM = 52;
export const WKSTA_UTILIZENTCACHING_PARMNUM = 53;
export const WKSTA_USERAWREAD_PARMNUM = 54;
export const WKSTA_USERAWWRITE_PARMNUM = 55;
export const WKSTA_USEWRITERAWWITHDATA_PARMNUM = 56;
export const WKSTA_USEENCRYPTION_PARMNUM = 57;
export const WKSTA_BUFFILESWITHDENYWRITE_PARMNUM = 58;
export const WKSTA_BUFFERREADONLYFILES_PARMNUM = 59;
export const WKSTA_FORCECORECREATEMODE_PARMNUM = 60;
export const WKSTA_USE512BYTESMAXTRANSFER_PARMNUM = 61;
export const WKSTA_READAHEADTHRUPUT_PARMNUM = 62;
export const WKSTA_OTH_DOMAINS_PARMNUM = 101;
export const TRANSPORT_QUALITYOFSERVICE_PARMNUM = 201;
export const TRANSPORT_NAME_PARMNUM = 202;
export const EVENT_SRV_SERVICE_FAILED = `-1073739824`;
export const EVENT_SRV_RESOURCE_SHORTAGE = `-1073739823`;
export const EVENT_SRV_CANT_CREATE_DEVICE = `-1073739822`;
export const EVENT_SRV_CANT_CREATE_PROCESS = `-1073739821`;
export const EVENT_SRV_CANT_CREATE_THREAD = `-1073739820`;
export const EVENT_SRV_UNEXPECTED_DISC = `-1073739819`;
export const EVENT_SRV_INVALID_REQUEST = `-1073739818`;
export const EVENT_SRV_CANT_OPEN_NPFS = `-1073739817`;
export const EVENT_SRV_CANT_GROW_TABLE = `-2147481639`;
export const EVENT_SRV_CANT_START_SCAVENGER = `-1073739814`;
export const EVENT_SRV_IRP_STACK_SIZE = `-1073739813`;
export const EVENT_SRV_NETWORK_ERROR = `-2147481636`;
export const EVENT_SRV_DISK_FULL = `-2147481635`;
export const EVENT_SRV_NO_VIRTUAL_MEMORY = `-1073739808`;
export const EVENT_SRV_NONPAGED_POOL_LIMIT = `-1073739807`;
export const EVENT_SRV_PAGED_POOL_LIMIT = `-1073739806`;
export const EVENT_SRV_NO_NONPAGED_POOL = `-1073739805`;
export const EVENT_SRV_NO_PAGED_POOL = `-1073739804`;
export const EVENT_SRV_NO_WORK_ITEM = `-2147481627`;
export const EVENT_SRV_NO_FREE_CONNECTIONS = `-2147481626`;
export const EVENT_SRV_NO_FREE_RAW_WORK_ITEM = `-2147481625`;
export const EVENT_SRV_NO_BLOCKING_IO = `-2147481624`;
export const EVENT_SRV_DOS_ATTACK_DETECTED = `-2147481623`;
export const EVENT_SRV_TOO_MANY_DOS = `-2147481622`;
export const EVENT_SRV_OUT_OF_WORK_ITEM_DOS = `-2147481621`;
export const EVENT_SRV_KEY_NOT_FOUND = `-1073739323`;
export const EVENT_SRV_KEY_NOT_CREATED = `-1073739322`;
export const EVENT_SRV_NO_TRANSPORTS_BOUND = `-1073739321`;
export const EVENT_SRV_CANT_BIND_TO_TRANSPORT = `-2147481144`;
export const EVENT_SRV_CANT_BIND_DUP_NAME = `-1073739319`;
export const EVENT_SRV_INVALID_REGISTRY_VALUE = `-2147481142`;
export const EVENT_SRV_INVALID_SD = `-2147481141`;
export const EVENT_SRV_CANT_LOAD_DRIVER = `-2147481140`;
export const EVENT_SRV_CANT_UNLOAD_DRIVER = `-2147481139`;
export const EVENT_SRV_CANT_MAP_ERROR = `-2147481138`;
export const EVENT_SRV_CANT_RECREATE_SHARE = `-2147481137`;
export const EVENT_SRV_CANT_CHANGE_DOMAIN_NAME = `-2147481136`;
export const EVENT_SRV_TXF_INIT_FAILED = `-2147481135`;
export const EVENT_RDR_RESOURCE_SHORTAGE = `-2147480647`;
export const EVENT_RDR_CANT_CREATE_DEVICE = `-2147480646`;
export const EVENT_RDR_CANT_CREATE_THREAD = `-2147480645`;
export const EVENT_RDR_CANT_SET_THREAD = `-2147480644`;
export const EVENT_RDR_INVALID_REPLY = `-2147480643`;
export const EVENT_RDR_INVALID_SMB = `-2147480642`;
export const EVENT_RDR_INVALID_LOCK_REPLY = `-2147480641`;
export const EVENT_RDR_FAILED_UNLOCK = `-2147480639`;
export const EVENT_RDR_CLOSE_BEHIND = `-2147480637`;
export const EVENT_RDR_UNEXPECTED_ERROR = `-2147480636`;
export const EVENT_RDR_TIMEOUT = `-2147480635`;
export const EVENT_RDR_INVALID_OPLOCK = `-2147480634`;
export const EVENT_RDR_CONNECTION_REFERENCE = `-2147480633`;
export const EVENT_RDR_SERVER_REFERENCE = `-2147480632`;
export const EVENT_RDR_SMB_REFERENCE = `-2147480631`;
export const EVENT_RDR_ENCRYPT = `-2147480630`;
export const EVENT_RDR_CONNECTION = `-2147480629`;
export const EVENT_RDR_MAXCMDS = `-2147480627`;
export const EVENT_RDR_OPLOCK_SMB = `-2147480626`;
export const EVENT_RDR_DISPOSITION = `-2147480625`;
export const EVENT_RDR_CONTEXTS = `-2147480624`;
export const EVENT_RDR_WRITE_BEHIND_FLUSH_FAILED = `-2147480623`;
export const EVENT_RDR_AT_THREAD_MAX = `-2147480622`;
export const EVENT_RDR_CANT_READ_REGISTRY = `-2147480621`;
export const EVENT_RDR_TIMEZONE_BIAS_TOO_LARGE = `-2147480620`;
export const EVENT_RDR_PRIMARY_TRANSPORT_CONNECT_FAILED = `-2147480619`;
export const EVENT_RDR_DELAYED_SET_ATTRIBUTES_FAILED = `-2147480618`;
export const EVENT_RDR_DELETEONCLOSE_FAILED = `-2147480617`;
export const EVENT_RDR_CANT_BIND_TRANSPORT = `-2147480616`;
export const EVENT_RDR_CANT_REGISTER_ADDRESS = `-2147480615`;
export const EVENT_RDR_CANT_GET_SECURITY_CONTEXT = `-2147480614`;
export const EVENT_RDR_CANT_BUILD_SMB_HEADER = `-2147480613`;
export const EVENT_RDR_SECURITY_SIGNATURE_MISMATCH = `-2147480612`;
export const EVENT_TCPIP6_STARTED = 1073744924;
export const EVENT_STREAMS_STRLOG = `-1073737824`;
export const EVENT_STREAMS_ALLOCB_FAILURE = `-2147479647`;
export const EVENT_STREAMS_ALLOCB_FAILURE_CNT = `-2147479646`;
export const EVENT_STREAMS_ESBALLOC_FAILURE = `-2147479645`;
export const EVENT_STREAMS_ESBALLOC_FAILURE_CNT = `-2147479644`;
export const EVENT_TCPIP_CREATE_DEVICE_FAILED = `-1073737724`;
export const EVENT_TCPIP_NO_RESOURCES_FOR_INIT = `-1073737723`;
export const EVENT_TCPIP_TOO_MANY_NETS = `-1073737639`;
export const EVENT_TCPIP_NO_MASK = `-1073737638`;
export const EVENT_TCPIP_INVALID_ADDRESS = `-1073737637`;
export const EVENT_TCPIP_INVALID_MASK = `-1073737636`;
export const EVENT_TCPIP_NO_ADAPTER_RESOURCES = `-1073737635`;
export const EVENT_TCPIP_DHCP_INIT_FAILED = `-2147479458`;
export const EVENT_TCPIP_ADAPTER_REG_FAILURE = `-1073737633`;
export const EVENT_TCPIP_INVALID_DEFAULT_GATEWAY = `-2147479456`;
export const EVENT_TCPIP_NO_ADDRESS_LIST = `-1073737631`;
export const EVENT_TCPIP_NO_MASK_LIST = `-1073737630`;
export const EVENT_TCPIP_NO_BINDINGS = `-1073737629`;
export const EVENT_TCPIP_IP_INIT_FAILED = `-1073737628`;
export const EVENT_TCPIP_TOO_MANY_GATEWAYS = `-2147479451`;
export const EVENT_TCPIP_ADDRESS_CONFLICT1 = `-1073737626`;
export const EVENT_TCPIP_ADDRESS_CONFLICT2 = `-1073737625`;
export const EVENT_TCPIP_NTE_CONTEXT_LIST_FAILURE = `-1073737624`;
export const EVENT_TCPIP_MEDIA_CONNECT = 1073746025;
export const EVENT_TCPIP_MEDIA_DISCONNECT = 1073746026;
export const EVENT_TCPIP_IPV4_UNINSTALLED = 1073746027;
export const EVENT_TCPIP_AUTOCONFIGURED_ADDRESS_LIMIT_REACHED = `-2147479444`;
export const EVENT_TCPIP_AUTOCONFIGURED_ROUTE_LIMIT_REACHED = `-2147479443`;
export const EVENT_TCPIP_OUT_OF_ORDER_FRAGMENTS_EXCEEDED = `-2147479442`;
export const EVENT_TCPIP_INTERFACE_BIND_FAILURE = `-1073737617`;
export const EVENT_TCPIP_TCP_INIT_FAILED = `-1073737599`;
export const EVENT_TCPIP_TCP_CONNECT_LIMIT_REACHED = `-2147479422`;
export const EVENT_TCPIP_TCP_TIME_WAIT_COLLISION = `-2147479421`;
export const EVENT_TCPIP_TCP_WSD_WS_RESTRICTED = `-2147479420`;
export const EVENT_TCPIP_TCP_MPP_ATTACKS_DETECTED = `-2147479419`;
export const EVENT_TCPIP_TCP_CONNECTIONS_PERF_IMPACTED = `-2147479418`;
export const EVENT_TCPIP_TCP_GLOBAL_EPHEMERAL_PORT_SPACE_EXHAUSTED = `-2147479417`;
export const EVENT_TCPIP_UDP_LIMIT_REACHED = `-2147479383`;
export const EVENT_TCPIP_UDP_GLOBAL_EPHEMERAL_PORT_SPACE_EXHAUSTED = `-2147479382`;
export const EVENT_TCPIP_PCF_MULTICAST_OID_ISSUE = `-2147479358`;
export const EVENT_TCPIP_PCF_MISSING_CAPABILITY = `-2147479357`;
export const EVENT_TCPIP_PCF_SET_FILTER_FAILURE = `-2147479356`;
export const EVENT_TCPIP_PCF_NO_ARP_FILTER = `-2147479355`;
export const EVENT_TCPIP_PCF_CLEAR_FILTER_FAILURE = `-1073737530`;
export const EVENT_NBT_CREATE_DRIVER = `-1073737524`;
export const EVENT_NBT_OPEN_REG_PARAMS = `-1073737523`;
export const EVENT_NBT_NO_BACKUP_WINS = `-2147479346`;
export const EVENT_NBT_NO_WINS = `-2147479345`;
export const EVENT_NBT_BAD_BACKUP_WINS_ADDR = `-2147479344`;
export const EVENT_NBT_BAD_PRIMARY_WINS_ADDR = `-2147479343`;
export const EVENT_NBT_NAME_SERVER_ADDRS = `-1073737518`;
export const EVENT_NBT_CREATE_ADDRESS = `-1073737517`;
export const EVENT_NBT_CREATE_CONNECTION = `-1073737516`;
export const EVENT_NBT_NON_OS_INIT = `-1073737515`;
export const EVENT_NBT_TIMERS = `-1073737514`;
export const EVENT_NBT_CREATE_DEVICE = `-1073737513`;
export const EVENT_NBT_NO_DEVICES = `-2147479336`;
export const EVENT_NBT_OPEN_REG_LINKAGE = `-1073737511`;
export const EVENT_NBT_READ_BIND = `-1073737510`;
export const EVENT_NBT_READ_EXPORT = `-1073737509`;
export const EVENT_NBT_OPEN_REG_NAMESERVER = `-2147479332`;
export const EVENT_SCOPE_LABEL_TOO_LONG = `-2147479331`;
export const EVENT_SCOPE_TOO_LONG = `-2147479330`;
export const EVENT_NBT_DUPLICATE_NAME = `-1073737505`;
export const EVENT_NBT_NAME_RELEASE = `-1073737504`;
export const EVENT_NBT_DUPLICATE_NAME_ERROR = `-1073737503`;
export const EVENT_NBT_NO_RESOURCES = `-1073737502`;
export const EVENT_NDIS_RESOURCE_CONFLICT = `-1073736824`;
export const EVENT_NDIS_OUT_OF_RESOURCE = `-1073736823`;
export const EVENT_NDIS_HARDWARE_FAILURE = `-1073736822`;
export const EVENT_NDIS_ADAPTER_NOT_FOUND = `-1073736821`;
export const EVENT_NDIS_INTERRUPT_CONNECT = `-1073736820`;
export const EVENT_NDIS_DRIVER_FAILURE = `-1073736819`;
export const EVENT_NDIS_BAD_VERSION = `-1073736818`;
export const EVENT_NDIS_TIMEOUT = `-2147478641`;
export const EVENT_NDIS_NETWORK_ADDRESS = `-1073736816`;
export const EVENT_NDIS_UNSUPPORTED_CONFIGURATION = `-1073736815`;
export const EVENT_NDIS_INVALID_VALUE_FROM_ADAPTER = `-1073736814`;
export const EVENT_NDIS_MISSING_CONFIGURATION_PARAMETER = `-1073736813`;
export const EVENT_NDIS_BAD_IO_BASE_ADDRESS = `-1073736812`;
export const EVENT_NDIS_RECEIVE_SPACE_SMALL = 1073746837;
export const EVENT_NDIS_ADAPTER_DISABLED = `-2147478634`;
export const EVENT_NDIS_IO_PORT_CONFLICT = `-2147478633`;
export const EVENT_NDIS_PORT_OR_DMA_CONFLICT = `-2147478632`;
export const EVENT_NDIS_MEMORY_CONFLICT = `-2147478631`;
export const EVENT_NDIS_INTERRUPT_CONFLICT = `-2147478630`;
export const EVENT_NDIS_DMA_CONFLICT = `-2147478629`;
export const EVENT_NDIS_INVALID_DOWNLOAD_FILE_ERROR = `-1073736804`;
export const EVENT_NDIS_MAXRECEIVES_ERROR = `-2147478627`;
export const EVENT_NDIS_MAXTRANSMITS_ERROR = `-2147478626`;
export const EVENT_NDIS_MAXFRAMESIZE_ERROR = `-2147478625`;
export const EVENT_NDIS_MAXINTERNALBUFS_ERROR = `-2147478624`;
export const EVENT_NDIS_MAXMULTICAST_ERROR = `-2147478623`;
export const EVENT_NDIS_PRODUCTID_ERROR = `-2147478622`;
export const EVENT_NDIS_LOBE_FAILUE_ERROR = `-2147478621`;
export const EVENT_NDIS_SIGNAL_LOSS_ERROR = `-2147478620`;
export const EVENT_NDIS_REMOVE_RECEIVED_ERROR = `-2147478619`;
export const EVENT_NDIS_TOKEN_RING_CORRECTION = 1073746854;
export const EVENT_NDIS_ADAPTER_CHECK_ERROR = `-1073736793`;
export const EVENT_NDIS_RESET_FAILURE_ERROR = `-2147478616`;
export const EVENT_NDIS_CABLE_DISCONNECTED_ERROR = `-2147478615`;
export const EVENT_NDIS_RESET_FAILURE_CORRECTION = `-2147478614`;
export const EVENT_EventlogStarted = `-2147477643`;
export const EVENT_EventlogStopped = `-2147477642`;
export const EVENT_EventlogAbnormalShutdown = `-2147477640`;
export const EVENT_EventLogProductInfo = `-2147477639`;
export const EVENT_ComputerNameChange = `-2147477637`;
export const EVENT_DNSDomainNameChange = `-2147477636`;
export const EVENT_EventlogUptime = `-2147477635`;
export const EVENT_UP_DRIVER_ON_MP = `-1073735724`;
export const EVENT_SERVICE_START_FAILED = `-1073734824`;
export const EVENT_SERVICE_START_FAILED_II = `-1073734823`;
export const EVENT_SERVICE_START_FAILED_GROUP = `-1073734822`;
export const EVENT_SERVICE_START_FAILED_NONE = `-1073734821`;
export const EVENT_CALL_TO_FUNCTION_FAILED = `-1073734819`;
export const EVENT_CALL_TO_FUNCTION_FAILED_II = `-1073734818`;
export const EVENT_REVERTED_TO_LASTKNOWNGOOD = `-1073734817`;
export const EVENT_BAD_ACCOUNT_NAME = `-1073734816`;
export const EVENT_CONNECTION_TIMEOUT = `-1073734815`;
export const EVENT_READFILE_TIMEOUT = `-1073734814`;
export const EVENT_TRANSACT_TIMEOUT = `-1073734813`;
export const EVENT_TRANSACT_INVALID = `-1073734812`;
export const EVENT_FIRST_LOGON_FAILED = `-1073734811`;
export const EVENT_SECOND_LOGON_FAILED = `-1073734810`;
export const EVENT_INVALID_DRIVER_DEPENDENCY = `-1073734809`;
export const EVENT_BAD_SERVICE_STATE = `-1073734808`;
export const EVENT_CIRCULAR_DEPENDENCY_DEMAND = `-1073734807`;
export const EVENT_CIRCULAR_DEPENDENCY_AUTO = `-1073734806`;
export const EVENT_DEPEND_ON_LATER_SERVICE = `-1073734805`;
export const EVENT_DEPEND_ON_LATER_GROUP = `-1073734804`;
export const EVENT_SEVERE_SERVICE_FAILED = `-1073734803`;
export const EVENT_SERVICE_START_HUNG = `-1073734802`;
export const EVENT_SERVICE_EXIT_FAILED = `-1073734801`;
export const EVENT_SERVICE_EXIT_FAILED_SPECIFIC = `-1073734800`;
export const EVENT_SERVICE_START_AT_BOOT_FAILED = `-1073734799`;
export const EVENT_BOOT_SYSTEM_DRIVERS_FAILED = `-1073734798`;
export const EVENT_RUNNING_LASTKNOWNGOOD = `-1073734797`;
export const EVENT_TAKE_OWNERSHIP = `-1073734796`;
export const TITLE_SC_MESSAGE_BOX = `-1073734795`;
export const EVENT_SERVICE_NOT_INTERACTIVE = `-1073734794`;
export const EVENT_SERVICE_CRASH = `-1073734793`;
export const EVENT_SERVICE_RECOVERY_FAILED = `-1073734792`;
export const EVENT_SERVICE_SCESRV_FAILED = `-1073734791`;
export const EVENT_SERVICE_CRASH_NO_ACTION = `-1073734790`;
export const EVENT_SERVICE_CONTROL_SUCCESS = 1073748859;
export const EVENT_SERVICE_STATUS_SUCCESS = 1073748860;
export const EVENT_SERVICE_CONFIG_BACKOUT_FAILED = `-1073734787`;
export const EVENT_FIRST_LOGON_FAILED_II = `-1073734786`;
export const EVENT_SERVICE_DIFFERENT_PID_CONNECTED = `-2147476609`;
export const EVENT_SERVICE_START_TYPE_CHANGED = 1073748864;
export const EVENT_SERVICE_LOGON_TYPE_NOT_GRANTED = `-1073734783`;
export const EVENT_SERVICE_STOP_SUCCESS_WITH_REASON = 1073748866;
export const EVENT_SERVICE_SHUTDOWN_FAILED = `-1073734781`;
export const EVENT_COMMAND_NOT_INTERACTIVE = `-1073733924`;
export const EVENT_COMMAND_START_FAILED = `-1073733923`;
export const EVENT_BOWSER_OTHER_MASTER_ON_NET = `-1073733821`;
export const EVENT_BOWSER_PROMOTED_WHILE_ALREADY_MASTER = `-2147475644`;
export const EVENT_BOWSER_NON_MASTER_MASTER_ANNOUNCE = `-2147475643`;
export const EVENT_BOWSER_ILLEGAL_DATAGRAM = `-2147475642`;
export const EVENT_BROWSER_STATUS_BITS_UPDATE_FAILED = `-1073733817`;
export const EVENT_BROWSER_ROLE_CHANGE_FAILED = `-1073733816`;
export const EVENT_BROWSER_MASTER_PROMOTION_FAILED = `-1073733815`;
export const EVENT_BOWSER_NAME_CONVERSION_FAILED = `-1073733814`;
export const EVENT_BROWSER_OTHERDOMAIN_ADD_FAILED = `-1073733813`;
export const EVENT_BOWSER_ELECTION_RECEIVED = 8012;
export const EVENT_BOWSER_ELECTION_SENT_GETBLIST_FAILED = 1073749837;
export const EVENT_BOWSER_ELECTION_SENT_FIND_MASTER_FAILED = 1073749838;
export const EVENT_BROWSER_ELECTION_SENT_LANMAN_NT_STARTED = 1073749839;
export const EVENT_BOWSER_ILLEGAL_DATAGRAM_THRESHOLD = `-1073733808`;
export const EVENT_BROWSER_DEPENDANT_SERVICE_FAILED = `-1073733807`;
export const EVENT_BROWSER_MASTER_PROMOTION_FAILED_STOPPING = `-1073733805`;
export const EVENT_BROWSER_MASTER_PROMOTION_FAILED_NO_MASTER = `-1073733804`;
export const EVENT_BROWSER_SERVER_LIST_FAILED = `-2147475627`;
export const EVENT_BROWSER_DOMAIN_LIST_FAILED = `-2147475626`;
export const EVENT_BROWSER_ILLEGAL_CONFIG = `-2147475625`;
export const EVENT_BOWSER_OLD_BACKUP_FOUND = 1073749848;
export const EVENT_BROWSER_SERVER_LIST_RETRIEVED = 8025;
export const EVENT_BROWSER_DOMAIN_LIST_RETRIEVED = 8026;
export const EVENT_BOWSER_PDC_LOST_ELECTION = 1073749851;
export const EVENT_BOWSER_NON_PDC_WON_ELECTION = 1073749852;
export const EVENT_BOWSER_CANT_READ_REGISTRY = 1073749853;
export const EVENT_BOWSER_MAILSLOT_DATAGRAM_THRESHOLD_EXCEEDED = 1073749854;
export const EVENT_BOWSER_GETBROWSERLIST_THRESHOLD_EXCEEDED = 1073749855;
export const EVENT_BROWSER_BACKUP_STOPPED = `-1073733792`;
export const EVENT_BROWSER_ELECTION_SENT_LANMAN_NT_STOPPED = 1073749857;
export const EVENT_BROWSER_GETBLIST_RECEIVED_NOT_MASTER = `-1073733790`;
export const EVENT_BROWSER_ELECTION_SENT_ROLE_CHANGED = 1073749859;
export const EVENT_BROWSER_NOT_STARTED_IPX_CONFIG_MISMATCH = `-1073733788`;
export const NWSAP_EVENT_KEY_NOT_FOUND = `-1073733324`;
export const NWSAP_EVENT_WSASTARTUP_FAILED = `-1073733323`;
export const NWSAP_EVENT_SOCKET_FAILED = `-1073733322`;
export const NWSAP_EVENT_SETOPTBCAST_FAILED = `-1073733321`;
export const NWSAP_EVENT_BIND_FAILED = `-1073733320`;
export const NWSAP_EVENT_GETSOCKNAME_FAILED = `-1073733319`;
export const NWSAP_EVENT_OPTEXTENDEDADDR_FAILED = `-1073733318`;
export const NWSAP_EVENT_OPTBCASTINADDR_FAILED = `-1073733317`;
export const NWSAP_EVENT_CARDMALLOC_FAILED = `-1073733316`;
export const NWSAP_EVENT_NOCARDS = `-1073733315`;
export const NWSAP_EVENT_THREADEVENT_FAIL = `-1073733314`;
export const NWSAP_EVENT_RECVSEM_FAIL = `-1073733313`;
export const NWSAP_EVENT_SENDEVENT_FAIL = `-1073733312`;
export const NWSAP_EVENT_STARTRECEIVE_ERROR = `-1073733311`;
export const NWSAP_EVENT_STARTWORKER_ERROR = `-1073733310`;
export const NWSAP_EVENT_TABLE_MALLOC_FAILED = `-1073733309`;
export const NWSAP_EVENT_HASHTABLE_MALLOC_FAILED = `-1073733308`;
export const NWSAP_EVENT_STARTLPCWORKER_ERROR = `-1073733307`;
export const NWSAP_EVENT_CREATELPCPORT_ERROR = `-1073733306`;
export const NWSAP_EVENT_CREATELPCEVENT_ERROR = `-1073733305`;
export const NWSAP_EVENT_LPCLISTENMEMORY_ERROR = `-1073733304`;
export const NWSAP_EVENT_LPCHANDLEMEMORY_ERROR = `-1073733303`;
export const NWSAP_EVENT_BADWANFILTER_VALUE = `-1073733302`;
export const NWSAP_EVENT_CARDLISTEVENT_FAIL = `-1073733301`;
export const NWSAP_EVENT_SDMDEVENT_FAIL = `-1073733300`;
export const NWSAP_EVENT_INVALID_FILTERNAME = `-2147475123`;
export const NWSAP_EVENT_WANSEM_FAIL = `-1073733298`;
export const NWSAP_EVENT_WANSOCKET_FAILED = `-1073733297`;
export const NWSAP_EVENT_WANBIND_FAILED = `-1073733296`;
export const NWSAP_EVENT_STARTWANWORKER_ERROR = `-1073733295`;
export const NWSAP_EVENT_STARTWANCHECK_ERROR = `-1073733294`;
export const NWSAP_EVENT_OPTMAXADAPTERNUM_ERROR = `-1073733293`;
export const NWSAP_EVENT_WANHANDLEMEMORY_ERROR = `-1073733292`;
export const NWSAP_EVENT_WANEVENT_ERROR = `-1073733291`;
export const EVENT_TRANSPORT_RESOURCE_POOL = `-2147474647`;
export const EVENT_TRANSPORT_RESOURCE_LIMIT = `-2147474646`;
export const EVENT_TRANSPORT_RESOURCE_SPECIFIC = `-2147474645`;
export const EVENT_TRANSPORT_REGISTER_FAILED = `-1073732820`;
export const EVENT_TRANSPORT_BINDING_FAILED = `-1073732819`;
export const EVENT_TRANSPORT_ADAPTER_NOT_FOUND = `-1073732818`;
export const EVENT_TRANSPORT_SET_OID_FAILED = `-1073732817`;
export const EVENT_TRANSPORT_QUERY_OID_FAILED = `-1073732816`;
export const EVENT_TRANSPORT_TRANSFER_DATA = 1073750833;
export const EVENT_TRANSPORT_TOO_MANY_LINKS = 1073750834;
export const EVENT_TRANSPORT_BAD_PROTOCOL = 1073750835;
export const EVENT_IPX_NEW_DEFAULT_TYPE = 1073751325;
export const EVENT_IPX_SAP_ANNOUNCE = `-2147474146`;
export const EVENT_IPX_ILLEGAL_CONFIG = `-2147474145`;
export const EVENT_IPX_INTERNAL_NET_INVALID = `-1073732320`;
export const EVENT_IPX_NO_FRAME_TYPES = `-1073732319`;
export const EVENT_IPX_CREATE_DEVICE = `-1073732318`;
export const EVENT_IPX_NO_ADAPTERS = `-1073732317`;
export const EVENT_RPCSS_CREATEPROCESS_FAILURE = `-1073731824`;
export const EVENT_RPCSS_RUNAS_CREATEPROCESS_FAILURE = `-1073731823`;
export const EVENT_RPCSS_LAUNCH_ACCESS_DENIED = `-1073731822`;
export const EVENT_RPCSS_DEFAULT_LAUNCH_ACCESS_DENIED = `-1073731821`;
export const EVENT_RPCSS_RUNAS_CANT_LOGIN = `-1073731820`;
export const EVENT_RPCSS_START_SERVICE_FAILURE = `-1073731819`;
export const EVENT_RPCSS_REMOTE_SIDE_ERROR = `-1073731818`;
export const EVENT_RPCSS_ACTIVATION_ERROR = `-1073731817`;
export const EVENT_RPCSS_REMOTE_SIDE_ERROR_WITH_FILE = `-1073731816`;
export const EVENT_RPCSS_REMOTE_SIDE_UNAVAILABLE = `-1073731815`;
export const EVENT_RPCSS_SERVER_START_TIMEOUT = `-1073731814`;
export const EVENT_RPCSS_SERVER_NOT_RESPONDING = `-1073731813`;
export const EVENT_DCOM_ASSERTION_FAILURE = `-1073731812`;
export const EVENT_DCOM_INVALID_ENDPOINT_DATA = `-1073731811`;
export const EVENT_DCOM_COMPLUS_DISABLED = `-1073731810`;
export const EVENT_RPCSS_STOP_SERVICE_FAILURE = `-1073731795`;
export const EVENT_RPCSS_CREATEDEBUGGERPROCESS_FAILURE = `-1073731794`;
export const EVENT_DNS_CACHE_START_FAILURE_NO_DLL = `-1073730824`;
export const EVENT_DNS_CACHE_START_FAILURE_NO_ENTRY = `-1073730823`;
export const EVENT_DNS_CACHE_START_FAILURE_NO_CONTROL = `-1073730822`;
export const EVENT_DNS_CACHE_START_FAILURE_NO_DONE_EVENT = `-1073730821`;
export const EVENT_DNS_CACHE_START_FAILURE_NO_RPC = `-1073730820`;
export const EVENT_DNS_CACHE_START_FAILURE_NO_SHUTDOWN_NOTIFY = `-1073730819`;
export const EVENT_DNS_CACHE_START_FAILURE_NO_UPDATE = `-1073730818`;
export const EVENT_DNS_CACHE_START_FAILURE_LOW_MEMORY = `-1073730817`;
export const EVENT_DNS_CACHE_NETWORK_PERF_WARNING = `-2147472598`;
export const EVENT_DNS_CACHE_UNABLE_TO_REACH_SERVER_WARNING = `-2147472597`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_TIMEOUT = `-2147472498`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_SERVERFAIL = `-2147472497`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_NOTSUPP = `-2147472496`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_REFUSED = `-2147472495`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_SECURITY = `-2147472494`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_OTHER = `-2147472493`;
export const EVENT_DNSAPI_PTR_REGISTRATION_FAILED_TIMEOUT = `-2147472492`;
export const EVENT_DNSAPI_PTR_REGISTRATION_FAILED_SERVERFAIL = `-2147472491`;
export const EVENT_DNSAPI_PTR_REGISTRATION_FAILED_NOTSUPP = `-2147472490`;
export const EVENT_DNSAPI_PTR_REGISTRATION_FAILED_REFUSED = `-2147472489`;
export const EVENT_DNSAPI_PTR_REGISTRATION_FAILED_SECURITY = `-2147472488`;
export const EVENT_DNSAPI_PTR_REGISTRATION_FAILED_OTHER = `-2147472487`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_TIMEOUT_PRIMARY_DN = `-2147472486`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_SERVERFAIL_PRIMARY_DN = `-2147472485`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_NOTSUPP_PRIMARY_DN = `-2147472484`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_REFUSED_PRIMARY_DN = `-2147472483`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_SECURITY_PRIMARY_DN = `-2147472482`;
export const EVENT_DNSAPI_REGISTRATION_FAILED_OTHER_PRIMARY_DN = `-2147472481`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_TIMEOUT = `-2147472468`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_SERVERFAIL = `-2147472467`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_NOTSUPP = `-2147472466`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_REFUSED = `-2147472465`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_SECURITY = `-2147472464`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_OTHER = `-2147472463`;
export const EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_TIMEOUT = `-2147472462`;
export const EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_SERVERFAIL = `-2147472461`;
export const EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_NOTSUPP = `-2147472460`;
export const EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_REFUSED = `-2147472459`;
export const EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_SECURITY = `-2147472458`;
export const EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_OTHER = `-2147472457`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_TIMEOUT_PRIMARY_DN = `-2147472456`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_SERVERFAIL_PRIMARY_DN = `-2147472455`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_NOTSUPP_PRIMARY_DN = `-2147472454`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_REFUSED_PRIMARY_DN = `-2147472453`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_SECURITY_PRIMARY_DN = `-2147472452`;
export const EVENT_DNSAPI_DEREGISTRATION_FAILED_OTHER_PRIMARY_DN = `-2147472451`;
export const EVENT_DNSAPI_REGISTERED_ADAPTER = 1073753024;
export const EVENT_DNSAPI_REGISTERED_PTR = 1073753025;
export const EVENT_DNSAPI_REGISTERED_ADAPTER_PRIMARY_DN = 1073753026;
export const EVENT_TRK_INTERNAL_ERROR = `-1073729324`;
export const EVENT_TRK_SERVICE_START_SUCCESS = 1073754325;
export const EVENT_TRK_SERVICE_START_FAILURE = `-1073729322`;
export const EVENT_TRK_SERVICE_CORRUPT_LOG = `-1073729321`;
export const EVENT_TRK_SERVICE_VOL_QUOTA_EXCEEDED = `-2147471144`;
export const EVENT_TRK_SERVICE_VOLUME_CREATE = 1073754329;
export const EVENT_TRK_SERVICE_VOLUME_CLAIM = 1073754330;
export const EVENT_TRK_SERVICE_DUPLICATE_VOLIDS = 1073754331;
export const EVENT_TRK_SERVICE_MOVE_QUOTA_EXCEEDED = `-2147471140`;
export const EVENT_FRS_ERROR = `-1073728324`;
export const EVENT_FRS_STARTING = 1073755325;
export const EVENT_FRS_STOPPING = 1073755326;
export const EVENT_FRS_STOPPED = 1073755327;
export const EVENT_FRS_STOPPED_FORCE = `-1073728320`;
export const EVENT_FRS_STOPPED_ASSERT = `-1073728319`;
export const EVENT_FRS_ASSERT = `-1073728318`;
export const EVENT_FRS_VOLUME_NOT_SUPPORTED = `-1073728317`;
export const EVENT_FRS_LONG_JOIN = `-2147470140`;
export const EVENT_FRS_LONG_JOIN_DONE = `-2147470139`;
export const EVENT_FRS_CANNOT_COMMUNICATE = `-1073728314`;
export const EVENT_FRS_DATABASE_SPACE = `-1073728313`;
export const EVENT_FRS_DISK_WRITE_CACHE_ENABLED = `-2147470136`;
export const EVENT_FRS_JET_1414 = `-1073728311`;
export const EVENT_FRS_SYSVOL_NOT_READY = `-2147470134`;
export const EVENT_FRS_SYSVOL_NOT_READY_PRIMARY = `-2147470133`;
export const EVENT_FRS_SYSVOL_READY = 1073755340;
export const EVENT_FRS_ACCESS_CHECKS_DISABLED = `-2147470131`;
export const EVENT_FRS_ACCESS_CHECKS_FAILED_USER = `-2147470130`;
export const EVENT_FRS_ACCESS_CHECKS_FAILED_UNKNOWN = `-1073728305`;
export const EVENT_FRS_MOVED_PREEXISTING = `-2147470128`;
export const EVENT_FRS_CANNOT_START_BACKUP_RESTORE_IN_PROGRESS = `-1073728303`;
export const EVENT_FRS_STAGING_AREA_FULL = `-2147470126`;
export const EVENT_FRS_HUGE_FILE = `-2147470125`;
export const EVENT_FRS_CANNOT_CREATE_UUID = `-1073728300`;
export const EVENT_FRS_NO_DNS_ATTRIBUTE = `-2147470123`;
export const EVENT_FRS_NO_SID = `-1073728298`;
export const NTFRSPRF_OPEN_RPC_BINDING_ERROR_SET = `-1073728297`;
export const NTFRSPRF_OPEN_RPC_BINDING_ERROR_CONN = `-1073728296`;
export const NTFRSPRF_OPEN_RPC_CALL_ERROR_SET = `-1073728295`;
export const NTFRSPRF_OPEN_RPC_CALL_ERROR_CONN = `-1073728294`;
export const NTFRSPRF_COLLECT_RPC_BINDING_ERROR_SET = `-1073728293`;
export const NTFRSPRF_COLLECT_RPC_BINDING_ERROR_CONN = `-1073728292`;
export const NTFRSPRF_COLLECT_RPC_CALL_ERROR_SET = `-1073728291`;
export const NTFRSPRF_COLLECT_RPC_CALL_ERROR_CONN = `-1073728290`;
export const NTFRSPRF_VIRTUALALLOC_ERROR_SET = `-1073728289`;
export const NTFRSPRF_VIRTUALALLOC_ERROR_CONN = `-1073728288`;
export const NTFRSPRF_REGISTRY_ERROR_SET = `-1073728287`;
export const NTFRSPRF_REGISTRY_ERROR_CONN = `-1073728286`;
export const EVENT_FRS_ROOT_NOT_VALID = `-1073728285`;
export const EVENT_FRS_STAGE_NOT_VALID = `-1073728284`;
export const EVENT_FRS_OVERLAPS_LOGGING = `-1073728283`;
export const EVENT_FRS_OVERLAPS_WORKING = `-1073728282`;
export const EVENT_FRS_OVERLAPS_STAGE = `-1073728281`;
export const EVENT_FRS_OVERLAPS_ROOT = `-1073728280`;
export const EVENT_FRS_OVERLAPS_OTHER_STAGE = `-1073728279`;
export const EVENT_FRS_PREPARE_ROOT_FAILED = `-1073728278`;
export const EVENT_FRS_BAD_REG_DATA = `-2147470101`;
export const EVENT_FRS_JOIN_FAIL_TIME_SKEW = `-1073728276`;
export const EVENT_FRS_RMTCO_TIME_SKEW = `-1073728275`;
export const EVENT_FRS_CANT_OPEN_STAGE = `-1073728274`;
export const EVENT_FRS_CANT_OPEN_PREINSTALL = `-1073728273`;
export const EVENT_FRS_REPLICA_SET_CREATE_FAIL = `-1073728272`;
export const EVENT_FRS_REPLICA_SET_CREATE_OK = 1073755377;
export const EVENT_FRS_REPLICA_SET_CXTIONS = 1073755378;
export const EVENT_FRS_IN_ERROR_STATE = `-1073728269`;
export const EVENT_FRS_REPLICA_NO_ROOT_CHANGE = `-1073728268`;
export const EVENT_FRS_DUPLICATE_IN_CXTION_SYSVOL = `-1073728267`;
export const EVENT_FRS_DUPLICATE_IN_CXTION = `-1073728266`;
export const EVENT_FRS_ROOT_HAS_MOVED = `-1073728265`;
export const EVENT_FRS_ERROR_REPLICA_SET_DELETED = `-2147470088`;
export const EVENT_FRS_REPLICA_IN_JRNL_WRAP_ERROR = `-1073728263`;
export const EVENT_FRS_DS_POLL_ERROR_SUMMARY = `-2147470086`;
export const EVENT_PS_GPC_REGISTER_FAILED = `-1073727824`;
export const EVENT_PS_NO_RESOURCES_FOR_INIT = `-1073727823`;
export const EVENT_PS_REGISTER_PROTOCOL_FAILED = `-1073727822`;
export const EVENT_PS_REGISTER_MINIPORT_FAILED = `-1073727821`;
export const EVENT_PS_BAD_BESTEFFORT_LIMIT = `-2147469548`;
export const EVENT_PS_QUERY_OID_GEN_MAXIMUM_FRAME_SIZE = `-1073727723`;
export const EVENT_PS_QUERY_OID_GEN_MAXIMUM_TOTAL_SIZE = `-1073727722`;
export const EVENT_PS_QUERY_OID_GEN_LINK_SPEED = `-1073727721`;
export const EVENT_PS_BINDING_FAILED = `-1073727720`;
export const EVENT_PS_MISSING_ADAPTER_REGISTRY_DATA = `-1073727719`;
export const EVENT_PS_REGISTER_ADDRESS_FAMILY_FAILED = `-1073727718`;
export const EVENT_PS_INIT_DEVICE_FAILED = `-1073727717`;
export const EVENT_PS_WMI_INSTANCE_NAME_FAILED = `-1073727716`;
export const EVENT_PS_WAN_LIMITED_BESTEFFORT = `-2147469539`;
export const EVENT_PS_RESOURCE_POOL = `-1073727714`;
export const EVENT_PS_ADMISSIONCONTROL_OVERFLOW = `-2147469537`;
export const EVENT_PS_NETWORK_ADDRESS_FAIL = `-1073727712`;
export const EXTRA_EXIT_POINT = `-1073727524`;
export const MISSING_EXIT_POINT = `-1073727523`;
export const MISSING_VOLUME = `-1073727522`;
export const EXTRA_VOLUME = `-1073727521`;
export const EXTRA_EXIT_POINT_DELETED = `-1073727520`;
export const EXTRA_EXIT_POINT_NOT_DELETED = `-1073727519`;
export const MISSING_EXIT_POINT_CREATED = `-1073727518`;
export const MISSING_EXIT_POINT_NOT_CREATED = `-1073727517`;
export const MISSING_VOLUME_CREATED = `-1073727516`;
export const MISSING_VOLUME_NOT_CREATED = `-1073727515`;
export const EXTRA_VOLUME_DELETED = `-1073727514`;
export const EXTRA_VOLUME_NOT_DELETED = `-1073727513`;
export const COULD_NOT_VERIFY_VOLUMES = `-1073727512`;
export const KNOWLEDGE_INCONSISTENCY_DETECTED = `-1073727511`;
export const PREFIX_MISMATCH = `-1073727510`;
export const PREFIX_MISMATCH_FIXED = `-1073727509`;
export const PREFIX_MISMATCH_NOT_FIXED = `-1073727508`;
export const MACHINE_UNJOINED = `-1073727507`;
export const DFS_REFERRAL_REQUEST = 1073756142;
export const NOT_A_DFS_PATH = 1073756224;
export const LM_REDIR_FAILURE = 1073756225;
export const DFS_CONNECTION_FAILURE = 1073756226;
export const DFS_REFERRAL_FAILURE = 1073756227;
export const DFS_REFERRAL_SUCCESS = 1073756228;
export const DFS_MAX_DNR_ATTEMPTS = 1073756229;
export const DFS_SPECIAL_REFERRAL_FAILURE = 1073756230;
export const DFS_OPEN_FAILURE = 1073756231;
export const NET_DFS_ENUM = 1073756324;
export const NET_DFS_ENUMEX = 1073756325;
export const DFS_ERROR_CREATE_REPARSEPOINT_FAILURE = `-1073727321`;
export const DFS_ERROR_UNSUPPORTED_FILESYSTEM = `-1073727320`;
export const DFS_ERROR_OVERLAPPING_DIRECTORIES = `-1073727319`;
export const DFS_INFO_ACTIVEDIRECTORY_ONLINE = 1073756332;
export const DFS_ERROR_TOO_MANY_ERRORS = `-1073727315`;
export const DFS_ERROR_WINSOCKINIT_FAILED = `-1073727314`;
export const DFS_ERROR_SECURITYINIT_FAILED = `-1073727313`;
export const DFS_ERROR_THREADINIT_FAILED = `-1073727312`;
export const DFS_ERROR_SITECACHEINIT_FAILED = `-1073727311`;
export const DFS_ERROR_ROOTSYNCINIT_FAILED = `-1073727310`;
export const DFS_ERROR_CREATEEVENT_FAILED = `-1073727309`;
export const DFS_ERROR_COMPUTERINFO_FAILED = `-1073727308`;
export const DFS_ERROR_CLUSTERINFO_FAILED = `-1073727307`;
export const DFS_ERROR_DCINFO_FAILED = `-1073727306`;
export const DFS_ERROR_PREFIXTABLE_FAILED = `-1073727305`;
export const DFS_ERROR_HANDLENAMESPACE_FAILED = `-1073727304`;
export const DFS_ERROR_REGISTERSTORE_FAILED = `-1073727303`;
export const DFS_ERROR_REFLECTIONENGINE_FAILED = `-1073727302`;
export const DFS_ERROR_ACTIVEDIRECTORY_OFFLINE = `-1073727301`;
export const DFS_ERROR_SITESUPPOR_FAILED = `-1073727300`;
export const DFS_ERROR_DSCONNECT_FAILED = `-2147469122`;
export const DFS_INFO_DS_RECONNECTED = 1073756353;
export const DFS_ERROR_NO_DFS_DATA = `-1073727294`;
export const DFS_INFO_FINISH_INIT = 1073756355;
export const DFS_INFO_RECONNECT_DATA = 1073756356;
export const DFS_INFO_FINISH_BUILDING_NAMESPACE = 1073756357;
export const DFS_ERROR_ON_ROOT = `-2147469114`;
export const DFS_ERROR_MUTLIPLE_ROOTS_NOT_SUPPORTED = `-1073727289`;
export const DFS_WARN_DOMAIN_REFERRAL_OVERFLOW = `-2147469112`;
export const DFS_INFO_DOMAIN_REFERRAL_MIN_OVERFLOW = 1073756361;
export const DFS_WARN_INCOMPLETE_MOVE = `-2147469110`;
export const DFS_ERROR_RESYNCHRONIZE_FAILED = `-1073727285`;
export const DFS_ERROR_REMOVE_LINK_FAILED = `-1073727284`;
export const DFS_WARN_METADATA_LINK_TYPE_INCORRECT = `-2147469107`;
export const DFS_WARN_METADATA_LINK_INFO_INVALID = `-2147469106`;
export const DFS_ERROR_TARGET_LIST_INCORRECT = `-1073727281`;
export const DFS_ERROR_LINKS_OVERLAP = `-1073727280`;
export const DFS_ERROR_LINK_OVERLAP = `-1073727279`;
export const DFS_ERROR_CREATE_REPARSEPOINT_SUCCESS = 1073756370;
export const DFS_ERROR_DUPLICATE_LINK = `-1073727277`;
export const DFS_ERROR_TRUSTED_DOMAIN_INFO_FAILED = `-1073727276`;
export const DFS_INFO_TRUSTED_DOMAIN_INFO_SUCCESS = 1073756373;
export const DFS_ERROR_CROSS_FOREST_TRUST_INFO_FAILED = `-1073727274`;
export const DFS_INFO_CROSS_FOREST_TRUST_INFO_SUCCESS = 1073756375;
export const DFS_INIT_SUCCESS = 1073756376;
export const DFS_ROOT_SHARE_ACQUIRE_FAILED = `-2147469095`;
export const DFS_ROOT_SHARE_ACQUIRE_SUCCESS = 1073756378;
export const EVENT_BRIDGE_PROTOCOL_REGISTER_FAILED = `-1073727224`;
export const EVENT_BRIDGE_MINIPROT_DEVNAME_MISSING = `-1073727223`;
export const EVENT_BRIDGE_MINIPORT_REGISTER_FAILED = `-1073727222`;
export const EVENT_BRIDGE_DEVICE_CREATION_FAILED = `-1073727221`;
export const EVENT_BRIDGE_NO_BRIDGE_MAC_ADDR = `-1073727220`;
export const EVENT_BRIDGE_MINIPORT_INIT_FAILED = `-1073727219`;
export const EVENT_BRIDGE_ETHERNET_NOT_OFFERED = `-1073727218`;
export const EVENT_BRIDGE_THREAD_CREATION_FAILED = `-1073727217`;
export const EVENT_BRIDGE_THREAD_REF_FAILED = `-1073727216`;
export const EVENT_BRIDGE_PACKET_POOL_CREATION_FAILED = `-1073727215`;
export const EVENT_BRIDGE_BUFFER_POOL_CREATION_FAILED = `-1073727214`;
export const EVENT_BRIDGE_INIT_MALLOC_FAILED = `-1073727213`;
export const EVENT_BRIDGE_ADAPTER_LINK_SPEED_QUERY_FAILED = `-1073727124`;
export const EVENT_BRIDGE_ADAPTER_MAC_ADDR_QUERY_FAILED = `-1073727123`;
export const EVENT_BRIDGE_ADAPTER_FILTER_FAILED = `-1073727122`;
export const EVENT_BRIDGE_ADAPTER_NAME_QUERY_FAILED = `-1073727121`;
export const EVENT_BRIDGE_ADAPTER_BIND_FAILED = `-1073727120`;
export const EVENT_DAV_REDIR_DELAYED_WRITE_FAILED = `-2147468848`;
export const EVENT_WEBCLIENT_CLOSE_PUT_FAILED = `-2147468747`;
export const EVENT_WEBCLIENT_CLOSE_DELETE_FAILED = `-2147468746`;
export const EVENT_WEBCLIENT_CLOSE_PROPPATCH_FAILED = `-2147468745`;
export const EVENT_WEBCLIENT_SETINFO_PROPPATCH_FAILED = `-2147468744`;
export const EVENT_WSK_OWNINGTHREAD_PARAMETER_IGNORED = `-1073725824`;
export const EVENT_WINSOCK_TDI_FILTER_DETECTED = `-2147467647`;
export const EVENT_WINSOCK_CLOSESOCKET_STUCK = `-2147467646`;
export const EVENT_EQOS_INFO_MACHINE_POLICY_REFRESH_NO_CHANGE = 1073758324;
export const EVENT_EQOS_INFO_MACHINE_POLICY_REFRESH_WITH_CHANGE = 1073758325;
export const EVENT_EQOS_INFO_USER_POLICY_REFRESH_NO_CHANGE = 1073758326;
export const EVENT_EQOS_INFO_USER_POLICY_REFRESH_WITH_CHANGE = 1073758327;
export const EVENT_EQOS_INFO_TCP_AUTOTUNING_NOT_CONFIGURED = 1073758328;
export const EVENT_EQOS_INFO_TCP_AUTOTUNING_OFF = 1073758329;
export const EVENT_EQOS_INFO_TCP_AUTOTUNING_HIGHLY_RESTRICTED = 1073758330;
export const EVENT_EQOS_INFO_TCP_AUTOTUNING_RESTRICTED = 1073758331;
export const EVENT_EQOS_INFO_TCP_AUTOTUNING_NORMAL = 1073758332;
export const EVENT_EQOS_INFO_APP_MARKING_NOT_CONFIGURED = 1073758333;
export const EVENT_EQOS_INFO_APP_MARKING_IGNORED = 1073758334;
export const EVENT_EQOS_INFO_APP_MARKING_ALLOWED = 1073758335;
export const EVENT_EQOS_INFO_LOCAL_SETTING_DONT_USE_NLA = 1073758336;
export const EVENT_EQOS_URL_QOS_APPLICATION_CONFLICT = 1073758337;
export const EVENT_EQOS_WARNING_TEST_1 = `-2147467048`;
export const EVENT_EQOS_WARNING_TEST_2 = `-2147467047`;
export const EVENT_EQOS_WARNING_MACHINE_POLICY_VERSION = `-2147467046`;
export const EVENT_EQOS_WARNING_USER_POLICY_VERSION = `-2147467045`;
export const EVENT_EQOS_WARNING_MACHINE_POLICY_PROFILE_NOT_SPECIFIED = `-2147467044`;
export const EVENT_EQOS_WARNING_USER_POLICY_PROFILE_NOT_SPECIFIED = `-2147467043`;
export const EVENT_EQOS_WARNING_MACHINE_POLICY_QUOTA_EXCEEDED = `-2147467042`;
export const EVENT_EQOS_WARNING_USER_POLICY_QUOTA_EXCEEDED = `-2147467041`;
export const EVENT_EQOS_WARNING_MACHINE_POLICY_CONFLICT = `-2147467040`;
export const EVENT_EQOS_WARNING_USER_POLICY_CONFLICT = `-2147467039`;
export const EVENT_EQOS_WARNING_MACHINE_POLICY_NO_FULLPATH_APPNAME = `-2147467038`;
export const EVENT_EQOS_WARNING_USER_POLICY_NO_FULLPATH_APPNAME = `-2147467037`;
export const EVENT_EQOS_ERROR_MACHINE_POLICY_REFERESH = `-1073725124`;
export const EVENT_EQOS_ERROR_USER_POLICY_REFERESH = `-1073725123`;
export const EVENT_EQOS_ERROR_OPENING_MACHINE_POLICY_ROOT_KEY = `-1073725122`;
export const EVENT_EQOS_ERROR_OPENING_USER_POLICY_ROOT_KEY = `-1073725121`;
export const EVENT_EQOS_ERROR_MACHINE_POLICY_KEYNAME_TOO_LONG = `-1073725120`;
export const EVENT_EQOS_ERROR_USER_POLICY_KEYNAME_TOO_LONG = `-1073725119`;
export const EVENT_EQOS_ERROR_MACHINE_POLICY_KEYNAME_SIZE_ZERO = `-1073725118`;
export const EVENT_EQOS_ERROR_USER_POLICY_KEYNAME_SIZE_ZERO = `-1073725117`;
export const EVENT_EQOS_ERROR_OPENING_MACHINE_POLICY_SUBKEY = `-1073725116`;
export const EVENT_EQOS_ERROR_OPENING_USER_POLICY_SUBKEY = `-1073725115`;
export const EVENT_EQOS_ERROR_PROCESSING_MACHINE_POLICY_FIELD = `-1073725114`;
export const EVENT_EQOS_ERROR_PROCESSING_USER_POLICY_FIELD = `-1073725113`;
export const EVENT_EQOS_ERROR_SETTING_TCP_AUTOTUNING = `-1073725112`;
export const EVENT_EQOS_ERROR_SETTING_APP_MARKING = `-1073725111`;
export const EVENT_WINNAT_SESSION_LIMIT_REACHED = `-2147466648`;
export const HARDWARE_ADDRESS_LENGTH = 6;
export const NETMAN_VARTYPE_ULONG = 0;
export const NETMAN_VARTYPE_HARDWARE_ADDRESS = 1;
export const NETMAN_VARTYPE_STRING = 2;
export const REPL_ROLE_EXPORT = 1;
export const REPL_ROLE_IMPORT = 2;
export const REPL_ROLE_BOTH = 3;
export const REPL_INTERVAL_INFOLEVEL = 1000;
export const REPL_PULSE_INFOLEVEL = 1001;
export const REPL_GUARDTIME_INFOLEVEL = 1002;
export const REPL_RANDOM_INFOLEVEL = 1003;
export const REPL_INTEGRITY_FILE = 1;
export const REPL_INTEGRITY_TREE = 2;
export const REPL_EXTENT_FILE = 1;
export const REPL_EXTENT_TREE = 2;
export const REPL_EXPORT_INTEGRITY_INFOLEVEL = 1000;
export const REPL_EXPORT_EXTENT_INFOLEVEL = 1001;
export const REPL_UNLOCK_NOFORCE = 0;
export const REPL_UNLOCK_FORCE = 1;
export const REPL_STATE_OK = 0;
export const REPL_STATE_NO_MASTER = 1;
export const REPL_STATE_NO_SYNC = 2;
export const REPL_STATE_NEVER_REPLICATED = 3;
export const SERVICE_WORKSTATION = `LanmanWorkstation`;
export const SERVICE_LM20_WORKSTATION = `WORKSTATION`;
export const WORKSTATION_DISPLAY_NAME = `Workstation`;
export const SERVICE_SERVER = `LanmanServer`;
export const SERVICE_LM20_SERVER = `SERVER`;
export const SERVER_DISPLAY_NAME = `Server`;
export const SERVICE_BROWSER = `BROWSER`;
export const SERVICE_LM20_BROWSER = `BROWSER`;
export const SERVICE_MESSENGER = `MESSENGER`;
export const SERVICE_LM20_MESSENGER = `MESSENGER`;
export const SERVICE_NETRUN = `NETRUN`;
export const SERVICE_LM20_NETRUN = `NETRUN`;
export const SERVICE_SPOOLER = `SPOOLER`;
export const SERVICE_LM20_SPOOLER = `SPOOLER`;
export const SERVICE_ALERTER = `ALERTER`;
export const SERVICE_LM20_ALERTER = `ALERTER`;
export const SERVICE_NETLOGON = `NETLOGON`;
export const SERVICE_LM20_NETLOGON = `NETLOGON`;
export const SERVICE_NETPOPUP = `NETPOPUP`;
export const SERVICE_LM20_NETPOPUP = `NETPOPUP`;
export const SERVICE_SQLSERVER = `SQLSERVER`;
export const SERVICE_LM20_SQLSERVER = `SQLSERVER`;
export const SERVICE_REPL = `REPLICATOR`;
export const SERVICE_LM20_REPL = `REPLICATOR`;
export const SERVICE_RIPL = `REMOTEBOOT`;
export const SERVICE_LM20_RIPL = `REMOTEBOOT`;
export const SERVICE_TIMESOURCE = `TIMESOURCE`;
export const SERVICE_LM20_TIMESOURCE = `TIMESOURCE`;
export const SERVICE_AFP = `AFP`;
export const SERVICE_LM20_AFP = `AFP`;
export const SERVICE_UPS = `UPS`;
export const SERVICE_LM20_UPS = `UPS`;
export const SERVICE_XACTSRV = `XACTSRV`;
export const SERVICE_LM20_XACTSRV = `XACTSRV`;
export const SERVICE_TCPIP = `TCPIP`;
export const SERVICE_LM20_TCPIP = `TCPIP`;
export const SERVICE_NBT = `NBT`;
export const SERVICE_LM20_NBT = `NBT`;
export const SERVICE_LMHOSTS = `LMHOSTS`;
export const SERVICE_LM20_LMHOSTS = `LMHOSTS`;
export const SERVICE_TELNET = `Telnet`;
export const SERVICE_LM20_TELNET = `Telnet`;
export const SERVICE_SCHEDULE = `Schedule`;
export const SERVICE_LM20_SCHEDULE = `Schedule`;
export const SERVICE_NTLMSSP = `NtLmSsp`;
export const SERVICE_DHCP = `DHCP`;
export const SERVICE_LM20_DHCP = `DHCP`;
export const SERVICE_NWSAP = `NwSapAgent`;
export const SERVICE_LM20_NWSAP = `NwSapAgent`;
export const NWSAP_DISPLAY_NAME = `NW Sap Agent`;
export const SERVICE_NWCS = `NWCWorkstation`;
export const SERVICE_DNS_CACHE = `DnsCache`;
export const SERVICE_W32TIME = `w32time`;
export const SERVCE_LM20_W32TIME = `w32time`;
export const SERVICE_KDC = `kdc`;
export const SERVICE_LM20_KDC = `kdc`;
export const SERVICE_RPCLOCATOR = `RPCLOCATOR`;
export const SERVICE_LM20_RPCLOCATOR = `RPCLOCATOR`;
export const SERVICE_TRKSVR = `TrkSvr`;
export const SERVICE_LM20_TRKSVR = `TrkSvr`;
export const SERVICE_TRKWKS = `TrkWks`;
export const SERVICE_LM20_TRKWKS = `TrkWks`;
export const SERVICE_NTFRS = `NtFrs`;
export const SERVICE_LM20_NTFRS = `NtFrs`;
export const SERVICE_ISMSERV = `IsmServ`;
export const SERVICE_LM20_ISMSERV = `IsmServ`;
export const SERVICE_NTDS = `NTDS`;
export const SERVICE_LM20_NTDS = `NTDS`;
export const SERVICE_ADWS = `ADWS`;
export const SERVICE_DSROLE = `DsRoleSvc`;
export const SERVICE_LM20_DSROLE = `DsRoleSvc`;
export const NETCFG_E_ALREADY_INITIALIZED = 333302675636789280n;
export const NETCFG_E_NOT_INITIALIZED = 333303775148417057n;
export const NETCFG_E_IN_USE = 333304874660044834n;
export const NETCFG_E_NO_WRITE_LOCK = 333307073683300388n;
export const NETCFG_E_NEED_REBOOT = 333308173194928165n;
export const NETCFG_E_ACTIVE_RAS_CONNECTIONS = 333309272706555942n;
export const NETCFG_E_ADAPTER_NOT_FOUND = 333310372218183719n;
export const NETCFG_E_COMPONENT_REMOVED_PENDING_REBOOT = 333311471729811496n;
export const NETCFG_E_MAX_FILTER_LIMIT = 333319168311205929n;
export const NETCFG_E_VMSWITCH_ACTIVE_OVER_ADAPTER = 333313670753067050n;
export const NETCFG_E_DUPLICATE_INSTANCEID = 333301576125161515n;
export const NETCFG_S_REBOOT = 333303773000933408n;
export const NETCFG_S_DISABLE_QUERY = 333304872512561186n;
export const NETCFG_S_STILL_REFERENCED = 333305972024188963n;
export const NETCFG_S_CAUSED_SETUP_CHANGE = 333307071535816740n;
export const NETCFG_S_COMMIT_NOW = 8286743255618723877n;
export const NETCFG_CLIENT_CID_MS_MSClient = `ms_msclient`;
export const NETCFG_SERVICE_CID_MS_SERVER = `ms_server`;
export const NETCFG_SERVICE_CID_MS_NETBIOS = `ms_netbios`;
export const NETCFG_SERVICE_CID_MS_PSCHED = `ms_pschedpc`;
export const NETCFG_SERVICE_CID_MS_WLBS = `ms_wlbs`;
export const NETCFG_TRANS_CID_MS_APPLETALK = `ms_appletalk`;
export const NETCFG_TRANS_CID_MS_NETBEUI = `ms_netbeui`;
export const NETCFG_TRANS_CID_MS_NETMON = `ms_netmon`;
export const NETCFG_TRANS_CID_MS_NWIPX = `ms_nwipx`;
export const NETCFG_TRANS_CID_MS_NWSPX = `ms_nwspx`;
export const NETCFG_TRANS_CID_MS_TCPIP = `ms_tcpip`;
export const WZC_PROFILE_SUCCESS = 0;
export const WZC_PROFILE_XML_ERROR_NO_VERSION = 1;
export const WZC_PROFILE_XML_ERROR_BAD_VERSION = 2;
export const WZC_PROFILE_XML_ERROR_UNSUPPORTED_VERSION = 3;
export const WZC_PROFILE_XML_ERROR_SSID_NOT_FOUND = 4;
export const WZC_PROFILE_XML_ERROR_BAD_SSID = 5;
export const WZC_PROFILE_XML_ERROR_CONNECTION_TYPE = 6;
export const WZC_PROFILE_XML_ERROR_AUTHENTICATION = 7;
export const WZC_PROFILE_XML_ERROR_ENCRYPTION = 8;
export const WZC_PROFILE_XML_ERROR_KEY_PROVIDED_AUTOMATICALLY = 9;
export const WZC_PROFILE_XML_ERROR_1X_ENABLED = 10;
export const WZC_PROFILE_XML_ERROR_EAP_METHOD = 11;
export const WZC_PROFILE_XML_ERROR_BAD_KEY_INDEX = 12;
export const WZC_PROFILE_XML_ERROR_KEY_INDEX_RANGE = 13;
export const WZC_PROFILE_XML_ERROR_BAD_NETWORK_KEY = 14;
export const WZC_PROFILE_CONFIG_ERROR_INVALID_AUTH_FOR_CONNECTION_TYPE = 15;
export const WZC_PROFILE_CONFIG_ERROR_INVALID_ENCRYPTION_FOR_AUTHMODE = 16;
export const WZC_PROFILE_CONFIG_ERROR_KEY_REQUIRED = 17;
export const WZC_PROFILE_CONFIG_ERROR_KEY_INDEX_REQUIRED = 18;
export const WZC_PROFILE_CONFIG_ERROR_KEY_INDEX_NOT_APPLICABLE = 19;
export const WZC_PROFILE_CONFIG_ERROR_1X_NOT_ALLOWED = 20;
export const WZC_PROFILE_CONFIG_ERROR_1X_NOT_ALLOWED_KEY_REQUIRED = 21;
export const WZC_PROFILE_CONFIG_ERROR_1X_NOT_ENABLED_KEY_PROVIDED = 22;
export const WZC_PROFILE_CONFIG_ERROR_EAP_METHOD_REQUIRED = 23;
export const WZC_PROFILE_CONFIG_ERROR_EAP_METHOD_NOT_APPLICABLE = 24;
export const WZC_PROFILE_CONFIG_ERROR_WPA_NOT_SUPPORTED = 25;
export const WZC_PROFILE_CONFIG_ERROR_WPA_ENCRYPTION_NOT_SUPPORTED = 26;
export const WZC_PROFILE_SET_ERROR_DUPLICATE_NETWORK = 27;
export const WZC_PROFILE_SET_ERROR_MEMORY_ALLOCATION = 28;
export const WZC_PROFILE_SET_ERROR_READING_1X_CONFIG = 29;
export const WZC_PROFILE_SET_ERROR_WRITING_1X_CONFIG = 30;
export const WZC_PROFILE_SET_ERROR_WRITING_WZC_CFG = 31;
export const WZC_PROFILE_API_ERROR_NOT_SUPPORTED = 32;
export const WZC_PROFILE_API_ERROR_FAILED_TO_LOAD_XML = 33;
export const WZC_PROFILE_API_ERROR_FAILED_TO_LOAD_SCHEMA = 34;
export const WZC_PROFILE_API_ERROR_XML_VALIDATION_FAILED = 35;
export const WZC_PROFILE_API_ERROR_INTERNAL = 36;
export const RF_ROUTING = 1;
export const RF_ROUTINGV6 = 2;
export const RF_DEMAND_UPDATE_ROUTES = 4;
export const RF_ADD_ALL_INTERFACES = 16;
export const RF_MULTICAST = 32;
export const RF_POWER = 64;
export const MS_ROUTER_VERSION = 1536;
export const ROUTING_DOMAIN_INFO_REVISION_1 = 1;
export const INTERFACE_INFO_REVISION_1 = 1;
export const IR_PROMISCUOUS = 0;
export const IR_PROMISCUOUS_MULTICAST = 1;
export const PROTO_IP_MSDP = 9;
export const PROTO_IP_IGMP = 10;
export const PROTO_IP_BGMP = 11;
export const PROTO_IP_VRRP = 112;
export const PROTO_IP_BOOTP = 9999;
export const PROTO_IPV6_DHCP = 999;
export const PROTO_IP_DNS_PROXY = 10003;
export const PROTO_IP_DHCP_ALLOCATOR = 10004;
export const PROTO_IP_NAT = 10005;
export const PROTO_IP_DIFFSERV = 10008;
export const PROTO_IP_MGM = 10009;
export const PROTO_IP_ALG = 10010;
export const PROTO_IP_H323 = 10011;
export const PROTO_IP_FTP = 10012;
export const PROTO_IP_DTP = 10013;
export const PROTO_TYPE_UCAST = 0;
export const PROTO_TYPE_MCAST = 1;
export const PROTO_TYPE_MS0 = 2;
export const PROTO_TYPE_MS1 = 3;
export const PROTO_VENDOR_MS0 = 0;
export const PROTO_VENDOR_MS1 = 311;
export const PROTO_VENDOR_MS2 = 16383;
export const IPX_PROTOCOL_BASE = 131071;
export const IPX_PROTOCOL_RIP = 131072;
export const RIS_INTERFACE_ADDRESS_CHANGE = 0;
export const RIS_INTERFACE_ENABLED = 1;
export const RIS_INTERFACE_DISABLED = 2;
export const RIS_INTERFACE_MEDIA_PRESENT = 3;
export const RIS_INTERFACE_MEDIA_ABSENT = 4;
export const MRINFO_TUNNEL_FLAG = 1;
export const MRINFO_PIM_FLAG = 4;
export const MRINFO_DOWN_FLAG = 16;
export const MRINFO_DISABLED_FLAG = 32;
export const MRINFO_QUERIER_FLAG = 64;
export const MRINFO_LEAF_FLAG = 128;
export const MFE_NO_ERROR = 0;
export const MFE_REACHED_CORE = 1;
export const MFE_OIF_PRUNED = 5;
export const MFE_PRUNED_UPSTREAM = 4;
export const MFE_OLD_ROUTER = 11;
export const MFE_NOT_FORWARDING = 2;
export const MFE_WRONG_IF = 3;
export const MFE_BOUNDARY_REACHED = 6;
export const MFE_NO_MULTICAST = 7;
export const MFE_IIF = 8;
export const MFE_NO_ROUTE = 9;
export const MFE_NOT_LAST_HOP = 10;
export const MFE_PROHIBITED = 12;
export const MFE_NO_SPACE = 13;
export const REGISTER_PROTOCOL_ENTRY_POINT_STRING = `RegisterProtocol`;
export const ALIGN_SIZE = 8;
export const RTR_INFO_BLOCK_VERSION = 1;
export const TRACE_USE_FILE = 1;
export const TRACE_USE_CONSOLE = 2;
export const TRACE_NO_SYNCH = 4;
export const TRACE_NO_STDINFO = 1;
export const TRACE_USE_MASK = 2;
export const TRACE_USE_MSEC = 4;
export const TRACE_USE_DATE = 8;
export const INVALID_TRACEID = 4294967295;
export const RTUTILS_MAX_PROTOCOL_NAME_LEN = 40;
export const RTUTILS_MAX_PROTOCOL_DLL_LEN = 48;
export const MAX_PROTOCOL_NAME_LEN = 40;
export const MAX_PROTOCOL_DLL_LEN = 48;
export const SidTypeUser = 1;
export const SidTypeGroup = 2;
export const SidTypeDomain = 3;
export const SidTypeAlias = 4;
export const SidTypeWellKnownGroup = 5;
export const SidTypeDeletedAccount = 6;
export const SidTypeInvalid = 7;
export const SidTypeUnknown = 8;
export const SidTypeComputer = 9;
export const SidTypeLabel = 10;
export const SidTypeLogonSession = 11;
export const NetValidateAuthentication = 1;
export const NetValidatePasswordChange = 2;
export const NetValidatePasswordReset = 3;
export const MsaInfoLevel0 = 0;
export const MsaInfoLevelMax = 1;
export const MsaInfoNotExist = 1;
export const MsaInfoNotService = 2;
export const MsaInfoCannotInstall = 3;
export const MsaInfoCanInstall = 4;
export const MsaInfoInstalled = 5;
export const UseTransportType_None = 0;
export const UseTransportType_Wsk = 1;
export const UseTransportType_Quic = 2;
export const NetSetupUnknown = 0;
export const NetSetupMachine = 1;
export const NetSetupWorkgroup = 2;
export const NetSetupDomain = 3;
export const NetSetupNonExistentDomain = 4;
export const NetSetupDnsMachine = 5;
export const DSREG_UNKNOWN_JOIN = 0;
export const DSREG_DEVICE_JOIN = 1;
export const DSREG_WORKPLACE_JOIN = 2;
export const NetPrimaryComputerName = 0;
export const NetAlternateComputerNames = 1;
export const NetAllComputerNames = 2;
export const NetComputerNameTypeMax = 3;
export const NetSetupUnknownStatus = 0;
export const NetSetupUnjoined = 1;
export const NetSetupWorkgroupName = 2;
export const NetSetupDomainName = 3;
export const OBO_USER = 1;
export const OBO_COMPONENT = 2;
export const OBO_SOFTWARE = 3;
export const NCF_VIRTUAL = 1;
export const NCF_SOFTWARE_ENUMERATED = 2;
export const NCF_PHYSICAL = 4;
export const NCF_HIDDEN = 8;
export const NCF_NO_SERVICE = 16;
export const NCF_NOT_USER_REMOVABLE = 32;
export const NCF_MULTIPORT_INSTANCED_ADAPTER = 64;
export const NCF_HAS_UI = 128;
export const NCF_SINGLE_INSTANCE = 256;
export const NCF_FILTER = 1024;
export const NCF_DONTEXPOSELOWER = 4096;
export const NCF_HIDE_BINDING = 8192;
export const NCF_NDIS_PROTOCOL = 16384;
export const NCF_FIXED_BINDING = 131072;
export const NCF_LW_FILTER = 262144;
export const NCRP_QUERY_PROPERTY_UI = 1;
export const NCRP_SHOW_PROPERTY_UI = 2;
export const NCF_LOWER = 1;
export const NCF_UPPER = 2;
export const EBP_ABOVE = 1;
export const EBP_BELOW = 2;
export const NCRL_NDIS = 1;
export const NCRL_TDI = 2;
export const NSF_PRIMARYINSTALL = 1;
export const NSF_POSTSYSINSTALL = 2;
export const NSF_WIN16_UPGRADE = 16;
export const NSF_WIN95_UPGRADE = 32;
export const NSF_WINNT_WKS_UPGRADE = 64;
export const NSF_WINNT_SVR_UPGRADE = 128;
export const NSF_WINNT_SBS_UPGRADE = 256;
export const NSF_COMPONENT_UPDATE = 512;
export const DPP_ADVANCED = 1;
export const NCN_ADD = 1;
export const NCN_REMOVE = 2;
export const NCN_UPDATE = 4;
export const NCN_ENABLE = 16;
export const NCN_DISABLE = 32;
export const NCN_BINDING_PATH = 256;
export const NCN_PROPERTYCHANGE = 512;
export const NCN_NET = 65536;
export const NCN_NETTRANS = 131072;
export const NCN_NETCLIENT = 262144;
export const NCN_NETSERVICE = 524288;
export const RCUIF_VPN = 1;
export const RCUIF_DEMAND_DIAL = 2;
export const RCUIF_NOT_ADMIN = 4;
export const RCUIF_USE_IPv4_STATICADDRESS = 8;
export const RCUIF_USE_IPv4_NAME_SERVERS = 16;
export const RCUIF_USE_IPv4_REMOTE_GATEWAY = 32;
export const RCUIF_USE_IPv4_EXPLICIT_METRIC = 64;
export const RCUIF_USE_HEADER_COMPRESSION = 128;
export const RCUIF_USE_DISABLE_REGISTER_DNS = 256;
export const RCUIF_USE_PRIVATE_DNS_SUFFIX = 512;
export const RCUIF_ENABLE_NBT = 1024;
export const RCUIF_USE_IPv6_STATICADDRESS = 2048;
export const RCUIF_USE_IPv6_NAME_SERVERS = 4096;
export const RCUIF_USE_IPv6_REMOTE_GATEWAY = 8192;
export const RCUIF_USE_IPv6_EXPLICIT_METRIC = 16384;
export const RCUIF_DISABLE_CLASS_BASED_ROUTE = 32768;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_0 (size: 8)
 */
export interface USER_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  usri0_name: string | null;
}

export const sizeofUSER_INFO_0 = 8;

export function allocUSER_INFO_0(data?: Partial<USER_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri0_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri0_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1 (size: 56)
 */
export interface USER_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri1_password: string | null;
  /** u32 */
  usri1_password_age: number;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_PRIV */
  usri1_priv: USER_PRIV;
  /** Windows.Win32.Foundation.PWSTR */
  usri1_home_dir: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri1_comment: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_ACCOUNT_FLAGS */
  usri1_flags: USER_ACCOUNT_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  usri1_script_path: string | null;
}

export const sizeofUSER_INFO_1 = 56;

export function allocUSER_INFO_1(data?: Partial<USER_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.usri1_password !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usri1_password);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.usri1_password_age !== undefined) view.setUint32(16, Number(data.usri1_password_age), true);
  // 0x14: u32
  if (data?.usri1_priv !== undefined) view.setUint32(20, Number(data.usri1_priv), true);
  // 0x18: buffer
  if (data?.usri1_home_dir !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.usri1_home_dir);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.usri1_comment !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.usri1_comment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.usri1_flags !== undefined) view.setUint32(40, Number(data.usri1_flags), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.usri1_script_path !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.usri1_script_path);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_2 (size: 152)
 */
export interface USER_INFO_2 {
  /** Windows.Win32.Foundation.PWSTR */
  usri2_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri2_password: string | null;
  /** u32 */
  usri2_password_age: number;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_PRIV */
  usri2_priv: USER_PRIV;
  /** Windows.Win32.Foundation.PWSTR */
  usri2_home_dir: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri2_comment: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_ACCOUNT_FLAGS */
  usri2_flags: USER_ACCOUNT_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  usri2_script_path: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.AF_OP */
  usri2_auth_flags: AF_OP;
  /** Windows.Win32.Foundation.PWSTR */
  usri2_full_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri2_usr_comment: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri2_parms: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri2_workstations: string | null;
  /** u32 */
  usri2_last_logon: number;
  /** u32 */
  usri2_last_logoff: number;
  /** u32 */
  usri2_acct_expires: number;
  /** u32 */
  usri2_max_storage: number;
  /** u32 */
  usri2_units_per_week: number;
  /** ptr */
  usri2_logon_hours: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  usri2_bad_pw_count: number;
  /** u32 */
  usri2_num_logons: number;
  /** Windows.Win32.Foundation.PWSTR */
  usri2_logon_server: string | null;
  /** u32 */
  usri2_country_code: number;
  /** u32 */
  usri2_code_page: number;
}

export const sizeofUSER_INFO_2 = 152;

export function allocUSER_INFO_2(data?: Partial<USER_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri2_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri2_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.usri2_password !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usri2_password);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.usri2_password_age !== undefined) view.setUint32(16, Number(data.usri2_password_age), true);
  // 0x14: u32
  if (data?.usri2_priv !== undefined) view.setUint32(20, Number(data.usri2_priv), true);
  // 0x18: buffer
  if (data?.usri2_home_dir !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.usri2_home_dir);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.usri2_comment !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.usri2_comment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.usri2_flags !== undefined) view.setUint32(40, Number(data.usri2_flags), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.usri2_script_path !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.usri2_script_path);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.usri2_auth_flags !== undefined) view.setUint32(56, Number(data.usri2_auth_flags), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.usri2_full_name !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.usri2_full_name);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.usri2_usr_comment !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.usri2_usr_comment);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.usri2_parms !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.usri2_parms);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.usri2_workstations !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.usri2_workstations);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.usri2_last_logon !== undefined) view.setUint32(96, Number(data.usri2_last_logon), true);
  // 0x64: u32
  if (data?.usri2_last_logoff !== undefined) view.setUint32(100, Number(data.usri2_last_logoff), true);
  // 0x68: u32
  if (data?.usri2_acct_expires !== undefined) view.setUint32(104, Number(data.usri2_acct_expires), true);
  // 0x6c: u32
  if (data?.usri2_max_storage !== undefined) view.setUint32(108, Number(data.usri2_max_storage), true);
  // 0x70: u32
  if (data?.usri2_units_per_week !== undefined) view.setUint32(112, Number(data.usri2_units_per_week), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.usri2_logon_hours !== undefined) view.setBigUint64(120, data.usri2_logon_hours === null ? 0n : BigInt(util.toPointer(data.usri2_logon_hours)), true);
  // 0x80: u32
  if (data?.usri2_bad_pw_count !== undefined) view.setUint32(128, Number(data.usri2_bad_pw_count), true);
  // 0x84: u32
  if (data?.usri2_num_logons !== undefined) view.setUint32(132, Number(data.usri2_num_logons), true);
  // 0x88: buffer
  if (data?.usri2_logon_server !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.usri2_logon_server);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: u32
  if (data?.usri2_country_code !== undefined) view.setUint32(144, Number(data.usri2_country_code), true);
  // 0x94: u32
  if (data?.usri2_code_page !== undefined) view.setUint32(148, Number(data.usri2_code_page), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_3 (size: 184)
 */
export interface USER_INFO_3 {
  /** Windows.Win32.Foundation.PWSTR */
  usri3_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri3_password: string | null;
  /** u32 */
  usri3_password_age: number;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_PRIV */
  usri3_priv: USER_PRIV;
  /** Windows.Win32.Foundation.PWSTR */
  usri3_home_dir: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri3_comment: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_ACCOUNT_FLAGS */
  usri3_flags: USER_ACCOUNT_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  usri3_script_path: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.AF_OP */
  usri3_auth_flags: AF_OP;
  /** Windows.Win32.Foundation.PWSTR */
  usri3_full_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri3_usr_comment: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri3_parms: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri3_workstations: string | null;
  /** u32 */
  usri3_last_logon: number;
  /** u32 */
  usri3_last_logoff: number;
  /** u32 */
  usri3_acct_expires: number;
  /** u32 */
  usri3_max_storage: number;
  /** u32 */
  usri3_units_per_week: number;
  /** ptr */
  usri3_logon_hours: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  usri3_bad_pw_count: number;
  /** u32 */
  usri3_num_logons: number;
  /** Windows.Win32.Foundation.PWSTR */
  usri3_logon_server: string | null;
  /** u32 */
  usri3_country_code: number;
  /** u32 */
  usri3_code_page: number;
  /** u32 */
  usri3_user_id: number;
  /** u32 */
  usri3_primary_group_id: number;
  /** Windows.Win32.Foundation.PWSTR */
  usri3_profile: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri3_home_dir_drive: string | null;
  /** u32 */
  usri3_password_expired: number;
}

export const sizeofUSER_INFO_3 = 184;

export function allocUSER_INFO_3(data?: Partial<USER_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri3_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri3_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.usri3_password !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usri3_password);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.usri3_password_age !== undefined) view.setUint32(16, Number(data.usri3_password_age), true);
  // 0x14: u32
  if (data?.usri3_priv !== undefined) view.setUint32(20, Number(data.usri3_priv), true);
  // 0x18: buffer
  if (data?.usri3_home_dir !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.usri3_home_dir);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.usri3_comment !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.usri3_comment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.usri3_flags !== undefined) view.setUint32(40, Number(data.usri3_flags), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.usri3_script_path !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.usri3_script_path);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.usri3_auth_flags !== undefined) view.setUint32(56, Number(data.usri3_auth_flags), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.usri3_full_name !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.usri3_full_name);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.usri3_usr_comment !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.usri3_usr_comment);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.usri3_parms !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.usri3_parms);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.usri3_workstations !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.usri3_workstations);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.usri3_last_logon !== undefined) view.setUint32(96, Number(data.usri3_last_logon), true);
  // 0x64: u32
  if (data?.usri3_last_logoff !== undefined) view.setUint32(100, Number(data.usri3_last_logoff), true);
  // 0x68: u32
  if (data?.usri3_acct_expires !== undefined) view.setUint32(104, Number(data.usri3_acct_expires), true);
  // 0x6c: u32
  if (data?.usri3_max_storage !== undefined) view.setUint32(108, Number(data.usri3_max_storage), true);
  // 0x70: u32
  if (data?.usri3_units_per_week !== undefined) view.setUint32(112, Number(data.usri3_units_per_week), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.usri3_logon_hours !== undefined) view.setBigUint64(120, data.usri3_logon_hours === null ? 0n : BigInt(util.toPointer(data.usri3_logon_hours)), true);
  // 0x80: u32
  if (data?.usri3_bad_pw_count !== undefined) view.setUint32(128, Number(data.usri3_bad_pw_count), true);
  // 0x84: u32
  if (data?.usri3_num_logons !== undefined) view.setUint32(132, Number(data.usri3_num_logons), true);
  // 0x88: buffer
  if (data?.usri3_logon_server !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.usri3_logon_server);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: u32
  if (data?.usri3_country_code !== undefined) view.setUint32(144, Number(data.usri3_country_code), true);
  // 0x94: u32
  if (data?.usri3_code_page !== undefined) view.setUint32(148, Number(data.usri3_code_page), true);
  // 0x98: u32
  if (data?.usri3_user_id !== undefined) view.setUint32(152, Number(data.usri3_user_id), true);
  // 0x9c: u32
  if (data?.usri3_primary_group_id !== undefined) view.setUint32(156, Number(data.usri3_primary_group_id), true);
  // 0xa0: buffer
  if (data?.usri3_profile !== undefined) {
    (buf as any)._f160 = util.pwstrToFfi(data.usri3_profile);
    view.setBigUint64(160, (buf as any)._f160 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f160)), true);
  }
  // 0xa8: buffer
  if (data?.usri3_home_dir_drive !== undefined) {
    (buf as any)._f168 = util.pwstrToFfi(data.usri3_home_dir_drive);
    view.setBigUint64(168, (buf as any)._f168 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f168)), true);
  }
  // 0xb0: u32
  if (data?.usri3_password_expired !== undefined) view.setUint32(176, Number(data.usri3_password_expired), true);
  // 0xb4: pad4
  return buf;
}

export type PSID = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_4 (size: 192)
 */
export interface USER_INFO_4 {
  /** Windows.Win32.Foundation.PWSTR */
  usri4_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri4_password: string | null;
  /** u32 */
  usri4_password_age: number;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_PRIV */
  usri4_priv: USER_PRIV;
  /** Windows.Win32.Foundation.PWSTR */
  usri4_home_dir: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri4_comment: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_ACCOUNT_FLAGS */
  usri4_flags: USER_ACCOUNT_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  usri4_script_path: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.AF_OP */
  usri4_auth_flags: AF_OP;
  /** Windows.Win32.Foundation.PWSTR */
  usri4_full_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri4_usr_comment: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri4_parms: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri4_workstations: string | null;
  /** u32 */
  usri4_last_logon: number;
  /** u32 */
  usri4_last_logoff: number;
  /** u32 */
  usri4_acct_expires: number;
  /** u32 */
  usri4_max_storage: number;
  /** u32 */
  usri4_units_per_week: number;
  /** ptr */
  usri4_logon_hours: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  usri4_bad_pw_count: number;
  /** u32 */
  usri4_num_logons: number;
  /** Windows.Win32.Foundation.PWSTR */
  usri4_logon_server: string | null;
  /** u32 */
  usri4_country_code: number;
  /** u32 */
  usri4_code_page: number;
  /** Windows.Win32.Foundation.PSID */
  usri4_user_sid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  usri4_primary_group_id: number;
  /** Windows.Win32.Foundation.PWSTR */
  usri4_profile: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri4_home_dir_drive: string | null;
  /** u32 */
  usri4_password_expired: number;
}

export const sizeofUSER_INFO_4 = 192;

export function allocUSER_INFO_4(data?: Partial<USER_INFO_4>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_4);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri4_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri4_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.usri4_password !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usri4_password);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.usri4_password_age !== undefined) view.setUint32(16, Number(data.usri4_password_age), true);
  // 0x14: u32
  if (data?.usri4_priv !== undefined) view.setUint32(20, Number(data.usri4_priv), true);
  // 0x18: buffer
  if (data?.usri4_home_dir !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.usri4_home_dir);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.usri4_comment !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.usri4_comment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.usri4_flags !== undefined) view.setUint32(40, Number(data.usri4_flags), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.usri4_script_path !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.usri4_script_path);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.usri4_auth_flags !== undefined) view.setUint32(56, Number(data.usri4_auth_flags), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.usri4_full_name !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.usri4_full_name);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.usri4_usr_comment !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.usri4_usr_comment);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.usri4_parms !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.usri4_parms);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.usri4_workstations !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.usri4_workstations);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.usri4_last_logon !== undefined) view.setUint32(96, Number(data.usri4_last_logon), true);
  // 0x64: u32
  if (data?.usri4_last_logoff !== undefined) view.setUint32(100, Number(data.usri4_last_logoff), true);
  // 0x68: u32
  if (data?.usri4_acct_expires !== undefined) view.setUint32(104, Number(data.usri4_acct_expires), true);
  // 0x6c: u32
  if (data?.usri4_max_storage !== undefined) view.setUint32(108, Number(data.usri4_max_storage), true);
  // 0x70: u32
  if (data?.usri4_units_per_week !== undefined) view.setUint32(112, Number(data.usri4_units_per_week), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.usri4_logon_hours !== undefined) view.setBigUint64(120, data.usri4_logon_hours === null ? 0n : BigInt(util.toPointer(data.usri4_logon_hours)), true);
  // 0x80: u32
  if (data?.usri4_bad_pw_count !== undefined) view.setUint32(128, Number(data.usri4_bad_pw_count), true);
  // 0x84: u32
  if (data?.usri4_num_logons !== undefined) view.setUint32(132, Number(data.usri4_num_logons), true);
  // 0x88: buffer
  if (data?.usri4_logon_server !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.usri4_logon_server);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: u32
  if (data?.usri4_country_code !== undefined) view.setUint32(144, Number(data.usri4_country_code), true);
  // 0x94: u32
  if (data?.usri4_code_page !== undefined) view.setUint32(148, Number(data.usri4_code_page), true);
  // 0x98: pointer
  if (data?.usri4_user_sid !== undefined) view.setBigUint64(152, data.usri4_user_sid === null ? 0n : BigInt(util.toPointer(data.usri4_user_sid)), true);
  // 0xa0: u32
  if (data?.usri4_primary_group_id !== undefined) view.setUint32(160, Number(data.usri4_primary_group_id), true);
  // 0xa4: pad4
  // 0xa8: buffer
  if (data?.usri4_profile !== undefined) {
    (buf as any)._f168 = util.pwstrToFfi(data.usri4_profile);
    view.setBigUint64(168, (buf as any)._f168 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f168)), true);
  }
  // 0xb0: buffer
  if (data?.usri4_home_dir_drive !== undefined) {
    (buf as any)._f176 = util.pwstrToFfi(data.usri4_home_dir_drive);
    view.setBigUint64(176, (buf as any)._f176 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f176)), true);
  }
  // 0xb8: u32
  if (data?.usri4_password_expired !== undefined) view.setUint32(184, Number(data.usri4_password_expired), true);
  // 0xbc: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_10 (size: 32)
 */
export interface USER_INFO_10 {
  /** Windows.Win32.Foundation.PWSTR */
  usri10_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri10_comment: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri10_usr_comment: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri10_full_name: string | null;
}

export const sizeofUSER_INFO_10 = 32;

export function allocUSER_INFO_10(data?: Partial<USER_INFO_10>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_10);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri10_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri10_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.usri10_comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usri10_comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.usri10_usr_comment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.usri10_usr_comment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.usri10_full_name !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.usri10_full_name);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_11 (size: 128)
 */
export interface USER_INFO_11 {
  /** Windows.Win32.Foundation.PWSTR */
  usri11_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri11_comment: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri11_usr_comment: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri11_full_name: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_PRIV */
  usri11_priv: USER_PRIV;
  /** Windows.Win32.NetworkManagement.NetManagement.AF_OP */
  usri11_auth_flags: AF_OP;
  /** u32 */
  usri11_password_age: number;
  /** Windows.Win32.Foundation.PWSTR */
  usri11_home_dir: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri11_parms: string | null;
  /** u32 */
  usri11_last_logon: number;
  /** u32 */
  usri11_last_logoff: number;
  /** u32 */
  usri11_bad_pw_count: number;
  /** u32 */
  usri11_num_logons: number;
  /** Windows.Win32.Foundation.PWSTR */
  usri11_logon_server: string | null;
  /** u32 */
  usri11_country_code: number;
  /** Windows.Win32.Foundation.PWSTR */
  usri11_workstations: string | null;
  /** u32 */
  usri11_max_storage: number;
  /** u32 */
  usri11_units_per_week: number;
  /** ptr */
  usri11_logon_hours: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  usri11_code_page: number;
}

export const sizeofUSER_INFO_11 = 128;

export function allocUSER_INFO_11(data?: Partial<USER_INFO_11>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_11);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri11_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri11_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.usri11_comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usri11_comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.usri11_usr_comment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.usri11_usr_comment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.usri11_full_name !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.usri11_full_name);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.usri11_priv !== undefined) view.setUint32(32, Number(data.usri11_priv), true);
  // 0x24: u32
  if (data?.usri11_auth_flags !== undefined) view.setUint32(36, Number(data.usri11_auth_flags), true);
  // 0x28: u32
  if (data?.usri11_password_age !== undefined) view.setUint32(40, Number(data.usri11_password_age), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.usri11_home_dir !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.usri11_home_dir);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.usri11_parms !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.usri11_parms);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.usri11_last_logon !== undefined) view.setUint32(64, Number(data.usri11_last_logon), true);
  // 0x44: u32
  if (data?.usri11_last_logoff !== undefined) view.setUint32(68, Number(data.usri11_last_logoff), true);
  // 0x48: u32
  if (data?.usri11_bad_pw_count !== undefined) view.setUint32(72, Number(data.usri11_bad_pw_count), true);
  // 0x4c: u32
  if (data?.usri11_num_logons !== undefined) view.setUint32(76, Number(data.usri11_num_logons), true);
  // 0x50: buffer
  if (data?.usri11_logon_server !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.usri11_logon_server);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: u32
  if (data?.usri11_country_code !== undefined) view.setUint32(88, Number(data.usri11_country_code), true);
  // 0x5c: pad4
  // 0x60: buffer
  if (data?.usri11_workstations !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.usri11_workstations);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: u32
  if (data?.usri11_max_storage !== undefined) view.setUint32(104, Number(data.usri11_max_storage), true);
  // 0x6c: u32
  if (data?.usri11_units_per_week !== undefined) view.setUint32(108, Number(data.usri11_units_per_week), true);
  // 0x70: pointer
  if (data?.usri11_logon_hours !== undefined) view.setBigUint64(112, data.usri11_logon_hours === null ? 0n : BigInt(util.toPointer(data.usri11_logon_hours)), true);
  // 0x78: u32
  if (data?.usri11_code_page !== undefined) view.setUint32(120, Number(data.usri11_code_page), true);
  // 0x7c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_20 (size: 32)
 */
export interface USER_INFO_20 {
  /** Windows.Win32.Foundation.PWSTR */
  usri20_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri20_full_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri20_comment: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_ACCOUNT_FLAGS */
  usri20_flags: USER_ACCOUNT_FLAGS;
  /** u32 */
  usri20_user_id: number;
}

export const sizeofUSER_INFO_20 = 32;

export function allocUSER_INFO_20(data?: Partial<USER_INFO_20>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_20);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri20_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri20_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.usri20_full_name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usri20_full_name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.usri20_comment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.usri20_comment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.usri20_flags !== undefined) view.setUint32(24, Number(data.usri20_flags), true);
  // 0x1c: u32
  if (data?.usri20_user_id !== undefined) view.setUint32(28, Number(data.usri20_user_id), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_21 (size: 8)
 */
export interface USER_INFO_21 {
  /** array */
  usri21_password: Deno.PointerValue | null;
}

export const sizeofUSER_INFO_21 = 8;

export function allocUSER_INFO_21(data?: Partial<USER_INFO_21>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_21);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.usri21_password !== undefined) view.setBigUint64(0, data.usri21_password === null ? 0n : BigInt(util.toPointer(data.usri21_password)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_22 (size: 152)
 */
export interface USER_INFO_22 {
  /** Windows.Win32.Foundation.PWSTR */
  usri22_name: string | null;
  /** array */
  usri22_password: Deno.PointerValue | null;
  /** u32 */
  usri22_password_age: number;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_PRIV */
  usri22_priv: USER_PRIV;
  /** Windows.Win32.Foundation.PWSTR */
  usri22_home_dir: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri22_comment: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_ACCOUNT_FLAGS */
  usri22_flags: USER_ACCOUNT_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  usri22_script_path: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.AF_OP */
  usri22_auth_flags: AF_OP;
  /** Windows.Win32.Foundation.PWSTR */
  usri22_full_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri22_usr_comment: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri22_parms: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri22_workstations: string | null;
  /** u32 */
  usri22_last_logon: number;
  /** u32 */
  usri22_last_logoff: number;
  /** u32 */
  usri22_acct_expires: number;
  /** u32 */
  usri22_max_storage: number;
  /** u32 */
  usri22_units_per_week: number;
  /** ptr */
  usri22_logon_hours: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  usri22_bad_pw_count: number;
  /** u32 */
  usri22_num_logons: number;
  /** Windows.Win32.Foundation.PWSTR */
  usri22_logon_server: string | null;
  /** u32 */
  usri22_country_code: number;
  /** u32 */
  usri22_code_page: number;
}

export const sizeofUSER_INFO_22 = 152;

export function allocUSER_INFO_22(data?: Partial<USER_INFO_22>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_22);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri22_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri22_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.usri22_password !== undefined) view.setBigUint64(8, data.usri22_password === null ? 0n : BigInt(util.toPointer(data.usri22_password)), true);
  // 0x10: u32
  if (data?.usri22_password_age !== undefined) view.setUint32(16, Number(data.usri22_password_age), true);
  // 0x14: u32
  if (data?.usri22_priv !== undefined) view.setUint32(20, Number(data.usri22_priv), true);
  // 0x18: buffer
  if (data?.usri22_home_dir !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.usri22_home_dir);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.usri22_comment !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.usri22_comment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.usri22_flags !== undefined) view.setUint32(40, Number(data.usri22_flags), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.usri22_script_path !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.usri22_script_path);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.usri22_auth_flags !== undefined) view.setUint32(56, Number(data.usri22_auth_flags), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.usri22_full_name !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.usri22_full_name);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.usri22_usr_comment !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.usri22_usr_comment);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.usri22_parms !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.usri22_parms);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.usri22_workstations !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.usri22_workstations);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.usri22_last_logon !== undefined) view.setUint32(96, Number(data.usri22_last_logon), true);
  // 0x64: u32
  if (data?.usri22_last_logoff !== undefined) view.setUint32(100, Number(data.usri22_last_logoff), true);
  // 0x68: u32
  if (data?.usri22_acct_expires !== undefined) view.setUint32(104, Number(data.usri22_acct_expires), true);
  // 0x6c: u32
  if (data?.usri22_max_storage !== undefined) view.setUint32(108, Number(data.usri22_max_storage), true);
  // 0x70: u32
  if (data?.usri22_units_per_week !== undefined) view.setUint32(112, Number(data.usri22_units_per_week), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.usri22_logon_hours !== undefined) view.setBigUint64(120, data.usri22_logon_hours === null ? 0n : BigInt(util.toPointer(data.usri22_logon_hours)), true);
  // 0x80: u32
  if (data?.usri22_bad_pw_count !== undefined) view.setUint32(128, Number(data.usri22_bad_pw_count), true);
  // 0x84: u32
  if (data?.usri22_num_logons !== undefined) view.setUint32(132, Number(data.usri22_num_logons), true);
  // 0x88: buffer
  if (data?.usri22_logon_server !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.usri22_logon_server);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: u32
  if (data?.usri22_country_code !== undefined) view.setUint32(144, Number(data.usri22_country_code), true);
  // 0x94: u32
  if (data?.usri22_code_page !== undefined) view.setUint32(148, Number(data.usri22_code_page), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_23 (size: 40)
 */
export interface USER_INFO_23 {
  /** Windows.Win32.Foundation.PWSTR */
  usri23_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri23_full_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri23_comment: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_ACCOUNT_FLAGS */
  usri23_flags: USER_ACCOUNT_FLAGS;
  /** Windows.Win32.Foundation.PSID */
  usri23_user_sid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSER_INFO_23 = 40;

export function allocUSER_INFO_23(data?: Partial<USER_INFO_23>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_23);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri23_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri23_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.usri23_full_name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usri23_full_name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.usri23_comment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.usri23_comment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.usri23_flags !== undefined) view.setUint32(24, Number(data.usri23_flags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.usri23_user_sid !== undefined) view.setBigUint64(32, data.usri23_user_sid === null ? 0n : BigInt(util.toPointer(data.usri23_user_sid)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_24 (size: 32)
 */
export interface USER_INFO_24 {
  /** Windows.Win32.Foundation.BOOL */
  usri24_internet_identity: boolean;
  /** u32 */
  usri24_flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  usri24_internet_provider_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri24_internet_principal_name: string | null;
  /** Windows.Win32.Foundation.PSID */
  usri24_user_sid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSER_INFO_24 = 32;

export function allocUSER_INFO_24(data?: Partial<USER_INFO_24>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_24);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.usri24_internet_identity !== undefined) view.setInt32(0, Number(data.usri24_internet_identity), true);
  // 0x04: u32
  if (data?.usri24_flags !== undefined) view.setUint32(4, Number(data.usri24_flags), true);
  // 0x08: buffer
  if (data?.usri24_internet_provider_name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usri24_internet_provider_name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.usri24_internet_principal_name !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.usri24_internet_principal_name);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.usri24_user_sid !== undefined) view.setBigUint64(24, data.usri24_user_sid === null ? 0n : BigInt(util.toPointer(data.usri24_user_sid)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1003 (size: 8)
 */
export interface USER_INFO_1003 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1003_password: string | null;
}

export const sizeofUSER_INFO_1003 = 8;

export function allocUSER_INFO_1003(data?: Partial<USER_INFO_1003>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1003);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1003_password !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1003_password);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1005 (size: 8)
 */
export interface USER_INFO_1005 {
  /** Windows.Win32.NetworkManagement.NetManagement.USER_PRIV */
  usri1005_priv: USER_PRIV;
}

export const sizeofUSER_INFO_1005 = 8;

export function allocUSER_INFO_1005(data?: Partial<USER_INFO_1005>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1005);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usri1005_priv !== undefined) view.setUint32(0, Number(data.usri1005_priv), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1006 (size: 8)
 */
export interface USER_INFO_1006 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1006_home_dir: string | null;
}

export const sizeofUSER_INFO_1006 = 8;

export function allocUSER_INFO_1006(data?: Partial<USER_INFO_1006>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1006);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1006_home_dir !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1006_home_dir);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1007 (size: 8)
 */
export interface USER_INFO_1007 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1007_comment: string | null;
}

export const sizeofUSER_INFO_1007 = 8;

export function allocUSER_INFO_1007(data?: Partial<USER_INFO_1007>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1007);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1007_comment !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1007_comment);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1008 (size: 8)
 */
export interface USER_INFO_1008 {
  /** Windows.Win32.NetworkManagement.NetManagement.USER_ACCOUNT_FLAGS */
  usri1008_flags: USER_ACCOUNT_FLAGS;
}

export const sizeofUSER_INFO_1008 = 8;

export function allocUSER_INFO_1008(data?: Partial<USER_INFO_1008>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1008);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usri1008_flags !== undefined) view.setUint32(0, Number(data.usri1008_flags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1009 (size: 8)
 */
export interface USER_INFO_1009 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1009_script_path: string | null;
}

export const sizeofUSER_INFO_1009 = 8;

export function allocUSER_INFO_1009(data?: Partial<USER_INFO_1009>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1009);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1009_script_path !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1009_script_path);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1010 (size: 8)
 */
export interface USER_INFO_1010 {
  /** Windows.Win32.NetworkManagement.NetManagement.AF_OP */
  usri1010_auth_flags: AF_OP;
}

export const sizeofUSER_INFO_1010 = 8;

export function allocUSER_INFO_1010(data?: Partial<USER_INFO_1010>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1010);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usri1010_auth_flags !== undefined) view.setUint32(0, Number(data.usri1010_auth_flags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1011 (size: 8)
 */
export interface USER_INFO_1011 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1011_full_name: string | null;
}

export const sizeofUSER_INFO_1011 = 8;

export function allocUSER_INFO_1011(data?: Partial<USER_INFO_1011>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1011);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1011_full_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1011_full_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1012 (size: 8)
 */
export interface USER_INFO_1012 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1012_usr_comment: string | null;
}

export const sizeofUSER_INFO_1012 = 8;

export function allocUSER_INFO_1012(data?: Partial<USER_INFO_1012>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1012);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1012_usr_comment !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1012_usr_comment);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1013 (size: 8)
 */
export interface USER_INFO_1013 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1013_parms: string | null;
}

export const sizeofUSER_INFO_1013 = 8;

export function allocUSER_INFO_1013(data?: Partial<USER_INFO_1013>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1013);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1013_parms !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1013_parms);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1014 (size: 8)
 */
export interface USER_INFO_1014 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1014_workstations: string | null;
}

export const sizeofUSER_INFO_1014 = 8;

export function allocUSER_INFO_1014(data?: Partial<USER_INFO_1014>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1014);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1014_workstations !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1014_workstations);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1017 (size: 8)
 */
export interface USER_INFO_1017 {
  /** u32 */
  usri1017_acct_expires: number;
}

export const sizeofUSER_INFO_1017 = 8;

export function allocUSER_INFO_1017(data?: Partial<USER_INFO_1017>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1017);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usri1017_acct_expires !== undefined) view.setUint32(0, Number(data.usri1017_acct_expires), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1018 (size: 8)
 */
export interface USER_INFO_1018 {
  /** u32 */
  usri1018_max_storage: number;
}

export const sizeofUSER_INFO_1018 = 8;

export function allocUSER_INFO_1018(data?: Partial<USER_INFO_1018>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1018);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usri1018_max_storage !== undefined) view.setUint32(0, Number(data.usri1018_max_storage), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1020 (size: 16)
 */
export interface USER_INFO_1020 {
  /** u32 */
  usri1020_units_per_week: number;
  /** ptr */
  usri1020_logon_hours: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUSER_INFO_1020 = 16;

export function allocUSER_INFO_1020(data?: Partial<USER_INFO_1020>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1020);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usri1020_units_per_week !== undefined) view.setUint32(0, Number(data.usri1020_units_per_week), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.usri1020_logon_hours !== undefined) view.setBigUint64(8, data.usri1020_logon_hours === null ? 0n : BigInt(util.toPointer(data.usri1020_logon_hours)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1023 (size: 8)
 */
export interface USER_INFO_1023 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1023_logon_server: string | null;
}

export const sizeofUSER_INFO_1023 = 8;

export function allocUSER_INFO_1023(data?: Partial<USER_INFO_1023>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1023);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1023_logon_server !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1023_logon_server);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1024 (size: 8)
 */
export interface USER_INFO_1024 {
  /** u32 */
  usri1024_country_code: number;
}

export const sizeofUSER_INFO_1024 = 8;

export function allocUSER_INFO_1024(data?: Partial<USER_INFO_1024>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1024);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usri1024_country_code !== undefined) view.setUint32(0, Number(data.usri1024_country_code), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1025 (size: 8)
 */
export interface USER_INFO_1025 {
  /** u32 */
  usri1025_code_page: number;
}

export const sizeofUSER_INFO_1025 = 8;

export function allocUSER_INFO_1025(data?: Partial<USER_INFO_1025>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1025);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usri1025_code_page !== undefined) view.setUint32(0, Number(data.usri1025_code_page), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1051 (size: 8)
 */
export interface USER_INFO_1051 {
  /** u32 */
  usri1051_primary_group_id: number;
}

export const sizeofUSER_INFO_1051 = 8;

export function allocUSER_INFO_1051(data?: Partial<USER_INFO_1051>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1051);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usri1051_primary_group_id !== undefined) view.setUint32(0, Number(data.usri1051_primary_group_id), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1052 (size: 8)
 */
export interface USER_INFO_1052 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1052_profile: string | null;
}

export const sizeofUSER_INFO_1052 = 8;

export function allocUSER_INFO_1052(data?: Partial<USER_INFO_1052>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1052);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1052_profile !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1052_profile);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_INFO_1053 (size: 8)
 */
export interface USER_INFO_1053 {
  /** Windows.Win32.Foundation.PWSTR */
  usri1053_home_dir_drive: string | null;
}

export const sizeofUSER_INFO_1053 = 8;

export function allocUSER_INFO_1053(data?: Partial<USER_INFO_1053>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_INFO_1053);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1053_home_dir_drive !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1053_home_dir_drive);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_INFO_0 (size: 24)
 */
export interface USER_MODALS_INFO_0 {
  /** u32 */
  usrmod0_min_passwd_len: number;
  /** u32 */
  usrmod0_max_passwd_age: number;
  /** u32 */
  usrmod0_min_passwd_age: number;
  /** u32 */
  usrmod0_force_logoff: number;
  /** u32 */
  usrmod0_password_hist_len: number;
}

export const sizeofUSER_MODALS_INFO_0 = 24;

export function allocUSER_MODALS_INFO_0(data?: Partial<USER_MODALS_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MODALS_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usrmod0_min_passwd_len !== undefined) view.setUint32(0, Number(data.usrmod0_min_passwd_len), true);
  // 0x04: u32
  if (data?.usrmod0_max_passwd_age !== undefined) view.setUint32(4, Number(data.usrmod0_max_passwd_age), true);
  // 0x08: u32
  if (data?.usrmod0_min_passwd_age !== undefined) view.setUint32(8, Number(data.usrmod0_min_passwd_age), true);
  // 0x0c: u32
  if (data?.usrmod0_force_logoff !== undefined) view.setUint32(12, Number(data.usrmod0_force_logoff), true);
  // 0x10: u32
  if (data?.usrmod0_password_hist_len !== undefined) view.setUint32(16, Number(data.usrmod0_password_hist_len), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_INFO_1 (size: 16)
 */
export interface USER_MODALS_INFO_1 {
  /** u32 */
  usrmod1_role: number;
  /** Windows.Win32.Foundation.PWSTR */
  usrmod1_primary: string | null;
}

export const sizeofUSER_MODALS_INFO_1 = 16;

export function allocUSER_MODALS_INFO_1(data?: Partial<USER_MODALS_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MODALS_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usrmod1_role !== undefined) view.setUint32(0, Number(data.usrmod1_role), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.usrmod1_primary !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usrmod1_primary);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_INFO_2 (size: 16)
 */
export interface USER_MODALS_INFO_2 {
  /** Windows.Win32.Foundation.PWSTR */
  usrmod2_domain_name: string | null;
  /** Windows.Win32.Foundation.PSID */
  usrmod2_domain_id: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSER_MODALS_INFO_2 = 16;

export function allocUSER_MODALS_INFO_2(data?: Partial<USER_MODALS_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MODALS_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usrmod2_domain_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usrmod2_domain_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.usrmod2_domain_id !== undefined) view.setBigUint64(8, data.usrmod2_domain_id === null ? 0n : BigInt(util.toPointer(data.usrmod2_domain_id)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_INFO_3 (size: 16)
 */
export interface USER_MODALS_INFO_3 {
  /** u32 */
  usrmod3_lockout_duration: number;
  /** u32 */
  usrmod3_lockout_observation_window: number;
  /** u32 */
  usrmod3_lockout_threshold: number;
}

export const sizeofUSER_MODALS_INFO_3 = 16;

export function allocUSER_MODALS_INFO_3(data?: Partial<USER_MODALS_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MODALS_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usrmod3_lockout_duration !== undefined) view.setUint32(0, Number(data.usrmod3_lockout_duration), true);
  // 0x04: u32
  if (data?.usrmod3_lockout_observation_window !== undefined) view.setUint32(4, Number(data.usrmod3_lockout_observation_window), true);
  // 0x08: u32
  if (data?.usrmod3_lockout_threshold !== undefined) view.setUint32(8, Number(data.usrmod3_lockout_threshold), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_INFO_1001 (size: 8)
 */
export interface USER_MODALS_INFO_1001 {
  /** u32 */
  usrmod1001_min_passwd_len: number;
}

export const sizeofUSER_MODALS_INFO_1001 = 8;

export function allocUSER_MODALS_INFO_1001(data?: Partial<USER_MODALS_INFO_1001>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MODALS_INFO_1001);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usrmod1001_min_passwd_len !== undefined) view.setUint32(0, Number(data.usrmod1001_min_passwd_len), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_INFO_1002 (size: 8)
 */
export interface USER_MODALS_INFO_1002 {
  /** u32 */
  usrmod1002_max_passwd_age: number;
}

export const sizeofUSER_MODALS_INFO_1002 = 8;

export function allocUSER_MODALS_INFO_1002(data?: Partial<USER_MODALS_INFO_1002>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MODALS_INFO_1002);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usrmod1002_max_passwd_age !== undefined) view.setUint32(0, Number(data.usrmod1002_max_passwd_age), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_INFO_1003 (size: 8)
 */
export interface USER_MODALS_INFO_1003 {
  /** u32 */
  usrmod1003_min_passwd_age: number;
}

export const sizeofUSER_MODALS_INFO_1003 = 8;

export function allocUSER_MODALS_INFO_1003(data?: Partial<USER_MODALS_INFO_1003>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MODALS_INFO_1003);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usrmod1003_min_passwd_age !== undefined) view.setUint32(0, Number(data.usrmod1003_min_passwd_age), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_INFO_1004 (size: 8)
 */
export interface USER_MODALS_INFO_1004 {
  /** u32 */
  usrmod1004_force_logoff: number;
}

export const sizeofUSER_MODALS_INFO_1004 = 8;

export function allocUSER_MODALS_INFO_1004(data?: Partial<USER_MODALS_INFO_1004>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MODALS_INFO_1004);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usrmod1004_force_logoff !== undefined) view.setUint32(0, Number(data.usrmod1004_force_logoff), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_INFO_1005 (size: 8)
 */
export interface USER_MODALS_INFO_1005 {
  /** u32 */
  usrmod1005_password_hist_len: number;
}

export const sizeofUSER_MODALS_INFO_1005 = 8;

export function allocUSER_MODALS_INFO_1005(data?: Partial<USER_MODALS_INFO_1005>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MODALS_INFO_1005);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usrmod1005_password_hist_len !== undefined) view.setUint32(0, Number(data.usrmod1005_password_hist_len), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_INFO_1006 (size: 8)
 */
export interface USER_MODALS_INFO_1006 {
  /** Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_ROLES */
  usrmod1006_role: USER_MODALS_ROLES;
}

export const sizeofUSER_MODALS_INFO_1006 = 8;

export function allocUSER_MODALS_INFO_1006(data?: Partial<USER_MODALS_INFO_1006>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MODALS_INFO_1006);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.usrmod1006_role !== undefined) view.setUint32(0, Number(data.usrmod1006_role), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_MODALS_INFO_1007 (size: 8)
 */
export interface USER_MODALS_INFO_1007 {
  /** Windows.Win32.Foundation.PWSTR */
  usrmod1007_primary: string | null;
}

export const sizeofUSER_MODALS_INFO_1007 = 8;

export function allocUSER_MODALS_INFO_1007(data?: Partial<USER_MODALS_INFO_1007>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_MODALS_INFO_1007);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usrmod1007_primary !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usrmod1007_primary);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.GROUP_INFO_0 (size: 8)
 */
export interface GROUP_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  grpi0_name: string | null;
}

export const sizeofGROUP_INFO_0 = 8;

export function allocGROUP_INFO_0(data?: Partial<GROUP_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.grpi0_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.grpi0_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.GROUP_INFO_1 (size: 16)
 */
export interface GROUP_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  grpi1_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  grpi1_comment: string | null;
}

export const sizeofGROUP_INFO_1 = 16;

export function allocGROUP_INFO_1(data?: Partial<GROUP_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.grpi1_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.grpi1_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.grpi1_comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.grpi1_comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.GROUP_INFO_2 (size: 24)
 */
export interface GROUP_INFO_2 {
  /** Windows.Win32.Foundation.PWSTR */
  grpi2_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  grpi2_comment: string | null;
  /** u32 */
  grpi2_group_id: number;
  /** u32 */
  grpi2_attributes: number;
}

export const sizeofGROUP_INFO_2 = 24;

export function allocGROUP_INFO_2(data?: Partial<GROUP_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.grpi2_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.grpi2_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.grpi2_comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.grpi2_comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.grpi2_group_id !== undefined) view.setUint32(16, Number(data.grpi2_group_id), true);
  // 0x14: u32
  if (data?.grpi2_attributes !== undefined) view.setUint32(20, Number(data.grpi2_attributes), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.GROUP_INFO_3 (size: 32)
 */
export interface GROUP_INFO_3 {
  /** Windows.Win32.Foundation.PWSTR */
  grpi3_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  grpi3_comment: string | null;
  /** Windows.Win32.Foundation.PSID */
  grpi3_group_sid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  grpi3_attributes: number;
}

export const sizeofGROUP_INFO_3 = 32;

export function allocGROUP_INFO_3(data?: Partial<GROUP_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.grpi3_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.grpi3_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.grpi3_comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.grpi3_comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.grpi3_group_sid !== undefined) view.setBigUint64(16, data.grpi3_group_sid === null ? 0n : BigInt(util.toPointer(data.grpi3_group_sid)), true);
  // 0x18: u32
  if (data?.grpi3_attributes !== undefined) view.setUint32(24, Number(data.grpi3_attributes), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.GROUP_INFO_1002 (size: 8)
 */
export interface GROUP_INFO_1002 {
  /** Windows.Win32.Foundation.PWSTR */
  grpi1002_comment: string | null;
}

export const sizeofGROUP_INFO_1002 = 8;

export function allocGROUP_INFO_1002(data?: Partial<GROUP_INFO_1002>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_INFO_1002);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.grpi1002_comment !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.grpi1002_comment);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.GROUP_INFO_1005 (size: 8)
 */
export interface GROUP_INFO_1005 {
  /** u32 */
  grpi1005_attributes: number;
}

export const sizeofGROUP_INFO_1005 = 8;

export function allocGROUP_INFO_1005(data?: Partial<GROUP_INFO_1005>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_INFO_1005);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.grpi1005_attributes !== undefined) view.setUint32(0, Number(data.grpi1005_attributes), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.GROUP_USERS_INFO_0 (size: 8)
 */
export interface GROUP_USERS_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  grui0_name: string | null;
}

export const sizeofGROUP_USERS_INFO_0 = 8;

export function allocGROUP_USERS_INFO_0(data?: Partial<GROUP_USERS_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_USERS_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.grui0_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.grui0_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.GROUP_USERS_INFO_1 (size: 16)
 */
export interface GROUP_USERS_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  grui1_name: string | null;
  /** u32 */
  grui1_attributes: number;
}

export const sizeofGROUP_USERS_INFO_1 = 16;

export function allocGROUP_USERS_INFO_1(data?: Partial<GROUP_USERS_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_USERS_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.grui1_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.grui1_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.grui1_attributes !== undefined) view.setUint32(8, Number(data.grui1_attributes), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.LOCALGROUP_INFO_0 (size: 8)
 */
export interface LOCALGROUP_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  lgrpi0_name: string | null;
}

export const sizeofLOCALGROUP_INFO_0 = 8;

export function allocLOCALGROUP_INFO_0(data?: Partial<LOCALGROUP_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofLOCALGROUP_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lgrpi0_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lgrpi0_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.LOCALGROUP_INFO_1 (size: 16)
 */
export interface LOCALGROUP_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  lgrpi1_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lgrpi1_comment: string | null;
}

export const sizeofLOCALGROUP_INFO_1 = 16;

export function allocLOCALGROUP_INFO_1(data?: Partial<LOCALGROUP_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofLOCALGROUP_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lgrpi1_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lgrpi1_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lgrpi1_comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lgrpi1_comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.LOCALGROUP_INFO_1002 (size: 8)
 */
export interface LOCALGROUP_INFO_1002 {
  /** Windows.Win32.Foundation.PWSTR */
  lgrpi1002_comment: string | null;
}

export const sizeofLOCALGROUP_INFO_1002 = 8;

export function allocLOCALGROUP_INFO_1002(data?: Partial<LOCALGROUP_INFO_1002>): Uint8Array {
  const buf = new Uint8Array(sizeofLOCALGROUP_INFO_1002);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lgrpi1002_comment !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lgrpi1002_comment);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.LOCALGROUP_MEMBERS_INFO_0 (size: 8)
 */
export interface LOCALGROUP_MEMBERS_INFO_0 {
  /** Windows.Win32.Foundation.PSID */
  lgrmi0_sid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLOCALGROUP_MEMBERS_INFO_0 = 8;

export function allocLOCALGROUP_MEMBERS_INFO_0(data?: Partial<LOCALGROUP_MEMBERS_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofLOCALGROUP_MEMBERS_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lgrmi0_sid !== undefined) view.setBigUint64(0, data.lgrmi0_sid === null ? 0n : BigInt(util.toPointer(data.lgrmi0_sid)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.LOCALGROUP_MEMBERS_INFO_1 (size: 24)
 */
export interface LOCALGROUP_MEMBERS_INFO_1 {
  /** Windows.Win32.Foundation.PSID */
  lgrmi1_sid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.SID_NAME_USE */
  lgrmi1_sidusage: SID_NAME_USE;
  /** Windows.Win32.Foundation.PWSTR */
  lgrmi1_name: string | null;
}

export const sizeofLOCALGROUP_MEMBERS_INFO_1 = 24;

export function allocLOCALGROUP_MEMBERS_INFO_1(data?: Partial<LOCALGROUP_MEMBERS_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofLOCALGROUP_MEMBERS_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lgrmi1_sid !== undefined) view.setBigUint64(0, data.lgrmi1_sid === null ? 0n : BigInt(util.toPointer(data.lgrmi1_sid)), true);
  // 0x08: i32
  if (data?.lgrmi1_sidusage !== undefined) view.setInt32(8, Number(data.lgrmi1_sidusage), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lgrmi1_name !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lgrmi1_name);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.LOCALGROUP_MEMBERS_INFO_2 (size: 24)
 */
export interface LOCALGROUP_MEMBERS_INFO_2 {
  /** Windows.Win32.Foundation.PSID */
  lgrmi2_sid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.SID_NAME_USE */
  lgrmi2_sidusage: SID_NAME_USE;
  /** Windows.Win32.Foundation.PWSTR */
  lgrmi2_domainandname: string | null;
}

export const sizeofLOCALGROUP_MEMBERS_INFO_2 = 24;

export function allocLOCALGROUP_MEMBERS_INFO_2(data?: Partial<LOCALGROUP_MEMBERS_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofLOCALGROUP_MEMBERS_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lgrmi2_sid !== undefined) view.setBigUint64(0, data.lgrmi2_sid === null ? 0n : BigInt(util.toPointer(data.lgrmi2_sid)), true);
  // 0x08: i32
  if (data?.lgrmi2_sidusage !== undefined) view.setInt32(8, Number(data.lgrmi2_sidusage), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lgrmi2_domainandname !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lgrmi2_domainandname);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.LOCALGROUP_MEMBERS_INFO_3 (size: 8)
 */
export interface LOCALGROUP_MEMBERS_INFO_3 {
  /** Windows.Win32.Foundation.PWSTR */
  lgrmi3_domainandname: string | null;
}

export const sizeofLOCALGROUP_MEMBERS_INFO_3 = 8;

export function allocLOCALGROUP_MEMBERS_INFO_3(data?: Partial<LOCALGROUP_MEMBERS_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofLOCALGROUP_MEMBERS_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lgrmi3_domainandname !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lgrmi3_domainandname);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.LOCALGROUP_USERS_INFO_0 (size: 8)
 */
export interface LOCALGROUP_USERS_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  lgrui0_name: string | null;
}

export const sizeofLOCALGROUP_USERS_INFO_0 = 8;

export function allocLOCALGROUP_USERS_INFO_0(data?: Partial<LOCALGROUP_USERS_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofLOCALGROUP_USERS_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lgrui0_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lgrui0_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NET_DISPLAY_USER (size: 40)
 */
export interface NET_DISPLAY_USER {
  /** Windows.Win32.Foundation.PWSTR */
  usri1_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri1_comment: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_ACCOUNT_FLAGS */
  usri1_flags: USER_ACCOUNT_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  usri1_full_name: string | null;
  /** u32 */
  usri1_user_id: number;
  /** u32 */
  usri1_next_index: number;
}

export const sizeofNET_DISPLAY_USER = 40;

export function allocNET_DISPLAY_USER(data?: Partial<NET_DISPLAY_USER>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_DISPLAY_USER);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri1_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri1_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.usri1_comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usri1_comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.usri1_flags !== undefined) view.setUint32(16, Number(data.usri1_flags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.usri1_full_name !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.usri1_full_name);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.usri1_user_id !== undefined) view.setUint32(32, Number(data.usri1_user_id), true);
  // 0x24: u32
  if (data?.usri1_next_index !== undefined) view.setUint32(36, Number(data.usri1_next_index), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NET_DISPLAY_MACHINE (size: 32)
 */
export interface NET_DISPLAY_MACHINE {
  /** Windows.Win32.Foundation.PWSTR */
  usri2_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  usri2_comment: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.USER_ACCOUNT_FLAGS */
  usri2_flags: USER_ACCOUNT_FLAGS;
  /** u32 */
  usri2_user_id: number;
  /** u32 */
  usri2_next_index: number;
}

export const sizeofNET_DISPLAY_MACHINE = 32;

export function allocNET_DISPLAY_MACHINE(data?: Partial<NET_DISPLAY_MACHINE>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_DISPLAY_MACHINE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.usri2_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.usri2_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.usri2_comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.usri2_comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.usri2_flags !== undefined) view.setUint32(16, Number(data.usri2_flags), true);
  // 0x14: u32
  if (data?.usri2_user_id !== undefined) view.setUint32(20, Number(data.usri2_user_id), true);
  // 0x18: u32
  if (data?.usri2_next_index !== undefined) view.setUint32(24, Number(data.usri2_next_index), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NET_DISPLAY_GROUP (size: 32)
 */
export interface NET_DISPLAY_GROUP {
  /** Windows.Win32.Foundation.PWSTR */
  grpi3_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  grpi3_comment: string | null;
  /** u32 */
  grpi3_group_id: number;
  /** u32 */
  grpi3_attributes: number;
  /** u32 */
  grpi3_next_index: number;
}

export const sizeofNET_DISPLAY_GROUP = 32;

export function allocNET_DISPLAY_GROUP(data?: Partial<NET_DISPLAY_GROUP>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_DISPLAY_GROUP);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.grpi3_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.grpi3_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.grpi3_comment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.grpi3_comment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.grpi3_group_id !== undefined) view.setUint32(16, Number(data.grpi3_group_id), true);
  // 0x14: u32
  if (data?.grpi3_attributes !== undefined) view.setUint32(20, Number(data.grpi3_attributes), true);
  // 0x18: u32
  if (data?.grpi3_next_index !== undefined) view.setUint32(24, Number(data.grpi3_next_index), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.ACCESS_INFO_0 (size: 8)
 */
export interface ACCESS_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  acc0_resource_name: string | null;
}

export const sizeofACCESS_INFO_0 = 8;

export function allocACCESS_INFO_0(data?: Partial<ACCESS_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.acc0_resource_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.acc0_resource_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.ACCESS_INFO_1 (size: 16)
 */
export interface ACCESS_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  acc1_resource_name: string | null;
  /** u32 */
  acc1_attr: number;
  /** u32 */
  acc1_count: number;
}

export const sizeofACCESS_INFO_1 = 16;

export function allocACCESS_INFO_1(data?: Partial<ACCESS_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.acc1_resource_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.acc1_resource_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.acc1_attr !== undefined) view.setUint32(8, Number(data.acc1_attr), true);
  // 0x0c: u32
  if (data?.acc1_count !== undefined) view.setUint32(12, Number(data.acc1_count), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.ACCESS_INFO_1002 (size: 8)
 */
export interface ACCESS_INFO_1002 {
  /** u32 */
  acc1002_attr: number;
}

export const sizeofACCESS_INFO_1002 = 8;

export function allocACCESS_INFO_1002(data?: Partial<ACCESS_INFO_1002>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_INFO_1002);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.acc1002_attr !== undefined) view.setUint32(0, Number(data.acc1002_attr), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.ACCESS_LIST (size: 16)
 */
export interface ACCESS_LIST {
  /** Windows.Win32.Foundation.PWSTR */
  acl_ugname: string | null;
  /** u32 */
  acl_access: number;
}

export const sizeofACCESS_LIST = 16;

export function allocACCESS_LIST(data?: Partial<ACCESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.acl_ugname !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.acl_ugname);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.acl_access !== undefined) view.setUint32(8, Number(data.acl_access), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_PASSWORD_HASH (size: 16)
 */
export interface NET_VALIDATE_PASSWORD_HASH {
  /** u32 */
  Length: number;
  /** ptr */
  Hash: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNET_VALIDATE_PASSWORD_HASH = 16;

export function allocNET_VALIDATE_PASSWORD_HASH(data?: Partial<NET_VALIDATE_PASSWORD_HASH>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_VALIDATE_PASSWORD_HASH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Hash !== undefined) view.setBigUint64(8, data.Hash === null ? 0n : BigInt(util.toPointer(data.Hash)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_PERSISTED_FIELDS (size: 48)
 */
export interface NET_VALIDATE_PERSISTED_FIELDS {
  /** u32 */
  PresentFields: number;
  /** Windows.Win32.Foundation.FILETIME */
  PasswordLastSet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  BadPasswordTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  LockoutTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BadPasswordCount: number;
  /** u32 */
  PasswordHistoryLength: number;
  /** ptr */
  PasswordHistory: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNET_VALIDATE_PERSISTED_FIELDS = 48;

export function allocNET_VALIDATE_PERSISTED_FIELDS(data?: Partial<NET_VALIDATE_PERSISTED_FIELDS>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_VALIDATE_PERSISTED_FIELDS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PresentFields !== undefined) view.setUint32(0, Number(data.PresentFields), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PasswordLastSet !== undefined) view.setBigUint64(8, data.PasswordLastSet === null ? 0n : BigInt(util.toPointer(data.PasswordLastSet)), true);
  // 0x10: pointer
  if (data?.BadPasswordTime !== undefined) view.setBigUint64(16, data.BadPasswordTime === null ? 0n : BigInt(util.toPointer(data.BadPasswordTime)), true);
  // 0x18: pointer
  if (data?.LockoutTime !== undefined) view.setBigUint64(24, data.LockoutTime === null ? 0n : BigInt(util.toPointer(data.LockoutTime)), true);
  // 0x20: u32
  if (data?.BadPasswordCount !== undefined) view.setUint32(32, Number(data.BadPasswordCount), true);
  // 0x24: u32
  if (data?.PasswordHistoryLength !== undefined) view.setUint32(36, Number(data.PasswordHistoryLength), true);
  // 0x28: pointer
  if (data?.PasswordHistory !== undefined) view.setBigUint64(40, data.PasswordHistory === null ? 0n : BigInt(util.toPointer(data.PasswordHistory)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_OUTPUT_ARG (size: 16)
 */
export interface NET_VALIDATE_OUTPUT_ARG {
  /** Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_PERSISTED_FIELDS */
  ChangedPersistedFields: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ValidationStatus: number;
}

export const sizeofNET_VALIDATE_OUTPUT_ARG = 16;

export function allocNET_VALIDATE_OUTPUT_ARG(data?: Partial<NET_VALIDATE_OUTPUT_ARG>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_VALIDATE_OUTPUT_ARG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ChangedPersistedFields !== undefined) view.setBigUint64(0, data.ChangedPersistedFields === null ? 0n : BigInt(util.toPointer(data.ChangedPersistedFields)), true);
  // 0x08: u32
  if (data?.ValidationStatus !== undefined) view.setUint32(8, Number(data.ValidationStatus), true);
  // 0x0c: pad4
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_AUTHENTICATION_INPUT_ARG (size: 16)
 */
export interface NET_VALIDATE_AUTHENTICATION_INPUT_ARG {
  /** Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_PERSISTED_FIELDS */
  InputPersistedFields: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PasswordMatched: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNET_VALIDATE_AUTHENTICATION_INPUT_ARG = 16;

export function allocNET_VALIDATE_AUTHENTICATION_INPUT_ARG(data?: Partial<NET_VALIDATE_AUTHENTICATION_INPUT_ARG>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_VALIDATE_AUTHENTICATION_INPUT_ARG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InputPersistedFields !== undefined) view.setBigUint64(0, data.InputPersistedFields === null ? 0n : BigInt(util.toPointer(data.InputPersistedFields)), true);
  // 0x08: pointer
  if (data?.PasswordMatched !== undefined) view.setBigUint64(8, data.PasswordMatched === null ? 0n : BigInt(util.toPointer(data.PasswordMatched)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG (size: 40)
 */
export interface NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG {
  /** Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_PERSISTED_FIELDS */
  InputPersistedFields: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  ClearPassword: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  UserAccountName: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_PASSWORD_HASH */
  HashedPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PasswordMatch: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG = 40;

export function allocNET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG(data?: Partial<NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InputPersistedFields !== undefined) view.setBigUint64(0, data.InputPersistedFields === null ? 0n : BigInt(util.toPointer(data.InputPersistedFields)), true);
  // 0x08: buffer
  if (data?.ClearPassword !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ClearPassword);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.UserAccountName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.UserAccountName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.HashedPassword !== undefined) view.setBigUint64(24, data.HashedPassword === null ? 0n : BigInt(util.toPointer(data.HashedPassword)), true);
  // 0x20: pointer
  if (data?.PasswordMatch !== undefined) view.setBigUint64(32, data.PasswordMatch === null ? 0n : BigInt(util.toPointer(data.PasswordMatch)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_PASSWORD_RESET_INPUT_ARG (size: 48)
 */
export interface NET_VALIDATE_PASSWORD_RESET_INPUT_ARG {
  /** Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_PERSISTED_FIELDS */
  InputPersistedFields: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  ClearPassword: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  UserAccountName: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_PASSWORD_HASH */
  HashedPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PasswordMustChangeAtNextLogon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  ClearLockout: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNET_VALIDATE_PASSWORD_RESET_INPUT_ARG = 48;

export function allocNET_VALIDATE_PASSWORD_RESET_INPUT_ARG(data?: Partial<NET_VALIDATE_PASSWORD_RESET_INPUT_ARG>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_VALIDATE_PASSWORD_RESET_INPUT_ARG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InputPersistedFields !== undefined) view.setBigUint64(0, data.InputPersistedFields === null ? 0n : BigInt(util.toPointer(data.InputPersistedFields)), true);
  // 0x08: buffer
  if (data?.ClearPassword !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ClearPassword);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.UserAccountName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.UserAccountName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.HashedPassword !== undefined) view.setBigUint64(24, data.HashedPassword === null ? 0n : BigInt(util.toPointer(data.HashedPassword)), true);
  // 0x20: pointer
  if (data?.PasswordMustChangeAtNextLogon !== undefined) view.setBigUint64(32, data.PasswordMustChangeAtNextLogon === null ? 0n : BigInt(util.toPointer(data.PasswordMustChangeAtNextLogon)), true);
  // 0x28: pointer
  if (data?.ClearLockout !== undefined) view.setBigUint64(40, data.ClearLockout === null ? 0n : BigInt(util.toPointer(data.ClearLockout)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NETLOGON_INFO_1 (size: 8)
 */
export interface NETLOGON_INFO_1 {
  /** u32 */
  netlog1_flags: number;
  /** u32 */
  netlog1_pdc_connection_status: number;
}

export const sizeofNETLOGON_INFO_1 = 8;

export function allocNETLOGON_INFO_1(data?: Partial<NETLOGON_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.netlog1_flags !== undefined) view.setUint32(0, Number(data.netlog1_flags), true);
  // 0x04: u32
  if (data?.netlog1_pdc_connection_status !== undefined) view.setUint32(4, Number(data.netlog1_pdc_connection_status), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NETLOGON_INFO_2 (size: 24)
 */
export interface NETLOGON_INFO_2 {
  /** u32 */
  netlog2_flags: number;
  /** u32 */
  netlog2_pdc_connection_status: number;
  /** Windows.Win32.Foundation.PWSTR */
  netlog2_trusted_dc_name: string | null;
  /** u32 */
  netlog2_tc_connection_status: number;
}

export const sizeofNETLOGON_INFO_2 = 24;

export function allocNETLOGON_INFO_2(data?: Partial<NETLOGON_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.netlog2_flags !== undefined) view.setUint32(0, Number(data.netlog2_flags), true);
  // 0x04: u32
  if (data?.netlog2_pdc_connection_status !== undefined) view.setUint32(4, Number(data.netlog2_pdc_connection_status), true);
  // 0x08: buffer
  if (data?.netlog2_trusted_dc_name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.netlog2_trusted_dc_name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.netlog2_tc_connection_status !== undefined) view.setUint32(16, Number(data.netlog2_tc_connection_status), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NETLOGON_INFO_3 (size: 32)
 */
export interface NETLOGON_INFO_3 {
  /** u32 */
  netlog3_flags: number;
  /** u32 */
  netlog3_logon_attempts: number;
  /** u32 */
  netlog3_reserved1: number;
  /** u32 */
  netlog3_reserved2: number;
  /** u32 */
  netlog3_reserved3: number;
  /** u32 */
  netlog3_reserved4: number;
  /** u32 */
  netlog3_reserved5: number;
}

export const sizeofNETLOGON_INFO_3 = 32;

export function allocNETLOGON_INFO_3(data?: Partial<NETLOGON_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.netlog3_flags !== undefined) view.setUint32(0, Number(data.netlog3_flags), true);
  // 0x04: u32
  if (data?.netlog3_logon_attempts !== undefined) view.setUint32(4, Number(data.netlog3_logon_attempts), true);
  // 0x08: u32
  if (data?.netlog3_reserved1 !== undefined) view.setUint32(8, Number(data.netlog3_reserved1), true);
  // 0x0c: u32
  if (data?.netlog3_reserved2 !== undefined) view.setUint32(12, Number(data.netlog3_reserved2), true);
  // 0x10: u32
  if (data?.netlog3_reserved3 !== undefined) view.setUint32(16, Number(data.netlog3_reserved3), true);
  // 0x14: u32
  if (data?.netlog3_reserved4 !== undefined) view.setUint32(20, Number(data.netlog3_reserved4), true);
  // 0x18: u32
  if (data?.netlog3_reserved5 !== undefined) view.setUint32(24, Number(data.netlog3_reserved5), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NETLOGON_INFO_4 (size: 16)
 */
export interface NETLOGON_INFO_4 {
  /** Windows.Win32.Foundation.PWSTR */
  netlog4_trusted_dc_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  netlog4_trusted_domain_name: string | null;
}

export const sizeofNETLOGON_INFO_4 = 16;

export function allocNETLOGON_INFO_4(data?: Partial<NETLOGON_INFO_4>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_INFO_4);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.netlog4_trusted_dc_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.netlog4_trusted_dc_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.netlog4_trusted_domain_name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.netlog4_trusted_domain_name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.MSA_INFO_0 (size: 8)
 */
export interface MSA_INFO_0 {
  /** Windows.Win32.NetworkManagement.NetManagement.MSA_INFO_STATE */
  State: MSA_INFO_STATE;
}

export const sizeofMSA_INFO_0 = 8;

export function allocMSA_INFO_0(data?: Partial<MSA_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofMSA_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.State !== undefined) view.setInt32(0, Number(data.State), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.STD_ALERT (size: 24)
 */
export interface STD_ALERT {
  /** u32 */
  alrt_timestamp: number;
  /** array */
  alrt_eventname: Deno.PointerValue | null;
  /** array */
  alrt_servicename: Deno.PointerValue | null;
}

export const sizeofSTD_ALERT = 24;

export function allocSTD_ALERT(data?: Partial<STD_ALERT>): Uint8Array {
  const buf = new Uint8Array(sizeofSTD_ALERT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.alrt_timestamp !== undefined) view.setUint32(0, Number(data.alrt_timestamp), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.alrt_eventname !== undefined) view.setBigUint64(8, data.alrt_eventname === null ? 0n : BigInt(util.toPointer(data.alrt_eventname)), true);
  // 0x10: pointer
  if (data?.alrt_servicename !== undefined) view.setBigUint64(16, data.alrt_servicename === null ? 0n : BigInt(util.toPointer(data.alrt_servicename)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.ADMIN_OTHER_INFO (size: 8)
 */
export interface ADMIN_OTHER_INFO {
  /** u32 */
  alrtad_errcode: number;
  /** u32 */
  alrtad_numstrings: number;
}

export const sizeofADMIN_OTHER_INFO = 8;

export function allocADMIN_OTHER_INFO(data?: Partial<ADMIN_OTHER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofADMIN_OTHER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.alrtad_errcode !== undefined) view.setUint32(0, Number(data.alrtad_errcode), true);
  // 0x04: u32
  if (data?.alrtad_numstrings !== undefined) view.setUint32(4, Number(data.alrtad_numstrings), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.ERRLOG_OTHER_INFO (size: 8)
 */
export interface ERRLOG_OTHER_INFO {
  /** u32 */
  alrter_errcode: number;
  /** u32 */
  alrter_offset: number;
}

export const sizeofERRLOG_OTHER_INFO = 8;

export function allocERRLOG_OTHER_INFO(data?: Partial<ERRLOG_OTHER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofERRLOG_OTHER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.alrter_errcode !== undefined) view.setUint32(0, Number(data.alrter_errcode), true);
  // 0x04: u32
  if (data?.alrter_offset !== undefined) view.setUint32(4, Number(data.alrter_offset), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.PRINT_OTHER_INFO (size: 16)
 */
export interface PRINT_OTHER_INFO {
  /** u32 */
  alrtpr_jobid: number;
  /** u32 */
  alrtpr_status: number;
  /** u32 */
  alrtpr_submitted: number;
  /** u32 */
  alrtpr_size: number;
}

export const sizeofPRINT_OTHER_INFO = 16;

export function allocPRINT_OTHER_INFO(data?: Partial<PRINT_OTHER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINT_OTHER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.alrtpr_jobid !== undefined) view.setUint32(0, Number(data.alrtpr_jobid), true);
  // 0x04: u32
  if (data?.alrtpr_status !== undefined) view.setUint32(4, Number(data.alrtpr_status), true);
  // 0x08: u32
  if (data?.alrtpr_submitted !== undefined) view.setUint32(8, Number(data.alrtpr_submitted), true);
  // 0x0c: u32
  if (data?.alrtpr_size !== undefined) view.setUint32(12, Number(data.alrtpr_size), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USER_OTHER_INFO (size: 8)
 */
export interface USER_OTHER_INFO {
  /** u32 */
  alrtus_errcode: number;
  /** u32 */
  alrtus_numstrings: number;
}

export const sizeofUSER_OTHER_INFO = 8;

export function allocUSER_OTHER_INFO(data?: Partial<USER_OTHER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_OTHER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.alrtus_errcode !== undefined) view.setUint32(0, Number(data.alrtus_errcode), true);
  // 0x04: u32
  if (data?.alrtus_numstrings !== undefined) view.setUint32(4, Number(data.alrtus_numstrings), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.MSG_INFO_0 (size: 8)
 */
export interface MSG_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  msgi0_name: string | null;
}

export const sizeofMSG_INFO_0 = 8;

export function allocMSG_INFO_0(data?: Partial<MSG_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofMSG_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.msgi0_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.msgi0_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.MSG_INFO_1 (size: 24)
 */
export interface MSG_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  msgi1_name: string | null;
  /** u32 */
  msgi1_forward_flag: number;
  /** Windows.Win32.Foundation.PWSTR */
  msgi1_forward: string | null;
}

export const sizeofMSG_INFO_1 = 24;

export function allocMSG_INFO_1(data?: Partial<MSG_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofMSG_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.msgi1_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.msgi1_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.msgi1_forward_flag !== undefined) view.setUint32(8, Number(data.msgi1_forward_flag), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.msgi1_forward !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.msgi1_forward);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.TIME_OF_DAY_INFO (size: 48)
 */
export interface TIME_OF_DAY_INFO {
  /** u32 */
  tod_elapsedt: number;
  /** u32 */
  tod_msecs: number;
  /** u32 */
  tod_hours: number;
  /** u32 */
  tod_mins: number;
  /** u32 */
  tod_secs: number;
  /** u32 */
  tod_hunds: number;
  /** i32 */
  tod_timezone: number;
  /** u32 */
  tod_tinterval: number;
  /** u32 */
  tod_day: number;
  /** u32 */
  tod_month: number;
  /** u32 */
  tod_year: number;
  /** u32 */
  tod_weekday: number;
}

export const sizeofTIME_OF_DAY_INFO = 48;

export function allocTIME_OF_DAY_INFO(data?: Partial<TIME_OF_DAY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTIME_OF_DAY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.tod_elapsedt !== undefined) view.setUint32(0, Number(data.tod_elapsedt), true);
  // 0x04: u32
  if (data?.tod_msecs !== undefined) view.setUint32(4, Number(data.tod_msecs), true);
  // 0x08: u32
  if (data?.tod_hours !== undefined) view.setUint32(8, Number(data.tod_hours), true);
  // 0x0c: u32
  if (data?.tod_mins !== undefined) view.setUint32(12, Number(data.tod_mins), true);
  // 0x10: u32
  if (data?.tod_secs !== undefined) view.setUint32(16, Number(data.tod_secs), true);
  // 0x14: u32
  if (data?.tod_hunds !== undefined) view.setUint32(20, Number(data.tod_hunds), true);
  // 0x18: i32
  if (data?.tod_timezone !== undefined) view.setInt32(24, Number(data.tod_timezone), true);
  // 0x1c: u32
  if (data?.tod_tinterval !== undefined) view.setUint32(28, Number(data.tod_tinterval), true);
  // 0x20: u32
  if (data?.tod_day !== undefined) view.setUint32(32, Number(data.tod_day), true);
  // 0x24: u32
  if (data?.tod_month !== undefined) view.setUint32(36, Number(data.tod_month), true);
  // 0x28: u32
  if (data?.tod_year !== undefined) view.setUint32(40, Number(data.tod_year), true);
  // 0x2c: u32
  if (data?.tod_weekday !== undefined) view.setUint32(44, Number(data.tod_weekday), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_INFO_0 (size: 64)
 */
export interface REPL_INFO_0 {
  /** u32 */
  rp0_role: number;
  /** Windows.Win32.Foundation.PWSTR */
  rp0_exportpath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  rp0_exportlist: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  rp0_importpath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  rp0_importlist: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  rp0_logonusername: string | null;
  /** u32 */
  rp0_interval: number;
  /** u32 */
  rp0_pulse: number;
  /** u32 */
  rp0_guardtime: number;
  /** u32 */
  rp0_random: number;
}

export const sizeofREPL_INFO_0 = 64;

export function allocREPL_INFO_0(data?: Partial<REPL_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rp0_role !== undefined) view.setUint32(0, Number(data.rp0_role), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.rp0_exportpath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.rp0_exportpath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.rp0_exportlist !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.rp0_exportlist);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.rp0_importpath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.rp0_importpath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.rp0_importlist !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.rp0_importlist);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.rp0_logonusername !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.rp0_logonusername);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.rp0_interval !== undefined) view.setUint32(48, Number(data.rp0_interval), true);
  // 0x34: u32
  if (data?.rp0_pulse !== undefined) view.setUint32(52, Number(data.rp0_pulse), true);
  // 0x38: u32
  if (data?.rp0_guardtime !== undefined) view.setUint32(56, Number(data.rp0_guardtime), true);
  // 0x3c: u32
  if (data?.rp0_random !== undefined) view.setUint32(60, Number(data.rp0_random), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_INFO_1000 (size: 8)
 */
export interface REPL_INFO_1000 {
  /** u32 */
  rp1000_interval: number;
}

export const sizeofREPL_INFO_1000 = 8;

export function allocREPL_INFO_1000(data?: Partial<REPL_INFO_1000>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_INFO_1000);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rp1000_interval !== undefined) view.setUint32(0, Number(data.rp1000_interval), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_INFO_1001 (size: 8)
 */
export interface REPL_INFO_1001 {
  /** u32 */
  rp1001_pulse: number;
}

export const sizeofREPL_INFO_1001 = 8;

export function allocREPL_INFO_1001(data?: Partial<REPL_INFO_1001>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_INFO_1001);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rp1001_pulse !== undefined) view.setUint32(0, Number(data.rp1001_pulse), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_INFO_1002 (size: 8)
 */
export interface REPL_INFO_1002 {
  /** u32 */
  rp1002_guardtime: number;
}

export const sizeofREPL_INFO_1002 = 8;

export function allocREPL_INFO_1002(data?: Partial<REPL_INFO_1002>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_INFO_1002);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rp1002_guardtime !== undefined) view.setUint32(0, Number(data.rp1002_guardtime), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_INFO_1003 (size: 8)
 */
export interface REPL_INFO_1003 {
  /** u32 */
  rp1003_random: number;
}

export const sizeofREPL_INFO_1003 = 8;

export function allocREPL_INFO_1003(data?: Partial<REPL_INFO_1003>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_INFO_1003);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rp1003_random !== undefined) view.setUint32(0, Number(data.rp1003_random), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_EDIR_INFO_0 (size: 8)
 */
export interface REPL_EDIR_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  rped0_dirname: string | null;
}

export const sizeofREPL_EDIR_INFO_0 = 8;

export function allocREPL_EDIR_INFO_0(data?: Partial<REPL_EDIR_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_EDIR_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.rped0_dirname !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.rped0_dirname);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_EDIR_INFO_1 (size: 16)
 */
export interface REPL_EDIR_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  rped1_dirname: string | null;
  /** u32 */
  rped1_integrity: number;
  /** u32 */
  rped1_extent: number;
}

export const sizeofREPL_EDIR_INFO_1 = 16;

export function allocREPL_EDIR_INFO_1(data?: Partial<REPL_EDIR_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_EDIR_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.rped1_dirname !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.rped1_dirname);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.rped1_integrity !== undefined) view.setUint32(8, Number(data.rped1_integrity), true);
  // 0x0c: u32
  if (data?.rped1_extent !== undefined) view.setUint32(12, Number(data.rped1_extent), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_EDIR_INFO_2 (size: 24)
 */
export interface REPL_EDIR_INFO_2 {
  /** Windows.Win32.Foundation.PWSTR */
  rped2_dirname: string | null;
  /** u32 */
  rped2_integrity: number;
  /** u32 */
  rped2_extent: number;
  /** u32 */
  rped2_lockcount: number;
  /** u32 */
  rped2_locktime: number;
}

export const sizeofREPL_EDIR_INFO_2 = 24;

export function allocREPL_EDIR_INFO_2(data?: Partial<REPL_EDIR_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_EDIR_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.rped2_dirname !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.rped2_dirname);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.rped2_integrity !== undefined) view.setUint32(8, Number(data.rped2_integrity), true);
  // 0x0c: u32
  if (data?.rped2_extent !== undefined) view.setUint32(12, Number(data.rped2_extent), true);
  // 0x10: u32
  if (data?.rped2_lockcount !== undefined) view.setUint32(16, Number(data.rped2_lockcount), true);
  // 0x14: u32
  if (data?.rped2_locktime !== undefined) view.setUint32(20, Number(data.rped2_locktime), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_EDIR_INFO_1000 (size: 8)
 */
export interface REPL_EDIR_INFO_1000 {
  /** u32 */
  rped1000_integrity: number;
}

export const sizeofREPL_EDIR_INFO_1000 = 8;

export function allocREPL_EDIR_INFO_1000(data?: Partial<REPL_EDIR_INFO_1000>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_EDIR_INFO_1000);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rped1000_integrity !== undefined) view.setUint32(0, Number(data.rped1000_integrity), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_EDIR_INFO_1001 (size: 8)
 */
export interface REPL_EDIR_INFO_1001 {
  /** u32 */
  rped1001_extent: number;
}

export const sizeofREPL_EDIR_INFO_1001 = 8;

export function allocREPL_EDIR_INFO_1001(data?: Partial<REPL_EDIR_INFO_1001>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_EDIR_INFO_1001);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rped1001_extent !== undefined) view.setUint32(0, Number(data.rped1001_extent), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_IDIR_INFO_0 (size: 8)
 */
export interface REPL_IDIR_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  rpid0_dirname: string | null;
}

export const sizeofREPL_IDIR_INFO_0 = 8;

export function allocREPL_IDIR_INFO_0(data?: Partial<REPL_IDIR_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_IDIR_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.rpid0_dirname !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.rpid0_dirname);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.REPL_IDIR_INFO_1 (size: 40)
 */
export interface REPL_IDIR_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  rpid1_dirname: string | null;
  /** u32 */
  rpid1_state: number;
  /** Windows.Win32.Foundation.PWSTR */
  rpid1_mastername: string | null;
  /** u32 */
  rpid1_last_update_time: number;
  /** u32 */
  rpid1_lockcount: number;
  /** u32 */
  rpid1_locktime: number;
}

export const sizeofREPL_IDIR_INFO_1 = 40;

export function allocREPL_IDIR_INFO_1(data?: Partial<REPL_IDIR_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofREPL_IDIR_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.rpid1_dirname !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.rpid1_dirname);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.rpid1_state !== undefined) view.setUint32(8, Number(data.rpid1_state), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.rpid1_mastername !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.rpid1_mastername);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.rpid1_last_update_time !== undefined) view.setUint32(24, Number(data.rpid1_last_update_time), true);
  // 0x1c: u32
  if (data?.rpid1_lockcount !== undefined) view.setUint32(28, Number(data.rpid1_lockcount), true);
  // 0x20: u32
  if (data?.rpid1_locktime !== undefined) view.setUint32(32, Number(data.rpid1_locktime), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_100 (size: 16)
 */
export interface SERVER_INFO_100 {
  /** u32 */
  sv100_platform_id: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv100_name: string | null;
}

export const sizeofSERVER_INFO_100 = 16;

export function allocSERVER_INFO_100(data?: Partial<SERVER_INFO_100>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_100);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv100_platform_id !== undefined) view.setUint32(0, Number(data.sv100_platform_id), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.sv100_name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.sv100_name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_101 (size: 40)
 */
export interface SERVER_INFO_101 {
  /** u32 */
  sv101_platform_id: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv101_name: string | null;
  /** u32 */
  sv101_version_major: number;
  /** u32 */
  sv101_version_minor: number;
  /** Windows.Win32.NetworkManagement.NetManagement.NET_SERVER_TYPE */
  sv101_type: NET_SERVER_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  sv101_comment: string | null;
}

export const sizeofSERVER_INFO_101 = 40;

export function allocSERVER_INFO_101(data?: Partial<SERVER_INFO_101>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_101);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv101_platform_id !== undefined) view.setUint32(0, Number(data.sv101_platform_id), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.sv101_name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.sv101_name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.sv101_version_major !== undefined) view.setUint32(16, Number(data.sv101_version_major), true);
  // 0x14: u32
  if (data?.sv101_version_minor !== undefined) view.setUint32(20, Number(data.sv101_version_minor), true);
  // 0x18: u32
  if (data?.sv101_type !== undefined) view.setUint32(24, Number(data.sv101_type), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.sv101_comment !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.sv101_comment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_102 (size: 72)
 */
export interface SERVER_INFO_102 {
  /** u32 */
  sv102_platform_id: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv102_name: string | null;
  /** u32 */
  sv102_version_major: number;
  /** u32 */
  sv102_version_minor: number;
  /** Windows.Win32.NetworkManagement.NetManagement.NET_SERVER_TYPE */
  sv102_type: NET_SERVER_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  sv102_comment: string | null;
  /** u32 */
  sv102_users: number;
  /** i32 */
  sv102_disc: number;
  /** Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_HIDDEN */
  sv102_hidden: SERVER_INFO_HIDDEN;
  /** u32 */
  sv102_announce: number;
  /** u32 */
  sv102_anndelta: number;
  /** u32 */
  sv102_licenses: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv102_userpath: string | null;
}

export const sizeofSERVER_INFO_102 = 72;

export function allocSERVER_INFO_102(data?: Partial<SERVER_INFO_102>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_102);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv102_platform_id !== undefined) view.setUint32(0, Number(data.sv102_platform_id), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.sv102_name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.sv102_name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.sv102_version_major !== undefined) view.setUint32(16, Number(data.sv102_version_major), true);
  // 0x14: u32
  if (data?.sv102_version_minor !== undefined) view.setUint32(20, Number(data.sv102_version_minor), true);
  // 0x18: u32
  if (data?.sv102_type !== undefined) view.setUint32(24, Number(data.sv102_type), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.sv102_comment !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.sv102_comment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.sv102_users !== undefined) view.setUint32(40, Number(data.sv102_users), true);
  // 0x2c: i32
  if (data?.sv102_disc !== undefined) view.setInt32(44, Number(data.sv102_disc), true);
  // 0x30: u32
  if (data?.sv102_hidden !== undefined) view.setUint32(48, Number(data.sv102_hidden), true);
  // 0x34: u32
  if (data?.sv102_announce !== undefined) view.setUint32(52, Number(data.sv102_announce), true);
  // 0x38: u32
  if (data?.sv102_anndelta !== undefined) view.setUint32(56, Number(data.sv102_anndelta), true);
  // 0x3c: u32
  if (data?.sv102_licenses !== undefined) view.setUint32(60, Number(data.sv102_licenses), true);
  // 0x40: buffer
  if (data?.sv102_userpath !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.sv102_userpath);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_103 (size: 80)
 */
export interface SERVER_INFO_103 {
  /** u32 */
  sv103_platform_id: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv103_name: string | null;
  /** u32 */
  sv103_version_major: number;
  /** u32 */
  sv103_version_minor: number;
  /** u32 */
  sv103_type: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv103_comment: string | null;
  /** u32 */
  sv103_users: number;
  /** i32 */
  sv103_disc: number;
  /** Windows.Win32.Foundation.BOOL */
  sv103_hidden: boolean;
  /** u32 */
  sv103_announce: number;
  /** u32 */
  sv103_anndelta: number;
  /** u32 */
  sv103_licenses: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv103_userpath: string | null;
  /** u32 */
  sv103_capabilities: number;
}

export const sizeofSERVER_INFO_103 = 80;

export function allocSERVER_INFO_103(data?: Partial<SERVER_INFO_103>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_103);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv103_platform_id !== undefined) view.setUint32(0, Number(data.sv103_platform_id), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.sv103_name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.sv103_name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.sv103_version_major !== undefined) view.setUint32(16, Number(data.sv103_version_major), true);
  // 0x14: u32
  if (data?.sv103_version_minor !== undefined) view.setUint32(20, Number(data.sv103_version_minor), true);
  // 0x18: u32
  if (data?.sv103_type !== undefined) view.setUint32(24, Number(data.sv103_type), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.sv103_comment !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.sv103_comment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.sv103_users !== undefined) view.setUint32(40, Number(data.sv103_users), true);
  // 0x2c: i32
  if (data?.sv103_disc !== undefined) view.setInt32(44, Number(data.sv103_disc), true);
  // 0x30: i32
  if (data?.sv103_hidden !== undefined) view.setInt32(48, Number(data.sv103_hidden), true);
  // 0x34: u32
  if (data?.sv103_announce !== undefined) view.setUint32(52, Number(data.sv103_announce), true);
  // 0x38: u32
  if (data?.sv103_anndelta !== undefined) view.setUint32(56, Number(data.sv103_anndelta), true);
  // 0x3c: u32
  if (data?.sv103_licenses !== undefined) view.setUint32(60, Number(data.sv103_licenses), true);
  // 0x40: buffer
  if (data?.sv103_userpath !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.sv103_userpath);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.sv103_capabilities !== undefined) view.setUint32(72, Number(data.sv103_capabilities), true);
  // 0x4c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_402 (size: 144)
 */
export interface SERVER_INFO_402 {
  /** u32 */
  sv402_ulist_mtime: number;
  /** u32 */
  sv402_glist_mtime: number;
  /** u32 */
  sv402_alist_mtime: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv402_alerts: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_SECURITY */
  sv402_security: SERVER_INFO_SECURITY;
  /** u32 */
  sv402_numadmin: number;
  /** u32 */
  sv402_lanmask: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv402_guestacct: string | null;
  /** u32 */
  sv402_chdevs: number;
  /** u32 */
  sv402_chdevq: number;
  /** u32 */
  sv402_chdevjobs: number;
  /** u32 */
  sv402_connections: number;
  /** u32 */
  sv402_shares: number;
  /** u32 */
  sv402_openfiles: number;
  /** u32 */
  sv402_sessopens: number;
  /** u32 */
  sv402_sessvcs: number;
  /** u32 */
  sv402_sessreqs: number;
  /** u32 */
  sv402_opensearch: number;
  /** u32 */
  sv402_activelocks: number;
  /** u32 */
  sv402_numreqbuf: number;
  /** u32 */
  sv402_sizreqbuf: number;
  /** u32 */
  sv402_numbigbuf: number;
  /** u32 */
  sv402_numfiletasks: number;
  /** u32 */
  sv402_alertsched: number;
  /** u32 */
  sv402_erroralert: number;
  /** u32 */
  sv402_logonalert: number;
  /** u32 */
  sv402_accessalert: number;
  /** u32 */
  sv402_diskalert: number;
  /** u32 */
  sv402_netioalert: number;
  /** u32 */
  sv402_maxauditsz: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv402_srvheuristics: string | null;
}

export const sizeofSERVER_INFO_402 = 144;

export function allocSERVER_INFO_402(data?: Partial<SERVER_INFO_402>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_402);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv402_ulist_mtime !== undefined) view.setUint32(0, Number(data.sv402_ulist_mtime), true);
  // 0x04: u32
  if (data?.sv402_glist_mtime !== undefined) view.setUint32(4, Number(data.sv402_glist_mtime), true);
  // 0x08: u32
  if (data?.sv402_alist_mtime !== undefined) view.setUint32(8, Number(data.sv402_alist_mtime), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.sv402_alerts !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.sv402_alerts);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.sv402_security !== undefined) view.setUint32(24, Number(data.sv402_security), true);
  // 0x1c: u32
  if (data?.sv402_numadmin !== undefined) view.setUint32(28, Number(data.sv402_numadmin), true);
  // 0x20: u32
  if (data?.sv402_lanmask !== undefined) view.setUint32(32, Number(data.sv402_lanmask), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.sv402_guestacct !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.sv402_guestacct);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.sv402_chdevs !== undefined) view.setUint32(48, Number(data.sv402_chdevs), true);
  // 0x34: u32
  if (data?.sv402_chdevq !== undefined) view.setUint32(52, Number(data.sv402_chdevq), true);
  // 0x38: u32
  if (data?.sv402_chdevjobs !== undefined) view.setUint32(56, Number(data.sv402_chdevjobs), true);
  // 0x3c: u32
  if (data?.sv402_connections !== undefined) view.setUint32(60, Number(data.sv402_connections), true);
  // 0x40: u32
  if (data?.sv402_shares !== undefined) view.setUint32(64, Number(data.sv402_shares), true);
  // 0x44: u32
  if (data?.sv402_openfiles !== undefined) view.setUint32(68, Number(data.sv402_openfiles), true);
  // 0x48: u32
  if (data?.sv402_sessopens !== undefined) view.setUint32(72, Number(data.sv402_sessopens), true);
  // 0x4c: u32
  if (data?.sv402_sessvcs !== undefined) view.setUint32(76, Number(data.sv402_sessvcs), true);
  // 0x50: u32
  if (data?.sv402_sessreqs !== undefined) view.setUint32(80, Number(data.sv402_sessreqs), true);
  // 0x54: u32
  if (data?.sv402_opensearch !== undefined) view.setUint32(84, Number(data.sv402_opensearch), true);
  // 0x58: u32
  if (data?.sv402_activelocks !== undefined) view.setUint32(88, Number(data.sv402_activelocks), true);
  // 0x5c: u32
  if (data?.sv402_numreqbuf !== undefined) view.setUint32(92, Number(data.sv402_numreqbuf), true);
  // 0x60: u32
  if (data?.sv402_sizreqbuf !== undefined) view.setUint32(96, Number(data.sv402_sizreqbuf), true);
  // 0x64: u32
  if (data?.sv402_numbigbuf !== undefined) view.setUint32(100, Number(data.sv402_numbigbuf), true);
  // 0x68: u32
  if (data?.sv402_numfiletasks !== undefined) view.setUint32(104, Number(data.sv402_numfiletasks), true);
  // 0x6c: u32
  if (data?.sv402_alertsched !== undefined) view.setUint32(108, Number(data.sv402_alertsched), true);
  // 0x70: u32
  if (data?.sv402_erroralert !== undefined) view.setUint32(112, Number(data.sv402_erroralert), true);
  // 0x74: u32
  if (data?.sv402_logonalert !== undefined) view.setUint32(116, Number(data.sv402_logonalert), true);
  // 0x78: u32
  if (data?.sv402_accessalert !== undefined) view.setUint32(120, Number(data.sv402_accessalert), true);
  // 0x7c: u32
  if (data?.sv402_diskalert !== undefined) view.setUint32(124, Number(data.sv402_diskalert), true);
  // 0x80: u32
  if (data?.sv402_netioalert !== undefined) view.setUint32(128, Number(data.sv402_netioalert), true);
  // 0x84: u32
  if (data?.sv402_maxauditsz !== undefined) view.setUint32(132, Number(data.sv402_maxauditsz), true);
  // 0x88: buffer
  if (data?.sv402_srvheuristics !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.sv402_srvheuristics);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_403 (size: 160)
 */
export interface SERVER_INFO_403 {
  /** u32 */
  sv403_ulist_mtime: number;
  /** u32 */
  sv403_glist_mtime: number;
  /** u32 */
  sv403_alist_mtime: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv403_alerts: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_SECURITY */
  sv403_security: SERVER_INFO_SECURITY;
  /** u32 */
  sv403_numadmin: number;
  /** u32 */
  sv403_lanmask: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv403_guestacct: string | null;
  /** u32 */
  sv403_chdevs: number;
  /** u32 */
  sv403_chdevq: number;
  /** u32 */
  sv403_chdevjobs: number;
  /** u32 */
  sv403_connections: number;
  /** u32 */
  sv403_shares: number;
  /** u32 */
  sv403_openfiles: number;
  /** u32 */
  sv403_sessopens: number;
  /** u32 */
  sv403_sessvcs: number;
  /** u32 */
  sv403_sessreqs: number;
  /** u32 */
  sv403_opensearch: number;
  /** u32 */
  sv403_activelocks: number;
  /** u32 */
  sv403_numreqbuf: number;
  /** u32 */
  sv403_sizreqbuf: number;
  /** u32 */
  sv403_numbigbuf: number;
  /** u32 */
  sv403_numfiletasks: number;
  /** u32 */
  sv403_alertsched: number;
  /** u32 */
  sv403_erroralert: number;
  /** u32 */
  sv403_logonalert: number;
  /** u32 */
  sv403_accessalert: number;
  /** u32 */
  sv403_diskalert: number;
  /** u32 */
  sv403_netioalert: number;
  /** u32 */
  sv403_maxauditsz: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv403_srvheuristics: string | null;
  /** u32 */
  sv403_auditedevents: number;
  /** u32 */
  sv403_autoprofile: number;
  /** Windows.Win32.Foundation.PWSTR */
  sv403_autopath: string | null;
}

export const sizeofSERVER_INFO_403 = 160;

export function allocSERVER_INFO_403(data?: Partial<SERVER_INFO_403>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_403);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv403_ulist_mtime !== undefined) view.setUint32(0, Number(data.sv403_ulist_mtime), true);
  // 0x04: u32
  if (data?.sv403_glist_mtime !== undefined) view.setUint32(4, Number(data.sv403_glist_mtime), true);
  // 0x08: u32
  if (data?.sv403_alist_mtime !== undefined) view.setUint32(8, Number(data.sv403_alist_mtime), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.sv403_alerts !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.sv403_alerts);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.sv403_security !== undefined) view.setUint32(24, Number(data.sv403_security), true);
  // 0x1c: u32
  if (data?.sv403_numadmin !== undefined) view.setUint32(28, Number(data.sv403_numadmin), true);
  // 0x20: u32
  if (data?.sv403_lanmask !== undefined) view.setUint32(32, Number(data.sv403_lanmask), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.sv403_guestacct !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.sv403_guestacct);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.sv403_chdevs !== undefined) view.setUint32(48, Number(data.sv403_chdevs), true);
  // 0x34: u32
  if (data?.sv403_chdevq !== undefined) view.setUint32(52, Number(data.sv403_chdevq), true);
  // 0x38: u32
  if (data?.sv403_chdevjobs !== undefined) view.setUint32(56, Number(data.sv403_chdevjobs), true);
  // 0x3c: u32
  if (data?.sv403_connections !== undefined) view.setUint32(60, Number(data.sv403_connections), true);
  // 0x40: u32
  if (data?.sv403_shares !== undefined) view.setUint32(64, Number(data.sv403_shares), true);
  // 0x44: u32
  if (data?.sv403_openfiles !== undefined) view.setUint32(68, Number(data.sv403_openfiles), true);
  // 0x48: u32
  if (data?.sv403_sessopens !== undefined) view.setUint32(72, Number(data.sv403_sessopens), true);
  // 0x4c: u32
  if (data?.sv403_sessvcs !== undefined) view.setUint32(76, Number(data.sv403_sessvcs), true);
  // 0x50: u32
  if (data?.sv403_sessreqs !== undefined) view.setUint32(80, Number(data.sv403_sessreqs), true);
  // 0x54: u32
  if (data?.sv403_opensearch !== undefined) view.setUint32(84, Number(data.sv403_opensearch), true);
  // 0x58: u32
  if (data?.sv403_activelocks !== undefined) view.setUint32(88, Number(data.sv403_activelocks), true);
  // 0x5c: u32
  if (data?.sv403_numreqbuf !== undefined) view.setUint32(92, Number(data.sv403_numreqbuf), true);
  // 0x60: u32
  if (data?.sv403_sizreqbuf !== undefined) view.setUint32(96, Number(data.sv403_sizreqbuf), true);
  // 0x64: u32
  if (data?.sv403_numbigbuf !== undefined) view.setUint32(100, Number(data.sv403_numbigbuf), true);
  // 0x68: u32
  if (data?.sv403_numfiletasks !== undefined) view.setUint32(104, Number(data.sv403_numfiletasks), true);
  // 0x6c: u32
  if (data?.sv403_alertsched !== undefined) view.setUint32(108, Number(data.sv403_alertsched), true);
  // 0x70: u32
  if (data?.sv403_erroralert !== undefined) view.setUint32(112, Number(data.sv403_erroralert), true);
  // 0x74: u32
  if (data?.sv403_logonalert !== undefined) view.setUint32(116, Number(data.sv403_logonalert), true);
  // 0x78: u32
  if (data?.sv403_accessalert !== undefined) view.setUint32(120, Number(data.sv403_accessalert), true);
  // 0x7c: u32
  if (data?.sv403_diskalert !== undefined) view.setUint32(124, Number(data.sv403_diskalert), true);
  // 0x80: u32
  if (data?.sv403_netioalert !== undefined) view.setUint32(128, Number(data.sv403_netioalert), true);
  // 0x84: u32
  if (data?.sv403_maxauditsz !== undefined) view.setUint32(132, Number(data.sv403_maxauditsz), true);
  // 0x88: buffer
  if (data?.sv403_srvheuristics !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.sv403_srvheuristics);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: u32
  if (data?.sv403_auditedevents !== undefined) view.setUint32(144, Number(data.sv403_auditedevents), true);
  // 0x94: u32
  if (data?.sv403_autoprofile !== undefined) view.setUint32(148, Number(data.sv403_autoprofile), true);
  // 0x98: buffer
  if (data?.sv403_autopath !== undefined) {
    (buf as any)._f152 = util.pwstrToFfi(data.sv403_autopath);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f152)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_502 (size: 72)
 */
export interface SERVER_INFO_502 {
  /** u32 */
  sv502_sessopens: number;
  /** u32 */
  sv502_sessvcs: number;
  /** u32 */
  sv502_opensearch: number;
  /** u32 */
  sv502_sizreqbuf: number;
  /** u32 */
  sv502_initworkitems: number;
  /** u32 */
  sv502_maxworkitems: number;
  /** u32 */
  sv502_rawworkitems: number;
  /** u32 */
  sv502_irpstacksize: number;
  /** u32 */
  sv502_maxrawbuflen: number;
  /** u32 */
  sv502_sessusers: number;
  /** u32 */
  sv502_sessconns: number;
  /** u32 */
  sv502_maxpagedmemoryusage: number;
  /** u32 */
  sv502_maxnonpagedmemoryusage: number;
  /** Windows.Win32.Foundation.BOOL */
  sv502_enablesoftcompat: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv502_enableforcedlogoff: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv502_timesource: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv502_acceptdownlevelapis: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv502_lmannounce: boolean;
}

export const sizeofSERVER_INFO_502 = 72;

export function allocSERVER_INFO_502(data?: Partial<SERVER_INFO_502>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_502);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv502_sessopens !== undefined) view.setUint32(0, Number(data.sv502_sessopens), true);
  // 0x04: u32
  if (data?.sv502_sessvcs !== undefined) view.setUint32(4, Number(data.sv502_sessvcs), true);
  // 0x08: u32
  if (data?.sv502_opensearch !== undefined) view.setUint32(8, Number(data.sv502_opensearch), true);
  // 0x0c: u32
  if (data?.sv502_sizreqbuf !== undefined) view.setUint32(12, Number(data.sv502_sizreqbuf), true);
  // 0x10: u32
  if (data?.sv502_initworkitems !== undefined) view.setUint32(16, Number(data.sv502_initworkitems), true);
  // 0x14: u32
  if (data?.sv502_maxworkitems !== undefined) view.setUint32(20, Number(data.sv502_maxworkitems), true);
  // 0x18: u32
  if (data?.sv502_rawworkitems !== undefined) view.setUint32(24, Number(data.sv502_rawworkitems), true);
  // 0x1c: u32
  if (data?.sv502_irpstacksize !== undefined) view.setUint32(28, Number(data.sv502_irpstacksize), true);
  // 0x20: u32
  if (data?.sv502_maxrawbuflen !== undefined) view.setUint32(32, Number(data.sv502_maxrawbuflen), true);
  // 0x24: u32
  if (data?.sv502_sessusers !== undefined) view.setUint32(36, Number(data.sv502_sessusers), true);
  // 0x28: u32
  if (data?.sv502_sessconns !== undefined) view.setUint32(40, Number(data.sv502_sessconns), true);
  // 0x2c: u32
  if (data?.sv502_maxpagedmemoryusage !== undefined) view.setUint32(44, Number(data.sv502_maxpagedmemoryusage), true);
  // 0x30: u32
  if (data?.sv502_maxnonpagedmemoryusage !== undefined) view.setUint32(48, Number(data.sv502_maxnonpagedmemoryusage), true);
  // 0x34: i32
  if (data?.sv502_enablesoftcompat !== undefined) view.setInt32(52, Number(data.sv502_enablesoftcompat), true);
  // 0x38: i32
  if (data?.sv502_enableforcedlogoff !== undefined) view.setInt32(56, Number(data.sv502_enableforcedlogoff), true);
  // 0x3c: i32
  if (data?.sv502_timesource !== undefined) view.setInt32(60, Number(data.sv502_timesource), true);
  // 0x40: i32
  if (data?.sv502_acceptdownlevelapis !== undefined) view.setInt32(64, Number(data.sv502_acceptdownlevelapis), true);
  // 0x44: i32
  if (data?.sv502_lmannounce !== undefined) view.setInt32(68, Number(data.sv502_lmannounce), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_503 (size: 176)
 */
export interface SERVER_INFO_503 {
  /** u32 */
  sv503_sessopens: number;
  /** u32 */
  sv503_sessvcs: number;
  /** u32 */
  sv503_opensearch: number;
  /** u32 */
  sv503_sizreqbuf: number;
  /** u32 */
  sv503_initworkitems: number;
  /** u32 */
  sv503_maxworkitems: number;
  /** u32 */
  sv503_rawworkitems: number;
  /** u32 */
  sv503_irpstacksize: number;
  /** u32 */
  sv503_maxrawbuflen: number;
  /** u32 */
  sv503_sessusers: number;
  /** u32 */
  sv503_sessconns: number;
  /** u32 */
  sv503_maxpagedmemoryusage: number;
  /** u32 */
  sv503_maxnonpagedmemoryusage: number;
  /** Windows.Win32.Foundation.BOOL */
  sv503_enablesoftcompat: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv503_enableforcedlogoff: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv503_timesource: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv503_acceptdownlevelapis: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv503_lmannounce: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  sv503_domain: string | null;
  /** u32 */
  sv503_maxcopyreadlen: number;
  /** u32 */
  sv503_maxcopywritelen: number;
  /** u32 */
  sv503_minkeepsearch: number;
  /** u32 */
  sv503_maxkeepsearch: number;
  /** u32 */
  sv503_minkeepcomplsearch: number;
  /** u32 */
  sv503_maxkeepcomplsearch: number;
  /** u32 */
  sv503_threadcountadd: number;
  /** u32 */
  sv503_numblockthreads: number;
  /** u32 */
  sv503_scavtimeout: number;
  /** u32 */
  sv503_minrcvqueue: number;
  /** u32 */
  sv503_minfreeworkitems: number;
  /** u32 */
  sv503_xactmemsize: number;
  /** u32 */
  sv503_threadpriority: number;
  /** u32 */
  sv503_maxmpxct: number;
  /** u32 */
  sv503_oplockbreakwait: number;
  /** u32 */
  sv503_oplockbreakresponsewait: number;
  /** Windows.Win32.Foundation.BOOL */
  sv503_enableoplocks: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv503_enableoplockforceclose: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv503_enablefcbopens: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv503_enableraw: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv503_enablesharednetdrives: boolean;
  /** u32 */
  sv503_minfreeconnections: number;
  /** u32 */
  sv503_maxfreeconnections: number;
}

export const sizeofSERVER_INFO_503 = 176;

export function allocSERVER_INFO_503(data?: Partial<SERVER_INFO_503>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_503);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv503_sessopens !== undefined) view.setUint32(0, Number(data.sv503_sessopens), true);
  // 0x04: u32
  if (data?.sv503_sessvcs !== undefined) view.setUint32(4, Number(data.sv503_sessvcs), true);
  // 0x08: u32
  if (data?.sv503_opensearch !== undefined) view.setUint32(8, Number(data.sv503_opensearch), true);
  // 0x0c: u32
  if (data?.sv503_sizreqbuf !== undefined) view.setUint32(12, Number(data.sv503_sizreqbuf), true);
  // 0x10: u32
  if (data?.sv503_initworkitems !== undefined) view.setUint32(16, Number(data.sv503_initworkitems), true);
  // 0x14: u32
  if (data?.sv503_maxworkitems !== undefined) view.setUint32(20, Number(data.sv503_maxworkitems), true);
  // 0x18: u32
  if (data?.sv503_rawworkitems !== undefined) view.setUint32(24, Number(data.sv503_rawworkitems), true);
  // 0x1c: u32
  if (data?.sv503_irpstacksize !== undefined) view.setUint32(28, Number(data.sv503_irpstacksize), true);
  // 0x20: u32
  if (data?.sv503_maxrawbuflen !== undefined) view.setUint32(32, Number(data.sv503_maxrawbuflen), true);
  // 0x24: u32
  if (data?.sv503_sessusers !== undefined) view.setUint32(36, Number(data.sv503_sessusers), true);
  // 0x28: u32
  if (data?.sv503_sessconns !== undefined) view.setUint32(40, Number(data.sv503_sessconns), true);
  // 0x2c: u32
  if (data?.sv503_maxpagedmemoryusage !== undefined) view.setUint32(44, Number(data.sv503_maxpagedmemoryusage), true);
  // 0x30: u32
  if (data?.sv503_maxnonpagedmemoryusage !== undefined) view.setUint32(48, Number(data.sv503_maxnonpagedmemoryusage), true);
  // 0x34: i32
  if (data?.sv503_enablesoftcompat !== undefined) view.setInt32(52, Number(data.sv503_enablesoftcompat), true);
  // 0x38: i32
  if (data?.sv503_enableforcedlogoff !== undefined) view.setInt32(56, Number(data.sv503_enableforcedlogoff), true);
  // 0x3c: i32
  if (data?.sv503_timesource !== undefined) view.setInt32(60, Number(data.sv503_timesource), true);
  // 0x40: i32
  if (data?.sv503_acceptdownlevelapis !== undefined) view.setInt32(64, Number(data.sv503_acceptdownlevelapis), true);
  // 0x44: i32
  if (data?.sv503_lmannounce !== undefined) view.setInt32(68, Number(data.sv503_lmannounce), true);
  // 0x48: buffer
  if (data?.sv503_domain !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.sv503_domain);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.sv503_maxcopyreadlen !== undefined) view.setUint32(80, Number(data.sv503_maxcopyreadlen), true);
  // 0x54: u32
  if (data?.sv503_maxcopywritelen !== undefined) view.setUint32(84, Number(data.sv503_maxcopywritelen), true);
  // 0x58: u32
  if (data?.sv503_minkeepsearch !== undefined) view.setUint32(88, Number(data.sv503_minkeepsearch), true);
  // 0x5c: u32
  if (data?.sv503_maxkeepsearch !== undefined) view.setUint32(92, Number(data.sv503_maxkeepsearch), true);
  // 0x60: u32
  if (data?.sv503_minkeepcomplsearch !== undefined) view.setUint32(96, Number(data.sv503_minkeepcomplsearch), true);
  // 0x64: u32
  if (data?.sv503_maxkeepcomplsearch !== undefined) view.setUint32(100, Number(data.sv503_maxkeepcomplsearch), true);
  // 0x68: u32
  if (data?.sv503_threadcountadd !== undefined) view.setUint32(104, Number(data.sv503_threadcountadd), true);
  // 0x6c: u32
  if (data?.sv503_numblockthreads !== undefined) view.setUint32(108, Number(data.sv503_numblockthreads), true);
  // 0x70: u32
  if (data?.sv503_scavtimeout !== undefined) view.setUint32(112, Number(data.sv503_scavtimeout), true);
  // 0x74: u32
  if (data?.sv503_minrcvqueue !== undefined) view.setUint32(116, Number(data.sv503_minrcvqueue), true);
  // 0x78: u32
  if (data?.sv503_minfreeworkitems !== undefined) view.setUint32(120, Number(data.sv503_minfreeworkitems), true);
  // 0x7c: u32
  if (data?.sv503_xactmemsize !== undefined) view.setUint32(124, Number(data.sv503_xactmemsize), true);
  // 0x80: u32
  if (data?.sv503_threadpriority !== undefined) view.setUint32(128, Number(data.sv503_threadpriority), true);
  // 0x84: u32
  if (data?.sv503_maxmpxct !== undefined) view.setUint32(132, Number(data.sv503_maxmpxct), true);
  // 0x88: u32
  if (data?.sv503_oplockbreakwait !== undefined) view.setUint32(136, Number(data.sv503_oplockbreakwait), true);
  // 0x8c: u32
  if (data?.sv503_oplockbreakresponsewait !== undefined) view.setUint32(140, Number(data.sv503_oplockbreakresponsewait), true);
  // 0x90: i32
  if (data?.sv503_enableoplocks !== undefined) view.setInt32(144, Number(data.sv503_enableoplocks), true);
  // 0x94: i32
  if (data?.sv503_enableoplockforceclose !== undefined) view.setInt32(148, Number(data.sv503_enableoplockforceclose), true);
  // 0x98: i32
  if (data?.sv503_enablefcbopens !== undefined) view.setInt32(152, Number(data.sv503_enablefcbopens), true);
  // 0x9c: i32
  if (data?.sv503_enableraw !== undefined) view.setInt32(156, Number(data.sv503_enableraw), true);
  // 0xa0: i32
  if (data?.sv503_enablesharednetdrives !== undefined) view.setInt32(160, Number(data.sv503_enablesharednetdrives), true);
  // 0xa4: u32
  if (data?.sv503_minfreeconnections !== undefined) view.setUint32(164, Number(data.sv503_minfreeconnections), true);
  // 0xa8: u32
  if (data?.sv503_maxfreeconnections !== undefined) view.setUint32(168, Number(data.sv503_maxfreeconnections), true);
  // 0xac: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_599 (size: 232)
 */
export interface SERVER_INFO_599 {
  /** u32 */
  sv599_sessopens: number;
  /** u32 */
  sv599_sessvcs: number;
  /** u32 */
  sv599_opensearch: number;
  /** u32 */
  sv599_sizreqbuf: number;
  /** u32 */
  sv599_initworkitems: number;
  /** u32 */
  sv599_maxworkitems: number;
  /** u32 */
  sv599_rawworkitems: number;
  /** u32 */
  sv599_irpstacksize: number;
  /** u32 */
  sv599_maxrawbuflen: number;
  /** u32 */
  sv599_sessusers: number;
  /** u32 */
  sv599_sessconns: number;
  /** u32 */
  sv599_maxpagedmemoryusage: number;
  /** u32 */
  sv599_maxnonpagedmemoryusage: number;
  /** Windows.Win32.Foundation.BOOL */
  sv599_enablesoftcompat: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv599_enableforcedlogoff: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv599_timesource: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv599_acceptdownlevelapis: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv599_lmannounce: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  sv599_domain: string | null;
  /** u32 */
  sv599_maxcopyreadlen: number;
  /** u32 */
  sv599_maxcopywritelen: number;
  /** u32 */
  sv599_minkeepsearch: number;
  /** u32 */
  sv599_maxkeepsearch: number;
  /** u32 */
  sv599_minkeepcomplsearch: number;
  /** u32 */
  sv599_maxkeepcomplsearch: number;
  /** u32 */
  sv599_threadcountadd: number;
  /** u32 */
  sv599_numblockthreads: number;
  /** u32 */
  sv599_scavtimeout: number;
  /** u32 */
  sv599_minrcvqueue: number;
  /** u32 */
  sv599_minfreeworkitems: number;
  /** u32 */
  sv599_xactmemsize: number;
  /** u32 */
  sv599_threadpriority: number;
  /** u32 */
  sv599_maxmpxct: number;
  /** u32 */
  sv599_oplockbreakwait: number;
  /** u32 */
  sv599_oplockbreakresponsewait: number;
  /** Windows.Win32.Foundation.BOOL */
  sv599_enableoplocks: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv599_enableoplockforceclose: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv599_enablefcbopens: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv599_enableraw: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv599_enablesharednetdrives: boolean;
  /** u32 */
  sv599_minfreeconnections: number;
  /** u32 */
  sv599_maxfreeconnections: number;
  /** u32 */
  sv599_initsesstable: number;
  /** u32 */
  sv599_initconntable: number;
  /** u32 */
  sv599_initfiletable: number;
  /** u32 */
  sv599_initsearchtable: number;
  /** u32 */
  sv599_alertschedule: number;
  /** u32 */
  sv599_errorthreshold: number;
  /** u32 */
  sv599_networkerrorthreshold: number;
  /** u32 */
  sv599_diskspacethreshold: number;
  /** u32 */
  sv599_reserved: number;
  /** u32 */
  sv599_maxlinkdelay: number;
  /** u32 */
  sv599_minlinkthroughput: number;
  /** u32 */
  sv599_linkinfovalidtime: number;
  /** u32 */
  sv599_scavqosinfoupdatetime: number;
  /** u32 */
  sv599_maxworkitemidletime: number;
}

export const sizeofSERVER_INFO_599 = 232;

export function allocSERVER_INFO_599(data?: Partial<SERVER_INFO_599>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_599);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv599_sessopens !== undefined) view.setUint32(0, Number(data.sv599_sessopens), true);
  // 0x04: u32
  if (data?.sv599_sessvcs !== undefined) view.setUint32(4, Number(data.sv599_sessvcs), true);
  // 0x08: u32
  if (data?.sv599_opensearch !== undefined) view.setUint32(8, Number(data.sv599_opensearch), true);
  // 0x0c: u32
  if (data?.sv599_sizreqbuf !== undefined) view.setUint32(12, Number(data.sv599_sizreqbuf), true);
  // 0x10: u32
  if (data?.sv599_initworkitems !== undefined) view.setUint32(16, Number(data.sv599_initworkitems), true);
  // 0x14: u32
  if (data?.sv599_maxworkitems !== undefined) view.setUint32(20, Number(data.sv599_maxworkitems), true);
  // 0x18: u32
  if (data?.sv599_rawworkitems !== undefined) view.setUint32(24, Number(data.sv599_rawworkitems), true);
  // 0x1c: u32
  if (data?.sv599_irpstacksize !== undefined) view.setUint32(28, Number(data.sv599_irpstacksize), true);
  // 0x20: u32
  if (data?.sv599_maxrawbuflen !== undefined) view.setUint32(32, Number(data.sv599_maxrawbuflen), true);
  // 0x24: u32
  if (data?.sv599_sessusers !== undefined) view.setUint32(36, Number(data.sv599_sessusers), true);
  // 0x28: u32
  if (data?.sv599_sessconns !== undefined) view.setUint32(40, Number(data.sv599_sessconns), true);
  // 0x2c: u32
  if (data?.sv599_maxpagedmemoryusage !== undefined) view.setUint32(44, Number(data.sv599_maxpagedmemoryusage), true);
  // 0x30: u32
  if (data?.sv599_maxnonpagedmemoryusage !== undefined) view.setUint32(48, Number(data.sv599_maxnonpagedmemoryusage), true);
  // 0x34: i32
  if (data?.sv599_enablesoftcompat !== undefined) view.setInt32(52, Number(data.sv599_enablesoftcompat), true);
  // 0x38: i32
  if (data?.sv599_enableforcedlogoff !== undefined) view.setInt32(56, Number(data.sv599_enableforcedlogoff), true);
  // 0x3c: i32
  if (data?.sv599_timesource !== undefined) view.setInt32(60, Number(data.sv599_timesource), true);
  // 0x40: i32
  if (data?.sv599_acceptdownlevelapis !== undefined) view.setInt32(64, Number(data.sv599_acceptdownlevelapis), true);
  // 0x44: i32
  if (data?.sv599_lmannounce !== undefined) view.setInt32(68, Number(data.sv599_lmannounce), true);
  // 0x48: buffer
  if (data?.sv599_domain !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.sv599_domain);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.sv599_maxcopyreadlen !== undefined) view.setUint32(80, Number(data.sv599_maxcopyreadlen), true);
  // 0x54: u32
  if (data?.sv599_maxcopywritelen !== undefined) view.setUint32(84, Number(data.sv599_maxcopywritelen), true);
  // 0x58: u32
  if (data?.sv599_minkeepsearch !== undefined) view.setUint32(88, Number(data.sv599_minkeepsearch), true);
  // 0x5c: u32
  if (data?.sv599_maxkeepsearch !== undefined) view.setUint32(92, Number(data.sv599_maxkeepsearch), true);
  // 0x60: u32
  if (data?.sv599_minkeepcomplsearch !== undefined) view.setUint32(96, Number(data.sv599_minkeepcomplsearch), true);
  // 0x64: u32
  if (data?.sv599_maxkeepcomplsearch !== undefined) view.setUint32(100, Number(data.sv599_maxkeepcomplsearch), true);
  // 0x68: u32
  if (data?.sv599_threadcountadd !== undefined) view.setUint32(104, Number(data.sv599_threadcountadd), true);
  // 0x6c: u32
  if (data?.sv599_numblockthreads !== undefined) view.setUint32(108, Number(data.sv599_numblockthreads), true);
  // 0x70: u32
  if (data?.sv599_scavtimeout !== undefined) view.setUint32(112, Number(data.sv599_scavtimeout), true);
  // 0x74: u32
  if (data?.sv599_minrcvqueue !== undefined) view.setUint32(116, Number(data.sv599_minrcvqueue), true);
  // 0x78: u32
  if (data?.sv599_minfreeworkitems !== undefined) view.setUint32(120, Number(data.sv599_minfreeworkitems), true);
  // 0x7c: u32
  if (data?.sv599_xactmemsize !== undefined) view.setUint32(124, Number(data.sv599_xactmemsize), true);
  // 0x80: u32
  if (data?.sv599_threadpriority !== undefined) view.setUint32(128, Number(data.sv599_threadpriority), true);
  // 0x84: u32
  if (data?.sv599_maxmpxct !== undefined) view.setUint32(132, Number(data.sv599_maxmpxct), true);
  // 0x88: u32
  if (data?.sv599_oplockbreakwait !== undefined) view.setUint32(136, Number(data.sv599_oplockbreakwait), true);
  // 0x8c: u32
  if (data?.sv599_oplockbreakresponsewait !== undefined) view.setUint32(140, Number(data.sv599_oplockbreakresponsewait), true);
  // 0x90: i32
  if (data?.sv599_enableoplocks !== undefined) view.setInt32(144, Number(data.sv599_enableoplocks), true);
  // 0x94: i32
  if (data?.sv599_enableoplockforceclose !== undefined) view.setInt32(148, Number(data.sv599_enableoplockforceclose), true);
  // 0x98: i32
  if (data?.sv599_enablefcbopens !== undefined) view.setInt32(152, Number(data.sv599_enablefcbopens), true);
  // 0x9c: i32
  if (data?.sv599_enableraw !== undefined) view.setInt32(156, Number(data.sv599_enableraw), true);
  // 0xa0: i32
  if (data?.sv599_enablesharednetdrives !== undefined) view.setInt32(160, Number(data.sv599_enablesharednetdrives), true);
  // 0xa4: u32
  if (data?.sv599_minfreeconnections !== undefined) view.setUint32(164, Number(data.sv599_minfreeconnections), true);
  // 0xa8: u32
  if (data?.sv599_maxfreeconnections !== undefined) view.setUint32(168, Number(data.sv599_maxfreeconnections), true);
  // 0xac: u32
  if (data?.sv599_initsesstable !== undefined) view.setUint32(172, Number(data.sv599_initsesstable), true);
  // 0xb0: u32
  if (data?.sv599_initconntable !== undefined) view.setUint32(176, Number(data.sv599_initconntable), true);
  // 0xb4: u32
  if (data?.sv599_initfiletable !== undefined) view.setUint32(180, Number(data.sv599_initfiletable), true);
  // 0xb8: u32
  if (data?.sv599_initsearchtable !== undefined) view.setUint32(184, Number(data.sv599_initsearchtable), true);
  // 0xbc: u32
  if (data?.sv599_alertschedule !== undefined) view.setUint32(188, Number(data.sv599_alertschedule), true);
  // 0xc0: u32
  if (data?.sv599_errorthreshold !== undefined) view.setUint32(192, Number(data.sv599_errorthreshold), true);
  // 0xc4: u32
  if (data?.sv599_networkerrorthreshold !== undefined) view.setUint32(196, Number(data.sv599_networkerrorthreshold), true);
  // 0xc8: u32
  if (data?.sv599_diskspacethreshold !== undefined) view.setUint32(200, Number(data.sv599_diskspacethreshold), true);
  // 0xcc: u32
  if (data?.sv599_reserved !== undefined) view.setUint32(204, Number(data.sv599_reserved), true);
  // 0xd0: u32
  if (data?.sv599_maxlinkdelay !== undefined) view.setUint32(208, Number(data.sv599_maxlinkdelay), true);
  // 0xd4: u32
  if (data?.sv599_minlinkthroughput !== undefined) view.setUint32(212, Number(data.sv599_minlinkthroughput), true);
  // 0xd8: u32
  if (data?.sv599_linkinfovalidtime !== undefined) view.setUint32(216, Number(data.sv599_linkinfovalidtime), true);
  // 0xdc: u32
  if (data?.sv599_scavqosinfoupdatetime !== undefined) view.setUint32(220, Number(data.sv599_scavqosinfoupdatetime), true);
  // 0xe0: u32
  if (data?.sv599_maxworkitemidletime !== undefined) view.setUint32(224, Number(data.sv599_maxworkitemidletime), true);
  // 0xe4: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_598 (size: 176)
 */
export interface SERVER_INFO_598 {
  /** u32 */
  sv598_maxrawworkitems: number;
  /** u32 */
  sv598_maxthreadsperqueue: number;
  /** u32 */
  sv598_producttype: number;
  /** u32 */
  sv598_serversize: number;
  /** u32 */
  sv598_connectionlessautodisc: number;
  /** u32 */
  sv598_sharingviolationretries: number;
  /** u32 */
  sv598_sharingviolationdelay: number;
  /** u32 */
  sv598_maxglobalopensearch: number;
  /** u32 */
  sv598_removeduplicatesearches: number;
  /** u32 */
  sv598_lockviolationoffset: number;
  /** u32 */
  sv598_lockviolationdelay: number;
  /** u32 */
  sv598_mdlreadswitchover: number;
  /** u32 */
  sv598_cachedopenlimit: number;
  /** u32 */
  sv598_otherqueueaffinity: number;
  /** Windows.Win32.Foundation.BOOL */
  sv598_restrictnullsessaccess: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv598_enablewfw311directipx: boolean;
  /** u32 */
  sv598_queuesamplesecs: number;
  /** u32 */
  sv598_balancecount: number;
  /** u32 */
  sv598_preferredaffinity: number;
  /** u32 */
  sv598_maxfreerfcbs: number;
  /** u32 */
  sv598_maxfreemfcbs: number;
  /** u32 */
  sv598_maxfreelfcbs: number;
  /** u32 */
  sv598_maxfreepagedpoolchunks: number;
  /** u32 */
  sv598_minpagedpoolchunksize: number;
  /** u32 */
  sv598_maxpagedpoolchunksize: number;
  /** Windows.Win32.Foundation.BOOL */
  sv598_sendsfrompreferredprocessor: boolean;
  /** u32 */
  sv598_cacheddirectorylimit: number;
  /** u32 */
  sv598_maxcopylength: number;
  /** Windows.Win32.Foundation.BOOL */
  sv598_enablecompression: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv598_autosharewks: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv598_autoshareserver: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv598_enablesecuritysignature: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv598_requiresecuritysignature: boolean;
  /** u32 */
  sv598_minclientbuffersize: number;
  /** System.Guid */
  sv598_serverguid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  sv598_ConnectionNoSessionsTimeout: number;
  /** u32 */
  sv598_IdleThreadTimeOut: number;
  /** Windows.Win32.Foundation.BOOL */
  sv598_enableW9xsecuritysignature: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv598_enforcekerberosreauthentication: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv598_disabledos: boolean;
  /** u32 */
  sv598_lowdiskspaceminimum: number;
  /** Windows.Win32.Foundation.BOOL */
  sv598_disablestrictnamechecking: boolean;
  /** Windows.Win32.Foundation.BOOL */
  sv598_enableauthenticateusersharing: boolean;
}

export const sizeofSERVER_INFO_598 = 176;

export function allocSERVER_INFO_598(data?: Partial<SERVER_INFO_598>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_598);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv598_maxrawworkitems !== undefined) view.setUint32(0, Number(data.sv598_maxrawworkitems), true);
  // 0x04: u32
  if (data?.sv598_maxthreadsperqueue !== undefined) view.setUint32(4, Number(data.sv598_maxthreadsperqueue), true);
  // 0x08: u32
  if (data?.sv598_producttype !== undefined) view.setUint32(8, Number(data.sv598_producttype), true);
  // 0x0c: u32
  if (data?.sv598_serversize !== undefined) view.setUint32(12, Number(data.sv598_serversize), true);
  // 0x10: u32
  if (data?.sv598_connectionlessautodisc !== undefined) view.setUint32(16, Number(data.sv598_connectionlessautodisc), true);
  // 0x14: u32
  if (data?.sv598_sharingviolationretries !== undefined) view.setUint32(20, Number(data.sv598_sharingviolationretries), true);
  // 0x18: u32
  if (data?.sv598_sharingviolationdelay !== undefined) view.setUint32(24, Number(data.sv598_sharingviolationdelay), true);
  // 0x1c: u32
  if (data?.sv598_maxglobalopensearch !== undefined) view.setUint32(28, Number(data.sv598_maxglobalopensearch), true);
  // 0x20: u32
  if (data?.sv598_removeduplicatesearches !== undefined) view.setUint32(32, Number(data.sv598_removeduplicatesearches), true);
  // 0x24: u32
  if (data?.sv598_lockviolationoffset !== undefined) view.setUint32(36, Number(data.sv598_lockviolationoffset), true);
  // 0x28: u32
  if (data?.sv598_lockviolationdelay !== undefined) view.setUint32(40, Number(data.sv598_lockviolationdelay), true);
  // 0x2c: u32
  if (data?.sv598_mdlreadswitchover !== undefined) view.setUint32(44, Number(data.sv598_mdlreadswitchover), true);
  // 0x30: u32
  if (data?.sv598_cachedopenlimit !== undefined) view.setUint32(48, Number(data.sv598_cachedopenlimit), true);
  // 0x34: u32
  if (data?.sv598_otherqueueaffinity !== undefined) view.setUint32(52, Number(data.sv598_otherqueueaffinity), true);
  // 0x38: i32
  if (data?.sv598_restrictnullsessaccess !== undefined) view.setInt32(56, Number(data.sv598_restrictnullsessaccess), true);
  // 0x3c: i32
  if (data?.sv598_enablewfw311directipx !== undefined) view.setInt32(60, Number(data.sv598_enablewfw311directipx), true);
  // 0x40: u32
  if (data?.sv598_queuesamplesecs !== undefined) view.setUint32(64, Number(data.sv598_queuesamplesecs), true);
  // 0x44: u32
  if (data?.sv598_balancecount !== undefined) view.setUint32(68, Number(data.sv598_balancecount), true);
  // 0x48: u32
  if (data?.sv598_preferredaffinity !== undefined) view.setUint32(72, Number(data.sv598_preferredaffinity), true);
  // 0x4c: u32
  if (data?.sv598_maxfreerfcbs !== undefined) view.setUint32(76, Number(data.sv598_maxfreerfcbs), true);
  // 0x50: u32
  if (data?.sv598_maxfreemfcbs !== undefined) view.setUint32(80, Number(data.sv598_maxfreemfcbs), true);
  // 0x54: u32
  if (data?.sv598_maxfreelfcbs !== undefined) view.setUint32(84, Number(data.sv598_maxfreelfcbs), true);
  // 0x58: u32
  if (data?.sv598_maxfreepagedpoolchunks !== undefined) view.setUint32(88, Number(data.sv598_maxfreepagedpoolchunks), true);
  // 0x5c: u32
  if (data?.sv598_minpagedpoolchunksize !== undefined) view.setUint32(92, Number(data.sv598_minpagedpoolchunksize), true);
  // 0x60: u32
  if (data?.sv598_maxpagedpoolchunksize !== undefined) view.setUint32(96, Number(data.sv598_maxpagedpoolchunksize), true);
  // 0x64: i32
  if (data?.sv598_sendsfrompreferredprocessor !== undefined) view.setInt32(100, Number(data.sv598_sendsfrompreferredprocessor), true);
  // 0x68: u32
  if (data?.sv598_cacheddirectorylimit !== undefined) view.setUint32(104, Number(data.sv598_cacheddirectorylimit), true);
  // 0x6c: u32
  if (data?.sv598_maxcopylength !== undefined) view.setUint32(108, Number(data.sv598_maxcopylength), true);
  // 0x70: i32
  if (data?.sv598_enablecompression !== undefined) view.setInt32(112, Number(data.sv598_enablecompression), true);
  // 0x74: i32
  if (data?.sv598_autosharewks !== undefined) view.setInt32(116, Number(data.sv598_autosharewks), true);
  // 0x78: i32
  if (data?.sv598_autoshareserver !== undefined) view.setInt32(120, Number(data.sv598_autoshareserver), true);
  // 0x7c: i32
  if (data?.sv598_enablesecuritysignature !== undefined) view.setInt32(124, Number(data.sv598_enablesecuritysignature), true);
  // 0x80: i32
  if (data?.sv598_requiresecuritysignature !== undefined) view.setInt32(128, Number(data.sv598_requiresecuritysignature), true);
  // 0x84: u32
  if (data?.sv598_minclientbuffersize !== undefined) view.setUint32(132, Number(data.sv598_minclientbuffersize), true);
  // 0x88: pointer
  if (data?.sv598_serverguid !== undefined) view.setBigUint64(136, data.sv598_serverguid === null ? 0n : BigInt(util.toPointer(data.sv598_serverguid)), true);
  // 0x90: u32
  if (data?.sv598_ConnectionNoSessionsTimeout !== undefined) view.setUint32(144, Number(data.sv598_ConnectionNoSessionsTimeout), true);
  // 0x94: u32
  if (data?.sv598_IdleThreadTimeOut !== undefined) view.setUint32(148, Number(data.sv598_IdleThreadTimeOut), true);
  // 0x98: i32
  if (data?.sv598_enableW9xsecuritysignature !== undefined) view.setInt32(152, Number(data.sv598_enableW9xsecuritysignature), true);
  // 0x9c: i32
  if (data?.sv598_enforcekerberosreauthentication !== undefined) view.setInt32(156, Number(data.sv598_enforcekerberosreauthentication), true);
  // 0xa0: i32
  if (data?.sv598_disabledos !== undefined) view.setInt32(160, Number(data.sv598_disabledos), true);
  // 0xa4: u32
  if (data?.sv598_lowdiskspaceminimum !== undefined) view.setUint32(164, Number(data.sv598_lowdiskspaceminimum), true);
  // 0xa8: i32
  if (data?.sv598_disablestrictnamechecking !== undefined) view.setInt32(168, Number(data.sv598_disablestrictnamechecking), true);
  // 0xac: i32
  if (data?.sv598_enableauthenticateusersharing !== undefined) view.setInt32(172, Number(data.sv598_enableauthenticateusersharing), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1005 (size: 8)
 */
export interface SERVER_INFO_1005 {
  /** Windows.Win32.Foundation.PWSTR */
  sv1005_comment: string | null;
}

export const sizeofSERVER_INFO_1005 = 8;

export function allocSERVER_INFO_1005(data?: Partial<SERVER_INFO_1005>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1005);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.sv1005_comment !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.sv1005_comment);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1107 (size: 8)
 */
export interface SERVER_INFO_1107 {
  /** u32 */
  sv1107_users: number;
}

export const sizeofSERVER_INFO_1107 = 8;

export function allocSERVER_INFO_1107(data?: Partial<SERVER_INFO_1107>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1107);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1107_users !== undefined) view.setUint32(0, Number(data.sv1107_users), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1010 (size: 8)
 */
export interface SERVER_INFO_1010 {
  /** i32 */
  sv1010_disc: number;
}

export const sizeofSERVER_INFO_1010 = 8;

export function allocSERVER_INFO_1010(data?: Partial<SERVER_INFO_1010>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1010);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1010_disc !== undefined) view.setInt32(0, Number(data.sv1010_disc), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1016 (size: 8)
 */
export interface SERVER_INFO_1016 {
  /** Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_HIDDEN */
  sv1016_hidden: SERVER_INFO_HIDDEN;
}

export const sizeofSERVER_INFO_1016 = 8;

export function allocSERVER_INFO_1016(data?: Partial<SERVER_INFO_1016>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1016);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1016_hidden !== undefined) view.setUint32(0, Number(data.sv1016_hidden), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1017 (size: 8)
 */
export interface SERVER_INFO_1017 {
  /** u32 */
  sv1017_announce: number;
}

export const sizeofSERVER_INFO_1017 = 8;

export function allocSERVER_INFO_1017(data?: Partial<SERVER_INFO_1017>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1017);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1017_announce !== undefined) view.setUint32(0, Number(data.sv1017_announce), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1018 (size: 8)
 */
export interface SERVER_INFO_1018 {
  /** u32 */
  sv1018_anndelta: number;
}

export const sizeofSERVER_INFO_1018 = 8;

export function allocSERVER_INFO_1018(data?: Partial<SERVER_INFO_1018>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1018);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1018_anndelta !== undefined) view.setUint32(0, Number(data.sv1018_anndelta), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1501 (size: 8)
 */
export interface SERVER_INFO_1501 {
  /** u32 */
  sv1501_sessopens: number;
}

export const sizeofSERVER_INFO_1501 = 8;

export function allocSERVER_INFO_1501(data?: Partial<SERVER_INFO_1501>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1501);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1501_sessopens !== undefined) view.setUint32(0, Number(data.sv1501_sessopens), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1502 (size: 8)
 */
export interface SERVER_INFO_1502 {
  /** u32 */
  sv1502_sessvcs: number;
}

export const sizeofSERVER_INFO_1502 = 8;

export function allocSERVER_INFO_1502(data?: Partial<SERVER_INFO_1502>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1502);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1502_sessvcs !== undefined) view.setUint32(0, Number(data.sv1502_sessvcs), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1503 (size: 8)
 */
export interface SERVER_INFO_1503 {
  /** u32 */
  sv1503_opensearch: number;
}

export const sizeofSERVER_INFO_1503 = 8;

export function allocSERVER_INFO_1503(data?: Partial<SERVER_INFO_1503>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1503);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1503_opensearch !== undefined) view.setUint32(0, Number(data.sv1503_opensearch), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1506 (size: 8)
 */
export interface SERVER_INFO_1506 {
  /** u32 */
  sv1506_maxworkitems: number;
}

export const sizeofSERVER_INFO_1506 = 8;

export function allocSERVER_INFO_1506(data?: Partial<SERVER_INFO_1506>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1506);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1506_maxworkitems !== undefined) view.setUint32(0, Number(data.sv1506_maxworkitems), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1509 (size: 8)
 */
export interface SERVER_INFO_1509 {
  /** u32 */
  sv1509_maxrawbuflen: number;
}

export const sizeofSERVER_INFO_1509 = 8;

export function allocSERVER_INFO_1509(data?: Partial<SERVER_INFO_1509>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1509);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1509_maxrawbuflen !== undefined) view.setUint32(0, Number(data.sv1509_maxrawbuflen), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1510 (size: 8)
 */
export interface SERVER_INFO_1510 {
  /** u32 */
  sv1510_sessusers: number;
}

export const sizeofSERVER_INFO_1510 = 8;

export function allocSERVER_INFO_1510(data?: Partial<SERVER_INFO_1510>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1510);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1510_sessusers !== undefined) view.setUint32(0, Number(data.sv1510_sessusers), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1511 (size: 8)
 */
export interface SERVER_INFO_1511 {
  /** u32 */
  sv1511_sessconns: number;
}

export const sizeofSERVER_INFO_1511 = 8;

export function allocSERVER_INFO_1511(data?: Partial<SERVER_INFO_1511>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1511);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1511_sessconns !== undefined) view.setUint32(0, Number(data.sv1511_sessconns), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1512 (size: 8)
 */
export interface SERVER_INFO_1512 {
  /** u32 */
  sv1512_maxnonpagedmemoryusage: number;
}

export const sizeofSERVER_INFO_1512 = 8;

export function allocSERVER_INFO_1512(data?: Partial<SERVER_INFO_1512>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1512);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1512_maxnonpagedmemoryusage !== undefined) view.setUint32(0, Number(data.sv1512_maxnonpagedmemoryusage), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1513 (size: 8)
 */
export interface SERVER_INFO_1513 {
  /** u32 */
  sv1513_maxpagedmemoryusage: number;
}

export const sizeofSERVER_INFO_1513 = 8;

export function allocSERVER_INFO_1513(data?: Partial<SERVER_INFO_1513>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1513);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1513_maxpagedmemoryusage !== undefined) view.setUint32(0, Number(data.sv1513_maxpagedmemoryusage), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1514 (size: 8)
 */
export interface SERVER_INFO_1514 {
  /** Windows.Win32.Foundation.BOOL */
  sv1514_enablesoftcompat: boolean;
}

export const sizeofSERVER_INFO_1514 = 8;

export function allocSERVER_INFO_1514(data?: Partial<SERVER_INFO_1514>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1514);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1514_enablesoftcompat !== undefined) view.setInt32(0, Number(data.sv1514_enablesoftcompat), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1515 (size: 8)
 */
export interface SERVER_INFO_1515 {
  /** Windows.Win32.Foundation.BOOL */
  sv1515_enableforcedlogoff: boolean;
}

export const sizeofSERVER_INFO_1515 = 8;

export function allocSERVER_INFO_1515(data?: Partial<SERVER_INFO_1515>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1515);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1515_enableforcedlogoff !== undefined) view.setInt32(0, Number(data.sv1515_enableforcedlogoff), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1516 (size: 8)
 */
export interface SERVER_INFO_1516 {
  /** Windows.Win32.Foundation.BOOL */
  sv1516_timesource: boolean;
}

export const sizeofSERVER_INFO_1516 = 8;

export function allocSERVER_INFO_1516(data?: Partial<SERVER_INFO_1516>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1516);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1516_timesource !== undefined) view.setInt32(0, Number(data.sv1516_timesource), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1518 (size: 8)
 */
export interface SERVER_INFO_1518 {
  /** Windows.Win32.Foundation.BOOL */
  sv1518_lmannounce: boolean;
}

export const sizeofSERVER_INFO_1518 = 8;

export function allocSERVER_INFO_1518(data?: Partial<SERVER_INFO_1518>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1518);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1518_lmannounce !== undefined) view.setInt32(0, Number(data.sv1518_lmannounce), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1520 (size: 8)
 */
export interface SERVER_INFO_1520 {
  /** u32 */
  sv1520_maxcopyreadlen: number;
}

export const sizeofSERVER_INFO_1520 = 8;

export function allocSERVER_INFO_1520(data?: Partial<SERVER_INFO_1520>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1520);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1520_maxcopyreadlen !== undefined) view.setUint32(0, Number(data.sv1520_maxcopyreadlen), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1521 (size: 8)
 */
export interface SERVER_INFO_1521 {
  /** u32 */
  sv1521_maxcopywritelen: number;
}

export const sizeofSERVER_INFO_1521 = 8;

export function allocSERVER_INFO_1521(data?: Partial<SERVER_INFO_1521>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1521);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1521_maxcopywritelen !== undefined) view.setUint32(0, Number(data.sv1521_maxcopywritelen), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1522 (size: 8)
 */
export interface SERVER_INFO_1522 {
  /** u32 */
  sv1522_minkeepsearch: number;
}

export const sizeofSERVER_INFO_1522 = 8;

export function allocSERVER_INFO_1522(data?: Partial<SERVER_INFO_1522>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1522);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1522_minkeepsearch !== undefined) view.setUint32(0, Number(data.sv1522_minkeepsearch), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1523 (size: 8)
 */
export interface SERVER_INFO_1523 {
  /** u32 */
  sv1523_maxkeepsearch: number;
}

export const sizeofSERVER_INFO_1523 = 8;

export function allocSERVER_INFO_1523(data?: Partial<SERVER_INFO_1523>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1523);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1523_maxkeepsearch !== undefined) view.setUint32(0, Number(data.sv1523_maxkeepsearch), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1524 (size: 8)
 */
export interface SERVER_INFO_1524 {
  /** u32 */
  sv1524_minkeepcomplsearch: number;
}

export const sizeofSERVER_INFO_1524 = 8;

export function allocSERVER_INFO_1524(data?: Partial<SERVER_INFO_1524>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1524);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1524_minkeepcomplsearch !== undefined) view.setUint32(0, Number(data.sv1524_minkeepcomplsearch), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1525 (size: 8)
 */
export interface SERVER_INFO_1525 {
  /** u32 */
  sv1525_maxkeepcomplsearch: number;
}

export const sizeofSERVER_INFO_1525 = 8;

export function allocSERVER_INFO_1525(data?: Partial<SERVER_INFO_1525>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1525);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1525_maxkeepcomplsearch !== undefined) view.setUint32(0, Number(data.sv1525_maxkeepcomplsearch), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1528 (size: 8)
 */
export interface SERVER_INFO_1528 {
  /** u32 */
  sv1528_scavtimeout: number;
}

export const sizeofSERVER_INFO_1528 = 8;

export function allocSERVER_INFO_1528(data?: Partial<SERVER_INFO_1528>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1528);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1528_scavtimeout !== undefined) view.setUint32(0, Number(data.sv1528_scavtimeout), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1529 (size: 8)
 */
export interface SERVER_INFO_1529 {
  /** u32 */
  sv1529_minrcvqueue: number;
}

export const sizeofSERVER_INFO_1529 = 8;

export function allocSERVER_INFO_1529(data?: Partial<SERVER_INFO_1529>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1529);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1529_minrcvqueue !== undefined) view.setUint32(0, Number(data.sv1529_minrcvqueue), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1530 (size: 8)
 */
export interface SERVER_INFO_1530 {
  /** u32 */
  sv1530_minfreeworkitems: number;
}

export const sizeofSERVER_INFO_1530 = 8;

export function allocSERVER_INFO_1530(data?: Partial<SERVER_INFO_1530>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1530);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1530_minfreeworkitems !== undefined) view.setUint32(0, Number(data.sv1530_minfreeworkitems), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1533 (size: 8)
 */
export interface SERVER_INFO_1533 {
  /** u32 */
  sv1533_maxmpxct: number;
}

export const sizeofSERVER_INFO_1533 = 8;

export function allocSERVER_INFO_1533(data?: Partial<SERVER_INFO_1533>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1533);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1533_maxmpxct !== undefined) view.setUint32(0, Number(data.sv1533_maxmpxct), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1534 (size: 8)
 */
export interface SERVER_INFO_1534 {
  /** u32 */
  sv1534_oplockbreakwait: number;
}

export const sizeofSERVER_INFO_1534 = 8;

export function allocSERVER_INFO_1534(data?: Partial<SERVER_INFO_1534>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1534);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1534_oplockbreakwait !== undefined) view.setUint32(0, Number(data.sv1534_oplockbreakwait), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1535 (size: 8)
 */
export interface SERVER_INFO_1535 {
  /** u32 */
  sv1535_oplockbreakresponsewait: number;
}

export const sizeofSERVER_INFO_1535 = 8;

export function allocSERVER_INFO_1535(data?: Partial<SERVER_INFO_1535>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1535);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1535_oplockbreakresponsewait !== undefined) view.setUint32(0, Number(data.sv1535_oplockbreakresponsewait), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1536 (size: 8)
 */
export interface SERVER_INFO_1536 {
  /** Windows.Win32.Foundation.BOOL */
  sv1536_enableoplocks: boolean;
}

export const sizeofSERVER_INFO_1536 = 8;

export function allocSERVER_INFO_1536(data?: Partial<SERVER_INFO_1536>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1536);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1536_enableoplocks !== undefined) view.setInt32(0, Number(data.sv1536_enableoplocks), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1537 (size: 8)
 */
export interface SERVER_INFO_1537 {
  /** Windows.Win32.Foundation.BOOL */
  sv1537_enableoplockforceclose: boolean;
}

export const sizeofSERVER_INFO_1537 = 8;

export function allocSERVER_INFO_1537(data?: Partial<SERVER_INFO_1537>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1537);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1537_enableoplockforceclose !== undefined) view.setInt32(0, Number(data.sv1537_enableoplockforceclose), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1538 (size: 8)
 */
export interface SERVER_INFO_1538 {
  /** Windows.Win32.Foundation.BOOL */
  sv1538_enablefcbopens: boolean;
}

export const sizeofSERVER_INFO_1538 = 8;

export function allocSERVER_INFO_1538(data?: Partial<SERVER_INFO_1538>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1538);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1538_enablefcbopens !== undefined) view.setInt32(0, Number(data.sv1538_enablefcbopens), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1539 (size: 8)
 */
export interface SERVER_INFO_1539 {
  /** Windows.Win32.Foundation.BOOL */
  sv1539_enableraw: boolean;
}

export const sizeofSERVER_INFO_1539 = 8;

export function allocSERVER_INFO_1539(data?: Partial<SERVER_INFO_1539>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1539);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1539_enableraw !== undefined) view.setInt32(0, Number(data.sv1539_enableraw), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1540 (size: 8)
 */
export interface SERVER_INFO_1540 {
  /** Windows.Win32.Foundation.BOOL */
  sv1540_enablesharednetdrives: boolean;
}

export const sizeofSERVER_INFO_1540 = 8;

export function allocSERVER_INFO_1540(data?: Partial<SERVER_INFO_1540>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1540);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1540_enablesharednetdrives !== undefined) view.setInt32(0, Number(data.sv1540_enablesharednetdrives), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1541 (size: 8)
 */
export interface SERVER_INFO_1541 {
  /** Windows.Win32.Foundation.BOOL */
  sv1541_minfreeconnections: boolean;
}

export const sizeofSERVER_INFO_1541 = 8;

export function allocSERVER_INFO_1541(data?: Partial<SERVER_INFO_1541>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1541);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1541_minfreeconnections !== undefined) view.setInt32(0, Number(data.sv1541_minfreeconnections), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1542 (size: 8)
 */
export interface SERVER_INFO_1542 {
  /** Windows.Win32.Foundation.BOOL */
  sv1542_maxfreeconnections: boolean;
}

export const sizeofSERVER_INFO_1542 = 8;

export function allocSERVER_INFO_1542(data?: Partial<SERVER_INFO_1542>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1542);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1542_maxfreeconnections !== undefined) view.setInt32(0, Number(data.sv1542_maxfreeconnections), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1543 (size: 8)
 */
export interface SERVER_INFO_1543 {
  /** u32 */
  sv1543_initsesstable: number;
}

export const sizeofSERVER_INFO_1543 = 8;

export function allocSERVER_INFO_1543(data?: Partial<SERVER_INFO_1543>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1543);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1543_initsesstable !== undefined) view.setUint32(0, Number(data.sv1543_initsesstable), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1544 (size: 8)
 */
export interface SERVER_INFO_1544 {
  /** u32 */
  sv1544_initconntable: number;
}

export const sizeofSERVER_INFO_1544 = 8;

export function allocSERVER_INFO_1544(data?: Partial<SERVER_INFO_1544>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1544);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1544_initconntable !== undefined) view.setUint32(0, Number(data.sv1544_initconntable), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1545 (size: 8)
 */
export interface SERVER_INFO_1545 {
  /** u32 */
  sv1545_initfiletable: number;
}

export const sizeofSERVER_INFO_1545 = 8;

export function allocSERVER_INFO_1545(data?: Partial<SERVER_INFO_1545>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1545);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1545_initfiletable !== undefined) view.setUint32(0, Number(data.sv1545_initfiletable), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1546 (size: 8)
 */
export interface SERVER_INFO_1546 {
  /** u32 */
  sv1546_initsearchtable: number;
}

export const sizeofSERVER_INFO_1546 = 8;

export function allocSERVER_INFO_1546(data?: Partial<SERVER_INFO_1546>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1546);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1546_initsearchtable !== undefined) view.setUint32(0, Number(data.sv1546_initsearchtable), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1547 (size: 8)
 */
export interface SERVER_INFO_1547 {
  /** u32 */
  sv1547_alertschedule: number;
}

export const sizeofSERVER_INFO_1547 = 8;

export function allocSERVER_INFO_1547(data?: Partial<SERVER_INFO_1547>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1547);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1547_alertschedule !== undefined) view.setUint32(0, Number(data.sv1547_alertschedule), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1548 (size: 8)
 */
export interface SERVER_INFO_1548 {
  /** u32 */
  sv1548_errorthreshold: number;
}

export const sizeofSERVER_INFO_1548 = 8;

export function allocSERVER_INFO_1548(data?: Partial<SERVER_INFO_1548>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1548);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1548_errorthreshold !== undefined) view.setUint32(0, Number(data.sv1548_errorthreshold), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1549 (size: 8)
 */
export interface SERVER_INFO_1549 {
  /** u32 */
  sv1549_networkerrorthreshold: number;
}

export const sizeofSERVER_INFO_1549 = 8;

export function allocSERVER_INFO_1549(data?: Partial<SERVER_INFO_1549>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1549);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1549_networkerrorthreshold !== undefined) view.setUint32(0, Number(data.sv1549_networkerrorthreshold), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1550 (size: 8)
 */
export interface SERVER_INFO_1550 {
  /** u32 */
  sv1550_diskspacethreshold: number;
}

export const sizeofSERVER_INFO_1550 = 8;

export function allocSERVER_INFO_1550(data?: Partial<SERVER_INFO_1550>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1550);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1550_diskspacethreshold !== undefined) view.setUint32(0, Number(data.sv1550_diskspacethreshold), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1552 (size: 8)
 */
export interface SERVER_INFO_1552 {
  /** u32 */
  sv1552_maxlinkdelay: number;
}

export const sizeofSERVER_INFO_1552 = 8;

export function allocSERVER_INFO_1552(data?: Partial<SERVER_INFO_1552>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1552);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1552_maxlinkdelay !== undefined) view.setUint32(0, Number(data.sv1552_maxlinkdelay), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1553 (size: 8)
 */
export interface SERVER_INFO_1553 {
  /** u32 */
  sv1553_minlinkthroughput: number;
}

export const sizeofSERVER_INFO_1553 = 8;

export function allocSERVER_INFO_1553(data?: Partial<SERVER_INFO_1553>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1553);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1553_minlinkthroughput !== undefined) view.setUint32(0, Number(data.sv1553_minlinkthroughput), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1554 (size: 8)
 */
export interface SERVER_INFO_1554 {
  /** u32 */
  sv1554_linkinfovalidtime: number;
}

export const sizeofSERVER_INFO_1554 = 8;

export function allocSERVER_INFO_1554(data?: Partial<SERVER_INFO_1554>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1554);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1554_linkinfovalidtime !== undefined) view.setUint32(0, Number(data.sv1554_linkinfovalidtime), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1555 (size: 8)
 */
export interface SERVER_INFO_1555 {
  /** u32 */
  sv1555_scavqosinfoupdatetime: number;
}

export const sizeofSERVER_INFO_1555 = 8;

export function allocSERVER_INFO_1555(data?: Partial<SERVER_INFO_1555>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1555);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1555_scavqosinfoupdatetime !== undefined) view.setUint32(0, Number(data.sv1555_scavqosinfoupdatetime), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1556 (size: 8)
 */
export interface SERVER_INFO_1556 {
  /** u32 */
  sv1556_maxworkitemidletime: number;
}

export const sizeofSERVER_INFO_1556 = 8;

export function allocSERVER_INFO_1556(data?: Partial<SERVER_INFO_1556>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1556);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1556_maxworkitemidletime !== undefined) view.setUint32(0, Number(data.sv1556_maxworkitemidletime), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1557 (size: 8)
 */
export interface SERVER_INFO_1557 {
  /** u32 */
  sv1557_maxrawworkitems: number;
}

export const sizeofSERVER_INFO_1557 = 8;

export function allocSERVER_INFO_1557(data?: Partial<SERVER_INFO_1557>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1557);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1557_maxrawworkitems !== undefined) view.setUint32(0, Number(data.sv1557_maxrawworkitems), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1560 (size: 8)
 */
export interface SERVER_INFO_1560 {
  /** u32 */
  sv1560_producttype: number;
}

export const sizeofSERVER_INFO_1560 = 8;

export function allocSERVER_INFO_1560(data?: Partial<SERVER_INFO_1560>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1560);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1560_producttype !== undefined) view.setUint32(0, Number(data.sv1560_producttype), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1561 (size: 8)
 */
export interface SERVER_INFO_1561 {
  /** u32 */
  sv1561_serversize: number;
}

export const sizeofSERVER_INFO_1561 = 8;

export function allocSERVER_INFO_1561(data?: Partial<SERVER_INFO_1561>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1561);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1561_serversize !== undefined) view.setUint32(0, Number(data.sv1561_serversize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1562 (size: 8)
 */
export interface SERVER_INFO_1562 {
  /** u32 */
  sv1562_connectionlessautodisc: number;
}

export const sizeofSERVER_INFO_1562 = 8;

export function allocSERVER_INFO_1562(data?: Partial<SERVER_INFO_1562>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1562);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1562_connectionlessautodisc !== undefined) view.setUint32(0, Number(data.sv1562_connectionlessautodisc), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1563 (size: 8)
 */
export interface SERVER_INFO_1563 {
  /** u32 */
  sv1563_sharingviolationretries: number;
}

export const sizeofSERVER_INFO_1563 = 8;

export function allocSERVER_INFO_1563(data?: Partial<SERVER_INFO_1563>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1563);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1563_sharingviolationretries !== undefined) view.setUint32(0, Number(data.sv1563_sharingviolationretries), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1564 (size: 8)
 */
export interface SERVER_INFO_1564 {
  /** u32 */
  sv1564_sharingviolationdelay: number;
}

export const sizeofSERVER_INFO_1564 = 8;

export function allocSERVER_INFO_1564(data?: Partial<SERVER_INFO_1564>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1564);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1564_sharingviolationdelay !== undefined) view.setUint32(0, Number(data.sv1564_sharingviolationdelay), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1565 (size: 8)
 */
export interface SERVER_INFO_1565 {
  /** u32 */
  sv1565_maxglobalopensearch: number;
}

export const sizeofSERVER_INFO_1565 = 8;

export function allocSERVER_INFO_1565(data?: Partial<SERVER_INFO_1565>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1565);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1565_maxglobalopensearch !== undefined) view.setUint32(0, Number(data.sv1565_maxglobalopensearch), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1566 (size: 8)
 */
export interface SERVER_INFO_1566 {
  /** Windows.Win32.Foundation.BOOL */
  sv1566_removeduplicatesearches: boolean;
}

export const sizeofSERVER_INFO_1566 = 8;

export function allocSERVER_INFO_1566(data?: Partial<SERVER_INFO_1566>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1566);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1566_removeduplicatesearches !== undefined) view.setInt32(0, Number(data.sv1566_removeduplicatesearches), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1567 (size: 8)
 */
export interface SERVER_INFO_1567 {
  /** u32 */
  sv1567_lockviolationretries: number;
}

export const sizeofSERVER_INFO_1567 = 8;

export function allocSERVER_INFO_1567(data?: Partial<SERVER_INFO_1567>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1567);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1567_lockviolationretries !== undefined) view.setUint32(0, Number(data.sv1567_lockviolationretries), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1568 (size: 8)
 */
export interface SERVER_INFO_1568 {
  /** u32 */
  sv1568_lockviolationoffset: number;
}

export const sizeofSERVER_INFO_1568 = 8;

export function allocSERVER_INFO_1568(data?: Partial<SERVER_INFO_1568>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1568);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1568_lockviolationoffset !== undefined) view.setUint32(0, Number(data.sv1568_lockviolationoffset), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1569 (size: 8)
 */
export interface SERVER_INFO_1569 {
  /** u32 */
  sv1569_lockviolationdelay: number;
}

export const sizeofSERVER_INFO_1569 = 8;

export function allocSERVER_INFO_1569(data?: Partial<SERVER_INFO_1569>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1569);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1569_lockviolationdelay !== undefined) view.setUint32(0, Number(data.sv1569_lockviolationdelay), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1570 (size: 8)
 */
export interface SERVER_INFO_1570 {
  /** u32 */
  sv1570_mdlreadswitchover: number;
}

export const sizeofSERVER_INFO_1570 = 8;

export function allocSERVER_INFO_1570(data?: Partial<SERVER_INFO_1570>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1570);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1570_mdlreadswitchover !== undefined) view.setUint32(0, Number(data.sv1570_mdlreadswitchover), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1571 (size: 8)
 */
export interface SERVER_INFO_1571 {
  /** u32 */
  sv1571_cachedopenlimit: number;
}

export const sizeofSERVER_INFO_1571 = 8;

export function allocSERVER_INFO_1571(data?: Partial<SERVER_INFO_1571>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1571);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1571_cachedopenlimit !== undefined) view.setUint32(0, Number(data.sv1571_cachedopenlimit), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1572 (size: 8)
 */
export interface SERVER_INFO_1572 {
  /** u32 */
  sv1572_criticalthreads: number;
}

export const sizeofSERVER_INFO_1572 = 8;

export function allocSERVER_INFO_1572(data?: Partial<SERVER_INFO_1572>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1572);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1572_criticalthreads !== undefined) view.setUint32(0, Number(data.sv1572_criticalthreads), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1573 (size: 8)
 */
export interface SERVER_INFO_1573 {
  /** u32 */
  sv1573_restrictnullsessaccess: number;
}

export const sizeofSERVER_INFO_1573 = 8;

export function allocSERVER_INFO_1573(data?: Partial<SERVER_INFO_1573>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1573);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1573_restrictnullsessaccess !== undefined) view.setUint32(0, Number(data.sv1573_restrictnullsessaccess), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1574 (size: 8)
 */
export interface SERVER_INFO_1574 {
  /** u32 */
  sv1574_enablewfw311directipx: number;
}

export const sizeofSERVER_INFO_1574 = 8;

export function allocSERVER_INFO_1574(data?: Partial<SERVER_INFO_1574>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1574);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1574_enablewfw311directipx !== undefined) view.setUint32(0, Number(data.sv1574_enablewfw311directipx), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1575 (size: 8)
 */
export interface SERVER_INFO_1575 {
  /** u32 */
  sv1575_otherqueueaffinity: number;
}

export const sizeofSERVER_INFO_1575 = 8;

export function allocSERVER_INFO_1575(data?: Partial<SERVER_INFO_1575>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1575);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1575_otherqueueaffinity !== undefined) view.setUint32(0, Number(data.sv1575_otherqueueaffinity), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1576 (size: 8)
 */
export interface SERVER_INFO_1576 {
  /** u32 */
  sv1576_queuesamplesecs: number;
}

export const sizeofSERVER_INFO_1576 = 8;

export function allocSERVER_INFO_1576(data?: Partial<SERVER_INFO_1576>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1576);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1576_queuesamplesecs !== undefined) view.setUint32(0, Number(data.sv1576_queuesamplesecs), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1577 (size: 8)
 */
export interface SERVER_INFO_1577 {
  /** u32 */
  sv1577_balancecount: number;
}

export const sizeofSERVER_INFO_1577 = 8;

export function allocSERVER_INFO_1577(data?: Partial<SERVER_INFO_1577>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1577);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1577_balancecount !== undefined) view.setUint32(0, Number(data.sv1577_balancecount), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1578 (size: 8)
 */
export interface SERVER_INFO_1578 {
  /** u32 */
  sv1578_preferredaffinity: number;
}

export const sizeofSERVER_INFO_1578 = 8;

export function allocSERVER_INFO_1578(data?: Partial<SERVER_INFO_1578>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1578);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1578_preferredaffinity !== undefined) view.setUint32(0, Number(data.sv1578_preferredaffinity), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1579 (size: 8)
 */
export interface SERVER_INFO_1579 {
  /** u32 */
  sv1579_maxfreerfcbs: number;
}

export const sizeofSERVER_INFO_1579 = 8;

export function allocSERVER_INFO_1579(data?: Partial<SERVER_INFO_1579>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1579);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1579_maxfreerfcbs !== undefined) view.setUint32(0, Number(data.sv1579_maxfreerfcbs), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1580 (size: 8)
 */
export interface SERVER_INFO_1580 {
  /** u32 */
  sv1580_maxfreemfcbs: number;
}

export const sizeofSERVER_INFO_1580 = 8;

export function allocSERVER_INFO_1580(data?: Partial<SERVER_INFO_1580>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1580);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1580_maxfreemfcbs !== undefined) view.setUint32(0, Number(data.sv1580_maxfreemfcbs), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1581 (size: 8)
 */
export interface SERVER_INFO_1581 {
  /** u32 */
  sv1581_maxfreemlcbs: number;
}

export const sizeofSERVER_INFO_1581 = 8;

export function allocSERVER_INFO_1581(data?: Partial<SERVER_INFO_1581>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1581);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1581_maxfreemlcbs !== undefined) view.setUint32(0, Number(data.sv1581_maxfreemlcbs), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1582 (size: 8)
 */
export interface SERVER_INFO_1582 {
  /** u32 */
  sv1582_maxfreepagedpoolchunks: number;
}

export const sizeofSERVER_INFO_1582 = 8;

export function allocSERVER_INFO_1582(data?: Partial<SERVER_INFO_1582>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1582);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1582_maxfreepagedpoolchunks !== undefined) view.setUint32(0, Number(data.sv1582_maxfreepagedpoolchunks), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1583 (size: 8)
 */
export interface SERVER_INFO_1583 {
  /** u32 */
  sv1583_minpagedpoolchunksize: number;
}

export const sizeofSERVER_INFO_1583 = 8;

export function allocSERVER_INFO_1583(data?: Partial<SERVER_INFO_1583>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1583);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1583_minpagedpoolchunksize !== undefined) view.setUint32(0, Number(data.sv1583_minpagedpoolchunksize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1584 (size: 8)
 */
export interface SERVER_INFO_1584 {
  /** u32 */
  sv1584_maxpagedpoolchunksize: number;
}

export const sizeofSERVER_INFO_1584 = 8;

export function allocSERVER_INFO_1584(data?: Partial<SERVER_INFO_1584>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1584);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1584_maxpagedpoolchunksize !== undefined) view.setUint32(0, Number(data.sv1584_maxpagedpoolchunksize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1585 (size: 8)
 */
export interface SERVER_INFO_1585 {
  /** Windows.Win32.Foundation.BOOL */
  sv1585_sendsfrompreferredprocessor: boolean;
}

export const sizeofSERVER_INFO_1585 = 8;

export function allocSERVER_INFO_1585(data?: Partial<SERVER_INFO_1585>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1585);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv1585_sendsfrompreferredprocessor !== undefined) view.setInt32(0, Number(data.sv1585_sendsfrompreferredprocessor), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1586 (size: 8)
 */
export interface SERVER_INFO_1586 {
  /** u32 */
  sv1586_maxthreadsperqueue: number;
}

export const sizeofSERVER_INFO_1586 = 8;

export function allocSERVER_INFO_1586(data?: Partial<SERVER_INFO_1586>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1586);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1586_maxthreadsperqueue !== undefined) view.setUint32(0, Number(data.sv1586_maxthreadsperqueue), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1587 (size: 8)
 */
export interface SERVER_INFO_1587 {
  /** u32 */
  sv1587_cacheddirectorylimit: number;
}

export const sizeofSERVER_INFO_1587 = 8;

export function allocSERVER_INFO_1587(data?: Partial<SERVER_INFO_1587>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1587);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1587_cacheddirectorylimit !== undefined) view.setUint32(0, Number(data.sv1587_cacheddirectorylimit), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1588 (size: 8)
 */
export interface SERVER_INFO_1588 {
  /** u32 */
  sv1588_maxcopylength: number;
}

export const sizeofSERVER_INFO_1588 = 8;

export function allocSERVER_INFO_1588(data?: Partial<SERVER_INFO_1588>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1588);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1588_maxcopylength !== undefined) view.setUint32(0, Number(data.sv1588_maxcopylength), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1590 (size: 8)
 */
export interface SERVER_INFO_1590 {
  /** u32 */
  sv1590_enablecompression: number;
}

export const sizeofSERVER_INFO_1590 = 8;

export function allocSERVER_INFO_1590(data?: Partial<SERVER_INFO_1590>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1590);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1590_enablecompression !== undefined) view.setUint32(0, Number(data.sv1590_enablecompression), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1591 (size: 8)
 */
export interface SERVER_INFO_1591 {
  /** u32 */
  sv1591_autosharewks: number;
}

export const sizeofSERVER_INFO_1591 = 8;

export function allocSERVER_INFO_1591(data?: Partial<SERVER_INFO_1591>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1591);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1591_autosharewks !== undefined) view.setUint32(0, Number(data.sv1591_autosharewks), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1592 (size: 8)
 */
export interface SERVER_INFO_1592 {
  /** u32 */
  sv1592_autosharewks: number;
}

export const sizeofSERVER_INFO_1592 = 8;

export function allocSERVER_INFO_1592(data?: Partial<SERVER_INFO_1592>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1592);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1592_autosharewks !== undefined) view.setUint32(0, Number(data.sv1592_autosharewks), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1593 (size: 8)
 */
export interface SERVER_INFO_1593 {
  /** u32 */
  sv1593_enablesecuritysignature: number;
}

export const sizeofSERVER_INFO_1593 = 8;

export function allocSERVER_INFO_1593(data?: Partial<SERVER_INFO_1593>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1593);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1593_enablesecuritysignature !== undefined) view.setUint32(0, Number(data.sv1593_enablesecuritysignature), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1594 (size: 8)
 */
export interface SERVER_INFO_1594 {
  /** u32 */
  sv1594_requiresecuritysignature: number;
}

export const sizeofSERVER_INFO_1594 = 8;

export function allocSERVER_INFO_1594(data?: Partial<SERVER_INFO_1594>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1594);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1594_requiresecuritysignature !== undefined) view.setUint32(0, Number(data.sv1594_requiresecuritysignature), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1595 (size: 8)
 */
export interface SERVER_INFO_1595 {
  /** u32 */
  sv1595_minclientbuffersize: number;
}

export const sizeofSERVER_INFO_1595 = 8;

export function allocSERVER_INFO_1595(data?: Partial<SERVER_INFO_1595>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1595);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1595_minclientbuffersize !== undefined) view.setUint32(0, Number(data.sv1595_minclientbuffersize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1596 (size: 8)
 */
export interface SERVER_INFO_1596 {
  /** u32 */
  sv1596_ConnectionNoSessionsTimeout: number;
}

export const sizeofSERVER_INFO_1596 = 8;

export function allocSERVER_INFO_1596(data?: Partial<SERVER_INFO_1596>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1596);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1596_ConnectionNoSessionsTimeout !== undefined) view.setUint32(0, Number(data.sv1596_ConnectionNoSessionsTimeout), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1597 (size: 8)
 */
export interface SERVER_INFO_1597 {
  /** u32 */
  sv1597_IdleThreadTimeOut: number;
}

export const sizeofSERVER_INFO_1597 = 8;

export function allocSERVER_INFO_1597(data?: Partial<SERVER_INFO_1597>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1597);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1597_IdleThreadTimeOut !== undefined) view.setUint32(0, Number(data.sv1597_IdleThreadTimeOut), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1598 (size: 8)
 */
export interface SERVER_INFO_1598 {
  /** u32 */
  sv1598_enableW9xsecuritysignature: number;
}

export const sizeofSERVER_INFO_1598 = 8;

export function allocSERVER_INFO_1598(data?: Partial<SERVER_INFO_1598>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1598);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1598_enableW9xsecuritysignature !== undefined) view.setUint32(0, Number(data.sv1598_enableW9xsecuritysignature), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1599 (size: 8)
 */
export interface SERVER_INFO_1599 {
  /** Windows.Win32.Foundation.BOOLEAN */
  sv1598_enforcekerberosreauthentication: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVER_INFO_1599 = 8;

export function allocSERVER_INFO_1599(data?: Partial<SERVER_INFO_1599>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1599);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sv1598_enforcekerberosreauthentication !== undefined) view.setBigUint64(0, data.sv1598_enforcekerberosreauthentication === null ? 0n : BigInt(util.toPointer(data.sv1598_enforcekerberosreauthentication)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1600 (size: 8)
 */
export interface SERVER_INFO_1600 {
  /** Windows.Win32.Foundation.BOOLEAN */
  sv1598_disabledos: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVER_INFO_1600 = 8;

export function allocSERVER_INFO_1600(data?: Partial<SERVER_INFO_1600>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1600);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sv1598_disabledos !== undefined) view.setBigUint64(0, data.sv1598_disabledos === null ? 0n : BigInt(util.toPointer(data.sv1598_disabledos)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1601 (size: 8)
 */
export interface SERVER_INFO_1601 {
  /** u32 */
  sv1598_lowdiskspaceminimum: number;
}

export const sizeofSERVER_INFO_1601 = 8;

export function allocSERVER_INFO_1601(data?: Partial<SERVER_INFO_1601>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1601);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sv1598_lowdiskspaceminimum !== undefined) view.setUint32(0, Number(data.sv1598_lowdiskspaceminimum), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_INFO_1602 (size: 8)
 */
export interface SERVER_INFO_1602 {
  /** Windows.Win32.Foundation.BOOL */
  sv_1598_disablestrictnamechecking: boolean;
}

export const sizeofSERVER_INFO_1602 = 8;

export function allocSERVER_INFO_1602(data?: Partial<SERVER_INFO_1602>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_INFO_1602);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.sv_1598_disablestrictnamechecking !== undefined) view.setInt32(0, Number(data.sv_1598_disablestrictnamechecking), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_TRANSPORT_INFO_0 (size: 40)
 */
export interface SERVER_TRANSPORT_INFO_0 {
  /** u32 */
  svti0_numberofvcs: number;
  /** Windows.Win32.Foundation.PWSTR */
  svti0_transportname: string | null;
  /** ptr */
  svti0_transportaddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  svti0_transportaddresslength: number;
  /** Windows.Win32.Foundation.PWSTR */
  svti0_networkaddress: string | null;
}

export const sizeofSERVER_TRANSPORT_INFO_0 = 40;

export function allocSERVER_TRANSPORT_INFO_0(data?: Partial<SERVER_TRANSPORT_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_TRANSPORT_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.svti0_numberofvcs !== undefined) view.setUint32(0, Number(data.svti0_numberofvcs), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.svti0_transportname !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.svti0_transportname);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.svti0_transportaddress !== undefined) view.setBigUint64(16, data.svti0_transportaddress === null ? 0n : BigInt(util.toPointer(data.svti0_transportaddress)), true);
  // 0x18: u32
  if (data?.svti0_transportaddresslength !== undefined) view.setUint32(24, Number(data.svti0_transportaddresslength), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.svti0_networkaddress !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.svti0_networkaddress);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_TRANSPORT_INFO_1 (size: 48)
 */
export interface SERVER_TRANSPORT_INFO_1 {
  /** u32 */
  svti1_numberofvcs: number;
  /** Windows.Win32.Foundation.PWSTR */
  svti1_transportname: string | null;
  /** ptr */
  svti1_transportaddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  svti1_transportaddresslength: number;
  /** Windows.Win32.Foundation.PWSTR */
  svti1_networkaddress: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  svti1_domain: string | null;
}

export const sizeofSERVER_TRANSPORT_INFO_1 = 48;

export function allocSERVER_TRANSPORT_INFO_1(data?: Partial<SERVER_TRANSPORT_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_TRANSPORT_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.svti1_numberofvcs !== undefined) view.setUint32(0, Number(data.svti1_numberofvcs), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.svti1_transportname !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.svti1_transportname);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.svti1_transportaddress !== undefined) view.setBigUint64(16, data.svti1_transportaddress === null ? 0n : BigInt(util.toPointer(data.svti1_transportaddress)), true);
  // 0x18: u32
  if (data?.svti1_transportaddresslength !== undefined) view.setUint32(24, Number(data.svti1_transportaddresslength), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.svti1_networkaddress !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.svti1_networkaddress);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.svti1_domain !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.svti1_domain);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_TRANSPORT_INFO_2 (size: 56)
 */
export interface SERVER_TRANSPORT_INFO_2 {
  /** u32 */
  svti2_numberofvcs: number;
  /** Windows.Win32.Foundation.PWSTR */
  svti2_transportname: string | null;
  /** ptr */
  svti2_transportaddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  svti2_transportaddresslength: number;
  /** Windows.Win32.Foundation.PWSTR */
  svti2_networkaddress: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  svti2_domain: string | null;
  /** u32 */
  svti2_flags: number;
}

export const sizeofSERVER_TRANSPORT_INFO_2 = 56;

export function allocSERVER_TRANSPORT_INFO_2(data?: Partial<SERVER_TRANSPORT_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_TRANSPORT_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.svti2_numberofvcs !== undefined) view.setUint32(0, Number(data.svti2_numberofvcs), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.svti2_transportname !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.svti2_transportname);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.svti2_transportaddress !== undefined) view.setBigUint64(16, data.svti2_transportaddress === null ? 0n : BigInt(util.toPointer(data.svti2_transportaddress)), true);
  // 0x18: u32
  if (data?.svti2_transportaddresslength !== undefined) view.setUint32(24, Number(data.svti2_transportaddresslength), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.svti2_networkaddress !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.svti2_networkaddress);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.svti2_domain !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.svti2_domain);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.svti2_flags !== undefined) view.setUint32(48, Number(data.svti2_flags), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVER_TRANSPORT_INFO_3 (size: 64)
 */
export interface SERVER_TRANSPORT_INFO_3 {
  /** u32 */
  svti3_numberofvcs: number;
  /** Windows.Win32.Foundation.PWSTR */
  svti3_transportname: string | null;
  /** ptr */
  svti3_transportaddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  svti3_transportaddresslength: number;
  /** Windows.Win32.Foundation.PWSTR */
  svti3_networkaddress: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  svti3_domain: string | null;
  /** u32 */
  svti3_flags: number;
  /** u32 */
  svti3_passwordlength: number;
  /** array */
  svti3_password: Deno.PointerValue | null;
}

export const sizeofSERVER_TRANSPORT_INFO_3 = 64;

export function allocSERVER_TRANSPORT_INFO_3(data?: Partial<SERVER_TRANSPORT_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVER_TRANSPORT_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.svti3_numberofvcs !== undefined) view.setUint32(0, Number(data.svti3_numberofvcs), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.svti3_transportname !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.svti3_transportname);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.svti3_transportaddress !== undefined) view.setBigUint64(16, data.svti3_transportaddress === null ? 0n : BigInt(util.toPointer(data.svti3_transportaddress)), true);
  // 0x18: u32
  if (data?.svti3_transportaddresslength !== undefined) view.setUint32(24, Number(data.svti3_transportaddresslength), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.svti3_networkaddress !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.svti3_networkaddress);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.svti3_domain !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.svti3_domain);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.svti3_flags !== undefined) view.setUint32(48, Number(data.svti3_flags), true);
  // 0x34: u32
  if (data?.svti3_passwordlength !== undefined) view.setUint32(52, Number(data.svti3_passwordlength), true);
  // 0x38: pointer
  if (data?.svti3_password !== undefined) view.setBigUint64(56, data.svti3_password === null ? 0n : BigInt(util.toPointer(data.svti3_password)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVICE_INFO_0 (size: 8)
 */
export interface SERVICE_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  svci0_name: string | null;
}

export const sizeofSERVICE_INFO_0 = 8;

export function allocSERVICE_INFO_0(data?: Partial<SERVICE_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.svci0_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.svci0_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVICE_INFO_1 (size: 24)
 */
export interface SERVICE_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  svci1_name: string | null;
  /** u32 */
  svci1_status: number;
  /** u32 */
  svci1_code: number;
  /** u32 */
  svci1_pid: number;
}

export const sizeofSERVICE_INFO_1 = 24;

export function allocSERVICE_INFO_1(data?: Partial<SERVICE_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.svci1_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.svci1_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.svci1_status !== undefined) view.setUint32(8, Number(data.svci1_status), true);
  // 0x0c: u32
  if (data?.svci1_code !== undefined) view.setUint32(12, Number(data.svci1_code), true);
  // 0x10: u32
  if (data?.svci1_pid !== undefined) view.setUint32(16, Number(data.svci1_pid), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SERVICE_INFO_2 (size: 48)
 */
export interface SERVICE_INFO_2 {
  /** Windows.Win32.Foundation.PWSTR */
  svci2_name: string | null;
  /** u32 */
  svci2_status: number;
  /** u32 */
  svci2_code: number;
  /** u32 */
  svci2_pid: number;
  /** Windows.Win32.Foundation.PWSTR */
  svci2_text: string | null;
  /** u32 */
  svci2_specific_error: number;
  /** Windows.Win32.Foundation.PWSTR */
  svci2_display_name: string | null;
}

export const sizeofSERVICE_INFO_2 = 48;

export function allocSERVICE_INFO_2(data?: Partial<SERVICE_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.svci2_name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.svci2_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.svci2_status !== undefined) view.setUint32(8, Number(data.svci2_status), true);
  // 0x0c: u32
  if (data?.svci2_code !== undefined) view.setUint32(12, Number(data.svci2_code), true);
  // 0x10: u32
  if (data?.svci2_pid !== undefined) view.setUint32(16, Number(data.svci2_pid), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.svci2_text !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.svci2_text);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.svci2_specific_error !== undefined) view.setUint32(32, Number(data.svci2_specific_error), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.svci2_display_name !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.svci2_display_name);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USE_INFO_0 (size: 16)
 */
export interface USE_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  ui0_local: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ui0_remote: string | null;
}

export const sizeofUSE_INFO_0 = 16;

export function allocUSE_INFO_0(data?: Partial<USE_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofUSE_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.ui0_local !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.ui0_local);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.ui0_remote !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ui0_remote);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USE_INFO_1 (size: 40)
 */
export interface USE_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  ui1_local: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ui1_remote: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ui1_password: string | null;
  /** u32 */
  ui1_status: number;
  /** Windows.Win32.NetworkManagement.NetManagement.USE_INFO_ASG_TYPE */
  ui1_asg_type: USE_INFO_ASG_TYPE;
  /** u32 */
  ui1_refcount: number;
  /** u32 */
  ui1_usecount: number;
}

export const sizeofUSE_INFO_1 = 40;

export function allocUSE_INFO_1(data?: Partial<USE_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofUSE_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.ui1_local !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.ui1_local);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.ui1_remote !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ui1_remote);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.ui1_password !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ui1_password);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.ui1_status !== undefined) view.setUint32(24, Number(data.ui1_status), true);
  // 0x1c: u32
  if (data?.ui1_asg_type !== undefined) view.setUint32(28, Number(data.ui1_asg_type), true);
  // 0x20: u32
  if (data?.ui1_refcount !== undefined) view.setUint32(32, Number(data.ui1_refcount), true);
  // 0x24: u32
  if (data?.ui1_usecount !== undefined) view.setUint32(36, Number(data.ui1_usecount), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USE_INFO_2 (size: 56)
 */
export interface USE_INFO_2 {
  /** Windows.Win32.Foundation.PWSTR */
  ui2_local: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ui2_remote: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ui2_password: string | null;
  /** u32 */
  ui2_status: number;
  /** Windows.Win32.NetworkManagement.NetManagement.USE_INFO_ASG_TYPE */
  ui2_asg_type: USE_INFO_ASG_TYPE;
  /** u32 */
  ui2_refcount: number;
  /** u32 */
  ui2_usecount: number;
  /** Windows.Win32.Foundation.PWSTR */
  ui2_username: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ui2_domainname: string | null;
}

export const sizeofUSE_INFO_2 = 56;

export function allocUSE_INFO_2(data?: Partial<USE_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofUSE_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.ui2_local !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.ui2_local);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.ui2_remote !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ui2_remote);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.ui2_password !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ui2_password);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.ui2_status !== undefined) view.setUint32(24, Number(data.ui2_status), true);
  // 0x1c: u32
  if (data?.ui2_asg_type !== undefined) view.setUint32(28, Number(data.ui2_asg_type), true);
  // 0x20: u32
  if (data?.ui2_refcount !== undefined) view.setUint32(32, Number(data.ui2_refcount), true);
  // 0x24: u32
  if (data?.ui2_usecount !== undefined) view.setUint32(36, Number(data.ui2_usecount), true);
  // 0x28: buffer
  if (data?.ui2_username !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.ui2_username);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.ui2_domainname !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.ui2_domainname);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USE_INFO_3 (size: 16)
 */
export interface USE_INFO_3 {
  /** Windows.Win32.NetworkManagement.NetManagement.USE_INFO_2 */
  ui3_ui2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ui3_flags: number;
}

export const sizeofUSE_INFO_3 = 16;

export function allocUSE_INFO_3(data?: Partial<USE_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofUSE_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ui3_ui2 !== undefined) view.setBigUint64(0, data.ui3_ui2 === null ? 0n : BigInt(util.toPointer(data.ui3_ui2)), true);
  // 0x08: u32
  if (data?.ui3_flags !== undefined) view.setUint32(8, Number(data.ui3_flags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USE_INFO_4 (size: 24)
 */
export interface USE_INFO_4 {
  /** Windows.Win32.NetworkManagement.NetManagement.USE_INFO_3 */
  ui4_ui3: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ui4_auth_identity_length: number;
  /** ptr */
  ui4_auth_identity: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUSE_INFO_4 = 24;

export function allocUSE_INFO_4(data?: Partial<USE_INFO_4>): Uint8Array {
  const buf = new Uint8Array(sizeofUSE_INFO_4);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ui4_ui3 !== undefined) view.setBigUint64(0, data.ui4_ui3 === null ? 0n : BigInt(util.toPointer(data.ui4_ui3)), true);
  // 0x08: u32
  if (data?.ui4_auth_identity_length !== undefined) view.setUint32(8, Number(data.ui4_auth_identity_length), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ui4_auth_identity !== undefined) view.setBigUint64(16, data.ui4_auth_identity === null ? 0n : BigInt(util.toPointer(data.ui4_auth_identity)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USE_INFO_5 (size: 56)
 */
export interface USE_INFO_5 {
  /** Windows.Win32.NetworkManagement.NetManagement.USE_INFO_3 */
  ui4_ui3: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ui4_auth_identity_length: number;
  /** ptr */
  ui4_auth_identity: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ui5_security_descriptor_length: number;
  /** ptr */
  ui5_security_descriptor: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ui5_use_options_length: number;
  /** ptr */
  ui5_use_options: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUSE_INFO_5 = 56;

export function allocUSE_INFO_5(data?: Partial<USE_INFO_5>): Uint8Array {
  const buf = new Uint8Array(sizeofUSE_INFO_5);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ui4_ui3 !== undefined) view.setBigUint64(0, data.ui4_ui3 === null ? 0n : BigInt(util.toPointer(data.ui4_ui3)), true);
  // 0x08: u32
  if (data?.ui4_auth_identity_length !== undefined) view.setUint32(8, Number(data.ui4_auth_identity_length), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ui4_auth_identity !== undefined) view.setBigUint64(16, data.ui4_auth_identity === null ? 0n : BigInt(util.toPointer(data.ui4_auth_identity)), true);
  // 0x18: u32
  if (data?.ui5_security_descriptor_length !== undefined) view.setUint32(24, Number(data.ui5_security_descriptor_length), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ui5_security_descriptor !== undefined) view.setBigUint64(32, data.ui5_security_descriptor === null ? 0n : BigInt(util.toPointer(data.ui5_security_descriptor)), true);
  // 0x28: u32
  if (data?.ui5_use_options_length !== undefined) view.setUint32(40, Number(data.ui5_use_options_length), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ui5_use_options !== undefined) view.setBigUint64(48, data.ui5_use_options === null ? 0n : BigInt(util.toPointer(data.ui5_use_options)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USE_OPTION_GENERIC (size: 8)
 */
export interface USE_OPTION_GENERIC {
  /** u32 */
  Tag: number;
  /** u16 */
  Length: number;
  /** u16 */
  Reserved: number;
}

export const sizeofUSE_OPTION_GENERIC = 8;

export function allocUSE_OPTION_GENERIC(data?: Partial<USE_OPTION_GENERIC>): Uint8Array {
  const buf = new Uint8Array(sizeofUSE_OPTION_GENERIC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Tag !== undefined) view.setUint32(0, Number(data.Tag), true);
  // 0x04: u16
  if (data?.Length !== undefined) view.setUint16(4, Number(data.Length), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USE_OPTION_DEFERRED_CONNECTION_PARAMETERS (size: 8)
 */
export interface USE_OPTION_DEFERRED_CONNECTION_PARAMETERS {
  /** u32 */
  Tag: number;
  /** u16 */
  Length: number;
  /** u16 */
  Reserved: number;
}

export const sizeofUSE_OPTION_DEFERRED_CONNECTION_PARAMETERS = 8;

export function allocUSE_OPTION_DEFERRED_CONNECTION_PARAMETERS(data?: Partial<USE_OPTION_DEFERRED_CONNECTION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSE_OPTION_DEFERRED_CONNECTION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Tag !== undefined) view.setUint32(0, Number(data.Tag), true);
  // 0x04: u16
  if (data?.Length !== undefined) view.setUint16(4, Number(data.Length), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.TRANSPORT_INFO (size: 16)
 */
export interface TRANSPORT_INFO {
  /** Windows.Win32.NetworkManagement.NetManagement.TRANSPORT_TYPE */
  Type: TRANSPORT_TYPE;
  /** Windows.Win32.Foundation.BOOLEAN */
  SkipCertificateCheck: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSPORT_INFO = 16;

export function allocTRANSPORT_INFO(data?: Partial<TRANSPORT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SkipCertificateCheck !== undefined) view.setBigUint64(8, data.SkipCertificateCheck === null ? 0n : BigInt(util.toPointer(data.SkipCertificateCheck)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USE_OPTION_TRANSPORT_PARAMETERS (size: 8)
 */
export interface USE_OPTION_TRANSPORT_PARAMETERS {
  /** u32 */
  Tag: number;
  /** u16 */
  Length: number;
  /** u16 */
  Reserved: number;
}

export const sizeofUSE_OPTION_TRANSPORT_PARAMETERS = 8;

export function allocUSE_OPTION_TRANSPORT_PARAMETERS(data?: Partial<USE_OPTION_TRANSPORT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSE_OPTION_TRANSPORT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Tag !== undefined) view.setUint32(0, Number(data.Tag), true);
  // 0x04: u16
  if (data?.Length !== undefined) view.setUint16(4, Number(data.Length), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SMB_COMPRESSION_INFO (size: 16)
 */
export interface SMB_COMPRESSION_INFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  Switch: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved1: number;
  /** u16 */
  Reserved2: number;
  /** u32 */
  Reserved3: number;
}

export const sizeofSMB_COMPRESSION_INFO = 16;

export function allocSMB_COMPRESSION_INFO(data?: Partial<SMB_COMPRESSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSMB_COMPRESSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Switch !== undefined) view.setBigUint64(0, data.Switch === null ? 0n : BigInt(util.toPointer(data.Switch)), true);
  // 0x08: u8
  if (data?.Reserved1 !== undefined) view.setUint8(8, Number(data.Reserved1));
  // 0x09: u16
  if (data?.Reserved2 !== undefined) view.setUint16(9, Number(data.Reserved2), true);
  // 0x0b: u32
  if (data?.Reserved3 !== undefined) view.setUint32(11, Number(data.Reserved3), true);
  // 0x0f: pad1
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SMB_USE_OPTION_COMPRESSION_PARAMETERS (size: 8)
 */
export interface SMB_USE_OPTION_COMPRESSION_PARAMETERS {
  /** u32 */
  Tag: number;
  /** u16 */
  Length: number;
  /** u16 */
  Reserved: number;
}

export const sizeofSMB_USE_OPTION_COMPRESSION_PARAMETERS = 8;

export function allocSMB_USE_OPTION_COMPRESSION_PARAMETERS(data?: Partial<SMB_USE_OPTION_COMPRESSION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofSMB_USE_OPTION_COMPRESSION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Tag !== undefined) view.setUint32(0, Number(data.Tag), true);
  // 0x04: u16
  if (data?.Length !== undefined) view.setUint16(4, Number(data.Length), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.SMB_TREE_CONNECT_PARAMETERS (size: 16)
 */
export interface SMB_TREE_CONNECT_PARAMETERS {
  /** u32 */
  EABufferOffset: number;
  /** u32 */
  EABufferLen: number;
  /** u32 */
  CreateOptions: number;
  /** u32 */
  TreeConnectAttributes: number;
}

export const sizeofSMB_TREE_CONNECT_PARAMETERS = 16;

export function allocSMB_TREE_CONNECT_PARAMETERS(data?: Partial<SMB_TREE_CONNECT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofSMB_TREE_CONNECT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EABufferOffset !== undefined) view.setUint32(0, Number(data.EABufferOffset), true);
  // 0x04: u32
  if (data?.EABufferLen !== undefined) view.setUint32(4, Number(data.EABufferLen), true);
  // 0x08: u32
  if (data?.CreateOptions !== undefined) view.setUint32(8, Number(data.CreateOptions), true);
  // 0x0c: u32
  if (data?.TreeConnectAttributes !== undefined) view.setUint32(12, Number(data.TreeConnectAttributes), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.USE_OPTION_PROPERTIES (size: 24)
 */
export interface USE_OPTION_PROPERTIES {
  /** u32 */
  Tag: number;
  /** ptr */
  pInfo: Deno.PointerValue | Uint8Array | null;
  /** usize */
  Length: Deno.PointerValue;
}

export const sizeofUSE_OPTION_PROPERTIES = 24;

export function allocUSE_OPTION_PROPERTIES(data?: Partial<USE_OPTION_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofUSE_OPTION_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Tag !== undefined) view.setUint32(0, Number(data.Tag), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pInfo !== undefined) view.setBigUint64(8, data.pInfo === null ? 0n : BigInt(util.toPointer(data.pInfo)), true);
  // 0x10: usize
  if (data?.Length !== undefined) view.setBigUint64(16, BigInt(data.Length), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_100 (size: 32)
 */
export interface WKSTA_INFO_100 {
  /** u32 */
  wki100_platform_id: number;
  /** Windows.Win32.Foundation.PWSTR */
  wki100_computername: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wki100_langroup: string | null;
  /** u32 */
  wki100_ver_major: number;
  /** u32 */
  wki100_ver_minor: number;
}

export const sizeofWKSTA_INFO_100 = 32;

export function allocWKSTA_INFO_100(data?: Partial<WKSTA_INFO_100>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_100);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki100_platform_id !== undefined) view.setUint32(0, Number(data.wki100_platform_id), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wki100_computername !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wki100_computername);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wki100_langroup !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wki100_langroup);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.wki100_ver_major !== undefined) view.setUint32(24, Number(data.wki100_ver_major), true);
  // 0x1c: u32
  if (data?.wki100_ver_minor !== undefined) view.setUint32(28, Number(data.wki100_ver_minor), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_101 (size: 40)
 */
export interface WKSTA_INFO_101 {
  /** u32 */
  wki101_platform_id: number;
  /** Windows.Win32.Foundation.PWSTR */
  wki101_computername: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wki101_langroup: string | null;
  /** u32 */
  wki101_ver_major: number;
  /** u32 */
  wki101_ver_minor: number;
  /** Windows.Win32.Foundation.PWSTR */
  wki101_lanroot: string | null;
}

export const sizeofWKSTA_INFO_101 = 40;

export function allocWKSTA_INFO_101(data?: Partial<WKSTA_INFO_101>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_101);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki101_platform_id !== undefined) view.setUint32(0, Number(data.wki101_platform_id), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wki101_computername !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wki101_computername);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wki101_langroup !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wki101_langroup);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.wki101_ver_major !== undefined) view.setUint32(24, Number(data.wki101_ver_major), true);
  // 0x1c: u32
  if (data?.wki101_ver_minor !== undefined) view.setUint32(28, Number(data.wki101_ver_minor), true);
  // 0x20: buffer
  if (data?.wki101_lanroot !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.wki101_lanroot);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_102 (size: 48)
 */
export interface WKSTA_INFO_102 {
  /** u32 */
  wki102_platform_id: number;
  /** Windows.Win32.Foundation.PWSTR */
  wki102_computername: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wki102_langroup: string | null;
  /** u32 */
  wki102_ver_major: number;
  /** u32 */
  wki102_ver_minor: number;
  /** Windows.Win32.Foundation.PWSTR */
  wki102_lanroot: string | null;
  /** u32 */
  wki102_logged_on_users: number;
}

export const sizeofWKSTA_INFO_102 = 48;

export function allocWKSTA_INFO_102(data?: Partial<WKSTA_INFO_102>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_102);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki102_platform_id !== undefined) view.setUint32(0, Number(data.wki102_platform_id), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wki102_computername !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wki102_computername);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wki102_langroup !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wki102_langroup);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.wki102_ver_major !== undefined) view.setUint32(24, Number(data.wki102_ver_major), true);
  // 0x1c: u32
  if (data?.wki102_ver_minor !== undefined) view.setUint32(28, Number(data.wki102_ver_minor), true);
  // 0x20: buffer
  if (data?.wki102_lanroot !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.wki102_lanroot);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.wki102_logged_on_users !== undefined) view.setUint32(40, Number(data.wki102_logged_on_users), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_302 (size: 88)
 */
export interface WKSTA_INFO_302 {
  /** u32 */
  wki302_char_wait: number;
  /** u32 */
  wki302_collection_time: number;
  /** u32 */
  wki302_maximum_collection_count: number;
  /** u32 */
  wki302_keep_conn: number;
  /** u32 */
  wki302_keep_search: number;
  /** u32 */
  wki302_max_cmds: number;
  /** u32 */
  wki302_num_work_buf: number;
  /** u32 */
  wki302_siz_work_buf: number;
  /** u32 */
  wki302_max_wrk_cache: number;
  /** u32 */
  wki302_sess_timeout: number;
  /** u32 */
  wki302_siz_error: number;
  /** u32 */
  wki302_num_alerts: number;
  /** u32 */
  wki302_num_services: number;
  /** u32 */
  wki302_errlog_sz: number;
  /** u32 */
  wki302_print_buf_time: number;
  /** u32 */
  wki302_num_char_buf: number;
  /** u32 */
  wki302_siz_char_buf: number;
  /** Windows.Win32.Foundation.PWSTR */
  wki302_wrk_heuristics: string | null;
  /** u32 */
  wki302_mailslots: number;
  /** u32 */
  wki302_num_dgram_buf: number;
}

export const sizeofWKSTA_INFO_302 = 88;

export function allocWKSTA_INFO_302(data?: Partial<WKSTA_INFO_302>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_302);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki302_char_wait !== undefined) view.setUint32(0, Number(data.wki302_char_wait), true);
  // 0x04: u32
  if (data?.wki302_collection_time !== undefined) view.setUint32(4, Number(data.wki302_collection_time), true);
  // 0x08: u32
  if (data?.wki302_maximum_collection_count !== undefined) view.setUint32(8, Number(data.wki302_maximum_collection_count), true);
  // 0x0c: u32
  if (data?.wki302_keep_conn !== undefined) view.setUint32(12, Number(data.wki302_keep_conn), true);
  // 0x10: u32
  if (data?.wki302_keep_search !== undefined) view.setUint32(16, Number(data.wki302_keep_search), true);
  // 0x14: u32
  if (data?.wki302_max_cmds !== undefined) view.setUint32(20, Number(data.wki302_max_cmds), true);
  // 0x18: u32
  if (data?.wki302_num_work_buf !== undefined) view.setUint32(24, Number(data.wki302_num_work_buf), true);
  // 0x1c: u32
  if (data?.wki302_siz_work_buf !== undefined) view.setUint32(28, Number(data.wki302_siz_work_buf), true);
  // 0x20: u32
  if (data?.wki302_max_wrk_cache !== undefined) view.setUint32(32, Number(data.wki302_max_wrk_cache), true);
  // 0x24: u32
  if (data?.wki302_sess_timeout !== undefined) view.setUint32(36, Number(data.wki302_sess_timeout), true);
  // 0x28: u32
  if (data?.wki302_siz_error !== undefined) view.setUint32(40, Number(data.wki302_siz_error), true);
  // 0x2c: u32
  if (data?.wki302_num_alerts !== undefined) view.setUint32(44, Number(data.wki302_num_alerts), true);
  // 0x30: u32
  if (data?.wki302_num_services !== undefined) view.setUint32(48, Number(data.wki302_num_services), true);
  // 0x34: u32
  if (data?.wki302_errlog_sz !== undefined) view.setUint32(52, Number(data.wki302_errlog_sz), true);
  // 0x38: u32
  if (data?.wki302_print_buf_time !== undefined) view.setUint32(56, Number(data.wki302_print_buf_time), true);
  // 0x3c: u32
  if (data?.wki302_num_char_buf !== undefined) view.setUint32(60, Number(data.wki302_num_char_buf), true);
  // 0x40: u32
  if (data?.wki302_siz_char_buf !== undefined) view.setUint32(64, Number(data.wki302_siz_char_buf), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.wki302_wrk_heuristics !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.wki302_wrk_heuristics);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.wki302_mailslots !== undefined) view.setUint32(80, Number(data.wki302_mailslots), true);
  // 0x54: u32
  if (data?.wki302_num_dgram_buf !== undefined) view.setUint32(84, Number(data.wki302_num_dgram_buf), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_402 (size: 96)
 */
export interface WKSTA_INFO_402 {
  /** u32 */
  wki402_char_wait: number;
  /** u32 */
  wki402_collection_time: number;
  /** u32 */
  wki402_maximum_collection_count: number;
  /** u32 */
  wki402_keep_conn: number;
  /** u32 */
  wki402_keep_search: number;
  /** u32 */
  wki402_max_cmds: number;
  /** u32 */
  wki402_num_work_buf: number;
  /** u32 */
  wki402_siz_work_buf: number;
  /** u32 */
  wki402_max_wrk_cache: number;
  /** u32 */
  wki402_sess_timeout: number;
  /** u32 */
  wki402_siz_error: number;
  /** u32 */
  wki402_num_alerts: number;
  /** u32 */
  wki402_num_services: number;
  /** u32 */
  wki402_errlog_sz: number;
  /** u32 */
  wki402_print_buf_time: number;
  /** u32 */
  wki402_num_char_buf: number;
  /** u32 */
  wki402_siz_char_buf: number;
  /** Windows.Win32.Foundation.PWSTR */
  wki402_wrk_heuristics: string | null;
  /** u32 */
  wki402_mailslots: number;
  /** u32 */
  wki402_num_dgram_buf: number;
  /** u32 */
  wki402_max_threads: number;
}

export const sizeofWKSTA_INFO_402 = 96;

export function allocWKSTA_INFO_402(data?: Partial<WKSTA_INFO_402>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_402);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki402_char_wait !== undefined) view.setUint32(0, Number(data.wki402_char_wait), true);
  // 0x04: u32
  if (data?.wki402_collection_time !== undefined) view.setUint32(4, Number(data.wki402_collection_time), true);
  // 0x08: u32
  if (data?.wki402_maximum_collection_count !== undefined) view.setUint32(8, Number(data.wki402_maximum_collection_count), true);
  // 0x0c: u32
  if (data?.wki402_keep_conn !== undefined) view.setUint32(12, Number(data.wki402_keep_conn), true);
  // 0x10: u32
  if (data?.wki402_keep_search !== undefined) view.setUint32(16, Number(data.wki402_keep_search), true);
  // 0x14: u32
  if (data?.wki402_max_cmds !== undefined) view.setUint32(20, Number(data.wki402_max_cmds), true);
  // 0x18: u32
  if (data?.wki402_num_work_buf !== undefined) view.setUint32(24, Number(data.wki402_num_work_buf), true);
  // 0x1c: u32
  if (data?.wki402_siz_work_buf !== undefined) view.setUint32(28, Number(data.wki402_siz_work_buf), true);
  // 0x20: u32
  if (data?.wki402_max_wrk_cache !== undefined) view.setUint32(32, Number(data.wki402_max_wrk_cache), true);
  // 0x24: u32
  if (data?.wki402_sess_timeout !== undefined) view.setUint32(36, Number(data.wki402_sess_timeout), true);
  // 0x28: u32
  if (data?.wki402_siz_error !== undefined) view.setUint32(40, Number(data.wki402_siz_error), true);
  // 0x2c: u32
  if (data?.wki402_num_alerts !== undefined) view.setUint32(44, Number(data.wki402_num_alerts), true);
  // 0x30: u32
  if (data?.wki402_num_services !== undefined) view.setUint32(48, Number(data.wki402_num_services), true);
  // 0x34: u32
  if (data?.wki402_errlog_sz !== undefined) view.setUint32(52, Number(data.wki402_errlog_sz), true);
  // 0x38: u32
  if (data?.wki402_print_buf_time !== undefined) view.setUint32(56, Number(data.wki402_print_buf_time), true);
  // 0x3c: u32
  if (data?.wki402_num_char_buf !== undefined) view.setUint32(60, Number(data.wki402_num_char_buf), true);
  // 0x40: u32
  if (data?.wki402_siz_char_buf !== undefined) view.setUint32(64, Number(data.wki402_siz_char_buf), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.wki402_wrk_heuristics !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.wki402_wrk_heuristics);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.wki402_mailslots !== undefined) view.setUint32(80, Number(data.wki402_mailslots), true);
  // 0x54: u32
  if (data?.wki402_num_dgram_buf !== undefined) view.setUint32(84, Number(data.wki402_num_dgram_buf), true);
  // 0x58: u32
  if (data?.wki402_max_threads !== undefined) view.setUint32(88, Number(data.wki402_max_threads), true);
  // 0x5c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_502 (size: 144)
 */
export interface WKSTA_INFO_502 {
  /** u32 */
  wki502_char_wait: number;
  /** u32 */
  wki502_collection_time: number;
  /** u32 */
  wki502_maximum_collection_count: number;
  /** u32 */
  wki502_keep_conn: number;
  /** u32 */
  wki502_max_cmds: number;
  /** u32 */
  wki502_sess_timeout: number;
  /** u32 */
  wki502_siz_char_buf: number;
  /** u32 */
  wki502_max_threads: number;
  /** u32 */
  wki502_lock_quota: number;
  /** u32 */
  wki502_lock_increment: number;
  /** u32 */
  wki502_lock_maximum: number;
  /** u32 */
  wki502_pipe_increment: number;
  /** u32 */
  wki502_pipe_maximum: number;
  /** u32 */
  wki502_cache_file_timeout: number;
  /** u32 */
  wki502_dormant_file_limit: number;
  /** u32 */
  wki502_read_ahead_throughput: number;
  /** u32 */
  wki502_num_mailslot_buffers: number;
  /** u32 */
  wki502_num_srv_announce_buffers: number;
  /** u32 */
  wki502_max_illegal_datagram_events: number;
  /** u32 */
  wki502_illegal_datagram_event_reset_frequency: number;
  /** Windows.Win32.Foundation.BOOL */
  wki502_log_election_packets: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_use_opportunistic_locking: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_use_unlock_behind: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_use_close_behind: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_buf_named_pipes: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_use_lock_read_unlock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_utilize_nt_caching: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_use_raw_read: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_use_raw_write: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_use_write_raw_data: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_use_encryption: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_buf_files_deny_write: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_buf_read_only_files: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_force_core_create_mode: boolean;
  /** Windows.Win32.Foundation.BOOL */
  wki502_use_512_byte_max_transfer: boolean;
}

export const sizeofWKSTA_INFO_502 = 144;

export function allocWKSTA_INFO_502(data?: Partial<WKSTA_INFO_502>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_502);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki502_char_wait !== undefined) view.setUint32(0, Number(data.wki502_char_wait), true);
  // 0x04: u32
  if (data?.wki502_collection_time !== undefined) view.setUint32(4, Number(data.wki502_collection_time), true);
  // 0x08: u32
  if (data?.wki502_maximum_collection_count !== undefined) view.setUint32(8, Number(data.wki502_maximum_collection_count), true);
  // 0x0c: u32
  if (data?.wki502_keep_conn !== undefined) view.setUint32(12, Number(data.wki502_keep_conn), true);
  // 0x10: u32
  if (data?.wki502_max_cmds !== undefined) view.setUint32(16, Number(data.wki502_max_cmds), true);
  // 0x14: u32
  if (data?.wki502_sess_timeout !== undefined) view.setUint32(20, Number(data.wki502_sess_timeout), true);
  // 0x18: u32
  if (data?.wki502_siz_char_buf !== undefined) view.setUint32(24, Number(data.wki502_siz_char_buf), true);
  // 0x1c: u32
  if (data?.wki502_max_threads !== undefined) view.setUint32(28, Number(data.wki502_max_threads), true);
  // 0x20: u32
  if (data?.wki502_lock_quota !== undefined) view.setUint32(32, Number(data.wki502_lock_quota), true);
  // 0x24: u32
  if (data?.wki502_lock_increment !== undefined) view.setUint32(36, Number(data.wki502_lock_increment), true);
  // 0x28: u32
  if (data?.wki502_lock_maximum !== undefined) view.setUint32(40, Number(data.wki502_lock_maximum), true);
  // 0x2c: u32
  if (data?.wki502_pipe_increment !== undefined) view.setUint32(44, Number(data.wki502_pipe_increment), true);
  // 0x30: u32
  if (data?.wki502_pipe_maximum !== undefined) view.setUint32(48, Number(data.wki502_pipe_maximum), true);
  // 0x34: u32
  if (data?.wki502_cache_file_timeout !== undefined) view.setUint32(52, Number(data.wki502_cache_file_timeout), true);
  // 0x38: u32
  if (data?.wki502_dormant_file_limit !== undefined) view.setUint32(56, Number(data.wki502_dormant_file_limit), true);
  // 0x3c: u32
  if (data?.wki502_read_ahead_throughput !== undefined) view.setUint32(60, Number(data.wki502_read_ahead_throughput), true);
  // 0x40: u32
  if (data?.wki502_num_mailslot_buffers !== undefined) view.setUint32(64, Number(data.wki502_num_mailslot_buffers), true);
  // 0x44: u32
  if (data?.wki502_num_srv_announce_buffers !== undefined) view.setUint32(68, Number(data.wki502_num_srv_announce_buffers), true);
  // 0x48: u32
  if (data?.wki502_max_illegal_datagram_events !== undefined) view.setUint32(72, Number(data.wki502_max_illegal_datagram_events), true);
  // 0x4c: u32
  if (data?.wki502_illegal_datagram_event_reset_frequency !== undefined) view.setUint32(76, Number(data.wki502_illegal_datagram_event_reset_frequency), true);
  // 0x50: i32
  if (data?.wki502_log_election_packets !== undefined) view.setInt32(80, Number(data.wki502_log_election_packets), true);
  // 0x54: i32
  if (data?.wki502_use_opportunistic_locking !== undefined) view.setInt32(84, Number(data.wki502_use_opportunistic_locking), true);
  // 0x58: i32
  if (data?.wki502_use_unlock_behind !== undefined) view.setInt32(88, Number(data.wki502_use_unlock_behind), true);
  // 0x5c: i32
  if (data?.wki502_use_close_behind !== undefined) view.setInt32(92, Number(data.wki502_use_close_behind), true);
  // 0x60: i32
  if (data?.wki502_buf_named_pipes !== undefined) view.setInt32(96, Number(data.wki502_buf_named_pipes), true);
  // 0x64: i32
  if (data?.wki502_use_lock_read_unlock !== undefined) view.setInt32(100, Number(data.wki502_use_lock_read_unlock), true);
  // 0x68: i32
  if (data?.wki502_utilize_nt_caching !== undefined) view.setInt32(104, Number(data.wki502_utilize_nt_caching), true);
  // 0x6c: i32
  if (data?.wki502_use_raw_read !== undefined) view.setInt32(108, Number(data.wki502_use_raw_read), true);
  // 0x70: i32
  if (data?.wki502_use_raw_write !== undefined) view.setInt32(112, Number(data.wki502_use_raw_write), true);
  // 0x74: i32
  if (data?.wki502_use_write_raw_data !== undefined) view.setInt32(116, Number(data.wki502_use_write_raw_data), true);
  // 0x78: i32
  if (data?.wki502_use_encryption !== undefined) view.setInt32(120, Number(data.wki502_use_encryption), true);
  // 0x7c: i32
  if (data?.wki502_buf_files_deny_write !== undefined) view.setInt32(124, Number(data.wki502_buf_files_deny_write), true);
  // 0x80: i32
  if (data?.wki502_buf_read_only_files !== undefined) view.setInt32(128, Number(data.wki502_buf_read_only_files), true);
  // 0x84: i32
  if (data?.wki502_force_core_create_mode !== undefined) view.setInt32(132, Number(data.wki502_force_core_create_mode), true);
  // 0x88: i32
  if (data?.wki502_use_512_byte_max_transfer !== undefined) view.setInt32(136, Number(data.wki502_use_512_byte_max_transfer), true);
  // 0x8c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1010 (size: 8)
 */
export interface WKSTA_INFO_1010 {
  /** u32 */
  wki1010_char_wait: number;
}

export const sizeofWKSTA_INFO_1010 = 8;

export function allocWKSTA_INFO_1010(data?: Partial<WKSTA_INFO_1010>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1010);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1010_char_wait !== undefined) view.setUint32(0, Number(data.wki1010_char_wait), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1011 (size: 8)
 */
export interface WKSTA_INFO_1011 {
  /** u32 */
  wki1011_collection_time: number;
}

export const sizeofWKSTA_INFO_1011 = 8;

export function allocWKSTA_INFO_1011(data?: Partial<WKSTA_INFO_1011>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1011);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1011_collection_time !== undefined) view.setUint32(0, Number(data.wki1011_collection_time), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1012 (size: 8)
 */
export interface WKSTA_INFO_1012 {
  /** u32 */
  wki1012_maximum_collection_count: number;
}

export const sizeofWKSTA_INFO_1012 = 8;

export function allocWKSTA_INFO_1012(data?: Partial<WKSTA_INFO_1012>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1012);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1012_maximum_collection_count !== undefined) view.setUint32(0, Number(data.wki1012_maximum_collection_count), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1027 (size: 8)
 */
export interface WKSTA_INFO_1027 {
  /** u32 */
  wki1027_errlog_sz: number;
}

export const sizeofWKSTA_INFO_1027 = 8;

export function allocWKSTA_INFO_1027(data?: Partial<WKSTA_INFO_1027>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1027);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1027_errlog_sz !== undefined) view.setUint32(0, Number(data.wki1027_errlog_sz), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1028 (size: 8)
 */
export interface WKSTA_INFO_1028 {
  /** u32 */
  wki1028_print_buf_time: number;
}

export const sizeofWKSTA_INFO_1028 = 8;

export function allocWKSTA_INFO_1028(data?: Partial<WKSTA_INFO_1028>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1028);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1028_print_buf_time !== undefined) view.setUint32(0, Number(data.wki1028_print_buf_time), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1032 (size: 8)
 */
export interface WKSTA_INFO_1032 {
  /** u32 */
  wki1032_wrk_heuristics: number;
}

export const sizeofWKSTA_INFO_1032 = 8;

export function allocWKSTA_INFO_1032(data?: Partial<WKSTA_INFO_1032>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1032);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1032_wrk_heuristics !== undefined) view.setUint32(0, Number(data.wki1032_wrk_heuristics), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1013 (size: 8)
 */
export interface WKSTA_INFO_1013 {
  /** u32 */
  wki1013_keep_conn: number;
}

export const sizeofWKSTA_INFO_1013 = 8;

export function allocWKSTA_INFO_1013(data?: Partial<WKSTA_INFO_1013>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1013);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1013_keep_conn !== undefined) view.setUint32(0, Number(data.wki1013_keep_conn), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1018 (size: 8)
 */
export interface WKSTA_INFO_1018 {
  /** u32 */
  wki1018_sess_timeout: number;
}

export const sizeofWKSTA_INFO_1018 = 8;

export function allocWKSTA_INFO_1018(data?: Partial<WKSTA_INFO_1018>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1018);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1018_sess_timeout !== undefined) view.setUint32(0, Number(data.wki1018_sess_timeout), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1023 (size: 8)
 */
export interface WKSTA_INFO_1023 {
  /** u32 */
  wki1023_siz_char_buf: number;
}

export const sizeofWKSTA_INFO_1023 = 8;

export function allocWKSTA_INFO_1023(data?: Partial<WKSTA_INFO_1023>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1023);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1023_siz_char_buf !== undefined) view.setUint32(0, Number(data.wki1023_siz_char_buf), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1033 (size: 8)
 */
export interface WKSTA_INFO_1033 {
  /** u32 */
  wki1033_max_threads: number;
}

export const sizeofWKSTA_INFO_1033 = 8;

export function allocWKSTA_INFO_1033(data?: Partial<WKSTA_INFO_1033>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1033);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1033_max_threads !== undefined) view.setUint32(0, Number(data.wki1033_max_threads), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1041 (size: 8)
 */
export interface WKSTA_INFO_1041 {
  /** u32 */
  wki1041_lock_quota: number;
}

export const sizeofWKSTA_INFO_1041 = 8;

export function allocWKSTA_INFO_1041(data?: Partial<WKSTA_INFO_1041>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1041);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1041_lock_quota !== undefined) view.setUint32(0, Number(data.wki1041_lock_quota), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1042 (size: 8)
 */
export interface WKSTA_INFO_1042 {
  /** u32 */
  wki1042_lock_increment: number;
}

export const sizeofWKSTA_INFO_1042 = 8;

export function allocWKSTA_INFO_1042(data?: Partial<WKSTA_INFO_1042>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1042);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1042_lock_increment !== undefined) view.setUint32(0, Number(data.wki1042_lock_increment), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1043 (size: 8)
 */
export interface WKSTA_INFO_1043 {
  /** u32 */
  wki1043_lock_maximum: number;
}

export const sizeofWKSTA_INFO_1043 = 8;

export function allocWKSTA_INFO_1043(data?: Partial<WKSTA_INFO_1043>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1043);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1043_lock_maximum !== undefined) view.setUint32(0, Number(data.wki1043_lock_maximum), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1044 (size: 8)
 */
export interface WKSTA_INFO_1044 {
  /** u32 */
  wki1044_pipe_increment: number;
}

export const sizeofWKSTA_INFO_1044 = 8;

export function allocWKSTA_INFO_1044(data?: Partial<WKSTA_INFO_1044>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1044);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1044_pipe_increment !== undefined) view.setUint32(0, Number(data.wki1044_pipe_increment), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1045 (size: 8)
 */
export interface WKSTA_INFO_1045 {
  /** u32 */
  wki1045_pipe_maximum: number;
}

export const sizeofWKSTA_INFO_1045 = 8;

export function allocWKSTA_INFO_1045(data?: Partial<WKSTA_INFO_1045>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1045);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1045_pipe_maximum !== undefined) view.setUint32(0, Number(data.wki1045_pipe_maximum), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1046 (size: 8)
 */
export interface WKSTA_INFO_1046 {
  /** u32 */
  wki1046_dormant_file_limit: number;
}

export const sizeofWKSTA_INFO_1046 = 8;

export function allocWKSTA_INFO_1046(data?: Partial<WKSTA_INFO_1046>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1046);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1046_dormant_file_limit !== undefined) view.setUint32(0, Number(data.wki1046_dormant_file_limit), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1047 (size: 8)
 */
export interface WKSTA_INFO_1047 {
  /** u32 */
  wki1047_cache_file_timeout: number;
}

export const sizeofWKSTA_INFO_1047 = 8;

export function allocWKSTA_INFO_1047(data?: Partial<WKSTA_INFO_1047>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1047);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1047_cache_file_timeout !== undefined) view.setUint32(0, Number(data.wki1047_cache_file_timeout), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1048 (size: 8)
 */
export interface WKSTA_INFO_1048 {
  /** Windows.Win32.Foundation.BOOL */
  wki1048_use_opportunistic_locking: boolean;
}

export const sizeofWKSTA_INFO_1048 = 8;

export function allocWKSTA_INFO_1048(data?: Partial<WKSTA_INFO_1048>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1048);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1048_use_opportunistic_locking !== undefined) view.setInt32(0, Number(data.wki1048_use_opportunistic_locking), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1049 (size: 8)
 */
export interface WKSTA_INFO_1049 {
  /** Windows.Win32.Foundation.BOOL */
  wki1049_use_unlock_behind: boolean;
}

export const sizeofWKSTA_INFO_1049 = 8;

export function allocWKSTA_INFO_1049(data?: Partial<WKSTA_INFO_1049>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1049);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1049_use_unlock_behind !== undefined) view.setInt32(0, Number(data.wki1049_use_unlock_behind), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1050 (size: 8)
 */
export interface WKSTA_INFO_1050 {
  /** Windows.Win32.Foundation.BOOL */
  wki1050_use_close_behind: boolean;
}

export const sizeofWKSTA_INFO_1050 = 8;

export function allocWKSTA_INFO_1050(data?: Partial<WKSTA_INFO_1050>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1050);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1050_use_close_behind !== undefined) view.setInt32(0, Number(data.wki1050_use_close_behind), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1051 (size: 8)
 */
export interface WKSTA_INFO_1051 {
  /** Windows.Win32.Foundation.BOOL */
  wki1051_buf_named_pipes: boolean;
}

export const sizeofWKSTA_INFO_1051 = 8;

export function allocWKSTA_INFO_1051(data?: Partial<WKSTA_INFO_1051>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1051);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1051_buf_named_pipes !== undefined) view.setInt32(0, Number(data.wki1051_buf_named_pipes), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1052 (size: 8)
 */
export interface WKSTA_INFO_1052 {
  /** Windows.Win32.Foundation.BOOL */
  wki1052_use_lock_read_unlock: boolean;
}

export const sizeofWKSTA_INFO_1052 = 8;

export function allocWKSTA_INFO_1052(data?: Partial<WKSTA_INFO_1052>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1052);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1052_use_lock_read_unlock !== undefined) view.setInt32(0, Number(data.wki1052_use_lock_read_unlock), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1053 (size: 8)
 */
export interface WKSTA_INFO_1053 {
  /** Windows.Win32.Foundation.BOOL */
  wki1053_utilize_nt_caching: boolean;
}

export const sizeofWKSTA_INFO_1053 = 8;

export function allocWKSTA_INFO_1053(data?: Partial<WKSTA_INFO_1053>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1053);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1053_utilize_nt_caching !== undefined) view.setInt32(0, Number(data.wki1053_utilize_nt_caching), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1054 (size: 8)
 */
export interface WKSTA_INFO_1054 {
  /** Windows.Win32.Foundation.BOOL */
  wki1054_use_raw_read: boolean;
}

export const sizeofWKSTA_INFO_1054 = 8;

export function allocWKSTA_INFO_1054(data?: Partial<WKSTA_INFO_1054>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1054);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1054_use_raw_read !== undefined) view.setInt32(0, Number(data.wki1054_use_raw_read), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1055 (size: 8)
 */
export interface WKSTA_INFO_1055 {
  /** Windows.Win32.Foundation.BOOL */
  wki1055_use_raw_write: boolean;
}

export const sizeofWKSTA_INFO_1055 = 8;

export function allocWKSTA_INFO_1055(data?: Partial<WKSTA_INFO_1055>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1055);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1055_use_raw_write !== undefined) view.setInt32(0, Number(data.wki1055_use_raw_write), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1056 (size: 8)
 */
export interface WKSTA_INFO_1056 {
  /** Windows.Win32.Foundation.BOOL */
  wki1056_use_write_raw_data: boolean;
}

export const sizeofWKSTA_INFO_1056 = 8;

export function allocWKSTA_INFO_1056(data?: Partial<WKSTA_INFO_1056>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1056);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1056_use_write_raw_data !== undefined) view.setInt32(0, Number(data.wki1056_use_write_raw_data), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1057 (size: 8)
 */
export interface WKSTA_INFO_1057 {
  /** Windows.Win32.Foundation.BOOL */
  wki1057_use_encryption: boolean;
}

export const sizeofWKSTA_INFO_1057 = 8;

export function allocWKSTA_INFO_1057(data?: Partial<WKSTA_INFO_1057>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1057);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1057_use_encryption !== undefined) view.setInt32(0, Number(data.wki1057_use_encryption), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1058 (size: 8)
 */
export interface WKSTA_INFO_1058 {
  /** Windows.Win32.Foundation.BOOL */
  wki1058_buf_files_deny_write: boolean;
}

export const sizeofWKSTA_INFO_1058 = 8;

export function allocWKSTA_INFO_1058(data?: Partial<WKSTA_INFO_1058>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1058);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1058_buf_files_deny_write !== undefined) view.setInt32(0, Number(data.wki1058_buf_files_deny_write), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1059 (size: 8)
 */
export interface WKSTA_INFO_1059 {
  /** Windows.Win32.Foundation.BOOL */
  wki1059_buf_read_only_files: boolean;
}

export const sizeofWKSTA_INFO_1059 = 8;

export function allocWKSTA_INFO_1059(data?: Partial<WKSTA_INFO_1059>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1059);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1059_buf_read_only_files !== undefined) view.setInt32(0, Number(data.wki1059_buf_read_only_files), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1060 (size: 8)
 */
export interface WKSTA_INFO_1060 {
  /** Windows.Win32.Foundation.BOOL */
  wki1060_force_core_create_mode: boolean;
}

export const sizeofWKSTA_INFO_1060 = 8;

export function allocWKSTA_INFO_1060(data?: Partial<WKSTA_INFO_1060>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1060);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1060_force_core_create_mode !== undefined) view.setInt32(0, Number(data.wki1060_force_core_create_mode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1061 (size: 8)
 */
export interface WKSTA_INFO_1061 {
  /** Windows.Win32.Foundation.BOOL */
  wki1061_use_512_byte_max_transfer: boolean;
}

export const sizeofWKSTA_INFO_1061 = 8;

export function allocWKSTA_INFO_1061(data?: Partial<WKSTA_INFO_1061>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1061);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wki1061_use_512_byte_max_transfer !== undefined) view.setInt32(0, Number(data.wki1061_use_512_byte_max_transfer), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_INFO_1062 (size: 8)
 */
export interface WKSTA_INFO_1062 {
  /** u32 */
  wki1062_read_ahead_throughput: number;
}

export const sizeofWKSTA_INFO_1062 = 8;

export function allocWKSTA_INFO_1062(data?: Partial<WKSTA_INFO_1062>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_INFO_1062);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wki1062_read_ahead_throughput !== undefined) view.setUint32(0, Number(data.wki1062_read_ahead_throughput), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_USER_INFO_0 (size: 8)
 */
export interface WKSTA_USER_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  wkui0_username: string | null;
}

export const sizeofWKSTA_USER_INFO_0 = 8;

export function allocWKSTA_USER_INFO_0(data?: Partial<WKSTA_USER_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_USER_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.wkui0_username !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.wkui0_username);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_USER_INFO_1 (size: 32)
 */
export interface WKSTA_USER_INFO_1 {
  /** Windows.Win32.Foundation.PWSTR */
  wkui1_username: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wkui1_logon_domain: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wkui1_oth_domains: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wkui1_logon_server: string | null;
}

export const sizeofWKSTA_USER_INFO_1 = 32;

export function allocWKSTA_USER_INFO_1(data?: Partial<WKSTA_USER_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_USER_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.wkui1_username !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.wkui1_username);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.wkui1_logon_domain !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wkui1_logon_domain);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wkui1_oth_domains !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wkui1_oth_domains);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.wkui1_logon_server !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.wkui1_logon_server);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_USER_INFO_1101 (size: 8)
 */
export interface WKSTA_USER_INFO_1101 {
  /** Windows.Win32.Foundation.PWSTR */
  wkui1101_oth_domains: string | null;
}

export const sizeofWKSTA_USER_INFO_1101 = 8;

export function allocWKSTA_USER_INFO_1101(data?: Partial<WKSTA_USER_INFO_1101>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_USER_INFO_1101);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.wkui1101_oth_domains !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.wkui1101_oth_domains);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.WKSTA_TRANSPORT_INFO_0 (size: 32)
 */
export interface WKSTA_TRANSPORT_INFO_0 {
  /** u32 */
  wkti0_quality_of_service: number;
  /** u32 */
  wkti0_number_of_vcs: number;
  /** Windows.Win32.Foundation.PWSTR */
  wkti0_transport_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wkti0_transport_address: string | null;
  /** Windows.Win32.Foundation.BOOL */
  wkti0_wan_ish: boolean;
}

export const sizeofWKSTA_TRANSPORT_INFO_0 = 32;

export function allocWKSTA_TRANSPORT_INFO_0(data?: Partial<WKSTA_TRANSPORT_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofWKSTA_TRANSPORT_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wkti0_quality_of_service !== undefined) view.setUint32(0, Number(data.wkti0_quality_of_service), true);
  // 0x04: u32
  if (data?.wkti0_number_of_vcs !== undefined) view.setUint32(4, Number(data.wkti0_number_of_vcs), true);
  // 0x08: buffer
  if (data?.wkti0_transport_name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wkti0_transport_name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wkti0_transport_address !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wkti0_transport_address);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.wkti0_wan_ish !== undefined) view.setInt32(24, Number(data.wkti0_wan_ish), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.ERROR_LOG (size: 48)
 */
export interface ERROR_LOG {
  /** u32 */
  el_len: number;
  /** u32 */
  el_reserved: number;
  /** u32 */
  el_time: number;
  /** u32 */
  el_error: number;
  /** Windows.Win32.Foundation.PWSTR */
  el_name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  el_text: string | null;
  /** ptr */
  el_data: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  el_data_size: number;
  /** u32 */
  el_nstrings: number;
}

export const sizeofERROR_LOG = 48;

export function allocERROR_LOG(data?: Partial<ERROR_LOG>): Uint8Array {
  const buf = new Uint8Array(sizeofERROR_LOG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.el_len !== undefined) view.setUint32(0, Number(data.el_len), true);
  // 0x04: u32
  if (data?.el_reserved !== undefined) view.setUint32(4, Number(data.el_reserved), true);
  // 0x08: u32
  if (data?.el_time !== undefined) view.setUint32(8, Number(data.el_time), true);
  // 0x0c: u32
  if (data?.el_error !== undefined) view.setUint32(12, Number(data.el_error), true);
  // 0x10: buffer
  if (data?.el_name !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.el_name);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.el_text !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.el_text);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.el_data !== undefined) view.setBigUint64(32, data.el_data === null ? 0n : BigInt(util.toPointer(data.el_data)), true);
  // 0x28: u32
  if (data?.el_data_size !== undefined) view.setUint32(40, Number(data.el_data_size), true);
  // 0x2c: u32
  if (data?.el_nstrings !== undefined) view.setUint32(44, Number(data.el_nstrings), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.HLOG (size: 16)
 */
export interface HLOG {
  /** u32 */
  time: number;
  /** u32 */
  last_flags: number;
  /** u32 */
  offset: number;
  /** u32 */
  rec_offset: number;
}

export const sizeofHLOG = 16;

export function allocHLOG(data?: Partial<HLOG>): Uint8Array {
  const buf = new Uint8Array(sizeofHLOG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.time !== undefined) view.setUint32(0, Number(data.time), true);
  // 0x04: u32
  if (data?.last_flags !== undefined) view.setUint32(4, Number(data.last_flags), true);
  // 0x08: u32
  if (data?.offset !== undefined) view.setUint32(8, Number(data.offset), true);
  // 0x0c: u32
  if (data?.rec_offset !== undefined) view.setUint32(12, Number(data.rec_offset), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.CONFIG_INFO_0 (size: 16)
 */
export interface CONFIG_INFO_0 {
  /** Windows.Win32.Foundation.PWSTR */
  cfgi0_key: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  cfgi0_data: string | null;
}

export const sizeofCONFIG_INFO_0 = 16;

export function allocCONFIG_INFO_0(data?: Partial<CONFIG_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFIG_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.cfgi0_key !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.cfgi0_key);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.cfgi0_data !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.cfgi0_data);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AUDIT_ENTRY (size: 24)
 */
export interface AUDIT_ENTRY {
  /** u32 */
  ae_len: number;
  /** u32 */
  ae_reserved: number;
  /** u32 */
  ae_time: number;
  /** u32 */
  ae_type: number;
  /** u32 */
  ae_data_offset: number;
  /** u32 */
  ae_data_size: number;
}

export const sizeofAUDIT_ENTRY = 24;

export function allocAUDIT_ENTRY(data?: Partial<AUDIT_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_len !== undefined) view.setUint32(0, Number(data.ae_len), true);
  // 0x04: u32
  if (data?.ae_reserved !== undefined) view.setUint32(4, Number(data.ae_reserved), true);
  // 0x08: u32
  if (data?.ae_time !== undefined) view.setUint32(8, Number(data.ae_time), true);
  // 0x0c: u32
  if (data?.ae_type !== undefined) view.setUint32(12, Number(data.ae_type), true);
  // 0x10: u32
  if (data?.ae_data_offset !== undefined) view.setUint32(16, Number(data.ae_data_offset), true);
  // 0x14: u32
  if (data?.ae_data_size !== undefined) view.setUint32(20, Number(data.ae_data_size), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_SRVSTATUS (size: 8)
 */
export interface AE_SRVSTATUS {
  /** u32 */
  ae_sv_status: number;
}

export const sizeofAE_SRVSTATUS = 8;

export function allocAE_SRVSTATUS(data?: Partial<AE_SRVSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_SRVSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_sv_status !== undefined) view.setUint32(0, Number(data.ae_sv_status), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_SESSLOGON (size: 16)
 */
export interface AE_SESSLOGON {
  /** u32 */
  ae_so_compname: number;
  /** u32 */
  ae_so_username: number;
  /** u32 */
  ae_so_privilege: number;
}

export const sizeofAE_SESSLOGON = 16;

export function allocAE_SESSLOGON(data?: Partial<AE_SESSLOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_SESSLOGON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_so_compname !== undefined) view.setUint32(0, Number(data.ae_so_compname), true);
  // 0x04: u32
  if (data?.ae_so_username !== undefined) view.setUint32(4, Number(data.ae_so_username), true);
  // 0x08: u32
  if (data?.ae_so_privilege !== undefined) view.setUint32(8, Number(data.ae_so_privilege), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_SESSLOGOFF (size: 16)
 */
export interface AE_SESSLOGOFF {
  /** u32 */
  ae_sf_compname: number;
  /** u32 */
  ae_sf_username: number;
  /** u32 */
  ae_sf_reason: number;
}

export const sizeofAE_SESSLOGOFF = 16;

export function allocAE_SESSLOGOFF(data?: Partial<AE_SESSLOGOFF>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_SESSLOGOFF);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_sf_compname !== undefined) view.setUint32(0, Number(data.ae_sf_compname), true);
  // 0x04: u32
  if (data?.ae_sf_username !== undefined) view.setUint32(4, Number(data.ae_sf_username), true);
  // 0x08: u32
  if (data?.ae_sf_reason !== undefined) view.setUint32(8, Number(data.ae_sf_reason), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_SESSPWERR (size: 8)
 */
export interface AE_SESSPWERR {
  /** u32 */
  ae_sp_compname: number;
  /** u32 */
  ae_sp_username: number;
}

export const sizeofAE_SESSPWERR = 8;

export function allocAE_SESSPWERR(data?: Partial<AE_SESSPWERR>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_SESSPWERR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_sp_compname !== undefined) view.setUint32(0, Number(data.ae_sp_compname), true);
  // 0x04: u32
  if (data?.ae_sp_username !== undefined) view.setUint32(4, Number(data.ae_sp_username), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_CONNSTART (size: 16)
 */
export interface AE_CONNSTART {
  /** u32 */
  ae_ct_compname: number;
  /** u32 */
  ae_ct_username: number;
  /** u32 */
  ae_ct_netname: number;
  /** u32 */
  ae_ct_connid: number;
}

export const sizeofAE_CONNSTART = 16;

export function allocAE_CONNSTART(data?: Partial<AE_CONNSTART>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_CONNSTART);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_ct_compname !== undefined) view.setUint32(0, Number(data.ae_ct_compname), true);
  // 0x04: u32
  if (data?.ae_ct_username !== undefined) view.setUint32(4, Number(data.ae_ct_username), true);
  // 0x08: u32
  if (data?.ae_ct_netname !== undefined) view.setUint32(8, Number(data.ae_ct_netname), true);
  // 0x0c: u32
  if (data?.ae_ct_connid !== undefined) view.setUint32(12, Number(data.ae_ct_connid), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_CONNSTOP (size: 24)
 */
export interface AE_CONNSTOP {
  /** u32 */
  ae_cp_compname: number;
  /** u32 */
  ae_cp_username: number;
  /** u32 */
  ae_cp_netname: number;
  /** u32 */
  ae_cp_connid: number;
  /** u32 */
  ae_cp_reason: number;
}

export const sizeofAE_CONNSTOP = 24;

export function allocAE_CONNSTOP(data?: Partial<AE_CONNSTOP>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_CONNSTOP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_cp_compname !== undefined) view.setUint32(0, Number(data.ae_cp_compname), true);
  // 0x04: u32
  if (data?.ae_cp_username !== undefined) view.setUint32(4, Number(data.ae_cp_username), true);
  // 0x08: u32
  if (data?.ae_cp_netname !== undefined) view.setUint32(8, Number(data.ae_cp_netname), true);
  // 0x0c: u32
  if (data?.ae_cp_connid !== undefined) view.setUint32(12, Number(data.ae_cp_connid), true);
  // 0x10: u32
  if (data?.ae_cp_reason !== undefined) view.setUint32(16, Number(data.ae_cp_reason), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_CONNREJ (size: 16)
 */
export interface AE_CONNREJ {
  /** u32 */
  ae_cr_compname: number;
  /** u32 */
  ae_cr_username: number;
  /** u32 */
  ae_cr_netname: number;
  /** u32 */
  ae_cr_reason: number;
}

export const sizeofAE_CONNREJ = 16;

export function allocAE_CONNREJ(data?: Partial<AE_CONNREJ>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_CONNREJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_cr_compname !== undefined) view.setUint32(0, Number(data.ae_cr_compname), true);
  // 0x04: u32
  if (data?.ae_cr_username !== undefined) view.setUint32(4, Number(data.ae_cr_username), true);
  // 0x08: u32
  if (data?.ae_cr_netname !== undefined) view.setUint32(8, Number(data.ae_cr_netname), true);
  // 0x0c: u32
  if (data?.ae_cr_reason !== undefined) view.setUint32(12, Number(data.ae_cr_reason), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_RESACCESS (size: 32)
 */
export interface AE_RESACCESS {
  /** u32 */
  ae_ra_compname: number;
  /** u32 */
  ae_ra_username: number;
  /** u32 */
  ae_ra_resname: number;
  /** u32 */
  ae_ra_operation: number;
  /** u32 */
  ae_ra_returncode: number;
  /** u32 */
  ae_ra_restype: number;
  /** u32 */
  ae_ra_fileid: number;
}

export const sizeofAE_RESACCESS = 32;

export function allocAE_RESACCESS(data?: Partial<AE_RESACCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_RESACCESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_ra_compname !== undefined) view.setUint32(0, Number(data.ae_ra_compname), true);
  // 0x04: u32
  if (data?.ae_ra_username !== undefined) view.setUint32(4, Number(data.ae_ra_username), true);
  // 0x08: u32
  if (data?.ae_ra_resname !== undefined) view.setUint32(8, Number(data.ae_ra_resname), true);
  // 0x0c: u32
  if (data?.ae_ra_operation !== undefined) view.setUint32(12, Number(data.ae_ra_operation), true);
  // 0x10: u32
  if (data?.ae_ra_returncode !== undefined) view.setUint32(16, Number(data.ae_ra_returncode), true);
  // 0x14: u32
  if (data?.ae_ra_restype !== undefined) view.setUint32(20, Number(data.ae_ra_restype), true);
  // 0x18: u32
  if (data?.ae_ra_fileid !== undefined) view.setUint32(24, Number(data.ae_ra_fileid), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_RESACCESSREJ (size: 16)
 */
export interface AE_RESACCESSREJ {
  /** u32 */
  ae_rr_compname: number;
  /** u32 */
  ae_rr_username: number;
  /** u32 */
  ae_rr_resname: number;
  /** u32 */
  ae_rr_operation: number;
}

export const sizeofAE_RESACCESSREJ = 16;

export function allocAE_RESACCESSREJ(data?: Partial<AE_RESACCESSREJ>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_RESACCESSREJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_rr_compname !== undefined) view.setUint32(0, Number(data.ae_rr_compname), true);
  // 0x04: u32
  if (data?.ae_rr_username !== undefined) view.setUint32(4, Number(data.ae_rr_username), true);
  // 0x08: u32
  if (data?.ae_rr_resname !== undefined) view.setUint32(8, Number(data.ae_rr_resname), true);
  // 0x0c: u32
  if (data?.ae_rr_operation !== undefined) view.setUint32(12, Number(data.ae_rr_operation), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_CLOSEFILE (size: 24)
 */
export interface AE_CLOSEFILE {
  /** u32 */
  ae_cf_compname: number;
  /** u32 */
  ae_cf_username: number;
  /** u32 */
  ae_cf_resname: number;
  /** u32 */
  ae_cf_fileid: number;
  /** u32 */
  ae_cf_duration: number;
  /** u32 */
  ae_cf_reason: number;
}

export const sizeofAE_CLOSEFILE = 24;

export function allocAE_CLOSEFILE(data?: Partial<AE_CLOSEFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_CLOSEFILE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_cf_compname !== undefined) view.setUint32(0, Number(data.ae_cf_compname), true);
  // 0x04: u32
  if (data?.ae_cf_username !== undefined) view.setUint32(4, Number(data.ae_cf_username), true);
  // 0x08: u32
  if (data?.ae_cf_resname !== undefined) view.setUint32(8, Number(data.ae_cf_resname), true);
  // 0x0c: u32
  if (data?.ae_cf_fileid !== undefined) view.setUint32(12, Number(data.ae_cf_fileid), true);
  // 0x10: u32
  if (data?.ae_cf_duration !== undefined) view.setUint32(16, Number(data.ae_cf_duration), true);
  // 0x14: u32
  if (data?.ae_cf_reason !== undefined) view.setUint32(20, Number(data.ae_cf_reason), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_SERVICESTAT (size: 32)
 */
export interface AE_SERVICESTAT {
  /** u32 */
  ae_ss_compname: number;
  /** u32 */
  ae_ss_username: number;
  /** u32 */
  ae_ss_svcname: number;
  /** u32 */
  ae_ss_status: number;
  /** u32 */
  ae_ss_code: number;
  /** u32 */
  ae_ss_text: number;
  /** u32 */
  ae_ss_returnval: number;
}

export const sizeofAE_SERVICESTAT = 32;

export function allocAE_SERVICESTAT(data?: Partial<AE_SERVICESTAT>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_SERVICESTAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_ss_compname !== undefined) view.setUint32(0, Number(data.ae_ss_compname), true);
  // 0x04: u32
  if (data?.ae_ss_username !== undefined) view.setUint32(4, Number(data.ae_ss_username), true);
  // 0x08: u32
  if (data?.ae_ss_svcname !== undefined) view.setUint32(8, Number(data.ae_ss_svcname), true);
  // 0x0c: u32
  if (data?.ae_ss_status !== undefined) view.setUint32(12, Number(data.ae_ss_status), true);
  // 0x10: u32
  if (data?.ae_ss_code !== undefined) view.setUint32(16, Number(data.ae_ss_code), true);
  // 0x14: u32
  if (data?.ae_ss_text !== undefined) view.setUint32(20, Number(data.ae_ss_text), true);
  // 0x18: u32
  if (data?.ae_ss_returnval !== undefined) view.setUint32(24, Number(data.ae_ss_returnval), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_ACLMOD (size: 24)
 */
export interface AE_ACLMOD {
  /** u32 */
  ae_am_compname: number;
  /** u32 */
  ae_am_username: number;
  /** u32 */
  ae_am_resname: number;
  /** u32 */
  ae_am_action: number;
  /** u32 */
  ae_am_datalen: number;
}

export const sizeofAE_ACLMOD = 24;

export function allocAE_ACLMOD(data?: Partial<AE_ACLMOD>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_ACLMOD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_am_compname !== undefined) view.setUint32(0, Number(data.ae_am_compname), true);
  // 0x04: u32
  if (data?.ae_am_username !== undefined) view.setUint32(4, Number(data.ae_am_username), true);
  // 0x08: u32
  if (data?.ae_am_resname !== undefined) view.setUint32(8, Number(data.ae_am_resname), true);
  // 0x0c: u32
  if (data?.ae_am_action !== undefined) view.setUint32(12, Number(data.ae_am_action), true);
  // 0x10: u32
  if (data?.ae_am_datalen !== undefined) view.setUint32(16, Number(data.ae_am_datalen), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_UASMOD (size: 24)
 */
export interface AE_UASMOD {
  /** u32 */
  ae_um_compname: number;
  /** u32 */
  ae_um_username: number;
  /** u32 */
  ae_um_resname: number;
  /** u32 */
  ae_um_rectype: number;
  /** u32 */
  ae_um_action: number;
  /** u32 */
  ae_um_datalen: number;
}

export const sizeofAE_UASMOD = 24;

export function allocAE_UASMOD(data?: Partial<AE_UASMOD>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_UASMOD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_um_compname !== undefined) view.setUint32(0, Number(data.ae_um_compname), true);
  // 0x04: u32
  if (data?.ae_um_username !== undefined) view.setUint32(4, Number(data.ae_um_username), true);
  // 0x08: u32
  if (data?.ae_um_resname !== undefined) view.setUint32(8, Number(data.ae_um_resname), true);
  // 0x0c: u32
  if (data?.ae_um_rectype !== undefined) view.setUint32(12, Number(data.ae_um_rectype), true);
  // 0x10: u32
  if (data?.ae_um_action !== undefined) view.setUint32(16, Number(data.ae_um_action), true);
  // 0x14: u32
  if (data?.ae_um_datalen !== undefined) view.setUint32(20, Number(data.ae_um_datalen), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_NETLOGON (size: 16)
 */
export interface AE_NETLOGON {
  /** u32 */
  ae_no_compname: number;
  /** u32 */
  ae_no_username: number;
  /** u32 */
  ae_no_privilege: number;
  /** u32 */
  ae_no_authflags: number;
}

export const sizeofAE_NETLOGON = 16;

export function allocAE_NETLOGON(data?: Partial<AE_NETLOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_NETLOGON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_no_compname !== undefined) view.setUint32(0, Number(data.ae_no_compname), true);
  // 0x04: u32
  if (data?.ae_no_username !== undefined) view.setUint32(4, Number(data.ae_no_username), true);
  // 0x08: u32
  if (data?.ae_no_privilege !== undefined) view.setUint32(8, Number(data.ae_no_privilege), true);
  // 0x0c: u32
  if (data?.ae_no_authflags !== undefined) view.setUint32(12, Number(data.ae_no_authflags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_NETLOGOFF (size: 16)
 */
export interface AE_NETLOGOFF {
  /** u32 */
  ae_nf_compname: number;
  /** u32 */
  ae_nf_username: number;
  /** u32 */
  ae_nf_reserved1: number;
  /** u32 */
  ae_nf_reserved2: number;
}

export const sizeofAE_NETLOGOFF = 16;

export function allocAE_NETLOGOFF(data?: Partial<AE_NETLOGOFF>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_NETLOGOFF);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_nf_compname !== undefined) view.setUint32(0, Number(data.ae_nf_compname), true);
  // 0x04: u32
  if (data?.ae_nf_username !== undefined) view.setUint32(4, Number(data.ae_nf_username), true);
  // 0x08: u32
  if (data?.ae_nf_reserved1 !== undefined) view.setUint32(8, Number(data.ae_nf_reserved1), true);
  // 0x0c: u32
  if (data?.ae_nf_reserved2 !== undefined) view.setUint32(12, Number(data.ae_nf_reserved2), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_ACCLIM (size: 16)
 */
export interface AE_ACCLIM {
  /** u32 */
  ae_al_compname: number;
  /** u32 */
  ae_al_username: number;
  /** u32 */
  ae_al_resname: number;
  /** u32 */
  ae_al_limit: number;
}

export const sizeofAE_ACCLIM = 16;

export function allocAE_ACCLIM(data?: Partial<AE_ACCLIM>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_ACCLIM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_al_compname !== undefined) view.setUint32(0, Number(data.ae_al_compname), true);
  // 0x04: u32
  if (data?.ae_al_username !== undefined) view.setUint32(4, Number(data.ae_al_username), true);
  // 0x08: u32
  if (data?.ae_al_resname !== undefined) view.setUint32(8, Number(data.ae_al_resname), true);
  // 0x0c: u32
  if (data?.ae_al_limit !== undefined) view.setUint32(12, Number(data.ae_al_limit), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_LOCKOUT (size: 16)
 */
export interface AE_LOCKOUT {
  /** u32 */
  ae_lk_compname: number;
  /** u32 */
  ae_lk_username: number;
  /** u32 */
  ae_lk_action: number;
  /** u32 */
  ae_lk_bad_pw_count: number;
}

export const sizeofAE_LOCKOUT = 16;

export function allocAE_LOCKOUT(data?: Partial<AE_LOCKOUT>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_LOCKOUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_lk_compname !== undefined) view.setUint32(0, Number(data.ae_lk_compname), true);
  // 0x04: u32
  if (data?.ae_lk_username !== undefined) view.setUint32(4, Number(data.ae_lk_username), true);
  // 0x08: u32
  if (data?.ae_lk_action !== undefined) view.setUint32(8, Number(data.ae_lk_action), true);
  // 0x0c: u32
  if (data?.ae_lk_bad_pw_count !== undefined) view.setUint32(12, Number(data.ae_lk_bad_pw_count), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AE_GENERIC (size: 48)
 */
export interface AE_GENERIC {
  /** u32 */
  ae_ge_msgfile: number;
  /** u32 */
  ae_ge_msgnum: number;
  /** u32 */
  ae_ge_params: number;
  /** u32 */
  ae_ge_param1: number;
  /** u32 */
  ae_ge_param2: number;
  /** u32 */
  ae_ge_param3: number;
  /** u32 */
  ae_ge_param4: number;
  /** u32 */
  ae_ge_param5: number;
  /** u32 */
  ae_ge_param6: number;
  /** u32 */
  ae_ge_param7: number;
  /** u32 */
  ae_ge_param8: number;
  /** u32 */
  ae_ge_param9: number;
}

export const sizeofAE_GENERIC = 48;

export function allocAE_GENERIC(data?: Partial<AE_GENERIC>): Uint8Array {
  const buf = new Uint8Array(sizeofAE_GENERIC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ae_ge_msgfile !== undefined) view.setUint32(0, Number(data.ae_ge_msgfile), true);
  // 0x04: u32
  if (data?.ae_ge_msgnum !== undefined) view.setUint32(4, Number(data.ae_ge_msgnum), true);
  // 0x08: u32
  if (data?.ae_ge_params !== undefined) view.setUint32(8, Number(data.ae_ge_params), true);
  // 0x0c: u32
  if (data?.ae_ge_param1 !== undefined) view.setUint32(12, Number(data.ae_ge_param1), true);
  // 0x10: u32
  if (data?.ae_ge_param2 !== undefined) view.setUint32(16, Number(data.ae_ge_param2), true);
  // 0x14: u32
  if (data?.ae_ge_param3 !== undefined) view.setUint32(20, Number(data.ae_ge_param3), true);
  // 0x18: u32
  if (data?.ae_ge_param4 !== undefined) view.setUint32(24, Number(data.ae_ge_param4), true);
  // 0x1c: u32
  if (data?.ae_ge_param5 !== undefined) view.setUint32(28, Number(data.ae_ge_param5), true);
  // 0x20: u32
  if (data?.ae_ge_param6 !== undefined) view.setUint32(32, Number(data.ae_ge_param6), true);
  // 0x24: u32
  if (data?.ae_ge_param7 !== undefined) view.setUint32(36, Number(data.ae_ge_param7), true);
  // 0x28: u32
  if (data?.ae_ge_param8 !== undefined) view.setUint32(40, Number(data.ae_ge_param8), true);
  // 0x2c: u32
  if (data?.ae_ge_param9 !== undefined) view.setUint32(44, Number(data.ae_ge_param9), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.DSREG_USER_INFO (size: 24)
 */
export interface DSREG_USER_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszUserEmail: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszUserKeyId: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszUserKeyName: string | null;
}

export const sizeofDSREG_USER_INFO = 24;

export function allocDSREG_USER_INFO(data?: Partial<DSREG_USER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDSREG_USER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszUserEmail !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszUserEmail);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszUserKeyId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszUserKeyId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszUserKeyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszUserKeyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.DSREG_JOIN_INFO (size: 96)
 */
export interface DSREG_JOIN_INFO {
  /** Windows.Win32.NetworkManagement.NetManagement.DSREG_JOIN_TYPE */
  joinType: DSREG_JOIN_TYPE;
  /** ptr */
  pJoinCertificate: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDeviceId: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszIdpDomain: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszTenantId: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszJoinUserEmail: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszTenantDisplayName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszMdmEnrollmentUrl: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszMdmTermsOfUseUrl: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszMdmComplianceUrl: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszUserSettingSyncUrl: string | null;
  /** ptr */
  pUserInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSREG_JOIN_INFO = 96;

export function allocDSREG_JOIN_INFO(data?: Partial<DSREG_JOIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDSREG_JOIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.joinType !== undefined) view.setInt32(0, Number(data.joinType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pJoinCertificate !== undefined) view.setBigUint64(8, data.pJoinCertificate === null ? 0n : BigInt(util.toPointer(data.pJoinCertificate)), true);
  // 0x10: buffer
  if (data?.pszDeviceId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszDeviceId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszIdpDomain !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszIdpDomain);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszTenantId !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszTenantId);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pszJoinUserEmail !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszJoinUserEmail);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pszTenantDisplayName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszTenantDisplayName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pszMdmEnrollmentUrl !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszMdmEnrollmentUrl);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.pszMdmTermsOfUseUrl !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pszMdmTermsOfUseUrl);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.pszMdmComplianceUrl !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pszMdmComplianceUrl);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.pszUserSettingSyncUrl !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszUserSettingSyncUrl);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: pointer
  if (data?.pUserInfo !== undefined) view.setBigUint64(88, data.pUserInfo === null ? 0n : BigInt(util.toPointer(data.pUserInfo)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NETSETUP_PROVISIONING_PARAMS (size: 120)
 */
export interface NETSETUP_PROVISIONING_PARAMS {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpDomain: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpHostName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpMachineAccountOU: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpDcName: string | null;
  /** Windows.Win32.NetworkManagement.NetManagement.NETSETUP_PROVISION */
  dwProvisionOptions: NETSETUP_PROVISION;
  /** ptr */
  aCertTemplateNames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cCertTemplateNames: number;
  /** ptr */
  aMachinePolicyNames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cMachinePolicyNames: number;
  /** ptr */
  aMachinePolicyPaths: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cMachinePolicyPaths: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpNetbiosName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpSiteName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpPrimaryDNSDomain: string | null;
}

export const sizeofNETSETUP_PROVISIONING_PARAMS = 120;

export function allocNETSETUP_PROVISIONING_PARAMS(data?: Partial<NETSETUP_PROVISIONING_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofNETSETUP_PROVISIONING_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpDomain !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpDomain);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpHostName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpHostName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpMachineAccountOU !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpMachineAccountOU);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpDcName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpDcName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwProvisionOptions !== undefined) view.setUint32(40, Number(data.dwProvisionOptions), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.aCertTemplateNames !== undefined) view.setBigUint64(48, data.aCertTemplateNames === null ? 0n : BigInt(util.toPointer(data.aCertTemplateNames)), true);
  // 0x38: u32
  if (data?.cCertTemplateNames !== undefined) view.setUint32(56, Number(data.cCertTemplateNames), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.aMachinePolicyNames !== undefined) view.setBigUint64(64, data.aMachinePolicyNames === null ? 0n : BigInt(util.toPointer(data.aMachinePolicyNames)), true);
  // 0x48: u32
  if (data?.cMachinePolicyNames !== undefined) view.setUint32(72, Number(data.cMachinePolicyNames), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.aMachinePolicyPaths !== undefined) view.setBigUint64(80, data.aMachinePolicyPaths === null ? 0n : BigInt(util.toPointer(data.aMachinePolicyPaths)), true);
  // 0x58: u32
  if (data?.cMachinePolicyPaths !== undefined) view.setUint32(88, Number(data.cMachinePolicyPaths), true);
  // 0x5c: pad4
  // 0x60: buffer
  if (data?.lpNetbiosName !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.lpNetbiosName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: buffer
  if (data?.lpSiteName !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.lpSiteName);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: buffer
  if (data?.lpPrimaryDNSDomain !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.lpPrimaryDNSDomain);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AT_INFO (size: 24)
 */
export interface AT_INFO {
  /** usize */
  JobTime: Deno.PointerValue;
  /** u32 */
  DaysOfMonth: number;
  /** u8 */
  DaysOfWeek: number;
  /** u8 */
  Flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  Command: string | null;
}

export const sizeofAT_INFO = 24;

export function allocAT_INFO(data?: Partial<AT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.JobTime !== undefined) view.setBigUint64(0, BigInt(data.JobTime), true);
  // 0x08: u32
  if (data?.DaysOfMonth !== undefined) view.setUint32(8, Number(data.DaysOfMonth), true);
  // 0x0c: u8
  if (data?.DaysOfWeek !== undefined) view.setUint8(12, Number(data.DaysOfWeek));
  // 0x0d: u8
  if (data?.Flags !== undefined) view.setUint8(13, Number(data.Flags));
  // 0x0e: pad2
  // 0x10: buffer
  if (data?.Command !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Command);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.AT_ENUM (size: 32)
 */
export interface AT_ENUM {
  /** u32 */
  JobId: number;
  /** usize */
  JobTime: Deno.PointerValue;
  /** u32 */
  DaysOfMonth: number;
  /** u8 */
  DaysOfWeek: number;
  /** u8 */
  Flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  Command: string | null;
}

export const sizeofAT_ENUM = 32;

export function allocAT_ENUM(data?: Partial<AT_ENUM>): Uint8Array {
  const buf = new Uint8Array(sizeofAT_ENUM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.JobId !== undefined) view.setUint32(0, Number(data.JobId), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.JobTime !== undefined) view.setBigUint64(8, BigInt(data.JobTime), true);
  // 0x10: u32
  if (data?.DaysOfMonth !== undefined) view.setUint32(16, Number(data.DaysOfMonth), true);
  // 0x14: u8
  if (data?.DaysOfWeek !== undefined) view.setUint8(20, Number(data.DaysOfWeek));
  // 0x15: u8
  if (data?.Flags !== undefined) view.setUint8(21, Number(data.Flags));
  // 0x16: pad2
  // 0x18: buffer
  if (data?.Command !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Command);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.FLAT_STRING (size: 16)
 */
export interface FLAT_STRING {
  /** i16 */
  MaximumLength: number;
  /** i16 */
  Length: number;
  /** array */
  Buffer: Deno.PointerValue | null;
}

export const sizeofFLAT_STRING = 16;

export function allocFLAT_STRING(data?: Partial<FLAT_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofFLAT_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.MaximumLength !== undefined) view.setInt16(0, Number(data.MaximumLength), true);
  // 0x02: i16
  if (data?.Length !== undefined) view.setInt16(2, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.NETWORK_NAME (size: 8)
 */
export interface NETWORK_NAME {
  /** Windows.Win32.NetworkManagement.NetManagement.FLAT_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNETWORK_NAME = 8;

export function allocNETWORK_NAME(data?: Partial<NETWORK_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofNETWORK_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.HARDWARE_ADDRESS (size: 8)
 */
export interface HARDWARE_ADDRESS {
  /** array */
  Address: Deno.PointerValue | null;
}

export const sizeofHARDWARE_ADDRESS = 8;

export function allocHARDWARE_ADDRESS(data?: Partial<HARDWARE_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofHARDWARE_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.OBO_TOKEN (size: 48)
 */
export interface OBO_TOKEN {
  /** Windows.Win32.NetworkManagement.NetManagement.OBO_TOKEN_TYPE */
  Type: OBO_TOKEN_TYPE;
  /** Windows.Win32.NetworkManagement.NetManagement.INetCfgComponent */
  pncc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszwManufacturer: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszwProduct: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszwDisplayName: string | null;
  /** Windows.Win32.Foundation.BOOL */
  fRegistered: boolean;
}

export const sizeofOBO_TOKEN = 48;

export function allocOBO_TOKEN(data?: Partial<OBO_TOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofOBO_TOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pncc !== undefined) view.setBigUint64(8, data.pncc === null ? 0n : BigInt(util.toPointer(data.pncc)), true);
  // 0x10: buffer
  if (data?.pszwManufacturer !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszwManufacturer);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszwProduct !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszwProduct);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszwDisplayName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszwDisplayName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: i32
  if (data?.fRegistered !== undefined) view.setInt32(40, Number(data.fRegistered), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.RASCON_IPUI (size: 104)
 */
export interface RASCON_IPUI {
  /** System.Guid */
  guidConnection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fIPv6Cfg: boolean;
  /** u32 */
  dwFlags: number;
  /** array */
  pszwIpAddr: Deno.PointerValue | null;
  /** array */
  pszwDnsAddr: Deno.PointerValue | null;
  /** array */
  pszwDns2Addr: Deno.PointerValue | null;
  /** array */
  pszwWinsAddr: Deno.PointerValue | null;
  /** array */
  pszwWins2Addr: Deno.PointerValue | null;
  /** array */
  pszwDnsSuffix: Deno.PointerValue | null;
  /** array */
  pszwIpv6Addr: Deno.PointerValue | null;
  /** u32 */
  dwIpv6PrefixLength: number;
  /** array */
  pszwIpv6DnsAddr: Deno.PointerValue | null;
  /** array */
  pszwIpv6Dns2Addr: Deno.PointerValue | null;
  /** u32 */
  dwIPv4InfMetric: number;
  /** u32 */
  dwIPv6InfMetric: number;
}

export const sizeofRASCON_IPUI = 104;

export function allocRASCON_IPUI(data?: Partial<RASCON_IPUI>): Uint8Array {
  const buf = new Uint8Array(sizeofRASCON_IPUI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidConnection !== undefined) view.setBigUint64(0, data.guidConnection === null ? 0n : BigInt(util.toPointer(data.guidConnection)), true);
  // 0x08: i32
  if (data?.fIPv6Cfg !== undefined) view.setInt32(8, Number(data.fIPv6Cfg), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: pointer
  if (data?.pszwIpAddr !== undefined) view.setBigUint64(16, data.pszwIpAddr === null ? 0n : BigInt(util.toPointer(data.pszwIpAddr)), true);
  // 0x18: pointer
  if (data?.pszwDnsAddr !== undefined) view.setBigUint64(24, data.pszwDnsAddr === null ? 0n : BigInt(util.toPointer(data.pszwDnsAddr)), true);
  // 0x20: pointer
  if (data?.pszwDns2Addr !== undefined) view.setBigUint64(32, data.pszwDns2Addr === null ? 0n : BigInt(util.toPointer(data.pszwDns2Addr)), true);
  // 0x28: pointer
  if (data?.pszwWinsAddr !== undefined) view.setBigUint64(40, data.pszwWinsAddr === null ? 0n : BigInt(util.toPointer(data.pszwWinsAddr)), true);
  // 0x30: pointer
  if (data?.pszwWins2Addr !== undefined) view.setBigUint64(48, data.pszwWins2Addr === null ? 0n : BigInt(util.toPointer(data.pszwWins2Addr)), true);
  // 0x38: pointer
  if (data?.pszwDnsSuffix !== undefined) view.setBigUint64(56, data.pszwDnsSuffix === null ? 0n : BigInt(util.toPointer(data.pszwDnsSuffix)), true);
  // 0x40: pointer
  if (data?.pszwIpv6Addr !== undefined) view.setBigUint64(64, data.pszwIpv6Addr === null ? 0n : BigInt(util.toPointer(data.pszwIpv6Addr)), true);
  // 0x48: u32
  if (data?.dwIpv6PrefixLength !== undefined) view.setUint32(72, Number(data.dwIpv6PrefixLength), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pszwIpv6DnsAddr !== undefined) view.setBigUint64(80, data.pszwIpv6DnsAddr === null ? 0n : BigInt(util.toPointer(data.pszwIpv6DnsAddr)), true);
  // 0x58: pointer
  if (data?.pszwIpv6Dns2Addr !== undefined) view.setBigUint64(88, data.pszwIpv6Dns2Addr === null ? 0n : BigInt(util.toPointer(data.pszwIpv6Dns2Addr)), true);
  // 0x60: u32
  if (data?.dwIPv4InfMetric !== undefined) view.setUint32(96, Number(data.dwIPv4InfMetric), true);
  // 0x64: u32
  if (data?.dwIPv6InfMetric !== undefined) view.setUint32(100, Number(data.dwIPv6InfMetric), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.RTR_TOC_ENTRY (size: 16)
 */
export interface RTR_TOC_ENTRY {
  /** u32 */
  InfoType: number;
  /** u32 */
  InfoSize: number;
  /** u32 */
  Count: number;
  /** u32 */
  Offset: number;
}

export const sizeofRTR_TOC_ENTRY = 16;

export function allocRTR_TOC_ENTRY(data?: Partial<RTR_TOC_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofRTR_TOC_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InfoType !== undefined) view.setUint32(0, Number(data.InfoType), true);
  // 0x04: u32
  if (data?.InfoSize !== undefined) view.setUint32(4, Number(data.InfoSize), true);
  // 0x08: u32
  if (data?.Count !== undefined) view.setUint32(8, Number(data.Count), true);
  // 0x0c: u32
  if (data?.Offset !== undefined) view.setUint32(12, Number(data.Offset), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.RTR_INFO_BLOCK_HEADER (size: 24)
 */
export interface RTR_INFO_BLOCK_HEADER {
  /** u32 */
  Version: number;
  /** u32 */
  Size: number;
  /** u32 */
  TocEntriesCount: number;
  /** array */
  TocEntry: Deno.PointerValue | null;
}

export const sizeofRTR_INFO_BLOCK_HEADER = 24;

export function allocRTR_INFO_BLOCK_HEADER(data?: Partial<RTR_INFO_BLOCK_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofRTR_INFO_BLOCK_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.TocEntriesCount !== undefined) view.setUint32(8, Number(data.TocEntriesCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.TocEntry !== undefined) view.setBigUint64(16, data.TocEntry === null ? 0n : BigInt(util.toPointer(data.TocEntry)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetManagement.MPR_PROTOCOL_0 (size: 24)
 */
export interface MPR_PROTOCOL_0 {
  /** u32 */
  dwProtocolId: number;
  /** array */
  wszProtocol: Deno.PointerValue | null;
  /** array */
  wszDLLName: Deno.PointerValue | null;
}

export const sizeofMPR_PROTOCOL_0 = 24;

export function allocMPR_PROTOCOL_0(data?: Partial<MPR_PROTOCOL_0>): Uint8Array {
  const buf = new Uint8Array(sizeofMPR_PROTOCOL_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwProtocolId !== undefined) view.setUint32(0, Number(data.dwProtocolId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszProtocol !== undefined) view.setBigUint64(8, data.wszProtocol === null ? 0n : BigInt(util.toPointer(data.wszProtocol)), true);
  // 0x10: pointer
  if (data?.wszDLLName !== undefined) view.setBigUint64(16, data.wszDLLName === null ? 0n : BigInt(util.toPointer(data.wszDLLName)), true);
  return buf;
}

export type NTSTATUS = number;

export type HRESULT = number;

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var libNETAPI32_dll = Deno.dlopen("NETAPI32.dll", {
    NetUserAdd: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetUserEnum: {
      parameters: ["buffer", "u32", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetUserGetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetUserSetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetUserDel: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    NetUserGetGroups: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetUserSetGroups: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    NetUserGetLocalGroups: {
      parameters: ["buffer", "buffer", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetUserModalsGet: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    NetUserModalsSet: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetUserChangePassword: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "u32",
    },
    NetGroupAdd: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetGroupAddUser: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "u32",
    },
    NetGroupEnum: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetGroupGetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetGroupSetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetGroupDel: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    NetGroupDelUser: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "u32",
    },
    NetGroupGetUsers: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetGroupSetUsers: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    NetLocalGroupAdd: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetLocalGroupAddMember: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    NetLocalGroupEnum: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetLocalGroupGetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetLocalGroupSetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetLocalGroupDel: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    NetLocalGroupDelMember: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    NetLocalGroupGetMembers: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetLocalGroupSetMembers: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    NetLocalGroupAddMembers: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    NetLocalGroupDelMembers: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    NetQueryDisplayInformation: {
      parameters: ["buffer", "u32", "u32", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetGetDisplayInformationIndex: {
      parameters: ["buffer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    NetAccessAdd: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetAccessEnum: {
      parameters: ["buffer", "buffer", "u32", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetAccessGetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetAccessSetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetAccessDel: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    NetAccessGetUserPerms: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    NetValidatePasswordPolicy: {
      parameters: ["buffer", "pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    NetValidatePasswordPolicyFree: {
      parameters: ["pointer"],
      result: "u32",
    },
    NetGetDCName: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    NetGetAnyDCName: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    I_NetLogonControl2: {
      parameters: ["buffer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetAddServiceAccount: {
      parameters: ["buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    NetRemoveServiceAccount: {
      parameters: ["buffer", "buffer", "u32"],
      result: "pointer",
    },
    NetEnumerateServiceAccounts: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    NetIsServiceAccount: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    NetQueryServiceAccount: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    NetAlertRaise: {
      parameters: ["buffer", "pointer", "u32"],
      result: "u32",
    },
    NetAlertRaiseEx: {
      parameters: ["buffer", "pointer", "u32", "buffer"],
      result: "u32",
    },
    NetMessageNameAdd: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    NetMessageNameEnum: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetMessageNameGetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetMessageNameDel: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    NetMessageBufferSend: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    NetRemoteTOD: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    NetRemoteComputerSupports: {
      parameters: ["buffer", "i32", "pointer"],
      result: "u32",
    },
    NetReplGetInfo: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    NetReplSetInfo: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetReplExportDirAdd: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetReplExportDirDel: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    NetReplExportDirEnum: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetReplExportDirGetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetReplExportDirSetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetReplExportDirLock: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    NetReplExportDirUnlock: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    NetReplImportDirAdd: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetReplImportDirDel: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    NetReplImportDirEnum: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetReplImportDirGetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetReplImportDirLock: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    NetReplImportDirUnlock: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    NetServerEnum: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    NetServerGetInfo: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    NetServerSetInfo: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetServerDiskEnum: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetServerComputerNameAdd: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "u32",
    },
    NetServerComputerNameDel: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    NetServerTransportAdd: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    NetServerTransportAddEx: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    NetServerTransportDel: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    NetServerTransportEnum: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetServiceControl: {
      parameters: ["buffer", "buffer", "u32", "u32", "pointer"],
      result: "u32",
    },
    NetServiceEnum: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetServiceGetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetServiceInstall: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetUseAdd: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetUseDel: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    NetUseEnum: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetUseGetInfo: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    NetWkstaGetInfo: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    NetWkstaSetInfo: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetWkstaUserGetInfo: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    NetWkstaUserSetInfo: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetWkstaUserEnum: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetWkstaTransportAdd: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetWkstaTransportDel: {
      parameters: ["buffer", "buffer", "u32"],
      result: "u32",
    },
    NetWkstaTransportEnum: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetApiBufferAllocate: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    NetApiBufferFree: {
      parameters: ["pointer"],
      result: "u32",
    },
    NetApiBufferReallocate: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    NetApiBufferSize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    NetErrorLogClear: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    NetErrorLogRead: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetErrorLogWrite: {
      parameters: ["pointer", "u32", "buffer", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    NetConfigGet: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    NetConfigGetAll: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    NetConfigSet: {
      parameters: ["buffer", "buffer", "buffer", "u32", "u32", "pointer", "u32"],
      result: "u32",
    },
    NetAuditClear: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "u32",
    },
    NetAuditRead: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetAuditWrite: {
      parameters: ["u32", "pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    NetJoinDomain: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    NetUnjoinDomain: {
      parameters: ["buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    NetRenameMachineInDomain: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    NetValidateName: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "i32"],
      result: "u32",
    },
    NetGetJoinableOUs: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    NetAddAlternateComputerName: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    NetRemoveAlternateComputerName: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    NetSetPrimaryComputerName: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    NetEnumerateComputerNames: {
      parameters: ["buffer", "i32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    NetProvisionComputerAccount: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetRequestOfflineDomainJoin: {
      parameters: ["pointer", "u32", "u32", "buffer"],
      result: "u32",
    },
    NetCreateProvisioningPackage: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetRequestProvisioningPackageInstall: {
      parameters: ["pointer", "u32", "u32", "buffer", "pointer"],
      result: "u32",
    },
    NetGetAadJoinInformation: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    NetFreeAadJoinInformation: {
      parameters: ["pointer"],
      result: "void",
    },
    NetGetJoinInformation: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
    },
    NetScheduleJobAdd: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
    },
    NetScheduleJobDel: {
      parameters: ["buffer", "u32", "u32"],
      result: "u32",
    },
    NetScheduleJobEnum: {
      parameters: ["buffer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    NetScheduleJobGetInfo: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libmstask_dll = Deno.dlopen("mstask.dll", {
    GetNetScheduleAccountInformation: {
      parameters: ["buffer", "u32", "buffer"],
      result: "pointer",
    },
    SetNetScheduleAccountInformation: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var librtutils_dll = Deno.dlopen("rtutils.dll", {
    TraceRegisterExA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    TraceDeregisterA: {
      parameters: ["u32"],
      result: "u32",
    },
    TraceDeregisterExA: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    TraceGetConsoleA: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    TracePrintfA: {
      parameters: ["u32", "buffer"],
      result: "u32",
    },
    TracePrintfExA: {
      parameters: ["u32", "u32", "buffer"],
      result: "u32",
    },
    TraceVprintfExA: {
      parameters: ["u32", "u32", "buffer", "pointer"],
      result: "u32",
    },
    TracePutsExA: {
      parameters: ["u32", "u32", "buffer"],
      result: "u32",
    },
    TraceDumpExA: {
      parameters: ["u32", "u32", "pointer", "u32", "u32", "i32", "buffer"],
      result: "u32",
    },
    TraceRegisterExW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    TraceDeregisterW: {
      parameters: ["u32"],
      result: "u32",
    },
    TraceDeregisterExW: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    TraceGetConsoleW: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    TracePrintfW: {
      parameters: ["u32", "buffer"],
      result: "u32",
    },
    TracePrintfExW: {
      parameters: ["u32", "u32", "buffer"],
      result: "u32",
    },
    TraceVprintfExW: {
      parameters: ["u32", "u32", "buffer", "pointer"],
      result: "u32",
    },
    TracePutsExW: {
      parameters: ["u32", "u32", "buffer"],
      result: "u32",
    },
    TraceDumpExW: {
      parameters: ["u32", "u32", "pointer", "u32", "u32", "i32", "buffer"],
      result: "u32",
    },
    LogErrorA: {
      parameters: ["u32", "u32", "pointer", "u32"],
      result: "void",
    },
    LogEventA: {
      parameters: ["u32", "u32", "u32", "pointer"],
      result: "void",
    },
    LogErrorW: {
      parameters: ["u32", "u32", "pointer", "u32"],
      result: "void",
    },
    LogEventW: {
      parameters: ["u32", "u32", "u32", "pointer"],
      result: "void",
    },
    RouterLogRegisterA: {
      parameters: ["buffer"],
      result: "pointer",
    },
    RouterLogDeregisterA: {
      parameters: ["pointer"],
      result: "void",
    },
    RouterLogEventA: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "u32"],
      result: "void",
    },
    RouterLogEventDataA: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "u32", "pointer"],
      result: "void",
    },
    RouterLogEventStringA: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "u32", "u32"],
      result: "void",
    },
    RouterLogEventExA: {
      parameters: ["pointer", "u32", "u32", "u32", "buffer"],
      result: "void",
    },
    RouterLogEventValistExA: {
      parameters: ["pointer", "u32", "u32", "u32", "buffer", "pointer"],
      result: "void",
    },
    RouterGetErrorStringA: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    RouterLogRegisterW: {
      parameters: ["buffer"],
      result: "pointer",
    },
    RouterLogDeregisterW: {
      parameters: ["pointer"],
      result: "void",
    },
    RouterLogEventW: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "u32"],
      result: "void",
    },
    RouterLogEventDataW: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "u32", "pointer"],
      result: "void",
    },
    RouterLogEventStringW: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "u32", "u32"],
      result: "void",
    },
    RouterLogEventExW: {
      parameters: ["pointer", "u32", "u32", "u32", "buffer"],
      result: "void",
    },
    RouterLogEventValistExW: {
      parameters: ["pointer", "u32", "u32", "u32", "buffer", "pointer"],
      result: "void",
    },
    RouterGetErrorStringW: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    RouterAssert: {
      parameters: ["buffer", "buffer", "u32", "buffer"],
      result: "void",
    },
    MprSetupProtocolEnum: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    MprSetupProtocolFree: {
      parameters: ["pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function NetUserAdd(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUserAdd(util.pwstrToFfi(servername), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetUserEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  filter: NET_USER_ENUM_FILTER_FLAGS /* Windows.Win32.NetworkManagement.NetManagement.NET_USER_ENUM_FILTER_FLAGS */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resume_handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUserEnum(util.pwstrToFfi(servername), level, filter, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resume_handle));
}

export function NetUserGetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  username: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUserGetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(username), level, util.toPointer(bufptr));
}

export function NetUserSetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  username: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUserSetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(username), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetUserDel(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  username: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUserDel(util.pwstrToFfi(servername), util.pwstrToFfi(username));
}

export function NetUserGetGroups(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  username: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUserGetGroups(util.pwstrToFfi(servername), util.pwstrToFfi(username), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries));
}

export function NetUserSetGroups(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  username: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  num_entries: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUserSetGroups(util.pwstrToFfi(servername), util.pwstrToFfi(username), level, util.toPointer(buf), num_entries);
}

export function NetUserGetLocalGroups(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  username: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  flags: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUserGetLocalGroups(util.pwstrToFfi(servername), util.pwstrToFfi(username), level, flags, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries));
}

export function NetUserModalsGet(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUserModalsGet(util.pwstrToFfi(servername), level, util.toPointer(bufptr));
}

export function NetUserModalsSet(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUserModalsSet(util.pwstrToFfi(servername), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetUserChangePassword(
  domainname: string | null /* Windows.Win32.Foundation.PWSTR */,
  username: string | null /* Windows.Win32.Foundation.PWSTR */,
  oldpassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  newpassword: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUserChangePassword(util.pwstrToFfi(domainname), util.pwstrToFfi(username), util.pwstrToFfi(oldpassword), util.pwstrToFfi(newpassword));
}

export function NetGroupAdd(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGroupAdd(util.pwstrToFfi(servername), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetGroupAddUser(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  GroupName: string | null /* Windows.Win32.Foundation.PWSTR */,
  username: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGroupAddUser(util.pwstrToFfi(servername), util.pwstrToFfi(GroupName), util.pwstrToFfi(username));
}

export function NetGroupEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resume_handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGroupEnum(util.pwstrToFfi(servername), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resume_handle));
}

export function NetGroupGetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGroupGetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(groupname), level, util.toPointer(bufptr));
}

export function NetGroupSetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGroupSetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(groupname), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetGroupDel(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGroupDel(util.pwstrToFfi(servername), util.pwstrToFfi(groupname));
}

export function NetGroupDelUser(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  GroupName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Username: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGroupDelUser(util.pwstrToFfi(servername), util.pwstrToFfi(GroupName), util.pwstrToFfi(Username));
}

export function NetGroupGetUsers(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGroupGetUsers(util.pwstrToFfi(servername), util.pwstrToFfi(groupname), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(ResumeHandle));
}

export function NetGroupSetUsers(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGroupSetUsers(util.pwstrToFfi(servername), util.pwstrToFfi(groupname), level, util.toPointer(buf), totalentries);
}

export function NetLocalGroupAdd(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetLocalGroupAdd(util.pwstrToFfi(servername), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetLocalGroupAddMember(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  membersid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): number /* u32 */ {
  return libNETAPI32_dll.NetLocalGroupAddMember(util.pwstrToFfi(servername), util.pwstrToFfi(groupname), util.toPointer(membersid));
}

export function NetLocalGroupEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resumehandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetLocalGroupEnum(util.pwstrToFfi(servername), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resumehandle));
}

export function NetLocalGroupGetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetLocalGroupGetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(groupname), level, util.toPointer(bufptr));
}

export function NetLocalGroupSetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetLocalGroupSetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(groupname), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetLocalGroupDel(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetLocalGroupDel(util.pwstrToFfi(servername), util.pwstrToFfi(groupname));
}

export function NetLocalGroupDelMember(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  membersid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): number /* u32 */ {
  return libNETAPI32_dll.NetLocalGroupDelMember(util.pwstrToFfi(servername), util.pwstrToFfi(groupname), util.toPointer(membersid));
}

export function NetLocalGroupGetMembers(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  localgroupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resumehandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetLocalGroupGetMembers(util.pwstrToFfi(servername), util.pwstrToFfi(localgroupname), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resumehandle));
}

export function NetLocalGroupSetMembers(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetLocalGroupSetMembers(util.pwstrToFfi(servername), util.pwstrToFfi(groupname), level, util.toPointer(buf), totalentries);
}

export function NetLocalGroupAddMembers(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetLocalGroupAddMembers(util.pwstrToFfi(servername), util.pwstrToFfi(groupname), level, util.toPointer(buf), totalentries);
}

export function NetLocalGroupDelMembers(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  groupname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetLocalGroupDelMembers(util.pwstrToFfi(servername), util.pwstrToFfi(groupname), level, util.toPointer(buf), totalentries);
}

export function NetQueryDisplayInformation(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  Index: number /* u32 */,
  EntriesRequested: number /* u32 */,
  PreferredMaximumLength: number /* u32 */,
  ReturnedEntryCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  SortedBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetQueryDisplayInformation(util.pwstrToFfi(ServerName), Level, Index, EntriesRequested, PreferredMaximumLength, util.toPointer(ReturnedEntryCount), util.toPointer(SortedBuffer));
}

export function NetGetDisplayInformationIndex(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  Prefix: string | null /* Windows.Win32.Foundation.PWSTR */,
  Index: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGetDisplayInformationIndex(util.pwstrToFfi(ServerName), Level, util.pwstrToFfi(Prefix), util.toPointer(Index));
}

export function NetAccessAdd(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAccessAdd(util.pwstrToFfi(servername), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetAccessEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  BasePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  Recursive: number /* u32 */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resume_handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAccessEnum(util.pwstrToFfi(servername), util.pwstrToFfi(BasePath), Recursive, level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resume_handle));
}

export function NetAccessGetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  resource: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAccessGetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(resource), level, util.toPointer(bufptr));
}

export function NetAccessSetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  resource: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAccessSetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(resource), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetAccessDel(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  resource: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAccessDel(util.pwstrToFfi(servername), util.pwstrToFfi(resource));
}

export function NetAccessGetUserPerms(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  UGname: string | null /* Windows.Win32.Foundation.PWSTR */,
  resource: string | null /* Windows.Win32.Foundation.PWSTR */,
  Perms: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAccessGetUserPerms(util.pwstrToFfi(servername), util.pwstrToFfi(UGname), util.pwstrToFfi(resource), util.toPointer(Perms));
}

export function NetValidatePasswordPolicy(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Qualifier: Deno.PointerValue | Uint8Array | null /* ptr */,
  ValidationType: NET_VALIDATE_PASSWORD_TYPE /* Windows.Win32.NetworkManagement.NetManagement.NET_VALIDATE_PASSWORD_TYPE */,
  InputArg: Deno.PointerValue | Uint8Array | null /* ptr */,
  OutputArg: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetValidatePasswordPolicy(util.pwstrToFfi(ServerName), util.toPointer(Qualifier), ValidationType, util.toPointer(InputArg), util.toPointer(OutputArg));
}

export function NetValidatePasswordPolicyFree(
  OutputArg: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetValidatePasswordPolicyFree(util.toPointer(OutputArg));
}

export function NetGetDCName(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  DomainName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGetDCName(util.pwstrToFfi(ServerName), util.pwstrToFfi(DomainName), util.toPointer(Buffer));
}

export function NetGetAnyDCName(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  DomainName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGetAnyDCName(util.pwstrToFfi(ServerName), util.pwstrToFfi(DomainName), util.toPointer(Buffer));
}

export function I_NetLogonControl2(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  FunctionCode: number /* u32 */,
  QueryLevel: number /* u32 */,
  Data: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.I_NetLogonControl2(util.pwstrToFfi(ServerName), FunctionCode, QueryLevel, util.toPointer(Data), util.toPointer(Buffer));
}

export function NetAddServiceAccount(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  AccountName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Password: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libNETAPI32_dll.NetAddServiceAccount(util.pwstrToFfi(ServerName), util.pwstrToFfi(AccountName), util.pwstrToFfi(Password), Flags));
}

export function NetRemoveServiceAccount(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  AccountName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libNETAPI32_dll.NetRemoveServiceAccount(util.pwstrToFfi(ServerName), util.pwstrToFfi(AccountName), Flags));
}

export function NetEnumerateServiceAccounts(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  AccountsCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  Accounts: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libNETAPI32_dll.NetEnumerateServiceAccounts(util.pwstrToFfi(ServerName), Flags, util.toPointer(AccountsCount), util.toPointer(Accounts)));
}

export function NetIsServiceAccount(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  AccountName: string | null /* Windows.Win32.Foundation.PWSTR */,
  IsService: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libNETAPI32_dll.NetIsServiceAccount(util.pwstrToFfi(ServerName), util.pwstrToFfi(AccountName), util.toPointer(IsService)));
}

export function NetQueryServiceAccount(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  AccountName: string | null /* Windows.Win32.Foundation.PWSTR */,
  InfoLevel: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libNETAPI32_dll.NetQueryServiceAccount(util.pwstrToFfi(ServerName), util.pwstrToFfi(AccountName), InfoLevel, util.toPointer(Buffer)));
}

export function NetAlertRaise(
  AlertType: string | null /* Windows.Win32.Foundation.PWSTR */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAlertRaise(util.pwstrToFfi(AlertType), util.toPointer(Buffer), BufferSize);
}

export function NetAlertRaiseEx(
  AlertType: string | null /* Windows.Win32.Foundation.PWSTR */,
  VariableInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  VariableInfoSize: number /* u32 */,
  ServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAlertRaiseEx(util.pwstrToFfi(AlertType), util.toPointer(VariableInfo), VariableInfoSize, util.pwstrToFfi(ServiceName));
}

export function NetMessageNameAdd(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  msgname: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetMessageNameAdd(util.pwstrToFfi(servername), util.pwstrToFfi(msgname));
}

export function NetMessageNameEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resume_handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetMessageNameEnum(util.pwstrToFfi(servername), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resume_handle));
}

export function NetMessageNameGetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  msgname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetMessageNameGetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(msgname), level, util.toPointer(bufptr));
}

export function NetMessageNameDel(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  msgname: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetMessageNameDel(util.pwstrToFfi(servername), util.pwstrToFfi(msgname));
}

export function NetMessageBufferSend(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  msgname: string | null /* Windows.Win32.Foundation.PWSTR */,
  fromname: string | null /* Windows.Win32.Foundation.PWSTR */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  buflen: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetMessageBufferSend(util.pwstrToFfi(servername), util.pwstrToFfi(msgname), util.pwstrToFfi(fromname), util.toPointer(buf), buflen);
}

export function NetRemoteTOD(
  UncServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  BufferPtr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetRemoteTOD(util.pwstrToFfi(UncServerName), util.toPointer(BufferPtr));
}

export function NetRemoteComputerSupports(
  UncServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  OptionsWanted: NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS /* Windows.Win32.NetworkManagement.NetManagement.NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS */,
  OptionsSupported: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetRemoteComputerSupports(util.pwstrToFfi(UncServerName), OptionsWanted, util.toPointer(OptionsSupported));
}

export function NetReplGetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplGetInfo(util.pwstrToFfi(servername), level, util.toPointer(bufptr));
}

export function NetReplSetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplSetInfo(util.pwstrToFfi(servername), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetReplExportDirAdd(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplExportDirAdd(util.pwstrToFfi(servername), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetReplExportDirDel(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  dirname: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplExportDirDel(util.pwstrToFfi(servername), util.pwstrToFfi(dirname));
}

export function NetReplExportDirEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resumehandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplExportDirEnum(util.pwstrToFfi(servername), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resumehandle));
}

export function NetReplExportDirGetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  dirname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplExportDirGetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(dirname), level, util.toPointer(bufptr));
}

export function NetReplExportDirSetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  dirname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplExportDirSetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(dirname), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetReplExportDirLock(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  dirname: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplExportDirLock(util.pwstrToFfi(servername), util.pwstrToFfi(dirname));
}

export function NetReplExportDirUnlock(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  dirname: string | null /* Windows.Win32.Foundation.PWSTR */,
  unlockforce: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplExportDirUnlock(util.pwstrToFfi(servername), util.pwstrToFfi(dirname), unlockforce);
}

export function NetReplImportDirAdd(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplImportDirAdd(util.pwstrToFfi(servername), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetReplImportDirDel(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  dirname: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplImportDirDel(util.pwstrToFfi(servername), util.pwstrToFfi(dirname));
}

export function NetReplImportDirEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resumehandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplImportDirEnum(util.pwstrToFfi(servername), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resumehandle));
}

export function NetReplImportDirGetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  dirname: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplImportDirGetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(dirname), level, util.toPointer(bufptr));
}

export function NetReplImportDirLock(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  dirname: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplImportDirLock(util.pwstrToFfi(servername), util.pwstrToFfi(dirname));
}

export function NetReplImportDirUnlock(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  dirname: string | null /* Windows.Win32.Foundation.PWSTR */,
  unlockforce: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetReplImportDirUnlock(util.pwstrToFfi(servername), util.pwstrToFfi(dirname), unlockforce);
}

export function NetServerEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  servertype: NET_SERVER_TYPE /* Windows.Win32.NetworkManagement.NetManagement.NET_SERVER_TYPE */,
  domain: string | null /* Windows.Win32.Foundation.PWSTR */,
  resume_handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServerEnum(util.pwstrToFfi(servername), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), servertype, util.pwstrToFfi(domain), util.toPointer(resume_handle));
}

export function NetServerGetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServerGetInfo(util.pwstrToFfi(servername), level, util.toPointer(bufptr));
}

export function NetServerSetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  ParmError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServerSetInfo(util.pwstrToFfi(servername), level, util.toPointer(buf), util.toPointer(ParmError));
}

export function NetServerDiskEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resume_handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServerDiskEnum(util.pwstrToFfi(servername), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resume_handle));
}

export function NetServerComputerNameAdd(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  EmulatedDomainName: string | null /* Windows.Win32.Foundation.PWSTR */,
  EmulatedServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServerComputerNameAdd(util.pwstrToFfi(ServerName), util.pwstrToFfi(EmulatedDomainName), util.pwstrToFfi(EmulatedServerName));
}

export function NetServerComputerNameDel(
  ServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  EmulatedServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServerComputerNameDel(util.pwstrToFfi(ServerName), util.pwstrToFfi(EmulatedServerName));
}

export function NetServerTransportAdd(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServerTransportAdd(util.pwstrToFfi(servername), level, util.toPointer(bufptr));
}

export function NetServerTransportAddEx(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServerTransportAddEx(util.pwstrToFfi(servername), level, util.toPointer(bufptr));
}

export function NetServerTransportDel(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServerTransportDel(util.pwstrToFfi(servername), level, util.toPointer(bufptr));
}

export function NetServerTransportEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resume_handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServerTransportEnum(util.pwstrToFfi(servername), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resume_handle));
}

export function NetServiceControl(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  service: string | null /* Windows.Win32.Foundation.PWSTR */,
  opcode: number /* u32 */,
  arg: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServiceControl(util.pwstrToFfi(servername), util.pwstrToFfi(service), opcode, arg, util.toPointer(bufptr));
}

export function NetServiceEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resume_handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServiceEnum(util.pwstrToFfi(servername), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resume_handle));
}

export function NetServiceGetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  service: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServiceGetInfo(util.pwstrToFfi(servername), util.pwstrToFfi(service), level, util.toPointer(bufptr));
}

export function NetServiceInstall(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  service: string | null /* Windows.Win32.Foundation.PWSTR */,
  argc: number /* u32 */,
  argv: Deno.PointerValue | Uint8Array | null /* ptr */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetServiceInstall(util.pwstrToFfi(servername), util.pwstrToFfi(service), argc, util.toPointer(argv), util.toPointer(bufptr));
}

export function NetUseAdd(
  servername: Deno.PointerValue | Uint8Array | null /* ptr */,
  LevelFlags: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUseAdd(util.toPointer(servername), LevelFlags, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetUseDel(
  UncServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  UseName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ForceLevelFlags: FORCE_LEVEL_FLAGS /* Windows.Win32.NetworkManagement.NetManagement.FORCE_LEVEL_FLAGS */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUseDel(util.pwstrToFfi(UncServerName), util.pwstrToFfi(UseName), ForceLevelFlags);
}

export function NetUseEnum(
  UncServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  LevelFlags: number /* u32 */,
  BufPtr: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreferedMaximumSize: number /* u32 */,
  EntriesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  TotalEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUseEnum(util.pwstrToFfi(UncServerName), LevelFlags, util.toPointer(BufPtr), PreferedMaximumSize, util.toPointer(EntriesRead), util.toPointer(TotalEntries), util.toPointer(ResumeHandle));
}

export function NetUseGetInfo(
  UncServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  UseName: string | null /* Windows.Win32.Foundation.PWSTR */,
  LevelFlags: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUseGetInfo(util.pwstrToFfi(UncServerName), util.pwstrToFfi(UseName), LevelFlags, util.toPointer(bufptr));
}

export function NetWkstaGetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetWkstaGetInfo(util.pwstrToFfi(servername), level, util.toPointer(bufptr));
}

export function NetWkstaSetInfo(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetWkstaSetInfo(util.pwstrToFfi(servername), level, util.toPointer(buffer), util.toPointer(parm_err));
}

export function NetWkstaUserGetInfo(
  reserved: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetWkstaUserGetInfo(util.pwstrToFfi(reserved), level, util.toPointer(bufptr));
}

export function NetWkstaUserSetInfo(
  reserved: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetWkstaUserSetInfo(util.pwstrToFfi(reserved), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetWkstaUserEnum(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resumehandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetWkstaUserEnum(util.pwstrToFfi(servername), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resumehandle));
}

export function NetWkstaTransportAdd(
  servername: Deno.PointerValue | Uint8Array | null /* ptr */,
  level: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  parm_err: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetWkstaTransportAdd(util.toPointer(servername), level, util.toPointer(buf), util.toPointer(parm_err));
}

export function NetWkstaTransportDel(
  servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  transportname: string | null /* Windows.Win32.Foundation.PWSTR */,
  ucond: FORCE_LEVEL_FLAGS /* Windows.Win32.NetworkManagement.NetManagement.FORCE_LEVEL_FLAGS */,
): number /* u32 */ {
  return libNETAPI32_dll.NetWkstaTransportDel(util.pwstrToFfi(servername), util.pwstrToFfi(transportname), ucond);
}

export function NetWkstaTransportEnum(
  servername: Deno.PointerValue | Uint8Array | null /* ptr */,
  level: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  entriesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalentries: Deno.PointerValue | Uint8Array | null /* ptr */,
  resume_handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetWkstaTransportEnum(util.toPointer(servername), level, util.toPointer(bufptr), prefmaxlen, util.toPointer(entriesread), util.toPointer(totalentries), util.toPointer(resume_handle));
}

export function NetApiBufferAllocate(
  ByteCount: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetApiBufferAllocate(ByteCount, util.toPointer(Buffer));
}

export function NetApiBufferFree(
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetApiBufferFree(util.toPointer(Buffer));
}

export function NetApiBufferReallocate(
  OldBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  NewByteCount: number /* u32 */,
  NewBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetApiBufferReallocate(util.toPointer(OldBuffer), NewByteCount, util.toPointer(NewBuffer));
}

export function NetApiBufferSize(
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ByteCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetApiBufferSize(util.toPointer(Buffer), util.toPointer(ByteCount));
}

export function NetErrorLogClear(
  UncServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  BackupFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetErrorLogClear(util.pwstrToFfi(UncServerName), util.pwstrToFfi(BackupFile), util.toPointer(Reserved));
}

export function NetErrorLogRead(
  UncServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved1: string | null /* Windows.Win32.Foundation.PWSTR */,
  ErrorLogHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Offset: number /* u32 */,
  Reserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved3: number /* u32 */,
  OffsetFlag: number /* u32 */,
  BufPtr: Deno.PointerValue | Uint8Array | null /* ptr */,
  PrefMaxSize: number /* u32 */,
  BytesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  TotalAvailable: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetErrorLogRead(util.pwstrToFfi(UncServerName), util.pwstrToFfi(Reserved1), util.toPointer(ErrorLogHandle), Offset, util.toPointer(Reserved2), Reserved3, OffsetFlag, util.toPointer(BufPtr), PrefMaxSize, util.toPointer(BytesRead), util.toPointer(TotalAvailable));
}

export function NetErrorLogWrite(
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Code: number /* u32 */,
  Component: string | null /* Windows.Win32.Foundation.PWSTR */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  NumBytes: number /* u32 */,
  MsgBuf: Deno.PointerValue | Uint8Array | null /* ptr */,
  StrCount: number /* u32 */,
  Reserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetErrorLogWrite(util.toPointer(Reserved1), Code, util.pwstrToFfi(Component), util.toPointer(Buffer), NumBytes, util.toPointer(MsgBuf), StrCount, util.toPointer(Reserved2));
}

export function NetConfigGet(
  server: string | null /* Windows.Win32.Foundation.PWSTR */,
  component: string | null /* Windows.Win32.Foundation.PWSTR */,
  parameter: string | null /* Windows.Win32.Foundation.PWSTR */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetConfigGet(util.pwstrToFfi(server), util.pwstrToFfi(component), util.pwstrToFfi(parameter), util.toPointer(bufptr));
}

export function NetConfigGetAll(
  server: string | null /* Windows.Win32.Foundation.PWSTR */,
  component: string | null /* Windows.Win32.Foundation.PWSTR */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetConfigGetAll(util.pwstrToFfi(server), util.pwstrToFfi(component), util.toPointer(bufptr));
}

export function NetConfigSet(
  server: string | null /* Windows.Win32.Foundation.PWSTR */,
  reserved1: string | null /* Windows.Win32.Foundation.PWSTR */,
  component: string | null /* Windows.Win32.Foundation.PWSTR */,
  level: number /* u32 */,
  reserved2: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  reserved3: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetConfigSet(util.pwstrToFfi(server), util.pwstrToFfi(reserved1), util.pwstrToFfi(component), level, reserved2, util.toPointer(buf), reserved3);
}

export function NetAuditClear(
  server: string | null /* Windows.Win32.Foundation.PWSTR */,
  backupfile: string | null /* Windows.Win32.Foundation.PWSTR */,
  service: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAuditClear(util.pwstrToFfi(server), util.pwstrToFfi(backupfile), util.pwstrToFfi(service));
}

export function NetAuditRead(
  server: string | null /* Windows.Win32.Foundation.PWSTR */,
  service: string | null /* Windows.Win32.Foundation.PWSTR */,
  auditloghandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  offset: number /* u32 */,
  reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  reserved2: number /* u32 */,
  offsetflag: number /* u32 */,
  bufptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefmaxlen: number /* u32 */,
  bytesread: Deno.PointerValue | Uint8Array | null /* ptr */,
  totalavailable: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAuditRead(util.pwstrToFfi(server), util.pwstrToFfi(service), util.toPointer(auditloghandle), offset, util.toPointer(reserved1), reserved2, offsetflag, util.toPointer(bufptr), prefmaxlen, util.toPointer(bytesread), util.toPointer(totalavailable));
}

export function NetAuditWrite(
  type: number /* u32 */,
  buf: Deno.PointerValue | Uint8Array | null /* ptr */,
  numbytes: number /* u32 */,
  service: string | null /* Windows.Win32.Foundation.PWSTR */,
  reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAuditWrite(type, util.toPointer(buf), numbytes, util.pwstrToFfi(service), util.toPointer(reserved));
}

export function NetJoinDomain(
  lpServer: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDomain: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpMachineAccountOU: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpAccount: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  fJoinOptions: NET_JOIN_DOMAIN_JOIN_OPTIONS /* Windows.Win32.NetworkManagement.NetManagement.NET_JOIN_DOMAIN_JOIN_OPTIONS */,
): number /* u32 */ {
  return libNETAPI32_dll.NetJoinDomain(util.pwstrToFfi(lpServer), util.pwstrToFfi(lpDomain), util.pwstrToFfi(lpMachineAccountOU), util.pwstrToFfi(lpAccount), util.pwstrToFfi(lpPassword), fJoinOptions);
}

export function NetUnjoinDomain(
  lpServer: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpAccount: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  fUnjoinOptions: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetUnjoinDomain(util.pwstrToFfi(lpServer), util.pwstrToFfi(lpAccount), util.pwstrToFfi(lpPassword), fUnjoinOptions);
}

export function NetRenameMachineInDomain(
  lpServer: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpNewMachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpAccount: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  fRenameOptions: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetRenameMachineInDomain(util.pwstrToFfi(lpServer), util.pwstrToFfi(lpNewMachineName), util.pwstrToFfi(lpAccount), util.pwstrToFfi(lpPassword), fRenameOptions);
}

export function NetValidateName(
  lpServer: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpAccount: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  NameType: NETSETUP_NAME_TYPE /* Windows.Win32.NetworkManagement.NetManagement.NETSETUP_NAME_TYPE */,
): number /* u32 */ {
  return libNETAPI32_dll.NetValidateName(util.pwstrToFfi(lpServer), util.pwstrToFfi(lpName), util.pwstrToFfi(lpAccount), util.pwstrToFfi(lpPassword), NameType);
}

export function NetGetJoinableOUs(
  lpServer: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDomain: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpAccount: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  OUCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  OUs: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGetJoinableOUs(util.pwstrToFfi(lpServer), util.pwstrToFfi(lpDomain), util.pwstrToFfi(lpAccount), util.pwstrToFfi(lpPassword), util.toPointer(OUCount), util.toPointer(OUs));
}

export function NetAddAlternateComputerName(
  Server: string | null /* Windows.Win32.Foundation.PWSTR */,
  AlternateName: string | null /* Windows.Win32.Foundation.PWSTR */,
  DomainAccount: string | null /* Windows.Win32.Foundation.PWSTR */,
  DomainAccountPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetAddAlternateComputerName(util.pwstrToFfi(Server), util.pwstrToFfi(AlternateName), util.pwstrToFfi(DomainAccount), util.pwstrToFfi(DomainAccountPassword), Reserved);
}

export function NetRemoveAlternateComputerName(
  Server: string | null /* Windows.Win32.Foundation.PWSTR */,
  AlternateName: string | null /* Windows.Win32.Foundation.PWSTR */,
  DomainAccount: string | null /* Windows.Win32.Foundation.PWSTR */,
  DomainAccountPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetRemoveAlternateComputerName(util.pwstrToFfi(Server), util.pwstrToFfi(AlternateName), util.pwstrToFfi(DomainAccount), util.pwstrToFfi(DomainAccountPassword), Reserved);
}

export function NetSetPrimaryComputerName(
  Server: string | null /* Windows.Win32.Foundation.PWSTR */,
  PrimaryName: string | null /* Windows.Win32.Foundation.PWSTR */,
  DomainAccount: string | null /* Windows.Win32.Foundation.PWSTR */,
  DomainAccountPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetSetPrimaryComputerName(util.pwstrToFfi(Server), util.pwstrToFfi(PrimaryName), util.pwstrToFfi(DomainAccount), util.pwstrToFfi(DomainAccountPassword), Reserved);
}

export function NetEnumerateComputerNames(
  Server: string | null /* Windows.Win32.Foundation.PWSTR */,
  NameType: NET_COMPUTER_NAME_TYPE /* Windows.Win32.NetworkManagement.NetManagement.NET_COMPUTER_NAME_TYPE */,
  Reserved: number /* u32 */,
  EntryCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  ComputerNames: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetEnumerateComputerNames(util.pwstrToFfi(Server), NameType, Reserved, util.toPointer(EntryCount), util.toPointer(ComputerNames));
}

export function NetProvisionComputerAccount(
  lpDomain: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpMachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpMachineAccountOU: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDcName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwOptions: NETSETUP_PROVISION /* Windows.Win32.NetworkManagement.NetManagement.NETSETUP_PROVISION */,
  pProvisionBinData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwProvisionBinDataSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pProvisionTextData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetProvisionComputerAccount(util.pwstrToFfi(lpDomain), util.pwstrToFfi(lpMachineName), util.pwstrToFfi(lpMachineAccountOU), util.pwstrToFfi(lpDcName), dwOptions, util.toPointer(pProvisionBinData), util.toPointer(pdwProvisionBinDataSize), util.toPointer(pProvisionTextData));
}

export function NetRequestOfflineDomainJoin(
  pProvisionBinData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbProvisionBinDataSize: number /* u32 */,
  dwOptions: NET_REQUEST_PROVISION_OPTIONS /* Windows.Win32.NetworkManagement.NetManagement.NET_REQUEST_PROVISION_OPTIONS */,
  lpWindowsPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.NetRequestOfflineDomainJoin(util.toPointer(pProvisionBinData), cbProvisionBinDataSize, dwOptions, util.pwstrToFfi(lpWindowsPath));
}

export function NetCreateProvisioningPackage(
  pProvisioningParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppPackageBinData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwPackageBinDataSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppPackageTextData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetCreateProvisioningPackage(util.toPointer(pProvisioningParams), util.toPointer(ppPackageBinData), util.toPointer(pdwPackageBinDataSize), util.toPointer(ppPackageTextData));
}

export function NetRequestProvisioningPackageInstall(
  pPackageBinData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwPackageBinDataSize: number /* u32 */,
  dwProvisionOptions: NET_REQUEST_PROVISION_OPTIONS /* Windows.Win32.NetworkManagement.NetManagement.NET_REQUEST_PROVISION_OPTIONS */,
  lpWindowsPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetRequestProvisioningPackageInstall(util.toPointer(pPackageBinData), dwPackageBinDataSize, dwProvisionOptions, util.pwstrToFfi(lpWindowsPath), util.toPointer(pvReserved));
}

export function NetGetAadJoinInformation(
  pcszTenantId: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppJoinInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNETAPI32_dll.NetGetAadJoinInformation(util.pwstrToFfi(pcszTenantId), util.toPointer(ppJoinInfo)));
}

export function NetFreeAadJoinInformation(
  pJoinInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libNETAPI32_dll.NetFreeAadJoinInformation(util.toPointer(pJoinInfo));
}

export function NetGetJoinInformation(
  lpServer: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpNameBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetGetJoinInformation(util.pwstrToFfi(lpServer), util.toPointer(lpNameBuffer), util.toPointer(BufferType));
}

export function GetNetScheduleAccountInformation(
  pwszServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ccAccount: number /* u32 */,
  wszAccount: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmstask_dll.GetNetScheduleAccountInformation(util.pwstrToFfi(pwszServerName), ccAccount, util.pwstrToFfi(wszAccount)));
}

export function SetNetScheduleAccountInformation(
  pwszServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwszAccount: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwszPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmstask_dll.SetNetScheduleAccountInformation(util.pwstrToFfi(pwszServerName), util.pwstrToFfi(pwszAccount), util.pwstrToFfi(pwszPassword)));
}

export function NetScheduleJobAdd(
  Servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  JobId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetScheduleJobAdd(util.pwstrToFfi(Servername), util.toPointer(Buffer), util.toPointer(JobId));
}

export function NetScheduleJobDel(
  Servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  MinJobId: number /* u32 */,
  MaxJobId: number /* u32 */,
): number /* u32 */ {
  return libNETAPI32_dll.NetScheduleJobDel(util.pwstrToFfi(Servername), MinJobId, MaxJobId);
}

export function NetScheduleJobEnum(
  Servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  PointerToBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PrefferedMaximumLength: number /* u32 */,
  EntriesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  TotalEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResumeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetScheduleJobEnum(util.pwstrToFfi(Servername), util.toPointer(PointerToBuffer), PrefferedMaximumLength, util.toPointer(EntriesRead), util.toPointer(TotalEntries), util.toPointer(ResumeHandle));
}

export function NetScheduleJobGetInfo(
  Servername: string | null /* Windows.Win32.Foundation.PWSTR */,
  JobId: number /* u32 */,
  PointerToBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.NetScheduleJobGetInfo(util.pwstrToFfi(Servername), JobId, util.toPointer(PointerToBuffer));
}

export function TraceRegisterExA(
  lpszCallerName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return librtutils_dll.TraceRegisterExA(util.pstrToFfi(lpszCallerName), dwFlags);
}

export function TraceDeregisterA(
  dwTraceID: number /* u32 */,
): number /* u32 */ {
  return librtutils_dll.TraceDeregisterA(dwTraceID);
}

export function TraceDeregisterExA(
  dwTraceID: number /* u32 */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return librtutils_dll.TraceDeregisterExA(dwTraceID, dwFlags);
}

export function TraceGetConsoleA(
  dwTraceID: number /* u32 */,
  lphConsole: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtutils_dll.TraceGetConsoleA(dwTraceID, util.toPointer(lphConsole));
}

export function TracePrintfA(
  dwTraceID: number /* u32 */,
  lpszFormat: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return librtutils_dll.TracePrintfA(dwTraceID, util.pstrToFfi(lpszFormat));
}

export function TracePrintfExA(
  dwTraceID: number /* u32 */,
  dwFlags: number /* u32 */,
  lpszFormat: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return librtutils_dll.TracePrintfExA(dwTraceID, dwFlags, util.pstrToFfi(lpszFormat));
}

export function TraceVprintfExA(
  dwTraceID: number /* u32 */,
  dwFlags: number /* u32 */,
  lpszFormat: string | null /* Windows.Win32.Foundation.PSTR */,
  arglist: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtutils_dll.TraceVprintfExA(dwTraceID, dwFlags, util.pstrToFfi(lpszFormat), util.toPointer(arglist));
}

export function TracePutsExA(
  dwTraceID: number /* u32 */,
  dwFlags: number /* u32 */,
  lpszString: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return librtutils_dll.TracePutsExA(dwTraceID, dwFlags, util.pstrToFfi(lpszString));
}

export function TraceDumpExA(
  dwTraceID: number /* u32 */,
  dwFlags: number /* u32 */,
  lpbBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwByteCount: number /* u32 */,
  dwGroupSize: number /* u32 */,
  bAddressPrefix: boolean /* Windows.Win32.Foundation.BOOL */,
  lpszPrefix: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return librtutils_dll.TraceDumpExA(dwTraceID, dwFlags, util.toPointer(lpbBytes), dwByteCount, dwGroupSize, util.boolToFfi(bAddressPrefix), util.pstrToFfi(lpszPrefix));
}

export function TraceRegisterExW(
  lpszCallerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return librtutils_dll.TraceRegisterExW(util.pwstrToFfi(lpszCallerName), dwFlags);
}

export function TraceDeregisterW(
  dwTraceID: number /* u32 */,
): number /* u32 */ {
  return librtutils_dll.TraceDeregisterW(dwTraceID);
}

export function TraceDeregisterExW(
  dwTraceID: number /* u32 */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return librtutils_dll.TraceDeregisterExW(dwTraceID, dwFlags);
}

export function TraceGetConsoleW(
  dwTraceID: number /* u32 */,
  lphConsole: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtutils_dll.TraceGetConsoleW(dwTraceID, util.toPointer(lphConsole));
}

export function TracePrintfW(
  dwTraceID: number /* u32 */,
  lpszFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return librtutils_dll.TracePrintfW(dwTraceID, util.pwstrToFfi(lpszFormat));
}

export function TracePrintfExW(
  dwTraceID: number /* u32 */,
  dwFlags: number /* u32 */,
  lpszFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return librtutils_dll.TracePrintfExW(dwTraceID, dwFlags, util.pwstrToFfi(lpszFormat));
}

export function TraceVprintfExW(
  dwTraceID: number /* u32 */,
  dwFlags: number /* u32 */,
  lpszFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
  arglist: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtutils_dll.TraceVprintfExW(dwTraceID, dwFlags, util.pwstrToFfi(lpszFormat), util.toPointer(arglist));
}

export function TracePutsExW(
  dwTraceID: number /* u32 */,
  dwFlags: number /* u32 */,
  lpszString: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return librtutils_dll.TracePutsExW(dwTraceID, dwFlags, util.pwstrToFfi(lpszString));
}

export function TraceDumpExW(
  dwTraceID: number /* u32 */,
  dwFlags: number /* u32 */,
  lpbBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwByteCount: number /* u32 */,
  dwGroupSize: number /* u32 */,
  bAddressPrefix: boolean /* Windows.Win32.Foundation.BOOL */,
  lpszPrefix: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return librtutils_dll.TraceDumpExW(dwTraceID, dwFlags, util.toPointer(lpbBytes), dwByteCount, dwGroupSize, util.boolToFfi(bAddressPrefix), util.pwstrToFfi(lpszPrefix));
}

export function LogErrorA(
  dwMessageId: number /* u32 */,
  cNumberOfSubStrings: number /* u32 */,
  plpwsSubStrings: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwErrorCode: number /* u32 */,
): void /* void */ {
  return librtutils_dll.LogErrorA(dwMessageId, cNumberOfSubStrings, util.toPointer(plpwsSubStrings), dwErrorCode);
}

export function LogEventA(
  wEventType: number /* u32 */,
  dwMessageId: number /* u32 */,
  cNumberOfSubStrings: number /* u32 */,
  plpwsSubStrings: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return librtutils_dll.LogEventA(wEventType, dwMessageId, cNumberOfSubStrings, util.toPointer(plpwsSubStrings));
}

export function LogErrorW(
  dwMessageId: number /* u32 */,
  cNumberOfSubStrings: number /* u32 */,
  plpwsSubStrings: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwErrorCode: number /* u32 */,
): void /* void */ {
  return librtutils_dll.LogErrorW(dwMessageId, cNumberOfSubStrings, util.toPointer(plpwsSubStrings), dwErrorCode);
}

export function LogEventW(
  wEventType: number /* u32 */,
  dwMessageId: number /* u32 */,
  cNumberOfSubStrings: number /* u32 */,
  plpwsSubStrings: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return librtutils_dll.LogEventW(wEventType, dwMessageId, cNumberOfSubStrings, util.toPointer(plpwsSubStrings));
}

export function RouterLogRegisterA(
  lpszSource: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(librtutils_dll.RouterLogRegisterA(util.pstrToFfi(lpszSource)));
}

export function RouterLogDeregisterA(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return librtutils_dll.RouterLogDeregisterA(util.toPointer(hLogHandle));
}

export function RouterLogEventA(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEventType: number /* u32 */,
  dwMessageId: number /* u32 */,
  dwSubStringCount: number /* u32 */,
  plpszSubStringArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwErrorCode: number /* u32 */,
): void /* void */ {
  return librtutils_dll.RouterLogEventA(util.toPointer(hLogHandle), dwEventType, dwMessageId, dwSubStringCount, util.toPointer(plpszSubStringArray), dwErrorCode);
}

export function RouterLogEventDataA(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEventType: number /* u32 */,
  dwMessageId: number /* u32 */,
  dwSubStringCount: number /* u32 */,
  plpszSubStringArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDataBytes: number /* u32 */,
  lpDataBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return librtutils_dll.RouterLogEventDataA(util.toPointer(hLogHandle), dwEventType, dwMessageId, dwSubStringCount, util.toPointer(plpszSubStringArray), dwDataBytes, util.toPointer(lpDataBytes));
}

export function RouterLogEventStringA(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEventType: number /* u32 */,
  dwMessageId: number /* u32 */,
  dwSubStringCount: number /* u32 */,
  plpszSubStringArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwErrorCode: number /* u32 */,
  dwErrorIndex: number /* u32 */,
): void /* void */ {
  return librtutils_dll.RouterLogEventStringA(util.toPointer(hLogHandle), dwEventType, dwMessageId, dwSubStringCount, util.toPointer(plpszSubStringArray), dwErrorCode, dwErrorIndex);
}

export function RouterLogEventExA(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEventType: number /* u32 */,
  dwErrorCode: number /* u32 */,
  dwMessageId: number /* u32 */,
  ptszFormat: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return librtutils_dll.RouterLogEventExA(util.toPointer(hLogHandle), dwEventType, dwErrorCode, dwMessageId, util.pstrToFfi(ptszFormat));
}

export function RouterLogEventValistExA(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEventType: number /* u32 */,
  dwErrorCode: number /* u32 */,
  dwMessageId: number /* u32 */,
  ptszFormat: string | null /* Windows.Win32.Foundation.PSTR */,
  arglist: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return librtutils_dll.RouterLogEventValistExA(util.toPointer(hLogHandle), dwEventType, dwErrorCode, dwMessageId, util.pstrToFfi(ptszFormat), util.toPointer(arglist));
}

export function RouterGetErrorStringA(
  dwErrorCode: number /* u32 */,
  lplpszErrorString: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtutils_dll.RouterGetErrorStringA(dwErrorCode, util.toPointer(lplpszErrorString));
}

export function RouterLogRegisterW(
  lpszSource: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(librtutils_dll.RouterLogRegisterW(util.pwstrToFfi(lpszSource)));
}

export function RouterLogDeregisterW(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return librtutils_dll.RouterLogDeregisterW(util.toPointer(hLogHandle));
}

export function RouterLogEventW(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEventType: number /* u32 */,
  dwMessageId: number /* u32 */,
  dwSubStringCount: number /* u32 */,
  plpszSubStringArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwErrorCode: number /* u32 */,
): void /* void */ {
  return librtutils_dll.RouterLogEventW(util.toPointer(hLogHandle), dwEventType, dwMessageId, dwSubStringCount, util.toPointer(plpszSubStringArray), dwErrorCode);
}

export function RouterLogEventDataW(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEventType: number /* u32 */,
  dwMessageId: number /* u32 */,
  dwSubStringCount: number /* u32 */,
  plpszSubStringArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDataBytes: number /* u32 */,
  lpDataBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return librtutils_dll.RouterLogEventDataW(util.toPointer(hLogHandle), dwEventType, dwMessageId, dwSubStringCount, util.toPointer(plpszSubStringArray), dwDataBytes, util.toPointer(lpDataBytes));
}

export function RouterLogEventStringW(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEventType: number /* u32 */,
  dwMessageId: number /* u32 */,
  dwSubStringCount: number /* u32 */,
  plpszSubStringArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwErrorCode: number /* u32 */,
  dwErrorIndex: number /* u32 */,
): void /* void */ {
  return librtutils_dll.RouterLogEventStringW(util.toPointer(hLogHandle), dwEventType, dwMessageId, dwSubStringCount, util.toPointer(plpszSubStringArray), dwErrorCode, dwErrorIndex);
}

export function RouterLogEventExW(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEventType: number /* u32 */,
  dwErrorCode: number /* u32 */,
  dwMessageId: number /* u32 */,
  ptszFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return librtutils_dll.RouterLogEventExW(util.toPointer(hLogHandle), dwEventType, dwErrorCode, dwMessageId, util.pwstrToFfi(ptszFormat));
}

export function RouterLogEventValistExW(
  hLogHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEventType: number /* u32 */,
  dwErrorCode: number /* u32 */,
  dwMessageId: number /* u32 */,
  ptszFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
  arglist: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return librtutils_dll.RouterLogEventValistExW(util.toPointer(hLogHandle), dwEventType, dwErrorCode, dwMessageId, util.pwstrToFfi(ptszFormat), util.toPointer(arglist));
}

export function RouterGetErrorStringW(
  dwErrorCode: number /* u32 */,
  lplpwszErrorString: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtutils_dll.RouterGetErrorStringW(dwErrorCode, util.toPointer(lplpwszErrorString));
}

export function RouterAssert(
  pszFailedAssertion: string | null /* Windows.Win32.Foundation.PSTR */,
  pszFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwLineNumber: number /* u32 */,
  pszMessage: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return librtutils_dll.RouterAssert(util.pstrToFfi(pszFailedAssertion), util.pstrToFfi(pszFileName), dwLineNumber, util.pstrToFfi(pszMessage));
}

export function MprSetupProtocolEnum(
  dwTransportId: number /* u32 */,
  lplpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwEntriesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtutils_dll.MprSetupProtocolEnum(dwTransportId, util.toPointer(lplpBuffer), util.toPointer(lpdwEntriesRead));
}

export function MprSetupProtocolFree(
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return librtutils_dll.MprSetupProtocolFree(util.toPointer(lpBuffer));
}

