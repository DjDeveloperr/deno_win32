/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.NetBios.Apis

import * as util from "../../util.ts";

// Constants
export const NCBNAMSZ = 16;
export const MAX_LANA = 254;
export const NAME_FLAGS_MASK = 135;
export const GROUP_NAME = 128;
export const UNIQUE_NAME = 0;
export const REGISTERING = 0;
export const REGISTERED = 4;
export const DEREGISTERED = 5;
export const DUPLICATE = 6;
export const DUPLICATE_DEREG = 7;
export const LISTEN_OUTSTANDING = 1;
export const CALL_PENDING = 2;
export const SESSION_ESTABLISHED = 3;
export const HANGUP_PENDING = 4;
export const HANGUP_COMPLETE = 5;
export const SESSION_ABORTED = 6;
export const ALL_TRANSPORTS = `M\0\0\0`;
export const MS_NBF = `MNBF`;
export const NCBCALL = 16;
export const NCBLISTEN = 17;
export const NCBHANGUP = 18;
export const NCBSEND = 20;
export const NCBRECV = 21;
export const NCBRECVANY = 22;
export const NCBCHAINSEND = 23;
export const NCBDGSEND = 32;
export const NCBDGRECV = 33;
export const NCBDGSENDBC = 34;
export const NCBDGRECVBC = 35;
export const NCBADDNAME = 48;
export const NCBDELNAME = 49;
export const NCBRESET = 50;
export const NCBASTAT = 51;
export const NCBSSTAT = 52;
export const NCBCANCEL = 53;
export const NCBADDGRNAME = 54;
export const NCBENUM = 55;
export const NCBUNLINK = 112;
export const NCBSENDNA = 113;
export const NCBCHAINSENDNA = 114;
export const NCBLANSTALERT = 115;
export const NCBACTION = 119;
export const NCBFINDNAME = 120;
export const NCBTRACE = 121;
export const ASYNCH = 128;
export const NRC_GOODRET = 0;
export const NRC_BUFLEN = 1;
export const NRC_ILLCMD = 3;
export const NRC_CMDTMO = 5;
export const NRC_INCOMP = 6;
export const NRC_BADDR = 7;
export const NRC_SNUMOUT = 8;
export const NRC_NORES = 9;
export const NRC_SCLOSED = 10;
export const NRC_CMDCAN = 11;
export const NRC_DUPNAME = 13;
export const NRC_NAMTFUL = 14;
export const NRC_ACTSES = 15;
export const NRC_LOCTFUL = 17;
export const NRC_REMTFUL = 18;
export const NRC_ILLNN = 19;
export const NRC_NOCALL = 20;
export const NRC_NOWILD = 21;
export const NRC_INUSE = 22;
export const NRC_NAMERR = 23;
export const NRC_SABORT = 24;
export const NRC_NAMCONF = 25;
export const NRC_IFBUSY = 33;
export const NRC_TOOMANY = 34;
export const NRC_BRIDGE = 35;
export const NRC_CANOCCR = 36;
export const NRC_CANCEL = 38;
export const NRC_DUPENV = 48;
export const NRC_ENVNOTDEF = 52;
export const NRC_OSRESNOTAV = 53;
export const NRC_MAXAPPS = 54;
export const NRC_NOSAPS = 55;
export const NRC_NORESOURCES = 56;
export const NRC_INVADDRESS = 57;
export const NRC_INVDDID = 59;
export const NRC_LOCKFAIL = 60;
export const NRC_OPENERR = 63;
export const NRC_SYSTEM = 64;
export const NRC_PENDING = 255;

// Structs

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.NetworkManagement.NetBios.NCB (size: 80)
 */
export interface NCB {
  /** u8 */
  ncb_command: number;
  /** u8 */
  ncb_retcode: number;
  /** u8 */
  ncb_lsn: number;
  /** u8 */
  ncb_num: number;
  /** ptr */
  ncb_buffer: Deno.PointerValue | Uint8Array;
  /** u16 */
  ncb_length: number;
  /** array */
  ncb_callname: Deno.PointerValue;
  /** array */
  ncb_name: Deno.PointerValue;
  /** u8 */
  ncb_rto: number;
  /** u8 */
  ncb_sto: number;
  /** isize */
  ncb_post: Deno.PointerValue;
  /** u8 */
  ncb_lana_num: number;
  /** u8 */
  ncb_cmd_cplt: number;
  /** array */
  ncb_reserve: Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  ncb_event: Uint8Array | Deno.PointerValue;
}

export const sizeofNCB = 80;

export function allocNCB(data?: Partial<NCB>): Uint8Array {
  const buf = new Uint8Array(sizeofNCB);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ncb_command !== undefined) view.setUint8(0, Number(data.ncb_command));
  // 0x01: u8
  if (data?.ncb_retcode !== undefined) view.setUint8(1, Number(data.ncb_retcode));
  // 0x02: u8
  if (data?.ncb_lsn !== undefined) view.setUint8(2, Number(data.ncb_lsn));
  // 0x03: u8
  if (data?.ncb_num !== undefined) view.setUint8(3, Number(data.ncb_num));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ncb_buffer !== undefined) view.setBigUint64(8, data.ncb_buffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ncb_buffer))), true);
  // 0x10: u16
  if (data?.ncb_length !== undefined) view.setUint16(16, Number(data.ncb_length), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.ncb_callname !== undefined) view.setBigUint64(24, data.ncb_callname === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ncb_callname))), true);
  // 0x20: pointer
  if (data?.ncb_name !== undefined) view.setBigUint64(32, data.ncb_name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ncb_name))), true);
  // 0x28: u8
  if (data?.ncb_rto !== undefined) view.setUint8(40, Number(data.ncb_rto));
  // 0x29: u8
  if (data?.ncb_sto !== undefined) view.setUint8(41, Number(data.ncb_sto));
  // 0x2a: pad6
  // 0x30: isize
  if (data?.ncb_post !== undefined) view.setBigInt64(48, BigInt(data.ncb_post), true);
  // 0x38: u8
  if (data?.ncb_lana_num !== undefined) view.setUint8(56, Number(data.ncb_lana_num));
  // 0x39: u8
  if (data?.ncb_cmd_cplt !== undefined) view.setUint8(57, Number(data.ncb_cmd_cplt));
  // 0x3a: pad6
  // 0x40: pointer
  if (data?.ncb_reserve !== undefined) view.setBigUint64(64, data.ncb_reserve === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ncb_reserve))), true);
  // 0x48: pointer
  if (data?.ncb_event !== undefined) view.setBigUint64(72, data.ncb_event === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ncb_event))), true);
  return buf;
}

export class NCBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get ncb_command(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get ncb_retcode(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get ncb_lsn(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get ncb_num(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ncb_buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get ncb_length(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get ncb_callname(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ncb_name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u8
  get ncb_rto(): number {
    return this.view.getUint8(40);
  }

  // 0x29: u8
  get ncb_sto(): number {
    return this.view.getUint8(41);
  }

  // 0x2a: pad6

  // 0x30: isize
  get ncb_post(): Deno.PointerValue {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: u8
  get ncb_lana_num(): number {
    return this.view.getUint8(56);
  }

  // 0x39: u8
  get ncb_cmd_cplt(): number {
    return this.view.getUint8(57);
  }

  // 0x3a: pad6

  // 0x40: pointer
  get ncb_reserve(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get ncb_event(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set ncb_command(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set ncb_retcode(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set ncb_lsn(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set ncb_num(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ncb_buffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set ncb_length(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set ncb_callname(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ncb_name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u8
  set ncb_rto(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: u8
  set ncb_sto(value: number) {
    this.view.setUint8(41, value);
  }

  // 0x2a: pad6

  // 0x30: isize
  set ncb_post(value: Deno.PointerValue) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: u8
  set ncb_lana_num(value: number) {
    this.view.setUint8(56, value);
  }

  // 0x39: u8
  set ncb_cmd_cplt(value: number) {
    this.view.setUint8(57, value);
  }

  // 0x3a: pad6

  // 0x40: pointer
  set ncb_reserve(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set ncb_event(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.NetBios.ADAPTER_STATUS (size: 64)
 */
export interface ADAPTER_STATUS {
  /** array */
  adapter_address: Deno.PointerValue;
  /** u8 */
  rev_major: number;
  /** u8 */
  reserved0: number;
  /** u8 */
  adapter_type: number;
  /** u8 */
  rev_minor: number;
  /** u16 */
  duration: number;
  /** u16 */
  frmr_recv: number;
  /** u16 */
  frmr_xmit: number;
  /** u16 */
  iframe_recv_err: number;
  /** u16 */
  xmit_aborts: number;
  /** u32 */
  xmit_success: number;
  /** u32 */
  recv_success: number;
  /** u16 */
  iframe_xmit_err: number;
  /** u16 */
  recv_buff_unavail: number;
  /** u16 */
  t1_timeouts: number;
  /** u16 */
  ti_timeouts: number;
  /** u32 */
  reserved1: number;
  /** u16 */
  free_ncbs: number;
  /** u16 */
  max_cfg_ncbs: number;
  /** u16 */
  max_ncbs: number;
  /** u16 */
  xmit_buf_unavail: number;
  /** u16 */
  max_dgram_size: number;
  /** u16 */
  pending_sess: number;
  /** u16 */
  max_cfg_sess: number;
  /** u16 */
  max_sess: number;
  /** u16 */
  max_sess_pkt_size: number;
  /** u16 */
  name_count: number;
}

export const sizeofADAPTER_STATUS = 64;

export function allocADAPTER_STATUS(data?: Partial<ADAPTER_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofADAPTER_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.adapter_address !== undefined) view.setBigUint64(0, data.adapter_address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.adapter_address))), true);
  // 0x08: u8
  if (data?.rev_major !== undefined) view.setUint8(8, Number(data.rev_major));
  // 0x09: u8
  if (data?.reserved0 !== undefined) view.setUint8(9, Number(data.reserved0));
  // 0x0a: u8
  if (data?.adapter_type !== undefined) view.setUint8(10, Number(data.adapter_type));
  // 0x0b: u8
  if (data?.rev_minor !== undefined) view.setUint8(11, Number(data.rev_minor));
  // 0x0c: u16
  if (data?.duration !== undefined) view.setUint16(12, Number(data.duration), true);
  // 0x0e: u16
  if (data?.frmr_recv !== undefined) view.setUint16(14, Number(data.frmr_recv), true);
  // 0x10: u16
  if (data?.frmr_xmit !== undefined) view.setUint16(16, Number(data.frmr_xmit), true);
  // 0x12: u16
  if (data?.iframe_recv_err !== undefined) view.setUint16(18, Number(data.iframe_recv_err), true);
  // 0x14: u16
  if (data?.xmit_aborts !== undefined) view.setUint16(20, Number(data.xmit_aborts), true);
  // 0x16: u32
  if (data?.xmit_success !== undefined) view.setUint32(22, Number(data.xmit_success), true);
  // 0x1a: u32
  if (data?.recv_success !== undefined) view.setUint32(26, Number(data.recv_success), true);
  // 0x1e: u16
  if (data?.iframe_xmit_err !== undefined) view.setUint16(30, Number(data.iframe_xmit_err), true);
  // 0x20: u16
  if (data?.recv_buff_unavail !== undefined) view.setUint16(32, Number(data.recv_buff_unavail), true);
  // 0x22: u16
  if (data?.t1_timeouts !== undefined) view.setUint16(34, Number(data.t1_timeouts), true);
  // 0x24: u16
  if (data?.ti_timeouts !== undefined) view.setUint16(36, Number(data.ti_timeouts), true);
  // 0x26: u32
  if (data?.reserved1 !== undefined) view.setUint32(38, Number(data.reserved1), true);
  // 0x2a: u16
  if (data?.free_ncbs !== undefined) view.setUint16(42, Number(data.free_ncbs), true);
  // 0x2c: u16
  if (data?.max_cfg_ncbs !== undefined) view.setUint16(44, Number(data.max_cfg_ncbs), true);
  // 0x2e: u16
  if (data?.max_ncbs !== undefined) view.setUint16(46, Number(data.max_ncbs), true);
  // 0x30: u16
  if (data?.xmit_buf_unavail !== undefined) view.setUint16(48, Number(data.xmit_buf_unavail), true);
  // 0x32: u16
  if (data?.max_dgram_size !== undefined) view.setUint16(50, Number(data.max_dgram_size), true);
  // 0x34: u16
  if (data?.pending_sess !== undefined) view.setUint16(52, Number(data.pending_sess), true);
  // 0x36: u16
  if (data?.max_cfg_sess !== undefined) view.setUint16(54, Number(data.max_cfg_sess), true);
  // 0x38: u16
  if (data?.max_sess !== undefined) view.setUint16(56, Number(data.max_sess), true);
  // 0x3a: u16
  if (data?.max_sess_pkt_size !== undefined) view.setUint16(58, Number(data.max_sess_pkt_size), true);
  // 0x3c: u16
  if (data?.name_count !== undefined) view.setUint16(60, Number(data.name_count), true);
  // 0x3e: pad2
  return buf;
}

export class ADAPTER_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get adapter_address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get rev_major(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get reserved0(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get adapter_type(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get rev_minor(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u16
  get duration(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get frmr_recv(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get frmr_xmit(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get iframe_recv_err(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u16
  get xmit_aborts(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u32
  get xmit_success(): number {
    return this.view.getUint32(22, true);
  }

  // 0x1a: u32
  get recv_success(): number {
    return this.view.getUint32(26, true);
  }

  // 0x1e: u16
  get iframe_xmit_err(): number {
    return this.view.getUint16(30, true);
  }

  // 0x20: u16
  get recv_buff_unavail(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: u16
  get t1_timeouts(): number {
    return this.view.getUint16(34, true);
  }

  // 0x24: u16
  get ti_timeouts(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: u32
  get reserved1(): number {
    return this.view.getUint32(38, true);
  }

  // 0x2a: u16
  get free_ncbs(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u16
  get max_cfg_ncbs(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get max_ncbs(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: u16
  get xmit_buf_unavail(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get max_dgram_size(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: u16
  get pending_sess(): number {
    return this.view.getUint16(52, true);
  }

  // 0x36: u16
  get max_cfg_sess(): number {
    return this.view.getUint16(54, true);
  }

  // 0x38: u16
  get max_sess(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get max_sess_pkt_size(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: u16
  get name_count(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: pad2

  // 0x00: pointer
  set adapter_address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set rev_major(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set reserved0(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set adapter_type(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set rev_minor(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u16
  set duration(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set frmr_recv(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set frmr_xmit(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set iframe_recv_err(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u16
  set xmit_aborts(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u32
  set xmit_success(value: number) {
    this.view.setUint32(22, value, true);
  }

  // 0x1a: u32
  set recv_success(value: number) {
    this.view.setUint32(26, value, true);
  }

  // 0x1e: u16
  set iframe_xmit_err(value: number) {
    this.view.setUint16(30, value, true);
  }

  // 0x20: u16
  set recv_buff_unavail(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: u16
  set t1_timeouts(value: number) {
    this.view.setUint16(34, value, true);
  }

  // 0x24: u16
  set ti_timeouts(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: u32
  set reserved1(value: number) {
    this.view.setUint32(38, value, true);
  }

  // 0x2a: u16
  set free_ncbs(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u16
  set max_cfg_ncbs(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set max_ncbs(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: u16
  set xmit_buf_unavail(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set max_dgram_size(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: u16
  set pending_sess(value: number) {
    this.view.setUint16(52, value, true);
  }

  // 0x36: u16
  set max_cfg_sess(value: number) {
    this.view.setUint16(54, value, true);
  }

  // 0x38: u16
  set max_sess(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set max_sess_pkt_size(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: u16
  set name_count(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: pad2
}

/**
 * Windows.Win32.NetworkManagement.NetBios.NAME_BUFFER (size: 16)
 */
export interface NAME_BUFFER {
  /** array */
  name: Deno.PointerValue;
  /** u8 */
  name_num: number;
  /** u8 */
  name_flags: number;
}

export const sizeofNAME_BUFFER = 16;

export function allocNAME_BUFFER(data?: Partial<NAME_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofNAME_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.name !== undefined) view.setBigUint64(0, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x08: u8
  if (data?.name_num !== undefined) view.setUint8(8, Number(data.name_num));
  // 0x09: u8
  if (data?.name_flags !== undefined) view.setUint8(9, Number(data.name_flags));
  // 0x0a: pad6
  return buf;
}

export class NAME_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get name_num(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get name_flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set name_num(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set name_flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.NetworkManagement.NetBios.SESSION_HEADER (size: 8)
 */
export interface SESSION_HEADER {
  /** u8 */
  sess_name: number;
  /** u8 */
  num_sess: number;
  /** u8 */
  rcv_dg_outstanding: number;
  /** u8 */
  rcv_any_outstanding: number;
}

export const sizeofSESSION_HEADER = 8;

export function allocSESSION_HEADER(data?: Partial<SESSION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSESSION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.sess_name !== undefined) view.setUint8(0, Number(data.sess_name));
  // 0x01: u8
  if (data?.num_sess !== undefined) view.setUint8(1, Number(data.num_sess));
  // 0x02: u8
  if (data?.rcv_dg_outstanding !== undefined) view.setUint8(2, Number(data.rcv_dg_outstanding));
  // 0x03: u8
  if (data?.rcv_any_outstanding !== undefined) view.setUint8(3, Number(data.rcv_any_outstanding));
  // 0x04: pad4
  return buf;
}

export class SESSION_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get sess_name(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get num_sess(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get rcv_dg_outstanding(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get rcv_any_outstanding(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set sess_name(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set num_sess(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set rcv_dg_outstanding(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set rcv_any_outstanding(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.NetBios.SESSION_BUFFER (size: 32)
 */
export interface SESSION_BUFFER {
  /** u8 */
  lsn: number;
  /** u8 */
  state: number;
  /** array */
  local_name: Deno.PointerValue;
  /** array */
  remote_name: Deno.PointerValue;
  /** u8 */
  rcvs_outstanding: number;
  /** u8 */
  sends_outstanding: number;
}

export const sizeofSESSION_BUFFER = 32;

export function allocSESSION_BUFFER(data?: Partial<SESSION_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofSESSION_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.lsn !== undefined) view.setUint8(0, Number(data.lsn));
  // 0x01: u8
  if (data?.state !== undefined) view.setUint8(1, Number(data.state));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.local_name !== undefined) view.setBigUint64(8, data.local_name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.local_name))), true);
  // 0x10: pointer
  if (data?.remote_name !== undefined) view.setBigUint64(16, data.remote_name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.remote_name))), true);
  // 0x18: u8
  if (data?.rcvs_outstanding !== undefined) view.setUint8(24, Number(data.rcvs_outstanding));
  // 0x19: u8
  if (data?.sends_outstanding !== undefined) view.setUint8(25, Number(data.sends_outstanding));
  // 0x1a: pad6
  return buf;
}

export class SESSION_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get lsn(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get state(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get local_name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get remote_name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u8
  get rcvs_outstanding(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get sends_outstanding(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: pad6

  // 0x00: u8
  set lsn(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set state(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set local_name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set remote_name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u8
  set rcvs_outstanding(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set sends_outstanding(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: pad6
}

/**
 * Windows.Win32.NetworkManagement.NetBios.LANA_ENUM (size: 16)
 */
export interface LANA_ENUM {
  /** u8 */
  length: number;
  /** array */
  lana: Deno.PointerValue;
}

export const sizeofLANA_ENUM = 16;

export function allocLANA_ENUM(data?: Partial<LANA_ENUM>): Uint8Array {
  const buf = new Uint8Array(sizeofLANA_ENUM);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.length !== undefined) view.setUint8(0, Number(data.length));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.lana !== undefined) view.setBigUint64(8, data.lana === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lana))), true);
  return buf;
}

export class LANA_ENUMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get length(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get lana(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set length(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set lana(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.NetBios.FIND_NAME_HEADER (size: 8)
 */
export interface FIND_NAME_HEADER {
  /** u16 */
  node_count: number;
  /** u8 */
  reserved: number;
  /** u8 */
  unique_group: number;
}

export const sizeofFIND_NAME_HEADER = 8;

export function allocFIND_NAME_HEADER(data?: Partial<FIND_NAME_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofFIND_NAME_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.node_count !== undefined) view.setUint16(0, Number(data.node_count), true);
  // 0x02: u8
  if (data?.reserved !== undefined) view.setUint8(2, Number(data.reserved));
  // 0x03: u8
  if (data?.unique_group !== undefined) view.setUint8(3, Number(data.unique_group));
  // 0x04: pad4
  return buf;
}

export class FIND_NAME_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get node_count(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get reserved(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get unique_group(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u16
  set node_count(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set reserved(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set unique_group(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.NetBios.FIND_NAME_BUFFER (size: 32)
 */
export interface FIND_NAME_BUFFER {
  /** u8 */
  length: number;
  /** u8 */
  access_control: number;
  /** u8 */
  frame_control: number;
  /** array */
  destination_addr: Deno.PointerValue;
  /** array */
  source_addr: Deno.PointerValue;
  /** array */
  routing_info: Deno.PointerValue;
}

export const sizeofFIND_NAME_BUFFER = 32;

export function allocFIND_NAME_BUFFER(data?: Partial<FIND_NAME_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFIND_NAME_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.length !== undefined) view.setUint8(0, Number(data.length));
  // 0x01: u8
  if (data?.access_control !== undefined) view.setUint8(1, Number(data.access_control));
  // 0x02: u8
  if (data?.frame_control !== undefined) view.setUint8(2, Number(data.frame_control));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.destination_addr !== undefined) view.setBigUint64(8, data.destination_addr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.destination_addr))), true);
  // 0x10: pointer
  if (data?.source_addr !== undefined) view.setBigUint64(16, data.source_addr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.source_addr))), true);
  // 0x18: pointer
  if (data?.routing_info !== undefined) view.setBigUint64(24, data.routing_info === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.routing_info))), true);
  return buf;
}

export class FIND_NAME_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get length(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get access_control(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get frame_control(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get destination_addr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get source_addr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get routing_info(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set length(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set access_control(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set frame_control(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set destination_addr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set source_addr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set routing_info(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.NetBios.ACTION_HEADER (size: 8)
 */
export interface ACTION_HEADER {
  /** u32 */
  transport_id: number;
  /** u16 */
  action_code: number;
  /** u16 */
  reserved: number;
}

export const sizeofACTION_HEADER = 8;

export function allocACTION_HEADER(data?: Partial<ACTION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofACTION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.transport_id !== undefined) view.setUint32(0, Number(data.transport_id), true);
  // 0x04: u16
  if (data?.action_code !== undefined) view.setUint16(4, Number(data.action_code), true);
  // 0x06: u16
  if (data?.reserved !== undefined) view.setUint16(6, Number(data.reserved), true);
  return buf;
}

export class ACTION_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get transport_id(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get action_code(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get reserved(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u32
  set transport_id(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set action_code(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set reserved(value: number) {
    this.view.setUint16(6, value, true);
  }
}

// Native Libraries

try {
  var libNETAPI32_dll = Deno.dlopen("NETAPI32.dll", {
    Netbios: {
      parameters: ["pointer"],
      result: "u8",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function Netbios(
  pncb: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u8 */ {
  return libNETAPI32_dll.Netbios(util.toPointer(pncb));
}

