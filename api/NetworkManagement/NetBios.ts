/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.NetBios.Apis

import * as util from "../../util.ts";

// Constants
export const NCBNAMSZ = 16;
export const MAX_LANA = 254;
export const NAME_FLAGS_MASK = 135;
export const GROUP_NAME = 128;
export const UNIQUE_NAME = 0;
export const REGISTERING = 0;
export const REGISTERED = 4;
export const DEREGISTERED = 5;
export const DUPLICATE = 6;
export const DUPLICATE_DEREG = 7;
export const LISTEN_OUTSTANDING = 1;
export const CALL_PENDING = 2;
export const SESSION_ESTABLISHED = 3;
export const HANGUP_PENDING = 4;
export const HANGUP_COMPLETE = 5;
export const SESSION_ABORTED = 6;
export const NCBCALL = 16;
export const NCBLISTEN = 17;
export const NCBHANGUP = 18;
export const NCBSEND = 20;
export const NCBRECV = 21;
export const NCBRECVANY = 22;
export const NCBCHAINSEND = 23;
export const NCBDGSEND = 32;
export const NCBDGRECV = 33;
export const NCBDGSENDBC = 34;
export const NCBDGRECVBC = 35;
export const NCBADDNAME = 48;
export const NCBDELNAME = 49;
export const NCBRESET = 50;
export const NCBASTAT = 51;
export const NCBSSTAT = 52;
export const NCBCANCEL = 53;
export const NCBADDGRNAME = 54;
export const NCBENUM = 55;
export const NCBUNLINK = 112;
export const NCBSENDNA = 113;
export const NCBCHAINSENDNA = 114;
export const NCBLANSTALERT = 115;
export const NCBACTION = 119;
export const NCBFINDNAME = 120;
export const NCBTRACE = 121;
export const ASYNCH = 128;
export const NRC_GOODRET = 0;
export const NRC_BUFLEN = 1;
export const NRC_ILLCMD = 3;
export const NRC_CMDTMO = 5;
export const NRC_INCOMP = 6;
export const NRC_BADDR = 7;
export const NRC_SNUMOUT = 8;
export const NRC_NORES = 9;
export const NRC_SCLOSED = 10;
export const NRC_CMDCAN = 11;
export const NRC_DUPNAME = 13;
export const NRC_NAMTFUL = 14;
export const NRC_ACTSES = 15;
export const NRC_LOCTFUL = 17;
export const NRC_REMTFUL = 18;
export const NRC_ILLNN = 19;
export const NRC_NOCALL = 20;
export const NRC_NOWILD = 21;
export const NRC_INUSE = 22;
export const NRC_NAMERR = 23;
export const NRC_SABORT = 24;
export const NRC_NAMCONF = 25;
export const NRC_IFBUSY = 33;
export const NRC_TOOMANY = 34;
export const NRC_BRIDGE = 35;
export const NRC_CANOCCR = 36;
export const NRC_CANCEL = 38;
export const NRC_DUPENV = 48;
export const NRC_ENVNOTDEF = 52;
export const NRC_OSRESNOTAV = 53;
export const NRC_MAXAPPS = 54;
export const NRC_NOSAPS = 55;
export const NRC_NORESOURCES = 56;
export const NRC_INVADDRESS = 57;
export const NRC_INVDDID = 59;
export const NRC_LOCKFAIL = 60;
export const NRC_OPENERR = 63;
export const NRC_SYSTEM = 64;
export const NRC_PENDING = 255;

// Structs

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.NetworkManagement.NetBios.NCB (size: 80)
 */
export interface NCB {
  /** u8 */
  ncb_command: number;
  /** u8 */
  ncb_retcode: number;
  /** u8 */
  ncb_lsn: number;
  /** u8 */
  ncb_num: number;
  /** ptr */
  ncb_buffer: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  ncb_length: number;
  /** array */
  ncb_callname: Deno.PointerValue | null;
  /** array */
  ncb_name: Deno.PointerValue | null;
  /** u8 */
  ncb_rto: number;
  /** u8 */
  ncb_sto: number;
  /** isize */
  ncb_post: Deno.PointerValue;
  /** u8 */
  ncb_lana_num: number;
  /** u8 */
  ncb_cmd_cplt: number;
  /** array */
  ncb_reserve: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  ncb_event: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNCB = 80;

export function allocNCB(data?: Partial<NCB>): Uint8Array {
  const buf = new Uint8Array(sizeofNCB);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ncb_command !== undefined) view.setUint8(0, Number(data.ncb_command));
  // 0x01: u8
  if (data?.ncb_retcode !== undefined) view.setUint8(1, Number(data.ncb_retcode));
  // 0x02: u8
  if (data?.ncb_lsn !== undefined) view.setUint8(2, Number(data.ncb_lsn));
  // 0x03: u8
  if (data?.ncb_num !== undefined) view.setUint8(3, Number(data.ncb_num));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ncb_buffer !== undefined) view.setBigUint64(8, data.ncb_buffer === null ? 0n : BigInt(util.toPointer(data.ncb_buffer)), true);
  // 0x10: u16
  if (data?.ncb_length !== undefined) view.setUint16(16, Number(data.ncb_length), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.ncb_callname !== undefined) view.setBigUint64(24, data.ncb_callname === null ? 0n : BigInt(util.toPointer(data.ncb_callname)), true);
  // 0x20: pointer
  if (data?.ncb_name !== undefined) view.setBigUint64(32, data.ncb_name === null ? 0n : BigInt(util.toPointer(data.ncb_name)), true);
  // 0x28: u8
  if (data?.ncb_rto !== undefined) view.setUint8(40, Number(data.ncb_rto));
  // 0x29: u8
  if (data?.ncb_sto !== undefined) view.setUint8(41, Number(data.ncb_sto));
  // 0x2a: pad6
  // 0x30: isize
  if (data?.ncb_post !== undefined) view.setBigInt64(48, BigInt(data.ncb_post), true);
  // 0x38: u8
  if (data?.ncb_lana_num !== undefined) view.setUint8(56, Number(data.ncb_lana_num));
  // 0x39: u8
  if (data?.ncb_cmd_cplt !== undefined) view.setUint8(57, Number(data.ncb_cmd_cplt));
  // 0x3a: pad6
  // 0x40: pointer
  if (data?.ncb_reserve !== undefined) view.setBigUint64(64, data.ncb_reserve === null ? 0n : BigInt(util.toPointer(data.ncb_reserve)), true);
  // 0x48: pointer
  if (data?.ncb_event !== undefined) view.setBigUint64(72, data.ncb_event === null ? 0n : BigInt(util.toPointer(data.ncb_event)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetBios.ADAPTER_STATUS (size: 64)
 */
export interface ADAPTER_STATUS {
  /** array */
  adapter_address: Deno.PointerValue | null;
  /** u8 */
  rev_major: number;
  /** u8 */
  reserved0: number;
  /** u8 */
  adapter_type: number;
  /** u8 */
  rev_minor: number;
  /** u16 */
  duration: number;
  /** u16 */
  frmr_recv: number;
  /** u16 */
  frmr_xmit: number;
  /** u16 */
  iframe_recv_err: number;
  /** u16 */
  xmit_aborts: number;
  /** u32 */
  xmit_success: number;
  /** u32 */
  recv_success: number;
  /** u16 */
  iframe_xmit_err: number;
  /** u16 */
  recv_buff_unavail: number;
  /** u16 */
  t1_timeouts: number;
  /** u16 */
  ti_timeouts: number;
  /** u32 */
  reserved1: number;
  /** u16 */
  free_ncbs: number;
  /** u16 */
  max_cfg_ncbs: number;
  /** u16 */
  max_ncbs: number;
  /** u16 */
  xmit_buf_unavail: number;
  /** u16 */
  max_dgram_size: number;
  /** u16 */
  pending_sess: number;
  /** u16 */
  max_cfg_sess: number;
  /** u16 */
  max_sess: number;
  /** u16 */
  max_sess_pkt_size: number;
  /** u16 */
  name_count: number;
}

export const sizeofADAPTER_STATUS = 64;

export function allocADAPTER_STATUS(data?: Partial<ADAPTER_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofADAPTER_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.adapter_address !== undefined) view.setBigUint64(0, data.adapter_address === null ? 0n : BigInt(util.toPointer(data.adapter_address)), true);
  // 0x08: u8
  if (data?.rev_major !== undefined) view.setUint8(8, Number(data.rev_major));
  // 0x09: u8
  if (data?.reserved0 !== undefined) view.setUint8(9, Number(data.reserved0));
  // 0x0a: u8
  if (data?.adapter_type !== undefined) view.setUint8(10, Number(data.adapter_type));
  // 0x0b: u8
  if (data?.rev_minor !== undefined) view.setUint8(11, Number(data.rev_minor));
  // 0x0c: u16
  if (data?.duration !== undefined) view.setUint16(12, Number(data.duration), true);
  // 0x0e: u16
  if (data?.frmr_recv !== undefined) view.setUint16(14, Number(data.frmr_recv), true);
  // 0x10: u16
  if (data?.frmr_xmit !== undefined) view.setUint16(16, Number(data.frmr_xmit), true);
  // 0x12: u16
  if (data?.iframe_recv_err !== undefined) view.setUint16(18, Number(data.iframe_recv_err), true);
  // 0x14: u16
  if (data?.xmit_aborts !== undefined) view.setUint16(20, Number(data.xmit_aborts), true);
  // 0x16: u32
  if (data?.xmit_success !== undefined) view.setUint32(22, Number(data.xmit_success), true);
  // 0x1a: u32
  if (data?.recv_success !== undefined) view.setUint32(26, Number(data.recv_success), true);
  // 0x1e: u16
  if (data?.iframe_xmit_err !== undefined) view.setUint16(30, Number(data.iframe_xmit_err), true);
  // 0x20: u16
  if (data?.recv_buff_unavail !== undefined) view.setUint16(32, Number(data.recv_buff_unavail), true);
  // 0x22: u16
  if (data?.t1_timeouts !== undefined) view.setUint16(34, Number(data.t1_timeouts), true);
  // 0x24: u16
  if (data?.ti_timeouts !== undefined) view.setUint16(36, Number(data.ti_timeouts), true);
  // 0x26: u32
  if (data?.reserved1 !== undefined) view.setUint32(38, Number(data.reserved1), true);
  // 0x2a: u16
  if (data?.free_ncbs !== undefined) view.setUint16(42, Number(data.free_ncbs), true);
  // 0x2c: u16
  if (data?.max_cfg_ncbs !== undefined) view.setUint16(44, Number(data.max_cfg_ncbs), true);
  // 0x2e: u16
  if (data?.max_ncbs !== undefined) view.setUint16(46, Number(data.max_ncbs), true);
  // 0x30: u16
  if (data?.xmit_buf_unavail !== undefined) view.setUint16(48, Number(data.xmit_buf_unavail), true);
  // 0x32: u16
  if (data?.max_dgram_size !== undefined) view.setUint16(50, Number(data.max_dgram_size), true);
  // 0x34: u16
  if (data?.pending_sess !== undefined) view.setUint16(52, Number(data.pending_sess), true);
  // 0x36: u16
  if (data?.max_cfg_sess !== undefined) view.setUint16(54, Number(data.max_cfg_sess), true);
  // 0x38: u16
  if (data?.max_sess !== undefined) view.setUint16(56, Number(data.max_sess), true);
  // 0x3a: u16
  if (data?.max_sess_pkt_size !== undefined) view.setUint16(58, Number(data.max_sess_pkt_size), true);
  // 0x3c: u16
  if (data?.name_count !== undefined) view.setUint16(60, Number(data.name_count), true);
  // 0x3e: pad2
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetBios.NAME_BUFFER (size: 16)
 */
export interface NAME_BUFFER {
  /** array */
  name: Deno.PointerValue | null;
  /** u8 */
  name_num: number;
  /** u8 */
  name_flags: number;
}

export const sizeofNAME_BUFFER = 16;

export function allocNAME_BUFFER(data?: Partial<NAME_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofNAME_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.name !== undefined) view.setBigUint64(0, data.name === null ? 0n : BigInt(util.toPointer(data.name)), true);
  // 0x08: u8
  if (data?.name_num !== undefined) view.setUint8(8, Number(data.name_num));
  // 0x09: u8
  if (data?.name_flags !== undefined) view.setUint8(9, Number(data.name_flags));
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetBios.SESSION_HEADER (size: 8)
 */
export interface SESSION_HEADER {
  /** u8 */
  sess_name: number;
  /** u8 */
  num_sess: number;
  /** u8 */
  rcv_dg_outstanding: number;
  /** u8 */
  rcv_any_outstanding: number;
}

export const sizeofSESSION_HEADER = 8;

export function allocSESSION_HEADER(data?: Partial<SESSION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSESSION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.sess_name !== undefined) view.setUint8(0, Number(data.sess_name));
  // 0x01: u8
  if (data?.num_sess !== undefined) view.setUint8(1, Number(data.num_sess));
  // 0x02: u8
  if (data?.rcv_dg_outstanding !== undefined) view.setUint8(2, Number(data.rcv_dg_outstanding));
  // 0x03: u8
  if (data?.rcv_any_outstanding !== undefined) view.setUint8(3, Number(data.rcv_any_outstanding));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetBios.SESSION_BUFFER (size: 32)
 */
export interface SESSION_BUFFER {
  /** u8 */
  lsn: number;
  /** u8 */
  state: number;
  /** array */
  local_name: Deno.PointerValue | null;
  /** array */
  remote_name: Deno.PointerValue | null;
  /** u8 */
  rcvs_outstanding: number;
  /** u8 */
  sends_outstanding: number;
}

export const sizeofSESSION_BUFFER = 32;

export function allocSESSION_BUFFER(data?: Partial<SESSION_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofSESSION_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.lsn !== undefined) view.setUint8(0, Number(data.lsn));
  // 0x01: u8
  if (data?.state !== undefined) view.setUint8(1, Number(data.state));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.local_name !== undefined) view.setBigUint64(8, data.local_name === null ? 0n : BigInt(util.toPointer(data.local_name)), true);
  // 0x10: pointer
  if (data?.remote_name !== undefined) view.setBigUint64(16, data.remote_name === null ? 0n : BigInt(util.toPointer(data.remote_name)), true);
  // 0x18: u8
  if (data?.rcvs_outstanding !== undefined) view.setUint8(24, Number(data.rcvs_outstanding));
  // 0x19: u8
  if (data?.sends_outstanding !== undefined) view.setUint8(25, Number(data.sends_outstanding));
  // 0x1a: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetBios.LANA_ENUM (size: 16)
 */
export interface LANA_ENUM {
  /** u8 */
  length: number;
  /** array */
  lana: Deno.PointerValue | null;
}

export const sizeofLANA_ENUM = 16;

export function allocLANA_ENUM(data?: Partial<LANA_ENUM>): Uint8Array {
  const buf = new Uint8Array(sizeofLANA_ENUM);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.length !== undefined) view.setUint8(0, Number(data.length));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.lana !== undefined) view.setBigUint64(8, data.lana === null ? 0n : BigInt(util.toPointer(data.lana)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetBios.FIND_NAME_HEADER (size: 8)
 */
export interface FIND_NAME_HEADER {
  /** u16 */
  node_count: number;
  /** u8 */
  reserved: number;
  /** u8 */
  unique_group: number;
}

export const sizeofFIND_NAME_HEADER = 8;

export function allocFIND_NAME_HEADER(data?: Partial<FIND_NAME_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofFIND_NAME_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.node_count !== undefined) view.setUint16(0, Number(data.node_count), true);
  // 0x02: u8
  if (data?.reserved !== undefined) view.setUint8(2, Number(data.reserved));
  // 0x03: u8
  if (data?.unique_group !== undefined) view.setUint8(3, Number(data.unique_group));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetBios.FIND_NAME_BUFFER (size: 32)
 */
export interface FIND_NAME_BUFFER {
  /** u8 */
  length: number;
  /** u8 */
  access_control: number;
  /** u8 */
  frame_control: number;
  /** array */
  destination_addr: Deno.PointerValue | null;
  /** array */
  source_addr: Deno.PointerValue | null;
  /** array */
  routing_info: Deno.PointerValue | null;
}

export const sizeofFIND_NAME_BUFFER = 32;

export function allocFIND_NAME_BUFFER(data?: Partial<FIND_NAME_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFIND_NAME_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.length !== undefined) view.setUint8(0, Number(data.length));
  // 0x01: u8
  if (data?.access_control !== undefined) view.setUint8(1, Number(data.access_control));
  // 0x02: u8
  if (data?.frame_control !== undefined) view.setUint8(2, Number(data.frame_control));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.destination_addr !== undefined) view.setBigUint64(8, data.destination_addr === null ? 0n : BigInt(util.toPointer(data.destination_addr)), true);
  // 0x10: pointer
  if (data?.source_addr !== undefined) view.setBigUint64(16, data.source_addr === null ? 0n : BigInt(util.toPointer(data.source_addr)), true);
  // 0x18: pointer
  if (data?.routing_info !== undefined) view.setBigUint64(24, data.routing_info === null ? 0n : BigInt(util.toPointer(data.routing_info)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.NetBios.ACTION_HEADER (size: 8)
 */
export interface ACTION_HEADER {
  /** u32 */
  transport_id: number;
  /** u16 */
  action_code: number;
  /** u16 */
  reserved: number;
}

export const sizeofACTION_HEADER = 8;

export function allocACTION_HEADER(data?: Partial<ACTION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofACTION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.transport_id !== undefined) view.setUint32(0, Number(data.transport_id), true);
  // 0x04: u16
  if (data?.action_code !== undefined) view.setUint16(4, Number(data.action_code), true);
  // 0x06: u16
  if (data?.reserved !== undefined) view.setUint16(6, Number(data.reserved), true);
  return buf;
}

// Native Libraries

try {
  var libNETAPI32 = Deno.dlopen("NETAPI32", {
    Netbios: {
      parameters: ["pointer"],
      result: "u8",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function Netbios(
  pncb: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u8 */ {
  return libNETAPI32.Netbios(util.toPointer(pncb));
}

