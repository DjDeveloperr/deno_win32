/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.Dns.Apis

import * as util from "../../util.ts";

// Enums
export type DNS_CONFIG_TYPE = number;
export type DNS_SECTION = number;
export type DNS_PROXY_INFORMATION_TYPE = number;
export type DNS_CHARSET = number;
export type DNS_FREE_TYPE = number;
export type DNS_NAME_FORMAT = number;
export type DNS_CONNECTION_PROXY_TYPE = number;
export type DNS_CONNECTION_PROXY_INFO_SWITCH = number;
export type DNS_CONNECTION_POLICY_TAG = number;

// Constants
export const SIZEOF_IP4_ADDRESS = 4;
export const IP4_ADDRESS_STRING_LENGTH = 16;
export const IP4_ADDRESS_STRING_BUFFER_LENGTH = 16;
export const DNS_ADDR_MAX_SOCKADDR_LENGTH = 32;
export const IP6_ADDRESS_STRING_LENGTH = 65;
export const IP6_ADDRESS_STRING_BUFFER_LENGTH = 65;
export const DNS_ADDRESS_STRING_LENGTH = 65;
export const DNS_PORT_HOST_ORDER = 53;
export const DNS_PORT_NET_ORDER = 13568;
export const DNS_RFC_MAX_UDP_PACKET_LENGTH = 512;
export const DNS_MAX_NAME_LENGTH = 255;
export const DNS_MAX_LABEL_LENGTH = 63;
export const DNS_MAX_NAME_BUFFER_LENGTH = 256;
export const DNS_MAX_LABEL_BUFFER_LENGTH = 64;
export const DNS_MAX_IP4_REVERSE_NAME_LENGTH = 31;
export const DNS_MAX_IP6_REVERSE_NAME_LENGTH = 75;
export const DNS_MAX_REVERSE_NAME_LENGTH = 75;
export const DNS_MAX_IP4_REVERSE_NAME_BUFFER_LENGTH = 31;
export const DNS_MAX_IP6_REVERSE_NAME_BUFFER_LENGTH = 75;
export const DNS_MAX_REVERSE_NAME_BUFFER_LENGTH = 75;
export const DNS_MAX_TEXT_STRING_LENGTH = 255;
export const DNS_COMPRESSED_QUESTION_NAME = 49164;
export const DNS_OPCODE_QUERY = 0;
export const DNS_OPCODE_IQUERY = 1;
export const DNS_OPCODE_SERVER_STATUS = 2;
export const DNS_OPCODE_UNKNOWN = 3;
export const DNS_OPCODE_NOTIFY = 4;
export const DNS_OPCODE_UPDATE = 5;
export const DNS_RCODE_NOERROR = 0;
export const DNS_RCODE_FORMERR = 1;
export const DNS_RCODE_SERVFAIL = 2;
export const DNS_RCODE_NXDOMAIN = 3;
export const DNS_RCODE_NOTIMPL = 4;
export const DNS_RCODE_REFUSED = 5;
export const DNS_RCODE_YXDOMAIN = 6;
export const DNS_RCODE_YXRRSET = 7;
export const DNS_RCODE_NXRRSET = 8;
export const DNS_RCODE_NOTAUTH = 9;
export const DNS_RCODE_NOTZONE = 10;
export const DNS_RCODE_MAX = 15;
export const DNS_RCODE_BADVERS = 16;
export const DNS_RCODE_BADSIG = 16;
export const DNS_RCODE_BADKEY = 17;
export const DNS_RCODE_BADTIME = 18;
export const DNS_RCODE_NO_ERROR = 0;
export const DNS_RCODE_FORMAT_ERROR = 1;
export const DNS_RCODE_SERVER_FAILURE = 2;
export const DNS_RCODE_NAME_ERROR = 3;
export const DNS_RCODE_NOT_IMPLEMENTED = 4;
export const DNS_CLASS_INTERNET = 1;
export const DNS_CLASS_CSNET = 2;
export const DNS_CLASS_CHAOS = 3;
export const DNS_CLASS_HESIOD = 4;
export const DNS_CLASS_NONE = 254;
export const DNS_CLASS_ALL = 255;
export const DNS_CLASS_ANY = 255;
export const DNS_CLASS_UNICAST_RESPONSE = 32768;
export const DNS_RCLASS_INTERNET = 256;
export const DNS_RCLASS_CSNET = 512;
export const DNS_RCLASS_CHAOS = 768;
export const DNS_RCLASS_HESIOD = 1024;
export const DNS_RCLASS_NONE = 65024;
export const DNS_RCLASS_ALL = 65280;
export const DNS_RCLASS_ANY = 65280;
export const DNS_RCLASS_UNICAST_RESPONSE = 128;
export const DNS_TYPE_ZERO = 0;
export const DNS_TYPE_A = 1;
export const DNS_TYPE_NS = 2;
export const DNS_TYPE_MD = 3;
export const DNS_TYPE_MF = 4;
export const DNS_TYPE_CNAME = 5;
export const DNS_TYPE_SOA = 6;
export const DNS_TYPE_MB = 7;
export const DNS_TYPE_MG = 8;
export const DNS_TYPE_MR = 9;
export const DNS_TYPE_NULL = 10;
export const DNS_TYPE_WKS = 11;
export const DNS_TYPE_PTR = 12;
export const DNS_TYPE_HINFO = 13;
export const DNS_TYPE_MINFO = 14;
export const DNS_TYPE_MX = 15;
export const DNS_TYPE_TEXT = 16;
export const DNS_TYPE_RP = 17;
export const DNS_TYPE_AFSDB = 18;
export const DNS_TYPE_X25 = 19;
export const DNS_TYPE_ISDN = 20;
export const DNS_TYPE_RT = 21;
export const DNS_TYPE_NSAP = 22;
export const DNS_TYPE_NSAPPTR = 23;
export const DNS_TYPE_SIG = 24;
export const DNS_TYPE_KEY = 25;
export const DNS_TYPE_PX = 26;
export const DNS_TYPE_GPOS = 27;
export const DNS_TYPE_AAAA = 28;
export const DNS_TYPE_LOC = 29;
export const DNS_TYPE_NXT = 30;
export const DNS_TYPE_EID = 31;
export const DNS_TYPE_NIMLOC = 32;
export const DNS_TYPE_SRV = 33;
export const DNS_TYPE_ATMA = 34;
export const DNS_TYPE_NAPTR = 35;
export const DNS_TYPE_KX = 36;
export const DNS_TYPE_CERT = 37;
export const DNS_TYPE_A6 = 38;
export const DNS_TYPE_DNAME = 39;
export const DNS_TYPE_SINK = 40;
export const DNS_TYPE_OPT = 41;
export const DNS_TYPE_DS = 43;
export const DNS_TYPE_RRSIG = 46;
export const DNS_TYPE_NSEC = 47;
export const DNS_TYPE_DNSKEY = 48;
export const DNS_TYPE_DHCID = 49;
export const DNS_TYPE_NSEC3 = 50;
export const DNS_TYPE_NSEC3PARAM = 51;
export const DNS_TYPE_TLSA = 52;
export const DNS_TYPE_UINFO = 100;
export const DNS_TYPE_UID = 101;
export const DNS_TYPE_GID = 102;
export const DNS_TYPE_UNSPEC = 103;
export const DNS_TYPE_ADDRS = 248;
export const DNS_TYPE_TKEY = 249;
export const DNS_TYPE_TSIG = 250;
export const DNS_TYPE_IXFR = 251;
export const DNS_TYPE_AXFR = 252;
export const DNS_TYPE_MAILB = 253;
export const DNS_TYPE_MAILA = 254;
export const DNS_TYPE_ALL = 255;
export const DNS_TYPE_ANY = 255;
export const DNS_TYPE_WINS = 65281;
export const DNS_TYPE_WINSR = 65282;
export const DNS_TYPE_NBSTAT = 65282;
export const DNS_RTYPE_A = 256;
export const DNS_RTYPE_NS = 512;
export const DNS_RTYPE_MD = 768;
export const DNS_RTYPE_MF = 1024;
export const DNS_RTYPE_CNAME = 1280;
export const DNS_RTYPE_SOA = 1536;
export const DNS_RTYPE_MB = 1792;
export const DNS_RTYPE_MG = 2048;
export const DNS_RTYPE_MR = 2304;
export const DNS_RTYPE_NULL = 2560;
export const DNS_RTYPE_WKS = 2816;
export const DNS_RTYPE_PTR = 3072;
export const DNS_RTYPE_HINFO = 3328;
export const DNS_RTYPE_MINFO = 3584;
export const DNS_RTYPE_MX = 3840;
export const DNS_RTYPE_TEXT = 4096;
export const DNS_RTYPE_RP = 4352;
export const DNS_RTYPE_AFSDB = 4608;
export const DNS_RTYPE_X25 = 4864;
export const DNS_RTYPE_ISDN = 5120;
export const DNS_RTYPE_RT = 5376;
export const DNS_RTYPE_NSAP = 5632;
export const DNS_RTYPE_NSAPPTR = 5888;
export const DNS_RTYPE_SIG = 6144;
export const DNS_RTYPE_KEY = 6400;
export const DNS_RTYPE_PX = 6656;
export const DNS_RTYPE_GPOS = 6912;
export const DNS_RTYPE_AAAA = 7168;
export const DNS_RTYPE_LOC = 7424;
export const DNS_RTYPE_NXT = 7680;
export const DNS_RTYPE_EID = 7936;
export const DNS_RTYPE_NIMLOC = 8192;
export const DNS_RTYPE_SRV = 8448;
export const DNS_RTYPE_ATMA = 8704;
export const DNS_RTYPE_NAPTR = 8960;
export const DNS_RTYPE_KX = 9216;
export const DNS_RTYPE_CERT = 9472;
export const DNS_RTYPE_A6 = 9728;
export const DNS_RTYPE_DNAME = 9984;
export const DNS_RTYPE_SINK = 10240;
export const DNS_RTYPE_OPT = 10496;
export const DNS_RTYPE_DS = 11008;
export const DNS_RTYPE_RRSIG = 11776;
export const DNS_RTYPE_NSEC = 12032;
export const DNS_RTYPE_DNSKEY = 12288;
export const DNS_RTYPE_DHCID = 12544;
export const DNS_RTYPE_NSEC3 = 12800;
export const DNS_RTYPE_NSEC3PARAM = 13056;
export const DNS_RTYPE_TLSA = 13312;
export const DNS_RTYPE_UINFO = 25600;
export const DNS_RTYPE_UID = 25856;
export const DNS_RTYPE_GID = 26112;
export const DNS_RTYPE_UNSPEC = 26368;
export const DNS_RTYPE_TKEY = 63744;
export const DNS_RTYPE_TSIG = 64000;
export const DNS_RTYPE_IXFR = 64256;
export const DNS_RTYPE_AXFR = 64512;
export const DNS_RTYPE_MAILB = 64768;
export const DNS_RTYPE_MAILA = 65024;
export const DNS_RTYPE_ALL = 65280;
export const DNS_RTYPE_ANY = 65280;
export const DNS_RTYPE_WINS = 511;
export const DNS_RTYPE_WINSR = 767;
export const DNS_ATMA_FORMAT_E164 = 1;
export const DNS_ATMA_FORMAT_AESA = 2;
export const DNS_ATMA_MAX_ADDR_LENGTH = 20;
export const DNS_ATMA_AESA_ADDR_LENGTH = 20;
export const DNS_ATMA_MAX_RECORD_LENGTH = 21;
export const DNSSEC_ALGORITHM_RSAMD5 = 1;
export const DNSSEC_ALGORITHM_RSASHA1 = 5;
export const DNSSEC_ALGORITHM_RSASHA1_NSEC3 = 7;
export const DNSSEC_ALGORITHM_RSASHA256 = 8;
export const DNSSEC_ALGORITHM_RSASHA512 = 10;
export const DNSSEC_ALGORITHM_ECDSAP256_SHA256 = 13;
export const DNSSEC_ALGORITHM_ECDSAP384_SHA384 = 14;
export const DNSSEC_ALGORITHM_NULL = 253;
export const DNSSEC_ALGORITHM_PRIVATE = 254;
export const DNSSEC_DIGEST_ALGORITHM_SHA1 = 1;
export const DNSSEC_DIGEST_ALGORITHM_SHA256 = 2;
export const DNSSEC_DIGEST_ALGORITHM_SHA384 = 4;
export const DNSSEC_PROTOCOL_NONE = 0;
export const DNSSEC_PROTOCOL_TLS = 1;
export const DNSSEC_PROTOCOL_EMAIL = 2;
export const DNSSEC_PROTOCOL_DNSSEC = 3;
export const DNSSEC_PROTOCOL_IPSEC = 4;
export const DNSSEC_KEY_FLAG_NOAUTH = 1;
export const DNSSEC_KEY_FLAG_NOCONF = 2;
export const DNSSEC_KEY_FLAG_FLAG2 = 4;
export const DNSSEC_KEY_FLAG_EXTEND = 8;
export const DNSSEC_KEY_FLAG_FLAG4 = 16;
export const DNSSEC_KEY_FLAG_FLAG5 = 32;
export const DNSSEC_KEY_FLAG_USER = 0;
export const DNSSEC_KEY_FLAG_ZONE = 64;
export const DNSSEC_KEY_FLAG_HOST = 128;
export const DNSSEC_KEY_FLAG_NTPE3 = 192;
export const DNSSEC_KEY_FLAG_FLAG8 = 256;
export const DNSSEC_KEY_FLAG_FLAG9 = 512;
export const DNSSEC_KEY_FLAG_FLAG10 = 1024;
export const DNSSEC_KEY_FLAG_FLAG11 = 2048;
export const DNSSEC_KEY_FLAG_SIG0 = 0;
export const DNSSEC_KEY_FLAG_SIG1 = 4096;
export const DNSSEC_KEY_FLAG_SIG2 = 8192;
export const DNSSEC_KEY_FLAG_SIG3 = 12288;
export const DNSSEC_KEY_FLAG_SIG4 = 16384;
export const DNSSEC_KEY_FLAG_SIG5 = 20480;
export const DNSSEC_KEY_FLAG_SIG6 = 24576;
export const DNSSEC_KEY_FLAG_SIG7 = 28672;
export const DNSSEC_KEY_FLAG_SIG8 = 32768;
export const DNSSEC_KEY_FLAG_SIG9 = 36864;
export const DNSSEC_KEY_FLAG_SIG10 = 40960;
export const DNSSEC_KEY_FLAG_SIG11 = 45056;
export const DNSSEC_KEY_FLAG_SIG12 = 49152;
export const DNSSEC_KEY_FLAG_SIG13 = 53248;
export const DNSSEC_KEY_FLAG_SIG14 = 57344;
export const DNSSEC_KEY_FLAG_SIG15 = 61440;
export const DNS_TKEY_MODE_SERVER_ASSIGN = 1;
export const DNS_TKEY_MODE_DIFFIE_HELLMAN = 2;
export const DNS_TKEY_MODE_GSS = 3;
export const DNS_TKEY_MODE_RESOLVER_ASSIGN = 4;
export const DNS_WINS_FLAG_SCOPE = 2147483648;
export const DNS_WINS_FLAG_LOCAL = 65536;
export const DNS_CONFIG_FLAG_ALLOC = 1;
export const DNSREC_SECTION = 3;
export const DNSREC_QUESTION = 0;
export const DNSREC_ANSWER = 1;
export const DNSREC_AUTHORITY = 2;
export const DNSREC_ADDITIONAL = 3;
export const DNSREC_ZONE = 0;
export const DNSREC_PREREQ = 1;
export const DNSREC_UPDATE = 2;
export const DNSREC_DELETE = 4;
export const DNSREC_NOEXIST = 4;
export const DNS_QUERY_STANDARD = 0;
export const DNS_QUERY_ACCEPT_TRUNCATED_RESPONSE = 1;
export const DNS_QUERY_USE_TCP_ONLY = 2;
export const DNS_QUERY_NO_RECURSION = 4;
export const DNS_QUERY_BYPASS_CACHE = 8;
export const DNS_QUERY_NO_WIRE_QUERY = 16;
export const DNS_QUERY_NO_LOCAL_NAME = 32;
export const DNS_QUERY_NO_HOSTS_FILE = 64;
export const DNS_QUERY_NO_NETBT = 128;
export const DNS_QUERY_WIRE_ONLY = 256;
export const DNS_QUERY_RETURN_MESSAGE = 512;
export const DNS_QUERY_MULTICAST_ONLY = 1024;
export const DNS_QUERY_NO_MULTICAST = 2048;
export const DNS_QUERY_TREAT_AS_FQDN = 4096;
export const DNS_QUERY_ADDRCONFIG = 8192;
export const DNS_QUERY_DUAL_ADDR = 16384;
export const DNS_QUERY_DONT_RESET_TTL_VALUES = 1048576;
export const DNS_QUERY_DISABLE_IDN_ENCODING = 2097152;
export const DNS_QUERY_APPEND_MULTILABEL = 8388608;
export const DNS_QUERY_DNSSEC_OK = 16777216;
export const DNS_QUERY_DNSSEC_CHECKING_DISABLED = 33554432;
export const DNS_QUERY_RESERVED = 4026531840;
export const DNS_QUERY_CACHE_ONLY = 16;
export const DNS_QUERY_REQUEST_VERSION1 = 1;
export const DNS_QUERY_REQUEST_VERSION2 = 2;
export const DNS_QUERY_RESULTS_VERSION1 = 1;
export const DNS_QUERY_REQUEST_VERSION3 = 3;
export const DNS_CUSTOM_SERVER_TYPE_UDP = 1;
export const DNS_CUSTOM_SERVER_TYPE_DOH = 2;
export const DNS_CUSTOM_SERVER_UDP_FALLBACK = 1;
export const DNS_APP_SETTINGS_VERSION1 = 1;
export const DNS_APP_SETTINGS_EXCLUSIVE_SERVERS = 1;
export const DNS_UPDATE_SECURITY_USE_DEFAULT = 0;
export const DNS_UPDATE_SECURITY_OFF = 16;
export const DNS_UPDATE_SECURITY_ON = 32;
export const DNS_UPDATE_SECURITY_ONLY = 256;
export const DNS_UPDATE_CACHE_SECURITY_CONTEXT = 512;
export const DNS_UPDATE_TEST_USE_LOCAL_SYS_ACCT = 1024;
export const DNS_UPDATE_FORCE_SECURITY_NEGO = 2048;
export const DNS_UPDATE_TRY_ALL_MASTER_SERVERS = 4096;
export const DNS_UPDATE_SKIP_NO_UPDATE_ADAPTERS = 8192;
export const DNS_UPDATE_REMOTE_SERVER = 16384;
export const DNS_UPDATE_RESERVED = 4294901760;
export const DNS_VALSVR_ERROR_INVALID_ADDR = 1;
export const DNS_VALSVR_ERROR_INVALID_NAME = 2;
export const DNS_VALSVR_ERROR_UNREACHABLE = 3;
export const DNS_VALSVR_ERROR_NO_RESPONSE = 4;
export const DNS_VALSVR_ERROR_NO_AUTH = 5;
export const DNS_VALSVR_ERROR_REFUSED = 6;
export const DNS_VALSVR_ERROR_NO_TCP = 16;
export const DNS_VALSVR_ERROR_UNKNOWN = 255;
export const DNS_CONNECTION_NAME_MAX_LENGTH = 64;
export const DNS_CONNECTION_PROXY_INFO_CURRENT_VERSION = 1;
export const DNS_CONNECTION_PROXY_INFO_SERVER_MAX_LENGTH = 256;
export const DNS_CONNECTION_PROXY_INFO_FRIENDLY_NAME_MAX_LENGTH = 64;
export const DNS_CONNECTION_PROXY_INFO_USERNAME_MAX_LENGTH = 128;
export const DNS_CONNECTION_PROXY_INFO_PASSWORD_MAX_LENGTH = 128;
export const DNS_CONNECTION_PROXY_INFO_EXCEPTION_MAX_LENGTH = 1024;
export const DNS_CONNECTION_PROXY_INFO_EXTRA_INFO_MAX_LENGTH = 1024;
export const DNS_CONNECTION_PROXY_INFO_FLAG_DISABLED = 1;
export const DNS_CONNECTION_PROXY_INFO_FLAG_BYPASSLOCAL = 2;
export const DNS_CONNECTION_POLICY_ENTRY_ONDEMAND = 1;
export const DnsConfigPrimaryDomainName_W = 0;
export const DnsConfigPrimaryDomainName_A = 1;
export const DnsConfigPrimaryDomainName_UTF8 = 2;
export const DnsConfigAdapterDomainName_W = 3;
export const DnsConfigAdapterDomainName_A = 4;
export const DnsConfigAdapterDomainName_UTF8 = 5;
export const DnsConfigDnsServerList = 6;
export const DnsConfigSearchList = 7;
export const DnsConfigAdapterInfo = 8;
export const DnsConfigPrimaryHostNameRegistrationEnabled = 9;
export const DnsConfigAdapterHostNameRegistrationEnabled = 10;
export const DnsConfigAddressRegistrationMaxCount = 11;
export const DnsConfigHostName_W = 12;
export const DnsConfigHostName_A = 13;
export const DnsConfigHostName_UTF8 = 14;
export const DnsConfigFullHostName_W = 15;
export const DnsConfigFullHostName_A = 16;
export const DnsConfigFullHostName_UTF8 = 17;
export const DnsConfigNameServer = 18;
export const DnsSectionQuestion = 0;
export const DnsSectionAnswer = 1;
export const DnsSectionAuthority = 2;
export const DnsSectionAddtional = 3;
export const DNS_PROXY_INFORMATION_DIRECT = 0;
export const DNS_PROXY_INFORMATION_DEFAULT_SETTINGS = 1;
export const DNS_PROXY_INFORMATION_PROXY_NAME = 2;
export const DNS_PROXY_INFORMATION_DOES_NOT_EXIST = 3;
export const DnsCharSetUnknown = 0;
export const DnsCharSetUnicode = 1;
export const DnsCharSetUtf8 = 2;
export const DnsCharSetAnsi = 3;
export const DnsFreeFlat = 0;
export const DnsFreeRecordList = 1;
export const DnsFreeParsedMessageFields = 2;
export const DnsNameDomain = 0;
export const DnsNameDomainLabel = 1;
export const DnsNameHostnameFull = 2;
export const DnsNameHostnameLabel = 3;
export const DnsNameWildcard = 4;
export const DnsNameSrvRecord = 5;
export const DnsNameValidateTld = 6;
export const DNS_CONNECTION_PROXY_TYPE_NULL = 0;
export const DNS_CONNECTION_PROXY_TYPE_HTTP = 1;
export const DNS_CONNECTION_PROXY_TYPE_WAP = 2;
export const DNS_CONNECTION_PROXY_TYPE_SOCKS4 = 4;
export const DNS_CONNECTION_PROXY_TYPE_SOCKS5 = 5;
export const DNS_CONNECTION_PROXY_INFO_SWITCH_CONFIG = 0;
export const DNS_CONNECTION_PROXY_INFO_SWITCH_SCRIPT = 1;
export const DNS_CONNECTION_PROXY_INFO_SWITCH_WPAD = 2;
export const TAG_DNS_CONNECTION_POLICY_TAG_DEFAULT = 0;
export const TAG_DNS_CONNECTION_POLICY_TAG_CONNECTION_MANAGER = 1;
export const TAG_DNS_CONNECTION_POLICY_TAG_WWWPT = 2;

// Structs

export type DnsContextHandle = Deno.PointerValue;

/**
 * Windows.Win32.NetworkManagement.Dns.IP6_ADDRESS (size: 32)
 */
export interface IP6_ADDRESS {
  /** array */
  IP6Qword: Deno.PointerValue | null;
  /** array */
  IP6Dword: Deno.PointerValue | null;
  /** array */
  IP6Word: Deno.PointerValue | null;
  /** array */
  IP6Byte: Deno.PointerValue | null;
}

export const sizeofIP6_ADDRESS = 32;

export function allocIP6_ADDRESS(data?: Partial<IP6_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofIP6_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IP6Qword !== undefined) view.setBigUint64(0, data.IP6Qword === null ? 0n : BigInt(util.toPointer(data.IP6Qword)), true);
  // 0x08: pointer
  if (data?.IP6Dword !== undefined) view.setBigUint64(8, data.IP6Dword === null ? 0n : BigInt(util.toPointer(data.IP6Dword)), true);
  // 0x10: pointer
  if (data?.IP6Word !== undefined) view.setBigUint64(16, data.IP6Word === null ? 0n : BigInt(util.toPointer(data.IP6Word)), true);
  // 0x18: pointer
  if (data?.IP6Byte !== undefined) view.setBigUint64(24, data.IP6Byte === null ? 0n : BigInt(util.toPointer(data.IP6Byte)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.IP4_ARRAY (size: 16)
 */
export interface IP4_ARRAY {
  /** u32 */
  AddrCount: number;
  /** array */
  AddrArray: Deno.PointerValue | null;
}

export const sizeofIP4_ARRAY = 16;

export function allocIP4_ARRAY(data?: Partial<IP4_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofIP4_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AddrCount !== undefined) view.setUint32(0, Number(data.AddrCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AddrArray !== undefined) view.setBigUint64(8, data.AddrArray === null ? 0n : BigInt(util.toPointer(data.AddrArray)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_MSC_DATA (size: 8)
 */
export interface RFCOMM_MSC_DATA {
  /** u8 */
  Signals: number;
  /** u8 */
  Break: number;
}

export const sizeofRFCOMM_MSC_DATA = 8;

export function allocRFCOMM_MSC_DATA(data?: Partial<RFCOMM_MSC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_MSC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Signals !== undefined) view.setUint8(0, Number(data.Signals));
  // 0x01: u8
  if (data?.Break !== undefined) view.setUint8(1, Number(data.Break));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_RLS_DATA (size: 8)
 */
export interface RFCOMM_RLS_DATA {
  /** u8 */
  LineStatus: number;
}

export const sizeofRFCOMM_RLS_DATA = 8;

export function allocRFCOMM_RLS_DATA(data?: Partial<RFCOMM_RLS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_RLS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.LineStatus !== undefined) view.setUint8(0, Number(data.LineStatus));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_RPN_DATA (size: 8)
 */
export interface RFCOMM_RPN_DATA {
  /** u8 */
  Baud: number;
  /** u8 */
  Data: number;
  /** u8 */
  FlowControl: number;
  /** u8 */
  XonChar: number;
  /** u8 */
  XoffChar: number;
  /** u8 */
  ParameterMask1: number;
  /** u8 */
  ParameterMask2: number;
}

export const sizeofRFCOMM_RPN_DATA = 8;

export function allocRFCOMM_RPN_DATA(data?: Partial<RFCOMM_RPN_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_RPN_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Baud !== undefined) view.setUint8(0, Number(data.Baud));
  // 0x01: u8
  if (data?.Data !== undefined) view.setUint8(1, Number(data.Data));
  // 0x02: u8
  if (data?.FlowControl !== undefined) view.setUint8(2, Number(data.FlowControl));
  // 0x03: u8
  if (data?.XonChar !== undefined) view.setUint8(3, Number(data.XonChar));
  // 0x04: u8
  if (data?.XoffChar !== undefined) view.setUint8(4, Number(data.XoffChar));
  // 0x05: u8
  if (data?.ParameterMask1 !== undefined) view.setUint8(5, Number(data.ParameterMask1));
  // 0x06: u8
  if (data?.ParameterMask2 !== undefined) view.setUint8(6, Number(data.ParameterMask2));
  // 0x07: pad1
  return buf;
}

/**
 * _Data_e__Union (size: 24)
 */
export interface _Data_e__Union {
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_MSC_DATA */
  MSC: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_RLS_DATA */
  RLS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_RPN_DATA */
  RPN: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Data_e__Union = 24;

export function alloc_Data_e__Union(data?: Partial<_Data_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Data_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MSC !== undefined) view.setBigUint64(0, data.MSC === null ? 0n : BigInt(util.toPointer(data.MSC)), true);
  // 0x08: pointer
  if (data?.RLS !== undefined) view.setBigUint64(8, data.RLS === null ? 0n : BigInt(util.toPointer(data.RLS)), true);
  // 0x10: pointer
  if (data?.RPN !== undefined) view.setBigUint64(16, data.RPN === null ? 0n : BigInt(util.toPointer(data.RPN)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_ADDR (size: 16)
 */
export interface DNS_ADDR {
  /** array */
  MaxSa: Deno.PointerValue | null;
  /** _Data_e__Union */
  Data: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDNS_ADDR = 16;

export function allocDNS_ADDR(data?: Partial<DNS_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MaxSa !== undefined) view.setBigUint64(0, data.MaxSa === null ? 0n : BigInt(util.toPointer(data.MaxSa)), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_ADDR_ARRAY (size: 40)
 */
export interface DNS_ADDR_ARRAY {
  /** u32 */
  MaxCount: number;
  /** u32 */
  AddrCount: number;
  /** u32 */
  Tag: number;
  /** u16 */
  Family: number;
  /** u16 */
  WordReserved: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MatchFlag: number;
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** array */
  AddrArray: Deno.PointerValue | null;
}

export const sizeofDNS_ADDR_ARRAY = 40;

export function allocDNS_ADDR_ARRAY(data?: Partial<DNS_ADDR_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_ADDR_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxCount !== undefined) view.setUint32(0, Number(data.MaxCount), true);
  // 0x04: u32
  if (data?.AddrCount !== undefined) view.setUint32(4, Number(data.AddrCount), true);
  // 0x08: u32
  if (data?.Tag !== undefined) view.setUint32(8, Number(data.Tag), true);
  // 0x0c: u16
  if (data?.Family !== undefined) view.setUint16(12, Number(data.Family), true);
  // 0x0e: u16
  if (data?.WordReserved !== undefined) view.setUint16(14, Number(data.WordReserved), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.MatchFlag !== undefined) view.setUint32(20, Number(data.MatchFlag), true);
  // 0x18: u32
  if (data?.Reserved1 !== undefined) view.setUint32(24, Number(data.Reserved1), true);
  // 0x1c: u32
  if (data?.Reserved2 !== undefined) view.setUint32(28, Number(data.Reserved2), true);
  // 0x20: pointer
  if (data?.AddrArray !== undefined) view.setBigUint64(32, data.AddrArray === null ? 0n : BigInt(util.toPointer(data.AddrArray)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_HEADER (size: 16)
 */
export interface DNS_HEADER {
  /** u16 */
  Xid: number;
  /** u8 */
  _bitfield1: number;
  /** u8 */
  _bitfield2: number;
  /** u16 */
  QuestionCount: number;
  /** u16 */
  AnswerCount: number;
  /** u16 */
  NameServerCount: number;
  /** u16 */
  AdditionalCount: number;
}

export const sizeofDNS_HEADER = 16;

export function allocDNS_HEADER(data?: Partial<DNS_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Xid !== undefined) view.setUint16(0, Number(data.Xid), true);
  // 0x02: u8
  if (data?._bitfield1 !== undefined) view.setUint8(2, Number(data._bitfield1));
  // 0x03: u8
  if (data?._bitfield2 !== undefined) view.setUint8(3, Number(data._bitfield2));
  // 0x04: u16
  if (data?.QuestionCount !== undefined) view.setUint16(4, Number(data.QuestionCount), true);
  // 0x06: u16
  if (data?.AnswerCount !== undefined) view.setUint16(6, Number(data.AnswerCount), true);
  // 0x08: u16
  if (data?.NameServerCount !== undefined) view.setUint16(8, Number(data.NameServerCount), true);
  // 0x0a: u16
  if (data?.AdditionalCount !== undefined) view.setUint16(10, Number(data.AdditionalCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_HEADER_EXT (size: 8)
 */
export interface DNS_HEADER_EXT {
  /** u16 */
  _bitfield: number;
  /** u8 */
  chRcode: number;
  /** u8 */
  chVersion: number;
}

export const sizeofDNS_HEADER_EXT = 8;

export function allocDNS_HEADER_EXT(data?: Partial<DNS_HEADER_EXT>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_HEADER_EXT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: u8
  if (data?.chRcode !== undefined) view.setUint8(2, Number(data.chRcode));
  // 0x03: u8
  if (data?.chVersion !== undefined) view.setUint8(3, Number(data.chVersion));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_WIRE_QUESTION (size: 8)
 */
export interface DNS_WIRE_QUESTION {
  /** u16 */
  QuestionType: number;
  /** u16 */
  QuestionClass: number;
}

export const sizeofDNS_WIRE_QUESTION = 8;

export function allocDNS_WIRE_QUESTION(data?: Partial<DNS_WIRE_QUESTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_WIRE_QUESTION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.QuestionType !== undefined) view.setUint16(0, Number(data.QuestionType), true);
  // 0x02: u16
  if (data?.QuestionClass !== undefined) view.setUint16(2, Number(data.QuestionClass), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_WIRE_RECORD (size: 16)
 */
export interface DNS_WIRE_RECORD {
  /** u16 */
  RecordType: number;
  /** u16 */
  RecordClass: number;
  /** u32 */
  TimeToLive: number;
  /** u16 */
  DataLength: number;
}

export const sizeofDNS_WIRE_RECORD = 16;

export function allocDNS_WIRE_RECORD(data?: Partial<DNS_WIRE_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_WIRE_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.RecordType !== undefined) view.setUint16(0, Number(data.RecordType), true);
  // 0x02: u16
  if (data?.RecordClass !== undefined) view.setUint16(2, Number(data.RecordClass), true);
  // 0x04: u32
  if (data?.TimeToLive !== undefined) view.setUint32(4, Number(data.TimeToLive), true);
  // 0x08: u16
  if (data?.DataLength !== undefined) view.setUint16(8, Number(data.DataLength), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_A_DATA (size: 8)
 */
export interface DNS_A_DATA {
  /** u32 */
  IpAddress: number;
}

export const sizeofDNS_A_DATA = 8;

export function allocDNS_A_DATA(data?: Partial<DNS_A_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_A_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IpAddress !== undefined) view.setUint32(0, Number(data.IpAddress), true);
  // 0x04: pad4
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_PTR_DATAW (size: 8)
 */
export interface DNS_PTR_DATAW {
  /** Windows.Win32.Foundation.PWSTR */
  pNameHost: string | null;
}

export const sizeofDNS_PTR_DATAW = 8;

export function allocDNS_PTR_DATAW(data?: Partial<DNS_PTR_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_PTR_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameHost !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pNameHost);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_PTR_DATAA (size: 8)
 */
export interface DNS_PTR_DATAA {
  /** Windows.Win32.Foundation.PSTR */
  pNameHost: string | null;
}

export const sizeofDNS_PTR_DATAA = 8;

export function allocDNS_PTR_DATAA(data?: Partial<DNS_PTR_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_PTR_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameHost !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pNameHost);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_SOA_DATAW (size: 40)
 */
export interface DNS_SOA_DATAW {
  /** Windows.Win32.Foundation.PWSTR */
  pNamePrimaryServer: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pNameAdministrator: string | null;
  /** u32 */
  dwSerialNo: number;
  /** u32 */
  dwRefresh: number;
  /** u32 */
  dwRetry: number;
  /** u32 */
  dwExpire: number;
  /** u32 */
  dwDefaultTtl: number;
}

export const sizeofDNS_SOA_DATAW = 40;

export function allocDNS_SOA_DATAW(data?: Partial<DNS_SOA_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SOA_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNamePrimaryServer !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pNamePrimaryServer);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pNameAdministrator !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pNameAdministrator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwSerialNo !== undefined) view.setUint32(16, Number(data.dwSerialNo), true);
  // 0x14: u32
  if (data?.dwRefresh !== undefined) view.setUint32(20, Number(data.dwRefresh), true);
  // 0x18: u32
  if (data?.dwRetry !== undefined) view.setUint32(24, Number(data.dwRetry), true);
  // 0x1c: u32
  if (data?.dwExpire !== undefined) view.setUint32(28, Number(data.dwExpire), true);
  // 0x20: u32
  if (data?.dwDefaultTtl !== undefined) view.setUint32(32, Number(data.dwDefaultTtl), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_SOA_DATAA (size: 40)
 */
export interface DNS_SOA_DATAA {
  /** Windows.Win32.Foundation.PSTR */
  pNamePrimaryServer: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pNameAdministrator: string | null;
  /** u32 */
  dwSerialNo: number;
  /** u32 */
  dwRefresh: number;
  /** u32 */
  dwRetry: number;
  /** u32 */
  dwExpire: number;
  /** u32 */
  dwDefaultTtl: number;
}

export const sizeofDNS_SOA_DATAA = 40;

export function allocDNS_SOA_DATAA(data?: Partial<DNS_SOA_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SOA_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNamePrimaryServer !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pNamePrimaryServer);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pNameAdministrator !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pNameAdministrator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwSerialNo !== undefined) view.setUint32(16, Number(data.dwSerialNo), true);
  // 0x14: u32
  if (data?.dwRefresh !== undefined) view.setUint32(20, Number(data.dwRefresh), true);
  // 0x18: u32
  if (data?.dwRetry !== undefined) view.setUint32(24, Number(data.dwRetry), true);
  // 0x1c: u32
  if (data?.dwExpire !== undefined) view.setUint32(28, Number(data.dwExpire), true);
  // 0x20: u32
  if (data?.dwDefaultTtl !== undefined) view.setUint32(32, Number(data.dwDefaultTtl), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_MINFO_DATAW (size: 16)
 */
export interface DNS_MINFO_DATAW {
  /** Windows.Win32.Foundation.PWSTR */
  pNameMailbox: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pNameErrorsMailbox: string | null;
}

export const sizeofDNS_MINFO_DATAW = 16;

export function allocDNS_MINFO_DATAW(data?: Partial<DNS_MINFO_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_MINFO_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameMailbox !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pNameMailbox);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pNameErrorsMailbox !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pNameErrorsMailbox);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_MINFO_DATAA (size: 16)
 */
export interface DNS_MINFO_DATAA {
  /** Windows.Win32.Foundation.PSTR */
  pNameMailbox: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pNameErrorsMailbox: string | null;
}

export const sizeofDNS_MINFO_DATAA = 16;

export function allocDNS_MINFO_DATAA(data?: Partial<DNS_MINFO_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_MINFO_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameMailbox !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pNameMailbox);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pNameErrorsMailbox !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pNameErrorsMailbox);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_MX_DATAW (size: 16)
 */
export interface DNS_MX_DATAW {
  /** Windows.Win32.Foundation.PWSTR */
  pNameExchange: string | null;
  /** u16 */
  wPreference: number;
  /** u16 */
  Pad: number;
}

export const sizeofDNS_MX_DATAW = 16;

export function allocDNS_MX_DATAW(data?: Partial<DNS_MX_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_MX_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameExchange !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pNameExchange);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.wPreference !== undefined) view.setUint16(8, Number(data.wPreference), true);
  // 0x0a: u16
  if (data?.Pad !== undefined) view.setUint16(10, Number(data.Pad), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_MX_DATAA (size: 16)
 */
export interface DNS_MX_DATAA {
  /** Windows.Win32.Foundation.PSTR */
  pNameExchange: string | null;
  /** u16 */
  wPreference: number;
  /** u16 */
  Pad: number;
}

export const sizeofDNS_MX_DATAA = 16;

export function allocDNS_MX_DATAA(data?: Partial<DNS_MX_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_MX_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameExchange !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pNameExchange);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.wPreference !== undefined) view.setUint16(8, Number(data.wPreference), true);
  // 0x0a: u16
  if (data?.Pad !== undefined) view.setUint16(10, Number(data.Pad), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_TXT_DATAW (size: 16)
 */
export interface DNS_TXT_DATAW {
  /** u32 */
  dwStringCount: number;
  /** array */
  pStringArray: Deno.PointerValue | null;
}

export const sizeofDNS_TXT_DATAW = 16;

export function allocDNS_TXT_DATAW(data?: Partial<DNS_TXT_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_TXT_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStringCount !== undefined) view.setUint32(0, Number(data.dwStringCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pStringArray !== undefined) view.setBigUint64(8, data.pStringArray === null ? 0n : BigInt(util.toPointer(data.pStringArray)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_TXT_DATAA (size: 16)
 */
export interface DNS_TXT_DATAA {
  /** u32 */
  dwStringCount: number;
  /** array */
  pStringArray: Deno.PointerValue | null;
}

export const sizeofDNS_TXT_DATAA = 16;

export function allocDNS_TXT_DATAA(data?: Partial<DNS_TXT_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_TXT_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStringCount !== undefined) view.setUint32(0, Number(data.dwStringCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pStringArray !== undefined) view.setBigUint64(8, data.pStringArray === null ? 0n : BigInt(util.toPointer(data.pStringArray)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_NULL_DATA (size: 16)
 */
export interface DNS_NULL_DATA {
  /** u32 */
  dwByteCount: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofDNS_NULL_DATA = 16;

export function allocDNS_NULL_DATA(data?: Partial<DNS_NULL_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_NULL_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwByteCount !== undefined) view.setUint32(0, Number(data.dwByteCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_WKS_DATA (size: 16)
 */
export interface DNS_WKS_DATA {
  /** u32 */
  IpAddress: number;
  /** u8 */
  chProtocol: number;
  /** array */
  BitMask: Deno.PointerValue | null;
}

export const sizeofDNS_WKS_DATA = 16;

export function allocDNS_WKS_DATA(data?: Partial<DNS_WKS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_WKS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IpAddress !== undefined) view.setUint32(0, Number(data.IpAddress), true);
  // 0x04: u8
  if (data?.chProtocol !== undefined) view.setUint8(4, Number(data.chProtocol));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.BitMask !== undefined) view.setBigUint64(8, data.BitMask === null ? 0n : BigInt(util.toPointer(data.BitMask)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_AAAA_DATA (size: 8)
 */
export interface DNS_AAAA_DATA {
  /** Windows.Win32.NetworkManagement.Dns.IP6_ADDRESS */
  Ip6Address: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDNS_AAAA_DATA = 8;

export function allocDNS_AAAA_DATA(data?: Partial<DNS_AAAA_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_AAAA_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ip6Address !== undefined) view.setBigUint64(0, data.Ip6Address === null ? 0n : BigInt(util.toPointer(data.Ip6Address)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_SIG_DATAW (size: 40)
 */
export interface DNS_SIG_DATAW {
  /** u16 */
  wTypeCovered: number;
  /** u8 */
  chAlgorithm: number;
  /** u8 */
  chLabelCount: number;
  /** u32 */
  dwOriginalTtl: number;
  /** u32 */
  dwExpiration: number;
  /** u32 */
  dwTimeSigned: number;
  /** u16 */
  wKeyTag: number;
  /** u16 */
  wSignatureLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  pNameSigner: string | null;
  /** array */
  Signature: Deno.PointerValue | null;
}

export const sizeofDNS_SIG_DATAW = 40;

export function allocDNS_SIG_DATAW(data?: Partial<DNS_SIG_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SIG_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wTypeCovered !== undefined) view.setUint16(0, Number(data.wTypeCovered), true);
  // 0x02: u8
  if (data?.chAlgorithm !== undefined) view.setUint8(2, Number(data.chAlgorithm));
  // 0x03: u8
  if (data?.chLabelCount !== undefined) view.setUint8(3, Number(data.chLabelCount));
  // 0x04: u32
  if (data?.dwOriginalTtl !== undefined) view.setUint32(4, Number(data.dwOriginalTtl), true);
  // 0x08: u32
  if (data?.dwExpiration !== undefined) view.setUint32(8, Number(data.dwExpiration), true);
  // 0x0c: u32
  if (data?.dwTimeSigned !== undefined) view.setUint32(12, Number(data.dwTimeSigned), true);
  // 0x10: u16
  if (data?.wKeyTag !== undefined) view.setUint16(16, Number(data.wKeyTag), true);
  // 0x12: u16
  if (data?.wSignatureLength !== undefined) view.setUint16(18, Number(data.wSignatureLength), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pNameSigner !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pNameSigner);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.Signature !== undefined) view.setBigUint64(32, data.Signature === null ? 0n : BigInt(util.toPointer(data.Signature)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_SIG_DATAA (size: 40)
 */
export interface DNS_SIG_DATAA {
  /** u16 */
  wTypeCovered: number;
  /** u8 */
  chAlgorithm: number;
  /** u8 */
  chLabelCount: number;
  /** u32 */
  dwOriginalTtl: number;
  /** u32 */
  dwExpiration: number;
  /** u32 */
  dwTimeSigned: number;
  /** u16 */
  wKeyTag: number;
  /** u16 */
  wSignatureLength: number;
  /** Windows.Win32.Foundation.PSTR */
  pNameSigner: string | null;
  /** array */
  Signature: Deno.PointerValue | null;
}

export const sizeofDNS_SIG_DATAA = 40;

export function allocDNS_SIG_DATAA(data?: Partial<DNS_SIG_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SIG_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wTypeCovered !== undefined) view.setUint16(0, Number(data.wTypeCovered), true);
  // 0x02: u8
  if (data?.chAlgorithm !== undefined) view.setUint8(2, Number(data.chAlgorithm));
  // 0x03: u8
  if (data?.chLabelCount !== undefined) view.setUint8(3, Number(data.chLabelCount));
  // 0x04: u32
  if (data?.dwOriginalTtl !== undefined) view.setUint32(4, Number(data.dwOriginalTtl), true);
  // 0x08: u32
  if (data?.dwExpiration !== undefined) view.setUint32(8, Number(data.dwExpiration), true);
  // 0x0c: u32
  if (data?.dwTimeSigned !== undefined) view.setUint32(12, Number(data.dwTimeSigned), true);
  // 0x10: u16
  if (data?.wKeyTag !== undefined) view.setUint16(16, Number(data.wKeyTag), true);
  // 0x12: u16
  if (data?.wSignatureLength !== undefined) view.setUint16(18, Number(data.wSignatureLength), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pNameSigner !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pNameSigner);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.Signature !== undefined) view.setBigUint64(32, data.Signature === null ? 0n : BigInt(util.toPointer(data.Signature)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_KEY_DATA (size: 16)
 */
export interface DNS_KEY_DATA {
  /** u16 */
  wFlags: number;
  /** u8 */
  chProtocol: number;
  /** u8 */
  chAlgorithm: number;
  /** u16 */
  wKeyLength: number;
  /** u16 */
  wPad: number;
  /** array */
  Key: Deno.PointerValue | null;
}

export const sizeofDNS_KEY_DATA = 16;

export function allocDNS_KEY_DATA(data?: Partial<DNS_KEY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_KEY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wFlags !== undefined) view.setUint16(0, Number(data.wFlags), true);
  // 0x02: u8
  if (data?.chProtocol !== undefined) view.setUint8(2, Number(data.chProtocol));
  // 0x03: u8
  if (data?.chAlgorithm !== undefined) view.setUint8(3, Number(data.chAlgorithm));
  // 0x04: u16
  if (data?.wKeyLength !== undefined) view.setUint16(4, Number(data.wKeyLength), true);
  // 0x06: u16
  if (data?.wPad !== undefined) view.setUint16(6, Number(data.wPad), true);
  // 0x08: pointer
  if (data?.Key !== undefined) view.setBigUint64(8, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_DHCID_DATA (size: 16)
 */
export interface DNS_DHCID_DATA {
  /** u32 */
  dwByteCount: number;
  /** array */
  DHCID: Deno.PointerValue | null;
}

export const sizeofDNS_DHCID_DATA = 16;

export function allocDNS_DHCID_DATA(data?: Partial<DNS_DHCID_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_DHCID_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwByteCount !== undefined) view.setUint32(0, Number(data.dwByteCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DHCID !== undefined) view.setBigUint64(8, data.DHCID === null ? 0n : BigInt(util.toPointer(data.DHCID)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_NSEC_DATAW (size: 24)
 */
export interface DNS_NSEC_DATAW {
  /** Windows.Win32.Foundation.PWSTR */
  pNextDomainName: string | null;
  /** u16 */
  wTypeBitMapsLength: number;
  /** u16 */
  wPad: number;
  /** array */
  TypeBitMaps: Deno.PointerValue | null;
}

export const sizeofDNS_NSEC_DATAW = 24;

export function allocDNS_NSEC_DATAW(data?: Partial<DNS_NSEC_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_NSEC_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNextDomainName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pNextDomainName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.wTypeBitMapsLength !== undefined) view.setUint16(8, Number(data.wTypeBitMapsLength), true);
  // 0x0a: u16
  if (data?.wPad !== undefined) view.setUint16(10, Number(data.wPad), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.TypeBitMaps !== undefined) view.setBigUint64(16, data.TypeBitMaps === null ? 0n : BigInt(util.toPointer(data.TypeBitMaps)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_NSEC_DATAA (size: 24)
 */
export interface DNS_NSEC_DATAA {
  /** Windows.Win32.Foundation.PSTR */
  pNextDomainName: string | null;
  /** u16 */
  wTypeBitMapsLength: number;
  /** u16 */
  wPad: number;
  /** array */
  TypeBitMaps: Deno.PointerValue | null;
}

export const sizeofDNS_NSEC_DATAA = 24;

export function allocDNS_NSEC_DATAA(data?: Partial<DNS_NSEC_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_NSEC_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNextDomainName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pNextDomainName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.wTypeBitMapsLength !== undefined) view.setUint16(8, Number(data.wTypeBitMapsLength), true);
  // 0x0a: u16
  if (data?.wPad !== undefined) view.setUint16(10, Number(data.wPad), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.TypeBitMaps !== undefined) view.setBigUint64(16, data.TypeBitMaps === null ? 0n : BigInt(util.toPointer(data.TypeBitMaps)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_NSEC3_DATA (size: 16)
 */
export interface DNS_NSEC3_DATA {
  /** u8 */
  chAlgorithm: number;
  /** u8 */
  bFlags: number;
  /** u16 */
  wIterations: number;
  /** u8 */
  bSaltLength: number;
  /** u8 */
  bHashLength: number;
  /** u16 */
  wTypeBitMapsLength: number;
  /** array */
  chData: Deno.PointerValue | null;
}

export const sizeofDNS_NSEC3_DATA = 16;

export function allocDNS_NSEC3_DATA(data?: Partial<DNS_NSEC3_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_NSEC3_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.chAlgorithm !== undefined) view.setUint8(0, Number(data.chAlgorithm));
  // 0x01: u8
  if (data?.bFlags !== undefined) view.setUint8(1, Number(data.bFlags));
  // 0x02: u16
  if (data?.wIterations !== undefined) view.setUint16(2, Number(data.wIterations), true);
  // 0x04: u8
  if (data?.bSaltLength !== undefined) view.setUint8(4, Number(data.bSaltLength));
  // 0x05: u8
  if (data?.bHashLength !== undefined) view.setUint8(5, Number(data.bHashLength));
  // 0x06: u16
  if (data?.wTypeBitMapsLength !== undefined) view.setUint16(6, Number(data.wTypeBitMapsLength), true);
  // 0x08: pointer
  if (data?.chData !== undefined) view.setBigUint64(8, data.chData === null ? 0n : BigInt(util.toPointer(data.chData)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_NSEC3PARAM_DATA (size: 24)
 */
export interface DNS_NSEC3PARAM_DATA {
  /** u8 */
  chAlgorithm: number;
  /** u8 */
  bFlags: number;
  /** u16 */
  wIterations: number;
  /** u8 */
  bSaltLength: number;
  /** array */
  bPad: Deno.PointerValue | null;
  /** array */
  pbSalt: Deno.PointerValue | null;
}

export const sizeofDNS_NSEC3PARAM_DATA = 24;

export function allocDNS_NSEC3PARAM_DATA(data?: Partial<DNS_NSEC3PARAM_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_NSEC3PARAM_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.chAlgorithm !== undefined) view.setUint8(0, Number(data.chAlgorithm));
  // 0x01: u8
  if (data?.bFlags !== undefined) view.setUint8(1, Number(data.bFlags));
  // 0x02: u16
  if (data?.wIterations !== undefined) view.setUint16(2, Number(data.wIterations), true);
  // 0x04: u8
  if (data?.bSaltLength !== undefined) view.setUint8(4, Number(data.bSaltLength));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.bPad !== undefined) view.setBigUint64(8, data.bPad === null ? 0n : BigInt(util.toPointer(data.bPad)), true);
  // 0x10: pointer
  if (data?.pbSalt !== undefined) view.setBigUint64(16, data.pbSalt === null ? 0n : BigInt(util.toPointer(data.pbSalt)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_TLSA_DATA (size: 24)
 */
export interface DNS_TLSA_DATA {
  /** u8 */
  bCertUsage: number;
  /** u8 */
  bSelector: number;
  /** u8 */
  bMatchingType: number;
  /** u16 */
  bCertificateAssociationDataLength: number;
  /** array */
  bPad: Deno.PointerValue | null;
  /** array */
  bCertificateAssociationData: Deno.PointerValue | null;
}

export const sizeofDNS_TLSA_DATA = 24;

export function allocDNS_TLSA_DATA(data?: Partial<DNS_TLSA_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_TLSA_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bCertUsage !== undefined) view.setUint8(0, Number(data.bCertUsage));
  // 0x01: u8
  if (data?.bSelector !== undefined) view.setUint8(1, Number(data.bSelector));
  // 0x02: u8
  if (data?.bMatchingType !== undefined) view.setUint8(2, Number(data.bMatchingType));
  // 0x03: u16
  if (data?.bCertificateAssociationDataLength !== undefined) view.setUint16(3, Number(data.bCertificateAssociationDataLength), true);
  // 0x05: pad3
  // 0x08: pointer
  if (data?.bPad !== undefined) view.setBigUint64(8, data.bPad === null ? 0n : BigInt(util.toPointer(data.bPad)), true);
  // 0x10: pointer
  if (data?.bCertificateAssociationData !== undefined) view.setBigUint64(16, data.bCertificateAssociationData === null ? 0n : BigInt(util.toPointer(data.bCertificateAssociationData)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_DS_DATA (size: 16)
 */
export interface DNS_DS_DATA {
  /** u16 */
  wKeyTag: number;
  /** u8 */
  chAlgorithm: number;
  /** u8 */
  chDigestType: number;
  /** u16 */
  wDigestLength: number;
  /** u16 */
  wPad: number;
  /** array */
  Digest: Deno.PointerValue | null;
}

export const sizeofDNS_DS_DATA = 16;

export function allocDNS_DS_DATA(data?: Partial<DNS_DS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_DS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wKeyTag !== undefined) view.setUint16(0, Number(data.wKeyTag), true);
  // 0x02: u8
  if (data?.chAlgorithm !== undefined) view.setUint8(2, Number(data.chAlgorithm));
  // 0x03: u8
  if (data?.chDigestType !== undefined) view.setUint8(3, Number(data.chDigestType));
  // 0x04: u16
  if (data?.wDigestLength !== undefined) view.setUint16(4, Number(data.wDigestLength), true);
  // 0x06: u16
  if (data?.wPad !== undefined) view.setUint16(6, Number(data.wPad), true);
  // 0x08: pointer
  if (data?.Digest !== undefined) view.setBigUint64(8, data.Digest === null ? 0n : BigInt(util.toPointer(data.Digest)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_OPT_DATA (size: 16)
 */
export interface DNS_OPT_DATA {
  /** u16 */
  wDataLength: number;
  /** u16 */
  wPad: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofDNS_OPT_DATA = 16;

export function allocDNS_OPT_DATA(data?: Partial<DNS_OPT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_OPT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wDataLength !== undefined) view.setUint16(0, Number(data.wDataLength), true);
  // 0x02: u16
  if (data?.wPad !== undefined) view.setUint16(2, Number(data.wPad), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_LOC_DATA (size: 24)
 */
export interface DNS_LOC_DATA {
  /** u16 */
  wVersion: number;
  /** u16 */
  wSize: number;
  /** u16 */
  wHorPrec: number;
  /** u16 */
  wVerPrec: number;
  /** u32 */
  dwLatitude: number;
  /** u32 */
  dwLongitude: number;
  /** u32 */
  dwAltitude: number;
}

export const sizeofDNS_LOC_DATA = 24;

export function allocDNS_LOC_DATA(data?: Partial<DNS_LOC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_LOC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wVersion !== undefined) view.setUint16(0, Number(data.wVersion), true);
  // 0x02: u16
  if (data?.wSize !== undefined) view.setUint16(2, Number(data.wSize), true);
  // 0x04: u16
  if (data?.wHorPrec !== undefined) view.setUint16(4, Number(data.wHorPrec), true);
  // 0x06: u16
  if (data?.wVerPrec !== undefined) view.setUint16(6, Number(data.wVerPrec), true);
  // 0x08: u32
  if (data?.dwLatitude !== undefined) view.setUint32(8, Number(data.dwLatitude), true);
  // 0x0c: u32
  if (data?.dwLongitude !== undefined) view.setUint32(12, Number(data.dwLongitude), true);
  // 0x10: u32
  if (data?.dwAltitude !== undefined) view.setUint32(16, Number(data.dwAltitude), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_NXT_DATAW (size: 24)
 */
export interface DNS_NXT_DATAW {
  /** Windows.Win32.Foundation.PWSTR */
  pNameNext: string | null;
  /** u16 */
  wNumTypes: number;
  /** array */
  wTypes: Deno.PointerValue | null;
}

export const sizeofDNS_NXT_DATAW = 24;

export function allocDNS_NXT_DATAW(data?: Partial<DNS_NXT_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_NXT_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameNext !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pNameNext);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.wNumTypes !== undefined) view.setUint16(8, Number(data.wNumTypes), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.wTypes !== undefined) view.setBigUint64(16, data.wTypes === null ? 0n : BigInt(util.toPointer(data.wTypes)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_NXT_DATAA (size: 24)
 */
export interface DNS_NXT_DATAA {
  /** Windows.Win32.Foundation.PSTR */
  pNameNext: string | null;
  /** u16 */
  wNumTypes: number;
  /** array */
  wTypes: Deno.PointerValue | null;
}

export const sizeofDNS_NXT_DATAA = 24;

export function allocDNS_NXT_DATAA(data?: Partial<DNS_NXT_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_NXT_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameNext !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pNameNext);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.wNumTypes !== undefined) view.setUint16(8, Number(data.wNumTypes), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.wTypes !== undefined) view.setBigUint64(16, data.wTypes === null ? 0n : BigInt(util.toPointer(data.wTypes)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_SRV_DATAW (size: 16)
 */
export interface DNS_SRV_DATAW {
  /** Windows.Win32.Foundation.PWSTR */
  pNameTarget: string | null;
  /** u16 */
  wPriority: number;
  /** u16 */
  wWeight: number;
  /** u16 */
  wPort: number;
  /** u16 */
  Pad: number;
}

export const sizeofDNS_SRV_DATAW = 16;

export function allocDNS_SRV_DATAW(data?: Partial<DNS_SRV_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SRV_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameTarget !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pNameTarget);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.wPriority !== undefined) view.setUint16(8, Number(data.wPriority), true);
  // 0x0a: u16
  if (data?.wWeight !== undefined) view.setUint16(10, Number(data.wWeight), true);
  // 0x0c: u16
  if (data?.wPort !== undefined) view.setUint16(12, Number(data.wPort), true);
  // 0x0e: u16
  if (data?.Pad !== undefined) view.setUint16(14, Number(data.Pad), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_SRV_DATAA (size: 16)
 */
export interface DNS_SRV_DATAA {
  /** Windows.Win32.Foundation.PSTR */
  pNameTarget: string | null;
  /** u16 */
  wPriority: number;
  /** u16 */
  wWeight: number;
  /** u16 */
  wPort: number;
  /** u16 */
  Pad: number;
}

export const sizeofDNS_SRV_DATAA = 16;

export function allocDNS_SRV_DATAA(data?: Partial<DNS_SRV_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SRV_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameTarget !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pNameTarget);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.wPriority !== undefined) view.setUint16(8, Number(data.wPriority), true);
  // 0x0a: u16
  if (data?.wWeight !== undefined) view.setUint16(10, Number(data.wWeight), true);
  // 0x0c: u16
  if (data?.wPort !== undefined) view.setUint16(12, Number(data.wPort), true);
  // 0x0e: u16
  if (data?.Pad !== undefined) view.setUint16(14, Number(data.Pad), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_NAPTR_DATAW (size: 40)
 */
export interface DNS_NAPTR_DATAW {
  /** u16 */
  wOrder: number;
  /** u16 */
  wPreference: number;
  /** Windows.Win32.Foundation.PWSTR */
  pFlags: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pService: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pRegularExpression: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pReplacement: string | null;
}

export const sizeofDNS_NAPTR_DATAW = 40;

export function allocDNS_NAPTR_DATAW(data?: Partial<DNS_NAPTR_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_NAPTR_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wOrder !== undefined) view.setUint16(0, Number(data.wOrder), true);
  // 0x02: u16
  if (data?.wPreference !== undefined) view.setUint16(2, Number(data.wPreference), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pFlags !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pFlags);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pService !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pService);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pRegularExpression !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pRegularExpression);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pReplacement !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pReplacement);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_NAPTR_DATAA (size: 40)
 */
export interface DNS_NAPTR_DATAA {
  /** u16 */
  wOrder: number;
  /** u16 */
  wPreference: number;
  /** Windows.Win32.Foundation.PSTR */
  pFlags: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pService: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pRegularExpression: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pReplacement: string | null;
}

export const sizeofDNS_NAPTR_DATAA = 40;

export function allocDNS_NAPTR_DATAA(data?: Partial<DNS_NAPTR_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_NAPTR_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wOrder !== undefined) view.setUint16(0, Number(data.wOrder), true);
  // 0x02: u16
  if (data?.wPreference !== undefined) view.setUint16(2, Number(data.wPreference), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pFlags !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pFlags);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pService !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pService);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pRegularExpression !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pRegularExpression);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pReplacement !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pReplacement);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_ATMA_DATA (size: 16)
 */
export interface DNS_ATMA_DATA {
  /** u8 */
  AddressType: number;
  /** array */
  Address: Deno.PointerValue | null;
}

export const sizeofDNS_ATMA_DATA = 16;

export function allocDNS_ATMA_DATA(data?: Partial<DNS_ATMA_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_ATMA_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.AddressType !== undefined) view.setUint8(0, Number(data.AddressType));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_TKEY_DATAW (size: 56)
 */
export interface DNS_TKEY_DATAW {
  /** Windows.Win32.Foundation.PWSTR */
  pNameAlgorithm: string | null;
  /** ptr */
  pAlgorithmPacket: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pKey: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pOtherData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwCreateTime: number;
  /** u32 */
  dwExpireTime: number;
  /** u16 */
  wMode: number;
  /** u16 */
  wError: number;
  /** u16 */
  wKeyLength: number;
  /** u16 */
  wOtherLength: number;
  /** u8 */
  cAlgNameLength: number;
  /** Windows.Win32.Foundation.BOOL */
  bPacketPointers: boolean;
}

export const sizeofDNS_TKEY_DATAW = 56;

export function allocDNS_TKEY_DATAW(data?: Partial<DNS_TKEY_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_TKEY_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameAlgorithm !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pNameAlgorithm);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pAlgorithmPacket !== undefined) view.setBigUint64(8, data.pAlgorithmPacket === null ? 0n : BigInt(util.toPointer(data.pAlgorithmPacket)), true);
  // 0x10: pointer
  if (data?.pKey !== undefined) view.setBigUint64(16, data.pKey === null ? 0n : BigInt(util.toPointer(data.pKey)), true);
  // 0x18: pointer
  if (data?.pOtherData !== undefined) view.setBigUint64(24, data.pOtherData === null ? 0n : BigInt(util.toPointer(data.pOtherData)), true);
  // 0x20: u32
  if (data?.dwCreateTime !== undefined) view.setUint32(32, Number(data.dwCreateTime), true);
  // 0x24: u32
  if (data?.dwExpireTime !== undefined) view.setUint32(36, Number(data.dwExpireTime), true);
  // 0x28: u16
  if (data?.wMode !== undefined) view.setUint16(40, Number(data.wMode), true);
  // 0x2a: u16
  if (data?.wError !== undefined) view.setUint16(42, Number(data.wError), true);
  // 0x2c: u16
  if (data?.wKeyLength !== undefined) view.setUint16(44, Number(data.wKeyLength), true);
  // 0x2e: u16
  if (data?.wOtherLength !== undefined) view.setUint16(46, Number(data.wOtherLength), true);
  // 0x30: u8
  if (data?.cAlgNameLength !== undefined) view.setUint8(48, Number(data.cAlgNameLength));
  // 0x31: i32
  if (data?.bPacketPointers !== undefined) view.setInt32(49, Number(data.bPacketPointers), true);
  // 0x35: pad3
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_TKEY_DATAA (size: 56)
 */
export interface DNS_TKEY_DATAA {
  /** Windows.Win32.Foundation.PSTR */
  pNameAlgorithm: string | null;
  /** ptr */
  pAlgorithmPacket: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pKey: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pOtherData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwCreateTime: number;
  /** u32 */
  dwExpireTime: number;
  /** u16 */
  wMode: number;
  /** u16 */
  wError: number;
  /** u16 */
  wKeyLength: number;
  /** u16 */
  wOtherLength: number;
  /** u8 */
  cAlgNameLength: number;
  /** Windows.Win32.Foundation.BOOL */
  bPacketPointers: boolean;
}

export const sizeofDNS_TKEY_DATAA = 56;

export function allocDNS_TKEY_DATAA(data?: Partial<DNS_TKEY_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_TKEY_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameAlgorithm !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pNameAlgorithm);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pAlgorithmPacket !== undefined) view.setBigUint64(8, data.pAlgorithmPacket === null ? 0n : BigInt(util.toPointer(data.pAlgorithmPacket)), true);
  // 0x10: pointer
  if (data?.pKey !== undefined) view.setBigUint64(16, data.pKey === null ? 0n : BigInt(util.toPointer(data.pKey)), true);
  // 0x18: pointer
  if (data?.pOtherData !== undefined) view.setBigUint64(24, data.pOtherData === null ? 0n : BigInt(util.toPointer(data.pOtherData)), true);
  // 0x20: u32
  if (data?.dwCreateTime !== undefined) view.setUint32(32, Number(data.dwCreateTime), true);
  // 0x24: u32
  if (data?.dwExpireTime !== undefined) view.setUint32(36, Number(data.dwExpireTime), true);
  // 0x28: u16
  if (data?.wMode !== undefined) view.setUint16(40, Number(data.wMode), true);
  // 0x2a: u16
  if (data?.wError !== undefined) view.setUint16(42, Number(data.wError), true);
  // 0x2c: u16
  if (data?.wKeyLength !== undefined) view.setUint16(44, Number(data.wKeyLength), true);
  // 0x2e: u16
  if (data?.wOtherLength !== undefined) view.setUint16(46, Number(data.wOtherLength), true);
  // 0x30: u8
  if (data?.cAlgNameLength !== undefined) view.setUint8(48, Number(data.cAlgNameLength));
  // 0x31: i32
  if (data?.bPacketPointers !== undefined) view.setInt32(49, Number(data.bPacketPointers), true);
  // 0x35: pad3
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_TSIG_DATAW (size: 56)
 */
export interface DNS_TSIG_DATAW {
  /** Windows.Win32.Foundation.PWSTR */
  pNameAlgorithm: string | null;
  /** ptr */
  pAlgorithmPacket: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSignature: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pOtherData: Deno.PointerValue | Uint8Array | null;
  /** i64 */
  i64CreateTime: Deno.PointerValue;
  /** u16 */
  wFudgeTime: number;
  /** u16 */
  wOriginalXid: number;
  /** u16 */
  wError: number;
  /** u16 */
  wSigLength: number;
  /** u16 */
  wOtherLength: number;
  /** u8 */
  cAlgNameLength: number;
  /** Windows.Win32.Foundation.BOOL */
  bPacketPointers: boolean;
}

export const sizeofDNS_TSIG_DATAW = 56;

export function allocDNS_TSIG_DATAW(data?: Partial<DNS_TSIG_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_TSIG_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameAlgorithm !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pNameAlgorithm);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pAlgorithmPacket !== undefined) view.setBigUint64(8, data.pAlgorithmPacket === null ? 0n : BigInt(util.toPointer(data.pAlgorithmPacket)), true);
  // 0x10: pointer
  if (data?.pSignature !== undefined) view.setBigUint64(16, data.pSignature === null ? 0n : BigInt(util.toPointer(data.pSignature)), true);
  // 0x18: pointer
  if (data?.pOtherData !== undefined) view.setBigUint64(24, data.pOtherData === null ? 0n : BigInt(util.toPointer(data.pOtherData)), true);
  // 0x20: i64
  if (data?.i64CreateTime !== undefined) view.setBigInt64(32, BigInt(data.i64CreateTime), true);
  // 0x28: u16
  if (data?.wFudgeTime !== undefined) view.setUint16(40, Number(data.wFudgeTime), true);
  // 0x2a: u16
  if (data?.wOriginalXid !== undefined) view.setUint16(42, Number(data.wOriginalXid), true);
  // 0x2c: u16
  if (data?.wError !== undefined) view.setUint16(44, Number(data.wError), true);
  // 0x2e: u16
  if (data?.wSigLength !== undefined) view.setUint16(46, Number(data.wSigLength), true);
  // 0x30: u16
  if (data?.wOtherLength !== undefined) view.setUint16(48, Number(data.wOtherLength), true);
  // 0x32: u8
  if (data?.cAlgNameLength !== undefined) view.setUint8(50, Number(data.cAlgNameLength));
  // 0x33: i32
  if (data?.bPacketPointers !== undefined) view.setInt32(51, Number(data.bPacketPointers), true);
  // 0x37: pad1
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_TSIG_DATAA (size: 56)
 */
export interface DNS_TSIG_DATAA {
  /** Windows.Win32.Foundation.PSTR */
  pNameAlgorithm: string | null;
  /** ptr */
  pAlgorithmPacket: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSignature: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pOtherData: Deno.PointerValue | Uint8Array | null;
  /** i64 */
  i64CreateTime: Deno.PointerValue;
  /** u16 */
  wFudgeTime: number;
  /** u16 */
  wOriginalXid: number;
  /** u16 */
  wError: number;
  /** u16 */
  wSigLength: number;
  /** u16 */
  wOtherLength: number;
  /** u8 */
  cAlgNameLength: number;
  /** Windows.Win32.Foundation.BOOL */
  bPacketPointers: boolean;
}

export const sizeofDNS_TSIG_DATAA = 56;

export function allocDNS_TSIG_DATAA(data?: Partial<DNS_TSIG_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_TSIG_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pNameAlgorithm !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pNameAlgorithm);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pAlgorithmPacket !== undefined) view.setBigUint64(8, data.pAlgorithmPacket === null ? 0n : BigInt(util.toPointer(data.pAlgorithmPacket)), true);
  // 0x10: pointer
  if (data?.pSignature !== undefined) view.setBigUint64(16, data.pSignature === null ? 0n : BigInt(util.toPointer(data.pSignature)), true);
  // 0x18: pointer
  if (data?.pOtherData !== undefined) view.setBigUint64(24, data.pOtherData === null ? 0n : BigInt(util.toPointer(data.pOtherData)), true);
  // 0x20: i64
  if (data?.i64CreateTime !== undefined) view.setBigInt64(32, BigInt(data.i64CreateTime), true);
  // 0x28: u16
  if (data?.wFudgeTime !== undefined) view.setUint16(40, Number(data.wFudgeTime), true);
  // 0x2a: u16
  if (data?.wOriginalXid !== undefined) view.setUint16(42, Number(data.wOriginalXid), true);
  // 0x2c: u16
  if (data?.wError !== undefined) view.setUint16(44, Number(data.wError), true);
  // 0x2e: u16
  if (data?.wSigLength !== undefined) view.setUint16(46, Number(data.wSigLength), true);
  // 0x30: u16
  if (data?.wOtherLength !== undefined) view.setUint16(48, Number(data.wOtherLength), true);
  // 0x32: u8
  if (data?.cAlgNameLength !== undefined) view.setUint8(50, Number(data.cAlgNameLength));
  // 0x33: i32
  if (data?.bPacketPointers !== undefined) view.setInt32(51, Number(data.bPacketPointers), true);
  // 0x37: pad1
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_UNKNOWN_DATA (size: 16)
 */
export interface DNS_UNKNOWN_DATA {
  /** u32 */
  dwByteCount: number;
  /** array */
  bData: Deno.PointerValue | null;
}

export const sizeofDNS_UNKNOWN_DATA = 16;

export function allocDNS_UNKNOWN_DATA(data?: Partial<DNS_UNKNOWN_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_UNKNOWN_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwByteCount !== undefined) view.setUint32(0, Number(data.dwByteCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bData !== undefined) view.setBigUint64(8, data.bData === null ? 0n : BigInt(util.toPointer(data.bData)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_WINS_DATA (size: 24)
 */
export interface DNS_WINS_DATA {
  /** u32 */
  dwMappingFlag: number;
  /** u32 */
  dwLookupTimeout: number;
  /** u32 */
  dwCacheTimeout: number;
  /** u32 */
  cWinsServerCount: number;
  /** array */
  WinsServers: Deno.PointerValue | null;
}

export const sizeofDNS_WINS_DATA = 24;

export function allocDNS_WINS_DATA(data?: Partial<DNS_WINS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_WINS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMappingFlag !== undefined) view.setUint32(0, Number(data.dwMappingFlag), true);
  // 0x04: u32
  if (data?.dwLookupTimeout !== undefined) view.setUint32(4, Number(data.dwLookupTimeout), true);
  // 0x08: u32
  if (data?.dwCacheTimeout !== undefined) view.setUint32(8, Number(data.dwCacheTimeout), true);
  // 0x0c: u32
  if (data?.cWinsServerCount !== undefined) view.setUint32(12, Number(data.cWinsServerCount), true);
  // 0x10: pointer
  if (data?.WinsServers !== undefined) view.setBigUint64(16, data.WinsServers === null ? 0n : BigInt(util.toPointer(data.WinsServers)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_WINSR_DATAW (size: 24)
 */
export interface DNS_WINSR_DATAW {
  /** u32 */
  dwMappingFlag: number;
  /** u32 */
  dwLookupTimeout: number;
  /** u32 */
  dwCacheTimeout: number;
  /** Windows.Win32.Foundation.PWSTR */
  pNameResultDomain: string | null;
}

export const sizeofDNS_WINSR_DATAW = 24;

export function allocDNS_WINSR_DATAW(data?: Partial<DNS_WINSR_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_WINSR_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMappingFlag !== undefined) view.setUint32(0, Number(data.dwMappingFlag), true);
  // 0x04: u32
  if (data?.dwLookupTimeout !== undefined) view.setUint32(4, Number(data.dwLookupTimeout), true);
  // 0x08: u32
  if (data?.dwCacheTimeout !== undefined) view.setUint32(8, Number(data.dwCacheTimeout), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pNameResultDomain !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pNameResultDomain);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_WINSR_DATAA (size: 24)
 */
export interface DNS_WINSR_DATAA {
  /** u32 */
  dwMappingFlag: number;
  /** u32 */
  dwLookupTimeout: number;
  /** u32 */
  dwCacheTimeout: number;
  /** Windows.Win32.Foundation.PSTR */
  pNameResultDomain: string | null;
}

export const sizeofDNS_WINSR_DATAA = 24;

export function allocDNS_WINSR_DATAA(data?: Partial<DNS_WINSR_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_WINSR_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMappingFlag !== undefined) view.setUint32(0, Number(data.dwMappingFlag), true);
  // 0x04: u32
  if (data?.dwLookupTimeout !== undefined) view.setUint32(4, Number(data.dwLookupTimeout), true);
  // 0x08: u32
  if (data?.dwCacheTimeout !== undefined) view.setUint32(8, Number(data.dwCacheTimeout), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pNameResultDomain !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pNameResultDomain);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_RECORD_FLAGS (size: 8)
 */
export interface DNS_RECORD_FLAGS {
  /** u32 */
  _bitfield: number;
}

export const sizeofDNS_RECORD_FLAGS = 8;

export function allocDNS_RECORD_FLAGS(data?: Partial<DNS_RECORD_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_RECORD_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Flags_e__Union (size: 16)
 */
export interface _Flags_e__Union {
  /** u16 */
  AsWORD: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Flags_e__Union = 16;

export function alloc_Flags_e__Union(data?: Partial<_Flags_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Flags_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsWORD !== undefined) view.setUint16(0, Number(data.AsWORD), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_RECORDW (size: 48)
 */
export interface DNS_RECORDW {
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null;
  /** u16 */
  wType: number;
  /** u16 */
  wDataLength: number;
  /** _Flags_e__Union */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwTtl: number;
  /** u32 */
  dwReserved: number;
  /** _Data_e__Union */
  Data: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDNS_RECORDW = 48;

export function allocDNS_RECORDW(data?: Partial<DNS_RECORDW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_RECORDW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pNext !== undefined) view.setBigUint64(0, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.wType !== undefined) view.setUint16(16, Number(data.wType), true);
  // 0x12: u16
  if (data?.wDataLength !== undefined) view.setUint16(18, Number(data.wDataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Flags !== undefined) view.setBigUint64(24, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x20: u32
  if (data?.dwTtl !== undefined) view.setUint32(32, Number(data.dwTtl), true);
  // 0x24: u32
  if (data?.dwReserved !== undefined) view.setUint32(36, Number(data.dwReserved), true);
  // 0x28: pointer
  if (data?.Data !== undefined) view.setBigUint64(40, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_RECORD_OPTW (size: 56)
 */
export interface DNS_RECORD_OPTW {
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null;
  /** u16 */
  wType: number;
  /** u16 */
  wDataLength: number;
  /** _Flags_e__Union */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Dns.DNS_HEADER_EXT */
  ExtHeader: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wPayloadSize: number;
  /** u16 */
  wReserved: number;
  /** _Data_e__Union */
  Data: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDNS_RECORD_OPTW = 56;

export function allocDNS_RECORD_OPTW(data?: Partial<DNS_RECORD_OPTW>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_RECORD_OPTW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pNext !== undefined) view.setBigUint64(0, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.wType !== undefined) view.setUint16(16, Number(data.wType), true);
  // 0x12: u16
  if (data?.wDataLength !== undefined) view.setUint16(18, Number(data.wDataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Flags !== undefined) view.setBigUint64(24, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x20: pointer
  if (data?.ExtHeader !== undefined) view.setBigUint64(32, data.ExtHeader === null ? 0n : BigInt(util.toPointer(data.ExtHeader)), true);
  // 0x28: u16
  if (data?.wPayloadSize !== undefined) view.setUint16(40, Number(data.wPayloadSize), true);
  // 0x2a: u16
  if (data?.wReserved !== undefined) view.setUint16(42, Number(data.wReserved), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Data !== undefined) view.setBigUint64(48, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_RECORDA (size: 48)
 */
export interface DNS_RECORDA {
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null;
  /** u16 */
  wType: number;
  /** u16 */
  wDataLength: number;
  /** _Flags_e__Union */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwTtl: number;
  /** u32 */
  dwReserved: number;
  /** _Data_e__Union */
  Data: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDNS_RECORDA = 48;

export function allocDNS_RECORDA(data?: Partial<DNS_RECORDA>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_RECORDA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pNext !== undefined) view.setBigUint64(0, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.wType !== undefined) view.setUint16(16, Number(data.wType), true);
  // 0x12: u16
  if (data?.wDataLength !== undefined) view.setUint16(18, Number(data.wDataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Flags !== undefined) view.setBigUint64(24, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x20: u32
  if (data?.dwTtl !== undefined) view.setUint32(32, Number(data.dwTtl), true);
  // 0x24: u32
  if (data?.dwReserved !== undefined) view.setUint32(36, Number(data.dwReserved), true);
  // 0x28: pointer
  if (data?.Data !== undefined) view.setBigUint64(40, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns._DnsRecordOptA (size: 56)
 */
export interface _DnsRecordOptA {
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null;
  /** u16 */
  wType: number;
  /** u16 */
  wDataLength: number;
  /** _Flags_e__Union */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Dns.DNS_HEADER_EXT */
  ExtHeader: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wPayloadSize: number;
  /** u16 */
  wReserved: number;
  /** _Data_e__Union */
  Data: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_DnsRecordOptA = 56;

export function alloc_DnsRecordOptA(data?: Partial<_DnsRecordOptA>): Uint8Array {
  const buf = new Uint8Array(sizeof_DnsRecordOptA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pNext !== undefined) view.setBigUint64(0, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.wType !== undefined) view.setUint16(16, Number(data.wType), true);
  // 0x12: u16
  if (data?.wDataLength !== undefined) view.setUint16(18, Number(data.wDataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Flags !== undefined) view.setBigUint64(24, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x20: pointer
  if (data?.ExtHeader !== undefined) view.setBigUint64(32, data.ExtHeader === null ? 0n : BigInt(util.toPointer(data.ExtHeader)), true);
  // 0x28: u16
  if (data?.wPayloadSize !== undefined) view.setUint16(40, Number(data.wPayloadSize), true);
  // 0x2a: u16
  if (data?.wReserved !== undefined) view.setUint16(42, Number(data.wReserved), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Data !== undefined) view.setBigUint64(48, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_RRSET (size: 16)
 */
export interface DNS_RRSET {
  /** ptr */
  pFirstRR: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pLastRR: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDNS_RRSET = 16;

export function allocDNS_RRSET(data?: Partial<DNS_RRSET>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_RRSET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pFirstRR !== undefined) view.setBigUint64(0, data.pFirstRR === null ? 0n : BigInt(util.toPointer(data.pFirstRR)), true);
  // 0x08: pointer
  if (data?.pLastRR !== undefined) view.setBigUint64(8, data.pLastRR === null ? 0n : BigInt(util.toPointer(data.pLastRR)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_PROXY_INFORMATION (size: 16)
 */
export interface DNS_PROXY_INFORMATION {
  /** u32 */
  version: number;
  /** Windows.Win32.NetworkManagement.Dns.DNS_PROXY_INFORMATION_TYPE */
  proxyInformationType: DNS_PROXY_INFORMATION_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  proxyName: string | null;
}

export const sizeofDNS_PROXY_INFORMATION = 16;

export function allocDNS_PROXY_INFORMATION(data?: Partial<DNS_PROXY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_PROXY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: i32
  if (data?.proxyInformationType !== undefined) view.setInt32(4, Number(data.proxyInformationType), true);
  // 0x08: buffer
  if (data?.proxyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.proxyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_QUERY_RESULT (size: 32)
 */
export interface DNS_QUERY_RESULT {
  /** u32 */
  Version: number;
  /** i32 */
  QueryStatus: number;
  /** u64 */
  QueryOptions: Deno.PointerValue;
  /** ptr */
  pQueryRecords: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDNS_QUERY_RESULT = 32;

export function allocDNS_QUERY_RESULT(data?: Partial<DNS_QUERY_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_QUERY_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: i32
  if (data?.QueryStatus !== undefined) view.setInt32(4, Number(data.QueryStatus), true);
  // 0x08: u64
  if (data?.QueryOptions !== undefined) view.setBigUint64(8, BigInt(data.QueryOptions), true);
  // 0x10: pointer
  if (data?.pQueryRecords !== undefined) view.setBigUint64(16, data.pQueryRecords === null ? 0n : BigInt(util.toPointer(data.pQueryRecords)), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_QUERY_REQUEST (size: 64)
 */
export interface DNS_QUERY_REQUEST {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PWSTR */
  QueryName: string | null;
  /** u16 */
  QueryType: number;
  /** u64 */
  QueryOptions: Deno.PointerValue;
  /** ptr */
  pDnsServerList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  InterfaceIndex: number;
  /** Windows.Win32.NetworkManagement.Dns.PDNS_QUERY_COMPLETION_ROUTINE */
  pQueryCompletionCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pQueryContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDNS_QUERY_REQUEST = 64;

export function allocDNS_QUERY_REQUEST(data?: Partial<DNS_QUERY_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_QUERY_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.QueryName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.QueryName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.QueryType !== undefined) view.setUint16(16, Number(data.QueryType), true);
  // 0x12: pad6
  // 0x18: u64
  if (data?.QueryOptions !== undefined) view.setBigUint64(24, BigInt(data.QueryOptions), true);
  // 0x20: pointer
  if (data?.pDnsServerList !== undefined) view.setBigUint64(32, data.pDnsServerList === null ? 0n : BigInt(util.toPointer(data.pDnsServerList)), true);
  // 0x28: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(40, Number(data.InterfaceIndex), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pQueryCompletionCallback !== undefined) view.setBigUint64(48, data.pQueryCompletionCallback === null ? 0n : BigInt(util.toPointer(data.pQueryCompletionCallback)), true);
  // 0x38: pointer
  if (data?.pQueryContext !== undefined) view.setBigUint64(56, data.pQueryContext === null ? 0n : BigInt(util.toPointer(data.pQueryContext)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_QUERY_CANCEL (size: 8)
 */
export interface DNS_QUERY_CANCEL {
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofDNS_QUERY_CANCEL = 8;

export function allocDNS_QUERY_CANCEL(data?: Partial<DNS_QUERY_CANCEL>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_QUERY_CANCEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(0, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_CUSTOM_SERVER (size: 32)
 */
export interface DNS_CUSTOM_SERVER {
  /** u32 */
  dwServerType: number;
  /** u64 */
  ullFlags: Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDNS_CUSTOM_SERVER = 32;

export function allocDNS_CUSTOM_SERVER(data?: Partial<DNS_CUSTOM_SERVER>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_CUSTOM_SERVER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServerType !== undefined) view.setUint32(0, Number(data.dwServerType), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.ullFlags !== undefined) view.setBigUint64(8, BigInt(data.ullFlags), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_QUERY_REQUEST3 (size: 88)
 */
export interface DNS_QUERY_REQUEST3 {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PWSTR */
  QueryName: string | null;
  /** u16 */
  QueryType: number;
  /** u64 */
  QueryOptions: Deno.PointerValue;
  /** ptr */
  pDnsServerList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  InterfaceIndex: number;
  /** Windows.Win32.NetworkManagement.Dns.PDNS_QUERY_COMPLETION_ROUTINE */
  pQueryCompletionCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pQueryContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  IsNetworkQueryRequired: boolean;
  /** u32 */
  RequiredNetworkIndex: number;
  /** u32 */
  cCustomServers: number;
  /** ptr */
  pCustomServers: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDNS_QUERY_REQUEST3 = 88;

export function allocDNS_QUERY_REQUEST3(data?: Partial<DNS_QUERY_REQUEST3>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_QUERY_REQUEST3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.QueryName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.QueryName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.QueryType !== undefined) view.setUint16(16, Number(data.QueryType), true);
  // 0x12: pad6
  // 0x18: u64
  if (data?.QueryOptions !== undefined) view.setBigUint64(24, BigInt(data.QueryOptions), true);
  // 0x20: pointer
  if (data?.pDnsServerList !== undefined) view.setBigUint64(32, data.pDnsServerList === null ? 0n : BigInt(util.toPointer(data.pDnsServerList)), true);
  // 0x28: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(40, Number(data.InterfaceIndex), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pQueryCompletionCallback !== undefined) view.setBigUint64(48, data.pQueryCompletionCallback === null ? 0n : BigInt(util.toPointer(data.pQueryCompletionCallback)), true);
  // 0x38: pointer
  if (data?.pQueryContext !== undefined) view.setBigUint64(56, data.pQueryContext === null ? 0n : BigInt(util.toPointer(data.pQueryContext)), true);
  // 0x40: i32
  if (data?.IsNetworkQueryRequired !== undefined) view.setInt32(64, Number(data.IsNetworkQueryRequired), true);
  // 0x44: u32
  if (data?.RequiredNetworkIndex !== undefined) view.setUint32(68, Number(data.RequiredNetworkIndex), true);
  // 0x48: u32
  if (data?.cCustomServers !== undefined) view.setUint32(72, Number(data.cCustomServers), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pCustomServers !== undefined) view.setBigUint64(80, data.pCustomServers === null ? 0n : BigInt(util.toPointer(data.pCustomServers)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_APPLICATION_SETTINGS (size: 16)
 */
export interface DNS_APPLICATION_SETTINGS {
  /** u32 */
  Version: number;
  /** u64 */
  Flags: Deno.PointerValue;
}

export const sizeofDNS_APPLICATION_SETTINGS = 16;

export function allocDNS_APPLICATION_SETTINGS(data?: Partial<DNS_APPLICATION_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_APPLICATION_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_MESSAGE_BUFFER (size: 16)
 */
export interface DNS_MESSAGE_BUFFER {
  /** Windows.Win32.NetworkManagement.Dns.DNS_HEADER */
  MessageHead: Uint8Array | Deno.PointerValue | null;
  /** array */
  MessageBody: Deno.PointerValue | null;
}

export const sizeofDNS_MESSAGE_BUFFER = 16;

export function allocDNS_MESSAGE_BUFFER(data?: Partial<DNS_MESSAGE_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_MESSAGE_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MessageHead !== undefined) view.setBigUint64(0, data.MessageHead === null ? 0n : BigInt(util.toPointer(data.MessageHead)), true);
  // 0x08: pointer
  if (data?.MessageBody !== undefined) view.setBigUint64(8, data.MessageBody === null ? 0n : BigInt(util.toPointer(data.MessageBody)), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_PROXY_INFO (size: 32)
 */
export interface DNS_CONNECTION_PROXY_INFO {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_PROXY_INFO_SWITCH */
  Switch: DNS_CONNECTION_PROXY_INFO_SWITCH;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDNS_CONNECTION_PROXY_INFO = 32;

export function allocDNS_CONNECTION_PROXY_INFO(data?: Partial<DNS_CONNECTION_PROXY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_CONNECTION_PROXY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: i32
  if (data?.Switch !== undefined) view.setInt32(20, Number(data.Switch), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_PROXY_INFO_EX (size: 40)
 */
export interface DNS_CONNECTION_PROXY_INFO_EX {
  /** Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_PROXY_INFO */
  ProxyInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwInterfaceIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszConnectionName: string | null;
  /** Windows.Win32.Foundation.BOOL */
  fDirectConfiguration: boolean;
  /** Windows.Win32.Foundation.HANDLE */
  hConnection: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDNS_CONNECTION_PROXY_INFO_EX = 40;

export function allocDNS_CONNECTION_PROXY_INFO_EX(data?: Partial<DNS_CONNECTION_PROXY_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_CONNECTION_PROXY_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProxyInfo !== undefined) view.setBigUint64(0, data.ProxyInfo === null ? 0n : BigInt(util.toPointer(data.ProxyInfo)), true);
  // 0x08: u32
  if (data?.dwInterfaceIndex !== undefined) view.setUint32(8, Number(data.dwInterfaceIndex), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pwszConnectionName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszConnectionName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.fDirectConfiguration !== undefined) view.setInt32(24, Number(data.fDirectConfiguration), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hConnection !== undefined) view.setBigUint64(32, data.hConnection === null ? 0n : BigInt(util.toPointer(data.hConnection)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_PROXY_ELEMENT (size: 16)
 */
export interface DNS_CONNECTION_PROXY_ELEMENT {
  /** Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_PROXY_TYPE */
  Type: DNS_CONNECTION_PROXY_TYPE;
  /** Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_PROXY_INFO */
  Info: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDNS_CONNECTION_PROXY_ELEMENT = 16;

export function allocDNS_CONNECTION_PROXY_ELEMENT(data?: Partial<DNS_CONNECTION_PROXY_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_CONNECTION_PROXY_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Info !== undefined) view.setBigUint64(8, data.Info === null ? 0n : BigInt(util.toPointer(data.Info)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_PROXY_LIST (size: 16)
 */
export interface DNS_CONNECTION_PROXY_LIST {
  /** u32 */
  cProxies: number;
  /** ptr */
  pProxies: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDNS_CONNECTION_PROXY_LIST = 16;

export function allocDNS_CONNECTION_PROXY_LIST(data?: Partial<DNS_CONNECTION_PROXY_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_CONNECTION_PROXY_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cProxies !== undefined) view.setUint32(0, Number(data.cProxies), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pProxies !== undefined) view.setBigUint64(8, data.pProxies === null ? 0n : BigInt(util.toPointer(data.pProxies)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_NAME (size: 8)
 */
export interface DNS_CONNECTION_NAME {
  /** array */
  wszName: Deno.PointerValue | null;
}

export const sizeofDNS_CONNECTION_NAME = 8;

export function allocDNS_CONNECTION_NAME(data?: Partial<DNS_CONNECTION_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_CONNECTION_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszName !== undefined) view.setBigUint64(0, data.wszName === null ? 0n : BigInt(util.toPointer(data.wszName)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_NAME_LIST (size: 16)
 */
export interface DNS_CONNECTION_NAME_LIST {
  /** u32 */
  cNames: number;
  /** ptr */
  pNames: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDNS_CONNECTION_NAME_LIST = 16;

export function allocDNS_CONNECTION_NAME_LIST(data?: Partial<DNS_CONNECTION_NAME_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_CONNECTION_NAME_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cNames !== undefined) view.setUint32(0, Number(data.cNames), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pNames !== undefined) view.setBigUint64(8, data.pNames === null ? 0n : BigInt(util.toPointer(data.pNames)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_IFINDEX_ENTRY (size: 16)
 */
export interface DNS_CONNECTION_IFINDEX_ENTRY {
  /** Windows.Win32.Foundation.PWSTR */
  pwszConnectionName: string | null;
  /** u32 */
  dwIfIndex: number;
}

export const sizeofDNS_CONNECTION_IFINDEX_ENTRY = 16;

export function allocDNS_CONNECTION_IFINDEX_ENTRY(data?: Partial<DNS_CONNECTION_IFINDEX_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_CONNECTION_IFINDEX_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszConnectionName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszConnectionName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwIfIndex !== undefined) view.setUint32(8, Number(data.dwIfIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_IFINDEX_LIST (size: 16)
 */
export interface DNS_CONNECTION_IFINDEX_LIST {
  /** ptr */
  pConnectionIfIndexEntries: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  nEntries: number;
}

export const sizeofDNS_CONNECTION_IFINDEX_LIST = 16;

export function allocDNS_CONNECTION_IFINDEX_LIST(data?: Partial<DNS_CONNECTION_IFINDEX_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_CONNECTION_IFINDEX_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pConnectionIfIndexEntries !== undefined) view.setBigUint64(0, data.pConnectionIfIndexEntries === null ? 0n : BigInt(util.toPointer(data.pConnectionIfIndexEntries)), true);
  // 0x08: u32
  if (data?.nEntries !== undefined) view.setUint32(8, Number(data.nEntries), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_POLICY_ENTRY (size: 56)
 */
export interface DNS_CONNECTION_POLICY_ENTRY {
  /** Windows.Win32.Foundation.PWSTR */
  pwszHost: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszAppId: string | null;
  /** u32 */
  cbAppSid: number;
  /** ptr */
  pbAppSid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  nConnections: number;
  /** ptr */
  ppwszConnections: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwPolicyEntryFlags: number;
}

export const sizeofDNS_CONNECTION_POLICY_ENTRY = 56;

export function allocDNS_CONNECTION_POLICY_ENTRY(data?: Partial<DNS_CONNECTION_POLICY_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_CONNECTION_POLICY_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszHost !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszHost);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszAppId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszAppId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cbAppSid !== undefined) view.setUint32(16, Number(data.cbAppSid), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbAppSid !== undefined) view.setBigUint64(24, data.pbAppSid === null ? 0n : BigInt(util.toPointer(data.pbAppSid)), true);
  // 0x20: u32
  if (data?.nConnections !== undefined) view.setUint32(32, Number(data.nConnections), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ppwszConnections !== undefined) view.setBigUint64(40, data.ppwszConnections === null ? 0n : BigInt(util.toPointer(data.ppwszConnections)), true);
  // 0x30: u32
  if (data?.dwPolicyEntryFlags !== undefined) view.setUint32(48, Number(data.dwPolicyEntryFlags), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_POLICY_ENTRY_LIST (size: 16)
 */
export interface DNS_CONNECTION_POLICY_ENTRY_LIST {
  /** ptr */
  pPolicyEntries: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  nEntries: number;
}

export const sizeofDNS_CONNECTION_POLICY_ENTRY_LIST = 16;

export function allocDNS_CONNECTION_POLICY_ENTRY_LIST(data?: Partial<DNS_CONNECTION_POLICY_ENTRY_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_CONNECTION_POLICY_ENTRY_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pPolicyEntries !== undefined) view.setBigUint64(0, data.pPolicyEntries === null ? 0n : BigInt(util.toPointer(data.pPolicyEntries)), true);
  // 0x08: u32
  if (data?.nEntries !== undefined) view.setUint32(8, Number(data.nEntries), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_SERVICE_INSTANCE (size: 72)
 */
export interface DNS_SERVICE_INSTANCE {
  /** Windows.Win32.Foundation.PWSTR */
  pszInstanceName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszHostName: string | null;
  /** ptr */
  ip4Address: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ip6Address: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  wPort: number;
  /** u16 */
  wPriority: number;
  /** u16 */
  wWeight: number;
  /** u32 */
  dwPropertyCount: number;
  /** ptr */
  keys: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  values: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwInterfaceIndex: number;
}

export const sizeofDNS_SERVICE_INSTANCE = 72;

export function allocDNS_SERVICE_INSTANCE(data?: Partial<DNS_SERVICE_INSTANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SERVICE_INSTANCE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszInstanceName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszInstanceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszHostName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszHostName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.ip4Address !== undefined) view.setBigUint64(16, data.ip4Address === null ? 0n : BigInt(util.toPointer(data.ip4Address)), true);
  // 0x18: pointer
  if (data?.ip6Address !== undefined) view.setBigUint64(24, data.ip6Address === null ? 0n : BigInt(util.toPointer(data.ip6Address)), true);
  // 0x20: u16
  if (data?.wPort !== undefined) view.setUint16(32, Number(data.wPort), true);
  // 0x22: u16
  if (data?.wPriority !== undefined) view.setUint16(34, Number(data.wPriority), true);
  // 0x24: u16
  if (data?.wWeight !== undefined) view.setUint16(36, Number(data.wWeight), true);
  // 0x26: u32
  if (data?.dwPropertyCount !== undefined) view.setUint32(38, Number(data.dwPropertyCount), true);
  // 0x2a: pad6
  // 0x30: pointer
  if (data?.keys !== undefined) view.setBigUint64(48, data.keys === null ? 0n : BigInt(util.toPointer(data.keys)), true);
  // 0x38: pointer
  if (data?.values !== undefined) view.setBigUint64(56, data.values === null ? 0n : BigInt(util.toPointer(data.values)), true);
  // 0x40: u32
  if (data?.dwInterfaceIndex !== undefined) view.setUint32(64, Number(data.dwInterfaceIndex), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_SERVICE_CANCEL (size: 8)
 */
export interface DNS_SERVICE_CANCEL {
  /** ptr */
  reserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDNS_SERVICE_CANCEL = 8;

export function allocDNS_SERVICE_CANCEL(data?: Partial<DNS_SERVICE_CANCEL>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SERVICE_CANCEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.reserved !== undefined) view.setBigUint64(0, data.reserved === null ? 0n : BigInt(util.toPointer(data.reserved)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_SERVICE_BROWSE_REQUEST (size: 32)
 */
export interface DNS_SERVICE_BROWSE_REQUEST {
  /** u32 */
  Version: number;
  /** u32 */
  InterfaceIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  QueryName: string | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pQueryContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDNS_SERVICE_BROWSE_REQUEST = 32;

export function allocDNS_SERVICE_BROWSE_REQUEST(data?: Partial<DNS_SERVICE_BROWSE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SERVICE_BROWSE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(4, Number(data.InterfaceIndex), true);
  // 0x08: buffer
  if (data?.QueryName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.QueryName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.pQueryContext !== undefined) view.setBigUint64(24, data.pQueryContext === null ? 0n : BigInt(util.toPointer(data.pQueryContext)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_SERVICE_RESOLVE_REQUEST (size: 32)
 */
export interface DNS_SERVICE_RESOLVE_REQUEST {
  /** u32 */
  Version: number;
  /** u32 */
  InterfaceIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  QueryName: string | null;
  /** Windows.Win32.NetworkManagement.Dns.PDNS_SERVICE_RESOLVE_COMPLETE */
  pResolveCompletionCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pQueryContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDNS_SERVICE_RESOLVE_REQUEST = 32;

export function allocDNS_SERVICE_RESOLVE_REQUEST(data?: Partial<DNS_SERVICE_RESOLVE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SERVICE_RESOLVE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(4, Number(data.InterfaceIndex), true);
  // 0x08: buffer
  if (data?.QueryName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.QueryName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pResolveCompletionCallback !== undefined) view.setBigUint64(16, data.pResolveCompletionCallback === null ? 0n : BigInt(util.toPointer(data.pResolveCompletionCallback)), true);
  // 0x18: pointer
  if (data?.pQueryContext !== undefined) view.setBigUint64(24, data.pQueryContext === null ? 0n : BigInt(util.toPointer(data.pQueryContext)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.DNS_SERVICE_REGISTER_REQUEST (size: 48)
 */
export interface DNS_SERVICE_REGISTER_REQUEST {
  /** u32 */
  Version: number;
  /** u32 */
  InterfaceIndex: number;
  /** ptr */
  pServiceInstance: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.Dns.PDNS_SERVICE_REGISTER_COMPLETE */
  pRegisterCompletionCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pQueryContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  hCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  unicastEnabled: boolean;
}

export const sizeofDNS_SERVICE_REGISTER_REQUEST = 48;

export function allocDNS_SERVICE_REGISTER_REQUEST(data?: Partial<DNS_SERVICE_REGISTER_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDNS_SERVICE_REGISTER_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(4, Number(data.InterfaceIndex), true);
  // 0x08: pointer
  if (data?.pServiceInstance !== undefined) view.setBigUint64(8, data.pServiceInstance === null ? 0n : BigInt(util.toPointer(data.pServiceInstance)), true);
  // 0x10: pointer
  if (data?.pRegisterCompletionCallback !== undefined) view.setBigUint64(16, data.pRegisterCompletionCallback === null ? 0n : BigInt(util.toPointer(data.pRegisterCompletionCallback)), true);
  // 0x18: pointer
  if (data?.pQueryContext !== undefined) view.setBigUint64(24, data.pQueryContext === null ? 0n : BigInt(util.toPointer(data.pQueryContext)), true);
  // 0x20: pointer
  if (data?.hCredentials !== undefined) view.setBigUint64(32, data.hCredentials === null ? 0n : BigInt(util.toPointer(data.hCredentials)), true);
  // 0x28: i32
  if (data?.unicastEnabled !== undefined) view.setInt32(40, Number(data.unicastEnabled), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.MDNS_QUERY_HANDLE (size: 40)
 */
export interface MDNS_QUERY_HANDLE {
  /** array */
  nameBuf: Deno.PointerValue | null;
  /** u16 */
  wType: number;
  /** ptr */
  pSubscription: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pWnfCallbackParams: Deno.PointerValue | Uint8Array | null;
  /** array */
  stateNameData: Deno.PointerValue | null;
}

export const sizeofMDNS_QUERY_HANDLE = 40;

export function allocMDNS_QUERY_HANDLE(data?: Partial<MDNS_QUERY_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMDNS_QUERY_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nameBuf !== undefined) view.setBigUint64(0, data.nameBuf === null ? 0n : BigInt(util.toPointer(data.nameBuf)), true);
  // 0x08: u16
  if (data?.wType !== undefined) view.setUint16(8, Number(data.wType), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.pSubscription !== undefined) view.setBigUint64(16, data.pSubscription === null ? 0n : BigInt(util.toPointer(data.pSubscription)), true);
  // 0x18: pointer
  if (data?.pWnfCallbackParams !== undefined) view.setBigUint64(24, data.pWnfCallbackParams === null ? 0n : BigInt(util.toPointer(data.pWnfCallbackParams)), true);
  // 0x20: pointer
  if (data?.stateNameData !== undefined) view.setBigUint64(32, data.stateNameData === null ? 0n : BigInt(util.toPointer(data.stateNameData)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Dns.MDNS_QUERY_REQUEST (size: 64)
 */
export interface MDNS_QUERY_REQUEST {
  /** u32 */
  Version: number;
  /** u32 */
  ulRefCount: number;
  /** Windows.Win32.Foundation.PWSTR */
  Query: string | null;
  /** u16 */
  QueryType: number;
  /** u64 */
  QueryOptions: Deno.PointerValue;
  /** u32 */
  InterfaceIndex: number;
  /** Windows.Win32.NetworkManagement.Dns.PMDNS_QUERY_CALLBACK */
  pQueryCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pQueryContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fAnswerReceived: boolean;
  /** u32 */
  ulResendCount: number;
}

export const sizeofMDNS_QUERY_REQUEST = 64;

export function allocMDNS_QUERY_REQUEST(data?: Partial<MDNS_QUERY_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofMDNS_QUERY_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.ulRefCount !== undefined) view.setUint32(4, Number(data.ulRefCount), true);
  // 0x08: buffer
  if (data?.Query !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Query);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.QueryType !== undefined) view.setUint16(16, Number(data.QueryType), true);
  // 0x12: pad6
  // 0x18: u64
  if (data?.QueryOptions !== undefined) view.setBigUint64(24, BigInt(data.QueryOptions), true);
  // 0x20: u32
  if (data?.InterfaceIndex !== undefined) view.setUint32(32, Number(data.InterfaceIndex), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pQueryCallback !== undefined) view.setBigUint64(40, data.pQueryCallback === null ? 0n : BigInt(util.toPointer(data.pQueryCallback)), true);
  // 0x30: pointer
  if (data?.pQueryContext !== undefined) view.setBigUint64(48, data.pQueryContext === null ? 0n : BigInt(util.toPointer(data.pQueryContext)), true);
  // 0x38: i32
  if (data?.fAnswerReceived !== undefined) view.setInt32(56, Number(data.fAnswerReceived), true);
  // 0x3c: u32
  if (data?.ulResendCount !== undefined) view.setUint32(60, Number(data.ulResendCount), true);
  return buf;
}

// Native Libraries

try {
  var libDNSAPI_dll = Deno.dlopen("DNSAPI.dll", {
    DnsQueryConfig: {
      parameters: ["i32", "u32", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsRecordCopyEx: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    DnsRecordSetCopyEx: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    DnsRecordCompare: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DnsRecordSetCompare: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsRecordSetDetach: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DnsFree: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    DnsQuery_A: {
      parameters: ["buffer", "u16", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsQuery_UTF8: {
      parameters: ["buffer", "u16", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsQuery_W: {
      parameters: ["buffer", "u16", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsQueryEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsCancelQuery: {
      parameters: ["pointer"],
      result: "i32",
    },
    DnsFreeCustomServers: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    DnsGetApplicationSettings: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    DnsSetApplicationSettings: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    DnsAcquireContextHandle_W: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    DnsAcquireContextHandle_A: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    DnsReleaseContextHandle: {
      parameters: ["pointer"],
      result: "void",
    },
    DnsModifyRecordsInSet_W: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsModifyRecordsInSet_A: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsModifyRecordsInSet_UTF8: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsReplaceRecordSetW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsReplaceRecordSetA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsReplaceRecordSetUTF8: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DnsValidateName_W: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    DnsValidateName_A: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    DnsValidateName_UTF8: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    DnsNameCompare_A: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    DnsNameCompare_W: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    DnsWriteQuestionToBuffer_W: {
      parameters: ["pointer", "pointer", "buffer", "u16", "u16", "i32"],
      result: "i32",
    },
    DnsWriteQuestionToBuffer_UTF8: {
      parameters: ["pointer", "pointer", "buffer", "u16", "u16", "i32"],
      result: "i32",
    },
    DnsExtractRecordsFromMessage_W: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i32",
    },
    DnsExtractRecordsFromMessage_UTF8: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i32",
    },
    DnsGetProxyInformation: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    DnsFreeProxyName: {
      parameters: ["buffer"],
      result: "void",
    },
    DnsConnectionGetProxyInfoForHostUrl: {
      parameters: ["buffer", "pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    DnsConnectionFreeProxyInfoEx: {
      parameters: ["pointer"],
      result: "void",
    },
    DnsConnectionGetProxyInfo: {
      parameters: ["buffer", "i32", "pointer"],
      result: "u32",
    },
    DnsConnectionFreeProxyInfo: {
      parameters: ["pointer"],
      result: "void",
    },
    DnsConnectionSetProxyInfo: {
      parameters: ["buffer", "i32", "pointer"],
      result: "u32",
    },
    DnsConnectionDeleteProxyInfo: {
      parameters: ["buffer", "i32"],
      result: "u32",
    },
    DnsConnectionGetProxyList: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    DnsConnectionFreeProxyList: {
      parameters: ["pointer"],
      result: "void",
    },
    DnsConnectionGetNameList: {
      parameters: ["pointer"],
      result: "u32",
    },
    DnsConnectionFreeNameList: {
      parameters: ["pointer"],
      result: "void",
    },
    DnsConnectionUpdateIfIndexTable: {
      parameters: ["pointer"],
      result: "u32",
    },
    DnsConnectionSetPolicyEntries: {
      parameters: ["i32", "pointer"],
      result: "u32",
    },
    DnsConnectionDeletePolicyEntries: {
      parameters: ["i32"],
      result: "u32",
    },
    DnsServiceConstructInstance: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "u16", "u16", "u16", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    DnsServiceCopyInstance: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DnsServiceFreeInstance: {
      parameters: ["pointer"],
      result: "void",
    },
    DnsServiceBrowse: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DnsServiceBrowseCancel: {
      parameters: ["pointer"],
      result: "i32",
    },
    DnsServiceResolve: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DnsServiceResolveCancel: {
      parameters: ["pointer"],
      result: "i32",
    },
    DnsServiceRegister: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    DnsServiceDeRegister: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    DnsServiceRegisterCancel: {
      parameters: ["pointer"],
      result: "u32",
    },
    DnsStartMulticastQuery: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DnsStopMulticastQuery: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DnsQueryConfig(
  Config: DNS_CONFIG_TYPE /* Windows.Win32.NetworkManagement.Dns.DNS_CONFIG_TYPE */,
  Flag: number /* u32 */,
  pwsAdapterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBufLen: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsQueryConfig(Config, Flag, util.pwstrToFfi(pwsAdapterName), util.toPointer(pReserved), util.toPointer(pBuffer), util.toPointer(pBufLen));
}

export function DnsRecordCopyEx(
  pRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  CharSetIn: DNS_CHARSET /* Windows.Win32.NetworkManagement.Dns.DNS_CHARSET */,
  CharSetOut: DNS_CHARSET /* Windows.Win32.NetworkManagement.Dns.DNS_CHARSET */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libDNSAPI_dll.DnsRecordCopyEx(util.toPointer(pRecord), CharSetIn, CharSetOut));
}

export function DnsRecordSetCopyEx(
  pRecordSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  CharSetIn: DNS_CHARSET /* Windows.Win32.NetworkManagement.Dns.DNS_CHARSET */,
  CharSetOut: DNS_CHARSET /* Windows.Win32.NetworkManagement.Dns.DNS_CHARSET */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libDNSAPI_dll.DnsRecordSetCopyEx(util.toPointer(pRecordSet), CharSetIn, CharSetOut));
}

export function DnsRecordCompare(
  pRecord1: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRecord2: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDNSAPI_dll.DnsRecordCompare(util.toPointer(pRecord1), util.toPointer(pRecord2)));
}

export function DnsRecordSetCompare(
  pRR1: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRR2: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDiff1: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDiff2: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDNSAPI_dll.DnsRecordSetCompare(util.toPointer(pRR1), util.toPointer(pRR2), util.toPointer(ppDiff1), util.toPointer(ppDiff2)));
}

export function DnsRecordSetDetach(
  pRecordList: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libDNSAPI_dll.DnsRecordSetDetach(util.toPointer(pRecordList)));
}

export function DnsFree(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  FreeType: DNS_FREE_TYPE /* Windows.Win32.NetworkManagement.Dns.DNS_FREE_TYPE */,
): void /* void */ {
  return libDNSAPI_dll.DnsFree(util.toPointer(pData), FreeType);
}

export function DnsQuery_A(
  pszName: string | null /* Windows.Win32.Foundation.PSTR */,
  wType: number /* u16 */,
  Options: number /* u32 */,
  pExtra: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppQueryResults: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsQuery_A(util.pstrToFfi(pszName), wType, Options, util.toPointer(pExtra), util.toPointer(ppQueryResults), util.toPointer(pReserved));
}

export function DnsQuery_UTF8(
  pszName: string | null /* Windows.Win32.Foundation.PSTR */,
  wType: number /* u16 */,
  Options: number /* u32 */,
  pExtra: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppQueryResults: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsQuery_UTF8(util.pstrToFfi(pszName), wType, Options, util.toPointer(pExtra), util.toPointer(ppQueryResults), util.toPointer(pReserved));
}

export function DnsQuery_W(
  pszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  wType: number /* u16 */,
  Options: number /* u32 */,
  pExtra: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppQueryResults: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsQuery_W(util.pwstrToFfi(pszName), wType, Options, util.toPointer(pExtra), util.toPointer(ppQueryResults), util.toPointer(pReserved));
}

export function DnsQueryEx(
  pQueryRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pQueryResults: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCancelHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsQueryEx(util.toPointer(pQueryRequest), util.toPointer(pQueryResults), util.toPointer(pCancelHandle));
}

export function DnsCancelQuery(
  pCancelHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsCancelQuery(util.toPointer(pCancelHandle));
}

export function DnsFreeCustomServers(
  pcServers: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppServers: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libDNSAPI_dll.DnsFreeCustomServers(util.toPointer(pcServers), util.toPointer(ppServers));
}

export function DnsGetApplicationSettings(
  pcServers: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDefaultServers: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSettings: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsGetApplicationSettings(util.toPointer(pcServers), util.toPointer(ppDefaultServers), util.toPointer(pSettings));
}

export function DnsSetApplicationSettings(
  cServers: number /* u32 */,
  pServers: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSettings: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsSetApplicationSettings(cServers, util.toPointer(pServers), util.toPointer(pSettings));
}

export function DnsAcquireContextHandle_W(
  CredentialFlags: number /* u32 */,
  Credentials: Deno.PointerValue | Uint8Array | null /* ptr */,
  pContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsAcquireContextHandle_W(CredentialFlags, util.toPointer(Credentials), util.toPointer(pContext));
}

export function DnsAcquireContextHandle_A(
  CredentialFlags: number /* u32 */,
  Credentials: Deno.PointerValue | Uint8Array | null /* ptr */,
  pContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsAcquireContextHandle_A(CredentialFlags, util.toPointer(Credentials), util.toPointer(pContext));
}

export function DnsReleaseContextHandle(
  hContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libDNSAPI_dll.DnsReleaseContextHandle(util.toPointer(hContext));
}

export function DnsModifyRecordsInSet_W(
  pAddRecords: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeleteRecords: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: number /* u32 */,
  hCredentials: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pExtraList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsModifyRecordsInSet_W(util.toPointer(pAddRecords), util.toPointer(pDeleteRecords), Options, util.toPointer(hCredentials), util.toPointer(pExtraList), util.toPointer(pReserved));
}

export function DnsModifyRecordsInSet_A(
  pAddRecords: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeleteRecords: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: number /* u32 */,
  hCredentials: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pExtraList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsModifyRecordsInSet_A(util.toPointer(pAddRecords), util.toPointer(pDeleteRecords), Options, util.toPointer(hCredentials), util.toPointer(pExtraList), util.toPointer(pReserved));
}

export function DnsModifyRecordsInSet_UTF8(
  pAddRecords: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeleteRecords: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: number /* u32 */,
  hCredentials: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pExtraList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsModifyRecordsInSet_UTF8(util.toPointer(pAddRecords), util.toPointer(pDeleteRecords), Options, util.toPointer(hCredentials), util.toPointer(pExtraList), util.toPointer(pReserved));
}

export function DnsReplaceRecordSetW(
  pReplaceSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: number /* u32 */,
  hContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pExtraInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsReplaceRecordSetW(util.toPointer(pReplaceSet), Options, util.toPointer(hContext), util.toPointer(pExtraInfo), util.toPointer(pReserved));
}

export function DnsReplaceRecordSetA(
  pReplaceSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: number /* u32 */,
  hContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pExtraInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsReplaceRecordSetA(util.toPointer(pReplaceSet), Options, util.toPointer(hContext), util.toPointer(pExtraInfo), util.toPointer(pReserved));
}

export function DnsReplaceRecordSetUTF8(
  pReplaceSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  Options: number /* u32 */,
  hContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pExtraInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsReplaceRecordSetUTF8(util.toPointer(pReplaceSet), Options, util.toPointer(hContext), util.toPointer(pExtraInfo), util.toPointer(pReserved));
}

export function DnsValidateName_W(
  pszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Format: DNS_NAME_FORMAT /* Windows.Win32.NetworkManagement.Dns.DNS_NAME_FORMAT */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsValidateName_W(util.pwstrToFfi(pszName), Format);
}

export function DnsValidateName_A(
  pszName: string | null /* Windows.Win32.Foundation.PSTR */,
  Format: DNS_NAME_FORMAT /* Windows.Win32.NetworkManagement.Dns.DNS_NAME_FORMAT */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsValidateName_A(util.pstrToFfi(pszName), Format);
}

export function DnsValidateName_UTF8(
  pszName: string | null /* Windows.Win32.Foundation.PSTR */,
  Format: DNS_NAME_FORMAT /* Windows.Win32.NetworkManagement.Dns.DNS_NAME_FORMAT */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsValidateName_UTF8(util.pstrToFfi(pszName), Format);
}

export function DnsNameCompare_A(
  pName1: string | null /* Windows.Win32.Foundation.PSTR */,
  pName2: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDNSAPI_dll.DnsNameCompare_A(util.pstrToFfi(pName1), util.pstrToFfi(pName2)));
}

export function DnsNameCompare_W(
  pName1: string | null /* Windows.Win32.Foundation.PWSTR */,
  pName2: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDNSAPI_dll.DnsNameCompare_W(util.pwstrToFfi(pName1), util.pwstrToFfi(pName2)));
}

export function DnsWriteQuestionToBuffer_W(
  pDnsBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  wType: number /* u16 */,
  Xid: number /* u16 */,
  fRecursionDesired: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDNSAPI_dll.DnsWriteQuestionToBuffer_W(util.toPointer(pDnsBuffer), util.toPointer(pdwBufferSize), util.pwstrToFfi(pszName), wType, Xid, util.boolToFfi(fRecursionDesired)));
}

export function DnsWriteQuestionToBuffer_UTF8(
  pDnsBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszName: string | null /* Windows.Win32.Foundation.PSTR */,
  wType: number /* u16 */,
  Xid: number /* u16 */,
  fRecursionDesired: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDNSAPI_dll.DnsWriteQuestionToBuffer_UTF8(util.toPointer(pDnsBuffer), util.toPointer(pdwBufferSize), util.pstrToFfi(pszName), wType, Xid, util.boolToFfi(fRecursionDesired)));
}

export function DnsExtractRecordsFromMessage_W(
  pDnsBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  wMessageLength: number /* u16 */,
  ppRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsExtractRecordsFromMessage_W(util.toPointer(pDnsBuffer), wMessageLength, util.toPointer(ppRecord));
}

export function DnsExtractRecordsFromMessage_UTF8(
  pDnsBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  wMessageLength: number /* u16 */,
  ppRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsExtractRecordsFromMessage_UTF8(util.toPointer(pDnsBuffer), wMessageLength, util.toPointer(ppRecord));
}

export function DnsGetProxyInformation(
  hostName: string | null /* Windows.Win32.Foundation.PWSTR */,
  proxyInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  defaultProxyInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  completionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.Dns.DNS_PROXY_COMPLETION_ROUTINE */,
  completionContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsGetProxyInformation(util.pwstrToFfi(hostName), util.toPointer(proxyInformation), util.toPointer(defaultProxyInformation), util.toPointer(completionRoutine), util.toPointer(completionContext));
}

export function DnsFreeProxyName(
  proxyName: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libDNSAPI_dll.DnsFreeProxyName(util.pwstrToFfi(proxyName));
}

export function DnsConnectionGetProxyInfoForHostUrl(
  pwszHostUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  pSelectionContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSelectionContextLength: number /* u32 */,
  dwExplicitInterfaceIndex: number /* u32 */,
  pProxyInfoEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsConnectionGetProxyInfoForHostUrl(util.pwstrToFfi(pwszHostUrl), util.toPointer(pSelectionContext), dwSelectionContextLength, dwExplicitInterfaceIndex, util.toPointer(pProxyInfoEx));
}

export function DnsConnectionFreeProxyInfoEx(
  pProxyInfoEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libDNSAPI_dll.DnsConnectionFreeProxyInfoEx(util.toPointer(pProxyInfoEx));
}

export function DnsConnectionGetProxyInfo(
  pwszConnectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Type: DNS_CONNECTION_PROXY_TYPE /* Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_PROXY_TYPE */,
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsConnectionGetProxyInfo(util.pwstrToFfi(pwszConnectionName), Type, util.toPointer(pProxyInfo));
}

export function DnsConnectionFreeProxyInfo(
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libDNSAPI_dll.DnsConnectionFreeProxyInfo(util.toPointer(pProxyInfo));
}

export function DnsConnectionSetProxyInfo(
  pwszConnectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Type: DNS_CONNECTION_PROXY_TYPE /* Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_PROXY_TYPE */,
  pProxyInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsConnectionSetProxyInfo(util.pwstrToFfi(pwszConnectionName), Type, util.toPointer(pProxyInfo));
}

export function DnsConnectionDeleteProxyInfo(
  pwszConnectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Type: DNS_CONNECTION_PROXY_TYPE /* Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_PROXY_TYPE */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsConnectionDeleteProxyInfo(util.pwstrToFfi(pwszConnectionName), Type);
}

export function DnsConnectionGetProxyList(
  pwszConnectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pProxyList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsConnectionGetProxyList(util.pwstrToFfi(pwszConnectionName), util.toPointer(pProxyList));
}

export function DnsConnectionFreeProxyList(
  pProxyList: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libDNSAPI_dll.DnsConnectionFreeProxyList(util.toPointer(pProxyList));
}

export function DnsConnectionGetNameList(
  pNameList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsConnectionGetNameList(util.toPointer(pNameList));
}

export function DnsConnectionFreeNameList(
  pNameList: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libDNSAPI_dll.DnsConnectionFreeNameList(util.toPointer(pNameList));
}

export function DnsConnectionUpdateIfIndexTable(
  pConnectionIfIndexEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsConnectionUpdateIfIndexTable(util.toPointer(pConnectionIfIndexEntries));
}

export function DnsConnectionSetPolicyEntries(
  PolicyEntryTag: DNS_CONNECTION_POLICY_TAG /* Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_POLICY_TAG */,
  pPolicyEntryList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsConnectionSetPolicyEntries(PolicyEntryTag, util.toPointer(pPolicyEntryList));
}

export function DnsConnectionDeletePolicyEntries(
  PolicyEntryTag: DNS_CONNECTION_POLICY_TAG /* Windows.Win32.NetworkManagement.Dns.DNS_CONNECTION_POLICY_TAG */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsConnectionDeletePolicyEntries(PolicyEntryTag);
}

export function DnsServiceConstructInstance(
  pServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pHostName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pIp4: Deno.PointerValue | Uint8Array | null /* ptr */,
  pIp6: Deno.PointerValue | Uint8Array | null /* ptr */,
  wPort: number /* u16 */,
  wPriority: number /* u16 */,
  wWeight: number /* u16 */,
  dwPropertiesCount: number /* u32 */,
  keys: Deno.PointerValue | Uint8Array | null /* ptr */,
  values: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libDNSAPI_dll.DnsServiceConstructInstance(util.pwstrToFfi(pServiceName), util.pwstrToFfi(pHostName), util.toPointer(pIp4), util.toPointer(pIp6), wPort, wPriority, wWeight, dwPropertiesCount, util.toPointer(keys), util.toPointer(values)));
}

export function DnsServiceCopyInstance(
  pOrig: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libDNSAPI_dll.DnsServiceCopyInstance(util.toPointer(pOrig)));
}

export function DnsServiceFreeInstance(
  pInstance: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libDNSAPI_dll.DnsServiceFreeInstance(util.toPointer(pInstance));
}

export function DnsServiceBrowse(
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCancel: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsServiceBrowse(util.toPointer(pRequest), util.toPointer(pCancel));
}

export function DnsServiceBrowseCancel(
  pCancelHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsServiceBrowseCancel(util.toPointer(pCancelHandle));
}

export function DnsServiceResolve(
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCancel: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsServiceResolve(util.toPointer(pRequest), util.toPointer(pCancel));
}

export function DnsServiceResolveCancel(
  pCancelHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsServiceResolveCancel(util.toPointer(pCancelHandle));
}

export function DnsServiceRegister(
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCancel: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsServiceRegister(util.toPointer(pRequest), util.toPointer(pCancel));
}

export function DnsServiceDeRegister(
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCancel: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsServiceDeRegister(util.toPointer(pRequest), util.toPointer(pCancel));
}

export function DnsServiceRegisterCancel(
  pCancelHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libDNSAPI_dll.DnsServiceRegisterCancel(util.toPointer(pCancelHandle));
}

export function DnsStartMulticastQuery(
  pQueryRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsStartMulticastQuery(util.toPointer(pQueryRequest), util.toPointer(pHandle));
}

export function DnsStopMulticastQuery(
  pHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libDNSAPI_dll.DnsStopMulticastQuery(util.toPointer(pHandle));
}

