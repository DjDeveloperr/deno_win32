/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.P2P.Apis

import * as util from "../../util.ts";

// Enums
export type PEERDIST_RETRIEVAL_OPTIONS_CONTENTINFO_VERSION_VALUE = number;
export type PNRP_SCOPE = number;
export type PNRP_CLOUD_STATE = number;
export type PNRP_CLOUD_FLAGS = number;
export type PNRP_REGISTERED_ID_STATE = number;
export type PNRP_RESOLVE_CRITERIA = number;
export type PNRP_EXTENDED_PAYLOAD_TYPE = number;
export type PEER_RECORD_CHANGE_TYPE = number;
export type PEER_CONNECTION_STATUS = number;
export type PEER_CONNECTION_FLAGS = number;
export type PEER_RECORD_FLAGS = number;
export type RIP_INFO_TYPE = number;
export type PEER_GRAPH_EVENT_TYPE = number;
export type PEER_NODE_CHANGE_TYPE = number;
export type PEER_GRAPH_STATUS_FLAGS = number;
export type PEER_GRAPH_PROPERTY_FLAGS = number;
export type PEER_GRAPH_SCOPE = number;
export type PEER_GROUP_EVENT_TYPE = number;
export type PEER_GROUP_STATUS = number;
export type PEER_GROUP_PROPERTY_FLAGS = number;
export type PEER_GROUP_AUTHENTICATION_SCHEME = number;
export type PEER_MEMBER_FLAGS = number;
export type PEER_MEMBER_CHANGE_TYPE = number;
export type PEER_GROUP_ISSUE_CREDENTIAL_FLAGS = number;
export type PEER_SIGNIN_FLAGS = number;
export type PEER_WATCH_PERMISSION = number;
export type PEER_PUBLICATION_SCOPE = number;
export type PEER_INVITATION_RESPONSE_TYPE = number;
export type PEER_APPLICATION_REGISTRATION_TYPE = number;
export type PEER_PRESENCE_STATUS = number;
export type PEER_CHANGE_TYPE = number;
export type PEER_COLLAB_EVENT_TYPE = number;
export type DRT_SCOPE = number;
export type DRT_STATUS = number;
export type DRT_MATCH_TYPE = number;
export type DRT_LEAFSET_KEY_CHANGE_TYPE = number;
export type DRT_EVENT_TYPE = number;
export type DRT_SECURITY_MODE = number;
export type DRT_REGISTRATION_STATE = number;
export type DRT_ADDRESS_FLAGS = number;
export type PEERDIST_STATUS = number;
export type PEERDIST_CLIENT_INFO_BY_HANDLE_CLASS = number;

// Constants
export const PEERDIST_RETRIEVAL_OPTIONS_CONTENTINFO_VERSION_1 = 1;
export const PEERDIST_RETRIEVAL_OPTIONS_CONTENTINFO_VERSION_2 = 2;
export const PEERDIST_RETRIEVAL_OPTIONS_CONTENTINFO_VERSION = 2;
export const NS_PNRPNAME = 38;
export const NS_PNRPCLOUD = 39;
export const PNRPINFO_HINT = 1;
export const PNRP_MAX_ENDPOINT_ADDRESSES = 10;
export const WSZ_SCOPE_GLOBAL = `GLOBAL`;
export const WSZ_SCOPE_SITELOCAL = `SITELOCAL`;
export const WSZ_SCOPE_LINKLOCAL = `LINKLOCAL`;
export const PNRP_MAX_EXTENDED_PAYLOAD_BYTES = 4096;
export const PEER_PNRP_ALL_LINK_CLOUDS = `PEER_PNRP_ALL_LINKS`;
export const WSA_PNRP_ERROR_BASE = 11500;
export const WSA_PNRP_CLOUD_NOT_FOUND = 11501;
export const WSA_PNRP_CLOUD_DISABLED = 11502;
export const WSA_PNRP_INVALID_IDENTITY = 11503;
export const WSA_PNRP_TOO_MUCH_LOAD = 11504;
export const WSA_PNRP_CLOUD_IS_SEARCH_ONLY = 11505;
export const WSA_PNRP_CLIENT_INVALID_COMPARTMENT_ID = 11506;
export const WSA_PNRP_DUPLICATE_PEER_NAME = 11508;
export const WSA_PNRP_CLOUD_IS_DEAD = 11509;
export const PEER_E_CLOUD_NOT_FOUND = 517049760335998189n;
export const PEER_E_CLOUD_DISABLED = 517050859847625966n;
export const PEER_E_INVALID_IDENTITY = 517051959359253743n;
export const PEER_E_TOO_MUCH_LOAD = 517053058870881520n;
export const PEER_E_CLOUD_IS_SEARCH_ONLY = 517054158382509297n;
export const PEER_E_CLIENT_INVALID_COMPARTMENT_ID = 517056357405764850n;
export const PEER_E_DUPLICATE_PEER_NAME = 517057456917392628n;
export const PEER_E_CLOUD_IS_DEAD = 504526322895629557n;
export const PEER_E_NOT_FOUND = 289092412595700880n;
export const PEER_E_DISK_FULL = 2810247355038105712n;
export const PEER_E_ALREADY_EXISTS = 504538417523523767n;
export const FACILITY_DRT = 98;
export const DRT_E_TIMEOUT = 7066150033701343233n;
export const DRT_E_INVALID_KEY_SIZE = 7066152232724598786n;
export const DRT_E_INVALID_CERT_CHAIN = 7066153332236226564n;
export const DRT_E_INVALID_MESSAGE = 7066154431747854341n;
export const DRT_E_NO_MORE = 7066155531259482118n;
export const DRT_E_INVALID_MAX_ADDRESSES = 7066156630771109895n;
export const DRT_E_SEARCH_IN_PROGRESS = 7066157730282737672n;
export const DRT_E_INVALID_KEY = 7066165426864132105n;
export const DRT_S_RETRY = 7066166524228276240n;
export const DRT_E_INVALID_MAX_ENDPOINTS = 7066167625887387665n;
export const DRT_E_INVALID_SEARCH_RANGE = 7070651434305458194n;
export const DRT_E_INVALID_PORT = 7070652533817090048n;
export const DRT_E_INVALID_TRANSPORT_PROVIDER = 7070653633328717825n;
export const DRT_E_INVALID_SECURITY_PROVIDER = 7070654732840345602n;
export const DRT_E_STILL_IN_USE = 7070655832351973379n;
export const DRT_E_INVALID_BOOTSTRAP_PROVIDER = 7070656931863601156n;
export const DRT_E_INVALID_ADDRESS = 7070658031375228933n;
export const DRT_E_INVALID_SCOPE = 7070659130886856710n;
export const DRT_E_TRANSPORT_SHUTTING_DOWN = 7070660230398484487n;
export const DRT_E_NO_ADDRESSES_AVAILABLE = 7070661329910112264n;
export const DRT_E_DUPLICATE_KEY = 7070662429421740041n;
export const DRT_E_TRANSPORTPROVIDER_IN_USE = 7070663528933367818n;
export const DRT_E_TRANSPORTPROVIDER_NOT_ATTACHED = 7070664628444995595n;
export const DRT_E_SECURITYPROVIDER_IN_USE = 7070665727956623372n;
export const DRT_E_SECURITYPROVIDER_NOT_ATTACHED = 7070666827468251149n;
export const DRT_E_BOOTSTRAPPROVIDER_IN_USE = 7070667926979878926n;
export const DRT_E_BOOTSTRAPPROVIDER_NOT_ATTACHED = 7070934008793800719n;
export const DRT_E_TRANSPORT_ALREADY_BOUND = 7070935108305428737n;
export const DRT_E_TRANSPORT_NOT_BOUND = 7070936207817056514n;
export const DRT_E_TRANSPORT_UNEXPECTED = 7070937307328684291n;
export const DRT_E_TRANSPORT_INVALID_ARGUMENT = 7070938406840312068n;
export const DRT_E_TRANSPORT_NO_DEST_ADDRESSES = 7070939506351939845n;
export const DRT_E_TRANSPORT_EXECUTING_CALLBACK = 7070940605863567622n;
export const DRT_E_TRANSPORT_ALREADY_EXISTS_FOR_SCOPE = 7070941705375195399n;
export const DRT_E_INVALID_SETTINGS = 7070942804886823176n;
export const DRT_E_INVALID_SEARCH_INFO = 7070943904398450953n;
export const DRT_E_FAULTED = 7070945003910078730n;
export const DRT_E_TRANSPORT_STILL_BOUND = 7070946103421706507n;
export const DRT_E_INSUFFICIENT_BUFFER = 7070947202933334284n;
export const DRT_E_INVALID_INSTANCE_PREFIX = 7070948302444962061n;
export const DRT_E_INVALID_SECURITY_MODE = 7070949401956589838n;
export const DRT_E_CAPABILITY_MISMATCH = 1225542089406816527n;
export const DRT_PAYLOAD_REVOKED = 1;
export const DRT_MIN_ROUTING_ADDRESSES = 1;
export const DRT_MAX_ROUTING_ADDRESSES = 20;
export const DRT_MAX_PAYLOAD_SIZE = 5120;
export const DRT_MAX_INSTANCE_PREFIX_LEN = 128;
export const DRT_LINK_LOCAL_ISATAP_SCOPEID = 4294967295;
export const PEERDIST_PUBLICATION_OPTIONS_VERSION_1 = 1;
export const PEERDIST_PUBLICATION_OPTIONS_VERSION = 2;
export const PEERDIST_PUBLICATION_OPTIONS_VERSION_2 = 2;
export const PEERDIST_READ_TIMEOUT_LOCAL_CACHE_ONLY = 0;
export const PEERDIST_READ_TIMEOUT_DEFAULT = 4294967294;
export const PNRP_SCOPE_ANY = 0;
export const PNRP_GLOBAL_SCOPE = 1;
export const PNRP_SITE_LOCAL_SCOPE = 2;
export const PNRP_LINK_LOCAL_SCOPE = 3;
export const PNRP_CLOUD_STATE_VIRTUAL = 0;
export const PNRP_CLOUD_STATE_SYNCHRONISING = 1;
export const PNRP_CLOUD_STATE_ACTIVE = 2;
export const PNRP_CLOUD_STATE_DEAD = 3;
export const PNRP_CLOUD_STATE_DISABLED = 4;
export const PNRP_CLOUD_STATE_NO_NET = 5;
export const PNRP_CLOUD_STATE_ALONE = 6;
export const PNRP_CLOUD_NO_FLAGS = 0;
export const PNRP_CLOUD_NAME_LOCAL = 1;
export const PNRP_CLOUD_RESOLVE_ONLY = 2;
export const PNRP_CLOUD_FULL_PARTICIPANT = 4;
export const PNRP_REGISTERED_ID_STATE_OK = 1;
export const PNRP_REGISTERED_ID_STATE_PROBLEM = 2;
export const PNRP_RESOLVE_CRITERIA_DEFAULT = 0;
export const PNRP_RESOLVE_CRITERIA_REMOTE_PEER_NAME = 1;
export const PNRP_RESOLVE_CRITERIA_NEAREST_REMOTE_PEER_NAME = 2;
export const PNRP_RESOLVE_CRITERIA_NON_CURRENT_PROCESS_PEER_NAME = 3;
export const PNRP_RESOLVE_CRITERIA_NEAREST_NON_CURRENT_PROCESS_PEER_NAME = 4;
export const PNRP_RESOLVE_CRITERIA_ANY_PEER_NAME = 5;
export const PNRP_RESOLVE_CRITERIA_NEAREST_PEER_NAME = 6;
export const PNRP_EXTENDED_PAYLOAD_TYPE_NONE = 0;
export const PNRP_EXTENDED_PAYLOAD_TYPE_BINARY = 1;
export const PNRP_EXTENDED_PAYLOAD_TYPE_STRING = 2;
export const PEER_RECORD_ADDED = 1;
export const PEER_RECORD_UPDATED = 2;
export const PEER_RECORD_DELETED = 3;
export const PEER_RECORD_EXPIRED = 4;
export const PEER_CONNECTED = 1;
export const PEER_DISCONNECTED = 2;
export const PEER_CONNECTION_FAILED = 3;
export const PEER_CONNECTION_NEIGHBOR = 1;
export const PEER_CONNECTION_DIRECT = 2;
export const PEER_RECORD_FLAG_AUTOREFRESH = 1;
export const PEER_RECORD_FLAG_DELETED = 2;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const PEER_GRAPH_EVENT_STATUS_CHANGED = 1;
export const PEER_GRAPH_EVENT_PROPERTY_CHANGED = 2;
export const PEER_GRAPH_EVENT_RECORD_CHANGED = 3;
export const PEER_GRAPH_EVENT_DIRECT_CONNECTION = 4;
export const PEER_GRAPH_EVENT_NEIGHBOR_CONNECTION = 5;
export const PEER_GRAPH_EVENT_INCOMING_DATA = 6;
export const PEER_GRAPH_EVENT_CONNECTION_REQUIRED = 7;
export const PEER_GRAPH_EVENT_NODE_CHANGED = 8;
export const PEER_GRAPH_EVENT_SYNCHRONIZED = 9;
export const PEER_NODE_CHANGE_CONNECTED = 1;
export const PEER_NODE_CHANGE_DISCONNECTED = 2;
export const PEER_NODE_CHANGE_UPDATED = 3;
export const PEER_GRAPH_STATUS_LISTENING = 1;
export const PEER_GRAPH_STATUS_HAS_CONNECTIONS = 2;
export const PEER_GRAPH_STATUS_SYNCHRONIZED = 4;
export const PEER_GRAPH_PROPERTY_HEARTBEATS = 1;
export const PEER_GRAPH_PROPERTY_DEFER_EXPIRATION = 2;
export const PEER_GRAPH_SCOPE_ANY = 0;
export const PEER_GRAPH_SCOPE_GLOBAL = 1;
export const PEER_GRAPH_SCOPE_SITELOCAL = 2;
export const PEER_GRAPH_SCOPE_LINKLOCAL = 3;
export const PEER_GRAPH_SCOPE_LOOPBACK = 4;
export const PEER_GROUP_EVENT_STATUS_CHANGED = 1;
export const PEER_GROUP_EVENT_PROPERTY_CHANGED = 2;
export const PEER_GROUP_EVENT_RECORD_CHANGED = 3;
export const PEER_GROUP_EVENT_DIRECT_CONNECTION = 4;
export const PEER_GROUP_EVENT_NEIGHBOR_CONNECTION = 5;
export const PEER_GROUP_EVENT_INCOMING_DATA = 6;
export const PEER_GROUP_EVENT_MEMBER_CHANGED = 8;
export const PEER_GROUP_EVENT_CONNECTION_FAILED = 10;
export const PEER_GROUP_EVENT_AUTHENTICATION_FAILED = 11;
export const PEER_GROUP_STATUS_LISTENING = 1;
export const PEER_GROUP_STATUS_HAS_CONNECTIONS = 2;
export const PEER_MEMBER_DATA_OPTIONAL = 1;
export const PEER_DISABLE_PRESENCE = 2;
export const PEER_DEFER_EXPIRATION = 4;
export const PEER_GROUP_GMC_AUTHENTICATION = 1;
export const PEER_GROUP_PASSWORD_AUTHENTICATION = 2;
export const PEER_MEMBER_PRESENT = 1;
export const PEER_MEMBER_CONNECTED = 1;
export const PEER_MEMBER_DISCONNECTED = 2;
export const PEER_MEMBER_UPDATED = 3;
export const PEER_MEMBER_JOINED = 4;
export const PEER_MEMBER_LEFT = 5;
export const PEER_GROUP_STORE_CREDENTIALS = 1;
export const PEER_SIGNIN_NONE = 0;
export const PEER_SIGNIN_NEAR_ME = 1;
export const PEER_SIGNIN_INTERNET = 2;
export const PEER_SIGNIN_ALL = 3;
export const PEER_WATCH_BLOCKED = 0;
export const PEER_WATCH_ALLOWED = 1;
export const PEER_PUBLICATION_SCOPE_NONE = 0;
export const PEER_PUBLICATION_SCOPE_NEAR_ME = 1;
export const PEER_PUBLICATION_SCOPE_INTERNET = 2;
export const PEER_PUBLICATION_SCOPE_ALL = 3;
export const PEER_INVITATION_RESPONSE_DECLINED = 0;
export const PEER_INVITATION_RESPONSE_ACCEPTED = 1;
export const PEER_INVITATION_RESPONSE_EXPIRED = 2;
export const PEER_INVITATION_RESPONSE_ERROR = 3;
export const PEER_APPLICATION_CURRENT_USER = 0;
export const PEER_APPLICATION_ALL_USERS = 1;
export const PEER_PRESENCE_OFFLINE = 0;
export const PEER_PRESENCE_OUT_TO_LUNCH = 1;
export const PEER_PRESENCE_AWAY = 2;
export const PEER_PRESENCE_BE_RIGHT_BACK = 3;
export const PEER_PRESENCE_IDLE = 4;
export const PEER_PRESENCE_BUSY = 5;
export const PEER_PRESENCE_ON_THE_PHONE = 6;
export const PEER_PRESENCE_ONLINE = 7;
export const PEER_CHANGE_ADDED = 0;
export const PEER_CHANGE_DELETED = 1;
export const PEER_CHANGE_UPDATED = 2;
export const PEER_EVENT_WATCHLIST_CHANGED = 1;
export const PEER_EVENT_ENDPOINT_CHANGED = 2;
export const PEER_EVENT_ENDPOINT_PRESENCE_CHANGED = 3;
export const PEER_EVENT_ENDPOINT_APPLICATION_CHANGED = 4;
export const PEER_EVENT_ENDPOINT_OBJECT_CHANGED = 5;
export const PEER_EVENT_MY_ENDPOINT_CHANGED = 6;
export const PEER_EVENT_MY_PRESENCE_CHANGED = 7;
export const PEER_EVENT_MY_APPLICATION_CHANGED = 8;
export const PEER_EVENT_MY_OBJECT_CHANGED = 9;
export const PEER_EVENT_PEOPLE_NEAR_ME_CHANGED = 10;
export const PEER_EVENT_REQUEST_STATUS_CHANGED = 11;
export const DRT_GLOBAL_SCOPE = 1;
export const DRT_SITE_LOCAL_SCOPE = 2;
export const DRT_LINK_LOCAL_SCOPE = 3;
export const DRT_ACTIVE = 0;
export const DRT_ALONE = 1;
export const DRT_NO_NETWORK = 10;
export const DRT_FAULTED = 20;
export const DRT_MATCH_EXACT = 0;
export const DRT_MATCH_NEAR = 1;
export const DRT_MATCH_INTERMEDIATE = 2;
export const DRT_LEAFSET_KEY_ADDED = 0;
export const DRT_LEAFSET_KEY_DELETED = 1;
export const DRT_EVENT_STATUS_CHANGED = 0;
export const DRT_EVENT_LEAFSET_KEY_CHANGED = 1;
export const DRT_EVENT_REGISTRATION_STATE_CHANGED = 2;
export const DRT_SECURE_RESOLVE = 0;
export const DRT_SECURE_MEMBERSHIP = 1;
export const DRT_SECURE_CONFIDENTIALPAYLOAD = 2;
export const DRT_REGISTRATION_STATE_UNRESOLVEABLE = 1;
export const DRT_ADDRESS_FLAG_ACCEPTED = 1;
export const DRT_ADDRESS_FLAG_REJECTED = 2;
export const DRT_ADDRESS_FLAG_UNREACHABLE = 4;
export const DRT_ADDRESS_FLAG_LOOP = 8;
export const DRT_ADDRESS_FLAG_TOO_BUSY = 16;
export const DRT_ADDRESS_FLAG_BAD_VALIDATE_ID = 32;
export const DRT_ADDRESS_FLAG_SUSPECT_UNREGISTERED_ID = 64;
export const DRT_ADDRESS_FLAG_INQUIRE = 128;
export const PEERDIST_STATUS_DISABLED = 0;
export const PEERDIST_STATUS_UNAVAILABLE = 1;
export const PEERDIST_STATUS_AVAILABLE = 2;
export const PeerDistClientBasicInfo = 0;
export const MaximumPeerDistClientInfoByHandlesClass = 1;

// Structs

/**
 * Windows.Win32.NetworkManagement.P2P.PNRP_CLOUD_ID (size: 16)
 */
export interface PNRP_CLOUD_ID {
  /** i32 */
  AddressFamily: number;
  /** Windows.Win32.NetworkManagement.P2P.PNRP_SCOPE */
  Scope: PNRP_SCOPE;
  /** u32 */
  ScopeId: number;
}

export const sizeofPNRP_CLOUD_ID = 16;

export function allocPNRP_CLOUD_ID(data?: Partial<PNRP_CLOUD_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofPNRP_CLOUD_ID);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AddressFamily !== undefined) view.setInt32(0, Number(data.AddressFamily), true);
  // 0x04: i32
  if (data?.Scope !== undefined) view.setInt32(4, Number(data.Scope), true);
  // 0x08: u32
  if (data?.ScopeId !== undefined) view.setUint32(8, Number(data.ScopeId), true);
  // 0x0c: pad4
  return buf;
}

export class PNRP_CLOUD_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AddressFamily(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Scope(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get ScopeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set AddressFamily(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Scope(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set ScopeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Networking.WinSock.SOCKET_ADDRESS (size: 16)
 */
export interface SOCKET_ADDRESS {
  /** ptr */
  lpSockaddr: Deno.PointerValue | Uint8Array;
  /** i32 */
  iSockaddrLength: number;
}

export const sizeofSOCKET_ADDRESS = 16;

export function allocSOCKET_ADDRESS(data?: Partial<SOCKET_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpSockaddr !== undefined) view.setBigUint64(0, data.lpSockaddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSockaddr))), true);
  // 0x08: i32
  if (data?.iSockaddrLength !== undefined) view.setInt32(8, Number(data.iSockaddrLength), true);
  // 0x0c: pad4
  return buf;
}

export class SOCKET_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpSockaddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iSockaddrLength(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set lpSockaddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iSockaddrLength(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.P2P.PNRPINFO_V1 (size: 56)
 */
export interface PNRPINFO_V1 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszIdentity: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxResolve: number;
  /** u32 */
  dwTimeout: number;
  /** u32 */
  dwLifetime: number;
  /** Windows.Win32.NetworkManagement.P2P.PNRP_RESOLVE_CRITERIA */
  enResolveCriteria: PNRP_RESOLVE_CRITERIA;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  saHint: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PNRP_REGISTERED_ID_STATE */
  enNameState: PNRP_REGISTERED_ID_STATE;
}

export const sizeofPNRPINFO_V1 = 56;

export function allocPNRPINFO_V1(data?: Partial<PNRPINFO_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofPNRPINFO_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpwszIdentity !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwszIdentity);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.nMaxResolve !== undefined) view.setUint32(16, Number(data.nMaxResolve), true);
  // 0x14: u32
  if (data?.dwTimeout !== undefined) view.setUint32(20, Number(data.dwTimeout), true);
  // 0x18: u32
  if (data?.dwLifetime !== undefined) view.setUint32(24, Number(data.dwLifetime), true);
  // 0x1c: i32
  if (data?.enResolveCriteria !== undefined) view.setInt32(28, Number(data.enResolveCriteria), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.saHint !== undefined) view.setBigUint64(40, data.saHint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.saHint))), true);
  // 0x30: i32
  if (data?.enNameState !== undefined) view.setInt32(48, Number(data.enNameState), true);
  // 0x34: pad4
  return buf;
}

export class PNRPINFO_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpwszIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get nMaxResolve(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwTimeout(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwLifetime(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get enResolveCriteria(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get saHint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get enNameState(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpwszIdentity(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set nMaxResolve(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwTimeout(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwLifetime(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set enResolveCriteria(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set saHint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set enNameState(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PNRPINFO_V2 (size: 64)
 */
export interface PNRPINFO_V2 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszIdentity: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxResolve: number;
  /** u32 */
  dwTimeout: number;
  /** u32 */
  dwLifetime: number;
  /** Windows.Win32.NetworkManagement.P2P.PNRP_RESOLVE_CRITERIA */
  enResolveCriteria: PNRP_RESOLVE_CRITERIA;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  saHint: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PNRP_REGISTERED_ID_STATE */
  enNameState: PNRP_REGISTERED_ID_STATE;
  /** Windows.Win32.NetworkManagement.P2P.PNRP_EXTENDED_PAYLOAD_TYPE */
  enExtendedPayloadType: PNRP_EXTENDED_PAYLOAD_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPNRPINFO_V2 = 64;

export function allocPNRPINFO_V2(data?: Partial<PNRPINFO_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofPNRPINFO_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpwszIdentity !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwszIdentity);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.nMaxResolve !== undefined) view.setUint32(16, Number(data.nMaxResolve), true);
  // 0x14: u32
  if (data?.dwTimeout !== undefined) view.setUint32(20, Number(data.dwTimeout), true);
  // 0x18: u32
  if (data?.dwLifetime !== undefined) view.setUint32(24, Number(data.dwLifetime), true);
  // 0x1c: i32
  if (data?.enResolveCriteria !== undefined) view.setInt32(28, Number(data.enResolveCriteria), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.saHint !== undefined) view.setBigUint64(40, data.saHint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.saHint))), true);
  // 0x30: i32
  if (data?.enNameState !== undefined) view.setInt32(48, Number(data.enNameState), true);
  // 0x34: i32
  if (data?.enExtendedPayloadType !== undefined) view.setInt32(52, Number(data.enExtendedPayloadType), true);
  // 0x38: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(56, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PNRPINFO_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpwszIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get nMaxResolve(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwTimeout(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwLifetime(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get enResolveCriteria(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get saHint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get enNameState(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get enExtendedPayloadType(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpwszIdentity(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set nMaxResolve(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwTimeout(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwLifetime(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set enResolveCriteria(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set saHint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set enNameState(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set enExtendedPayloadType(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PNRPCLOUDINFO (size: 24)
 */
export interface PNRPCLOUDINFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.NetworkManagement.P2P.PNRP_CLOUD_ID */
  Cloud: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PNRP_CLOUD_STATE */
  enCloudState: PNRP_CLOUD_STATE;
  /** Windows.Win32.NetworkManagement.P2P.PNRP_CLOUD_FLAGS */
  enCloudFlags: PNRP_CLOUD_FLAGS;
}

export const sizeofPNRPCLOUDINFO = 24;

export function allocPNRPCLOUDINFO(data?: Partial<PNRPCLOUDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPNRPCLOUDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Cloud !== undefined) view.setBigUint64(8, data.Cloud === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cloud))), true);
  // 0x10: i32
  if (data?.enCloudState !== undefined) view.setInt32(16, Number(data.enCloudState), true);
  // 0x14: i32
  if (data?.enCloudFlags !== undefined) view.setInt32(20, Number(data.enCloudFlags), true);
  return buf;
}

export class PNRPCLOUDINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Cloud(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get enCloudState(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get enCloudFlags(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Cloud(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set enCloudState(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set enCloudFlags(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_VERSION_DATA (size: 8)
 */
export interface PEER_VERSION_DATA {
  /** u16 */
  wVersion: number;
  /** u16 */
  wHighestVersion: number;
}

export const sizeofPEER_VERSION_DATA = 8;

export function allocPEER_VERSION_DATA(data?: Partial<PEER_VERSION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_VERSION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wVersion !== undefined) view.setUint16(0, Number(data.wVersion), true);
  // 0x02: u16
  if (data?.wHighestVersion !== undefined) view.setUint16(2, Number(data.wHighestVersion), true);
  // 0x04: pad4
  return buf;
}

export class PEER_VERSION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wHighestVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set wVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wHighestVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_DATA (size: 16)
 */
export interface PEER_DATA {
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_DATA = 16;

export function allocPEER_DATA(data?: Partial<PEER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbData))), true);
  return buf;
}

export class PEER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_RECORD (size: 96)
 */
export interface PEER_RECORD {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  type: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzCreatorId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzModifiedById: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzAttributes: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftCreation: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftExpiration: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastModified: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PEER_DATA */
  securityData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PEER_DATA */
  data: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_RECORD = 96;

export function allocPEER_RECORD(data?: Partial<PEER_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.type !== undefined) view.setBigUint64(8, data.type === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.type))), true);
  // 0x10: pointer
  if (data?.id !== undefined) view.setBigUint64(16, data.id === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.id))), true);
  // 0x18: u32
  if (data?.dwVersion !== undefined) view.setUint32(24, Number(data.dwVersion), true);
  // 0x1c: u32
  if (data?.dwFlags !== undefined) view.setUint32(28, Number(data.dwFlags), true);
  // 0x20: buffer
  if (data?.pwzCreatorId !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwzCreatorId);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pwzModifiedById !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwzModifiedById);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pwzAttributes !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwzAttributes);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: pointer
  if (data?.ftCreation !== undefined) view.setBigUint64(56, data.ftCreation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftCreation))), true);
  // 0x40: pointer
  if (data?.ftExpiration !== undefined) view.setBigUint64(64, data.ftExpiration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftExpiration))), true);
  // 0x48: pointer
  if (data?.ftLastModified !== undefined) view.setBigUint64(72, data.ftLastModified === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftLastModified))), true);
  // 0x50: pointer
  if (data?.securityData !== undefined) view.setBigUint64(80, data.securityData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.securityData))), true);
  // 0x58: pointer
  if (data?.data !== undefined) view.setBigUint64(88, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class PEER_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get type(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get id(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwVersion(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: buffer
  get pwzCreatorId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pwzModifiedById(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pwzAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ftCreation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get ftExpiration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get ftLastModified(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get securityData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set type(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set id(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwVersion(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: buffer
  set pwzCreatorId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pwzModifiedById(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pwzAttributes(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: pointer
  set ftCreation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set ftExpiration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set ftLastModified(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set securityData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionCode))), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionRecord))), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionAddress))), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionInformation))), true);
  return buf;
}

export class EXCEPTION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionCode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExceptionAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NumberParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ExceptionCode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExceptionAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set NumberParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionRecord))), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export class EXCEPTION_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFirstChance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFirstChance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hThread))), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpThreadLocalBase))), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStartAddress))), true);
  return buf;
}

export class CREATE_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hFile))), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hProcess))), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hThread))), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfImage))), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpThreadLocalBase))), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStartAddress))), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpImageName))), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

export class CREATE_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpBaseOfImage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u16
  get fUnicode(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpBaseOfImage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u16
  set fUnicode(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hFile))), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfDll))), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpImageName))), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

export class LOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get fUnicode(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set fUnicode(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfDll))), true);
  return buf;
}

export class UNLOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null | Uint8Array;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

export class OUTPUT_DEBUG_STRING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpDebugStringData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get fUnicode(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get nDebugStringLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set lpDebugStringData(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u16
  set fUnicode(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set nDebugStringLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

export class RIP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwError(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwError(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Exception))), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateThread))), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateProcessInfo))), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExitThread))), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExitProcess))), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LoadDll))), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnloadDll))), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DebugString))), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RipInfo))), true);
  return buf;
}

export class _u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Exception(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get CreateThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateProcessInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExitThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ExitProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get LoadDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get UnloadDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get DebugString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get RipInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Exception(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set CreateThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateProcessInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExitThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ExitProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set LoadDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set UnloadDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set DebugString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set RipInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinSock.IN6_ADDR (size: 8)
 */
export interface IN6_ADDR {
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue;
}

export const sizeofIN6_ADDR = 8;

export function allocIN6_ADDR(data?: Partial<IN6_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN6_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u !== undefined) view.setBigUint64(0, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  return buf;
}

export class IN6_ADDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_IN6 (size: 24)
 */
export interface SOCKADDR_IN6 {
  /** u16 */
  sin6_family: number;
  /** u16 */
  sin6_port: number;
  /** u32 */
  sin6_flowinfo: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  sin6_addr: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofSOCKADDR_IN6 = 24;

export function allocSOCKADDR_IN6(data?: Partial<SOCKADDR_IN6>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_IN6);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sin6_family !== undefined) view.setUint16(0, Number(data.sin6_family), true);
  // 0x02: u16
  if (data?.sin6_port !== undefined) view.setUint16(2, Number(data.sin6_port), true);
  // 0x04: u32
  if (data?.sin6_flowinfo !== undefined) view.setUint32(4, Number(data.sin6_flowinfo), true);
  // 0x08: pointer
  if (data?.sin6_addr !== undefined) view.setBigUint64(8, data.sin6_addr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sin6_addr))), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class SOCKADDR_IN6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get sin6_family(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get sin6_port(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get sin6_flowinfo(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get sin6_addr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set sin6_family(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set sin6_port(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set sin6_flowinfo(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set sin6_addr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_ADDRESS (size: 16)
 */
export interface PEER_ADDRESS {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_IN6 */
  sin6: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_ADDRESS = 16;

export function allocPEER_ADDRESS(data?: Partial<PEER_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sin6 !== undefined) view.setBigUint64(8, data.sin6 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sin6))), true);
  return buf;
}

export class PEER_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get sin6(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set sin6(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_CONNECTION_INFO (size: 40)
 */
export interface PEER_CONNECTION_INFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u64 */
  ullConnectionId: Deno.PointerValue;
  /** u64 */
  ullNodeId: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwzPeerId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.P2P.PEER_ADDRESS */
  address: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_CONNECTION_INFO = 40;

export function allocPEER_CONNECTION_INFO(data?: Partial<PEER_CONNECTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_CONNECTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u64
  if (data?.ullConnectionId !== undefined) view.setBigUint64(8, BigInt(data.ullConnectionId), true);
  // 0x10: u64
  if (data?.ullNodeId !== undefined) view.setBigUint64(16, BigInt(data.ullNodeId), true);
  // 0x18: buffer
  if (data?.pwzPeerId !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzPeerId);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.address !== undefined) view.setBigUint64(32, data.address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.address))), true);
  return buf;
}

export class PEER_CONNECTION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get ullConnectionId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get ullNodeId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: buffer
  get pwzPeerId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set ullConnectionId(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set ullNodeId(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set pwzPeerId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_INCOMING_DATA (size: 32)
 */
export interface PEER_EVENT_INCOMING_DATA {
  /** u32 */
  dwSize: number;
  /** u64 */
  ullConnectionId: Deno.PointerValue;
  /** System.Guid */
  type: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PEER_DATA */
  data: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_EVENT_INCOMING_DATA = 32;

export function allocPEER_EVENT_INCOMING_DATA(data?: Partial<PEER_EVENT_INCOMING_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_INCOMING_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.ullConnectionId !== undefined) view.setBigUint64(8, BigInt(data.ullConnectionId), true);
  // 0x10: pointer
  if (data?.type !== undefined) view.setBigUint64(16, data.type === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.type))), true);
  // 0x18: pointer
  if (data?.data !== undefined) view.setBigUint64(24, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class PEER_EVENT_INCOMING_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get ullConnectionId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get type(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set ullConnectionId(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set type(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_RECORD_CHANGE_DATA (size: 24)
 */
export interface PEER_EVENT_RECORD_CHANGE_DATA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.NetworkManagement.P2P.PEER_RECORD_CHANGE_TYPE */
  changeType: PEER_RECORD_CHANGE_TYPE;
  /** System.Guid */
  recordId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  recordType: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_EVENT_RECORD_CHANGE_DATA = 24;

export function allocPEER_EVENT_RECORD_CHANGE_DATA(data?: Partial<PEER_EVENT_RECORD_CHANGE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_RECORD_CHANGE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.changeType !== undefined) view.setInt32(4, Number(data.changeType), true);
  // 0x08: pointer
  if (data?.recordId !== undefined) view.setBigUint64(8, data.recordId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.recordId))), true);
  // 0x10: pointer
  if (data?.recordType !== undefined) view.setBigUint64(16, data.recordType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.recordType))), true);
  return buf;
}

export class PEER_EVENT_RECORD_CHANGE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get changeType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get recordId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get recordType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set changeType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set recordId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set recordType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_CONNECTION_CHANGE_DATA (size: 40)
 */
export interface PEER_EVENT_CONNECTION_CHANGE_DATA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.NetworkManagement.P2P.PEER_CONNECTION_STATUS */
  status: PEER_CONNECTION_STATUS;
  /** u64 */
  ullConnectionId: Deno.PointerValue;
  /** u64 */
  ullNodeId: Deno.PointerValue;
  /** u64 */
  ullNextConnectionId: Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  hrConnectionFailedReason: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_EVENT_CONNECTION_CHANGE_DATA = 40;

export function allocPEER_EVENT_CONNECTION_CHANGE_DATA(data?: Partial<PEER_EVENT_CONNECTION_CHANGE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_CONNECTION_CHANGE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.status !== undefined) view.setInt32(4, Number(data.status), true);
  // 0x08: u64
  if (data?.ullConnectionId !== undefined) view.setBigUint64(8, BigInt(data.ullConnectionId), true);
  // 0x10: u64
  if (data?.ullNodeId !== undefined) view.setBigUint64(16, BigInt(data.ullNodeId), true);
  // 0x18: u64
  if (data?.ullNextConnectionId !== undefined) view.setBigUint64(24, BigInt(data.ullNextConnectionId), true);
  // 0x20: pointer
  if (data?.hrConnectionFailedReason !== undefined) view.setBigUint64(32, data.hrConnectionFailedReason === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hrConnectionFailedReason))), true);
  return buf;
}

export class PEER_EVENT_CONNECTION_CHANGE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get status(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u64
  get ullConnectionId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get ullNodeId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ullNextConnectionId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get hrConnectionFailedReason(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set status(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u64
  set ullConnectionId(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set ullNodeId(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ullNextConnectionId(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set hrConnectionFailedReason(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_SYNCHRONIZED_DATA (size: 16)
 */
export interface PEER_EVENT_SYNCHRONIZED_DATA {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  recordType: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_EVENT_SYNCHRONIZED_DATA = 16;

export function allocPEER_EVENT_SYNCHRONIZED_DATA(data?: Partial<PEER_EVENT_SYNCHRONIZED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_SYNCHRONIZED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.recordType !== undefined) view.setBigUint64(8, data.recordType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.recordType))), true);
  return buf;
}

export class PEER_EVENT_SYNCHRONIZED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get recordType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set recordType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_GRAPH_PROPERTIES (size: 56)
 */
export interface PEER_GRAPH_PROPERTIES {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwScope: number;
  /** u32 */
  dwMaxRecordSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzGraphId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzCreatorId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzFriendlyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzComment: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ulPresenceLifetime: number;
  /** u32 */
  cPresenceMax: number;
}

export const sizeofPEER_GRAPH_PROPERTIES = 56;

export function allocPEER_GRAPH_PROPERTIES(data?: Partial<PEER_GRAPH_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_GRAPH_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwScope !== undefined) view.setUint32(8, Number(data.dwScope), true);
  // 0x0c: u32
  if (data?.dwMaxRecordSize !== undefined) view.setUint32(12, Number(data.dwMaxRecordSize), true);
  // 0x10: buffer
  if (data?.pwzGraphId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzGraphId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pwzCreatorId !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzCreatorId);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pwzFriendlyName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwzFriendlyName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pwzComment !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwzComment);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.ulPresenceLifetime !== undefined) view.setUint32(48, Number(data.ulPresenceLifetime), true);
  // 0x34: u32
  if (data?.cPresenceMax !== undefined) view.setUint32(52, Number(data.cPresenceMax), true);
  return buf;
}

export class PEER_GRAPH_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwScope(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwMaxRecordSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: buffer
  get pwzGraphId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pwzCreatorId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pwzFriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pwzComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get ulPresenceLifetime(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get cPresenceMax(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwScope(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwMaxRecordSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: buffer
  set pwzGraphId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pwzCreatorId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pwzFriendlyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pwzComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set ulPresenceLifetime(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set cPresenceMax(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_NODE_INFO (size: 48)
 */
export interface PEER_NODE_INFO {
  /** u32 */
  dwSize: number;
  /** u64 */
  ullNodeId: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwzPeerId: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cAddresses: number;
  /** ptr */
  pAddresses: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzAttributes: string | null | Uint8Array | Uint16Array;
}

export const sizeofPEER_NODE_INFO = 48;

export function allocPEER_NODE_INFO(data?: Partial<PEER_NODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_NODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.ullNodeId !== undefined) view.setBigUint64(8, BigInt(data.ullNodeId), true);
  // 0x10: buffer
  if (data?.pwzPeerId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzPeerId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.cAddresses !== undefined) view.setUint32(24, Number(data.cAddresses), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pAddresses !== undefined) view.setBigUint64(32, data.pAddresses === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pAddresses))), true);
  // 0x28: buffer
  if (data?.pwzAttributes !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwzAttributes);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class PEER_NODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get ullNodeId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: buffer
  get pwzPeerId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cAddresses(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pAddresses(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pwzAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set ullNodeId(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: buffer
  set pwzPeerId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set cAddresses(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pAddresses(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: buffer
  set pwzAttributes(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_NODE_CHANGE_DATA (size: 24)
 */
export interface PEER_EVENT_NODE_CHANGE_DATA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.NetworkManagement.P2P.PEER_NODE_CHANGE_TYPE */
  changeType: PEER_NODE_CHANGE_TYPE;
  /** u64 */
  ullNodeId: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwzPeerId: string | null | Uint8Array | Uint16Array;
}

export const sizeofPEER_EVENT_NODE_CHANGE_DATA = 24;

export function allocPEER_EVENT_NODE_CHANGE_DATA(data?: Partial<PEER_EVENT_NODE_CHANGE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_NODE_CHANGE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.changeType !== undefined) view.setInt32(4, Number(data.changeType), true);
  // 0x08: u64
  if (data?.ullNodeId !== undefined) view.setBigUint64(8, BigInt(data.ullNodeId), true);
  // 0x10: buffer
  if (data?.pwzPeerId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzPeerId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class PEER_EVENT_NODE_CHANGE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get changeType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u64
  get ullNodeId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: buffer
  get pwzPeerId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set changeType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u64
  set ullNodeId(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: buffer
  set pwzPeerId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_GRAPH_EVENT_REGISTRATION (size: 16)
 */
export interface PEER_GRAPH_EVENT_REGISTRATION {
  /** Windows.Win32.NetworkManagement.P2P.PEER_GRAPH_EVENT_TYPE */
  eventType: PEER_GRAPH_EVENT_TYPE;
  /** ptr */
  pType: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_GRAPH_EVENT_REGISTRATION = 16;

export function allocPEER_GRAPH_EVENT_REGISTRATION(data?: Partial<PEER_GRAPH_EVENT_REGISTRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_GRAPH_EVENT_REGISTRATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eventType !== undefined) view.setInt32(0, Number(data.eventType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pType !== undefined) view.setBigUint64(8, data.pType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pType))), true);
  return buf;
}

export class PEER_GRAPH_EVENT_REGISTRATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eventType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set eventType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_GRAPH_EVENT_DATA (size: 16)
 */
export interface PEER_GRAPH_EVENT_DATA {
  /** Windows.Win32.NetworkManagement.P2P.PEER_GRAPH_EVENT_TYPE */
  eventType: PEER_GRAPH_EVENT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_GRAPH_EVENT_DATA = 16;

export function allocPEER_GRAPH_EVENT_DATA(data?: Partial<PEER_GRAPH_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_GRAPH_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eventType !== undefined) view.setInt32(0, Number(data.eventType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PEER_GRAPH_EVENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eventType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set eventType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_SECURITY_INTERFACE (size: 80)
 */
export interface PEER_SECURITY_INTERFACE {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzSspFilename: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzPackageName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbSecurityInfo: number;
  /** ptr */
  pbSecurityInfo: Deno.PointerValue | Uint8Array;
  /** ptr */
  pvContext: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.P2P.PFNPEER_VALIDATE_RECORD */
  pfnValidateRecord: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PFNPEER_SECURE_RECORD */
  pfnSecureRecord: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PFNPEER_FREE_SECURITY_DATA */
  pfnFreeSecurityData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PFNPEER_ON_PASSWORD_AUTH_FAILED */
  pfnAuthFailed: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_SECURITY_INTERFACE = 80;

export function allocPEER_SECURITY_INTERFACE(data?: Partial<PEER_SECURITY_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_SECURITY_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwzSspFilename !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzSspFilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pwzPackageName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzPackageName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.cbSecurityInfo !== undefined) view.setUint32(24, Number(data.cbSecurityInfo), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pbSecurityInfo !== undefined) view.setBigUint64(32, data.pbSecurityInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbSecurityInfo))), true);
  // 0x28: pointer
  if (data?.pvContext !== undefined) view.setBigUint64(40, data.pvContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvContext))), true);
  // 0x30: pointer
  if (data?.pfnValidateRecord !== undefined) view.setBigUint64(48, data.pfnValidateRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnValidateRecord))), true);
  // 0x38: pointer
  if (data?.pfnSecureRecord !== undefined) view.setBigUint64(56, data.pfnSecureRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnSecureRecord))), true);
  // 0x40: pointer
  if (data?.pfnFreeSecurityData !== undefined) view.setBigUint64(64, data.pfnFreeSecurityData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnFreeSecurityData))), true);
  // 0x48: pointer
  if (data?.pfnAuthFailed !== undefined) view.setBigUint64(72, data.pfnAuthFailed === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnAuthFailed))), true);
  return buf;
}

export class PEER_SECURITY_INTERFACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwzSspFilename(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwzPackageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cbSecurityInfo(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pbSecurityInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pvContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get pfnValidateRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pfnSecureRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pfnFreeSecurityData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get pfnAuthFailed(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwzSspFilename(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pwzPackageName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set cbSecurityInfo(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pbSecurityInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pvContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set pfnValidateRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pfnSecureRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pfnFreeSecurityData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set pfnAuthFailed(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_CREDENTIAL_INFO (size: 72)
 */
export interface PEER_CREDENTIAL_INFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzFriendlyName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pPublicKey: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzIssuerPeerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzIssuerFriendlyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftValidityStart: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftValidityEnd: Uint8Array | Deno.PointerValue;
  /** u32 */
  cRoles: number;
  /** ptr */
  pRoles: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_CREDENTIAL_INFO = 72;

export function allocPEER_CREDENTIAL_INFO(data?: Partial<PEER_CREDENTIAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_CREDENTIAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.pwzFriendlyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzFriendlyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.pPublicKey !== undefined) view.setBigUint64(16, data.pPublicKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPublicKey))), true);
  // 0x18: buffer
  if (data?.pwzIssuerPeerName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzIssuerPeerName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pwzIssuerFriendlyName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwzIssuerFriendlyName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.ftValidityStart !== undefined) view.setBigUint64(40, data.ftValidityStart === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftValidityStart))), true);
  // 0x30: pointer
  if (data?.ftValidityEnd !== undefined) view.setBigUint64(48, data.ftValidityEnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftValidityEnd))), true);
  // 0x38: u32
  if (data?.cRoles !== undefined) view.setUint32(56, Number(data.cRoles), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.pRoles !== undefined) view.setBigUint64(64, data.pRoles === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRoles))), true);
  return buf;
}

export class PEER_CREDENTIAL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pwzFriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pPublicKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pwzIssuerPeerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pwzIssuerFriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ftValidityStart(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ftValidityEnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cRoles(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get pRoles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pwzFriendlyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set pPublicKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pwzIssuerPeerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pwzIssuerFriendlyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set ftValidityStart(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ftValidityEnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cRoles(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set pRoles(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_MEMBER (size: 56)
 */
export interface PEER_MEMBER {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzIdentity: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzAttributes: string | null | Uint8Array | Uint16Array;
  /** u64 */
  ullNodeId: Deno.PointerValue;
  /** u32 */
  cAddresses: number;
  /** ptr */
  pAddresses: Deno.PointerValue | Uint8Array;
  /** ptr */
  pCredentialInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_MEMBER = 56;

export function allocPEER_MEMBER(data?: Partial<PEER_MEMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_MEMBER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.pwzIdentity !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzIdentity);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pwzAttributes !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzAttributes);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u64
  if (data?.ullNodeId !== undefined) view.setBigUint64(24, BigInt(data.ullNodeId), true);
  // 0x20: u32
  if (data?.cAddresses !== undefined) view.setUint32(32, Number(data.cAddresses), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pAddresses !== undefined) view.setBigUint64(40, data.pAddresses === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pAddresses))), true);
  // 0x30: pointer
  if (data?.pCredentialInfo !== undefined) view.setBigUint64(48, data.pCredentialInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCredentialInfo))), true);
  return buf;
}

export class PEER_MEMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pwzIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwzAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u64
  get ullNodeId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get cAddresses(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pAddresses(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get pCredentialInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pwzIdentity(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pwzAttributes(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u64
  set ullNodeId(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set cAddresses(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pAddresses(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set pCredentialInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_INVITATION_INFO (size: 136)
 */
export interface PEER_INVITATION_INFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzCloudName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwScope: number;
  /** u32 */
  dwCloudFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzGroupPeerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzIssuerPeerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzSubjectPeerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzGroupFriendlyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzIssuerFriendlyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzSubjectFriendlyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftValidityStart: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftValidityEnd: Uint8Array | Deno.PointerValue;
  /** u32 */
  cRoles: number;
  /** ptr */
  pRoles: Deno.PointerValue | Uint8Array;
  /** u32 */
  cClassifiers: number;
  /** ptr */
  ppwzClassifiers: Deno.PointerValue | Uint8Array;
  /** ptr */
  pSubjectPublicKey: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.P2P.PEER_GROUP_AUTHENTICATION_SCHEME */
  authScheme: PEER_GROUP_AUTHENTICATION_SCHEME;
}

export const sizeofPEER_INVITATION_INFO = 136;

export function allocPEER_INVITATION_INFO(data?: Partial<PEER_INVITATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_INVITATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.pwzCloudName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzCloudName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.dwScope !== undefined) view.setUint32(16, Number(data.dwScope), true);
  // 0x14: u32
  if (data?.dwCloudFlags !== undefined) view.setUint32(20, Number(data.dwCloudFlags), true);
  // 0x18: buffer
  if (data?.pwzGroupPeerName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzGroupPeerName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pwzIssuerPeerName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwzIssuerPeerName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pwzSubjectPeerName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwzSubjectPeerName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pwzGroupFriendlyName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwzGroupFriendlyName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pwzIssuerFriendlyName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwzIssuerFriendlyName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pwzSubjectFriendlyName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pwzSubjectFriendlyName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: pointer
  if (data?.ftValidityStart !== undefined) view.setBigUint64(72, data.ftValidityStart === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftValidityStart))), true);
  // 0x50: pointer
  if (data?.ftValidityEnd !== undefined) view.setBigUint64(80, data.ftValidityEnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftValidityEnd))), true);
  // 0x58: u32
  if (data?.cRoles !== undefined) view.setUint32(88, Number(data.cRoles), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.pRoles !== undefined) view.setBigUint64(96, data.pRoles === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRoles))), true);
  // 0x68: u32
  if (data?.cClassifiers !== undefined) view.setUint32(104, Number(data.cClassifiers), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.ppwzClassifiers !== undefined) view.setBigUint64(112, data.ppwzClassifiers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppwzClassifiers))), true);
  // 0x78: pointer
  if (data?.pSubjectPublicKey !== undefined) view.setBigUint64(120, data.pSubjectPublicKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSubjectPublicKey))), true);
  // 0x80: i32
  if (data?.authScheme !== undefined) view.setInt32(128, Number(data.authScheme), true);
  // 0x84: pad4
  return buf;
}

export class PEER_INVITATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pwzCloudName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwScope(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwCloudFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: buffer
  get pwzGroupPeerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pwzIssuerPeerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pwzSubjectPeerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pwzGroupFriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pwzIssuerFriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pwzSubjectFriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get ftValidityStart(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ftValidityEnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get cRoles(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get pRoles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get cClassifiers(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get ppwzClassifiers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get pSubjectPublicKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: i32
  get authScheme(): number {
    return this.view.getInt32(128, true);
  }

  // 0x84: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pwzCloudName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set dwScope(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwCloudFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: buffer
  set pwzGroupPeerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pwzIssuerPeerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pwzSubjectPeerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pwzGroupFriendlyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pwzIssuerFriendlyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pwzSubjectFriendlyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: pointer
  set ftValidityStart(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ftValidityEnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set cRoles(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set pRoles(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set cClassifiers(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set ppwzClassifiers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set pSubjectPublicKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: i32
  set authScheme(value: number) {
    this.view.setInt32(128, value, true);
  }

  // 0x84: pad4
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_GROUP_PROPERTIES (size: 88)
 */
export interface PEER_GROUP_PROPERTIES {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzCloud: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzClassifier: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzGroupPeerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzCreatorPeerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzFriendlyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzComment: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ulMemberDataLifetime: number;
  /** u32 */
  ulPresenceLifetime: number;
  /** u32 */
  dwAuthenticationSchemes: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzGroupPassword: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  groupPasswordRole: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_GROUP_PROPERTIES = 88;

export function allocPEER_GROUP_PROPERTIES(data?: Partial<PEER_GROUP_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_GROUP_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.pwzCloud !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzCloud);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pwzClassifier !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzClassifier);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pwzGroupPeerName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzGroupPeerName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pwzCreatorPeerName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwzCreatorPeerName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pwzFriendlyName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwzFriendlyName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pwzComment !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwzComment);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.ulMemberDataLifetime !== undefined) view.setUint32(56, Number(data.ulMemberDataLifetime), true);
  // 0x3c: u32
  if (data?.ulPresenceLifetime !== undefined) view.setUint32(60, Number(data.ulPresenceLifetime), true);
  // 0x40: u32
  if (data?.dwAuthenticationSchemes !== undefined) view.setUint32(64, Number(data.dwAuthenticationSchemes), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.pwzGroupPassword !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pwzGroupPassword);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: pointer
  if (data?.groupPasswordRole !== undefined) view.setBigUint64(80, data.groupPasswordRole === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.groupPasswordRole))), true);
  return buf;
}

export class PEER_GROUP_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pwzCloud(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwzClassifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pwzGroupPeerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pwzCreatorPeerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pwzFriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pwzComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get ulMemberDataLifetime(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get ulPresenceLifetime(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwAuthenticationSchemes(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  get pwzGroupPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get groupPasswordRole(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pwzCloud(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pwzClassifier(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pwzGroupPeerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pwzCreatorPeerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pwzFriendlyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pwzComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set ulMemberDataLifetime(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set ulPresenceLifetime(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwAuthenticationSchemes(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  set pwzGroupPassword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: pointer
  set groupPasswordRole(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_MEMBER_CHANGE_DATA (size: 16)
 */
export interface PEER_EVENT_MEMBER_CHANGE_DATA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.NetworkManagement.P2P.PEER_MEMBER_CHANGE_TYPE */
  changeType: PEER_MEMBER_CHANGE_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pwzIdentity: string | null | Uint8Array | Uint16Array;
}

export const sizeofPEER_EVENT_MEMBER_CHANGE_DATA = 16;

export function allocPEER_EVENT_MEMBER_CHANGE_DATA(data?: Partial<PEER_EVENT_MEMBER_CHANGE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_MEMBER_CHANGE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.changeType !== undefined) view.setInt32(4, Number(data.changeType), true);
  // 0x08: buffer
  if (data?.pwzIdentity !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzIdentity);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class PEER_EVENT_MEMBER_CHANGE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get changeType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: buffer
  get pwzIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set changeType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: buffer
  set pwzIdentity(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_GROUP_EVENT_REGISTRATION (size: 16)
 */
export interface PEER_GROUP_EVENT_REGISTRATION {
  /** Windows.Win32.NetworkManagement.P2P.PEER_GROUP_EVENT_TYPE */
  eventType: PEER_GROUP_EVENT_TYPE;
  /** ptr */
  pType: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_GROUP_EVENT_REGISTRATION = 16;

export function allocPEER_GROUP_EVENT_REGISTRATION(data?: Partial<PEER_GROUP_EVENT_REGISTRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_GROUP_EVENT_REGISTRATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eventType !== undefined) view.setInt32(0, Number(data.eventType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pType !== undefined) view.setBigUint64(8, data.pType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pType))), true);
  return buf;
}

export class PEER_GROUP_EVENT_REGISTRATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eventType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set eventType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_GROUP_EVENT_DATA (size: 16)
 */
export interface PEER_GROUP_EVENT_DATA {
  /** Windows.Win32.NetworkManagement.P2P.PEER_GROUP_EVENT_TYPE */
  eventType: PEER_GROUP_EVENT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_GROUP_EVENT_DATA = 16;

export function allocPEER_GROUP_EVENT_DATA(data?: Partial<PEER_GROUP_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_GROUP_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eventType !== undefined) view.setInt32(0, Number(data.eventType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PEER_GROUP_EVENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eventType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set eventType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_NAME_PAIR (size: 24)
 */
export interface PEER_NAME_PAIR {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzPeerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzFriendlyName: string | null | Uint8Array | Uint16Array;
}

export const sizeofPEER_NAME_PAIR = 24;

export function allocPEER_NAME_PAIR(data?: Partial<PEER_NAME_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_NAME_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwzPeerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzPeerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pwzFriendlyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzFriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class PEER_NAME_PAIRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwzPeerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwzFriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwzPeerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pwzFriendlyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_APPLICATION (size: 24)
 */
export interface PEER_APPLICATION {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PEER_DATA */
  data: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwzDescription: string | null | Uint8Array | Uint16Array;
}

export const sizeofPEER_APPLICATION = 24;

export function allocPEER_APPLICATION(data?: Partial<PEER_APPLICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_APPLICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.id))), true);
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x10: buffer
  if (data?.pwzDescription !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzDescription);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class PEER_APPLICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get id(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwzDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set id(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pwzDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_OBJECT (size: 24)
 */
export interface PEER_OBJECT {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PEER_DATA */
  data: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwPublicationScope: number;
}

export const sizeofPEER_OBJECT = 24;

export function allocPEER_OBJECT(data?: Partial<PEER_OBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_OBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.id))), true);
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x10: u32
  if (data?.dwPublicationScope !== undefined) view.setUint32(16, Number(data.dwPublicationScope), true);
  // 0x14: pad4
  return buf;
}

export class PEER_OBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get id(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwPublicationScope(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set id(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwPublicationScope(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type BOOL = number;

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_CONTACT (size: 48)
 */
export interface PEER_CONTACT {
  /** Windows.Win32.Foundation.PWSTR */
  pwzPeerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzNickName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzDisplayName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzEmailAddress: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fWatch: boolean;
  /** Windows.Win32.NetworkManagement.P2P.PEER_WATCH_PERMISSION */
  WatcherPermissions: PEER_WATCH_PERMISSION;
  /** Windows.Win32.NetworkManagement.P2P.PEER_DATA */
  credentials: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_CONTACT = 48;

export function allocPEER_CONTACT(data?: Partial<PEER_CONTACT>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_CONTACT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwzPeerName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwzPeerName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pwzNickName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzNickName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pwzDisplayName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzDisplayName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pwzEmailAddress !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzEmailAddress);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.fWatch !== undefined) view.setInt32(32, Number(data.fWatch), true);
  // 0x24: i32
  if (data?.WatcherPermissions !== undefined) view.setInt32(36, Number(data.WatcherPermissions), true);
  // 0x28: pointer
  if (data?.credentials !== undefined) view.setBigUint64(40, data.credentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.credentials))), true);
  return buf;
}

export class PEER_CONTACTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwzPeerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwzNickName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwzDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pwzEmailAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get fWatch(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get WatcherPermissions(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: pointer
  get credentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pwzPeerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pwzNickName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pwzDisplayName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pwzEmailAddress(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set fWatch(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set WatcherPermissions(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: pointer
  set credentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_ENDPOINT (size: 16)
 */
export interface PEER_ENDPOINT {
  /** Windows.Win32.NetworkManagement.P2P.PEER_ADDRESS */
  address: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwzEndpointName: string | null | Uint8Array | Uint16Array;
}

export const sizeofPEER_ENDPOINT = 16;

export function allocPEER_ENDPOINT(data?: Partial<PEER_ENDPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_ENDPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.address !== undefined) view.setBigUint64(0, data.address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.address))), true);
  // 0x08: buffer
  if (data?.pwzEndpointName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzEndpointName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class PEER_ENDPOINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwzEndpointName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pwzEndpointName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_PEOPLE_NEAR_ME (size: 24)
 */
export interface PEER_PEOPLE_NEAR_ME {
  /** Windows.Win32.Foundation.PWSTR */
  pwzNickName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.P2P.PEER_ENDPOINT */
  endpoint: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_PEOPLE_NEAR_ME = 24;

export function allocPEER_PEOPLE_NEAR_ME(data?: Partial<PEER_PEOPLE_NEAR_ME>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_PEOPLE_NEAR_ME);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwzNickName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwzNickName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.endpoint !== undefined) view.setBigUint64(8, data.endpoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.endpoint))), true);
  // 0x10: pointer
  if (data?.id !== undefined) view.setBigUint64(16, data.id === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.id))), true);
  return buf;
}

export class PEER_PEOPLE_NEAR_MEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwzNickName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get endpoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get id(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pwzNickName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set endpoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set id(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_INVITATION (size: 24)
 */
export interface PEER_INVITATION {
  /** System.Guid */
  applicationId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.PEER_DATA */
  applicationData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwzMessage: string | null | Uint8Array | Uint16Array;
}

export const sizeofPEER_INVITATION = 24;

export function allocPEER_INVITATION(data?: Partial<PEER_INVITATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_INVITATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.applicationId !== undefined) view.setBigUint64(0, data.applicationId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.applicationId))), true);
  // 0x08: pointer
  if (data?.applicationData !== undefined) view.setBigUint64(8, data.applicationData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.applicationData))), true);
  // 0x10: buffer
  if (data?.pwzMessage !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzMessage);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class PEER_INVITATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get applicationId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get applicationData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwzMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set applicationId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set applicationData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pwzMessage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_INVITATION_RESPONSE (size: 24)
 */
export interface PEER_INVITATION_RESPONSE {
  /** Windows.Win32.NetworkManagement.P2P.PEER_INVITATION_RESPONSE_TYPE */
  action: PEER_INVITATION_RESPONSE_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pwzMessage: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HRESULT */
  hrExtendedInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_INVITATION_RESPONSE = 24;

export function allocPEER_INVITATION_RESPONSE(data?: Partial<PEER_INVITATION_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_INVITATION_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.action !== undefined) view.setInt32(0, Number(data.action), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwzMessage !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzMessage);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.hrExtendedInfo !== undefined) view.setBigUint64(16, data.hrExtendedInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hrExtendedInfo))), true);
  return buf;
}

export class PEER_INVITATION_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get action(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwzMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hrExtendedInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set action(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwzMessage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set hrExtendedInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_APP_LAUNCH_INFO (size: 24)
 */
export interface PEER_APP_LAUNCH_INFO {
  /** ptr */
  pContact: Deno.PointerValue | Uint8Array;
  /** ptr */
  pEndpoint: Deno.PointerValue | Uint8Array;
  /** ptr */
  pInvitation: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_APP_LAUNCH_INFO = 24;

export function allocPEER_APP_LAUNCH_INFO(data?: Partial<PEER_APP_LAUNCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_APP_LAUNCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pContact !== undefined) view.setBigUint64(0, data.pContact === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pContact))), true);
  // 0x08: pointer
  if (data?.pEndpoint !== undefined) view.setBigUint64(8, data.pEndpoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEndpoint))), true);
  // 0x10: pointer
  if (data?.pInvitation !== undefined) view.setBigUint64(16, data.pInvitation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInvitation))), true);
  return buf;
}

export class PEER_APP_LAUNCH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pContact(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pEndpoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pInvitation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pContact(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pEndpoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pInvitation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_APPLICATION_REGISTRATION_INFO (size: 32)
 */
export interface PEER_APPLICATION_REGISTRATION_INFO {
  /** Windows.Win32.NetworkManagement.P2P.PEER_APPLICATION */
  application: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwzApplicationToLaunch: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzApplicationArguments: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwPublicationScope: number;
}

export const sizeofPEER_APPLICATION_REGISTRATION_INFO = 32;

export function allocPEER_APPLICATION_REGISTRATION_INFO(data?: Partial<PEER_APPLICATION_REGISTRATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_APPLICATION_REGISTRATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.application !== undefined) view.setBigUint64(0, data.application === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.application))), true);
  // 0x08: buffer
  if (data?.pwzApplicationToLaunch !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzApplicationToLaunch);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pwzApplicationArguments !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzApplicationArguments);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwPublicationScope !== undefined) view.setUint32(24, Number(data.dwPublicationScope), true);
  // 0x1c: pad4
  return buf;
}

export class PEER_APPLICATION_REGISTRATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get application(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwzApplicationToLaunch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwzApplicationArguments(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwPublicationScope(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set application(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pwzApplicationToLaunch(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pwzApplicationArguments(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwPublicationScope(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_PRESENCE_INFO (size: 16)
 */
export interface PEER_PRESENCE_INFO {
  /** Windows.Win32.NetworkManagement.P2P.PEER_PRESENCE_STATUS */
  status: PEER_PRESENCE_STATUS;
  /** Windows.Win32.Foundation.PWSTR */
  pwzDescriptiveText: string | null | Uint8Array | Uint16Array;
}

export const sizeofPEER_PRESENCE_INFO = 16;

export function allocPEER_PRESENCE_INFO(data?: Partial<PEER_PRESENCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_PRESENCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.status !== undefined) view.setInt32(0, Number(data.status), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwzDescriptiveText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzDescriptiveText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class PEER_PRESENCE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get status(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwzDescriptiveText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set status(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwzDescriptiveText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_COLLAB_EVENT_REGISTRATION (size: 16)
 */
export interface PEER_COLLAB_EVENT_REGISTRATION {
  /** Windows.Win32.NetworkManagement.P2P.PEER_COLLAB_EVENT_TYPE */
  eventType: PEER_COLLAB_EVENT_TYPE;
  /** ptr */
  pInstance: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_COLLAB_EVENT_REGISTRATION = 16;

export function allocPEER_COLLAB_EVENT_REGISTRATION(data?: Partial<PEER_COLLAB_EVENT_REGISTRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_COLLAB_EVENT_REGISTRATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eventType !== undefined) view.setInt32(0, Number(data.eventType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pInstance !== undefined) view.setBigUint64(8, data.pInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInstance))), true);
  return buf;
}

export class PEER_COLLAB_EVENT_REGISTRATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eventType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set eventType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_WATCHLIST_CHANGED_DATA (size: 16)
 */
export interface PEER_EVENT_WATCHLIST_CHANGED_DATA {
  /** ptr */
  pContact: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.P2P.PEER_CHANGE_TYPE */
  changeType: PEER_CHANGE_TYPE;
}

export const sizeofPEER_EVENT_WATCHLIST_CHANGED_DATA = 16;

export function allocPEER_EVENT_WATCHLIST_CHANGED_DATA(data?: Partial<PEER_EVENT_WATCHLIST_CHANGED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_WATCHLIST_CHANGED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pContact !== undefined) view.setBigUint64(0, data.pContact === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pContact))), true);
  // 0x08: i32
  if (data?.changeType !== undefined) view.setInt32(8, Number(data.changeType), true);
  // 0x0c: pad4
  return buf;
}

export class PEER_EVENT_WATCHLIST_CHANGED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pContact(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get changeType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pContact(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set changeType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_PRESENCE_CHANGED_DATA (size: 32)
 */
export interface PEER_EVENT_PRESENCE_CHANGED_DATA {
  /** ptr */
  pContact: Deno.PointerValue | Uint8Array;
  /** ptr */
  pEndpoint: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.P2P.PEER_CHANGE_TYPE */
  changeType: PEER_CHANGE_TYPE;
  /** ptr */
  pPresenceInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_EVENT_PRESENCE_CHANGED_DATA = 32;

export function allocPEER_EVENT_PRESENCE_CHANGED_DATA(data?: Partial<PEER_EVENT_PRESENCE_CHANGED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_PRESENCE_CHANGED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pContact !== undefined) view.setBigUint64(0, data.pContact === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pContact))), true);
  // 0x08: pointer
  if (data?.pEndpoint !== undefined) view.setBigUint64(8, data.pEndpoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEndpoint))), true);
  // 0x10: i32
  if (data?.changeType !== undefined) view.setInt32(16, Number(data.changeType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pPresenceInfo !== undefined) view.setBigUint64(24, data.pPresenceInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPresenceInfo))), true);
  return buf;
}

export class PEER_EVENT_PRESENCE_CHANGED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pContact(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pEndpoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get changeType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pPresenceInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pContact(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pEndpoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set changeType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pPresenceInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_APPLICATION_CHANGED_DATA (size: 32)
 */
export interface PEER_EVENT_APPLICATION_CHANGED_DATA {
  /** ptr */
  pContact: Deno.PointerValue | Uint8Array;
  /** ptr */
  pEndpoint: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.P2P.PEER_CHANGE_TYPE */
  changeType: PEER_CHANGE_TYPE;
  /** ptr */
  pApplication: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_EVENT_APPLICATION_CHANGED_DATA = 32;

export function allocPEER_EVENT_APPLICATION_CHANGED_DATA(data?: Partial<PEER_EVENT_APPLICATION_CHANGED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_APPLICATION_CHANGED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pContact !== undefined) view.setBigUint64(0, data.pContact === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pContact))), true);
  // 0x08: pointer
  if (data?.pEndpoint !== undefined) view.setBigUint64(8, data.pEndpoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEndpoint))), true);
  // 0x10: i32
  if (data?.changeType !== undefined) view.setInt32(16, Number(data.changeType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pApplication !== undefined) view.setBigUint64(24, data.pApplication === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pApplication))), true);
  return buf;
}

export class PEER_EVENT_APPLICATION_CHANGED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pContact(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pEndpoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get changeType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pApplication(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pContact(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pEndpoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set changeType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pApplication(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_OBJECT_CHANGED_DATA (size: 32)
 */
export interface PEER_EVENT_OBJECT_CHANGED_DATA {
  /** ptr */
  pContact: Deno.PointerValue | Uint8Array;
  /** ptr */
  pEndpoint: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.P2P.PEER_CHANGE_TYPE */
  changeType: PEER_CHANGE_TYPE;
  /** ptr */
  pObject: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_EVENT_OBJECT_CHANGED_DATA = 32;

export function allocPEER_EVENT_OBJECT_CHANGED_DATA(data?: Partial<PEER_EVENT_OBJECT_CHANGED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_OBJECT_CHANGED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pContact !== undefined) view.setBigUint64(0, data.pContact === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pContact))), true);
  // 0x08: pointer
  if (data?.pEndpoint !== undefined) view.setBigUint64(8, data.pEndpoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEndpoint))), true);
  // 0x10: i32
  if (data?.changeType !== undefined) view.setInt32(16, Number(data.changeType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pObject !== undefined) view.setBigUint64(24, data.pObject === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObject))), true);
  return buf;
}

export class PEER_EVENT_OBJECT_CHANGED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pContact(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pEndpoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get changeType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pObject(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pContact(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pEndpoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set changeType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pObject(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_ENDPOINT_CHANGED_DATA (size: 16)
 */
export interface PEER_EVENT_ENDPOINT_CHANGED_DATA {
  /** ptr */
  pContact: Deno.PointerValue | Uint8Array;
  /** ptr */
  pEndpoint: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_EVENT_ENDPOINT_CHANGED_DATA = 16;

export function allocPEER_EVENT_ENDPOINT_CHANGED_DATA(data?: Partial<PEER_EVENT_ENDPOINT_CHANGED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_ENDPOINT_CHANGED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pContact !== undefined) view.setBigUint64(0, data.pContact === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pContact))), true);
  // 0x08: pointer
  if (data?.pEndpoint !== undefined) view.setBigUint64(8, data.pEndpoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEndpoint))), true);
  return buf;
}

export class PEER_EVENT_ENDPOINT_CHANGED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pContact(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pEndpoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pContact(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pEndpoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_PEOPLE_NEAR_ME_CHANGED_DATA (size: 16)
 */
export interface PEER_EVENT_PEOPLE_NEAR_ME_CHANGED_DATA {
  /** Windows.Win32.NetworkManagement.P2P.PEER_CHANGE_TYPE */
  changeType: PEER_CHANGE_TYPE;
  /** ptr */
  pPeopleNearMe: Deno.PointerValue | Uint8Array;
}

export const sizeofPEER_EVENT_PEOPLE_NEAR_ME_CHANGED_DATA = 16;

export function allocPEER_EVENT_PEOPLE_NEAR_ME_CHANGED_DATA(data?: Partial<PEER_EVENT_PEOPLE_NEAR_ME_CHANGED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_PEOPLE_NEAR_ME_CHANGED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.changeType !== undefined) view.setInt32(0, Number(data.changeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPeopleNearMe !== undefined) view.setBigUint64(8, data.pPeopleNearMe === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPeopleNearMe))), true);
  return buf;
}

export class PEER_EVENT_PEOPLE_NEAR_ME_CHANGED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get changeType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPeopleNearMe(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set changeType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPeopleNearMe(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_EVENT_REQUEST_STATUS_CHANGED_DATA (size: 16)
 */
export interface PEER_EVENT_REQUEST_STATUS_CHANGED_DATA {
  /** ptr */
  pEndpoint: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  hrChange: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_EVENT_REQUEST_STATUS_CHANGED_DATA = 16;

export function allocPEER_EVENT_REQUEST_STATUS_CHANGED_DATA(data?: Partial<PEER_EVENT_REQUEST_STATUS_CHANGED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_EVENT_REQUEST_STATUS_CHANGED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pEndpoint !== undefined) view.setBigUint64(0, data.pEndpoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEndpoint))), true);
  // 0x08: pointer
  if (data?.hrChange !== undefined) view.setBigUint64(8, data.hrChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hrChange))), true);
  return buf;
}

export class PEER_EVENT_REQUEST_STATUS_CHANGED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pEndpoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hrChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pEndpoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hrChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_COLLAB_EVENT_DATA (size: 16)
 */
export interface PEER_COLLAB_EVENT_DATA {
  /** Windows.Win32.NetworkManagement.P2P.PEER_COLLAB_EVENT_TYPE */
  eventType: PEER_COLLAB_EVENT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_COLLAB_EVENT_DATA = 16;

export function allocPEER_COLLAB_EVENT_DATA(data?: Partial<PEER_COLLAB_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_COLLAB_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eventType !== undefined) view.setInt32(0, Number(data.eventType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PEER_COLLAB_EVENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eventType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set eventType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_PNRP_ENDPOINT_INFO (size: 40)
 */
export interface PEER_PNRP_ENDPOINT_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwzPeerName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cAddresses: number;
  /** ptr */
  ppAddresses: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.P2P.PEER_DATA */
  payload: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_PNRP_ENDPOINT_INFO = 40;

export function allocPEER_PNRP_ENDPOINT_INFO(data?: Partial<PEER_PNRP_ENDPOINT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_PNRP_ENDPOINT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwzPeerName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwzPeerName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.cAddresses !== undefined) view.setUint32(8, Number(data.cAddresses), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ppAddresses !== undefined) view.setBigUint64(16, data.ppAddresses === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppAddresses))), true);
  // 0x18: buffer
  if (data?.pwzComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.payload !== undefined) view.setBigUint64(32, data.payload === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.payload))), true);
  return buf;
}

export class PEER_PNRP_ENDPOINT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwzPeerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cAddresses(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ppAddresses(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pwzComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get payload(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pwzPeerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set cAddresses(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ppAddresses(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pwzComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set payload(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_PNRP_CLOUD_INFO (size: 16)
 */
export interface PEER_PNRP_CLOUD_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwzCloudName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.P2P.PNRP_SCOPE */
  dwScope: PNRP_SCOPE;
  /** u32 */
  dwScopeId: number;
}

export const sizeofPEER_PNRP_CLOUD_INFO = 16;

export function allocPEER_PNRP_CLOUD_INFO(data?: Partial<PEER_PNRP_CLOUD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_PNRP_CLOUD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwzCloudName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwzCloudName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.dwScope !== undefined) view.setInt32(8, Number(data.dwScope), true);
  // 0x0c: u32
  if (data?.dwScopeId !== undefined) view.setUint32(12, Number(data.dwScopeId), true);
  return buf;
}

export class PEER_PNRP_CLOUD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwzCloudName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get dwScope(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwScopeId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: buffer
  set pwzCloudName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set dwScope(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwScopeId(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEER_PNRP_REGISTRATION_INFO (size: 56)
 */
export interface PEER_PNRP_REGISTRATION_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwzCloudName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzPublishingIdentity: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cAddresses: number;
  /** ptr */
  ppAddresses: Deno.PointerValue | Uint8Array;
  /** u16 */
  wPort: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.P2P.PEER_DATA */
  payload: Uint8Array | Deno.PointerValue;
}

export const sizeofPEER_PNRP_REGISTRATION_INFO = 56;

export function allocPEER_PNRP_REGISTRATION_INFO(data?: Partial<PEER_PNRP_REGISTRATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEER_PNRP_REGISTRATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwzCloudName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwzCloudName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pwzPublishingIdentity !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzPublishingIdentity);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.cAddresses !== undefined) view.setUint32(16, Number(data.cAddresses), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ppAddresses !== undefined) view.setBigUint64(24, data.ppAddresses === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppAddresses))), true);
  // 0x20: u16
  if (data?.wPort !== undefined) view.setUint16(32, Number(data.wPort), true);
  // 0x22: pad6
  // 0x28: buffer
  if (data?.pwzComment !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwzComment);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.payload !== undefined) view.setBigUint64(48, data.payload === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.payload))), true);
  return buf;
}

export class PEER_PNRP_REGISTRATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwzCloudName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwzPublishingIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cAddresses(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ppAddresses(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get wPort(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: buffer
  get pwzComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get payload(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pwzCloudName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pwzPublishingIdentity(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set cAddresses(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ppAddresses(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set wPort(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: buffer
  set pwzComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set payload(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.DRT_DATA (size: 16)
 */
export interface DRT_DATA {
  /** u32 */
  cb: number;
  /** ptr */
  pb: Deno.PointerValue | Uint8Array;
}

export const sizeofDRT_DATA = 16;

export function allocDRT_DATA(data?: Partial<DRT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDRT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pb !== undefined) view.setBigUint64(8, data.pb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pb))), true);
  return buf;
}

export class DRT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cb(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cb(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.DRT_REGISTRATION (size: 16)
 */
export interface DRT_REGISTRATION {
  /** Windows.Win32.NetworkManagement.P2P.DRT_DATA */
  key: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.P2P.DRT_DATA */
  appData: Uint8Array | Deno.PointerValue;
}

export const sizeofDRT_REGISTRATION = 16;

export function allocDRT_REGISTRATION(data?: Partial<DRT_REGISTRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDRT_REGISTRATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.key !== undefined) view.setBigUint64(0, data.key === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.key))), true);
  // 0x08: pointer
  if (data?.appData !== undefined) view.setBigUint64(8, data.appData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.appData))), true);
  return buf;
}

export class DRT_REGISTRATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get key(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get appData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set key(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set appData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.DRT_SECURITY_PROVIDER (size: 112)
 */
export interface DRT_SECURITY_PROVIDER {
  /** ptr */
  pvContext: Deno.PointerValue | Uint8Array;
  /** isize */
  Attach: Deno.PointerValue;
  /** isize */
  Detach: Deno.PointerValue;
  /** isize */
  RegisterKey: Deno.PointerValue;
  /** isize */
  UnregisterKey: Deno.PointerValue;
  /** isize */
  ValidateAndUnpackPayload: Deno.PointerValue;
  /** isize */
  SecureAndPackPayload: Deno.PointerValue;
  /** isize */
  FreeData: Deno.PointerValue;
  /** isize */
  EncryptData: Deno.PointerValue;
  /** isize */
  DecryptData: Deno.PointerValue;
  /** isize */
  GetSerializedCredential: Deno.PointerValue;
  /** isize */
  ValidateRemoteCredential: Deno.PointerValue;
  /** isize */
  SignData: Deno.PointerValue;
  /** isize */
  VerifyData: Deno.PointerValue;
}

export const sizeofDRT_SECURITY_PROVIDER = 112;

export function allocDRT_SECURITY_PROVIDER(data?: Partial<DRT_SECURITY_PROVIDER>): Uint8Array {
  const buf = new Uint8Array(sizeofDRT_SECURITY_PROVIDER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pvContext !== undefined) view.setBigUint64(0, data.pvContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvContext))), true);
  // 0x08: isize
  if (data?.Attach !== undefined) view.setBigInt64(8, BigInt(data.Attach), true);
  // 0x10: isize
  if (data?.Detach !== undefined) view.setBigInt64(16, BigInt(data.Detach), true);
  // 0x18: isize
  if (data?.RegisterKey !== undefined) view.setBigInt64(24, BigInt(data.RegisterKey), true);
  // 0x20: isize
  if (data?.UnregisterKey !== undefined) view.setBigInt64(32, BigInt(data.UnregisterKey), true);
  // 0x28: isize
  if (data?.ValidateAndUnpackPayload !== undefined) view.setBigInt64(40, BigInt(data.ValidateAndUnpackPayload), true);
  // 0x30: isize
  if (data?.SecureAndPackPayload !== undefined) view.setBigInt64(48, BigInt(data.SecureAndPackPayload), true);
  // 0x38: isize
  if (data?.FreeData !== undefined) view.setBigInt64(56, BigInt(data.FreeData), true);
  // 0x40: isize
  if (data?.EncryptData !== undefined) view.setBigInt64(64, BigInt(data.EncryptData), true);
  // 0x48: isize
  if (data?.DecryptData !== undefined) view.setBigInt64(72, BigInt(data.DecryptData), true);
  // 0x50: isize
  if (data?.GetSerializedCredential !== undefined) view.setBigInt64(80, BigInt(data.GetSerializedCredential), true);
  // 0x58: isize
  if (data?.ValidateRemoteCredential !== undefined) view.setBigInt64(88, BigInt(data.ValidateRemoteCredential), true);
  // 0x60: isize
  if (data?.SignData !== undefined) view.setBigInt64(96, BigInt(data.SignData), true);
  // 0x68: isize
  if (data?.VerifyData !== undefined) view.setBigInt64(104, BigInt(data.VerifyData), true);
  return buf;
}

export class DRT_SECURITY_PROVIDERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pvContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: isize
  get Attach(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get Detach(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get RegisterKey(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get UnregisterKey(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get ValidateAndUnpackPayload(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get SecureAndPackPayload(): Deno.PointerValue {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get FreeData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get EncryptData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get DecryptData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get GetSerializedCredential(): Deno.PointerValue {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get ValidateRemoteCredential(): Deno.PointerValue {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get SignData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: isize
  get VerifyData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x00: pointer
  set pvContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: isize
  set Attach(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set Detach(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set RegisterKey(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set UnregisterKey(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set ValidateAndUnpackPayload(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set SecureAndPackPayload(value: Deno.PointerValue) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set FreeData(value: Deno.PointerValue) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set EncryptData(value: Deno.PointerValue) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set DecryptData(value: Deno.PointerValue) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set GetSerializedCredential(value: Deno.PointerValue) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set ValidateRemoteCredential(value: Deno.PointerValue) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set SignData(value: Deno.PointerValue) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: isize
  set VerifyData(value: Deno.PointerValue) {
    this.view.setBigInt64(104, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.DRT_BOOTSTRAP_PROVIDER (size: 64)
 */
export interface DRT_BOOTSTRAP_PROVIDER {
  /** ptr */
  pvContext: Deno.PointerValue | Uint8Array;
  /** isize */
  Attach: Deno.PointerValue;
  /** isize */
  Detach: Deno.PointerValue;
  /** isize */
  InitResolve: Deno.PointerValue;
  /** isize */
  IssueResolve: Deno.PointerValue;
  /** isize */
  EndResolve: Deno.PointerValue;
  /** isize */
  Register: Deno.PointerValue;
  /** isize */
  Unregister: Deno.PointerValue;
}

export const sizeofDRT_BOOTSTRAP_PROVIDER = 64;

export function allocDRT_BOOTSTRAP_PROVIDER(data?: Partial<DRT_BOOTSTRAP_PROVIDER>): Uint8Array {
  const buf = new Uint8Array(sizeofDRT_BOOTSTRAP_PROVIDER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pvContext !== undefined) view.setBigUint64(0, data.pvContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvContext))), true);
  // 0x08: isize
  if (data?.Attach !== undefined) view.setBigInt64(8, BigInt(data.Attach), true);
  // 0x10: isize
  if (data?.Detach !== undefined) view.setBigInt64(16, BigInt(data.Detach), true);
  // 0x18: isize
  if (data?.InitResolve !== undefined) view.setBigInt64(24, BigInt(data.InitResolve), true);
  // 0x20: isize
  if (data?.IssueResolve !== undefined) view.setBigInt64(32, BigInt(data.IssueResolve), true);
  // 0x28: isize
  if (data?.EndResolve !== undefined) view.setBigInt64(40, BigInt(data.EndResolve), true);
  // 0x30: isize
  if (data?.Register !== undefined) view.setBigInt64(48, BigInt(data.Register), true);
  // 0x38: isize
  if (data?.Unregister !== undefined) view.setBigInt64(56, BigInt(data.Unregister), true);
  return buf;
}

export class DRT_BOOTSTRAP_PROVIDERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pvContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: isize
  get Attach(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get Detach(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get InitResolve(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get IssueResolve(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get EndResolve(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get Register(): Deno.PointerValue {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get Unregister(): Deno.PointerValue {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x00: pointer
  set pvContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: isize
  set Attach(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set Detach(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set InitResolve(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set IssueResolve(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set EndResolve(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set Register(value: Deno.PointerValue) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set Unregister(value: Deno.PointerValue) {
    this.view.setBigInt64(56, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.DRT_SETTINGS (size: 56)
 */
export interface DRT_SETTINGS {
  /** u32 */
  dwSize: number;
  /** u32 */
  cbKey: number;
  /** u8 */
  bProtocolMajorVersion: number;
  /** u8 */
  bProtocolMinorVersion: number;
  /** u32 */
  ulMaxRoutingAddresses: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzDrtInstancePrefix: string | null | Uint8Array | Uint16Array;
  /** ptr */
  hTransport: Deno.PointerValue | Uint8Array;
  /** ptr */
  pSecurityProvider: Deno.PointerValue | Uint8Array;
  /** ptr */
  pBootstrapProvider: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.P2P.DRT_SECURITY_MODE */
  eSecurityMode: DRT_SECURITY_MODE;
}

export const sizeofDRT_SETTINGS = 56;

export function allocDRT_SETTINGS(data?: Partial<DRT_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDRT_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.cbKey !== undefined) view.setUint32(4, Number(data.cbKey), true);
  // 0x08: u8
  if (data?.bProtocolMajorVersion !== undefined) view.setUint8(8, Number(data.bProtocolMajorVersion));
  // 0x09: u8
  if (data?.bProtocolMinorVersion !== undefined) view.setUint8(9, Number(data.bProtocolMinorVersion));
  // 0x0a: u32
  if (data?.ulMaxRoutingAddresses !== undefined) view.setUint32(10, Number(data.ulMaxRoutingAddresses), true);
  // 0x0e: pad2
  // 0x10: buffer
  if (data?.pwzDrtInstancePrefix !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzDrtInstancePrefix);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.hTransport !== undefined) view.setBigUint64(24, data.hTransport === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hTransport))), true);
  // 0x20: pointer
  if (data?.pSecurityProvider !== undefined) view.setBigUint64(32, data.pSecurityProvider === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSecurityProvider))), true);
  // 0x28: pointer
  if (data?.pBootstrapProvider !== undefined) view.setBigUint64(40, data.pBootstrapProvider === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pBootstrapProvider))), true);
  // 0x30: i32
  if (data?.eSecurityMode !== undefined) view.setInt32(48, Number(data.eSecurityMode), true);
  // 0x34: pad4
  return buf;
}

export class DRT_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbKey(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get bProtocolMajorVersion(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get bProtocolMinorVersion(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u32
  get ulMaxRoutingAddresses(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: pad2

  // 0x10: buffer
  get pwzDrtInstancePrefix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get hTransport(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pSecurityProvider(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pBootstrapProvider(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get eSecurityMode(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbKey(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set bProtocolMajorVersion(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set bProtocolMinorVersion(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u32
  set ulMaxRoutingAddresses(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: pad2

  // 0x10: buffer
  set pwzDrtInstancePrefix(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set hTransport(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pSecurityProvider(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pBootstrapProvider(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set eSecurityMode(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.NetworkManagement.P2P.DRT_SEARCH_INFO (size: 40)
 */
export interface DRT_SEARCH_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fIterative: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fAllowCurrentInstanceMatch: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fAnyMatchInRange: boolean;
  /** u32 */
  cMaxEndpoints: number;
  /** ptr */
  pMaximumKey: Deno.PointerValue | Uint8Array;
  /** ptr */
  pMinimumKey: Deno.PointerValue | Uint8Array;
}

export const sizeofDRT_SEARCH_INFO = 40;

export function allocDRT_SEARCH_INFO(data?: Partial<DRT_SEARCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDRT_SEARCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.fIterative !== undefined) view.setInt32(4, Number(data.fIterative), true);
  // 0x08: i32
  if (data?.fAllowCurrentInstanceMatch !== undefined) view.setInt32(8, Number(data.fAllowCurrentInstanceMatch), true);
  // 0x0c: i32
  if (data?.fAnyMatchInRange !== undefined) view.setInt32(12, Number(data.fAnyMatchInRange), true);
  // 0x10: u32
  if (data?.cMaxEndpoints !== undefined) view.setUint32(16, Number(data.cMaxEndpoints), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pMaximumKey !== undefined) view.setBigUint64(24, data.pMaximumKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMaximumKey))), true);
  // 0x20: pointer
  if (data?.pMinimumKey !== undefined) view.setBigUint64(32, data.pMinimumKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMinimumKey))), true);
  return buf;
}

export class DRT_SEARCH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get fIterative(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get fAllowCurrentInstanceMatch(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get fAnyMatchInRange(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get cMaxEndpoints(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pMaximumKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pMinimumKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set fIterative(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set fAllowCurrentInstanceMatch(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set fAnyMatchInRange(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set cMaxEndpoints(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pMaximumKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pMinimumKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE (size: 32)
 */
export interface SOCKADDR_STORAGE {
  /** u16 */
  ss_family: number;
  /** array */
  __ss_pad1: Deno.PointerValue;
  /** i64 */
  __ss_align: Deno.PointerValue;
  /** array */
  __ss_pad2: Deno.PointerValue;
}

export const sizeofSOCKADDR_STORAGE = 32;

export function allocSOCKADDR_STORAGE(data?: Partial<SOCKADDR_STORAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_STORAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ss_family !== undefined) view.setUint16(0, Number(data.ss_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.__ss_pad1 !== undefined) view.setBigUint64(8, data.__ss_pad1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.__ss_pad1))), true);
  // 0x10: i64
  if (data?.__ss_align !== undefined) view.setBigInt64(16, BigInt(data.__ss_align), true);
  // 0x18: pointer
  if (data?.__ss_pad2 !== undefined) view.setBigUint64(24, data.__ss_pad2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.__ss_pad2))), true);
  return buf;
}

export class SOCKADDR_STORAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ss_family(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get __ss_pad1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get __ss_align(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: pointer
  get __ss_pad2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set ss_family(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set __ss_pad1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set __ss_align(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set __ss_pad2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.DRT_ADDRESS (size: 24)
 */
export interface DRT_ADDRESS {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  socketAddress: Uint8Array | Deno.PointerValue;
  /** u32 */
  flags: number;
  /** i32 */
  nearness: number;
  /** u32 */
  latency: number;
}

export const sizeofDRT_ADDRESS = 24;

export function allocDRT_ADDRESS(data?: Partial<DRT_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofDRT_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.socketAddress !== undefined) view.setBigUint64(0, data.socketAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.socketAddress))), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.nearness !== undefined) view.setInt32(12, Number(data.nearness), true);
  // 0x10: u32
  if (data?.latency !== undefined) view.setUint32(16, Number(data.latency), true);
  // 0x14: pad4
  return buf;
}

export class DRT_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get socketAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get nearness(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get latency(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set socketAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set nearness(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set latency(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.P2P.DRT_ADDRESS_LIST (size: 16)
 */
export interface DRT_ADDRESS_LIST {
  /** u32 */
  AddressCount: number;
  /** array */
  AddressList: Deno.PointerValue;
}

export const sizeofDRT_ADDRESS_LIST = 16;

export function allocDRT_ADDRESS_LIST(data?: Partial<DRT_ADDRESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDRT_ADDRESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AddressCount !== undefined) view.setUint32(0, Number(data.AddressCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AddressList !== undefined) view.setBigUint64(8, data.AddressList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddressList))), true);
  return buf;
}

export class DRT_ADDRESS_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AddressCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get AddressList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AddressCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set AddressList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.DRT_SEARCH_RESULT (size: 24)
 */
export interface DRT_SEARCH_RESULT {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.NetworkManagement.P2P.DRT_MATCH_TYPE */
  type: DRT_MATCH_TYPE;
  /** ptr */
  pvContext: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.P2P.DRT_REGISTRATION */
  registration: Uint8Array | Deno.PointerValue;
}

export const sizeofDRT_SEARCH_RESULT = 24;

export function allocDRT_SEARCH_RESULT(data?: Partial<DRT_SEARCH_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofDRT_SEARCH_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.type !== undefined) view.setInt32(4, Number(data.type), true);
  // 0x08: pointer
  if (data?.pvContext !== undefined) view.setBigUint64(8, data.pvContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvContext))), true);
  // 0x10: pointer
  if (data?.registration !== undefined) view.setBigUint64(16, data.registration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.registration))), true);
  return buf;
}

export class DRT_SEARCH_RESULTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pvContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get registration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pvContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set registration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.DRT_EVENT_DATA (size: 32)
 */
export interface DRT_EVENT_DATA {
  /** Windows.Win32.NetworkManagement.P2P.DRT_EVENT_TYPE */
  type: DRT_EVENT_TYPE;
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue;
  /** ptr */
  pvContext: Deno.PointerValue | Uint8Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofDRT_EVENT_DATA = 32;

export function allocDRT_EVENT_DATA(data?: Partial<DRT_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDRT_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hr !== undefined) view.setBigUint64(8, data.hr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hr))), true);
  // 0x10: pointer
  if (data?.pvContext !== undefined) view.setBigUint64(16, data.pvContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvContext))), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class DRT_EVENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pvContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pvContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEERDIST_PUBLICATION_OPTIONS (size: 8)
 */
export interface PEERDIST_PUBLICATION_OPTIONS {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofPEERDIST_PUBLICATION_OPTIONS = 8;

export function allocPEERDIST_PUBLICATION_OPTIONS(data?: Partial<PEERDIST_PUBLICATION_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofPEERDIST_PUBLICATION_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  return buf;
}

export class PEERDIST_PUBLICATION_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEERDIST_CONTENT_TAG (size: 8)
 */
export interface PEERDIST_CONTENT_TAG {
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofPEERDIST_CONTENT_TAG = 8;

export function allocPEERDIST_CONTENT_TAG(data?: Partial<PEERDIST_CONTENT_TAG>): Uint8Array {
  const buf = new Uint8Array(sizeofPEERDIST_CONTENT_TAG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class PEERDIST_CONTENT_TAGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEERDIST_RETRIEVAL_OPTIONS (size: 16)
 */
export interface PEERDIST_RETRIEVAL_OPTIONS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwContentInfoMinVersion: number;
  /** u32 */
  dwContentInfoMaxVersion: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofPEERDIST_RETRIEVAL_OPTIONS = 16;

export function allocPEERDIST_RETRIEVAL_OPTIONS(data?: Partial<PEERDIST_RETRIEVAL_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofPEERDIST_RETRIEVAL_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwContentInfoMinVersion !== undefined) view.setUint32(4, Number(data.dwContentInfoMinVersion), true);
  // 0x08: u32
  if (data?.dwContentInfoMaxVersion !== undefined) view.setUint32(8, Number(data.dwContentInfoMaxVersion), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  return buf;
}

export class PEERDIST_RETRIEVAL_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwContentInfoMinVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwContentInfoMaxVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwContentInfoMinVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwContentInfoMaxVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEERDIST_STATUS_INFO (size: 16)
 */
export interface PEERDIST_STATUS_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.NetworkManagement.P2P.PEERDIST_STATUS */
  status: PEERDIST_STATUS;
  /** Windows.Win32.NetworkManagement.P2P.PEERDIST_RETRIEVAL_OPTIONS_CONTENTINFO_VERSION_VALUE */
  dwMinVer: PEERDIST_RETRIEVAL_OPTIONS_CONTENTINFO_VERSION_VALUE;
  /** Windows.Win32.NetworkManagement.P2P.PEERDIST_RETRIEVAL_OPTIONS_CONTENTINFO_VERSION_VALUE */
  dwMaxVer: PEERDIST_RETRIEVAL_OPTIONS_CONTENTINFO_VERSION_VALUE;
}

export const sizeofPEERDIST_STATUS_INFO = 16;

export function allocPEERDIST_STATUS_INFO(data?: Partial<PEERDIST_STATUS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEERDIST_STATUS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.status !== undefined) view.setInt32(4, Number(data.status), true);
  // 0x08: u32
  if (data?.dwMinVer !== undefined) view.setUint32(8, Number(data.dwMinVer), true);
  // 0x0c: u32
  if (data?.dwMaxVer !== undefined) view.setUint32(12, Number(data.dwMaxVer), true);
  return buf;
}

export class PEERDIST_STATUS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get status(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get dwMinVer(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwMaxVer(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set status(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set dwMinVer(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwMaxVer(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.P2P.PEERDIST_CLIENT_BASIC_INFO (size: 8)
 */
export interface PEERDIST_CLIENT_BASIC_INFO {
  /** Windows.Win32.Foundation.BOOL */
  fFlashCrowd: boolean;
}

export const sizeofPEERDIST_CLIENT_BASIC_INFO = 8;

export function allocPEERDIST_CLIENT_BASIC_INFO(data?: Partial<PEERDIST_CLIENT_BASIC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPEERDIST_CLIENT_BASIC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fFlashCrowd !== undefined) view.setInt32(0, Number(data.fFlashCrowd), true);
  // 0x04: pad4
  return buf;
}

export class PEERDIST_CLIENT_BASIC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fFlashCrowd(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set fFlashCrowd(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

export type HWND = Deno.PointerValue;

// Native Libraries

try {
  var libP2PGRAPH_dll = Deno.dlopen("P2PGRAPH.dll", {
    PeerGraphStartup: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    PeerGraphShutdown: {
      parameters: [],
      result: "pointer",
    },
    PeerGraphFreeData: {
      parameters: ["pointer"],
      result: "void",
    },
    PeerGraphGetItemCount: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphGetNextItem: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphEndEnumeration: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerGraphCreate: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphOpen: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphListen: {
      parameters: ["pointer", "u32", "u32", "u16"],
      result: "pointer",
    },
    PeerGraphConnect: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerGraphDelete: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    PeerGraphGetStatus: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphGetProperties: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphSetProperties: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphRegisterEvent: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphUnregisterEvent: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerGraphGetEventData: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphGetRecord: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphAddRecord: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphUpdateRecord: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphDeleteRecord: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    PeerGraphEnumRecords: {
      parameters: ["pointer", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PeerGraphSearchRecords: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PeerGraphExportDatabase: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    PeerGraphImportDatabase: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    PeerGraphValidateDeferredRecords: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PeerGraphOpenDirectConnection: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphSendData: {
      parameters: ["pointer", "u64", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PeerGraphCloseDirectConnection: {
      parameters: ["pointer", "u64"],
      result: "pointer",
    },
    PeerGraphEnumConnections: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PeerGraphEnumNodes: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PeerGraphSetPresence: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    PeerGraphGetNodeInfo: {
      parameters: ["pointer", "u64", "pointer"],
      result: "pointer",
    },
    PeerGraphSetNodeAttributes: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    PeerGraphPeerTimeToUniversalTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGraphUniversalTimeToPeerTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libP2P_dll = Deno.dlopen("P2P.dll", {
    PeerFreeData: {
      parameters: ["pointer"],
      result: "void",
    },
    PeerGetItemCount: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGetNextItem: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerEndEnumeration: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerGroupStartup: {
      parameters: ["u16", "pointer"],
      result: "pointer",
    },
    PeerGroupShutdown: {
      parameters: [],
      result: "pointer",
    },
    PeerGroupCreate: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupOpen: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    PeerGroupJoin: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    PeerGroupPasswordJoin: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    PeerGroupConnect: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerGroupConnectByAddress: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PeerGroupClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerGroupDelete: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    PeerGroupCreateInvitation: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupCreatePasswordInvitation: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupParseInvitation: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PeerGroupGetStatus: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupGetProperties: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupSetProperties: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupEnumMembers: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    PeerGroupOpenDirectConnection: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupCloseDirectConnection: {
      parameters: ["pointer", "u64"],
      result: "pointer",
    },
    PeerGroupEnumConnections: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PeerGroupSendData: {
      parameters: ["pointer", "u64", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PeerGroupRegisterEvent: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupUnregisterEvent: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerGroupGetEventData: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupGetRecord: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupAddRecord: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupUpdateRecord: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupDeleteRecord: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupEnumRecords: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupSearchRecords: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PeerGroupExportDatabase: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    PeerGroupImportDatabase: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    PeerGroupIssueCredentials: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PeerGroupExportConfig: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PeerGroupImportConfig: {
      parameters: ["buffer", "buffer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupPeerTimeToUniversalTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupUniversalTimeToPeerTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerGroupResumePasswordAuthentication: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerIdentityCreate: {
      parameters: ["buffer", "buffer", "usize", "pointer"],
      result: "pointer",
    },
    PeerIdentityGetFriendlyName: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PeerIdentitySetFriendlyName: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    PeerIdentityGetCryptKey: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PeerIdentityDelete: {
      parameters: ["buffer"],
      result: "pointer",
    },
    PeerEnumIdentities: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerEnumGroups: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PeerCreatePeerName: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    PeerIdentityGetXML: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PeerIdentityExport: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    PeerIdentityImport: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    PeerIdentityGetDefault: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabStartup: {
      parameters: ["u16"],
      result: "pointer",
    },
    PeerCollabShutdown: {
      parameters: [],
      result: "pointer",
    },
    PeerCollabSignin: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    PeerCollabSignout: {
      parameters: ["u32"],
      result: "pointer",
    },
    PeerCollabGetSigninOptions: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabAsyncInviteContact: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabGetInvitationResponse: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabCancelInvitation: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabCloseHandle: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabInviteContact: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabAsyncInviteEndpoint: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabInviteEndpoint: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabGetAppLaunchInfo: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabRegisterApplication: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    PeerCollabUnregisterApplication: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    PeerCollabGetApplicationRegistrationInfo: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    PeerCollabEnumApplicationRegistrationInfo: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    PeerCollabGetPresenceInfo: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabEnumApplications: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabEnumObjects: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabEnumEndpoints: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabRefreshEndpointData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabDeleteEndpointData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabQueryContactData: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabSubscribeEndpointData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabUnsubscribeEndpointData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabSetPresenceInfo: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabGetEndpointName: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabSetEndpointName: {
      parameters: ["buffer"],
      result: "pointer",
    },
    PeerCollabSetObject: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabDeleteObject: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabRegisterEvent: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabGetEventData: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerCollabUnregisterEvent: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabEnumPeopleNearMe: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabAddContact: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PeerCollabDeleteContact: {
      parameters: ["buffer"],
      result: "pointer",
    },
    PeerCollabGetContact: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PeerCollabUpdateContact: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabEnumContacts: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerCollabExportContact: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PeerCollabParseContact: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PeerNameToPeerHostName: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PeerHostNameToPeerName: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PeerPnrpStartup: {
      parameters: ["u16"],
      result: "pointer",
    },
    PeerPnrpShutdown: {
      parameters: [],
      result: "pointer",
    },
    PeerPnrpRegister: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerPnrpUpdateRegistration: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerPnrpUnregister: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PeerPnrpResolve: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PeerPnrpStartResolve: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PeerPnrpGetCloudInfo: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerPnrpGetEndpoint: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PeerPnrpEndResolve: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libdrtprov_dll = Deno.dlopen("drtprov.dll", {
    DrtCreatePnrpBootstrapResolver: {
      parameters: ["i32", "buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    DrtDeletePnrpBootstrapResolver: {
      parameters: ["pointer"],
      result: "void",
    },
    DrtCreateDnsBootstrapResolver: {
      parameters: ["u16", "buffer", "pointer"],
      result: "pointer",
    },
    DrtDeleteDnsBootstrapResolver: {
      parameters: ["pointer"],
      result: "void",
    },
    DrtCreateDerivedKeySecurityProvider: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DrtCreateDerivedKey: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DrtDeleteDerivedKeySecurityProvider: {
      parameters: ["pointer"],
      result: "void",
    },
    DrtCreateNullSecurityProvider: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DrtDeleteNullSecurityProvider: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libdrttransport_dll = Deno.dlopen("drttransport.dll", {
    DrtCreateIpv6UdpTransport: {
      parameters: ["i32", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    DrtDeleteIpv6UdpTransport: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libdrt_dll = Deno.dlopen("drt.dll", {
    DrtOpen: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DrtClose: {
      parameters: ["pointer"],
      result: "void",
    },
    DrtGetEventDataSize: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DrtGetEventData: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    DrtRegisterKey: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DrtUpdateKey: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DrtUnregisterKey: {
      parameters: ["pointer"],
      result: "void",
    },
    DrtStartSearch: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DrtContinueSearch: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DrtGetSearchResultSize: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DrtGetSearchResult: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    DrtGetSearchPathSize: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DrtGetSearchPath: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    DrtEndSearch: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DrtGetInstanceName: {
      parameters: ["pointer", "u32", "buffer"],
      result: "pointer",
    },
    DrtGetInstanceNameSize: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libPeerDist_dll = Deno.dlopen("PeerDist.dll", {
    PeerDistStartup: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    PeerDistShutdown: {
      parameters: ["isize"],
      result: "u32",
    },
    PeerDistGetStatus: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    PeerDistRegisterForStatusChangeNotification: {
      parameters: ["isize", "pointer", "usize", "pointer", "pointer"],
      result: "u32",
    },
    PeerDistUnregisterForStatusChangeNotification: {
      parameters: ["isize"],
      result: "u32",
    },
    PeerDistServerPublishStream: {
      parameters: ["isize", "u32", "pointer", "u64", "pointer", "pointer", "usize", "pointer"],
      result: "u32",
    },
    PeerDistServerPublishAddToStream: {
      parameters: ["isize", "isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PeerDistServerPublishCompleteStream: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    PeerDistServerCloseStreamHandle: {
      parameters: ["isize", "isize"],
      result: "u32",
    },
    PeerDistServerUnpublish: {
      parameters: ["isize", "u32", "pointer"],
      result: "u32",
    },
    PeerDistServerOpenContentInformation: {
      parameters: ["isize", "u32", "pointer", "u64", "u64", "pointer", "usize", "pointer"],
      result: "u32",
    },
    PeerDistServerRetrieveContentInformation: {
      parameters: ["isize", "isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PeerDistServerCloseContentInformation: {
      parameters: ["isize", "isize"],
      result: "u32",
    },
    PeerDistServerCancelAsyncOperation: {
      parameters: ["isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PeerDistClientOpenContent: {
      parameters: ["isize", "pointer", "pointer", "usize", "pointer"],
      result: "u32",
    },
    PeerDistClientCloseContent: {
      parameters: ["isize", "isize"],
      result: "u32",
    },
    PeerDistClientAddContentInformation: {
      parameters: ["isize", "isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PeerDistClientCompleteContentInformation: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    PeerDistClientAddData: {
      parameters: ["isize", "isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PeerDistClientBlockRead: {
      parameters: ["isize", "isize", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    PeerDistClientStreamRead: {
      parameters: ["isize", "isize", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    PeerDistClientFlushContent: {
      parameters: ["isize", "pointer", "pointer", "usize", "pointer"],
      result: "u32",
    },
    PeerDistClientCancelAsyncOperation: {
      parameters: ["isize", "isize", "pointer"],
      result: "u32",
    },
    PeerDistGetStatusEx: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    PeerDistRegisterForStatusChangeNotificationEx: {
      parameters: ["isize", "pointer", "usize", "pointer", "pointer"],
      result: "u32",
    },
    PeerDistGetOverlappedResult: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    PeerDistServerOpenContentInformationEx: {
      parameters: ["isize", "u32", "pointer", "u64", "u64", "pointer", "pointer", "usize", "pointer"],
      result: "u32",
    },
    PeerDistClientGetInformationByHandle: {
      parameters: ["isize", "isize", "i32", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function PeerGraphStartup(
  wVersionRequested: number /* u16 */,
  pVersionData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphStartup(wVersionRequested, util.toPointer(pVersionData));
}

export function PeerGraphShutdown(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphShutdown();
}

export function PeerGraphFreeData(
  pvData: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libP2PGRAPH_dll.PeerGraphFreeData(util.toPointer(pvData));
}

export function PeerGraphGetItemCount(
  hPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphGetItemCount(util.toPointer(hPeerEnum), util.toPointer(pCount));
}

export function PeerGraphGetNextItem(
  hPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
  pppvItems: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphGetNextItem(util.toPointer(hPeerEnum), util.toPointer(pCount), util.toPointer(pppvItems));
}

export function PeerGraphEndEnumeration(
  hPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphEndEnumeration(util.toPointer(hPeerEnum));
}

export function PeerGraphCreate(
  pGraphProperties: Deno.PointerValue | Uint8Array /* ptr */,
  pwzDatabaseName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pSecurityInterface: Deno.PointerValue | Uint8Array /* ptr */,
  phGraph: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphCreate(util.toPointer(pGraphProperties), util.pwstrToFfi(pwzDatabaseName), util.toPointer(pSecurityInterface), util.toPointer(phGraph));
}

export function PeerGraphOpen(
  pwzGraphId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzPeerId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzDatabaseName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pSecurityInterface: Deno.PointerValue | Uint8Array /* ptr */,
  cRecordTypeSyncPrecedence: number /* u32 */,
  pRecordTypeSyncPrecedence: Deno.PointerValue | Uint8Array /* ptr */,
  phGraph: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphOpen(util.pwstrToFfi(pwzGraphId), util.pwstrToFfi(pwzPeerId), util.pwstrToFfi(pwzDatabaseName), util.toPointer(pSecurityInterface), cRecordTypeSyncPrecedence, util.toPointer(pRecordTypeSyncPrecedence), util.toPointer(phGraph));
}

export function PeerGraphListen(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  dwScope: number /* u32 */,
  dwScopeId: number /* u32 */,
  wPort: number /* u16 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphListen(util.toPointer(hGraph), dwScope, dwScopeId, wPort);
}

export function PeerGraphConnect(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pwzPeerId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pAddress: Deno.PointerValue | Uint8Array /* ptr */,
  pullConnectionId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphConnect(util.toPointer(hGraph), util.pwstrToFfi(pwzPeerId), util.toPointer(pAddress), util.toPointer(pullConnectionId));
}

export function PeerGraphClose(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphClose(util.toPointer(hGraph));
}

export function PeerGraphDelete(
  pwzGraphId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzPeerId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzDatabaseName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphDelete(util.pwstrToFfi(pwzGraphId), util.pwstrToFfi(pwzPeerId), util.pwstrToFfi(pwzDatabaseName));
}

export function PeerGraphGetStatus(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pdwStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphGetStatus(util.toPointer(hGraph), util.toPointer(pdwStatus));
}

export function PeerGraphGetProperties(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  ppGraphProperties: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphGetProperties(util.toPointer(hGraph), util.toPointer(ppGraphProperties));
}

export function PeerGraphSetProperties(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pGraphProperties: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphSetProperties(util.toPointer(hGraph), util.toPointer(pGraphProperties));
}

export function PeerGraphRegisterEvent(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  cEventRegistrations: number /* u32 */,
  pEventRegistrations: Deno.PointerValue | Uint8Array /* ptr */,
  phPeerEvent: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphRegisterEvent(util.toPointer(hGraph), util.toPointer(hEvent), cEventRegistrations, util.toPointer(pEventRegistrations), util.toPointer(phPeerEvent));
}

export function PeerGraphUnregisterEvent(
  hPeerEvent: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphUnregisterEvent(util.toPointer(hPeerEvent));
}

export function PeerGraphGetEventData(
  hPeerEvent: Deno.PointerValue | Uint8Array /* ptr */,
  ppEventData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphGetEventData(util.toPointer(hPeerEvent), util.toPointer(ppEventData));
}

export function PeerGraphGetRecord(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pRecordId: Deno.PointerValue | Uint8Array /* ptr */,
  ppRecord: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphGetRecord(util.toPointer(hGraph), util.toPointer(pRecordId), util.toPointer(ppRecord));
}

export function PeerGraphAddRecord(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pRecord: Deno.PointerValue | Uint8Array /* ptr */,
  pRecordId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphAddRecord(util.toPointer(hGraph), util.toPointer(pRecord), util.toPointer(pRecordId));
}

export function PeerGraphUpdateRecord(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pRecord: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphUpdateRecord(util.toPointer(hGraph), util.toPointer(pRecord));
}

export function PeerGraphDeleteRecord(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pRecordId: Deno.PointerValue | Uint8Array /* ptr */,
  fLocal: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphDeleteRecord(util.toPointer(hGraph), util.toPointer(pRecordId), util.boolToFfi(fLocal));
}

export function PeerGraphEnumRecords(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pRecordType: Deno.PointerValue | Uint8Array /* ptr */,
  pwzPeerId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphEnumRecords(util.toPointer(hGraph), util.toPointer(pRecordType), util.pwstrToFfi(pwzPeerId), util.toPointer(phPeerEnum));
}

export function PeerGraphSearchRecords(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pwzCriteria: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphSearchRecords(util.toPointer(hGraph), util.pwstrToFfi(pwzCriteria), util.toPointer(phPeerEnum));
}

export function PeerGraphExportDatabase(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pwzFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphExportDatabase(util.toPointer(hGraph), util.pwstrToFfi(pwzFilePath));
}

export function PeerGraphImportDatabase(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pwzFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphImportDatabase(util.toPointer(hGraph), util.pwstrToFfi(pwzFilePath));
}

export function PeerGraphValidateDeferredRecords(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  cRecordIds: number /* u32 */,
  pRecordIds: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphValidateDeferredRecords(util.toPointer(hGraph), cRecordIds, util.toPointer(pRecordIds));
}

export function PeerGraphOpenDirectConnection(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pwzPeerId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pAddress: Deno.PointerValue | Uint8Array /* ptr */,
  pullConnectionId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphOpenDirectConnection(util.toPointer(hGraph), util.pwstrToFfi(pwzPeerId), util.toPointer(pAddress), util.toPointer(pullConnectionId));
}

export function PeerGraphSendData(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  ullConnectionId: Deno.PointerValue /* u64 */,
  pType: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
  pvData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphSendData(util.toPointer(hGraph), ullConnectionId, util.toPointer(pType), cbData, util.toPointer(pvData));
}

export function PeerGraphCloseDirectConnection(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  ullConnectionId: Deno.PointerValue /* u64 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphCloseDirectConnection(util.toPointer(hGraph), ullConnectionId);
}

export function PeerGraphEnumConnections(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphEnumConnections(util.toPointer(hGraph), dwFlags, util.toPointer(phPeerEnum));
}

export function PeerGraphEnumNodes(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pwzPeerId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphEnumNodes(util.toPointer(hGraph), util.pwstrToFfi(pwzPeerId), util.toPointer(phPeerEnum));
}

export function PeerGraphSetPresence(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  fPresent: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphSetPresence(util.toPointer(hGraph), util.boolToFfi(fPresent));
}

export function PeerGraphGetNodeInfo(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  ullNodeId: Deno.PointerValue /* u64 */,
  ppNodeInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphGetNodeInfo(util.toPointer(hGraph), ullNodeId, util.toPointer(ppNodeInfo));
}

export function PeerGraphSetNodeAttributes(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pwzAttributes: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphSetNodeAttributes(util.toPointer(hGraph), util.pwstrToFfi(pwzAttributes));
}

export function PeerGraphPeerTimeToUniversalTime(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pftPeerTime: Deno.PointerValue | Uint8Array /* ptr */,
  pftUniversalTime: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphPeerTimeToUniversalTime(util.toPointer(hGraph), util.toPointer(pftPeerTime), util.toPointer(pftUniversalTime));
}

export function PeerGraphUniversalTimeToPeerTime(
  hGraph: Deno.PointerValue | Uint8Array /* ptr */,
  pftUniversalTime: Deno.PointerValue | Uint8Array /* ptr */,
  pftPeerTime: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2PGRAPH_dll.PeerGraphUniversalTimeToPeerTime(util.toPointer(hGraph), util.toPointer(pftUniversalTime), util.toPointer(pftPeerTime));
}

export function PeerFreeData(
  pvData: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libP2P_dll.PeerFreeData(util.toPointer(pvData));
}

export function PeerGetItemCount(
  hPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGetItemCount(util.toPointer(hPeerEnum), util.toPointer(pCount));
}

export function PeerGetNextItem(
  hPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
  pCount: Deno.PointerValue | Uint8Array /* ptr */,
  pppvItems: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGetNextItem(util.toPointer(hPeerEnum), util.toPointer(pCount), util.toPointer(pppvItems));
}

export function PeerEndEnumeration(
  hPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerEndEnumeration(util.toPointer(hPeerEnum));
}

export function PeerGroupStartup(
  wVersionRequested: number /* u16 */,
  pVersionData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupStartup(wVersionRequested, util.toPointer(pVersionData));
}

export function PeerGroupShutdown(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupShutdown();
}

export function PeerGroupCreate(
  pProperties: Deno.PointerValue | Uint8Array /* ptr */,
  phGroup: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupCreate(util.toPointer(pProperties), util.toPointer(phGroup));
}

export function PeerGroupOpen(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzGroupPeerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzCloud: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phGroup: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupOpen(util.pwstrToFfi(pwzIdentity), util.pwstrToFfi(pwzGroupPeerName), util.pwstrToFfi(pwzCloud), util.toPointer(phGroup));
}

export function PeerGroupJoin(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzInvitation: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzCloud: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phGroup: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupJoin(util.pwstrToFfi(pwzIdentity), util.pwstrToFfi(pwzInvitation), util.pwstrToFfi(pwzCloud), util.toPointer(phGroup));
}

export function PeerGroupPasswordJoin(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzInvitation: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzCloud: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phGroup: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupPasswordJoin(util.pwstrToFfi(pwzIdentity), util.pwstrToFfi(pwzInvitation), util.pwstrToFfi(pwzPassword), util.pwstrToFfi(pwzCloud), util.toPointer(phGroup));
}

export function PeerGroupConnect(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupConnect(util.toPointer(hGroup));
}

export function PeerGroupConnectByAddress(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  cAddresses: number /* u32 */,
  pAddresses: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupConnectByAddress(util.toPointer(hGroup), cAddresses, util.toPointer(pAddresses));
}

export function PeerGroupClose(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupClose(util.toPointer(hGroup));
}

export function PeerGroupDelete(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzGroupPeerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupDelete(util.pwstrToFfi(pwzIdentity), util.pwstrToFfi(pwzGroupPeerName));
}

export function PeerGroupCreateInvitation(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pwzIdentityInfo: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pftExpiration: Deno.PointerValue | Uint8Array /* ptr */,
  cRoles: number /* u32 */,
  pRoles: Deno.PointerValue | Uint8Array /* ptr */,
  ppwzInvitation: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupCreateInvitation(util.toPointer(hGroup), util.pwstrToFfi(pwzIdentityInfo), util.toPointer(pftExpiration), cRoles, util.toPointer(pRoles), util.toPointer(ppwzInvitation));
}

export function PeerGroupCreatePasswordInvitation(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  ppwzInvitation: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupCreatePasswordInvitation(util.toPointer(hGroup), util.toPointer(ppwzInvitation));
}

export function PeerGroupParseInvitation(
  pwzInvitation: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppInvitationInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupParseInvitation(util.pwstrToFfi(pwzInvitation), util.toPointer(ppInvitationInfo));
}

export function PeerGroupGetStatus(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pdwStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupGetStatus(util.toPointer(hGroup), util.toPointer(pdwStatus));
}

export function PeerGroupGetProperties(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  ppProperties: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupGetProperties(util.toPointer(hGroup), util.toPointer(ppProperties));
}

export function PeerGroupSetProperties(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pProperties: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupSetProperties(util.toPointer(hGroup), util.toPointer(pProperties));
}

export function PeerGroupEnumMembers(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupEnumMembers(util.toPointer(hGroup), dwFlags, util.pwstrToFfi(pwzIdentity), util.toPointer(phPeerEnum));
}

export function PeerGroupOpenDirectConnection(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pAddress: Deno.PointerValue | Uint8Array /* ptr */,
  pullConnectionId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupOpenDirectConnection(util.toPointer(hGroup), util.pwstrToFfi(pwzIdentity), util.toPointer(pAddress), util.toPointer(pullConnectionId));
}

export function PeerGroupCloseDirectConnection(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  ullConnectionId: Deno.PointerValue /* u64 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupCloseDirectConnection(util.toPointer(hGroup), ullConnectionId);
}

export function PeerGroupEnumConnections(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupEnumConnections(util.toPointer(hGroup), dwFlags, util.toPointer(phPeerEnum));
}

export function PeerGroupSendData(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  ullConnectionId: Deno.PointerValue /* u64 */,
  pType: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
  pvData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupSendData(util.toPointer(hGroup), ullConnectionId, util.toPointer(pType), cbData, util.toPointer(pvData));
}

export function PeerGroupRegisterEvent(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  cEventRegistration: number /* u32 */,
  pEventRegistrations: Deno.PointerValue | Uint8Array /* ptr */,
  phPeerEvent: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupRegisterEvent(util.toPointer(hGroup), util.toPointer(hEvent), cEventRegistration, util.toPointer(pEventRegistrations), util.toPointer(phPeerEvent));
}

export function PeerGroupUnregisterEvent(
  hPeerEvent: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupUnregisterEvent(util.toPointer(hPeerEvent));
}

export function PeerGroupGetEventData(
  hPeerEvent: Deno.PointerValue | Uint8Array /* ptr */,
  ppEventData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupGetEventData(util.toPointer(hPeerEvent), util.toPointer(ppEventData));
}

export function PeerGroupGetRecord(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pRecordId: Deno.PointerValue | Uint8Array /* ptr */,
  ppRecord: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupGetRecord(util.toPointer(hGroup), util.toPointer(pRecordId), util.toPointer(ppRecord));
}

export function PeerGroupAddRecord(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pRecord: Deno.PointerValue | Uint8Array /* ptr */,
  pRecordId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupAddRecord(util.toPointer(hGroup), util.toPointer(pRecord), util.toPointer(pRecordId));
}

export function PeerGroupUpdateRecord(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pRecord: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupUpdateRecord(util.toPointer(hGroup), util.toPointer(pRecord));
}

export function PeerGroupDeleteRecord(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pRecordId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupDeleteRecord(util.toPointer(hGroup), util.toPointer(pRecordId));
}

export function PeerGroupEnumRecords(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pRecordType: Deno.PointerValue | Uint8Array /* ptr */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupEnumRecords(util.toPointer(hGroup), util.toPointer(pRecordType), util.toPointer(phPeerEnum));
}

export function PeerGroupSearchRecords(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pwzCriteria: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupSearchRecords(util.toPointer(hGroup), util.pwstrToFfi(pwzCriteria), util.toPointer(phPeerEnum));
}

export function PeerGroupExportDatabase(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pwzFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupExportDatabase(util.toPointer(hGroup), util.pwstrToFfi(pwzFilePath));
}

export function PeerGroupImportDatabase(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pwzFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupImportDatabase(util.toPointer(hGroup), util.pwstrToFfi(pwzFilePath));
}

export function PeerGroupIssueCredentials(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pwzSubjectIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCredentialInfo: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
  ppwzInvitation: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupIssueCredentials(util.toPointer(hGroup), util.pwstrToFfi(pwzSubjectIdentity), util.toPointer(pCredentialInfo), dwFlags, util.toPointer(ppwzInvitation));
}

export function PeerGroupExportConfig(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pwzPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwzXML: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupExportConfig(util.toPointer(hGroup), util.pwstrToFfi(pwzPassword), util.toPointer(ppwzXML));
}

export function PeerGroupImportConfig(
  pwzXML: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fOverwrite: boolean /* Windows.Win32.Foundation.BOOL */,
  ppwzIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  ppwzGroup: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupImportConfig(util.pwstrToFfi(pwzXML), util.pwstrToFfi(pwzPassword), util.boolToFfi(fOverwrite), util.toPointer(ppwzIdentity), util.toPointer(ppwzGroup));
}

export function PeerGroupPeerTimeToUniversalTime(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pftPeerTime: Deno.PointerValue | Uint8Array /* ptr */,
  pftUniversalTime: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupPeerTimeToUniversalTime(util.toPointer(hGroup), util.toPointer(pftPeerTime), util.toPointer(pftUniversalTime));
}

export function PeerGroupUniversalTimeToPeerTime(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  pftUniversalTime: Deno.PointerValue | Uint8Array /* ptr */,
  pftPeerTime: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupUniversalTimeToPeerTime(util.toPointer(hGroup), util.toPointer(pftUniversalTime), util.toPointer(pftPeerTime));
}

export function PeerGroupResumePasswordAuthentication(
  hGroup: Deno.PointerValue | Uint8Array /* ptr */,
  hPeerEventHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerGroupResumePasswordAuthentication(util.toPointer(hGroup), util.toPointer(hPeerEventHandle));
}

export function PeerIdentityCreate(
  pwzClassifier: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzFriendlyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hCryptProv: Deno.PointerValue /* usize */,
  ppwzIdentity: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerIdentityCreate(util.pwstrToFfi(pwzClassifier), util.pwstrToFfi(pwzFriendlyName), hCryptProv, util.toPointer(ppwzIdentity));
}

export function PeerIdentityGetFriendlyName(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwzFriendlyName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerIdentityGetFriendlyName(util.pwstrToFfi(pwzIdentity), util.toPointer(ppwzFriendlyName));
}

export function PeerIdentitySetFriendlyName(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzFriendlyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerIdentitySetFriendlyName(util.pwstrToFfi(pwzIdentity), util.pwstrToFfi(pwzFriendlyName));
}

export function PeerIdentityGetCryptKey(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phCryptProv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerIdentityGetCryptKey(util.pwstrToFfi(pwzIdentity), util.toPointer(phCryptProv));
}

export function PeerIdentityDelete(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerIdentityDelete(util.pwstrToFfi(pwzIdentity));
}

export function PeerEnumIdentities(
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerEnumIdentities(util.toPointer(phPeerEnum));
}

export function PeerEnumGroups(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerEnumGroups(util.pwstrToFfi(pwzIdentity), util.toPointer(phPeerEnum));
}

export function PeerCreatePeerName(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzClassifier: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwzPeerName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCreatePeerName(util.pwstrToFfi(pwzIdentity), util.pwstrToFfi(pwzClassifier), util.toPointer(ppwzPeerName));
}

export function PeerIdentityGetXML(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwzIdentityXML: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerIdentityGetXML(util.pwstrToFfi(pwzIdentity), util.toPointer(ppwzIdentityXML));
}

export function PeerIdentityExport(
  pwzIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwzExportXML: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerIdentityExport(util.pwstrToFfi(pwzIdentity), util.pwstrToFfi(pwzPassword), util.toPointer(ppwzExportXML));
}

export function PeerIdentityImport(
  pwzImportXML: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwzIdentity: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerIdentityImport(util.pwstrToFfi(pwzImportXML), util.pwstrToFfi(pwzPassword), util.toPointer(ppwzIdentity));
}

export function PeerIdentityGetDefault(
  ppwzPeerName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerIdentityGetDefault(util.toPointer(ppwzPeerName));
}

export function PeerCollabStartup(
  wVersionRequested: number /* u16 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabStartup(wVersionRequested);
}

export function PeerCollabShutdown(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabShutdown();
}

export function PeerCollabSignin(
  hwndParent: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwSigninOptions: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabSignin((hwndParent), dwSigninOptions);
}

export function PeerCollabSignout(
  dwSigninOptions: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabSignout(dwSigninOptions);
}

export function PeerCollabGetSigninOptions(
  pdwSigninOptions: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabGetSigninOptions(util.toPointer(pdwSigninOptions));
}

export function PeerCollabAsyncInviteContact(
  pcContact: Deno.PointerValue | Uint8Array /* ptr */,
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
  pcInvitation: Deno.PointerValue | Uint8Array /* ptr */,
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  phInvitation: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabAsyncInviteContact(util.toPointer(pcContact), util.toPointer(pcEndpoint), util.toPointer(pcInvitation), util.toPointer(hEvent), util.toPointer(phInvitation));
}

export function PeerCollabGetInvitationResponse(
  hInvitation: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ppInvitationResponse: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabGetInvitationResponse(util.toPointer(hInvitation), util.toPointer(ppInvitationResponse));
}

export function PeerCollabCancelInvitation(
  hInvitation: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabCancelInvitation(util.toPointer(hInvitation));
}

export function PeerCollabCloseHandle(
  hInvitation: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabCloseHandle(util.toPointer(hInvitation));
}

export function PeerCollabInviteContact(
  pcContact: Deno.PointerValue | Uint8Array /* ptr */,
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
  pcInvitation: Deno.PointerValue | Uint8Array /* ptr */,
  ppResponse: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabInviteContact(util.toPointer(pcContact), util.toPointer(pcEndpoint), util.toPointer(pcInvitation), util.toPointer(ppResponse));
}

export function PeerCollabAsyncInviteEndpoint(
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
  pcInvitation: Deno.PointerValue | Uint8Array /* ptr */,
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  phInvitation: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabAsyncInviteEndpoint(util.toPointer(pcEndpoint), util.toPointer(pcInvitation), util.toPointer(hEvent), util.toPointer(phInvitation));
}

export function PeerCollabInviteEndpoint(
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
  pcInvitation: Deno.PointerValue | Uint8Array /* ptr */,
  ppResponse: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabInviteEndpoint(util.toPointer(pcEndpoint), util.toPointer(pcInvitation), util.toPointer(ppResponse));
}

export function PeerCollabGetAppLaunchInfo(
  ppLaunchInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabGetAppLaunchInfo(util.toPointer(ppLaunchInfo));
}

export function PeerCollabRegisterApplication(
  pcApplication: Deno.PointerValue | Uint8Array /* ptr */,
  registrationType: PEER_APPLICATION_REGISTRATION_TYPE /* Windows.Win32.NetworkManagement.P2P.PEER_APPLICATION_REGISTRATION_TYPE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabRegisterApplication(util.toPointer(pcApplication), registrationType);
}

export function PeerCollabUnregisterApplication(
  pApplicationId: Deno.PointerValue | Uint8Array /* ptr */,
  registrationType: PEER_APPLICATION_REGISTRATION_TYPE /* Windows.Win32.NetworkManagement.P2P.PEER_APPLICATION_REGISTRATION_TYPE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabUnregisterApplication(util.toPointer(pApplicationId), registrationType);
}

export function PeerCollabGetApplicationRegistrationInfo(
  pApplicationId: Deno.PointerValue | Uint8Array /* ptr */,
  registrationType: PEER_APPLICATION_REGISTRATION_TYPE /* Windows.Win32.NetworkManagement.P2P.PEER_APPLICATION_REGISTRATION_TYPE */,
  ppApplication: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabGetApplicationRegistrationInfo(util.toPointer(pApplicationId), registrationType, util.toPointer(ppApplication));
}

export function PeerCollabEnumApplicationRegistrationInfo(
  registrationType: PEER_APPLICATION_REGISTRATION_TYPE /* Windows.Win32.NetworkManagement.P2P.PEER_APPLICATION_REGISTRATION_TYPE */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabEnumApplicationRegistrationInfo(registrationType, util.toPointer(phPeerEnum));
}

export function PeerCollabGetPresenceInfo(
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
  ppPresenceInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabGetPresenceInfo(util.toPointer(pcEndpoint), util.toPointer(ppPresenceInfo));
}

export function PeerCollabEnumApplications(
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
  pApplicationId: Deno.PointerValue | Uint8Array /* ptr */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabEnumApplications(util.toPointer(pcEndpoint), util.toPointer(pApplicationId), util.toPointer(phPeerEnum));
}

export function PeerCollabEnumObjects(
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
  pObjectId: Deno.PointerValue | Uint8Array /* ptr */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabEnumObjects(util.toPointer(pcEndpoint), util.toPointer(pObjectId), util.toPointer(phPeerEnum));
}

export function PeerCollabEnumEndpoints(
  pcContact: Deno.PointerValue | Uint8Array /* ptr */,
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabEnumEndpoints(util.toPointer(pcContact), util.toPointer(phPeerEnum));
}

export function PeerCollabRefreshEndpointData(
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabRefreshEndpointData(util.toPointer(pcEndpoint));
}

export function PeerCollabDeleteEndpointData(
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabDeleteEndpointData(util.toPointer(pcEndpoint));
}

export function PeerCollabQueryContactData(
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
  ppwzContactData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabQueryContactData(util.toPointer(pcEndpoint), util.toPointer(ppwzContactData));
}

export function PeerCollabSubscribeEndpointData(
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabSubscribeEndpointData(util.toPointer(pcEndpoint));
}

export function PeerCollabUnsubscribeEndpointData(
  pcEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabUnsubscribeEndpointData(util.toPointer(pcEndpoint));
}

export function PeerCollabSetPresenceInfo(
  pcPresenceInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabSetPresenceInfo(util.toPointer(pcPresenceInfo));
}

export function PeerCollabGetEndpointName(
  ppwzEndpointName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabGetEndpointName(util.toPointer(ppwzEndpointName));
}

export function PeerCollabSetEndpointName(
  pwzEndpointName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabSetEndpointName(util.pwstrToFfi(pwzEndpointName));
}

export function PeerCollabSetObject(
  pcObject: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabSetObject(util.toPointer(pcObject));
}

export function PeerCollabDeleteObject(
  pObjectId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabDeleteObject(util.toPointer(pObjectId));
}

export function PeerCollabRegisterEvent(
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  cEventRegistration: number /* u32 */,
  pEventRegistrations: Deno.PointerValue | Uint8Array /* ptr */,
  phPeerEvent: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabRegisterEvent(util.toPointer(hEvent), cEventRegistration, util.toPointer(pEventRegistrations), util.toPointer(phPeerEvent));
}

export function PeerCollabGetEventData(
  hPeerEvent: Deno.PointerValue | Uint8Array /* ptr */,
  ppEventData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabGetEventData(util.toPointer(hPeerEvent), util.toPointer(ppEventData));
}

export function PeerCollabUnregisterEvent(
  hPeerEvent: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabUnregisterEvent(util.toPointer(hPeerEvent));
}

export function PeerCollabEnumPeopleNearMe(
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabEnumPeopleNearMe(util.toPointer(phPeerEnum));
}

export function PeerCollabAddContact(
  pwzContactData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppContact: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabAddContact(util.pwstrToFfi(pwzContactData), util.toPointer(ppContact));
}

export function PeerCollabDeleteContact(
  pwzPeerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabDeleteContact(util.pwstrToFfi(pwzPeerName));
}

export function PeerCollabGetContact(
  pwzPeerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppContact: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabGetContact(util.pwstrToFfi(pwzPeerName), util.toPointer(ppContact));
}

export function PeerCollabUpdateContact(
  pContact: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabUpdateContact(util.toPointer(pContact));
}

export function PeerCollabEnumContacts(
  phPeerEnum: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabEnumContacts(util.toPointer(phPeerEnum));
}

export function PeerCollabExportContact(
  pwzPeerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwzContactData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabExportContact(util.pwstrToFfi(pwzPeerName), util.toPointer(ppwzContactData));
}

export function PeerCollabParseContact(
  pwzContactData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppContact: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerCollabParseContact(util.pwstrToFfi(pwzContactData), util.toPointer(ppContact));
}

export function PeerNameToPeerHostName(
  pwzPeerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwzHostName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerNameToPeerHostName(util.pwstrToFfi(pwzPeerName), util.toPointer(ppwzHostName));
}

export function PeerHostNameToPeerName(
  pwzHostName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwzPeerName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerHostNameToPeerName(util.pwstrToFfi(pwzHostName), util.toPointer(ppwzPeerName));
}

export function PeerPnrpStartup(
  wVersionRequested: number /* u16 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerPnrpStartup(wVersionRequested);
}

export function PeerPnrpShutdown(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerPnrpShutdown();
}

export function PeerPnrpRegister(
  pcwzPeerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pRegistrationInfo: Deno.PointerValue | Uint8Array /* ptr */,
  phRegistration: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerPnrpRegister(util.pwstrToFfi(pcwzPeerName), util.toPointer(pRegistrationInfo), util.toPointer(phRegistration));
}

export function PeerPnrpUpdateRegistration(
  hRegistration: Deno.PointerValue | Uint8Array /* ptr */,
  pRegistrationInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerPnrpUpdateRegistration(util.toPointer(hRegistration), util.toPointer(pRegistrationInfo));
}

export function PeerPnrpUnregister(
  hRegistration: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerPnrpUnregister(util.toPointer(hRegistration));
}

export function PeerPnrpResolve(
  pcwzPeerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcwzCloudName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcEndpoints: Deno.PointerValue | Uint8Array /* ptr */,
  ppEndpoints: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerPnrpResolve(util.pwstrToFfi(pcwzPeerName), util.pwstrToFfi(pcwzCloudName), util.toPointer(pcEndpoints), util.toPointer(ppEndpoints));
}

export function PeerPnrpStartResolve(
  pcwzPeerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcwzCloudName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cMaxEndpoints: number /* u32 */,
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  phResolve: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerPnrpStartResolve(util.pwstrToFfi(pcwzPeerName), util.pwstrToFfi(pcwzCloudName), cMaxEndpoints, util.toPointer(hEvent), util.toPointer(phResolve));
}

export function PeerPnrpGetCloudInfo(
  pcNumClouds: Deno.PointerValue | Uint8Array /* ptr */,
  ppCloudInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerPnrpGetCloudInfo(util.toPointer(pcNumClouds), util.toPointer(ppCloudInfo));
}

export function PeerPnrpGetEndpoint(
  hResolve: Deno.PointerValue | Uint8Array /* ptr */,
  ppEndpoint: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerPnrpGetEndpoint(util.toPointer(hResolve), util.toPointer(ppEndpoint));
}

export function PeerPnrpEndResolve(
  hResolve: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libP2P_dll.PeerPnrpEndResolve(util.toPointer(hResolve));
}

export function DrtCreatePnrpBootstrapResolver(
  fPublish: boolean /* Windows.Win32.Foundation.BOOL */,
  pwzPeerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzCloudName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzPublishingIdentity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppResolver: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrtprov_dll.DrtCreatePnrpBootstrapResolver(util.boolToFfi(fPublish), util.pwstrToFfi(pwzPeerName), util.pwstrToFfi(pwzCloudName), util.pwstrToFfi(pwzPublishingIdentity), util.toPointer(ppResolver));
}

export function DrtDeletePnrpBootstrapResolver(
  pResolver: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libdrtprov_dll.DrtDeletePnrpBootstrapResolver(util.toPointer(pResolver));
}

export function DrtCreateDnsBootstrapResolver(
  port: number /* u16 */,
  pwszAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppModule: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrtprov_dll.DrtCreateDnsBootstrapResolver(port, util.pwstrToFfi(pwszAddress), util.toPointer(ppModule));
}

export function DrtDeleteDnsBootstrapResolver(
  pResolver: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libdrtprov_dll.DrtDeleteDnsBootstrapResolver(util.toPointer(pResolver));
}

export function DrtCreateIpv6UdpTransport(
  scope: DRT_SCOPE /* Windows.Win32.NetworkManagement.P2P.DRT_SCOPE */,
  dwScopeId: number /* u32 */,
  dwLocalityThreshold: number /* u32 */,
  pwPort: Deno.PointerValue | Uint8Array /* ptr */,
  phTransport: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrttransport_dll.DrtCreateIpv6UdpTransport(scope, dwScopeId, dwLocalityThreshold, util.toPointer(pwPort), util.toPointer(phTransport));
}

export function DrtDeleteIpv6UdpTransport(
  hTransport: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrttransport_dll.DrtDeleteIpv6UdpTransport(util.toPointer(hTransport));
}

export function DrtCreateDerivedKeySecurityProvider(
  pRootCert: Deno.PointerValue | Uint8Array /* ptr */,
  pLocalCert: Deno.PointerValue | Uint8Array /* ptr */,
  ppSecurityProvider: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrtprov_dll.DrtCreateDerivedKeySecurityProvider(util.toPointer(pRootCert), util.toPointer(pLocalCert), util.toPointer(ppSecurityProvider));
}

export function DrtCreateDerivedKey(
  pLocalCert: Deno.PointerValue | Uint8Array /* ptr */,
  pKey: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrtprov_dll.DrtCreateDerivedKey(util.toPointer(pLocalCert), util.toPointer(pKey));
}

export function DrtDeleteDerivedKeySecurityProvider(
  pSecurityProvider: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libdrtprov_dll.DrtDeleteDerivedKeySecurityProvider(util.toPointer(pSecurityProvider));
}

export function DrtCreateNullSecurityProvider(
  ppSecurityProvider: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrtprov_dll.DrtCreateNullSecurityProvider(util.toPointer(ppSecurityProvider));
}

export function DrtDeleteNullSecurityProvider(
  pSecurityProvider: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libdrtprov_dll.DrtDeleteNullSecurityProvider(util.toPointer(pSecurityProvider));
}

export function DrtOpen(
  pSettings: Deno.PointerValue | Uint8Array /* ptr */,
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pvContext: Deno.PointerValue | Uint8Array /* ptr */,
  phDrt: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtOpen(util.toPointer(pSettings), util.toPointer(hEvent), util.toPointer(pvContext), util.toPointer(phDrt));
}

export function DrtClose(
  hDrt: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libdrt_dll.DrtClose(util.toPointer(hDrt));
}

export function DrtGetEventDataSize(
  hDrt: Deno.PointerValue | Uint8Array /* ptr */,
  pulEventDataLen: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtGetEventDataSize(util.toPointer(hDrt), util.toPointer(pulEventDataLen));
}

export function DrtGetEventData(
  hDrt: Deno.PointerValue | Uint8Array /* ptr */,
  ulEventDataLen: number /* u32 */,
  pEventData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtGetEventData(util.toPointer(hDrt), ulEventDataLen, util.toPointer(pEventData));
}

export function DrtRegisterKey(
  hDrt: Deno.PointerValue | Uint8Array /* ptr */,
  pRegistration: Deno.PointerValue | Uint8Array /* ptr */,
  pvKeyContext: Deno.PointerValue | Uint8Array /* ptr */,
  phKeyRegistration: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtRegisterKey(util.toPointer(hDrt), util.toPointer(pRegistration), util.toPointer(pvKeyContext), util.toPointer(phKeyRegistration));
}

export function DrtUpdateKey(
  hKeyRegistration: Deno.PointerValue | Uint8Array /* ptr */,
  pAppData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtUpdateKey(util.toPointer(hKeyRegistration), util.toPointer(pAppData));
}

export function DrtUnregisterKey(
  hKeyRegistration: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libdrt_dll.DrtUnregisterKey(util.toPointer(hKeyRegistration));
}

export function DrtStartSearch(
  hDrt: Deno.PointerValue | Uint8Array /* ptr */,
  pKey: Deno.PointerValue | Uint8Array /* ptr */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  timeout: number /* u32 */,
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pvContext: Deno.PointerValue | Uint8Array /* ptr */,
  hSearchContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtStartSearch(util.toPointer(hDrt), util.toPointer(pKey), util.toPointer(pInfo), timeout, util.toPointer(hEvent), util.toPointer(pvContext), util.toPointer(hSearchContext));
}

export function DrtContinueSearch(
  hSearchContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtContinueSearch(util.toPointer(hSearchContext));
}

export function DrtGetSearchResultSize(
  hSearchContext: Deno.PointerValue | Uint8Array /* ptr */,
  pulSearchResultSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtGetSearchResultSize(util.toPointer(hSearchContext), util.toPointer(pulSearchResultSize));
}

export function DrtGetSearchResult(
  hSearchContext: Deno.PointerValue | Uint8Array /* ptr */,
  ulSearchResultSize: number /* u32 */,
  pSearchResult: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtGetSearchResult(util.toPointer(hSearchContext), ulSearchResultSize, util.toPointer(pSearchResult));
}

export function DrtGetSearchPathSize(
  hSearchContext: Deno.PointerValue | Uint8Array /* ptr */,
  pulSearchPathSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtGetSearchPathSize(util.toPointer(hSearchContext), util.toPointer(pulSearchPathSize));
}

export function DrtGetSearchPath(
  hSearchContext: Deno.PointerValue | Uint8Array /* ptr */,
  ulSearchPathSize: number /* u32 */,
  pSearchPath: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtGetSearchPath(util.toPointer(hSearchContext), ulSearchPathSize, util.toPointer(pSearchPath));
}

export function DrtEndSearch(
  hSearchContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtEndSearch(util.toPointer(hSearchContext));
}

export function DrtGetInstanceName(
  hDrt: Deno.PointerValue | Uint8Array /* ptr */,
  ulcbInstanceNameSize: number /* u32 */,
  pwzDrtInstanceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtGetInstanceName(util.toPointer(hDrt), ulcbInstanceNameSize, util.pwstrToFfi(pwzDrtInstanceName));
}

export function DrtGetInstanceNameSize(
  hDrt: Deno.PointerValue | Uint8Array /* ptr */,
  pulcbInstanceNameSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdrt_dll.DrtGetInstanceNameSize(util.toPointer(hDrt), util.toPointer(pulcbInstanceNameSize));
}

export function PeerDistStartup(
  dwVersionRequested: number /* u32 */,
  phPeerDist: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSupportedVersion: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistStartup(dwVersionRequested, util.toPointer(phPeerDist), util.toPointer(pdwSupportedVersion));
}

export function PeerDistShutdown(
  hPeerDist: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistShutdown(hPeerDist);
}

export function PeerDistGetStatus(
  hPeerDist: Deno.PointerValue /* isize */,
  pPeerDistStatus: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistGetStatus(hPeerDist, util.toPointer(pPeerDistStatus));
}

export function PeerDistRegisterForStatusChangeNotification(
  hPeerDist: Deno.PointerValue /* isize */,
  hCompletionPort: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ulCompletionKey: Deno.PointerValue /* usize */,
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
  pPeerDistStatus: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistRegisterForStatusChangeNotification(hPeerDist, util.toPointer(hCompletionPort), ulCompletionKey, util.toPointer(lpOverlapped), util.toPointer(pPeerDistStatus));
}

export function PeerDistUnregisterForStatusChangeNotification(
  hPeerDist: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistUnregisterForStatusChangeNotification(hPeerDist);
}

export function PeerDistServerPublishStream(
  hPeerDist: Deno.PointerValue /* isize */,
  cbContentIdentifier: number /* u32 */,
  pContentIdentifier: Deno.PointerValue | Uint8Array /* ptr */,
  cbContentLength: Deno.PointerValue /* u64 */,
  pPublishOptions: Deno.PointerValue | Uint8Array /* ptr */,
  hCompletionPort: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ulCompletionKey: Deno.PointerValue /* usize */,
  phStream: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistServerPublishStream(hPeerDist, cbContentIdentifier, util.toPointer(pContentIdentifier), cbContentLength, util.toPointer(pPublishOptions), util.toPointer(hCompletionPort), ulCompletionKey, util.toPointer(phStream));
}

export function PeerDistServerPublishAddToStream(
  hPeerDist: Deno.PointerValue /* isize */,
  hStream: Deno.PointerValue /* isize */,
  cbNumberOfBytes: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistServerPublishAddToStream(hPeerDist, hStream, cbNumberOfBytes, util.toPointer(pBuffer), util.toPointer(lpOverlapped));
}

export function PeerDistServerPublishCompleteStream(
  hPeerDist: Deno.PointerValue /* isize */,
  hStream: Deno.PointerValue /* isize */,
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistServerPublishCompleteStream(hPeerDist, hStream, util.toPointer(lpOverlapped));
}

export function PeerDistServerCloseStreamHandle(
  hPeerDist: Deno.PointerValue /* isize */,
  hStream: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistServerCloseStreamHandle(hPeerDist, hStream);
}

export function PeerDistServerUnpublish(
  hPeerDist: Deno.PointerValue /* isize */,
  cbContentIdentifier: number /* u32 */,
  pContentIdentifier: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistServerUnpublish(hPeerDist, cbContentIdentifier, util.toPointer(pContentIdentifier));
}

export function PeerDistServerOpenContentInformation(
  hPeerDist: Deno.PointerValue /* isize */,
  cbContentIdentifier: number /* u32 */,
  pContentIdentifier: Deno.PointerValue | Uint8Array /* ptr */,
  ullContentOffset: Deno.PointerValue /* u64 */,
  cbContentLength: Deno.PointerValue /* u64 */,
  hCompletionPort: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ulCompletionKey: Deno.PointerValue /* usize */,
  phContentInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistServerOpenContentInformation(hPeerDist, cbContentIdentifier, util.toPointer(pContentIdentifier), ullContentOffset, cbContentLength, util.toPointer(hCompletionPort), ulCompletionKey, util.toPointer(phContentInfo));
}

export function PeerDistServerRetrieveContentInformation(
  hPeerDist: Deno.PointerValue /* isize */,
  hContentInfo: Deno.PointerValue /* isize */,
  cbMaxNumberOfBytes: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistServerRetrieveContentInformation(hPeerDist, hContentInfo, cbMaxNumberOfBytes, util.toPointer(pBuffer), util.toPointer(lpOverlapped));
}

export function PeerDistServerCloseContentInformation(
  hPeerDist: Deno.PointerValue /* isize */,
  hContentInfo: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistServerCloseContentInformation(hPeerDist, hContentInfo);
}

export function PeerDistServerCancelAsyncOperation(
  hPeerDist: Deno.PointerValue /* isize */,
  cbContentIdentifier: number /* u32 */,
  pContentIdentifier: Deno.PointerValue | Uint8Array /* ptr */,
  pOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistServerCancelAsyncOperation(hPeerDist, cbContentIdentifier, util.toPointer(pContentIdentifier), util.toPointer(pOverlapped));
}

export function PeerDistClientOpenContent(
  hPeerDist: Deno.PointerValue /* isize */,
  pContentTag: Deno.PointerValue | Uint8Array /* ptr */,
  hCompletionPort: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ulCompletionKey: Deno.PointerValue /* usize */,
  phContentHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistClientOpenContent(hPeerDist, util.toPointer(pContentTag), util.toPointer(hCompletionPort), ulCompletionKey, util.toPointer(phContentHandle));
}

export function PeerDistClientCloseContent(
  hPeerDist: Deno.PointerValue /* isize */,
  hContentHandle: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistClientCloseContent(hPeerDist, hContentHandle);
}

export function PeerDistClientAddContentInformation(
  hPeerDist: Deno.PointerValue /* isize */,
  hContentHandle: Deno.PointerValue /* isize */,
  cbNumberOfBytes: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistClientAddContentInformation(hPeerDist, hContentHandle, cbNumberOfBytes, util.toPointer(pBuffer), util.toPointer(lpOverlapped));
}

export function PeerDistClientCompleteContentInformation(
  hPeerDist: Deno.PointerValue /* isize */,
  hContentHandle: Deno.PointerValue /* isize */,
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistClientCompleteContentInformation(hPeerDist, hContentHandle, util.toPointer(lpOverlapped));
}

export function PeerDistClientAddData(
  hPeerDist: Deno.PointerValue /* isize */,
  hContentHandle: Deno.PointerValue /* isize */,
  cbNumberOfBytes: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistClientAddData(hPeerDist, hContentHandle, cbNumberOfBytes, util.toPointer(pBuffer), util.toPointer(lpOverlapped));
}

export function PeerDistClientBlockRead(
  hPeerDist: Deno.PointerValue /* isize */,
  hContentHandle: Deno.PointerValue /* isize */,
  cbMaxNumberOfBytes: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwTimeoutInMilliseconds: number /* u32 */,
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistClientBlockRead(hPeerDist, hContentHandle, cbMaxNumberOfBytes, util.toPointer(pBuffer), dwTimeoutInMilliseconds, util.toPointer(lpOverlapped));
}

export function PeerDistClientStreamRead(
  hPeerDist: Deno.PointerValue /* isize */,
  hContentHandle: Deno.PointerValue /* isize */,
  cbMaxNumberOfBytes: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwTimeoutInMilliseconds: number /* u32 */,
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistClientStreamRead(hPeerDist, hContentHandle, cbMaxNumberOfBytes, util.toPointer(pBuffer), dwTimeoutInMilliseconds, util.toPointer(lpOverlapped));
}

export function PeerDistClientFlushContent(
  hPeerDist: Deno.PointerValue /* isize */,
  pContentTag: Deno.PointerValue | Uint8Array /* ptr */,
  hCompletionPort: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ulCompletionKey: Deno.PointerValue /* usize */,
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistClientFlushContent(hPeerDist, util.toPointer(pContentTag), util.toPointer(hCompletionPort), ulCompletionKey, util.toPointer(lpOverlapped));
}

export function PeerDistClientCancelAsyncOperation(
  hPeerDist: Deno.PointerValue /* isize */,
  hContentHandle: Deno.PointerValue /* isize */,
  pOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistClientCancelAsyncOperation(hPeerDist, hContentHandle, util.toPointer(pOverlapped));
}

export function PeerDistGetStatusEx(
  hPeerDist: Deno.PointerValue /* isize */,
  pPeerDistStatus: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistGetStatusEx(hPeerDist, util.toPointer(pPeerDistStatus));
}

export function PeerDistRegisterForStatusChangeNotificationEx(
  hPeerDist: Deno.PointerValue /* isize */,
  hCompletionPort: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ulCompletionKey: Deno.PointerValue /* usize */,
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
  pPeerDistStatus: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistRegisterForStatusChangeNotificationEx(hPeerDist, util.toPointer(hCompletionPort), ulCompletionKey, util.toPointer(lpOverlapped), util.toPointer(pPeerDistStatus));
}

export function PeerDistGetOverlappedResult(
  lpOverlapped: Deno.PointerValue | Uint8Array /* ptr */,
  lpNumberOfBytesTransferred: Deno.PointerValue | Uint8Array /* ptr */,
  bWait: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libPeerDist_dll.PeerDistGetOverlappedResult(util.toPointer(lpOverlapped), util.toPointer(lpNumberOfBytesTransferred), util.boolToFfi(bWait)));
}

export function PeerDistServerOpenContentInformationEx(
  hPeerDist: Deno.PointerValue /* isize */,
  cbContentIdentifier: number /* u32 */,
  pContentIdentifier: Deno.PointerValue | Uint8Array /* ptr */,
  ullContentOffset: Deno.PointerValue /* u64 */,
  cbContentLength: Deno.PointerValue /* u64 */,
  pRetrievalOptions: Deno.PointerValue | Uint8Array /* ptr */,
  hCompletionPort: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ulCompletionKey: Deno.PointerValue /* usize */,
  phContentInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistServerOpenContentInformationEx(hPeerDist, cbContentIdentifier, util.toPointer(pContentIdentifier), ullContentOffset, cbContentLength, util.toPointer(pRetrievalOptions), util.toPointer(hCompletionPort), ulCompletionKey, util.toPointer(phContentInfo));
}

export function PeerDistClientGetInformationByHandle(
  hPeerDist: Deno.PointerValue /* isize */,
  hContentHandle: Deno.PointerValue /* isize */,
  PeerDistClientInfoClass: PEERDIST_CLIENT_INFO_BY_HANDLE_CLASS /* Windows.Win32.NetworkManagement.P2P.PEERDIST_CLIENT_INFO_BY_HANDLE_CLASS */,
  dwBufferSize: number /* u32 */,
  lpInformation: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPeerDist_dll.PeerDistClientGetInformationByHandle(hPeerDist, hContentHandle, PeerDistClientInfoClass, dwBufferSize, util.toPointer(lpInformation));
}

