/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.Ndis.Apis

import * as util from "../../util.ts";

// Enums
export type NET_IF_OPER_STATUS = number;
export type NET_IF_ADMIN_STATUS = number;
export type NET_IF_RCV_ADDRESS_TYPE = number;
export type NET_IF_CONNECTION_TYPE = number;
export type TUNNEL_TYPE = number;
export type NET_IF_ACCESS_TYPE = number;
export type NET_IF_DIRECTION_TYPE = number;
export type NET_IF_MEDIA_CONNECT_STATE = number;
export type NET_IF_MEDIA_DUPLEX_STATE = number;
export type IF_ADMINISTRATIVE_STATE = number;
export type IF_OPER_STATUS = number;
export type NDIS_REQUEST_TYPE = number;
export type NDIS_INTERRUPT_MODERATION = number;
export type NDIS_802_11_STATUS_TYPE = number;
export type NDIS_802_11_NETWORK_TYPE = number;
export type NDIS_802_11_POWER_MODE = number;
export type NDIS_802_11_NETWORK_INFRASTRUCTURE = number;
export type NDIS_802_11_AUTHENTICATION_MODE = number;
export type NDIS_802_11_PRIVACY_FILTER = number;
export type NDIS_802_11_WEP_STATUS = number;
export type NDIS_802_11_RELOAD_DEFAULTS = number;
export type NDIS_802_11_MEDIA_STREAM_MODE = number;
export type NDIS_802_11_RADIO_STATUS = number;
export type OFFLOAD_OPERATION_E = number;
export type OFFLOAD_CONF_ALGO = number;
export type OFFLOAD_INTEGRITY_ALGO = number;
export type UDP_ENCAP_TYPE = number;
export type NDIS_MEDIUM = number;
export type NDIS_PHYSICAL_MEDIUM = number;
export type NDIS_HARDWARE_STATUS = number;
export type NDIS_DEVICE_POWER_STATE = number;
export type NDIS_FDDI_ATTACHMENT_TYPE = number;
export type NDIS_FDDI_RING_MGT_STATE = number;
export type NDIS_FDDI_LCONNECTION_STATE = number;
export type NDIS_WAN_MEDIUM_SUBTYPE = number;
export type NDIS_WAN_HEADER_FORMAT = number;
export type NDIS_WAN_QUALITY = number;
export type NDIS_802_5_RING_STATE = number;
export type NDIS_MEDIA_STATE = number;
export type NDIS_SUPPORTED_PAUSE_FUNCTIONS = number;
export type NDIS_PORT_TYPE = number;
export type NDIS_PORT_AUTHORIZATION_STATE = number;
export type NDIS_PORT_CONTROL_STATE = number;
export type NDIS_NETWORK_CHANGE_TYPE = number;
export type NDIS_PROCESSOR_VENDOR = number;
export type NDK_RDMA_TECHNOLOGY = number;

// Constants
export const IOCTL_NDIS_RESERVED5 = 1507380;
export const IOCTL_NDIS_RESERVED6 = 1540152;
export const NDIS_OBJECT_TYPE_DEFAULT = 128;
export const NDIS_OBJECT_TYPE_MINIPORT_INIT_PARAMETERS = 129;
export const NDIS_OBJECT_TYPE_SG_DMA_DESCRIPTION = 131;
export const NDIS_OBJECT_TYPE_MINIPORT_INTERRUPT = 132;
export const NDIS_OBJECT_TYPE_DEVICE_OBJECT_ATTRIBUTES = 133;
export const NDIS_OBJECT_TYPE_BIND_PARAMETERS = 134;
export const NDIS_OBJECT_TYPE_OPEN_PARAMETERS = 135;
export const NDIS_OBJECT_TYPE_RSS_CAPABILITIES = 136;
export const NDIS_OBJECT_TYPE_RSS_PARAMETERS = 137;
export const NDIS_OBJECT_TYPE_MINIPORT_DRIVER_CHARACTERISTICS = 138;
export const NDIS_OBJECT_TYPE_FILTER_DRIVER_CHARACTERISTICS = 139;
export const NDIS_OBJECT_TYPE_FILTER_PARTIAL_CHARACTERISTICS = 140;
export const NDIS_OBJECT_TYPE_FILTER_ATTRIBUTES = 141;
export const NDIS_OBJECT_TYPE_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS = 142;
export const NDIS_OBJECT_TYPE_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS = 143;
export const NDIS_OBJECT_TYPE_CO_PROTOCOL_CHARACTERISTICS = 144;
export const NDIS_OBJECT_TYPE_CO_MINIPORT_CHARACTERISTICS = 145;
export const NDIS_OBJECT_TYPE_MINIPORT_PNP_CHARACTERISTICS = 146;
export const NDIS_OBJECT_TYPE_CLIENT_CHIMNEY_OFFLOAD_CHARACTERISTICS = 147;
export const NDIS_OBJECT_TYPE_PROVIDER_CHIMNEY_OFFLOAD_CHARACTERISTICS = 148;
export const NDIS_OBJECT_TYPE_PROTOCOL_DRIVER_CHARACTERISTICS = 149;
export const NDIS_OBJECT_TYPE_REQUEST_EX = 150;
export const NDIS_OBJECT_TYPE_TIMER_CHARACTERISTICS = 151;
export const NDIS_OBJECT_TYPE_STATUS_INDICATION = 152;
export const NDIS_OBJECT_TYPE_FILTER_ATTACH_PARAMETERS = 153;
export const NDIS_OBJECT_TYPE_FILTER_PAUSE_PARAMETERS = 154;
export const NDIS_OBJECT_TYPE_FILTER_RESTART_PARAMETERS = 155;
export const NDIS_OBJECT_TYPE_PORT_CHARACTERISTICS = 156;
export const NDIS_OBJECT_TYPE_PORT_STATE = 157;
export const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES = 158;
export const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES = 159;
export const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES = 160;
export const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES = 161;
export const NDIS_OBJECT_TYPE_RESTART_GENERAL_ATTRIBUTES = 162;
export const NDIS_OBJECT_TYPE_PROTOCOL_RESTART_PARAMETERS = 163;
export const NDIS_OBJECT_TYPE_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES = 164;
export const NDIS_OBJECT_TYPE_CO_CALL_MANAGER_OPTIONAL_HANDLERS = 165;
export const NDIS_OBJECT_TYPE_CO_CLIENT_OPTIONAL_HANDLERS = 166;
export const NDIS_OBJECT_TYPE_OFFLOAD = 167;
export const NDIS_OBJECT_TYPE_OFFLOAD_ENCAPSULATION = 168;
export const NDIS_OBJECT_TYPE_CONFIGURATION_OBJECT = 169;
export const NDIS_OBJECT_TYPE_DRIVER_WRAPPER_OBJECT = 170;
export const NDIS_OBJECT_TYPE_HD_SPLIT_ATTRIBUTES = 171;
export const NDIS_OBJECT_TYPE_NSI_NETWORK_RW_STRUCT = 172;
export const NDIS_OBJECT_TYPE_NSI_COMPARTMENT_RW_STRUCT = 173;
export const NDIS_OBJECT_TYPE_NSI_INTERFACE_PERSIST_RW_STRUCT = 174;
export const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES = 175;
export const NDIS_OBJECT_TYPE_SHARED_MEMORY_PROVIDER_CHARACTERISTICS = 176;
export const NDIS_OBJECT_TYPE_RSS_PROCESSOR_INFO = 177;
export const NDIS_OBJECT_TYPE_NDK_PROVIDER_CHARACTERISTICS = 178;
export const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_NDK_ATTRIBUTES = 179;
export const NDIS_OBJECT_TYPE_MINIPORT_SS_CHARACTERISTICS = 180;
export const NDIS_OBJECT_TYPE_QOS_CAPABILITIES = 181;
export const NDIS_OBJECT_TYPE_QOS_PARAMETERS = 182;
export const NDIS_OBJECT_TYPE_QOS_CLASSIFICATION_ELEMENT = 183;
export const NDIS_OBJECT_TYPE_SWITCH_OPTIONAL_HANDLERS = 184;
export const NDIS_OBJECT_TYPE_PD_TRANSMIT_QUEUE = 190;
export const NDIS_OBJECT_TYPE_PD_RECEIVE_QUEUE = 191;
export const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES = 197;
export const NDIS_OBJECT_TYPE_MINIPORT_DEVICE_POWER_NOTIFICATION = 198;
export const NDIS_OBJECT_TYPE_RSS_PARAMETERS_V2 = 200;
export const NDIS_OBJECT_TYPE_RSS_SET_INDIRECTION_ENTRIES = 201;
export const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_FRAMES_RCV = 1;
export const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_FRAMES_RCV = 2;
export const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_FRAMES_RCV = 4;
export const NDIS_STATISTICS_FLAGS_VALID_BYTES_RCV = 8;
export const NDIS_STATISTICS_FLAGS_VALID_RCV_DISCARDS = 16;
export const NDIS_STATISTICS_FLAGS_VALID_RCV_ERROR = 32;
export const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_FRAMES_XMIT = 64;
export const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_FRAMES_XMIT = 128;
export const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_FRAMES_XMIT = 256;
export const NDIS_STATISTICS_FLAGS_VALID_BYTES_XMIT = 512;
export const NDIS_STATISTICS_FLAGS_VALID_XMIT_ERROR = 1024;
export const NDIS_STATISTICS_FLAGS_VALID_XMIT_DISCARDS = 32768;
export const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_BYTES_RCV = 65536;
export const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_BYTES_RCV = 131072;
export const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_BYTES_RCV = 262144;
export const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_BYTES_XMIT = 524288;
export const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_BYTES_XMIT = 1048576;
export const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_BYTES_XMIT = 2097152;
export const NDIS_STATISTICS_INFO_REVISION_1 = 1;
export const NDIS_RSC_STATISTICS_REVISION_1 = 1;
export const NDIS_INTERRUPT_MODERATION_CHANGE_NEEDS_RESET = 1;
export const NDIS_INTERRUPT_MODERATION_CHANGE_NEEDS_REINITIALIZE = 2;
export const NDIS_INTERRUPT_MODERATION_PARAMETERS_REVISION_1 = 1;
export const NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES_REVISION_1 = 1;
export const NDIS_OBJECT_TYPE_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_1 = 1;
export const NDIS_OBJECT_TYPE_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_2 = 2;
export const OID_GEN_SUPPORTED_LIST = 65793;
export const OID_GEN_HARDWARE_STATUS = 65794;
export const OID_GEN_MEDIA_SUPPORTED = 65795;
export const OID_GEN_MEDIA_IN_USE = 65796;
export const OID_GEN_MAXIMUM_LOOKAHEAD = 65797;
export const OID_GEN_MAXIMUM_FRAME_SIZE = 65798;
export const OID_GEN_LINK_SPEED = 65799;
export const OID_GEN_TRANSMIT_BUFFER_SPACE = 65800;
export const OID_GEN_RECEIVE_BUFFER_SPACE = 65801;
export const OID_GEN_TRANSMIT_BLOCK_SIZE = 65802;
export const OID_GEN_RECEIVE_BLOCK_SIZE = 65803;
export const OID_GEN_VENDOR_ID = 65804;
export const OID_GEN_VENDOR_DESCRIPTION = 65805;
export const OID_GEN_CURRENT_PACKET_FILTER = 65806;
export const OID_GEN_CURRENT_LOOKAHEAD = 65807;
export const OID_GEN_DRIVER_VERSION = 65808;
export const OID_GEN_MAXIMUM_TOTAL_SIZE = 65809;
export const OID_GEN_PROTOCOL_OPTIONS = 65810;
export const OID_GEN_MAC_OPTIONS = 65811;
export const OID_GEN_MEDIA_CONNECT_STATUS = 65812;
export const OID_GEN_MAXIMUM_SEND_PACKETS = 65813;
export const OID_GEN_VENDOR_DRIVER_VERSION = 65814;
export const OID_GEN_SUPPORTED_GUIDS = 65815;
export const OID_GEN_NETWORK_LAYER_ADDRESSES = 65816;
export const OID_GEN_TRANSPORT_HEADER_OFFSET = 65817;
export const OID_GEN_MEDIA_CAPABILITIES = 66049;
export const OID_GEN_PHYSICAL_MEDIUM = 66050;
export const OID_GEN_RECEIVE_SCALE_CAPABILITIES = 66051;
export const OID_GEN_RECEIVE_SCALE_PARAMETERS = 66052;
export const OID_GEN_MAC_ADDRESS = 66053;
export const OID_GEN_MAX_LINK_SPEED = 66054;
export const OID_GEN_LINK_STATE = 66055;
export const OID_GEN_LINK_PARAMETERS = 66056;
export const OID_GEN_INTERRUPT_MODERATION = 66057;
export const OID_GEN_NDIS_RESERVED_3 = 66058;
export const OID_GEN_NDIS_RESERVED_4 = 66059;
export const OID_GEN_NDIS_RESERVED_5 = 66060;
export const OID_GEN_ENUMERATE_PORTS = 66061;
export const OID_GEN_PORT_STATE = 66062;
export const OID_GEN_PORT_AUTHENTICATION_PARAMETERS = 66063;
export const OID_GEN_TIMEOUT_DPC_REQUEST_CAPABILITIES = 66064;
export const OID_GEN_PCI_DEVICE_CUSTOM_PROPERTIES = 66065;
export const OID_GEN_NDIS_RESERVED_6 = 66066;
export const OID_GEN_PHYSICAL_MEDIUM_EX = 66067;
export const OID_GEN_RECEIVE_SCALE_PARAMETERS_V2 = 66068;
export const OID_GEN_MACHINE_NAME = 66074;
export const OID_GEN_RNDIS_CONFIG_PARAMETER = 66075;
export const OID_GEN_VLAN_ID = 66076;
export const OID_GEN_RECEIVE_HASH = 66079;
export const OID_GEN_MINIPORT_RESTART_ATTRIBUTES = 66077;
export const OID_GEN_HD_SPLIT_PARAMETERS = 66078;
export const OID_GEN_HD_SPLIT_CURRENT_CONFIG = 66080;
export const OID_GEN_PROMISCUOUS_MODE = 66176;
export const OID_GEN_LAST_CHANGE = 66177;
export const OID_GEN_DISCONTINUITY_TIME = 66178;
export const OID_GEN_OPERATIONAL_STATUS = 66179;
export const OID_GEN_XMIT_LINK_SPEED = 66180;
export const OID_GEN_RCV_LINK_SPEED = 66181;
export const OID_GEN_UNKNOWN_PROTOS = 66182;
export const OID_GEN_INTERFACE_INFO = 66183;
export const OID_GEN_ADMIN_STATUS = 66184;
export const OID_GEN_ALIAS = 66185;
export const OID_GEN_MEDIA_CONNECT_STATUS_EX = 66186;
export const OID_GEN_LINK_SPEED_EX = 66187;
export const OID_GEN_MEDIA_DUPLEX_STATE = 66188;
export const OID_GEN_IP_OPER_STATUS = 66189;
export const OID_WWAN_DRIVER_CAPS = 234946816;
export const OID_WWAN_DEVICE_CAPS = 234946817;
export const OID_WWAN_READY_INFO = 234946818;
export const OID_WWAN_RADIO_STATE = 234946819;
export const OID_WWAN_PIN = 234946820;
export const OID_WWAN_PIN_LIST = 234946821;
export const OID_WWAN_HOME_PROVIDER = 234946822;
export const OID_WWAN_PREFERRED_PROVIDERS = 234946823;
export const OID_WWAN_VISIBLE_PROVIDERS = 234946824;
export const OID_WWAN_REGISTER_STATE = 234946825;
export const OID_WWAN_PACKET_SERVICE = 234946826;
export const OID_WWAN_SIGNAL_STATE = 234946827;
export const OID_WWAN_CONNECT = 234946828;
export const OID_WWAN_PROVISIONED_CONTEXTS = 234946829;
export const OID_WWAN_SERVICE_ACTIVATION = 234946830;
export const OID_WWAN_SMS_CONFIGURATION = 234946831;
export const OID_WWAN_SMS_READ = 234946832;
export const OID_WWAN_SMS_SEND = 234946833;
export const OID_WWAN_SMS_DELETE = 234946834;
export const OID_WWAN_SMS_STATUS = 234946835;
export const OID_WWAN_VENDOR_SPECIFIC = 234946836;
export const OID_WWAN_AUTH_CHALLENGE = 234946837;
export const OID_WWAN_ENUMERATE_DEVICE_SERVICES = 234946838;
export const OID_WWAN_SUBSCRIBE_DEVICE_SERVICE_EVENTS = 234946839;
export const OID_WWAN_DEVICE_SERVICE_COMMAND = 234946840;
export const OID_WWAN_USSD = 234946841;
export const OID_WWAN_PIN_EX = 234946849;
export const OID_WWAN_ENUMERATE_DEVICE_SERVICE_COMMANDS = 234946850;
export const OID_WWAN_DEVICE_SERVICE_SESSION = 234946851;
export const OID_WWAN_DEVICE_SERVICE_SESSION_WRITE = 234946852;
export const OID_WWAN_PREFERRED_MULTICARRIER_PROVIDERS = 234946853;
export const OID_WWAN_CREATE_MAC = 234946854;
export const OID_WWAN_DELETE_MAC = 234946855;
export const OID_WWAN_UICC_FILE_STATUS = 234946856;
export const OID_WWAN_UICC_ACCESS_BINARY = 234946857;
export const OID_WWAN_UICC_ACCESS_RECORD = 234946858;
export const OID_WWAN_PIN_EX2 = 234946859;
export const OID_WWAN_MBIM_VERSION = 234946860;
export const OID_WWAN_SYS_CAPS = 234946861;
export const OID_WWAN_DEVICE_CAPS_EX = 234946862;
export const OID_WWAN_SYS_SLOTMAPPINGS = 234946863;
export const OID_WWAN_SLOT_INFO_STATUS = 234946864;
export const OID_WWAN_DEVICE_BINDINGS = 234946865;
export const OID_WWAN_REGISTER_STATE_EX = 234946866;
export const OID_WWAN_IMS_VOICE_STATE = 234946867;
export const OID_WWAN_SIGNAL_STATE_EX = 234946868;
export const OID_WWAN_LOCATION_STATE = 234946869;
export const OID_WWAN_NITZ = 234946870;
export const OID_WWAN_NETWORK_IDLE_HINT = 234946871;
export const OID_WWAN_PRESHUTDOWN = 234946872;
export const OID_WWAN_UICC_ATR = 234946873;
export const OID_WWAN_UICC_OPEN_CHANNEL = 234946874;
export const OID_WWAN_UICC_CLOSE_CHANNEL = 234946875;
export const OID_WWAN_UICC_APDU = 234946876;
export const OID_WWAN_UICC_TERMINAL_CAPABILITY = 234946877;
export const OID_WWAN_PS_MEDIA_CONFIG = 234946878;
export const OID_WWAN_SAR_CONFIG = 234946879;
export const OID_WWAN_SAR_TRANSMISSION_STATUS = 234946880;
export const OID_WWAN_NETWORK_BLACKLIST = 234946881;
export const OID_WWAN_LTE_ATTACH_CONFIG = 234946882;
export const OID_WWAN_LTE_ATTACH_STATUS = 234946883;
export const OID_WWAN_MODEM_CONFIG_INFO = 234946884;
export const OID_WWAN_PCO = 234946885;
export const OID_WWAN_UICC_RESET = 234946886;
export const OID_WWAN_DEVICE_RESET = 234946887;
export const OID_WWAN_BASE_STATIONS_INFO = 234946888;
export const OID_WWAN_MPDP = 234946889;
export const OID_WWAN_UICC_APP_LIST = 234946890;
export const OID_WWAN_MODEM_LOGGING_CONFIG = 234946891;
export const OID_WWAN_REGISTER_PARAMS = 234946892;
export const OID_WWAN_NETWORK_PARAMS = 234946893;
export const OID_GEN_XMIT_OK = 131329;
export const OID_GEN_RCV_OK = 131330;
export const OID_GEN_XMIT_ERROR = 131331;
export const OID_GEN_RCV_ERROR = 131332;
export const OID_GEN_RCV_NO_BUFFER = 131333;
export const OID_GEN_STATISTICS = 131334;
export const OID_GEN_DIRECTED_BYTES_XMIT = 131585;
export const OID_GEN_DIRECTED_FRAMES_XMIT = 131586;
export const OID_GEN_MULTICAST_BYTES_XMIT = 131587;
export const OID_GEN_MULTICAST_FRAMES_XMIT = 131588;
export const OID_GEN_BROADCAST_BYTES_XMIT = 131589;
export const OID_GEN_BROADCAST_FRAMES_XMIT = 131590;
export const OID_GEN_DIRECTED_BYTES_RCV = 131591;
export const OID_GEN_DIRECTED_FRAMES_RCV = 131592;
export const OID_GEN_MULTICAST_BYTES_RCV = 131593;
export const OID_GEN_MULTICAST_FRAMES_RCV = 131594;
export const OID_GEN_BROADCAST_BYTES_RCV = 131595;
export const OID_GEN_BROADCAST_FRAMES_RCV = 131596;
export const OID_GEN_RCV_CRC_ERROR = 131597;
export const OID_GEN_TRANSMIT_QUEUE_LENGTH = 131598;
export const OID_GEN_GET_TIME_CAPS = 131599;
export const OID_GEN_GET_NETCARD_TIME = 131600;
export const OID_GEN_NETCARD_LOAD = 131601;
export const OID_GEN_DEVICE_PROFILE = 131602;
export const OID_GEN_INIT_TIME_MS = 131603;
export const OID_GEN_RESET_COUNTS = 131604;
export const OID_GEN_MEDIA_SENSE_COUNTS = 131605;
export const OID_GEN_FRIENDLY_NAME = 131606;
export const OID_GEN_NDIS_RESERVED_1 = 131607;
export const OID_GEN_NDIS_RESERVED_2 = 131608;
export const OID_GEN_BYTES_RCV = 131609;
export const OID_GEN_BYTES_XMIT = 131610;
export const OID_GEN_RCV_DISCARDS = 131611;
export const OID_GEN_XMIT_DISCARDS = 131612;
export const OID_TCP_RSC_STATISTICS = 131613;
export const OID_GEN_NDIS_RESERVED_7 = 131614;
export const OID_GEN_CO_SUPPORTED_LIST = 65793;
export const OID_GEN_CO_HARDWARE_STATUS = 65794;
export const OID_GEN_CO_MEDIA_SUPPORTED = 65795;
export const OID_GEN_CO_MEDIA_IN_USE = 65796;
export const OID_GEN_CO_LINK_SPEED = 65799;
export const OID_GEN_CO_VENDOR_ID = 65804;
export const OID_GEN_CO_VENDOR_DESCRIPTION = 65805;
export const OID_GEN_CO_DRIVER_VERSION = 65808;
export const OID_GEN_CO_PROTOCOL_OPTIONS = 65810;
export const OID_GEN_CO_MAC_OPTIONS = 65811;
export const OID_GEN_CO_MEDIA_CONNECT_STATUS = 65812;
export const OID_GEN_CO_VENDOR_DRIVER_VERSION = 65814;
export const OID_GEN_CO_SUPPORTED_GUIDS = 65815;
export const OID_GEN_CO_GET_TIME_CAPS = 131599;
export const OID_GEN_CO_GET_NETCARD_TIME = 131600;
export const OID_GEN_CO_MINIMUM_LINK_SPEED = 131360;
export const OID_GEN_CO_XMIT_PDUS_OK = 131329;
export const OID_GEN_CO_RCV_PDUS_OK = 131330;
export const OID_GEN_CO_XMIT_PDUS_ERROR = 131331;
export const OID_GEN_CO_RCV_PDUS_ERROR = 131332;
export const OID_GEN_CO_RCV_PDUS_NO_BUFFER = 131333;
export const OID_GEN_CO_RCV_CRC_ERROR = 131597;
export const OID_GEN_CO_TRANSMIT_QUEUE_LENGTH = 131598;
export const OID_GEN_CO_BYTES_XMIT = 131585;
export const OID_GEN_CO_BYTES_RCV = 131591;
export const OID_GEN_CO_NETCARD_LOAD = 131601;
export const OID_GEN_CO_DEVICE_PROFILE = 131602;
export const OID_GEN_CO_BYTES_XMIT_OUTSTANDING = 131617;
export const OID_KDNET_ENUMERATE_PFS = 131618;
export const OID_KDNET_ADD_PF = 131619;
export const OID_KDNET_REMOVE_PF = 131620;
export const OID_KDNET_QUERY_PF_INFORMATION = 131621;
export const OID_802_3_PERMANENT_ADDRESS = 16843009;
export const OID_802_3_CURRENT_ADDRESS = 16843010;
export const OID_802_3_MULTICAST_LIST = 16843011;
export const OID_802_3_MAXIMUM_LIST_SIZE = 16843012;
export const OID_802_3_MAC_OPTIONS = 16843013;
export const NDIS_802_3_MAC_OPTION_PRIORITY = 1;
export const OID_802_3_RCV_ERROR_ALIGNMENT = 16908545;
export const OID_802_3_XMIT_ONE_COLLISION = 16908546;
export const OID_802_3_XMIT_MORE_COLLISIONS = 16908547;
export const OID_802_3_XMIT_DEFERRED = 16908801;
export const OID_802_3_XMIT_MAX_COLLISIONS = 16908802;
export const OID_802_3_RCV_OVERRUN = 16908803;
export const OID_802_3_XMIT_UNDERRUN = 16908804;
export const OID_802_3_XMIT_HEARTBEAT_FAILURE = 16908805;
export const OID_802_3_XMIT_TIMES_CRS_LOST = 16908806;
export const OID_802_3_XMIT_LATE_COLLISIONS = 16908807;
export const OID_802_3_ADD_MULTICAST_ADDRESS = 16843272;
export const OID_802_3_DELETE_MULTICAST_ADDRESS = 16843273;
export const OID_802_5_PERMANENT_ADDRESS = 33620225;
export const OID_802_5_CURRENT_ADDRESS = 33620226;
export const OID_802_5_CURRENT_FUNCTIONAL = 33620227;
export const OID_802_5_CURRENT_GROUP = 33620228;
export const OID_802_5_LAST_OPEN_STATUS = 33620229;
export const OID_802_5_CURRENT_RING_STATUS = 33620230;
export const OID_802_5_CURRENT_RING_STATE = 33620231;
export const OID_802_5_LINE_ERRORS = 33685761;
export const OID_802_5_LOST_FRAMES = 33685762;
export const OID_802_5_BURST_ERRORS = 33686017;
export const OID_802_5_AC_ERRORS = 33686018;
export const OID_802_5_ABORT_DELIMETERS = 33686019;
export const OID_802_5_FRAME_COPIED_ERRORS = 33686020;
export const OID_802_5_FREQUENCY_ERRORS = 33686021;
export const OID_802_5_TOKEN_ERRORS = 33686022;
export const OID_802_5_INTERNAL_ERRORS = 33686023;
export const OID_FDDI_LONG_PERMANENT_ADDR = 50397441;
export const OID_FDDI_LONG_CURRENT_ADDR = 50397442;
export const OID_FDDI_LONG_MULTICAST_LIST = 50397443;
export const OID_FDDI_LONG_MAX_LIST_SIZE = 50397444;
export const OID_FDDI_SHORT_PERMANENT_ADDR = 50397445;
export const OID_FDDI_SHORT_CURRENT_ADDR = 50397446;
export const OID_FDDI_SHORT_MULTICAST_LIST = 50397447;
export const OID_FDDI_SHORT_MAX_LIST_SIZE = 50397448;
export const OID_FDDI_ATTACHMENT_TYPE = 50462977;
export const OID_FDDI_UPSTREAM_NODE_LONG = 50462978;
export const OID_FDDI_DOWNSTREAM_NODE_LONG = 50462979;
export const OID_FDDI_FRAME_ERRORS = 50462980;
export const OID_FDDI_FRAMES_LOST = 50462981;
export const OID_FDDI_RING_MGT_STATE = 50462982;
export const OID_FDDI_LCT_FAILURES = 50462983;
export const OID_FDDI_LEM_REJECTS = 50462984;
export const OID_FDDI_LCONNECTION_STATE = 50462985;
export const OID_FDDI_SMT_STATION_ID = 50528769;
export const OID_FDDI_SMT_OP_VERSION_ID = 50528770;
export const OID_FDDI_SMT_HI_VERSION_ID = 50528771;
export const OID_FDDI_SMT_LO_VERSION_ID = 50528772;
export const OID_FDDI_SMT_MANUFACTURER_DATA = 50528773;
export const OID_FDDI_SMT_USER_DATA = 50528774;
export const OID_FDDI_SMT_MIB_VERSION_ID = 50528775;
export const OID_FDDI_SMT_MAC_CT = 50528776;
export const OID_FDDI_SMT_NON_MASTER_CT = 50528777;
export const OID_FDDI_SMT_MASTER_CT = 50528778;
export const OID_FDDI_SMT_AVAILABLE_PATHS = 50528779;
export const OID_FDDI_SMT_CONFIG_CAPABILITIES = 50528780;
export const OID_FDDI_SMT_CONFIG_POLICY = 50528781;
export const OID_FDDI_SMT_CONNECTION_POLICY = 50528782;
export const OID_FDDI_SMT_T_NOTIFY = 50528783;
export const OID_FDDI_SMT_STAT_RPT_POLICY = 50528784;
export const OID_FDDI_SMT_TRACE_MAX_EXPIRATION = 50528785;
export const OID_FDDI_SMT_PORT_INDEXES = 50528786;
export const OID_FDDI_SMT_MAC_INDEXES = 50528787;
export const OID_FDDI_SMT_BYPASS_PRESENT = 50528788;
export const OID_FDDI_SMT_ECM_STATE = 50528789;
export const OID_FDDI_SMT_CF_STATE = 50528790;
export const OID_FDDI_SMT_HOLD_STATE = 50528791;
export const OID_FDDI_SMT_REMOTE_DISCONNECT_FLAG = 50528792;
export const OID_FDDI_SMT_STATION_STATUS = 50528793;
export const OID_FDDI_SMT_PEER_WRAP_FLAG = 50528794;
export const OID_FDDI_SMT_MSG_TIME_STAMP = 50528795;
export const OID_FDDI_SMT_TRANSITION_TIME_STAMP = 50528796;
export const OID_FDDI_SMT_SET_COUNT = 50528797;
export const OID_FDDI_SMT_LAST_SET_STATION_ID = 50528798;
export const OID_FDDI_MAC_FRAME_STATUS_FUNCTIONS = 50528799;
export const OID_FDDI_MAC_BRIDGE_FUNCTIONS = 50528800;
export const OID_FDDI_MAC_T_MAX_CAPABILITY = 50528801;
export const OID_FDDI_MAC_TVX_CAPABILITY = 50528802;
export const OID_FDDI_MAC_AVAILABLE_PATHS = 50528803;
export const OID_FDDI_MAC_CURRENT_PATH = 50528804;
export const OID_FDDI_MAC_UPSTREAM_NBR = 50528805;
export const OID_FDDI_MAC_DOWNSTREAM_NBR = 50528806;
export const OID_FDDI_MAC_OLD_UPSTREAM_NBR = 50528807;
export const OID_FDDI_MAC_OLD_DOWNSTREAM_NBR = 50528808;
export const OID_FDDI_MAC_DUP_ADDRESS_TEST = 50528809;
export const OID_FDDI_MAC_REQUESTED_PATHS = 50528810;
export const OID_FDDI_MAC_DOWNSTREAM_PORT_TYPE = 50528811;
export const OID_FDDI_MAC_INDEX = 50528812;
export const OID_FDDI_MAC_SMT_ADDRESS = 50528813;
export const OID_FDDI_MAC_LONG_GRP_ADDRESS = 50528814;
export const OID_FDDI_MAC_SHORT_GRP_ADDRESS = 50528815;
export const OID_FDDI_MAC_T_REQ = 50528816;
export const OID_FDDI_MAC_T_NEG = 50528817;
export const OID_FDDI_MAC_T_MAX = 50528818;
export const OID_FDDI_MAC_TVX_VALUE = 50528819;
export const OID_FDDI_MAC_T_PRI0 = 50528820;
export const OID_FDDI_MAC_T_PRI1 = 50528821;
export const OID_FDDI_MAC_T_PRI2 = 50528822;
export const OID_FDDI_MAC_T_PRI3 = 50528823;
export const OID_FDDI_MAC_T_PRI4 = 50528824;
export const OID_FDDI_MAC_T_PRI5 = 50528825;
export const OID_FDDI_MAC_T_PRI6 = 50528826;
export const OID_FDDI_MAC_FRAME_CT = 50528827;
export const OID_FDDI_MAC_COPIED_CT = 50528828;
export const OID_FDDI_MAC_TRANSMIT_CT = 50528829;
export const OID_FDDI_MAC_TOKEN_CT = 50528830;
export const OID_FDDI_MAC_ERROR_CT = 50528831;
export const OID_FDDI_MAC_LOST_CT = 50528832;
export const OID_FDDI_MAC_TVX_EXPIRED_CT = 50528833;
export const OID_FDDI_MAC_NOT_COPIED_CT = 50528834;
export const OID_FDDI_MAC_LATE_CT = 50528835;
export const OID_FDDI_MAC_RING_OP_CT = 50528836;
export const OID_FDDI_MAC_FRAME_ERROR_THRESHOLD = 50528837;
export const OID_FDDI_MAC_FRAME_ERROR_RATIO = 50528838;
export const OID_FDDI_MAC_NOT_COPIED_THRESHOLD = 50528839;
export const OID_FDDI_MAC_NOT_COPIED_RATIO = 50528840;
export const OID_FDDI_MAC_RMT_STATE = 50528841;
export const OID_FDDI_MAC_DA_FLAG = 50528842;
export const OID_FDDI_MAC_UNDA_FLAG = 50528843;
export const OID_FDDI_MAC_FRAME_ERROR_FLAG = 50528844;
export const OID_FDDI_MAC_NOT_COPIED_FLAG = 50528845;
export const OID_FDDI_MAC_MA_UNITDATA_AVAILABLE = 50528846;
export const OID_FDDI_MAC_HARDWARE_PRESENT = 50528847;
export const OID_FDDI_MAC_MA_UNITDATA_ENABLE = 50528848;
export const OID_FDDI_PATH_INDEX = 50528849;
export const OID_FDDI_PATH_RING_LATENCY = 50528850;
export const OID_FDDI_PATH_TRACE_STATUS = 50528851;
export const OID_FDDI_PATH_SBA_PAYLOAD = 50528852;
export const OID_FDDI_PATH_SBA_OVERHEAD = 50528853;
export const OID_FDDI_PATH_CONFIGURATION = 50528854;
export const OID_FDDI_PATH_T_R_MODE = 50528855;
export const OID_FDDI_PATH_SBA_AVAILABLE = 50528856;
export const OID_FDDI_PATH_TVX_LOWER_BOUND = 50528857;
export const OID_FDDI_PATH_T_MAX_LOWER_BOUND = 50528858;
export const OID_FDDI_PATH_MAX_T_REQ = 50528859;
export const OID_FDDI_PORT_MY_TYPE = 50528860;
export const OID_FDDI_PORT_NEIGHBOR_TYPE = 50528861;
export const OID_FDDI_PORT_CONNECTION_POLICIES = 50528862;
export const OID_FDDI_PORT_MAC_INDICATED = 50528863;
export const OID_FDDI_PORT_CURRENT_PATH = 50528864;
export const OID_FDDI_PORT_REQUESTED_PATHS = 50528865;
export const OID_FDDI_PORT_MAC_PLACEMENT = 50528866;
export const OID_FDDI_PORT_AVAILABLE_PATHS = 50528867;
export const OID_FDDI_PORT_MAC_LOOP_TIME = 50528868;
export const OID_FDDI_PORT_PMD_CLASS = 50528869;
export const OID_FDDI_PORT_CONNECTION_CAPABILITIES = 50528870;
export const OID_FDDI_PORT_INDEX = 50528871;
export const OID_FDDI_PORT_MAINT_LS = 50528872;
export const OID_FDDI_PORT_BS_FLAG = 50528873;
export const OID_FDDI_PORT_PC_LS = 50528874;
export const OID_FDDI_PORT_EB_ERROR_CT = 50528875;
export const OID_FDDI_PORT_LCT_FAIL_CT = 50528876;
export const OID_FDDI_PORT_LER_ESTIMATE = 50528877;
export const OID_FDDI_PORT_LEM_REJECT_CT = 50528878;
export const OID_FDDI_PORT_LEM_CT = 50528879;
export const OID_FDDI_PORT_LER_CUTOFF = 50528880;
export const OID_FDDI_PORT_LER_ALARM = 50528881;
export const OID_FDDI_PORT_CONNNECT_STATE = 50528882;
export const OID_FDDI_PORT_PCM_STATE = 50528883;
export const OID_FDDI_PORT_PC_WITHHOLD = 50528884;
export const OID_FDDI_PORT_LER_FLAG = 50528885;
export const OID_FDDI_PORT_HARDWARE_PRESENT = 50528886;
export const OID_FDDI_SMT_STATION_ACTION = 50528887;
export const OID_FDDI_PORT_ACTION = 50528888;
export const OID_FDDI_IF_DESCR = 50528889;
export const OID_FDDI_IF_TYPE = 50528890;
export const OID_FDDI_IF_MTU = 50528891;
export const OID_FDDI_IF_SPEED = 50528892;
export const OID_FDDI_IF_PHYS_ADDRESS = 50528893;
export const OID_FDDI_IF_ADMIN_STATUS = 50528894;
export const OID_FDDI_IF_OPER_STATUS = 50528895;
export const OID_FDDI_IF_LAST_CHANGE = 50528896;
export const OID_FDDI_IF_IN_OCTETS = 50528897;
export const OID_FDDI_IF_IN_UCAST_PKTS = 50528898;
export const OID_FDDI_IF_IN_NUCAST_PKTS = 50528899;
export const OID_FDDI_IF_IN_DISCARDS = 50528900;
export const OID_FDDI_IF_IN_ERRORS = 50528901;
export const OID_FDDI_IF_IN_UNKNOWN_PROTOS = 50528902;
export const OID_FDDI_IF_OUT_OCTETS = 50528903;
export const OID_FDDI_IF_OUT_UCAST_PKTS = 50528904;
export const OID_FDDI_IF_OUT_NUCAST_PKTS = 50528905;
export const OID_FDDI_IF_OUT_DISCARDS = 50528906;
export const OID_FDDI_IF_OUT_ERRORS = 50528907;
export const OID_FDDI_IF_OUT_QLEN = 50528908;
export const OID_FDDI_IF_SPECIFIC = 50528909;
export const OID_WAN_PERMANENT_ADDRESS = 67174657;
export const OID_WAN_CURRENT_ADDRESS = 67174658;
export const OID_WAN_QUALITY_OF_SERVICE = 67174659;
export const OID_WAN_PROTOCOL_TYPE = 67174660;
export const OID_WAN_MEDIUM_SUBTYPE = 67174661;
export const OID_WAN_HEADER_FORMAT = 67174662;
export const OID_WAN_GET_INFO = 67174663;
export const OID_WAN_SET_LINK_INFO = 67174664;
export const OID_WAN_GET_LINK_INFO = 67174665;
export const OID_WAN_LINE_COUNT = 67174666;
export const OID_WAN_PROTOCOL_CAPS = 67174667;
export const OID_WAN_GET_BRIDGE_INFO = 67174922;
export const OID_WAN_SET_BRIDGE_INFO = 67174923;
export const OID_WAN_GET_COMP_INFO = 67174924;
export const OID_WAN_SET_COMP_INFO = 67174925;
export const OID_WAN_GET_STATS_INFO = 67174926;
export const OID_WAN_CO_GET_INFO = 67174784;
export const OID_WAN_CO_SET_LINK_INFO = 67174785;
export const OID_WAN_CO_GET_LINK_INFO = 67174786;
export const OID_WAN_CO_GET_COMP_INFO = 67175040;
export const OID_WAN_CO_SET_COMP_INFO = 67175041;
export const OID_WAN_CO_GET_STATS_INFO = 67175042;
export const OID_LTALK_CURRENT_NODE_ID = 83951874;
export const OID_LTALK_IN_BROADCASTS = 84017409;
export const OID_LTALK_IN_LENGTH_ERRORS = 84017410;
export const OID_LTALK_OUT_NO_HANDLERS = 84017665;
export const OID_LTALK_COLLISIONS = 84017666;
export const OID_LTALK_DEFERS = 84017667;
export const OID_LTALK_NO_DATA_ERRORS = 84017668;
export const OID_LTALK_RANDOM_CTS_ERRORS = 84017669;
export const OID_LTALK_FCS_ERRORS = 84017670;
export const OID_ARCNET_PERMANENT_ADDRESS = 100729089;
export const OID_ARCNET_CURRENT_ADDRESS = 100729090;
export const OID_ARCNET_RECONFIGURATIONS = 100794881;
export const OID_TAPI_ACCEPT = 117637377;
export const OID_TAPI_ANSWER = 117637378;
export const OID_TAPI_CLOSE = 117637379;
export const OID_TAPI_CLOSE_CALL = 117637380;
export const OID_TAPI_CONDITIONAL_MEDIA_DETECTION = 117637381;
export const OID_TAPI_CONFIG_DIALOG = 117637382;
export const OID_TAPI_DEV_SPECIFIC = 117637383;
export const OID_TAPI_DIAL = 117637384;
export const OID_TAPI_DROP = 117637385;
export const OID_TAPI_GET_ADDRESS_CAPS = 117637386;
export const OID_TAPI_GET_ADDRESS_ID = 117637387;
export const OID_TAPI_GET_ADDRESS_STATUS = 117637388;
export const OID_TAPI_GET_CALL_ADDRESS_ID = 117637389;
export const OID_TAPI_GET_CALL_INFO = 117637390;
export const OID_TAPI_GET_CALL_STATUS = 117637391;
export const OID_TAPI_GET_DEV_CAPS = 117637392;
export const OID_TAPI_GET_DEV_CONFIG = 117637393;
export const OID_TAPI_GET_EXTENSION_ID = 117637394;
export const OID_TAPI_GET_ID = 117637395;
export const OID_TAPI_GET_LINE_DEV_STATUS = 117637396;
export const OID_TAPI_MAKE_CALL = 117637397;
export const OID_TAPI_NEGOTIATE_EXT_VERSION = 117637398;
export const OID_TAPI_OPEN = 117637399;
export const OID_TAPI_PROVIDER_INITIALIZE = 117637400;
export const OID_TAPI_PROVIDER_SHUTDOWN = 117637401;
export const OID_TAPI_SECURE_CALL = 117637402;
export const OID_TAPI_SELECT_EXT_VERSION = 117637403;
export const OID_TAPI_SEND_USER_USER_INFO = 117637404;
export const OID_TAPI_SET_APP_SPECIFIC = 117637405;
export const OID_TAPI_SET_CALL_PARAMS = 117637406;
export const OID_TAPI_SET_DEFAULT_MEDIA_DETECTION = 117637407;
export const OID_TAPI_SET_DEV_CONFIG = 117637408;
export const OID_TAPI_SET_MEDIA_MODE = 117637409;
export const OID_TAPI_SET_STATUS_MESSAGES = 117637410;
export const OID_TAPI_GATHER_DIGITS = 117637411;
export const OID_TAPI_MONITOR_DIGITS = 117637412;
export const OID_ATM_SUPPORTED_VC_RATES = 134283521;
export const OID_ATM_SUPPORTED_SERVICE_CATEGORY = 134283522;
export const OID_ATM_SUPPORTED_AAL_TYPES = 134283523;
export const OID_ATM_HW_CURRENT_ADDRESS = 134283524;
export const OID_ATM_MAX_ACTIVE_VCS = 134283525;
export const OID_ATM_MAX_ACTIVE_VCI_BITS = 134283526;
export const OID_ATM_MAX_ACTIVE_VPI_BITS = 134283527;
export const OID_ATM_MAX_AAL0_PACKET_SIZE = 134283528;
export const OID_ATM_MAX_AAL1_PACKET_SIZE = 134283529;
export const OID_ATM_MAX_AAL34_PACKET_SIZE = 134283530;
export const OID_ATM_MAX_AAL5_PACKET_SIZE = 134283531;
export const OID_ATM_SIGNALING_VPIVCI = 134283777;
export const OID_ATM_ASSIGNED_VPI = 134283778;
export const OID_ATM_ACQUIRE_ACCESS_NET_RESOURCES = 134283779;
export const OID_ATM_RELEASE_ACCESS_NET_RESOURCES = 134283780;
export const OID_ATM_ILMI_VPIVCI = 134283781;
export const OID_ATM_DIGITAL_BROADCAST_VPIVCI = 134283782;
export const OID_ATM_GET_NEAREST_FLOW = 134283783;
export const OID_ATM_ALIGNMENT_REQUIRED = 134283784;
export const OID_ATM_LECS_ADDRESS = 134283785;
export const OID_ATM_SERVICE_ADDRESS = 134283786;
export const OID_ATM_CALL_PROCEEDING = 134283787;
export const OID_ATM_CALL_ALERTING = 134283788;
export const OID_ATM_PARTY_ALERTING = 134283789;
export const OID_ATM_CALL_NOTIFY = 134283790;
export const OID_ATM_MY_IP_NM_ADDRESS = 134283791;
export const OID_ATM_RCV_CELLS_OK = 134349057;
export const OID_ATM_XMIT_CELLS_OK = 134349058;
export const OID_ATM_RCV_CELLS_DROPPED = 134349059;
export const OID_ATM_RCV_INVALID_VPI_VCI = 134349313;
export const OID_ATM_CELLS_HEC_ERROR = 134349314;
export const OID_ATM_RCV_REASSEMBLY_ERROR = 134349315;
export const OID_802_11_BSSID = 218169601;
export const OID_802_11_SSID = 218169602;
export const OID_802_11_NETWORK_TYPES_SUPPORTED = 218169859;
export const OID_802_11_NETWORK_TYPE_IN_USE = 218169860;
export const OID_802_11_TX_POWER_LEVEL = 218169861;
export const OID_802_11_RSSI = 218169862;
export const OID_802_11_RSSI_TRIGGER = 218169863;
export const OID_802_11_INFRASTRUCTURE_MODE = 218169608;
export const OID_802_11_FRAGMENTATION_THRESHOLD = 218169865;
export const OID_802_11_RTS_THRESHOLD = 218169866;
export const OID_802_11_NUMBER_OF_ANTENNAS = 218169867;
export const OID_802_11_RX_ANTENNA_SELECTED = 218169868;
export const OID_802_11_TX_ANTENNA_SELECTED = 218169869;
export const OID_802_11_SUPPORTED_RATES = 218169870;
export const OID_802_11_DESIRED_RATES = 218169872;
export const OID_802_11_CONFIGURATION = 218169873;
export const OID_802_11_STATISTICS = 218235410;
export const OID_802_11_ADD_WEP = 218169619;
export const OID_802_11_REMOVE_WEP = 218169620;
export const OID_802_11_DISASSOCIATE = 218169621;
export const OID_802_11_POWER_MODE = 218169878;
export const OID_802_11_BSSID_LIST = 218169879;
export const OID_802_11_AUTHENTICATION_MODE = 218169624;
export const OID_802_11_PRIVACY_FILTER = 218169625;
export const OID_802_11_BSSID_LIST_SCAN = 218169626;
export const OID_802_11_WEP_STATUS = 218169627;
export const OID_802_11_ENCRYPTION_STATUS = 218169627;
export const OID_802_11_RELOAD_DEFAULTS = 218169628;
export const OID_802_11_ADD_KEY = 218169629;
export const OID_802_11_REMOVE_KEY = 218169630;
export const OID_802_11_ASSOCIATION_INFORMATION = 218169631;
export const OID_802_11_TEST = 218169632;
export const OID_802_11_MEDIA_STREAM_MODE = 218169633;
export const OID_802_11_CAPABILITY = 218169634;
export const OID_802_11_PMKID = 218169635;
export const OID_802_11_NON_BCAST_SSID_LIST = 218169636;
export const OID_802_11_RADIO_STATUS = 218169637;
export const NDIS_ETH_TYPE_IPV4 = 2048;
export const NDIS_ETH_TYPE_ARP = 2054;
export const NDIS_ETH_TYPE_IPV6 = 34525;
export const NDIS_ETH_TYPE_802_1X = 34958;
export const NDIS_ETH_TYPE_802_1Q = 33024;
export const NDIS_ETH_TYPE_SLOW_PROTOCOL = 34825;
export const NDIS_802_11_LENGTH_SSID = 32;
export const NDIS_802_11_LENGTH_RATES = 8;
export const NDIS_802_11_LENGTH_RATES_EX = 16;
export const NDIS_802_11_AUTH_REQUEST_AUTH_FIELDS = 15;
export const NDIS_802_11_AUTH_REQUEST_REAUTH = 1;
export const NDIS_802_11_AUTH_REQUEST_KEYUPDATE = 2;
export const NDIS_802_11_AUTH_REQUEST_PAIRWISE_ERROR = 6;
export const NDIS_802_11_AUTH_REQUEST_GROUP_ERROR = 14;
export const NDIS_802_11_PMKID_CANDIDATE_PREAUTH_ENABLED = 1;
export const NDIS_802_11_AI_REQFI_CAPABILITIES = 1;
export const NDIS_802_11_AI_REQFI_LISTENINTERVAL = 2;
export const NDIS_802_11_AI_REQFI_CURRENTAPADDRESS = 4;
export const NDIS_802_11_AI_RESFI_CAPABILITIES = 1;
export const NDIS_802_11_AI_RESFI_STATUSCODE = 2;
export const NDIS_802_11_AI_RESFI_ASSOCIATIONID = 4;
export const OID_IRDA_RECEIVING = 167837952;
export const OID_IRDA_TURNAROUND_TIME = 167837953;
export const OID_IRDA_SUPPORTED_SPEEDS = 167837954;
export const OID_IRDA_LINK_SPEED = 167837955;
export const OID_IRDA_MEDIA_BUSY = 167837956;
export const OID_IRDA_EXTRA_RCV_BOFS = 167838208;
export const OID_IRDA_RATE_SNIFF = 167838209;
export const OID_IRDA_UNICAST_LIST = 167838210;
export const OID_IRDA_MAX_UNICAST_LIST_SIZE = 167838211;
export const OID_IRDA_MAX_RECEIVE_WINDOW_SIZE = 167838212;
export const OID_IRDA_MAX_SEND_WINDOW_SIZE = 167838213;
export const OID_IRDA_RESERVED1 = 167838218;
export const OID_IRDA_RESERVED2 = 167838223;
export const OID_1394_LOCAL_NODE_INFO = 201392385;
export const OID_1394_VC_INFO = 201392386;
export const OID_CO_ADD_PVC = 4261412865;
export const OID_CO_DELETE_PVC = 4261412866;
export const OID_CO_GET_CALL_INFORMATION = 4261412867;
export const OID_CO_ADD_ADDRESS = 4261412868;
export const OID_CO_DELETE_ADDRESS = 4261412869;
export const OID_CO_GET_ADDRESSES = 4261412870;
export const OID_CO_ADDRESS_CHANGE = 4261412871;
export const OID_CO_SIGNALING_ENABLED = 4261412872;
export const OID_CO_SIGNALING_DISABLED = 4261412873;
export const OID_CO_AF_CLOSE = 4261412874;
export const OID_CO_TAPI_CM_CAPS = 4261416961;
export const OID_CO_TAPI_LINE_CAPS = 4261416962;
export const OID_CO_TAPI_ADDRESS_CAPS = 4261416963;
export const OID_CO_TAPI_TRANSLATE_TAPI_CALLPARAMS = 4261416964;
export const OID_CO_TAPI_TRANSLATE_NDIS_CALLPARAMS = 4261416965;
export const OID_CO_TAPI_TRANSLATE_TAPI_SAP = 4261416966;
export const OID_CO_TAPI_GET_CALL_DIAGNOSTICS = 4261416967;
export const OID_CO_TAPI_REPORT_DIGITS = 4261416968;
export const OID_CO_TAPI_DONT_REPORT_DIGITS = 4261416969;
export const OID_PNP_CAPABILITIES = 4244701440;
export const OID_PNP_SET_POWER = 4244701441;
export const OID_PNP_QUERY_POWER = 4244701442;
export const OID_PNP_ADD_WAKE_UP_PATTERN = 4244701443;
export const OID_PNP_REMOVE_WAKE_UP_PATTERN = 4244701444;
export const OID_PNP_WAKE_UP_PATTERN_LIST = 4244701445;
export const OID_PNP_ENABLE_WAKE_UP = 4244701446;
export const OID_PNP_WAKE_UP_OK = 4244767232;
export const OID_PNP_WAKE_UP_ERROR = 4244767233;
export const OID_PM_CURRENT_CAPABILITIES = 4244701447;
export const OID_PM_HARDWARE_CAPABILITIES = 4244701448;
export const OID_PM_PARAMETERS = 4244701449;
export const OID_PM_ADD_WOL_PATTERN = 4244701450;
export const OID_PM_REMOVE_WOL_PATTERN = 4244701451;
export const OID_PM_WOL_PATTERN_LIST = 4244701452;
export const OID_PM_ADD_PROTOCOL_OFFLOAD = 4244701453;
export const OID_PM_GET_PROTOCOL_OFFLOAD = 4244701454;
export const OID_PM_REMOVE_PROTOCOL_OFFLOAD = 4244701455;
export const OID_PM_PROTOCOL_OFFLOAD_LIST = 4244701456;
export const OID_PM_RESERVED_1 = 4244701457;
export const OID_RECEIVE_FILTER_HARDWARE_CAPABILITIES = 66081;
export const OID_RECEIVE_FILTER_GLOBAL_PARAMETERS = 66082;
export const OID_RECEIVE_FILTER_ALLOCATE_QUEUE = 66083;
export const OID_RECEIVE_FILTER_FREE_QUEUE = 66084;
export const OID_RECEIVE_FILTER_ENUM_QUEUES = 66085;
export const OID_RECEIVE_FILTER_QUEUE_PARAMETERS = 66086;
export const OID_RECEIVE_FILTER_SET_FILTER = 66087;
export const OID_RECEIVE_FILTER_CLEAR_FILTER = 66088;
export const OID_RECEIVE_FILTER_ENUM_FILTERS = 66089;
export const OID_RECEIVE_FILTER_PARAMETERS = 66090;
export const OID_RECEIVE_FILTER_QUEUE_ALLOCATION_COMPLETE = 66091;
export const OID_RECEIVE_FILTER_CURRENT_CAPABILITIES = 66093;
export const OID_NIC_SWITCH_HARDWARE_CAPABILITIES = 66094;
export const OID_NIC_SWITCH_CURRENT_CAPABILITIES = 66095;
export const OID_RECEIVE_FILTER_MOVE_FILTER = 66096;
export const OID_VLAN_RESERVED1 = 66097;
export const OID_VLAN_RESERVED2 = 66098;
export const OID_VLAN_RESERVED3 = 66099;
export const OID_VLAN_RESERVED4 = 66100;
export const OID_PACKET_COALESCING_FILTER_MATCH_COUNT = 66101;
export const OID_NIC_SWITCH_CREATE_SWITCH = 66103;
export const OID_NIC_SWITCH_PARAMETERS = 66104;
export const OID_NIC_SWITCH_DELETE_SWITCH = 66105;
export const OID_NIC_SWITCH_ENUM_SWITCHES = 66112;
export const OID_NIC_SWITCH_CREATE_VPORT = 66113;
export const OID_NIC_SWITCH_VPORT_PARAMETERS = 66114;
export const OID_NIC_SWITCH_ENUM_VPORTS = 66115;
export const OID_NIC_SWITCH_DELETE_VPORT = 66116;
export const OID_NIC_SWITCH_ALLOCATE_VF = 66117;
export const OID_NIC_SWITCH_FREE_VF = 66118;
export const OID_NIC_SWITCH_VF_PARAMETERS = 66119;
export const OID_NIC_SWITCH_ENUM_VFS = 66120;
export const OID_SRIOV_HARDWARE_CAPABILITIES = 66121;
export const OID_SRIOV_CURRENT_CAPABILITIES = 66128;
export const OID_SRIOV_READ_VF_CONFIG_SPACE = 66129;
export const OID_SRIOV_WRITE_VF_CONFIG_SPACE = 66130;
export const OID_SRIOV_READ_VF_CONFIG_BLOCK = 66131;
export const OID_SRIOV_WRITE_VF_CONFIG_BLOCK = 66132;
export const OID_SRIOV_RESET_VF = 66133;
export const OID_SRIOV_SET_VF_POWER_STATE = 66134;
export const OID_SRIOV_VF_VENDOR_DEVICE_ID = 66135;
export const OID_SRIOV_PROBED_BARS = 66136;
export const OID_SRIOV_BAR_RESOURCES = 66137;
export const OID_SRIOV_PF_LUID = 66144;
export const OID_SRIOV_CONFIG_STATE = 66145;
export const OID_SRIOV_VF_SERIAL_NUMBER = 66146;
export const OID_SRIOV_OVERLYING_ADAPTER_INFO = 66152;
export const OID_SRIOV_VF_INVALIDATE_CONFIG_BLOCK = 66153;
export const OID_SWITCH_PROPERTY_ADD = 66147;
export const OID_SWITCH_PROPERTY_UPDATE = 66148;
export const OID_SWITCH_PROPERTY_DELETE = 66149;
export const OID_SWITCH_PROPERTY_ENUM = 66150;
export const OID_SWITCH_FEATURE_STATUS_QUERY = 66151;
export const OID_SWITCH_NIC_REQUEST = 66160;
export const OID_SWITCH_PORT_PROPERTY_ADD = 66161;
export const OID_SWITCH_PORT_PROPERTY_UPDATE = 66162;
export const OID_SWITCH_PORT_PROPERTY_DELETE = 66163;
export const OID_SWITCH_PORT_PROPERTY_ENUM = 66164;
export const OID_SWITCH_PARAMETERS = 66165;
export const OID_SWITCH_PORT_ARRAY = 66166;
export const OID_SWITCH_NIC_ARRAY = 66167;
export const OID_SWITCH_PORT_CREATE = 66168;
export const OID_SWITCH_PORT_DELETE = 66169;
export const OID_SWITCH_NIC_CREATE = 66170;
export const OID_SWITCH_NIC_CONNECT = 66171;
export const OID_SWITCH_NIC_DISCONNECT = 66172;
export const OID_SWITCH_NIC_DELETE = 66173;
export const OID_SWITCH_PORT_FEATURE_STATUS_QUERY = 66174;
export const OID_SWITCH_PORT_TEARDOWN = 66175;
export const OID_SWITCH_NIC_SAVE = 66192;
export const OID_SWITCH_NIC_SAVE_COMPLETE = 66193;
export const OID_SWITCH_NIC_RESTORE = 66194;
export const OID_SWITCH_NIC_RESTORE_COMPLETE = 66195;
export const OID_SWITCH_NIC_UPDATED = 66196;
export const OID_SWITCH_PORT_UPDATED = 66197;
export const OID_SWITCH_NIC_DIRECT_REQUEST = 66198;
export const OID_SWITCH_NIC_SUSPEND = 66199;
export const OID_SWITCH_NIC_RESUME = 66200;
export const OID_SWITCH_NIC_SUSPENDED_LM_SOURCE_STARTED = 66201;
export const OID_SWITCH_NIC_SUSPENDED_LM_SOURCE_FINISHED = 66202;
export const OID_GEN_RSS_SET_INDIRECTION_TABLE_ENTRIES = 66240;
export const OID_GEN_ISOLATION_PARAMETERS = 66304;
export const OID_GFT_HARDWARE_CAPABILITIES = 66561;
export const OID_GFT_CURRENT_CAPABILITIES = 66562;
export const OID_GFT_GLOBAL_PARAMETERS = 66563;
export const OID_GFT_CREATE_TABLE = 66564;
export const OID_GFT_DELETE_TABLE = 66565;
export const OID_GFT_ENUM_TABLES = 66566;
export const OID_GFT_ALLOCATE_COUNTERS = 66567;
export const OID_GFT_FREE_COUNTERS = 66568;
export const OID_GFT_ENUM_COUNTERS = 66569;
export const OID_GFT_COUNTER_VALUES = 66570;
export const OID_GFT_STATISTICS = 66571;
export const OID_GFT_ADD_FLOW_ENTRIES = 66572;
export const OID_GFT_DELETE_FLOW_ENTRIES = 66573;
export const OID_GFT_ENUM_FLOW_ENTRIES = 66574;
export const OID_GFT_ACTIVATE_FLOW_ENTRIES = 66575;
export const OID_GFT_DEACTIVATE_FLOW_ENTRIES = 66576;
export const OID_GFT_FLOW_ENTRY_PARAMETERS = 66577;
export const OID_GFT_EXACT_MATCH_PROFILE = 66578;
export const OID_GFT_HEADER_TRANSPOSITION_PROFILE = 66579;
export const OID_GFT_WILDCARD_MATCH_PROFILE = 66580;
export const OID_GFT_ENUM_PROFILES = 66581;
export const OID_GFT_DELETE_PROFILE = 66582;
export const OID_GFT_VPORT_PARAMETERS = 66583;
export const OID_GFT_CREATE_LOGICAL_VPORT = 66584;
export const OID_GFT_DELETE_LOGICAL_VPORT = 66585;
export const OID_GFT_ENUM_LOGICAL_VPORTS = 66586;
export const OID_QOS_OFFLOAD_HARDWARE_CAPABILITIES = 67073;
export const OID_QOS_OFFLOAD_CURRENT_CAPABILITIES = 67074;
export const OID_QOS_OFFLOAD_CREATE_SQ = 67075;
export const OID_QOS_OFFLOAD_DELETE_SQ = 67076;
export const OID_QOS_OFFLOAD_UPDATE_SQ = 67077;
export const OID_QOS_OFFLOAD_ENUM_SQS = 67078;
export const OID_QOS_OFFLOAD_SQ_STATS = 67079;
export const OID_PD_OPEN_PROVIDER = 66817;
export const OID_PD_CLOSE_PROVIDER = 66818;
export const OID_PD_QUERY_CURRENT_CONFIG = 66819;
export const NDIS_PNP_WAKE_UP_MAGIC_PACKET = 1;
export const NDIS_PNP_WAKE_UP_PATTERN_MATCH = 2;
export const NDIS_PNP_WAKE_UP_LINK_CHANGE = 4;
export const OID_TCP_TASK_OFFLOAD = 4227924481;
export const OID_TCP_TASK_IPSEC_ADD_SA = 4227924482;
export const OID_TCP_TASK_IPSEC_DELETE_SA = 4227924483;
export const OID_TCP_SAN_SUPPORT = 4227924484;
export const OID_TCP_TASK_IPSEC_ADD_UDPESP_SA = 4227924485;
export const OID_TCP_TASK_IPSEC_DELETE_UDPESP_SA = 4227924486;
export const OID_TCP4_OFFLOAD_STATS = 4227924487;
export const OID_TCP6_OFFLOAD_STATS = 4227924488;
export const OID_IP4_OFFLOAD_STATS = 4227924489;
export const OID_IP6_OFFLOAD_STATS = 4227924490;
export const OID_TCP_OFFLOAD_CURRENT_CONFIG = 4227924491;
export const OID_TCP_OFFLOAD_PARAMETERS = 4227924492;
export const OID_TCP_OFFLOAD_HARDWARE_CAPABILITIES = 4227924493;
export const OID_TCP_CONNECTION_OFFLOAD_CURRENT_CONFIG = 4227924494;
export const OID_TCP_CONNECTION_OFFLOAD_HARDWARE_CAPABILITIES = 4227924495;
export const OID_OFFLOAD_ENCAPSULATION = 16843018;
export const OID_TCP_TASK_IPSEC_OFFLOAD_V2_ADD_SA = 4228055554;
export const OID_TCP_TASK_IPSEC_OFFLOAD_V2_DELETE_SA = 4228055555;
export const OID_TCP_TASK_IPSEC_OFFLOAD_V2_UPDATE_SA = 4228055556;
export const OID_TCP_TASK_IPSEC_OFFLOAD_V2_ADD_SA_EX = 4228055557;
export const OID_FFP_SUPPORT = 4227924496;
export const OID_FFP_FLUSH = 4227924497;
export const OID_FFP_CONTROL = 4227924498;
export const OID_FFP_PARAMS = 4227924499;
export const OID_FFP_DATA = 4227924500;
export const OID_FFP_DRIVER_STATS = 4227990032;
export const OID_FFP_ADAPTER_STATS = 4227990033;
export const OID_TCP_CONNECTION_OFFLOAD_PARAMETERS = 4228055553;
export const OID_TUNNEL_INTERFACE_SET_OID = 251724038;
export const OID_TUNNEL_INTERFACE_RELEASE_OID = 251724039;
export const OID_QOS_RESERVED1 = 4211147008;
export const OID_QOS_RESERVED2 = 4211147009;
export const OID_QOS_RESERVED3 = 4211147010;
export const OID_QOS_RESERVED4 = 4211147011;
export const OID_QOS_RESERVED5 = 4211147012;
export const OID_QOS_RESERVED6 = 4211147013;
export const OID_QOS_RESERVED7 = 4211147014;
export const OID_QOS_RESERVED8 = 4211147015;
export const OID_QOS_RESERVED9 = 4211147016;
export const OID_QOS_RESERVED10 = 4211147017;
export const OID_QOS_RESERVED11 = 4211147018;
export const OID_QOS_RESERVED12 = 4211147019;
export const OID_QOS_RESERVED13 = 4211147020;
export const OID_QOS_RESERVED14 = 4211147021;
export const OID_QOS_RESERVED15 = 4211147022;
export const OID_QOS_RESERVED16 = 4211147023;
export const OID_QOS_RESERVED17 = 4211147024;
export const OID_QOS_RESERVED18 = 4211147025;
export const OID_QOS_RESERVED19 = 4211147026;
export const OID_QOS_RESERVED20 = 4211147027;
export const OID_XBOX_ACC_RESERVED0 = 4194304000;
export const OFFLOAD_MAX_SAS = 3;
export const OFFLOAD_INBOUND_SA = 1;
export const OFFLOAD_OUTBOUND_SA = 2;
export const NDIS_PROTOCOL_ID_DEFAULT = 0;
export const NDIS_PROTOCOL_ID_TCP_IP = 2;
export const NDIS_PROTOCOL_ID_IP6 = 3;
export const NDIS_PROTOCOL_ID_IPX = 6;
export const NDIS_PROTOCOL_ID_NBF = 7;
export const NDIS_PROTOCOL_ID_MAX = 15;
export const NDIS_PROTOCOL_ID_MASK = 15;
export const READABLE_LOCAL_CLOCK = 1;
export const CLOCK_NETWORK_DERIVED = 2;
export const CLOCK_PRECISION = 4;
export const RECEIVE_TIME_INDICATION_CAPABLE = 8;
export const TIMED_SEND_CAPABLE = 16;
export const TIME_STAMP_CAPABLE = 32;
export const NDIS_DEVICE_WAKE_UP_ENABLE = 1;
export const NDIS_DEVICE_WAKE_ON_PATTERN_MATCH_ENABLE = 2;
export const NDIS_DEVICE_WAKE_ON_MAGIC_PACKET_ENABLE = 4;
export const WAN_PROTOCOL_KEEPS_STATS = 1;
export const fNDIS_GUID_TO_OID = 1;
export const fNDIS_GUID_TO_STATUS = 2;
export const fNDIS_GUID_ANSI_STRING = 4;
export const fNDIS_GUID_UNICODE_STRING = 8;
export const fNDIS_GUID_ARRAY = 16;
export const fNDIS_GUID_ALLOW_READ = 32;
export const fNDIS_GUID_ALLOW_WRITE = 64;
export const fNDIS_GUID_METHOD = 128;
export const fNDIS_GUID_NDIS_RESERVED = 256;
export const fNDIS_GUID_SUPPORT_COMMON_HEADER = 512;
export const NDIS_PACKET_TYPE_DIRECTED = 1;
export const NDIS_PACKET_TYPE_MULTICAST = 2;
export const NDIS_PACKET_TYPE_ALL_MULTICAST = 4;
export const NDIS_PACKET_TYPE_BROADCAST = 8;
export const NDIS_PACKET_TYPE_SOURCE_ROUTING = 16;
export const NDIS_PACKET_TYPE_PROMISCUOUS = 32;
export const NDIS_PACKET_TYPE_SMT = 64;
export const NDIS_PACKET_TYPE_ALL_LOCAL = 128;
export const NDIS_PACKET_TYPE_GROUP = 4096;
export const NDIS_PACKET_TYPE_ALL_FUNCTIONAL = 8192;
export const NDIS_PACKET_TYPE_FUNCTIONAL = 16384;
export const NDIS_PACKET_TYPE_MAC_FRAME = 32768;
export const NDIS_PACKET_TYPE_NO_LOCAL = 65536;
export const NDIS_RING_SIGNAL_LOSS = 32768;
export const NDIS_RING_HARD_ERROR = 16384;
export const NDIS_RING_SOFT_ERROR = 8192;
export const NDIS_RING_TRANSMIT_BEACON = 4096;
export const NDIS_RING_LOBE_WIRE_FAULT = 2048;
export const NDIS_RING_AUTO_REMOVAL_ERROR = 1024;
export const NDIS_RING_REMOVE_RECEIVED = 512;
export const NDIS_RING_COUNTER_OVERFLOW = 256;
export const NDIS_RING_SINGLE_STATION = 128;
export const NDIS_RING_RING_RECOVERY = 64;
export const NDIS_PROT_OPTION_ESTIMATED_LENGTH = 1;
export const NDIS_PROT_OPTION_NO_LOOPBACK = 2;
export const NDIS_PROT_OPTION_NO_RSVD_ON_RCVPKT = 4;
export const NDIS_PROT_OPTION_SEND_RESTRICTED = 8;
export const NDIS_MAC_OPTION_COPY_LOOKAHEAD_DATA = 1;
export const NDIS_MAC_OPTION_RECEIVE_SERIALIZED = 2;
export const NDIS_MAC_OPTION_TRANSFERS_NOT_PEND = 4;
export const NDIS_MAC_OPTION_NO_LOOPBACK = 8;
export const NDIS_MAC_OPTION_FULL_DUPLEX = 16;
export const NDIS_MAC_OPTION_EOTX_INDICATION = 32;
export const NDIS_MAC_OPTION_8021P_PRIORITY = 64;
export const NDIS_MAC_OPTION_SUPPORTS_MAC_ADDRESS_OVERWRITE = 128;
export const NDIS_MAC_OPTION_RECEIVE_AT_DPC = 256;
export const NDIS_MAC_OPTION_8021Q_VLAN = 512;
export const NDIS_MAC_OPTION_RESERVED = 2147483648;
export const NDIS_MEDIA_CAP_TRANSMIT = 1;
export const NDIS_MEDIA_CAP_RECEIVE = 2;
export const NDIS_CO_MAC_OPTION_DYNAMIC_LINK_SPEED = 1;
export const NDIS_LINK_STATE_XMIT_LINK_SPEED_AUTO_NEGOTIATED = 1;
export const NDIS_LINK_STATE_RCV_LINK_SPEED_AUTO_NEGOTIATED = 2;
export const NDIS_LINK_STATE_DUPLEX_AUTO_NEGOTIATED = 4;
export const NDIS_LINK_STATE_PAUSE_FUNCTIONS_AUTO_NEGOTIATED = 8;
export const NDIS_LINK_STATE_REVISION_1 = 1;
export const NDIS_LINK_PARAMETERS_REVISION_1 = 1;
export const NDIS_OPER_STATE_REVISION_1 = 1;
export const MAXIMUM_IP_OPER_STATUS_ADDRESS_FAMILIES_SUPPORTED = 32;
export const NDIS_IP_OPER_STATUS_INFO_REVISION_1 = 1;
export const NDIS_IP_OPER_STATE_REVISION_1 = 1;
export const NDIS_OFFLOAD_PARAMETERS_NO_CHANGE = 0;
export const NDIS_OFFLOAD_PARAMETERS_TX_RX_DISABLED = 1;
export const NDIS_OFFLOAD_PARAMETERS_TX_ENABLED_RX_DISABLED = 2;
export const NDIS_OFFLOAD_PARAMETERS_RX_ENABLED_TX_DISABLED = 3;
export const NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED = 4;
export const NDIS_OFFLOAD_PARAMETERS_LSOV1_DISABLED = 1;
export const NDIS_OFFLOAD_PARAMETERS_LSOV1_ENABLED = 2;
export const NDIS_OFFLOAD_PARAMETERS_IPSECV1_DISABLED = 1;
export const NDIS_OFFLOAD_PARAMETERS_IPSECV1_AH_ENABLED = 2;
export const NDIS_OFFLOAD_PARAMETERS_IPSECV1_ESP_ENABLED = 3;
export const NDIS_OFFLOAD_PARAMETERS_IPSECV1_AH_AND_ESP_ENABLED = 4;
export const NDIS_OFFLOAD_PARAMETERS_LSOV2_DISABLED = 1;
export const NDIS_OFFLOAD_PARAMETERS_LSOV2_ENABLED = 2;
export const NDIS_OFFLOAD_PARAMETERS_IPSECV2_DISABLED = 1;
export const NDIS_OFFLOAD_PARAMETERS_IPSECV2_AH_ENABLED = 2;
export const NDIS_OFFLOAD_PARAMETERS_IPSECV2_ESP_ENABLED = 3;
export const NDIS_OFFLOAD_PARAMETERS_IPSECV2_AH_AND_ESP_ENABLED = 4;
export const NDIS_OFFLOAD_PARAMETERS_RSC_DISABLED = 1;
export const NDIS_OFFLOAD_PARAMETERS_RSC_ENABLED = 2;
export const NDIS_ENCAPSULATION_TYPE_GRE_MAC = 1;
export const NDIS_ENCAPSULATION_TYPE_VXLAN = 2;
export const NDIS_OFFLOAD_PARAMETERS_CONNECTION_OFFLOAD_DISABLED = 1;
export const NDIS_OFFLOAD_PARAMETERS_CONNECTION_OFFLOAD_ENABLED = 2;
export const NDIS_OFFLOAD_PARAMETERS_USO_DISABLED = 1;
export const NDIS_OFFLOAD_PARAMETERS_USO_ENABLED = 2;
export const NDIS_OFFLOAD_PARAMETERS_REVISION_1 = 1;
export const NDIS_OFFLOAD_PARAMETERS_REVISION_2 = 2;
export const NDIS_OFFLOAD_PARAMETERS_REVISION_3 = 3;
export const NDIS_OFFLOAD_PARAMETERS_REVISION_4 = 4;
export const NDIS_OFFLOAD_PARAMETERS_REVISION_5 = 5;
export const NDIS_OFFLOAD_PARAMETERS_SKIP_REGISTRY_UPDATE = 1;
export const IPSEC_OFFLOAD_V2_AUTHENTICATION_MD5 = 1;
export const IPSEC_OFFLOAD_V2_AUTHENTICATION_SHA_1 = 2;
export const IPSEC_OFFLOAD_V2_AUTHENTICATION_SHA_256 = 4;
export const IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_128 = 8;
export const IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_192 = 16;
export const IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_256 = 32;
export const IPSEC_OFFLOAD_V2_ENCRYPTION_NONE = 1;
export const IPSEC_OFFLOAD_V2_ENCRYPTION_DES_CBC = 2;
export const IPSEC_OFFLOAD_V2_ENCRYPTION_3_DES_CBC = 4;
export const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_128 = 8;
export const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_192 = 16;
export const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_256 = 32;
export const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_128 = 64;
export const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_192 = 128;
export const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_256 = 256;
export const NDIS_TCP_RECV_SEG_COALESC_OFFLOAD_REVISION_1 = 1;
export const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_NOT_SUPPORTED = 0;
export const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_INNER_IPV4 = 1;
export const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_OUTER_IPV4 = 2;
export const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_INNER_IPV6 = 4;
export const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_OUTER_IPV6 = 8;
export const NDIS_OFFLOAD_FLAGS_GROUP_CHECKSUM_CAPABILITIES = 1;
export const IPSEC_OFFLOAD_V2_AND_TCP_CHECKSUM_COEXISTENCE = 2;
export const IPSEC_OFFLOAD_V2_AND_UDP_CHECKSUM_COEXISTENCE = 4;
export const NDIS_OFFLOAD_REVISION_1 = 1;
export const NDIS_OFFLOAD_REVISION_2 = 2;
export const NDIS_OFFLOAD_REVISION_3 = 3;
export const NDIS_OFFLOAD_REVISION_4 = 4;
export const NDIS_OFFLOAD_REVISION_5 = 5;
export const NDIS_OFFLOAD_REVISION_6 = 6;
export const NDIS_OFFLOAD_REVISION_7 = 7;
export const NDIS_TCP_CONNECTION_OFFLOAD_REVISION_1 = 1;
export const NDIS_TCP_CONNECTION_OFFLOAD_REVISION_2 = 2;
export const NDIS_PORT_AUTHENTICATION_PARAMETERS_REVISION_1 = 1;
export const NDIS_WMI_DEFAULT_METHOD_ID = 1;
export const NDIS_WMI_OBJECT_TYPE_SET = 1;
export const NDIS_WMI_OBJECT_TYPE_METHOD = 2;
export const NDIS_WMI_OBJECT_TYPE_EVENT = 3;
export const NDIS_WMI_OBJECT_TYPE_ENUM_ADAPTER = 4;
export const NDIS_WMI_OBJECT_TYPE_OUTPUT_INFO = 5;
export const NDIS_WMI_METHOD_HEADER_REVISION_1 = 1;
export const NDIS_WMI_SET_HEADER_REVISION_1 = 1;
export const NDIS_WMI_EVENT_HEADER_REVISION_1 = 1;
export const NDIS_WMI_ENUM_ADAPTER_REVISION_1 = 1;
export const NDIS_DEVICE_TYPE_ENDPOINT = 1;
export const NDIS_HD_SPLIT_PARAMETERS_REVISION_1 = 1;
export const NDIS_HD_SPLIT_COMBINE_ALL_HEADERS = 1;
export const NDIS_HD_SPLIT_CURRENT_CONFIG_REVISION_1 = 1;
export const NDIS_HD_SPLIT_CAPS_SUPPORTS_HEADER_DATA_SPLIT = 1;
export const NDIS_HD_SPLIT_CAPS_SUPPORTS_IPV4_OPTIONS = 2;
export const NDIS_HD_SPLIT_CAPS_SUPPORTS_IPV6_EXTENSION_HEADERS = 4;
export const NDIS_HD_SPLIT_CAPS_SUPPORTS_TCP_OPTIONS = 8;
export const NDIS_HD_SPLIT_ENABLE_HEADER_DATA_SPLIT = 1;
export const NDIS_PM_WOL_BITMAP_PATTERN_SUPPORTED = 1;
export const NDIS_PM_WOL_MAGIC_PACKET_SUPPORTED = 2;
export const NDIS_PM_WOL_IPV4_TCP_SYN_SUPPORTED = 4;
export const NDIS_PM_WOL_IPV6_TCP_SYN_SUPPORTED = 8;
export const NDIS_PM_WOL_IPV4_DEST_ADDR_WILDCARD_SUPPORTED = 512;
export const NDIS_PM_WOL_IPV6_DEST_ADDR_WILDCARD_SUPPORTED = 2048;
export const NDIS_PM_WOL_EAPOL_REQUEST_ID_MESSAGE_SUPPORTED = 65536;
export const NDIS_PM_PROTOCOL_OFFLOAD_ARP_SUPPORTED = 1;
export const NDIS_PM_PROTOCOL_OFFLOAD_NS_SUPPORTED = 2;
export const NDIS_PM_PROTOCOL_OFFLOAD_80211_RSN_REKEY_SUPPORTED = 128;
export const NDIS_PM_WAKE_ON_MEDIA_CONNECT_SUPPORTED = 1;
export const NDIS_PM_WAKE_ON_MEDIA_DISCONNECT_SUPPORTED = 2;
export const NDIS_WLAN_WAKE_ON_NLO_DISCOVERY_SUPPORTED = 1;
export const NDIS_WLAN_WAKE_ON_AP_ASSOCIATION_LOST_SUPPORTED = 2;
export const NDIS_WLAN_WAKE_ON_GTK_HANDSHAKE_ERROR_SUPPORTED = 4;
export const NDIS_WLAN_WAKE_ON_4WAY_HANDSHAKE_REQUEST_SUPPORTED = 8;
export const NDIS_WWAN_WAKE_ON_REGISTER_STATE_SUPPORTED = 1;
export const NDIS_WWAN_WAKE_ON_SMS_RECEIVE_SUPPORTED = 2;
export const NDIS_WWAN_WAKE_ON_USSD_RECEIVE_SUPPORTED = 4;
export const NDIS_WWAN_WAKE_ON_PACKET_STATE_SUPPORTED = 8;
export const NDIS_WWAN_WAKE_ON_UICC_CHANGE_SUPPORTED = 16;
export const NDIS_PM_WAKE_PACKET_INDICATION_SUPPORTED = 1;
export const NDIS_PM_SELECTIVE_SUSPEND_SUPPORTED = 2;
export const NDIS_PM_WOL_BITMAP_PATTERN_ENABLED = 1;
export const NDIS_PM_WOL_MAGIC_PACKET_ENABLED = 2;
export const NDIS_PM_WOL_IPV4_TCP_SYN_ENABLED = 4;
export const NDIS_PM_WOL_IPV6_TCP_SYN_ENABLED = 8;
export const NDIS_PM_WOL_IPV4_DEST_ADDR_WILDCARD_ENABLED = 512;
export const NDIS_PM_WOL_IPV6_DEST_ADDR_WILDCARD_ENABLED = 2048;
export const NDIS_PM_WOL_EAPOL_REQUEST_ID_MESSAGE_ENABLED = 65536;
export const NDIS_PM_PROTOCOL_OFFLOAD_ARP_ENABLED = 1;
export const NDIS_PM_PROTOCOL_OFFLOAD_NS_ENABLED = 2;
export const NDIS_PM_PROTOCOL_OFFLOAD_80211_RSN_REKEY_ENABLED = 128;
export const NDIS_PM_WAKE_ON_LINK_CHANGE_ENABLED = 1;
export const NDIS_PM_WAKE_ON_MEDIA_DISCONNECT_ENABLED = 2;
export const NDIS_PM_SELECTIVE_SUSPEND_ENABLED = 16;
export const NDIS_WLAN_WAKE_ON_NLO_DISCOVERY_ENABLED = 1;
export const NDIS_WLAN_WAKE_ON_AP_ASSOCIATION_LOST_ENABLED = 2;
export const NDIS_WLAN_WAKE_ON_GTK_HANDSHAKE_ERROR_ENABLED = 4;
export const NDIS_WLAN_WAKE_ON_4WAY_HANDSHAKE_REQUEST_ENABLED = 8;
export const NDIS_WWAN_WAKE_ON_REGISTER_STATE_ENABLED = 1;
export const NDIS_WWAN_WAKE_ON_SMS_RECEIVE_ENABLED = 2;
export const NDIS_WWAN_WAKE_ON_USSD_RECEIVE_ENABLED = 4;
export const NDIS_WWAN_WAKE_ON_PACKET_STATE_ENABLED = 8;
export const NDIS_WWAN_WAKE_ON_UICC_CHANGE_ENABLED = 16;
export const NDIS_PM_WOL_PRIORITY_LOWEST = 4294967295;
export const NDIS_PM_WOL_PRIORITY_NORMAL = 268435456;
export const NDIS_PM_WOL_PRIORITY_HIGHEST = 1;
export const NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_LOWEST = 4294967295;
export const NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_NORMAL = 268435456;
export const NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_HIGHEST = 1;
export const NDIS_PM_MAX_STRING_SIZE = 64;
export const NDIS_PM_CAPABILITIES_REVISION_1 = 1;
export const NDIS_PM_CAPABILITIES_REVISION_2 = 2;
export const NDIS_PM_PARAMETERS_REVISION_1 = 1;
export const NDIS_PM_PARAMETERS_REVISION_2 = 2;
export const EAPOL_REQUEST_ID_WOL_FLAG_MUST_ENCRYPT = 1;
export const NDIS_PM_MAX_PATTERN_ID = 65535;
export const NDIS_PM_PRIVATE_PATTERN_ID = 1;
export const NDIS_PM_WOL_PATTERN_REVISION_1 = 1;
export const NDIS_PM_WOL_PATTERN_REVISION_2 = 2;
export const DOT11_RSN_KCK_LENGTH = 16;
export const DOT11_RSN_KEK_LENGTH = 16;
export const DOT11_RSN_MAX_CIPHER_KEY_LENGTH = 32;
export const NDIS_PM_PROTOCOL_OFFLOAD_REVISION_1 = 1;
export const NDIS_PM_PROTOCOL_OFFLOAD_REVISION_2 = 2;
export const NDIS_SIZEOF_NDIS_PM_PROTOCOL_OFFLOAD_REVISION_1 = 240;
export const NDIS_PM_WAKE_REASON_REVISION_1 = 1;
export const NDIS_PM_WAKE_PACKET_REVISION_1 = 1;
export const NDIS_WMI_PM_ADMIN_CONFIG_REVISION_1 = 1;
export const NDIS_WMI_PM_ACTIVE_CAPABILITIES_REVISION_1 = 1;
export const NDIS_RECEIVE_FILTER_MAC_HEADER_SUPPORTED = 1;
export const NDIS_RECEIVE_FILTER_IPV4_HEADER_SUPPORTED = 2;
export const NDIS_RECEIVE_FILTER_IPV6_HEADER_SUPPORTED = 4;
export const NDIS_RECEIVE_FILTER_ARP_HEADER_SUPPORTED = 8;
export const NDIS_RECEIVE_FILTER_UDP_HEADER_SUPPORTED = 16;
export const NDIS_RECEIVE_FILTER_MAC_HEADER_DEST_ADDR_SUPPORTED = 1;
export const NDIS_RECEIVE_FILTER_MAC_HEADER_SOURCE_ADDR_SUPPORTED = 2;
export const NDIS_RECEIVE_FILTER_MAC_HEADER_PROTOCOL_SUPPORTED = 4;
export const NDIS_RECEIVE_FILTER_MAC_HEADER_VLAN_ID_SUPPORTED = 8;
export const NDIS_RECEIVE_FILTER_MAC_HEADER_PRIORITY_SUPPORTED = 16;
export const NDIS_RECEIVE_FILTER_MAC_HEADER_PACKET_TYPE_SUPPORTED = 32;
export const NDIS_RECEIVE_FILTER_ARP_HEADER_OPERATION_SUPPORTED = 1;
export const NDIS_RECEIVE_FILTER_ARP_HEADER_SPA_SUPPORTED = 2;
export const NDIS_RECEIVE_FILTER_ARP_HEADER_TPA_SUPPORTED = 4;
export const NDIS_RECEIVE_FILTER_IPV4_HEADER_PROTOCOL_SUPPORTED = 1;
export const NDIS_RECEIVE_FILTER_IPV6_HEADER_PROTOCOL_SUPPORTED = 1;
export const NDIS_RECEIVE_FILTER_UDP_HEADER_DEST_PORT_SUPPORTED = 1;
export const NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_EQUAL_SUPPORTED = 1;
export const NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_MASK_EQUAL_SUPPORTED = 2;
export const NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_NOT_EQUAL_SUPPORTED = 4;
export const NDIS_RECEIVE_FILTER_MSI_X_SUPPORTED = 1;
export const NDIS_RECEIVE_FILTER_VM_QUEUE_SUPPORTED = 2;
export const NDIS_RECEIVE_FILTER_LOOKAHEAD_SPLIT_SUPPORTED = 4;
export const NDIS_RECEIVE_FILTER_DYNAMIC_PROCESSOR_AFFINITY_CHANGE_SUPPORTED = 8;
export const NDIS_RECEIVE_FILTER_INTERRUPT_VECTOR_COALESCING_SUPPORTED = 16;
export const NDIS_RECEIVE_FILTER_IMPLAT_MIN_OF_QUEUES_MODE = 64;
export const NDIS_RECEIVE_FILTER_IMPLAT_SUM_OF_QUEUES_MODE = 128;
export const NDIS_RECEIVE_FILTER_PACKET_COALESCING_SUPPORTED_ON_DEFAULT_QUEUE = 256;
export const NDIS_RECEIVE_FILTER_ANY_VLAN_SUPPORTED = 32;
export const NDIS_RECEIVE_FILTER_DYNAMIC_PROCESSOR_AFFINITY_CHANGE_FOR_DEFAULT_QUEUE_SUPPORTED = 64;
export const NDIS_RECEIVE_FILTER_VMQ_FILTERS_ENABLED = 1;
export const NDIS_RECEIVE_FILTER_PACKET_COALESCING_FILTERS_ENABLED = 2;
export const NDIS_RECEIVE_FILTER_VM_QUEUES_ENABLED = 1;
export const NDIS_RECEIVE_FILTER_CAPABILITIES_REVISION_1 = 1;
export const NDIS_RECEIVE_FILTER_CAPABILITIES_REVISION_2 = 2;
export const NDIS_NIC_SWITCH_CAPS_VLAN_SUPPORTED = 1;
export const NDIS_NIC_SWITCH_CAPS_PER_VPORT_INTERRUPT_MODERATION_SUPPORTED = 2;
export const NDIS_NIC_SWITCH_CAPS_ASYMMETRIC_QUEUE_PAIRS_FOR_NONDEFAULT_VPORT_SUPPORTED = 4;
export const NDIS_NIC_SWITCH_CAPS_VF_RSS_SUPPORTED = 8;
export const NDIS_NIC_SWITCH_CAPS_SINGLE_VPORT_POOL = 16;
export const NDIS_NIC_SWITCH_CAPS_RSS_PARAMETERS_PER_PF_VPORT_SUPPORTED = 32;
export const NDIS_NIC_SWITCH_CAPS_NIC_SWITCH_WITHOUT_IOV_SUPPORTED = 64;
export const NDIS_NIC_SWITCH_CAPS_RSS_ON_PF_VPORTS_SUPPORTED = 128;
export const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_INDIRECTION_TABLE_SUPPORTED = 256;
export const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_FUNCTION_SUPPORTED = 512;
export const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_TYPE_SUPPORTED = 1024;
export const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_KEY_SUPPORTED = 2048;
export const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_INDIRECTION_TABLE_SIZE_RESTRICTED = 4096;
export const NDIS_NIC_SWITCH_CAPABILITIES_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_CAPABILITIES_REVISION_2 = 2;
export const NDIS_NIC_SWITCH_CAPABILITIES_REVISION_3 = 3;
export const NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS_REVISION_1 = 1;
export const NDIS_DEFAULT_RECEIVE_QUEUE_ID = 0;
export const NDIS_DEFAULT_RECEIVE_QUEUE_GROUP_ID = 0;
export const NDIS_DEFAULT_RECEIVE_FILTER_ID = 0;
export const NDIS_RECEIVE_FILTER_FIELD_MAC_HEADER_VLAN_UNTAGGED_OR_ZERO = 1;
export const NDIS_RECEIVE_FILTER_RESERVED = 254;
export const NDIS_RECEIVE_FILTER_FIELD_PARAMETERS_REVISION_1 = 1;
export const NDIS_RECEIVE_FILTER_FIELD_PARAMETERS_REVISION_2 = 2;
export const NDIS_RECEIVE_FILTER_FLAGS_RESERVED = 1;
export const NDIS_RECEIVE_FILTER_PACKET_ENCAPSULATION_GRE = 2;
export const NDIS_RECEIVE_FILTER_PACKET_ENCAPSULATION = 2;
export const NDIS_RECEIVE_FILTER_PARAMETERS_REVISION_1 = 1;
export const NDIS_RECEIVE_FILTER_PARAMETERS_REVISION_2 = 2;
export const NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS_REVISION_1 = 1;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_PER_QUEUE_RECEIVE_INDICATION = 1;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_LOOKAHEAD_SPLIT_REQUIRED = 2;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_FLAGS_CHANGED = 65536;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_PROCESSOR_AFFINITY_CHANGED = 131072;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_SUGGESTED_RECV_BUFFER_NUMBERS_CHANGED = 262144;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_NAME_CHANGED = 524288;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_INTERRUPT_COALESCING_DOMAIN_ID_CHANGED = 1048576;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_QOS_SQ_ID_CHANGED = 2097152;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_CHANGE_MASK = 4294901760;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_1 = 1;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_2 = 2;
export const NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_3 = 3;
export const NDIS_RECEIVE_QUEUE_FREE_PARAMETERS_REVISION_1 = 1;
export const NDIS_RECEIVE_QUEUE_INFO_REVISION_1 = 1;
export const NDIS_RECEIVE_QUEUE_INFO_REVISION_2 = 2;
export const NDIS_RECEIVE_QUEUE_INFO_ARRAY_REVISION_1 = 1;
export const NDIS_RECEIVE_FILTER_INFO_REVISION_1 = 1;
export const NDIS_RECEIVE_FILTER_INFO_ARRAY_REVISION_1 = 1;
export const NDIS_RECEIVE_FILTER_INFO_ARRAY_REVISION_2 = 2;
export const NDIS_RECEIVE_FILTER_INFO_ARRAY_VPORT_ID_SPECIFIED = 1;
export const NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS_REVISION_1 = 1;
export const NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY_REVISION_1 = 1;
export const NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_1 = 1;
export const NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_2 = 2;
export const NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_3 = 3;
export const NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV4 = 256;
export const NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV6 = 512;
export const NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV6_EX = 1024;
export const NDIS_RSS_CAPS_HASH_TYPE_UDP_IPV4 = 2048;
export const NDIS_RSS_CAPS_HASH_TYPE_UDP_IPV6 = 4096;
export const NDIS_RSS_CAPS_HASH_TYPE_UDP_IPV6_EX = 8192;
export const NDIS_RSS_CAPS_MESSAGE_SIGNALED_INTERRUPTS = 16777216;
export const NDIS_RSS_CAPS_CLASSIFICATION_AT_ISR = 33554432;
export const NDIS_RSS_CAPS_CLASSIFICATION_AT_DPC = 67108864;
export const NDIS_RSS_CAPS_USING_MSI_X = 134217728;
export const NDIS_RSS_CAPS_RSS_AVAILABLE_ON_PORTS = 268435456;
export const NDIS_RSS_CAPS_SUPPORTS_MSI_X = 536870912;
export const NDIS_RSS_CAPS_SUPPORTS_INDEPENDENT_ENTRY_MOVE = 1073741824;
export const NDIS_RSS_PARAM_FLAG_BASE_CPU_UNCHANGED = 1;
export const NDIS_RSS_PARAM_FLAG_HASH_INFO_UNCHANGED = 2;
export const NDIS_RSS_PARAM_FLAG_ITABLE_UNCHANGED = 4;
export const NDIS_RSS_PARAM_FLAG_HASH_KEY_UNCHANGED = 8;
export const NDIS_RSS_PARAM_FLAG_DISABLE_RSS = 16;
export const NDIS_RSS_PARAM_FLAG_DEFAULT_PROCESSOR_UNCHANGED = 32;
export const NDIS_RSS_INDIRECTION_TABLE_SIZE_REVISION_1 = 128;
export const NDIS_RSS_HASH_SECRET_KEY_SIZE_REVISION_1 = 40;
export const NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_1 = 1;
export const NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_2 = 2;
export const NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_3 = 3;
export const NDIS_RSS_INDIRECTION_TABLE_MAX_SIZE_REVISION_1 = 128;
export const NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_1 = 40;
export const NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_2 = 40;
export const NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_3 = 40;
export const NDIS_RECEIVE_SCALE_PARAMETERS_V2_REVISION_1 = 1;
export const NDIS_RECEIVE_SCALE_PARAM_ENABLE_RSS = 1;
export const NDIS_RECEIVE_SCALE_PARAM_HASH_INFO_CHANGED = 2;
export const NDIS_RECEIVE_SCALE_PARAM_HASH_KEY_CHANGED = 4;
export const NDIS_RECEIVE_SCALE_PARAM_NUMBER_OF_QUEUES_CHANGED = 8;
export const NDIS_RECEIVE_SCALE_PARAM_NUMBER_OF_ENTRIES_CHANGED = 16;
export const NDIS_RSS_SET_INDIRECTION_ENTRY_FLAG_PRIMARY_PROCESSOR = 1;
export const NDIS_RSS_SET_INDIRECTION_ENTRY_FLAG_DEFAULT_PROCESSOR = 2;
export const NDIS_RSS_SET_INDIRECTION_ENTRIES_REVISION_1 = 1;
export const NDIS_RECEIVE_HASH_FLAG_ENABLE_HASH = 1;
export const NDIS_RECEIVE_HASH_FLAG_HASH_INFO_UNCHANGED = 2;
export const NDIS_RECEIVE_HASH_FLAG_HASH_KEY_UNCHANGED = 4;
export const NDIS_RECEIVE_HASH_PARAMETERS_REVISION_1 = 1;
export const NDIS_RSS_PROCESSOR_INFO_REVISION_1 = 1;
export const NDIS_RSS_PROCESSOR_INFO_REVISION_2 = 2;
export const NDIS_SYSTEM_PROCESSOR_INFO_EX_REVISION_1 = 1;
export const NDIS_HYPERVISOR_INFO_FLAG_HYPERVISOR_PRESENT = 1;
export const NDIS_HYPERVISOR_INFO_REVISION_1 = 1;
export const NDIS_WMI_RECEIVE_QUEUE_PARAMETERS_REVISION_1 = 1;
export const NDIS_WMI_RECEIVE_QUEUE_INFO_REVISION_1 = 1;
export const NDIS_NDK_CAPABILITIES_REVISION_1 = 1;
export const OID_NDK_SET_STATE = 4228121089;
export const OID_NDK_STATISTICS = 4228121090;
export const OID_NDK_CONNECTIONS = 4228121091;
export const OID_NDK_LOCAL_ENDPOINTS = 4228121092;
export const NDIS_NDK_STATISTICS_INFO_REVISION_1 = 1;
export const NDIS_NDK_CONNECTIONS_REVISION_1 = 1;
export const NDIS_NDK_LOCAL_ENDPOINTS_REVISION_1 = 1;
export const OID_QOS_HARDWARE_CAPABILITIES = 4228186113;
export const OID_QOS_CURRENT_CAPABILITIES = 4228186114;
export const OID_QOS_PARAMETERS = 4228186115;
export const OID_QOS_OPERATIONAL_PARAMETERS = 4228186116;
export const OID_QOS_REMOTE_PARAMETERS = 4228186117;
export const NDIS_QOS_MAXIMUM_PRIORITIES = 8;
export const NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES = 8;
export const NDIS_QOS_CAPABILITIES_STRICT_TSA_SUPPORTED = 1;
export const NDIS_QOS_CAPABILITIES_MACSEC_BYPASS_SUPPORTED = 2;
export const NDIS_QOS_CAPABILITIES_CEE_DCBX_SUPPORTED = 4;
export const NDIS_QOS_CAPABILITIES_IEEE_DCBX_SUPPORTED = 8;
export const NDIS_QOS_CAPABILITIES_REVISION_1 = 1;
export const NDIS_QOS_CLASSIFICATION_SET_BY_MINIPORT_MASK = 4278190080;
export const NDIS_QOS_CLASSIFICATION_ENFORCED_BY_MINIPORT = 16777216;
export const NDIS_QOS_CONDITION_RESERVED = 0;
export const NDIS_QOS_CONDITION_DEFAULT = 1;
export const NDIS_QOS_CONDITION_TCP_PORT = 2;
export const NDIS_QOS_CONDITION_UDP_PORT = 3;
export const NDIS_QOS_CONDITION_TCP_OR_UDP_PORT = 4;
export const NDIS_QOS_CONDITION_ETHERTYPE = 5;
export const NDIS_QOS_CONDITION_NETDIRECT_PORT = 6;
export const NDIS_QOS_CONDITION_MAXIMUM = 7;
export const NDIS_QOS_ACTION_PRIORITY = 0;
export const NDIS_QOS_ACTION_MAXIMUM = 1;
export const NDIS_QOS_CLASSIFICATION_ELEMENT_REVISION_1 = 1;
export const NDIS_QOS_PARAMETERS_ETS_CHANGED = 1;
export const NDIS_QOS_PARAMETERS_ETS_CONFIGURED = 2;
export const NDIS_QOS_PARAMETERS_PFC_CHANGED = 256;
export const NDIS_QOS_PARAMETERS_PFC_CONFIGURED = 512;
export const NDIS_QOS_PARAMETERS_CLASSIFICATION_CHANGED = 65536;
export const NDIS_QOS_PARAMETERS_CLASSIFICATION_CONFIGURED = 131072;
export const NDIS_QOS_PARAMETERS_WILLING = 2147483648;
export const NDIS_QOS_TSA_STRICT = 0;
export const NDIS_QOS_TSA_CBS = 1;
export const NDIS_QOS_TSA_ETS = 2;
export const NDIS_QOS_TSA_MAXIMUM = 3;
export const NDIS_QOS_PARAMETERS_REVISION_1 = 1;
export const NDIS_DEFAULT_VPORT_ID = 0;
export const NDIS_DEFAULT_SWITCH_ID = 0;
export const NDIS_NIC_SWITCH_PARAMETERS_CHANGE_MASK = 4294901760;
export const NDIS_NIC_SWITCH_PARAMETERS_SWITCH_NAME_CHANGED = 65536;
export const NDIS_NIC_SWITCH_PARAMETERS_DEFAULT_NUMBER_OF_QUEUE_PAIRS_FOR_DEFAULT_VPORT = 1;
export const NDIS_NIC_SWITCH_PARAMETERS_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_PARAMETERS_REVISION_2 = 2;
export const NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_INFO_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_INFO_ARRAY_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_LOOKAHEAD_SPLIT_ENABLED = 1;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_PACKET_DIRECT_RX_ONLY = 2;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_ENFORCE_MAX_SG_LIST = 32768;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_CHANGE_MASK = 4294901760;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_FLAGS_CHANGED = 65536;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_NAME_CHANGED = 131072;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_INT_MOD_CHANGED = 262144;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_STATE_CHANGED = 524288;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_PROCESSOR_AFFINITY_CHANGED = 1048576;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_NDK_PARAMS_CHANGED = 2097152;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_QOS_SQ_ID_CHANGED = 4194304;
export const NDIS_NIC_SWITCH_VPORT_PARAMS_NUM_QUEUE_PAIRS_CHANGED = 8388608;
export const NDIS_NIC_SWITCH_VPORT_PARAMETERS_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_VPORT_PARAMETERS_REVISION_2 = 2;
export const NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_VPORT_INFO_LOOKAHEAD_SPLIT_ENABLED = 1;
export const NDIS_NIC_SWITCH_VPORT_INFO_PACKET_DIRECT_RX_ONLY = 2;
export const NDIS_NIC_SWITCH_VPORT_INFO_GFT_ENABLED = 4;
export const NDIS_NIC_SWITCH_VPORT_INFO_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_ENUM_ON_SPECIFIC_FUNCTION = 1;
export const NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_ENUM_ON_SPECIFIC_SWITCH = 2;
export const NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_VF_PARAMETERS_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_FREE_VF_PARAMETERS_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_VF_INFO_REVISION_1 = 1;
export const NDIS_NIC_SWITCH_VF_INFO_ARRAY_ENUM_ON_SPECIFIC_SWITCH = 1;
export const NDIS_NIC_SWITCH_VF_INFO_ARRAY_REVISION_1 = 1;
export const NDIS_SRIOV_CAPS_SRIOV_SUPPORTED = 1;
export const NDIS_SRIOV_CAPS_PF_MINIPORT = 2;
export const NDIS_SRIOV_CAPS_VF_MINIPORT = 4;
export const NDIS_SRIOV_CAPABILITIES_REVISION_1 = 1;
export const NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS_REVISION_1 = 1;
export const NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS_REVISION_1 = 1;
export const NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS_REVISION_1 = 1;
export const NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS_REVISION_1 = 1;
export const NDIS_SRIOV_RESET_VF_PARAMETERS_REVISION_1 = 1;
export const NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS_REVISION_1 = 1;
export const NDIS_SRIOV_CONFIG_STATE_PARAMETERS_REVISION_1 = 1;
export const NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO_REVISION_1 = 1;
export const NDIS_SRIOV_PROBED_BARS_INFO_REVISION_1 = 1;
export const NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS_REVISION_1 = 1;
export const NDIS_SRIOV_BAR_RESOURCES_INFO_REVISION_1 = 1;
export const NDIS_SRIOV_PF_LUID_INFO_REVISION_1 = 1;
export const NDIS_SRIOV_VF_SERIAL_NUMBER_INFO_REVISION_1 = 1;
export const NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO_REVISION_1 = 1;
export const NDIS_SRIOV_OVERLYING_ADAPTER_INFO_VERSION_1 = 1;
export const NDIS_ISOLATION_NAME_MAX_STRING_SIZE = 127;
export const NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY_REVISION_1 = 1;
export const NDIS_ROUTING_DOMAIN_ENTRY_REVISION_1 = 1;
export const NDIS_ISOLATION_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION_1 = 1;
export const NDIS_SWITCH_PORT_PROPERTY_SECURITY_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_PROPERTY_SECURITY_REVISION_2 = 2;
export const NDIS_SWITCH_PORT_PROPERTY_VLAN_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_PROPERTY_PROFILE_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_PROPERTY_ISOLATION_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_PROPERTY_CUSTOM_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_PROPERTY_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM_REVISION_1 = 1;
export const NDIS_SWITCH_PROPERTY_CUSTOM_REVISION_1 = 1;
export const NDIS_SWITCH_PROPERTY_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_PROPERTY_ENUM_INFO_REVISION_1 = 1;
export const NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_FEATURE_STATUS_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_FEATURE_STATUS_CUSTOM_REVISION_1 = 1;
export const NDIS_SWITCH_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_PARAMETERS_FLAG_UNTRUSTED_INTERNAL_PORT = 1;
export const NDIS_SWITCH_PORT_PARAMETERS_FLAG_RESTORING_PORT = 2;
export const NDIS_SWITCH_PORT_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_PORT_ARRAY_REVISION_1 = 1;
export const NDIS_SWITCH_NIC_FLAGS_NIC_INITIALIZING = 1;
export const NDIS_SWITCH_NIC_FLAGS_NIC_SUSPENDED = 2;
export const NDIS_SWITCH_NIC_FLAGS_MAPPED_NIC_UPDATED = 4;
export const NDIS_SWITCH_NIC_FLAGS_NIC_SUSPENDED_LM = 16;
export const NDIS_SWITCH_NIC_PARAMETERS_REVISION_1 = 1;
export const NDIS_SWITCH_NIC_PARAMETERS_REVISION_2 = 2;
export const NDIS_SWITCH_NIC_ARRAY_REVISION_1 = 1;
export const NDIS_SWITCH_NIC_OID_REQUEST_REVISION_1 = 1;
export const NDIS_SWITCH_NIC_SAVE_STATE_REVISION_1 = 1;
export const NDIS_SWITCH_NIC_SAVE_STATE_REVISION_2 = 2;
export const NDIS_PORT_STATE_REVISION_1 = 1;
export const NDIS_PORT_CHAR_USE_DEFAULT_AUTH_SETTINGS = 1;
export const NDIS_PORT_CHARACTERISTICS_REVISION_1 = 1;
export const NDIS_PORT_ARRAY_REVISION_1 = 1;
export const ETHERNET_LENGTH_OF_ADDRESS = 6;
export const NDIS_GFP_HEADER_PRESENT_ETHERNET = 1;
export const NDIS_GFP_HEADER_PRESENT_IPV4 = 2;
export const NDIS_GFP_HEADER_PRESENT_IPV6 = 4;
export const NDIS_GFP_HEADER_PRESENT_TCP = 8;
export const NDIS_GFP_HEADER_PRESENT_UDP = 16;
export const NDIS_GFP_HEADER_PRESENT_ICMP = 32;
export const NDIS_GFP_HEADER_PRESENT_NO_ENCAP = 64;
export const NDIS_GFP_HEADER_PRESENT_IP_IN_IP_ENCAP = 128;
export const NDIS_GFP_HEADER_PRESENT_IP_IN_GRE_ENCAP = 256;
export const NDIS_GFP_HEADER_PRESENT_NVGRE_ENCAP = 512;
export const NDIS_GFP_HEADER_PRESENT_VXLAN_ENCAP = 1024;
export const NDIS_GFP_HEADER_PRESENT_ESP = 2048;
export const NDIS_GFP_ENCAPSULATION_TYPE_NOT_ENCAPSULATED = 1;
export const NDIS_GFP_ENCAPSULATION_TYPE_IP_IN_IP = 2;
export const NDIS_GFP_ENCAPSULATION_TYPE_IP_IN_GRE = 4;
export const NDIS_GFP_ENCAPSULATION_TYPE_NVGRE = 8;
export const NDIS_GFP_ENCAPSULATION_TYPE_VXLAN = 16;
export const NDIS_GFP_UNDEFINED_PROFILE_ID = 0;
export const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE_IS_TTL_ONE = 1;
export const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE_REVISION_1 = 1;
export const NDIS_GFP_EXACT_MATCH_PROFILE_RDMA_FLOW = 1;
export const NDIS_GFP_EXACT_MATCH_PROFILE_REVISION_1 = 1;
export const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_IS_TTL_ONE = 1;
export const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_REVISION_1 = 1;
export const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE_IS_TTL_ONE = 1;
export const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE_REVISION_1 = 1;
export const NDIS_GFP_WILDCARD_MATCH_PROFILE_REVISION_1 = 1;
export const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_IS_TTL_ONE = 1;
export const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_REVISION_1 = 1;
export const NDIS_PD_CAPS_RECEIVE_FILTER_COUNTERS_SUPPORTED = 1;
export const NDIS_PD_CAPS_DRAIN_NOTIFICATIONS_SUPPORTED = 2;
export const NDIS_PD_CAPS_NOTIFICATION_MODERATION_INTERVAL_SUPPORTED = 4;
export const NDIS_PD_CAPS_NOTIFICATION_MODERATION_COUNT_SUPPORTED = 8;
export const NDIS_PD_CAPABILITIES_REVISION_1 = 1;
export const NDIS_PD_CONFIG_REVISION_1 = 1;
export const NDIS_GFT_UNDEFINED_FLOW_ENTRY_ID = 0;
export const NDIS_GFT_UNDEFINED_TABLE_ID = 0;
export const NDIS_GFT_TABLE_INCLUDE_EXTERNAL_VPPORT = 1;
export const NDIS_GFT_TABLE_PARAMETERS_REVISION_1 = 1;
export const NDIS_GFT_TABLE_INFO_REVISION_1 = 1;
export const NDIS_GFT_TABLE_INFO_ARRAY_REVISION_1 = 1;
export const NDIS_GFT_DELETE_TABLE_PARAMETERS_REVISION_1 = 1;
export const NDIS_GFT_UNDEFINED_COUNTER_ID = 0;
export const NDIS_GFT_MAX_COUNTER_OBJECTS_PER_FLOW_ENTRY = 8;
export const NDIS_GFT_COUNTER_PARAMETERS_CLIENT_SPECIFIED_ADDRESS = 1;
export const NDIS_GFT_COUNTER_PARAMETERS_REVISION_1 = 1;
export const NDIS_GFT_FREE_COUNTER_PARAMETERS_REVISION_1 = 1;
export const NDIS_GFT_COUNTER_INFO_REVISION_1 = 1;
export const NDIS_GFT_COUNTER_INFO_ARRAY_REVISION_1 = 1;
export const NDIS_GFT_COUNTER_VALUE_ARRAY_UPDATE_MEMORY_MAPPED_COUNTERS = 1;
export const NDIS_GFT_COUNTER_VALUE_ARRAY_GET_VALUES = 2;
export const NDIS_GFT_COUNTER_VALUE_ARRAY_REVISION_1 = 1;
export const NDIS_GFT_STATISTICS_REVISION_1 = 1;
export const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE_DECREMENT_TTL_IF_NOT_ONE = 1;
export const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE_REVISION_1 = 1;
export const NDIS_GFT_UNDEFINED_CUSTOM_ACTION = 0;
export const NDIS_GFT_RESERVED_CUSTOM_ACTIONS = 256;
export const NDIS_GFT_CUSTOM_ACTION_PROFILE_REVISION_1 = 1;
export const NDIS_GFT_HTP_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = 1;
export const NDIS_GFT_HTP_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = 2;
export const NDIS_GFT_HTP_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = 4;
export const NDIS_GFT_HTP_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = 8;
export const NDIS_GFT_HTP_COPY_ALL_PACKETS = 16;
export const NDIS_GFT_HTP_COPY_FIRST_PACKET = 32;
export const NDIS_GFT_HTP_COPY_WHEN_TCP_FLAG_SET = 64;
export const NDIS_GFT_HTP_CUSTOM_ACTION_PRESENT = 128;
export const NDIS_GFT_HTP_META_ACTION_BEFORE_HEADER_TRANSPOSITION = 256;
export const NDIS_GFT_HEADER_TRANSPOSITION_PROFILE_REVISION_1 = 1;
export const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_DECREMENT_TTL_IF_NOT_ONE = 1;
export const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_REVISION_1 = 1;
export const NDIS_GFT_CUSTOM_ACTION_LAST_ACTION = 1;
export const NDIS_GFT_CUSTOM_ACTION_REVISION_1 = 1;
export const NDIS_GFT_EMFE_ADD_IN_ACTIVATED_STATE = 1;
export const NDIS_GFT_EMFE_MATCH_AND_ACTION_MUST_BE_SUPPORTED = 2;
export const NDIS_GFT_EMFE_RDMA_FLOW = 4;
export const NDIS_GFT_EMFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = 4096;
export const NDIS_GFT_EMFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = 8192;
export const NDIS_GFT_EMFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = 16384;
export const NDIS_GFT_EMFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = 32768;
export const NDIS_GFT_EMFE_COPY_ALL_PACKETS = 65536;
export const NDIS_GFT_EMFE_COPY_FIRST_PACKET = 131072;
export const NDIS_GFT_EMFE_COPY_WHEN_TCP_FLAG_SET = 262144;
export const NDIS_GFT_EMFE_CUSTOM_ACTION_PRESENT = 524288;
export const NDIS_GFT_EMFE_META_ACTION_BEFORE_HEADER_TRANSPOSITION = 1048576;
export const NDIS_GFT_EMFE_COPY_AFTER_TCP_FIN_FLAG_SET = 2097152;
export const NDIS_GFT_EMFE_COPY_AFTER_TCP_RST_FLAG_SET = 4194304;
export const NDIS_GFT_EMFE_COPY_CONDITION_CHANGED = 16777216;
export const NDIS_GFT_EMFE_ALL_VPORT_FLOW_ENTRIES = 33554432;
export const NDIS_GFT_EMFE_COUNTER_ALLOCATE = 1;
export const NDIS_GFT_EMFE_COUNTER_MEMORY_MAPPED = 2;
export const NDIS_GFT_EMFE_COUNTER_CLIENT_SPECIFIED_ADDRESS = 4;
export const NDIS_GFT_EMFE_COUNTER_TRACK_TCP_FLOW = 8;
export const NDIS_GFT_EXACT_MATCH_FLOW_ENTRY_REVISION_1 = 1;
export const NDIS_GFT_WCFE_ADD_IN_ACTIVATED_STATE = 1;
export const NDIS_GFT_WCFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = 2;
export const NDIS_GFT_WCFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = 4;
export const NDIS_GFT_WCFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = 8;
export const NDIS_GFT_WCFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = 16;
export const NDIS_GFT_WCFE_COPY_ALL_PACKETS = 32;
export const NDIS_GFT_WCFE_CUSTOM_ACTION_PRESENT = 64;
export const NDIS_GFT_WCFE_COUNTER_ALLOCATE = 1;
export const NDIS_GFT_WCFE_COUNTER_MEMORY_MAPPED = 2;
export const NDIS_GFT_WCFE_COUNTER_CLIENT_SPECIFIED_ADDRESS = 4;
export const NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY_REVISION_1 = 1;
export const NDIS_GFT_PROFILE_INFO_REVISION_1 = 1;
export const NDIS_GFT_PROFILE_INFO_ARRAY_REVISION_1 = 1;
export const NDIS_GFT_DELETE_PROFILE_ALL_PROFILES = 1;
export const NDIS_GFT_DELETE_PROFILE_PARAMETERS_REVISION_1 = 1;
export const NDIS_GFT_FLOW_ENTRY_ARRAY_REVISION_1 = 1;
export const NDIS_GFT_FLOW_ENTRY_INFO_ALL_FLOW_ENTRIES = 1;
export const NDIS_GFT_FLOW_ENTRY_INFO_ARRAY_REVISION_1 = 1;
export const NDIS_GFT_FLOW_ENTRY_ID_ALL_NIC_SWITCH_FLOW_ENTRIES = 1;
export const NDIS_GFT_FLOW_ENTRY_ID_ALL_TABLE_FLOW_ENTRIES = 2;
export const NDIS_GFT_FLOW_ENTRY_ID_ALL_VPORT_FLOW_ENTRIES = 4;
export const NDIS_GFT_FLOW_ENTRY_ID_RANGE_DEFINED = 8;
export const NDIS_GFT_FLOW_ENTRY_ID_ARRAY_DEFINED = 16;
export const NDIS_GFT_FLOW_ENTRY_ID_ARRAY_COUNTER_VALUES = 65536;
export const NDIS_GFT_FLOW_ENTRY_ID_ARRAY_REVISION_1 = 1;
export const NDIS_GFT_OFFLOAD_PARAMETERS_ENABLE_OFFLOAD = 1;
export const NDIS_GFT_OFFLOAD_PARAMETERS_CUSTOM_PROVIDER_RESERVED = 4278190080;
export const NDIS_GFT_OFFLOAD_PARAMETERS_REVISION_1 = 1;
export const NDIS_GFT_OFFLOAD_CAPS_ADD_FLOW_ENTRY_DEACTIVATED_PREFERRED = 1;
export const NDIS_GFT_OFFLOAD_CAPS_RATE_LIMITING_QUEUE_SUPPORTED = 2;
export const NDIS_GFT_OFFLOAD_CAPS_MEMORY_MAPPED_COUNTERS = 1;
export const NDIS_GFT_OFFLOAD_CAPS_MEMORY_MAPPED_PAKCET_AND_BYTE_COUNTERS = 2;
export const NDIS_GFT_OFFLOAD_CAPS_PER_FLOW_ENTRY_COUNTERS = 4;
export const NDIS_GFT_OFFLOAD_CAPS_PER_PACKET_COUNTER_UPDATE = 8;
export const NDIS_GFT_OFFLOAD_CAPS_CLIENT_SPECIFIED_MEMORY_MAPPED_COUNTERS = 16;
export const NDIS_GFT_OFFLOAD_CAPS_INGRESS_AGGREGATE_COUNTERS = 32;
export const NDIS_GFT_OFFLOAD_CAPS_EGRESS_AGGREGATE_COUNTERS = 64;
export const NDIS_GFT_OFFLOAD_CAPS_TRACK_TCP_FLOW_STATE = 128;
export const NDIS_GFT_OFFLOAD_CAPS_COMBINED_COUNTER_AND_STATE = 256;
export const NDIS_GFT_OFFLOAD_CAPS_INGRESS_WILDCARD_MATCH = 1;
export const NDIS_GFT_OFFLOAD_CAPS_EGRESS_WILDCARD_MATCH = 2;
export const NDIS_GFT_OFFLOAD_CAPS_INGRESS_EXACT_MATCH = 4;
export const NDIS_GFT_OFFLOAD_CAPS_EGRESS_EXACT_MATCH = 8;
export const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_INGRESS_WILDCARD_MATCH = 16;
export const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_EGRESS_WILDCARD_MATCH = 32;
export const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_INGRESS_EXACT_MATCH = 64;
export const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_EGRESS_EXACT_MATCH = 128;
export const NDIS_GFT_OFFLOAD_CAPS_POP = 1;
export const NDIS_GFT_OFFLOAD_CAPS_PUSH = 2;
export const NDIS_GFT_OFFLOAD_CAPS_MODIFY = 4;
export const NDIS_GFT_OFFLOAD_CAPS_IGNORE_ACTION_SUPPORTED = 8;
export const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT = 16;
export const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT = 32;
export const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = 64;
export const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE = 128;
export const NDIS_GFT_OFFLOAD_CAPS_COPY_ALL = 256;
export const NDIS_GFT_OFFLOAD_CAPS_COPY_FIRST = 512;
export const NDIS_GFT_OFFLOAD_CAPS_COPY_WHEN_TCP_FLAG_SET = 1024;
export const NDIS_GFT_OFFLOAD_CAPS_SAMPLE = 2048;
export const NDIS_GFT_OFFLOAD_CAPS_META_ACTION_BEFORE_HEADER_TRANSPOSITION = 4096;
export const NDIS_GFT_OFFLOAD_CAPS_META_ACTION_AFTER_HEADER_TRANSPOSITION = 8192;
export const NDIS_GFT_OFFLOAD_CAPS_PER_VPORT_EXCEPTION_VPORT = 16384;
export const NDIS_GFT_OFFLOAD_CAPS_DESIGNATED_EXCEPTION_VPORT = 32768;
export const NDIS_GFT_OFFLOAD_CAPS_DSCP_MASK = 65536;
export const NDIS_GFT_OFFLOAD_CAPS_8021P_PRIORITY_MASK = 131072;
export const NDIS_GFT_OFFLOAD_CAPS_ALLOW = 262144;
export const NDIS_GFT_OFFLOAD_CAPS_DROP = 524288;
export const NDIS_GFT_OFFLOAD_CAPABILITIES_REVISION_1 = 1;
export const NDIS_GFT_VPORT_ENABLE = 1;
export const NDIS_GFT_VPORT_PARSE_VXLAN = 2;
export const NDIS_GFT_VPORT_PARSE_VXLAN_NOT_IN_SRC_PORT_RANGE = 4;
export const NDIS_GFT_VPORT_ENABLE_STATE_CHANGED = 1048576;
export const NDIS_GFT_VPORT_EXCEPTION_VPORT_CHANGED = 2097152;
export const NDIS_GFT_VPORT_SAMPLING_RATE_CHANGED = 4194304;
export const NDIS_GFT_VPORT_DSCP_MASK_CHANGED = 8388608;
export const NDIS_GFT_VPORT_PRIORITY_MASK_CHANGED = 16777216;
export const NDIS_GFT_VPORT_VXLAN_SETTINGS_CHANGED = 33554432;
export const NDIS_GFT_VPORT_DSCP_FLAGS_CHANGED = 67108864;
export const NDIS_GFT_VPORT_PARAMS_CHANGE_MASK = 4293918720;
export const NDIS_GFT_VPORT_PARAMS_CUSTOM_PROVIDER_RESERVED = 1044480;
export const NDIS_GFT_VPORT_MAX_DSCP_MASK_COUNTER_OBJECTS = 64;
export const NDIS_GFT_VPORT_MAX_PRIORITY_MASK_COUNTER_OBJECTS = 8;
export const NDIS_GFT_VPORT_DSCP_GUARD_ENABLE_RX = 1;
export const NDIS_GFT_VPORT_DSCP_GUARD_ENABLE_TX = 2;
export const NDIS_GFT_VPORT_DSCP_MASK_ENABLE_RX = 4;
export const NDIS_GFT_VPORT_DSCP_MASK_ENABLE_TX = 8;
export const NDIS_GFT_VPORT_PARAMETERS_REVISION_1 = 1;
export const NDIS_QOS_DEFAULT_SQ_ID = 0;
export const NDIS_QOS_SQ_PARAMETERS_REVISION_1 = 1;
export const NDIS_QOS_SQ_PARAMETERS_REVISION_2 = 2;
export const NDIS_QOS_SQ_TRANSMIT_CAP_ENABLED = 1;
export const NDIS_QOS_SQ_TRANSMIT_RESERVATION_ENABLED = 2;
export const NDIS_QOS_SQ_RECEIVE_CAP_ENABLED = 4;
export const NDIS_QOS_SQ_PARAMETERS_ARRAY_REVISION_1 = 1;
export const NDIS_QOS_SQ_ARRAY_REVISION_1 = 1;
export const NDIS_QOS_OFFLOAD_CAPABILITIES_REVISION_1 = 1;
export const NDIS_QOS_OFFLOAD_CAPABILITIES_REVISION_2 = 2;
export const NDIS_QOS_OFFLOAD_CAPS_STANDARD_SQ = 1;
export const NDIS_QOS_OFFLOAD_CAPS_GFT_SQ = 2;
export const NDIS_QOS_SQ_STATS_REVISION_1 = 1;
export const NDIS_TIMESTAMP_CAPABILITIES_REVISION_1 = 1;
export const OID_TIMESTAMP_CAPABILITY = 10485761;
export const OID_TIMESTAMP_CURRENT_CONFIG = 10485762;
export const NDIS_HARDWARE_CROSSTIMESTAMP_REVISION_1 = 1;
export const OID_TIMESTAMP_GET_CROSSTIMESTAMP = 10485763;
export const NdisHashFunctionToeplitz = 1;
export const NdisHashFunctionReserved1 = 2;
export const NdisHashFunctionReserved2 = 4;
export const NdisHashFunctionReserved3 = 8;
export const NDIS_HASH_FUNCTION_MASK = 255;
export const NDIS_HASH_TYPE_MASK = 16776960;
export const NDIS_HASH_IPV4 = 256;
export const NDIS_HASH_TCP_IPV4 = 512;
export const NDIS_HASH_IPV6 = 1024;
export const NDIS_HASH_IPV6_EX = 2048;
export const NDIS_HASH_TCP_IPV6 = 4096;
export const NDIS_HASH_TCP_IPV6_EX = 8192;
export const NDIS_HASH_UDP_IPV4 = 16384;
export const NDIS_HASH_UDP_IPV6 = 32768;
export const NDIS_HASH_UDP_IPV6_EX = 65536;
export const DD_NDIS_DEVICE_NAME = "\Device\NDIS";
export const NDIS_MAXIMUM_PORTS = 16777216;
export const NDIS_OBJECT_REVISION_1 = 1;
export const NDIS_OFFLOAD_NOT_SUPPORTED = 0;
export const NDIS_OFFLOAD_SUPPORTED = 1;
export const NDIS_OFFLOAD_SET_NO_CHANGE = 0;
export const NDIS_OFFLOAD_SET_ON = 1;
export const NDIS_OFFLOAD_SET_OFF = 2;
export const NDIS_ENCAPSULATION_NOT_SUPPORTED = 0;
export const NDIS_ENCAPSULATION_NULL = 1;
export const NDIS_ENCAPSULATION_IEEE_802_3 = 2;
export const NDIS_ENCAPSULATION_IEEE_802_3_P_AND_Q = 4;
export const NDIS_ENCAPSULATION_IEEE_802_3_P_AND_Q_IN_OOB = 8;
export const NDIS_ENCAPSULATION_IEEE_LLC_SNAP_ROUTED = 16;
export const NDIS_OBJECT_TYPE_OID_REQUEST = 150;
export const NDIS_SUPPORT_NDIS686 = 1;
export const NDIS_SUPPORT_NDIS685 = 1;
export const NDIS_SUPPORT_NDIS684 = 1;
export const NDIS_SUPPORT_NDIS683 = 1;
export const NDIS_SUPPORT_NDIS682 = 1;
export const NDIS_SUPPORT_NDIS681 = 1;
export const NDIS_SUPPORT_NDIS680 = 1;
export const NDIS_SUPPORT_NDIS670 = 1;
export const NDIS_SUPPORT_NDIS660 = 1;
export const NDIS_SUPPORT_NDIS651 = 1;
export const NDIS_SUPPORT_NDIS650 = 1;
export const NDIS_SUPPORT_NDIS640 = 1;
export const NDIS_SUPPORT_NDIS630 = 1;
export const NDIS_SUPPORT_NDIS620 = 1;
export const NDIS_SUPPORT_NDIS61 = 1;
export const NDIS_SUPPORT_NDIS6 = 1;
export const NDK_ADAPTER_FLAG_IN_ORDER_DMA_SUPPORTED = 1;
export const NDK_ADAPTER_FLAG_RDMA_READ_SINK_NOT_REQUIRED = 2;
export const NDK_ADAPTER_FLAG_CQ_INTERRUPT_MODERATION_SUPPORTED = 4;
export const NDK_ADAPTER_FLAG_MULTI_ENGINE_SUPPORTED = 8;
export const NDK_ADAPTER_FLAG_RDMA_READ_LOCAL_INVALIDATE_SUPPORTED = 16;
export const NDK_ADAPTER_FLAG_CQ_RESIZE_SUPPORTED = 256;
export const NDK_ADAPTER_FLAG_LOOPBACK_CONNECTIONS_SUPPORTED = 65536;
export const NET_IF_OPER_STATUS_DOWN_NOT_AUTHENTICATED = 1;
export const NET_IF_OPER_STATUS_DOWN_NOT_MEDIA_CONNECTED = 2;
export const NET_IF_OPER_STATUS_DORMANT_PAUSED = 4;
export const NET_IF_OPER_STATUS_DORMANT_LOW_POWER = 8;
export const NET_IF_OID_IF_ALIAS = 1;
export const NET_IF_OID_COMPARTMENT_ID = 2;
export const NET_IF_OID_NETWORK_GUID = 3;
export const NET_IF_OID_IF_ENTRY = 4;
export const NET_SITEID_UNSPECIFIED = 0;
export const NET_SITEID_MAXUSER = 134217727;
export const NET_SITEID_MAXSYSTEM = 268435455;
export const NET_IFLUID_UNSPECIFIED = 0;
export const NIIF_HARDWARE_INTERFACE = 1;
export const NIIF_FILTER_INTERFACE = 2;
export const NIIF_NDIS_RESERVED1 = 4;
export const NIIF_NDIS_RESERVED2 = 8;
export const NIIF_NDIS_RESERVED3 = 16;
export const NIIF_NDIS_WDM_INTERFACE = 32;
export const NIIF_NDIS_ENDPOINT_INTERFACE = 64;
export const NIIF_NDIS_ISCSI_INTERFACE = 128;
export const NIIF_NDIS_RESERVED4 = 256;
export const IF_MAX_STRING_SIZE = 256;
export const IF_MAX_PHYS_ADDRESS_LENGTH = 32;
export const NET_IF_OPER_STATUS_UP = 1;
export const NET_IF_OPER_STATUS_DOWN = 2;
export const NET_IF_OPER_STATUS_TESTING = 3;
export const NET_IF_OPER_STATUS_UNKNOWN = 4;
export const NET_IF_OPER_STATUS_DORMANT = 5;
export const NET_IF_OPER_STATUS_NOT_PRESENT = 6;
export const NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = 7;
export const NET_IF_ADMIN_STATUS_UP = 1;
export const NET_IF_ADMIN_STATUS_DOWN = 2;
export const NET_IF_ADMIN_STATUS_TESTING = 3;
export const NET_IF_RCV_ADDRESS_TYPE_OTHER = 1;
export const NET_IF_RCV_ADDRESS_TYPE_VOLATILE = 2;
export const NET_IF_RCV_ADDRESS_TYPE_NON_VOLATILE = 3;
export const NET_IF_CONNECTION_DEDICATED = 1;
export const NET_IF_CONNECTION_PASSIVE = 2;
export const NET_IF_CONNECTION_DEMAND = 3;
export const NET_IF_CONNECTION_MAXIMUM = 4;
export const TUNNEL_TYPE_NONE = 0;
export const TUNNEL_TYPE_OTHER = 1;
export const TUNNEL_TYPE_DIRECT = 2;
export const TUNNEL_TYPE_6TO4 = 11;
export const TUNNEL_TYPE_ISATAP = 13;
export const TUNNEL_TYPE_TEREDO = 14;
export const TUNNEL_TYPE_IPHTTPS = 15;
export const NET_IF_ACCESS_LOOPBACK = 1;
export const NET_IF_ACCESS_BROADCAST = 2;
export const NET_IF_ACCESS_POINT_TO_POINT = 3;
export const NET_IF_ACCESS_POINT_TO_MULTI_POINT = 4;
export const NET_IF_ACCESS_MAXIMUM = 5;
export const NET_IF_DIRECTION_SENDRECEIVE = 0;
export const NET_IF_DIRECTION_SENDONLY = 1;
export const NET_IF_DIRECTION_RECEIVEONLY = 2;
export const NET_IF_DIRECTION_MAXIMUM = 3;
export const MediaConnectStateUnknown = 0;
export const MediaConnectStateConnected = 1;
export const MediaConnectStateDisconnected = 2;
export const MediaDuplexStateUnknown = 0;
export const MediaDuplexStateHalf = 1;
export const MediaDuplexStateFull = 2;
export const IF_ADMINISTRATIVE_DISABLED = 0;
export const IF_ADMINISTRATIVE_ENABLED = 1;
export const IF_ADMINISTRATIVE_DEMANDDIAL = 2;
export const IfOperStatusUp = 1;
export const IfOperStatusDown = 2;
export const IfOperStatusTesting = 3;
export const IfOperStatusUnknown = 4;
export const IfOperStatusDormant = 5;
export const IfOperStatusNotPresent = 6;
export const IfOperStatusLowerLayerDown = 7;
export const NdisRequestQueryInformation = 0;
export const NdisRequestSetInformation = 1;
export const NdisRequestQueryStatistics = 2;
export const NdisRequestOpen = 3;
export const NdisRequestClose = 4;
export const NdisRequestSend = 5;
export const NdisRequestTransferData = 6;
export const NdisRequestReset = 7;
export const NdisRequestGeneric1 = 8;
export const NdisRequestGeneric2 = 9;
export const NdisRequestGeneric3 = 10;
export const NdisRequestGeneric4 = 11;
export const NdisInterruptModerationUnknown = 0;
export const NdisInterruptModerationNotSupported = 1;
export const NdisInterruptModerationEnabled = 2;
export const NdisInterruptModerationDisabled = 3;
export const Ndis802_11StatusType_Authentication = 0;
export const Ndis802_11StatusType_MediaStreamMode = 1;
export const Ndis802_11StatusType_PMKID_CandidateList = 2;
export const Ndis802_11StatusTypeMax = 3;
export const Ndis802_11FH = 0;
export const Ndis802_11DS = 1;
export const Ndis802_11OFDM5 = 2;
export const Ndis802_11OFDM24 = 3;
export const Ndis802_11Automode = 4;
export const Ndis802_11NetworkTypeMax = 5;
export const Ndis802_11PowerModeCAM = 0;
export const Ndis802_11PowerModeMAX_PSP = 1;
export const Ndis802_11PowerModeFast_PSP = 2;
export const Ndis802_11PowerModeMax = 3;
export const Ndis802_11IBSS = 0;
export const Ndis802_11Infrastructure = 1;
export const Ndis802_11AutoUnknown = 2;
export const Ndis802_11InfrastructureMax = 3;
export const Ndis802_11AuthModeOpen = 0;
export const Ndis802_11AuthModeShared = 1;
export const Ndis802_11AuthModeAutoSwitch = 2;
export const Ndis802_11AuthModeWPA = 3;
export const Ndis802_11AuthModeWPAPSK = 4;
export const Ndis802_11AuthModeWPANone = 5;
export const Ndis802_11AuthModeWPA2 = 6;
export const Ndis802_11AuthModeWPA2PSK = 7;
export const Ndis802_11AuthModeWPA3 = 8;
export const Ndis802_11AuthModeWPA3Ent192 = 8;
export const Ndis802_11AuthModeWPA3SAE = 9;
export const Ndis802_11AuthModeWPA3Ent = 10;
export const Ndis802_11AuthModeMax = 11;
export const Ndis802_11PrivFilterAcceptAll = 0;
export const Ndis802_11PrivFilter8021xWEP = 1;
export const Ndis802_11WEPEnabled = 0;
export const Ndis802_11Encryption1Enabled = 0;
export const Ndis802_11WEPDisabled = 1;
export const Ndis802_11EncryptionDisabled = 1;
export const Ndis802_11WEPKeyAbsent = 2;
export const Ndis802_11Encryption1KeyAbsent = 2;
export const Ndis802_11WEPNotSupported = 3;
export const Ndis802_11EncryptionNotSupported = 3;
export const Ndis802_11Encryption2Enabled = 4;
export const Ndis802_11Encryption2KeyAbsent = 5;
export const Ndis802_11Encryption3Enabled = 6;
export const Ndis802_11Encryption3KeyAbsent = 7;
export const Ndis802_11ReloadWEPKeys = 0;
export const Ndis802_11MediaStreamOff = 0;
export const Ndis802_11MediaStreamOn = 1;
export const Ndis802_11RadioStatusOn = 0;
export const Ndis802_11RadioStatusHardwareOff = 1;
export const Ndis802_11RadioStatusSoftwareOff = 2;
export const Ndis802_11RadioStatusHardwareSoftwareOff = 3;
export const Ndis802_11RadioStatusMax = 4;
export const AUTHENTICATE = 1;
export const ENCRYPT = 2;
export const OFFLOAD_IPSEC_CONF_NONE = 0;
export const OFFLOAD_IPSEC_CONF_DES = 1;
export const OFFLOAD_IPSEC_CONF_RESERVED = 2;
export const OFFLOAD_IPSEC_CONF_3_DES = 3;
export const OFFLOAD_IPSEC_CONF_MAX = 4;
export const OFFLOAD_IPSEC_INTEGRITY_NONE = 0;
export const OFFLOAD_IPSEC_INTEGRITY_MD5 = 1;
export const OFFLOAD_IPSEC_INTEGRITY_SHA = 2;
export const OFFLOAD_IPSEC_INTEGRITY_MAX = 3;
export const OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_IKE = 0;
export const OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_OTHER = 1;
export const NdisMedium802_3 = 0;
export const NdisMedium802_5 = 1;
export const NdisMediumFddi = 2;
export const NdisMediumWan = 3;
export const NdisMediumLocalTalk = 4;
export const NdisMediumDix = 5;
export const NdisMediumArcnetRaw = 6;
export const NdisMediumArcnet878_2 = 7;
export const NdisMediumAtm = 8;
export const NdisMediumWirelessWan = 9;
export const NdisMediumIrda = 10;
export const NdisMediumBpc = 11;
export const NdisMediumCoWan = 12;
export const NdisMedium1394 = 13;
export const NdisMediumInfiniBand = 14;
export const NdisMediumTunnel = 15;
export const NdisMediumNative802_11 = 16;
export const NdisMediumLoopback = 17;
export const NdisMediumWiMAX = 18;
export const NdisMediumIP = 19;
export const NdisMediumMax = 20;
export const NdisPhysicalMediumUnspecified = 0;
export const NdisPhysicalMediumWirelessLan = 1;
export const NdisPhysicalMediumCableModem = 2;
export const NdisPhysicalMediumPhoneLine = 3;
export const NdisPhysicalMediumPowerLine = 4;
export const NdisPhysicalMediumDSL = 5;
export const NdisPhysicalMediumFibreChannel = 6;
export const NdisPhysicalMedium1394 = 7;
export const NdisPhysicalMediumWirelessWan = 8;
export const NdisPhysicalMediumNative802_11 = 9;
export const NdisPhysicalMediumBluetooth = 10;
export const NdisPhysicalMediumInfiniband = 11;
export const NdisPhysicalMediumWiMax = 12;
export const NdisPhysicalMediumUWB = 13;
export const NdisPhysicalMedium802_3 = 14;
export const NdisPhysicalMedium802_5 = 15;
export const NdisPhysicalMediumIrda = 16;
export const NdisPhysicalMediumWiredWAN = 17;
export const NdisPhysicalMediumWiredCoWan = 18;
export const NdisPhysicalMediumOther = 19;
export const NdisPhysicalMediumNative802_15_4 = 20;
export const NdisPhysicalMediumMax = 21;
export const NdisHardwareStatusReady = 0;
export const NdisHardwareStatusInitializing = 1;
export const NdisHardwareStatusReset = 2;
export const NdisHardwareStatusClosing = 3;
export const NdisHardwareStatusNotReady = 4;
export const NdisDeviceStateUnspecified = 0;
export const NdisDeviceStateD0 = 1;
export const NdisDeviceStateD1 = 2;
export const NdisDeviceStateD2 = 3;
export const NdisDeviceStateD3 = 4;
export const NdisDeviceStateMaximum = 5;
export const NdisFddiTypeIsolated = 1;
export const NdisFddiTypeLocalA = 2;
export const NdisFddiTypeLocalB = 3;
export const NdisFddiTypeLocalAB = 4;
export const NdisFddiTypeLocalS = 5;
export const NdisFddiTypeWrapA = 6;
export const NdisFddiTypeWrapB = 7;
export const NdisFddiTypeWrapAB = 8;
export const NdisFddiTypeWrapS = 9;
export const NdisFddiTypeCWrapA = 10;
export const NdisFddiTypeCWrapB = 11;
export const NdisFddiTypeCWrapS = 12;
export const NdisFddiTypeThrough = 13;
export const NdisFddiRingIsolated = 1;
export const NdisFddiRingNonOperational = 2;
export const NdisFddiRingOperational = 3;
export const NdisFddiRingDetect = 4;
export const NdisFddiRingNonOperationalDup = 5;
export const NdisFddiRingOperationalDup = 6;
export const NdisFddiRingDirected = 7;
export const NdisFddiRingTrace = 8;
export const NdisFddiStateOff = 1;
export const NdisFddiStateBreak = 2;
export const NdisFddiStateTrace = 3;
export const NdisFddiStateConnect = 4;
export const NdisFddiStateNext = 5;
export const NdisFddiStateSignal = 6;
export const NdisFddiStateJoin = 7;
export const NdisFddiStateVerify = 8;
export const NdisFddiStateActive = 9;
export const NdisFddiStateMaintenance = 10;
export const NdisWanMediumHub = 0;
export const NdisWanMediumX_25 = 1;
export const NdisWanMediumIsdn = 2;
export const NdisWanMediumSerial = 3;
export const NdisWanMediumFrameRelay = 4;
export const NdisWanMediumAtm = 5;
export const NdisWanMediumSonet = 6;
export const NdisWanMediumSW56K = 7;
export const NdisWanMediumPPTP = 8;
export const NdisWanMediumL2TP = 9;
export const NdisWanMediumIrda = 10;
export const NdisWanMediumParallel = 11;
export const NdisWanMediumPppoe = 12;
export const NdisWanMediumSSTP = 13;
export const NdisWanMediumAgileVPN = 14;
export const NdisWanMediumGre = 15;
export const NdisWanMediumSubTypeMax = 16;
export const NdisWanHeaderNative = 0;
export const NdisWanHeaderEthernet = 1;
export const NdisWanRaw = 0;
export const NdisWanErrorControl = 1;
export const NdisWanReliable = 2;
export const NdisRingStateOpened = 1;
export const NdisRingStateClosed = 2;
export const NdisRingStateOpening = 3;
export const NdisRingStateClosing = 4;
export const NdisRingStateOpenFailure = 5;
export const NdisRingStateRingFailure = 6;
export const NdisMediaStateConnected = 0;
export const NdisMediaStateDisconnected = 1;
export const NdisPauseFunctionsUnsupported = 0;
export const NdisPauseFunctionsSendOnly = 1;
export const NdisPauseFunctionsReceiveOnly = 2;
export const NdisPauseFunctionsSendAndReceive = 3;
export const NdisPauseFunctionsUnknown = 4;
export const NdisPortTypeUndefined = 0;
export const NdisPortTypeBridge = 1;
export const NdisPortTypeRasConnection = 2;
export const NdisPortType8021xSupplicant = 3;
export const NdisPortTypeMax = 4;
export const NdisPortAuthorizationUnknown = 0;
export const NdisPortAuthorized = 1;
export const NdisPortUnauthorized = 2;
export const NdisPortReauthorizing = 3;
export const NdisPortControlStateUnknown = 0;
export const NdisPortControlStateControlled = 1;
export const NdisPortControlStateUncontrolled = 2;
export const NdisPossibleNetworkChange = 1;
export const NdisDefinitelyNetworkChange = 2;
export const NdisNetworkChangeFromMediaConnect = 3;
export const NdisNetworkChangeMax = 4;
export const NdisProcessorVendorUnknown = 0;
export const NdisProcessorVendorGenuinIntel = 1;
export const NdisProcessorVendorGenuineIntel = 1;
export const NdisProcessorVendorAuthenticAMD = 2;
export const NdkUndefined = 0;
export const NdkiWarp = 1;
export const NdkInfiniBand = 2;
export const NdkRoCE = 3;
export const NdkRoCEv2 = 4;
export const NdkMaxTechnology = 5;

// Structs

/**
 * Windows.Win32.NetworkManagement.Ndis.NET_IF_RCV_ADDRESS_LH (size: 8)
 */
export interface NET_IF_RCV_ADDRESS_LH {
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_RCV_ADDRESS_TYPE */
  ifRcvAddressType: NET_IF_RCV_ADDRESS_TYPE;
  /** u16 */
  ifRcvAddressLength: number;
  /** u16 */
  ifRcvAddressOffset: number;
}

export const sizeofNET_IF_RCV_ADDRESS_LH = 8;

export function allocNET_IF_RCV_ADDRESS_LH(data?: Partial<NET_IF_RCV_ADDRESS_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_IF_RCV_ADDRESS_LH);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ifRcvAddressType !== undefined) view.setInt32(0, Number(data.ifRcvAddressType), true);
  // 0x04: u16
  if (data?.ifRcvAddressLength !== undefined) view.setUint16(4, Number(data.ifRcvAddressLength), true);
  // 0x06: u16
  if (data?.ifRcvAddressOffset !== undefined) view.setUint16(6, Number(data.ifRcvAddressOffset), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NET_IF_ALIAS_LH (size: 8)
 */
export interface NET_IF_ALIAS_LH {
  /** u16 */
  ifAliasLength: number;
  /** u16 */
  ifAliasOffset: number;
}

export const sizeofNET_IF_ALIAS_LH = 8;

export function allocNET_IF_ALIAS_LH(data?: Partial<NET_IF_ALIAS_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_IF_ALIAS_LH);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ifAliasLength !== undefined) view.setUint16(0, Number(data.ifAliasLength), true);
  // 0x02: u16
  if (data?.ifAliasOffset !== undefined) view.setUint16(2, Number(data.ifAliasOffset), true);
  // 0x04: pad4
  return buf;
}

/**
 * _Info_e__Struct (size: 8)
 */
export interface _Info_e__Struct {
  /** u64 */
  _bitfield: Deno.PointerValue;
}

export const sizeof_Info_e__Struct = 8;

export function alloc_Info_e__Struct(data?: Partial<_Info_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Info_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?._bitfield !== undefined) view.setBigUint64(0, BigInt(data._bitfield), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH (size: 16)
 */
export interface NET_LUID_LH {
  /** u64 */
  Value: Deno.PointerValue;
  /** _Info_e__Struct */
  Info: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNET_LUID_LH = 16;

export function allocNET_LUID_LH(data?: Partial<NET_LUID_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_LUID_LH);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Value !== undefined) view.setBigUint64(0, BigInt(data.Value), true);
  // 0x08: pointer
  if (data?.Info !== undefined) view.setBigUint64(8, data.Info === null ? 0n : BigInt(util.toPointer(data.Info)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NET_PHYSICAL_LOCATION_LH (size: 16)
 */
export interface NET_PHYSICAL_LOCATION_LH {
  /** u32 */
  BusNumber: number;
  /** u32 */
  SlotNumber: number;
  /** u32 */
  FunctionNumber: number;
}

export const sizeofNET_PHYSICAL_LOCATION_LH = 16;

export function allocNET_PHYSICAL_LOCATION_LH(data?: Partial<NET_PHYSICAL_LOCATION_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofNET_PHYSICAL_LOCATION_LH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BusNumber !== undefined) view.setUint32(0, Number(data.BusNumber), true);
  // 0x04: u32
  if (data?.SlotNumber !== undefined) view.setUint32(4, Number(data.SlotNumber), true);
  // 0x08: u32
  if (data?.FunctionNumber !== undefined) view.setUint32(8, Number(data.FunctionNumber), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.IF_COUNTED_STRING_LH (size: 16)
 */
export interface IF_COUNTED_STRING_LH {
  /** u16 */
  Length: number;
  /** array */
  String: Deno.PointerValue | null;
}

export const sizeofIF_COUNTED_STRING_LH = 16;

export function allocIF_COUNTED_STRING_LH(data?: Partial<IF_COUNTED_STRING_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofIF_COUNTED_STRING_LH);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.String !== undefined) view.setBigUint64(8, data.String === null ? 0n : BigInt(util.toPointer(data.String)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.IF_PHYSICAL_ADDRESS_LH (size: 16)
 */
export interface IF_PHYSICAL_ADDRESS_LH {
  /** u16 */
  Length: number;
  /** array */
  Address: Deno.PointerValue | null;
}

export const sizeofIF_PHYSICAL_ADDRESS_LH = 16;

export function allocIF_PHYSICAL_ADDRESS_LH(data?: Partial<IF_PHYSICAL_ADDRESS_LH>): Uint8Array {
  const buf = new Uint8Array(sizeofIF_PHYSICAL_ADDRESS_LH);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_INTERFACE_INFORMATION (size: 232)
 */
export interface NDIS_INTERFACE_INFORMATION {
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_OPER_STATUS */
  ifOperStatus: NET_IF_OPER_STATUS;
  /** u32 */
  ifOperStatusFlags: number;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_MEDIA_CONNECT_STATE */
  MediaConnectState: NET_IF_MEDIA_CONNECT_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_MEDIA_DUPLEX_STATE */
  MediaDuplexState: NET_IF_MEDIA_DUPLEX_STATE;
  /** u32 */
  ifMtu: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  ifPromiscuousMode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  ifDeviceWakeUpEnable: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  XmitLinkSpeed: Deno.PointerValue;
  /** u64 */
  RcvLinkSpeed: Deno.PointerValue;
  /** u64 */
  ifLastChange: Deno.PointerValue;
  /** u64 */
  ifCounterDiscontinuityTime: Deno.PointerValue;
  /** u64 */
  ifInUnknownProtos: Deno.PointerValue;
  /** u64 */
  ifInDiscards: Deno.PointerValue;
  /** u64 */
  ifInErrors: Deno.PointerValue;
  /** u64 */
  ifHCInOctets: Deno.PointerValue;
  /** u64 */
  ifHCInUcastPkts: Deno.PointerValue;
  /** u64 */
  ifHCInMulticastPkts: Deno.PointerValue;
  /** u64 */
  ifHCInBroadcastPkts: Deno.PointerValue;
  /** u64 */
  ifHCOutOctets: Deno.PointerValue;
  /** u64 */
  ifHCOutUcastPkts: Deno.PointerValue;
  /** u64 */
  ifHCOutMulticastPkts: Deno.PointerValue;
  /** u64 */
  ifHCOutBroadcastPkts: Deno.PointerValue;
  /** u64 */
  ifOutErrors: Deno.PointerValue;
  /** u64 */
  ifOutDiscards: Deno.PointerValue;
  /** u64 */
  ifHCInUcastOctets: Deno.PointerValue;
  /** u64 */
  ifHCInMulticastOctets: Deno.PointerValue;
  /** u64 */
  ifHCInBroadcastOctets: Deno.PointerValue;
  /** u64 */
  ifHCOutUcastOctets: Deno.PointerValue;
  /** u64 */
  ifHCOutMulticastOctets: Deno.PointerValue;
  /** u64 */
  ifHCOutBroadcastOctets: Deno.PointerValue;
  /** u32 */
  CompartmentId: number;
  /** u32 */
  SupportedStatistics: number;
}

export const sizeofNDIS_INTERFACE_INFORMATION = 232;

export function allocNDIS_INTERFACE_INFORMATION(data?: Partial<NDIS_INTERFACE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_INTERFACE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ifOperStatus !== undefined) view.setInt32(0, Number(data.ifOperStatus), true);
  // 0x04: u32
  if (data?.ifOperStatusFlags !== undefined) view.setUint32(4, Number(data.ifOperStatusFlags), true);
  // 0x08: i32
  if (data?.MediaConnectState !== undefined) view.setInt32(8, Number(data.MediaConnectState), true);
  // 0x0c: i32
  if (data?.MediaDuplexState !== undefined) view.setInt32(12, Number(data.MediaDuplexState), true);
  // 0x10: u32
  if (data?.ifMtu !== undefined) view.setUint32(16, Number(data.ifMtu), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ifPromiscuousMode !== undefined) view.setBigUint64(24, data.ifPromiscuousMode === null ? 0n : BigInt(util.toPointer(data.ifPromiscuousMode)), true);
  // 0x20: pointer
  if (data?.ifDeviceWakeUpEnable !== undefined) view.setBigUint64(32, data.ifDeviceWakeUpEnable === null ? 0n : BigInt(util.toPointer(data.ifDeviceWakeUpEnable)), true);
  // 0x28: u64
  if (data?.XmitLinkSpeed !== undefined) view.setBigUint64(40, BigInt(data.XmitLinkSpeed), true);
  // 0x30: u64
  if (data?.RcvLinkSpeed !== undefined) view.setBigUint64(48, BigInt(data.RcvLinkSpeed), true);
  // 0x38: u64
  if (data?.ifLastChange !== undefined) view.setBigUint64(56, BigInt(data.ifLastChange), true);
  // 0x40: u64
  if (data?.ifCounterDiscontinuityTime !== undefined) view.setBigUint64(64, BigInt(data.ifCounterDiscontinuityTime), true);
  // 0x48: u64
  if (data?.ifInUnknownProtos !== undefined) view.setBigUint64(72, BigInt(data.ifInUnknownProtos), true);
  // 0x50: u64
  if (data?.ifInDiscards !== undefined) view.setBigUint64(80, BigInt(data.ifInDiscards), true);
  // 0x58: u64
  if (data?.ifInErrors !== undefined) view.setBigUint64(88, BigInt(data.ifInErrors), true);
  // 0x60: u64
  if (data?.ifHCInOctets !== undefined) view.setBigUint64(96, BigInt(data.ifHCInOctets), true);
  // 0x68: u64
  if (data?.ifHCInUcastPkts !== undefined) view.setBigUint64(104, BigInt(data.ifHCInUcastPkts), true);
  // 0x70: u64
  if (data?.ifHCInMulticastPkts !== undefined) view.setBigUint64(112, BigInt(data.ifHCInMulticastPkts), true);
  // 0x78: u64
  if (data?.ifHCInBroadcastPkts !== undefined) view.setBigUint64(120, BigInt(data.ifHCInBroadcastPkts), true);
  // 0x80: u64
  if (data?.ifHCOutOctets !== undefined) view.setBigUint64(128, BigInt(data.ifHCOutOctets), true);
  // 0x88: u64
  if (data?.ifHCOutUcastPkts !== undefined) view.setBigUint64(136, BigInt(data.ifHCOutUcastPkts), true);
  // 0x90: u64
  if (data?.ifHCOutMulticastPkts !== undefined) view.setBigUint64(144, BigInt(data.ifHCOutMulticastPkts), true);
  // 0x98: u64
  if (data?.ifHCOutBroadcastPkts !== undefined) view.setBigUint64(152, BigInt(data.ifHCOutBroadcastPkts), true);
  // 0xa0: u64
  if (data?.ifOutErrors !== undefined) view.setBigUint64(160, BigInt(data.ifOutErrors), true);
  // 0xa8: u64
  if (data?.ifOutDiscards !== undefined) view.setBigUint64(168, BigInt(data.ifOutDiscards), true);
  // 0xb0: u64
  if (data?.ifHCInUcastOctets !== undefined) view.setBigUint64(176, BigInt(data.ifHCInUcastOctets), true);
  // 0xb8: u64
  if (data?.ifHCInMulticastOctets !== undefined) view.setBigUint64(184, BigInt(data.ifHCInMulticastOctets), true);
  // 0xc0: u64
  if (data?.ifHCInBroadcastOctets !== undefined) view.setBigUint64(192, BigInt(data.ifHCInBroadcastOctets), true);
  // 0xc8: u64
  if (data?.ifHCOutUcastOctets !== undefined) view.setBigUint64(200, BigInt(data.ifHCOutUcastOctets), true);
  // 0xd0: u64
  if (data?.ifHCOutMulticastOctets !== undefined) view.setBigUint64(208, BigInt(data.ifHCOutMulticastOctets), true);
  // 0xd8: u64
  if (data?.ifHCOutBroadcastOctets !== undefined) view.setBigUint64(216, BigInt(data.ifHCOutBroadcastOctets), true);
  // 0xe0: u32
  if (data?.CompartmentId !== undefined) view.setUint32(224, Number(data.CompartmentId), true);
  // 0xe4: u32
  if (data?.SupportedStatistics !== undefined) view.setUint32(228, Number(data.SupportedStatistics), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_STATISTICS_VALUE (size: 16)
 */
export interface NDIS_STATISTICS_VALUE {
  /** u32 */
  Oid: number;
  /** u32 */
  DataLength: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofNDIS_STATISTICS_VALUE = 16;

export function allocNDIS_STATISTICS_VALUE(data?: Partial<NDIS_STATISTICS_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_STATISTICS_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Oid !== undefined) view.setUint32(0, Number(data.Oid), true);
  // 0x04: u32
  if (data?.DataLength !== undefined) view.setUint32(4, Number(data.DataLength), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_STATISTICS_VALUE_EX (size: 24)
 */
export interface NDIS_STATISTICS_VALUE_EX {
  /** u32 */
  Oid: number;
  /** u32 */
  DataLength: number;
  /** u32 */
  Length: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofNDIS_STATISTICS_VALUE_EX = 24;

export function allocNDIS_STATISTICS_VALUE_EX(data?: Partial<NDIS_STATISTICS_VALUE_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_STATISTICS_VALUE_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Oid !== undefined) view.setUint32(0, Number(data.Oid), true);
  // 0x04: u32
  if (data?.DataLength !== undefined) view.setUint32(4, Number(data.DataLength), true);
  // 0x08: u32
  if (data?.Length !== undefined) view.setUint32(8, Number(data.Length), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_VAR_DATA_DESC (size: 16)
 */
export interface NDIS_VAR_DATA_DESC {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** usize */
  Offset: Deno.PointerValue;
}

export const sizeofNDIS_VAR_DATA_DESC = 16;

export function allocNDIS_VAR_DATA_DESC(data?: Partial<NDIS_VAR_DATA_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_VAR_DATA_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.Offset !== undefined) view.setBigUint64(8, BigInt(data.Offset), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER (size: 8)
 */
export interface NDIS_OBJECT_HEADER {
  /** u8 */
  Type: number;
  /** u8 */
  Revision: number;
  /** u16 */
  Size: number;
}

export const sizeofNDIS_OBJECT_HEADER = 8;

export function allocNDIS_OBJECT_HEADER(data?: Partial<NDIS_OBJECT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_OBJECT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Type !== undefined) view.setUint8(0, Number(data.Type));
  // 0x01: u8
  if (data?.Revision !== undefined) view.setUint8(1, Number(data.Revision));
  // 0x02: u16
  if (data?.Size !== undefined) view.setUint16(2, Number(data.Size), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_STATISTICS_INFO (size: 160)
 */
export interface NDIS_STATISTICS_INFO {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SupportedStatistics: number;
  /** u64 */
  ifInDiscards: Deno.PointerValue;
  /** u64 */
  ifInErrors: Deno.PointerValue;
  /** u64 */
  ifHCInOctets: Deno.PointerValue;
  /** u64 */
  ifHCInUcastPkts: Deno.PointerValue;
  /** u64 */
  ifHCInMulticastPkts: Deno.PointerValue;
  /** u64 */
  ifHCInBroadcastPkts: Deno.PointerValue;
  /** u64 */
  ifHCOutOctets: Deno.PointerValue;
  /** u64 */
  ifHCOutUcastPkts: Deno.PointerValue;
  /** u64 */
  ifHCOutMulticastPkts: Deno.PointerValue;
  /** u64 */
  ifHCOutBroadcastPkts: Deno.PointerValue;
  /** u64 */
  ifOutErrors: Deno.PointerValue;
  /** u64 */
  ifOutDiscards: Deno.PointerValue;
  /** u64 */
  ifHCInUcastOctets: Deno.PointerValue;
  /** u64 */
  ifHCInMulticastOctets: Deno.PointerValue;
  /** u64 */
  ifHCInBroadcastOctets: Deno.PointerValue;
  /** u64 */
  ifHCOutUcastOctets: Deno.PointerValue;
  /** u64 */
  ifHCOutMulticastOctets: Deno.PointerValue;
  /** u64 */
  ifHCOutBroadcastOctets: Deno.PointerValue;
}

export const sizeofNDIS_STATISTICS_INFO = 160;

export function allocNDIS_STATISTICS_INFO(data?: Partial<NDIS_STATISTICS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_STATISTICS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.SupportedStatistics !== undefined) view.setUint32(8, Number(data.SupportedStatistics), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.ifInDiscards !== undefined) view.setBigUint64(16, BigInt(data.ifInDiscards), true);
  // 0x18: u64
  if (data?.ifInErrors !== undefined) view.setBigUint64(24, BigInt(data.ifInErrors), true);
  // 0x20: u64
  if (data?.ifHCInOctets !== undefined) view.setBigUint64(32, BigInt(data.ifHCInOctets), true);
  // 0x28: u64
  if (data?.ifHCInUcastPkts !== undefined) view.setBigUint64(40, BigInt(data.ifHCInUcastPkts), true);
  // 0x30: u64
  if (data?.ifHCInMulticastPkts !== undefined) view.setBigUint64(48, BigInt(data.ifHCInMulticastPkts), true);
  // 0x38: u64
  if (data?.ifHCInBroadcastPkts !== undefined) view.setBigUint64(56, BigInt(data.ifHCInBroadcastPkts), true);
  // 0x40: u64
  if (data?.ifHCOutOctets !== undefined) view.setBigUint64(64, BigInt(data.ifHCOutOctets), true);
  // 0x48: u64
  if (data?.ifHCOutUcastPkts !== undefined) view.setBigUint64(72, BigInt(data.ifHCOutUcastPkts), true);
  // 0x50: u64
  if (data?.ifHCOutMulticastPkts !== undefined) view.setBigUint64(80, BigInt(data.ifHCOutMulticastPkts), true);
  // 0x58: u64
  if (data?.ifHCOutBroadcastPkts !== undefined) view.setBigUint64(88, BigInt(data.ifHCOutBroadcastPkts), true);
  // 0x60: u64
  if (data?.ifOutErrors !== undefined) view.setBigUint64(96, BigInt(data.ifOutErrors), true);
  // 0x68: u64
  if (data?.ifOutDiscards !== undefined) view.setBigUint64(104, BigInt(data.ifOutDiscards), true);
  // 0x70: u64
  if (data?.ifHCInUcastOctets !== undefined) view.setBigUint64(112, BigInt(data.ifHCInUcastOctets), true);
  // 0x78: u64
  if (data?.ifHCInMulticastOctets !== undefined) view.setBigUint64(120, BigInt(data.ifHCInMulticastOctets), true);
  // 0x80: u64
  if (data?.ifHCInBroadcastOctets !== undefined) view.setBigUint64(128, BigInt(data.ifHCInBroadcastOctets), true);
  // 0x88: u64
  if (data?.ifHCOutUcastOctets !== undefined) view.setBigUint64(136, BigInt(data.ifHCOutUcastOctets), true);
  // 0x90: u64
  if (data?.ifHCOutMulticastOctets !== undefined) view.setBigUint64(144, BigInt(data.ifHCOutMulticastOctets), true);
  // 0x98: u64
  if (data?.ifHCOutBroadcastOctets !== undefined) view.setBigUint64(152, BigInt(data.ifHCOutBroadcastOctets), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_INTERRUPT_MODERATION_PARAMETERS (size: 16)
 */
export interface NDIS_INTERRUPT_MODERATION_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_INTERRUPT_MODERATION */
  InterruptModeration: NDIS_INTERRUPT_MODERATION;
}

export const sizeofNDIS_INTERRUPT_MODERATION_PARAMETERS = 16;

export function allocNDIS_INTERRUPT_MODERATION_PARAMETERS(data?: Partial<NDIS_INTERRUPT_MODERATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_INTERRUPT_MODERATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: i32
  if (data?.InterruptModeration !== undefined) view.setInt32(12, Number(data.InterruptModeration), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES (size: 24)
 */
export interface NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  TimeoutArrayLength: number;
  /** array */
  TimeoutArray: Deno.PointerValue | null;
}

export const sizeofNDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES = 24;

export function allocNDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES(data?: Partial<NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.TimeoutArrayLength !== undefined) view.setUint32(12, Number(data.TimeoutArrayLength), true);
  // 0x10: pointer
  if (data?.TimeoutArray !== undefined) view.setBigUint64(16, data.TimeoutArray === null ? 0n : BigInt(util.toPointer(data.TimeoutArray)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_PCI_DEVICE_CUSTOM_PROPERTIES (size: 56)
 */
export interface NDIS_PCI_DEVICE_CUSTOM_PROPERTIES {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DeviceType: number;
  /** u32 */
  CurrentSpeedAndMode: number;
  /** u32 */
  CurrentPayloadSize: number;
  /** u32 */
  MaxPayloadSize: number;
  /** u32 */
  MaxReadRequestSize: number;
  /** u32 */
  CurrentLinkSpeed: number;
  /** u32 */
  CurrentLinkWidth: number;
  /** u32 */
  MaxLinkSpeed: number;
  /** u32 */
  MaxLinkWidth: number;
  /** u32 */
  PciExpressVersion: number;
  /** u32 */
  InterruptType: number;
  /** u32 */
  MaxInterruptMessages: number;
}

export const sizeofNDIS_PCI_DEVICE_CUSTOM_PROPERTIES = 56;

export function allocNDIS_PCI_DEVICE_CUSTOM_PROPERTIES(data?: Partial<NDIS_PCI_DEVICE_CUSTOM_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_PCI_DEVICE_CUSTOM_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.DeviceType !== undefined) view.setUint32(8, Number(data.DeviceType), true);
  // 0x0c: u32
  if (data?.CurrentSpeedAndMode !== undefined) view.setUint32(12, Number(data.CurrentSpeedAndMode), true);
  // 0x10: u32
  if (data?.CurrentPayloadSize !== undefined) view.setUint32(16, Number(data.CurrentPayloadSize), true);
  // 0x14: u32
  if (data?.MaxPayloadSize !== undefined) view.setUint32(20, Number(data.MaxPayloadSize), true);
  // 0x18: u32
  if (data?.MaxReadRequestSize !== undefined) view.setUint32(24, Number(data.MaxReadRequestSize), true);
  // 0x1c: u32
  if (data?.CurrentLinkSpeed !== undefined) view.setUint32(28, Number(data.CurrentLinkSpeed), true);
  // 0x20: u32
  if (data?.CurrentLinkWidth !== undefined) view.setUint32(32, Number(data.CurrentLinkWidth), true);
  // 0x24: u32
  if (data?.MaxLinkSpeed !== undefined) view.setUint32(36, Number(data.MaxLinkSpeed), true);
  // 0x28: u32
  if (data?.MaxLinkWidth !== undefined) view.setUint32(40, Number(data.MaxLinkWidth), true);
  // 0x2c: u32
  if (data?.PciExpressVersion !== undefined) view.setUint32(44, Number(data.PciExpressVersion), true);
  // 0x30: u32
  if (data?.InterruptType !== undefined) view.setUint32(48, Number(data.InterruptType), true);
  // 0x34: u32
  if (data?.MaxInterruptMessages !== undefined) view.setUint32(52, Number(data.MaxInterruptMessages), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_STATUS_INDICATION (size: 8)
 */
export interface NDIS_802_11_STATUS_INDICATION {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_STATUS_TYPE */
  StatusType: NDIS_802_11_STATUS_TYPE;
}

export const sizeofNDIS_802_11_STATUS_INDICATION = 8;

export function allocNDIS_802_11_STATUS_INDICATION(data?: Partial<NDIS_802_11_STATUS_INDICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_STATUS_INDICATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.StatusType !== undefined) view.setInt32(0, Number(data.StatusType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_AUTHENTICATION_REQUEST (size: 24)
 */
export interface NDIS_802_11_AUTHENTICATION_REQUEST {
  /** u32 */
  Length: number;
  /** array */
  Bssid: Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofNDIS_802_11_AUTHENTICATION_REQUEST = 24;

export function allocNDIS_802_11_AUTHENTICATION_REQUEST(data?: Partial<NDIS_802_11_AUTHENTICATION_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_AUTHENTICATION_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Bssid !== undefined) view.setBigUint64(8, data.Bssid === null ? 0n : BigInt(util.toPointer(data.Bssid)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.PMKID_CANDIDATE (size: 16)
 */
export interface PMKID_CANDIDATE {
  /** array */
  BSSID: Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofPMKID_CANDIDATE = 16;

export function allocPMKID_CANDIDATE(data?: Partial<PMKID_CANDIDATE>): Uint8Array {
  const buf = new Uint8Array(sizeofPMKID_CANDIDATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(0, data.BSSID === null ? 0n : BigInt(util.toPointer(data.BSSID)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_PMKID_CANDIDATE_LIST (size: 16)
 */
export interface NDIS_802_11_PMKID_CANDIDATE_LIST {
  /** u32 */
  Version: number;
  /** u32 */
  NumCandidates: number;
  /** array */
  CandidateList: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_PMKID_CANDIDATE_LIST = 16;

export function allocNDIS_802_11_PMKID_CANDIDATE_LIST(data?: Partial<NDIS_802_11_PMKID_CANDIDATE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_PMKID_CANDIDATE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.NumCandidates !== undefined) view.setUint32(4, Number(data.NumCandidates), true);
  // 0x08: pointer
  if (data?.CandidateList !== undefined) view.setBigUint64(8, data.CandidateList === null ? 0n : BigInt(util.toPointer(data.CandidateList)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_NETWORK_TYPE_LIST (size: 16)
 */
export interface NDIS_802_11_NETWORK_TYPE_LIST {
  /** u32 */
  NumberOfItems: number;
  /** array */
  NetworkType: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_NETWORK_TYPE_LIST = 16;

export function allocNDIS_802_11_NETWORK_TYPE_LIST(data?: Partial<NDIS_802_11_NETWORK_TYPE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_NETWORK_TYPE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfItems !== undefined) view.setUint32(0, Number(data.NumberOfItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.NetworkType !== undefined) view.setBigUint64(8, data.NetworkType === null ? 0n : BigInt(util.toPointer(data.NetworkType)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_CONFIGURATION_FH (size: 16)
 */
export interface NDIS_802_11_CONFIGURATION_FH {
  /** u32 */
  Length: number;
  /** u32 */
  HopPattern: number;
  /** u32 */
  HopSet: number;
  /** u32 */
  DwellTime: number;
}

export const sizeofNDIS_802_11_CONFIGURATION_FH = 16;

export function allocNDIS_802_11_CONFIGURATION_FH(data?: Partial<NDIS_802_11_CONFIGURATION_FH>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_CONFIGURATION_FH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.HopPattern !== undefined) view.setUint32(4, Number(data.HopPattern), true);
  // 0x08: u32
  if (data?.HopSet !== undefined) view.setUint32(8, Number(data.HopSet), true);
  // 0x0c: u32
  if (data?.DwellTime !== undefined) view.setUint32(12, Number(data.DwellTime), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_CONFIGURATION (size: 24)
 */
export interface NDIS_802_11_CONFIGURATION {
  /** u32 */
  Length: number;
  /** u32 */
  BeaconPeriod: number;
  /** u32 */
  ATIMWindow: number;
  /** u32 */
  DSConfig: number;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_CONFIGURATION_FH */
  FHConfig: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_CONFIGURATION = 24;

export function allocNDIS_802_11_CONFIGURATION(data?: Partial<NDIS_802_11_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.BeaconPeriod !== undefined) view.setUint32(4, Number(data.BeaconPeriod), true);
  // 0x08: u32
  if (data?.ATIMWindow !== undefined) view.setUint32(8, Number(data.ATIMWindow), true);
  // 0x0c: u32
  if (data?.DSConfig !== undefined) view.setUint32(12, Number(data.DSConfig), true);
  // 0x10: pointer
  if (data?.FHConfig !== undefined) view.setBigUint64(16, data.FHConfig === null ? 0n : BigInt(util.toPointer(data.FHConfig)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_STATISTICS (size: 200)
 */
export interface NDIS_802_11_STATISTICS {
  /** u32 */
  Length: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TransmittedFragmentCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MulticastTransmittedFrameCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FailedCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RetryCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MultipleRetryCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RTSSuccessCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RTSFailureCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ACKFailureCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FrameDuplicateCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ReceivedFragmentCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MulticastReceivedFrameCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FCSErrorCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TKIPLocalMICFailures: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TKIPICVErrorCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TKIPCounterMeasuresInvoked: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TKIPReplays: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CCMPFormatErrors: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CCMPReplays: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CCMPDecryptErrors: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  FourWayHandshakeFailures: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  WEPUndecryptableCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  WEPICVErrorCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DecryptSuccessCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DecryptFailureCount: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_STATISTICS = 200;

export function allocNDIS_802_11_STATISTICS(data?: Partial<NDIS_802_11_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TransmittedFragmentCount !== undefined) view.setBigUint64(8, data.TransmittedFragmentCount === null ? 0n : BigInt(util.toPointer(data.TransmittedFragmentCount)), true);
  // 0x10: pointer
  if (data?.MulticastTransmittedFrameCount !== undefined) view.setBigUint64(16, data.MulticastTransmittedFrameCount === null ? 0n : BigInt(util.toPointer(data.MulticastTransmittedFrameCount)), true);
  // 0x18: pointer
  if (data?.FailedCount !== undefined) view.setBigUint64(24, data.FailedCount === null ? 0n : BigInt(util.toPointer(data.FailedCount)), true);
  // 0x20: pointer
  if (data?.RetryCount !== undefined) view.setBigUint64(32, data.RetryCount === null ? 0n : BigInt(util.toPointer(data.RetryCount)), true);
  // 0x28: pointer
  if (data?.MultipleRetryCount !== undefined) view.setBigUint64(40, data.MultipleRetryCount === null ? 0n : BigInt(util.toPointer(data.MultipleRetryCount)), true);
  // 0x30: pointer
  if (data?.RTSSuccessCount !== undefined) view.setBigUint64(48, data.RTSSuccessCount === null ? 0n : BigInt(util.toPointer(data.RTSSuccessCount)), true);
  // 0x38: pointer
  if (data?.RTSFailureCount !== undefined) view.setBigUint64(56, data.RTSFailureCount === null ? 0n : BigInt(util.toPointer(data.RTSFailureCount)), true);
  // 0x40: pointer
  if (data?.ACKFailureCount !== undefined) view.setBigUint64(64, data.ACKFailureCount === null ? 0n : BigInt(util.toPointer(data.ACKFailureCount)), true);
  // 0x48: pointer
  if (data?.FrameDuplicateCount !== undefined) view.setBigUint64(72, data.FrameDuplicateCount === null ? 0n : BigInt(util.toPointer(data.FrameDuplicateCount)), true);
  // 0x50: pointer
  if (data?.ReceivedFragmentCount !== undefined) view.setBigUint64(80, data.ReceivedFragmentCount === null ? 0n : BigInt(util.toPointer(data.ReceivedFragmentCount)), true);
  // 0x58: pointer
  if (data?.MulticastReceivedFrameCount !== undefined) view.setBigUint64(88, data.MulticastReceivedFrameCount === null ? 0n : BigInt(util.toPointer(data.MulticastReceivedFrameCount)), true);
  // 0x60: pointer
  if (data?.FCSErrorCount !== undefined) view.setBigUint64(96, data.FCSErrorCount === null ? 0n : BigInt(util.toPointer(data.FCSErrorCount)), true);
  // 0x68: pointer
  if (data?.TKIPLocalMICFailures !== undefined) view.setBigUint64(104, data.TKIPLocalMICFailures === null ? 0n : BigInt(util.toPointer(data.TKIPLocalMICFailures)), true);
  // 0x70: pointer
  if (data?.TKIPICVErrorCount !== undefined) view.setBigUint64(112, data.TKIPICVErrorCount === null ? 0n : BigInt(util.toPointer(data.TKIPICVErrorCount)), true);
  // 0x78: pointer
  if (data?.TKIPCounterMeasuresInvoked !== undefined) view.setBigUint64(120, data.TKIPCounterMeasuresInvoked === null ? 0n : BigInt(util.toPointer(data.TKIPCounterMeasuresInvoked)), true);
  // 0x80: pointer
  if (data?.TKIPReplays !== undefined) view.setBigUint64(128, data.TKIPReplays === null ? 0n : BigInt(util.toPointer(data.TKIPReplays)), true);
  // 0x88: pointer
  if (data?.CCMPFormatErrors !== undefined) view.setBigUint64(136, data.CCMPFormatErrors === null ? 0n : BigInt(util.toPointer(data.CCMPFormatErrors)), true);
  // 0x90: pointer
  if (data?.CCMPReplays !== undefined) view.setBigUint64(144, data.CCMPReplays === null ? 0n : BigInt(util.toPointer(data.CCMPReplays)), true);
  // 0x98: pointer
  if (data?.CCMPDecryptErrors !== undefined) view.setBigUint64(152, data.CCMPDecryptErrors === null ? 0n : BigInt(util.toPointer(data.CCMPDecryptErrors)), true);
  // 0xa0: pointer
  if (data?.FourWayHandshakeFailures !== undefined) view.setBigUint64(160, data.FourWayHandshakeFailures === null ? 0n : BigInt(util.toPointer(data.FourWayHandshakeFailures)), true);
  // 0xa8: pointer
  if (data?.WEPUndecryptableCount !== undefined) view.setBigUint64(168, data.WEPUndecryptableCount === null ? 0n : BigInt(util.toPointer(data.WEPUndecryptableCount)), true);
  // 0xb0: pointer
  if (data?.WEPICVErrorCount !== undefined) view.setBigUint64(176, data.WEPICVErrorCount === null ? 0n : BigInt(util.toPointer(data.WEPICVErrorCount)), true);
  // 0xb8: pointer
  if (data?.DecryptSuccessCount !== undefined) view.setBigUint64(184, data.DecryptSuccessCount === null ? 0n : BigInt(util.toPointer(data.DecryptSuccessCount)), true);
  // 0xc0: pointer
  if (data?.DecryptFailureCount !== undefined) view.setBigUint64(192, data.DecryptFailureCount === null ? 0n : BigInt(util.toPointer(data.DecryptFailureCount)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_KEY (size: 40)
 */
export interface NDIS_802_11_KEY {
  /** u32 */
  Length: number;
  /** u32 */
  KeyIndex: number;
  /** u32 */
  KeyLength: number;
  /** array */
  BSSID: Deno.PointerValue | null;
  /** u64 */
  KeyRSC: Deno.PointerValue;
  /** array */
  KeyMaterial: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_KEY = 40;

export function allocNDIS_802_11_KEY(data?: Partial<NDIS_802_11_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.KeyIndex !== undefined) view.setUint32(4, Number(data.KeyIndex), true);
  // 0x08: u32
  if (data?.KeyLength !== undefined) view.setUint32(8, Number(data.KeyLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(16, data.BSSID === null ? 0n : BigInt(util.toPointer(data.BSSID)), true);
  // 0x18: u64
  if (data?.KeyRSC !== undefined) view.setBigUint64(24, BigInt(data.KeyRSC), true);
  // 0x20: pointer
  if (data?.KeyMaterial !== undefined) view.setBigUint64(32, data.KeyMaterial === null ? 0n : BigInt(util.toPointer(data.KeyMaterial)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_REMOVE_KEY (size: 16)
 */
export interface NDIS_802_11_REMOVE_KEY {
  /** u32 */
  Length: number;
  /** u32 */
  KeyIndex: number;
  /** array */
  BSSID: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_REMOVE_KEY = 16;

export function allocNDIS_802_11_REMOVE_KEY(data?: Partial<NDIS_802_11_REMOVE_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_REMOVE_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.KeyIndex !== undefined) view.setUint32(4, Number(data.KeyIndex), true);
  // 0x08: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(8, data.BSSID === null ? 0n : BigInt(util.toPointer(data.BSSID)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_WEP (size: 24)
 */
export interface NDIS_802_11_WEP {
  /** u32 */
  Length: number;
  /** u32 */
  KeyIndex: number;
  /** u32 */
  KeyLength: number;
  /** array */
  KeyMaterial: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_WEP = 24;

export function allocNDIS_802_11_WEP(data?: Partial<NDIS_802_11_WEP>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_WEP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.KeyIndex !== undefined) view.setUint32(4, Number(data.KeyIndex), true);
  // 0x08: u32
  if (data?.KeyLength !== undefined) view.setUint32(8, Number(data.KeyLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.KeyMaterial !== undefined) view.setBigUint64(16, data.KeyMaterial === null ? 0n : BigInt(util.toPointer(data.KeyMaterial)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_SSID (size: 16)
 */
export interface NDIS_802_11_SSID {
  /** u32 */
  SsidLength: number;
  /** array */
  Ssid: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_SSID = 16;

export function allocNDIS_802_11_SSID(data?: Partial<NDIS_802_11_SSID>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_SSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SsidLength !== undefined) view.setUint32(0, Number(data.SsidLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Ssid !== undefined) view.setBigUint64(8, data.Ssid === null ? 0n : BigInt(util.toPointer(data.Ssid)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WLAN_BSSID (size: 72)
 */
export interface NDIS_WLAN_BSSID {
  /** u32 */
  Length: number;
  /** array */
  MacAddress: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_SSID */
  Ssid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Privacy: number;
  /** i32 */
  Rssi: number;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_NETWORK_TYPE */
  NetworkTypeInUse: NDIS_802_11_NETWORK_TYPE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_NETWORK_INFRASTRUCTURE */
  InfrastructureMode: NDIS_802_11_NETWORK_INFRASTRUCTURE;
  /** array */
  SupportedRates: Deno.PointerValue | null;
}

export const sizeofNDIS_WLAN_BSSID = 72;

export function allocNDIS_WLAN_BSSID(data?: Partial<NDIS_WLAN_BSSID>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WLAN_BSSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MacAddress !== undefined) view.setBigUint64(8, data.MacAddress === null ? 0n : BigInt(util.toPointer(data.MacAddress)), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x18: pointer
  if (data?.Ssid !== undefined) view.setBigUint64(24, data.Ssid === null ? 0n : BigInt(util.toPointer(data.Ssid)), true);
  // 0x20: u32
  if (data?.Privacy !== undefined) view.setUint32(32, Number(data.Privacy), true);
  // 0x24: i32
  if (data?.Rssi !== undefined) view.setInt32(36, Number(data.Rssi), true);
  // 0x28: i32
  if (data?.NetworkTypeInUse !== undefined) view.setInt32(40, Number(data.NetworkTypeInUse), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(48, data.Configuration === null ? 0n : BigInt(util.toPointer(data.Configuration)), true);
  // 0x38: i32
  if (data?.InfrastructureMode !== undefined) view.setInt32(56, Number(data.InfrastructureMode), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.SupportedRates !== undefined) view.setBigUint64(64, data.SupportedRates === null ? 0n : BigInt(util.toPointer(data.SupportedRates)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_BSSID_LIST (size: 16)
 */
export interface NDIS_802_11_BSSID_LIST {
  /** u32 */
  NumberOfItems: number;
  /** array */
  Bssid: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_BSSID_LIST = 16;

export function allocNDIS_802_11_BSSID_LIST(data?: Partial<NDIS_802_11_BSSID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_BSSID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfItems !== undefined) view.setUint32(0, Number(data.NumberOfItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Bssid !== undefined) view.setBigUint64(8, data.Bssid === null ? 0n : BigInt(util.toPointer(data.Bssid)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WLAN_BSSID_EX (size: 88)
 */
export interface NDIS_WLAN_BSSID_EX {
  /** u32 */
  Length: number;
  /** array */
  MacAddress: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_SSID */
  Ssid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Privacy: number;
  /** i32 */
  Rssi: number;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_NETWORK_TYPE */
  NetworkTypeInUse: NDIS_802_11_NETWORK_TYPE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_NETWORK_INFRASTRUCTURE */
  InfrastructureMode: NDIS_802_11_NETWORK_INFRASTRUCTURE;
  /** array */
  SupportedRates: Deno.PointerValue | null;
  /** u32 */
  IELength: number;
  /** array */
  IEs: Deno.PointerValue | null;
}

export const sizeofNDIS_WLAN_BSSID_EX = 88;

export function allocNDIS_WLAN_BSSID_EX(data?: Partial<NDIS_WLAN_BSSID_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WLAN_BSSID_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MacAddress !== undefined) view.setBigUint64(8, data.MacAddress === null ? 0n : BigInt(util.toPointer(data.MacAddress)), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x18: pointer
  if (data?.Ssid !== undefined) view.setBigUint64(24, data.Ssid === null ? 0n : BigInt(util.toPointer(data.Ssid)), true);
  // 0x20: u32
  if (data?.Privacy !== undefined) view.setUint32(32, Number(data.Privacy), true);
  // 0x24: i32
  if (data?.Rssi !== undefined) view.setInt32(36, Number(data.Rssi), true);
  // 0x28: i32
  if (data?.NetworkTypeInUse !== undefined) view.setInt32(40, Number(data.NetworkTypeInUse), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(48, data.Configuration === null ? 0n : BigInt(util.toPointer(data.Configuration)), true);
  // 0x38: i32
  if (data?.InfrastructureMode !== undefined) view.setInt32(56, Number(data.InfrastructureMode), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.SupportedRates !== undefined) view.setBigUint64(64, data.SupportedRates === null ? 0n : BigInt(util.toPointer(data.SupportedRates)), true);
  // 0x48: u32
  if (data?.IELength !== undefined) view.setUint32(72, Number(data.IELength), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.IEs !== undefined) view.setBigUint64(80, data.IEs === null ? 0n : BigInt(util.toPointer(data.IEs)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_BSSID_LIST_EX (size: 16)
 */
export interface NDIS_802_11_BSSID_LIST_EX {
  /** u32 */
  NumberOfItems: number;
  /** array */
  Bssid: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_BSSID_LIST_EX = 16;

export function allocNDIS_802_11_BSSID_LIST_EX(data?: Partial<NDIS_802_11_BSSID_LIST_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_BSSID_LIST_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfItems !== undefined) view.setUint32(0, Number(data.NumberOfItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Bssid !== undefined) view.setBigUint64(8, data.Bssid === null ? 0n : BigInt(util.toPointer(data.Bssid)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_FIXED_IEs (size: 16)
 */
export interface NDIS_802_11_FIXED_IEs {
  /** array */
  Timestamp: Deno.PointerValue | null;
  /** u16 */
  BeaconInterval: number;
  /** u16 */
  Capabilities: number;
}

export const sizeofNDIS_802_11_FIXED_IEs = 16;

export function allocNDIS_802_11_FIXED_IEs(data?: Partial<NDIS_802_11_FIXED_IEs>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_FIXED_IEs);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Timestamp !== undefined) view.setBigUint64(0, data.Timestamp === null ? 0n : BigInt(util.toPointer(data.Timestamp)), true);
  // 0x08: u16
  if (data?.BeaconInterval !== undefined) view.setUint16(8, Number(data.BeaconInterval), true);
  // 0x0a: u16
  if (data?.Capabilities !== undefined) view.setUint16(10, Number(data.Capabilities), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_VARIABLE_IEs (size: 16)
 */
export interface NDIS_802_11_VARIABLE_IEs {
  /** u8 */
  ElementID: number;
  /** u8 */
  Length: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_VARIABLE_IEs = 16;

export function allocNDIS_802_11_VARIABLE_IEs(data?: Partial<NDIS_802_11_VARIABLE_IEs>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_VARIABLE_IEs);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ElementID !== undefined) view.setUint8(0, Number(data.ElementID));
  // 0x01: u8
  if (data?.Length !== undefined) view.setUint8(1, Number(data.Length));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_AI_REQFI (size: 16)
 */
export interface NDIS_802_11_AI_REQFI {
  /** u16 */
  Capabilities: number;
  /** u16 */
  ListenInterval: number;
  /** array */
  CurrentAPAddress: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_AI_REQFI = 16;

export function allocNDIS_802_11_AI_REQFI(data?: Partial<NDIS_802_11_AI_REQFI>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_AI_REQFI);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Capabilities !== undefined) view.setUint16(0, Number(data.Capabilities), true);
  // 0x02: u16
  if (data?.ListenInterval !== undefined) view.setUint16(2, Number(data.ListenInterval), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CurrentAPAddress !== undefined) view.setBigUint64(8, data.CurrentAPAddress === null ? 0n : BigInt(util.toPointer(data.CurrentAPAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_AI_RESFI (size: 8)
 */
export interface NDIS_802_11_AI_RESFI {
  /** u16 */
  Capabilities: number;
  /** u16 */
  StatusCode: number;
  /** u16 */
  AssociationId: number;
}

export const sizeofNDIS_802_11_AI_RESFI = 8;

export function allocNDIS_802_11_AI_RESFI(data?: Partial<NDIS_802_11_AI_RESFI>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_AI_RESFI);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Capabilities !== undefined) view.setUint16(0, Number(data.Capabilities), true);
  // 0x02: u16
  if (data?.StatusCode !== undefined) view.setUint16(2, Number(data.StatusCode), true);
  // 0x04: u16
  if (data?.AssociationId !== undefined) view.setUint16(4, Number(data.AssociationId), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_ASSOCIATION_INFORMATION (size: 48)
 */
export interface NDIS_802_11_ASSOCIATION_INFORMATION {
  /** u32 */
  Length: number;
  /** u16 */
  AvailableRequestFixedIEs: number;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_AI_REQFI */
  RequestFixedIEs: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RequestIELength: number;
  /** u32 */
  OffsetRequestIEs: number;
  /** u16 */
  AvailableResponseFixedIEs: number;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_AI_RESFI */
  ResponseFixedIEs: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ResponseIELength: number;
  /** u32 */
  OffsetResponseIEs: number;
}

export const sizeofNDIS_802_11_ASSOCIATION_INFORMATION = 48;

export function allocNDIS_802_11_ASSOCIATION_INFORMATION(data?: Partial<NDIS_802_11_ASSOCIATION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_ASSOCIATION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u16
  if (data?.AvailableRequestFixedIEs !== undefined) view.setUint16(4, Number(data.AvailableRequestFixedIEs), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.RequestFixedIEs !== undefined) view.setBigUint64(8, data.RequestFixedIEs === null ? 0n : BigInt(util.toPointer(data.RequestFixedIEs)), true);
  // 0x10: u32
  if (data?.RequestIELength !== undefined) view.setUint32(16, Number(data.RequestIELength), true);
  // 0x14: u32
  if (data?.OffsetRequestIEs !== undefined) view.setUint32(20, Number(data.OffsetRequestIEs), true);
  // 0x18: u16
  if (data?.AvailableResponseFixedIEs !== undefined) view.setUint16(24, Number(data.AvailableResponseFixedIEs), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.ResponseFixedIEs !== undefined) view.setBigUint64(32, data.ResponseFixedIEs === null ? 0n : BigInt(util.toPointer(data.ResponseFixedIEs)), true);
  // 0x28: u32
  if (data?.ResponseIELength !== undefined) view.setUint32(40, Number(data.ResponseIELength), true);
  // 0x2c: u32
  if (data?.OffsetResponseIEs !== undefined) view.setUint32(44, Number(data.OffsetResponseIEs), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_AUTHENTICATION_EVENT (size: 16)
 */
export interface NDIS_802_11_AUTHENTICATION_EVENT {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_STATUS_INDICATION */
  Status: Uint8Array | Deno.PointerValue | null;
  /** array */
  Request: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_AUTHENTICATION_EVENT = 16;

export function allocNDIS_802_11_AUTHENTICATION_EVENT(data?: Partial<NDIS_802_11_AUTHENTICATION_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_AUTHENTICATION_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Status !== undefined) view.setBigUint64(0, data.Status === null ? 0n : BigInt(util.toPointer(data.Status)), true);
  // 0x08: pointer
  if (data?.Request !== undefined) view.setBigUint64(8, data.Request === null ? 0n : BigInt(util.toPointer(data.Request)), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_TEST (size: 16)
 */
export interface NDIS_802_11_TEST {
  /** u32 */
  Length: number;
  /** u32 */
  Type: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_TEST = 16;

export function allocNDIS_802_11_TEST(data?: Partial<NDIS_802_11_TEST>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_TEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.BSSID_INFO (size: 16)
 */
export interface BSSID_INFO {
  /** array */
  BSSID: Deno.PointerValue | null;
  /** array */
  PMKID: Deno.PointerValue | null;
}

export const sizeofBSSID_INFO = 16;

export function allocBSSID_INFO(data?: Partial<BSSID_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBSSID_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(0, data.BSSID === null ? 0n : BigInt(util.toPointer(data.BSSID)), true);
  // 0x08: pointer
  if (data?.PMKID !== undefined) view.setBigUint64(8, data.PMKID === null ? 0n : BigInt(util.toPointer(data.PMKID)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_PMKID (size: 16)
 */
export interface NDIS_802_11_PMKID {
  /** u32 */
  Length: number;
  /** u32 */
  BSSIDInfoCount: number;
  /** array */
  BSSIDInfo: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_PMKID = 16;

export function allocNDIS_802_11_PMKID(data?: Partial<NDIS_802_11_PMKID>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_PMKID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.BSSIDInfoCount !== undefined) view.setUint32(4, Number(data.BSSIDInfoCount), true);
  // 0x08: pointer
  if (data?.BSSIDInfo !== undefined) view.setBigUint64(8, data.BSSIDInfo === null ? 0n : BigInt(util.toPointer(data.BSSIDInfo)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_AUTHENTICATION_ENCRYPTION (size: 8)
 */
export interface NDIS_802_11_AUTHENTICATION_ENCRYPTION {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_AUTHENTICATION_MODE */
  AuthModeSupported: NDIS_802_11_AUTHENTICATION_MODE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_WEP_STATUS */
  EncryptStatusSupported: NDIS_802_11_WEP_STATUS;
}

export const sizeofNDIS_802_11_AUTHENTICATION_ENCRYPTION = 8;

export function allocNDIS_802_11_AUTHENTICATION_ENCRYPTION(data?: Partial<NDIS_802_11_AUTHENTICATION_ENCRYPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_AUTHENTICATION_ENCRYPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AuthModeSupported !== undefined) view.setInt32(0, Number(data.AuthModeSupported), true);
  // 0x04: i32
  if (data?.EncryptStatusSupported !== undefined) view.setInt32(4, Number(data.EncryptStatusSupported), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_CAPABILITY (size: 24)
 */
export interface NDIS_802_11_CAPABILITY {
  /** u32 */
  Length: number;
  /** u32 */
  Version: number;
  /** u32 */
  NoOfPMKIDs: number;
  /** u32 */
  NoOfAuthEncryptPairsSupported: number;
  /** array */
  AuthenticationEncryptionSupported: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_CAPABILITY = 24;

export function allocNDIS_802_11_CAPABILITY(data?: Partial<NDIS_802_11_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.NoOfPMKIDs !== undefined) view.setUint32(8, Number(data.NoOfPMKIDs), true);
  // 0x0c: u32
  if (data?.NoOfAuthEncryptPairsSupported !== undefined) view.setUint32(12, Number(data.NoOfAuthEncryptPairsSupported), true);
  // 0x10: pointer
  if (data?.AuthenticationEncryptionSupported !== undefined) view.setBigUint64(16, data.AuthenticationEncryptionSupported === null ? 0n : BigInt(util.toPointer(data.AuthenticationEncryptionSupported)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_802_11_NON_BCAST_SSID_LIST (size: 16)
 */
export interface NDIS_802_11_NON_BCAST_SSID_LIST {
  /** u32 */
  NumberOfItems: number;
  /** array */
  Non_Bcast_Ssid: Deno.PointerValue | null;
}

export const sizeofNDIS_802_11_NON_BCAST_SSID_LIST = 16;

export function allocNDIS_802_11_NON_BCAST_SSID_LIST(data?: Partial<NDIS_802_11_NON_BCAST_SSID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_802_11_NON_BCAST_SSID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfItems !== undefined) view.setUint32(0, Number(data.NumberOfItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Non_Bcast_Ssid !== undefined) view.setBigUint64(8, data.Non_Bcast_Ssid === null ? 0n : BigInt(util.toPointer(data.Non_Bcast_Ssid)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_CO_DEVICE_PROFILE (size: 120)
 */
export interface NDIS_CO_DEVICE_PROFILE {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_VAR_DATA_DESC */
  DeviceDescription: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_VAR_DATA_DESC */
  DevSpecificInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulTAPISupplementaryPassThru: number;
  /** u32 */
  ulAddressModes: number;
  /** u32 */
  ulNumAddresses: number;
  /** u32 */
  ulBearerModes: number;
  /** u32 */
  ulMaxTxRate: number;
  /** u32 */
  ulMinTxRate: number;
  /** u32 */
  ulMaxRxRate: number;
  /** u32 */
  ulMinRxRate: number;
  /** u32 */
  ulMediaModes: number;
  /** u32 */
  ulGenerateToneModes: number;
  /** u32 */
  ulGenerateToneMaxNumFreq: number;
  /** u32 */
  ulGenerateDigitModes: number;
  /** u32 */
  ulMonitorToneMaxNumFreq: number;
  /** u32 */
  ulMonitorToneMaxNumEntries: number;
  /** u32 */
  ulMonitorDigitModes: number;
  /** u32 */
  ulGatherDigitsMinTimeout: number;
  /** u32 */
  ulGatherDigitsMaxTimeout: number;
  /** u32 */
  ulDevCapFlags: number;
  /** u32 */
  ulMaxNumActiveCalls: number;
  /** u32 */
  ulAnswerMode: number;
  /** u32 */
  ulUUIAcceptSize: number;
  /** u32 */
  ulUUIAnswerSize: number;
  /** u32 */
  ulUUIMakeCallSize: number;
  /** u32 */
  ulUUIDropSize: number;
  /** u32 */
  ulUUISendUserUserInfoSize: number;
  /** u32 */
  ulUUICallInfoSize: number;
}

export const sizeofNDIS_CO_DEVICE_PROFILE = 120;

export function allocNDIS_CO_DEVICE_PROFILE(data?: Partial<NDIS_CO_DEVICE_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_CO_DEVICE_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceDescription !== undefined) view.setBigUint64(0, data.DeviceDescription === null ? 0n : BigInt(util.toPointer(data.DeviceDescription)), true);
  // 0x08: pointer
  if (data?.DevSpecificInfo !== undefined) view.setBigUint64(8, data.DevSpecificInfo === null ? 0n : BigInt(util.toPointer(data.DevSpecificInfo)), true);
  // 0x10: u32
  if (data?.ulTAPISupplementaryPassThru !== undefined) view.setUint32(16, Number(data.ulTAPISupplementaryPassThru), true);
  // 0x14: u32
  if (data?.ulAddressModes !== undefined) view.setUint32(20, Number(data.ulAddressModes), true);
  // 0x18: u32
  if (data?.ulNumAddresses !== undefined) view.setUint32(24, Number(data.ulNumAddresses), true);
  // 0x1c: u32
  if (data?.ulBearerModes !== undefined) view.setUint32(28, Number(data.ulBearerModes), true);
  // 0x20: u32
  if (data?.ulMaxTxRate !== undefined) view.setUint32(32, Number(data.ulMaxTxRate), true);
  // 0x24: u32
  if (data?.ulMinTxRate !== undefined) view.setUint32(36, Number(data.ulMinTxRate), true);
  // 0x28: u32
  if (data?.ulMaxRxRate !== undefined) view.setUint32(40, Number(data.ulMaxRxRate), true);
  // 0x2c: u32
  if (data?.ulMinRxRate !== undefined) view.setUint32(44, Number(data.ulMinRxRate), true);
  // 0x30: u32
  if (data?.ulMediaModes !== undefined) view.setUint32(48, Number(data.ulMediaModes), true);
  // 0x34: u32
  if (data?.ulGenerateToneModes !== undefined) view.setUint32(52, Number(data.ulGenerateToneModes), true);
  // 0x38: u32
  if (data?.ulGenerateToneMaxNumFreq !== undefined) view.setUint32(56, Number(data.ulGenerateToneMaxNumFreq), true);
  // 0x3c: u32
  if (data?.ulGenerateDigitModes !== undefined) view.setUint32(60, Number(data.ulGenerateDigitModes), true);
  // 0x40: u32
  if (data?.ulMonitorToneMaxNumFreq !== undefined) view.setUint32(64, Number(data.ulMonitorToneMaxNumFreq), true);
  // 0x44: u32
  if (data?.ulMonitorToneMaxNumEntries !== undefined) view.setUint32(68, Number(data.ulMonitorToneMaxNumEntries), true);
  // 0x48: u32
  if (data?.ulMonitorDigitModes !== undefined) view.setUint32(72, Number(data.ulMonitorDigitModes), true);
  // 0x4c: u32
  if (data?.ulGatherDigitsMinTimeout !== undefined) view.setUint32(76, Number(data.ulGatherDigitsMinTimeout), true);
  // 0x50: u32
  if (data?.ulGatherDigitsMaxTimeout !== undefined) view.setUint32(80, Number(data.ulGatherDigitsMaxTimeout), true);
  // 0x54: u32
  if (data?.ulDevCapFlags !== undefined) view.setUint32(84, Number(data.ulDevCapFlags), true);
  // 0x58: u32
  if (data?.ulMaxNumActiveCalls !== undefined) view.setUint32(88, Number(data.ulMaxNumActiveCalls), true);
  // 0x5c: u32
  if (data?.ulAnswerMode !== undefined) view.setUint32(92, Number(data.ulAnswerMode), true);
  // 0x60: u32
  if (data?.ulUUIAcceptSize !== undefined) view.setUint32(96, Number(data.ulUUIAcceptSize), true);
  // 0x64: u32
  if (data?.ulUUIAnswerSize !== undefined) view.setUint32(100, Number(data.ulUUIAnswerSize), true);
  // 0x68: u32
  if (data?.ulUUIMakeCallSize !== undefined) view.setUint32(104, Number(data.ulUUIMakeCallSize), true);
  // 0x6c: u32
  if (data?.ulUUIDropSize !== undefined) view.setUint32(108, Number(data.ulUUIDropSize), true);
  // 0x70: u32
  if (data?.ulUUISendUserUserInfoSize !== undefined) view.setUint32(112, Number(data.ulUUISendUserUserInfoSize), true);
  // 0x74: u32
  if (data?.ulUUICallInfoSize !== undefined) view.setUint32(116, Number(data.ulUUICallInfoSize), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.OFFLOAD_ALGO_INFO (size: 16)
 */
export interface OFFLOAD_ALGO_INFO {
  /** u32 */
  algoIdentifier: number;
  /** u32 */
  algoKeylen: number;
  /** u32 */
  algoRounds: number;
}

export const sizeofOFFLOAD_ALGO_INFO = 16;

export function allocOFFLOAD_ALGO_INFO(data?: Partial<OFFLOAD_ALGO_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOFFLOAD_ALGO_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.algoIdentifier !== undefined) view.setUint32(0, Number(data.algoIdentifier), true);
  // 0x04: u32
  if (data?.algoKeylen !== undefined) view.setUint32(4, Number(data.algoKeylen), true);
  // 0x08: u32
  if (data?.algoRounds !== undefined) view.setUint32(8, Number(data.algoRounds), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.OFFLOAD_SECURITY_ASSOCIATION (size: 32)
 */
export interface OFFLOAD_SECURITY_ASSOCIATION {
  /** Windows.Win32.NetworkManagement.Ndis.OFFLOAD_OPERATION_E */
  Operation: OFFLOAD_OPERATION_E;
  /** u32 */
  SPI: number;
  /** Windows.Win32.NetworkManagement.Ndis.OFFLOAD_ALGO_INFO */
  IntegrityAlgo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.OFFLOAD_ALGO_INFO */
  ConfAlgo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.OFFLOAD_ALGO_INFO */
  Reserved: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOFFLOAD_SECURITY_ASSOCIATION = 32;

export function allocOFFLOAD_SECURITY_ASSOCIATION(data?: Partial<OFFLOAD_SECURITY_ASSOCIATION>): Uint8Array {
  const buf = new Uint8Array(sizeofOFFLOAD_SECURITY_ASSOCIATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Operation !== undefined) view.setInt32(0, Number(data.Operation), true);
  // 0x04: u32
  if (data?.SPI !== undefined) view.setUint32(4, Number(data.SPI), true);
  // 0x08: pointer
  if (data?.IntegrityAlgo !== undefined) view.setBigUint64(8, data.IntegrityAlgo === null ? 0n : BigInt(util.toPointer(data.IntegrityAlgo)), true);
  // 0x10: pointer
  if (data?.ConfAlgo !== undefined) view.setBigUint64(16, data.ConfAlgo === null ? 0n : BigInt(util.toPointer(data.ConfAlgo)), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.NetworkManagement.Ndis.OFFLOAD_IPSEC_ADD_SA (size: 72)
 */
export interface OFFLOAD_IPSEC_ADD_SA {
  /** u32 */
  SrcAddr: number;
  /** u32 */
  SrcMask: number;
  /** u32 */
  DestAddr: number;
  /** u32 */
  DestMask: number;
  /** u32 */
  Protocol: number;
  /** u16 */
  SrcPort: number;
  /** u16 */
  DestPort: number;
  /** u32 */
  SrcTunnelAddr: number;
  /** u32 */
  DestTunnelAddr: number;
  /** u16 */
  Flags: number;
  /** i16 */
  NumSAs: number;
  /** array */
  SecAssoc: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  OffloadHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  KeyLen: number;
  /** array */
  KeyMat: Deno.PointerValue | null;
}

export const sizeofOFFLOAD_IPSEC_ADD_SA = 72;

export function allocOFFLOAD_IPSEC_ADD_SA(data?: Partial<OFFLOAD_IPSEC_ADD_SA>): Uint8Array {
  const buf = new Uint8Array(sizeofOFFLOAD_IPSEC_ADD_SA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SrcAddr !== undefined) view.setUint32(0, Number(data.SrcAddr), true);
  // 0x04: u32
  if (data?.SrcMask !== undefined) view.setUint32(4, Number(data.SrcMask), true);
  // 0x08: u32
  if (data?.DestAddr !== undefined) view.setUint32(8, Number(data.DestAddr), true);
  // 0x0c: u32
  if (data?.DestMask !== undefined) view.setUint32(12, Number(data.DestMask), true);
  // 0x10: u32
  if (data?.Protocol !== undefined) view.setUint32(16, Number(data.Protocol), true);
  // 0x14: u16
  if (data?.SrcPort !== undefined) view.setUint16(20, Number(data.SrcPort), true);
  // 0x16: u16
  if (data?.DestPort !== undefined) view.setUint16(22, Number(data.DestPort), true);
  // 0x18: u32
  if (data?.SrcTunnelAddr !== undefined) view.setUint32(24, Number(data.SrcTunnelAddr), true);
  // 0x1c: u32
  if (data?.DestTunnelAddr !== undefined) view.setUint32(28, Number(data.DestTunnelAddr), true);
  // 0x20: u16
  if (data?.Flags !== undefined) view.setUint16(32, Number(data.Flags), true);
  // 0x22: i16
  if (data?.NumSAs !== undefined) view.setInt16(34, Number(data.NumSAs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.SecAssoc !== undefined) view.setBigUint64(40, data.SecAssoc === null ? 0n : BigInt(util.toPointer(data.SecAssoc)), true);
  // 0x30: pointer
  if (data?.OffloadHandle !== undefined) view.setBigUint64(48, data.OffloadHandle === null ? 0n : BigInt(util.toPointer(data.OffloadHandle)), true);
  // 0x38: u32
  if (data?.KeyLen !== undefined) view.setUint32(56, Number(data.KeyLen), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.KeyMat !== undefined) view.setBigUint64(64, data.KeyMat === null ? 0n : BigInt(util.toPointer(data.KeyMat)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.OFFLOAD_IPSEC_DELETE_SA (size: 8)
 */
export interface OFFLOAD_IPSEC_DELETE_SA {
  /** Windows.Win32.Foundation.HANDLE */
  OffloadHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOFFLOAD_IPSEC_DELETE_SA = 8;

export function allocOFFLOAD_IPSEC_DELETE_SA(data?: Partial<OFFLOAD_IPSEC_DELETE_SA>): Uint8Array {
  const buf = new Uint8Array(sizeofOFFLOAD_IPSEC_DELETE_SA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OffloadHandle !== undefined) view.setBigUint64(0, data.OffloadHandle === null ? 0n : BigInt(util.toPointer(data.OffloadHandle)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY (size: 8)
 */
export interface OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY {
  /** Windows.Win32.NetworkManagement.Ndis.UDP_ENCAP_TYPE */
  UdpEncapType: UDP_ENCAP_TYPE;
  /** u16 */
  DstEncapPort: number;
}

export const sizeofOFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY = 8;

export function allocOFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY(data?: Partial<OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofOFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.UdpEncapType !== undefined) view.setInt32(0, Number(data.UdpEncapType), true);
  // 0x04: u16
  if (data?.DstEncapPort !== undefined) view.setUint16(4, Number(data.DstEncapPort), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.OFFLOAD_IPSEC_ADD_UDPESP_SA (size: 88)
 */
export interface OFFLOAD_IPSEC_ADD_UDPESP_SA {
  /** u32 */
  SrcAddr: number;
  /** u32 */
  SrcMask: number;
  /** u32 */
  DstAddr: number;
  /** u32 */
  DstMask: number;
  /** u32 */
  Protocol: number;
  /** u16 */
  SrcPort: number;
  /** u16 */
  DstPort: number;
  /** u32 */
  SrcTunnelAddr: number;
  /** u32 */
  DstTunnelAddr: number;
  /** u16 */
  Flags: number;
  /** i16 */
  NumSAs: number;
  /** array */
  SecAssoc: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  OffloadHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY */
  EncapTypeEntry: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  EncapTypeEntryOffldHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  KeyLen: number;
  /** array */
  KeyMat: Deno.PointerValue | null;
}

export const sizeofOFFLOAD_IPSEC_ADD_UDPESP_SA = 88;

export function allocOFFLOAD_IPSEC_ADD_UDPESP_SA(data?: Partial<OFFLOAD_IPSEC_ADD_UDPESP_SA>): Uint8Array {
  const buf = new Uint8Array(sizeofOFFLOAD_IPSEC_ADD_UDPESP_SA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SrcAddr !== undefined) view.setUint32(0, Number(data.SrcAddr), true);
  // 0x04: u32
  if (data?.SrcMask !== undefined) view.setUint32(4, Number(data.SrcMask), true);
  // 0x08: u32
  if (data?.DstAddr !== undefined) view.setUint32(8, Number(data.DstAddr), true);
  // 0x0c: u32
  if (data?.DstMask !== undefined) view.setUint32(12, Number(data.DstMask), true);
  // 0x10: u32
  if (data?.Protocol !== undefined) view.setUint32(16, Number(data.Protocol), true);
  // 0x14: u16
  if (data?.SrcPort !== undefined) view.setUint16(20, Number(data.SrcPort), true);
  // 0x16: u16
  if (data?.DstPort !== undefined) view.setUint16(22, Number(data.DstPort), true);
  // 0x18: u32
  if (data?.SrcTunnelAddr !== undefined) view.setUint32(24, Number(data.SrcTunnelAddr), true);
  // 0x1c: u32
  if (data?.DstTunnelAddr !== undefined) view.setUint32(28, Number(data.DstTunnelAddr), true);
  // 0x20: u16
  if (data?.Flags !== undefined) view.setUint16(32, Number(data.Flags), true);
  // 0x22: i16
  if (data?.NumSAs !== undefined) view.setInt16(34, Number(data.NumSAs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.SecAssoc !== undefined) view.setBigUint64(40, data.SecAssoc === null ? 0n : BigInt(util.toPointer(data.SecAssoc)), true);
  // 0x30: pointer
  if (data?.OffloadHandle !== undefined) view.setBigUint64(48, data.OffloadHandle === null ? 0n : BigInt(util.toPointer(data.OffloadHandle)), true);
  // 0x38: pointer
  if (data?.EncapTypeEntry !== undefined) view.setBigUint64(56, data.EncapTypeEntry === null ? 0n : BigInt(util.toPointer(data.EncapTypeEntry)), true);
  // 0x40: pointer
  if (data?.EncapTypeEntryOffldHandle !== undefined) view.setBigUint64(64, data.EncapTypeEntryOffldHandle === null ? 0n : BigInt(util.toPointer(data.EncapTypeEntryOffldHandle)), true);
  // 0x48: u32
  if (data?.KeyLen !== undefined) view.setUint32(72, Number(data.KeyLen), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.KeyMat !== undefined) view.setBigUint64(80, data.KeyMat === null ? 0n : BigInt(util.toPointer(data.KeyMat)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.OFFLOAD_IPSEC_DELETE_UDPESP_SA (size: 16)
 */
export interface OFFLOAD_IPSEC_DELETE_UDPESP_SA {
  /** Windows.Win32.Foundation.HANDLE */
  OffloadHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  EncapTypeEntryOffldHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOFFLOAD_IPSEC_DELETE_UDPESP_SA = 16;

export function allocOFFLOAD_IPSEC_DELETE_UDPESP_SA(data?: Partial<OFFLOAD_IPSEC_DELETE_UDPESP_SA>): Uint8Array {
  const buf = new Uint8Array(sizeofOFFLOAD_IPSEC_DELETE_UDPESP_SA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OffloadHandle !== undefined) view.setBigUint64(0, data.OffloadHandle === null ? 0n : BigInt(util.toPointer(data.OffloadHandle)), true);
  // 0x08: pointer
  if (data?.EncapTypeEntryOffldHandle !== undefined) view.setBigUint64(8, data.EncapTypeEntryOffldHandle === null ? 0n : BigInt(util.toPointer(data.EncapTypeEntryOffldHandle)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.TRANSPORT_HEADER_OFFSET (size: 8)
 */
export interface TRANSPORT_HEADER_OFFSET {
  /** u16 */
  ProtocolType: number;
  /** u16 */
  HeaderOffset: number;
}

export const sizeofTRANSPORT_HEADER_OFFSET = 8;

export function allocTRANSPORT_HEADER_OFFSET(data?: Partial<TRANSPORT_HEADER_OFFSET>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORT_HEADER_OFFSET);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ProtocolType !== undefined) view.setUint16(0, Number(data.ProtocolType), true);
  // 0x02: u16
  if (data?.HeaderOffset !== undefined) view.setUint16(2, Number(data.HeaderOffset), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NETWORK_ADDRESS (size: 16)
 */
export interface NETWORK_ADDRESS {
  /** u16 */
  AddressLength: number;
  /** u16 */
  AddressType: number;
  /** array */
  Address: Deno.PointerValue | null;
}

export const sizeofNETWORK_ADDRESS = 16;

export function allocNETWORK_ADDRESS(data?: Partial<NETWORK_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofNETWORK_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AddressLength !== undefined) view.setUint16(0, Number(data.AddressLength), true);
  // 0x02: u16
  if (data?.AddressType !== undefined) view.setUint16(2, Number(data.AddressType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NETWORK_ADDRESS_LIST (size: 16)
 */
export interface NETWORK_ADDRESS_LIST {
  /** i32 */
  AddressCount: number;
  /** u16 */
  AddressType: number;
  /** array */
  Address: Deno.PointerValue | null;
}

export const sizeofNETWORK_ADDRESS_LIST = 16;

export function allocNETWORK_ADDRESS_LIST(data?: Partial<NETWORK_ADDRESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofNETWORK_ADDRESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AddressCount !== undefined) view.setInt32(0, Number(data.AddressCount), true);
  // 0x04: u16
  if (data?.AddressType !== undefined) view.setUint16(4, Number(data.AddressType), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NETWORK_ADDRESS_IP (size: 16)
 */
export interface NETWORK_ADDRESS_IP {
  /** u16 */
  sin_port: number;
  /** u32 */
  IN_ADDR: number;
  /** array */
  sin_zero: Deno.PointerValue | null;
}

export const sizeofNETWORK_ADDRESS_IP = 16;

export function allocNETWORK_ADDRESS_IP(data?: Partial<NETWORK_ADDRESS_IP>): Uint8Array {
  const buf = new Uint8Array(sizeofNETWORK_ADDRESS_IP);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sin_port !== undefined) view.setUint16(0, Number(data.sin_port), true);
  // 0x02: u32
  if (data?.IN_ADDR !== undefined) view.setUint32(2, Number(data.IN_ADDR), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.sin_zero !== undefined) view.setBigUint64(8, data.sin_zero === null ? 0n : BigInt(util.toPointer(data.sin_zero)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NETWORK_ADDRESS_IP6 (size: 24)
 */
export interface NETWORK_ADDRESS_IP6 {
  /** u16 */
  sin6_port: number;
  /** u32 */
  sin6_flowinfo: number;
  /** array */
  sin6_addr: Deno.PointerValue | null;
  /** u32 */
  sin6_scope_id: number;
}

export const sizeofNETWORK_ADDRESS_IP6 = 24;

export function allocNETWORK_ADDRESS_IP6(data?: Partial<NETWORK_ADDRESS_IP6>): Uint8Array {
  const buf = new Uint8Array(sizeofNETWORK_ADDRESS_IP6);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sin6_port !== undefined) view.setUint16(0, Number(data.sin6_port), true);
  // 0x02: u32
  if (data?.sin6_flowinfo !== undefined) view.setUint32(2, Number(data.sin6_flowinfo), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.sin6_addr !== undefined) view.setBigUint64(8, data.sin6_addr === null ? 0n : BigInt(util.toPointer(data.sin6_addr)), true);
  // 0x10: u32
  if (data?.sin6_scope_id !== undefined) view.setUint32(16, Number(data.sin6_scope_id), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NETWORK_ADDRESS_IPX (size: 24)
 */
export interface NETWORK_ADDRESS_IPX {
  /** u32 */
  NetworkAddress: number;
  /** array */
  NodeAddress: Deno.PointerValue | null;
  /** u16 */
  Socket: number;
}

export const sizeofNETWORK_ADDRESS_IPX = 24;

export function allocNETWORK_ADDRESS_IPX(data?: Partial<NETWORK_ADDRESS_IPX>): Uint8Array {
  const buf = new Uint8Array(sizeofNETWORK_ADDRESS_IPX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NetworkAddress !== undefined) view.setUint32(0, Number(data.NetworkAddress), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.NodeAddress !== undefined) view.setBigUint64(8, data.NodeAddress === null ? 0n : BigInt(util.toPointer(data.NodeAddress)), true);
  // 0x10: u16
  if (data?.Socket !== undefined) view.setUint16(16, Number(data.Socket), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.GEN_GET_TIME_CAPS (size: 8)
 */
export interface GEN_GET_TIME_CAPS {
  /** u32 */
  Flags: number;
  /** u32 */
  ClockPrecision: number;
}

export const sizeofGEN_GET_TIME_CAPS = 8;

export function allocGEN_GET_TIME_CAPS(data?: Partial<GEN_GET_TIME_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofGEN_GET_TIME_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.ClockPrecision !== undefined) view.setUint32(4, Number(data.ClockPrecision), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.GEN_GET_NETCARD_TIME (size: 8)
 */
export interface GEN_GET_NETCARD_TIME {
  /** u64 */
  ReadTime: Deno.PointerValue;
}

export const sizeofGEN_GET_NETCARD_TIME = 8;

export function allocGEN_GET_NETCARD_TIME(data?: Partial<GEN_GET_NETCARD_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofGEN_GET_NETCARD_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ReadTime !== undefined) view.setBigUint64(0, BigInt(data.ReadTime), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_PM_PACKET_PATTERN (size: 24)
 */
export interface NDIS_PM_PACKET_PATTERN {
  /** u32 */
  Priority: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  MaskSize: number;
  /** u32 */
  PatternOffset: number;
  /** u32 */
  PatternSize: number;
  /** u32 */
  PatternFlags: number;
}

export const sizeofNDIS_PM_PACKET_PATTERN = 24;

export function allocNDIS_PM_PACKET_PATTERN(data?: Partial<NDIS_PM_PACKET_PATTERN>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_PM_PACKET_PATTERN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Priority !== undefined) view.setUint32(0, Number(data.Priority), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u32
  if (data?.MaskSize !== undefined) view.setUint32(8, Number(data.MaskSize), true);
  // 0x0c: u32
  if (data?.PatternOffset !== undefined) view.setUint32(12, Number(data.PatternOffset), true);
  // 0x10: u32
  if (data?.PatternSize !== undefined) view.setUint32(16, Number(data.PatternSize), true);
  // 0x14: u32
  if (data?.PatternFlags !== undefined) view.setUint32(20, Number(data.PatternFlags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_PM_WAKE_UP_CAPABILITIES (size: 16)
 */
export interface NDIS_PM_WAKE_UP_CAPABILITIES {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_DEVICE_POWER_STATE */
  MinMagicPacketWakeUp: NDIS_DEVICE_POWER_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_DEVICE_POWER_STATE */
  MinPatternWakeUp: NDIS_DEVICE_POWER_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_DEVICE_POWER_STATE */
  MinLinkChangeWakeUp: NDIS_DEVICE_POWER_STATE;
}

export const sizeofNDIS_PM_WAKE_UP_CAPABILITIES = 16;

export function allocNDIS_PM_WAKE_UP_CAPABILITIES(data?: Partial<NDIS_PM_WAKE_UP_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_PM_WAKE_UP_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MinMagicPacketWakeUp !== undefined) view.setInt32(0, Number(data.MinMagicPacketWakeUp), true);
  // 0x04: i32
  if (data?.MinPatternWakeUp !== undefined) view.setInt32(4, Number(data.MinPatternWakeUp), true);
  // 0x08: i32
  if (data?.MinLinkChangeWakeUp !== undefined) view.setInt32(8, Number(data.MinLinkChangeWakeUp), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_PNP_CAPABILITIES (size: 16)
 */
export interface NDIS_PNP_CAPABILITIES {
  /** u32 */
  Flags: number;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PM_WAKE_UP_CAPABILITIES */
  WakeUpCapabilities: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_PNP_CAPABILITIES = 16;

export function allocNDIS_PNP_CAPABILITIES(data?: Partial<NDIS_PNP_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_PNP_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WakeUpCapabilities !== undefined) view.setBigUint64(8, data.WakeUpCapabilities === null ? 0n : BigInt(util.toPointer(data.WakeUpCapabilities)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WAN_PROTOCOL_CAPS (size: 8)
 */
export interface NDIS_WAN_PROTOCOL_CAPS {
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofNDIS_WAN_PROTOCOL_CAPS = 8;

export function allocNDIS_WAN_PROTOCOL_CAPS(data?: Partial<NDIS_WAN_PROTOCOL_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WAN_PROTOCOL_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_CO_LINK_SPEED (size: 8)
 */
export interface NDIS_CO_LINK_SPEED {
  /** u32 */
  Outbound: number;
  /** u32 */
  Inbound: number;
}

export const sizeofNDIS_CO_LINK_SPEED = 8;

export function allocNDIS_CO_LINK_SPEED(data?: Partial<NDIS_CO_LINK_SPEED>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_CO_LINK_SPEED);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Outbound !== undefined) view.setUint32(0, Number(data.Outbound), true);
  // 0x04: u32
  if (data?.Inbound !== undefined) view.setUint32(4, Number(data.Inbound), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_LINK_SPEED (size: 16)
 */
export interface NDIS_LINK_SPEED {
  /** u64 */
  XmitLinkSpeed: Deno.PointerValue;
  /** u64 */
  RcvLinkSpeed: Deno.PointerValue;
}

export const sizeofNDIS_LINK_SPEED = 16;

export function allocNDIS_LINK_SPEED(data?: Partial<NDIS_LINK_SPEED>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_LINK_SPEED);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.XmitLinkSpeed !== undefined) view.setBigUint64(0, BigInt(data.XmitLinkSpeed), true);
  // 0x08: u64
  if (data?.RcvLinkSpeed !== undefined) view.setBigUint64(8, BigInt(data.RcvLinkSpeed), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_GUID (size: 24)
 */
export interface NDIS_GUID {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
}

export const sizeofNDIS_GUID = 24;

export function allocNDIS_GUID(data?: Partial<NDIS_GUID>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_GUID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_IRDA_PACKET_INFO (size: 8)
 */
export interface NDIS_IRDA_PACKET_INFO {
  /** u32 */
  ExtraBOFs: number;
  /** u32 */
  MinTurnAroundTime: number;
}

export const sizeofNDIS_IRDA_PACKET_INFO = 8;

export function allocNDIS_IRDA_PACKET_INFO(data?: Partial<NDIS_IRDA_PACKET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_IRDA_PACKET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtraBOFs !== undefined) view.setUint32(0, Number(data.ExtraBOFs), true);
  // 0x04: u32
  if (data?.MinTurnAroundTime !== undefined) view.setUint32(4, Number(data.MinTurnAroundTime), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_LINK_STATE (size: 40)
 */
export interface NDIS_LINK_STATE {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_MEDIA_CONNECT_STATE */
  MediaConnectState: NET_IF_MEDIA_CONNECT_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_MEDIA_DUPLEX_STATE */
  MediaDuplexState: NET_IF_MEDIA_DUPLEX_STATE;
  /** u64 */
  XmitLinkSpeed: Deno.PointerValue;
  /** u64 */
  RcvLinkSpeed: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_SUPPORTED_PAUSE_FUNCTIONS */
  PauseFunctions: NDIS_SUPPORTED_PAUSE_FUNCTIONS;
  /** u32 */
  AutoNegotiationFlags: number;
}

export const sizeofNDIS_LINK_STATE = 40;

export function allocNDIS_LINK_STATE(data?: Partial<NDIS_LINK_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_LINK_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: i32
  if (data?.MediaConnectState !== undefined) view.setInt32(8, Number(data.MediaConnectState), true);
  // 0x0c: i32
  if (data?.MediaDuplexState !== undefined) view.setInt32(12, Number(data.MediaDuplexState), true);
  // 0x10: u64
  if (data?.XmitLinkSpeed !== undefined) view.setBigUint64(16, BigInt(data.XmitLinkSpeed), true);
  // 0x18: u64
  if (data?.RcvLinkSpeed !== undefined) view.setBigUint64(24, BigInt(data.RcvLinkSpeed), true);
  // 0x20: i32
  if (data?.PauseFunctions !== undefined) view.setInt32(32, Number(data.PauseFunctions), true);
  // 0x24: u32
  if (data?.AutoNegotiationFlags !== undefined) view.setUint32(36, Number(data.AutoNegotiationFlags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_LINK_PARAMETERS (size: 40)
 */
export interface NDIS_LINK_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_MEDIA_DUPLEX_STATE */
  MediaDuplexState: NET_IF_MEDIA_DUPLEX_STATE;
  /** u64 */
  XmitLinkSpeed: Deno.PointerValue;
  /** u64 */
  RcvLinkSpeed: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_SUPPORTED_PAUSE_FUNCTIONS */
  PauseFunctions: NDIS_SUPPORTED_PAUSE_FUNCTIONS;
  /** u32 */
  AutoNegotiationFlags: number;
}

export const sizeofNDIS_LINK_PARAMETERS = 40;

export function allocNDIS_LINK_PARAMETERS(data?: Partial<NDIS_LINK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_LINK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: i32
  if (data?.MediaDuplexState !== undefined) view.setInt32(8, Number(data.MediaDuplexState), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.XmitLinkSpeed !== undefined) view.setBigUint64(16, BigInt(data.XmitLinkSpeed), true);
  // 0x18: u64
  if (data?.RcvLinkSpeed !== undefined) view.setBigUint64(24, BigInt(data.RcvLinkSpeed), true);
  // 0x20: i32
  if (data?.PauseFunctions !== undefined) view.setInt32(32, Number(data.PauseFunctions), true);
  // 0x24: u32
  if (data?.AutoNegotiationFlags !== undefined) view.setUint32(36, Number(data.AutoNegotiationFlags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_OPER_STATE (size: 16)
 */
export interface NDIS_OPER_STATE {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_OPER_STATUS */
  OperationalStatus: NET_IF_OPER_STATUS;
  /** u32 */
  OperationalStatusFlags: number;
}

export const sizeofNDIS_OPER_STATE = 16;

export function allocNDIS_OPER_STATE(data?: Partial<NDIS_OPER_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_OPER_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: i32
  if (data?.OperationalStatus !== undefined) view.setInt32(8, Number(data.OperationalStatus), true);
  // 0x0c: u32
  if (data?.OperationalStatusFlags !== undefined) view.setUint32(12, Number(data.OperationalStatusFlags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_IP_OPER_STATUS (size: 16)
 */
export interface NDIS_IP_OPER_STATUS {
  /** u32 */
  AddressFamily: number;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_OPER_STATUS */
  OperationalStatus: NET_IF_OPER_STATUS;
  /** u32 */
  OperationalStatusFlags: number;
}

export const sizeofNDIS_IP_OPER_STATUS = 16;

export function allocNDIS_IP_OPER_STATUS(data?: Partial<NDIS_IP_OPER_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_IP_OPER_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AddressFamily !== undefined) view.setUint32(0, Number(data.AddressFamily), true);
  // 0x04: i32
  if (data?.OperationalStatus !== undefined) view.setInt32(4, Number(data.OperationalStatus), true);
  // 0x08: u32
  if (data?.OperationalStatusFlags !== undefined) view.setUint32(8, Number(data.OperationalStatusFlags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_IP_OPER_STATUS_INFO (size: 24)
 */
export interface NDIS_IP_OPER_STATUS_INFO {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  NumberofAddressFamiliesReturned: number;
  /** array */
  IpOperationalStatus: Deno.PointerValue | null;
}

export const sizeofNDIS_IP_OPER_STATUS_INFO = 24;

export function allocNDIS_IP_OPER_STATUS_INFO(data?: Partial<NDIS_IP_OPER_STATUS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_IP_OPER_STATUS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.NumberofAddressFamiliesReturned !== undefined) view.setUint32(12, Number(data.NumberofAddressFamiliesReturned), true);
  // 0x10: pointer
  if (data?.IpOperationalStatus !== undefined) view.setBigUint64(16, data.IpOperationalStatus === null ? 0n : BigInt(util.toPointer(data.IpOperationalStatus)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_IP_OPER_STATE (size: 24)
 */
export interface NDIS_IP_OPER_STATE {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_IP_OPER_STATUS */
  IpOperationalStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_IP_OPER_STATE = 24;

export function allocNDIS_IP_OPER_STATE(data?: Partial<NDIS_IP_OPER_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_IP_OPER_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.IpOperationalStatus !== undefined) view.setBigUint64(16, data.IpOperationalStatus === null ? 0n : BigInt(util.toPointer(data.IpOperationalStatus)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_OFFLOAD_PARAMETERS (size: 24)
 */
export interface NDIS_OFFLOAD_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  IPv4Checksum: number;
  /** u8 */
  TCPIPv4Checksum: number;
  /** u8 */
  UDPIPv4Checksum: number;
  /** u8 */
  TCPIPv6Checksum: number;
  /** u8 */
  UDPIPv6Checksum: number;
  /** u8 */
  LsoV1: number;
  /** u8 */
  IPsecV1: number;
  /** u8 */
  LsoV2IPv4: number;
  /** u8 */
  LsoV2IPv6: number;
  /** u8 */
  TcpConnectionIPv4: number;
  /** u8 */
  TcpConnectionIPv6: number;
  /** u32 */
  Flags: number;
}

export const sizeofNDIS_OFFLOAD_PARAMETERS = 24;

export function allocNDIS_OFFLOAD_PARAMETERS(data?: Partial<NDIS_OFFLOAD_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_OFFLOAD_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u8
  if (data?.IPv4Checksum !== undefined) view.setUint8(8, Number(data.IPv4Checksum));
  // 0x09: u8
  if (data?.TCPIPv4Checksum !== undefined) view.setUint8(9, Number(data.TCPIPv4Checksum));
  // 0x0a: u8
  if (data?.UDPIPv4Checksum !== undefined) view.setUint8(10, Number(data.UDPIPv4Checksum));
  // 0x0b: u8
  if (data?.TCPIPv6Checksum !== undefined) view.setUint8(11, Number(data.TCPIPv6Checksum));
  // 0x0c: u8
  if (data?.UDPIPv6Checksum !== undefined) view.setUint8(12, Number(data.UDPIPv6Checksum));
  // 0x0d: u8
  if (data?.LsoV1 !== undefined) view.setUint8(13, Number(data.LsoV1));
  // 0x0e: u8
  if (data?.IPsecV1 !== undefined) view.setUint8(14, Number(data.IPsecV1));
  // 0x0f: u8
  if (data?.LsoV2IPv4 !== undefined) view.setUint8(15, Number(data.LsoV2IPv4));
  // 0x10: u8
  if (data?.LsoV2IPv6 !== undefined) view.setUint8(16, Number(data.LsoV2IPv6));
  // 0x11: u8
  if (data?.TcpConnectionIPv4 !== undefined) view.setUint8(17, Number(data.TcpConnectionIPv4));
  // 0x12: u8
  if (data?.TcpConnectionIPv6 !== undefined) view.setUint8(18, Number(data.TcpConnectionIPv6));
  // 0x13: u32
  if (data?.Flags !== undefined) view.setUint32(19, Number(data.Flags), true);
  // 0x17: pad1
  return buf;
}

/**
 * _IPv4_e__Struct (size: 16)
 */
export interface _IPv4_e__Struct {
  /** u32 */
  Encapsulation: number;
  /** u32 */
  MaxOffLoadSize: number;
  /** u32 */
  MinSegmentCount: number;
  /** u32 */
  _bitfield: number;
}

export const sizeof_IPv4_e__Struct = 16;

export function alloc_IPv4_e__Struct(data?: Partial<_IPv4_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_IPv4_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Encapsulation !== undefined) view.setUint32(0, Number(data.Encapsulation), true);
  // 0x04: u32
  if (data?.MaxOffLoadSize !== undefined) view.setUint32(4, Number(data.MaxOffLoadSize), true);
  // 0x08: u32
  if (data?.MinSegmentCount !== undefined) view.setUint32(8, Number(data.MinSegmentCount), true);
  // 0x0c: u32
  if (data?._bitfield !== undefined) view.setUint32(12, Number(data._bitfield), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_TCP_LARGE_SEND_OFFLOAD_V1 (size: 8)
 */
export interface NDIS_TCP_LARGE_SEND_OFFLOAD_V1 {
  /** _IPv4_e__Struct */
  IPv4: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_TCP_LARGE_SEND_OFFLOAD_V1 = 8;

export function allocNDIS_TCP_LARGE_SEND_OFFLOAD_V1(data?: Partial<NDIS_TCP_LARGE_SEND_OFFLOAD_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_TCP_LARGE_SEND_OFFLOAD_V1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IPv4 !== undefined) view.setBigUint64(0, data.IPv4 === null ? 0n : BigInt(util.toPointer(data.IPv4)), true);
  return buf;
}

/**
 * _IPv4Transmit_e__Struct (size: 8)
 */
export interface _IPv4Transmit_e__Struct {
  /** u32 */
  Encapsulation: number;
  /** u32 */
  _bitfield: number;
}

export const sizeof_IPv4Transmit_e__Struct = 8;

export function alloc_IPv4Transmit_e__Struct(data?: Partial<_IPv4Transmit_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_IPv4Transmit_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Encapsulation !== undefined) view.setUint32(0, Number(data.Encapsulation), true);
  // 0x04: u32
  if (data?._bitfield !== undefined) view.setUint32(4, Number(data._bitfield), true);
  return buf;
}

/**
 * _IPv4Receive_e__Struct (size: 8)
 */
export interface _IPv4Receive_e__Struct {
  /** u32 */
  Encapsulation: number;
  /** u32 */
  _bitfield: number;
}

export const sizeof_IPv4Receive_e__Struct = 8;

export function alloc_IPv4Receive_e__Struct(data?: Partial<_IPv4Receive_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_IPv4Receive_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Encapsulation !== undefined) view.setUint32(0, Number(data.Encapsulation), true);
  // 0x04: u32
  if (data?._bitfield !== undefined) view.setUint32(4, Number(data._bitfield), true);
  return buf;
}

/**
 * _IPv6Transmit_e__Struct (size: 8)
 */
export interface _IPv6Transmit_e__Struct {
  /** u32 */
  Encapsulation: number;
  /** u32 */
  _bitfield: number;
}

export const sizeof_IPv6Transmit_e__Struct = 8;

export function alloc_IPv6Transmit_e__Struct(data?: Partial<_IPv6Transmit_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_IPv6Transmit_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Encapsulation !== undefined) view.setUint32(0, Number(data.Encapsulation), true);
  // 0x04: u32
  if (data?._bitfield !== undefined) view.setUint32(4, Number(data._bitfield), true);
  return buf;
}

/**
 * _IPv6Receive_e__Struct (size: 8)
 */
export interface _IPv6Receive_e__Struct {
  /** u32 */
  Encapsulation: number;
  /** u32 */
  _bitfield: number;
}

export const sizeof_IPv6Receive_e__Struct = 8;

export function alloc_IPv6Receive_e__Struct(data?: Partial<_IPv6Receive_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_IPv6Receive_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Encapsulation !== undefined) view.setUint32(0, Number(data.Encapsulation), true);
  // 0x04: u32
  if (data?._bitfield !== undefined) view.setUint32(4, Number(data._bitfield), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_TCP_IP_CHECKSUM_OFFLOAD (size: 32)
 */
export interface NDIS_TCP_IP_CHECKSUM_OFFLOAD {
  /** _IPv4Transmit_e__Struct */
  IPv4Transmit: Uint8Array | Deno.PointerValue | null;
  /** _IPv4Receive_e__Struct */
  IPv4Receive: Uint8Array | Deno.PointerValue | null;
  /** _IPv6Transmit_e__Struct */
  IPv6Transmit: Uint8Array | Deno.PointerValue | null;
  /** _IPv6Receive_e__Struct */
  IPv6Receive: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_TCP_IP_CHECKSUM_OFFLOAD = 32;

export function allocNDIS_TCP_IP_CHECKSUM_OFFLOAD(data?: Partial<NDIS_TCP_IP_CHECKSUM_OFFLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_TCP_IP_CHECKSUM_OFFLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IPv4Transmit !== undefined) view.setBigUint64(0, data.IPv4Transmit === null ? 0n : BigInt(util.toPointer(data.IPv4Transmit)), true);
  // 0x08: pointer
  if (data?.IPv4Receive !== undefined) view.setBigUint64(8, data.IPv4Receive === null ? 0n : BigInt(util.toPointer(data.IPv4Receive)), true);
  // 0x10: pointer
  if (data?.IPv6Transmit !== undefined) view.setBigUint64(16, data.IPv6Transmit === null ? 0n : BigInt(util.toPointer(data.IPv6Transmit)), true);
  // 0x18: pointer
  if (data?.IPv6Receive !== undefined) view.setBigUint64(24, data.IPv6Receive === null ? 0n : BigInt(util.toPointer(data.IPv6Receive)), true);
  return buf;
}

/**
 * _Supported_e__Struct (size: 24)
 */
export interface _Supported_e__Struct {
  /** u32 */
  Encapsulation: number;
  /** u32 */
  AhEspCombined: number;
  /** u32 */
  TransportTunnelCombined: number;
  /** u32 */
  IPv4Options: number;
  /** u32 */
  Flags: number;
}

export const sizeof_Supported_e__Struct = 24;

export function alloc_Supported_e__Struct(data?: Partial<_Supported_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Supported_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Encapsulation !== undefined) view.setUint32(0, Number(data.Encapsulation), true);
  // 0x04: u32
  if (data?.AhEspCombined !== undefined) view.setUint32(4, Number(data.AhEspCombined), true);
  // 0x08: u32
  if (data?.TransportTunnelCombined !== undefined) view.setUint32(8, Number(data.TransportTunnelCombined), true);
  // 0x0c: u32
  if (data?.IPv4Options !== undefined) view.setUint32(12, Number(data.IPv4Options), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * _IPv4AH_e__Struct (size: 8)
 */
export interface _IPv4AH_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_IPv4AH_e__Struct = 8;

export function alloc_IPv4AH_e__Struct(data?: Partial<_IPv4AH_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_IPv4AH_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * _IPv4ESP_e__Struct (size: 8)
 */
export interface _IPv4ESP_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_IPv4ESP_e__Struct = 8;

export function alloc_IPv4ESP_e__Struct(data?: Partial<_IPv4ESP_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_IPv4ESP_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_IPSEC_OFFLOAD_V1 (size: 24)
 */
export interface NDIS_IPSEC_OFFLOAD_V1 {
  /** _Supported_e__Struct */
  Supported: Uint8Array | Deno.PointerValue | null;
  /** _IPv4AH_e__Struct */
  IPv4AH: Uint8Array | Deno.PointerValue | null;
  /** _IPv4ESP_e__Struct */
  IPv4ESP: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_IPSEC_OFFLOAD_V1 = 24;

export function allocNDIS_IPSEC_OFFLOAD_V1(data?: Partial<NDIS_IPSEC_OFFLOAD_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_IPSEC_OFFLOAD_V1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Supported !== undefined) view.setBigUint64(0, data.Supported === null ? 0n : BigInt(util.toPointer(data.Supported)), true);
  // 0x08: pointer
  if (data?.IPv4AH !== undefined) view.setBigUint64(8, data.IPv4AH === null ? 0n : BigInt(util.toPointer(data.IPv4AH)), true);
  // 0x10: pointer
  if (data?.IPv4ESP !== undefined) view.setBigUint64(16, data.IPv4ESP === null ? 0n : BigInt(util.toPointer(data.IPv4ESP)), true);
  return buf;
}

/**
 * _IPv6_e__Struct (size: 16)
 */
export interface _IPv6_e__Struct {
  /** u32 */
  Encapsulation: number;
  /** u32 */
  MaxOffLoadSize: number;
  /** u32 */
  MinSegmentCount: number;
  /** u32 */
  _bitfield: number;
}

export const sizeof_IPv6_e__Struct = 16;

export function alloc_IPv6_e__Struct(data?: Partial<_IPv6_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_IPv6_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Encapsulation !== undefined) view.setUint32(0, Number(data.Encapsulation), true);
  // 0x04: u32
  if (data?.MaxOffLoadSize !== undefined) view.setUint32(4, Number(data.MaxOffLoadSize), true);
  // 0x08: u32
  if (data?.MinSegmentCount !== undefined) view.setUint32(8, Number(data.MinSegmentCount), true);
  // 0x0c: u32
  if (data?._bitfield !== undefined) view.setUint32(12, Number(data._bitfield), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_TCP_LARGE_SEND_OFFLOAD_V2 (size: 16)
 */
export interface NDIS_TCP_LARGE_SEND_OFFLOAD_V2 {
  /** _IPv4_e__Struct */
  IPv4: Uint8Array | Deno.PointerValue | null;
  /** _IPv6_e__Struct */
  IPv6: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_TCP_LARGE_SEND_OFFLOAD_V2 = 16;

export function allocNDIS_TCP_LARGE_SEND_OFFLOAD_V2(data?: Partial<NDIS_TCP_LARGE_SEND_OFFLOAD_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_TCP_LARGE_SEND_OFFLOAD_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IPv4 !== undefined) view.setBigUint64(0, data.IPv4 === null ? 0n : BigInt(util.toPointer(data.IPv4)), true);
  // 0x08: pointer
  if (data?.IPv6 !== undefined) view.setBigUint64(8, data.IPv6 === null ? 0n : BigInt(util.toPointer(data.IPv6)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_OFFLOAD (size: 48)
 */
export interface NDIS_OFFLOAD {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_TCP_IP_CHECKSUM_OFFLOAD */
  Checksum: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_TCP_LARGE_SEND_OFFLOAD_V1 */
  LsoV1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_IPSEC_OFFLOAD_V1 */
  IPsecV1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_TCP_LARGE_SEND_OFFLOAD_V2 */
  LsoV2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofNDIS_OFFLOAD = 48;

export function allocNDIS_OFFLOAD(data?: Partial<NDIS_OFFLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_OFFLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Checksum !== undefined) view.setBigUint64(8, data.Checksum === null ? 0n : BigInt(util.toPointer(data.Checksum)), true);
  // 0x10: pointer
  if (data?.LsoV1 !== undefined) view.setBigUint64(16, data.LsoV1 === null ? 0n : BigInt(util.toPointer(data.LsoV1)), true);
  // 0x18: pointer
  if (data?.IPsecV1 !== undefined) view.setBigUint64(24, data.IPsecV1 === null ? 0n : BigInt(util.toPointer(data.IPsecV1)), true);
  // 0x20: pointer
  if (data?.LsoV2 !== undefined) view.setBigUint64(32, data.LsoV2 === null ? 0n : BigInt(util.toPointer(data.LsoV2)), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 (size: 8)
 */
export interface NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 {
  /** _IPv4_e__Struct */
  IPv4: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 = 8;

export function allocNDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1(data?: Partial<NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IPv4 !== undefined) view.setBigUint64(0, data.IPv4 === null ? 0n : BigInt(util.toPointer(data.IPv4)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD (size: 32)
 */
export interface NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD {
  /** _IPv4Transmit_e__Struct */
  IPv4Transmit: Uint8Array | Deno.PointerValue | null;
  /** _IPv4Receive_e__Struct */
  IPv4Receive: Uint8Array | Deno.PointerValue | null;
  /** _IPv6Transmit_e__Struct */
  IPv6Transmit: Uint8Array | Deno.PointerValue | null;
  /** _IPv6Receive_e__Struct */
  IPv6Receive: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD = 32;

export function allocNDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD(data?: Partial<NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IPv4Transmit !== undefined) view.setBigUint64(0, data.IPv4Transmit === null ? 0n : BigInt(util.toPointer(data.IPv4Transmit)), true);
  // 0x08: pointer
  if (data?.IPv4Receive !== undefined) view.setBigUint64(8, data.IPv4Receive === null ? 0n : BigInt(util.toPointer(data.IPv4Receive)), true);
  // 0x10: pointer
  if (data?.IPv6Transmit !== undefined) view.setBigUint64(16, data.IPv6Transmit === null ? 0n : BigInt(util.toPointer(data.IPv6Transmit)), true);
  // 0x18: pointer
  if (data?.IPv6Receive !== undefined) view.setBigUint64(24, data.IPv6Receive === null ? 0n : BigInt(util.toPointer(data.IPv6Receive)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_IPSEC_OFFLOAD_V1 (size: 24)
 */
export interface NDIS_WMI_IPSEC_OFFLOAD_V1 {
  /** _Supported_e__Struct */
  Supported: Uint8Array | Deno.PointerValue | null;
  /** _IPv4AH_e__Struct */
  IPv4AH: Uint8Array | Deno.PointerValue | null;
  /** _IPv4ESP_e__Struct */
  IPv4ESP: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_WMI_IPSEC_OFFLOAD_V1 = 24;

export function allocNDIS_WMI_IPSEC_OFFLOAD_V1(data?: Partial<NDIS_WMI_IPSEC_OFFLOAD_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WMI_IPSEC_OFFLOAD_V1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Supported !== undefined) view.setBigUint64(0, data.Supported === null ? 0n : BigInt(util.toPointer(data.Supported)), true);
  // 0x08: pointer
  if (data?.IPv4AH !== undefined) view.setBigUint64(8, data.IPv4AH === null ? 0n : BigInt(util.toPointer(data.IPv4AH)), true);
  // 0x10: pointer
  if (data?.IPv4ESP !== undefined) view.setBigUint64(16, data.IPv4ESP === null ? 0n : BigInt(util.toPointer(data.IPv4ESP)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 (size: 16)
 */
export interface NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 {
  /** _IPv4_e__Struct */
  IPv4: Uint8Array | Deno.PointerValue | null;
  /** _IPv6_e__Struct */
  IPv6: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 = 16;

export function allocNDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2(data?: Partial<NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IPv4 !== undefined) view.setBigUint64(0, data.IPv4 === null ? 0n : BigInt(util.toPointer(data.IPv4)), true);
  // 0x08: pointer
  if (data?.IPv6 !== undefined) view.setBigUint64(8, data.IPv6 === null ? 0n : BigInt(util.toPointer(data.IPv6)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_OFFLOAD (size: 48)
 */
export interface NDIS_WMI_OFFLOAD {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD */
  Checksum: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 */
  LsoV1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_IPSEC_OFFLOAD_V1 */
  IPsecV1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 */
  LsoV2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofNDIS_WMI_OFFLOAD = 48;

export function allocNDIS_WMI_OFFLOAD(data?: Partial<NDIS_WMI_OFFLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WMI_OFFLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Checksum !== undefined) view.setBigUint64(8, data.Checksum === null ? 0n : BigInt(util.toPointer(data.Checksum)), true);
  // 0x10: pointer
  if (data?.LsoV1 !== undefined) view.setBigUint64(16, data.LsoV1 === null ? 0n : BigInt(util.toPointer(data.LsoV1)), true);
  // 0x18: pointer
  if (data?.IPsecV1 !== undefined) view.setBigUint64(24, data.IPsecV1 === null ? 0n : BigInt(util.toPointer(data.IPsecV1)), true);
  // 0x20: pointer
  if (data?.LsoV2 !== undefined) view.setBigUint64(32, data.LsoV2 === null ? 0n : BigInt(util.toPointer(data.LsoV2)), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_TCP_CONNECTION_OFFLOAD (size: 24)
 */
export interface NDIS_TCP_CONNECTION_OFFLOAD {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Encapsulation: number;
  /** u32 */
  _bitfield: number;
  /** u32 */
  TcpConnectionOffloadCapacity: number;
  /** u32 */
  Flags: number;
}

export const sizeofNDIS_TCP_CONNECTION_OFFLOAD = 24;

export function allocNDIS_TCP_CONNECTION_OFFLOAD(data?: Partial<NDIS_TCP_CONNECTION_OFFLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_TCP_CONNECTION_OFFLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Encapsulation !== undefined) view.setUint32(8, Number(data.Encapsulation), true);
  // 0x0c: u32
  if (data?._bitfield !== undefined) view.setUint32(12, Number(data._bitfield), true);
  // 0x10: u32
  if (data?.TcpConnectionOffloadCapacity !== undefined) view.setUint32(16, Number(data.TcpConnectionOffloadCapacity), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_TCP_CONNECTION_OFFLOAD (size: 40)
 */
export interface NDIS_WMI_TCP_CONNECTION_OFFLOAD {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Encapsulation: number;
  /** u32 */
  SupportIPv4: number;
  /** u32 */
  SupportIPv6: number;
  /** u32 */
  SupportIPv6ExtensionHeaders: number;
  /** u32 */
  SupportSack: number;
  /** u32 */
  TcpConnectionOffloadCapacity: number;
  /** u32 */
  Flags: number;
}

export const sizeofNDIS_WMI_TCP_CONNECTION_OFFLOAD = 40;

export function allocNDIS_WMI_TCP_CONNECTION_OFFLOAD(data?: Partial<NDIS_WMI_TCP_CONNECTION_OFFLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WMI_TCP_CONNECTION_OFFLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Encapsulation !== undefined) view.setUint32(8, Number(data.Encapsulation), true);
  // 0x0c: u32
  if (data?.SupportIPv4 !== undefined) view.setUint32(12, Number(data.SupportIPv4), true);
  // 0x10: u32
  if (data?.SupportIPv6 !== undefined) view.setUint32(16, Number(data.SupportIPv6), true);
  // 0x14: u32
  if (data?.SupportIPv6ExtensionHeaders !== undefined) view.setUint32(20, Number(data.SupportIPv6ExtensionHeaders), true);
  // 0x18: u32
  if (data?.SupportSack !== undefined) view.setUint32(24, Number(data.SupportSack), true);
  // 0x1c: u32
  if (data?.TcpConnectionOffloadCapacity !== undefined) view.setUint32(28, Number(data.TcpConnectionOffloadCapacity), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_AUTHENTICATION_PARAMETERS (size: 24)
 */
export interface NDIS_PORT_AUTHENTICATION_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_CONTROL_STATE */
  SendControlState: NDIS_PORT_CONTROL_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_CONTROL_STATE */
  RcvControlState: NDIS_PORT_CONTROL_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_AUTHORIZATION_STATE */
  SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_AUTHORIZATION_STATE */
  RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE;
}

export const sizeofNDIS_PORT_AUTHENTICATION_PARAMETERS = 24;

export function allocNDIS_PORT_AUTHENTICATION_PARAMETERS(data?: Partial<NDIS_PORT_AUTHENTICATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_PORT_AUTHENTICATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: i32
  if (data?.SendControlState !== undefined) view.setInt32(8, Number(data.SendControlState), true);
  // 0x0c: i32
  if (data?.RcvControlState !== undefined) view.setInt32(12, Number(data.RcvControlState), true);
  // 0x10: i32
  if (data?.SendAuthorizationState !== undefined) view.setInt32(16, Number(data.SendAuthorizationState), true);
  // 0x14: i32
  if (data?.RcvAuthorizationState !== undefined) view.setInt32(20, Number(data.RcvAuthorizationState), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_METHOD_HEADER (size: 48)
 */
export interface NDIS_WMI_METHOD_HEADER {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PortNumber: number;
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  NetLuid: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  RequestId: Deno.PointerValue;
  /** u32 */
  Timeout: number;
  /** array */
  Padding: Deno.PointerValue | null;
}

export const sizeofNDIS_WMI_METHOD_HEADER = 48;

export function allocNDIS_WMI_METHOD_HEADER(data?: Partial<NDIS_WMI_METHOD_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WMI_METHOD_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.PortNumber !== undefined) view.setUint32(8, Number(data.PortNumber), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NetLuid !== undefined) view.setBigUint64(16, data.NetLuid === null ? 0n : BigInt(util.toPointer(data.NetLuid)), true);
  // 0x18: u64
  if (data?.RequestId !== undefined) view.setBigUint64(24, BigInt(data.RequestId), true);
  // 0x20: u32
  if (data?.Timeout !== undefined) view.setUint32(32, Number(data.Timeout), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Padding !== undefined) view.setBigUint64(40, data.Padding === null ? 0n : BigInt(util.toPointer(data.Padding)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_SET_HEADER (size: 48)
 */
export interface NDIS_WMI_SET_HEADER {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PortNumber: number;
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  NetLuid: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  RequestId: Deno.PointerValue;
  /** u32 */
  Timeout: number;
  /** array */
  Padding: Deno.PointerValue | null;
}

export const sizeofNDIS_WMI_SET_HEADER = 48;

export function allocNDIS_WMI_SET_HEADER(data?: Partial<NDIS_WMI_SET_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WMI_SET_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.PortNumber !== undefined) view.setUint32(8, Number(data.PortNumber), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NetLuid !== undefined) view.setBigUint64(16, data.NetLuid === null ? 0n : BigInt(util.toPointer(data.NetLuid)), true);
  // 0x18: u64
  if (data?.RequestId !== undefined) view.setBigUint64(24, BigInt(data.RequestId), true);
  // 0x20: u32
  if (data?.Timeout !== undefined) view.setUint32(32, Number(data.Timeout), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Padding !== undefined) view.setBigUint64(40, data.Padding === null ? 0n : BigInt(util.toPointer(data.Padding)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_EVENT_HEADER (size: 56)
 */
export interface NDIS_WMI_EVENT_HEADER {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  IfIndex: number;
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  NetLuid: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  RequestId: Deno.PointerValue;
  /** u32 */
  PortNumber: number;
  /** u32 */
  DeviceNameLength: number;
  /** u32 */
  DeviceNameOffset: number;
  /** array */
  Padding: Deno.PointerValue | null;
}

export const sizeofNDIS_WMI_EVENT_HEADER = 56;

export function allocNDIS_WMI_EVENT_HEADER(data?: Partial<NDIS_WMI_EVENT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WMI_EVENT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.IfIndex !== undefined) view.setUint32(8, Number(data.IfIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NetLuid !== undefined) view.setBigUint64(16, data.NetLuid === null ? 0n : BigInt(util.toPointer(data.NetLuid)), true);
  // 0x18: u64
  if (data?.RequestId !== undefined) view.setBigUint64(24, BigInt(data.RequestId), true);
  // 0x20: u32
  if (data?.PortNumber !== undefined) view.setUint32(32, Number(data.PortNumber), true);
  // 0x24: u32
  if (data?.DeviceNameLength !== undefined) view.setUint32(36, Number(data.DeviceNameLength), true);
  // 0x28: u32
  if (data?.DeviceNameOffset !== undefined) view.setUint32(40, Number(data.DeviceNameOffset), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Padding !== undefined) view.setBigUint64(48, data.Padding === null ? 0n : BigInt(util.toPointer(data.Padding)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_ENUM_ADAPTER (size: 40)
 */
export interface NDIS_WMI_ENUM_ADAPTER {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  IfIndex: number;
  /** Windows.Win32.NetworkManagement.Ndis.NET_LUID_LH */
  NetLuid: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  DeviceNameLength: number;
  /** array */
  DeviceName: Deno.PointerValue | null;
}

export const sizeofNDIS_WMI_ENUM_ADAPTER = 40;

export function allocNDIS_WMI_ENUM_ADAPTER(data?: Partial<NDIS_WMI_ENUM_ADAPTER>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WMI_ENUM_ADAPTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.IfIndex !== undefined) view.setUint32(8, Number(data.IfIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NetLuid !== undefined) view.setBigUint64(16, data.NetLuid === null ? 0n : BigInt(util.toPointer(data.NetLuid)), true);
  // 0x18: u16
  if (data?.DeviceNameLength !== undefined) view.setUint16(24, Number(data.DeviceNameLength), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.DeviceName !== undefined) view.setBigUint64(32, data.DeviceName === null ? 0n : BigInt(util.toPointer(data.DeviceName)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_WMI_OUTPUT_INFO (size: 24)
 */
export interface NDIS_WMI_OUTPUT_INFO {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u8 */
  SupportedRevision: number;
  /** u32 */
  DataOffset: number;
}

export const sizeofNDIS_WMI_OUTPUT_INFO = 24;

export function allocNDIS_WMI_OUTPUT_INFO(data?: Partial<NDIS_WMI_OUTPUT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_WMI_OUTPUT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u8
  if (data?.SupportedRevision !== undefined) view.setUint8(12, Number(data.SupportedRevision));
  // 0x0d: u32
  if (data?.DataOffset !== undefined) view.setUint32(13, Number(data.DataOffset), true);
  // 0x11: pad7
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_RECEIVE_SCALE_CAPABILITIES (size: 24)
 */
export interface NDIS_RECEIVE_SCALE_CAPABILITIES {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CapabilitiesFlags: number;
  /** u32 */
  NumberOfInterruptMessages: number;
  /** u32 */
  NumberOfReceiveQueues: number;
}

export const sizeofNDIS_RECEIVE_SCALE_CAPABILITIES = 24;

export function allocNDIS_RECEIVE_SCALE_CAPABILITIES(data?: Partial<NDIS_RECEIVE_SCALE_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_RECEIVE_SCALE_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.CapabilitiesFlags !== undefined) view.setUint32(8, Number(data.CapabilitiesFlags), true);
  // 0x0c: u32
  if (data?.NumberOfInterruptMessages !== undefined) view.setUint32(12, Number(data.NumberOfInterruptMessages), true);
  // 0x10: u32
  if (data?.NumberOfReceiveQueues !== undefined) view.setUint32(16, Number(data.NumberOfReceiveQueues), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_RECEIVE_SCALE_PARAMETERS (size: 32)
 */
export interface NDIS_RECEIVE_SCALE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Flags: number;
  /** u16 */
  BaseCpuNumber: number;
  /** u32 */
  HashInformation: number;
  /** u16 */
  IndirectionTableSize: number;
  /** u32 */
  IndirectionTableOffset: number;
  /** u16 */
  HashSecretKeySize: number;
  /** u32 */
  HashSecretKeyOffset: number;
}

export const sizeofNDIS_RECEIVE_SCALE_PARAMETERS = 32;

export function allocNDIS_RECEIVE_SCALE_PARAMETERS(data?: Partial<NDIS_RECEIVE_SCALE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_RECEIVE_SCALE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u16
  if (data?.Flags !== undefined) view.setUint16(8, Number(data.Flags), true);
  // 0x0a: u16
  if (data?.BaseCpuNumber !== undefined) view.setUint16(10, Number(data.BaseCpuNumber), true);
  // 0x0c: u32
  if (data?.HashInformation !== undefined) view.setUint32(12, Number(data.HashInformation), true);
  // 0x10: u16
  if (data?.IndirectionTableSize !== undefined) view.setUint16(16, Number(data.IndirectionTableSize), true);
  // 0x12: u32
  if (data?.IndirectionTableOffset !== undefined) view.setUint32(18, Number(data.IndirectionTableOffset), true);
  // 0x16: u16
  if (data?.HashSecretKeySize !== undefined) view.setUint16(22, Number(data.HashSecretKeySize), true);
  // 0x18: u32
  if (data?.HashSecretKeyOffset !== undefined) view.setUint32(24, Number(data.HashSecretKeyOffset), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_RECEIVE_HASH_PARAMETERS (size: 24)
 */
export interface NDIS_RECEIVE_HASH_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  HashInformation: number;
  /** u16 */
  HashSecretKeySize: number;
  /** u32 */
  HashSecretKeyOffset: number;
}

export const sizeofNDIS_RECEIVE_HASH_PARAMETERS = 24;

export function allocNDIS_RECEIVE_HASH_PARAMETERS(data?: Partial<NDIS_RECEIVE_HASH_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_RECEIVE_HASH_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.HashInformation !== undefined) view.setUint32(12, Number(data.HashInformation), true);
  // 0x10: u16
  if (data?.HashSecretKeySize !== undefined) view.setUint16(16, Number(data.HashSecretKeySize), true);
  // 0x12: u32
  if (data?.HashSecretKeyOffset !== undefined) view.setUint32(18, Number(data.HashSecretKeyOffset), true);
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_STATE (size: 56)
 */
export interface NDIS_PORT_STATE {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_MEDIA_CONNECT_STATE */
  MediaConnectState: NET_IF_MEDIA_CONNECT_STATE;
  /** u64 */
  XmitLinkSpeed: Deno.PointerValue;
  /** u64 */
  RcvLinkSpeed: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_DIRECTION_TYPE */
  Direction: NET_IF_DIRECTION_TYPE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_CONTROL_STATE */
  SendControlState: NDIS_PORT_CONTROL_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_CONTROL_STATE */
  RcvControlState: NDIS_PORT_CONTROL_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_AUTHORIZATION_STATE */
  SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_AUTHORIZATION_STATE */
  RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE;
  /** u32 */
  Flags: number;
}

export const sizeofNDIS_PORT_STATE = 56;

export function allocNDIS_PORT_STATE(data?: Partial<NDIS_PORT_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_PORT_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: i32
  if (data?.MediaConnectState !== undefined) view.setInt32(8, Number(data.MediaConnectState), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.XmitLinkSpeed !== undefined) view.setBigUint64(16, BigInt(data.XmitLinkSpeed), true);
  // 0x18: u64
  if (data?.RcvLinkSpeed !== undefined) view.setBigUint64(24, BigInt(data.RcvLinkSpeed), true);
  // 0x20: i32
  if (data?.Direction !== undefined) view.setInt32(32, Number(data.Direction), true);
  // 0x24: i32
  if (data?.SendControlState !== undefined) view.setInt32(36, Number(data.SendControlState), true);
  // 0x28: i32
  if (data?.RcvControlState !== undefined) view.setInt32(40, Number(data.RcvControlState), true);
  // 0x2c: i32
  if (data?.SendAuthorizationState !== undefined) view.setInt32(44, Number(data.SendAuthorizationState), true);
  // 0x30: i32
  if (data?.RcvAuthorizationState !== undefined) view.setInt32(48, Number(data.RcvAuthorizationState), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_CHARACTERISTICS (size: 64)
 */
export interface NDIS_PORT_CHARACTERISTICS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PortNumber: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_TYPE */
  Type: NDIS_PORT_TYPE;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_MEDIA_CONNECT_STATE */
  MediaConnectState: NET_IF_MEDIA_CONNECT_STATE;
  /** u64 */
  XmitLinkSpeed: Deno.PointerValue;
  /** u64 */
  RcvLinkSpeed: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Ndis.NET_IF_DIRECTION_TYPE */
  Direction: NET_IF_DIRECTION_TYPE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_CONTROL_STATE */
  SendControlState: NDIS_PORT_CONTROL_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_CONTROL_STATE */
  RcvControlState: NDIS_PORT_CONTROL_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_AUTHORIZATION_STATE */
  SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_AUTHORIZATION_STATE */
  RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE;
}

export const sizeofNDIS_PORT_CHARACTERISTICS = 64;

export function allocNDIS_PORT_CHARACTERISTICS(data?: Partial<NDIS_PORT_CHARACTERISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_PORT_CHARACTERISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.PortNumber !== undefined) view.setUint32(8, Number(data.PortNumber), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: i32
  if (data?.Type !== undefined) view.setInt32(16, Number(data.Type), true);
  // 0x14: i32
  if (data?.MediaConnectState !== undefined) view.setInt32(20, Number(data.MediaConnectState), true);
  // 0x18: u64
  if (data?.XmitLinkSpeed !== undefined) view.setBigUint64(24, BigInt(data.XmitLinkSpeed), true);
  // 0x20: u64
  if (data?.RcvLinkSpeed !== undefined) view.setBigUint64(32, BigInt(data.RcvLinkSpeed), true);
  // 0x28: i32
  if (data?.Direction !== undefined) view.setInt32(40, Number(data.Direction), true);
  // 0x2c: i32
  if (data?.SendControlState !== undefined) view.setInt32(44, Number(data.SendControlState), true);
  // 0x30: i32
  if (data?.RcvControlState !== undefined) view.setInt32(48, Number(data.RcvControlState), true);
  // 0x34: i32
  if (data?.SendAuthorizationState !== undefined) view.setInt32(52, Number(data.SendAuthorizationState), true);
  // 0x38: i32
  if (data?.RcvAuthorizationState !== undefined) view.setInt32(56, Number(data.RcvAuthorizationState), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_PORT (size: 40)
 */
export interface NDIS_PORT {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  NdisReserved: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  MiniportReserved: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ProtocolReserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_CHARACTERISTICS */
  PortCharacteristics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_PORT = 40;

export function allocNDIS_PORT(data?: Partial<NDIS_PORT>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_PORT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(util.toPointer(data.Next)), true);
  // 0x08: pointer
  if (data?.NdisReserved !== undefined) view.setBigUint64(8, data.NdisReserved === null ? 0n : BigInt(util.toPointer(data.NdisReserved)), true);
  // 0x10: pointer
  if (data?.MiniportReserved !== undefined) view.setBigUint64(16, data.MiniportReserved === null ? 0n : BigInt(util.toPointer(data.MiniportReserved)), true);
  // 0x18: pointer
  if (data?.ProtocolReserved !== undefined) view.setBigUint64(24, data.ProtocolReserved === null ? 0n : BigInt(util.toPointer(data.ProtocolReserved)), true);
  // 0x20: pointer
  if (data?.PortCharacteristics !== undefined) view.setBigUint64(32, data.PortCharacteristics === null ? 0n : BigInt(util.toPointer(data.PortCharacteristics)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_PORT_ARRAY (size: 32)
 */
export interface NDIS_PORT_ARRAY {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfPorts: number;
  /** u32 */
  OffsetFirstPort: number;
  /** u32 */
  ElementSize: number;
  /** array */
  Ports: Deno.PointerValue | null;
}

export const sizeofNDIS_PORT_ARRAY = 32;

export function allocNDIS_PORT_ARRAY(data?: Partial<NDIS_PORT_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_PORT_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.NumberOfPorts !== undefined) view.setUint32(8, Number(data.NumberOfPorts), true);
  // 0x0c: u32
  if (data?.OffsetFirstPort !== undefined) view.setUint32(12, Number(data.OffsetFirstPort), true);
  // 0x10: u32
  if (data?.ElementSize !== undefined) view.setUint32(16, Number(data.ElementSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Ports !== undefined) view.setBigUint64(24, data.Ports === null ? 0n : BigInt(util.toPointer(data.Ports)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_TIMESTAMP_CAPABILITY_FLAGS (size: 112)
 */
export interface NDIS_TIMESTAMP_CAPABILITY_FLAGS {
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv4EventMsgReceiveHw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv4AllMsgReceiveHw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv4EventMsgTransmitHw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv4AllMsgTransmitHw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv6EventMsgReceiveHw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv6AllMsgReceiveHw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv6EventMsgTransmitHw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PtpV2OverUdpIPv6AllMsgTransmitHw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  AllReceiveHw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  AllTransmitHw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  TaggedTransmitHw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  AllReceiveSw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  AllTransmitSw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  TaggedTransmitSw: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_TIMESTAMP_CAPABILITY_FLAGS = 112;

export function allocNDIS_TIMESTAMP_CAPABILITY_FLAGS(data?: Partial<NDIS_TIMESTAMP_CAPABILITY_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_TIMESTAMP_CAPABILITY_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PtpV2OverUdpIPv4EventMsgReceiveHw !== undefined) view.setBigUint64(0, data.PtpV2OverUdpIPv4EventMsgReceiveHw === null ? 0n : BigInt(util.toPointer(data.PtpV2OverUdpIPv4EventMsgReceiveHw)), true);
  // 0x08: pointer
  if (data?.PtpV2OverUdpIPv4AllMsgReceiveHw !== undefined) view.setBigUint64(8, data.PtpV2OverUdpIPv4AllMsgReceiveHw === null ? 0n : BigInt(util.toPointer(data.PtpV2OverUdpIPv4AllMsgReceiveHw)), true);
  // 0x10: pointer
  if (data?.PtpV2OverUdpIPv4EventMsgTransmitHw !== undefined) view.setBigUint64(16, data.PtpV2OverUdpIPv4EventMsgTransmitHw === null ? 0n : BigInt(util.toPointer(data.PtpV2OverUdpIPv4EventMsgTransmitHw)), true);
  // 0x18: pointer
  if (data?.PtpV2OverUdpIPv4AllMsgTransmitHw !== undefined) view.setBigUint64(24, data.PtpV2OverUdpIPv4AllMsgTransmitHw === null ? 0n : BigInt(util.toPointer(data.PtpV2OverUdpIPv4AllMsgTransmitHw)), true);
  // 0x20: pointer
  if (data?.PtpV2OverUdpIPv6EventMsgReceiveHw !== undefined) view.setBigUint64(32, data.PtpV2OverUdpIPv6EventMsgReceiveHw === null ? 0n : BigInt(util.toPointer(data.PtpV2OverUdpIPv6EventMsgReceiveHw)), true);
  // 0x28: pointer
  if (data?.PtpV2OverUdpIPv6AllMsgReceiveHw !== undefined) view.setBigUint64(40, data.PtpV2OverUdpIPv6AllMsgReceiveHw === null ? 0n : BigInt(util.toPointer(data.PtpV2OverUdpIPv6AllMsgReceiveHw)), true);
  // 0x30: pointer
  if (data?.PtpV2OverUdpIPv6EventMsgTransmitHw !== undefined) view.setBigUint64(48, data.PtpV2OverUdpIPv6EventMsgTransmitHw === null ? 0n : BigInt(util.toPointer(data.PtpV2OverUdpIPv6EventMsgTransmitHw)), true);
  // 0x38: pointer
  if (data?.PtpV2OverUdpIPv6AllMsgTransmitHw !== undefined) view.setBigUint64(56, data.PtpV2OverUdpIPv6AllMsgTransmitHw === null ? 0n : BigInt(util.toPointer(data.PtpV2OverUdpIPv6AllMsgTransmitHw)), true);
  // 0x40: pointer
  if (data?.AllReceiveHw !== undefined) view.setBigUint64(64, data.AllReceiveHw === null ? 0n : BigInt(util.toPointer(data.AllReceiveHw)), true);
  // 0x48: pointer
  if (data?.AllTransmitHw !== undefined) view.setBigUint64(72, data.AllTransmitHw === null ? 0n : BigInt(util.toPointer(data.AllTransmitHw)), true);
  // 0x50: pointer
  if (data?.TaggedTransmitHw !== undefined) view.setBigUint64(80, data.TaggedTransmitHw === null ? 0n : BigInt(util.toPointer(data.TaggedTransmitHw)), true);
  // 0x58: pointer
  if (data?.AllReceiveSw !== undefined) view.setBigUint64(88, data.AllReceiveSw === null ? 0n : BigInt(util.toPointer(data.AllReceiveSw)), true);
  // 0x60: pointer
  if (data?.AllTransmitSw !== undefined) view.setBigUint64(96, data.AllTransmitSw === null ? 0n : BigInt(util.toPointer(data.AllTransmitSw)), true);
  // 0x68: pointer
  if (data?.TaggedTransmitSw !== undefined) view.setBigUint64(104, data.TaggedTransmitSw === null ? 0n : BigInt(util.toPointer(data.TaggedTransmitSw)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_TIMESTAMP_CAPABILITIES (size: 48)
 */
export interface NDIS_TIMESTAMP_CAPABILITIES {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  HardwareClockFrequencyHz: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  CrossTimestamp: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reserved1: Deno.PointerValue;
  /** u64 */
  Reserved2: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_TIMESTAMP_CAPABILITY_FLAGS */
  TimestampFlags: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNDIS_TIMESTAMP_CAPABILITIES = 48;

export function allocNDIS_TIMESTAMP_CAPABILITIES(data?: Partial<NDIS_TIMESTAMP_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_TIMESTAMP_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u64
  if (data?.HardwareClockFrequencyHz !== undefined) view.setBigUint64(8, BigInt(data.HardwareClockFrequencyHz), true);
  // 0x10: pointer
  if (data?.CrossTimestamp !== undefined) view.setBigUint64(16, data.CrossTimestamp === null ? 0n : BigInt(util.toPointer(data.CrossTimestamp)), true);
  // 0x18: u64
  if (data?.Reserved1 !== undefined) view.setBigUint64(24, BigInt(data.Reserved1), true);
  // 0x20: u64
  if (data?.Reserved2 !== undefined) view.setBigUint64(32, BigInt(data.Reserved2), true);
  // 0x28: pointer
  if (data?.TimestampFlags !== undefined) view.setBigUint64(40, data.TimestampFlags === null ? 0n : BigInt(util.toPointer(data.TimestampFlags)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_HARDWARE_CROSSTIMESTAMP (size: 40)
 */
export interface NDIS_HARDWARE_CROSSTIMESTAMP {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u64 */
  SystemTimestamp1: Deno.PointerValue;
  /** u64 */
  HardwareClockTimestamp: Deno.PointerValue;
  /** u64 */
  SystemTimestamp2: Deno.PointerValue;
}

export const sizeofNDIS_HARDWARE_CROSSTIMESTAMP = 40;

export function allocNDIS_HARDWARE_CROSSTIMESTAMP(data?: Partial<NDIS_HARDWARE_CROSSTIMESTAMP>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_HARDWARE_CROSSTIMESTAMP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.SystemTimestamp1 !== undefined) view.setBigUint64(16, BigInt(data.SystemTimestamp1), true);
  // 0x18: u64
  if (data?.HardwareClockTimestamp !== undefined) view.setBigUint64(24, BigInt(data.HardwareClockTimestamp), true);
  // 0x20: u64
  if (data?.SystemTimestamp2 !== undefined) view.setBigUint64(32, BigInt(data.SystemTimestamp2), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDK_VERSION (size: 8)
 */
export interface NDK_VERSION {
  /** u16 */
  Major: number;
  /** u16 */
  Minor: number;
}

export const sizeofNDK_VERSION = 8;

export function allocNDK_VERSION(data?: Partial<NDK_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofNDK_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Major !== undefined) view.setUint16(0, Number(data.Major), true);
  // 0x02: u16
  if (data?.Minor !== undefined) view.setUint16(2, Number(data.Minor), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDK_ADAPTER_INFO (size: 104)
 */
export interface NDK_ADAPTER_INFO {
  /** Windows.Win32.NetworkManagement.Ndis.NDK_VERSION */
  Version: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VendorId: number;
  /** u32 */
  DeviceId: number;
  /** usize */
  MaxRegistrationSize: Deno.PointerValue;
  /** usize */
  MaxWindowSize: Deno.PointerValue;
  /** u32 */
  FRMRPageCount: number;
  /** u32 */
  MaxInitiatorRequestSge: number;
  /** u32 */
  MaxReceiveRequestSge: number;
  /** u32 */
  MaxReadRequestSge: number;
  /** u32 */
  MaxTransferLength: number;
  /** u32 */
  MaxInlineDataSize: number;
  /** u32 */
  MaxInboundReadLimit: number;
  /** u32 */
  MaxOutboundReadLimit: number;
  /** u32 */
  MaxReceiveQueueDepth: number;
  /** u32 */
  MaxInitiatorQueueDepth: number;
  /** u32 */
  MaxSrqDepth: number;
  /** u32 */
  MaxCqDepth: number;
  /** u32 */
  LargeRequestThreshold: number;
  /** u32 */
  MaxCallerData: number;
  /** u32 */
  MaxCalleeData: number;
  /** u32 */
  AdapterFlags: number;
  /** Windows.Win32.NetworkManagement.Ndis.NDK_RDMA_TECHNOLOGY */
  RdmaTechnology: NDK_RDMA_TECHNOLOGY;
}

export const sizeofNDK_ADAPTER_INFO = 104;

export function allocNDK_ADAPTER_INFO(data?: Partial<NDK_ADAPTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNDK_ADAPTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Version !== undefined) view.setBigUint64(0, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x08: u32
  if (data?.VendorId !== undefined) view.setUint32(8, Number(data.VendorId), true);
  // 0x0c: u32
  if (data?.DeviceId !== undefined) view.setUint32(12, Number(data.DeviceId), true);
  // 0x10: usize
  if (data?.MaxRegistrationSize !== undefined) view.setBigUint64(16, BigInt(data.MaxRegistrationSize), true);
  // 0x18: usize
  if (data?.MaxWindowSize !== undefined) view.setBigUint64(24, BigInt(data.MaxWindowSize), true);
  // 0x20: u32
  if (data?.FRMRPageCount !== undefined) view.setUint32(32, Number(data.FRMRPageCount), true);
  // 0x24: u32
  if (data?.MaxInitiatorRequestSge !== undefined) view.setUint32(36, Number(data.MaxInitiatorRequestSge), true);
  // 0x28: u32
  if (data?.MaxReceiveRequestSge !== undefined) view.setUint32(40, Number(data.MaxReceiveRequestSge), true);
  // 0x2c: u32
  if (data?.MaxReadRequestSge !== undefined) view.setUint32(44, Number(data.MaxReadRequestSge), true);
  // 0x30: u32
  if (data?.MaxTransferLength !== undefined) view.setUint32(48, Number(data.MaxTransferLength), true);
  // 0x34: u32
  if (data?.MaxInlineDataSize !== undefined) view.setUint32(52, Number(data.MaxInlineDataSize), true);
  // 0x38: u32
  if (data?.MaxInboundReadLimit !== undefined) view.setUint32(56, Number(data.MaxInboundReadLimit), true);
  // 0x3c: u32
  if (data?.MaxOutboundReadLimit !== undefined) view.setUint32(60, Number(data.MaxOutboundReadLimit), true);
  // 0x40: u32
  if (data?.MaxReceiveQueueDepth !== undefined) view.setUint32(64, Number(data.MaxReceiveQueueDepth), true);
  // 0x44: u32
  if (data?.MaxInitiatorQueueDepth !== undefined) view.setUint32(68, Number(data.MaxInitiatorQueueDepth), true);
  // 0x48: u32
  if (data?.MaxSrqDepth !== undefined) view.setUint32(72, Number(data.MaxSrqDepth), true);
  // 0x4c: u32
  if (data?.MaxCqDepth !== undefined) view.setUint32(76, Number(data.MaxCqDepth), true);
  // 0x50: u32
  if (data?.LargeRequestThreshold !== undefined) view.setUint32(80, Number(data.LargeRequestThreshold), true);
  // 0x54: u32
  if (data?.MaxCallerData !== undefined) view.setUint32(84, Number(data.MaxCallerData), true);
  // 0x58: u32
  if (data?.MaxCalleeData !== undefined) view.setUint32(88, Number(data.MaxCalleeData), true);
  // 0x5c: u32
  if (data?.AdapterFlags !== undefined) view.setUint32(92, Number(data.AdapterFlags), true);
  // 0x60: i32
  if (data?.RdmaTechnology !== undefined) view.setInt32(96, Number(data.RdmaTechnology), true);
  // 0x64: pad4
  return buf;
}

// Native Libraries

// Symbols

