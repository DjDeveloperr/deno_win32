/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.Apis

import * as util from "../../util.ts";

// Enums
export type WNV_NOTIFICATION_TYPE = number;
export type WNV_OBJECT_TYPE = number;
export type WNV_CA_NOTIFICATION_TYPE = number;
export type RIP_INFO_TYPE = number;
export type NL_DAD_STATE = number;

// Constants
export const WNV_API_MAJOR_VERSION_1 = 1;
export const WNV_API_MINOR_VERSION_0 = 0;
export const WnvPolicyMismatchType = 0;
export const WnvRedirectType = 1;
export const WnvObjectChangeType = 2;
export const WnvNotificationTypeMax = 3;
export const WnvProviderAddressType = 0;
export const WnvCustomerAddressType = 1;
export const WnvObjectTypeMax = 2;
export const WnvCustomerAddressAdded = 0;
export const WnvCustomerAddressDeleted = 1;
export const WnvCustomerAddressMoved = 2;
export const WnvCustomerAddressMax = 3;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const NldsInvalid = 0;
export const NldsTentative = 1;
export const NldsDuplicate = 2;
export const NldsDeprecated = 3;
export const NldsPreferred = 4;
export const IpDadStateInvalid = 0;
export const IpDadStateTentative = 1;
export const IpDadStateDuplicate = 2;
export const IpDadStateDeprecated = 3;
export const IpDadStatePreferred = 4;

// Structs

/**
 * Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_OBJECT_HEADER (size: 8)
 */
export interface WNV_OBJECT_HEADER {
  /** u8 */
  MajorVersion: number;
  /** u8 */
  MinorVersion: number;
  /** u32 */
  Size: number;
}

export const sizeofWNV_OBJECT_HEADER = 8;

export function allocWNV_OBJECT_HEADER(data?: Partial<WNV_OBJECT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofWNV_OBJECT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MajorVersion !== undefined) view.setUint8(0, Number(data.MajorVersion));
  // 0x01: u8
  if (data?.MinorVersion !== undefined) view.setUint8(1, Number(data.MinorVersion));
  // 0x02: u32
  if (data?.Size !== undefined) view.setUint32(2, Number(data.Size), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_NOTIFICATION_PARAM (size: 24)
 */
export interface WNV_NOTIFICATION_PARAM {
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_NOTIFICATION_TYPE */
  NotificationType: WNV_NOTIFICATION_TYPE;
  /** u32 */
  PendingNotifications: number;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWNV_NOTIFICATION_PARAM = 24;

export function allocWNV_NOTIFICATION_PARAM(data?: Partial<WNV_NOTIFICATION_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofWNV_NOTIFICATION_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: i32
  if (data?.NotificationType !== undefined) view.setInt32(8, Number(data.NotificationType), true);
  // 0x0c: u32
  if (data?.PendingNotifications !== undefined) view.setUint32(12, Number(data.PendingNotifications), true);
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

/**
 * _S_un_ports_e__Struct (size: 8)
 */
export interface _S_un_ports_e__Struct {
  /** u16 */
  s_srcport: number;
  /** u16 */
  s_dstport: number;
}

export const sizeof_S_un_ports_e__Struct = 8;

export function alloc_S_un_ports_e__Struct(data?: Partial<_S_un_ports_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_ports_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.s_srcport !== undefined) view.setUint16(0, Number(data.s_srcport), true);
  // 0x02: u16
  if (data?.s_dstport !== undefined) view.setUint16(2, Number(data.s_dstport), true);
  // 0x04: pad4
  return buf;
}

/**
 * _S_un_icmp_e__Struct (size: 8)
 */
export interface _S_un_icmp_e__Struct {
  /** u8 */
  s_type: number;
  /** u8 */
  s_code: number;
  /** u16 */
  filler: number;
}

export const sizeof_S_un_icmp_e__Struct = 8;

export function alloc_S_un_icmp_e__Struct(data?: Partial<_S_un_icmp_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_icmp_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.s_type !== undefined) view.setUint8(0, Number(data.s_type));
  // 0x01: u8
  if (data?.s_code !== undefined) view.setUint8(1, Number(data.s_code));
  // 0x02: u16
  if (data?.filler !== undefined) view.setUint16(2, Number(data.filler), true);
  // 0x04: pad4
  return buf;
}

/**
 * _S_un_e__Union (size: 24)
 */
export interface _S_un_e__Union {
  /** _S_un_ports_e__Struct */
  S_un_ports: Uint8Array | Deno.PointerValue | null;
  /** _S_un_icmp_e__Struct */
  S_un_icmp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  S_Spi: number;
}

export const sizeof_S_un_e__Union = 24;

export function alloc_S_un_e__Union(data?: Partial<_S_un_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un_ports !== undefined) view.setBigUint64(0, data.S_un_ports === null ? 0n : BigInt(util.toPointer(data.S_un_ports)), true);
  // 0x08: pointer
  if (data?.S_un_icmp !== undefined) view.setBigUint64(8, data.S_un_icmp === null ? 0n : BigInt(util.toPointer(data.S_un_icmp)), true);
  // 0x10: u32
  if (data?.S_Spi !== undefined) view.setUint32(16, Number(data.S_Spi), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN_ADDR (size: 8)
 */
export interface IN_ADDR {
  /** _S_un_e__Union */
  S_un: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIN_ADDR = 8;

export function allocIN_ADDR(data?: Partial<IN_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un !== undefined) view.setBigUint64(0, data.S_un === null ? 0n : BigInt(util.toPointer(data.S_un)), true);
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN6_ADDR (size: 8)
 */
export interface IN6_ADDR {
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIN6_ADDR = 8;

export function allocIN6_ADDR(data?: Partial<IN6_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN6_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u !== undefined) view.setBigUint64(0, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * _IP_e__Union (size: 24)
 */
export interface _IP_e__Union {
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  v4: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  v6: Uint8Array | Deno.PointerValue | null;
  /** array */
  Addr: Deno.PointerValue | null;
}

export const sizeof_IP_e__Union = 24;

export function alloc_IP_e__Union(data?: Partial<_IP_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_IP_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.v4 !== undefined) view.setBigUint64(0, data.v4 === null ? 0n : BigInt(util.toPointer(data.v4)), true);
  // 0x08: pointer
  if (data?.v6 !== undefined) view.setBigUint64(8, data.v6 === null ? 0n : BigInt(util.toPointer(data.v6)), true);
  // 0x10: pointer
  if (data?.Addr !== undefined) view.setBigUint64(16, data.Addr === null ? 0n : BigInt(util.toPointer(data.Addr)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_IP_ADDRESS (size: 8)
 */
export interface WNV_IP_ADDRESS {
  /** _IP_e__Union */
  IP: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWNV_IP_ADDRESS = 8;

export function allocWNV_IP_ADDRESS(data?: Partial<WNV_IP_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofWNV_IP_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IP !== undefined) view.setBigUint64(0, data.IP === null ? 0n : BigInt(util.toPointer(data.IP)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_POLICY_MISMATCH_PARAM (size: 24)
 */
export interface WNV_POLICY_MISMATCH_PARAM {
  /** u16 */
  CAFamily: number;
  /** u16 */
  PAFamily: number;
  /** u32 */
  VirtualSubnetId: number;
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_IP_ADDRESS */
  CA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_IP_ADDRESS */
  PA: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWNV_POLICY_MISMATCH_PARAM = 24;

export function allocWNV_POLICY_MISMATCH_PARAM(data?: Partial<WNV_POLICY_MISMATCH_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofWNV_POLICY_MISMATCH_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.CAFamily !== undefined) view.setUint16(0, Number(data.CAFamily), true);
  // 0x02: u16
  if (data?.PAFamily !== undefined) view.setUint16(2, Number(data.PAFamily), true);
  // 0x04: u32
  if (data?.VirtualSubnetId !== undefined) view.setUint32(4, Number(data.VirtualSubnetId), true);
  // 0x08: pointer
  if (data?.CA !== undefined) view.setBigUint64(8, data.CA === null ? 0n : BigInt(util.toPointer(data.CA)), true);
  // 0x10: pointer
  if (data?.PA !== undefined) view.setBigUint64(16, data.PA === null ? 0n : BigInt(util.toPointer(data.PA)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_PROVIDER_ADDRESS_CHANGE_PARAM (size: 24)
 */
export interface WNV_PROVIDER_ADDRESS_CHANGE_PARAM {
  /** u16 */
  PAFamily: number;
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_IP_ADDRESS */
  PA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.NL_DAD_STATE */
  AddressState: NL_DAD_STATE;
}

export const sizeofWNV_PROVIDER_ADDRESS_CHANGE_PARAM = 24;

export function allocWNV_PROVIDER_ADDRESS_CHANGE_PARAM(data?: Partial<WNV_PROVIDER_ADDRESS_CHANGE_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofWNV_PROVIDER_ADDRESS_CHANGE_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.PAFamily !== undefined) view.setUint16(0, Number(data.PAFamily), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.PA !== undefined) view.setBigUint64(8, data.PA === null ? 0n : BigInt(util.toPointer(data.PA)), true);
  // 0x10: i32
  if (data?.AddressState !== undefined) view.setInt32(16, Number(data.AddressState), true);
  // 0x14: pad4
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_EUI48 (size: 16)
 */
export interface DL_EUI48 {
  /** array */
  Byte: Deno.PointerValue | null;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDL_EUI48 = 16;

export function allocDL_EUI48(data?: Partial<DL_EUI48>): Uint8Array {
  const buf = new Uint8Array(sizeofDL_EUI48);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Byte !== undefined) view.setBigUint64(0, data.Byte === null ? 0n : BigInt(util.toPointer(data.Byte)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_CUSTOMER_ADDRESS_CHANGE_PARAM (size: 48)
 */
export interface WNV_CUSTOMER_ADDRESS_CHANGE_PARAM {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_EUI48 */
  MACAddress: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  CAFamily: number;
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_IP_ADDRESS */
  CA: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VirtualSubnetId: number;
  /** u16 */
  PAFamily: number;
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_IP_ADDRESS */
  PA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_CA_NOTIFICATION_TYPE */
  NotificationReason: WNV_CA_NOTIFICATION_TYPE;
}

export const sizeofWNV_CUSTOMER_ADDRESS_CHANGE_PARAM = 48;

export function allocWNV_CUSTOMER_ADDRESS_CHANGE_PARAM(data?: Partial<WNV_CUSTOMER_ADDRESS_CHANGE_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofWNV_CUSTOMER_ADDRESS_CHANGE_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MACAddress !== undefined) view.setBigUint64(0, data.MACAddress === null ? 0n : BigInt(util.toPointer(data.MACAddress)), true);
  // 0x08: u16
  if (data?.CAFamily !== undefined) view.setUint16(8, Number(data.CAFamily), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.CA !== undefined) view.setBigUint64(16, data.CA === null ? 0n : BigInt(util.toPointer(data.CA)), true);
  // 0x18: u32
  if (data?.VirtualSubnetId !== undefined) view.setUint32(24, Number(data.VirtualSubnetId), true);
  // 0x1c: u16
  if (data?.PAFamily !== undefined) view.setUint16(28, Number(data.PAFamily), true);
  // 0x1e: pad2
  // 0x20: pointer
  if (data?.PA !== undefined) view.setBigUint64(32, data.PA === null ? 0n : BigInt(util.toPointer(data.PA)), true);
  // 0x28: i32
  if (data?.NotificationReason !== undefined) view.setInt32(40, Number(data.NotificationReason), true);
  // 0x2c: pad4
  return buf;
}

/**
 * _ObjectParam_e__Union (size: 16)
 */
export interface _ObjectParam_e__Union {
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_PROVIDER_ADDRESS_CHANGE_PARAM */
  ProviderAddressChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_CUSTOMER_ADDRESS_CHANGE_PARAM */
  CustomerAddressChange: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_ObjectParam_e__Union = 16;

export function alloc_ObjectParam_e__Union(data?: Partial<_ObjectParam_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_ObjectParam_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProviderAddressChange !== undefined) view.setBigUint64(0, data.ProviderAddressChange === null ? 0n : BigInt(util.toPointer(data.ProviderAddressChange)), true);
  // 0x08: pointer
  if (data?.CustomerAddressChange !== undefined) view.setBigUint64(8, data.CustomerAddressChange === null ? 0n : BigInt(util.toPointer(data.CustomerAddressChange)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_OBJECT_CHANGE_PARAM (size: 16)
 */
export interface WNV_OBJECT_CHANGE_PARAM {
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_OBJECT_TYPE */
  ObjectType: WNV_OBJECT_TYPE;
  /** _ObjectParam_e__Union */
  ObjectParam: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWNV_OBJECT_CHANGE_PARAM = 16;

export function allocWNV_OBJECT_CHANGE_PARAM(data?: Partial<WNV_OBJECT_CHANGE_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofWNV_OBJECT_CHANGE_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ObjectType !== undefined) view.setInt32(0, Number(data.ObjectType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ObjectParam !== undefined) view.setBigUint64(8, data.ObjectParam === null ? 0n : BigInt(util.toPointer(data.ObjectParam)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_REDIRECT_PARAM (size: 40)
 */
export interface WNV_REDIRECT_PARAM {
  /** u16 */
  CAFamily: number;
  /** u16 */
  PAFamily: number;
  /** u16 */
  NewPAFamily: number;
  /** u32 */
  VirtualSubnetId: number;
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_IP_ADDRESS */
  CA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_IP_ADDRESS */
  PA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsNetworkVirtualization.WNV_IP_ADDRESS */
  NewPA: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWNV_REDIRECT_PARAM = 40;

export function allocWNV_REDIRECT_PARAM(data?: Partial<WNV_REDIRECT_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofWNV_REDIRECT_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.CAFamily !== undefined) view.setUint16(0, Number(data.CAFamily), true);
  // 0x02: u16
  if (data?.PAFamily !== undefined) view.setUint16(2, Number(data.PAFamily), true);
  // 0x04: u16
  if (data?.NewPAFamily !== undefined) view.setUint16(4, Number(data.NewPAFamily), true);
  // 0x06: u32
  if (data?.VirtualSubnetId !== undefined) view.setUint32(6, Number(data.VirtualSubnetId), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.CA !== undefined) view.setBigUint64(16, data.CA === null ? 0n : BigInt(util.toPointer(data.CA)), true);
  // 0x18: pointer
  if (data?.PA !== undefined) view.setBigUint64(24, data.PA === null ? 0n : BigInt(util.toPointer(data.PA)), true);
  // 0x20: pointer
  if (data?.NewPA !== undefined) view.setBigUint64(32, data.NewPA === null ? 0n : BigInt(util.toPointer(data.NewPA)), true);
  return buf;
}

// Native Libraries

try {
  var libwnvapi = Deno.dlopen("wnvapi", {
    WnvOpen: {
      parameters: [],
      result: "pointer",
    },
    WnvRequestNotification: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WnvOpen(): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libwnvapi.WnvOpen());
}

export function WnvRequestNotification(
  WnvHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NotificationParam: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  BytesTransferred: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libwnvapi.WnvRequestNotification(util.toPointer(WnvHandle), util.toPointer(NotificationParam), util.toPointer(Overlapped), util.toPointer(BytesTransferred));
}

