/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.QoS.Apis

import * as util from "../../util.ts";

// Enums
export type int_serv_wkp = number;
export type QOS_TRAFFIC_TYPE = number;
export type QOS_SET_FLOW = number;
export type QOS_FLOWRATE_REASON = number;
export type QOS_SHAPING = number;
export type QOS_QUERY_FLOW = number;
export type QOS_NOTIFY_FLOW = number;
export type FilterType = number;

// Constants
export const QOS_MAX_OBJECT_STRING_LENGTH = 256;
export const QOS_TRAFFIC_GENERAL_ID_BASE = 4000;
export const SERVICETYPE_NOTRAFFIC = 0;
export const SERVICETYPE_BESTEFFORT = 1;
export const SERVICETYPE_CONTROLLEDLOAD = 2;
export const SERVICETYPE_GUARANTEED = 3;
export const SERVICETYPE_NETWORK_UNAVAILABLE = 4;
export const SERVICETYPE_GENERAL_INFORMATION = 5;
export const SERVICETYPE_NOCHANGE = 6;
export const SERVICETYPE_NONCONFORMING = 9;
export const SERVICETYPE_NETWORK_CONTROL = 10;
export const SERVICETYPE_QUALITATIVE = 13;
export const SERVICE_BESTEFFORT = 2147549184;
export const SERVICE_CONTROLLEDLOAD = 2147614720;
export const SERVICE_GUARANTEED = 2147745792;
export const SERVICE_QUALITATIVE = 2149580800;
export const SERVICE_NO_TRAFFIC_CONTROL = 2164260864;
export const SERVICE_NO_QOS_SIGNALING = 1073741824;
export const QOS_NOT_SPECIFIED = 4294967295;
export const POSITIVE_INFINITY_RATE = 4294967294;
export const QOS_GENERAL_ID_BASE = 2000;
export const TC_NONCONF_BORROW = 0;
export const TC_NONCONF_SHAPE = 1;
export const TC_NONCONF_DISCARD = 2;
export const TC_NONCONF_BORROW_PLUS = 3;
export const class_NULL = 0;
export const class_SESSION = 1;
export const class_SESSION_GROUP = 2;
export const class_RSVP_HOP = 3;
export const class_INTEGRITY = 4;
export const class_TIME_VALUES = 5;
export const class_ERROR_SPEC = 6;
export const class_SCOPE = 7;
export const class_STYLE = 8;
export const class_FLOWSPEC = 9;
export const class_IS_FLOWSPEC = 9;
export const class_FILTER_SPEC = 10;
export const class_SENDER_TEMPLATE = 11;
export const class_SENDER_TSPEC = 12;
export const class_ADSPEC = 13;
export const class_POLICY_DATA = 14;
export const class_CONFIRM = 15;
export const class_MAX = 15;
export const ctype_SESSION_ipv4 = 1;
export const ctype_SESSION_ipv4GPI = 3;
export const SESSFLG_E_Police = 1;
export const ctype_RSVP_HOP_ipv4 = 1;
export const Opt_Share_mask = 24;
export const Opt_Distinct = 8;
export const Opt_Shared = 16;
export const Opt_SndSel_mask = 7;
export const Opt_Wildcard = 1;
export const Opt_Explicit = 2;
export const ctype_STYLE = 1;
export const ctype_FILTER_SPEC_ipv4 = 1;
export const ctype_FILTER_SPEC_ipv4GPI = 4;
export const ctype_SENDER_TEMPLATE_ipv4 = 1;
export const ctype_SENDER_TEMPLATE_ipv4GPI = 4;
export const ctype_SCOPE_list_ipv4 = 1;
export const ctype_ERROR_SPEC_ipv4 = 1;
export const ERROR_SPECF_InPlace = 1;
export const ERROR_SPECF_NotGuilty = 2;
export const ERR_FORWARD_OK = 32768;
export const ERR_Usage_globl = 0;
export const ERR_Usage_local = 16;
export const ERR_Usage_serv = 17;
export const ERR_global_mask = 4095;
export const ctype_POLICY_DATA = 1;
export const GENERAL_INFO = 1;
export const GUARANTEED_SERV = 2;
export const PREDICTIVE_SERV = 3;
export const CONTROLLED_DELAY_SERV = 4;
export const CONTROLLED_LOAD_SERV = 5;
export const QUALITATIVE_SERV = 6;
export const INTSERV_VERS_MASK = 240;
export const INTSERV_VERSION0 = 0;
export const ISSH_BREAK_BIT = 128;
export const ISPH_FLG_INV = 128;
export const ctype_SENDER_TSPEC = 2;
export const ctype_FLOWSPEC_Intserv0 = 2;
export const ctype_ADSPEC_INTSERV = 2;
export const RSVP_PATH = 1;
export const RSVP_RESV = 2;
export const RSVP_PATH_ERR = 3;
export const RSVP_RESV_ERR = 4;
export const RSVP_PATH_TEAR = 5;
export const RSVP_RESV_TEAR = 6;
export const RSVP_Err_NONE = 0;
export const RSVP_Erv_Nonev = 0;
export const RSVP_Err_ADMISSION = 1;
export const RSVP_Erv_Other = 0;
export const RSVP_Erv_DelayBnd = 1;
export const RSVP_Erv_Bandwidth = 2;
export const RSVP_Erv_MTU = 3;
export const RSVP_Erv_Flow_Rate = 32769;
export const RSVP_Erv_Bucket_szie = 32770;
export const RSVP_Erv_Peak_Rate = 32771;
export const RSVP_Erv_Min_Policied_size = 32772;
export const RSVP_Err_POLICY = 2;
export const POLICY_ERRV_NO_MORE_INFO = 1;
export const POLICY_ERRV_UNSUPPORTED_CREDENTIAL_TYPE = 2;
export const POLICY_ERRV_INSUFFICIENT_PRIVILEGES = 3;
export const POLICY_ERRV_EXPIRED_CREDENTIALS = 4;
export const POLICY_ERRV_IDENTITY_CHANGED = 5;
export const POLICY_ERRV_UNKNOWN = 0;
export const POLICY_ERRV_GLOBAL_DEF_FLOW_COUNT = 1;
export const POLICY_ERRV_GLOBAL_GRP_FLOW_COUNT = 2;
export const POLICY_ERRV_GLOBAL_USER_FLOW_COUNT = 3;
export const POLICY_ERRV_GLOBAL_UNAUTH_USER_FLOW_COUNT = 4;
export const POLICY_ERRV_SUBNET_DEF_FLOW_COUNT = 5;
export const POLICY_ERRV_SUBNET_GRP_FLOW_COUNT = 6;
export const POLICY_ERRV_SUBNET_USER_FLOW_COUNT = 7;
export const POLICY_ERRV_SUBNET_UNAUTH_USER_FLOW_COUNT = 8;
export const POLICY_ERRV_GLOBAL_DEF_FLOW_DURATION = 9;
export const POLICY_ERRV_GLOBAL_GRP_FLOW_DURATION = 10;
export const POLICY_ERRV_GLOBAL_USER_FLOW_DURATION = 11;
export const POLICY_ERRV_GLOBAL_UNAUTH_USER_FLOW_DURATION = 12;
export const POLICY_ERRV_SUBNET_DEF_FLOW_DURATION = 13;
export const POLICY_ERRV_SUBNET_GRP_FLOW_DURATION = 14;
export const POLICY_ERRV_SUBNET_USER_FLOW_DURATION = 15;
export const POLICY_ERRV_SUBNET_UNAUTH_USER_FLOW_DURATION = 16;
export const POLICY_ERRV_GLOBAL_DEF_FLOW_RATE = 17;
export const POLICY_ERRV_GLOBAL_GRP_FLOW_RATE = 18;
export const POLICY_ERRV_GLOBAL_USER_FLOW_RATE = 19;
export const POLICY_ERRV_GLOBAL_UNAUTH_USER_FLOW_RATE = 20;
export const POLICY_ERRV_SUBNET_DEF_FLOW_RATE = 21;
export const POLICY_ERRV_SUBNET_GRP_FLOW_RATE = 22;
export const POLICY_ERRV_SUBNET_USER_FLOW_RATE = 23;
export const POLICY_ERRV_SUBNET_UNAUTH_USER_FLOW_RATE = 24;
export const POLICY_ERRV_GLOBAL_DEF_PEAK_RATE = 25;
export const POLICY_ERRV_GLOBAL_GRP_PEAK_RATE = 26;
export const POLICY_ERRV_GLOBAL_USER_PEAK_RATE = 27;
export const POLICY_ERRV_GLOBAL_UNAUTH_USER_PEAK_RATE = 28;
export const POLICY_ERRV_SUBNET_DEF_PEAK_RATE = 29;
export const POLICY_ERRV_SUBNET_GRP_PEAK_RATE = 30;
export const POLICY_ERRV_SUBNET_USER_PEAK_RATE = 31;
export const POLICY_ERRV_SUBNET_UNAUTH_USER_PEAK_RATE = 32;
export const POLICY_ERRV_GLOBAL_DEF_SUM_FLOW_RATE = 33;
export const POLICY_ERRV_GLOBAL_GRP_SUM_FLOW_RATE = 34;
export const POLICY_ERRV_GLOBAL_USER_SUM_FLOW_RATE = 35;
export const POLICY_ERRV_GLOBAL_UNAUTH_USER_SUM_FLOW_RATE = 36;
export const POLICY_ERRV_SUBNET_DEF_SUM_FLOW_RATE = 37;
export const POLICY_ERRV_SUBNET_GRP_SUM_FLOW_RATE = 38;
export const POLICY_ERRV_SUBNET_USER_SUM_FLOW_RATE = 39;
export const POLICY_ERRV_SUBNET_UNAUTH_USER_SUM_FLOW_RATE = 40;
export const POLICY_ERRV_GLOBAL_DEF_SUM_PEAK_RATE = 41;
export const POLICY_ERRV_GLOBAL_GRP_SUM_PEAK_RATE = 42;
export const POLICY_ERRV_GLOBAL_USER_SUM_PEAK_RATE = 43;
export const POLICY_ERRV_GLOBAL_UNAUTH_USER_SUM_PEAK_RATE = 44;
export const POLICY_ERRV_SUBNET_DEF_SUM_PEAK_RATE = 45;
export const POLICY_ERRV_SUBNET_GRP_SUM_PEAK_RATE = 46;
export const POLICY_ERRV_SUBNET_USER_SUM_PEAK_RATE = 47;
export const POLICY_ERRV_SUBNET_UNAUTH_USER_SUM_PEAK_RATE = 48;
export const POLICY_ERRV_UNKNOWN_USER = 49;
export const POLICY_ERRV_NO_PRIVILEGES = 50;
export const POLICY_ERRV_EXPIRED_USER_TOKEN = 51;
export const POLICY_ERRV_NO_RESOURCES = 52;
export const POLICY_ERRV_PRE_EMPTED = 53;
export const POLICY_ERRV_USER_CHANGED = 54;
export const POLICY_ERRV_NO_ACCEPTS = 55;
export const POLICY_ERRV_NO_MEMORY = 56;
export const POLICY_ERRV_CRAZY_FLOWSPEC = 57;
export const RSVP_Err_NO_PATH = 3;
export const RSVP_Err_NO_SENDER = 4;
export const RSVP_Err_BAD_STYLE = 5;
export const RSVP_Err_UNKNOWN_STYLE = 6;
export const RSVP_Err_BAD_DSTPORT = 7;
export const RSVP_Err_BAD_SNDPORT = 8;
export const RSVP_Err_AMBIG_FILTER = 9;
export const RSVP_Err_PREEMPTED = 12;
export const RSVP_Err_UNKN_OBJ_CLASS = 13;
export const RSVP_Err_UNKNOWN_CTYPE = 14;
export const RSVP_Err_API_ERROR = 20;
export const RSVP_Err_TC_ERROR = 21;
export const RSVP_Erv_Conflict_Serv = 1;
export const RSVP_Erv_No_Serv = 2;
export const RSVP_Erv_Crazy_Flowspec = 3;
export const RSVP_Erv_Crazy_Tspec = 4;
export const RSVP_Err_TC_SYS_ERROR = 22;
export const RSVP_Err_RSVP_SYS_ERROR = 23;
export const RSVP_Erv_MEMORY = 1;
export const RSVP_Erv_API = 2;
export const LPM_PE_USER_IDENTITY = 2;
export const LPM_PE_APP_IDENTITY = 3;
export const ERROR_NO_MORE_INFO = 1;
export const UNSUPPORTED_CREDENTIAL_TYPE = 2;
export const INSUFFICIENT_PRIVILEGES = 3;
export const EXPIRED_CREDENTIAL = 4;
export const IDENTITY_CHANGED = 5;
export const LPM_OK = 0;
export const INV_LPM_HANDLE = 1;
export const LPM_TIME_OUT = 2;
export const INV_REQ_HANDLE = 3;
export const DUP_RESULTS = 4;
export const INV_RESULTS = 5;
export const LPM_PE_ALL_TYPES = 0;
export const LPM_API_VERSION_1 = 1;
export const PCM_VERSION_1 = 1;
export const LPV_RESERVED = 0;
export const LPV_MIN_PRIORITY = 1;
export const LPV_MAX_PRIORITY = 65280;
export const LPV_DROP_MSG = 65533;
export const LPV_DONT_CARE = 65534;
export const LPV_REJECT = 65535;
export const FORCE_IMMEDIATE_REFRESH = 1;
export const LPM_RESULT_READY = 0;
export const LPM_RESULT_DEFER = 1;
export const RCVD_PATH_TEAR = 1;
export const RCVD_RESV_TEAR = 2;
export const ADM_CTRL_FAILED = 3;
export const STATE_TIMEOUT = 4;
export const FLOW_DURATION = 5;
export const RESOURCES_ALLOCATED = 1;
export const RESOURCES_MODIFIED = 2;
export const CURRENT_TCI_VERSION = 2;
export const TC_NOTIFY_IFC_UP = 1;
export const TC_NOTIFY_IFC_CLOSE = 2;
export const TC_NOTIFY_IFC_CHANGE = 3;
export const TC_NOTIFY_PARAM_CHANGED = 4;
export const TC_NOTIFY_FLOW_CLOSE = 5;
export const MAX_STRING_LENGTH = 256;
export const QOS_OUTGOING_DEFAULT_MINIMUM_BANDWIDTH = 4294967295;
export const QOS_QUERYFLOW_FRESH = 1;
export const QOS_NON_ADAPTIVE_FLOW = 2;
export const RSVP_OBJECT_ID_BASE = 1000;
export const RSVP_DEFAULT_STYLE = 0;
export const RSVP_WILDCARD_STYLE = 1;
export const RSVP_FIXED_FILTER_STYLE = 2;
export const RSVP_SHARED_EXPLICIT_STYLE = 3;
export const AD_FLAG_BREAK_BIT = 1;
export const mIOC_IN = 2147483648;
export const mIOC_OUT = 1073741824;
export const mIOC_VENDOR = 67108864;
export const mCOMPANY = 402653184;
export const ioctl_code = 1;
export const QOSSPBASE = 50000;
export const ALLOWED_TO_SEND_DATA = 50001;
export const ABLE_TO_RECV_RSVP = 50002;
export const LINE_RATE = 50003;
export const LOCAL_TRAFFIC_CONTROL = 50004;
export const LOCAL_QOSABILITY = 50005;
export const END_TO_END_QOSABILITY = 50006;
export const INFO_NOT_AVAILABLE = 4294967295;
export const ANY_DEST_ADDR = 4294967295;
export const MODERATELY_DELAY_SENSITIVE = 4294967293;
export const HIGHLY_DELAY_SENSITIVE = 4294967294;
export const QOSSP_ERR_BASE = 56000;
export const GQOS_NO_ERRORCODE = 0;
export const GQOS_NO_ERRORVALUE = 0;
export const GQOS_ERRORCODE_UNKNOWN = 4294967295;
export const GQOS_ERRORVALUE_UNKNOWN = 4294967295;
export const GQOS_NET_ADMISSION = 56100;
export const GQOS_NET_POLICY = 56200;
export const GQOS_RSVP = 56300;
export const GQOS_API = 56400;
export const GQOS_KERNEL_TC_SYS = 56500;
export const GQOS_RSVP_SYS = 56600;
export const GQOS_KERNEL_TC = 56700;
export const PE_TYPE_APPID = 3;
export const PE_ATTRIB_TYPE_POLICY_LOCATOR = 1;
export const POLICY_LOCATOR_SUB_TYPE_ASCII_DN = 1;
export const POLICY_LOCATOR_SUB_TYPE_UNICODE_DN = 2;
export const POLICY_LOCATOR_SUB_TYPE_ASCII_DN_ENC = 3;
export const POLICY_LOCATOR_SUB_TYPE_UNICODE_DN_ENC = 4;
export const PE_ATTRIB_TYPE_CREDENTIAL = 2;
export const CREDENTIAL_SUB_TYPE_ASCII_ID = 1;
export const CREDENTIAL_SUB_TYPE_UNICODE_ID = 2;
export const CREDENTIAL_SUB_TYPE_KERBEROS_TKT = 3;
export const CREDENTIAL_SUB_TYPE_X509_V3_CERT = 4;
export const CREDENTIAL_SUB_TYPE_PGP_CERT = 5;
export const TCBASE = 7500;
export const ERROR_INCOMPATIBLE_TCI_VERSION = 7501;
export const ERROR_INVALID_SERVICE_TYPE = 7502;
export const ERROR_INVALID_TOKEN_RATE = 7503;
export const ERROR_INVALID_PEAK_RATE = 7504;
export const ERROR_INVALID_SD_MODE = 7505;
export const ERROR_INVALID_QOS_PRIORITY = 7506;
export const ERROR_INVALID_TRAFFIC_CLASS = 7507;
export const ERROR_INVALID_ADDRESS_TYPE = 7508;
export const ERROR_DUPLICATE_FILTER = 7509;
export const ERROR_FILTER_CONFLICT = 7510;
export const ERROR_ADDRESS_TYPE_NOT_SUPPORTED = 7511;
export const ERROR_TC_SUPPORTED_OBJECTS_EXIST = 7512;
export const ERROR_INCOMPATABLE_QOS = 7513;
export const ERROR_TC_NOT_SUPPORTED = 7514;
export const ERROR_TC_OBJECT_LENGTH_INVALID = 7515;
export const ERROR_INVALID_FLOW_MODE = 7516;
export const ERROR_INVALID_DIFFSERV_FLOW = 7517;
export const ERROR_DS_MAPPING_EXISTS = 7518;
export const ERROR_INVALID_SHAPE_RATE = 7519;
export const ERROR_INVALID_DS_CLASS = 7520;
export const ERROR_TOO_MANY_CLIENTS = 7521;
export const FSCTL_TCP_BASE = 18;
export const DD_TCP_DEVICE_NAME = `\\Device\\Tcp`;
export const IF_MIB_STATS_ID = 1;
export const IP_MIB_STATS_ID = 1;
export const IP_MIB_ADDRTABLE_ENTRY_ID = 258;
export const IP_INTFC_INFO_ID = 259;
export const MAX_PHYSADDR_SIZE = 8;
export const SIPAEV_PREBOOT_CERT = 0;
export const SIPAEV_POST_CODE = 1;
export const SIPAEV_UNUSED = 2;
export const SIPAEV_NO_ACTION = 3;
export const SIPAEV_SEPARATOR = 4;
export const SIPAEV_ACTION = 5;
export const SIPAEV_EVENT_TAG = 6;
export const SIPAEV_S_CRTM_CONTENTS = 7;
export const SIPAEV_S_CRTM_VERSION = 8;
export const SIPAEV_CPU_MICROCODE = 9;
export const SIPAEV_PLATFORM_CONFIG_FLAGS = 10;
export const SIPAEV_TABLE_OF_DEVICES = 11;
export const SIPAEV_COMPACT_HASH = 12;
export const SIPAEV_IPL = 13;
export const SIPAEV_IPL_PARTITION_DATA = 14;
export const SIPAEV_NONHOST_CODE = 15;
export const SIPAEV_NONHOST_CONFIG = 16;
export const SIPAEV_NONHOST_INFO = 17;
export const SIPAEV_OMIT_BOOT_DEVICE_EVENTS = 18;
export const SIPAEV_EFI_EVENT_BASE = 2147483648;
export const SIPAEV_EFI_VARIABLE_DRIVER_CONFIG = 2147483649;
export const SIPAEV_EFI_VARIABLE_BOOT = 2147483650;
export const SIPAEV_EFI_BOOT_SERVICES_APPLICATION = 2147483651;
export const SIPAEV_EFI_BOOT_SERVICES_DRIVER = 2147483652;
export const SIPAEV_EFI_RUNTIME_SERVICES_DRIVER = 2147483653;
export const SIPAEV_EFI_GPT_EVENT = 2147483654;
export const SIPAEV_EFI_ACTION = 2147483655;
export const SIPAEV_EFI_PLATFORM_FIRMWARE_BLOB = 2147483656;
export const SIPAEV_EFI_HANDOFF_TABLES = 2147483657;
export const SIPAEV_EFI_PLATFORM_FIRMWARE_BLOB2 = 2147483658;
export const SIPAEV_EFI_HANDOFF_TABLES2 = 2147483659;
export const SIPAEV_EFI_HCRTM_EVENT = 2147483664;
export const SIPAEV_EFI_VARIABLE_AUTHORITY = 2147483872;
export const SIPAEV_EFI_SPDM_FIRMWARE_BLOB = 2147483873;
export const SIPAEV_EFI_SPDM_FIRMWARE_CONFIG = 2147483874;
export const SIPAEV_TXT_EVENT_BASE = 1024;
export const SIPAEV_TXT_PCR_MAPPING = 1025;
export const SIPAEV_TXT_HASH_START = 1026;
export const SIPAEV_TXT_COMBINED_HASH = 1027;
export const SIPAEV_TXT_MLE_HASH = 1028;
export const SIPAEV_TXT_BIOSAC_REG_DATA = 1034;
export const SIPAEV_TXT_CPU_SCRTM_STAT = 1035;
export const SIPAEV_TXT_LCP_CONTROL_HASH = 1036;
export const SIPAEV_TXT_ELEMENTS_HASH = 1037;
export const SIPAEV_TXT_STM_HASH = 1038;
export const SIPAEV_TXT_OSSINITDATA_CAP_HASH = 1039;
export const SIPAEV_TXT_SINIT_PUBKEY_HASH = 1040;
export const SIPAEV_TXT_LCP_HASH = 1041;
export const SIPAEV_TXT_LCP_DETAILS_HASH = 1042;
export const SIPAEV_TXT_LCP_AUTHORITIES_HASH = 1043;
export const SIPAEV_TXT_NV_INFO_HASH = 1044;
export const SIPAEV_TXT_COLD_BOOT_BIOS_HASH = 1045;
export const SIPAEV_TXT_KM_HASH = 1046;
export const SIPAEV_TXT_BPM_HASH = 1047;
export const SIPAEV_TXT_KM_INFO_HASH = 1048;
export const SIPAEV_TXT_BPM_INFO_HASH = 1049;
export const SIPAEV_TXT_BOOT_POL_HASH = 1050;
export const SIPAEV_TXT_RANDOM_VALUE = 1278;
export const SIPAEV_TXT_CAP_VALUE = 1279;
export const SIPAEV_AMD_SL_EVENT_BASE = 32768;
export const SIPAEV_AMD_SL_LOAD = 32769;
export const SIPAEV_AMD_SL_PSP_FW_SPLT = 32770;
export const SIPAEV_AMD_SL_TSME_RB_FUSE = 32771;
export const SIPAEV_AMD_SL_PUB_KEY = 32772;
export const SIPAEV_AMD_SL_SVN = 32773;
export const SIPAEV_AMD_SL_LOAD_1 = 32774;
export const SIPAEV_AMD_SL_SEPARATOR = 32775;
export const SIPAEVENTTYPE_NONMEASURED = 2147483648;
export const SIPAEVENTTYPE_AGGREGATION = 1073741824;
export const SIPAEVENTTYPE_CONTAINER = 65536;
export const SIPAEVENTTYPE_INFORMATION = 131072;
export const SIPAEVENTTYPE_ERROR = 196608;
export const SIPAEVENTTYPE_PREOSPARAMETER = 262144;
export const SIPAEVENTTYPE_OSPARAMETER = 327680;
export const SIPAEVENTTYPE_AUTHORITY = 393216;
export const SIPAEVENTTYPE_LOADEDMODULE = 458752;
export const SIPAEVENTTYPE_TRUSTPOINT = 524288;
export const SIPAEVENTTYPE_ELAM = 589824;
export const SIPAEVENTTYPE_VBS = 655360;
export const SIPAEVENTTYPE_KSR = 720896;
export const SIPAEVENTTYPE_DRTM = 786432;
export const SIPAERROR_FIRMWAREFAILURE = 196609;
export const SIPAERROR_INTERNALFAILURE = 196611;
export const SIPAEVENT_INFORMATION = 131073;
export const SIPAEVENT_BOOTCOUNTER = 131074;
export const SIPAEVENT_TRANSFER_CONTROL = 131075;
export const SIPAEVENT_APPLICATION_RETURN = 131076;
export const SIPAEVENT_BITLOCKER_UNLOCK = 131077;
export const SIPAEVENT_EVENTCOUNTER = 131078;
export const SIPAEVENT_COUNTERID = 131079;
export const SIPAEVENT_MORBIT_NOT_CANCELABLE = 131080;
export const SIPAEVENT_APPLICATION_SVN = 131081;
export const SIPAEVENT_SVN_CHAIN_STATUS = 131082;
export const SIPAEVENT_MORBIT_API_STATUS = 131083;
export const SIPAEVENT_BOOTDEBUGGING = 262145;
export const SIPAEVENT_BOOT_REVOCATION_LIST = 262146;
export const SIPAEVENT_OSKERNELDEBUG = 327681;
export const SIPAEVENT_CODEINTEGRITY = 327682;
export const SIPAEVENT_TESTSIGNING = 327683;
export const SIPAEVENT_DATAEXECUTIONPREVENTION = 327684;
export const SIPAEVENT_SAFEMODE = 327685;
export const SIPAEVENT_WINPE = 327686;
export const SIPAEVENT_PHYSICALADDRESSEXTENSION = 327687;
export const SIPAEVENT_OSDEVICE = 327688;
export const SIPAEVENT_SYSTEMROOT = 327689;
export const SIPAEVENT_HYPERVISOR_LAUNCH_TYPE = 327690;
export const SIPAEVENT_HYPERVISOR_PATH = 327691;
export const SIPAEVENT_HYPERVISOR_IOMMU_POLICY = 327692;
export const SIPAEVENT_HYPERVISOR_DEBUG = 327693;
export const SIPAEVENT_DRIVER_LOAD_POLICY = 327694;
export const SIPAEVENT_SI_POLICY = 327695;
export const SIPAEVENT_HYPERVISOR_MMIO_NX_POLICY = 327696;
export const SIPAEVENT_HYPERVISOR_MSR_FILTER_POLICY = 327697;
export const SIPAEVENT_VSM_LAUNCH_TYPE = 327698;
export const SIPAEVENT_OS_REVOCATION_LIST = 327699;
export const SIPAEVENT_SMT_STATUS = 327700;
export const SIPAEVENT_VSM_IDK_INFO = 327712;
export const SIPAEVENT_FLIGHTSIGNING = 327713;
export const SIPAEVENT_PAGEFILE_ENCRYPTION_ENABLED = 327714;
export const SIPAEVENT_VSM_IDKS_INFO = 327715;
export const SIPAEVENT_HIBERNATION_DISABLED = 327716;
export const SIPAEVENT_DUMPS_DISABLED = 327717;
export const SIPAEVENT_DUMP_ENCRYPTION_ENABLED = 327718;
export const SIPAEVENT_DUMP_ENCRYPTION_KEY_DIGEST = 327719;
export const SIPAEVENT_LSAISO_CONFIG = 327720;
export const SIPAEVENT_SBCP_INFO = 327721;
export const SIPAEVENT_HYPERVISOR_BOOT_DMA_PROTECTION = 327728;
export const SIPAEVENT_NOAUTHORITY = 393217;
export const SIPAEVENT_AUTHORITYPUBKEY = 393218;
export const SIPAEVENT_FILEPATH = 458753;
export const SIPAEVENT_IMAGESIZE = 458754;
export const SIPAEVENT_HASHALGORITHMID = 458755;
export const SIPAEVENT_AUTHENTICODEHASH = 458756;
export const SIPAEVENT_AUTHORITYISSUER = 458757;
export const SIPAEVENT_AUTHORITYSERIAL = 458758;
export const SIPAEVENT_IMAGEBASE = 458759;
export const SIPAEVENT_AUTHORITYPUBLISHER = 458760;
export const SIPAEVENT_AUTHORITYSHA1THUMBPRINT = 458761;
export const SIPAEVENT_IMAGEVALIDATED = 458762;
export const SIPAEVENT_MODULE_SVN = 458763;
export const SIPAEVENT_ELAM_KEYNAME = 589825;
export const SIPAEVENT_ELAM_CONFIGURATION = 589826;
export const SIPAEVENT_ELAM_POLICY = 589827;
export const SIPAEVENT_ELAM_MEASURED = 589828;
export const SIPAEVENT_VBS_VSM_REQUIRED = 655361;
export const SIPAEVENT_VBS_SECUREBOOT_REQUIRED = 655362;
export const SIPAEVENT_VBS_IOMMU_REQUIRED = 655363;
export const SIPAEVENT_VBS_MMIO_NX_REQUIRED = 655364;
export const SIPAEVENT_VBS_MSR_FILTERING_REQUIRED = 655365;
export const SIPAEVENT_VBS_MANDATORY_ENFORCEMENT = 655366;
export const SIPAEVENT_VBS_HVCI_POLICY = 655367;
export const SIPAEVENT_VBS_MICROSOFT_BOOT_CHAIN_REQUIRED = 655368;
export const SIPAEVENT_VBS_DUMP_USES_AMEROOT = 655369;
export const SIPAEVENT_VBS_VSM_NOSECRETS_ENFORCED = 655370;
export const SIPAEVENT_KSR_SIGNATURE = 720897;
export const SIPAEVENT_DRTM_STATE_AUTH = 786433;
export const SIPAEVENT_DRTM_SMM_LEVEL = 786434;
export const SIPAEVENT_DRTM_AMD_SMM_HASH = 786435;
export const SIPAEVENT_DRTM_AMD_SMM_SIGNER_KEY = 786436;
export const FVEB_UNLOCK_FLAG_NONE = 0;
export const FVEB_UNLOCK_FLAG_CACHED = 1;
export const FVEB_UNLOCK_FLAG_MEDIA = 2;
export const FVEB_UNLOCK_FLAG_TPM = 4;
export const FVEB_UNLOCK_FLAG_PIN = 16;
export const FVEB_UNLOCK_FLAG_EXTERNAL = 32;
export const FVEB_UNLOCK_FLAG_RECOVERY = 64;
export const FVEB_UNLOCK_FLAG_PASSPHRASE = 128;
export const FVEB_UNLOCK_FLAG_NBP = 256;
export const FVEB_UNLOCK_FLAG_AUK_OSFVEINFO = 512;
export const OSDEVICE_TYPE_UNKNOWN = 0;
export const OSDEVICE_TYPE_BLOCKIO_HARDDISK = 65537;
export const OSDEVICE_TYPE_BLOCKIO_REMOVABLEDISK = 65538;
export const OSDEVICE_TYPE_BLOCKIO_CDROM = 65539;
export const OSDEVICE_TYPE_BLOCKIO_PARTITION = 65540;
export const OSDEVICE_TYPE_BLOCKIO_FILE = 65541;
export const OSDEVICE_TYPE_BLOCKIO_RAMDISK = 65542;
export const OSDEVICE_TYPE_BLOCKIO_VIRTUALHARDDISK = 65543;
export const OSDEVICE_TYPE_SERIAL = 131072;
export const OSDEVICE_TYPE_UDP = 196608;
export const OSDEVICE_TYPE_VMBUS = 262144;
export const OSDEVICE_TYPE_COMPOSITE = 327680;
export const SIPAHDRSIGNATURE = 1279476311;
export const SIPALOGVERSION = 1;
export const SIPAKSRHDRSIGNATURE = 1297240907;
export const WBCL_DIGEST_ALG_ID_SHA_1 = 4;
export const WBCL_DIGEST_ALG_ID_SHA_2_256 = 11;
export const WBCL_DIGEST_ALG_ID_SHA_2_384 = 12;
export const WBCL_DIGEST_ALG_ID_SHA_2_512 = 13;
export const WBCL_DIGEST_ALG_ID_SM3_256 = 18;
export const WBCL_DIGEST_ALG_ID_SHA3_256 = 39;
export const WBCL_DIGEST_ALG_ID_SHA3_384 = 40;
export const WBCL_DIGEST_ALG_ID_SHA3_512 = 41;
export const WBCL_DIGEST_ALG_BITMAP_SHA_1 = 1;
export const WBCL_DIGEST_ALG_BITMAP_SHA_2_256 = 2;
export const WBCL_DIGEST_ALG_BITMAP_SHA_2_384 = 4;
export const WBCL_DIGEST_ALG_BITMAP_SHA_2_512 = 8;
export const WBCL_DIGEST_ALG_BITMAP_SM3_256 = 16;
export const WBCL_DIGEST_ALG_BITMAP_SHA3_256 = 32;
export const WBCL_DIGEST_ALG_BITMAP_SHA3_384 = 64;
export const WBCL_DIGEST_ALG_BITMAP_SHA3_512 = 128;
export const WBCL_HASH_LEN_SHA1 = 20;
export const IS_GUAR_RSPEC = 130;
export const GUAR_ADSPARM_C = 131;
export const GUAR_ADSPARM_D = 132;
export const GUAR_ADSPARM_Ctot = 133;
export const GUAR_ADSPARM_Dtot = 134;
export const GUAR_ADSPARM_Csum = 135;
export const GUAR_ADSPARM_Dsum = 136;
export const IS_WKP_HOP_CNT = 4;
export const IS_WKP_PATH_BW = 6;
export const IS_WKP_MIN_LATENCY = 8;
export const IS_WKP_COMPOSED_MTU = 10;
export const IS_WKP_TB_TSPEC = 127;
export const IS_WKP_Q_TSPEC = 128;
export const QOSTrafficTypeBestEffort = 0;
export const QOSTrafficTypeBackground = 1;
export const QOSTrafficTypeExcellentEffort = 2;
export const QOSTrafficTypeAudioVideo = 3;
export const QOSTrafficTypeVoice = 4;
export const QOSTrafficTypeControl = 5;
export const QOSSetTrafficType = 0;
export const QOSSetOutgoingRate = 1;
export const QOSSetOutgoingDSCPValue = 2;
export const QOSFlowRateNotApplicable = 0;
export const QOSFlowRateContentChange = 1;
export const QOSFlowRateCongestion = 2;
export const QOSFlowRateHigherContentEncoding = 3;
export const QOSFlowRateUserCaused = 4;
export const QOSShapeOnly = 0;
export const QOSShapeAndMark = 1;
export const QOSUseNonConformantMarkings = 2;
export const QOSQueryFlowFundamentals = 0;
export const QOSQueryPacketPriority = 1;
export const QOSQueryOutgoingRate = 2;
export const QOSNotifyCongested = 0;
export const QOSNotifyUncongested = 1;
export const QOSNotifyAvailable = 2;
export const FILTERSPECV4 = 1;
export const FILTERSPECV6 = 2;
export const FILTERSPECV6_FLOW = 3;
export const FILTERSPECV4_GPI = 4;
export const FILTERSPECV6_GPI = 5;
export const FILTERSPEC_END = 6;

// Structs

export type LPM_HANDLE = Deno.PointerValue;

export type RHANDLE = Deno.PointerValue;

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR (size: 8)
 */
export interface QOS_OBJECT_HDR {
  /** u32 */
  ObjectType: number;
  /** u32 */
  ObjectLength: number;
}

export const sizeofQOS_OBJECT_HDR = 8;

export function allocQOS_OBJECT_HDR(data?: Partial<QOS_OBJECT_HDR>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_OBJECT_HDR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ObjectType !== undefined) view.setUint32(0, Number(data.ObjectType), true);
  // 0x04: u32
  if (data?.ObjectLength !== undefined) view.setUint32(4, Number(data.ObjectLength), true);
  return buf;
}

export class QOS_OBJECT_HDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ObjectType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ObjectLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set ObjectType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ObjectLength(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_SD_MODE (size: 16)
 */
export interface QOS_SD_MODE {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ShapeDiscardMode: number;
}

export const sizeofQOS_SD_MODE = 16;

export function allocQOS_SD_MODE(data?: Partial<QOS_SD_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_SD_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  // 0x08: u32
  if (data?.ShapeDiscardMode !== undefined) view.setUint32(8, Number(data.ShapeDiscardMode), true);
  // 0x0c: pad4
  return buf;
}

export class QOS_SD_MODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ShapeDiscardMode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ShapeDiscardMode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_SHAPING_RATE (size: 16)
 */
export interface QOS_SHAPING_RATE {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ShapingRate: number;
}

export const sizeofQOS_SHAPING_RATE = 16;

export function allocQOS_SHAPING_RATE(data?: Partial<QOS_SHAPING_RATE>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_SHAPING_RATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  // 0x08: u32
  if (data?.ShapingRate !== undefined) view.setUint32(8, Number(data.ShapingRate), true);
  // 0x0c: pad4
  return buf;
}

export class QOS_SHAPING_RATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ShapingRate(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ShapingRate(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.RsvpObjHdr (size: 8)
 */
export interface RsvpObjHdr {
  /** u16 */
  obj_length: number;
  /** u8 */
  obj_class: number;
  /** u8 */
  obj_ctype: number;
}

export const sizeofRsvpObjHdr = 8;

export function allocRsvpObjHdr(data?: Partial<RsvpObjHdr>): Uint8Array {
  const buf = new Uint8Array(sizeofRsvpObjHdr);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.obj_length !== undefined) view.setUint16(0, Number(data.obj_length), true);
  // 0x02: u8
  if (data?.obj_class !== undefined) view.setUint8(2, Number(data.obj_class));
  // 0x03: u8
  if (data?.obj_ctype !== undefined) view.setUint8(3, Number(data.obj_ctype));
  // 0x04: pad4
  return buf;
}

export class RsvpObjHdrView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get obj_length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get obj_class(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get obj_ctype(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u16
  set obj_length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set obj_class(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set obj_ctype(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * _S_un_ports_e__Struct (size: 8)
 */
export interface _S_un_ports_e__Struct {
  /** u16 */
  s_srcport: number;
  /** u16 */
  s_dstport: number;
}

export const sizeof_S_un_ports_e__Struct = 8;

export function alloc_S_un_ports_e__Struct(data?: Partial<_S_un_ports_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_ports_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.s_srcport !== undefined) view.setUint16(0, Number(data.s_srcport), true);
  // 0x02: u16
  if (data?.s_dstport !== undefined) view.setUint16(2, Number(data.s_dstport), true);
  // 0x04: pad4
  return buf;
}

export class _S_un_ports_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get s_srcport(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get s_dstport(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set s_srcport(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set s_dstport(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * _S_un_icmp_e__Struct (size: 8)
 */
export interface _S_un_icmp_e__Struct {
  /** u8 */
  s_type: number;
  /** u8 */
  s_code: number;
  /** u16 */
  filler: number;
}

export const sizeof_S_un_icmp_e__Struct = 8;

export function alloc_S_un_icmp_e__Struct(data?: Partial<_S_un_icmp_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_icmp_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.s_type !== undefined) view.setUint8(0, Number(data.s_type));
  // 0x01: u8
  if (data?.s_code !== undefined) view.setUint8(1, Number(data.s_code));
  // 0x02: u16
  if (data?.filler !== undefined) view.setUint16(2, Number(data.filler), true);
  // 0x04: pad4
  return buf;
}

export class _S_un_icmp_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get s_type(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get s_code(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get filler(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u8
  set s_type(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set s_code(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set filler(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * _S_un_e__Union (size: 24)
 */
export interface _S_un_e__Union {
  /** _S_un_ports_e__Struct */
  S_un_ports: Uint8Array | Deno.PointerValue;
  /** _S_un_icmp_e__Struct */
  S_un_icmp: Uint8Array | Deno.PointerValue;
  /** u32 */
  S_Spi: number;
}

export const sizeof_S_un_e__Union = 24;

export function alloc_S_un_e__Union(data?: Partial<_S_un_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un_ports !== undefined) view.setBigUint64(0, data.S_un_ports === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.S_un_ports))), true);
  // 0x08: pointer
  if (data?.S_un_icmp !== undefined) view.setBigUint64(8, data.S_un_icmp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.S_un_icmp))), true);
  // 0x10: u32
  if (data?.S_Spi !== undefined) view.setUint32(16, Number(data.S_Spi), true);
  // 0x14: pad4
  return buf;
}

export class _S_un_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get S_un_ports(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get S_un_icmp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get S_Spi(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set S_un_ports(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set S_un_icmp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set S_Spi(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Networking.WinSock.IN_ADDR (size: 8)
 */
export interface IN_ADDR {
  /** _S_un_e__Union */
  S_un: Uint8Array | Deno.PointerValue;
}

export const sizeofIN_ADDR = 8;

export function allocIN_ADDR(data?: Partial<IN_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un !== undefined) view.setBigUint64(0, data.S_un === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.S_un))), true);
  return buf;
}

export class IN_ADDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get S_un(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set S_un(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.Session_IPv4 (size: 16)
 */
export interface Session_IPv4 {
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  sess_destaddr: Uint8Array | Deno.PointerValue;
  /** u8 */
  sess_protid: number;
  /** u8 */
  sess_flags: number;
  /** u16 */
  sess_destport: number;
}

export const sizeofSession_IPv4 = 16;

export function allocSession_IPv4(data?: Partial<Session_IPv4>): Uint8Array {
  const buf = new Uint8Array(sizeofSession_IPv4);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sess_destaddr !== undefined) view.setBigUint64(0, data.sess_destaddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sess_destaddr))), true);
  // 0x08: u8
  if (data?.sess_protid !== undefined) view.setUint8(8, Number(data.sess_protid));
  // 0x09: u8
  if (data?.sess_flags !== undefined) view.setUint8(9, Number(data.sess_flags));
  // 0x0a: u16
  if (data?.sess_destport !== undefined) view.setUint16(10, Number(data.sess_destport), true);
  // 0x0c: pad4
  return buf;
}

export class Session_IPv4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sess_destaddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get sess_protid(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get sess_flags(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u16
  get sess_destport(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set sess_destaddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set sess_protid(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set sess_flags(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u16
  set sess_destport(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * _sess_u_e__Union (size: 8)
 */
export interface _sess_u_e__Union {
  /** Windows.Win32.NetworkManagement.QoS.Session_IPv4 */
  sess_ipv4: Uint8Array | Deno.PointerValue;
}

export const sizeof_sess_u_e__Union = 8;

export function alloc_sess_u_e__Union(data?: Partial<_sess_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_sess_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sess_ipv4 !== undefined) view.setBigUint64(0, data.sess_ipv4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sess_ipv4))), true);
  return buf;
}

export class _sess_u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sess_ipv4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sess_ipv4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_SESSION (size: 16)
 */
export interface RSVP_SESSION {
  /** Windows.Win32.NetworkManagement.QoS.RsvpObjHdr */
  sess_header: Uint8Array | Deno.PointerValue;
  /** _sess_u_e__Union */
  sess_u: Uint8Array | Deno.PointerValue;
}

export const sizeofRSVP_SESSION = 16;

export function allocRSVP_SESSION(data?: Partial<RSVP_SESSION>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_SESSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sess_header !== undefined) view.setBigUint64(0, data.sess_header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sess_header))), true);
  // 0x08: pointer
  if (data?.sess_u !== undefined) view.setBigUint64(8, data.sess_u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sess_u))), true);
  return buf;
}

export class RSVP_SESSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sess_header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get sess_u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sess_header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set sess_u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.Rsvp_Hop_IPv4 (size: 16)
 */
export interface Rsvp_Hop_IPv4 {
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  hop_ipaddr: Uint8Array | Deno.PointerValue;
  /** u32 */
  hop_LIH: number;
}

export const sizeofRsvp_Hop_IPv4 = 16;

export function allocRsvp_Hop_IPv4(data?: Partial<Rsvp_Hop_IPv4>): Uint8Array {
  const buf = new Uint8Array(sizeofRsvp_Hop_IPv4);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hop_ipaddr !== undefined) view.setBigUint64(0, data.hop_ipaddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hop_ipaddr))), true);
  // 0x08: u32
  if (data?.hop_LIH !== undefined) view.setUint32(8, Number(data.hop_LIH), true);
  // 0x0c: pad4
  return buf;
}

export class Rsvp_Hop_IPv4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hop_ipaddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get hop_LIH(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set hop_ipaddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set hop_LIH(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _hop_u_e__Union (size: 8)
 */
export interface _hop_u_e__Union {
  /** Windows.Win32.NetworkManagement.QoS.Rsvp_Hop_IPv4 */
  hop_ipv4: Uint8Array | Deno.PointerValue;
}

export const sizeof_hop_u_e__Union = 8;

export function alloc_hop_u_e__Union(data?: Partial<_hop_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_hop_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hop_ipv4 !== undefined) view.setBigUint64(0, data.hop_ipv4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hop_ipv4))), true);
  return buf;
}

export class _hop_u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hop_ipv4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hop_ipv4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_HOP (size: 16)
 */
export interface RSVP_HOP {
  /** Windows.Win32.NetworkManagement.QoS.RsvpObjHdr */
  hop_header: Uint8Array | Deno.PointerValue;
  /** _hop_u_e__Union */
  hop_u: Uint8Array | Deno.PointerValue;
}

export const sizeofRSVP_HOP = 16;

export function allocRSVP_HOP(data?: Partial<RSVP_HOP>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_HOP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hop_header !== undefined) view.setBigUint64(0, data.hop_header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hop_header))), true);
  // 0x08: pointer
  if (data?.hop_u !== undefined) view.setBigUint64(8, data.hop_u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hop_u))), true);
  return buf;
}

export class RSVP_HOPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hop_header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hop_u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hop_header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hop_u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RESV_STYLE (size: 16)
 */
export interface RESV_STYLE {
  /** Windows.Win32.NetworkManagement.QoS.RsvpObjHdr */
  style_header: Uint8Array | Deno.PointerValue;
  /** u32 */
  style_word: number;
}

export const sizeofRESV_STYLE = 16;

export function allocRESV_STYLE(data?: Partial<RESV_STYLE>): Uint8Array {
  const buf = new Uint8Array(sizeofRESV_STYLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.style_header !== undefined) view.setBigUint64(0, data.style_header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.style_header))), true);
  // 0x08: u32
  if (data?.style_word !== undefined) view.setUint32(8, Number(data.style_word), true);
  // 0x0c: pad4
  return buf;
}

export class RESV_STYLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get style_header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get style_word(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set style_header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set style_word(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.Filter_Spec_IPv4 (size: 16)
 */
export interface Filter_Spec_IPv4 {
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  filt_ipaddr: Uint8Array | Deno.PointerValue;
  /** u16 */
  filt_unused: number;
  /** u16 */
  filt_port: number;
}

export const sizeofFilter_Spec_IPv4 = 16;

export function allocFilter_Spec_IPv4(data?: Partial<Filter_Spec_IPv4>): Uint8Array {
  const buf = new Uint8Array(sizeofFilter_Spec_IPv4);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.filt_ipaddr !== undefined) view.setBigUint64(0, data.filt_ipaddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.filt_ipaddr))), true);
  // 0x08: u16
  if (data?.filt_unused !== undefined) view.setUint16(8, Number(data.filt_unused), true);
  // 0x0a: u16
  if (data?.filt_port !== undefined) view.setUint16(10, Number(data.filt_port), true);
  // 0x0c: pad4
  return buf;
}

export class Filter_Spec_IPv4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get filt_ipaddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get filt_unused(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get filt_port(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set filt_ipaddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set filt_unused(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set filt_port(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.Filter_Spec_IPv4GPI (size: 16)
 */
export interface Filter_Spec_IPv4GPI {
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  filt_ipaddr: Uint8Array | Deno.PointerValue;
  /** u32 */
  filt_gpi: number;
}

export const sizeofFilter_Spec_IPv4GPI = 16;

export function allocFilter_Spec_IPv4GPI(data?: Partial<Filter_Spec_IPv4GPI>): Uint8Array {
  const buf = new Uint8Array(sizeofFilter_Spec_IPv4GPI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.filt_ipaddr !== undefined) view.setBigUint64(0, data.filt_ipaddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.filt_ipaddr))), true);
  // 0x08: u32
  if (data?.filt_gpi !== undefined) view.setUint32(8, Number(data.filt_gpi), true);
  // 0x0c: pad4
  return buf;
}

export class Filter_Spec_IPv4GPIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get filt_ipaddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get filt_gpi(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set filt_ipaddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set filt_gpi(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _filt_u_e__Union (size: 16)
 */
export interface _filt_u_e__Union {
  /** Windows.Win32.NetworkManagement.QoS.Filter_Spec_IPv4 */
  filt_ipv4: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.Filter_Spec_IPv4GPI */
  filt_ipv4gpi: Uint8Array | Deno.PointerValue;
}

export const sizeof_filt_u_e__Union = 16;

export function alloc_filt_u_e__Union(data?: Partial<_filt_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_filt_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.filt_ipv4 !== undefined) view.setBigUint64(0, data.filt_ipv4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.filt_ipv4))), true);
  // 0x08: pointer
  if (data?.filt_ipv4gpi !== undefined) view.setBigUint64(8, data.filt_ipv4gpi === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.filt_ipv4gpi))), true);
  return buf;
}

export class _filt_u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get filt_ipv4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get filt_ipv4gpi(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set filt_ipv4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set filt_ipv4gpi(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.FILTER_SPEC (size: 16)
 */
export interface FILTER_SPEC {
  /** Windows.Win32.NetworkManagement.QoS.RsvpObjHdr */
  filt_header: Uint8Array | Deno.PointerValue;
  /** _filt_u_e__Union */
  filt_u: Uint8Array | Deno.PointerValue;
}

export const sizeofFILTER_SPEC = 16;

export function allocFILTER_SPEC(data?: Partial<FILTER_SPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTER_SPEC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.filt_header !== undefined) view.setBigUint64(0, data.filt_header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.filt_header))), true);
  // 0x08: pointer
  if (data?.filt_u !== undefined) view.setBigUint64(8, data.filt_u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.filt_u))), true);
  return buf;
}

export class FILTER_SPECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get filt_header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get filt_u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set filt_header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set filt_u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.Scope_list_ipv4 (size: 8)
 */
export interface Scope_list_ipv4 {
  /** array */
  scopl_ipaddr: Deno.PointerValue;
}

export const sizeofScope_list_ipv4 = 8;

export function allocScope_list_ipv4(data?: Partial<Scope_list_ipv4>): Uint8Array {
  const buf = new Uint8Array(sizeofScope_list_ipv4);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.scopl_ipaddr !== undefined) view.setBigUint64(0, data.scopl_ipaddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.scopl_ipaddr))), true);
  return buf;
}

export class Scope_list_ipv4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get scopl_ipaddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set scopl_ipaddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _scope_u_e__Union (size: 8)
 */
export interface _scope_u_e__Union {
  /** Windows.Win32.NetworkManagement.QoS.Scope_list_ipv4 */
  scopl_ipv4: Uint8Array | Deno.PointerValue;
}

export const sizeof_scope_u_e__Union = 8;

export function alloc_scope_u_e__Union(data?: Partial<_scope_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_scope_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.scopl_ipv4 !== undefined) view.setBigUint64(0, data.scopl_ipv4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.scopl_ipv4))), true);
  return buf;
}

export class _scope_u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get scopl_ipv4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set scopl_ipv4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_SCOPE (size: 16)
 */
export interface RSVP_SCOPE {
  /** Windows.Win32.NetworkManagement.QoS.RsvpObjHdr */
  scopl_header: Uint8Array | Deno.PointerValue;
  /** _scope_u_e__Union */
  scope_u: Uint8Array | Deno.PointerValue;
}

export const sizeofRSVP_SCOPE = 16;

export function allocRSVP_SCOPE(data?: Partial<RSVP_SCOPE>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_SCOPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.scopl_header !== undefined) view.setBigUint64(0, data.scopl_header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.scopl_header))), true);
  // 0x08: pointer
  if (data?.scope_u !== undefined) view.setBigUint64(8, data.scope_u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.scope_u))), true);
  return buf;
}

export class RSVP_SCOPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get scopl_header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get scope_u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set scopl_header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set scope_u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.Error_Spec_IPv4 (size: 16)
 */
export interface Error_Spec_IPv4 {
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  errs_errnode: Uint8Array | Deno.PointerValue;
  /** u8 */
  errs_flags: number;
  /** u8 */
  errs_code: number;
  /** u16 */
  errs_value: number;
}

export const sizeofError_Spec_IPv4 = 16;

export function allocError_Spec_IPv4(data?: Partial<Error_Spec_IPv4>): Uint8Array {
  const buf = new Uint8Array(sizeofError_Spec_IPv4);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.errs_errnode !== undefined) view.setBigUint64(0, data.errs_errnode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.errs_errnode))), true);
  // 0x08: u8
  if (data?.errs_flags !== undefined) view.setUint8(8, Number(data.errs_flags));
  // 0x09: u8
  if (data?.errs_code !== undefined) view.setUint8(9, Number(data.errs_code));
  // 0x0a: u16
  if (data?.errs_value !== undefined) view.setUint16(10, Number(data.errs_value), true);
  // 0x0c: pad4
  return buf;
}

export class Error_Spec_IPv4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get errs_errnode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get errs_flags(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get errs_code(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u16
  get errs_value(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set errs_errnode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set errs_flags(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set errs_code(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u16
  set errs_value(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * _errs_u_e__Union (size: 8)
 */
export interface _errs_u_e__Union {
  /** Windows.Win32.NetworkManagement.QoS.Error_Spec_IPv4 */
  errs_ipv4: Uint8Array | Deno.PointerValue;
}

export const sizeof_errs_u_e__Union = 8;

export function alloc_errs_u_e__Union(data?: Partial<_errs_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_errs_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.errs_ipv4 !== undefined) view.setBigUint64(0, data.errs_ipv4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.errs_ipv4))), true);
  return buf;
}

export class _errs_u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get errs_ipv4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set errs_ipv4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.ERROR_SPEC (size: 16)
 */
export interface ERROR_SPEC {
  /** Windows.Win32.NetworkManagement.QoS.RsvpObjHdr */
  errs_header: Uint8Array | Deno.PointerValue;
  /** _errs_u_e__Union */
  errs_u: Uint8Array | Deno.PointerValue;
}

export const sizeofERROR_SPEC = 16;

export function allocERROR_SPEC(data?: Partial<ERROR_SPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofERROR_SPEC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.errs_header !== undefined) view.setBigUint64(0, data.errs_header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.errs_header))), true);
  // 0x08: pointer
  if (data?.errs_u !== undefined) view.setBigUint64(8, data.errs_u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.errs_u))), true);
  return buf;
}

export class ERROR_SPECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get errs_header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get errs_u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set errs_header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set errs_u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.POLICY_DATA (size: 16)
 */
export interface POLICY_DATA {
  /** Windows.Win32.NetworkManagement.QoS.RsvpObjHdr */
  PolicyObjHdr: Uint8Array | Deno.PointerValue;
  /** u16 */
  usPeOffset: number;
  /** u16 */
  usReserved: number;
}

export const sizeofPOLICY_DATA = 16;

export function allocPOLICY_DATA(data?: Partial<POLICY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PolicyObjHdr !== undefined) view.setBigUint64(0, data.PolicyObjHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PolicyObjHdr))), true);
  // 0x08: u16
  if (data?.usPeOffset !== undefined) view.setUint16(8, Number(data.usPeOffset), true);
  // 0x0a: u16
  if (data?.usReserved !== undefined) view.setUint16(10, Number(data.usReserved), true);
  // 0x0c: pad4
  return buf;
}

export class POLICY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PolicyObjHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get usPeOffset(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get usReserved(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set PolicyObjHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set usPeOffset(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set usReserved(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.POLICY_ELEMENT (size: 16)
 */
export interface POLICY_ELEMENT {
  /** u16 */
  usPeLength: number;
  /** u16 */
  usPeType: number;
  /** array */
  ucPeData: Deno.PointerValue;
}

export const sizeofPOLICY_ELEMENT = 16;

export function allocPOLICY_ELEMENT(data?: Partial<POLICY_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usPeLength !== undefined) view.setUint16(0, Number(data.usPeLength), true);
  // 0x02: u16
  if (data?.usPeType !== undefined) view.setUint16(2, Number(data.usPeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ucPeData !== undefined) view.setBigUint64(8, data.ucPeData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucPeData))), true);
  return buf;
}

export class POLICY_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get usPeLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get usPeType(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ucPeData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set usPeLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set usPeType(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ucPeData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.IntServMainHdr (size: 8)
 */
export interface IntServMainHdr {
  /** u8 */
  ismh_version: number;
  /** u8 */
  ismh_unused: number;
  /** u16 */
  ismh_len32b: number;
}

export const sizeofIntServMainHdr = 8;

export function allocIntServMainHdr(data?: Partial<IntServMainHdr>): Uint8Array {
  const buf = new Uint8Array(sizeofIntServMainHdr);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ismh_version !== undefined) view.setUint8(0, Number(data.ismh_version));
  // 0x01: u8
  if (data?.ismh_unused !== undefined) view.setUint8(1, Number(data.ismh_unused));
  // 0x02: u16
  if (data?.ismh_len32b !== undefined) view.setUint16(2, Number(data.ismh_len32b), true);
  // 0x04: pad4
  return buf;
}

export class IntServMainHdrView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get ismh_version(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get ismh_unused(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get ismh_len32b(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u8
  set ismh_version(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set ismh_unused(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set ismh_len32b(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.IntServServiceHdr (size: 8)
 */
export interface IntServServiceHdr {
  /** u8 */
  issh_service: number;
  /** u8 */
  issh_flags: number;
  /** u16 */
  issh_len32b: number;
}

export const sizeofIntServServiceHdr = 8;

export function allocIntServServiceHdr(data?: Partial<IntServServiceHdr>): Uint8Array {
  const buf = new Uint8Array(sizeofIntServServiceHdr);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.issh_service !== undefined) view.setUint8(0, Number(data.issh_service));
  // 0x01: u8
  if (data?.issh_flags !== undefined) view.setUint8(1, Number(data.issh_flags));
  // 0x02: u16
  if (data?.issh_len32b !== undefined) view.setUint16(2, Number(data.issh_len32b), true);
  // 0x04: pad4
  return buf;
}

export class IntServServiceHdrView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get issh_service(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get issh_flags(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get issh_len32b(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u8
  set issh_service(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set issh_flags(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set issh_len32b(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.IntServParmHdr (size: 8)
 */
export interface IntServParmHdr {
  /** u8 */
  isph_parm_num: number;
  /** u8 */
  isph_flags: number;
  /** u16 */
  isph_len32b: number;
}

export const sizeofIntServParmHdr = 8;

export function allocIntServParmHdr(data?: Partial<IntServParmHdr>): Uint8Array {
  const buf = new Uint8Array(sizeofIntServParmHdr);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.isph_parm_num !== undefined) view.setUint8(0, Number(data.isph_parm_num));
  // 0x01: u8
  if (data?.isph_flags !== undefined) view.setUint8(1, Number(data.isph_flags));
  // 0x02: u16
  if (data?.isph_len32b !== undefined) view.setUint16(2, Number(data.isph_len32b), true);
  // 0x04: pad4
  return buf;
}

export class IntServParmHdrView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get isph_parm_num(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get isph_flags(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get isph_len32b(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u8
  set isph_parm_num(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set isph_flags(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set isph_len32b(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.GenTspecParms (size: 24)
 */
export interface GenTspecParms {
  /** f32 */
  TB_Tspec_r: number;
  /** f32 */
  TB_Tspec_b: number;
  /** f32 */
  TB_Tspec_p: number;
  /** u32 */
  TB_Tspec_m: number;
  /** u32 */
  TB_Tspec_M: number;
}

export const sizeofGenTspecParms = 24;

export function allocGenTspecParms(data?: Partial<GenTspecParms>): Uint8Array {
  const buf = new Uint8Array(sizeofGenTspecParms);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.TB_Tspec_r !== undefined) view.setFloat32(0, Number(data.TB_Tspec_r), true);
  // 0x04: f32
  if (data?.TB_Tspec_b !== undefined) view.setFloat32(4, Number(data.TB_Tspec_b), true);
  // 0x08: f32
  if (data?.TB_Tspec_p !== undefined) view.setFloat32(8, Number(data.TB_Tspec_p), true);
  // 0x0c: u32
  if (data?.TB_Tspec_m !== undefined) view.setUint32(12, Number(data.TB_Tspec_m), true);
  // 0x10: u32
  if (data?.TB_Tspec_M !== undefined) view.setUint32(16, Number(data.TB_Tspec_M), true);
  // 0x14: pad4
  return buf;
}

export class GenTspecParmsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get TB_Tspec_r(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get TB_Tspec_b(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get TB_Tspec_p(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: u32
  get TB_Tspec_m(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get TB_Tspec_M(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: f32
  set TB_Tspec_r(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set TB_Tspec_b(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set TB_Tspec_p(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: u32
  set TB_Tspec_m(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set TB_Tspec_M(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.GenTspec (size: 24)
 */
export interface GenTspec {
  /** Windows.Win32.NetworkManagement.QoS.IntServServiceHdr */
  gen_Tspec_serv_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  gen_Tspec_parm_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.GenTspecParms */
  gen_Tspec_parms: Uint8Array | Deno.PointerValue;
}

export const sizeofGenTspec = 24;

export function allocGenTspec(data?: Partial<GenTspec>): Uint8Array {
  const buf = new Uint8Array(sizeofGenTspec);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.gen_Tspec_serv_hdr !== undefined) view.setBigUint64(0, data.gen_Tspec_serv_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gen_Tspec_serv_hdr))), true);
  // 0x08: pointer
  if (data?.gen_Tspec_parm_hdr !== undefined) view.setBigUint64(8, data.gen_Tspec_parm_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gen_Tspec_parm_hdr))), true);
  // 0x10: pointer
  if (data?.gen_Tspec_parms !== undefined) view.setBigUint64(16, data.gen_Tspec_parms === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gen_Tspec_parms))), true);
  return buf;
}

export class GenTspecView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get gen_Tspec_serv_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get gen_Tspec_parm_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get gen_Tspec_parms(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set gen_Tspec_serv_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set gen_Tspec_parm_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set gen_Tspec_parms(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.QualTspecParms (size: 8)
 */
export interface QualTspecParms {
  /** u32 */
  TB_Tspec_M: number;
}

export const sizeofQualTspecParms = 8;

export function allocQualTspecParms(data?: Partial<QualTspecParms>): Uint8Array {
  const buf = new Uint8Array(sizeofQualTspecParms);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TB_Tspec_M !== undefined) view.setUint32(0, Number(data.TB_Tspec_M), true);
  // 0x04: pad4
  return buf;
}

export class QualTspecParmsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TB_Tspec_M(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set TB_Tspec_M(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.QualTspec (size: 24)
 */
export interface QualTspec {
  /** Windows.Win32.NetworkManagement.QoS.IntServServiceHdr */
  qual_Tspec_serv_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  qual_Tspec_parm_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.QualTspecParms */
  qual_Tspec_parms: Uint8Array | Deno.PointerValue;
}

export const sizeofQualTspec = 24;

export function allocQualTspec(data?: Partial<QualTspec>): Uint8Array {
  const buf = new Uint8Array(sizeofQualTspec);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.qual_Tspec_serv_hdr !== undefined) view.setBigUint64(0, data.qual_Tspec_serv_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qual_Tspec_serv_hdr))), true);
  // 0x08: pointer
  if (data?.qual_Tspec_parm_hdr !== undefined) view.setBigUint64(8, data.qual_Tspec_parm_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qual_Tspec_parm_hdr))), true);
  // 0x10: pointer
  if (data?.qual_Tspec_parms !== undefined) view.setBigUint64(16, data.qual_Tspec_parms === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qual_Tspec_parms))), true);
  return buf;
}

export class QualTspecView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get qual_Tspec_serv_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get qual_Tspec_parm_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get qual_Tspec_parms(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set qual_Tspec_serv_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set qual_Tspec_parm_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set qual_Tspec_parms(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.QualAppFlowSpec (size: 24)
 */
export interface QualAppFlowSpec {
  /** Windows.Win32.NetworkManagement.QoS.IntServServiceHdr */
  Q_spec_serv_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  Q_spec_parm_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.QualTspecParms */
  Q_spec_parms: Uint8Array | Deno.PointerValue;
}

export const sizeofQualAppFlowSpec = 24;

export function allocQualAppFlowSpec(data?: Partial<QualAppFlowSpec>): Uint8Array {
  const buf = new Uint8Array(sizeofQualAppFlowSpec);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Q_spec_serv_hdr !== undefined) view.setBigUint64(0, data.Q_spec_serv_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Q_spec_serv_hdr))), true);
  // 0x08: pointer
  if (data?.Q_spec_parm_hdr !== undefined) view.setBigUint64(8, data.Q_spec_parm_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Q_spec_parm_hdr))), true);
  // 0x10: pointer
  if (data?.Q_spec_parms !== undefined) view.setBigUint64(16, data.Q_spec_parms === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Q_spec_parms))), true);
  return buf;
}

export class QualAppFlowSpecView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Q_spec_serv_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Q_spec_parm_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Q_spec_parms(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Q_spec_serv_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Q_spec_parm_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Q_spec_parms(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _tspec_u_e__Union (size: 16)
 */
export interface _tspec_u_e__Union {
  /** Windows.Win32.NetworkManagement.QoS.GenTspec */
  gen_stspec: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.QualTspec */
  qual_stspec: Uint8Array | Deno.PointerValue;
}

export const sizeof_tspec_u_e__Union = 16;

export function alloc_tspec_u_e__Union(data?: Partial<_tspec_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_tspec_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.gen_stspec !== undefined) view.setBigUint64(0, data.gen_stspec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gen_stspec))), true);
  // 0x08: pointer
  if (data?.qual_stspec !== undefined) view.setBigUint64(8, data.qual_stspec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qual_stspec))), true);
  return buf;
}

export class _tspec_u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get gen_stspec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get qual_stspec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set gen_stspec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set qual_stspec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.IntServTspecBody (size: 16)
 */
export interface IntServTspecBody {
  /** Windows.Win32.NetworkManagement.QoS.IntServMainHdr */
  st_mh: Uint8Array | Deno.PointerValue;
  /** _tspec_u_e__Union */
  tspec_u: Uint8Array | Deno.PointerValue;
}

export const sizeofIntServTspecBody = 16;

export function allocIntServTspecBody(data?: Partial<IntServTspecBody>): Uint8Array {
  const buf = new Uint8Array(sizeofIntServTspecBody);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.st_mh !== undefined) view.setBigUint64(0, data.st_mh === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.st_mh))), true);
  // 0x08: pointer
  if (data?.tspec_u !== undefined) view.setBigUint64(8, data.tspec_u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tspec_u))), true);
  return buf;
}

export class IntServTspecBodyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get st_mh(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get tspec_u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set st_mh(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set tspec_u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.SENDER_TSPEC (size: 16)
 */
export interface SENDER_TSPEC {
  /** Windows.Win32.NetworkManagement.QoS.RsvpObjHdr */
  stspec_header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.IntServTspecBody */
  stspec_body: Uint8Array | Deno.PointerValue;
}

export const sizeofSENDER_TSPEC = 16;

export function allocSENDER_TSPEC(data?: Partial<SENDER_TSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofSENDER_TSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.stspec_header !== undefined) view.setBigUint64(0, data.stspec_header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stspec_header))), true);
  // 0x08: pointer
  if (data?.stspec_body !== undefined) view.setBigUint64(8, data.stspec_body === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stspec_body))), true);
  return buf;
}

export class SENDER_TSPECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get stspec_header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get stspec_body(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set stspec_header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set stspec_body(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.CtrlLoadFlowspec (size: 24)
 */
export interface CtrlLoadFlowspec {
  /** Windows.Win32.NetworkManagement.QoS.IntServServiceHdr */
  CL_spec_serv_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  CL_spec_parm_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.GenTspecParms */
  CL_spec_parms: Uint8Array | Deno.PointerValue;
}

export const sizeofCtrlLoadFlowspec = 24;

export function allocCtrlLoadFlowspec(data?: Partial<CtrlLoadFlowspec>): Uint8Array {
  const buf = new Uint8Array(sizeofCtrlLoadFlowspec);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CL_spec_serv_hdr !== undefined) view.setBigUint64(0, data.CL_spec_serv_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CL_spec_serv_hdr))), true);
  // 0x08: pointer
  if (data?.CL_spec_parm_hdr !== undefined) view.setBigUint64(8, data.CL_spec_parm_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CL_spec_parm_hdr))), true);
  // 0x10: pointer
  if (data?.CL_spec_parms !== undefined) view.setBigUint64(16, data.CL_spec_parms === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CL_spec_parms))), true);
  return buf;
}

export class CtrlLoadFlowspecView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CL_spec_serv_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get CL_spec_parm_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CL_spec_parms(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CL_spec_serv_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set CL_spec_parm_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CL_spec_parms(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.GuarRspec (size: 8)
 */
export interface GuarRspec {
  /** f32 */
  Guar_R: number;
  /** u32 */
  Guar_S: number;
}

export const sizeofGuarRspec = 8;

export function allocGuarRspec(data?: Partial<GuarRspec>): Uint8Array {
  const buf = new Uint8Array(sizeofGuarRspec);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Guar_R !== undefined) view.setFloat32(0, Number(data.Guar_R), true);
  // 0x04: u32
  if (data?.Guar_S !== undefined) view.setUint32(4, Number(data.Guar_S), true);
  return buf;
}

export class GuarRspecView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get Guar_R(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: u32
  get Guar_S(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: f32
  set Guar_R(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: u32
  set Guar_S(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.GuarFlowSpec (size: 40)
 */
export interface GuarFlowSpec {
  /** Windows.Win32.NetworkManagement.QoS.IntServServiceHdr */
  Guar_serv_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  Guar_Tspec_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.GenTspecParms */
  Guar_Tspec_parms: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  Guar_Rspec_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.GuarRspec */
  Guar_Rspec: Uint8Array | Deno.PointerValue;
}

export const sizeofGuarFlowSpec = 40;

export function allocGuarFlowSpec(data?: Partial<GuarFlowSpec>): Uint8Array {
  const buf = new Uint8Array(sizeofGuarFlowSpec);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guar_serv_hdr !== undefined) view.setBigUint64(0, data.Guar_serv_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Guar_serv_hdr))), true);
  // 0x08: pointer
  if (data?.Guar_Tspec_hdr !== undefined) view.setBigUint64(8, data.Guar_Tspec_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Guar_Tspec_hdr))), true);
  // 0x10: pointer
  if (data?.Guar_Tspec_parms !== undefined) view.setBigUint64(16, data.Guar_Tspec_parms === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Guar_Tspec_parms))), true);
  // 0x18: pointer
  if (data?.Guar_Rspec_hdr !== undefined) view.setBigUint64(24, data.Guar_Rspec_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Guar_Rspec_hdr))), true);
  // 0x20: pointer
  if (data?.Guar_Rspec !== undefined) view.setBigUint64(32, data.Guar_Rspec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Guar_Rspec))), true);
  return buf;
}

export class GuarFlowSpecView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Guar_serv_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Guar_Tspec_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Guar_Tspec_parms(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Guar_Rspec_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Guar_Rspec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Guar_serv_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Guar_Tspec_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Guar_Tspec_parms(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Guar_Rspec_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Guar_Rspec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _spec_u_e__Union (size: 24)
 */
export interface _spec_u_e__Union {
  /** Windows.Win32.NetworkManagement.QoS.CtrlLoadFlowspec */
  CL_spec: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.GuarFlowSpec */
  G_spec: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.QualAppFlowSpec */
  Q_spec: Uint8Array | Deno.PointerValue;
}

export const sizeof_spec_u_e__Union = 24;

export function alloc_spec_u_e__Union(data?: Partial<_spec_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_spec_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CL_spec !== undefined) view.setBigUint64(0, data.CL_spec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CL_spec))), true);
  // 0x08: pointer
  if (data?.G_spec !== undefined) view.setBigUint64(8, data.G_spec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.G_spec))), true);
  // 0x10: pointer
  if (data?.Q_spec !== undefined) view.setBigUint64(16, data.Q_spec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Q_spec))), true);
  return buf;
}

export class _spec_u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CL_spec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get G_spec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Q_spec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CL_spec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set G_spec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Q_spec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.IntServFlowSpec (size: 16)
 */
export interface IntServFlowSpec {
  /** Windows.Win32.NetworkManagement.QoS.IntServMainHdr */
  spec_mh: Uint8Array | Deno.PointerValue;
  /** _spec_u_e__Union */
  spec_u: Uint8Array | Deno.PointerValue;
}

export const sizeofIntServFlowSpec = 16;

export function allocIntServFlowSpec(data?: Partial<IntServFlowSpec>): Uint8Array {
  const buf = new Uint8Array(sizeofIntServFlowSpec);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.spec_mh !== undefined) view.setBigUint64(0, data.spec_mh === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.spec_mh))), true);
  // 0x08: pointer
  if (data?.spec_u !== undefined) view.setBigUint64(8, data.spec_u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.spec_u))), true);
  return buf;
}

export class IntServFlowSpecView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get spec_mh(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get spec_u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set spec_mh(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set spec_u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.IS_FLOWSPEC (size: 16)
 */
export interface IS_FLOWSPEC {
  /** Windows.Win32.NetworkManagement.QoS.RsvpObjHdr */
  flow_header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.IntServFlowSpec */
  flow_body: Uint8Array | Deno.PointerValue;
}

export const sizeofIS_FLOWSPEC = 16;

export function allocIS_FLOWSPEC(data?: Partial<IS_FLOWSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofIS_FLOWSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.flow_header !== undefined) view.setBigUint64(0, data.flow_header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.flow_header))), true);
  // 0x08: pointer
  if (data?.flow_body !== undefined) view.setBigUint64(8, data.flow_body === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.flow_body))), true);
  return buf;
}

export class IS_FLOWSPECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get flow_header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get flow_body(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set flow_header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set flow_body(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _u1_e__Union (size: 16)
 */
export interface _u1_e__Union {
  /** ptr */
  stspec: Deno.PointerValue | Uint8Array;
  /** ptr */
  isflow: Deno.PointerValue | Uint8Array;
}

export const sizeof_u1_e__Union = 16;

export function alloc_u1_e__Union(data?: Partial<_u1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.stspec !== undefined) view.setBigUint64(0, data.stspec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stspec))), true);
  // 0x08: pointer
  if (data?.isflow !== undefined) view.setBigUint64(8, data.isflow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.isflow))), true);
  return buf;
}

export class _u1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get stspec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get isflow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set stspec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set isflow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _u2_e__Union (size: 16)
 */
export interface _u2_e__Union {
  /** ptr */
  stemp: Deno.PointerValue | Uint8Array;
  /** ptr */
  fspec: Deno.PointerValue | Uint8Array;
}

export const sizeof_u2_e__Union = 16;

export function alloc_u2_e__Union(data?: Partial<_u2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.stemp !== undefined) view.setBigUint64(0, data.stemp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stemp))), true);
  // 0x08: pointer
  if (data?.fspec !== undefined) view.setBigUint64(8, data.fspec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fspec))), true);
  return buf;
}

export class _u2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get stemp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get fspec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set stemp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set fspec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.FLOW_DESC (size: 16)
 */
export interface FLOW_DESC {
  /** _u1_e__Union */
  u1: Uint8Array | Deno.PointerValue;
  /** _u2_e__Union */
  u2: Uint8Array | Deno.PointerValue;
}

export const sizeofFLOW_DESC = 16;

export function allocFLOW_DESC(data?: Partial<FLOW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofFLOW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u1 !== undefined) view.setBigUint64(0, data.u1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u1))), true);
  // 0x08: pointer
  if (data?.u2 !== undefined) view.setBigUint64(8, data.u2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u2))), true);
  return buf;
}

export class FLOW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get u1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set u1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.Gads_parms_t (size: 72)
 */
export interface Gads_parms_t {
  /** Windows.Win32.NetworkManagement.QoS.IntServServiceHdr */
  Gads_serv_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  Gads_Ctot_hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  Gads_Ctot: number;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  Gads_Dtot_hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  Gads_Dtot: number;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  Gads_Csum_hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  Gads_Csum: number;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  Gads_Dsum_hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  Gads_Dsum: number;
}

export const sizeofGads_parms_t = 72;

export function allocGads_parms_t(data?: Partial<Gads_parms_t>): Uint8Array {
  const buf = new Uint8Array(sizeofGads_parms_t);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Gads_serv_hdr !== undefined) view.setBigUint64(0, data.Gads_serv_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Gads_serv_hdr))), true);
  // 0x08: pointer
  if (data?.Gads_Ctot_hdr !== undefined) view.setBigUint64(8, data.Gads_Ctot_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Gads_Ctot_hdr))), true);
  // 0x10: u32
  if (data?.Gads_Ctot !== undefined) view.setUint32(16, Number(data.Gads_Ctot), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Gads_Dtot_hdr !== undefined) view.setBigUint64(24, data.Gads_Dtot_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Gads_Dtot_hdr))), true);
  // 0x20: u32
  if (data?.Gads_Dtot !== undefined) view.setUint32(32, Number(data.Gads_Dtot), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Gads_Csum_hdr !== undefined) view.setBigUint64(40, data.Gads_Csum_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Gads_Csum_hdr))), true);
  // 0x30: u32
  if (data?.Gads_Csum !== undefined) view.setUint32(48, Number(data.Gads_Csum), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Gads_Dsum_hdr !== undefined) view.setBigUint64(56, data.Gads_Dsum_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Gads_Dsum_hdr))), true);
  // 0x40: u32
  if (data?.Gads_Dsum !== undefined) view.setUint32(64, Number(data.Gads_Dsum), true);
  // 0x44: pad4
  return buf;
}

export class Gads_parms_tView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Gads_serv_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Gads_Ctot_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Gads_Ctot(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Gads_Dtot_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get Gads_Dtot(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Gads_Csum_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get Gads_Csum(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get Gads_Dsum_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get Gads_Dsum(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: pointer
  set Gads_serv_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Gads_Ctot_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Gads_Ctot(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Gads_Dtot_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set Gads_Dtot(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Gads_Csum_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set Gads_Csum(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set Gads_Dsum_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set Gads_Dsum(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.GenAdspecParams (size: 72)
 */
export interface GenAdspecParams {
  /** Windows.Win32.NetworkManagement.QoS.IntServServiceHdr */
  gen_parm_hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  gen_parm_hopcnt_hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  gen_parm_hopcnt: number;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  gen_parm_pathbw_hdr: Uint8Array | Deno.PointerValue;
  /** f32 */
  gen_parm_path_bw: number;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  gen_parm_minlat_hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  gen_parm_min_latency: number;
  /** Windows.Win32.NetworkManagement.QoS.IntServParmHdr */
  gen_parm_compmtu_hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  gen_parm_composed_MTU: number;
}

export const sizeofGenAdspecParams = 72;

export function allocGenAdspecParams(data?: Partial<GenAdspecParams>): Uint8Array {
  const buf = new Uint8Array(sizeofGenAdspecParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.gen_parm_hdr !== undefined) view.setBigUint64(0, data.gen_parm_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gen_parm_hdr))), true);
  // 0x08: pointer
  if (data?.gen_parm_hopcnt_hdr !== undefined) view.setBigUint64(8, data.gen_parm_hopcnt_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gen_parm_hopcnt_hdr))), true);
  // 0x10: u32
  if (data?.gen_parm_hopcnt !== undefined) view.setUint32(16, Number(data.gen_parm_hopcnt), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.gen_parm_pathbw_hdr !== undefined) view.setBigUint64(24, data.gen_parm_pathbw_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gen_parm_pathbw_hdr))), true);
  // 0x20: f32
  if (data?.gen_parm_path_bw !== undefined) view.setFloat32(32, Number(data.gen_parm_path_bw), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.gen_parm_minlat_hdr !== undefined) view.setBigUint64(40, data.gen_parm_minlat_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gen_parm_minlat_hdr))), true);
  // 0x30: u32
  if (data?.gen_parm_min_latency !== undefined) view.setUint32(48, Number(data.gen_parm_min_latency), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.gen_parm_compmtu_hdr !== undefined) view.setBigUint64(56, data.gen_parm_compmtu_hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gen_parm_compmtu_hdr))), true);
  // 0x40: u32
  if (data?.gen_parm_composed_MTU !== undefined) view.setUint32(64, Number(data.gen_parm_composed_MTU), true);
  // 0x44: pad4
  return buf;
}

export class GenAdspecParamsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get gen_parm_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get gen_parm_hopcnt_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get gen_parm_hopcnt(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get gen_parm_pathbw_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: f32
  get gen_parm_path_bw(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get gen_parm_minlat_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get gen_parm_min_latency(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get gen_parm_compmtu_hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get gen_parm_composed_MTU(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: pointer
  set gen_parm_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set gen_parm_hopcnt_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set gen_parm_hopcnt(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set gen_parm_pathbw_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: f32
  set gen_parm_path_bw(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set gen_parm_minlat_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set gen_parm_min_latency(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set gen_parm_compmtu_hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set gen_parm_composed_MTU(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.IS_ADSPEC_BODY (size: 16)
 */
export interface IS_ADSPEC_BODY {
  /** Windows.Win32.NetworkManagement.QoS.IntServMainHdr */
  adspec_mh: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.GenAdspecParams */
  adspec_genparms: Uint8Array | Deno.PointerValue;
}

export const sizeofIS_ADSPEC_BODY = 16;

export function allocIS_ADSPEC_BODY(data?: Partial<IS_ADSPEC_BODY>): Uint8Array {
  const buf = new Uint8Array(sizeofIS_ADSPEC_BODY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.adspec_mh !== undefined) view.setBigUint64(0, data.adspec_mh === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.adspec_mh))), true);
  // 0x08: pointer
  if (data?.adspec_genparms !== undefined) view.setBigUint64(8, data.adspec_genparms === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.adspec_genparms))), true);
  return buf;
}

export class IS_ADSPEC_BODYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get adspec_mh(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get adspec_genparms(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set adspec_mh(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set adspec_genparms(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.ADSPEC (size: 16)
 */
export interface ADSPEC {
  /** Windows.Win32.NetworkManagement.QoS.RsvpObjHdr */
  adspec_header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.IS_ADSPEC_BODY */
  adspec_body: Uint8Array | Deno.PointerValue;
}

export const sizeofADSPEC = 16;

export function allocADSPEC(data?: Partial<ADSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofADSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.adspec_header !== undefined) view.setBigUint64(0, data.adspec_header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.adspec_header))), true);
  // 0x08: pointer
  if (data?.adspec_body !== undefined) view.setBigUint64(8, data.adspec_body === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.adspec_body))), true);
  return buf;
}

export class ADSPECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get adspec_header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get adspec_body(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set adspec_header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set adspec_body(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.ID_ERROR_OBJECT (size: 16)
 */
export interface ID_ERROR_OBJECT {
  /** u16 */
  usIdErrLength: number;
  /** u8 */
  ucAType: number;
  /** u8 */
  ucSubType: number;
  /** u16 */
  usReserved: number;
  /** u16 */
  usIdErrorValue: number;
  /** array */
  ucIdErrData: Deno.PointerValue;
}

export const sizeofID_ERROR_OBJECT = 16;

export function allocID_ERROR_OBJECT(data?: Partial<ID_ERROR_OBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofID_ERROR_OBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usIdErrLength !== undefined) view.setUint16(0, Number(data.usIdErrLength), true);
  // 0x02: u8
  if (data?.ucAType !== undefined) view.setUint8(2, Number(data.ucAType));
  // 0x03: u8
  if (data?.ucSubType !== undefined) view.setUint8(3, Number(data.ucSubType));
  // 0x04: u16
  if (data?.usReserved !== undefined) view.setUint16(4, Number(data.usReserved), true);
  // 0x06: u16
  if (data?.usIdErrorValue !== undefined) view.setUint16(6, Number(data.usIdErrorValue), true);
  // 0x08: pointer
  if (data?.ucIdErrData !== undefined) view.setBigUint64(8, data.ucIdErrData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucIdErrData))), true);
  return buf;
}

export class ID_ERROR_OBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get usIdErrLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get ucAType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get ucSubType(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u16
  get usReserved(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get usIdErrorValue(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get ucIdErrData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set usIdErrLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set ucAType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set ucSubType(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u16
  set usReserved(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set usIdErrorValue(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set ucIdErrData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_MSG_OBJS (size: 96)
 */
export interface RSVP_MSG_OBJS {
  /** i32 */
  RsvpMsgType: number;
  /** ptr */
  pRsvpSession: Deno.PointerValue | Uint8Array;
  /** ptr */
  pRsvpFromHop: Deno.PointerValue | Uint8Array;
  /** ptr */
  pRsvpToHop: Deno.PointerValue | Uint8Array;
  /** ptr */
  pResvStyle: Deno.PointerValue | Uint8Array;
  /** ptr */
  pRsvpScope: Deno.PointerValue | Uint8Array;
  /** i32 */
  FlowDescCount: number;
  /** ptr */
  pFlowDescs: Deno.PointerValue | Uint8Array;
  /** i32 */
  PdObjectCount: number;
  /** ptr */
  ppPdObjects: Deno.PointerValue | Uint8Array;
  /** ptr */
  pErrorSpec: Deno.PointerValue | Uint8Array;
  /** ptr */
  pAdspec: Deno.PointerValue | Uint8Array;
}

export const sizeofRSVP_MSG_OBJS = 96;

export function allocRSVP_MSG_OBJS(data?: Partial<RSVP_MSG_OBJS>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_MSG_OBJS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RsvpMsgType !== undefined) view.setInt32(0, Number(data.RsvpMsgType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pRsvpSession !== undefined) view.setBigUint64(8, data.pRsvpSession === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRsvpSession))), true);
  // 0x10: pointer
  if (data?.pRsvpFromHop !== undefined) view.setBigUint64(16, data.pRsvpFromHop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRsvpFromHop))), true);
  // 0x18: pointer
  if (data?.pRsvpToHop !== undefined) view.setBigUint64(24, data.pRsvpToHop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRsvpToHop))), true);
  // 0x20: pointer
  if (data?.pResvStyle !== undefined) view.setBigUint64(32, data.pResvStyle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pResvStyle))), true);
  // 0x28: pointer
  if (data?.pRsvpScope !== undefined) view.setBigUint64(40, data.pRsvpScope === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRsvpScope))), true);
  // 0x30: i32
  if (data?.FlowDescCount !== undefined) view.setInt32(48, Number(data.FlowDescCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pFlowDescs !== undefined) view.setBigUint64(56, data.pFlowDescs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pFlowDescs))), true);
  // 0x40: i32
  if (data?.PdObjectCount !== undefined) view.setInt32(64, Number(data.PdObjectCount), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.ppPdObjects !== undefined) view.setBigUint64(72, data.ppPdObjects === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppPdObjects))), true);
  // 0x50: pointer
  if (data?.pErrorSpec !== undefined) view.setBigUint64(80, data.pErrorSpec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pErrorSpec))), true);
  // 0x58: pointer
  if (data?.pAdspec !== undefined) view.setBigUint64(88, data.pAdspec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pAdspec))), true);
  return buf;
}

export class RSVP_MSG_OBJSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get RsvpMsgType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pRsvpSession(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pRsvpFromHop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pRsvpToHop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pResvStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pRsvpScope(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get FlowDescCount(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pFlowDescs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: i32
  get PdObjectCount(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get ppPdObjects(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get pErrorSpec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get pAdspec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set RsvpMsgType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pRsvpSession(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pRsvpFromHop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pRsvpToHop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pResvStyle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pRsvpScope(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set FlowDescCount(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pFlowDescs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: i32
  set PdObjectCount(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set ppPdObjects(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set pErrorSpec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set pAdspec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.POLICY_DECISION (size: 8)
 */
export interface POLICY_DECISION {
  /** u32 */
  lpvResult: number;
  /** u16 */
  wPolicyErrCode: number;
  /** u16 */
  wPolicyErrValue: number;
}

export const sizeofPOLICY_DECISION = 8;

export function allocPOLICY_DECISION(data?: Partial<POLICY_DECISION>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_DECISION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lpvResult !== undefined) view.setUint32(0, Number(data.lpvResult), true);
  // 0x04: u16
  if (data?.wPolicyErrCode !== undefined) view.setUint16(4, Number(data.wPolicyErrCode), true);
  // 0x06: u16
  if (data?.wPolicyErrValue !== undefined) view.setUint16(6, Number(data.wPolicyErrValue), true);
  return buf;
}

export class POLICY_DECISIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lpvResult(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wPolicyErrCode(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wPolicyErrValue(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u32
  set lpvResult(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wPolicyErrCode(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wPolicyErrValue(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.LPM_INIT_INFO (size: 48)
 */
export interface LPM_INIT_INFO {
  /** u32 */
  PcmVersionNumber: number;
  /** u32 */
  ResultTimeLimit: number;
  /** i32 */
  ConfiguredLpmCount: number;
  /** Windows.Win32.NetworkManagement.QoS.PALLOCMEM */
  AllocMemory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.PFREEMEM */
  FreeMemory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.CBADMITRESULT */
  PcmAdmitResultCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.CBGETRSVPOBJECTS */
  GetRsvpObjectsCallback: Uint8Array | Deno.PointerValue;
}

export const sizeofLPM_INIT_INFO = 48;

export function allocLPM_INIT_INFO(data?: Partial<LPM_INIT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLPM_INIT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PcmVersionNumber !== undefined) view.setUint32(0, Number(data.PcmVersionNumber), true);
  // 0x04: u32
  if (data?.ResultTimeLimit !== undefined) view.setUint32(4, Number(data.ResultTimeLimit), true);
  // 0x08: i32
  if (data?.ConfiguredLpmCount !== undefined) view.setInt32(8, Number(data.ConfiguredLpmCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.AllocMemory !== undefined) view.setBigUint64(16, data.AllocMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocMemory))), true);
  // 0x18: pointer
  if (data?.FreeMemory !== undefined) view.setBigUint64(24, data.FreeMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeMemory))), true);
  // 0x20: pointer
  if (data?.PcmAdmitResultCallback !== undefined) view.setBigUint64(32, data.PcmAdmitResultCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PcmAdmitResultCallback))), true);
  // 0x28: pointer
  if (data?.GetRsvpObjectsCallback !== undefined) view.setBigUint64(40, data.GetRsvpObjectsCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetRsvpObjectsCallback))), true);
  return buf;
}

export class LPM_INIT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PcmVersionNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ResultTimeLimit(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get ConfiguredLpmCount(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get AllocMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FreeMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get PcmAdmitResultCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get GetRsvpObjectsCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set PcmVersionNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ResultTimeLimit(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set ConfiguredLpmCount(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set AllocMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set FreeMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set PcmAdmitResultCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set GetRsvpObjectsCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.LPMIPTABLE (size: 24)
 */
export interface LPMIPTABLE {
  /** u32 */
  ulIfIndex: number;
  /** u32 */
  MediaType: number;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  IfIpAddr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  IfNetMask: Uint8Array | Deno.PointerValue;
}

export const sizeofLPMIPTABLE = 24;

export function allocLPMIPTABLE(data?: Partial<LPMIPTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofLPMIPTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulIfIndex !== undefined) view.setUint32(0, Number(data.ulIfIndex), true);
  // 0x04: u32
  if (data?.MediaType !== undefined) view.setUint32(4, Number(data.MediaType), true);
  // 0x08: pointer
  if (data?.IfIpAddr !== undefined) view.setBigUint64(8, data.IfIpAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IfIpAddr))), true);
  // 0x10: pointer
  if (data?.IfNetMask !== undefined) view.setBigUint64(16, data.IfNetMask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IfNetMask))), true);
  return buf;
}

export class LPMIPTABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulIfIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MediaType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get IfIpAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get IfNetMask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ulIfIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MediaType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set IfIpAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set IfNetMask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_PACKET_PRIORITY (size: 16)
 */
export interface QOS_PACKET_PRIORITY {
  /** u32 */
  ConformantDSCPValue: number;
  /** u32 */
  NonConformantDSCPValue: number;
  /** u32 */
  ConformantL2Value: number;
  /** u32 */
  NonConformantL2Value: number;
}

export const sizeofQOS_PACKET_PRIORITY = 16;

export function allocQOS_PACKET_PRIORITY(data?: Partial<QOS_PACKET_PRIORITY>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_PACKET_PRIORITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ConformantDSCPValue !== undefined) view.setUint32(0, Number(data.ConformantDSCPValue), true);
  // 0x04: u32
  if (data?.NonConformantDSCPValue !== undefined) view.setUint32(4, Number(data.NonConformantDSCPValue), true);
  // 0x08: u32
  if (data?.ConformantL2Value !== undefined) view.setUint32(8, Number(data.ConformantL2Value), true);
  // 0x0c: u32
  if (data?.NonConformantL2Value !== undefined) view.setUint32(12, Number(data.NonConformantL2Value), true);
  return buf;
}

export class QOS_PACKET_PRIORITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ConformantDSCPValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NonConformantDSCPValue(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ConformantL2Value(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NonConformantL2Value(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set ConformantDSCPValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NonConformantDSCPValue(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ConformantL2Value(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NonConformantL2Value(value: number) {
    this.view.setUint32(12, value, true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_FLOW_FUNDAMENTALS (size: 40)
 */
export interface QOS_FLOW_FUNDAMENTALS {
  /** Windows.Win32.Foundation.BOOL */
  BottleneckBandwidthSet: boolean;
  /** u64 */
  BottleneckBandwidth: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  AvailableBandwidthSet: boolean;
  /** u64 */
  AvailableBandwidth: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  RTTSet: boolean;
  /** u32 */
  RTT: number;
}

export const sizeofQOS_FLOW_FUNDAMENTALS = 40;

export function allocQOS_FLOW_FUNDAMENTALS(data?: Partial<QOS_FLOW_FUNDAMENTALS>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_FLOW_FUNDAMENTALS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BottleneckBandwidthSet !== undefined) view.setInt32(0, Number(data.BottleneckBandwidthSet), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.BottleneckBandwidth !== undefined) view.setBigUint64(8, BigInt(data.BottleneckBandwidth), true);
  // 0x10: i32
  if (data?.AvailableBandwidthSet !== undefined) view.setInt32(16, Number(data.AvailableBandwidthSet), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.AvailableBandwidth !== undefined) view.setBigUint64(24, BigInt(data.AvailableBandwidth), true);
  // 0x20: i32
  if (data?.RTTSet !== undefined) view.setInt32(32, Number(data.RTTSet), true);
  // 0x24: u32
  if (data?.RTT !== undefined) view.setUint32(36, Number(data.RTT), true);
  return buf;
}

export class QOS_FLOW_FUNDAMENTALSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get BottleneckBandwidthSet(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get BottleneckBandwidth(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: i32
  get AvailableBandwidthSet(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: u64
  get AvailableBandwidth(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: i32
  get RTTSet(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get RTT(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: i32
  set BottleneckBandwidthSet(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set BottleneckBandwidth(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: i32
  set AvailableBandwidthSet(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: u64
  set AvailableBandwidth(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: i32
  set RTTSet(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set RTT(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_FLOWRATE_OUTGOING (size: 16)
 */
export interface QOS_FLOWRATE_OUTGOING {
  /** u64 */
  Bandwidth: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.QOS_SHAPING */
  ShapingBehavior: QOS_SHAPING;
  /** Windows.Win32.NetworkManagement.QoS.QOS_FLOWRATE_REASON */
  Reason: QOS_FLOWRATE_REASON;
}

export const sizeofQOS_FLOWRATE_OUTGOING = 16;

export function allocQOS_FLOWRATE_OUTGOING(data?: Partial<QOS_FLOWRATE_OUTGOING>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_FLOWRATE_OUTGOING);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Bandwidth !== undefined) view.setBigUint64(0, BigInt(data.Bandwidth), true);
  // 0x08: i32
  if (data?.ShapingBehavior !== undefined) view.setInt32(8, Number(data.ShapingBehavior), true);
  // 0x0c: i32
  if (data?.Reason !== undefined) view.setInt32(12, Number(data.Reason), true);
  return buf;
}

export class QOS_FLOWRATE_OUTGOINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Bandwidth(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get ShapingBehavior(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Reason(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u64
  set Bandwidth(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set ShapingBehavior(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Reason(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_VERSION (size: 8)
 */
export interface QOS_VERSION {
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
}

export const sizeofQOS_VERSION = 8;

export function allocQOS_VERSION(data?: Partial<QOS_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MajorVersion !== undefined) view.setUint16(0, Number(data.MajorVersion), true);
  // 0x02: u16
  if (data?.MinorVersion !== undefined) view.setUint16(2, Number(data.MinorVersion), true);
  // 0x04: pad4
  return buf;
}

export class QOS_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MajorVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MinorVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set MajorVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MinorVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_FRIENDLY_NAME (size: 16)
 */
export interface QOS_FRIENDLY_NAME {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
  /** array */
  FriendlyName: Deno.PointerValue;
}

export const sizeofQOS_FRIENDLY_NAME = 16;

export function allocQOS_FRIENDLY_NAME(data?: Partial<QOS_FRIENDLY_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_FRIENDLY_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  // 0x08: pointer
  if (data?.FriendlyName !== undefined) view.setBigUint64(8, data.FriendlyName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FriendlyName))), true);
  return buf;
}

export class QOS_FRIENDLY_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get FriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set FriendlyName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_TRAFFIC_CLASS (size: 16)
 */
export interface QOS_TRAFFIC_CLASS {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  TrafficClass: number;
}

export const sizeofQOS_TRAFFIC_CLASS = 16;

export function allocQOS_TRAFFIC_CLASS(data?: Partial<QOS_TRAFFIC_CLASS>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_TRAFFIC_CLASS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  // 0x08: u32
  if (data?.TrafficClass !== undefined) view.setUint32(8, Number(data.TrafficClass), true);
  // 0x0c: pad4
  return buf;
}

export class QOS_TRAFFIC_CLASSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get TrafficClass(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set TrafficClass(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_DS_CLASS (size: 16)
 */
export interface QOS_DS_CLASS {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  DSField: number;
}

export const sizeofQOS_DS_CLASS = 16;

export function allocQOS_DS_CLASS(data?: Partial<QOS_DS_CLASS>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_DS_CLASS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  // 0x08: u32
  if (data?.DSField !== undefined) view.setUint32(8, Number(data.DSField), true);
  // 0x0c: pad4
  return buf;
}

export class QOS_DS_CLASSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get DSField(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set DSField(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_DIFFSERV (size: 24)
 */
export interface QOS_DIFFSERV {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  DSFieldCount: number;
  /** array */
  DiffservRule: Deno.PointerValue;
}

export const sizeofQOS_DIFFSERV = 24;

export function allocQOS_DIFFSERV(data?: Partial<QOS_DIFFSERV>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_DIFFSERV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  // 0x08: u32
  if (data?.DSFieldCount !== undefined) view.setUint32(8, Number(data.DSFieldCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DiffservRule !== undefined) view.setBigUint64(16, data.DiffservRule === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DiffservRule))), true);
  return buf;
}

export class QOS_DIFFSERVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get DSFieldCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get DiffservRule(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set DSFieldCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set DiffservRule(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_DIFFSERV_RULE (size: 8)
 */
export interface QOS_DIFFSERV_RULE {
  /** u8 */
  InboundDSField: number;
  /** u8 */
  ConformingOutboundDSField: number;
  /** u8 */
  NonConformingOutboundDSField: number;
  /** u8 */
  ConformingUserPriority: number;
  /** u8 */
  NonConformingUserPriority: number;
}

export const sizeofQOS_DIFFSERV_RULE = 8;

export function allocQOS_DIFFSERV_RULE(data?: Partial<QOS_DIFFSERV_RULE>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_DIFFSERV_RULE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.InboundDSField !== undefined) view.setUint8(0, Number(data.InboundDSField));
  // 0x01: u8
  if (data?.ConformingOutboundDSField !== undefined) view.setUint8(1, Number(data.ConformingOutboundDSField));
  // 0x02: u8
  if (data?.NonConformingOutboundDSField !== undefined) view.setUint8(2, Number(data.NonConformingOutboundDSField));
  // 0x03: u8
  if (data?.ConformingUserPriority !== undefined) view.setUint8(3, Number(data.ConformingUserPriority));
  // 0x04: u8
  if (data?.NonConformingUserPriority !== undefined) view.setUint8(4, Number(data.NonConformingUserPriority));
  // 0x05: pad3
  return buf;
}

export class QOS_DIFFSERV_RULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get InboundDSField(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get ConformingOutboundDSField(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get NonConformingOutboundDSField(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get ConformingUserPriority(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get NonConformingUserPriority(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x00: u8
  set InboundDSField(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set ConformingOutboundDSField(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set NonConformingOutboundDSField(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set ConformingUserPriority(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set NonConformingUserPriority(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_TCP_TRAFFIC (size: 8)
 */
export interface QOS_TCP_TRAFFIC {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
}

export const sizeofQOS_TCP_TRAFFIC = 8;

export function allocQOS_TCP_TRAFFIC(data?: Partial<QOS_TCP_TRAFFIC>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_TCP_TRAFFIC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  return buf;
}

export class QOS_TCP_TRAFFICView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.TCI_CLIENT_FUNC_LIST (size: 32)
 */
export interface TCI_CLIENT_FUNC_LIST {
  /** Windows.Win32.NetworkManagement.QoS.TCI_NOTIFY_HANDLER */
  ClNotifyHandler: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.TCI_ADD_FLOW_COMPLETE_HANDLER */
  ClAddFlowCompleteHandler: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.TCI_MOD_FLOW_COMPLETE_HANDLER */
  ClModifyFlowCompleteHandler: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.TCI_DEL_FLOW_COMPLETE_HANDLER */
  ClDeleteFlowCompleteHandler: Uint8Array | Deno.PointerValue;
}

export const sizeofTCI_CLIENT_FUNC_LIST = 32;

export function allocTCI_CLIENT_FUNC_LIST(data?: Partial<TCI_CLIENT_FUNC_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofTCI_CLIENT_FUNC_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClNotifyHandler !== undefined) view.setBigUint64(0, data.ClNotifyHandler === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClNotifyHandler))), true);
  // 0x08: pointer
  if (data?.ClAddFlowCompleteHandler !== undefined) view.setBigUint64(8, data.ClAddFlowCompleteHandler === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClAddFlowCompleteHandler))), true);
  // 0x10: pointer
  if (data?.ClModifyFlowCompleteHandler !== undefined) view.setBigUint64(16, data.ClModifyFlowCompleteHandler === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClModifyFlowCompleteHandler))), true);
  // 0x18: pointer
  if (data?.ClDeleteFlowCompleteHandler !== undefined) view.setBigUint64(24, data.ClDeleteFlowCompleteHandler === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClDeleteFlowCompleteHandler))), true);
  return buf;
}

export class TCI_CLIENT_FUNC_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClNotifyHandler(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ClAddFlowCompleteHandler(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ClModifyFlowCompleteHandler(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ClDeleteFlowCompleteHandler(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ClNotifyHandler(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ClAddFlowCompleteHandler(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ClModifyFlowCompleteHandler(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ClDeleteFlowCompleteHandler(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NETWORK_ADDRESS_LIST (size: 16)
 */
export interface NETWORK_ADDRESS_LIST {
  /** i32 */
  AddressCount: number;
  /** u16 */
  AddressType: number;
  /** array */
  Address: Deno.PointerValue;
}

export const sizeofNETWORK_ADDRESS_LIST = 16;

export function allocNETWORK_ADDRESS_LIST(data?: Partial<NETWORK_ADDRESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofNETWORK_ADDRESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AddressCount !== undefined) view.setInt32(0, Number(data.AddressCount), true);
  // 0x04: u16
  if (data?.AddressType !== undefined) view.setUint16(4, Number(data.AddressType), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  return buf;
}

export class NETWORK_ADDRESS_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AddressCount(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get AddressType(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set AddressCount(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set AddressType(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.ADDRESS_LIST_DESCRIPTOR (size: 16)
 */
export interface ADDRESS_LIST_DESCRIPTOR {
  /** u32 */
  MediaType: number;
  /** Windows.Win32.NetworkManagement.Ndis.NETWORK_ADDRESS_LIST */
  AddressList: Uint8Array | Deno.PointerValue;
}

export const sizeofADDRESS_LIST_DESCRIPTOR = 16;

export function allocADDRESS_LIST_DESCRIPTOR(data?: Partial<ADDRESS_LIST_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofADDRESS_LIST_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MediaType !== undefined) view.setUint32(0, Number(data.MediaType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AddressList !== undefined) view.setBigUint64(8, data.AddressList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddressList))), true);
  return buf;
}

export class ADDRESS_LIST_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MediaType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get AddressList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set MediaType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set AddressList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.NetworkManagement.QoS.TC_IFC_DESCRIPTOR (size: 32)
 */
export interface TC_IFC_DESCRIPTOR {
  /** u32 */
  Length: number;
  /** Windows.Win32.Foundation.PWSTR */
  pInterfaceName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pInterfaceID: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.QoS.ADDRESS_LIST_DESCRIPTOR */
  AddressListDesc: Uint8Array | Deno.PointerValue;
}

export const sizeofTC_IFC_DESCRIPTOR = 32;

export function allocTC_IFC_DESCRIPTOR(data?: Partial<TC_IFC_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofTC_IFC_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pInterfaceName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pInterfaceName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pInterfaceID !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pInterfaceID);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.AddressListDesc !== undefined) view.setBigUint64(24, data.AddressListDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddressListDesc))), true);
  return buf;
}

export class TC_IFC_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pInterfaceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pInterfaceID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get AddressListDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pInterfaceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pInterfaceID(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set AddressListDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.TC_SUPPORTED_INFO_BUFFER (size: 32)
 */
export interface TC_SUPPORTED_INFO_BUFFER {
  /** u16 */
  InstanceIDLength: number;
  /** array */
  InstanceID: Deno.PointerValue;
  /** u64 */
  InterfaceLuid: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.ADDRESS_LIST_DESCRIPTOR */
  AddrListDesc: Uint8Array | Deno.PointerValue;
}

export const sizeofTC_SUPPORTED_INFO_BUFFER = 32;

export function allocTC_SUPPORTED_INFO_BUFFER(data?: Partial<TC_SUPPORTED_INFO_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofTC_SUPPORTED_INFO_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.InstanceIDLength !== undefined) view.setUint16(0, Number(data.InstanceIDLength), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.InstanceID !== undefined) view.setBigUint64(8, data.InstanceID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InstanceID))), true);
  // 0x10: u64
  if (data?.InterfaceLuid !== undefined) view.setBigUint64(16, BigInt(data.InterfaceLuid), true);
  // 0x18: pointer
  if (data?.AddrListDesc !== undefined) view.setBigUint64(24, data.AddrListDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddrListDesc))), true);
  return buf;
}

export class TC_SUPPORTED_INFO_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get InstanceIDLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get InstanceID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u64
  get InterfaceLuid(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get AddrListDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set InstanceIDLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set InstanceID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u64
  set InterfaceLuid(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set AddrListDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.TC_GEN_FILTER (size: 24)
 */
export interface TC_GEN_FILTER {
  /** u16 */
  AddressType: number;
  /** u32 */
  PatternSize: number;
  /** ptr */
  Pattern: Deno.PointerValue | Uint8Array;
  /** ptr */
  Mask: Deno.PointerValue | Uint8Array;
}

export const sizeofTC_GEN_FILTER = 24;

export function allocTC_GEN_FILTER(data?: Partial<TC_GEN_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofTC_GEN_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AddressType !== undefined) view.setUint16(0, Number(data.AddressType), true);
  // 0x02: u32
  if (data?.PatternSize !== undefined) view.setUint32(2, Number(data.PatternSize), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Pattern !== undefined) view.setBigUint64(8, data.Pattern === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Pattern))), true);
  // 0x10: pointer
  if (data?.Mask !== undefined) view.setBigUint64(16, data.Mask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Mask))), true);
  return buf;
}

export class TC_GEN_FILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AddressType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get PatternSize(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get Pattern(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Mask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set AddressType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set PatternSize(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set Pattern(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Mask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinSock.FLOWSPEC (size: 32)
 */
export interface FLOWSPEC {
  /** u32 */
  TokenRate: number;
  /** u32 */
  TokenBucketSize: number;
  /** u32 */
  PeakBandwidth: number;
  /** u32 */
  Latency: number;
  /** u32 */
  DelayVariation: number;
  /** u32 */
  ServiceType: number;
  /** u32 */
  MaxSduSize: number;
  /** u32 */
  MinimumPolicedSize: number;
}

export const sizeofFLOWSPEC = 32;

export function allocFLOWSPEC(data?: Partial<FLOWSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofFLOWSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TokenRate !== undefined) view.setUint32(0, Number(data.TokenRate), true);
  // 0x04: u32
  if (data?.TokenBucketSize !== undefined) view.setUint32(4, Number(data.TokenBucketSize), true);
  // 0x08: u32
  if (data?.PeakBandwidth !== undefined) view.setUint32(8, Number(data.PeakBandwidth), true);
  // 0x0c: u32
  if (data?.Latency !== undefined) view.setUint32(12, Number(data.Latency), true);
  // 0x10: u32
  if (data?.DelayVariation !== undefined) view.setUint32(16, Number(data.DelayVariation), true);
  // 0x14: u32
  if (data?.ServiceType !== undefined) view.setUint32(20, Number(data.ServiceType), true);
  // 0x18: u32
  if (data?.MaxSduSize !== undefined) view.setUint32(24, Number(data.MaxSduSize), true);
  // 0x1c: u32
  if (data?.MinimumPolicedSize !== undefined) view.setUint32(28, Number(data.MinimumPolicedSize), true);
  return buf;
}

export class FLOWSPECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TokenRate(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TokenBucketSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PeakBandwidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Latency(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DelayVariation(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ServiceType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get MaxSduSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get MinimumPolicedSize(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set TokenRate(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TokenBucketSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PeakBandwidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Latency(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DelayVariation(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ServiceType(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set MaxSduSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set MinimumPolicedSize(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.TC_GEN_FLOW (size: 32)
 */
export interface TC_GEN_FLOW {
  /** Windows.Win32.Networking.WinSock.FLOWSPEC */
  SendingFlowspec: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.FLOWSPEC */
  ReceivingFlowspec: Uint8Array | Deno.PointerValue;
  /** u32 */
  TcObjectsLength: number;
  /** array */
  TcObjects: Deno.PointerValue;
}

export const sizeofTC_GEN_FLOW = 32;

export function allocTC_GEN_FLOW(data?: Partial<TC_GEN_FLOW>): Uint8Array {
  const buf = new Uint8Array(sizeofTC_GEN_FLOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SendingFlowspec !== undefined) view.setBigUint64(0, data.SendingFlowspec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SendingFlowspec))), true);
  // 0x08: pointer
  if (data?.ReceivingFlowspec !== undefined) view.setBigUint64(8, data.ReceivingFlowspec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReceivingFlowspec))), true);
  // 0x10: u32
  if (data?.TcObjectsLength !== undefined) view.setUint32(16, Number(data.TcObjectsLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.TcObjects !== undefined) view.setBigUint64(24, data.TcObjects === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TcObjects))), true);
  return buf;
}

export class TC_GEN_FLOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SendingFlowspec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ReceivingFlowspec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get TcObjectsLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get TcObjects(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SendingFlowspec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ReceivingFlowspec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set TcObjectsLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set TcObjects(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.IP_PATTERN (size: 40)
 */
export interface IP_PATTERN {
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** u32 */
  SrcAddr: number;
  /** u32 */
  DstAddr: number;
  /** _S_un_e__Union */
  S_un: Uint8Array | Deno.PointerValue;
  /** u8 */
  ProtocolId: number;
  /** array */
  Reserved3: Deno.PointerValue;
}

export const sizeofIP_PATTERN = 40;

export function allocIP_PATTERN(data?: Partial<IP_PATTERN>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_PATTERN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Reserved1 !== undefined) view.setUint32(0, Number(data.Reserved1), true);
  // 0x04: u32
  if (data?.Reserved2 !== undefined) view.setUint32(4, Number(data.Reserved2), true);
  // 0x08: u32
  if (data?.SrcAddr !== undefined) view.setUint32(8, Number(data.SrcAddr), true);
  // 0x0c: u32
  if (data?.DstAddr !== undefined) view.setUint32(12, Number(data.DstAddr), true);
  // 0x10: pointer
  if (data?.S_un !== undefined) view.setBigUint64(16, data.S_un === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.S_un))), true);
  // 0x18: u8
  if (data?.ProtocolId !== undefined) view.setUint8(24, Number(data.ProtocolId));
  // 0x19: pad7
  // 0x20: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(32, data.Reserved3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved3))), true);
  return buf;
}

export class IP_PATTERNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Reserved1(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved2(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SrcAddr(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DstAddr(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get S_un(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u8
  get ProtocolId(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x20: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Reserved1(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved2(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SrcAddr(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DstAddr(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set S_un(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u8
  set ProtocolId(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7

  // 0x20: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Src_e__Struct (size: 24)
 */
export interface _Src_e__Struct {
  /** u32 */
  NetworkAddress: number;
  /** array */
  NodeAddress: Deno.PointerValue;
  /** u16 */
  Socket: number;
}

export const sizeof_Src_e__Struct = 24;

export function alloc_Src_e__Struct(data?: Partial<_Src_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Src_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NetworkAddress !== undefined) view.setUint32(0, Number(data.NetworkAddress), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.NodeAddress !== undefined) view.setBigUint64(8, data.NodeAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NodeAddress))), true);
  // 0x10: u16
  if (data?.Socket !== undefined) view.setUint16(16, Number(data.Socket), true);
  // 0x12: pad6
  return buf;
}

export class _Src_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NetworkAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get NodeAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get Socket(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: u32
  set NetworkAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set NodeAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set Socket(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.NetworkManagement.QoS.IPX_PATTERN (size: 16)
 */
export interface IPX_PATTERN {
  /** _Src_e__Struct */
  Src: Uint8Array | Deno.PointerValue;
  /** _Src_e__Struct */
  Dest: Uint8Array | Deno.PointerValue;
}

export const sizeofIPX_PATTERN = 16;

export function allocIPX_PATTERN(data?: Partial<IPX_PATTERN>): Uint8Array {
  const buf = new Uint8Array(sizeofIPX_PATTERN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Src !== undefined) view.setBigUint64(0, data.Src === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Src))), true);
  // 0x08: pointer
  if (data?.Dest !== undefined) view.setBigUint64(8, data.Dest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dest))), true);
  return buf;
}

export class IPX_PATTERNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Src(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Dest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Src(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Dest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.ENUMERATION_BUFFER (size: 48)
 */
export interface ENUMERATION_BUFFER {
  /** u32 */
  Length: number;
  /** u32 */
  OwnerProcessId: number;
  /** u16 */
  FlowNameLength: number;
  /** array */
  FlowName: Deno.PointerValue;
  /** ptr */
  pFlow: Deno.PointerValue | Uint8Array;
  /** u32 */
  NumberOfFilters: number;
  /** array */
  GenericFilter: Deno.PointerValue;
}

export const sizeofENUMERATION_BUFFER = 48;

export function allocENUMERATION_BUFFER(data?: Partial<ENUMERATION_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMERATION_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.OwnerProcessId !== undefined) view.setUint32(4, Number(data.OwnerProcessId), true);
  // 0x08: u16
  if (data?.FlowNameLength !== undefined) view.setUint16(8, Number(data.FlowNameLength), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.FlowName !== undefined) view.setBigUint64(16, data.FlowName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlowName))), true);
  // 0x18: pointer
  if (data?.pFlow !== undefined) view.setBigUint64(24, data.pFlow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pFlow))), true);
  // 0x20: u32
  if (data?.NumberOfFilters !== undefined) view.setUint32(32, Number(data.NumberOfFilters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.GenericFilter !== undefined) view.setBigUint64(40, data.GenericFilter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GenericFilter))), true);
  return buf;
}

export class ENUMERATION_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OwnerProcessId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get FlowNameLength(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get FlowName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pFlow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NumberOfFilters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get GenericFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OwnerProcessId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set FlowNameLength(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set FlowName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pFlow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set NumberOfFilters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set GenericFilter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.IN_ADDR_IPV4 (size: 16)
 */
export interface IN_ADDR_IPV4 {
  /** u32 */
  Addr: number;
  /** array */
  AddrBytes: Deno.PointerValue;
}

export const sizeofIN_ADDR_IPV4 = 16;

export function allocIN_ADDR_IPV4(data?: Partial<IN_ADDR_IPV4>): Uint8Array {
  const buf = new Uint8Array(sizeofIN_ADDR_IPV4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Addr !== undefined) view.setUint32(0, Number(data.Addr), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AddrBytes !== undefined) view.setBigUint64(8, data.AddrBytes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddrBytes))), true);
  return buf;
}

export class IN_ADDR_IPV4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Addr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get AddrBytes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Addr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set AddrBytes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.IN_ADDR_IPV6 (size: 8)
 */
export interface IN_ADDR_IPV6 {
  /** array */
  Addr: Deno.PointerValue;
}

export const sizeofIN_ADDR_IPV6 = 8;

export function allocIN_ADDR_IPV6(data?: Partial<IN_ADDR_IPV6>): Uint8Array {
  const buf = new Uint8Array(sizeofIN_ADDR_IPV6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Addr !== undefined) view.setBigUint64(0, data.Addr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Addr))), true);
  return buf;
}

export class IN_ADDR_IPV6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Addr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Addr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_FILTERSPEC_V4 (size: 16)
 */
export interface RSVP_FILTERSPEC_V4 {
  /** Windows.Win32.NetworkManagement.QoS.IN_ADDR_IPV4 */
  Address: Uint8Array | Deno.PointerValue;
  /** u16 */
  Unused: number;
  /** u16 */
  Port: number;
}

export const sizeofRSVP_FILTERSPEC_V4 = 16;

export function allocRSVP_FILTERSPEC_V4(data?: Partial<RSVP_FILTERSPEC_V4>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_FILTERSPEC_V4);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x08: u16
  if (data?.Unused !== undefined) view.setUint16(8, Number(data.Unused), true);
  // 0x0a: u16
  if (data?.Port !== undefined) view.setUint16(10, Number(data.Port), true);
  // 0x0c: pad4
  return buf;
}

export class RSVP_FILTERSPEC_V4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get Unused(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get Port(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set Unused(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set Port(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_FILTERSPEC_V6 (size: 16)
 */
export interface RSVP_FILTERSPEC_V6 {
  /** Windows.Win32.NetworkManagement.QoS.IN_ADDR_IPV6 */
  Address: Uint8Array | Deno.PointerValue;
  /** u16 */
  UnUsed: number;
  /** u16 */
  Port: number;
}

export const sizeofRSVP_FILTERSPEC_V6 = 16;

export function allocRSVP_FILTERSPEC_V6(data?: Partial<RSVP_FILTERSPEC_V6>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_FILTERSPEC_V6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x08: u16
  if (data?.UnUsed !== undefined) view.setUint16(8, Number(data.UnUsed), true);
  // 0x0a: u16
  if (data?.Port !== undefined) view.setUint16(10, Number(data.Port), true);
  // 0x0c: pad4
  return buf;
}

export class RSVP_FILTERSPEC_V6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get UnUsed(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get Port(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set UnUsed(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set Port(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_FILTERSPEC_V6_FLOW (size: 24)
 */
export interface RSVP_FILTERSPEC_V6_FLOW {
  /** Windows.Win32.NetworkManagement.QoS.IN_ADDR_IPV6 */
  Address: Uint8Array | Deno.PointerValue;
  /** u8 */
  UnUsed: number;
  /** array */
  FlowLabel: Deno.PointerValue;
}

export const sizeofRSVP_FILTERSPEC_V6_FLOW = 24;

export function allocRSVP_FILTERSPEC_V6_FLOW(data?: Partial<RSVP_FILTERSPEC_V6_FLOW>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_FILTERSPEC_V6_FLOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x08: u8
  if (data?.UnUsed !== undefined) view.setUint8(8, Number(data.UnUsed));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.FlowLabel !== undefined) view.setBigUint64(16, data.FlowLabel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlowLabel))), true);
  return buf;
}

export class RSVP_FILTERSPEC_V6_FLOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get UnUsed(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get FlowLabel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set UnUsed(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set FlowLabel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_FILTERSPEC_V4_GPI (size: 16)
 */
export interface RSVP_FILTERSPEC_V4_GPI {
  /** Windows.Win32.NetworkManagement.QoS.IN_ADDR_IPV4 */
  Address: Uint8Array | Deno.PointerValue;
  /** u32 */
  GeneralPortId: number;
}

export const sizeofRSVP_FILTERSPEC_V4_GPI = 16;

export function allocRSVP_FILTERSPEC_V4_GPI(data?: Partial<RSVP_FILTERSPEC_V4_GPI>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_FILTERSPEC_V4_GPI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x08: u32
  if (data?.GeneralPortId !== undefined) view.setUint32(8, Number(data.GeneralPortId), true);
  // 0x0c: pad4
  return buf;
}

export class RSVP_FILTERSPEC_V4_GPIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get GeneralPortId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set GeneralPortId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_FILTERSPEC_V6_GPI (size: 16)
 */
export interface RSVP_FILTERSPEC_V6_GPI {
  /** Windows.Win32.NetworkManagement.QoS.IN_ADDR_IPV6 */
  Address: Uint8Array | Deno.PointerValue;
  /** u32 */
  GeneralPortId: number;
}

export const sizeofRSVP_FILTERSPEC_V6_GPI = 16;

export function allocRSVP_FILTERSPEC_V6_GPI(data?: Partial<RSVP_FILTERSPEC_V6_GPI>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_FILTERSPEC_V6_GPI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  // 0x08: u32
  if (data?.GeneralPortId !== undefined) view.setUint32(8, Number(data.GeneralPortId), true);
  // 0x0c: pad4
  return buf;
}

export class RSVP_FILTERSPEC_V6_GPIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get GeneralPortId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set GeneralPortId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_FILTERSPEC (size: 16)
 */
export interface RSVP_FILTERSPEC {
  /** Windows.Win32.NetworkManagement.QoS.FilterType */
  Type: FilterType;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofRSVP_FILTERSPEC = 16;

export function allocRSVP_FILTERSPEC(data?: Partial<RSVP_FILTERSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_FILTERSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class RSVP_FILTERSPECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.FLOWDESCRIPTOR (size: 24)
 */
export interface FLOWDESCRIPTOR {
  /** Windows.Win32.Networking.WinSock.FLOWSPEC */
  FlowSpec: Uint8Array | Deno.PointerValue;
  /** u32 */
  NumFilters: number;
  /** ptr */
  FilterList: Deno.PointerValue | Uint8Array;
}

export const sizeofFLOWDESCRIPTOR = 24;

export function allocFLOWDESCRIPTOR(data?: Partial<FLOWDESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofFLOWDESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FlowSpec !== undefined) view.setBigUint64(0, data.FlowSpec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlowSpec))), true);
  // 0x08: u32
  if (data?.NumFilters !== undefined) view.setUint32(8, Number(data.NumFilters), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FilterList !== undefined) view.setBigUint64(16, data.FilterList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FilterList))), true);
  return buf;
}

export class FLOWDESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FlowSpec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get NumFilters(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get FilterList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set FlowSpec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set NumFilters(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set FilterList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_POLICY (size: 16)
 */
export interface RSVP_POLICY {
  /** u16 */
  Len: number;
  /** u16 */
  Type: number;
  /** array */
  Info: Deno.PointerValue;
}

export const sizeofRSVP_POLICY = 16;

export function allocRSVP_POLICY(data?: Partial<RSVP_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Len !== undefined) view.setUint16(0, Number(data.Len), true);
  // 0x02: u16
  if (data?.Type !== undefined) view.setUint16(2, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Info !== undefined) view.setBigUint64(8, data.Info === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Info))), true);
  return buf;
}

export class RSVP_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Len(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Type(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Info(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Len(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Type(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Info(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_POLICY_INFO (size: 24)
 */
export interface RSVP_POLICY_INFO {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  NumPolicyElement: number;
  /** array */
  PolicyElement: Deno.PointerValue;
}

export const sizeofRSVP_POLICY_INFO = 24;

export function allocRSVP_POLICY_INFO(data?: Partial<RSVP_POLICY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_POLICY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  // 0x08: u32
  if (data?.NumPolicyElement !== undefined) view.setUint32(8, Number(data.NumPolicyElement), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.PolicyElement !== undefined) view.setBigUint64(16, data.PolicyElement === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PolicyElement))), true);
  return buf;
}

export class RSVP_POLICY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get NumPolicyElement(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get PolicyElement(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set NumPolicyElement(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set PolicyElement(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_RESERVE_INFO (size: 40)
 */
export interface RSVP_RESERVE_INFO {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  Style: number;
  /** u32 */
  ConfirmRequest: number;
  /** ptr */
  PolicyElementList: Deno.PointerValue | Uint8Array;
  /** u32 */
  NumFlowDesc: number;
  /** ptr */
  FlowDescList: Deno.PointerValue | Uint8Array;
}

export const sizeofRSVP_RESERVE_INFO = 40;

export function allocRSVP_RESERVE_INFO(data?: Partial<RSVP_RESERVE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_RESERVE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  // 0x08: u32
  if (data?.Style !== undefined) view.setUint32(8, Number(data.Style), true);
  // 0x0c: u32
  if (data?.ConfirmRequest !== undefined) view.setUint32(12, Number(data.ConfirmRequest), true);
  // 0x10: pointer
  if (data?.PolicyElementList !== undefined) view.setBigUint64(16, data.PolicyElementList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PolicyElementList))), true);
  // 0x18: u32
  if (data?.NumFlowDesc !== undefined) view.setUint32(24, Number(data.NumFlowDesc), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FlowDescList !== undefined) view.setBigUint64(32, data.FlowDescList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlowDescList))), true);
  return buf;
}

export class RSVP_RESERVE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Style(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ConfirmRequest(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get PolicyElementList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get NumFlowDesc(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get FlowDescList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Style(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ConfirmRequest(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set PolicyElementList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set NumFlowDesc(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set FlowDescList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_STATUS_INFO (size: 24)
 */
export interface RSVP_STATUS_INFO {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  StatusCode: number;
  /** u32 */
  ExtendedStatus1: number;
  /** u32 */
  ExtendedStatus2: number;
}

export const sizeofRSVP_STATUS_INFO = 24;

export function allocRSVP_STATUS_INFO(data?: Partial<RSVP_STATUS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_STATUS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  // 0x08: u32
  if (data?.StatusCode !== undefined) view.setUint32(8, Number(data.StatusCode), true);
  // 0x0c: u32
  if (data?.ExtendedStatus1 !== undefined) view.setUint32(12, Number(data.ExtendedStatus1), true);
  // 0x10: u32
  if (data?.ExtendedStatus2 !== undefined) view.setUint32(16, Number(data.ExtendedStatus2), true);
  // 0x14: pad4
  return buf;
}

export class RSVP_STATUS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get StatusCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ExtendedStatus1(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ExtendedStatus2(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set StatusCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ExtendedStatus1(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ExtendedStatus2(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS_DESTADDR (size: 24)
 */
export interface QOS_DESTADDR {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  SocketAddress: Deno.PointerValue | Uint8Array;
  /** u32 */
  SocketAddressLength: number;
}

export const sizeofQOS_DESTADDR = 24;

export function allocQOS_DESTADDR(data?: Partial<QOS_DESTADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS_DESTADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  // 0x08: pointer
  if (data?.SocketAddress !== undefined) view.setBigUint64(8, data.SocketAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SocketAddress))), true);
  // 0x10: u32
  if (data?.SocketAddressLength !== undefined) view.setUint32(16, Number(data.SocketAddressLength), true);
  // 0x14: pad4
  return buf;
}

export class QOS_DESTADDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get SocketAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get SocketAddressLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set SocketAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set SocketAddressLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.AD_GENERAL_PARAMS (size: 24)
 */
export interface AD_GENERAL_PARAMS {
  /** u32 */
  IntServAwareHopCount: number;
  /** u32 */
  PathBandwidthEstimate: number;
  /** u32 */
  MinimumLatency: number;
  /** u32 */
  PathMTU: number;
  /** u32 */
  Flags: number;
}

export const sizeofAD_GENERAL_PARAMS = 24;

export function allocAD_GENERAL_PARAMS(data?: Partial<AD_GENERAL_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAD_GENERAL_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IntServAwareHopCount !== undefined) view.setUint32(0, Number(data.IntServAwareHopCount), true);
  // 0x04: u32
  if (data?.PathBandwidthEstimate !== undefined) view.setUint32(4, Number(data.PathBandwidthEstimate), true);
  // 0x08: u32
  if (data?.MinimumLatency !== undefined) view.setUint32(8, Number(data.MinimumLatency), true);
  // 0x0c: u32
  if (data?.PathMTU !== undefined) view.setUint32(12, Number(data.PathMTU), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

export class AD_GENERAL_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get IntServAwareHopCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PathBandwidthEstimate(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MinimumLatency(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PathMTU(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set IntServAwareHopCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PathBandwidthEstimate(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MinimumLatency(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PathMTU(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.QoS.AD_GUARANTEED (size: 16)
 */
export interface AD_GUARANTEED {
  /** u32 */
  CTotal: number;
  /** u32 */
  DTotal: number;
  /** u32 */
  CSum: number;
  /** u32 */
  DSum: number;
}

export const sizeofAD_GUARANTEED = 16;

export function allocAD_GUARANTEED(data?: Partial<AD_GUARANTEED>): Uint8Array {
  const buf = new Uint8Array(sizeofAD_GUARANTEED);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CTotal !== undefined) view.setUint32(0, Number(data.CTotal), true);
  // 0x04: u32
  if (data?.DTotal !== undefined) view.setUint32(4, Number(data.DTotal), true);
  // 0x08: u32
  if (data?.CSum !== undefined) view.setUint32(8, Number(data.CSum), true);
  // 0x0c: u32
  if (data?.DSum !== undefined) view.setUint32(12, Number(data.DSum), true);
  return buf;
}

export class AD_GUARANTEEDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CTotal(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DTotal(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CSum(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DSum(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set CTotal(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DTotal(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CSum(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DSum(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.PARAM_BUFFER (size: 16)
 */
export interface PARAM_BUFFER {
  /** u32 */
  ParameterId: number;
  /** u32 */
  Length: number;
  /** array */
  Buffer: Deno.PointerValue;
}

export const sizeofPARAM_BUFFER = 16;

export function allocPARAM_BUFFER(data?: Partial<PARAM_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofPARAM_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ParameterId !== undefined) view.setUint32(0, Number(data.ParameterId), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Buffer))), true);
  return buf;
}

export class PARAM_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ParameterId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ParameterId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.CONTROL_SERVICE (size: 24)
 */
export interface CONTROL_SERVICE {
  /** u32 */
  Length: number;
  /** u32 */
  Service: number;
  /** Windows.Win32.NetworkManagement.QoS.AD_GENERAL_PARAMS */
  Overrides: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofCONTROL_SERVICE = 24;

export function allocCONTROL_SERVICE(data?: Partial<CONTROL_SERVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTROL_SERVICE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.Service !== undefined) view.setUint32(4, Number(data.Service), true);
  // 0x08: pointer
  if (data?.Overrides !== undefined) view.setBigUint64(8, data.Overrides === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Overrides))), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class CONTROL_SERVICEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Service(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Overrides(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Service(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Overrides(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.RSVP_ADSPEC (size: 32)
 */
export interface RSVP_ADSPEC {
  /** Windows.Win32.NetworkManagement.QoS.QOS_OBJECT_HDR */
  ObjectHdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.QoS.AD_GENERAL_PARAMS */
  GeneralParams: Uint8Array | Deno.PointerValue;
  /** u32 */
  NumberOfServices: number;
  /** array */
  Services: Deno.PointerValue;
}

export const sizeofRSVP_ADSPEC = 32;

export function allocRSVP_ADSPEC(data?: Partial<RSVP_ADSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofRSVP_ADSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectHdr !== undefined) view.setBigUint64(0, data.ObjectHdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectHdr))), true);
  // 0x08: pointer
  if (data?.GeneralParams !== undefined) view.setBigUint64(8, data.GeneralParams === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GeneralParams))), true);
  // 0x10: u32
  if (data?.NumberOfServices !== undefined) view.setUint32(16, Number(data.NumberOfServices), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Services !== undefined) view.setBigUint64(24, data.Services === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Services))), true);
  return buf;
}

export class RSVP_ADSPECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectHdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get GeneralParams(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get NumberOfServices(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Services(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ObjectHdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set GeneralParams(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set NumberOfServices(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Services(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.IDPE_ATTR (size: 16)
 */
export interface IDPE_ATTR {
  /** u16 */
  PeAttribLength: number;
  /** u8 */
  PeAttribType: number;
  /** u8 */
  PeAttribSubType: number;
  /** array */
  PeAttribValue: Deno.PointerValue;
}

export const sizeofIDPE_ATTR = 16;

export function allocIDPE_ATTR(data?: Partial<IDPE_ATTR>): Uint8Array {
  const buf = new Uint8Array(sizeofIDPE_ATTR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.PeAttribLength !== undefined) view.setUint16(0, Number(data.PeAttribLength), true);
  // 0x02: u8
  if (data?.PeAttribType !== undefined) view.setUint8(2, Number(data.PeAttribType));
  // 0x03: u8
  if (data?.PeAttribSubType !== undefined) view.setUint8(3, Number(data.PeAttribSubType));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PeAttribValue !== undefined) view.setBigUint64(8, data.PeAttribValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeAttribValue))), true);
  return buf;
}

export class IDPE_ATTRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get PeAttribLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get PeAttribType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get PeAttribSubType(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PeAttribValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set PeAttribLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set PeAttribType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set PeAttribSubType(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PeAttribValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.WBCL_Iterator (size: 56)
 */
export interface WBCL_Iterator {
  /** ptr */
  firstElementPtr: Deno.PointerValue | Uint8Array;
  /** u32 */
  logSize: number;
  /** ptr */
  currentElementPtr: Deno.PointerValue | Uint8Array;
  /** u32 */
  currentElementSize: number;
  /** u16 */
  digestSize: number;
  /** u16 */
  logFormat: number;
  /** u32 */
  numberOfDigests: number;
  /** ptr */
  digestSizes: Deno.PointerValue | Uint8Array;
  /** u32 */
  supportedAlgorithms: number;
  /** u16 */
  hashAlgorithm: number;
}

export const sizeofWBCL_Iterator = 56;

export function allocWBCL_Iterator(data?: Partial<WBCL_Iterator>): Uint8Array {
  const buf = new Uint8Array(sizeofWBCL_Iterator);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.firstElementPtr !== undefined) view.setBigUint64(0, data.firstElementPtr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.firstElementPtr))), true);
  // 0x08: u32
  if (data?.logSize !== undefined) view.setUint32(8, Number(data.logSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.currentElementPtr !== undefined) view.setBigUint64(16, data.currentElementPtr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.currentElementPtr))), true);
  // 0x18: u32
  if (data?.currentElementSize !== undefined) view.setUint32(24, Number(data.currentElementSize), true);
  // 0x1c: u16
  if (data?.digestSize !== undefined) view.setUint16(28, Number(data.digestSize), true);
  // 0x1e: u16
  if (data?.logFormat !== undefined) view.setUint16(30, Number(data.logFormat), true);
  // 0x20: u32
  if (data?.numberOfDigests !== undefined) view.setUint32(32, Number(data.numberOfDigests), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.digestSizes !== undefined) view.setBigUint64(40, data.digestSizes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.digestSizes))), true);
  // 0x30: u32
  if (data?.supportedAlgorithms !== undefined) view.setUint32(48, Number(data.supportedAlgorithms), true);
  // 0x34: u16
  if (data?.hashAlgorithm !== undefined) view.setUint16(52, Number(data.hashAlgorithm), true);
  // 0x36: pad2
  return buf;
}

export class WBCL_IteratorView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get firstElementPtr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get logSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get currentElementPtr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get currentElementSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u16
  get digestSize(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: u16
  get logFormat(): number {
    return this.view.getUint16(30, true);
  }

  // 0x20: u32
  get numberOfDigests(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get digestSizes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get supportedAlgorithms(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u16
  get hashAlgorithm(): number {
    return this.view.getUint16(52, true);
  }

  // 0x36: pad2

  // 0x00: pointer
  set firstElementPtr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set logSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set currentElementPtr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set currentElementSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u16
  set digestSize(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: u16
  set logFormat(value: number) {
    this.view.setUint16(30, value, true);
  }

  // 0x20: u32
  set numberOfDigests(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set digestSizes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set supportedAlgorithms(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u16
  set hashAlgorithm(value: number) {
    this.view.setUint16(52, value, true);
  }

  // 0x36: pad2
}

/**
 * Windows.Win32.NetworkManagement.QoS.TCG_PCClientPCREventStruct (size: 32)
 */
export interface TCG_PCClientPCREventStruct {
  /** u32 */
  pcrIndex: number;
  /** u32 */
  eventType: number;
  /** array */
  digest: Deno.PointerValue;
  /** u32 */
  eventDataSize: number;
  /** array */
  event: Deno.PointerValue;
}

export const sizeofTCG_PCClientPCREventStruct = 32;

export function allocTCG_PCClientPCREventStruct(data?: Partial<TCG_PCClientPCREventStruct>): Uint8Array {
  const buf = new Uint8Array(sizeofTCG_PCClientPCREventStruct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.pcrIndex !== undefined) view.setUint32(0, Number(data.pcrIndex), true);
  // 0x04: u32
  if (data?.eventType !== undefined) view.setUint32(4, Number(data.eventType), true);
  // 0x08: pointer
  if (data?.digest !== undefined) view.setBigUint64(8, data.digest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.digest))), true);
  // 0x10: u32
  if (data?.eventDataSize !== undefined) view.setUint32(16, Number(data.eventDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.event !== undefined) view.setBigUint64(24, data.event === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.event))), true);
  return buf;
}

export class TCG_PCClientPCREventStructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get pcrIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get eventType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get digest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get eventDataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get event(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set pcrIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set eventType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set digest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set eventDataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set event(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.TCG_PCClientTaggedEventStruct (size: 16)
 */
export interface TCG_PCClientTaggedEventStruct {
  /** u32 */
  EventID: number;
  /** u32 */
  EventDataSize: number;
  /** array */
  EventData: Deno.PointerValue;
}

export const sizeofTCG_PCClientTaggedEventStruct = 16;

export function allocTCG_PCClientTaggedEventStruct(data?: Partial<TCG_PCClientTaggedEventStruct>): Uint8Array {
  const buf = new Uint8Array(sizeofTCG_PCClientTaggedEventStruct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EventID !== undefined) view.setUint32(0, Number(data.EventID), true);
  // 0x04: u32
  if (data?.EventDataSize !== undefined) view.setUint32(4, Number(data.EventDataSize), true);
  // 0x08: pointer
  if (data?.EventData !== undefined) view.setBigUint64(8, data.EventData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EventData))), true);
  return buf;
}

export class TCG_PCClientTaggedEventStructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EventID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get EventDataSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get EventData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set EventID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set EventDataSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set EventData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.WBCL_LogHdr (size: 16)
 */
export interface WBCL_LogHdr {
  /** u32 */
  signature: number;
  /** u32 */
  version: number;
  /** u32 */
  entries: number;
  /** u32 */
  length: number;
}

export const sizeofWBCL_LogHdr = 16;

export function allocWBCL_LogHdr(data?: Partial<WBCL_LogHdr>): Uint8Array {
  const buf = new Uint8Array(sizeofWBCL_LogHdr);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.signature !== undefined) view.setUint32(0, Number(data.signature), true);
  // 0x04: u32
  if (data?.version !== undefined) view.setUint32(4, Number(data.version), true);
  // 0x08: u32
  if (data?.entries !== undefined) view.setUint32(8, Number(data.entries), true);
  // 0x0c: u32
  if (data?.length !== undefined) view.setUint32(12, Number(data.length), true);
  return buf;
}

export class WBCL_LogHdrView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get signature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get entries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get length(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set signature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set entries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set length(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.SIPAEVENT_VSM_IDK_RSA_INFO (size: 24)
 */
export interface SIPAEVENT_VSM_IDK_RSA_INFO {
  /** u32 */
  KeyBitLength: number;
  /** u32 */
  PublicExpLengthBytes: number;
  /** u32 */
  ModulusSizeBytes: number;
  /** array */
  PublicKeyData: Deno.PointerValue;
}

export const sizeofSIPAEVENT_VSM_IDK_RSA_INFO = 24;

export function allocSIPAEVENT_VSM_IDK_RSA_INFO(data?: Partial<SIPAEVENT_VSM_IDK_RSA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSIPAEVENT_VSM_IDK_RSA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.KeyBitLength !== undefined) view.setUint32(0, Number(data.KeyBitLength), true);
  // 0x04: u32
  if (data?.PublicExpLengthBytes !== undefined) view.setUint32(4, Number(data.PublicExpLengthBytes), true);
  // 0x08: u32
  if (data?.ModulusSizeBytes !== undefined) view.setUint32(8, Number(data.ModulusSizeBytes), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.PublicKeyData !== undefined) view.setBigUint64(16, data.PublicKeyData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PublicKeyData))), true);
  return buf;
}

export class SIPAEVENT_VSM_IDK_RSA_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get KeyBitLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PublicExpLengthBytes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ModulusSizeBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get PublicKeyData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set KeyBitLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PublicExpLengthBytes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ModulusSizeBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set PublicKeyData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.SIPAEVENT_VSM_IDK_INFO_PAYLOAD (size: 16)
 */
export interface SIPAEVENT_VSM_IDK_INFO_PAYLOAD {
  /** u32 */
  KeyAlgID: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofSIPAEVENT_VSM_IDK_INFO_PAYLOAD = 16;

export function allocSIPAEVENT_VSM_IDK_INFO_PAYLOAD(data?: Partial<SIPAEVENT_VSM_IDK_INFO_PAYLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofSIPAEVENT_VSM_IDK_INFO_PAYLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.KeyAlgID !== undefined) view.setUint32(0, Number(data.KeyAlgID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class SIPAEVENT_VSM_IDK_INFO_PAYLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get KeyAlgID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set KeyAlgID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.SIPAEVENT_SI_POLICY_PAYLOAD (size: 24)
 */
export interface SIPAEVENT_SI_POLICY_PAYLOAD {
  /** u64 */
  PolicyVersion: Deno.PointerValue;
  /** u16 */
  PolicyNameLength: number;
  /** u16 */
  HashAlgID: number;
  /** u32 */
  DigestLength: number;
  /** array */
  VarLengthData: Deno.PointerValue;
}

export const sizeofSIPAEVENT_SI_POLICY_PAYLOAD = 24;

export function allocSIPAEVENT_SI_POLICY_PAYLOAD(data?: Partial<SIPAEVENT_SI_POLICY_PAYLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofSIPAEVENT_SI_POLICY_PAYLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PolicyVersion !== undefined) view.setBigUint64(0, BigInt(data.PolicyVersion), true);
  // 0x08: u16
  if (data?.PolicyNameLength !== undefined) view.setUint16(8, Number(data.PolicyNameLength), true);
  // 0x0a: u16
  if (data?.HashAlgID !== undefined) view.setUint16(10, Number(data.HashAlgID), true);
  // 0x0c: u32
  if (data?.DigestLength !== undefined) view.setUint32(12, Number(data.DigestLength), true);
  // 0x10: pointer
  if (data?.VarLengthData !== undefined) view.setBigUint64(16, data.VarLengthData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VarLengthData))), true);
  return buf;
}

export class SIPAEVENT_SI_POLICY_PAYLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get PolicyVersion(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u16
  get PolicyNameLength(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get HashAlgID(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get DigestLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get VarLengthData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set PolicyVersion(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u16
  set PolicyNameLength(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set HashAlgID(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set DigestLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set VarLengthData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.SIPAEVENT_REVOCATION_LIST_PAYLOAD (size: 24)
 */
export interface SIPAEVENT_REVOCATION_LIST_PAYLOAD {
  /** i64 */
  CreationTime: Deno.PointerValue;
  /** u32 */
  DigestLength: number;
  /** u16 */
  HashAlgID: number;
  /** array */
  Digest: Deno.PointerValue;
}

export const sizeofSIPAEVENT_REVOCATION_LIST_PAYLOAD = 24;

export function allocSIPAEVENT_REVOCATION_LIST_PAYLOAD(data?: Partial<SIPAEVENT_REVOCATION_LIST_PAYLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofSIPAEVENT_REVOCATION_LIST_PAYLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.CreationTime !== undefined) view.setBigInt64(0, BigInt(data.CreationTime), true);
  // 0x08: u32
  if (data?.DigestLength !== undefined) view.setUint32(8, Number(data.DigestLength), true);
  // 0x0c: u16
  if (data?.HashAlgID !== undefined) view.setUint16(12, Number(data.HashAlgID), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Digest !== undefined) view.setBigUint64(16, data.Digest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Digest))), true);
  return buf;
}

export class SIPAEVENT_REVOCATION_LIST_PAYLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get CreationTime(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: u32
  get DigestLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get HashAlgID(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  get Digest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i64
  set CreationTime(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: u32
  set DigestLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set HashAlgID(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  set Digest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.SIPAEVENT_KSR_SIGNATURE_PAYLOAD (size: 16)
 */
export interface SIPAEVENT_KSR_SIGNATURE_PAYLOAD {
  /** u32 */
  SignAlgID: number;
  /** u32 */
  SignatureLength: number;
  /** array */
  Signature: Deno.PointerValue;
}

export const sizeofSIPAEVENT_KSR_SIGNATURE_PAYLOAD = 16;

export function allocSIPAEVENT_KSR_SIGNATURE_PAYLOAD(data?: Partial<SIPAEVENT_KSR_SIGNATURE_PAYLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofSIPAEVENT_KSR_SIGNATURE_PAYLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SignAlgID !== undefined) view.setUint32(0, Number(data.SignAlgID), true);
  // 0x04: u32
  if (data?.SignatureLength !== undefined) view.setUint32(4, Number(data.SignatureLength), true);
  // 0x08: pointer
  if (data?.Signature !== undefined) view.setBigUint64(8, data.Signature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Signature))), true);
  return buf;
}

export class SIPAEVENT_KSR_SIGNATURE_PAYLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SignAlgID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SignatureLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Signature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set SignAlgID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SignatureLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Signature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.QoS.SIPAEVENT_SBCP_INFO_PAYLOAD_V1 (size: 32)
 */
export interface SIPAEVENT_SBCP_INFO_PAYLOAD_V1 {
  /** u32 */
  PayloadVersion: number;
  /** u32 */
  VarDataOffset: number;
  /** u16 */
  HashAlgID: number;
  /** u16 */
  DigestLength: number;
  /** u32 */
  Options: number;
  /** u32 */
  SignersCount: number;
  /** array */
  VarData: Deno.PointerValue;
}

export const sizeofSIPAEVENT_SBCP_INFO_PAYLOAD_V1 = 32;

export function allocSIPAEVENT_SBCP_INFO_PAYLOAD_V1(data?: Partial<SIPAEVENT_SBCP_INFO_PAYLOAD_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofSIPAEVENT_SBCP_INFO_PAYLOAD_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadVersion !== undefined) view.setUint32(0, Number(data.PayloadVersion), true);
  // 0x04: u32
  if (data?.VarDataOffset !== undefined) view.setUint32(4, Number(data.VarDataOffset), true);
  // 0x08: u16
  if (data?.HashAlgID !== undefined) view.setUint16(8, Number(data.HashAlgID), true);
  // 0x0a: u16
  if (data?.DigestLength !== undefined) view.setUint16(10, Number(data.DigestLength), true);
  // 0x0c: u32
  if (data?.Options !== undefined) view.setUint32(12, Number(data.Options), true);
  // 0x10: u32
  if (data?.SignersCount !== undefined) view.setUint32(16, Number(data.SignersCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.VarData !== undefined) view.setBigUint64(24, data.VarData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VarData))), true);
  return buf;
}

export class SIPAEVENT_SBCP_INFO_PAYLOAD_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PayloadVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get VarDataOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get HashAlgID(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get DigestLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get Options(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SignersCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get VarData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set PayloadVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set VarDataOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set HashAlgID(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set DigestLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set Options(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SignersCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set VarData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HANDLE = Deno.PointerValue;

export type SOCKET = Deno.PointerValue;

export type PSTR = Deno.PointerValue | Uint8Array;

export type BOOLEAN = number;

// Native Libraries

try {
  var libqwave_dll = Deno.dlopen("qwave.dll", {
    QOSCreateHandle: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    QOSCloseHandle: {
      parameters: ["pointer"],
      result: "i32",
    },
    QOSStartTrackingClient: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    QOSStopTrackingClient: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    QOSEnumerateFlows: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    QOSAddSocketToFlow: {
      parameters: ["pointer", "pointer", "pointer", "i32", "u32", "pointer"],
      result: "i32",
    },
    QOSRemoveSocketFromFlow: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    QOSSetFlow: {
      parameters: ["pointer", "u32", "i32", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    QOSQueryFlow: {
      parameters: ["pointer", "u32", "i32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    QOSNotifyFlow: {
      parameters: ["pointer", "u32", "i32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    QOSCancel: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libTRAFFIC_dll = Deno.dlopen("TRAFFIC.dll", {
    TcRegisterClient: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    TcEnumerateInterfaces: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    TcOpenInterfaceA: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    TcOpenInterfaceW: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    TcCloseInterface: {
      parameters: ["pointer"],
      result: "u32",
    },
    TcQueryInterface: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    TcSetInterface: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    TcQueryFlowA: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    TcQueryFlowW: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    TcSetFlowA: {
      parameters: ["buffer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    TcSetFlowW: {
      parameters: ["buffer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    TcAddFlow: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    TcGetFlowNameA: {
      parameters: ["pointer", "u32", "buffer"],
      result: "u32",
    },
    TcGetFlowNameW: {
      parameters: ["pointer", "u32", "buffer"],
      result: "u32",
    },
    TcModifyFlow: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    TcAddFilter: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    TcDeregisterClient: {
      parameters: ["pointer"],
      result: "u32",
    },
    TcDeleteFlow: {
      parameters: ["pointer"],
      result: "u32",
    },
    TcDeleteFilter: {
      parameters: ["pointer"],
      result: "u32",
    },
    TcEnumerateFlows: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function QOSCreateHandle(
  Version: Deno.PointerValue | Uint8Array /* ptr */,
  QOSHandle: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libqwave_dll.QOSCreateHandle(util.toPointer(Version), util.toPointer(QOSHandle)));
}

export function QOSCloseHandle(
  QOSHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libqwave_dll.QOSCloseHandle(util.toPointer(QOSHandle)));
}

export function QOSStartTrackingClient(
  QOSHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  DestAddr: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libqwave_dll.QOSStartTrackingClient(util.toPointer(QOSHandle), util.toPointer(DestAddr), Flags));
}

export function QOSStopTrackingClient(
  QOSHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  DestAddr: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libqwave_dll.QOSStopTrackingClient(util.toPointer(QOSHandle), util.toPointer(DestAddr), Flags));
}

export function QOSEnumerateFlows(
  QOSHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Size: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libqwave_dll.QOSEnumerateFlows(util.toPointer(QOSHandle), util.toPointer(Size), util.toPointer(Buffer)));
}

export function QOSAddSocketToFlow(
  QOSHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Socket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WinSock.SOCKET */,
  DestAddr: Deno.PointerValue | Uint8Array /* ptr */,
  TrafficType: QOS_TRAFFIC_TYPE /* Windows.Win32.NetworkManagement.QoS.QOS_TRAFFIC_TYPE */,
  Flags: number /* u32 */,
  FlowId: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libqwave_dll.QOSAddSocketToFlow(util.toPointer(QOSHandle), util.toPointer(Socket), util.toPointer(DestAddr), TrafficType, Flags, util.toPointer(FlowId)));
}

export function QOSRemoveSocketFromFlow(
  QOSHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Socket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WinSock.SOCKET */,
  FlowId: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libqwave_dll.QOSRemoveSocketFromFlow(util.toPointer(QOSHandle), util.toPointer(Socket), FlowId, Flags));
}

export function QOSSetFlow(
  QOSHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  FlowId: number /* u32 */,
  Operation: QOS_SET_FLOW /* Windows.Win32.NetworkManagement.QoS.QOS_SET_FLOW */,
  Size: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libqwave_dll.QOSSetFlow(util.toPointer(QOSHandle), FlowId, Operation, Size, util.toPointer(Buffer), Flags, util.toPointer(Overlapped)));
}

export function QOSQueryFlow(
  QOSHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  FlowId: number /* u32 */,
  Operation: QOS_QUERY_FLOW /* Windows.Win32.NetworkManagement.QoS.QOS_QUERY_FLOW */,
  Size: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libqwave_dll.QOSQueryFlow(util.toPointer(QOSHandle), FlowId, Operation, util.toPointer(Size), util.toPointer(Buffer), Flags, util.toPointer(Overlapped)));
}

export function QOSNotifyFlow(
  QOSHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  FlowId: number /* u32 */,
  Operation: QOS_NOTIFY_FLOW /* Windows.Win32.NetworkManagement.QoS.QOS_NOTIFY_FLOW */,
  Size: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libqwave_dll.QOSNotifyFlow(util.toPointer(QOSHandle), FlowId, Operation, util.toPointer(Size), util.toPointer(Buffer), Flags, util.toPointer(Overlapped)));
}

export function QOSCancel(
  QOSHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Overlapped: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libqwave_dll.QOSCancel(util.toPointer(QOSHandle), util.toPointer(Overlapped)));
}

export function TcRegisterClient(
  TciVersion: number /* u32 */,
  ClRegCtx: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ClientHandlerList: Deno.PointerValue | Uint8Array /* ptr */,
  pClientHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcRegisterClient(TciVersion, util.toPointer(ClRegCtx), util.toPointer(ClientHandlerList), util.toPointer(pClientHandle));
}

export function TcEnumerateInterfaces(
  ClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  InterfaceBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcEnumerateInterfaces(util.toPointer(ClientHandle), util.toPointer(pBufferSize), util.toPointer(InterfaceBuffer));
}

export function TcOpenInterfaceA(
  pInterfaceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ClIfcCtx: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pIfcHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcOpenInterfaceA(util.pstrToFfi(pInterfaceName), util.toPointer(ClientHandle), util.toPointer(ClIfcCtx), util.toPointer(pIfcHandle));
}

export function TcOpenInterfaceW(
  pInterfaceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ClIfcCtx: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pIfcHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcOpenInterfaceW(util.pwstrToFfi(pInterfaceName), util.toPointer(ClientHandle), util.toPointer(ClIfcCtx), util.toPointer(pIfcHandle));
}

export function TcCloseInterface(
  IfcHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcCloseInterface(util.toPointer(IfcHandle));
}

export function TcQueryInterface(
  IfcHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pGuidParam: Deno.PointerValue | Uint8Array /* ptr */,
  NotifyChange: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  pBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcQueryInterface(util.toPointer(IfcHandle), util.toPointer(pGuidParam), util.toPointer(NotifyChange), util.toPointer(pBufferSize), util.toPointer(Buffer));
}

export function TcSetInterface(
  IfcHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pGuidParam: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcSetInterface(util.toPointer(IfcHandle), util.toPointer(pGuidParam), BufferSize, util.toPointer(Buffer));
}

export function TcQueryFlowA(
  pFlowName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pGuidParam: Deno.PointerValue | Uint8Array /* ptr */,
  pBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcQueryFlowA(util.pstrToFfi(pFlowName), util.toPointer(pGuidParam), util.toPointer(pBufferSize), util.toPointer(Buffer));
}

export function TcQueryFlowW(
  pFlowName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pGuidParam: Deno.PointerValue | Uint8Array /* ptr */,
  pBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcQueryFlowW(util.pwstrToFfi(pFlowName), util.toPointer(pGuidParam), util.toPointer(pBufferSize), util.toPointer(Buffer));
}

export function TcSetFlowA(
  pFlowName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pGuidParam: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcSetFlowA(util.pstrToFfi(pFlowName), util.toPointer(pGuidParam), BufferSize, util.toPointer(Buffer));
}

export function TcSetFlowW(
  pFlowName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pGuidParam: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcSetFlowW(util.pwstrToFfi(pFlowName), util.toPointer(pGuidParam), BufferSize, util.toPointer(Buffer));
}

export function TcAddFlow(
  IfcHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ClFlowCtx: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
  pGenericFlow: Deno.PointerValue | Uint8Array /* ptr */,
  pFlowHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcAddFlow(util.toPointer(IfcHandle), util.toPointer(ClFlowCtx), Flags, util.toPointer(pGenericFlow), util.toPointer(pFlowHandle));
}

export function TcGetFlowNameA(
  FlowHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  StrSize: number /* u32 */,
  pFlowName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcGetFlowNameA(util.toPointer(FlowHandle), StrSize, util.pstrToFfi(pFlowName));
}

export function TcGetFlowNameW(
  FlowHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  StrSize: number /* u32 */,
  pFlowName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcGetFlowNameW(util.toPointer(FlowHandle), StrSize, util.pwstrToFfi(pFlowName));
}

export function TcModifyFlow(
  FlowHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pGenericFlow: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcModifyFlow(util.toPointer(FlowHandle), util.toPointer(pGenericFlow));
}

export function TcAddFilter(
  FlowHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pGenericFilter: Deno.PointerValue | Uint8Array /* ptr */,
  pFilterHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcAddFilter(util.toPointer(FlowHandle), util.toPointer(pGenericFilter), util.toPointer(pFilterHandle));
}

export function TcDeregisterClient(
  ClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcDeregisterClient(util.toPointer(ClientHandle));
}

export function TcDeleteFlow(
  FlowHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcDeleteFlow(util.toPointer(FlowHandle));
}

export function TcDeleteFilter(
  FilterHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcDeleteFilter(util.toPointer(FilterHandle));
}

export function TcEnumerateFlows(
  IfcHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pEnumHandle: Deno.PointerValue | Uint8Array /* ptr */,
  pFlowCount: Deno.PointerValue | Uint8Array /* ptr */,
  pBufSize: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libTRAFFIC_dll.TcEnumerateFlows(util.toPointer(IfcHandle), util.toPointer(pEnumHandle), util.toPointer(pFlowCount), util.toPointer(pBufSize), util.toPointer(Buffer));
}

