/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.Snmp.Apis

import * as util from "../../util.ts";

// Enums
export type SNMP_PDU_TYPE = number;
export type SNMP_EXTENSION_REQUEST_TYPE = number;
export type SNMP_API_TRANSLATE_MODE = number;
export type SNMP_GENERICTRAP = number;
export type SNMP_ERROR_STATUS = number;
export type SNMP_STATUS = number;
export type SNMP_OUTPUT_LOG_TYPE = number;
export type SNMP_LOG = number;
export type SNMP_ERROR = number;

// Constants
export const SNMP_PDU_GET = 160;
export const SNMP_PDU_GETNEXT = 161;
export const SNMP_PDU_RESPONSE = 162;
export const SNMP_PDU_SET = 163;
export const SNMP_PDU_GETBULK = 165;
export const SNMP_PDU_TRAP = 167;
export const SNMP_EXTENSION_GET = 160;
export const SNMP_EXTENSION_GET_NEXT = 161;
export const SNMP_EXTENSION_SET_TEST = 224;
export const SNMP_EXTENSION_SET_COMMIT = 163;
export const SNMP_EXTENSION_SET_UNDO = 225;
export const SNMP_EXTENSION_SET_CLEANUP = 226;
export const SNMPAPI_TRANSLATED = 0;
export const SNMPAPI_UNTRANSLATED_V1 = 1;
export const SNMPAPI_UNTRANSLATED_V2 = 2;
export const SNMP_GENERICTRAP_COLDSTART = 0;
export const SNMP_GENERICTRAP_WARMSTART = 1;
export const SNMP_GENERICTRAP_LINKDOWN = 2;
export const SNMP_GENERICTRAP_LINKUP = 3;
export const SNMP_GENERICTRAP_AUTHFAILURE = 4;
export const SNMP_GENERICTRAP_EGPNEIGHLOSS = 5;
export const SNMP_GENERICTRAP_ENTERSPECIFIC = 6;
export const SNMP_ERRORSTATUS_NOERROR = 0;
export const SNMP_ERRORSTATUS_TOOBIG = 1;
export const SNMP_ERRORSTATUS_NOSUCHNAME = 2;
export const SNMP_ERRORSTATUS_BADVALUE = 3;
export const SNMP_ERRORSTATUS_READONLY = 4;
export const SNMP_ERRORSTATUS_GENERR = 5;
export const SNMP_ERRORSTATUS_NOACCESS = 6;
export const SNMP_ERRORSTATUS_WRONGTYPE = 7;
export const SNMP_ERRORSTATUS_WRONGLENGTH = 8;
export const SNMP_ERRORSTATUS_WRONGENCODING = 9;
export const SNMP_ERRORSTATUS_WRONGVALUE = 10;
export const SNMP_ERRORSTATUS_NOCREATION = 11;
export const SNMP_ERRORSTATUS_INCONSISTENTVALUE = 12;
export const SNMP_ERRORSTATUS_RESOURCEUNAVAILABLE = 13;
export const SNMP_ERRORSTATUS_COMMITFAILED = 14;
export const SNMP_ERRORSTATUS_UNDOFAILED = 15;
export const SNMP_ERRORSTATUS_AUTHORIZATIONERROR = 16;
export const SNMP_ERRORSTATUS_NOTWRITABLE = 17;
export const SNMP_ERRORSTATUS_INCONSISTENTNAME = 18;
export const SNMPAPI_ON = 1;
export const SNMPAPI_OFF = 0;
export const SNMP_OUTPUT_TO_CONSOLE = 1;
export const SNMP_OUTPUT_TO_LOGFILE = 2;
export const SNMP_OUTPUT_TO_DEBUGGER = 8;
export const SNMP_LOG_SILENT = 0;
export const SNMP_LOG_FATAL = 1;
export const SNMP_LOG_ERROR = 2;
export const SNMP_LOG_WARNING = 3;
export const SNMP_LOG_TRACE = 4;
export const SNMP_LOG_VERBOSE = 5;
export const SNMP_ERROR_NOERROR = 0;
export const SNMP_ERROR_TOOBIG = 1;
export const SNMP_ERROR_NOSUCHNAME = 2;
export const SNMP_ERROR_BADVALUE = 3;
export const SNMP_ERROR_READONLY = 4;
export const SNMP_ERROR_GENERR = 5;
export const SNMP_ERROR_NOACCESS = 6;
export const SNMP_ERROR_WRONGTYPE = 7;
export const SNMP_ERROR_WRONGLENGTH = 8;
export const SNMP_ERROR_WRONGENCODING = 9;
export const SNMP_ERROR_WRONGVALUE = 10;
export const SNMP_ERROR_NOCREATION = 11;
export const SNMP_ERROR_INCONSISTENTVALUE = 12;
export const SNMP_ERROR_RESOURCEUNAVAILABLE = 13;
export const SNMP_ERROR_COMMITFAILED = 14;
export const SNMP_ERROR_UNDOFAILED = 15;
export const SNMP_ERROR_AUTHORIZATIONERROR = 16;
export const SNMP_ERROR_NOTWRITABLE = 17;
export const SNMP_ERROR_INCONSISTENTNAME = 18;
export const ASN_UNIVERSAL = 0;
export const ASN_APPLICATION = 64;
export const ASN_CONTEXT = 128;
export const ASN_PRIVATE = 192;
export const ASN_PRIMITIVE = 0;
export const ASN_CONSTRUCTOR = 32;
export const SNMP_ACCESS_NONE = 0;
export const SNMP_ACCESS_NOTIFY = 1;
export const SNMP_ACCESS_READ_ONLY = 2;
export const SNMP_ACCESS_READ_WRITE = 3;
export const SNMP_ACCESS_READ_CREATE = 4;
export const SNMPAPI_NOERROR = 1;
export const SNMPAPI_ERROR = 0;
export const SNMP_OUTPUT_TO_EVENTLOG = 4;
export const DEFAULT_SNMP_PORT_UDP = 161;
export const DEFAULT_SNMP_PORT_IPX = 36879;
export const DEFAULT_SNMPTRAP_PORT_UDP = 162;
export const DEFAULT_SNMPTRAP_PORT_IPX = 36880;
export const SNMP_MAX_OID_LEN = 128;
export const SNMP_MEM_ALLOC_ERROR = 1;
export const SNMP_BERAPI_INVALID_LENGTH = 10;
export const SNMP_BERAPI_INVALID_TAG = 11;
export const SNMP_BERAPI_OVERFLOW = 12;
export const SNMP_BERAPI_SHORT_BUFFER = 13;
export const SNMP_BERAPI_INVALID_OBJELEM = 14;
export const SNMP_PDUAPI_UNRECOGNIZED_PDU = 20;
export const SNMP_PDUAPI_INVALID_ES = 21;
export const SNMP_PDUAPI_INVALID_GT = 22;
export const SNMP_AUTHAPI_INVALID_VERSION = 30;
export const SNMP_AUTHAPI_INVALID_MSG_TYPE = 31;
export const SNMP_AUTHAPI_TRIV_AUTH_FAILED = 32;
export const ASN_CONTEXTSPECIFIC = 128;
export const ASN_PRIMATIVE = 0;
export const SNMP_MGMTAPI_TIMEOUT = 40;
export const SNMP_MGMTAPI_SELECT_FDERRORS = 41;
export const SNMP_MGMTAPI_TRAP_ERRORS = 42;
export const SNMP_MGMTAPI_TRAP_DUPINIT = 43;
export const SNMP_MGMTAPI_NOTRAPS = 44;
export const SNMP_MGMTAPI_AGAIN = 45;
export const SNMP_MGMTAPI_INVALID_CTL = 46;
export const SNMP_MGMTAPI_INVALID_SESSION = 47;
export const SNMP_MGMTAPI_INVALID_BUFFER = 48;
export const MGMCTL_SETAGENTPORT = 1;
export const MAXOBJIDSIZE = 128;
export const MAXOBJIDSTRSIZE = 1408;
export const SNMPLISTEN_USEENTITY_ADDR = 0;
export const SNMPLISTEN_ALL_ADDR = 1;
export const SNMP_TRAP_COLDSTART = 0;
export const SNMP_TRAP_WARMSTART = 1;
export const SNMP_TRAP_LINKDOWN = 2;
export const SNMP_TRAP_LINKUP = 3;
export const SNMP_TRAP_AUTHFAIL = 4;
export const SNMP_TRAP_EGPNEIGHBORLOSS = 5;
export const SNMP_TRAP_ENTERPRISESPECIFIC = 6;
export const SNMPAPI_NO_SUPPORT = 0;
export const SNMPAPI_V1_SUPPORT = 1;
export const SNMPAPI_V2_SUPPORT = 2;
export const SNMPAPI_M2M_SUPPORT = 3;
export const SNMPAPI_FAILURE = 0;
export const SNMPAPI_SUCCESS = 1;
export const SNMPAPI_ALLOC_ERROR = 2;
export const SNMPAPI_CONTEXT_INVALID = 3;
export const SNMPAPI_CONTEXT_UNKNOWN = 4;
export const SNMPAPI_ENTITY_INVALID = 5;
export const SNMPAPI_ENTITY_UNKNOWN = 6;
export const SNMPAPI_INDEX_INVALID = 7;
export const SNMPAPI_NOOP = 8;
export const SNMPAPI_OID_INVALID = 9;
export const SNMPAPI_OPERATION_INVALID = 10;
export const SNMPAPI_OUTPUT_TRUNCATED = 11;
export const SNMPAPI_PDU_INVALID = 12;
export const SNMPAPI_SESSION_INVALID = 13;
export const SNMPAPI_SYNTAX_INVALID = 14;
export const SNMPAPI_VBL_INVALID = 15;
export const SNMPAPI_MODE_INVALID = 16;
export const SNMPAPI_SIZE_INVALID = 17;
export const SNMPAPI_NOT_INITIALIZED = 18;
export const SNMPAPI_MESSAGE_INVALID = 19;
export const SNMPAPI_HWND_INVALID = 20;
export const SNMPAPI_OTHER_ERROR = 99;
export const SNMPAPI_TL_NOT_INITIALIZED = 100;
export const SNMPAPI_TL_NOT_SUPPORTED = 101;
export const SNMPAPI_TL_NOT_AVAILABLE = 102;
export const SNMPAPI_TL_RESOURCE_ERROR = 103;
export const SNMPAPI_TL_UNDELIVERABLE = 104;
export const SNMPAPI_TL_SRC_INVALID = 105;
export const SNMPAPI_TL_INVALID_PARAM = 106;
export const SNMPAPI_TL_IN_USE = 107;
export const SNMPAPI_TL_TIMEOUT = 108;
export const SNMPAPI_TL_PDU_TOO_BIG = 109;
export const SNMPAPI_TL_OTHER = 199;
export const MAXVENDORINFO = 32;

// Structs

export type BOOL = number;

/**
 * Windows.Win32.NetworkManagement.Snmp.AsnOctetString (size: 16)
 */
export interface AsnOctetString {
  /** ptr */
  stream: Deno.PointerValue | Uint8Array;
  /** u32 */
  length: number;
  /** Windows.Win32.Foundation.BOOL */
  dynamic: boolean;
}

export const sizeofAsnOctetString = 16;

export function allocAsnOctetString(data?: Partial<AsnOctetString>): Uint8Array {
  const buf = new Uint8Array(sizeofAsnOctetString);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.stream !== undefined) view.setBigUint64(0, data.stream === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stream))), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: i32
  if (data?.dynamic !== undefined) view.setInt32(12, Number(data.dynamic), true);
  return buf;
}

export class AsnOctetStringView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get stream(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get dynamic(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set stream(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set dynamic(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Snmp.AsnObjectIdentifier (size: 16)
 */
export interface AsnObjectIdentifier {
  /** u32 */
  idLength: number;
  /** ptr */
  ids: Deno.PointerValue | Uint8Array;
}

export const sizeofAsnObjectIdentifier = 16;

export function allocAsnObjectIdentifier(data?: Partial<AsnObjectIdentifier>): Uint8Array {
  const buf = new Uint8Array(sizeofAsnObjectIdentifier);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.idLength !== undefined) view.setUint32(0, Number(data.idLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ids !== undefined) view.setBigUint64(8, data.ids === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ids))), true);
  return buf;
}

export class AsnObjectIdentifierView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get idLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ids(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set idLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ids(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.ULARGE_INTEGER (size: 24)
 */
export interface ULARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** u64 */
  QuadPart: bigint | number;
}

export const sizeofULARGE_INTEGER = 24;

export function allocULARGE_INTEGER(data?: Partial<ULARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofULARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: u64
  if (data?.QuadPart !== undefined) view.setBigUint64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class ULARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u64
  get QuadPart(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u64
  set QuadPart(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * _asnValue_e__Union (size: 80)
 */
export interface _asnValue_e__Union {
  /** i32 */
  number: number;
  /** u32 */
  unsigned32: number;
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  counter64: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Snmp.AsnOctetString */
  string: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Snmp.AsnOctetString */
  bits: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Snmp.AsnObjectIdentifier */
  object: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Snmp.AsnOctetString */
  sequence: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Snmp.AsnOctetString */
  address: Uint8Array | Deno.PointerValue;
  /** u32 */
  counter: number;
  /** u32 */
  gauge: number;
  /** u32 */
  ticks: number;
  /** Windows.Win32.NetworkManagement.Snmp.AsnOctetString */
  arbitrary: Uint8Array | Deno.PointerValue;
}

export const sizeof_asnValue_e__Union = 80;

export function alloc_asnValue_e__Union(data?: Partial<_asnValue_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_asnValue_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.number !== undefined) view.setInt32(0, Number(data.number), true);
  // 0x04: u32
  if (data?.unsigned32 !== undefined) view.setUint32(4, Number(data.unsigned32), true);
  // 0x08: pointer
  if (data?.counter64 !== undefined) view.setBigUint64(8, data.counter64 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.counter64))), true);
  // 0x10: pointer
  if (data?.string !== undefined) view.setBigUint64(16, data.string === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.string))), true);
  // 0x18: pointer
  if (data?.bits !== undefined) view.setBigUint64(24, data.bits === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bits))), true);
  // 0x20: pointer
  if (data?.object !== undefined) view.setBigUint64(32, data.object === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.object))), true);
  // 0x28: pointer
  if (data?.sequence !== undefined) view.setBigUint64(40, data.sequence === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sequence))), true);
  // 0x30: pointer
  if (data?.address !== undefined) view.setBigUint64(48, data.address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.address))), true);
  // 0x38: u32
  if (data?.counter !== undefined) view.setUint32(56, Number(data.counter), true);
  // 0x3c: u32
  if (data?.gauge !== undefined) view.setUint32(60, Number(data.gauge), true);
  // 0x40: u32
  if (data?.ticks !== undefined) view.setUint32(64, Number(data.ticks), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.arbitrary !== undefined) view.setBigUint64(72, data.arbitrary === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.arbitrary))), true);
  return buf;
}

export class _asnValue_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get number(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get unsigned32(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get counter64(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get string(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get bits(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get object(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get sequence(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get counter(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get gauge(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get ticks(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get arbitrary(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set number(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set unsigned32(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set counter64(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set string(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set bits(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set object(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set sequence(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set counter(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set gauge(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set ticks(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set arbitrary(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Snmp.AsnAny (size: 16)
 */
export interface AsnAny {
  /** u8 */
  asnType: number;
  /** _asnValue_e__Union */
  asnValue: Uint8Array | Deno.PointerValue;
}

export const sizeofAsnAny = 16;

export function allocAsnAny(data?: Partial<AsnAny>): Uint8Array {
  const buf = new Uint8Array(sizeofAsnAny);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.asnType !== undefined) view.setUint8(0, Number(data.asnType));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.asnValue !== undefined) view.setBigUint64(8, data.asnValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.asnValue))), true);
  return buf;
}

export class AsnAnyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get asnType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get asnValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set asnType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set asnValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Snmp.SnmpVarBind (size: 16)
 */
export interface SnmpVarBind {
  /** Windows.Win32.NetworkManagement.Snmp.AsnObjectIdentifier */
  name: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.Snmp.AsnAny */
  value: Uint8Array | Deno.PointerValue;
}

export const sizeofSnmpVarBind = 16;

export function allocSnmpVarBind(data?: Partial<SnmpVarBind>): Uint8Array {
  const buf = new Uint8Array(sizeofSnmpVarBind);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.name !== undefined) view.setBigUint64(0, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  return buf;
}

export class SnmpVarBindView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Snmp.SnmpVarBindList (size: 16)
 */
export interface SnmpVarBindList {
  /** ptr */
  list: Deno.PointerValue | Uint8Array;
  /** u32 */
  len: number;
}

export const sizeofSnmpVarBindList = 16;

export function allocSnmpVarBindList(data?: Partial<SnmpVarBindList>): Uint8Array {
  const buf = new Uint8Array(sizeofSnmpVarBindList);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.list !== undefined) view.setBigUint64(0, data.list === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.list))), true);
  // 0x08: u32
  if (data?.len !== undefined) view.setUint32(8, Number(data.len), true);
  // 0x0c: pad4
  return buf;
}

export class SnmpVarBindListView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get list(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get len(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set list(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set len(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.Snmp.smiOCTETS (size: 16)
 */
export interface smiOCTETS {
  /** u32 */
  len: number;
  /** ptr */
  ptr: Deno.PointerValue | Uint8Array;
}

export const sizeofSmiOCTETS = 16;

export function allocSmiOCTETS(data?: Partial<smiOCTETS>): Uint8Array {
  const buf = new Uint8Array(sizeofSmiOCTETS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.len !== undefined) view.setUint32(0, Number(data.len), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ptr !== undefined) view.setBigUint64(8, data.ptr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptr))), true);
  return buf;
}

export class smiOCTETSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get len(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ptr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set len(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ptr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Snmp.smiOID (size: 16)
 */
export interface smiOID {
  /** u32 */
  len: number;
  /** ptr */
  ptr: Deno.PointerValue | Uint8Array;
}

export const sizeofSmiOID = 16;

export function allocSmiOID(data?: Partial<smiOID>): Uint8Array {
  const buf = new Uint8Array(sizeofSmiOID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.len !== undefined) view.setUint32(0, Number(data.len), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ptr !== undefined) view.setBigUint64(8, data.ptr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptr))), true);
  return buf;
}

export class smiOIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get len(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ptr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set len(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ptr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Snmp.smiCNTR64 (size: 8)
 */
export interface smiCNTR64 {
  /** u32 */
  hipart: number;
  /** u32 */
  lopart: number;
}

export const sizeofSmiCNTR64 = 8;

export function allocSmiCNTR64(data?: Partial<smiCNTR64>): Uint8Array {
  const buf = new Uint8Array(sizeofSmiCNTR64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.hipart !== undefined) view.setUint32(0, Number(data.hipart), true);
  // 0x04: u32
  if (data?.lopart !== undefined) view.setUint32(4, Number(data.lopart), true);
  return buf;
}

export class smiCNTR64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get hipart(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get lopart(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set hipart(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set lopart(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _propertyBlob_e__Struct (size: 16)
 */
export interface _propertyBlob_e__Struct {
  /** u32 */
  cbBuf: number;
  /** ptr */
  pBuf: Deno.PointerValue | Uint8Array;
}

export const sizeof_propertyBlob_e__Struct = 16;

export function alloc_propertyBlob_e__Struct(data?: Partial<_propertyBlob_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_propertyBlob_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbBuf !== undefined) view.setUint32(0, Number(data.cbBuf), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pBuf !== undefined) view.setBigUint64(8, data.pBuf === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pBuf))), true);
  return buf;
}

export class _propertyBlob_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbBuf(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pBuf(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbBuf(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pBuf(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _value_e__Union (size: 40)
 */
export interface _value_e__Union {
  /** u8 */
  propertyByte: number;
  /** Windows.Win32.Foundation.PWSTR */
  propertyString: string | null | Uint8Array | Uint16Array;
  /** i32 */
  propertyInt32: number;
  /** i64 */
  propertyInt64: bigint | number;
  /** _propertyBlob_e__Struct */
  propertyBlob: Uint8Array | Deno.PointerValue;
}

export const sizeof_value_e__Union = 40;

export function alloc_value_e__Union(data?: Partial<_value_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_value_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.propertyByte !== undefined) view.setUint8(0, Number(data.propertyByte));
  // 0x01: pad7
  // 0x08: buffer
  if (data?.propertyString !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.propertyString);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.propertyInt32 !== undefined) view.setInt32(16, Number(data.propertyInt32), true);
  // 0x14: pad4
  // 0x18: i64
  if (data?.propertyInt64 !== undefined) view.setBigInt64(24, BigInt(data.propertyInt64), true);
  // 0x20: pointer
  if (data?.propertyBlob !== undefined) view.setBigUint64(32, data.propertyBlob === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.propertyBlob))), true);
  return buf;
}

export class _value_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get propertyByte(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: buffer
  get propertyString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get propertyInt32(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: i64
  get propertyInt64(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get propertyBlob(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set propertyByte(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: buffer
  set propertyString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set propertyInt32(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: i64
  set propertyInt64(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set propertyBlob(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Snmp.smiVALUE (size: 16)
 */
export interface smiVALUE {
  /** u32 */
  syntax: number;
  /** _value_e__Union */
  value: Uint8Array | Deno.PointerValue;
}

export const sizeofSmiVALUE = 16;

export function allocSmiVALUE(data?: Partial<smiVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofSmiVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.syntax !== undefined) view.setUint32(0, Number(data.syntax), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  return buf;
}

export class smiVALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get syntax(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set syntax(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.Snmp.smiVENDORINFO (size: 40)
 */
export interface smiVENDORINFO {
  /** array */
  vendorName: Deno.PointerValue;
  /** array */
  vendorContact: Deno.PointerValue;
  /** array */
  vendorVersionId: Deno.PointerValue;
  /** array */
  vendorVersionDate: Deno.PointerValue;
  /** u32 */
  vendorEnterprise: number;
}

export const sizeofSmiVENDORINFO = 40;

export function allocSmiVENDORINFO(data?: Partial<smiVENDORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSmiVENDORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.vendorName !== undefined) view.setBigUint64(0, data.vendorName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vendorName))), true);
  // 0x08: pointer
  if (data?.vendorContact !== undefined) view.setBigUint64(8, data.vendorContact === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vendorContact))), true);
  // 0x10: pointer
  if (data?.vendorVersionId !== undefined) view.setBigUint64(16, data.vendorVersionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vendorVersionId))), true);
  // 0x18: pointer
  if (data?.vendorVersionDate !== undefined) view.setBigUint64(24, data.vendorVersionDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vendorVersionDate))), true);
  // 0x20: u32
  if (data?.vendorEnterprise !== undefined) view.setUint32(32, Number(data.vendorEnterprise), true);
  // 0x24: pad4
  return buf;
}

export class smiVENDORINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get vendorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get vendorContact(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get vendorVersionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get vendorVersionDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get vendorEnterprise(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set vendorName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set vendorContact(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set vendorVersionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set vendorVersionDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set vendorEnterprise(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array;

export type HWND = bigint | number;

// Native Libraries

try {
  var libsnmpapi_dll = Deno.dlopen("snmpapi.dll", {
    SnmpUtilOidCpy: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SnmpUtilOidAppend: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SnmpUtilOidNCmp: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    SnmpUtilOidCmp: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SnmpUtilOidFree: {
      parameters: ["pointer"],
      result: "void",
    },
    SnmpUtilOctetsCmp: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SnmpUtilOctetsNCmp: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    SnmpUtilOctetsCpy: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SnmpUtilOctetsFree: {
      parameters: ["pointer"],
      result: "void",
    },
    SnmpUtilAsnAnyCpy: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SnmpUtilAsnAnyFree: {
      parameters: ["pointer"],
      result: "void",
    },
    SnmpUtilVarBindCpy: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SnmpUtilVarBindFree: {
      parameters: ["pointer"],
      result: "void",
    },
    SnmpUtilVarBindListCpy: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SnmpUtilVarBindListFree: {
      parameters: ["pointer"],
      result: "void",
    },
    SnmpUtilMemFree: {
      parameters: ["pointer"],
      result: "void",
    },
    SnmpUtilMemAlloc: {
      parameters: ["u32"],
      result: "pointer",
    },
    SnmpUtilMemReAlloc: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    SnmpUtilOidToA: {
      parameters: ["pointer"],
      result: "buffer",
    },
    SnmpUtilIdsToA: {
      parameters: ["pointer", "u32"],
      result: "buffer",
    },
    SnmpUtilPrintOid: {
      parameters: ["pointer"],
      result: "void",
    },
    SnmpUtilPrintAsnAny: {
      parameters: ["pointer"],
      result: "void",
    },
    SnmpSvcGetUptime: {
      parameters: [],
      result: "u32",
    },
    SnmpSvcSetLogLevel: {
      parameters: ["u32"],
      result: "void",
    },
    SnmpSvcSetLogType: {
      parameters: ["u32"],
      result: "void",
    },
    SnmpUtilDbgPrint: {
      parameters: ["u32", "buffer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libmgmtapi_dll = Deno.dlopen("mgmtapi.dll", {
    SnmpMgrOpen: {
      parameters: ["buffer", "buffer", "i32", "i32"],
      result: "pointer",
    },
    SnmpMgrCtl: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SnmpMgrClose: {
      parameters: ["pointer"],
      result: "i32",
    },
    SnmpMgrRequest: {
      parameters: ["pointer", "u8", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SnmpMgrStrToOid: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    SnmpMgrOidToStr: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SnmpMgrTrapListen: {
      parameters: ["pointer"],
      result: "i32",
    },
    SnmpMgrGetTrap: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SnmpMgrGetTrapEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libwsnmp32_dll = Deno.dlopen("wsnmp32.dll", {
    SnmpGetTranslateMode: {
      parameters: ["pointer"],
      result: "u32",
    },
    SnmpSetTranslateMode: {
      parameters: ["u32"],
      result: "u32",
    },
    SnmpGetRetransmitMode: {
      parameters: ["pointer"],
      result: "u32",
    },
    SnmpSetRetransmitMode: {
      parameters: ["u32"],
      result: "u32",
    },
    SnmpGetTimeout: {
      parameters: ["isize", "pointer", "pointer"],
      result: "u32",
    },
    SnmpSetTimeout: {
      parameters: ["isize", "u32"],
      result: "u32",
    },
    SnmpGetRetry: {
      parameters: ["isize", "pointer", "pointer"],
      result: "u32",
    },
    SnmpSetRetry: {
      parameters: ["isize", "u32"],
      result: "u32",
    },
    SnmpGetVendorInfo: {
      parameters: ["pointer"],
      result: "u32",
    },
    SnmpStartup: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SnmpCleanup: {
      parameters: [],
      result: "u32",
    },
    SnmpOpen: {
      parameters: ["pointer", "u32"],
      result: "isize",
    },
    SnmpClose: {
      parameters: ["isize"],
      result: "u32",
    },
    SnmpSendMsg: {
      parameters: ["isize", "isize", "isize", "isize", "isize"],
      result: "u32",
    },
    SnmpRecvMsg: {
      parameters: ["isize", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SnmpRegister: {
      parameters: ["isize", "isize", "isize", "isize", "pointer", "u32"],
      result: "u32",
    },
    SnmpCreateSession: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "isize",
    },
    SnmpListen: {
      parameters: ["isize", "u32"],
      result: "u32",
    },
    SnmpListenEx: {
      parameters: ["isize", "u32", "u32"],
      result: "u32",
    },
    SnmpCancelMsg: {
      parameters: ["isize", "i32"],
      result: "u32",
    },
    SnmpStartupEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SnmpCleanupEx: {
      parameters: [],
      result: "u32",
    },
    SnmpStrToEntity: {
      parameters: ["isize", "buffer"],
      result: "isize",
    },
    SnmpEntityToStr: {
      parameters: ["isize", "u32", "buffer"],
      result: "u32",
    },
    SnmpFreeEntity: {
      parameters: ["isize"],
      result: "u32",
    },
    SnmpStrToContext: {
      parameters: ["isize", "pointer"],
      result: "isize",
    },
    SnmpContextToStr: {
      parameters: ["isize", "pointer"],
      result: "u32",
    },
    SnmpFreeContext: {
      parameters: ["isize"],
      result: "u32",
    },
    SnmpSetPort: {
      parameters: ["isize", "u32"],
      result: "u32",
    },
    SnmpCreatePdu: {
      parameters: ["isize", "u32", "i32", "i32", "i32", "isize"],
      result: "isize",
    },
    SnmpGetPduData: {
      parameters: ["isize", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SnmpSetPduData: {
      parameters: ["isize", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SnmpDuplicatePdu: {
      parameters: ["isize", "isize"],
      result: "isize",
    },
    SnmpFreePdu: {
      parameters: ["isize"],
      result: "u32",
    },
    SnmpCreateVbl: {
      parameters: ["isize", "pointer", "pointer"],
      result: "isize",
    },
    SnmpDuplicateVbl: {
      parameters: ["isize", "isize"],
      result: "isize",
    },
    SnmpFreeVbl: {
      parameters: ["isize"],
      result: "u32",
    },
    SnmpCountVbl: {
      parameters: ["isize"],
      result: "u32",
    },
    SnmpGetVb: {
      parameters: ["isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    SnmpSetVb: {
      parameters: ["isize", "u32", "pointer", "pointer"],
      result: "u32",
    },
    SnmpDeleteVb: {
      parameters: ["isize", "u32"],
      result: "u32",
    },
    SnmpGetLastError: {
      parameters: ["isize"],
      result: "u32",
    },
    SnmpStrToOid: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    SnmpOidToStr: {
      parameters: ["pointer", "u32", "buffer"],
      result: "u32",
    },
    SnmpOidCopy: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    SnmpOidCompare: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    SnmpEncodeMsg: {
      parameters: ["isize", "isize", "isize", "isize", "isize", "pointer"],
      result: "u32",
    },
    SnmpDecodeMsg: {
      parameters: ["isize", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SnmpFreeDescriptor: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function SnmpUtilOidCpy(
  pOidDst: Deno.PointerValue | Uint8Array /* ptr */,
  pOidSrc: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libsnmpapi_dll.SnmpUtilOidCpy(util.toPointer(pOidDst), util.toPointer(pOidSrc));
}

export function SnmpUtilOidAppend(
  pOidDst: Deno.PointerValue | Uint8Array /* ptr */,
  pOidSrc: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libsnmpapi_dll.SnmpUtilOidAppend(util.toPointer(pOidDst), util.toPointer(pOidSrc));
}

export function SnmpUtilOidNCmp(
  pOid1: Deno.PointerValue | Uint8Array /* ptr */,
  pOid2: Deno.PointerValue | Uint8Array /* ptr */,
  nSubIds: number /* u32 */,
): number /* i32 */ {
  return libsnmpapi_dll.SnmpUtilOidNCmp(util.toPointer(pOid1), util.toPointer(pOid2), nSubIds);
}

export function SnmpUtilOidCmp(
  pOid1: Deno.PointerValue | Uint8Array /* ptr */,
  pOid2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libsnmpapi_dll.SnmpUtilOidCmp(util.toPointer(pOid1), util.toPointer(pOid2));
}

export function SnmpUtilOidFree(
  pOid: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libsnmpapi_dll.SnmpUtilOidFree(util.toPointer(pOid));
}

export function SnmpUtilOctetsCmp(
  pOctets1: Deno.PointerValue | Uint8Array /* ptr */,
  pOctets2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libsnmpapi_dll.SnmpUtilOctetsCmp(util.toPointer(pOctets1), util.toPointer(pOctets2));
}

export function SnmpUtilOctetsNCmp(
  pOctets1: Deno.PointerValue | Uint8Array /* ptr */,
  pOctets2: Deno.PointerValue | Uint8Array /* ptr */,
  nChars: number /* u32 */,
): number /* i32 */ {
  return libsnmpapi_dll.SnmpUtilOctetsNCmp(util.toPointer(pOctets1), util.toPointer(pOctets2), nChars);
}

export function SnmpUtilOctetsCpy(
  pOctetsDst: Deno.PointerValue | Uint8Array /* ptr */,
  pOctetsSrc: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libsnmpapi_dll.SnmpUtilOctetsCpy(util.toPointer(pOctetsDst), util.toPointer(pOctetsSrc));
}

export function SnmpUtilOctetsFree(
  pOctets: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libsnmpapi_dll.SnmpUtilOctetsFree(util.toPointer(pOctets));
}

export function SnmpUtilAsnAnyCpy(
  pAnyDst: Deno.PointerValue | Uint8Array /* ptr */,
  pAnySrc: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libsnmpapi_dll.SnmpUtilAsnAnyCpy(util.toPointer(pAnyDst), util.toPointer(pAnySrc));
}

export function SnmpUtilAsnAnyFree(
  pAny: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libsnmpapi_dll.SnmpUtilAsnAnyFree(util.toPointer(pAny));
}

export function SnmpUtilVarBindCpy(
  pVbDst: Deno.PointerValue | Uint8Array /* ptr */,
  pVbSrc: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libsnmpapi_dll.SnmpUtilVarBindCpy(util.toPointer(pVbDst), util.toPointer(pVbSrc));
}

export function SnmpUtilVarBindFree(
  pVb: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libsnmpapi_dll.SnmpUtilVarBindFree(util.toPointer(pVb));
}

export function SnmpUtilVarBindListCpy(
  pVblDst: Deno.PointerValue | Uint8Array /* ptr */,
  pVblSrc: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libsnmpapi_dll.SnmpUtilVarBindListCpy(util.toPointer(pVblDst), util.toPointer(pVblSrc));
}

export function SnmpUtilVarBindListFree(
  pVbl: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libsnmpapi_dll.SnmpUtilVarBindListFree(util.toPointer(pVbl));
}

export function SnmpUtilMemFree(
  pMem: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libsnmpapi_dll.SnmpUtilMemFree(util.toPointer(pMem));
}

export function SnmpUtilMemAlloc(
  nBytes: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libsnmpapi_dll.SnmpUtilMemAlloc(nBytes);
}

export function SnmpUtilMemReAlloc(
  pMem: Deno.PointerValue | Uint8Array /* ptr */,
  nBytes: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libsnmpapi_dll.SnmpUtilMemReAlloc(util.toPointer(pMem), nBytes);
}

export function SnmpUtilOidToA(
  Oid: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libsnmpapi_dll.SnmpUtilOidToA(util.toPointer(Oid)));
}

export function SnmpUtilIdsToA(
  Ids: Deno.PointerValue | Uint8Array /* ptr */,
  IdLength: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libsnmpapi_dll.SnmpUtilIdsToA(util.toPointer(Ids), IdLength));
}

export function SnmpUtilPrintOid(
  Oid: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libsnmpapi_dll.SnmpUtilPrintOid(util.toPointer(Oid));
}

export function SnmpUtilPrintAsnAny(
  pAny: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libsnmpapi_dll.SnmpUtilPrintAsnAny(util.toPointer(pAny));
}

export function SnmpSvcGetUptime(): number /* u32 */ {
  return libsnmpapi_dll.SnmpSvcGetUptime();
}

export function SnmpSvcSetLogLevel(
  nLogLevel: SNMP_LOG /* Windows.Win32.NetworkManagement.Snmp.SNMP_LOG */,
): void /* void */ {
  return libsnmpapi_dll.SnmpSvcSetLogLevel(nLogLevel);
}

export function SnmpSvcSetLogType(
  nLogType: SNMP_OUTPUT_LOG_TYPE /* Windows.Win32.NetworkManagement.Snmp.SNMP_OUTPUT_LOG_TYPE */,
): void /* void */ {
  return libsnmpapi_dll.SnmpSvcSetLogType(nLogType);
}

export function SnmpUtilDbgPrint(
  nLogLevel: SNMP_LOG /* Windows.Win32.NetworkManagement.Snmp.SNMP_LOG */,
  szFormat: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libsnmpapi_dll.SnmpUtilDbgPrint(nLogLevel, util.pstrToFfi(szFormat));
}

export function SnmpMgrOpen(
  lpAgentAddress: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpAgentCommunity: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nTimeOut: number /* i32 */,
  nRetries: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libmgmtapi_dll.SnmpMgrOpen(util.pstrToFfi(lpAgentAddress), util.pstrToFfi(lpAgentCommunity), nTimeOut, nRetries);
}

export function SnmpMgrCtl(
  session: Deno.PointerValue | Uint8Array /* ptr */,
  dwCtlCode: number /* u32 */,
  lpvInBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbInBuffer: number /* u32 */,
  lpvOUTBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbOUTBuffer: number /* u32 */,
  lpcbBytesReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmgmtapi_dll.SnmpMgrCtl(util.toPointer(session), dwCtlCode, util.toPointer(lpvInBuffer), cbInBuffer, util.toPointer(lpvOUTBuffer), cbOUTBuffer, util.toPointer(lpcbBytesReturned)));
}

export function SnmpMgrClose(
  session: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmgmtapi_dll.SnmpMgrClose(util.toPointer(session)));
}

export function SnmpMgrRequest(
  session: Deno.PointerValue | Uint8Array /* ptr */,
  requestType: number /* u8 */,
  variableBindings: Deno.PointerValue | Uint8Array /* ptr */,
  errorStatus: Deno.PointerValue | Uint8Array /* ptr */,
  errorIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libmgmtapi_dll.SnmpMgrRequest(util.toPointer(session), requestType, util.toPointer(variableBindings), util.toPointer(errorStatus), util.toPointer(errorIndex));
}

export function SnmpMgrStrToOid(
  string: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  oid: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmgmtapi_dll.SnmpMgrStrToOid(util.pstrToFfi(string), util.toPointer(oid)));
}

export function SnmpMgrOidToStr(
  oid: Deno.PointerValue | Uint8Array /* ptr */,
  string: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmgmtapi_dll.SnmpMgrOidToStr(util.toPointer(oid), util.toPointer(string)));
}

export function SnmpMgrTrapListen(
  phTrapAvailable: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmgmtapi_dll.SnmpMgrTrapListen(util.toPointer(phTrapAvailable)));
}

export function SnmpMgrGetTrap(
  enterprise: Deno.PointerValue | Uint8Array /* ptr */,
  IPAddress: Deno.PointerValue | Uint8Array /* ptr */,
  genericTrap: Deno.PointerValue | Uint8Array /* ptr */,
  specificTrap: Deno.PointerValue | Uint8Array /* ptr */,
  timeStamp: Deno.PointerValue | Uint8Array /* ptr */,
  variableBindings: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmgmtapi_dll.SnmpMgrGetTrap(util.toPointer(enterprise), util.toPointer(IPAddress), util.toPointer(genericTrap), util.toPointer(specificTrap), util.toPointer(timeStamp), util.toPointer(variableBindings)));
}

export function SnmpMgrGetTrapEx(
  enterprise: Deno.PointerValue | Uint8Array /* ptr */,
  agentAddress: Deno.PointerValue | Uint8Array /* ptr */,
  sourceAddress: Deno.PointerValue | Uint8Array /* ptr */,
  genericTrap: Deno.PointerValue | Uint8Array /* ptr */,
  specificTrap: Deno.PointerValue | Uint8Array /* ptr */,
  community: Deno.PointerValue | Uint8Array /* ptr */,
  timeStamp: Deno.PointerValue | Uint8Array /* ptr */,
  variableBindings: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmgmtapi_dll.SnmpMgrGetTrapEx(util.toPointer(enterprise), util.toPointer(agentAddress), util.toPointer(sourceAddress), util.toPointer(genericTrap), util.toPointer(specificTrap), util.toPointer(community), util.toPointer(timeStamp), util.toPointer(variableBindings)));
}

export function SnmpGetTranslateMode(
  nTranslateMode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpGetTranslateMode(util.toPointer(nTranslateMode));
}

export function SnmpSetTranslateMode(
  nTranslateMode: SNMP_API_TRANSLATE_MODE /* Windows.Win32.NetworkManagement.Snmp.SNMP_API_TRANSLATE_MODE */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpSetTranslateMode(nTranslateMode);
}

export function SnmpGetRetransmitMode(
  nRetransmitMode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpGetRetransmitMode(util.toPointer(nRetransmitMode));
}

export function SnmpSetRetransmitMode(
  nRetransmitMode: SNMP_STATUS /* Windows.Win32.NetworkManagement.Snmp.SNMP_STATUS */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpSetRetransmitMode(nRetransmitMode);
}

export function SnmpGetTimeout(
  hEntity: bigint | number /* isize */,
  nPolicyTimeout: Deno.PointerValue | Uint8Array /* ptr */,
  nActualTimeout: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpGetTimeout(hEntity, util.toPointer(nPolicyTimeout), util.toPointer(nActualTimeout));
}

export function SnmpSetTimeout(
  hEntity: bigint | number /* isize */,
  nPolicyTimeout: number /* u32 */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpSetTimeout(hEntity, nPolicyTimeout);
}

export function SnmpGetRetry(
  hEntity: bigint | number /* isize */,
  nPolicyRetry: Deno.PointerValue | Uint8Array /* ptr */,
  nActualRetry: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpGetRetry(hEntity, util.toPointer(nPolicyRetry), util.toPointer(nActualRetry));
}

export function SnmpSetRetry(
  hEntity: bigint | number /* isize */,
  nPolicyRetry: number /* u32 */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpSetRetry(hEntity, nPolicyRetry);
}

export function SnmpGetVendorInfo(
  vendorInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpGetVendorInfo(util.toPointer(vendorInfo));
}

export function SnmpStartup(
  nMajorVersion: Deno.PointerValue | Uint8Array /* ptr */,
  nMinorVersion: Deno.PointerValue | Uint8Array /* ptr */,
  nLevel: Deno.PointerValue | Uint8Array /* ptr */,
  nTranslateMode: Deno.PointerValue | Uint8Array /* ptr */,
  nRetransmitMode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpStartup(util.toPointer(nMajorVersion), util.toPointer(nMinorVersion), util.toPointer(nLevel), util.toPointer(nTranslateMode), util.toPointer(nRetransmitMode));
}

export function SnmpCleanup(): number /* u32 */ {
  return libwsnmp32_dll.SnmpCleanup();
}

export function SnmpOpen(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  wMsg: number /* u32 */,
): bigint | number /* isize */ {
  return libwsnmp32_dll.SnmpOpen((hWnd), wMsg);
}

export function SnmpClose(
  session: bigint | number /* isize */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpClose(session);
}

export function SnmpSendMsg(
  session: bigint | number /* isize */,
  srcEntity: bigint | number /* isize */,
  dstEntity: bigint | number /* isize */,
  context: bigint | number /* isize */,
  PDU: bigint | number /* isize */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpSendMsg(session, srcEntity, dstEntity, context, PDU);
}

export function SnmpRecvMsg(
  session: bigint | number /* isize */,
  srcEntity: Deno.PointerValue | Uint8Array /* ptr */,
  dstEntity: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  PDU: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpRecvMsg(session, util.toPointer(srcEntity), util.toPointer(dstEntity), util.toPointer(context), util.toPointer(PDU));
}

export function SnmpRegister(
  session: bigint | number /* isize */,
  srcEntity: bigint | number /* isize */,
  dstEntity: bigint | number /* isize */,
  context: bigint | number /* isize */,
  notification: Deno.PointerValue | Uint8Array /* ptr */,
  state: SNMP_STATUS /* Windows.Win32.NetworkManagement.Snmp.SNMP_STATUS */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpRegister(session, srcEntity, dstEntity, context, util.toPointer(notification), state);
}

export function SnmpCreateSession(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  wMsg: number /* u32 */,
  fCallBack: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.Snmp.SNMPAPI_CALLBACK */,
  lpClientData: Deno.PointerValue | Uint8Array /* ptr */,
): bigint | number /* isize */ {
  return libwsnmp32_dll.SnmpCreateSession((hWnd), wMsg, util.toPointer(fCallBack), util.toPointer(lpClientData));
}

export function SnmpListen(
  hEntity: bigint | number /* isize */,
  lStatus: SNMP_STATUS /* Windows.Win32.NetworkManagement.Snmp.SNMP_STATUS */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpListen(hEntity, lStatus);
}

export function SnmpListenEx(
  hEntity: bigint | number /* isize */,
  lStatus: number /* u32 */,
  nUseEntityAddr: number /* u32 */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpListenEx(hEntity, lStatus, nUseEntityAddr);
}

export function SnmpCancelMsg(
  session: bigint | number /* isize */,
  reqId: number /* i32 */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpCancelMsg(session, reqId);
}

export function SnmpStartupEx(
  nMajorVersion: Deno.PointerValue | Uint8Array /* ptr */,
  nMinorVersion: Deno.PointerValue | Uint8Array /* ptr */,
  nLevel: Deno.PointerValue | Uint8Array /* ptr */,
  nTranslateMode: Deno.PointerValue | Uint8Array /* ptr */,
  nRetransmitMode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpStartupEx(util.toPointer(nMajorVersion), util.toPointer(nMinorVersion), util.toPointer(nLevel), util.toPointer(nTranslateMode), util.toPointer(nRetransmitMode));
}

export function SnmpCleanupEx(): number /* u32 */ {
  return libwsnmp32_dll.SnmpCleanupEx();
}

export function SnmpStrToEntity(
  session: bigint | number /* isize */,
  string: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): bigint | number /* isize */ {
  return libwsnmp32_dll.SnmpStrToEntity(session, util.pstrToFfi(string));
}

export function SnmpEntityToStr(
  entity: bigint | number /* isize */,
  size: number /* u32 */,
  string: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpEntityToStr(entity, size, util.pstrToFfi(string));
}

export function SnmpFreeEntity(
  entity: bigint | number /* isize */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpFreeEntity(entity);
}

export function SnmpStrToContext(
  session: bigint | number /* isize */,
  string: Deno.PointerValue | Uint8Array /* ptr */,
): bigint | number /* isize */ {
  return libwsnmp32_dll.SnmpStrToContext(session, util.toPointer(string));
}

export function SnmpContextToStr(
  context: bigint | number /* isize */,
  string: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpContextToStr(context, util.toPointer(string));
}

export function SnmpFreeContext(
  context: bigint | number /* isize */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpFreeContext(context);
}

export function SnmpSetPort(
  hEntity: bigint | number /* isize */,
  nPort: number /* u32 */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpSetPort(hEntity, nPort);
}

export function SnmpCreatePdu(
  session: bigint | number /* isize */,
  PDU_type: SNMP_PDU_TYPE /* Windows.Win32.NetworkManagement.Snmp.SNMP_PDU_TYPE */,
  request_id: number /* i32 */,
  error_status: number /* i32 */,
  error_index: number /* i32 */,
  varbindlist: bigint | number /* isize */,
): bigint | number /* isize */ {
  return libwsnmp32_dll.SnmpCreatePdu(session, PDU_type, request_id, error_status, error_index, varbindlist);
}

export function SnmpGetPduData(
  PDU: bigint | number /* isize */,
  PDU_type: Deno.PointerValue | Uint8Array /* ptr */,
  request_id: Deno.PointerValue | Uint8Array /* ptr */,
  error_status: Deno.PointerValue | Uint8Array /* ptr */,
  error_index: Deno.PointerValue | Uint8Array /* ptr */,
  varbindlist: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpGetPduData(PDU, util.toPointer(PDU_type), util.toPointer(request_id), util.toPointer(error_status), util.toPointer(error_index), util.toPointer(varbindlist));
}

export function SnmpSetPduData(
  PDU: bigint | number /* isize */,
  PDU_type: Deno.PointerValue | Uint8Array /* ptr */,
  request_id: Deno.PointerValue | Uint8Array /* ptr */,
  non_repeaters: Deno.PointerValue | Uint8Array /* ptr */,
  max_repetitions: Deno.PointerValue | Uint8Array /* ptr */,
  varbindlist: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpSetPduData(PDU, util.toPointer(PDU_type), util.toPointer(request_id), util.toPointer(non_repeaters), util.toPointer(max_repetitions), util.toPointer(varbindlist));
}

export function SnmpDuplicatePdu(
  session: bigint | number /* isize */,
  PDU: bigint | number /* isize */,
): bigint | number /* isize */ {
  return libwsnmp32_dll.SnmpDuplicatePdu(session, PDU);
}

export function SnmpFreePdu(
  PDU: bigint | number /* isize */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpFreePdu(PDU);
}

export function SnmpCreateVbl(
  session: bigint | number /* isize */,
  name: Deno.PointerValue | Uint8Array /* ptr */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): bigint | number /* isize */ {
  return libwsnmp32_dll.SnmpCreateVbl(session, util.toPointer(name), util.toPointer(value));
}

export function SnmpDuplicateVbl(
  session: bigint | number /* isize */,
  vbl: bigint | number /* isize */,
): bigint | number /* isize */ {
  return libwsnmp32_dll.SnmpDuplicateVbl(session, vbl);
}

export function SnmpFreeVbl(
  vbl: bigint | number /* isize */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpFreeVbl(vbl);
}

export function SnmpCountVbl(
  vbl: bigint | number /* isize */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpCountVbl(vbl);
}

export function SnmpGetVb(
  vbl: bigint | number /* isize */,
  index: number /* u32 */,
  name: Deno.PointerValue | Uint8Array /* ptr */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpGetVb(vbl, index, util.toPointer(name), util.toPointer(value));
}

export function SnmpSetVb(
  vbl: bigint | number /* isize */,
  index: number /* u32 */,
  name: Deno.PointerValue | Uint8Array /* ptr */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpSetVb(vbl, index, util.toPointer(name), util.toPointer(value));
}

export function SnmpDeleteVb(
  vbl: bigint | number /* isize */,
  index: number /* u32 */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpDeleteVb(vbl, index);
}

export function SnmpGetLastError(
  session: bigint | number /* isize */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpGetLastError(session);
}

export function SnmpStrToOid(
  string: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dstOID: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpStrToOid(util.pstrToFfi(string), util.toPointer(dstOID));
}

export function SnmpOidToStr(
  srcOID: Deno.PointerValue | Uint8Array /* ptr */,
  size: number /* u32 */,
  string: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpOidToStr(util.toPointer(srcOID), size, util.pstrToFfi(string));
}

export function SnmpOidCopy(
  srcOID: Deno.PointerValue | Uint8Array /* ptr */,
  dstOID: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpOidCopy(util.toPointer(srcOID), util.toPointer(dstOID));
}

export function SnmpOidCompare(
  xOID: Deno.PointerValue | Uint8Array /* ptr */,
  yOID: Deno.PointerValue | Uint8Array /* ptr */,
  maxlen: number /* u32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpOidCompare(util.toPointer(xOID), util.toPointer(yOID), maxlen, util.toPointer(result));
}

export function SnmpEncodeMsg(
  session: bigint | number /* isize */,
  srcEntity: bigint | number /* isize */,
  dstEntity: bigint | number /* isize */,
  context: bigint | number /* isize */,
  pdu: bigint | number /* isize */,
  msgBufDesc: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpEncodeMsg(session, srcEntity, dstEntity, context, pdu, util.toPointer(msgBufDesc));
}

export function SnmpDecodeMsg(
  session: bigint | number /* isize */,
  srcEntity: Deno.PointerValue | Uint8Array /* ptr */,
  dstEntity: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  pdu: Deno.PointerValue | Uint8Array /* ptr */,
  msgBufDesc: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpDecodeMsg(session, util.toPointer(srcEntity), util.toPointer(dstEntity), util.toPointer(context), util.toPointer(pdu), util.toPointer(msgBufDesc));
}

export function SnmpFreeDescriptor(
  syntax: number /* u32 */,
  descriptor: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwsnmp32_dll.SnmpFreeDescriptor(syntax, util.toPointer(descriptor));
}

