/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.WiFi.Apis

import * as util from "../../util.ts";

// Enums
export type WLAN_SET_EAPHOST_FLAGS = number;
export type WLAN_CONNECTION_NOTIFICATION_FLAGS = number;
export type DOT11_BSS_TYPE = number;
export type DOT11_AUTH_ALGORITHM = number;
export type DOT11_CIPHER_ALGORITHM = number;
export type DOT11_PHY_TYPE = number;
export type DOT11_OFFLOAD_TYPE = number;
export type DOT11_KEY_DIRECTION = number;
export type DOT11_SCAN_TYPE = number;
export type CH_DESCRIPTION_TYPE = number;
export type DOT11_UPDATE_IE_OP = number;
export type DOT11_RESET_TYPE = number;
export type DOT11_POWER_MODE = number;
export type DOT11_TEMP_TYPE = number;
export type DOT11_DIVERSITY_SUPPORT = number;
export type DOT11_HOP_ALGO_ADOPTED = number;
export type DOT11_AC_PARAM = number;
export type DOT11_DIRECTION = number;
export type DOT11_ASSOCIATION_STATE = number;
export type DOT11_DS_INFO = number;
export type DOT11_WPS_CONFIG_METHOD = number;
export type DOT11_WPS_DEVICE_PASSWORD_ID = number;
export type DOT11_ANQP_QUERY_RESULT = number;
export type DOT11_WFD_DISCOVER_TYPE = number;
export type DOT11_WFD_SCAN_TYPE = number;
export type DOT11_POWER_MODE_REASON = number;
export type DOT11_MANUFACTURING_TEST_TYPE = number;
export type DOT11_MANUFACTURING_SELF_TEST_TYPE = number;
export type DOT11_BAND = number;
export type DOT11_MANUFACTURING_CALLBACK_TYPE = number;
export type WLAN_CONNECTION_MODE = number;
export type WLAN_INTERFACE_STATE = number;
export type WLAN_ADHOC_NETWORK_STATE = number;
export type DOT11_RADIO_STATE = number;
export type WLAN_OPERATIONAL_STATE = number;
export type WLAN_INTERFACE_TYPE = number;
export type WLAN_POWER_SETTING = number;
export type WLAN_NOTIFICATION_ACM = number;
export type WLAN_NOTIFICATION_MSM = number;
export type WLAN_NOTIFICATION_SECURITY = number;
export type WLAN_OPCODE_VALUE_TYPE = number;
export type WLAN_INTF_OPCODE = number;
export type WLAN_AUTOCONF_OPCODE = number;
export type WLAN_IHV_CONTROL_TYPE = number;
export type WLAN_FILTER_LIST_TYPE = number;
export type WLAN_SECURABLE_OBJECT = number;
export type WFD_ROLE_TYPE = number;
export type WL_DISPLAY_PAGES = number;
export type WLAN_HOSTED_NETWORK_STATE = number;
export type WLAN_HOSTED_NETWORK_REASON = number;
export type WLAN_HOSTED_NETWORK_PEER_AUTH_STATE = number;
export type WLAN_HOSTED_NETWORK_NOTIFICATION_CODE = number;
export type WLAN_HOSTED_NETWORK_OPCODE = number;
export type ONEX_AUTH_IDENTITY = number;
export type ONEX_AUTH_STATUS = number;
export type ONEX_REASON_CODE = number;
export type ONEX_NOTIFICATION_TYPE = number;
export type ONEX_AUTH_RESTART_REASON = number;
export type ONEX_EAP_METHOD_BACKEND_SUPPORT = number;
export type DOT11_ADHOC_CIPHER_ALGORITHM = number;
export type DOT11_ADHOC_AUTH_ALGORITHM = number;
export type DOT11_ADHOC_NETWORK_CONNECTION_STATUS = number;
export type DOT11_ADHOC_CONNECT_FAIL_REASON = number;
export type DOT11EXT_IHV_CONNECTION_PHASE = number;
export type DOT11_MSONEX_RESULT = number;
export type DOT11EXT_IHV_INDICATION_TYPE = number;

// Constants
export const L2_REASON_CODE_DOT11_AC_BASE = 131072;
export const L2_REASON_CODE_DOT11_MSM_BASE = 196608;
export const L2_REASON_CODE_DOT11_SECURITY_BASE = 262144;
export const L2_REASON_CODE_ONEX_BASE = 327680;
export const L2_REASON_CODE_DOT3_AC_BASE = 393216;
export const L2_REASON_CODE_DOT3_MSM_BASE = 458752;
export const L2_REASON_CODE_PROFILE_BASE = 524288;
export const L2_REASON_CODE_IHV_BASE = 589824;
export const L2_REASON_CODE_WIMAX_BASE = 655360;
export const L2_REASON_CODE_RESERVED_BASE = 720896;
export const WLAN_REASON_CODE_SUCCESS = 0;
export const WLAN_REASON_CODE_UNKNOWN = 65537;
export const WLAN_REASON_CODE_RANGE_SIZE = 65536;
export const WLAN_REASON_CODE_BASE = 131072;
export const WLAN_REASON_CODE_AC_BASE = 131072;
export const WLAN_REASON_CODE_AC_CONNECT_BASE = 163840;
export const WLAN_REASON_CODE_AC_END = 196607;
export const WLAN_REASON_CODE_PROFILE_BASE = 524288;
export const WLAN_REASON_CODE_PROFILE_CONNECT_BASE = 557056;
export const WLAN_REASON_CODE_PROFILE_END = 589823;
export const WLAN_REASON_CODE_MSM_BASE = 196608;
export const WLAN_REASON_CODE_MSM_CONNECT_BASE = 229376;
export const WLAN_REASON_CODE_MSM_END = 262143;
export const WLAN_REASON_CODE_MSMSEC_BASE = 262144;
export const WLAN_REASON_CODE_MSMSEC_CONNECT_BASE = 294912;
export const WLAN_REASON_CODE_MSMSEC_END = 327679;
export const WLAN_REASON_CODE_RESERVED_BASE = 720896;
export const WLAN_REASON_CODE_RESERVED_END = 786431;
export const L2_PROFILE_MAX_NAME_LENGTH = 256;
export const L2_NOTIFICATION_SOURCE_NONE = 0;
export const L2_NOTIFICATION_SOURCE_DOT3_AUTO_CONFIG = 1;
export const L2_NOTIFICATION_SOURCE_SECURITY = 2;
export const L2_NOTIFICATION_SOURCE_ONEX = 4;
export const L2_NOTIFICATION_SOURCE_WLAN_ACM = 8;
export const L2_NOTIFICATION_SOURCE_WLAN_MSM = 16;
export const L2_NOTIFICATION_SOURCE_WLAN_SECURITY = 32;
export const L2_NOTIFICATION_SOURCE_WLAN_IHV = 64;
export const L2_NOTIFICATION_SOURCE_WLAN_HNWK = 128;
export const L2_NOTIFICATION_SOURCE_WCM = 256;
export const L2_NOTIFICATION_SOURCE_WCM_CSP = 512;
export const L2_NOTIFICATION_SOURCE_WFD = 1024;
export const L2_NOTIFICATION_SOURCE_WLAN_DEVICE_SERVICE = 2048;
export const L2_NOTIFICATION_SOURCE_ALL = 65535;
export const L2_NOTIFICATION_CODE_PUBLIC_BEGIN = 0;
export const L2_NOTIFICATION_CODE_GROUP_SIZE = 4096;
export const L2_REASON_CODE_GROUP_SIZE = 65536;
export const L2_REASON_CODE_GEN_BASE = 65536;
export const L2_REASON_CODE_SUCCESS = 0;
export const L2_REASON_CODE_UNKNOWN = 65537;
export const L2_REASON_CODE_PROFILE_MISSING = 1;
export const DOT11_BSSID_LIST_REVISION_1 = 1;
export const DOT11_HESSID_LENGTH = 6;
export const DOT11_RATE_SET_MAX_LENGTH = 126;
export const DOT11_WFD_SERVICE_NAME_MAX_LENGTH = 255;
export const DOT11_WFD_APS2_SERVICE_TYPE_MAX_LENGTH = 21;
export const DOT11_WFD_ASP2_INSTANCE_NAME_MAX_LENGTH = 63;
export const DOT11_WFD_SERVICE_INFORMATION_MAX_LENGTH = 65535;
export const DOT11_MAX_REQUESTED_SERVICE_INFORMATION_LENGTH = 255;
export const DOT11_WFD_SESSION_INFO_MAX_LENGTH = 144;
export const NDIS_PACKET_TYPE_802_11_DIRECTED_DATA = 1;
export const NDIS_PACKET_TYPE_802_11_BROADCAST_DATA = 8;
export const NDIS_PACKET_TYPE_802_11_MULTICAST_DATA = 2;
export const NDIS_PACKET_TYPE_802_11_ALL_MULTICAST_DATA = 4;
export const NDIS_PACKET_TYPE_802_11_PROMISCUOUS_DATA = 32;
export const DOT11_MAX_PDU_SIZE = 2346;
export const DOT11_MIN_PDU_SIZE = 256;
export const DOT11_MAX_NUM_DEFAULT_KEY = 4;
export const DOT11_MAX_NUM_DEFAULT_KEY_MFP = 6;
export const OID_DOT11_NDIS_START = 218170112;
export const OID_DOT11_OFFLOAD_CAPABILITY = 218170112;
export const DOT11_HW_WEP_SUPPORTED_TX = 1;
export const DOT11_HW_WEP_SUPPORTED_RX = 2;
export const DOT11_HW_FRAGMENTATION_SUPPORTED = 4;
export const DOT11_HW_DEFRAGMENTATION_SUPPORTED = 8;
export const DOT11_HW_MSDU_AUTH_SUPPORTED_TX = 16;
export const DOT11_HW_MSDU_AUTH_SUPPORTED_RX = 32;
export const DOT11_CONF_ALGO_WEP_RC4 = 1;
export const DOT11_CONF_ALGO_TKIP = 2;
export const DOT11_AUTH_ALGO_MICHAEL = 1;
export const OID_DOT11_CURRENT_OFFLOAD_CAPABILITY = 218170113;
export const OID_DOT11_WEP_OFFLOAD = 218170114;
export const OID_DOT11_WEP_UPLOAD = 218170115;
export const OID_DOT11_DEFAULT_WEP_OFFLOAD = 218170116;
export const OID_DOT11_DEFAULT_WEP_UPLOAD = 218170117;
export const OID_DOT11_MPDU_MAX_LENGTH = 218170118;
export const OID_DOT11_OPERATION_MODE_CAPABILITY = 218170119;
export const DOT11_OPERATION_MODE_UNKNOWN = 0;
export const DOT11_OPERATION_MODE_STATION = 1;
export const DOT11_OPERATION_MODE_AP = 2;
export const DOT11_OPERATION_MODE_EXTENSIBLE_STATION = 4;
export const DOT11_OPERATION_MODE_EXTENSIBLE_AP = 8;
export const DOT11_OPERATION_MODE_WFD_DEVICE = 16;
export const DOT11_OPERATION_MODE_WFD_GROUP_OWNER = 32;
export const DOT11_OPERATION_MODE_WFD_CLIENT = 64;
export const DOT11_OPERATION_MODE_MANUFACTURING = 1073741824;
export const DOT11_OPERATION_MODE_NETWORK_MONITOR = 2147483648;
export const OID_DOT11_CURRENT_OPERATION_MODE = 218170120;
export const OID_DOT11_CURRENT_PACKET_FILTER = 218170121;
export const DOT11_PACKET_TYPE_DIRECTED_CTRL = 1;
export const DOT11_PACKET_TYPE_DIRECTED_MGMT = 2;
export const DOT11_PACKET_TYPE_DIRECTED_DATA = 4;
export const DOT11_PACKET_TYPE_MULTICAST_CTRL = 8;
export const DOT11_PACKET_TYPE_MULTICAST_MGMT = 16;
export const DOT11_PACKET_TYPE_MULTICAST_DATA = 32;
export const DOT11_PACKET_TYPE_BROADCAST_CTRL = 64;
export const DOT11_PACKET_TYPE_BROADCAST_MGMT = 128;
export const DOT11_PACKET_TYPE_BROADCAST_DATA = 256;
export const DOT11_PACKET_TYPE_PROMISCUOUS_CTRL = 512;
export const DOT11_PACKET_TYPE_PROMISCUOUS_MGMT = 1024;
export const DOT11_PACKET_TYPE_PROMISCUOUS_DATA = 2048;
export const DOT11_PACKET_TYPE_ALL_MULTICAST_CTRL = 4096;
export const DOT11_PACKET_TYPE_ALL_MULTICAST_MGMT = 8192;
export const DOT11_PACKET_TYPE_ALL_MULTICAST_DATA = 16384;
export const OID_DOT11_ATIM_WINDOW = 218170122;
export const OID_DOT11_SCAN_REQUEST = 218170123;
export const OID_DOT11_CURRENT_PHY_TYPE = 218170124;
export const DOT11_PHY_TYPE_LIST_REVISION_1 = 1;
export const OID_DOT11_JOIN_REQUEST = 218170125;
export const DOT11_CAPABILITY_INFO_ESS = 1;
export const DOT11_CAPABILITY_INFO_IBSS = 2;
export const DOT11_CAPABILITY_INFO_CF_POLLABLE = 4;
export const DOT11_CAPABILITY_INFO_CF_POLL_REQ = 8;
export const DOT11_CAPABILITY_INFO_PRIVACY = 16;
export const DOT11_CAPABILITY_SHORT_PREAMBLE = 32;
export const DOT11_CAPABILITY_PBCC = 64;
export const DOT11_CAPABILITY_CHANNEL_AGILITY = 128;
export const DOT11_CAPABILITY_SHORT_SLOT_TIME = 1024;
export const DOT11_CAPABILITY_DSSSOFDM = 8192;
export const OID_DOT11_START_REQUEST = 218170126;
export const OID_DOT11_UPDATE_IE = 218170127;
export const OID_DOT11_RESET_REQUEST = 218170128;
export const OID_DOT11_NIC_POWER_STATE = 218170129;
export const OID_DOT11_OPTIONAL_CAPABILITY = 218170130;
export const OID_DOT11_CURRENT_OPTIONAL_CAPABILITY = 218170131;
export const OID_DOT11_STATION_ID = 218170132;
export const OID_DOT11_MEDIUM_OCCUPANCY_LIMIT = 218170133;
export const OID_DOT11_CF_POLLABLE = 218170134;
export const OID_DOT11_CFP_PERIOD = 218170135;
export const OID_DOT11_CFP_MAX_DURATION = 218170136;
export const OID_DOT11_POWER_MGMT_MODE = 218170137;
export const DOT11_POWER_SAVE_LEVEL_MAX_PSP = 1;
export const DOT11_POWER_SAVE_LEVEL_FAST_PSP = 2;
export const OID_DOT11_OPERATIONAL_RATE_SET = 218170138;
export const OID_DOT11_BEACON_PERIOD = 218170139;
export const OID_DOT11_DTIM_PERIOD = 218170140;
export const OID_DOT11_WEP_ICV_ERROR_COUNT = 218170141;
export const OID_DOT11_MAC_ADDRESS = 218170142;
export const OID_DOT11_RTS_THRESHOLD = 218170143;
export const OID_DOT11_SHORT_RETRY_LIMIT = 218170144;
export const OID_DOT11_LONG_RETRY_LIMIT = 218170145;
export const OID_DOT11_FRAGMENTATION_THRESHOLD = 218170146;
export const OID_DOT11_MAX_TRANSMIT_MSDU_LIFETIME = 218170147;
export const OID_DOT11_MAX_RECEIVE_LIFETIME = 218170148;
export const OID_DOT11_COUNTERS_ENTRY = 218170149;
export const OID_DOT11_SUPPORTED_PHY_TYPES = 218170150;
export const OID_DOT11_CURRENT_REG_DOMAIN = 218170151;
export const DOT11_REG_DOMAIN_OTHER = 0;
export const DOT11_REG_DOMAIN_FCC = 16;
export const DOT11_REG_DOMAIN_DOC = 32;
export const DOT11_REG_DOMAIN_ETSI = 48;
export const DOT11_REG_DOMAIN_SPAIN = 49;
export const DOT11_REG_DOMAIN_FRANCE = 50;
export const DOT11_REG_DOMAIN_MKK = 64;
export const OID_DOT11_TEMP_TYPE = 218170152;
export const OID_DOT11_CURRENT_TX_ANTENNA = 218170153;
export const OID_DOT11_DIVERSITY_SUPPORT = 218170154;
export const OID_DOT11_CURRENT_RX_ANTENNA = 218170155;
export const OID_DOT11_SUPPORTED_POWER_LEVELS = 218170156;
export const OID_DOT11_CURRENT_TX_POWER_LEVEL = 218170157;
export const OID_DOT11_HOP_TIME = 218170158;
export const OID_DOT11_CURRENT_CHANNEL_NUMBER = 218170159;
export const OID_DOT11_MAX_DWELL_TIME = 218170160;
export const OID_DOT11_CURRENT_DWELL_TIME = 218170161;
export const OID_DOT11_CURRENT_SET = 218170162;
export const OID_DOT11_CURRENT_PATTERN = 218170163;
export const OID_DOT11_CURRENT_INDEX = 218170164;
export const OID_DOT11_CURRENT_CHANNEL = 218170165;
export const OID_DOT11_CCA_MODE_SUPPORTED = 218170166;
export const DOT11_CCA_MODE_ED_ONLY = 1;
export const DOT11_CCA_MODE_CS_ONLY = 2;
export const DOT11_CCA_MODE_ED_and_CS = 4;
export const DOT11_CCA_MODE_CS_WITH_TIMER = 8;
export const DOT11_CCA_MODE_HRCS_AND_ED = 16;
export const OID_DOT11_CURRENT_CCA_MODE = 218170167;
export const OID_DOT11_ED_THRESHOLD = 218170168;
export const OID_DOT11_CCA_WATCHDOG_TIMER_MAX = 218170169;
export const OID_DOT11_CCA_WATCHDOG_COUNT_MAX = 218170170;
export const OID_DOT11_CCA_WATCHDOG_TIMER_MIN = 218170171;
export const OID_DOT11_CCA_WATCHDOG_COUNT_MIN = 218170172;
export const OID_DOT11_REG_DOMAINS_SUPPORT_VALUE = 218170173;
export const OID_DOT11_SUPPORTED_TX_ANTENNA = 218170174;
export const OID_DOT11_SUPPORTED_RX_ANTENNA = 218170175;
export const OID_DOT11_DIVERSITY_SELECTION_RX = 218170176;
export const OID_DOT11_SUPPORTED_DATA_RATES_VALUE = 218170177;
export const MAX_NUM_SUPPORTED_RATES = 8;
export const MAX_NUM_SUPPORTED_RATES_V2 = 255;
export const OID_DOT11_CURRENT_FREQUENCY = 218170178;
export const OID_DOT11_TI_THRESHOLD = 218170179;
export const OID_DOT11_FREQUENCY_BANDS_SUPPORTED = 218170180;
export const DOT11_FREQUENCY_BANDS_LOWER = 1;
export const DOT11_FREQUENCY_BANDS_MIDDLE = 2;
export const DOT11_FREQUENCY_BANDS_UPPER = 4;
export const OID_DOT11_SHORT_PREAMBLE_OPTION_IMPLEMENTED = 218170181;
export const OID_DOT11_PBCC_OPTION_IMPLEMENTED = 218170182;
export const OID_DOT11_CHANNEL_AGILITY_PRESENT = 218170183;
export const OID_DOT11_CHANNEL_AGILITY_ENABLED = 218170184;
export const OID_DOT11_HR_CCA_MODE_SUPPORTED = 218170185;
export const DOT11_HR_CCA_MODE_ED_ONLY = 1;
export const DOT11_HR_CCA_MODE_CS_ONLY = 2;
export const DOT11_HR_CCA_MODE_CS_AND_ED = 4;
export const DOT11_HR_CCA_MODE_CS_WITH_TIMER = 8;
export const DOT11_HR_CCA_MODE_HRCS_AND_ED = 16;
export const OID_DOT11_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED = 218170186;
export const OID_DOT11_MULTI_DOMAIN_CAPABILITY_ENABLED = 218170187;
export const OID_DOT11_COUNTRY_STRING = 218170188;
export const OID_DOT11_MULTI_DOMAIN_CAPABILITY = 218170189;
export const OID_DOT11_EHCC_PRIME_RADIX = 218170190;
export const OID_DOT11_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX = 218170191;
export const OID_DOT11_EHCC_CAPABILITY_IMPLEMENTED = 218170192;
export const OID_DOT11_EHCC_CAPABILITY_ENABLED = 218170193;
export const OID_DOT11_HOP_ALGORITHM_ADOPTED = 218170194;
export const OID_DOT11_RANDOM_TABLE_FLAG = 218170195;
export const OID_DOT11_NUMBER_OF_HOPPING_SETS = 218170196;
export const OID_DOT11_HOP_MODULUS = 218170197;
export const OID_DOT11_HOP_OFFSET = 218170198;
export const OID_DOT11_HOPPING_PATTERN = 218170199;
export const OID_DOT11_RANDOM_TABLE_FIELD_NUMBER = 218170200;
export const OID_DOT11_WPA_TSC = 218170201;
export const OID_DOT11_RSSI_RANGE = 218170202;
export const OID_DOT11_RF_USAGE = 218170203;
export const OID_DOT11_NIC_SPECIFIC_EXTENSION = 218170204;
export const OID_DOT11_AP_JOIN_REQUEST = 218170205;
export const OID_DOT11_ERP_PBCC_OPTION_IMPLEMENTED = 218170206;
export const OID_DOT11_ERP_PBCC_OPTION_ENABLED = 218170207;
export const OID_DOT11_DSSS_OFDM_OPTION_IMPLEMENTED = 218170208;
export const OID_DOT11_DSSS_OFDM_OPTION_ENABLED = 218170209;
export const OID_DOT11_SHORT_SLOT_TIME_OPTION_IMPLEMENTED = 218170210;
export const OID_DOT11_SHORT_SLOT_TIME_OPTION_ENABLED = 218170211;
export const OID_DOT11_MAX_MAC_ADDRESS_STATES = 218170212;
export const OID_DOT11_RECV_SENSITIVITY_LIST = 218170213;
export const OID_DOT11_WME_IMPLEMENTED = 218170214;
export const OID_DOT11_WME_ENABLED = 218170215;
export const OID_DOT11_WME_AC_PARAMETERS = 218170216;
export const OID_DOT11_WME_UPDATE_IE = 218170217;
export const OID_DOT11_QOS_TX_QUEUES_SUPPORTED = 218170218;
export const OID_DOT11_QOS_TX_DURATION = 218170219;
export const OID_DOT11_QOS_TX_MEDIUM_TIME = 218170220;
export const OID_DOT11_SUPPORTED_OFDM_FREQUENCY_LIST = 218170221;
export const OID_DOT11_SUPPORTED_DSSS_CHANNEL_LIST = 218170222;
export const DOT11_BSS_ENTRY_BYTE_ARRAY_REVISION_1 = 1;
export const DOT11_POWER_SAVING_NO_POWER_SAVING = 0;
export const DOT11_POWER_SAVING_FAST_PSP = 8;
export const DOT11_POWER_SAVING_MAX_PSP = 16;
export const DOT11_POWER_SAVING_MAXIMUM_LEVEL = 24;
export const DOT11_SSID_LIST_REVISION_1 = 1;
export const DOT11_MAC_ADDRESS_LIST_REVISION_1 = 1;
export const DOT11_PMKID_LIST_REVISION_1 = 1;
export const DOT11_STATISTICS_REVISION_1 = 1;
export const DOT11_EXEMPT_NO_EXEMPTION = 0;
export const DOT11_EXEMPT_ALWAYS = 1;
export const DOT11_EXEMPT_ON_KEY_MAPPING_KEY_UNAVAILABLE = 2;
export const DOT11_EXEMPT_UNICAST = 1;
export const DOT11_EXEMPT_MULTICAST = 2;
export const DOT11_EXEMPT_BOTH = 3;
export const DOT11_PRIVACY_EXEMPTION_LIST_REVISION_1 = 1;
export const DOT11_AUTH_ALGORITHM_LIST_REVISION_1 = 1;
export const DOT11_AUTH_CIPHER_PAIR_LIST_REVISION_1 = 1;
export const DOT11_CIPHER_ALGORITHM_LIST_REVISION_1 = 1;
export const DOT11_CIPHER_DEFAULT_KEY_VALUE_REVISION_1 = 1;
export const DOT11_CIPHER_KEY_MAPPING_KEY_VALUE_BYTE_ARRAY_REVISION_1 = 1;
export const DOT11_ASSOCIATION_INFO_LIST_REVISION_1 = 1;
export const DOT11_PHY_ID_LIST_REVISION_1 = 1;
export const DOT11_EXTSTA_CAPABILITY_REVISION_1 = 1;
export const DOT11_DATA_RATE_MAPPING_TABLE_REVISION_1 = 1;
export const DOT11_COUNTRY_OR_REGION_STRING_LIST_REVISION_1 = 1;
export const DOT11_PORT_STATE_NOTIFICATION_REVISION_1 = 1;
export const DOT11_IBSS_PARAMS_REVISION_1 = 1;
export const DOT11_QOS_PARAMS_REVISION_1 = 1;
export const DOT11_ASSOCIATION_PARAMS_REVISION_1 = 1;
export const DOT11_MAX_NUM_OF_FRAGMENTS = 16;
export const DOT11_PRIORITY_CONTENTION = 0;
export const DOT11_PRIORITY_CONTENTION_FREE = 1;
export const DOT11_SERVICE_CLASS_REORDERABLE_MULTICAST = 0;
export const DOT11_SERVICE_CLASS_STRICTLY_ORDERED = 1;
export const DOT11_FLAGS_80211B_SHORT_PREAMBLE = 1;
export const DOT11_FLAGS_80211B_PBCC = 2;
export const DOT11_FLAGS_80211B_CHANNEL_AGILITY = 4;
export const DOT11_FLAGS_PS_ON = 8;
export const DOT11_FLAGS_80211G_DSSS_OFDM = 16;
export const DOT11_FLAGS_80211G_USE_PROTECTION = 32;
export const DOT11_FLAGS_80211G_NON_ERP_PRESENT = 64;
export const DOT11_FLAGS_80211G_BARKER_PREAMBLE_MODE = 128;
export const DOT11_WME_PACKET = 256;
export const DOT11_PHY_ATTRIBUTES_REVISION_1 = 1;
export const DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_OID_SUPPORTED = 1;
export const DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_CERTIFIED = 2;
export const DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_RESERVED = 12;
export const DOT11_EXTSTA_ATTRIBUTES_REVISION_1 = 1;
export const DOT11_EXTSTA_ATTRIBUTES_REVISION_2 = 2;
export const DOT11_EXTSTA_ATTRIBUTES_REVISION_3 = 3;
export const DOT11_EXTSTA_ATTRIBUTES_REVISION_4 = 4;
export const DOT11_SEND_CONTEXT_REVISION_1 = 1;
export const DOT11_RECV_CONTEXT_REVISION_1 = 1;
export const DOT11_STATUS_SUCCESS = 1;
export const DOT11_STATUS_RETRY_LIMIT_EXCEEDED = 2;
export const DOT11_STATUS_UNSUPPORTED_PRIORITY = 4;
export const DOT11_STATUS_UNSUPPORTED_SERVICE_CLASS = 8;
export const DOT11_STATUS_UNAVAILABLE_PRIORITY = 16;
export const DOT11_STATUS_UNAVAILABLE_SERVICE_CLASS = 32;
export const DOT11_STATUS_XMIT_MSDU_TIMER_EXPIRED = 64;
export const DOT11_STATUS_UNAVAILABLE_BSS = 128;
export const DOT11_STATUS_EXCESSIVE_DATA_LENGTH = 256;
export const DOT11_STATUS_ENCRYPTION_FAILED = 512;
export const DOT11_STATUS_WEP_KEY_UNAVAILABLE = 1024;
export const DOT11_STATUS_ICV_VERIFIED = 2048;
export const DOT11_STATUS_PACKET_REASSEMBLED = 4096;
export const DOT11_STATUS_PACKET_NOT_REASSEMBLED = 8192;
export const DOT11_STATUS_GENERATE_AUTH_FAILED = 16384;
export const DOT11_STATUS_AUTH_NOT_VERIFIED = 32768;
export const DOT11_STATUS_AUTH_VERIFIED = 65536;
export const DOT11_STATUS_AUTH_FAILED = 131072;
export const DOT11_STATUS_PS_LIFETIME_EXPIRED = 262144;
export const DOT11_STATUS_RESET_CONFIRM = 4;
export const DOT11_STATUS_SCAN_CONFIRM = 1;
export const DOT11_STATUS_JOIN_CONFIRM = 2;
export const DOT11_STATUS_START_CONFIRM = 3;
export const DOT11_STATUS_AP_JOIN_CONFIRM = 5;
export const DOT11_STATUS_MPDU_MAX_LENGTH_CHANGED = 6;
export const DOT11_MPDU_MAX_LENGTH_INDICATION_REVISION_1 = 1;
export const DOT11_ASSOCIATION_START_PARAMETERS_REVISION_1 = 1;
export const DOT11_ENCAP_RFC_1042 = 1;
export const DOT11_ENCAP_802_1H = 2;
export const DOT11_ASSOC_STATUS_SUCCESS = 0;
export const DOT11_ASSOCIATION_COMPLETION_PARAMETERS_REVISION_1 = 1;
export const DOT11_ASSOCIATION_COMPLETION_PARAMETERS_REVISION_2 = 2;
export const DOT11_CONNECTION_START_PARAMETERS_REVISION_1 = 1;
export const DOT11_CONNECTION_STATUS_SUCCESS = 0;
export const DOT11_CONNECTION_COMPLETION_PARAMETERS_REVISION_1 = 1;
export const DOT11_ROAMING_START_PARAMETERS_REVISION_1 = 1;
export const DOT11_ROAMING_COMPLETION_PARAMETERS_REVISION_1 = 1;
export const DOT11_DISASSOCIATION_PARAMETERS_REVISION_1 = 1;
export const DOT11_TKIPMIC_FAILURE_PARAMETERS_REVISION_1 = 1;
export const DOT11_PMKID_CANDIDATE_LIST_PARAMETERS_REVISION_1 = 1;
export const DOT11_PHY_STATE_PARAMETERS_REVISION_1 = 1;
export const DOT11_LINK_QUALITY_PARAMETERS_REVISION_1 = 1;
export const DOT11_EXTSTA_SEND_CONTEXT_REVISION_1 = 1;
export const DOT11_EXTSTA_RECV_CONTEXT_REVISION_1 = 1;
export const OID_DOT11_PRIVATE_OIDS_START = 218171136;
export const OID_DOT11_CURRENT_ADDRESS = 218171138;
export const OID_DOT11_PERMANENT_ADDRESS = 218171139;
export const OID_DOT11_MULTICAST_LIST = 218171140;
export const OID_DOT11_MAXIMUM_LIST_SIZE = 218171141;
export const DOT11_EXTAP_ATTRIBUTES_REVISION_1 = 1;
export const DOT11_INCOMING_ASSOC_STARTED_PARAMETERS_REVISION_1 = 1;
export const DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS_REVISION_1 = 1;
export const DOT11_ASSOC_ERROR_SOURCE_OS = 0;
export const DOT11_ASSOC_ERROR_SOURCE_REMOTE = 1;
export const DOT11_ASSOC_ERROR_SOURCE_OTHER = 255;
export const DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS_REVISION_1 = 1;
export const DOT11_STOP_AP_PARAMETERS_REVISION_1 = 1;
export const DOT11_STOP_AP_REASON_FREQUENCY_NOT_AVAILABLE = 1;
export const DOT11_STOP_AP_REASON_CHANNEL_NOT_AVAILABLE = 2;
export const DOT11_STOP_AP_REASON_AP_ACTIVE = 3;
export const DOT11_STOP_AP_REASON_IHV_START = 4278190080;
export const DOT11_STOP_AP_REASON_IHV_END = 4294967295;
export const DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS_REVISION_1 = 1;
export const DOT11_CAN_SUSTAIN_AP_PARAMETERS_REVISION_1 = 1;
export const DOT11_CAN_SUSTAIN_AP_REASON_IHV_START = 4278190080;
export const DOT11_CAN_SUSTAIN_AP_REASON_IHV_END = 4294967295;
export const DOT11_AVAILABLE_CHANNEL_LIST_REVISION_1 = 1;
export const DOT11_AVAILABLE_FREQUENCY_LIST_REVISION_1 = 1;
export const DOT11_DISASSOCIATE_PEER_REQUEST_REVISION_1 = 1;
export const DOT11_INCOMING_ASSOC_DECISION_REVISION_1 = 1;
export const DOT11_INCOMING_ASSOC_DECISION_REVISION_2 = 2;
export const DOT11_ADDITIONAL_IE_REVISION_1 = 1;
export const DOT11_EXTAP_SEND_CONTEXT_REVISION_1 = 1;
export const DOT11_EXTAP_RECV_CONTEXT_REVISION_1 = 1;
export const DOT11_PEER_INFO_LIST_REVISION_1 = 1;
export const DOT11_VWIFI_COMBINATION_REVISION_1 = 1;
export const DOT11_VWIFI_COMBINATION_REVISION_2 = 2;
export const DOT11_VWIFI_COMBINATION_REVISION_3 = 3;
export const DOT11_VWIFI_ATTRIBUTES_REVISION_1 = 1;
export const DOT11_MAC_PARAMETERS_REVISION_1 = 1;
export const DOT11_WFD_ATTRIBUTES_REVISION_1 = 1;
export const DOT11_WFD_STATUS_SUCCESS = 0;
export const DOT11_WFD_STATUS_FAILED_INFORMATION_IS_UNAVAILABLE = 1;
export const DOT11_WFD_STATUS_FAILED_INCOMPATIBLE_PARAMETERS = 2;
export const DOT11_WFD_STATUS_FAILED_LIMIT_REACHED = 3;
export const DOT11_WFD_STATUS_FAILED_INVALID_PARAMETERS = 4;
export const DOT11_WFD_STATUS_FAILED_UNABLE_TO_ACCOMODATE_REQUEST = 5;
export const DOT11_WFD_STATUS_FAILED_PREVIOUS_PROTOCOL_ERROR = 6;
export const DOT11_WFD_STATUS_FAILED_NO_COMMON_CHANNELS = 7;
export const DOT11_WFD_STATUS_FAILED_UNKNOWN_WFD_GROUP = 8;
export const DOT11_WFD_STATUS_FAILED_MATCHING_MAX_INTENT = 9;
export const DOT11_WFD_STATUS_FAILED_INCOMPATIBLE_PROVISIONING_METHOD = 10;
export const DOT11_WFD_STATUS_FAILED_REJECTED_BY_USER = 11;
export const DOT11_WFD_STATUS_SUCCESS_ACCEPTED_BY_USER = 12;
export const DOT11_WFD_MINOR_REASON_SUCCESS = 0;
export const DOT11_WFD_MINOR_REASON_DISASSOCIATED_FROM_WLAN_CROSS_CONNECTION_POLICY = 1;
export const DOT11_WFD_MINOR_REASON_DISASSOCIATED_NOT_MANAGED_INFRASTRUCTURE_CAPABLE = 2;
export const DOT11_WFD_MINOR_REASON_DISASSOCIATED_WFD_COEXISTENCE_POLICY = 3;
export const DOT11_WFD_MINOR_REASON_DISASSOCIATED_INFRASTRUCTURE_MANAGED_POLICY = 4;
export const DOT11_WPS_VERSION_1_0 = 1;
export const DOT11_WPS_VERSION_2_0 = 2;
export const DOT11_WFD_DEVICE_CAPABILITY_SERVICE_DISCOVERY = 1;
export const DOT11_WFD_DEVICE_CAPABILITY_P2P_CLIENT_DISCOVERABILITY = 2;
export const DOT11_WFD_DEVICE_CAPABILITY_CONCURRENT_OPERATION = 4;
export const DOT11_WFD_DEVICE_CAPABILITY_P2P_INFRASTRUCTURE_MANAGED = 8;
export const DOT11_WFD_DEVICE_CAPABILITY_P2P_DEVICE_LIMIT = 16;
export const DOT11_WFD_DEVICE_CAPABILITY_P2P_INVITATION_PROCEDURE = 32;
export const DOT11_WFD_DEVICE_CAPABILITY_RESERVED_6 = 64;
export const DOT11_WFD_DEVICE_CAPABILITY_RESERVED_7 = 128;
export const DOT11_WFD_GROUP_CAPABILITY_NONE = 0;
export const DOT11_WFD_GROUP_CAPABILITY_GROUP_OWNER = 1;
export const DOT11_WFD_GROUP_CAPABILITY_PERSISTENT_GROUP = 2;
export const DOT11_WFD_GROUP_CAPABILITY_GROUP_LIMIT_REACHED = 4;
export const DOT11_WFD_GROUP_CAPABILITY_INTRABSS_DISTRIBUTION_SUPPORTED = 8;
export const DOT11_WFD_GROUP_CAPABILITY_CROSS_CONNECTION_SUPPORTED = 16;
export const DOT11_WFD_GROUP_CAPABILITY_PERSISTENT_RECONNECT_SUPPORTED = 32;
export const DOT11_WFD_GROUP_CAPABILITY_IN_GROUP_FORMATION = 64;
export const DOT11_WFD_GROUP_CAPABILITY_RESERVED_7 = 128;
export const DOT11_WFD_GROUP_CAPABILITY_EAPOL_KEY_IP_ADDRESS_ALLOCATION_SUPPORTED = 128;
export const DOT11_WPS_DEVICE_NAME_MAX_LENGTH = 32;
export const DOT11_WPS_MAX_PASSKEY_LENGTH = 8;
export const DOT11_WPS_MAX_MODEL_NAME_LENGTH = 32;
export const DOT11_WPS_MAX_MODEL_NUMBER_LENGTH = 32;
export const WFDSVC_CONNECTION_CAPABILITY_NEW = 1;
export const WFDSVC_CONNECTION_CAPABILITY_CLIENT = 2;
export const WFDSVC_CONNECTION_CAPABILITY_GO = 4;
export const DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS_REVISION_1 = 1;
export const DOT11_WFD_DISCOVER_COMPLETE_MAX_LIST_SIZE = 128;
export const DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;
export const DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS_REVISION_1 = 1;
export const DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;
export const DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS_REVISION_1 = 1;
export const DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;
export const DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS_REVISION_1 = 1;
export const DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;
export const DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS_REVISION_1 = 1;
export const DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;
export const DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS_REVISION_1 = 1;
export const DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;
export const DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS_REVISION_1 = 1;
export const DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;
export const DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS_REVISION_1 = 1;
export const DOT11_ANQP_QUERY_COMPLETE_PARAMETERS_REVISION_1 = 1;
export const DOT11_WFD_DEVICE_CAPABILITY_CONFIG_REVISION_1 = 1;
export const DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_REVISION_1 = 1;
export const DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_REVISION_2 = 2;
export const DOT11_WFD_DEVICE_INFO_REVISION_1 = 1;
export const DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST_REVISION_1 = 1;
export const DISCOVERY_FILTER_BITMASK_DEVICE = 1;
export const DISCOVERY_FILTER_BITMASK_GO = 2;
export const DISCOVERY_FILTER_BITMASK_ANY = 15;
export const DOT11_WFD_DISCOVER_REQUEST_REVISION_1 = 1;
export const DOT11_DEVICE_ENTRY_BYTE_ARRAY_REVISION_1 = 1;
export const DOT11_WFD_DEVICE_NOT_DISCOVERABLE = 0;
export const DOT11_WFD_DEVICE_AUTO_AVAILABILITY = 16;
export const DOT11_WFD_DEVICE_HIGH_AVAILABILITY = 24;
export const DOT11_WFD_ADDITIONAL_IE_REVISION_1 = 1;
export const DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS_REVISION_1 = 1;
export const DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS_REVISION_1 = 1;
export const DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS_REVISION_1 = 1;
export const DOT11_SEND_INVITATION_REQUEST_PARAMETERS_REVISION_1 = 1;
export const DOT11_SEND_INVITATION_RESPONSE_PARAMETERS_REVISION_1 = 1;
export const DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS_REVISION_1 = 1;
export const DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS_REVISION_1 = 1;
export const DOT11_WFD_DEVICE_LISTEN_CHANNEL_REVISION_1 = 1;
export const DOT11_WFD_GROUP_START_PARAMETERS_REVISION_1 = 1;
export const DOT11_WFD_GROUP_JOIN_PARAMETERS_REVISION_1 = 1;
export const DOT11_POWER_MGMT_AUTO_MODE_ENABLED_REVISION_1 = 1;
export const DOT11_POWER_MGMT_MODE_STATUS_INFO_REVISION_1 = 1;
export const DOT11_MAX_CHANNEL_HINTS = 4;
export const DOT11_INVALID_CHANNEL_NUMBER = 0;
export const DOT11_NLO_FLAG_STOP_NLO_INDICATION = 1;
export const DOT11_NLO_FLAG_SCAN_ON_AOAC_PLATFORM = 2;
export const DOT11_NLO_FLAG_SCAN_AT_SYSTEM_RESUME = 4;
export const DOT11_OFFLOAD_NETWORK_LIST_REVISION_1 = 1;
export const DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS_REVISION_1 = 1;
export const DOT11_MANUFACTURING_TEST_REVISION_1 = 1;
export const DOT11_MANUFACTURING_CALLBACK_REVISION_1 = 1;
export const DOT11_SSID_MAX_LENGTH = 32;
export const DOT11_OI_MAX_LENGTH = 5;
export const DOT11_OI_MIN_LENGTH = 3;
export const DevProp_PciRootBus_SecondaryInterface_PciConventional = 0;
export const DevProp_PciRootBus_SecondaryInterface_PciXMode1 = 1;
export const DevProp_PciRootBus_SecondaryInterface_PciXMode2 = 2;
export const DevProp_PciRootBus_SecondaryInterface_PciExpress = 3;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_Conventional_33Mhz = 0;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_Conventional_66Mhz = 1;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_66Mhz = 2;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_100Mhz = 3;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_133Mhz = 4;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_66Mhz = 5;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_100Mhz = 6;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_133Mhz = 7;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_66Mhz = 8;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_100Mhz = 9;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_133Mhz = 10;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_66Mhz = 11;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_100Mhz = 12;
export const DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_133Mhz = 13;
export const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_Conventional_33Mhz = 1;
export const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_Conventional_66Mhz = 2;
export const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_66Mhz = 4;
export const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_133Mhz = 8;
export const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_266Mhz = 16;
export const DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_533Mhz = 32;
export const DevProp_PciRootBus_BusWidth_32Bits = 0;
export const DevProp_PciRootBus_BusWidth_64Bits = 1;
export const DevProp_PciDevice_DeviceType_PciConventional = 0;
export const DevProp_PciDevice_DeviceType_PciX = 1;
export const DevProp_PciDevice_DeviceType_PciExpressEndpoint = 2;
export const DevProp_PciDevice_DeviceType_PciExpressLegacyEndpoint = 3;
export const DevProp_PciDevice_DeviceType_PciExpressRootComplexIntegratedEndpoint = 4;
export const DevProp_PciDevice_DeviceType_PciExpressTreatedAsPci = 5;
export const DevProp_PciDevice_BridgeType_PciConventional = 6;
export const DevProp_PciDevice_BridgeType_PciX = 7;
export const DevProp_PciDevice_BridgeType_PciExpressRootPort = 8;
export const DevProp_PciDevice_BridgeType_PciExpressUpstreamSwitchPort = 9;
export const DevProp_PciDevice_BridgeType_PciExpressDownstreamSwitchPort = 10;
export const DevProp_PciDevice_BridgeType_PciExpressToPciXBridge = 11;
export const DevProp_PciDevice_BridgeType_PciXToExpressBridge = 12;
export const DevProp_PciDevice_BridgeType_PciExpressTreatedAsPci = 13;
export const DevProp_PciDevice_BridgeType_PciExpressEventCollector = 14;
export const DevProp_PciDevice_CurrentSpeedAndMode_Pci_Conventional_33MHz = 0;
export const DevProp_PciDevice_CurrentSpeedAndMode_Pci_Conventional_66MHz = 1;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode_Conventional_Pci = 0;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_66Mhz = 1;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_100Mhz = 2;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_133MHZ = 3;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_66Mhz = 5;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_100Mhz = 6;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_133Mhz = 7;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_66MHz = 9;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_100MHz = 10;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_133MHz = 11;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_66MHz = 13;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_100MHz = 14;
export const DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_133MHz = 15;
export const DevProp_PciExpressDevice_PayloadOrRequestSize_128Bytes = 0;
export const DevProp_PciExpressDevice_PayloadOrRequestSize_256Bytes = 1;
export const DevProp_PciExpressDevice_PayloadOrRequestSize_512Bytes = 2;
export const DevProp_PciExpressDevice_PayloadOrRequestSize_1024Bytes = 3;
export const DevProp_PciExpressDevice_PayloadOrRequestSize_2048Bytes = 4;
export const DevProp_PciExpressDevice_PayloadOrRequestSize_4096Bytes = 5;
export const DevProp_PciExpressDevice_LinkSpeed_TwoAndHalf_Gbps = 1;
export const DevProp_PciExpressDevice_LinkSpeed_Five_Gbps = 2;
export const DevProp_PciExpressDevice_LinkWidth_By_1 = 1;
export const DevProp_PciExpressDevice_LinkWidth_By_2 = 2;
export const DevProp_PciExpressDevice_LinkWidth_By_4 = 4;
export const DevProp_PciExpressDevice_LinkWidth_By_8 = 8;
export const DevProp_PciExpressDevice_LinkWidth_By_12 = 12;
export const DevProp_PciExpressDevice_LinkWidth_By_16 = 16;
export const DevProp_PciExpressDevice_LinkWidth_By_32 = 32;
export const DevProp_PciExpressDevice_Spec_Version_10 = 1;
export const DevProp_PciExpressDevice_Spec_Version_11 = 2;
export const DevProp_PciDevice_InterruptType_LineBased = 1;
export const DevProp_PciDevice_InterruptType_Msi = 2;
export const DevProp_PciDevice_InterruptType_MsiX = 4;
export const DevProp_PciDevice_SriovSupport_Ok = 0;
export const DevProp_PciDevice_SriovSupport_MissingAcs = 1;
export const DevProp_PciDevice_SriovSupport_MissingPfDriver = 2;
export const DevProp_PciDevice_SriovSupport_NoBusResource = 3;
export const DevProp_PciDevice_SriovSupport_DidntGetVfBarSpace = 4;
export const DevProp_PciDevice_AcsSupport_Present = 0;
export const DevProp_PciDevice_AcsSupport_NotNeeded = 1;
export const DevProp_PciDevice_AcsSupport_Missing = 2;
export const DevProp_PciDevice_AcsCompatibleUpHierarchy_NotSupported = 0;
export const DevProp_PciDevice_AcsCompatibleUpHierarchy_SingleFunctionSupported = 1;
export const DevProp_PciDevice_AcsCompatibleUpHierarchy_NoP2PSupported = 2;
export const DevProp_PciDevice_AcsCompatibleUpHierarchy_Supported = 3;
export const DevProp_PciDevice_AcsCompatibleUpHierarchy_Enhanced = 4;
export const WLAN_API_VERSION_1_0 = 1;
export const WLAN_API_VERSION_2_0 = 2;
export const WLAN_API_VERSION = 2;
export const WLAN_MAX_NAME_LENGTH = 256;
export const WLAN_PROFILE_GROUP_POLICY = 1;
export const WLAN_PROFILE_USER = 2;
export const WLAN_PROFILE_GET_PLAINTEXT_KEY = 4;
export const WLAN_PROFILE_CONNECTION_MODE_SET_BY_CLIENT = 65536;
export const WLAN_PROFILE_CONNECTION_MODE_AUTO = 131072;
export const DOT11_PSD_IE_MAX_DATA_SIZE = 240;
export const DOT11_PSD_IE_MAX_ENTRY_NUMBER = 5;
export const WLAN_REASON_CODE_NETWORK_NOT_COMPATIBLE = 131073;
export const WLAN_REASON_CODE_PROFILE_NOT_COMPATIBLE = 131074;
export const WLAN_REASON_CODE_NO_AUTO_CONNECTION = 163841;
export const WLAN_REASON_CODE_NOT_VISIBLE = 163842;
export const WLAN_REASON_CODE_GP_DENIED = 163843;
export const WLAN_REASON_CODE_USER_DENIED = 163844;
export const WLAN_REASON_CODE_BSS_TYPE_NOT_ALLOWED = 163845;
export const WLAN_REASON_CODE_IN_FAILED_LIST = 163846;
export const WLAN_REASON_CODE_IN_BLOCKED_LIST = 163847;
export const WLAN_REASON_CODE_SSID_LIST_TOO_LONG = 163848;
export const WLAN_REASON_CODE_CONNECT_CALL_FAIL = 163849;
export const WLAN_REASON_CODE_SCAN_CALL_FAIL = 163850;
export const WLAN_REASON_CODE_NETWORK_NOT_AVAILABLE = 163851;
export const WLAN_REASON_CODE_PROFILE_CHANGED_OR_DELETED = 163852;
export const WLAN_REASON_CODE_KEY_MISMATCH = 163853;
export const WLAN_REASON_CODE_USER_NOT_RESPOND = 163854;
export const WLAN_REASON_CODE_AP_PROFILE_NOT_ALLOWED_FOR_CLIENT = 163855;
export const WLAN_REASON_CODE_AP_PROFILE_NOT_ALLOWED = 163856;
export const WLAN_REASON_CODE_HOTSPOT2_PROFILE_DENIED = 163857;
export const WLAN_REASON_CODE_INVALID_PROFILE_SCHEMA = 524289;
export const WLAN_REASON_CODE_PROFILE_MISSING = 524290;
export const WLAN_REASON_CODE_INVALID_PROFILE_NAME = 524291;
export const WLAN_REASON_CODE_INVALID_PROFILE_TYPE = 524292;
export const WLAN_REASON_CODE_INVALID_PHY_TYPE = 524293;
export const WLAN_REASON_CODE_MSM_SECURITY_MISSING = 524294;
export const WLAN_REASON_CODE_IHV_SECURITY_NOT_SUPPORTED = 524295;
export const WLAN_REASON_CODE_IHV_OUI_MISMATCH = 524296;
export const WLAN_REASON_CODE_IHV_OUI_MISSING = 524297;
export const WLAN_REASON_CODE_IHV_SETTINGS_MISSING = 524298;
export const WLAN_REASON_CODE_CONFLICT_SECURITY = 524299;
export const WLAN_REASON_CODE_SECURITY_MISSING = 524300;
export const WLAN_REASON_CODE_INVALID_BSS_TYPE = 524301;
export const WLAN_REASON_CODE_INVALID_ADHOC_CONNECTION_MODE = 524302;
export const WLAN_REASON_CODE_NON_BROADCAST_SET_FOR_ADHOC = 524303;
export const WLAN_REASON_CODE_AUTO_SWITCH_SET_FOR_ADHOC = 524304;
export const WLAN_REASON_CODE_AUTO_SWITCH_SET_FOR_MANUAL_CONNECTION = 524305;
export const WLAN_REASON_CODE_IHV_SECURITY_ONEX_MISSING = 524306;
export const WLAN_REASON_CODE_PROFILE_SSID_INVALID = 524307;
export const WLAN_REASON_CODE_TOO_MANY_SSID = 524308;
export const WLAN_REASON_CODE_IHV_CONNECTIVITY_NOT_SUPPORTED = 524309;
export const WLAN_REASON_CODE_BAD_MAX_NUMBER_OF_CLIENTS_FOR_AP = 524310;
export const WLAN_REASON_CODE_INVALID_CHANNEL = 524311;
export const WLAN_REASON_CODE_OPERATION_MODE_NOT_SUPPORTED = 524312;
export const WLAN_REASON_CODE_AUTO_AP_PROFILE_NOT_ALLOWED = 524313;
export const WLAN_REASON_CODE_AUTO_CONNECTION_NOT_ALLOWED = 524314;
export const WLAN_REASON_CODE_HOTSPOT2_PROFILE_NOT_ALLOWED = 524315;
export const WLAN_REASON_CODE_UNSUPPORTED_SECURITY_SET_BY_OS = 196609;
export const WLAN_REASON_CODE_UNSUPPORTED_SECURITY_SET = 196610;
export const WLAN_REASON_CODE_BSS_TYPE_UNMATCH = 196611;
export const WLAN_REASON_CODE_PHY_TYPE_UNMATCH = 196612;
export const WLAN_REASON_CODE_DATARATE_UNMATCH = 196613;
export const WLAN_REASON_CODE_USER_CANCELLED = 229377;
export const WLAN_REASON_CODE_ASSOCIATION_FAILURE = 229378;
export const WLAN_REASON_CODE_ASSOCIATION_TIMEOUT = 229379;
export const WLAN_REASON_CODE_PRE_SECURITY_FAILURE = 229380;
export const WLAN_REASON_CODE_START_SECURITY_FAILURE = 229381;
export const WLAN_REASON_CODE_SECURITY_FAILURE = 229382;
export const WLAN_REASON_CODE_SECURITY_TIMEOUT = 229383;
export const WLAN_REASON_CODE_ROAMING_FAILURE = 229384;
export const WLAN_REASON_CODE_ROAMING_SECURITY_FAILURE = 229385;
export const WLAN_REASON_CODE_ADHOC_SECURITY_FAILURE = 229386;
export const WLAN_REASON_CODE_DRIVER_DISCONNECTED = 229387;
export const WLAN_REASON_CODE_DRIVER_OPERATION_FAILURE = 229388;
export const WLAN_REASON_CODE_IHV_NOT_AVAILABLE = 229389;
export const WLAN_REASON_CODE_IHV_NOT_RESPONDING = 229390;
export const WLAN_REASON_CODE_DISCONNECT_TIMEOUT = 229391;
export const WLAN_REASON_CODE_INTERNAL_FAILURE = 229392;
export const WLAN_REASON_CODE_UI_REQUEST_TIMEOUT = 229393;
export const WLAN_REASON_CODE_TOO_MANY_SECURITY_ATTEMPTS = 229394;
export const WLAN_REASON_CODE_AP_STARTING_FAILURE = 229395;
export const WLAN_REASON_CODE_NO_VISIBLE_AP = 229396;
export const WLAN_REASON_CODE_MSMSEC_MIN = 262144;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_KEY_INDEX = 262145;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_PSK_PRESENT = 262146;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_KEY_LENGTH = 262147;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_PSK_LENGTH = 262148;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_NO_AUTH_CIPHER_SPECIFIED = 262149;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_TOO_MANY_AUTH_CIPHER_SPECIFIED = 262150;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_DUPLICATE_AUTH_CIPHER = 262151;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_RAWDATA_INVALID = 262152;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_AUTH_CIPHER = 262153;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_ONEX_DISABLED = 262154;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_ONEX_ENABLED = 262155;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_MODE = 262156;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_SIZE = 262157;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_TTL = 262158;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PREAUTH_MODE = 262159;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PREAUTH_THROTTLE = 262160;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_PREAUTH_ONLY_ENABLED = 262161;
export const WLAN_REASON_CODE_MSMSEC_CAPABILITY_NETWORK = 262162;
export const WLAN_REASON_CODE_MSMSEC_CAPABILITY_NIC = 262163;
export const WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE = 262164;
export const WLAN_REASON_CODE_MSMSEC_CAPABILITY_DISCOVERY = 262165;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_PASSPHRASE_CHAR = 262166;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_KEYMATERIAL_CHAR = 262167;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_WRONG_KEYTYPE = 262168;
export const WLAN_REASON_CODE_MSMSEC_MIXED_CELL = 262169;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_AUTH_TIMERS_INVALID = 262170;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_GKEY_INTV = 262171;
export const WLAN_REASON_CODE_MSMSEC_TRANSITION_NETWORK = 262172;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_KEY_UNMAPPED_CHAR = 262173;
export const WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_AUTH = 262174;
export const WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_CIPHER = 262175;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_SAFE_MODE = 262176;
export const WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_SAFE_MODE_NIC = 262177;
export const WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_SAFE_MODE_NW = 262178;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_UNSUPPORTED_AUTH = 262179;
export const WLAN_REASON_CODE_MSMSEC_PROFILE_UNSUPPORTED_CIPHER = 262180;
export const WLAN_REASON_CODE_MSMSEC_CAPABILITY_MFP_NW_NIC = 262181;
export const WLAN_REASON_CODE_MSMSEC_UI_REQUEST_FAILURE = 294913;
export const WLAN_REASON_CODE_MSMSEC_AUTH_START_TIMEOUT = 294914;
export const WLAN_REASON_CODE_MSMSEC_AUTH_SUCCESS_TIMEOUT = 294915;
export const WLAN_REASON_CODE_MSMSEC_KEY_START_TIMEOUT = 294916;
export const WLAN_REASON_CODE_MSMSEC_KEY_SUCCESS_TIMEOUT = 294917;
export const WLAN_REASON_CODE_MSMSEC_M3_MISSING_KEY_DATA = 294918;
export const WLAN_REASON_CODE_MSMSEC_M3_MISSING_IE = 294919;
export const WLAN_REASON_CODE_MSMSEC_M3_MISSING_GRP_KEY = 294920;
export const WLAN_REASON_CODE_MSMSEC_PR_IE_MATCHING = 294921;
export const WLAN_REASON_CODE_MSMSEC_SEC_IE_MATCHING = 294922;
export const WLAN_REASON_CODE_MSMSEC_NO_PAIRWISE_KEY = 294923;
export const WLAN_REASON_CODE_MSMSEC_G1_MISSING_KEY_DATA = 294924;
export const WLAN_REASON_CODE_MSMSEC_G1_MISSING_GRP_KEY = 294925;
export const WLAN_REASON_CODE_MSMSEC_PEER_INDICATED_INSECURE = 294926;
export const WLAN_REASON_CODE_MSMSEC_NO_AUTHENTICATOR = 294927;
export const WLAN_REASON_CODE_MSMSEC_NIC_FAILURE = 294928;
export const WLAN_REASON_CODE_MSMSEC_CANCELLED = 294929;
export const WLAN_REASON_CODE_MSMSEC_KEY_FORMAT = 294930;
export const WLAN_REASON_CODE_MSMSEC_DOWNGRADE_DETECTED = 294931;
export const WLAN_REASON_CODE_MSMSEC_PSK_MISMATCH_SUSPECTED = 294932;
export const WLAN_REASON_CODE_MSMSEC_FORCED_FAILURE = 294933;
export const WLAN_REASON_CODE_MSMSEC_M3_TOO_MANY_RSNIE = 294934;
export const WLAN_REASON_CODE_MSMSEC_M2_MISSING_KEY_DATA = 294935;
export const WLAN_REASON_CODE_MSMSEC_M2_MISSING_IE = 294936;
export const WLAN_REASON_CODE_MSMSEC_AUTH_WCN_COMPLETED = 294937;
export const WLAN_REASON_CODE_MSMSEC_M3_MISSING_MGMT_GRP_KEY = 294938;
export const WLAN_REASON_CODE_MSMSEC_G1_MISSING_MGMT_GRP_KEY = 294939;
export const WLAN_REASON_CODE_MSMSEC_MAX = 327679;
export const WLAN_AVAILABLE_NETWORK_CONNECTED = 1;
export const WLAN_AVAILABLE_NETWORK_HAS_PROFILE = 2;
export const WLAN_AVAILABLE_NETWORK_CONSOLE_USER_PROFILE = 4;
export const WLAN_AVAILABLE_NETWORK_INTERWORKING_SUPPORTED = 8;
export const WLAN_AVAILABLE_NETWORK_HOTSPOT2_ENABLED = 16;
export const WLAN_AVAILABLE_NETWORK_ANQP_SUPPORTED = 32;
export const WLAN_AVAILABLE_NETWORK_HOTSPOT2_DOMAIN = 64;
export const WLAN_AVAILABLE_NETWORK_HOTSPOT2_ROAMING = 128;
export const WLAN_AVAILABLE_NETWORK_AUTO_CONNECT_FAILED = 256;
export const WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_ADHOC_PROFILES = 1;
export const WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_MANUAL_HIDDEN_PROFILES = 2;
export const WLAN_MAX_PHY_TYPE_NUMBER = 8;
export const WLAN_MAX_PHY_INDEX = 64;
export const WLAN_CONNECTION_HIDDEN_NETWORK = 1;
export const WLAN_CONNECTION_ADHOC_JOIN_ONLY = 2;
export const WLAN_CONNECTION_IGNORE_PRIVACY_BIT = 4;
export const WLAN_CONNECTION_EAPOL_PASSTHROUGH = 8;
export const WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE = 16;
export const WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE_CONNECTION_MODE_AUTO = 32;
export const WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE_OVERWRITE_EXISTING = 64;
export const WLAN_NOTIFICATION_SOURCE_NONE = 0;
export const WLAN_NOTIFICATION_SOURCE_ALL = 65535;
export const WLAN_NOTIFICATION_SOURCE_ACM = 8;
export const WLAN_NOTIFICATION_SOURCE_MSM = 16;
export const WLAN_NOTIFICATION_SOURCE_SECURITY = 32;
export const WLAN_NOTIFICATION_SOURCE_IHV = 64;
export const WLAN_NOTIFICATION_SOURCE_HNWK = 128;
export const WLAN_NOTIFICATION_SOURCE_ONEX = 4;
export const WLAN_NOTIFICATION_SOURCE_DEVICE_SERVICE = 2048;
export const WFD_API_VERSION_1_0 = 1;
export const WFD_API_VERSION = 1;
export const WLAN_UI_API_VERSION = 1;
export const WLAN_UI_API_INITIAL_VERSION = 1;
export const DOT11EXT_PSK_MAX_LENGTH = 64;
export const WDIAG_IHV_WLAN_ID_FLAG_SECURITY_ENABLED = 1;
export const IHV_VERSION_FUNCTION_NAME = `Dot11ExtIhvGetVersionInfo`;
export const IHV_INIT_FUNCTION_NAME = `Dot11ExtIhvInitService`;
export const IHV_INIT_VS_FUNCTION_NAME = `Dot11ExtIhvInitVirtualStation`;
export const MS_MAX_PROFILE_NAME_LENGTH = 256;
export const MS_PROFILE_GROUP_POLICY = 1;
export const MS_PROFILE_USER = 2;
export const WLAN_SET_EAPHOST_DATA_ALL_USERS = 1;
export const WLAN_CONNECTION_NOTIFICATION_ADHOC_NETWORK_FORMED = 1;
export const WLAN_CONNECTION_NOTIFICATION_CONSOLE_USER_PROFILE = 4;
export const dot11_BSS_type_infrastructure = 1;
export const dot11_BSS_type_independent = 2;
export const dot11_BSS_type_any = 3;
export const DOT11_AUTH_ALGO_80211_OPEN = 1;
export const DOT11_AUTH_ALGO_80211_SHARED_KEY = 2;
export const DOT11_AUTH_ALGO_WPA = 3;
export const DOT11_AUTH_ALGO_WPA_PSK = 4;
export const DOT11_AUTH_ALGO_WPA_NONE = 5;
export const DOT11_AUTH_ALGO_RSNA = 6;
export const DOT11_AUTH_ALGO_RSNA_PSK = 7;
export const DOT11_AUTH_ALGO_WPA3 = 8;
export const DOT11_AUTH_ALGO_WPA3_ENT_192 = 8;
export const DOT11_AUTH_ALGO_WPA3_SAE = 9;
export const DOT11_AUTH_ALGO_OWE = 10;
export const DOT11_AUTH_ALGO_WPA3_ENT = 11;
export const DOT11_AUTH_ALGO_IHV_START = `-2147483648`;
export const DOT11_AUTH_ALGO_IHV_END = `-1`;
export const DOT11_CIPHER_ALGO_NONE = 0;
export const DOT11_CIPHER_ALGO_WEP40 = 1;
export const DOT11_CIPHER_ALGO_TKIP = 2;
export const DOT11_CIPHER_ALGO_CCMP = 4;
export const DOT11_CIPHER_ALGO_WEP104 = 5;
export const DOT11_CIPHER_ALGO_BIP = 6;
export const DOT11_CIPHER_ALGO_GCMP = 8;
export const DOT11_CIPHER_ALGO_GCMP_256 = 9;
export const DOT11_CIPHER_ALGO_CCMP_256 = 10;
export const DOT11_CIPHER_ALGO_BIP_GMAC_128 = 11;
export const DOT11_CIPHER_ALGO_BIP_GMAC_256 = 12;
export const DOT11_CIPHER_ALGO_BIP_CMAC_256 = 13;
export const DOT11_CIPHER_ALGO_WPA_USE_GROUP = 256;
export const DOT11_CIPHER_ALGO_RSN_USE_GROUP = 256;
export const DOT11_CIPHER_ALGO_WEP = 257;
export const DOT11_CIPHER_ALGO_IHV_START = `-2147483648`;
export const DOT11_CIPHER_ALGO_IHV_END = `-1`;
export const dot11_phy_type_unknown = 0;
export const dot11_phy_type_any = 0;
export const dot11_phy_type_fhss = 1;
export const dot11_phy_type_dsss = 2;
export const dot11_phy_type_irbaseband = 3;
export const dot11_phy_type_ofdm = 4;
export const dot11_phy_type_hrdsss = 5;
export const dot11_phy_type_erp = 6;
export const dot11_phy_type_ht = 7;
export const dot11_phy_type_vht = 8;
export const dot11_phy_type_dmg = 9;
export const dot11_phy_type_he = 10;
export const dot11_phy_type_IHV_start = `-2147483648`;
export const dot11_phy_type_IHV_end = `-1`;
export const dot11_offload_type_wep = 1;
export const dot11_offload_type_auth = 2;
export const dot11_key_direction_both = 1;
export const dot11_key_direction_inbound = 2;
export const dot11_key_direction_outbound = 3;
export const dot11_scan_type_active = 1;
export const dot11_scan_type_passive = 2;
export const dot11_scan_type_auto = 3;
export const dot11_scan_type_forced = `-2147483648`;
export const ch_description_type_logical = 1;
export const ch_description_type_center_frequency = 2;
export const ch_description_type_phy_specific = 3;
export const dot11_update_ie_op_create_replace = 1;
export const dot11_update_ie_op_delete = 2;
export const dot11_reset_type_phy = 1;
export const dot11_reset_type_mac = 2;
export const dot11_reset_type_phy_and_mac = 3;
export const dot11_power_mode_unknown = 0;
export const dot11_power_mode_active = 1;
export const dot11_power_mode_powersave = 2;
export const dot11_temp_type_unknown = 0;
export const dot11_temp_type_1 = 1;
export const dot11_temp_type_2 = 2;
export const dot11_diversity_support_unknown = 0;
export const dot11_diversity_support_fixedlist = 1;
export const dot11_diversity_support_notsupported = 2;
export const dot11_diversity_support_dynamic = 3;
export const dot11_hop_algo_current = 0;
export const dot11_hop_algo_hop_index = 1;
export const dot11_hop_algo_hcc = 2;
export const dot11_AC_param_BE = 0;
export const dot11_AC_param_BK = 1;
export const dot11_AC_param_VI = 2;
export const dot11_AC_param_VO = 3;
export const dot11_AC_param_max = 4;
export const DOT11_DIR_INBOUND = 1;
export const DOT11_DIR_OUTBOUND = 2;
export const DOT11_DIR_BOTH = 3;
export const dot11_assoc_state_zero = 0;
export const dot11_assoc_state_unauth_unassoc = 1;
export const dot11_assoc_state_auth_unassoc = 2;
export const dot11_assoc_state_auth_assoc = 3;
export const DOT11_DS_CHANGED = 0;
export const DOT11_DS_UNCHANGED = 1;
export const DOT11_DS_UNKNOWN = 2;
export const DOT11_WPS_CONFIG_METHOD_NULL = 0;
export const DOT11_WPS_CONFIG_METHOD_DISPLAY = 8;
export const DOT11_WPS_CONFIG_METHOD_NFC_TAG = 32;
export const DOT11_WPS_CONFIG_METHOD_NFC_INTERFACE = 64;
export const DOT11_WPS_CONFIG_METHOD_PUSHBUTTON = 128;
export const DOT11_WPS_CONFIG_METHOD_KEYPAD = 256;
export const DOT11_WPS_CONFIG_METHOD_WFDS_DEFAULT = 4096;
export const DOT11_WPS_PASSWORD_ID_DEFAULT = 0;
export const DOT11_WPS_PASSWORD_ID_USER_SPECIFIED = 1;
export const DOT11_WPS_PASSWORD_ID_MACHINE_SPECIFIED = 2;
export const DOT11_WPS_PASSWORD_ID_REKEY = 3;
export const DOT11_WPS_PASSWORD_ID_PUSHBUTTON = 4;
export const DOT11_WPS_PASSWORD_ID_REGISTRAR_SPECIFIED = 5;
export const DOT11_WPS_PASSWORD_ID_NFC_CONNECTION_HANDOVER = 7;
export const DOT11_WPS_PASSWORD_ID_WFD_SERVICES = 8;
export const DOT11_WPS_PASSWORD_ID_OOB_RANGE_MIN = 16;
export const DOT11_WPS_PASSWORD_ID_OOB_RANGE_MAX = 65535;
export const dot11_ANQP_query_result_success = 0;
export const dot11_ANQP_query_result_failure = 1;
export const dot11_ANQP_query_result_timed_out = 2;
export const dot11_ANQP_query_result_resources = 3;
export const dot11_ANQP_query_result_advertisement_protocol_not_supported_on_remote = 4;
export const dot11_ANQP_query_result_gas_protocol_failure = 5;
export const dot11_ANQP_query_result_advertisement_server_not_responding = 6;
export const dot11_ANQP_query_result_access_issues = 7;
export const dot11_wfd_discover_type_scan_only = 1;
export const dot11_wfd_discover_type_find_only = 2;
export const dot11_wfd_discover_type_auto = 3;
export const dot11_wfd_discover_type_scan_social_channels = 4;
export const dot11_wfd_discover_type_forced = `-2147483648`;
export const dot11_wfd_scan_type_active = 1;
export const dot11_wfd_scan_type_passive = 2;
export const dot11_wfd_scan_type_auto = 3;
export const dot11_power_mode_reason_no_change = 0;
export const dot11_power_mode_reason_noncompliant_AP = 1;
export const dot11_power_mode_reason_legacy_WFD_device = 2;
export const dot11_power_mode_reason_compliant_AP = 3;
export const dot11_power_mode_reason_compliant_WFD_device = 4;
export const dot11_power_mode_reason_others = 5;
export const dot11_manufacturing_test_unknown = 0;
export const dot11_manufacturing_test_self_start = 1;
export const dot11_manufacturing_test_self_query_result = 2;
export const dot11_manufacturing_test_rx = 3;
export const dot11_manufacturing_test_tx = 4;
export const dot11_manufacturing_test_query_adc = 5;
export const dot11_manufacturing_test_set_data = 6;
export const dot11_manufacturing_test_query_data = 7;
export const dot11_manufacturing_test_sleep = 8;
export const dot11_manufacturing_test_awake = 9;
export const dot11_manufacturing_test_IHV_start = `-2147483648`;
export const dot11_manufacturing_test_IHV_end = `-1`;
export const DOT11_MANUFACTURING_SELF_TEST_TYPE_INTERFACE = 1;
export const DOT11_MANUFACTURING_SELF_TEST_TYPE_RF_INTERFACE = 2;
export const DOT11_MANUFACTURING_SELF_TEST_TYPE_BT_COEXISTENCE = 3;
export const dot11_band_2p4g = 1;
export const dot11_band_4p9g = 2;
export const dot11_band_5g = 3;
export const dot11_manufacturing_callback_unknown = 0;
export const dot11_manufacturing_callback_self_test_complete = 1;
export const dot11_manufacturing_callback_sleep_complete = 2;
export const dot11_manufacturing_callback_IHV_start = `-2147483648`;
export const dot11_manufacturing_callback_IHV_end = `-1`;
export const wlan_connection_mode_profile = 0;
export const wlan_connection_mode_temporary_profile = 1;
export const wlan_connection_mode_discovery_secure = 2;
export const wlan_connection_mode_discovery_unsecure = 3;
export const wlan_connection_mode_auto = 4;
export const wlan_connection_mode_invalid = 5;
export const wlan_interface_state_not_ready = 0;
export const wlan_interface_state_connected = 1;
export const wlan_interface_state_ad_hoc_network_formed = 2;
export const wlan_interface_state_disconnecting = 3;
export const wlan_interface_state_disconnected = 4;
export const wlan_interface_state_associating = 5;
export const wlan_interface_state_discovering = 6;
export const wlan_interface_state_authenticating = 7;
export const wlan_adhoc_network_state_formed = 0;
export const wlan_adhoc_network_state_connected = 1;
export const dot11_radio_state_unknown = 0;
export const dot11_radio_state_on = 1;
export const dot11_radio_state_off = 2;
export const wlan_operational_state_unknown = 0;
export const wlan_operational_state_off = 1;
export const wlan_operational_state_on = 2;
export const wlan_operational_state_going_off = 3;
export const wlan_operational_state_going_on = 4;
export const wlan_interface_type_emulated_802_11 = 0;
export const wlan_interface_type_native_802_11 = 1;
export const wlan_interface_type_invalid = 2;
export const wlan_power_setting_no_saving = 0;
export const wlan_power_setting_low_saving = 1;
export const wlan_power_setting_medium_saving = 2;
export const wlan_power_setting_maximum_saving = 3;
export const wlan_power_setting_invalid = 4;
export const wlan_notification_acm_start = 0;
export const wlan_notification_acm_autoconf_enabled = 1;
export const wlan_notification_acm_autoconf_disabled = 2;
export const wlan_notification_acm_background_scan_enabled = 3;
export const wlan_notification_acm_background_scan_disabled = 4;
export const wlan_notification_acm_bss_type_change = 5;
export const wlan_notification_acm_power_setting_change = 6;
export const wlan_notification_acm_scan_complete = 7;
export const wlan_notification_acm_scan_fail = 8;
export const wlan_notification_acm_connection_start = 9;
export const wlan_notification_acm_connection_complete = 10;
export const wlan_notification_acm_connection_attempt_fail = 11;
export const wlan_notification_acm_filter_list_change = 12;
export const wlan_notification_acm_interface_arrival = 13;
export const wlan_notification_acm_interface_removal = 14;
export const wlan_notification_acm_profile_change = 15;
export const wlan_notification_acm_profile_name_change = 16;
export const wlan_notification_acm_profiles_exhausted = 17;
export const wlan_notification_acm_network_not_available = 18;
export const wlan_notification_acm_network_available = 19;
export const wlan_notification_acm_disconnecting = 20;
export const wlan_notification_acm_disconnected = 21;
export const wlan_notification_acm_adhoc_network_state_change = 22;
export const wlan_notification_acm_profile_unblocked = 23;
export const wlan_notification_acm_screen_power_change = 24;
export const wlan_notification_acm_profile_blocked = 25;
export const wlan_notification_acm_scan_list_refresh = 26;
export const wlan_notification_acm_operational_state_change = 27;
export const wlan_notification_acm_end = 28;
export const wlan_notification_msm_start = 0;
export const wlan_notification_msm_associating = 1;
export const wlan_notification_msm_associated = 2;
export const wlan_notification_msm_authenticating = 3;
export const wlan_notification_msm_connected = 4;
export const wlan_notification_msm_roaming_start = 5;
export const wlan_notification_msm_roaming_end = 6;
export const wlan_notification_msm_radio_state_change = 7;
export const wlan_notification_msm_signal_quality_change = 8;
export const wlan_notification_msm_disassociating = 9;
export const wlan_notification_msm_disconnected = 10;
export const wlan_notification_msm_peer_join = 11;
export const wlan_notification_msm_peer_leave = 12;
export const wlan_notification_msm_adapter_removal = 13;
export const wlan_notification_msm_adapter_operation_mode_change = 14;
export const wlan_notification_msm_link_degraded = 15;
export const wlan_notification_msm_link_improved = 16;
export const wlan_notification_msm_end = 17;
export const wlan_notification_security_start = 0;
export const wlan_notification_security_end = 1;
export const wlan_opcode_value_type_query_only = 0;
export const wlan_opcode_value_type_set_by_group_policy = 1;
export const wlan_opcode_value_type_set_by_user = 2;
export const wlan_opcode_value_type_invalid = 3;
export const wlan_intf_opcode_autoconf_start = 0;
export const wlan_intf_opcode_autoconf_enabled = 1;
export const wlan_intf_opcode_background_scan_enabled = 2;
export const wlan_intf_opcode_media_streaming_mode = 3;
export const wlan_intf_opcode_radio_state = 4;
export const wlan_intf_opcode_bss_type = 5;
export const wlan_intf_opcode_interface_state = 6;
export const wlan_intf_opcode_current_connection = 7;
export const wlan_intf_opcode_channel_number = 8;
export const wlan_intf_opcode_supported_infrastructure_auth_cipher_pairs = 9;
export const wlan_intf_opcode_supported_adhoc_auth_cipher_pairs = 10;
export const wlan_intf_opcode_supported_country_or_region_string_list = 11;
export const wlan_intf_opcode_current_operation_mode = 12;
export const wlan_intf_opcode_supported_safe_mode = 13;
export const wlan_intf_opcode_certified_safe_mode = 14;
export const wlan_intf_opcode_hosted_network_capable = 15;
export const wlan_intf_opcode_management_frame_protection_capable = 16;
export const wlan_intf_opcode_secondary_sta_interfaces = 17;
export const wlan_intf_opcode_secondary_sta_synchronized_connections = 18;
export const wlan_intf_opcode_autoconf_end = 268435455;
export const wlan_intf_opcode_msm_start = 268435712;
export const wlan_intf_opcode_statistics = 268435713;
export const wlan_intf_opcode_rssi = 268435714;
export const wlan_intf_opcode_msm_end = 536870911;
export const wlan_intf_opcode_security_start = 536936448;
export const wlan_intf_opcode_security_end = 805306367;
export const wlan_intf_opcode_ihv_start = 805306368;
export const wlan_intf_opcode_ihv_end = 1073741823;
export const wlan_autoconf_opcode_start = 0;
export const wlan_autoconf_opcode_show_denied_networks = 1;
export const wlan_autoconf_opcode_power_setting = 2;
export const wlan_autoconf_opcode_only_use_gp_profiles_for_allowed_networks = 3;
export const wlan_autoconf_opcode_allow_explicit_creds = 4;
export const wlan_autoconf_opcode_block_period = 5;
export const wlan_autoconf_opcode_allow_virtual_station_extensibility = 6;
export const wlan_autoconf_opcode_end = 7;
export const wlan_ihv_control_type_service = 0;
export const wlan_ihv_control_type_driver = 1;
export const wlan_filter_list_type_gp_permit = 0;
export const wlan_filter_list_type_gp_deny = 1;
export const wlan_filter_list_type_user_permit = 2;
export const wlan_filter_list_type_user_deny = 3;
export const wlan_secure_permit_list = 0;
export const wlan_secure_deny_list = 1;
export const wlan_secure_ac_enabled = 2;
export const wlan_secure_bc_scan_enabled = 3;
export const wlan_secure_bss_type = 4;
export const wlan_secure_show_denied = 5;
export const wlan_secure_interface_properties = 6;
export const wlan_secure_ihv_control = 7;
export const wlan_secure_all_user_profiles_order = 8;
export const wlan_secure_add_new_all_user_profiles = 9;
export const wlan_secure_add_new_per_user_profiles = 10;
export const wlan_secure_media_streaming_mode_enabled = 11;
export const wlan_secure_current_operation_mode = 12;
export const wlan_secure_get_plaintext_key = 13;
export const wlan_secure_hosted_network_elevated_access = 14;
export const wlan_secure_virtual_station_extensibility = 15;
export const wlan_secure_wfd_elevated_access = 16;
export const WLAN_SECURABLE_OBJECT_COUNT = 17;
export const WFD_ROLE_TYPE_NONE = 0;
export const WFD_ROLE_TYPE_DEVICE = 1;
export const WFD_ROLE_TYPE_GROUP_OWNER = 2;
export const WFD_ROLE_TYPE_CLIENT = 4;
export const WFD_ROLE_TYPE_MAX = 5;
export const WLConnectionPage = 0;
export const WLSecurityPage = 1;
export const WLAdvPage = 2;
export const wlan_hosted_network_unavailable = 0;
export const wlan_hosted_network_idle = 1;
export const wlan_hosted_network_active = 2;
export const wlan_hosted_network_reason_success = 0;
export const wlan_hosted_network_reason_unspecified = 1;
export const wlan_hosted_network_reason_bad_parameters = 2;
export const wlan_hosted_network_reason_service_shutting_down = 3;
export const wlan_hosted_network_reason_insufficient_resources = 4;
export const wlan_hosted_network_reason_elevation_required = 5;
export const wlan_hosted_network_reason_read_only = 6;
export const wlan_hosted_network_reason_persistence_failed = 7;
export const wlan_hosted_network_reason_crypt_error = 8;
export const wlan_hosted_network_reason_impersonation = 9;
export const wlan_hosted_network_reason_stop_before_start = 10;
export const wlan_hosted_network_reason_interface_available = 11;
export const wlan_hosted_network_reason_interface_unavailable = 12;
export const wlan_hosted_network_reason_miniport_stopped = 13;
export const wlan_hosted_network_reason_miniport_started = 14;
export const wlan_hosted_network_reason_incompatible_connection_started = 15;
export const wlan_hosted_network_reason_incompatible_connection_stopped = 16;
export const wlan_hosted_network_reason_user_action = 17;
export const wlan_hosted_network_reason_client_abort = 18;
export const wlan_hosted_network_reason_ap_start_failed = 19;
export const wlan_hosted_network_reason_peer_arrived = 20;
export const wlan_hosted_network_reason_peer_departed = 21;
export const wlan_hosted_network_reason_peer_timeout = 22;
export const wlan_hosted_network_reason_gp_denied = 23;
export const wlan_hosted_network_reason_service_unavailable = 24;
export const wlan_hosted_network_reason_device_change = 25;
export const wlan_hosted_network_reason_properties_change = 26;
export const wlan_hosted_network_reason_virtual_station_blocking_use = 27;
export const wlan_hosted_network_reason_service_available_on_virtual_station = 28;
export const wlan_hosted_network_peer_state_invalid = 0;
export const wlan_hosted_network_peer_state_authenticated = 1;
export const wlan_hosted_network_state_change = 4096;
export const wlan_hosted_network_peer_state_change = 4097;
export const wlan_hosted_network_radio_state_change = 4098;
export const wlan_hosted_network_opcode_connection_settings = 0;
export const wlan_hosted_network_opcode_security_settings = 1;
export const wlan_hosted_network_opcode_station_profile = 2;
export const wlan_hosted_network_opcode_enable = 3;
export const OneXAuthIdentityNone = 0;
export const OneXAuthIdentityMachine = 1;
export const OneXAuthIdentityUser = 2;
export const OneXAuthIdentityExplicitUser = 3;
export const OneXAuthIdentityGuest = 4;
export const OneXAuthIdentityInvalid = 5;
export const OneXAuthNotStarted = 0;
export const OneXAuthInProgress = 1;
export const OneXAuthNoAuthenticatorFound = 2;
export const OneXAuthSuccess = 3;
export const OneXAuthFailure = 4;
export const OneXAuthInvalid = 5;
export const ONEX_REASON_CODE_SUCCESS = 0;
export const ONEX_REASON_START = 327680;
export const ONEX_UNABLE_TO_IDENTIFY_USER = 327681;
export const ONEX_IDENTITY_NOT_FOUND = 327682;
export const ONEX_UI_DISABLED = 327683;
export const ONEX_UI_FAILURE = 327684;
export const ONEX_EAP_FAILURE_RECEIVED = 327685;
export const ONEX_AUTHENTICATOR_NO_LONGER_PRESENT = 327686;
export const ONEX_NO_RESPONSE_TO_IDENTITY = 327687;
export const ONEX_PROFILE_VERSION_NOT_SUPPORTED = 327688;
export const ONEX_PROFILE_INVALID_LENGTH = 327689;
export const ONEX_PROFILE_DISALLOWED_EAP_TYPE = 327690;
export const ONEX_PROFILE_INVALID_EAP_TYPE_OR_FLAG = 327691;
export const ONEX_PROFILE_INVALID_ONEX_FLAGS = 327692;
export const ONEX_PROFILE_INVALID_TIMER_VALUE = 327693;
export const ONEX_PROFILE_INVALID_SUPPLICANT_MODE = 327694;
export const ONEX_PROFILE_INVALID_AUTH_MODE = 327695;
export const ONEX_PROFILE_INVALID_EAP_CONNECTION_PROPERTIES = 327696;
export const ONEX_UI_CANCELLED = 327697;
export const ONEX_PROFILE_INVALID_EXPLICIT_CREDENTIALS = 327698;
export const ONEX_PROFILE_EXPIRED_EXPLICIT_CREDENTIALS = 327699;
export const ONEX_UI_NOT_PERMITTED = 327700;
export const OneXPublicNotificationBase = 0;
export const OneXNotificationTypeResultUpdate = 1;
export const OneXNotificationTypeAuthRestarted = 2;
export const OneXNotificationTypeEventInvalid = 3;
export const OneXNumNotifications = 3;
export const OneXRestartReasonPeerInitiated = 0;
export const OneXRestartReasonMsmInitiated = 1;
export const OneXRestartReasonOneXHeldStateTimeout = 2;
export const OneXRestartReasonOneXAuthTimeout = 3;
export const OneXRestartReasonOneXConfigurationChanged = 4;
export const OneXRestartReasonOneXUserChanged = 5;
export const OneXRestartReasonQuarantineStateChanged = 6;
export const OneXRestartReasonAltCredsTrial = 7;
export const OneXRestartReasonInvalid = 8;
export const OneXEapMethodBackendSupportUnknown = 0;
export const OneXEapMethodBackendSupported = 1;
export const OneXEapMethodBackendUnsupported = 2;
export const DOT11_ADHOC_CIPHER_ALGO_INVALID = `-1`;
export const DOT11_ADHOC_CIPHER_ALGO_NONE = 0;
export const DOT11_ADHOC_CIPHER_ALGO_CCMP = 4;
export const DOT11_ADHOC_CIPHER_ALGO_WEP = 257;
export const DOT11_ADHOC_AUTH_ALGO_INVALID = `-1`;
export const DOT11_ADHOC_AUTH_ALGO_80211_OPEN = 1;
export const DOT11_ADHOC_AUTH_ALGO_RSNA_PSK = 7;
export const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_INVALID = 0;
export const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_DISCONNECTED = 11;
export const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_CONNECTING = 12;
export const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_CONNECTED = 13;
export const DOT11_ADHOC_NETWORK_CONNECTION_STATUS_FORMED = 14;
export const DOT11_ADHOC_CONNECT_FAIL_DOMAIN_MISMATCH = 0;
export const DOT11_ADHOC_CONNECT_FAIL_PASSPHRASE_MISMATCH = 1;
export const DOT11_ADHOC_CONNECT_FAIL_OTHER = 2;
export const connection_phase_any = 0;
export const connection_phase_initial_connection = 1;
export const connection_phase_post_l3_connection = 2;
export const DOT11_MSONEX_SUCCESS = 0;
export const DOT11_MSONEX_FAILURE = 1;
export const DOT11_MSONEX_IN_PROGRESS = 2;
export const IndicationTypeNicSpecificNotification = 0;
export const IndicationTypePmkidCandidateList = 1;
export const IndicationTypeTkipMicFailure = 2;
export const IndicationTypePhyStateChange = 3;
export const IndicationTypeLinkQuality = 4;

// Structs

/**
 * Windows.Win32.Devices.Properties.DEVPROPKEY (size: 16)
 */
export interface DEVPROPKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue;
  /** u32 */
  pid: number;
}

export const sizeofDEVPROPKEY = 16;

export function allocDEVPROPKEY(data?: Partial<DEVPROPKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPROPKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fmtid))), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

export class DEVPROPKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fmtid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get pid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set fmtid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set pid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SSID (size: 16)
 */
export interface DOT11_SSID {
  /** u32 */
  uSSIDLength: number;
  /** array */
  ucSSID: Deno.PointerValue;
}

export const sizeofDOT11_SSID = 16;

export function allocDOT11_SSID(data?: Partial<DOT11_SSID>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uSSIDLength !== undefined) view.setUint32(0, Number(data.uSSIDLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ucSSID !== undefined) view.setBigUint64(8, data.ucSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucSSID))), true);
  return buf;
}

export class DOT11_SSIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uSSIDLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ucSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uSSIDLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ucSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_CIPHER_PAIR (size: 8)
 */
export interface DOT11_AUTH_CIPHER_PAIR {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM */
  AuthAlgoId: DOT11_AUTH_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  CipherAlgoId: DOT11_CIPHER_ALGORITHM;
}

export const sizeofDOT11_AUTH_CIPHER_PAIR = 8;

export function allocDOT11_AUTH_CIPHER_PAIR(data?: Partial<DOT11_AUTH_CIPHER_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_AUTH_CIPHER_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AuthAlgoId !== undefined) view.setInt32(0, Number(data.AuthAlgoId), true);
  // 0x04: i32
  if (data?.CipherAlgoId !== undefined) view.setInt32(4, Number(data.CipherAlgoId), true);
  return buf;
}

export class DOT11_AUTH_CIPHER_PAIRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AuthAlgoId(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get CipherAlgoId(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set AuthAlgoId(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set CipherAlgoId(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_OI (size: 16)
 */
export interface DOT11_OI {
  /** u16 */
  OILength: number;
  /** array */
  OI: Deno.PointerValue;
}

export const sizeofDOT11_OI = 16;

export function allocDOT11_OI(data?: Partial<DOT11_OI>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_OI);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.OILength !== undefined) view.setUint16(0, Number(data.OILength), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.OI !== undefined) view.setBigUint64(8, data.OI === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OI))), true);
  return buf;
}

export class DOT11_OIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get OILength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get OI(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set OILength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set OI(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ACCESSNETWORKOPTIONS (size: 8)
 */
export interface DOT11_ACCESSNETWORKOPTIONS {
  /** u8 */
  AccessNetworkType: number;
  /** u8 */
  Internet: number;
  /** u8 */
  ASRA: number;
  /** u8 */
  ESR: number;
  /** u8 */
  UESA: number;
}

export const sizeofDOT11_ACCESSNETWORKOPTIONS = 8;

export function allocDOT11_ACCESSNETWORKOPTIONS(data?: Partial<DOT11_ACCESSNETWORKOPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ACCESSNETWORKOPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.AccessNetworkType !== undefined) view.setUint8(0, Number(data.AccessNetworkType));
  // 0x01: u8
  if (data?.Internet !== undefined) view.setUint8(1, Number(data.Internet));
  // 0x02: u8
  if (data?.ASRA !== undefined) view.setUint8(2, Number(data.ASRA));
  // 0x03: u8
  if (data?.ESR !== undefined) view.setUint8(3, Number(data.ESR));
  // 0x04: u8
  if (data?.UESA !== undefined) view.setUint8(4, Number(data.UESA));
  // 0x05: pad3
  return buf;
}

export class DOT11_ACCESSNETWORKOPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get AccessNetworkType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Internet(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get ASRA(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get ESR(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get UESA(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x00: u8
  set AccessNetworkType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Internet(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set ASRA(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set ESR(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set UESA(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_VENUEINFO (size: 8)
 */
export interface DOT11_VENUEINFO {
  /** u8 */
  VenueGroup: number;
  /** u8 */
  VenueType: number;
}

export const sizeofDOT11_VENUEINFO = 8;

export function allocDOT11_VENUEINFO(data?: Partial<DOT11_VENUEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_VENUEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VenueGroup !== undefined) view.setUint8(0, Number(data.VenueGroup));
  // 0x01: u8
  if (data?.VenueType !== undefined) view.setUint8(1, Number(data.VenueType));
  // 0x02: pad6
  return buf;
}

export class DOT11_VENUEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VenueGroup(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get VenueType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x00: u8
  set VenueGroup(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set VenueType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER (size: 8)
 */
export interface NDIS_OBJECT_HEADER {
  /** u8 */
  Type: number;
  /** u8 */
  Revision: number;
  /** u16 */
  Size: number;
}

export const sizeofNDIS_OBJECT_HEADER = 8;

export function allocNDIS_OBJECT_HEADER(data?: Partial<NDIS_OBJECT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofNDIS_OBJECT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Type !== undefined) view.setUint8(0, Number(data.Type));
  // 0x01: u8
  if (data?.Revision !== undefined) view.setUint8(1, Number(data.Revision));
  // 0x02: u16
  if (data?.Size !== undefined) view.setUint16(2, Number(data.Size), true);
  // 0x04: pad4
  return buf;
}

export class NDIS_OBJECT_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Type(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Revision(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get Size(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u8
  set Type(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Revision(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set Size(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_BSSID_LIST (size: 24)
 */
export interface DOT11_BSSID_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  BSSIDs: Deno.PointerValue;
}

export const sizeofDOT11_BSSID_LIST = 24;

export function allocDOT11_BSSID_LIST(data?: Partial<DOT11_BSSID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_BSSID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.BSSIDs !== undefined) view.setBigUint64(16, data.BSSIDs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BSSIDs))), true);
  return buf;
}

export class DOT11_BSSID_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get BSSIDs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set BSSIDs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RATE_SET (size: 16)
 */
export interface DOT11_RATE_SET {
  /** u32 */
  uRateSetLength: number;
  /** array */
  ucRateSet: Deno.PointerValue;
}

export const sizeofDOT11_RATE_SET = 16;

export function allocDOT11_RATE_SET(data?: Partial<DOT11_RATE_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RATE_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uRateSetLength !== undefined) view.setUint32(0, Number(data.uRateSetLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ucRateSet !== undefined) view.setBigUint64(8, data.ucRateSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucRateSet))), true);
  return buf;
}

export class DOT11_RATE_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uRateSetLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ucRateSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uRateSetLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ucRateSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_SESSION_INFO (size: 16)
 */
export interface DOT11_WFD_SESSION_INFO {
  /** u16 */
  uSessionInfoLength: number;
  /** array */
  ucSessionInfo: Deno.PointerValue;
}

export const sizeofDOT11_WFD_SESSION_INFO = 16;

export function allocDOT11_WFD_SESSION_INFO(data?: Partial<DOT11_WFD_SESSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_SESSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.uSessionInfoLength !== undefined) view.setUint16(0, Number(data.uSessionInfoLength), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.ucSessionInfo !== undefined) view.setBigUint64(8, data.ucSessionInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucSessionInfo))), true);
  return buf;
}

export class DOT11_WFD_SESSION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get uSessionInfoLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get ucSessionInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set uSessionInfoLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set ucSessionInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_OFFLOAD_CAPABILITY (size: 32)
 */
export interface DOT11_OFFLOAD_CAPABILITY {
  /** u32 */
  uReserved: number;
  /** u32 */
  uFlags: number;
  /** u32 */
  uSupportedWEPAlgorithms: number;
  /** u32 */
  uNumOfReplayWindows: number;
  /** u32 */
  uMaxWEPKeyMappingLength: number;
  /** u32 */
  uSupportedAuthAlgorithms: number;
  /** u32 */
  uMaxAuthKeyMappingLength: number;
}

export const sizeofDOT11_OFFLOAD_CAPABILITY = 32;

export function allocDOT11_OFFLOAD_CAPABILITY(data?: Partial<DOT11_OFFLOAD_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_OFFLOAD_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: u32
  if (data?.uFlags !== undefined) view.setUint32(4, Number(data.uFlags), true);
  // 0x08: u32
  if (data?.uSupportedWEPAlgorithms !== undefined) view.setUint32(8, Number(data.uSupportedWEPAlgorithms), true);
  // 0x0c: u32
  if (data?.uNumOfReplayWindows !== undefined) view.setUint32(12, Number(data.uNumOfReplayWindows), true);
  // 0x10: u32
  if (data?.uMaxWEPKeyMappingLength !== undefined) view.setUint32(16, Number(data.uMaxWEPKeyMappingLength), true);
  // 0x14: u32
  if (data?.uSupportedAuthAlgorithms !== undefined) view.setUint32(20, Number(data.uSupportedAuthAlgorithms), true);
  // 0x18: u32
  if (data?.uMaxAuthKeyMappingLength !== undefined) view.setUint32(24, Number(data.uMaxAuthKeyMappingLength), true);
  // 0x1c: pad4
  return buf;
}

export class DOT11_OFFLOAD_CAPABILITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uSupportedWEPAlgorithms(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uNumOfReplayWindows(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uMaxWEPKeyMappingLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uSupportedAuthAlgorithms(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uMaxAuthKeyMappingLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uSupportedWEPAlgorithms(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uNumOfReplayWindows(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uMaxWEPKeyMappingLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uSupportedAuthAlgorithms(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uMaxAuthKeyMappingLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_CURRENT_OFFLOAD_CAPABILITY (size: 8)
 */
export interface DOT11_CURRENT_OFFLOAD_CAPABILITY {
  /** u32 */
  uReserved: number;
  /** u32 */
  uFlags: number;
}

export const sizeofDOT11_CURRENT_OFFLOAD_CAPABILITY = 8;

export function allocDOT11_CURRENT_OFFLOAD_CAPABILITY(data?: Partial<DOT11_CURRENT_OFFLOAD_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_CURRENT_OFFLOAD_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: u32
  if (data?.uFlags !== undefined) view.setUint32(4, Number(data.uFlags), true);
  return buf;
}

export class DOT11_CURRENT_OFFLOAD_CAPABILITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_IV48_COUNTER (size: 8)
 */
export interface DOT11_IV48_COUNTER {
  /** u32 */
  uIV32Counter: number;
  /** u16 */
  usIV16Counter: number;
}

export const sizeofDOT11_IV48_COUNTER = 8;

export function allocDOT11_IV48_COUNTER(data?: Partial<DOT11_IV48_COUNTER>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_IV48_COUNTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uIV32Counter !== undefined) view.setUint32(0, Number(data.uIV32Counter), true);
  // 0x04: u16
  if (data?.usIV16Counter !== undefined) view.setUint16(4, Number(data.usIV16Counter), true);
  // 0x06: pad2
  return buf;
}

export class DOT11_IV48_COUNTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uIV32Counter(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get usIV16Counter(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u32
  set uIV32Counter(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set usIV16Counter(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

export type HANDLE = Deno.PointerValue;

export type BOOLEAN = number;

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WEP_OFFLOAD (size: 104)
 */
export interface DOT11_WEP_OFFLOAD {
  /** u32 */
  uReserved: number;
  /** Windows.Win32.Foundation.HANDLE */
  hOffloadContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hOffload: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_OFFLOAD_TYPE */
  dot11OffloadType: DOT11_OFFLOAD_TYPE;
  /** u32 */
  dwAlgorithm: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bRowIsOutbound: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUseDefault: Uint8Array | Deno.PointerValue;
  /** u32 */
  uFlags: number;
  /** array */
  ucMacAddress: Deno.PointerValue;
  /** u32 */
  uNumOfRWsOnPeer: number;
  /** u32 */
  uNumOfRWsOnMe: number;
  /** array */
  dot11IV48Counters: Deno.PointerValue;
  /** array */
  usDot11RWBitMaps: Deno.PointerValue;
  /** u16 */
  usKeyLength: number;
  /** array */
  ucKey: Deno.PointerValue;
}

export const sizeofDOT11_WEP_OFFLOAD = 104;

export function allocDOT11_WEP_OFFLOAD(data?: Partial<DOT11_WEP_OFFLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WEP_OFFLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hOffloadContext !== undefined) view.setBigUint64(8, data.hOffloadContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hOffloadContext))), true);
  // 0x10: pointer
  if (data?.hOffload !== undefined) view.setBigUint64(16, data.hOffload === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hOffload))), true);
  // 0x18: i32
  if (data?.dot11OffloadType !== undefined) view.setInt32(24, Number(data.dot11OffloadType), true);
  // 0x1c: u32
  if (data?.dwAlgorithm !== undefined) view.setUint32(28, Number(data.dwAlgorithm), true);
  // 0x20: pointer
  if (data?.bRowIsOutbound !== undefined) view.setBigUint64(32, data.bRowIsOutbound === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bRowIsOutbound))), true);
  // 0x28: pointer
  if (data?.bUseDefault !== undefined) view.setBigUint64(40, data.bUseDefault === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bUseDefault))), true);
  // 0x30: u32
  if (data?.uFlags !== undefined) view.setUint32(48, Number(data.uFlags), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ucMacAddress !== undefined) view.setBigUint64(56, data.ucMacAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucMacAddress))), true);
  // 0x40: u32
  if (data?.uNumOfRWsOnPeer !== undefined) view.setUint32(64, Number(data.uNumOfRWsOnPeer), true);
  // 0x44: u32
  if (data?.uNumOfRWsOnMe !== undefined) view.setUint32(68, Number(data.uNumOfRWsOnMe), true);
  // 0x48: pointer
  if (data?.dot11IV48Counters !== undefined) view.setBigUint64(72, data.dot11IV48Counters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11IV48Counters))), true);
  // 0x50: pointer
  if (data?.usDot11RWBitMaps !== undefined) view.setBigUint64(80, data.usDot11RWBitMaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.usDot11RWBitMaps))), true);
  // 0x58: u16
  if (data?.usKeyLength !== undefined) view.setUint16(88, Number(data.usKeyLength), true);
  // 0x5a: pad6
  // 0x60: pointer
  if (data?.ucKey !== undefined) view.setBigUint64(96, data.ucKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucKey))), true);
  return buf;
}

export class DOT11_WEP_OFFLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hOffloadContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hOffload(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get dot11OffloadType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get dwAlgorithm(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get bRowIsOutbound(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get bUseDefault(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get uFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ucMacAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get uNumOfRWsOnPeer(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get uNumOfRWsOnMe(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: pointer
  get dot11IV48Counters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get usDot11RWBitMaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u16
  get usKeyLength(): number {
    return this.view.getUint16(88, true);
  }

  // 0x5a: pad6

  // 0x60: pointer
  get ucKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hOffloadContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hOffload(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set dot11OffloadType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set dwAlgorithm(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set bRowIsOutbound(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set bUseDefault(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set uFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ucMacAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set uNumOfRWsOnPeer(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set uNumOfRWsOnMe(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: pointer
  set dot11IV48Counters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set usDot11RWBitMaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u16
  set usKeyLength(value: number) {
    this.view.setUint16(88, value, true);
  }

  // 0x5a: pad6

  // 0x60: pointer
  set ucKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WEP_UPLOAD (size: 40)
 */
export interface DOT11_WEP_UPLOAD {
  /** u32 */
  uReserved: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_OFFLOAD_TYPE */
  dot11OffloadType: DOT11_OFFLOAD_TYPE;
  /** Windows.Win32.Foundation.HANDLE */
  hOffload: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfRWsUsed: number;
  /** array */
  dot11IV48Counters: Deno.PointerValue;
  /** array */
  usDot11RWBitMaps: Deno.PointerValue;
}

export const sizeofDOT11_WEP_UPLOAD = 40;

export function allocDOT11_WEP_UPLOAD(data?: Partial<DOT11_WEP_UPLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WEP_UPLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: i32
  if (data?.dot11OffloadType !== undefined) view.setInt32(4, Number(data.dot11OffloadType), true);
  // 0x08: pointer
  if (data?.hOffload !== undefined) view.setBigUint64(8, data.hOffload === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hOffload))), true);
  // 0x10: u32
  if (data?.uNumOfRWsUsed !== undefined) view.setUint32(16, Number(data.uNumOfRWsUsed), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dot11IV48Counters !== undefined) view.setBigUint64(24, data.dot11IV48Counters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11IV48Counters))), true);
  // 0x20: pointer
  if (data?.usDot11RWBitMaps !== undefined) view.setBigUint64(32, data.usDot11RWBitMaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.usDot11RWBitMaps))), true);
  return buf;
}

export class DOT11_WEP_UPLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get dot11OffloadType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get hOffload(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uNumOfRWsUsed(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dot11IV48Counters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get usDot11RWBitMaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set dot11OffloadType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set hOffload(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uNumOfRWsUsed(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dot11IV48Counters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set usDot11RWBitMaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_DEFAULT_WEP_OFFLOAD (size: 96)
 */
export interface DOT11_DEFAULT_WEP_OFFLOAD {
  /** u32 */
  uReserved: number;
  /** Windows.Win32.Foundation.HANDLE */
  hOffloadContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hOffload: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwIndex: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_OFFLOAD_TYPE */
  dot11OffloadType: DOT11_OFFLOAD_TYPE;
  /** u32 */
  dwAlgorithm: number;
  /** u32 */
  uFlags: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_KEY_DIRECTION */
  dot11KeyDirection: DOT11_KEY_DIRECTION;
  /** array */
  ucMacAddress: Deno.PointerValue;
  /** u32 */
  uNumOfRWsOnMe: number;
  /** array */
  dot11IV48Counters: Deno.PointerValue;
  /** array */
  usDot11RWBitMaps: Deno.PointerValue;
  /** u16 */
  usKeyLength: number;
  /** array */
  ucKey: Deno.PointerValue;
}

export const sizeofDOT11_DEFAULT_WEP_OFFLOAD = 96;

export function allocDOT11_DEFAULT_WEP_OFFLOAD(data?: Partial<DOT11_DEFAULT_WEP_OFFLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_DEFAULT_WEP_OFFLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hOffloadContext !== undefined) view.setBigUint64(8, data.hOffloadContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hOffloadContext))), true);
  // 0x10: pointer
  if (data?.hOffload !== undefined) view.setBigUint64(16, data.hOffload === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hOffload))), true);
  // 0x18: u32
  if (data?.dwIndex !== undefined) view.setUint32(24, Number(data.dwIndex), true);
  // 0x1c: i32
  if (data?.dot11OffloadType !== undefined) view.setInt32(28, Number(data.dot11OffloadType), true);
  // 0x20: u32
  if (data?.dwAlgorithm !== undefined) view.setUint32(32, Number(data.dwAlgorithm), true);
  // 0x24: u32
  if (data?.uFlags !== undefined) view.setUint32(36, Number(data.uFlags), true);
  // 0x28: i32
  if (data?.dot11KeyDirection !== undefined) view.setInt32(40, Number(data.dot11KeyDirection), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ucMacAddress !== undefined) view.setBigUint64(48, data.ucMacAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucMacAddress))), true);
  // 0x38: u32
  if (data?.uNumOfRWsOnMe !== undefined) view.setUint32(56, Number(data.uNumOfRWsOnMe), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.dot11IV48Counters !== undefined) view.setBigUint64(64, data.dot11IV48Counters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11IV48Counters))), true);
  // 0x48: pointer
  if (data?.usDot11RWBitMaps !== undefined) view.setBigUint64(72, data.usDot11RWBitMaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.usDot11RWBitMaps))), true);
  // 0x50: u16
  if (data?.usKeyLength !== undefined) view.setUint16(80, Number(data.usKeyLength), true);
  // 0x52: pad6
  // 0x58: pointer
  if (data?.ucKey !== undefined) view.setBigUint64(88, data.ucKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucKey))), true);
  return buf;
}

export class DOT11_DEFAULT_WEP_OFFLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hOffloadContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hOffload(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get dot11OffloadType(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get dwAlgorithm(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get uFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get dot11KeyDirection(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ucMacAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get uNumOfRWsOnMe(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get dot11IV48Counters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get usDot11RWBitMaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u16
  get usKeyLength(): number {
    return this.view.getUint16(80, true);
  }

  // 0x52: pad6

  // 0x58: pointer
  get ucKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hOffloadContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hOffload(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set dot11OffloadType(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set dwAlgorithm(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set uFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set dot11KeyDirection(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ucMacAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set uNumOfRWsOnMe(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set dot11IV48Counters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set usDot11RWBitMaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u16
  set usKeyLength(value: number) {
    this.view.setUint16(80, value, true);
  }

  // 0x52: pad6

  // 0x58: pointer
  set ucKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_DEFAULT_WEP_UPLOAD (size: 40)
 */
export interface DOT11_DEFAULT_WEP_UPLOAD {
  /** u32 */
  uReserved: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_OFFLOAD_TYPE */
  dot11OffloadType: DOT11_OFFLOAD_TYPE;
  /** Windows.Win32.Foundation.HANDLE */
  hOffload: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfRWsUsed: number;
  /** array */
  dot11IV48Counters: Deno.PointerValue;
  /** array */
  usDot11RWBitMaps: Deno.PointerValue;
}

export const sizeofDOT11_DEFAULT_WEP_UPLOAD = 40;

export function allocDOT11_DEFAULT_WEP_UPLOAD(data?: Partial<DOT11_DEFAULT_WEP_UPLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_DEFAULT_WEP_UPLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: i32
  if (data?.dot11OffloadType !== undefined) view.setInt32(4, Number(data.dot11OffloadType), true);
  // 0x08: pointer
  if (data?.hOffload !== undefined) view.setBigUint64(8, data.hOffload === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hOffload))), true);
  // 0x10: u32
  if (data?.uNumOfRWsUsed !== undefined) view.setUint32(16, Number(data.uNumOfRWsUsed), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dot11IV48Counters !== undefined) view.setBigUint64(24, data.dot11IV48Counters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11IV48Counters))), true);
  // 0x20: pointer
  if (data?.usDot11RWBitMaps !== undefined) view.setBigUint64(32, data.usDot11RWBitMaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.usDot11RWBitMaps))), true);
  return buf;
}

export class DOT11_DEFAULT_WEP_UPLOADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get dot11OffloadType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get hOffload(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uNumOfRWsUsed(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dot11IV48Counters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get usDot11RWBitMaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set dot11OffloadType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set hOffload(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uNumOfRWsUsed(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dot11IV48Counters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set usDot11RWBitMaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_OPERATION_MODE_CAPABILITY (size: 24)
 */
export interface DOT11_OPERATION_MODE_CAPABILITY {
  /** u32 */
  uReserved: number;
  /** u32 */
  uMajorVersion: number;
  /** u32 */
  uMinorVersion: number;
  /** u32 */
  uNumOfTXBuffers: number;
  /** u32 */
  uNumOfRXBuffers: number;
  /** u32 */
  uOpModeCapability: number;
}

export const sizeofDOT11_OPERATION_MODE_CAPABILITY = 24;

export function allocDOT11_OPERATION_MODE_CAPABILITY(data?: Partial<DOT11_OPERATION_MODE_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_OPERATION_MODE_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: u32
  if (data?.uMajorVersion !== undefined) view.setUint32(4, Number(data.uMajorVersion), true);
  // 0x08: u32
  if (data?.uMinorVersion !== undefined) view.setUint32(8, Number(data.uMinorVersion), true);
  // 0x0c: u32
  if (data?.uNumOfTXBuffers !== undefined) view.setUint32(12, Number(data.uNumOfTXBuffers), true);
  // 0x10: u32
  if (data?.uNumOfRXBuffers !== undefined) view.setUint32(16, Number(data.uNumOfRXBuffers), true);
  // 0x14: u32
  if (data?.uOpModeCapability !== undefined) view.setUint32(20, Number(data.uOpModeCapability), true);
  return buf;
}

export class DOT11_OPERATION_MODE_CAPABILITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uMajorVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uMinorVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uNumOfTXBuffers(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uNumOfRXBuffers(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uOpModeCapability(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uMajorVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uMinorVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uNumOfTXBuffers(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uNumOfRXBuffers(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uOpModeCapability(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_CURRENT_OPERATION_MODE (size: 8)
 */
export interface DOT11_CURRENT_OPERATION_MODE {
  /** u32 */
  uReserved: number;
  /** u32 */
  uCurrentOpMode: number;
}

export const sizeofDOT11_CURRENT_OPERATION_MODE = 8;

export function allocDOT11_CURRENT_OPERATION_MODE(data?: Partial<DOT11_CURRENT_OPERATION_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_CURRENT_OPERATION_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: u32
  if (data?.uCurrentOpMode !== undefined) view.setUint32(4, Number(data.uCurrentOpMode), true);
  return buf;
}

export class DOT11_CURRENT_OPERATION_MODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uCurrentOpMode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uCurrentOpMode(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SCAN_REQUEST (size: 80)
 */
export interface DOT11_SCAN_REQUEST {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BSSType: DOT11_BSS_TYPE;
  /** array */
  dot11BSSID: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  dot11SSID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SCAN_TYPE */
  dot11ScanType: DOT11_SCAN_TYPE;
  /** Windows.Win32.Foundation.BOOLEAN */
  bRestrictedScan: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUseRequestIE: Uint8Array | Deno.PointerValue;
  /** u32 */
  uRequestIDsOffset: number;
  /** u32 */
  uNumOfRequestIDs: number;
  /** u32 */
  uPhyTypesOffset: number;
  /** u32 */
  uNumOfPhyTypes: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
  /** array */
  ucBuffer: Deno.PointerValue;
}

export const sizeofDOT11_SCAN_REQUEST = 80;

export function allocDOT11_SCAN_REQUEST(data?: Partial<DOT11_SCAN_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SCAN_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dot11BSSType !== undefined) view.setInt32(0, Number(data.dot11BSSType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.dot11BSSID !== undefined) view.setBigUint64(8, data.dot11BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11BSSID))), true);
  // 0x10: pointer
  if (data?.dot11SSID !== undefined) view.setBigUint64(16, data.dot11SSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11SSID))), true);
  // 0x18: i32
  if (data?.dot11ScanType !== undefined) view.setInt32(24, Number(data.dot11ScanType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.bRestrictedScan !== undefined) view.setBigUint64(32, data.bRestrictedScan === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bRestrictedScan))), true);
  // 0x28: pointer
  if (data?.bUseRequestIE !== undefined) view.setBigUint64(40, data.bUseRequestIE === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bUseRequestIE))), true);
  // 0x30: u32
  if (data?.uRequestIDsOffset !== undefined) view.setUint32(48, Number(data.uRequestIDsOffset), true);
  // 0x34: u32
  if (data?.uNumOfRequestIDs !== undefined) view.setUint32(52, Number(data.uNumOfRequestIDs), true);
  // 0x38: u32
  if (data?.uPhyTypesOffset !== undefined) view.setUint32(56, Number(data.uPhyTypesOffset), true);
  // 0x3c: u32
  if (data?.uNumOfPhyTypes !== undefined) view.setUint32(60, Number(data.uNumOfPhyTypes), true);
  // 0x40: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(64, Number(data.uIEsOffset), true);
  // 0x44: u32
  if (data?.uIEsLength !== undefined) view.setUint32(68, Number(data.uIEsLength), true);
  // 0x48: pointer
  if (data?.ucBuffer !== undefined) view.setBigUint64(72, data.ucBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBuffer))), true);
  return buf;
}

export class DOT11_SCAN_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dot11BSSType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get dot11BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get dot11SSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get dot11ScanType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get bRestrictedScan(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get bUseRequestIE(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get uRequestIDsOffset(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get uNumOfRequestIDs(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get uPhyTypesOffset(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get uNumOfPhyTypes(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get uIEsOffset(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get uIEsLength(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: pointer
  get ucBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set dot11BSSType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set dot11BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set dot11SSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set dot11ScanType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set bRestrictedScan(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set bUseRequestIE(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set uRequestIDsOffset(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set uNumOfRequestIDs(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set uPhyTypesOffset(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set uNumOfPhyTypes(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set uIEsLength(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: pointer
  set ucBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_TYPE_INFO (size: 48)
 */
export interface DOT11_PHY_TYPE_INFO {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_TYPE */
  dot11PhyType: DOT11_PHY_TYPE;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUseParameters: Uint8Array | Deno.PointerValue;
  /** u32 */
  uProbeDelay: number;
  /** u32 */
  uMinChannelTime: number;
  /** u32 */
  uMaxChannelTime: number;
  /** Windows.Win32.NetworkManagement.WiFi.CH_DESCRIPTION_TYPE */
  ChDescriptionType: CH_DESCRIPTION_TYPE;
  /** u32 */
  uChannelListSize: number;
  /** array */
  ucChannelListBuffer: Deno.PointerValue;
}

export const sizeofDOT11_PHY_TYPE_INFO = 48;

export function allocDOT11_PHY_TYPE_INFO(data?: Partial<DOT11_PHY_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PHY_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dot11PhyType !== undefined) view.setInt32(0, Number(data.dot11PhyType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bUseParameters !== undefined) view.setBigUint64(8, data.bUseParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bUseParameters))), true);
  // 0x10: u32
  if (data?.uProbeDelay !== undefined) view.setUint32(16, Number(data.uProbeDelay), true);
  // 0x14: u32
  if (data?.uMinChannelTime !== undefined) view.setUint32(20, Number(data.uMinChannelTime), true);
  // 0x18: u32
  if (data?.uMaxChannelTime !== undefined) view.setUint32(24, Number(data.uMaxChannelTime), true);
  // 0x1c: i32
  if (data?.ChDescriptionType !== undefined) view.setInt32(28, Number(data.ChDescriptionType), true);
  // 0x20: u32
  if (data?.uChannelListSize !== undefined) view.setUint32(32, Number(data.uChannelListSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ucChannelListBuffer !== undefined) view.setBigUint64(40, data.ucChannelListBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucChannelListBuffer))), true);
  return buf;
}

export class DOT11_PHY_TYPE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dot11PhyType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bUseParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uProbeDelay(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uMinChannelTime(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uMaxChannelTime(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get ChDescriptionType(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get uChannelListSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ucChannelListBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set dot11PhyType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bUseParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uProbeDelay(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uMinChannelTime(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uMaxChannelTime(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set ChDescriptionType(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set uChannelListSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ucChannelListBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SCAN_REQUEST_V2 (size: 80)
 */
export interface DOT11_SCAN_REQUEST_V2 {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BSSType: DOT11_BSS_TYPE;
  /** array */
  dot11BSSID: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SCAN_TYPE */
  dot11ScanType: DOT11_SCAN_TYPE;
  /** Windows.Win32.Foundation.BOOLEAN */
  bRestrictedScan: Uint8Array | Deno.PointerValue;
  /** u32 */
  udot11SSIDsOffset: number;
  /** u32 */
  uNumOfdot11SSIDs: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUseRequestIE: Uint8Array | Deno.PointerValue;
  /** u32 */
  uRequestIDsOffset: number;
  /** u32 */
  uNumOfRequestIDs: number;
  /** u32 */
  uPhyTypeInfosOffset: number;
  /** u32 */
  uNumOfPhyTypeInfos: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
  /** array */
  ucBuffer: Deno.PointerValue;
}

export const sizeofDOT11_SCAN_REQUEST_V2 = 80;

export function allocDOT11_SCAN_REQUEST_V2(data?: Partial<DOT11_SCAN_REQUEST_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SCAN_REQUEST_V2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dot11BSSType !== undefined) view.setInt32(0, Number(data.dot11BSSType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.dot11BSSID !== undefined) view.setBigUint64(8, data.dot11BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11BSSID))), true);
  // 0x10: i32
  if (data?.dot11ScanType !== undefined) view.setInt32(16, Number(data.dot11ScanType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.bRestrictedScan !== undefined) view.setBigUint64(24, data.bRestrictedScan === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bRestrictedScan))), true);
  // 0x20: u32
  if (data?.udot11SSIDsOffset !== undefined) view.setUint32(32, Number(data.udot11SSIDsOffset), true);
  // 0x24: u32
  if (data?.uNumOfdot11SSIDs !== undefined) view.setUint32(36, Number(data.uNumOfdot11SSIDs), true);
  // 0x28: pointer
  if (data?.bUseRequestIE !== undefined) view.setBigUint64(40, data.bUseRequestIE === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bUseRequestIE))), true);
  // 0x30: u32
  if (data?.uRequestIDsOffset !== undefined) view.setUint32(48, Number(data.uRequestIDsOffset), true);
  // 0x34: u32
  if (data?.uNumOfRequestIDs !== undefined) view.setUint32(52, Number(data.uNumOfRequestIDs), true);
  // 0x38: u32
  if (data?.uPhyTypeInfosOffset !== undefined) view.setUint32(56, Number(data.uPhyTypeInfosOffset), true);
  // 0x3c: u32
  if (data?.uNumOfPhyTypeInfos !== undefined) view.setUint32(60, Number(data.uNumOfPhyTypeInfos), true);
  // 0x40: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(64, Number(data.uIEsOffset), true);
  // 0x44: u32
  if (data?.uIEsLength !== undefined) view.setUint32(68, Number(data.uIEsLength), true);
  // 0x48: pointer
  if (data?.ucBuffer !== undefined) view.setBigUint64(72, data.ucBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBuffer))), true);
  return buf;
}

export class DOT11_SCAN_REQUEST_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dot11BSSType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get dot11BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get dot11ScanType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get bRestrictedScan(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get udot11SSIDsOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get uNumOfdot11SSIDs(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get bUseRequestIE(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get uRequestIDsOffset(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get uNumOfRequestIDs(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get uPhyTypeInfosOffset(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get uNumOfPhyTypeInfos(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get uIEsOffset(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get uIEsLength(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: pointer
  get ucBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set dot11BSSType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set dot11BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set dot11ScanType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set bRestrictedScan(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set udot11SSIDsOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set uNumOfdot11SSIDs(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set bUseRequestIE(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set uRequestIDsOffset(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set uNumOfRequestIDs(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set uPhyTypeInfosOffset(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set uNumOfPhyTypeInfos(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set uIEsLength(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: pointer
  set ucBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_TYPE_LIST (size: 24)
 */
export interface DOT11_PHY_TYPE_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11PhyType: Deno.PointerValue;
}

export const sizeofDOT11_PHY_TYPE_LIST = 24;

export function allocDOT11_PHY_TYPE_LIST(data?: Partial<DOT11_PHY_TYPE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PHY_TYPE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.dot11PhyType !== undefined) view.setBigUint64(16, data.dot11PhyType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11PhyType))), true);
  return buf;
}

export class DOT11_PHY_TYPE_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get dot11PhyType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set dot11PhyType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_DESCRIPTION (size: 48)
 */
export interface DOT11_BSS_DESCRIPTION {
  /** u32 */
  uReserved: number;
  /** array */
  dot11BSSID: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BSSType: DOT11_BSS_TYPE;
  /** u16 */
  usBeaconPeriod: number;
  /** u64 */
  ullTimestamp: Deno.PointerValue;
  /** u16 */
  usCapabilityInformation: number;
  /** u32 */
  uBufferLength: number;
  /** array */
  ucBuffer: Deno.PointerValue;
}

export const sizeofDOT11_BSS_DESCRIPTION = 48;

export function allocDOT11_BSS_DESCRIPTION(data?: Partial<DOT11_BSS_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_BSS_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.dot11BSSID !== undefined) view.setBigUint64(8, data.dot11BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11BSSID))), true);
  // 0x10: i32
  if (data?.dot11BSSType !== undefined) view.setInt32(16, Number(data.dot11BSSType), true);
  // 0x14: u16
  if (data?.usBeaconPeriod !== undefined) view.setUint16(20, Number(data.usBeaconPeriod), true);
  // 0x16: pad2
  // 0x18: u64
  if (data?.ullTimestamp !== undefined) view.setBigUint64(24, BigInt(data.ullTimestamp), true);
  // 0x20: u16
  if (data?.usCapabilityInformation !== undefined) view.setUint16(32, Number(data.usCapabilityInformation), true);
  // 0x22: u32
  if (data?.uBufferLength !== undefined) view.setUint32(34, Number(data.uBufferLength), true);
  // 0x26: pad2
  // 0x28: pointer
  if (data?.ucBuffer !== undefined) view.setBigUint64(40, data.ucBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBuffer))), true);
  return buf;
}

export class DOT11_BSS_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get dot11BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get dot11BSSType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u16
  get usBeaconPeriod(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: pad2

  // 0x18: u64
  get ullTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u16
  get usCapabilityInformation(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: u32
  get uBufferLength(): number {
    return this.view.getUint32(34, true);
  }

  // 0x26: pad2

  // 0x28: pointer
  get ucBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set dot11BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set dot11BSSType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u16
  set usBeaconPeriod(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: pad2

  // 0x18: u64
  set ullTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u16
  set usCapabilityInformation(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: u32
  set uBufferLength(value: number) {
    this.view.setUint32(34, value, true);
  }

  // 0x26: pad2

  // 0x28: pointer
  set ucBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_JOIN_REQUEST (size: 32)
 */
export interface DOT11_JOIN_REQUEST {
  /** u32 */
  uJoinFailureTimeout: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_RATE_SET */
  OperationalRateSet: Uint8Array | Deno.PointerValue;
  /** u32 */
  uChCenterFrequency: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_DESCRIPTION */
  dot11BSSDescription: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_JOIN_REQUEST = 32;

export function allocDOT11_JOIN_REQUEST(data?: Partial<DOT11_JOIN_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_JOIN_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uJoinFailureTimeout !== undefined) view.setUint32(0, Number(data.uJoinFailureTimeout), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OperationalRateSet !== undefined) view.setBigUint64(8, data.OperationalRateSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OperationalRateSet))), true);
  // 0x10: u32
  if (data?.uChCenterFrequency !== undefined) view.setUint32(16, Number(data.uChCenterFrequency), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dot11BSSDescription !== undefined) view.setBigUint64(24, data.dot11BSSDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11BSSDescription))), true);
  return buf;
}

export class DOT11_JOIN_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uJoinFailureTimeout(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get OperationalRateSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uChCenterFrequency(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dot11BSSDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uJoinFailureTimeout(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set OperationalRateSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uChCenterFrequency(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dot11BSSDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_START_REQUEST (size: 32)
 */
export interface DOT11_START_REQUEST {
  /** u32 */
  uStartFailureTimeout: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_RATE_SET */
  OperationalRateSet: Uint8Array | Deno.PointerValue;
  /** u32 */
  uChCenterFrequency: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_DESCRIPTION */
  dot11BSSDescription: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_START_REQUEST = 32;

export function allocDOT11_START_REQUEST(data?: Partial<DOT11_START_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_START_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uStartFailureTimeout !== undefined) view.setUint32(0, Number(data.uStartFailureTimeout), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OperationalRateSet !== undefined) view.setBigUint64(8, data.OperationalRateSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OperationalRateSet))), true);
  // 0x10: u32
  if (data?.uChCenterFrequency !== undefined) view.setUint32(16, Number(data.uChCenterFrequency), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dot11BSSDescription !== undefined) view.setBigUint64(24, data.dot11BSSDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11BSSDescription))), true);
  return buf;
}

export class DOT11_START_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uStartFailureTimeout(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get OperationalRateSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uChCenterFrequency(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dot11BSSDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uStartFailureTimeout(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set OperationalRateSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uChCenterFrequency(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dot11BSSDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_UPDATE_IE (size: 16)
 */
export interface DOT11_UPDATE_IE {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_UPDATE_IE_OP */
  dot11UpdateIEOp: DOT11_UPDATE_IE_OP;
  /** u32 */
  uBufferLength: number;
  /** array */
  ucBuffer: Deno.PointerValue;
}

export const sizeofDOT11_UPDATE_IE = 16;

export function allocDOT11_UPDATE_IE(data?: Partial<DOT11_UPDATE_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_UPDATE_IE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dot11UpdateIEOp !== undefined) view.setInt32(0, Number(data.dot11UpdateIEOp), true);
  // 0x04: u32
  if (data?.uBufferLength !== undefined) view.setUint32(4, Number(data.uBufferLength), true);
  // 0x08: pointer
  if (data?.ucBuffer !== undefined) view.setBigUint64(8, data.ucBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBuffer))), true);
  return buf;
}

export class DOT11_UPDATE_IEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dot11UpdateIEOp(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get uBufferLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ucBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set dot11UpdateIEOp(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set uBufferLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ucBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RESET_REQUEST (size: 24)
 */
export interface DOT11_RESET_REQUEST {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_RESET_TYPE */
  dot11ResetType: DOT11_RESET_TYPE;
  /** array */
  dot11MacAddress: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bSetDefaultMIB: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_RESET_REQUEST = 24;

export function allocDOT11_RESET_REQUEST(data?: Partial<DOT11_RESET_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RESET_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dot11ResetType !== undefined) view.setInt32(0, Number(data.dot11ResetType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.dot11MacAddress !== undefined) view.setBigUint64(8, data.dot11MacAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11MacAddress))), true);
  // 0x10: pointer
  if (data?.bSetDefaultMIB !== undefined) view.setBigUint64(16, data.bSetDefaultMIB === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bSetDefaultMIB))), true);
  return buf;
}

export class DOT11_RESET_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dot11ResetType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get dot11MacAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bSetDefaultMIB(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set dot11ResetType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set dot11MacAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bSetDefaultMIB(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_OPTIONAL_CAPABILITY (size: 32)
 */
export interface DOT11_OPTIONAL_CAPABILITY {
  /** u32 */
  uReserved: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDot11PCF: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDot11PCFMPDUTransferToPC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bStrictlyOrderedServiceClass: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_OPTIONAL_CAPABILITY = 32;

export function allocDOT11_OPTIONAL_CAPABILITY(data?: Partial<DOT11_OPTIONAL_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_OPTIONAL_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bDot11PCF !== undefined) view.setBigUint64(8, data.bDot11PCF === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDot11PCF))), true);
  // 0x10: pointer
  if (data?.bDot11PCFMPDUTransferToPC !== undefined) view.setBigUint64(16, data.bDot11PCFMPDUTransferToPC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDot11PCFMPDUTransferToPC))), true);
  // 0x18: pointer
  if (data?.bStrictlyOrderedServiceClass !== undefined) view.setBigUint64(24, data.bStrictlyOrderedServiceClass === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bStrictlyOrderedServiceClass))), true);
  return buf;
}

export class DOT11_OPTIONAL_CAPABILITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bDot11PCF(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bDot11PCFMPDUTransferToPC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get bStrictlyOrderedServiceClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bDot11PCF(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bDot11PCFMPDUTransferToPC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set bStrictlyOrderedServiceClass(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_CURRENT_OPTIONAL_CAPABILITY (size: 40)
 */
export interface DOT11_CURRENT_OPTIONAL_CAPABILITY {
  /** u32 */
  uReserved: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDot11CFPollable: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDot11PCF: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDot11PCFMPDUTransferToPC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bStrictlyOrderedServiceClass: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_CURRENT_OPTIONAL_CAPABILITY = 40;

export function allocDOT11_CURRENT_OPTIONAL_CAPABILITY(data?: Partial<DOT11_CURRENT_OPTIONAL_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_CURRENT_OPTIONAL_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bDot11CFPollable !== undefined) view.setBigUint64(8, data.bDot11CFPollable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDot11CFPollable))), true);
  // 0x10: pointer
  if (data?.bDot11PCF !== undefined) view.setBigUint64(16, data.bDot11PCF === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDot11PCF))), true);
  // 0x18: pointer
  if (data?.bDot11PCFMPDUTransferToPC !== undefined) view.setBigUint64(24, data.bDot11PCFMPDUTransferToPC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDot11PCFMPDUTransferToPC))), true);
  // 0x20: pointer
  if (data?.bStrictlyOrderedServiceClass !== undefined) view.setBigUint64(32, data.bStrictlyOrderedServiceClass === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bStrictlyOrderedServiceClass))), true);
  return buf;
}

export class DOT11_CURRENT_OPTIONAL_CAPABILITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bDot11CFPollable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bDot11PCF(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get bDot11PCFMPDUTransferToPC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get bStrictlyOrderedServiceClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bDot11CFPollable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bDot11PCF(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set bDot11PCFMPDUTransferToPC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set bStrictlyOrderedServiceClass(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_POWER_MGMT_MODE (size: 24)
 */
export interface DOT11_POWER_MGMT_MODE {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_POWER_MODE */
  dot11PowerMode: DOT11_POWER_MODE;
  /** u32 */
  uPowerSaveLevel: number;
  /** u16 */
  usListenInterval: number;
  /** u16 */
  usAID: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bReceiveDTIMs: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_POWER_MGMT_MODE = 24;

export function allocDOT11_POWER_MGMT_MODE(data?: Partial<DOT11_POWER_MGMT_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_POWER_MGMT_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dot11PowerMode !== undefined) view.setInt32(0, Number(data.dot11PowerMode), true);
  // 0x04: u32
  if (data?.uPowerSaveLevel !== undefined) view.setUint32(4, Number(data.uPowerSaveLevel), true);
  // 0x08: u16
  if (data?.usListenInterval !== undefined) view.setUint16(8, Number(data.usListenInterval), true);
  // 0x0a: u16
  if (data?.usAID !== undefined) view.setUint16(10, Number(data.usAID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.bReceiveDTIMs !== undefined) view.setBigUint64(16, data.bReceiveDTIMs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bReceiveDTIMs))), true);
  return buf;
}

export class DOT11_POWER_MGMT_MODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dot11PowerMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get uPowerSaveLevel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get usListenInterval(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get usAID(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get bReceiveDTIMs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set dot11PowerMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set uPowerSaveLevel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set usListenInterval(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set usAID(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set bReceiveDTIMs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_COUNTERS_ENTRY (size: 56)
 */
export interface DOT11_COUNTERS_ENTRY {
  /** u32 */
  uTransmittedFragmentCount: number;
  /** u32 */
  uMulticastTransmittedFrameCount: number;
  /** u32 */
  uFailedCount: number;
  /** u32 */
  uRetryCount: number;
  /** u32 */
  uMultipleRetryCount: number;
  /** u32 */
  uFrameDuplicateCount: number;
  /** u32 */
  uRTSSuccessCount: number;
  /** u32 */
  uRTSFailureCount: number;
  /** u32 */
  uACKFailureCount: number;
  /** u32 */
  uReceivedFragmentCount: number;
  /** u32 */
  uMulticastReceivedFrameCount: number;
  /** u32 */
  uFCSErrorCount: number;
  /** u32 */
  uTransmittedFrameCount: number;
}

export const sizeofDOT11_COUNTERS_ENTRY = 56;

export function allocDOT11_COUNTERS_ENTRY(data?: Partial<DOT11_COUNTERS_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_COUNTERS_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uTransmittedFragmentCount !== undefined) view.setUint32(0, Number(data.uTransmittedFragmentCount), true);
  // 0x04: u32
  if (data?.uMulticastTransmittedFrameCount !== undefined) view.setUint32(4, Number(data.uMulticastTransmittedFrameCount), true);
  // 0x08: u32
  if (data?.uFailedCount !== undefined) view.setUint32(8, Number(data.uFailedCount), true);
  // 0x0c: u32
  if (data?.uRetryCount !== undefined) view.setUint32(12, Number(data.uRetryCount), true);
  // 0x10: u32
  if (data?.uMultipleRetryCount !== undefined) view.setUint32(16, Number(data.uMultipleRetryCount), true);
  // 0x14: u32
  if (data?.uFrameDuplicateCount !== undefined) view.setUint32(20, Number(data.uFrameDuplicateCount), true);
  // 0x18: u32
  if (data?.uRTSSuccessCount !== undefined) view.setUint32(24, Number(data.uRTSSuccessCount), true);
  // 0x1c: u32
  if (data?.uRTSFailureCount !== undefined) view.setUint32(28, Number(data.uRTSFailureCount), true);
  // 0x20: u32
  if (data?.uACKFailureCount !== undefined) view.setUint32(32, Number(data.uACKFailureCount), true);
  // 0x24: u32
  if (data?.uReceivedFragmentCount !== undefined) view.setUint32(36, Number(data.uReceivedFragmentCount), true);
  // 0x28: u32
  if (data?.uMulticastReceivedFrameCount !== undefined) view.setUint32(40, Number(data.uMulticastReceivedFrameCount), true);
  // 0x2c: u32
  if (data?.uFCSErrorCount !== undefined) view.setUint32(44, Number(data.uFCSErrorCount), true);
  // 0x30: u32
  if (data?.uTransmittedFrameCount !== undefined) view.setUint32(48, Number(data.uTransmittedFrameCount), true);
  // 0x34: pad4
  return buf;
}

export class DOT11_COUNTERS_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uTransmittedFragmentCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uMulticastTransmittedFrameCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uFailedCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uRetryCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uMultipleRetryCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uFrameDuplicateCount(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uRTSSuccessCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get uRTSFailureCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get uACKFailureCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get uReceivedFragmentCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get uMulticastReceivedFrameCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get uFCSErrorCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get uTransmittedFrameCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set uTransmittedFragmentCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uMulticastTransmittedFrameCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uFailedCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uRetryCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uMultipleRetryCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uFrameDuplicateCount(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uRTSSuccessCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set uRTSFailureCount(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set uACKFailureCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set uReceivedFragmentCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set uMulticastReceivedFrameCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set uFCSErrorCount(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set uTransmittedFrameCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SUPPORTED_PHY_TYPES (size: 16)
 */
export interface DOT11_SUPPORTED_PHY_TYPES {
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11PHYType: Deno.PointerValue;
}

export const sizeofDOT11_SUPPORTED_PHY_TYPES = 16;

export function allocDOT11_SUPPORTED_PHY_TYPES(data?: Partial<DOT11_SUPPORTED_PHY_TYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SUPPORTED_PHY_TYPES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(0, Number(data.uNumOfEntries), true);
  // 0x04: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(4, Number(data.uTotalNumOfEntries), true);
  // 0x08: pointer
  if (data?.dot11PHYType !== undefined) view.setBigUint64(8, data.dot11PHYType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11PHYType))), true);
  return buf;
}

export class DOT11_SUPPORTED_PHY_TYPESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dot11PHYType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dot11PHYType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SUPPORTED_POWER_LEVELS (size: 16)
 */
export interface DOT11_SUPPORTED_POWER_LEVELS {
  /** u32 */
  uNumOfSupportedPowerLevels: number;
  /** array */
  uTxPowerLevelValues: Deno.PointerValue;
}

export const sizeofDOT11_SUPPORTED_POWER_LEVELS = 16;

export function allocDOT11_SUPPORTED_POWER_LEVELS(data?: Partial<DOT11_SUPPORTED_POWER_LEVELS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SUPPORTED_POWER_LEVELS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNumOfSupportedPowerLevels !== undefined) view.setUint32(0, Number(data.uNumOfSupportedPowerLevels), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.uTxPowerLevelValues !== undefined) view.setBigUint64(8, data.uTxPowerLevelValues === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uTxPowerLevelValues))), true);
  return buf;
}

export class DOT11_SUPPORTED_POWER_LEVELSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNumOfSupportedPowerLevels(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get uTxPowerLevelValues(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNumOfSupportedPowerLevels(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set uTxPowerLevelValues(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_REG_DOMAIN_VALUE (size: 8)
 */
export interface DOT11_REG_DOMAIN_VALUE {
  /** u32 */
  uRegDomainsSupportIndex: number;
  /** u32 */
  uRegDomainsSupportValue: number;
}

export const sizeofDOT11_REG_DOMAIN_VALUE = 8;

export function allocDOT11_REG_DOMAIN_VALUE(data?: Partial<DOT11_REG_DOMAIN_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_REG_DOMAIN_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uRegDomainsSupportIndex !== undefined) view.setUint32(0, Number(data.uRegDomainsSupportIndex), true);
  // 0x04: u32
  if (data?.uRegDomainsSupportValue !== undefined) view.setUint32(4, Number(data.uRegDomainsSupportValue), true);
  return buf;
}

export class DOT11_REG_DOMAIN_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uRegDomainsSupportIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uRegDomainsSupportValue(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set uRegDomainsSupportIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uRegDomainsSupportValue(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_REG_DOMAINS_SUPPORT_VALUE (size: 16)
 */
export interface DOT11_REG_DOMAINS_SUPPORT_VALUE {
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11RegDomainValue: Deno.PointerValue;
}

export const sizeofDOT11_REG_DOMAINS_SUPPORT_VALUE = 16;

export function allocDOT11_REG_DOMAINS_SUPPORT_VALUE(data?: Partial<DOT11_REG_DOMAINS_SUPPORT_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_REG_DOMAINS_SUPPORT_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(0, Number(data.uNumOfEntries), true);
  // 0x04: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(4, Number(data.uTotalNumOfEntries), true);
  // 0x08: pointer
  if (data?.dot11RegDomainValue !== undefined) view.setBigUint64(8, data.dot11RegDomainValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11RegDomainValue))), true);
  return buf;
}

export class DOT11_REG_DOMAINS_SUPPORT_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dot11RegDomainValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dot11RegDomainValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SUPPORTED_ANTENNA (size: 16)
 */
export interface DOT11_SUPPORTED_ANTENNA {
  /** u32 */
  uAntennaListIndex: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bSupportedAntenna: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_SUPPORTED_ANTENNA = 16;

export function allocDOT11_SUPPORTED_ANTENNA(data?: Partial<DOT11_SUPPORTED_ANTENNA>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SUPPORTED_ANTENNA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uAntennaListIndex !== undefined) view.setUint32(0, Number(data.uAntennaListIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bSupportedAntenna !== undefined) view.setBigUint64(8, data.bSupportedAntenna === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bSupportedAntenna))), true);
  return buf;
}

export class DOT11_SUPPORTED_ANTENNAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uAntennaListIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bSupportedAntenna(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uAntennaListIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bSupportedAntenna(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SUPPORTED_ANTENNA_LIST (size: 16)
 */
export interface DOT11_SUPPORTED_ANTENNA_LIST {
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11SupportedAntenna: Deno.PointerValue;
}

export const sizeofDOT11_SUPPORTED_ANTENNA_LIST = 16;

export function allocDOT11_SUPPORTED_ANTENNA_LIST(data?: Partial<DOT11_SUPPORTED_ANTENNA_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SUPPORTED_ANTENNA_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(0, Number(data.uNumOfEntries), true);
  // 0x04: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(4, Number(data.uTotalNumOfEntries), true);
  // 0x08: pointer
  if (data?.dot11SupportedAntenna !== undefined) view.setBigUint64(8, data.dot11SupportedAntenna === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11SupportedAntenna))), true);
  return buf;
}

export class DOT11_SUPPORTED_ANTENNA_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dot11SupportedAntenna(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dot11SupportedAntenna(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_DIVERSITY_SELECTION_RX (size: 16)
 */
export interface DOT11_DIVERSITY_SELECTION_RX {
  /** u32 */
  uAntennaListIndex: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDiversitySelectionRX: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_DIVERSITY_SELECTION_RX = 16;

export function allocDOT11_DIVERSITY_SELECTION_RX(data?: Partial<DOT11_DIVERSITY_SELECTION_RX>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_DIVERSITY_SELECTION_RX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uAntennaListIndex !== undefined) view.setUint32(0, Number(data.uAntennaListIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bDiversitySelectionRX !== undefined) view.setBigUint64(8, data.bDiversitySelectionRX === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDiversitySelectionRX))), true);
  return buf;
}

export class DOT11_DIVERSITY_SELECTION_RXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uAntennaListIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bDiversitySelectionRX(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uAntennaListIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bDiversitySelectionRX(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_DIVERSITY_SELECTION_RX_LIST (size: 16)
 */
export interface DOT11_DIVERSITY_SELECTION_RX_LIST {
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11DiversitySelectionRx: Deno.PointerValue;
}

export const sizeofDOT11_DIVERSITY_SELECTION_RX_LIST = 16;

export function allocDOT11_DIVERSITY_SELECTION_RX_LIST(data?: Partial<DOT11_DIVERSITY_SELECTION_RX_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_DIVERSITY_SELECTION_RX_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(0, Number(data.uNumOfEntries), true);
  // 0x04: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(4, Number(data.uTotalNumOfEntries), true);
  // 0x08: pointer
  if (data?.dot11DiversitySelectionRx !== undefined) view.setBigUint64(8, data.dot11DiversitySelectionRx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11DiversitySelectionRx))), true);
  return buf;
}

export class DOT11_DIVERSITY_SELECTION_RX_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dot11DiversitySelectionRx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dot11DiversitySelectionRx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SUPPORTED_DATA_RATES_VALUE (size: 16)
 */
export interface DOT11_SUPPORTED_DATA_RATES_VALUE {
  /** array */
  ucSupportedTxDataRatesValue: Deno.PointerValue;
  /** array */
  ucSupportedRxDataRatesValue: Deno.PointerValue;
}

export const sizeofDOT11_SUPPORTED_DATA_RATES_VALUE = 16;

export function allocDOT11_SUPPORTED_DATA_RATES_VALUE(data?: Partial<DOT11_SUPPORTED_DATA_RATES_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SUPPORTED_DATA_RATES_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucSupportedTxDataRatesValue !== undefined) view.setBigUint64(0, data.ucSupportedTxDataRatesValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucSupportedTxDataRatesValue))), true);
  // 0x08: pointer
  if (data?.ucSupportedRxDataRatesValue !== undefined) view.setBigUint64(8, data.ucSupportedRxDataRatesValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucSupportedRxDataRatesValue))), true);
  return buf;
}

export class DOT11_SUPPORTED_DATA_RATES_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucSupportedTxDataRatesValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ucSupportedRxDataRatesValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ucSupportedTxDataRatesValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ucSupportedRxDataRatesValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SUPPORTED_DATA_RATES_VALUE_V2 (size: 16)
 */
export interface DOT11_SUPPORTED_DATA_RATES_VALUE_V2 {
  /** array */
  ucSupportedTxDataRatesValue: Deno.PointerValue;
  /** array */
  ucSupportedRxDataRatesValue: Deno.PointerValue;
}

export const sizeofDOT11_SUPPORTED_DATA_RATES_VALUE_V2 = 16;

export function allocDOT11_SUPPORTED_DATA_RATES_VALUE_V2(data?: Partial<DOT11_SUPPORTED_DATA_RATES_VALUE_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SUPPORTED_DATA_RATES_VALUE_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucSupportedTxDataRatesValue !== undefined) view.setBigUint64(0, data.ucSupportedTxDataRatesValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucSupportedTxDataRatesValue))), true);
  // 0x08: pointer
  if (data?.ucSupportedRxDataRatesValue !== undefined) view.setBigUint64(8, data.ucSupportedRxDataRatesValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucSupportedRxDataRatesValue))), true);
  return buf;
}

export class DOT11_SUPPORTED_DATA_RATES_VALUE_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucSupportedTxDataRatesValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ucSupportedRxDataRatesValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ucSupportedTxDataRatesValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ucSupportedRxDataRatesValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY (size: 16)
 */
export interface DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY {
  /** u32 */
  uMultiDomainCapabilityIndex: number;
  /** u32 */
  uFirstChannelNumber: number;
  /** u32 */
  uNumberOfChannels: number;
  /** i32 */
  lMaximumTransmitPowerLevel: number;
}

export const sizeofDOT11_MULTI_DOMAIN_CAPABILITY_ENTRY = 16;

export function allocDOT11_MULTI_DOMAIN_CAPABILITY_ENTRY(data?: Partial<DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MULTI_DOMAIN_CAPABILITY_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uMultiDomainCapabilityIndex !== undefined) view.setUint32(0, Number(data.uMultiDomainCapabilityIndex), true);
  // 0x04: u32
  if (data?.uFirstChannelNumber !== undefined) view.setUint32(4, Number(data.uFirstChannelNumber), true);
  // 0x08: u32
  if (data?.uNumberOfChannels !== undefined) view.setUint32(8, Number(data.uNumberOfChannels), true);
  // 0x0c: i32
  if (data?.lMaximumTransmitPowerLevel !== undefined) view.setInt32(12, Number(data.lMaximumTransmitPowerLevel), true);
  return buf;
}

export class DOT11_MULTI_DOMAIN_CAPABILITY_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uMultiDomainCapabilityIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uFirstChannelNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uNumberOfChannels(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get lMaximumTransmitPowerLevel(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set uMultiDomainCapabilityIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uFirstChannelNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uNumberOfChannels(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set lMaximumTransmitPowerLevel(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MD_CAPABILITY_ENTRY_LIST (size: 16)
 */
export interface DOT11_MD_CAPABILITY_ENTRY_LIST {
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11MDCapabilityEntry: Deno.PointerValue;
}

export const sizeofDOT11_MD_CAPABILITY_ENTRY_LIST = 16;

export function allocDOT11_MD_CAPABILITY_ENTRY_LIST(data?: Partial<DOT11_MD_CAPABILITY_ENTRY_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MD_CAPABILITY_ENTRY_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(0, Number(data.uNumOfEntries), true);
  // 0x04: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(4, Number(data.uTotalNumOfEntries), true);
  // 0x08: pointer
  if (data?.dot11MDCapabilityEntry !== undefined) view.setBigUint64(8, data.dot11MDCapabilityEntry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11MDCapabilityEntry))), true);
  return buf;
}

export class DOT11_MD_CAPABILITY_ENTRY_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dot11MDCapabilityEntry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dot11MDCapabilityEntry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_HOPPING_PATTERN_ENTRY (size: 8)
 */
export interface DOT11_HOPPING_PATTERN_ENTRY {
  /** u32 */
  uHoppingPatternIndex: number;
  /** u32 */
  uRandomTableFieldNumber: number;
}

export const sizeofDOT11_HOPPING_PATTERN_ENTRY = 8;

export function allocDOT11_HOPPING_PATTERN_ENTRY(data?: Partial<DOT11_HOPPING_PATTERN_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_HOPPING_PATTERN_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uHoppingPatternIndex !== undefined) view.setUint32(0, Number(data.uHoppingPatternIndex), true);
  // 0x04: u32
  if (data?.uRandomTableFieldNumber !== undefined) view.setUint32(4, Number(data.uRandomTableFieldNumber), true);
  return buf;
}

export class DOT11_HOPPING_PATTERN_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uHoppingPatternIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uRandomTableFieldNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set uHoppingPatternIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uRandomTableFieldNumber(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_HOPPING_PATTERN_ENTRY_LIST (size: 16)
 */
export interface DOT11_HOPPING_PATTERN_ENTRY_LIST {
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11HoppingPatternEntry: Deno.PointerValue;
}

export const sizeofDOT11_HOPPING_PATTERN_ENTRY_LIST = 16;

export function allocDOT11_HOPPING_PATTERN_ENTRY_LIST(data?: Partial<DOT11_HOPPING_PATTERN_ENTRY_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_HOPPING_PATTERN_ENTRY_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(0, Number(data.uNumOfEntries), true);
  // 0x04: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(4, Number(data.uTotalNumOfEntries), true);
  // 0x08: pointer
  if (data?.dot11HoppingPatternEntry !== undefined) view.setBigUint64(8, data.dot11HoppingPatternEntry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11HoppingPatternEntry))), true);
  return buf;
}

export class DOT11_HOPPING_PATTERN_ENTRY_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dot11HoppingPatternEntry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dot11HoppingPatternEntry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WPA_TSC (size: 24)
 */
export interface DOT11_WPA_TSC {
  /** u32 */
  uReserved: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_OFFLOAD_TYPE */
  dot11OffloadType: DOT11_OFFLOAD_TYPE;
  /** Windows.Win32.Foundation.HANDLE */
  hOffload: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_IV48_COUNTER */
  dot11IV48Counter: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_WPA_TSC = 24;

export function allocDOT11_WPA_TSC(data?: Partial<DOT11_WPA_TSC>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WPA_TSC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: i32
  if (data?.dot11OffloadType !== undefined) view.setInt32(4, Number(data.dot11OffloadType), true);
  // 0x08: pointer
  if (data?.hOffload !== undefined) view.setBigUint64(8, data.hOffload === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hOffload))), true);
  // 0x10: pointer
  if (data?.dot11IV48Counter !== undefined) view.setBigUint64(16, data.dot11IV48Counter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11IV48Counter))), true);
  return buf;
}

export class DOT11_WPA_TSCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get dot11OffloadType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get hOffload(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get dot11IV48Counter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set dot11OffloadType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set hOffload(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set dot11IV48Counter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RSSI_RANGE (size: 16)
 */
export interface DOT11_RSSI_RANGE {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_TYPE */
  dot11PhyType: DOT11_PHY_TYPE;
  /** u32 */
  uRSSIMin: number;
  /** u32 */
  uRSSIMax: number;
}

export const sizeofDOT11_RSSI_RANGE = 16;

export function allocDOT11_RSSI_RANGE(data?: Partial<DOT11_RSSI_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RSSI_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dot11PhyType !== undefined) view.setInt32(0, Number(data.dot11PhyType), true);
  // 0x04: u32
  if (data?.uRSSIMin !== undefined) view.setUint32(4, Number(data.uRSSIMin), true);
  // 0x08: u32
  if (data?.uRSSIMax !== undefined) view.setUint32(8, Number(data.uRSSIMax), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11_RSSI_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dot11PhyType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get uRSSIMin(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uRSSIMax(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set dot11PhyType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set uRSSIMin(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uRSSIMax(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_NIC_SPECIFIC_EXTENSION (size: 16)
 */
export interface DOT11_NIC_SPECIFIC_EXTENSION {
  /** u32 */
  uBufferLength: number;
  /** u32 */
  uTotalBufferLength: number;
  /** array */
  ucBuffer: Deno.PointerValue;
}

export const sizeofDOT11_NIC_SPECIFIC_EXTENSION = 16;

export function allocDOT11_NIC_SPECIFIC_EXTENSION(data?: Partial<DOT11_NIC_SPECIFIC_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_NIC_SPECIFIC_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uBufferLength !== undefined) view.setUint32(0, Number(data.uBufferLength), true);
  // 0x04: u32
  if (data?.uTotalBufferLength !== undefined) view.setUint32(4, Number(data.uTotalBufferLength), true);
  // 0x08: pointer
  if (data?.ucBuffer !== undefined) view.setBigUint64(8, data.ucBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBuffer))), true);
  return buf;
}

export class DOT11_NIC_SPECIFIC_EXTENSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uBufferLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uTotalBufferLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ucBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uBufferLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uTotalBufferLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ucBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_AP_JOIN_REQUEST (size: 32)
 */
export interface DOT11_AP_JOIN_REQUEST {
  /** u32 */
  uJoinFailureTimeout: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_RATE_SET */
  OperationalRateSet: Uint8Array | Deno.PointerValue;
  /** u32 */
  uChCenterFrequency: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_DESCRIPTION */
  dot11BSSDescription: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_AP_JOIN_REQUEST = 32;

export function allocDOT11_AP_JOIN_REQUEST(data?: Partial<DOT11_AP_JOIN_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_AP_JOIN_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uJoinFailureTimeout !== undefined) view.setUint32(0, Number(data.uJoinFailureTimeout), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OperationalRateSet !== undefined) view.setBigUint64(8, data.OperationalRateSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OperationalRateSet))), true);
  // 0x10: u32
  if (data?.uChCenterFrequency !== undefined) view.setUint32(16, Number(data.uChCenterFrequency), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dot11BSSDescription !== undefined) view.setBigUint64(24, data.dot11BSSDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11BSSDescription))), true);
  return buf;
}

export class DOT11_AP_JOIN_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uJoinFailureTimeout(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get OperationalRateSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uChCenterFrequency(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dot11BSSDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uJoinFailureTimeout(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set OperationalRateSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uChCenterFrequency(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dot11BSSDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RECV_SENSITIVITY (size: 16)
 */
export interface DOT11_RECV_SENSITIVITY {
  /** u8 */
  ucDataRate: number;
  /** i32 */
  lRSSIMin: number;
  /** i32 */
  lRSSIMax: number;
}

export const sizeofDOT11_RECV_SENSITIVITY = 16;

export function allocDOT11_RECV_SENSITIVITY(data?: Partial<DOT11_RECV_SENSITIVITY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RECV_SENSITIVITY);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ucDataRate !== undefined) view.setUint8(0, Number(data.ucDataRate));
  // 0x01: i32
  if (data?.lRSSIMin !== undefined) view.setInt32(1, Number(data.lRSSIMin), true);
  // 0x05: i32
  if (data?.lRSSIMax !== undefined) view.setInt32(5, Number(data.lRSSIMax), true);
  // 0x09: pad7
  return buf;
}

export class DOT11_RECV_SENSITIVITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get ucDataRate(): number {
    return this.view.getUint8(0);
  }

  // 0x01: i32
  get lRSSIMin(): number {
    return this.view.getInt32(1, true);
  }

  // 0x05: i32
  get lRSSIMax(): number {
    return this.view.getInt32(5, true);
  }

  // 0x09: pad7

  // 0x00: u8
  set ucDataRate(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: i32
  set lRSSIMin(value: number) {
    this.view.setInt32(1, value, true);
  }

  // 0x05: i32
  set lRSSIMax(value: number) {
    this.view.setInt32(5, value, true);
  }

  // 0x09: pad7
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RECV_SENSITIVITY_LIST (size: 24)
 */
export interface DOT11_RECV_SENSITIVITY_LIST {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11RecvSensitivity: Deno.PointerValue;
}

export const sizeofDOT11_RECV_SENSITIVITY_LIST = 24;

export function allocDOT11_RECV_SENSITIVITY_LIST(data?: Partial<DOT11_RECV_SENSITIVITY_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RECV_SENSITIVITY_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.dot11RecvSensitivity !== undefined) view.setBigUint64(16, data.dot11RecvSensitivity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11RecvSensitivity))), true);
  return buf;
}

export class DOT11_RECV_SENSITIVITY_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get dot11RecvSensitivity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set dot11RecvSensitivity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WME_AC_PARAMETERS (size: 8)
 */
export interface DOT11_WME_AC_PARAMETERS {
  /** u8 */
  ucAccessCategoryIndex: number;
  /** u8 */
  ucAIFSN: number;
  /** u8 */
  ucECWmin: number;
  /** u8 */
  ucECWmax: number;
  /** u16 */
  usTXOPLimit: number;
}

export const sizeofDOT11_WME_AC_PARAMETERS = 8;

export function allocDOT11_WME_AC_PARAMETERS(data?: Partial<DOT11_WME_AC_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WME_AC_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ucAccessCategoryIndex !== undefined) view.setUint8(0, Number(data.ucAccessCategoryIndex));
  // 0x01: u8
  if (data?.ucAIFSN !== undefined) view.setUint8(1, Number(data.ucAIFSN));
  // 0x02: u8
  if (data?.ucECWmin !== undefined) view.setUint8(2, Number(data.ucECWmin));
  // 0x03: u8
  if (data?.ucECWmax !== undefined) view.setUint8(3, Number(data.ucECWmax));
  // 0x04: u16
  if (data?.usTXOPLimit !== undefined) view.setUint16(4, Number(data.usTXOPLimit), true);
  // 0x06: pad2
  return buf;
}

export class DOT11_WME_AC_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get ucAccessCategoryIndex(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get ucAIFSN(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get ucECWmin(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get ucECWmax(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u16
  get usTXOPLimit(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u8
  set ucAccessCategoryIndex(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set ucAIFSN(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set ucECWmin(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set ucECWmax(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u16
  set usTXOPLimit(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WME_AC_PARAMETERS_LIST (size: 16)
 */
export interface DOT11_WME_AC_PARAMETERS_LIST {
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11WMEACParameters: Deno.PointerValue;
}

export const sizeofDOT11_WME_AC_PARAMETERS_LIST = 16;

export function allocDOT11_WME_AC_PARAMETERS_LIST(data?: Partial<DOT11_WME_AC_PARAMETERS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WME_AC_PARAMETERS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(0, Number(data.uNumOfEntries), true);
  // 0x04: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(4, Number(data.uTotalNumOfEntries), true);
  // 0x08: pointer
  if (data?.dot11WMEACParameters !== undefined) view.setBigUint64(8, data.dot11WMEACParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11WMEACParameters))), true);
  return buf;
}

export class DOT11_WME_AC_PARAMETERS_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dot11WMEACParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dot11WMEACParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WME_UPDATE_IE (size: 32)
 */
export interface DOT11_WME_UPDATE_IE {
  /** u32 */
  uParamElemMinBeaconIntervals: number;
  /** u32 */
  uWMEInfoElemOffset: number;
  /** u32 */
  uWMEInfoElemLength: number;
  /** u32 */
  uWMEParamElemOffset: number;
  /** u32 */
  uWMEParamElemLength: number;
  /** array */
  ucBuffer: Deno.PointerValue;
}

export const sizeofDOT11_WME_UPDATE_IE = 32;

export function allocDOT11_WME_UPDATE_IE(data?: Partial<DOT11_WME_UPDATE_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WME_UPDATE_IE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uParamElemMinBeaconIntervals !== undefined) view.setUint32(0, Number(data.uParamElemMinBeaconIntervals), true);
  // 0x04: u32
  if (data?.uWMEInfoElemOffset !== undefined) view.setUint32(4, Number(data.uWMEInfoElemOffset), true);
  // 0x08: u32
  if (data?.uWMEInfoElemLength !== undefined) view.setUint32(8, Number(data.uWMEInfoElemLength), true);
  // 0x0c: u32
  if (data?.uWMEParamElemOffset !== undefined) view.setUint32(12, Number(data.uWMEParamElemOffset), true);
  // 0x10: u32
  if (data?.uWMEParamElemLength !== undefined) view.setUint32(16, Number(data.uWMEParamElemLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ucBuffer !== undefined) view.setBigUint64(24, data.ucBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBuffer))), true);
  return buf;
}

export class DOT11_WME_UPDATE_IEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uParamElemMinBeaconIntervals(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uWMEInfoElemOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uWMEInfoElemLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uWMEParamElemOffset(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uWMEParamElemLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ucBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uParamElemMinBeaconIntervals(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uWMEInfoElemOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uWMEInfoElemLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uWMEParamElemOffset(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uWMEParamElemLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ucBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_QOS_TX_DURATION (size: 16)
 */
export interface DOT11_QOS_TX_DURATION {
  /** u32 */
  uNominalMSDUSize: number;
  /** u32 */
  uMinPHYRate: number;
  /** u32 */
  uDuration: number;
}

export const sizeofDOT11_QOS_TX_DURATION = 16;

export function allocDOT11_QOS_TX_DURATION(data?: Partial<DOT11_QOS_TX_DURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_QOS_TX_DURATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNominalMSDUSize !== undefined) view.setUint32(0, Number(data.uNominalMSDUSize), true);
  // 0x04: u32
  if (data?.uMinPHYRate !== undefined) view.setUint32(4, Number(data.uMinPHYRate), true);
  // 0x08: u32
  if (data?.uDuration !== undefined) view.setUint32(8, Number(data.uDuration), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11_QOS_TX_DURATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNominalMSDUSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uMinPHYRate(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uDuration(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set uNominalMSDUSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uMinPHYRate(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uDuration(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_QOS_TX_MEDIUM_TIME (size: 16)
 */
export interface DOT11_QOS_TX_MEDIUM_TIME {
  /** array */
  dot11PeerAddress: Deno.PointerValue;
  /** u8 */
  ucQoSPriority: number;
  /** u32 */
  uMediumTimeAdmited: number;
}

export const sizeofDOT11_QOS_TX_MEDIUM_TIME = 16;

export function allocDOT11_QOS_TX_MEDIUM_TIME(data?: Partial<DOT11_QOS_TX_MEDIUM_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_QOS_TX_MEDIUM_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dot11PeerAddress !== undefined) view.setBigUint64(0, data.dot11PeerAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11PeerAddress))), true);
  // 0x08: u8
  if (data?.ucQoSPriority !== undefined) view.setUint8(8, Number(data.ucQoSPriority));
  // 0x09: u32
  if (data?.uMediumTimeAdmited !== undefined) view.setUint32(9, Number(data.uMediumTimeAdmited), true);
  // 0x0d: pad3
  return buf;
}

export class DOT11_QOS_TX_MEDIUM_TIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dot11PeerAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get ucQoSPriority(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u32
  get uMediumTimeAdmited(): number {
    return this.view.getUint32(9, true);
  }

  // 0x0d: pad3

  // 0x00: pointer
  set dot11PeerAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set ucQoSPriority(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u32
  set uMediumTimeAdmited(value: number) {
    this.view.setUint32(9, value, true);
  }

  // 0x0d: pad3
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SUPPORTED_OFDM_FREQUENCY (size: 8)
 */
export interface DOT11_SUPPORTED_OFDM_FREQUENCY {
  /** u32 */
  uCenterFrequency: number;
}

export const sizeofDOT11_SUPPORTED_OFDM_FREQUENCY = 8;

export function allocDOT11_SUPPORTED_OFDM_FREQUENCY(data?: Partial<DOT11_SUPPORTED_OFDM_FREQUENCY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SUPPORTED_OFDM_FREQUENCY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uCenterFrequency !== undefined) view.setUint32(0, Number(data.uCenterFrequency), true);
  // 0x04: pad4
  return buf;
}

export class DOT11_SUPPORTED_OFDM_FREQUENCYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uCenterFrequency(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set uCenterFrequency(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SUPPORTED_OFDM_FREQUENCY_LIST (size: 16)
 */
export interface DOT11_SUPPORTED_OFDM_FREQUENCY_LIST {
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11SupportedOFDMFrequency: Deno.PointerValue;
}

export const sizeofDOT11_SUPPORTED_OFDM_FREQUENCY_LIST = 16;

export function allocDOT11_SUPPORTED_OFDM_FREQUENCY_LIST(data?: Partial<DOT11_SUPPORTED_OFDM_FREQUENCY_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SUPPORTED_OFDM_FREQUENCY_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(0, Number(data.uNumOfEntries), true);
  // 0x04: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(4, Number(data.uTotalNumOfEntries), true);
  // 0x08: pointer
  if (data?.dot11SupportedOFDMFrequency !== undefined) view.setBigUint64(8, data.dot11SupportedOFDMFrequency === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11SupportedOFDMFrequency))), true);
  return buf;
}

export class DOT11_SUPPORTED_OFDM_FREQUENCY_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dot11SupportedOFDMFrequency(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dot11SupportedOFDMFrequency(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SUPPORTED_DSSS_CHANNEL (size: 8)
 */
export interface DOT11_SUPPORTED_DSSS_CHANNEL {
  /** u32 */
  uChannel: number;
}

export const sizeofDOT11_SUPPORTED_DSSS_CHANNEL = 8;

export function allocDOT11_SUPPORTED_DSSS_CHANNEL(data?: Partial<DOT11_SUPPORTED_DSSS_CHANNEL>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SUPPORTED_DSSS_CHANNEL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uChannel !== undefined) view.setUint32(0, Number(data.uChannel), true);
  // 0x04: pad4
  return buf;
}

export class DOT11_SUPPORTED_DSSS_CHANNELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uChannel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set uChannel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SUPPORTED_DSSS_CHANNEL_LIST (size: 16)
 */
export interface DOT11_SUPPORTED_DSSS_CHANNEL_LIST {
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11SupportedDSSSChannel: Deno.PointerValue;
}

export const sizeofDOT11_SUPPORTED_DSSS_CHANNEL_LIST = 16;

export function allocDOT11_SUPPORTED_DSSS_CHANNEL_LIST(data?: Partial<DOT11_SUPPORTED_DSSS_CHANNEL_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SUPPORTED_DSSS_CHANNEL_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(0, Number(data.uNumOfEntries), true);
  // 0x04: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(4, Number(data.uTotalNumOfEntries), true);
  // 0x08: pointer
  if (data?.dot11SupportedDSSSChannel !== undefined) view.setBigUint64(8, data.dot11SupportedDSSSChannel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11SupportedDSSSChannel))), true);
  return buf;
}

export class DOT11_SUPPORTED_DSSS_CHANNEL_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dot11SupportedDSSSChannel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dot11SupportedDSSSChannel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_BYTE_ARRAY (size: 24)
 */
export interface DOT11_BYTE_ARRAY {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfBytes: number;
  /** u32 */
  uTotalNumOfBytes: number;
  /** array */
  ucBuffer: Deno.PointerValue;
}

export const sizeofDOT11_BYTE_ARRAY = 24;

export function allocDOT11_BYTE_ARRAY(data?: Partial<DOT11_BYTE_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_BYTE_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfBytes !== undefined) view.setUint32(8, Number(data.uNumOfBytes), true);
  // 0x0c: u32
  if (data?.uTotalNumOfBytes !== undefined) view.setUint32(12, Number(data.uTotalNumOfBytes), true);
  // 0x10: pointer
  if (data?.ucBuffer !== undefined) view.setBigUint64(16, data.ucBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBuffer))), true);
  return buf;
}

export class DOT11_BYTE_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfBytes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ucBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfBytes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ucBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _FHSS_e__Struct (size: 16)
 */
export interface _FHSS_e__Struct {
  /** u32 */
  uHopPattern: number;
  /** u32 */
  uHopSet: number;
  /** u32 */
  uDwellTime: number;
}

export const sizeof_FHSS_e__Struct = 16;

export function alloc_FHSS_e__Struct(data?: Partial<_FHSS_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_FHSS_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uHopPattern !== undefined) view.setUint32(0, Number(data.uHopPattern), true);
  // 0x04: u32
  if (data?.uHopSet !== undefined) view.setUint32(4, Number(data.uHopSet), true);
  // 0x08: u32
  if (data?.uDwellTime !== undefined) view.setUint32(8, Number(data.uDwellTime), true);
  // 0x0c: pad4
  return buf;
}

export class _FHSS_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uHopPattern(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uHopSet(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uDwellTime(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set uHopPattern(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uHopSet(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uDwellTime(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO (size: 16)
 */
export interface DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO {
  /** u32 */
  uChCenterFrequency: number;
  /** _FHSS_e__Struct */
  FHSS: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_BSS_ENTRY_PHY_SPECIFIC_INFO = 16;

export function allocDOT11_BSS_ENTRY_PHY_SPECIFIC_INFO(data?: Partial<DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_BSS_ENTRY_PHY_SPECIFIC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uChCenterFrequency !== undefined) view.setUint32(0, Number(data.uChCenterFrequency), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FHSS !== undefined) view.setBigUint64(8, data.FHSS === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FHSS))), true);
  return buf;
}

export class DOT11_BSS_ENTRY_PHY_SPECIFIC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uChCenterFrequency(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get FHSS(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uChCenterFrequency(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set FHSS(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_ENTRY (size: 88)
 */
export interface DOT11_BSS_ENTRY {
  /** u32 */
  uPhyId: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO */
  PhySpecificInfo: Uint8Array | Deno.PointerValue;
  /** array */
  dot11BSSID: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BSSType: DOT11_BSS_TYPE;
  /** i32 */
  lRSSI: number;
  /** u32 */
  uLinkQuality: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bInRegDomain: Uint8Array | Deno.PointerValue;
  /** u16 */
  usBeaconPeriod: number;
  /** u64 */
  ullTimestamp: Deno.PointerValue;
  /** u64 */
  ullHostTimestamp: Deno.PointerValue;
  /** u16 */
  usCapabilityInformation: number;
  /** u32 */
  uBufferLength: number;
  /** array */
  ucBuffer: Deno.PointerValue;
}

export const sizeofDOT11_BSS_ENTRY = 88;

export function allocDOT11_BSS_ENTRY(data?: Partial<DOT11_BSS_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_BSS_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uPhyId !== undefined) view.setUint32(0, Number(data.uPhyId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PhySpecificInfo !== undefined) view.setBigUint64(8, data.PhySpecificInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhySpecificInfo))), true);
  // 0x10: pointer
  if (data?.dot11BSSID !== undefined) view.setBigUint64(16, data.dot11BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11BSSID))), true);
  // 0x18: i32
  if (data?.dot11BSSType !== undefined) view.setInt32(24, Number(data.dot11BSSType), true);
  // 0x1c: i32
  if (data?.lRSSI !== undefined) view.setInt32(28, Number(data.lRSSI), true);
  // 0x20: u32
  if (data?.uLinkQuality !== undefined) view.setUint32(32, Number(data.uLinkQuality), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.bInRegDomain !== undefined) view.setBigUint64(40, data.bInRegDomain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bInRegDomain))), true);
  // 0x30: u16
  if (data?.usBeaconPeriod !== undefined) view.setUint16(48, Number(data.usBeaconPeriod), true);
  // 0x32: pad6
  // 0x38: u64
  if (data?.ullTimestamp !== undefined) view.setBigUint64(56, BigInt(data.ullTimestamp), true);
  // 0x40: u64
  if (data?.ullHostTimestamp !== undefined) view.setBigUint64(64, BigInt(data.ullHostTimestamp), true);
  // 0x48: u16
  if (data?.usCapabilityInformation !== undefined) view.setUint16(72, Number(data.usCapabilityInformation), true);
  // 0x4a: u32
  if (data?.uBufferLength !== undefined) view.setUint32(74, Number(data.uBufferLength), true);
  // 0x4e: pad2
  // 0x50: pointer
  if (data?.ucBuffer !== undefined) view.setBigUint64(80, data.ucBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBuffer))), true);
  return buf;
}

export class DOT11_BSS_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uPhyId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PhySpecificInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get dot11BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get dot11BSSType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get lRSSI(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get uLinkQuality(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get bInRegDomain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u16
  get usBeaconPeriod(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: pad6

  // 0x38: u64
  get ullTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get ullHostTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u16
  get usCapabilityInformation(): number {
    return this.view.getUint16(72, true);
  }

  // 0x4a: u32
  get uBufferLength(): number {
    return this.view.getUint32(74, true);
  }

  // 0x4e: pad2

  // 0x50: pointer
  get ucBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uPhyId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PhySpecificInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set dot11BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set dot11BSSType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set lRSSI(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set uLinkQuality(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set bInRegDomain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u16
  set usBeaconPeriod(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: pad6

  // 0x38: u64
  set ullTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set ullHostTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u16
  set usCapabilityInformation(value: number) {
    this.view.setUint16(72, value, true);
  }

  // 0x4a: u32
  set uBufferLength(value: number) {
    this.view.setUint32(74, value, true);
  }

  // 0x4e: pad2

  // 0x50: pointer
  set ucBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SSID_LIST (size: 24)
 */
export interface DOT11_SSID_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  SSIDs: Deno.PointerValue;
}

export const sizeofDOT11_SSID_LIST = 24;

export function allocDOT11_SSID_LIST(data?: Partial<DOT11_SSID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SSID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.SSIDs !== undefined) view.setBigUint64(16, data.SSIDs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SSIDs))), true);
  return buf;
}

export class DOT11_SSID_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get SSIDs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set SSIDs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MAC_ADDRESS_LIST (size: 24)
 */
export interface DOT11_MAC_ADDRESS_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  MacAddrs: Deno.PointerValue;
}

export const sizeofDOT11_MAC_ADDRESS_LIST = 24;

export function allocDOT11_MAC_ADDRESS_LIST(data?: Partial<DOT11_MAC_ADDRESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MAC_ADDRESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.MacAddrs !== undefined) view.setBigUint64(16, data.MacAddrs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MacAddrs))), true);
  return buf;
}

export class DOT11_MAC_ADDRESS_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get MacAddrs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set MacAddrs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PMKID_ENTRY (size: 24)
 */
export interface DOT11_PMKID_ENTRY {
  /** array */
  BSSID: Deno.PointerValue;
  /** array */
  PMKID: Deno.PointerValue;
  /** u32 */
  uFlags: number;
}

export const sizeofDOT11_PMKID_ENTRY = 24;

export function allocDOT11_PMKID_ENTRY(data?: Partial<DOT11_PMKID_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PMKID_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(0, data.BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BSSID))), true);
  // 0x08: pointer
  if (data?.PMKID !== undefined) view.setBigUint64(8, data.PMKID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PMKID))), true);
  // 0x10: u32
  if (data?.uFlags !== undefined) view.setUint32(16, Number(data.uFlags), true);
  // 0x14: pad4
  return buf;
}

export class DOT11_PMKID_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PMKID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PMKID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PMKID_LIST (size: 24)
 */
export interface DOT11_PMKID_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  PMKIDs: Deno.PointerValue;
}

export const sizeofDOT11_PMKID_LIST = 24;

export function allocDOT11_PMKID_LIST(data?: Partial<DOT11_PMKID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PMKID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.PMKIDs !== undefined) view.setBigUint64(16, data.PMKIDs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PMKIDs))), true);
  return buf;
}

export class DOT11_PMKID_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get PMKIDs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set PMKIDs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_FRAME_STATISTICS (size: 144)
 */
export interface DOT11_PHY_FRAME_STATISTICS {
  /** u64 */
  ullTransmittedFrameCount: Deno.PointerValue;
  /** u64 */
  ullMulticastTransmittedFrameCount: Deno.PointerValue;
  /** u64 */
  ullFailedCount: Deno.PointerValue;
  /** u64 */
  ullRetryCount: Deno.PointerValue;
  /** u64 */
  ullMultipleRetryCount: Deno.PointerValue;
  /** u64 */
  ullMaxTXLifetimeExceededCount: Deno.PointerValue;
  /** u64 */
  ullTransmittedFragmentCount: Deno.PointerValue;
  /** u64 */
  ullRTSSuccessCount: Deno.PointerValue;
  /** u64 */
  ullRTSFailureCount: Deno.PointerValue;
  /** u64 */
  ullACKFailureCount: Deno.PointerValue;
  /** u64 */
  ullReceivedFrameCount: Deno.PointerValue;
  /** u64 */
  ullMulticastReceivedFrameCount: Deno.PointerValue;
  /** u64 */
  ullPromiscuousReceivedFrameCount: Deno.PointerValue;
  /** u64 */
  ullMaxRXLifetimeExceededCount: Deno.PointerValue;
  /** u64 */
  ullFrameDuplicateCount: Deno.PointerValue;
  /** u64 */
  ullReceivedFragmentCount: Deno.PointerValue;
  /** u64 */
  ullPromiscuousReceivedFragmentCount: Deno.PointerValue;
  /** u64 */
  ullFCSErrorCount: Deno.PointerValue;
}

export const sizeofDOT11_PHY_FRAME_STATISTICS = 144;

export function allocDOT11_PHY_FRAME_STATISTICS(data?: Partial<DOT11_PHY_FRAME_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PHY_FRAME_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullTransmittedFrameCount !== undefined) view.setBigUint64(0, BigInt(data.ullTransmittedFrameCount), true);
  // 0x08: u64
  if (data?.ullMulticastTransmittedFrameCount !== undefined) view.setBigUint64(8, BigInt(data.ullMulticastTransmittedFrameCount), true);
  // 0x10: u64
  if (data?.ullFailedCount !== undefined) view.setBigUint64(16, BigInt(data.ullFailedCount), true);
  // 0x18: u64
  if (data?.ullRetryCount !== undefined) view.setBigUint64(24, BigInt(data.ullRetryCount), true);
  // 0x20: u64
  if (data?.ullMultipleRetryCount !== undefined) view.setBigUint64(32, BigInt(data.ullMultipleRetryCount), true);
  // 0x28: u64
  if (data?.ullMaxTXLifetimeExceededCount !== undefined) view.setBigUint64(40, BigInt(data.ullMaxTXLifetimeExceededCount), true);
  // 0x30: u64
  if (data?.ullTransmittedFragmentCount !== undefined) view.setBigUint64(48, BigInt(data.ullTransmittedFragmentCount), true);
  // 0x38: u64
  if (data?.ullRTSSuccessCount !== undefined) view.setBigUint64(56, BigInt(data.ullRTSSuccessCount), true);
  // 0x40: u64
  if (data?.ullRTSFailureCount !== undefined) view.setBigUint64(64, BigInt(data.ullRTSFailureCount), true);
  // 0x48: u64
  if (data?.ullACKFailureCount !== undefined) view.setBigUint64(72, BigInt(data.ullACKFailureCount), true);
  // 0x50: u64
  if (data?.ullReceivedFrameCount !== undefined) view.setBigUint64(80, BigInt(data.ullReceivedFrameCount), true);
  // 0x58: u64
  if (data?.ullMulticastReceivedFrameCount !== undefined) view.setBigUint64(88, BigInt(data.ullMulticastReceivedFrameCount), true);
  // 0x60: u64
  if (data?.ullPromiscuousReceivedFrameCount !== undefined) view.setBigUint64(96, BigInt(data.ullPromiscuousReceivedFrameCount), true);
  // 0x68: u64
  if (data?.ullMaxRXLifetimeExceededCount !== undefined) view.setBigUint64(104, BigInt(data.ullMaxRXLifetimeExceededCount), true);
  // 0x70: u64
  if (data?.ullFrameDuplicateCount !== undefined) view.setBigUint64(112, BigInt(data.ullFrameDuplicateCount), true);
  // 0x78: u64
  if (data?.ullReceivedFragmentCount !== undefined) view.setBigUint64(120, BigInt(data.ullReceivedFragmentCount), true);
  // 0x80: u64
  if (data?.ullPromiscuousReceivedFragmentCount !== undefined) view.setBigUint64(128, BigInt(data.ullPromiscuousReceivedFragmentCount), true);
  // 0x88: u64
  if (data?.ullFCSErrorCount !== undefined) view.setBigUint64(136, BigInt(data.ullFCSErrorCount), true);
  return buf;
}

export class DOT11_PHY_FRAME_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ullTransmittedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get ullMulticastTransmittedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get ullFailedCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ullRetryCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get ullMultipleRetryCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get ullMaxTXLifetimeExceededCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get ullTransmittedFragmentCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get ullRTSSuccessCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get ullRTSFailureCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get ullACKFailureCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get ullReceivedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: u64
  get ullMulticastReceivedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x60: u64
  get ullPromiscuousReceivedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(96, true));
  }

  // 0x68: u64
  get ullMaxRXLifetimeExceededCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(104, true));
  }

  // 0x70: u64
  get ullFrameDuplicateCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(112, true));
  }

  // 0x78: u64
  get ullReceivedFragmentCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x80: u64
  get ullPromiscuousReceivedFragmentCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(128, true));
  }

  // 0x88: u64
  get ullFCSErrorCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(136, true));
  }

  // 0x00: u64
  set ullTransmittedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set ullMulticastTransmittedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set ullFailedCount(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ullRetryCount(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set ullMultipleRetryCount(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set ullMaxTXLifetimeExceededCount(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set ullTransmittedFragmentCount(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set ullRTSSuccessCount(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set ullRTSFailureCount(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set ullACKFailureCount(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set ullReceivedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: u64
  set ullMulticastReceivedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(value), true);
  }

  // 0x60: u64
  set ullPromiscuousReceivedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(value), true);
  }

  // 0x68: u64
  set ullMaxRXLifetimeExceededCount(value: Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(value), true);
  }

  // 0x70: u64
  set ullFrameDuplicateCount(value: Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(value), true);
  }

  // 0x78: u64
  set ullReceivedFragmentCount(value: Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(value), true);
  }

  // 0x80: u64
  set ullPromiscuousReceivedFragmentCount(value: Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(value), true);
  }

  // 0x88: u64
  set ullFCSErrorCount(value: Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MAC_FRAME_STATISTICS (size: 112)
 */
export interface DOT11_MAC_FRAME_STATISTICS {
  /** u64 */
  ullTransmittedFrameCount: Deno.PointerValue;
  /** u64 */
  ullReceivedFrameCount: Deno.PointerValue;
  /** u64 */
  ullTransmittedFailureFrameCount: Deno.PointerValue;
  /** u64 */
  ullReceivedFailureFrameCount: Deno.PointerValue;
  /** u64 */
  ullWEPExcludedCount: Deno.PointerValue;
  /** u64 */
  ullTKIPLocalMICFailures: Deno.PointerValue;
  /** u64 */
  ullTKIPReplays: Deno.PointerValue;
  /** u64 */
  ullTKIPICVErrorCount: Deno.PointerValue;
  /** u64 */
  ullCCMPReplays: Deno.PointerValue;
  /** u64 */
  ullCCMPDecryptErrors: Deno.PointerValue;
  /** u64 */
  ullWEPUndecryptableCount: Deno.PointerValue;
  /** u64 */
  ullWEPICVErrorCount: Deno.PointerValue;
  /** u64 */
  ullDecryptSuccessCount: Deno.PointerValue;
  /** u64 */
  ullDecryptFailureCount: Deno.PointerValue;
}

export const sizeofDOT11_MAC_FRAME_STATISTICS = 112;

export function allocDOT11_MAC_FRAME_STATISTICS(data?: Partial<DOT11_MAC_FRAME_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MAC_FRAME_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullTransmittedFrameCount !== undefined) view.setBigUint64(0, BigInt(data.ullTransmittedFrameCount), true);
  // 0x08: u64
  if (data?.ullReceivedFrameCount !== undefined) view.setBigUint64(8, BigInt(data.ullReceivedFrameCount), true);
  // 0x10: u64
  if (data?.ullTransmittedFailureFrameCount !== undefined) view.setBigUint64(16, BigInt(data.ullTransmittedFailureFrameCount), true);
  // 0x18: u64
  if (data?.ullReceivedFailureFrameCount !== undefined) view.setBigUint64(24, BigInt(data.ullReceivedFailureFrameCount), true);
  // 0x20: u64
  if (data?.ullWEPExcludedCount !== undefined) view.setBigUint64(32, BigInt(data.ullWEPExcludedCount), true);
  // 0x28: u64
  if (data?.ullTKIPLocalMICFailures !== undefined) view.setBigUint64(40, BigInt(data.ullTKIPLocalMICFailures), true);
  // 0x30: u64
  if (data?.ullTKIPReplays !== undefined) view.setBigUint64(48, BigInt(data.ullTKIPReplays), true);
  // 0x38: u64
  if (data?.ullTKIPICVErrorCount !== undefined) view.setBigUint64(56, BigInt(data.ullTKIPICVErrorCount), true);
  // 0x40: u64
  if (data?.ullCCMPReplays !== undefined) view.setBigUint64(64, BigInt(data.ullCCMPReplays), true);
  // 0x48: u64
  if (data?.ullCCMPDecryptErrors !== undefined) view.setBigUint64(72, BigInt(data.ullCCMPDecryptErrors), true);
  // 0x50: u64
  if (data?.ullWEPUndecryptableCount !== undefined) view.setBigUint64(80, BigInt(data.ullWEPUndecryptableCount), true);
  // 0x58: u64
  if (data?.ullWEPICVErrorCount !== undefined) view.setBigUint64(88, BigInt(data.ullWEPICVErrorCount), true);
  // 0x60: u64
  if (data?.ullDecryptSuccessCount !== undefined) view.setBigUint64(96, BigInt(data.ullDecryptSuccessCount), true);
  // 0x68: u64
  if (data?.ullDecryptFailureCount !== undefined) view.setBigUint64(104, BigInt(data.ullDecryptFailureCount), true);
  return buf;
}

export class DOT11_MAC_FRAME_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ullTransmittedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get ullReceivedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get ullTransmittedFailureFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ullReceivedFailureFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get ullWEPExcludedCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get ullTKIPLocalMICFailures(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get ullTKIPReplays(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get ullTKIPICVErrorCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get ullCCMPReplays(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get ullCCMPDecryptErrors(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get ullWEPUndecryptableCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: u64
  get ullWEPICVErrorCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x60: u64
  get ullDecryptSuccessCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(96, true));
  }

  // 0x68: u64
  get ullDecryptFailureCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(104, true));
  }

  // 0x00: u64
  set ullTransmittedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set ullReceivedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set ullTransmittedFailureFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ullReceivedFailureFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set ullWEPExcludedCount(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set ullTKIPLocalMICFailures(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set ullTKIPReplays(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set ullTKIPICVErrorCount(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set ullCCMPReplays(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set ullCCMPDecryptErrors(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set ullWEPUndecryptableCount(value: Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: u64
  set ullWEPICVErrorCount(value: Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(value), true);
  }

  // 0x60: u64
  set ullDecryptSuccessCount(value: Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(value), true);
  }

  // 0x68: u64
  set ullDecryptFailureCount(value: Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_STATISTICS (size: 56)
 */
export interface DOT11_STATISTICS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u64 */
  ullFourWayHandshakeFailures: Deno.PointerValue;
  /** u64 */
  ullTKIPCounterMeasuresInvoked: Deno.PointerValue;
  /** u64 */
  ullReserved: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_MAC_FRAME_STATISTICS */
  MacUcastCounters: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_MAC_FRAME_STATISTICS */
  MacMcastCounters: Uint8Array | Deno.PointerValue;
  /** array */
  PhyCounters: Deno.PointerValue;
}

export const sizeofDOT11_STATISTICS = 56;

export function allocDOT11_STATISTICS(data?: Partial<DOT11_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u64
  if (data?.ullFourWayHandshakeFailures !== undefined) view.setBigUint64(8, BigInt(data.ullFourWayHandshakeFailures), true);
  // 0x10: u64
  if (data?.ullTKIPCounterMeasuresInvoked !== undefined) view.setBigUint64(16, BigInt(data.ullTKIPCounterMeasuresInvoked), true);
  // 0x18: u64
  if (data?.ullReserved !== undefined) view.setBigUint64(24, BigInt(data.ullReserved), true);
  // 0x20: pointer
  if (data?.MacUcastCounters !== undefined) view.setBigUint64(32, data.MacUcastCounters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MacUcastCounters))), true);
  // 0x28: pointer
  if (data?.MacMcastCounters !== undefined) view.setBigUint64(40, data.MacMcastCounters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MacMcastCounters))), true);
  // 0x30: pointer
  if (data?.PhyCounters !== undefined) view.setBigUint64(48, data.PhyCounters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhyCounters))), true);
  return buf;
}

export class DOT11_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u64
  get ullFourWayHandshakeFailures(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get ullTKIPCounterMeasuresInvoked(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ullReserved(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get MacUcastCounters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get MacMcastCounters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get PhyCounters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u64
  set ullFourWayHandshakeFailures(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set ullTKIPCounterMeasuresInvoked(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ullReserved(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set MacUcastCounters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set MacMcastCounters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set PhyCounters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PRIVACY_EXEMPTION (size: 8)
 */
export interface DOT11_PRIVACY_EXEMPTION {
  /** u16 */
  usEtherType: number;
  /** u16 */
  usExemptionActionType: number;
  /** u16 */
  usExemptionPacketType: number;
}

export const sizeofDOT11_PRIVACY_EXEMPTION = 8;

export function allocDOT11_PRIVACY_EXEMPTION(data?: Partial<DOT11_PRIVACY_EXEMPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PRIVACY_EXEMPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usEtherType !== undefined) view.setUint16(0, Number(data.usEtherType), true);
  // 0x02: u16
  if (data?.usExemptionActionType !== undefined) view.setUint16(2, Number(data.usExemptionActionType), true);
  // 0x04: u16
  if (data?.usExemptionPacketType !== undefined) view.setUint16(4, Number(data.usExemptionPacketType), true);
  // 0x06: pad2
  return buf;
}

export class DOT11_PRIVACY_EXEMPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get usEtherType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get usExemptionActionType(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get usExemptionPacketType(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set usEtherType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set usExemptionActionType(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set usExemptionPacketType(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PRIVACY_EXEMPTION_LIST (size: 24)
 */
export interface DOT11_PRIVACY_EXEMPTION_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  PrivacyExemptionEntries: Deno.PointerValue;
}

export const sizeofDOT11_PRIVACY_EXEMPTION_LIST = 24;

export function allocDOT11_PRIVACY_EXEMPTION_LIST(data?: Partial<DOT11_PRIVACY_EXEMPTION_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PRIVACY_EXEMPTION_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.PrivacyExemptionEntries !== undefined) view.setBigUint64(16, data.PrivacyExemptionEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrivacyExemptionEntries))), true);
  return buf;
}

export class DOT11_PRIVACY_EXEMPTION_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get PrivacyExemptionEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set PrivacyExemptionEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM_LIST (size: 24)
 */
export interface DOT11_AUTH_ALGORITHM_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  AlgorithmIds: Deno.PointerValue;
}

export const sizeofDOT11_AUTH_ALGORITHM_LIST = 24;

export function allocDOT11_AUTH_ALGORITHM_LIST(data?: Partial<DOT11_AUTH_ALGORITHM_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_AUTH_ALGORITHM_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.AlgorithmIds !== undefined) view.setBigUint64(16, data.AlgorithmIds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AlgorithmIds))), true);
  return buf;
}

export class DOT11_AUTH_ALGORITHM_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get AlgorithmIds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set AlgorithmIds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_CIPHER_PAIR_LIST (size: 24)
 */
export interface DOT11_AUTH_CIPHER_PAIR_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  AuthCipherPairs: Deno.PointerValue;
}

export const sizeofDOT11_AUTH_CIPHER_PAIR_LIST = 24;

export function allocDOT11_AUTH_CIPHER_PAIR_LIST(data?: Partial<DOT11_AUTH_CIPHER_PAIR_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_AUTH_CIPHER_PAIR_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.AuthCipherPairs !== undefined) view.setBigUint64(16, data.AuthCipherPairs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthCipherPairs))), true);
  return buf;
}

export class DOT11_AUTH_CIPHER_PAIR_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get AuthCipherPairs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set AuthCipherPairs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM_LIST (size: 24)
 */
export interface DOT11_CIPHER_ALGORITHM_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  AlgorithmIds: Deno.PointerValue;
}

export const sizeofDOT11_CIPHER_ALGORITHM_LIST = 24;

export function allocDOT11_CIPHER_ALGORITHM_LIST(data?: Partial<DOT11_CIPHER_ALGORITHM_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_CIPHER_ALGORITHM_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.AlgorithmIds !== undefined) view.setBigUint64(16, data.AlgorithmIds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AlgorithmIds))), true);
  return buf;
}

export class DOT11_CIPHER_ALGORITHM_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get AlgorithmIds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set AlgorithmIds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_DEFAULT_KEY_VALUE (size: 56)
 */
export interface DOT11_CIPHER_DEFAULT_KEY_VALUE {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uKeyIndex: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  AlgorithmId: DOT11_CIPHER_ALGORITHM;
  /** array */
  MacAddr: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDelete: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bStatic: Uint8Array | Deno.PointerValue;
  /** u16 */
  usKeyLength: number;
  /** array */
  ucKey: Deno.PointerValue;
}

export const sizeofDOT11_CIPHER_DEFAULT_KEY_VALUE = 56;

export function allocDOT11_CIPHER_DEFAULT_KEY_VALUE(data?: Partial<DOT11_CIPHER_DEFAULT_KEY_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_CIPHER_DEFAULT_KEY_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uKeyIndex !== undefined) view.setUint32(8, Number(data.uKeyIndex), true);
  // 0x0c: i32
  if (data?.AlgorithmId !== undefined) view.setInt32(12, Number(data.AlgorithmId), true);
  // 0x10: pointer
  if (data?.MacAddr !== undefined) view.setBigUint64(16, data.MacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MacAddr))), true);
  // 0x18: pointer
  if (data?.bDelete !== undefined) view.setBigUint64(24, data.bDelete === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDelete))), true);
  // 0x20: pointer
  if (data?.bStatic !== undefined) view.setBigUint64(32, data.bStatic === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bStatic))), true);
  // 0x28: u16
  if (data?.usKeyLength !== undefined) view.setUint16(40, Number(data.usKeyLength), true);
  // 0x2a: pad6
  // 0x30: pointer
  if (data?.ucKey !== undefined) view.setBigUint64(48, data.ucKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucKey))), true);
  return buf;
}

export class DOT11_CIPHER_DEFAULT_KEY_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uKeyIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get AlgorithmId(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get MacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get bDelete(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get bStatic(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u16
  get usKeyLength(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: pad6

  // 0x30: pointer
  get ucKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uKeyIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set AlgorithmId(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set MacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set bDelete(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set bStatic(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u16
  set usKeyLength(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: pad6

  // 0x30: pointer
  set ucKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_KEY_ALGO_TKIP_MIC (size: 24)
 */
export interface DOT11_KEY_ALGO_TKIP_MIC {
  /** array */
  ucIV48Counter: Deno.PointerValue;
  /** u32 */
  ulTKIPKeyLength: number;
  /** u32 */
  ulMICKeyLength: number;
  /** array */
  ucTKIPMICKeys: Deno.PointerValue;
}

export const sizeofDOT11_KEY_ALGO_TKIP_MIC = 24;

export function allocDOT11_KEY_ALGO_TKIP_MIC(data?: Partial<DOT11_KEY_ALGO_TKIP_MIC>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_KEY_ALGO_TKIP_MIC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucIV48Counter !== undefined) view.setBigUint64(0, data.ucIV48Counter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucIV48Counter))), true);
  // 0x08: u32
  if (data?.ulTKIPKeyLength !== undefined) view.setUint32(8, Number(data.ulTKIPKeyLength), true);
  // 0x0c: u32
  if (data?.ulMICKeyLength !== undefined) view.setUint32(12, Number(data.ulMICKeyLength), true);
  // 0x10: pointer
  if (data?.ucTKIPMICKeys !== undefined) view.setBigUint64(16, data.ucTKIPMICKeys === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucTKIPMICKeys))), true);
  return buf;
}

export class DOT11_KEY_ALGO_TKIP_MICView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucIV48Counter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulTKIPKeyLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulMICKeyLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ucTKIPMICKeys(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ucIV48Counter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulTKIPKeyLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulMICKeyLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ucTKIPMICKeys(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_KEY_ALGO_CCMP (size: 24)
 */
export interface DOT11_KEY_ALGO_CCMP {
  /** array */
  ucIV48Counter: Deno.PointerValue;
  /** u32 */
  ulCCMPKeyLength: number;
  /** array */
  ucCCMPKey: Deno.PointerValue;
}

export const sizeofDOT11_KEY_ALGO_CCMP = 24;

export function allocDOT11_KEY_ALGO_CCMP(data?: Partial<DOT11_KEY_ALGO_CCMP>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_KEY_ALGO_CCMP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucIV48Counter !== undefined) view.setBigUint64(0, data.ucIV48Counter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucIV48Counter))), true);
  // 0x08: u32
  if (data?.ulCCMPKeyLength !== undefined) view.setUint32(8, Number(data.ulCCMPKeyLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ucCCMPKey !== undefined) view.setBigUint64(16, data.ucCCMPKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucCCMPKey))), true);
  return buf;
}

export class DOT11_KEY_ALGO_CCMPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucIV48Counter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulCCMPKeyLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ucCCMPKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ucIV48Counter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulCCMPKeyLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ucCCMPKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_KEY_ALGO_GCMP (size: 24)
 */
export interface DOT11_KEY_ALGO_GCMP {
  /** array */
  ucIV48Counter: Deno.PointerValue;
  /** u32 */
  ulGCMPKeyLength: number;
  /** array */
  ucGCMPKey: Deno.PointerValue;
}

export const sizeofDOT11_KEY_ALGO_GCMP = 24;

export function allocDOT11_KEY_ALGO_GCMP(data?: Partial<DOT11_KEY_ALGO_GCMP>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_KEY_ALGO_GCMP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucIV48Counter !== undefined) view.setBigUint64(0, data.ucIV48Counter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucIV48Counter))), true);
  // 0x08: u32
  if (data?.ulGCMPKeyLength !== undefined) view.setUint32(8, Number(data.ulGCMPKeyLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ucGCMPKey !== undefined) view.setBigUint64(16, data.ucGCMPKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucGCMPKey))), true);
  return buf;
}

export class DOT11_KEY_ALGO_GCMPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucIV48Counter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulGCMPKeyLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ucGCMPKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ucIV48Counter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulGCMPKeyLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ucGCMPKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_KEY_ALGO_GCMP_256 (size: 24)
 */
export interface DOT11_KEY_ALGO_GCMP_256 {
  /** array */
  ucIV48Counter: Deno.PointerValue;
  /** u32 */
  ulGCMP256KeyLength: number;
  /** array */
  ucGCMP256Key: Deno.PointerValue;
}

export const sizeofDOT11_KEY_ALGO_GCMP_256 = 24;

export function allocDOT11_KEY_ALGO_GCMP_256(data?: Partial<DOT11_KEY_ALGO_GCMP_256>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_KEY_ALGO_GCMP_256);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucIV48Counter !== undefined) view.setBigUint64(0, data.ucIV48Counter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucIV48Counter))), true);
  // 0x08: u32
  if (data?.ulGCMP256KeyLength !== undefined) view.setUint32(8, Number(data.ulGCMP256KeyLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ucGCMP256Key !== undefined) view.setBigUint64(16, data.ucGCMP256Key === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucGCMP256Key))), true);
  return buf;
}

export class DOT11_KEY_ALGO_GCMP_256View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucIV48Counter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulGCMP256KeyLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ucGCMP256Key(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ucIV48Counter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulGCMP256KeyLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ucGCMP256Key(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_KEY_ALGO_BIP (size: 24)
 */
export interface DOT11_KEY_ALGO_BIP {
  /** array */
  ucIPN: Deno.PointerValue;
  /** u32 */
  ulBIPKeyLength: number;
  /** array */
  ucBIPKey: Deno.PointerValue;
}

export const sizeofDOT11_KEY_ALGO_BIP = 24;

export function allocDOT11_KEY_ALGO_BIP(data?: Partial<DOT11_KEY_ALGO_BIP>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_KEY_ALGO_BIP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucIPN !== undefined) view.setBigUint64(0, data.ucIPN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucIPN))), true);
  // 0x08: u32
  if (data?.ulBIPKeyLength !== undefined) view.setUint32(8, Number(data.ulBIPKeyLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ucBIPKey !== undefined) view.setBigUint64(16, data.ucBIPKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBIPKey))), true);
  return buf;
}

export class DOT11_KEY_ALGO_BIPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucIPN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulBIPKeyLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ucBIPKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ucIPN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulBIPKeyLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ucBIPKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_KEY_ALGO_BIP_GMAC_256 (size: 24)
 */
export interface DOT11_KEY_ALGO_BIP_GMAC_256 {
  /** array */
  ucIPN: Deno.PointerValue;
  /** u32 */
  ulBIPGmac256KeyLength: number;
  /** array */
  ucBIPGmac256Key: Deno.PointerValue;
}

export const sizeofDOT11_KEY_ALGO_BIP_GMAC_256 = 24;

export function allocDOT11_KEY_ALGO_BIP_GMAC_256(data?: Partial<DOT11_KEY_ALGO_BIP_GMAC_256>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_KEY_ALGO_BIP_GMAC_256);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ucIPN !== undefined) view.setBigUint64(0, data.ucIPN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucIPN))), true);
  // 0x08: u32
  if (data?.ulBIPGmac256KeyLength !== undefined) view.setUint32(8, Number(data.ulBIPGmac256KeyLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ucBIPGmac256Key !== undefined) view.setBigUint64(16, data.ucBIPGmac256Key === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBIPGmac256Key))), true);
  return buf;
}

export class DOT11_KEY_ALGO_BIP_GMAC_256View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ucIPN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulBIPGmac256KeyLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ucBIPGmac256Key(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ucIPN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulBIPGmac256KeyLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ucBIPGmac256Key(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_KEY_MAPPING_KEY_VALUE (size: 48)
 */
export interface DOT11_CIPHER_KEY_MAPPING_KEY_VALUE {
  /** array */
  PeerMacAddr: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  AlgorithmId: DOT11_CIPHER_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_DIRECTION */
  Direction: DOT11_DIRECTION;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDelete: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bStatic: Uint8Array | Deno.PointerValue;
  /** u16 */
  usKeyLength: number;
  /** array */
  ucKey: Deno.PointerValue;
}

export const sizeofDOT11_CIPHER_KEY_MAPPING_KEY_VALUE = 48;

export function allocDOT11_CIPHER_KEY_MAPPING_KEY_VALUE(data?: Partial<DOT11_CIPHER_KEY_MAPPING_KEY_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_CIPHER_KEY_MAPPING_KEY_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PeerMacAddr !== undefined) view.setBigUint64(0, data.PeerMacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMacAddr))), true);
  // 0x08: i32
  if (data?.AlgorithmId !== undefined) view.setInt32(8, Number(data.AlgorithmId), true);
  // 0x0c: i32
  if (data?.Direction !== undefined) view.setInt32(12, Number(data.Direction), true);
  // 0x10: pointer
  if (data?.bDelete !== undefined) view.setBigUint64(16, data.bDelete === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDelete))), true);
  // 0x18: pointer
  if (data?.bStatic !== undefined) view.setBigUint64(24, data.bStatic === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bStatic))), true);
  // 0x20: u16
  if (data?.usKeyLength !== undefined) view.setUint16(32, Number(data.usKeyLength), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.ucKey !== undefined) view.setBigUint64(40, data.ucKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucKey))), true);
  return buf;
}

export class DOT11_CIPHER_KEY_MAPPING_KEY_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PeerMacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get AlgorithmId(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Direction(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get bDelete(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get bStatic(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get usKeyLength(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  get ucKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set PeerMacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set AlgorithmId(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Direction(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set bDelete(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set bStatic(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set usKeyLength(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  set ucKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get QuadPart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set QuadPart(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ASSOCIATION_INFO_EX (size: 88)
 */
export interface DOT11_ASSOCIATION_INFO_EX {
  /** array */
  PeerMacAddress: Deno.PointerValue;
  /** array */
  BSSID: Deno.PointerValue;
  /** u16 */
  usCapabilityInformation: number;
  /** u16 */
  usListenInterval: number;
  /** array */
  ucPeerSupportedRates: Deno.PointerValue;
  /** u16 */
  usAssociationID: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_ASSOCIATION_STATE */
  dot11AssociationState: DOT11_ASSOCIATION_STATE;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_POWER_MODE */
  dot11PowerMode: DOT11_POWER_MODE;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liAssociationUpTime: Uint8Array | Deno.PointerValue;
  /** u64 */
  ullNumOfTxPacketSuccesses: Deno.PointerValue;
  /** u64 */
  ullNumOfTxPacketFailures: Deno.PointerValue;
  /** u64 */
  ullNumOfRxPacketSuccesses: Deno.PointerValue;
  /** u64 */
  ullNumOfRxPacketFailures: Deno.PointerValue;
}

export const sizeofDOT11_ASSOCIATION_INFO_EX = 88;

export function allocDOT11_ASSOCIATION_INFO_EX(data?: Partial<DOT11_ASSOCIATION_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ASSOCIATION_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PeerMacAddress !== undefined) view.setBigUint64(0, data.PeerMacAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMacAddress))), true);
  // 0x08: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(8, data.BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BSSID))), true);
  // 0x10: u16
  if (data?.usCapabilityInformation !== undefined) view.setUint16(16, Number(data.usCapabilityInformation), true);
  // 0x12: u16
  if (data?.usListenInterval !== undefined) view.setUint16(18, Number(data.usListenInterval), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ucPeerSupportedRates !== undefined) view.setBigUint64(24, data.ucPeerSupportedRates === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucPeerSupportedRates))), true);
  // 0x20: u16
  if (data?.usAssociationID !== undefined) view.setUint16(32, Number(data.usAssociationID), true);
  // 0x22: i32
  if (data?.dot11AssociationState !== undefined) view.setInt32(34, Number(data.dot11AssociationState), true);
  // 0x26: i32
  if (data?.dot11PowerMode !== undefined) view.setInt32(38, Number(data.dot11PowerMode), true);
  // 0x2a: pad6
  // 0x30: pointer
  if (data?.liAssociationUpTime !== undefined) view.setBigUint64(48, data.liAssociationUpTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liAssociationUpTime))), true);
  // 0x38: u64
  if (data?.ullNumOfTxPacketSuccesses !== undefined) view.setBigUint64(56, BigInt(data.ullNumOfTxPacketSuccesses), true);
  // 0x40: u64
  if (data?.ullNumOfTxPacketFailures !== undefined) view.setBigUint64(64, BigInt(data.ullNumOfTxPacketFailures), true);
  // 0x48: u64
  if (data?.ullNumOfRxPacketSuccesses !== undefined) view.setBigUint64(72, BigInt(data.ullNumOfRxPacketSuccesses), true);
  // 0x50: u64
  if (data?.ullNumOfRxPacketFailures !== undefined) view.setBigUint64(80, BigInt(data.ullNumOfRxPacketFailures), true);
  return buf;
}

export class DOT11_ASSOCIATION_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PeerMacAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get usCapabilityInformation(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get usListenInterval(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ucPeerSupportedRates(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get usAssociationID(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: i32
  get dot11AssociationState(): number {
    return this.view.getInt32(34, true);
  }

  // 0x26: i32
  get dot11PowerMode(): number {
    return this.view.getInt32(38, true);
  }

  // 0x2a: pad6

  // 0x30: pointer
  get liAssociationUpTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u64
  get ullNumOfTxPacketSuccesses(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get ullNumOfTxPacketFailures(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get ullNumOfRxPacketSuccesses(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get ullNumOfRxPacketFailures(): Deno.PointerValue {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x00: pointer
  set PeerMacAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set usCapabilityInformation(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set usListenInterval(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ucPeerSupportedRates(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set usAssociationID(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: i32
  set dot11AssociationState(value: number) {
    this.view.setInt32(34, value, true);
  }

  // 0x26: i32
  set dot11PowerMode(value: number) {
    this.view.setInt32(38, value, true);
  }

  // 0x2a: pad6

  // 0x30: pointer
  set liAssociationUpTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u64
  set ullNumOfTxPacketSuccesses(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set ullNumOfTxPacketFailures(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set ullNumOfRxPacketSuccesses(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set ullNumOfRxPacketFailures(value: Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ASSOCIATION_INFO_LIST (size: 24)
 */
export interface DOT11_ASSOCIATION_INFO_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11AssocInfo: Deno.PointerValue;
}

export const sizeofDOT11_ASSOCIATION_INFO_LIST = 24;

export function allocDOT11_ASSOCIATION_INFO_LIST(data?: Partial<DOT11_ASSOCIATION_INFO_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ASSOCIATION_INFO_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.dot11AssocInfo !== undefined) view.setBigUint64(16, data.dot11AssocInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11AssocInfo))), true);
  return buf;
}

export class DOT11_ASSOCIATION_INFO_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get dot11AssocInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set dot11AssocInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_ID_LIST (size: 24)
 */
export interface DOT11_PHY_ID_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  dot11PhyId: Deno.PointerValue;
}

export const sizeofDOT11_PHY_ID_LIST = 24;

export function allocDOT11_PHY_ID_LIST(data?: Partial<DOT11_PHY_ID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PHY_ID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.dot11PhyId !== undefined) view.setBigUint64(16, data.dot11PhyId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11PhyId))), true);
  return buf;
}

export class DOT11_PHY_ID_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get dot11PhyId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set dot11PhyId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_EXTSTA_CAPABILITY (size: 48)
 */
export interface DOT11_EXTSTA_CAPABILITY {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uScanSSIDListSize: number;
  /** u32 */
  uDesiredBSSIDListSize: number;
  /** u32 */
  uDesiredSSIDListSize: number;
  /** u32 */
  uExcludedMacAddressListSize: number;
  /** u32 */
  uPrivacyExemptionListSize: number;
  /** u32 */
  uKeyMappingTableSize: number;
  /** u32 */
  uDefaultKeyTableSize: number;
  /** u32 */
  uWEPKeyValueMaxLength: number;
  /** u32 */
  uPMKIDCacheSize: number;
  /** u32 */
  uMaxNumPerSTADefaultKeyTables: number;
}

export const sizeofDOT11_EXTSTA_CAPABILITY = 48;

export function allocDOT11_EXTSTA_CAPABILITY(data?: Partial<DOT11_EXTSTA_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_EXTSTA_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uScanSSIDListSize !== undefined) view.setUint32(8, Number(data.uScanSSIDListSize), true);
  // 0x0c: u32
  if (data?.uDesiredBSSIDListSize !== undefined) view.setUint32(12, Number(data.uDesiredBSSIDListSize), true);
  // 0x10: u32
  if (data?.uDesiredSSIDListSize !== undefined) view.setUint32(16, Number(data.uDesiredSSIDListSize), true);
  // 0x14: u32
  if (data?.uExcludedMacAddressListSize !== undefined) view.setUint32(20, Number(data.uExcludedMacAddressListSize), true);
  // 0x18: u32
  if (data?.uPrivacyExemptionListSize !== undefined) view.setUint32(24, Number(data.uPrivacyExemptionListSize), true);
  // 0x1c: u32
  if (data?.uKeyMappingTableSize !== undefined) view.setUint32(28, Number(data.uKeyMappingTableSize), true);
  // 0x20: u32
  if (data?.uDefaultKeyTableSize !== undefined) view.setUint32(32, Number(data.uDefaultKeyTableSize), true);
  // 0x24: u32
  if (data?.uWEPKeyValueMaxLength !== undefined) view.setUint32(36, Number(data.uWEPKeyValueMaxLength), true);
  // 0x28: u32
  if (data?.uPMKIDCacheSize !== undefined) view.setUint32(40, Number(data.uPMKIDCacheSize), true);
  // 0x2c: u32
  if (data?.uMaxNumPerSTADefaultKeyTables !== undefined) view.setUint32(44, Number(data.uMaxNumPerSTADefaultKeyTables), true);
  return buf;
}

export class DOT11_EXTSTA_CAPABILITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uScanSSIDListSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uDesiredBSSIDListSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uDesiredSSIDListSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uExcludedMacAddressListSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uPrivacyExemptionListSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get uKeyMappingTableSize(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get uDefaultKeyTableSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get uWEPKeyValueMaxLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get uPMKIDCacheSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get uMaxNumPerSTADefaultKeyTables(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uScanSSIDListSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uDesiredBSSIDListSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uDesiredSSIDListSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uExcludedMacAddressListSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uPrivacyExemptionListSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set uKeyMappingTableSize(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set uDefaultKeyTableSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set uWEPKeyValueMaxLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set uPMKIDCacheSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set uMaxNumPerSTADefaultKeyTables(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_DATA_RATE_MAPPING_ENTRY (size: 8)
 */
export interface DOT11_DATA_RATE_MAPPING_ENTRY {
  /** u8 */
  ucDataRateIndex: number;
  /** u8 */
  ucDataRateFlag: number;
  /** u16 */
  usDataRateValue: number;
}

export const sizeofDOT11_DATA_RATE_MAPPING_ENTRY = 8;

export function allocDOT11_DATA_RATE_MAPPING_ENTRY(data?: Partial<DOT11_DATA_RATE_MAPPING_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_DATA_RATE_MAPPING_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ucDataRateIndex !== undefined) view.setUint8(0, Number(data.ucDataRateIndex));
  // 0x01: u8
  if (data?.ucDataRateFlag !== undefined) view.setUint8(1, Number(data.ucDataRateFlag));
  // 0x02: u16
  if (data?.usDataRateValue !== undefined) view.setUint16(2, Number(data.usDataRateValue), true);
  // 0x04: pad4
  return buf;
}

export class DOT11_DATA_RATE_MAPPING_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get ucDataRateIndex(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get ucDataRateFlag(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get usDataRateValue(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u8
  set ucDataRateIndex(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set ucDataRateFlag(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set usDataRateValue(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_DATA_RATE_MAPPING_TABLE (size: 24)
 */
export interface DOT11_DATA_RATE_MAPPING_TABLE {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uDataRateMappingLength: number;
  /** array */
  DataRateMappingEntries: Deno.PointerValue;
}

export const sizeofDOT11_DATA_RATE_MAPPING_TABLE = 24;

export function allocDOT11_DATA_RATE_MAPPING_TABLE(data?: Partial<DOT11_DATA_RATE_MAPPING_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_DATA_RATE_MAPPING_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uDataRateMappingLength !== undefined) view.setUint32(8, Number(data.uDataRateMappingLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DataRateMappingEntries !== undefined) view.setBigUint64(16, data.DataRateMappingEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataRateMappingEntries))), true);
  return buf;
}

export class DOT11_DATA_RATE_MAPPING_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uDataRateMappingLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get DataRateMappingEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uDataRateMappingLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set DataRateMappingEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_COUNTRY_OR_REGION_STRING_LIST (size: 24)
 */
export interface DOT11_COUNTRY_OR_REGION_STRING_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  CountryOrRegionStrings: Deno.PointerValue;
}

export const sizeofDOT11_COUNTRY_OR_REGION_STRING_LIST = 24;

export function allocDOT11_COUNTRY_OR_REGION_STRING_LIST(data?: Partial<DOT11_COUNTRY_OR_REGION_STRING_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_COUNTRY_OR_REGION_STRING_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.CountryOrRegionStrings !== undefined) view.setBigUint64(16, data.CountryOrRegionStrings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CountryOrRegionStrings))), true);
  return buf;
}

export class DOT11_COUNTRY_OR_REGION_STRING_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get CountryOrRegionStrings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set CountryOrRegionStrings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PORT_STATE_NOTIFICATION (size: 24)
 */
export interface DOT11_PORT_STATE_NOTIFICATION {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerMac: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bOpen: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_PORT_STATE_NOTIFICATION = 24;

export function allocDOT11_PORT_STATE_NOTIFICATION(data?: Partial<DOT11_PORT_STATE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PORT_STATE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerMac !== undefined) view.setBigUint64(8, data.PeerMac === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMac))), true);
  // 0x10: pointer
  if (data?.bOpen !== undefined) view.setBigUint64(16, data.bOpen === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bOpen))), true);
  return buf;
}

export class DOT11_PORT_STATE_NOTIFICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerMac(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bOpen(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerMac(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bOpen(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_IBSS_PARAMS (size: 24)
 */
export interface DOT11_IBSS_PARAMS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bJoinOnly: Uint8Array | Deno.PointerValue;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_IBSS_PARAMS = 24;

export function allocDOT11_IBSS_PARAMS(data?: Partial<DOT11_IBSS_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_IBSS_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.bJoinOnly !== undefined) view.setBigUint64(8, data.bJoinOnly === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bJoinOnly))), true);
  // 0x10: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(16, Number(data.uIEsOffset), true);
  // 0x14: u32
  if (data?.uIEsLength !== undefined) view.setUint32(20, Number(data.uIEsLength), true);
  return buf;
}

export class DOT11_IBSS_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bJoinOnly(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uIEsOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uIEsLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bJoinOnly(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uIEsLength(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_QOS_PARAMS (size: 16)
 */
export interface DOT11_QOS_PARAMS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u8 */
  ucEnabledQoSProtocolFlags: number;
}

export const sizeofDOT11_QOS_PARAMS = 16;

export function allocDOT11_QOS_PARAMS(data?: Partial<DOT11_QOS_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_QOS_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u8
  if (data?.ucEnabledQoSProtocolFlags !== undefined) view.setUint8(8, Number(data.ucEnabledQoSProtocolFlags));
  // 0x09: pad7
  return buf;
}

export class DOT11_QOS_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get ucEnabledQoSProtocolFlags(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set ucEnabledQoSProtocolFlags(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ASSOCIATION_PARAMS (size: 24)
 */
export interface DOT11_ASSOCIATION_PARAMS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  BSSID: Deno.PointerValue;
  /** u32 */
  uAssocRequestIEsOffset: number;
  /** u32 */
  uAssocRequestIEsLength: number;
}

export const sizeofDOT11_ASSOCIATION_PARAMS = 24;

export function allocDOT11_ASSOCIATION_PARAMS(data?: Partial<DOT11_ASSOCIATION_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ASSOCIATION_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(8, data.BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BSSID))), true);
  // 0x10: u32
  if (data?.uAssocRequestIEsOffset !== undefined) view.setUint32(16, Number(data.uAssocRequestIEsOffset), true);
  // 0x14: u32
  if (data?.uAssocRequestIEsLength !== undefined) view.setUint32(20, Number(data.uAssocRequestIEsLength), true);
  return buf;
}

export class DOT11_ASSOCIATION_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uAssocRequestIEsOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uAssocRequestIEsLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uAssocRequestIEsOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uAssocRequestIEsLength(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_FRAGMENT_DESCRIPTOR (size: 8)
 */
export interface DOT11_FRAGMENT_DESCRIPTOR {
  /** u32 */
  uOffset: number;
  /** u32 */
  uLength: number;
}

export const sizeofDOT11_FRAGMENT_DESCRIPTOR = 8;

export function allocDOT11_FRAGMENT_DESCRIPTOR(data?: Partial<DOT11_FRAGMENT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_FRAGMENT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uOffset !== undefined) view.setUint32(0, Number(data.uOffset), true);
  // 0x04: u32
  if (data?.uLength !== undefined) view.setUint32(4, Number(data.uLength), true);
  return buf;
}

export class DOT11_FRAGMENT_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set uOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uLength(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PER_MSDU_COUNTERS (size: 24)
 */
export interface DOT11_PER_MSDU_COUNTERS {
  /** u32 */
  uTransmittedFragmentCount: number;
  /** u32 */
  uRetryCount: number;
  /** u32 */
  uRTSSuccessCount: number;
  /** u32 */
  uRTSFailureCount: number;
  /** u32 */
  uACKFailureCount: number;
}

export const sizeofDOT11_PER_MSDU_COUNTERS = 24;

export function allocDOT11_PER_MSDU_COUNTERS(data?: Partial<DOT11_PER_MSDU_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PER_MSDU_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uTransmittedFragmentCount !== undefined) view.setUint32(0, Number(data.uTransmittedFragmentCount), true);
  // 0x04: u32
  if (data?.uRetryCount !== undefined) view.setUint32(4, Number(data.uRetryCount), true);
  // 0x08: u32
  if (data?.uRTSSuccessCount !== undefined) view.setUint32(8, Number(data.uRTSSuccessCount), true);
  // 0x0c: u32
  if (data?.uRTSFailureCount !== undefined) view.setUint32(12, Number(data.uRTSFailureCount), true);
  // 0x10: u32
  if (data?.uACKFailureCount !== undefined) view.setUint32(16, Number(data.uACKFailureCount), true);
  // 0x14: pad4
  return buf;
}

export class DOT11_PER_MSDU_COUNTERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uTransmittedFragmentCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uRetryCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uRTSSuccessCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uRTSFailureCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uACKFailureCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set uTransmittedFragmentCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uRetryCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uRTSSuccessCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uRTSFailureCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uACKFailureCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_HRDSSS_PHY_ATTRIBUTES (size: 32)
 */
export interface DOT11_HRDSSS_PHY_ATTRIBUTES {
  /** Windows.Win32.Foundation.BOOLEAN */
  bShortPreambleOptionImplemented: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bPBCCOptionImplemented: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bChannelAgilityPresent: Uint8Array | Deno.PointerValue;
  /** u32 */
  uHRCCAModeSupported: number;
}

export const sizeofDOT11_HRDSSS_PHY_ATTRIBUTES = 32;

export function allocDOT11_HRDSSS_PHY_ATTRIBUTES(data?: Partial<DOT11_HRDSSS_PHY_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_HRDSSS_PHY_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bShortPreambleOptionImplemented !== undefined) view.setBigUint64(0, data.bShortPreambleOptionImplemented === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bShortPreambleOptionImplemented))), true);
  // 0x08: pointer
  if (data?.bPBCCOptionImplemented !== undefined) view.setBigUint64(8, data.bPBCCOptionImplemented === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bPBCCOptionImplemented))), true);
  // 0x10: pointer
  if (data?.bChannelAgilityPresent !== undefined) view.setBigUint64(16, data.bChannelAgilityPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bChannelAgilityPresent))), true);
  // 0x18: u32
  if (data?.uHRCCAModeSupported !== undefined) view.setUint32(24, Number(data.uHRCCAModeSupported), true);
  // 0x1c: pad4
  return buf;
}

export class DOT11_HRDSSS_PHY_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get bShortPreambleOptionImplemented(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bPBCCOptionImplemented(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bChannelAgilityPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uHRCCAModeSupported(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set bShortPreambleOptionImplemented(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bPBCCOptionImplemented(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bChannelAgilityPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set uHRCCAModeSupported(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_OFDM_PHY_ATTRIBUTES (size: 8)
 */
export interface DOT11_OFDM_PHY_ATTRIBUTES {
  /** u32 */
  uFrequencyBandsSupported: number;
}

export const sizeofDOT11_OFDM_PHY_ATTRIBUTES = 8;

export function allocDOT11_OFDM_PHY_ATTRIBUTES(data?: Partial<DOT11_OFDM_PHY_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_OFDM_PHY_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uFrequencyBandsSupported !== undefined) view.setUint32(0, Number(data.uFrequencyBandsSupported), true);
  // 0x04: pad4
  return buf;
}

export class DOT11_OFDM_PHY_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uFrequencyBandsSupported(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set uFrequencyBandsSupported(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ERP_PHY_ATTRIBUTES (size: 32)
 */
export interface DOT11_ERP_PHY_ATTRIBUTES {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_HRDSSS_PHY_ATTRIBUTES */
  HRDSSSAttributes: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bERPPBCCOptionImplemented: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDSSSOFDMOptionImplemented: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bShortSlotTimeOptionImplemented: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_ERP_PHY_ATTRIBUTES = 32;

export function allocDOT11_ERP_PHY_ATTRIBUTES(data?: Partial<DOT11_ERP_PHY_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ERP_PHY_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HRDSSSAttributes !== undefined) view.setBigUint64(0, data.HRDSSSAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HRDSSSAttributes))), true);
  // 0x08: pointer
  if (data?.bERPPBCCOptionImplemented !== undefined) view.setBigUint64(8, data.bERPPBCCOptionImplemented === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bERPPBCCOptionImplemented))), true);
  // 0x10: pointer
  if (data?.bDSSSOFDMOptionImplemented !== undefined) view.setBigUint64(16, data.bDSSSOFDMOptionImplemented === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDSSSOFDMOptionImplemented))), true);
  // 0x18: pointer
  if (data?.bShortSlotTimeOptionImplemented !== undefined) view.setBigUint64(24, data.bShortSlotTimeOptionImplemented === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bShortSlotTimeOptionImplemented))), true);
  return buf;
}

export class DOT11_ERP_PHY_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get HRDSSSAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bERPPBCCOptionImplemented(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bDSSSOFDMOptionImplemented(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get bShortSlotTimeOptionImplemented(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set HRDSSSAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bERPPBCCOptionImplemented(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bDSSSOFDMOptionImplemented(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set bShortSlotTimeOptionImplemented(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _PhySpecificAttributes_e__Union (size: 24)
 */
export interface _PhySpecificAttributes_e__Union {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_HRDSSS_PHY_ATTRIBUTES */
  HRDSSSAttributes: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_OFDM_PHY_ATTRIBUTES */
  OFDMAttributes: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_ERP_PHY_ATTRIBUTES */
  ERPAttributes: Uint8Array | Deno.PointerValue;
}

export const sizeof_PhySpecificAttributes_e__Union = 24;

export function alloc_PhySpecificAttributes_e__Union(data?: Partial<_PhySpecificAttributes_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_PhySpecificAttributes_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HRDSSSAttributes !== undefined) view.setBigUint64(0, data.HRDSSSAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HRDSSSAttributes))), true);
  // 0x08: pointer
  if (data?.OFDMAttributes !== undefined) view.setBigUint64(8, data.OFDMAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OFDMAttributes))), true);
  // 0x10: pointer
  if (data?.ERPAttributes !== undefined) view.setBigUint64(16, data.ERPAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ERPAttributes))), true);
  return buf;
}

export class _PhySpecificAttributes_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get HRDSSSAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get OFDMAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ERPAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set HRDSSSAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set OFDMAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ERPAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_ATTRIBUTES (size: 104)
 */
export interface DOT11_PHY_ATTRIBUTES {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_TYPE */
  PhyType: DOT11_PHY_TYPE;
  /** Windows.Win32.Foundation.BOOLEAN */
  bHardwarePhyState: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bSoftwarePhyState: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bCFPollable: Uint8Array | Deno.PointerValue;
  /** u32 */
  uMPDUMaxLength: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_TEMP_TYPE */
  TempType: DOT11_TEMP_TYPE;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_DIVERSITY_SUPPORT */
  DiversitySupport: DOT11_DIVERSITY_SUPPORT;
  /** _PhySpecificAttributes_e__Union */
  PhySpecificAttributes: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumberSupportedPowerLevels: number;
  /** array */
  TxPowerLevels: Deno.PointerValue;
  /** u32 */
  uNumDataRateMappingEntries: number;
  /** array */
  DataRateMappingEntries: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SUPPORTED_DATA_RATES_VALUE_V2 */
  SupportedDataRatesValue: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_PHY_ATTRIBUTES = 104;

export function allocDOT11_PHY_ATTRIBUTES(data?: Partial<DOT11_PHY_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PHY_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: i32
  if (data?.PhyType !== undefined) view.setInt32(8, Number(data.PhyType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.bHardwarePhyState !== undefined) view.setBigUint64(16, data.bHardwarePhyState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bHardwarePhyState))), true);
  // 0x18: pointer
  if (data?.bSoftwarePhyState !== undefined) view.setBigUint64(24, data.bSoftwarePhyState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bSoftwarePhyState))), true);
  // 0x20: pointer
  if (data?.bCFPollable !== undefined) view.setBigUint64(32, data.bCFPollable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bCFPollable))), true);
  // 0x28: u32
  if (data?.uMPDUMaxLength !== undefined) view.setUint32(40, Number(data.uMPDUMaxLength), true);
  // 0x2c: i32
  if (data?.TempType !== undefined) view.setInt32(44, Number(data.TempType), true);
  // 0x30: i32
  if (data?.DiversitySupport !== undefined) view.setInt32(48, Number(data.DiversitySupport), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.PhySpecificAttributes !== undefined) view.setBigUint64(56, data.PhySpecificAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhySpecificAttributes))), true);
  // 0x40: u32
  if (data?.uNumberSupportedPowerLevels !== undefined) view.setUint32(64, Number(data.uNumberSupportedPowerLevels), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.TxPowerLevels !== undefined) view.setBigUint64(72, data.TxPowerLevels === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TxPowerLevels))), true);
  // 0x50: u32
  if (data?.uNumDataRateMappingEntries !== undefined) view.setUint32(80, Number(data.uNumDataRateMappingEntries), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.DataRateMappingEntries !== undefined) view.setBigUint64(88, data.DataRateMappingEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataRateMappingEntries))), true);
  // 0x60: pointer
  if (data?.SupportedDataRatesValue !== undefined) view.setBigUint64(96, data.SupportedDataRatesValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SupportedDataRatesValue))), true);
  return buf;
}

export class DOT11_PHY_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get PhyType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get bHardwarePhyState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get bSoftwarePhyState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get bCFPollable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get uMPDUMaxLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get TempType(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get DiversitySupport(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get PhySpecificAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get uNumberSupportedPowerLevels(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get TxPowerLevels(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get uNumDataRateMappingEntries(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get DataRateMappingEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get SupportedDataRatesValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set PhyType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set bHardwarePhyState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set bSoftwarePhyState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set bCFPollable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set uMPDUMaxLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set TempType(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set DiversitySupport(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set PhySpecificAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set uNumberSupportedPowerLevels(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set TxPowerLevels(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set uNumDataRateMappingEntries(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set DataRateMappingEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set SupportedDataRatesValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_EXTSTA_ATTRIBUTES (size: 232)
 */
export interface DOT11_EXTSTA_ATTRIBUTES {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uScanSSIDListSize: number;
  /** u32 */
  uDesiredBSSIDListSize: number;
  /** u32 */
  uDesiredSSIDListSize: number;
  /** u32 */
  uExcludedMacAddressListSize: number;
  /** u32 */
  uPrivacyExemptionListSize: number;
  /** u32 */
  uKeyMappingTableSize: number;
  /** u32 */
  uDefaultKeyTableSize: number;
  /** u32 */
  uWEPKeyValueMaxLength: number;
  /** u32 */
  uPMKIDCacheSize: number;
  /** u32 */
  uMaxNumPerSTADefaultKeyTables: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bStrictlyOrderedServiceClassImplemented: Uint8Array | Deno.PointerValue;
  /** u8 */
  ucSupportedQoSProtocolFlags: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bSafeModeImplemented: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumSupportedCountryOrRegionStrings: number;
  /** ptr */
  pSupportedCountryOrRegionStrings: Deno.PointerValue | Uint8Array;
  /** u32 */
  uInfraNumSupportedUcastAlgoPairs: number;
  /** ptr */
  pInfraSupportedUcastAlgoPairs: Deno.PointerValue | Uint8Array;
  /** u32 */
  uInfraNumSupportedMcastAlgoPairs: number;
  /** ptr */
  pInfraSupportedMcastAlgoPairs: Deno.PointerValue | Uint8Array;
  /** u32 */
  uAdhocNumSupportedUcastAlgoPairs: number;
  /** ptr */
  pAdhocSupportedUcastAlgoPairs: Deno.PointerValue | Uint8Array;
  /** u32 */
  uAdhocNumSupportedMcastAlgoPairs: number;
  /** ptr */
  pAdhocSupportedMcastAlgoPairs: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOLEAN */
  bAutoPowerSaveMode: Uint8Array | Deno.PointerValue;
  /** u32 */
  uMaxNetworkOffloadListSize: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bMFPCapable: Uint8Array | Deno.PointerValue;
  /** u32 */
  uInfraNumSupportedMcastMgmtAlgoPairs: number;
  /** ptr */
  pInfraSupportedMcastMgmtAlgoPairs: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOLEAN */
  bNeighborReportSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bAPChannelReportSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bActionFramesSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bANQPQueryOffloadSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bHESSIDConnectionSupported: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_EXTSTA_ATTRIBUTES = 232;

export function allocDOT11_EXTSTA_ATTRIBUTES(data?: Partial<DOT11_EXTSTA_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_EXTSTA_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uScanSSIDListSize !== undefined) view.setUint32(8, Number(data.uScanSSIDListSize), true);
  // 0x0c: u32
  if (data?.uDesiredBSSIDListSize !== undefined) view.setUint32(12, Number(data.uDesiredBSSIDListSize), true);
  // 0x10: u32
  if (data?.uDesiredSSIDListSize !== undefined) view.setUint32(16, Number(data.uDesiredSSIDListSize), true);
  // 0x14: u32
  if (data?.uExcludedMacAddressListSize !== undefined) view.setUint32(20, Number(data.uExcludedMacAddressListSize), true);
  // 0x18: u32
  if (data?.uPrivacyExemptionListSize !== undefined) view.setUint32(24, Number(data.uPrivacyExemptionListSize), true);
  // 0x1c: u32
  if (data?.uKeyMappingTableSize !== undefined) view.setUint32(28, Number(data.uKeyMappingTableSize), true);
  // 0x20: u32
  if (data?.uDefaultKeyTableSize !== undefined) view.setUint32(32, Number(data.uDefaultKeyTableSize), true);
  // 0x24: u32
  if (data?.uWEPKeyValueMaxLength !== undefined) view.setUint32(36, Number(data.uWEPKeyValueMaxLength), true);
  // 0x28: u32
  if (data?.uPMKIDCacheSize !== undefined) view.setUint32(40, Number(data.uPMKIDCacheSize), true);
  // 0x2c: u32
  if (data?.uMaxNumPerSTADefaultKeyTables !== undefined) view.setUint32(44, Number(data.uMaxNumPerSTADefaultKeyTables), true);
  // 0x30: pointer
  if (data?.bStrictlyOrderedServiceClassImplemented !== undefined) view.setBigUint64(48, data.bStrictlyOrderedServiceClassImplemented === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bStrictlyOrderedServiceClassImplemented))), true);
  // 0x38: u8
  if (data?.ucSupportedQoSProtocolFlags !== undefined) view.setUint8(56, Number(data.ucSupportedQoSProtocolFlags));
  // 0x39: pad7
  // 0x40: pointer
  if (data?.bSafeModeImplemented !== undefined) view.setBigUint64(64, data.bSafeModeImplemented === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bSafeModeImplemented))), true);
  // 0x48: u32
  if (data?.uNumSupportedCountryOrRegionStrings !== undefined) view.setUint32(72, Number(data.uNumSupportedCountryOrRegionStrings), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pSupportedCountryOrRegionStrings !== undefined) view.setBigUint64(80, data.pSupportedCountryOrRegionStrings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSupportedCountryOrRegionStrings))), true);
  // 0x58: u32
  if (data?.uInfraNumSupportedUcastAlgoPairs !== undefined) view.setUint32(88, Number(data.uInfraNumSupportedUcastAlgoPairs), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.pInfraSupportedUcastAlgoPairs !== undefined) view.setBigUint64(96, data.pInfraSupportedUcastAlgoPairs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInfraSupportedUcastAlgoPairs))), true);
  // 0x68: u32
  if (data?.uInfraNumSupportedMcastAlgoPairs !== undefined) view.setUint32(104, Number(data.uInfraNumSupportedMcastAlgoPairs), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.pInfraSupportedMcastAlgoPairs !== undefined) view.setBigUint64(112, data.pInfraSupportedMcastAlgoPairs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInfraSupportedMcastAlgoPairs))), true);
  // 0x78: u32
  if (data?.uAdhocNumSupportedUcastAlgoPairs !== undefined) view.setUint32(120, Number(data.uAdhocNumSupportedUcastAlgoPairs), true);
  // 0x7c: pad4
  // 0x80: pointer
  if (data?.pAdhocSupportedUcastAlgoPairs !== undefined) view.setBigUint64(128, data.pAdhocSupportedUcastAlgoPairs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pAdhocSupportedUcastAlgoPairs))), true);
  // 0x88: u32
  if (data?.uAdhocNumSupportedMcastAlgoPairs !== undefined) view.setUint32(136, Number(data.uAdhocNumSupportedMcastAlgoPairs), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.pAdhocSupportedMcastAlgoPairs !== undefined) view.setBigUint64(144, data.pAdhocSupportedMcastAlgoPairs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pAdhocSupportedMcastAlgoPairs))), true);
  // 0x98: pointer
  if (data?.bAutoPowerSaveMode !== undefined) view.setBigUint64(152, data.bAutoPowerSaveMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bAutoPowerSaveMode))), true);
  // 0xa0: u32
  if (data?.uMaxNetworkOffloadListSize !== undefined) view.setUint32(160, Number(data.uMaxNetworkOffloadListSize), true);
  // 0xa4: pad4
  // 0xa8: pointer
  if (data?.bMFPCapable !== undefined) view.setBigUint64(168, data.bMFPCapable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bMFPCapable))), true);
  // 0xb0: u32
  if (data?.uInfraNumSupportedMcastMgmtAlgoPairs !== undefined) view.setUint32(176, Number(data.uInfraNumSupportedMcastMgmtAlgoPairs), true);
  // 0xb4: pad4
  // 0xb8: pointer
  if (data?.pInfraSupportedMcastMgmtAlgoPairs !== undefined) view.setBigUint64(184, data.pInfraSupportedMcastMgmtAlgoPairs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInfraSupportedMcastMgmtAlgoPairs))), true);
  // 0xc0: pointer
  if (data?.bNeighborReportSupported !== undefined) view.setBigUint64(192, data.bNeighborReportSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bNeighborReportSupported))), true);
  // 0xc8: pointer
  if (data?.bAPChannelReportSupported !== undefined) view.setBigUint64(200, data.bAPChannelReportSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bAPChannelReportSupported))), true);
  // 0xd0: pointer
  if (data?.bActionFramesSupported !== undefined) view.setBigUint64(208, data.bActionFramesSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bActionFramesSupported))), true);
  // 0xd8: pointer
  if (data?.bANQPQueryOffloadSupported !== undefined) view.setBigUint64(216, data.bANQPQueryOffloadSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bANQPQueryOffloadSupported))), true);
  // 0xe0: pointer
  if (data?.bHESSIDConnectionSupported !== undefined) view.setBigUint64(224, data.bHESSIDConnectionSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bHESSIDConnectionSupported))), true);
  return buf;
}

export class DOT11_EXTSTA_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uScanSSIDListSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uDesiredBSSIDListSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uDesiredSSIDListSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uExcludedMacAddressListSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uPrivacyExemptionListSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get uKeyMappingTableSize(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get uDefaultKeyTableSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get uWEPKeyValueMaxLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get uPMKIDCacheSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get uMaxNumPerSTADefaultKeyTables(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get bStrictlyOrderedServiceClassImplemented(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u8
  get ucSupportedQoSProtocolFlags(): number {
    return this.view.getUint8(56);
  }

  // 0x39: pad7

  // 0x40: pointer
  get bSafeModeImplemented(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get uNumSupportedCountryOrRegionStrings(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get pSupportedCountryOrRegionStrings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get uInfraNumSupportedUcastAlgoPairs(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get pInfraSupportedUcastAlgoPairs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get uInfraNumSupportedMcastAlgoPairs(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get pInfraSupportedMcastAlgoPairs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u32
  get uAdhocNumSupportedUcastAlgoPairs(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: pad4

  // 0x80: pointer
  get pAdhocSupportedUcastAlgoPairs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: u32
  get uAdhocNumSupportedMcastAlgoPairs(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get pAdhocSupportedMcastAlgoPairs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get bAutoPowerSaveMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: u32
  get uMaxNetworkOffloadListSize(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: pad4

  // 0xa8: pointer
  get bMFPCapable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: u32
  get uInfraNumSupportedMcastMgmtAlgoPairs(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: pad4

  // 0xb8: pointer
  get pInfraSupportedMcastMgmtAlgoPairs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: pointer
  get bNeighborReportSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: pointer
  get bAPChannelReportSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(200, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd0: pointer
  get bActionFramesSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: pointer
  get bANQPQueryOffloadSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: pointer
  get bHESSIDConnectionSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(224, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uScanSSIDListSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uDesiredBSSIDListSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uDesiredSSIDListSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uExcludedMacAddressListSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uPrivacyExemptionListSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set uKeyMappingTableSize(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set uDefaultKeyTableSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set uWEPKeyValueMaxLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set uPMKIDCacheSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set uMaxNumPerSTADefaultKeyTables(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set bStrictlyOrderedServiceClassImplemented(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u8
  set ucSupportedQoSProtocolFlags(value: number) {
    this.view.setUint8(56, value);
  }

  // 0x39: pad7

  // 0x40: pointer
  set bSafeModeImplemented(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set uNumSupportedCountryOrRegionStrings(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set pSupportedCountryOrRegionStrings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set uInfraNumSupportedUcastAlgoPairs(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set pInfraSupportedUcastAlgoPairs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set uInfraNumSupportedMcastAlgoPairs(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set pInfraSupportedMcastAlgoPairs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u32
  set uAdhocNumSupportedUcastAlgoPairs(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: pad4

  // 0x80: pointer
  set pAdhocSupportedUcastAlgoPairs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: u32
  set uAdhocNumSupportedMcastAlgoPairs(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set pAdhocSupportedMcastAlgoPairs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set bAutoPowerSaveMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: u32
  set uMaxNetworkOffloadListSize(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: pad4

  // 0xa8: pointer
  set bMFPCapable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: u32
  set uInfraNumSupportedMcastMgmtAlgoPairs(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: pad4

  // 0xb8: pointer
  set pInfraSupportedMcastMgmtAlgoPairs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: pointer
  set bNeighborReportSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: pointer
  set bAPChannelReportSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(200, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd0: pointer
  set bActionFramesSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: pointer
  set bANQPQueryOffloadSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: pointer
  set bHESSIDConnectionSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RECV_EXTENSION_INFO (size: 128)
 */
export interface DOT11_RECV_EXTENSION_INFO {
  /** u32 */
  uVersion: number;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_TYPE */
  dot11PhyType: DOT11_PHY_TYPE;
  /** u32 */
  uChCenterFrequency: number;
  /** i32 */
  lRSSI: number;
  /** i32 */
  lRSSIMin: number;
  /** i32 */
  lRSSIMax: number;
  /** u32 */
  uRSSI: number;
  /** u8 */
  ucPriority: number;
  /** u8 */
  ucDataRate: number;
  /** array */
  ucPeerMacAddress: Deno.PointerValue;
  /** u32 */
  dwExtendedStatus: number;
  /** Windows.Win32.Foundation.HANDLE */
  hWEPOffloadContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hAuthOffloadContext: Uint8Array | Deno.PointerValue;
  /** u16 */
  usWEPAppliedMask: number;
  /** u16 */
  usWPAMSDUPriority: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_IV48_COUNTER */
  dot11LowestIV48Counter: Uint8Array | Deno.PointerValue;
  /** u16 */
  usDot11LeftRWBitMap: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_IV48_COUNTER */
  dot11HighestIV48Counter: Uint8Array | Deno.PointerValue;
  /** u16 */
  usDot11RightRWBitMap: number;
  /** u16 */
  usNumberOfMPDUsReceived: number;
  /** u16 */
  usNumberOfFragments: number;
  /** array */
  pNdisPackets: Deno.PointerValue;
}

export const sizeofDOT11_RECV_EXTENSION_INFO = 128;

export function allocDOT11_RECV_EXTENSION_INFO(data?: Partial<DOT11_RECV_EXTENSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RECV_EXTENSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uVersion !== undefined) view.setUint32(0, Number(data.uVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(8, data.pvReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvReserved))), true);
  // 0x10: i32
  if (data?.dot11PhyType !== undefined) view.setInt32(16, Number(data.dot11PhyType), true);
  // 0x14: u32
  if (data?.uChCenterFrequency !== undefined) view.setUint32(20, Number(data.uChCenterFrequency), true);
  // 0x18: i32
  if (data?.lRSSI !== undefined) view.setInt32(24, Number(data.lRSSI), true);
  // 0x1c: i32
  if (data?.lRSSIMin !== undefined) view.setInt32(28, Number(data.lRSSIMin), true);
  // 0x20: i32
  if (data?.lRSSIMax !== undefined) view.setInt32(32, Number(data.lRSSIMax), true);
  // 0x24: u32
  if (data?.uRSSI !== undefined) view.setUint32(36, Number(data.uRSSI), true);
  // 0x28: u8
  if (data?.ucPriority !== undefined) view.setUint8(40, Number(data.ucPriority));
  // 0x29: u8
  if (data?.ucDataRate !== undefined) view.setUint8(41, Number(data.ucDataRate));
  // 0x2a: pad6
  // 0x30: pointer
  if (data?.ucPeerMacAddress !== undefined) view.setBigUint64(48, data.ucPeerMacAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucPeerMacAddress))), true);
  // 0x38: u32
  if (data?.dwExtendedStatus !== undefined) view.setUint32(56, Number(data.dwExtendedStatus), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.hWEPOffloadContext !== undefined) view.setBigUint64(64, data.hWEPOffloadContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hWEPOffloadContext))), true);
  // 0x48: pointer
  if (data?.hAuthOffloadContext !== undefined) view.setBigUint64(72, data.hAuthOffloadContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hAuthOffloadContext))), true);
  // 0x50: u16
  if (data?.usWEPAppliedMask !== undefined) view.setUint16(80, Number(data.usWEPAppliedMask), true);
  // 0x52: u16
  if (data?.usWPAMSDUPriority !== undefined) view.setUint16(82, Number(data.usWPAMSDUPriority), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.dot11LowestIV48Counter !== undefined) view.setBigUint64(88, data.dot11LowestIV48Counter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11LowestIV48Counter))), true);
  // 0x60: u16
  if (data?.usDot11LeftRWBitMap !== undefined) view.setUint16(96, Number(data.usDot11LeftRWBitMap), true);
  // 0x62: pad6
  // 0x68: pointer
  if (data?.dot11HighestIV48Counter !== undefined) view.setBigUint64(104, data.dot11HighestIV48Counter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11HighestIV48Counter))), true);
  // 0x70: u16
  if (data?.usDot11RightRWBitMap !== undefined) view.setUint16(112, Number(data.usDot11RightRWBitMap), true);
  // 0x72: u16
  if (data?.usNumberOfMPDUsReceived !== undefined) view.setUint16(114, Number(data.usNumberOfMPDUsReceived), true);
  // 0x74: u16
  if (data?.usNumberOfFragments !== undefined) view.setUint16(116, Number(data.usNumberOfFragments), true);
  // 0x76: pad2
  // 0x78: pointer
  if (data?.pNdisPackets !== undefined) view.setBigUint64(120, data.pNdisPackets === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pNdisPackets))), true);
  return buf;
}

export class DOT11_RECV_EXTENSION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pvReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get dot11PhyType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get uChCenterFrequency(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get lRSSI(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get lRSSIMin(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get lRSSIMax(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get uRSSI(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u8
  get ucPriority(): number {
    return this.view.getUint8(40);
  }

  // 0x29: u8
  get ucDataRate(): number {
    return this.view.getUint8(41);
  }

  // 0x2a: pad6

  // 0x30: pointer
  get ucPeerMacAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwExtendedStatus(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get hWEPOffloadContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get hAuthOffloadContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u16
  get usWEPAppliedMask(): number {
    return this.view.getUint16(80, true);
  }

  // 0x52: u16
  get usWPAMSDUPriority(): number {
    return this.view.getUint16(82, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get dot11LowestIV48Counter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u16
  get usDot11LeftRWBitMap(): number {
    return this.view.getUint16(96, true);
  }

  // 0x62: pad6

  // 0x68: pointer
  get dot11HighestIV48Counter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u16
  get usDot11RightRWBitMap(): number {
    return this.view.getUint16(112, true);
  }

  // 0x72: u16
  get usNumberOfMPDUsReceived(): number {
    return this.view.getUint16(114, true);
  }

  // 0x74: u16
  get usNumberOfFragments(): number {
    return this.view.getUint16(116, true);
  }

  // 0x76: pad2

  // 0x78: pointer
  get pNdisPackets(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pvReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set dot11PhyType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set uChCenterFrequency(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set lRSSI(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set lRSSIMin(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set lRSSIMax(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set uRSSI(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u8
  set ucPriority(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: u8
  set ucDataRate(value: number) {
    this.view.setUint8(41, value);
  }

  // 0x2a: pad6

  // 0x30: pointer
  set ucPeerMacAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwExtendedStatus(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set hWEPOffloadContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set hAuthOffloadContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u16
  set usWEPAppliedMask(value: number) {
    this.view.setUint16(80, value, true);
  }

  // 0x52: u16
  set usWPAMSDUPriority(value: number) {
    this.view.setUint16(82, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set dot11LowestIV48Counter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u16
  set usDot11LeftRWBitMap(value: number) {
    this.view.setUint16(96, value, true);
  }

  // 0x62: pad6

  // 0x68: pointer
  set dot11HighestIV48Counter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u16
  set usDot11RightRWBitMap(value: number) {
    this.view.setUint16(112, value, true);
  }

  // 0x72: u16
  set usNumberOfMPDUsReceived(value: number) {
    this.view.setUint16(114, value, true);
  }

  // 0x74: u16
  set usNumberOfFragments(value: number) {
    this.view.setUint16(116, value, true);
  }

  // 0x76: pad2

  // 0x78: pointer
  set pNdisPackets(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RECV_EXTENSION_INFO_V2 (size: 120)
 */
export interface DOT11_RECV_EXTENSION_INFO_V2 {
  /** u32 */
  uVersion: number;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_TYPE */
  dot11PhyType: DOT11_PHY_TYPE;
  /** u32 */
  uChCenterFrequency: number;
  /** i32 */
  lRSSI: number;
  /** u32 */
  uRSSI: number;
  /** u8 */
  ucPriority: number;
  /** u8 */
  ucDataRate: number;
  /** array */
  ucPeerMacAddress: Deno.PointerValue;
  /** u32 */
  dwExtendedStatus: number;
  /** Windows.Win32.Foundation.HANDLE */
  hWEPOffloadContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hAuthOffloadContext: Uint8Array | Deno.PointerValue;
  /** u16 */
  usWEPAppliedMask: number;
  /** u16 */
  usWPAMSDUPriority: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_IV48_COUNTER */
  dot11LowestIV48Counter: Uint8Array | Deno.PointerValue;
  /** u16 */
  usDot11LeftRWBitMap: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_IV48_COUNTER */
  dot11HighestIV48Counter: Uint8Array | Deno.PointerValue;
  /** u16 */
  usDot11RightRWBitMap: number;
  /** u16 */
  usNumberOfMPDUsReceived: number;
  /** u16 */
  usNumberOfFragments: number;
  /** array */
  pNdisPackets: Deno.PointerValue;
}

export const sizeofDOT11_RECV_EXTENSION_INFO_V2 = 120;

export function allocDOT11_RECV_EXTENSION_INFO_V2(data?: Partial<DOT11_RECV_EXTENSION_INFO_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RECV_EXTENSION_INFO_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uVersion !== undefined) view.setUint32(0, Number(data.uVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(8, data.pvReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvReserved))), true);
  // 0x10: i32
  if (data?.dot11PhyType !== undefined) view.setInt32(16, Number(data.dot11PhyType), true);
  // 0x14: u32
  if (data?.uChCenterFrequency !== undefined) view.setUint32(20, Number(data.uChCenterFrequency), true);
  // 0x18: i32
  if (data?.lRSSI !== undefined) view.setInt32(24, Number(data.lRSSI), true);
  // 0x1c: u32
  if (data?.uRSSI !== undefined) view.setUint32(28, Number(data.uRSSI), true);
  // 0x20: u8
  if (data?.ucPriority !== undefined) view.setUint8(32, Number(data.ucPriority));
  // 0x21: u8
  if (data?.ucDataRate !== undefined) view.setUint8(33, Number(data.ucDataRate));
  // 0x22: pad6
  // 0x28: pointer
  if (data?.ucPeerMacAddress !== undefined) view.setBigUint64(40, data.ucPeerMacAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucPeerMacAddress))), true);
  // 0x30: u32
  if (data?.dwExtendedStatus !== undefined) view.setUint32(48, Number(data.dwExtendedStatus), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.hWEPOffloadContext !== undefined) view.setBigUint64(56, data.hWEPOffloadContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hWEPOffloadContext))), true);
  // 0x40: pointer
  if (data?.hAuthOffloadContext !== undefined) view.setBigUint64(64, data.hAuthOffloadContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hAuthOffloadContext))), true);
  // 0x48: u16
  if (data?.usWEPAppliedMask !== undefined) view.setUint16(72, Number(data.usWEPAppliedMask), true);
  // 0x4a: u16
  if (data?.usWPAMSDUPriority !== undefined) view.setUint16(74, Number(data.usWPAMSDUPriority), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.dot11LowestIV48Counter !== undefined) view.setBigUint64(80, data.dot11LowestIV48Counter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11LowestIV48Counter))), true);
  // 0x58: u16
  if (data?.usDot11LeftRWBitMap !== undefined) view.setUint16(88, Number(data.usDot11LeftRWBitMap), true);
  // 0x5a: pad6
  // 0x60: pointer
  if (data?.dot11HighestIV48Counter !== undefined) view.setBigUint64(96, data.dot11HighestIV48Counter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11HighestIV48Counter))), true);
  // 0x68: u16
  if (data?.usDot11RightRWBitMap !== undefined) view.setUint16(104, Number(data.usDot11RightRWBitMap), true);
  // 0x6a: u16
  if (data?.usNumberOfMPDUsReceived !== undefined) view.setUint16(106, Number(data.usNumberOfMPDUsReceived), true);
  // 0x6c: u16
  if (data?.usNumberOfFragments !== undefined) view.setUint16(108, Number(data.usNumberOfFragments), true);
  // 0x6e: pad2
  // 0x70: pointer
  if (data?.pNdisPackets !== undefined) view.setBigUint64(112, data.pNdisPackets === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pNdisPackets))), true);
  return buf;
}

export class DOT11_RECV_EXTENSION_INFO_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pvReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get dot11PhyType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get uChCenterFrequency(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get lRSSI(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get uRSSI(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u8
  get ucPriority(): number {
    return this.view.getUint8(32);
  }

  // 0x21: u8
  get ucDataRate(): number {
    return this.view.getUint8(33);
  }

  // 0x22: pad6

  // 0x28: pointer
  get ucPeerMacAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwExtendedStatus(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get hWEPOffloadContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get hAuthOffloadContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u16
  get usWEPAppliedMask(): number {
    return this.view.getUint16(72, true);
  }

  // 0x4a: u16
  get usWPAMSDUPriority(): number {
    return this.view.getUint16(74, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get dot11LowestIV48Counter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u16
  get usDot11LeftRWBitMap(): number {
    return this.view.getUint16(88, true);
  }

  // 0x5a: pad6

  // 0x60: pointer
  get dot11HighestIV48Counter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u16
  get usDot11RightRWBitMap(): number {
    return this.view.getUint16(104, true);
  }

  // 0x6a: u16
  get usNumberOfMPDUsReceived(): number {
    return this.view.getUint16(106, true);
  }

  // 0x6c: u16
  get usNumberOfFragments(): number {
    return this.view.getUint16(108, true);
  }

  // 0x6e: pad2

  // 0x70: pointer
  get pNdisPackets(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pvReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set dot11PhyType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set uChCenterFrequency(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set lRSSI(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set uRSSI(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u8
  set ucPriority(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: u8
  set ucDataRate(value: number) {
    this.view.setUint8(33, value);
  }

  // 0x22: pad6

  // 0x28: pointer
  set ucPeerMacAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwExtendedStatus(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set hWEPOffloadContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set hAuthOffloadContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u16
  set usWEPAppliedMask(value: number) {
    this.view.setUint16(72, value, true);
  }

  // 0x4a: u16
  set usWPAMSDUPriority(value: number) {
    this.view.setUint16(74, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set dot11LowestIV48Counter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u16
  set usDot11LeftRWBitMap(value: number) {
    this.view.setUint16(88, value, true);
  }

  // 0x5a: pad6

  // 0x60: pointer
  set dot11HighestIV48Counter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u16
  set usDot11RightRWBitMap(value: number) {
    this.view.setUint16(104, value, true);
  }

  // 0x6a: u16
  set usNumberOfMPDUsReceived(value: number) {
    this.view.setUint16(106, value, true);
  }

  // 0x6c: u16
  set usNumberOfFragments(value: number) {
    this.view.setUint16(108, value, true);
  }

  // 0x6e: pad2

  // 0x70: pointer
  set pNdisPackets(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_STATUS_INDICATION (size: 8)
 */
export interface DOT11_STATUS_INDICATION {
  /** u32 */
  uStatusType: number;
  /** i32 */
  ndisStatus: number;
}

export const sizeofDOT11_STATUS_INDICATION = 8;

export function allocDOT11_STATUS_INDICATION(data?: Partial<DOT11_STATUS_INDICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_STATUS_INDICATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uStatusType !== undefined) view.setUint32(0, Number(data.uStatusType), true);
  // 0x04: i32
  if (data?.ndisStatus !== undefined) view.setInt32(4, Number(data.ndisStatus), true);
  return buf;
}

export class DOT11_STATUS_INDICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uStatusType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ndisStatus(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set uStatusType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ndisStatus(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MPDU_MAX_LENGTH_INDICATION (size: 16)
 */
export interface DOT11_MPDU_MAX_LENGTH_INDICATION {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uPhyId: number;
  /** u32 */
  uMPDUMaxLength: number;
}

export const sizeofDOT11_MPDU_MAX_LENGTH_INDICATION = 16;

export function allocDOT11_MPDU_MAX_LENGTH_INDICATION(data?: Partial<DOT11_MPDU_MAX_LENGTH_INDICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MPDU_MAX_LENGTH_INDICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uPhyId !== undefined) view.setUint32(8, Number(data.uPhyId), true);
  // 0x0c: u32
  if (data?.uMPDUMaxLength !== undefined) view.setUint32(12, Number(data.uMPDUMaxLength), true);
  return buf;
}

export class DOT11_MPDU_MAX_LENGTH_INDICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uPhyId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uMPDUMaxLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uPhyId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uMPDUMaxLength(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ASSOCIATION_START_PARAMETERS (size: 32)
 */
export interface DOT11_ASSOCIATION_START_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  MacAddr: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  SSID: Uint8Array | Deno.PointerValue;
  /** u32 */
  uIHVDataOffset: number;
  /** u32 */
  uIHVDataSize: number;
}

export const sizeofDOT11_ASSOCIATION_START_PARAMETERS = 32;

export function allocDOT11_ASSOCIATION_START_PARAMETERS(data?: Partial<DOT11_ASSOCIATION_START_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ASSOCIATION_START_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.MacAddr !== undefined) view.setBigUint64(8, data.MacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MacAddr))), true);
  // 0x10: pointer
  if (data?.SSID !== undefined) view.setBigUint64(16, data.SSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SSID))), true);
  // 0x18: u32
  if (data?.uIHVDataOffset !== undefined) view.setUint32(24, Number(data.uIHVDataOffset), true);
  // 0x1c: u32
  if (data?.uIHVDataSize !== undefined) view.setUint32(28, Number(data.uIHVDataSize), true);
  return buf;
}

export class DOT11_ASSOCIATION_START_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get MacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get SSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uIHVDataOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get uIHVDataSize(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set MacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set SSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set uIHVDataOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set uIHVDataSize(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ENCAP_ENTRY (size: 8)
 */
export interface DOT11_ENCAP_ENTRY {
  /** u16 */
  usEtherType: number;
  /** u16 */
  usEncapType: number;
}

export const sizeofDOT11_ENCAP_ENTRY = 8;

export function allocDOT11_ENCAP_ENTRY(data?: Partial<DOT11_ENCAP_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ENCAP_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usEtherType !== undefined) view.setUint16(0, Number(data.usEtherType), true);
  // 0x02: u16
  if (data?.usEncapType !== undefined) view.setUint16(2, Number(data.usEncapType), true);
  // 0x04: pad4
  return buf;
}

export class DOT11_ENCAP_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get usEtherType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get usEncapType(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set usEtherType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set usEncapType(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ASSOCIATION_COMPLETION_PARAMETERS (size: 136)
 */
export interface DOT11_ASSOCIATION_COMPLETION_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  MacAddr: Deno.PointerValue;
  /** u32 */
  uStatus: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bReAssocReq: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bReAssocResp: Uint8Array | Deno.PointerValue;
  /** u32 */
  uAssocReqOffset: number;
  /** u32 */
  uAssocReqSize: number;
  /** u32 */
  uAssocRespOffset: number;
  /** u32 */
  uAssocRespSize: number;
  /** u32 */
  uBeaconOffset: number;
  /** u32 */
  uBeaconSize: number;
  /** u32 */
  uIHVDataOffset: number;
  /** u32 */
  uIHVDataSize: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM */
  AuthAlgo: DOT11_AUTH_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  UnicastCipher: DOT11_CIPHER_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  MulticastCipher: DOT11_CIPHER_ALGORITHM;
  /** u32 */
  uActivePhyListOffset: number;
  /** u32 */
  uActivePhyListSize: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bFourAddressSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bPortAuthorized: Uint8Array | Deno.PointerValue;
  /** u8 */
  ucActiveQoSProtocol: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_DS_INFO */
  DSInfo: DOT11_DS_INFO;
  /** u32 */
  uEncapTableOffset: number;
  /** u32 */
  uEncapTableSize: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  MulticastMgmtCipher: DOT11_CIPHER_ALGORITHM;
  /** u32 */
  uAssocComebackTime: number;
}

export const sizeofDOT11_ASSOCIATION_COMPLETION_PARAMETERS = 136;

export function allocDOT11_ASSOCIATION_COMPLETION_PARAMETERS(data?: Partial<DOT11_ASSOCIATION_COMPLETION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ASSOCIATION_COMPLETION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.MacAddr !== undefined) view.setBigUint64(8, data.MacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MacAddr))), true);
  // 0x10: u32
  if (data?.uStatus !== undefined) view.setUint32(16, Number(data.uStatus), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.bReAssocReq !== undefined) view.setBigUint64(24, data.bReAssocReq === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bReAssocReq))), true);
  // 0x20: pointer
  if (data?.bReAssocResp !== undefined) view.setBigUint64(32, data.bReAssocResp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bReAssocResp))), true);
  // 0x28: u32
  if (data?.uAssocReqOffset !== undefined) view.setUint32(40, Number(data.uAssocReqOffset), true);
  // 0x2c: u32
  if (data?.uAssocReqSize !== undefined) view.setUint32(44, Number(data.uAssocReqSize), true);
  // 0x30: u32
  if (data?.uAssocRespOffset !== undefined) view.setUint32(48, Number(data.uAssocRespOffset), true);
  // 0x34: u32
  if (data?.uAssocRespSize !== undefined) view.setUint32(52, Number(data.uAssocRespSize), true);
  // 0x38: u32
  if (data?.uBeaconOffset !== undefined) view.setUint32(56, Number(data.uBeaconOffset), true);
  // 0x3c: u32
  if (data?.uBeaconSize !== undefined) view.setUint32(60, Number(data.uBeaconSize), true);
  // 0x40: u32
  if (data?.uIHVDataOffset !== undefined) view.setUint32(64, Number(data.uIHVDataOffset), true);
  // 0x44: u32
  if (data?.uIHVDataSize !== undefined) view.setUint32(68, Number(data.uIHVDataSize), true);
  // 0x48: i32
  if (data?.AuthAlgo !== undefined) view.setInt32(72, Number(data.AuthAlgo), true);
  // 0x4c: i32
  if (data?.UnicastCipher !== undefined) view.setInt32(76, Number(data.UnicastCipher), true);
  // 0x50: i32
  if (data?.MulticastCipher !== undefined) view.setInt32(80, Number(data.MulticastCipher), true);
  // 0x54: u32
  if (data?.uActivePhyListOffset !== undefined) view.setUint32(84, Number(data.uActivePhyListOffset), true);
  // 0x58: u32
  if (data?.uActivePhyListSize !== undefined) view.setUint32(88, Number(data.uActivePhyListSize), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.bFourAddressSupported !== undefined) view.setBigUint64(96, data.bFourAddressSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bFourAddressSupported))), true);
  // 0x68: pointer
  if (data?.bPortAuthorized !== undefined) view.setBigUint64(104, data.bPortAuthorized === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bPortAuthorized))), true);
  // 0x70: u8
  if (data?.ucActiveQoSProtocol !== undefined) view.setUint8(112, Number(data.ucActiveQoSProtocol));
  // 0x71: i32
  if (data?.DSInfo !== undefined) view.setInt32(113, Number(data.DSInfo), true);
  // 0x75: u32
  if (data?.uEncapTableOffset !== undefined) view.setUint32(117, Number(data.uEncapTableOffset), true);
  // 0x79: u32
  if (data?.uEncapTableSize !== undefined) view.setUint32(121, Number(data.uEncapTableSize), true);
  // 0x7d: i32
  if (data?.MulticastMgmtCipher !== undefined) view.setInt32(125, Number(data.MulticastMgmtCipher), true);
  // 0x81: u32
  if (data?.uAssocComebackTime !== undefined) view.setUint32(129, Number(data.uAssocComebackTime), true);
  // 0x85: pad3
  return buf;
}

export class DOT11_ASSOCIATION_COMPLETION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get MacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uStatus(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get bReAssocReq(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get bReAssocResp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get uAssocReqOffset(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get uAssocReqSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get uAssocRespOffset(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get uAssocRespSize(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get uBeaconOffset(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get uBeaconSize(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get uIHVDataOffset(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get uIHVDataSize(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: i32
  get AuthAlgo(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: i32
  get UnicastCipher(): number {
    return this.view.getInt32(76, true);
  }

  // 0x50: i32
  get MulticastCipher(): number {
    return this.view.getInt32(80, true);
  }

  // 0x54: u32
  get uActivePhyListOffset(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get uActivePhyListSize(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get bFourAddressSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get bPortAuthorized(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u8
  get ucActiveQoSProtocol(): number {
    return this.view.getUint8(112);
  }

  // 0x71: i32
  get DSInfo(): number {
    return this.view.getInt32(113, true);
  }

  // 0x75: u32
  get uEncapTableOffset(): number {
    return this.view.getUint32(117, true);
  }

  // 0x79: u32
  get uEncapTableSize(): number {
    return this.view.getUint32(121, true);
  }

  // 0x7d: i32
  get MulticastMgmtCipher(): number {
    return this.view.getInt32(125, true);
  }

  // 0x81: u32
  get uAssocComebackTime(): number {
    return this.view.getUint32(129, true);
  }

  // 0x85: pad3

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set MacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uStatus(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set bReAssocReq(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set bReAssocResp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set uAssocReqOffset(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set uAssocReqSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set uAssocRespOffset(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set uAssocRespSize(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set uBeaconOffset(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set uBeaconSize(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set uIHVDataOffset(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set uIHVDataSize(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: i32
  set AuthAlgo(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: i32
  set UnicastCipher(value: number) {
    this.view.setInt32(76, value, true);
  }

  // 0x50: i32
  set MulticastCipher(value: number) {
    this.view.setInt32(80, value, true);
  }

  // 0x54: u32
  set uActivePhyListOffset(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set uActivePhyListSize(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set bFourAddressSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set bPortAuthorized(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u8
  set ucActiveQoSProtocol(value: number) {
    this.view.setUint8(112, value);
  }

  // 0x71: i32
  set DSInfo(value: number) {
    this.view.setInt32(113, value, true);
  }

  // 0x75: u32
  set uEncapTableOffset(value: number) {
    this.view.setUint32(117, value, true);
  }

  // 0x79: u32
  set uEncapTableSize(value: number) {
    this.view.setUint32(121, value, true);
  }

  // 0x7d: i32
  set MulticastMgmtCipher(value: number) {
    this.view.setInt32(125, value, true);
  }

  // 0x81: u32
  set uAssocComebackTime(value: number) {
    this.view.setUint32(129, value, true);
  }

  // 0x85: pad3
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_CONNECTION_START_PARAMETERS (size: 32)
 */
export interface DOT11_CONNECTION_START_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  BSSType: DOT11_BSS_TYPE;
  /** array */
  AdhocBSSID: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  AdhocSSID: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_CONNECTION_START_PARAMETERS = 32;

export function allocDOT11_CONNECTION_START_PARAMETERS(data?: Partial<DOT11_CONNECTION_START_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_CONNECTION_START_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: i32
  if (data?.BSSType !== undefined) view.setInt32(8, Number(data.BSSType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.AdhocBSSID !== undefined) view.setBigUint64(16, data.AdhocBSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdhocBSSID))), true);
  // 0x18: pointer
  if (data?.AdhocSSID !== undefined) view.setBigUint64(24, data.AdhocSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdhocSSID))), true);
  return buf;
}

export class DOT11_CONNECTION_START_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get BSSType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get AdhocBSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get AdhocSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set BSSType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set AdhocBSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set AdhocSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_CONNECTION_COMPLETION_PARAMETERS (size: 16)
 */
export interface DOT11_CONNECTION_COMPLETION_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uStatus: number;
}

export const sizeofDOT11_CONNECTION_COMPLETION_PARAMETERS = 16;

export function allocDOT11_CONNECTION_COMPLETION_PARAMETERS(data?: Partial<DOT11_CONNECTION_COMPLETION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_CONNECTION_COMPLETION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uStatus !== undefined) view.setUint32(8, Number(data.uStatus), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11_CONNECTION_COMPLETION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uStatus(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uStatus(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ROAMING_START_PARAMETERS (size: 32)
 */
export interface DOT11_ROAMING_START_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  AdhocBSSID: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  AdhocSSID: Uint8Array | Deno.PointerValue;
  /** u32 */
  uRoamingReason: number;
}

export const sizeofDOT11_ROAMING_START_PARAMETERS = 32;

export function allocDOT11_ROAMING_START_PARAMETERS(data?: Partial<DOT11_ROAMING_START_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ROAMING_START_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.AdhocBSSID !== undefined) view.setBigUint64(8, data.AdhocBSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdhocBSSID))), true);
  // 0x10: pointer
  if (data?.AdhocSSID !== undefined) view.setBigUint64(16, data.AdhocSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdhocSSID))), true);
  // 0x18: u32
  if (data?.uRoamingReason !== undefined) view.setUint32(24, Number(data.uRoamingReason), true);
  // 0x1c: pad4
  return buf;
}

export class DOT11_ROAMING_START_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get AdhocBSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get AdhocSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uRoamingReason(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set AdhocBSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set AdhocSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set uRoamingReason(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ROAMING_COMPLETION_PARAMETERS (size: 16)
 */
export interface DOT11_ROAMING_COMPLETION_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uStatus: number;
}

export const sizeofDOT11_ROAMING_COMPLETION_PARAMETERS = 16;

export function allocDOT11_ROAMING_COMPLETION_PARAMETERS(data?: Partial<DOT11_ROAMING_COMPLETION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ROAMING_COMPLETION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uStatus !== undefined) view.setUint32(8, Number(data.uStatus), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11_ROAMING_COMPLETION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uStatus(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uStatus(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_DISASSOCIATION_PARAMETERS (size: 32)
 */
export interface DOT11_DISASSOCIATION_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  MacAddr: Deno.PointerValue;
  /** u32 */
  uReason: number;
  /** u32 */
  uIHVDataOffset: number;
  /** u32 */
  uIHVDataSize: number;
}

export const sizeofDOT11_DISASSOCIATION_PARAMETERS = 32;

export function allocDOT11_DISASSOCIATION_PARAMETERS(data?: Partial<DOT11_DISASSOCIATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_DISASSOCIATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.MacAddr !== undefined) view.setBigUint64(8, data.MacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MacAddr))), true);
  // 0x10: u32
  if (data?.uReason !== undefined) view.setUint32(16, Number(data.uReason), true);
  // 0x14: u32
  if (data?.uIHVDataOffset !== undefined) view.setUint32(20, Number(data.uIHVDataOffset), true);
  // 0x18: u32
  if (data?.uIHVDataSize !== undefined) view.setUint32(24, Number(data.uIHVDataSize), true);
  // 0x1c: pad4
  return buf;
}

export class DOT11_DISASSOCIATION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get MacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uReason(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uIHVDataOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uIHVDataSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set MacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uReason(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uIHVDataOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uIHVDataSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_TKIPMIC_FAILURE_PARAMETERS (size: 32)
 */
export interface DOT11_TKIPMIC_FAILURE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDefaultKeyFailure: Uint8Array | Deno.PointerValue;
  /** u32 */
  uKeyIndex: number;
  /** array */
  PeerMac: Deno.PointerValue;
}

export const sizeofDOT11_TKIPMIC_FAILURE_PARAMETERS = 32;

export function allocDOT11_TKIPMIC_FAILURE_PARAMETERS(data?: Partial<DOT11_TKIPMIC_FAILURE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_TKIPMIC_FAILURE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.bDefaultKeyFailure !== undefined) view.setBigUint64(8, data.bDefaultKeyFailure === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDefaultKeyFailure))), true);
  // 0x10: u32
  if (data?.uKeyIndex !== undefined) view.setUint32(16, Number(data.uKeyIndex), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PeerMac !== undefined) view.setBigUint64(24, data.PeerMac === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMac))), true);
  return buf;
}

export class DOT11_TKIPMIC_FAILURE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bDefaultKeyFailure(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uKeyIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get PeerMac(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bDefaultKeyFailure(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uKeyIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set PeerMac(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PMKID_CANDIDATE_LIST_PARAMETERS (size: 16)
 */
export interface DOT11_PMKID_CANDIDATE_LIST_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uCandidateListSize: number;
  /** u32 */
  uCandidateListOffset: number;
}

export const sizeofDOT11_PMKID_CANDIDATE_LIST_PARAMETERS = 16;

export function allocDOT11_PMKID_CANDIDATE_LIST_PARAMETERS(data?: Partial<DOT11_PMKID_CANDIDATE_LIST_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PMKID_CANDIDATE_LIST_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uCandidateListSize !== undefined) view.setUint32(8, Number(data.uCandidateListSize), true);
  // 0x0c: u32
  if (data?.uCandidateListOffset !== undefined) view.setUint32(12, Number(data.uCandidateListOffset), true);
  return buf;
}

export class DOT11_PMKID_CANDIDATE_LIST_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uCandidateListSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uCandidateListOffset(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uCandidateListSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uCandidateListOffset(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_BSSID_CANDIDATE (size: 16)
 */
export interface DOT11_BSSID_CANDIDATE {
  /** array */
  BSSID: Deno.PointerValue;
  /** u32 */
  uFlags: number;
}

export const sizeofDOT11_BSSID_CANDIDATE = 16;

export function allocDOT11_BSSID_CANDIDATE(data?: Partial<DOT11_BSSID_CANDIDATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_BSSID_CANDIDATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(0, data.BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BSSID))), true);
  // 0x08: u32
  if (data?.uFlags !== undefined) view.setUint32(8, Number(data.uFlags), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11_BSSID_CANDIDATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_STATE_PARAMETERS (size: 32)
 */
export interface DOT11_PHY_STATE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uPhyId: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bHardwarePhyState: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bSoftwarePhyState: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_PHY_STATE_PARAMETERS = 32;

export function allocDOT11_PHY_STATE_PARAMETERS(data?: Partial<DOT11_PHY_STATE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PHY_STATE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uPhyId !== undefined) view.setUint32(8, Number(data.uPhyId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.bHardwarePhyState !== undefined) view.setBigUint64(16, data.bHardwarePhyState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bHardwarePhyState))), true);
  // 0x18: pointer
  if (data?.bSoftwarePhyState !== undefined) view.setBigUint64(24, data.bSoftwarePhyState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bSoftwarePhyState))), true);
  return buf;
}

export class DOT11_PHY_STATE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uPhyId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get bHardwarePhyState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get bSoftwarePhyState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uPhyId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set bHardwarePhyState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set bSoftwarePhyState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_LINK_QUALITY_ENTRY (size: 16)
 */
export interface DOT11_LINK_QUALITY_ENTRY {
  /** array */
  PeerMacAddr: Deno.PointerValue;
  /** u8 */
  ucLinkQuality: number;
}

export const sizeofDOT11_LINK_QUALITY_ENTRY = 16;

export function allocDOT11_LINK_QUALITY_ENTRY(data?: Partial<DOT11_LINK_QUALITY_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_LINK_QUALITY_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PeerMacAddr !== undefined) view.setBigUint64(0, data.PeerMacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMacAddr))), true);
  // 0x08: u8
  if (data?.ucLinkQuality !== undefined) view.setUint8(8, Number(data.ucLinkQuality));
  // 0x09: pad7
  return buf;
}

export class DOT11_LINK_QUALITY_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PeerMacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get ucLinkQuality(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: pointer
  set PeerMacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set ucLinkQuality(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_LINK_QUALITY_PARAMETERS (size: 16)
 */
export interface DOT11_LINK_QUALITY_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uLinkQualityListSize: number;
  /** u32 */
  uLinkQualityListOffset: number;
}

export const sizeofDOT11_LINK_QUALITY_PARAMETERS = 16;

export function allocDOT11_LINK_QUALITY_PARAMETERS(data?: Partial<DOT11_LINK_QUALITY_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_LINK_QUALITY_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uLinkQualityListSize !== undefined) view.setUint32(8, Number(data.uLinkQualityListSize), true);
  // 0x0c: u32
  if (data?.uLinkQualityListOffset !== undefined) view.setUint32(12, Number(data.uLinkQualityListOffset), true);
  return buf;
}

export class DOT11_LINK_QUALITY_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uLinkQualityListSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uLinkQualityListOffset(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uLinkQualityListSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uLinkQualityListOffset(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_EXTSTA_SEND_CONTEXT (size: 40)
 */
export interface DOT11_EXTSTA_SEND_CONTEXT {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u16 */
  usExemptionActionType: number;
  /** u32 */
  uPhyId: number;
  /** u32 */
  uDelayedSleepValue: number;
  /** ptr */
  pvMediaSpecificInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  uSendFlags: number;
}

export const sizeofDOT11_EXTSTA_SEND_CONTEXT = 40;

export function allocDOT11_EXTSTA_SEND_CONTEXT(data?: Partial<DOT11_EXTSTA_SEND_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_EXTSTA_SEND_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u16
  if (data?.usExemptionActionType !== undefined) view.setUint16(8, Number(data.usExemptionActionType), true);
  // 0x0a: u32
  if (data?.uPhyId !== undefined) view.setUint32(10, Number(data.uPhyId), true);
  // 0x0e: u32
  if (data?.uDelayedSleepValue !== undefined) view.setUint32(14, Number(data.uDelayedSleepValue), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.pvMediaSpecificInfo !== undefined) view.setBigUint64(24, data.pvMediaSpecificInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvMediaSpecificInfo))), true);
  // 0x20: u32
  if (data?.uSendFlags !== undefined) view.setUint32(32, Number(data.uSendFlags), true);
  // 0x24: pad4
  return buf;
}

export class DOT11_EXTSTA_SEND_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get usExemptionActionType(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u32
  get uPhyId(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: u32
  get uDelayedSleepValue(): number {
    return this.view.getUint32(14, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get pvMediaSpecificInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get uSendFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set usExemptionActionType(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u32
  set uPhyId(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: u32
  set uDelayedSleepValue(value: number) {
    this.view.setUint32(14, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set pvMediaSpecificInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set uSendFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_EXTSTA_RECV_CONTEXT (size: 48)
 */
export interface DOT11_EXTSTA_RECV_CONTEXT {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uReceiveFlags: number;
  /** u32 */
  uPhyId: number;
  /** u32 */
  uChCenterFrequency: number;
  /** u16 */
  usNumberOfMPDUsReceived: number;
  /** i32 */
  lRSSI: number;
  /** u8 */
  ucDataRate: number;
  /** u32 */
  uSizeMediaSpecificInfo: number;
  /** ptr */
  pvMediaSpecificInfo: Deno.PointerValue | Uint8Array;
  /** u64 */
  ullTimestamp: Deno.PointerValue;
}

export const sizeofDOT11_EXTSTA_RECV_CONTEXT = 48;

export function allocDOT11_EXTSTA_RECV_CONTEXT(data?: Partial<DOT11_EXTSTA_RECV_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_EXTSTA_RECV_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uReceiveFlags !== undefined) view.setUint32(8, Number(data.uReceiveFlags), true);
  // 0x0c: u32
  if (data?.uPhyId !== undefined) view.setUint32(12, Number(data.uPhyId), true);
  // 0x10: u32
  if (data?.uChCenterFrequency !== undefined) view.setUint32(16, Number(data.uChCenterFrequency), true);
  // 0x14: u16
  if (data?.usNumberOfMPDUsReceived !== undefined) view.setUint16(20, Number(data.usNumberOfMPDUsReceived), true);
  // 0x16: i32
  if (data?.lRSSI !== undefined) view.setInt32(22, Number(data.lRSSI), true);
  // 0x1a: u8
  if (data?.ucDataRate !== undefined) view.setUint8(26, Number(data.ucDataRate));
  // 0x1b: u32
  if (data?.uSizeMediaSpecificInfo !== undefined) view.setUint32(27, Number(data.uSizeMediaSpecificInfo), true);
  // 0x1f: pad1
  // 0x20: pointer
  if (data?.pvMediaSpecificInfo !== undefined) view.setBigUint64(32, data.pvMediaSpecificInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvMediaSpecificInfo))), true);
  // 0x28: u64
  if (data?.ullTimestamp !== undefined) view.setBigUint64(40, BigInt(data.ullTimestamp), true);
  return buf;
}

export class DOT11_EXTSTA_RECV_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uReceiveFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uPhyId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uChCenterFrequency(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get usNumberOfMPDUsReceived(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: i32
  get lRSSI(): number {
    return this.view.getInt32(22, true);
  }

  // 0x1a: u8
  get ucDataRate(): number {
    return this.view.getUint8(26);
  }

  // 0x1b: u32
  get uSizeMediaSpecificInfo(): number {
    return this.view.getUint32(27, true);
  }

  // 0x1f: pad1

  // 0x20: pointer
  get pvMediaSpecificInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u64
  get ullTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uReceiveFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uPhyId(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uChCenterFrequency(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set usNumberOfMPDUsReceived(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: i32
  set lRSSI(value: number) {
    this.view.setInt32(22, value, true);
  }

  // 0x1a: u8
  set ucDataRate(value: number) {
    this.view.setUint8(26, value);
  }

  // 0x1b: u32
  set uSizeMediaSpecificInfo(value: number) {
    this.view.setUint32(27, value, true);
  }

  // 0x1f: pad1

  // 0x20: pointer
  set pvMediaSpecificInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u64
  set ullTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_EXTAP_ATTRIBUTES (size: 88)
 */
export interface DOT11_EXTAP_ATTRIBUTES {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uScanSSIDListSize: number;
  /** u32 */
  uDesiredSSIDListSize: number;
  /** u32 */
  uPrivacyExemptionListSize: number;
  /** u32 */
  uAssociationTableSize: number;
  /** u32 */
  uDefaultKeyTableSize: number;
  /** u32 */
  uWEPKeyValueMaxLength: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bStrictlyOrderedServiceClassImplemented: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumSupportedCountryOrRegionStrings: number;
  /** ptr */
  pSupportedCountryOrRegionStrings: Deno.PointerValue | Uint8Array;
  /** u32 */
  uInfraNumSupportedUcastAlgoPairs: number;
  /** ptr */
  pInfraSupportedUcastAlgoPairs: Deno.PointerValue | Uint8Array;
  /** u32 */
  uInfraNumSupportedMcastAlgoPairs: number;
  /** ptr */
  pInfraSupportedMcastAlgoPairs: Deno.PointerValue | Uint8Array;
}

export const sizeofDOT11_EXTAP_ATTRIBUTES = 88;

export function allocDOT11_EXTAP_ATTRIBUTES(data?: Partial<DOT11_EXTAP_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_EXTAP_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uScanSSIDListSize !== undefined) view.setUint32(8, Number(data.uScanSSIDListSize), true);
  // 0x0c: u32
  if (data?.uDesiredSSIDListSize !== undefined) view.setUint32(12, Number(data.uDesiredSSIDListSize), true);
  // 0x10: u32
  if (data?.uPrivacyExemptionListSize !== undefined) view.setUint32(16, Number(data.uPrivacyExemptionListSize), true);
  // 0x14: u32
  if (data?.uAssociationTableSize !== undefined) view.setUint32(20, Number(data.uAssociationTableSize), true);
  // 0x18: u32
  if (data?.uDefaultKeyTableSize !== undefined) view.setUint32(24, Number(data.uDefaultKeyTableSize), true);
  // 0x1c: u32
  if (data?.uWEPKeyValueMaxLength !== undefined) view.setUint32(28, Number(data.uWEPKeyValueMaxLength), true);
  // 0x20: pointer
  if (data?.bStrictlyOrderedServiceClassImplemented !== undefined) view.setBigUint64(32, data.bStrictlyOrderedServiceClassImplemented === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bStrictlyOrderedServiceClassImplemented))), true);
  // 0x28: u32
  if (data?.uNumSupportedCountryOrRegionStrings !== undefined) view.setUint32(40, Number(data.uNumSupportedCountryOrRegionStrings), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pSupportedCountryOrRegionStrings !== undefined) view.setBigUint64(48, data.pSupportedCountryOrRegionStrings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSupportedCountryOrRegionStrings))), true);
  // 0x38: u32
  if (data?.uInfraNumSupportedUcastAlgoPairs !== undefined) view.setUint32(56, Number(data.uInfraNumSupportedUcastAlgoPairs), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.pInfraSupportedUcastAlgoPairs !== undefined) view.setBigUint64(64, data.pInfraSupportedUcastAlgoPairs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInfraSupportedUcastAlgoPairs))), true);
  // 0x48: u32
  if (data?.uInfraNumSupportedMcastAlgoPairs !== undefined) view.setUint32(72, Number(data.uInfraNumSupportedMcastAlgoPairs), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pInfraSupportedMcastAlgoPairs !== undefined) view.setBigUint64(80, data.pInfraSupportedMcastAlgoPairs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInfraSupportedMcastAlgoPairs))), true);
  return buf;
}

export class DOT11_EXTAP_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uScanSSIDListSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uDesiredSSIDListSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uPrivacyExemptionListSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uAssociationTableSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uDefaultKeyTableSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get uWEPKeyValueMaxLength(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get bStrictlyOrderedServiceClassImplemented(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get uNumSupportedCountryOrRegionStrings(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pSupportedCountryOrRegionStrings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get uInfraNumSupportedUcastAlgoPairs(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get pInfraSupportedUcastAlgoPairs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get uInfraNumSupportedMcastAlgoPairs(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get pInfraSupportedMcastAlgoPairs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uScanSSIDListSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uDesiredSSIDListSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uPrivacyExemptionListSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uAssociationTableSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uDefaultKeyTableSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set uWEPKeyValueMaxLength(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set bStrictlyOrderedServiceClassImplemented(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set uNumSupportedCountryOrRegionStrings(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pSupportedCountryOrRegionStrings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set uInfraNumSupportedUcastAlgoPairs(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set pInfraSupportedUcastAlgoPairs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set uInfraNumSupportedMcastAlgoPairs(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set pInfraSupportedMcastAlgoPairs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_INCOMING_ASSOC_STARTED_PARAMETERS (size: 16)
 */
export interface DOT11_INCOMING_ASSOC_STARTED_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerMacAddr: Deno.PointerValue;
}

export const sizeofDOT11_INCOMING_ASSOC_STARTED_PARAMETERS = 16;

export function allocDOT11_INCOMING_ASSOC_STARTED_PARAMETERS(data?: Partial<DOT11_INCOMING_ASSOC_STARTED_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_INCOMING_ASSOC_STARTED_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerMacAddr !== undefined) view.setBigUint64(8, data.PeerMacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMacAddr))), true);
  return buf;
}

export class DOT11_INCOMING_ASSOC_STARTED_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerMacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerMacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS (size: 32)
 */
export interface DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerMacAddr: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bReAssocReq: Uint8Array | Deno.PointerValue;
  /** u32 */
  uAssocReqOffset: number;
  /** u32 */
  uAssocReqSize: number;
}

export const sizeofDOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS = 32;

export function allocDOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS(data?: Partial<DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerMacAddr !== undefined) view.setBigUint64(8, data.PeerMacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMacAddr))), true);
  // 0x10: pointer
  if (data?.bReAssocReq !== undefined) view.setBigUint64(16, data.bReAssocReq === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bReAssocReq))), true);
  // 0x18: u32
  if (data?.uAssocReqOffset !== undefined) view.setUint32(24, Number(data.uAssocReqOffset), true);
  // 0x1c: u32
  if (data?.uAssocReqSize !== undefined) view.setUint32(28, Number(data.uAssocReqSize), true);
  return buf;
}

export class DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerMacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bReAssocReq(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uAssocReqOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get uAssocReqSize(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerMacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bReAssocReq(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set uAssocReqOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set uAssocReqSize(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS (size: 88)
 */
export interface DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerMacAddr: Deno.PointerValue;
  /** u32 */
  uStatus: number;
  /** u8 */
  ucErrorSource: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bReAssocReq: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bReAssocResp: Uint8Array | Deno.PointerValue;
  /** u32 */
  uAssocReqOffset: number;
  /** u32 */
  uAssocReqSize: number;
  /** u32 */
  uAssocRespOffset: number;
  /** u32 */
  uAssocRespSize: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM */
  AuthAlgo: DOT11_AUTH_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  UnicastCipher: DOT11_CIPHER_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  MulticastCipher: DOT11_CIPHER_ALGORITHM;
  /** u32 */
  uActivePhyListOffset: number;
  /** u32 */
  uActivePhyListSize: number;
  /** u32 */
  uBeaconOffset: number;
  /** u32 */
  uBeaconSize: number;
}

export const sizeofDOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS = 88;

export function allocDOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS(data?: Partial<DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerMacAddr !== undefined) view.setBigUint64(8, data.PeerMacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMacAddr))), true);
  // 0x10: u32
  if (data?.uStatus !== undefined) view.setUint32(16, Number(data.uStatus), true);
  // 0x14: u8
  if (data?.ucErrorSource !== undefined) view.setUint8(20, Number(data.ucErrorSource));
  // 0x15: pad3
  // 0x18: pointer
  if (data?.bReAssocReq !== undefined) view.setBigUint64(24, data.bReAssocReq === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bReAssocReq))), true);
  // 0x20: pointer
  if (data?.bReAssocResp !== undefined) view.setBigUint64(32, data.bReAssocResp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bReAssocResp))), true);
  // 0x28: u32
  if (data?.uAssocReqOffset !== undefined) view.setUint32(40, Number(data.uAssocReqOffset), true);
  // 0x2c: u32
  if (data?.uAssocReqSize !== undefined) view.setUint32(44, Number(data.uAssocReqSize), true);
  // 0x30: u32
  if (data?.uAssocRespOffset !== undefined) view.setUint32(48, Number(data.uAssocRespOffset), true);
  // 0x34: u32
  if (data?.uAssocRespSize !== undefined) view.setUint32(52, Number(data.uAssocRespSize), true);
  // 0x38: i32
  if (data?.AuthAlgo !== undefined) view.setInt32(56, Number(data.AuthAlgo), true);
  // 0x3c: i32
  if (data?.UnicastCipher !== undefined) view.setInt32(60, Number(data.UnicastCipher), true);
  // 0x40: i32
  if (data?.MulticastCipher !== undefined) view.setInt32(64, Number(data.MulticastCipher), true);
  // 0x44: u32
  if (data?.uActivePhyListOffset !== undefined) view.setUint32(68, Number(data.uActivePhyListOffset), true);
  // 0x48: u32
  if (data?.uActivePhyListSize !== undefined) view.setUint32(72, Number(data.uActivePhyListSize), true);
  // 0x4c: u32
  if (data?.uBeaconOffset !== undefined) view.setUint32(76, Number(data.uBeaconOffset), true);
  // 0x50: u32
  if (data?.uBeaconSize !== undefined) view.setUint32(80, Number(data.uBeaconSize), true);
  // 0x54: pad4
  return buf;
}

export class DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerMacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uStatus(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u8
  get ucErrorSource(): number {
    return this.view.getUint8(20);
  }

  // 0x15: pad3

  // 0x18: pointer
  get bReAssocReq(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get bReAssocResp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get uAssocReqOffset(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get uAssocReqSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get uAssocRespOffset(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get uAssocRespSize(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: i32
  get AuthAlgo(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get UnicastCipher(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: i32
  get MulticastCipher(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get uActivePhyListOffset(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get uActivePhyListSize(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get uBeaconOffset(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get uBeaconSize(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerMacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uStatus(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u8
  set ucErrorSource(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: pad3

  // 0x18: pointer
  set bReAssocReq(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set bReAssocResp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set uAssocReqOffset(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set uAssocReqSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set uAssocRespOffset(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set uAssocRespSize(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: i32
  set AuthAlgo(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set UnicastCipher(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: i32
  set MulticastCipher(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set uActivePhyListOffset(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set uActivePhyListSize(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set uBeaconOffset(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set uBeaconSize(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_STOP_AP_PARAMETERS (size: 16)
 */
export interface DOT11_STOP_AP_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulReason: number;
}

export const sizeofDOT11_STOP_AP_PARAMETERS = 16;

export function allocDOT11_STOP_AP_PARAMETERS(data?: Partial<DOT11_STOP_AP_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_STOP_AP_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.ulReason !== undefined) view.setUint32(8, Number(data.ulReason), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11_STOP_AP_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulReason(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulReason(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS (size: 24)
 */
export interface DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulPhyId: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS = 24;

export function allocDOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS(data?: Partial<DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.ulPhyId !== undefined) view.setUint32(8, Number(data.ulPhyId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulPhyId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulPhyId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_CAN_SUSTAIN_AP_PARAMETERS (size: 16)
 */
export interface DOT11_CAN_SUSTAIN_AP_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulReason: number;
}

export const sizeofDOT11_CAN_SUSTAIN_AP_PARAMETERS = 16;

export function allocDOT11_CAN_SUSTAIN_AP_PARAMETERS(data?: Partial<DOT11_CAN_SUSTAIN_AP_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_CAN_SUSTAIN_AP_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.ulReason !== undefined) view.setUint32(8, Number(data.ulReason), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11_CAN_SUSTAIN_AP_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulReason(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulReason(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_AVAILABLE_CHANNEL_LIST (size: 24)
 */
export interface DOT11_AVAILABLE_CHANNEL_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  uChannelNumber: Deno.PointerValue;
}

export const sizeofDOT11_AVAILABLE_CHANNEL_LIST = 24;

export function allocDOT11_AVAILABLE_CHANNEL_LIST(data?: Partial<DOT11_AVAILABLE_CHANNEL_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_AVAILABLE_CHANNEL_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.uChannelNumber !== undefined) view.setBigUint64(16, data.uChannelNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uChannelNumber))), true);
  return buf;
}

export class DOT11_AVAILABLE_CHANNEL_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get uChannelNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set uChannelNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_AVAILABLE_FREQUENCY_LIST (size: 24)
 */
export interface DOT11_AVAILABLE_FREQUENCY_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  uFrequencyValue: Deno.PointerValue;
}

export const sizeofDOT11_AVAILABLE_FREQUENCY_LIST = 24;

export function allocDOT11_AVAILABLE_FREQUENCY_LIST(data?: Partial<DOT11_AVAILABLE_FREQUENCY_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_AVAILABLE_FREQUENCY_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.uFrequencyValue !== undefined) view.setBigUint64(16, data.uFrequencyValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uFrequencyValue))), true);
  return buf;
}

export class DOT11_AVAILABLE_FREQUENCY_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get uFrequencyValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set uFrequencyValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_DISASSOCIATE_PEER_REQUEST (size: 24)
 */
export interface DOT11_DISASSOCIATE_PEER_REQUEST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerMacAddr: Deno.PointerValue;
  /** u16 */
  usReason: number;
}

export const sizeofDOT11_DISASSOCIATE_PEER_REQUEST = 24;

export function allocDOT11_DISASSOCIATE_PEER_REQUEST(data?: Partial<DOT11_DISASSOCIATE_PEER_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_DISASSOCIATE_PEER_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerMacAddr !== undefined) view.setBigUint64(8, data.PeerMacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMacAddr))), true);
  // 0x10: u16
  if (data?.usReason !== undefined) view.setUint16(16, Number(data.usReason), true);
  // 0x12: pad6
  return buf;
}

export class DOT11_DISASSOCIATE_PEER_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerMacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get usReason(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerMacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set usReason(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_INCOMING_ASSOC_DECISION (size: 40)
 */
export interface DOT11_INCOMING_ASSOC_DECISION {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerMacAddr: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bAccept: Uint8Array | Deno.PointerValue;
  /** u16 */
  usReasonCode: number;
  /** u32 */
  uAssocResponseIEsOffset: number;
  /** u32 */
  uAssocResponseIEsLength: number;
}

export const sizeofDOT11_INCOMING_ASSOC_DECISION = 40;

export function allocDOT11_INCOMING_ASSOC_DECISION(data?: Partial<DOT11_INCOMING_ASSOC_DECISION>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_INCOMING_ASSOC_DECISION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerMacAddr !== undefined) view.setBigUint64(8, data.PeerMacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMacAddr))), true);
  // 0x10: pointer
  if (data?.bAccept !== undefined) view.setBigUint64(16, data.bAccept === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bAccept))), true);
  // 0x18: u16
  if (data?.usReasonCode !== undefined) view.setUint16(24, Number(data.usReasonCode), true);
  // 0x1a: u32
  if (data?.uAssocResponseIEsOffset !== undefined) view.setUint32(26, Number(data.uAssocResponseIEsOffset), true);
  // 0x1e: u32
  if (data?.uAssocResponseIEsLength !== undefined) view.setUint32(30, Number(data.uAssocResponseIEsLength), true);
  // 0x22: pad6
  return buf;
}

export class DOT11_INCOMING_ASSOC_DECISIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerMacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bAccept(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u16
  get usReasonCode(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u32
  get uAssocResponseIEsOffset(): number {
    return this.view.getUint32(26, true);
  }

  // 0x1e: u32
  get uAssocResponseIEsLength(): number {
    return this.view.getUint32(30, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerMacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bAccept(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u16
  set usReasonCode(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u32
  set uAssocResponseIEsOffset(value: number) {
    this.view.setUint32(26, value, true);
  }

  // 0x1e: u32
  set uAssocResponseIEsLength(value: number) {
    this.view.setUint32(30, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_INCOMING_ASSOC_DECISION_V2 (size: 40)
 */
export interface DOT11_INCOMING_ASSOC_DECISION_V2 {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerMacAddr: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bAccept: Uint8Array | Deno.PointerValue;
  /** u16 */
  usReasonCode: number;
  /** u32 */
  uAssocResponseIEsOffset: number;
  /** u32 */
  uAssocResponseIEsLength: number;
  /** u8 */
  WFDStatus: number;
}

export const sizeofDOT11_INCOMING_ASSOC_DECISION_V2 = 40;

export function allocDOT11_INCOMING_ASSOC_DECISION_V2(data?: Partial<DOT11_INCOMING_ASSOC_DECISION_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_INCOMING_ASSOC_DECISION_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerMacAddr !== undefined) view.setBigUint64(8, data.PeerMacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMacAddr))), true);
  // 0x10: pointer
  if (data?.bAccept !== undefined) view.setBigUint64(16, data.bAccept === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bAccept))), true);
  // 0x18: u16
  if (data?.usReasonCode !== undefined) view.setUint16(24, Number(data.usReasonCode), true);
  // 0x1a: u32
  if (data?.uAssocResponseIEsOffset !== undefined) view.setUint32(26, Number(data.uAssocResponseIEsOffset), true);
  // 0x1e: u32
  if (data?.uAssocResponseIEsLength !== undefined) view.setUint32(30, Number(data.uAssocResponseIEsLength), true);
  // 0x22: u8
  if (data?.WFDStatus !== undefined) view.setUint8(34, Number(data.WFDStatus));
  // 0x23: pad5
  return buf;
}

export class DOT11_INCOMING_ASSOC_DECISION_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerMacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bAccept(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u16
  get usReasonCode(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u32
  get uAssocResponseIEsOffset(): number {
    return this.view.getUint32(26, true);
  }

  // 0x1e: u32
  get uAssocResponseIEsLength(): number {
    return this.view.getUint32(30, true);
  }

  // 0x22: u8
  get WFDStatus(): number {
    return this.view.getUint8(34);
  }

  // 0x23: pad5

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerMacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bAccept(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u16
  set usReasonCode(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u32
  set uAssocResponseIEsOffset(value: number) {
    this.view.setUint32(26, value, true);
  }

  // 0x1e: u32
  set uAssocResponseIEsLength(value: number) {
    this.view.setUint32(30, value, true);
  }

  // 0x22: u8
  set WFDStatus(value: number) {
    this.view.setUint8(34, value);
  }

  // 0x23: pad5
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ADDITIONAL_IE (size: 24)
 */
export interface DOT11_ADDITIONAL_IE {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uBeaconIEsOffset: number;
  /** u32 */
  uBeaconIEsLength: number;
  /** u32 */
  uResponseIEsOffset: number;
  /** u32 */
  uResponseIEsLength: number;
}

export const sizeofDOT11_ADDITIONAL_IE = 24;

export function allocDOT11_ADDITIONAL_IE(data?: Partial<DOT11_ADDITIONAL_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ADDITIONAL_IE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uBeaconIEsOffset !== undefined) view.setUint32(8, Number(data.uBeaconIEsOffset), true);
  // 0x0c: u32
  if (data?.uBeaconIEsLength !== undefined) view.setUint32(12, Number(data.uBeaconIEsLength), true);
  // 0x10: u32
  if (data?.uResponseIEsOffset !== undefined) view.setUint32(16, Number(data.uResponseIEsOffset), true);
  // 0x14: u32
  if (data?.uResponseIEsLength !== undefined) view.setUint32(20, Number(data.uResponseIEsLength), true);
  return buf;
}

export class DOT11_ADDITIONAL_IEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uBeaconIEsOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uBeaconIEsLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uResponseIEsOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uResponseIEsLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uBeaconIEsOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uBeaconIEsLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uResponseIEsOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uResponseIEsLength(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PEER_STATISTICS (size: 48)
 */
export interface DOT11_PEER_STATISTICS {
  /** u64 */
  ullDecryptSuccessCount: Deno.PointerValue;
  /** u64 */
  ullDecryptFailureCount: Deno.PointerValue;
  /** u64 */
  ullTxPacketSuccessCount: Deno.PointerValue;
  /** u64 */
  ullTxPacketFailureCount: Deno.PointerValue;
  /** u64 */
  ullRxPacketSuccessCount: Deno.PointerValue;
  /** u64 */
  ullRxPacketFailureCount: Deno.PointerValue;
}

export const sizeofDOT11_PEER_STATISTICS = 48;

export function allocDOT11_PEER_STATISTICS(data?: Partial<DOT11_PEER_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PEER_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullDecryptSuccessCount !== undefined) view.setBigUint64(0, BigInt(data.ullDecryptSuccessCount), true);
  // 0x08: u64
  if (data?.ullDecryptFailureCount !== undefined) view.setBigUint64(8, BigInt(data.ullDecryptFailureCount), true);
  // 0x10: u64
  if (data?.ullTxPacketSuccessCount !== undefined) view.setBigUint64(16, BigInt(data.ullTxPacketSuccessCount), true);
  // 0x18: u64
  if (data?.ullTxPacketFailureCount !== undefined) view.setBigUint64(24, BigInt(data.ullTxPacketFailureCount), true);
  // 0x20: u64
  if (data?.ullRxPacketSuccessCount !== undefined) view.setBigUint64(32, BigInt(data.ullRxPacketSuccessCount), true);
  // 0x28: u64
  if (data?.ullRxPacketFailureCount !== undefined) view.setBigUint64(40, BigInt(data.ullRxPacketFailureCount), true);
  return buf;
}

export class DOT11_PEER_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ullDecryptSuccessCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get ullDecryptFailureCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get ullTxPacketSuccessCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ullTxPacketFailureCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get ullRxPacketSuccessCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get ullRxPacketFailureCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: u64
  set ullDecryptSuccessCount(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set ullDecryptFailureCount(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set ullTxPacketSuccessCount(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ullTxPacketFailureCount(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set ullRxPacketSuccessCount(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set ullRxPacketFailureCount(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PEER_INFO (size: 80)
 */
export interface DOT11_PEER_INFO {
  /** array */
  MacAddress: Deno.PointerValue;
  /** u16 */
  usCapabilityInformation: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM */
  AuthAlgo: DOT11_AUTH_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  UnicastCipherAlgo: DOT11_CIPHER_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  MulticastCipherAlgo: DOT11_CIPHER_ALGORITHM;
  /** Windows.Win32.Foundation.BOOLEAN */
  bWpsEnabled: Uint8Array | Deno.PointerValue;
  /** u16 */
  usListenInterval: number;
  /** array */
  ucSupportedRates: Deno.PointerValue;
  /** u16 */
  usAssociationID: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_ASSOCIATION_STATE */
  AssociationState: DOT11_ASSOCIATION_STATE;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_POWER_MODE */
  PowerMode: DOT11_POWER_MODE;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liAssociationUpTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_PEER_STATISTICS */
  Statistics: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_PEER_INFO = 80;

export function allocDOT11_PEER_INFO(data?: Partial<DOT11_PEER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PEER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MacAddress !== undefined) view.setBigUint64(0, data.MacAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MacAddress))), true);
  // 0x08: u16
  if (data?.usCapabilityInformation !== undefined) view.setUint16(8, Number(data.usCapabilityInformation), true);
  // 0x0a: i32
  if (data?.AuthAlgo !== undefined) view.setInt32(10, Number(data.AuthAlgo), true);
  // 0x0e: i32
  if (data?.UnicastCipherAlgo !== undefined) view.setInt32(14, Number(data.UnicastCipherAlgo), true);
  // 0x12: i32
  if (data?.MulticastCipherAlgo !== undefined) view.setInt32(18, Number(data.MulticastCipherAlgo), true);
  // 0x16: pad2
  // 0x18: pointer
  if (data?.bWpsEnabled !== undefined) view.setBigUint64(24, data.bWpsEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bWpsEnabled))), true);
  // 0x20: u16
  if (data?.usListenInterval !== undefined) view.setUint16(32, Number(data.usListenInterval), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.ucSupportedRates !== undefined) view.setBigUint64(40, data.ucSupportedRates === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucSupportedRates))), true);
  // 0x30: u16
  if (data?.usAssociationID !== undefined) view.setUint16(48, Number(data.usAssociationID), true);
  // 0x32: i32
  if (data?.AssociationState !== undefined) view.setInt32(50, Number(data.AssociationState), true);
  // 0x36: i32
  if (data?.PowerMode !== undefined) view.setInt32(54, Number(data.PowerMode), true);
  // 0x3a: pad6
  // 0x40: pointer
  if (data?.liAssociationUpTime !== undefined) view.setBigUint64(64, data.liAssociationUpTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liAssociationUpTime))), true);
  // 0x48: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(72, data.Statistics === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Statistics))), true);
  return buf;
}

export class DOT11_PEER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get MacAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get usCapabilityInformation(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: i32
  get AuthAlgo(): number {
    return this.view.getInt32(10, true);
  }

  // 0x0e: i32
  get UnicastCipherAlgo(): number {
    return this.view.getInt32(14, true);
  }

  // 0x12: i32
  get MulticastCipherAlgo(): number {
    return this.view.getInt32(18, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  get bWpsEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get usListenInterval(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  get ucSupportedRates(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u16
  get usAssociationID(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: i32
  get AssociationState(): number {
    return this.view.getInt32(50, true);
  }

  // 0x36: i32
  get PowerMode(): number {
    return this.view.getInt32(54, true);
  }

  // 0x3a: pad6

  // 0x40: pointer
  get liAssociationUpTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Statistics(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set MacAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set usCapabilityInformation(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: i32
  set AuthAlgo(value: number) {
    this.view.setInt32(10, value, true);
  }

  // 0x0e: i32
  set UnicastCipherAlgo(value: number) {
    this.view.setInt32(14, value, true);
  }

  // 0x12: i32
  set MulticastCipherAlgo(value: number) {
    this.view.setInt32(18, value, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  set bWpsEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set usListenInterval(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  set ucSupportedRates(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u16
  set usAssociationID(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: i32
  set AssociationState(value: number) {
    this.view.setInt32(50, value, true);
  }

  // 0x36: i32
  set PowerMode(value: number) {
    this.view.setInt32(54, value, true);
  }

  // 0x3a: pad6

  // 0x40: pointer
  set liAssociationUpTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Statistics(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PEER_INFO_LIST (size: 24)
 */
export interface DOT11_PEER_INFO_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  PeerInfo: Deno.PointerValue;
}

export const sizeofDOT11_PEER_INFO_LIST = 24;

export function allocDOT11_PEER_INFO_LIST(data?: Partial<DOT11_PEER_INFO_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PEER_INFO_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.PeerInfo !== undefined) view.setBigUint64(16, data.PeerInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerInfo))), true);
  return buf;
}

export class DOT11_PEER_INFO_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get PeerInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set PeerInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_VWIFI_COMBINATION (size: 24)
 */
export interface DOT11_VWIFI_COMBINATION {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumInfrastructure: number;
  /** u32 */
  uNumAdhoc: number;
  /** u32 */
  uNumSoftAP: number;
}

export const sizeofDOT11_VWIFI_COMBINATION = 24;

export function allocDOT11_VWIFI_COMBINATION(data?: Partial<DOT11_VWIFI_COMBINATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_VWIFI_COMBINATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumInfrastructure !== undefined) view.setUint32(8, Number(data.uNumInfrastructure), true);
  // 0x0c: u32
  if (data?.uNumAdhoc !== undefined) view.setUint32(12, Number(data.uNumAdhoc), true);
  // 0x10: u32
  if (data?.uNumSoftAP !== undefined) view.setUint32(16, Number(data.uNumSoftAP), true);
  // 0x14: pad4
  return buf;
}

export class DOT11_VWIFI_COMBINATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumInfrastructure(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uNumAdhoc(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uNumSoftAP(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumInfrastructure(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uNumAdhoc(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uNumSoftAP(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_VWIFI_COMBINATION_V2 (size: 24)
 */
export interface DOT11_VWIFI_COMBINATION_V2 {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumInfrastructure: number;
  /** u32 */
  uNumAdhoc: number;
  /** u32 */
  uNumSoftAP: number;
  /** u32 */
  uNumVirtualStation: number;
}

export const sizeofDOT11_VWIFI_COMBINATION_V2 = 24;

export function allocDOT11_VWIFI_COMBINATION_V2(data?: Partial<DOT11_VWIFI_COMBINATION_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_VWIFI_COMBINATION_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumInfrastructure !== undefined) view.setUint32(8, Number(data.uNumInfrastructure), true);
  // 0x0c: u32
  if (data?.uNumAdhoc !== undefined) view.setUint32(12, Number(data.uNumAdhoc), true);
  // 0x10: u32
  if (data?.uNumSoftAP !== undefined) view.setUint32(16, Number(data.uNumSoftAP), true);
  // 0x14: u32
  if (data?.uNumVirtualStation !== undefined) view.setUint32(20, Number(data.uNumVirtualStation), true);
  return buf;
}

export class DOT11_VWIFI_COMBINATION_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumInfrastructure(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uNumAdhoc(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uNumSoftAP(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uNumVirtualStation(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumInfrastructure(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uNumAdhoc(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uNumSoftAP(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uNumVirtualStation(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_VWIFI_COMBINATION_V3 (size: 32)
 */
export interface DOT11_VWIFI_COMBINATION_V3 {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumInfrastructure: number;
  /** u32 */
  uNumAdhoc: number;
  /** u32 */
  uNumSoftAP: number;
  /** u32 */
  uNumVirtualStation: number;
  /** u32 */
  uNumWFDGroup: number;
}

export const sizeofDOT11_VWIFI_COMBINATION_V3 = 32;

export function allocDOT11_VWIFI_COMBINATION_V3(data?: Partial<DOT11_VWIFI_COMBINATION_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_VWIFI_COMBINATION_V3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumInfrastructure !== undefined) view.setUint32(8, Number(data.uNumInfrastructure), true);
  // 0x0c: u32
  if (data?.uNumAdhoc !== undefined) view.setUint32(12, Number(data.uNumAdhoc), true);
  // 0x10: u32
  if (data?.uNumSoftAP !== undefined) view.setUint32(16, Number(data.uNumSoftAP), true);
  // 0x14: u32
  if (data?.uNumVirtualStation !== undefined) view.setUint32(20, Number(data.uNumVirtualStation), true);
  // 0x18: u32
  if (data?.uNumWFDGroup !== undefined) view.setUint32(24, Number(data.uNumWFDGroup), true);
  // 0x1c: pad4
  return buf;
}

export class DOT11_VWIFI_COMBINATION_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumInfrastructure(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uNumAdhoc(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uNumSoftAP(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uNumVirtualStation(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uNumWFDGroup(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumInfrastructure(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uNumAdhoc(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uNumSoftAP(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uNumVirtualStation(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uNumWFDGroup(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_VWIFI_ATTRIBUTES (size: 24)
 */
export interface DOT11_VWIFI_ATTRIBUTES {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  Combinations: Deno.PointerValue;
}

export const sizeofDOT11_VWIFI_ATTRIBUTES = 24;

export function allocDOT11_VWIFI_ATTRIBUTES(data?: Partial<DOT11_VWIFI_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_VWIFI_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(8, Number(data.uTotalNumOfEntries), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Combinations !== undefined) view.setBigUint64(16, data.Combinations === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Combinations))), true);
  return buf;
}

export class DOT11_VWIFI_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Combinations(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Combinations(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MAC_PARAMETERS (size: 16)
 */
export interface DOT11_MAC_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uOpmodeMask: number;
}

export const sizeofDOT11_MAC_PARAMETERS = 16;

export function allocDOT11_MAC_PARAMETERS(data?: Partial<DOT11_MAC_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MAC_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uOpmodeMask !== undefined) view.setUint32(8, Number(data.uOpmodeMask), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11_MAC_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uOpmodeMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uOpmodeMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MAC_INFO (size: 16)
 */
export interface DOT11_MAC_INFO {
  /** u32 */
  uReserved: number;
  /** u32 */
  uNdisPortNumber: number;
  /** array */
  MacAddr: Deno.PointerValue;
}

export const sizeofDOT11_MAC_INFO = 16;

export function allocDOT11_MAC_INFO(data?: Partial<DOT11_MAC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MAC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uReserved !== undefined) view.setUint32(0, Number(data.uReserved), true);
  // 0x04: u32
  if (data?.uNdisPortNumber !== undefined) view.setUint32(4, Number(data.uNdisPortNumber), true);
  // 0x08: pointer
  if (data?.MacAddr !== undefined) view.setBigUint64(8, data.MacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MacAddr))), true);
  return buf;
}

export class DOT11_MAC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uNdisPortNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get MacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uNdisPortNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set MacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_ATTRIBUTES (size: 104)
 */
export interface DOT11_WFD_ATTRIBUTES {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumConcurrentGORole: number;
  /** u32 */
  uNumConcurrentClientRole: number;
  /** u32 */
  WPSVersionsSupported: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bServiceDiscoverySupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bClientDiscoverabilitySupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bInfrastructureManagementSupported: Uint8Array | Deno.PointerValue;
  /** u32 */
  uMaxSecondaryDeviceTypeListSize: number;
  /** array */
  DeviceAddress: Deno.PointerValue;
  /** u32 */
  uInterfaceAddressListCount: number;
  /** ptr */
  pInterfaceAddressList: Deno.PointerValue | Uint8Array;
  /** u32 */
  uNumSupportedCountryOrRegionStrings: number;
  /** ptr */
  pSupportedCountryOrRegionStrings: Deno.PointerValue | Uint8Array;
  /** u32 */
  uDiscoveryFilterListSize: number;
  /** u32 */
  uGORoleClientTableSize: number;
}

export const sizeofDOT11_WFD_ATTRIBUTES = 104;

export function allocDOT11_WFD_ATTRIBUTES(data?: Partial<DOT11_WFD_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumConcurrentGORole !== undefined) view.setUint32(8, Number(data.uNumConcurrentGORole), true);
  // 0x0c: u32
  if (data?.uNumConcurrentClientRole !== undefined) view.setUint32(12, Number(data.uNumConcurrentClientRole), true);
  // 0x10: u32
  if (data?.WPSVersionsSupported !== undefined) view.setUint32(16, Number(data.WPSVersionsSupported), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.bServiceDiscoverySupported !== undefined) view.setBigUint64(24, data.bServiceDiscoverySupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bServiceDiscoverySupported))), true);
  // 0x20: pointer
  if (data?.bClientDiscoverabilitySupported !== undefined) view.setBigUint64(32, data.bClientDiscoverabilitySupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bClientDiscoverabilitySupported))), true);
  // 0x28: pointer
  if (data?.bInfrastructureManagementSupported !== undefined) view.setBigUint64(40, data.bInfrastructureManagementSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bInfrastructureManagementSupported))), true);
  // 0x30: u32
  if (data?.uMaxSecondaryDeviceTypeListSize !== undefined) view.setUint32(48, Number(data.uMaxSecondaryDeviceTypeListSize), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.DeviceAddress !== undefined) view.setBigUint64(56, data.DeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceAddress))), true);
  // 0x40: u32
  if (data?.uInterfaceAddressListCount !== undefined) view.setUint32(64, Number(data.uInterfaceAddressListCount), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pInterfaceAddressList !== undefined) view.setBigUint64(72, data.pInterfaceAddressList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInterfaceAddressList))), true);
  // 0x50: u32
  if (data?.uNumSupportedCountryOrRegionStrings !== undefined) view.setUint32(80, Number(data.uNumSupportedCountryOrRegionStrings), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pSupportedCountryOrRegionStrings !== undefined) view.setBigUint64(88, data.pSupportedCountryOrRegionStrings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSupportedCountryOrRegionStrings))), true);
  // 0x60: u32
  if (data?.uDiscoveryFilterListSize !== undefined) view.setUint32(96, Number(data.uDiscoveryFilterListSize), true);
  // 0x64: u32
  if (data?.uGORoleClientTableSize !== undefined) view.setUint32(100, Number(data.uGORoleClientTableSize), true);
  return buf;
}

export class DOT11_WFD_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumConcurrentGORole(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uNumConcurrentClientRole(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get WPSVersionsSupported(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get bServiceDiscoverySupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get bClientDiscoverabilitySupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get bInfrastructureManagementSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get uMaxSecondaryDeviceTypeListSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get DeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get uInterfaceAddressListCount(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get pInterfaceAddressList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get uNumSupportedCountryOrRegionStrings(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get pSupportedCountryOrRegionStrings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get uDiscoveryFilterListSize(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get uGORoleClientTableSize(): number {
    return this.view.getUint32(100, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumConcurrentGORole(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uNumConcurrentClientRole(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set WPSVersionsSupported(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set bServiceDiscoverySupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set bClientDiscoverabilitySupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set bInfrastructureManagementSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set uMaxSecondaryDeviceTypeListSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set DeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set uInterfaceAddressListCount(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set pInterfaceAddressList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set uNumSupportedCountryOrRegionStrings(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set pSupportedCountryOrRegionStrings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set uDiscoveryFilterListSize(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set uGORoleClientTableSize(value: number) {
    this.view.setUint32(100, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_DEVICE_TYPE (size: 16)
 */
export interface DOT11_WFD_DEVICE_TYPE {
  /** u16 */
  CategoryID: number;
  /** u16 */
  SubCategoryID: number;
  /** array */
  OUI: Deno.PointerValue;
}

export const sizeofDOT11_WFD_DEVICE_TYPE = 16;

export function allocDOT11_WFD_DEVICE_TYPE(data?: Partial<DOT11_WFD_DEVICE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_DEVICE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.CategoryID !== undefined) view.setUint16(0, Number(data.CategoryID), true);
  // 0x02: u16
  if (data?.SubCategoryID !== undefined) view.setUint16(2, Number(data.SubCategoryID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OUI !== undefined) view.setBigUint64(8, data.OUI === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OUI))), true);
  return buf;
}

export class DOT11_WFD_DEVICE_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get CategoryID(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get SubCategoryID(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get OUI(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set CategoryID(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set SubCategoryID(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set OUI(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WPS_DEVICE_NAME (size: 16)
 */
export interface DOT11_WPS_DEVICE_NAME {
  /** u32 */
  uDeviceNameLength: number;
  /** array */
  ucDeviceName: Deno.PointerValue;
}

export const sizeofDOT11_WPS_DEVICE_NAME = 16;

export function allocDOT11_WPS_DEVICE_NAME(data?: Partial<DOT11_WPS_DEVICE_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WPS_DEVICE_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uDeviceNameLength !== undefined) view.setUint32(0, Number(data.uDeviceNameLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ucDeviceName !== undefined) view.setBigUint64(8, data.ucDeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucDeviceName))), true);
  return buf;
}

export class DOT11_WPS_DEVICE_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uDeviceNameLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ucDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uDeviceNameLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ucDeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_CONFIGURATION_TIMEOUT (size: 8)
 */
export interface DOT11_WFD_CONFIGURATION_TIMEOUT {
  /** u8 */
  GOTimeout: number;
  /** u8 */
  ClientTimeout: number;
}

export const sizeofDOT11_WFD_CONFIGURATION_TIMEOUT = 8;

export function allocDOT11_WFD_CONFIGURATION_TIMEOUT(data?: Partial<DOT11_WFD_CONFIGURATION_TIMEOUT>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_CONFIGURATION_TIMEOUT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.GOTimeout !== undefined) view.setUint8(0, Number(data.GOTimeout));
  // 0x01: u8
  if (data?.ClientTimeout !== undefined) view.setUint8(1, Number(data.ClientTimeout));
  // 0x02: pad6
  return buf;
}

export class DOT11_WFD_CONFIGURATION_TIMEOUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get GOTimeout(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get ClientTimeout(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x00: u8
  set GOTimeout(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set ClientTimeout(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GROUP_ID (size: 16)
 */
export interface DOT11_WFD_GROUP_ID {
  /** array */
  DeviceAddress: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  SSID: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_WFD_GROUP_ID = 16;

export function allocDOT11_WFD_GROUP_ID(data?: Partial<DOT11_WFD_GROUP_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_GROUP_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceAddress !== undefined) view.setBigUint64(0, data.DeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceAddress))), true);
  // 0x08: pointer
  if (data?.SSID !== undefined) view.setBigUint64(8, data.SSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SSID))), true);
  return buf;
}

export class DOT11_WFD_GROUP_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get SSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set SSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GO_INTENT (size: 8)
 */
export interface DOT11_WFD_GO_INTENT {
  /** u8 */
  _bitfield: number;
}

export const sizeofDOT11_WFD_GO_INTENT = 8;

export function allocDOT11_WFD_GO_INTENT(data?: Partial<DOT11_WFD_GO_INTENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_GO_INTENT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

export class DOT11_WFD_GO_INTENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get _bitfield(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set _bitfield(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_CHANNEL (size: 16)
 */
export interface DOT11_WFD_CHANNEL {
  /** array */
  CountryRegionString: Deno.PointerValue;
  /** u8 */
  OperatingClass: number;
  /** u8 */
  ChannelNumber: number;
}

export const sizeofDOT11_WFD_CHANNEL = 16;

export function allocDOT11_WFD_CHANNEL(data?: Partial<DOT11_WFD_CHANNEL>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_CHANNEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CountryRegionString !== undefined) view.setBigUint64(0, data.CountryRegionString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CountryRegionString))), true);
  // 0x08: u8
  if (data?.OperatingClass !== undefined) view.setUint8(8, Number(data.OperatingClass));
  // 0x09: u8
  if (data?.ChannelNumber !== undefined) view.setUint8(9, Number(data.ChannelNumber));
  // 0x0a: pad6
  return buf;
}

export class DOT11_WFD_CHANNELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CountryRegionString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get OperatingClass(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get ChannelNumber(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set CountryRegionString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set OperatingClass(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set ChannelNumber(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WFDSVC_CONNECTION_CAPABILITY (size: 24)
 */
export interface WFDSVC_CONNECTION_CAPABILITY {
  /** Windows.Win32.Foundation.BOOLEAN */
  bNew: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bClient: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bGO: Uint8Array | Deno.PointerValue;
}

export const sizeofWFDSVC_CONNECTION_CAPABILITY = 24;

export function allocWFDSVC_CONNECTION_CAPABILITY(data?: Partial<WFDSVC_CONNECTION_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWFDSVC_CONNECTION_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bNew !== undefined) view.setBigUint64(0, data.bNew === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bNew))), true);
  // 0x08: pointer
  if (data?.bClient !== undefined) view.setBigUint64(8, data.bClient === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bClient))), true);
  // 0x10: pointer
  if (data?.bGO !== undefined) view.setBigUint64(16, data.bGO === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bGO))), true);
  return buf;
}

export class WFDSVC_CONNECTION_CAPABILITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get bNew(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bClient(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bGO(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set bNew(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bClient(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bGO(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_SERVICE_HASH_LIST (size: 16)
 */
export interface DOT11_WFD_SERVICE_HASH_LIST {
  /** u16 */
  ServiceHashCount: number;
  /** array */
  ServiceHash: Deno.PointerValue;
}

export const sizeofDOT11_WFD_SERVICE_HASH_LIST = 16;

export function allocDOT11_WFD_SERVICE_HASH_LIST(data?: Partial<DOT11_WFD_SERVICE_HASH_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_SERVICE_HASH_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ServiceHashCount !== undefined) view.setUint16(0, Number(data.ServiceHashCount), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.ServiceHash !== undefined) view.setBigUint64(8, data.ServiceHash === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServiceHash))), true);
  return buf;
}

export class DOT11_WFD_SERVICE_HASH_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ServiceHashCount(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get ServiceHash(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set ServiceHashCount(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set ServiceHash(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_ADVERTISEMENT_ID (size: 16)
 */
export interface DOT11_WFD_ADVERTISEMENT_ID {
  /** u32 */
  AdvertisementID: number;
  /** array */
  ServiceAddress: Deno.PointerValue;
}

export const sizeofDOT11_WFD_ADVERTISEMENT_ID = 16;

export function allocDOT11_WFD_ADVERTISEMENT_ID(data?: Partial<DOT11_WFD_ADVERTISEMENT_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_ADVERTISEMENT_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AdvertisementID !== undefined) view.setUint32(0, Number(data.AdvertisementID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ServiceAddress !== undefined) view.setBigUint64(8, data.ServiceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServiceAddress))), true);
  return buf;
}

export class DOT11_WFD_ADVERTISEMENT_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AdvertisementID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ServiceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AdvertisementID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ServiceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_SESSION_ID (size: 16)
 */
export interface DOT11_WFD_SESSION_ID {
  /** u32 */
  SessionID: number;
  /** array */
  SessionAddress: Deno.PointerValue;
}

export const sizeofDOT11_WFD_SESSION_ID = 16;

export function allocDOT11_WFD_SESSION_ID(data?: Partial<DOT11_WFD_SESSION_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_SESSION_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionID !== undefined) view.setUint32(0, Number(data.SessionID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SessionAddress !== undefined) view.setBigUint64(8, data.SessionAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SessionAddress))), true);
  return buf;
}

export class DOT11_WFD_SESSION_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SessionAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set SessionID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SessionAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR (size: 16)
 */
export interface DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR {
  /** u32 */
  AdvertisementID: number;
  /** u16 */
  ConfigMethods: number;
  /** u8 */
  ServiceNameLength: number;
  /** array */
  ServiceName: Deno.PointerValue;
}

export const sizeofDOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR = 16;

export function allocDOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR(data?: Partial<DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AdvertisementID !== undefined) view.setUint32(0, Number(data.AdvertisementID), true);
  // 0x04: u16
  if (data?.ConfigMethods !== undefined) view.setUint16(4, Number(data.ConfigMethods), true);
  // 0x06: u8
  if (data?.ServiceNameLength !== undefined) view.setUint8(6, Number(data.ServiceNameLength));
  // 0x07: pad1
  // 0x08: pointer
  if (data?.ServiceName !== undefined) view.setBigUint64(8, data.ServiceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServiceName))), true);
  return buf;
}

export class DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AdvertisementID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get ConfigMethods(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u8
  get ServiceNameLength(): number {
    return this.view.getUint8(6);
  }

  // 0x07: pad1

  // 0x08: pointer
  get ServiceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AdvertisementID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set ConfigMethods(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u8
  set ServiceNameLength(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: pad1

  // 0x08: pointer
  set ServiceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_ADVERTISED_SERVICE_LIST (size: 16)
 */
export interface DOT11_WFD_ADVERTISED_SERVICE_LIST {
  /** u16 */
  ServiceCount: number;
  /** array */
  AdvertisedService: Deno.PointerValue;
}

export const sizeofDOT11_WFD_ADVERTISED_SERVICE_LIST = 16;

export function allocDOT11_WFD_ADVERTISED_SERVICE_LIST(data?: Partial<DOT11_WFD_ADVERTISED_SERVICE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_ADVERTISED_SERVICE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ServiceCount !== undefined) view.setUint16(0, Number(data.ServiceCount), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.AdvertisedService !== undefined) view.setBigUint64(8, data.AdvertisedService === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdvertisedService))), true);
  return buf;
}

export class DOT11_WFD_ADVERTISED_SERVICE_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ServiceCount(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get AdvertisedService(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set ServiceCount(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set AdvertisedService(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS (size: 32)
 */
export interface DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** i32 */
  Status: number;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** u32 */
  uListOffset: number;
  /** u32 */
  uListLength: number;
}

export const sizeofDOT11_WFD_DISCOVER_COMPLETE_PARAMETERS = 32;

export function allocDOT11_WFD_DISCOVER_COMPLETE_PARAMETERS(data?: Partial<DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_DISCOVER_COMPLETE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: i32
  if (data?.Status !== undefined) view.setInt32(8, Number(data.Status), true);
  // 0x0c: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(12, Number(data.uNumOfEntries), true);
  // 0x10: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(16, Number(data.uTotalNumOfEntries), true);
  // 0x14: u32
  if (data?.uListOffset !== undefined) view.setUint32(20, Number(data.uListOffset), true);
  // 0x18: u32
  if (data?.uListLength !== undefined) view.setUint32(24, Number(data.uListLength), true);
  // 0x1c: pad4
  return buf;
}

export class DOT11_WFD_DISCOVER_COMPLETE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get Status(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uListOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uListLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set Status(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uListOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uListLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS (size: 32)
 */
export interface DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** i32 */
  Status: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS = 32;

export function allocDOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS(data?: Partial<DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(8, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: i32
  if (data?.Status !== undefined) view.setInt32(17, Number(data.Status), true);
  // 0x15: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(21, Number(data.uIEsOffset), true);
  // 0x19: u32
  if (data?.uIEsLength !== undefined) view.setUint32(25, Number(data.uIEsLength), true);
  // 0x1d: pad3
  return buf;
}

export class DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: i32
  get Status(): number {
    return this.view.getInt32(17, true);
  }

  // 0x15: u32
  get uIEsOffset(): number {
    return this.view.getUint32(21, true);
  }

  // 0x19: u32
  get uIEsLength(): number {
    return this.view.getUint32(25, true);
  }

  // 0x1d: pad3

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: i32
  set Status(value: number) {
    this.view.setInt32(17, value, true);
  }

  // 0x15: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(21, value, true);
  }

  // 0x19: u32
  set uIEsLength(value: number) {
    this.view.setUint32(25, value, true);
  }

  // 0x1d: pad3
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS (size: 40)
 */
export interface DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** ptr */
  RequestContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS = 40;

export function allocDOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS(data?: Partial<DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(8, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.RequestContext !== undefined) view.setBigUint64(24, data.RequestContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestContext))), true);
  // 0x20: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(32, Number(data.uIEsOffset), true);
  // 0x24: u32
  if (data?.uIEsLength !== undefined) view.setUint32(36, Number(data.uIEsLength), true);
  return buf;
}

export class DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get RequestContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get uIEsOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get uIEsLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set RequestContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set uIEsLength(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS (size: 32)
 */
export interface DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** i32 */
  Status: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS = 32;

export function allocDOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS(data?: Partial<DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(8, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: i32
  if (data?.Status !== undefined) view.setInt32(17, Number(data.Status), true);
  // 0x15: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(21, Number(data.uIEsOffset), true);
  // 0x19: u32
  if (data?.uIEsLength !== undefined) view.setUint32(25, Number(data.uIEsLength), true);
  // 0x1d: pad3
  return buf;
}

export class DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: i32
  get Status(): number {
    return this.view.getInt32(17, true);
  }

  // 0x15: u32
  get uIEsOffset(): number {
    return this.view.getUint32(21, true);
  }

  // 0x19: u32
  get uIEsLength(): number {
    return this.view.getUint32(25, true);
  }

  // 0x1d: pad3

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: i32
  set Status(value: number) {
    this.view.setInt32(17, value, true);
  }

  // 0x15: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(21, value, true);
  }

  // 0x19: u32
  set uIEsLength(value: number) {
    this.view.setUint32(25, value, true);
  }

  // 0x1d: pad3
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS (size: 40)
 */
export interface DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** ptr */
  ResponseContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS = 40;

export function allocDOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS(data?: Partial<DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(8, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.ResponseContext !== undefined) view.setBigUint64(24, data.ResponseContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ResponseContext))), true);
  // 0x20: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(32, Number(data.uIEsOffset), true);
  // 0x24: u32
  if (data?.uIEsLength !== undefined) view.setUint32(36, Number(data.uIEsLength), true);
  return buf;
}

export class DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get ResponseContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get uIEsOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get uIEsLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set ResponseContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set uIEsLength(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS (size: 32)
 */
export interface DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** i32 */
  Status: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS = 32;

export function allocDOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS(data?: Partial<DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(8, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: i32
  if (data?.Status !== undefined) view.setInt32(17, Number(data.Status), true);
  // 0x15: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(21, Number(data.uIEsOffset), true);
  // 0x19: u32
  if (data?.uIEsLength !== undefined) view.setUint32(25, Number(data.uIEsLength), true);
  // 0x1d: pad3
  return buf;
}

export class DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: i32
  get Status(): number {
    return this.view.getInt32(17, true);
  }

  // 0x15: u32
  get uIEsOffset(): number {
    return this.view.getUint32(21, true);
  }

  // 0x19: u32
  get uIEsLength(): number {
    return this.view.getUint32(25, true);
  }

  // 0x1d: pad3

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: i32
  set Status(value: number) {
    this.view.setInt32(17, value, true);
  }

  // 0x15: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(21, value, true);
  }

  // 0x19: u32
  set uIEsLength(value: number) {
    this.view.setUint32(25, value, true);
  }

  // 0x1d: pad3
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS (size: 32)
 */
export interface DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS = 32;

export function allocDOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS(data?: Partial<DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(8, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(17, Number(data.uIEsOffset), true);
  // 0x15: u32
  if (data?.uIEsLength !== undefined) view.setUint32(21, Number(data.uIEsLength), true);
  // 0x19: pad7
  return buf;
}

export class DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u32
  get uIEsOffset(): number {
    return this.view.getUint32(17, true);
  }

  // 0x15: u32
  get uIEsLength(): number {
    return this.view.getUint32(21, true);
  }

  // 0x19: pad7

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(17, value, true);
  }

  // 0x15: u32
  set uIEsLength(value: number) {
    this.view.setUint32(21, value, true);
  }

  // 0x19: pad7
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS (size: 40)
 */
export interface DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** array */
  ReceiverAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** i32 */
  Status: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS = 40;

export function allocDOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS(data?: Partial<DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(8, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x10: pointer
  if (data?.ReceiverAddress !== undefined) view.setBigUint64(16, data.ReceiverAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReceiverAddress))), true);
  // 0x18: u8
  if (data?.DialogToken !== undefined) view.setUint8(24, Number(data.DialogToken));
  // 0x19: i32
  if (data?.Status !== undefined) view.setInt32(25, Number(data.Status), true);
  // 0x1d: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(29, Number(data.uIEsOffset), true);
  // 0x21: u32
  if (data?.uIEsLength !== undefined) view.setUint32(33, Number(data.uIEsLength), true);
  // 0x25: pad3
  return buf;
}

export class DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ReceiverAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u8
  get DialogToken(): number {
    return this.view.getUint8(24);
  }

  // 0x19: i32
  get Status(): number {
    return this.view.getInt32(25, true);
  }

  // 0x1d: u32
  get uIEsOffset(): number {
    return this.view.getUint32(29, true);
  }

  // 0x21: u32
  get uIEsLength(): number {
    return this.view.getUint32(33, true);
  }

  // 0x25: pad3

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ReceiverAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u8
  set DialogToken(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: i32
  set Status(value: number) {
    this.view.setInt32(25, value, true);
  }

  // 0x1d: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(29, value, true);
  }

  // 0x21: u32
  set uIEsLength(value: number) {
    this.view.setUint32(33, value, true);
  }

  // 0x25: pad3
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS (size: 48)
 */
export interface DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  TransmitterDeviceAddress: Deno.PointerValue;
  /** array */
  BSSID: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** ptr */
  RequestContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS = 48;

export function allocDOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS(data?: Partial<DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.TransmitterDeviceAddress !== undefined) view.setBigUint64(8, data.TransmitterDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TransmitterDeviceAddress))), true);
  // 0x10: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(16, data.BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BSSID))), true);
  // 0x18: u8
  if (data?.DialogToken !== undefined) view.setUint8(24, Number(data.DialogToken));
  // 0x19: pad7
  // 0x20: pointer
  if (data?.RequestContext !== undefined) view.setBigUint64(32, data.RequestContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestContext))), true);
  // 0x28: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(40, Number(data.uIEsOffset), true);
  // 0x2c: u32
  if (data?.uIEsLength !== undefined) view.setUint32(44, Number(data.uIEsLength), true);
  return buf;
}

export class DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get TransmitterDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u8
  get DialogToken(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x20: pointer
  get RequestContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get uIEsOffset(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get uIEsLength(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set TransmitterDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u8
  set DialogToken(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7

  // 0x20: pointer
  set RequestContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set uIEsLength(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS (size: 32)
 */
export interface DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  ReceiverDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** i32 */
  Status: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS = 32;

export function allocDOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS(data?: Partial<DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.ReceiverDeviceAddress !== undefined) view.setBigUint64(8, data.ReceiverDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReceiverDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: i32
  if (data?.Status !== undefined) view.setInt32(17, Number(data.Status), true);
  // 0x15: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(21, Number(data.uIEsOffset), true);
  // 0x19: u32
  if (data?.uIEsLength !== undefined) view.setUint32(25, Number(data.uIEsLength), true);
  // 0x1d: pad3
  return buf;
}

export class DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ReceiverDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: i32
  get Status(): number {
    return this.view.getInt32(17, true);
  }

  // 0x15: u32
  get uIEsOffset(): number {
    return this.view.getUint32(21, true);
  }

  // 0x19: u32
  get uIEsLength(): number {
    return this.view.getUint32(25, true);
  }

  // 0x1d: pad3

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ReceiverDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: i32
  set Status(value: number) {
    this.view.setInt32(17, value, true);
  }

  // 0x15: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(21, value, true);
  }

  // 0x19: u32
  set uIEsLength(value: number) {
    this.view.setUint32(25, value, true);
  }

  // 0x1d: pad3
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS (size: 40)
 */
export interface DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  TransmitterDeviceAddress: Deno.PointerValue;
  /** array */
  BSSID: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS = 40;

export function allocDOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS(data?: Partial<DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.TransmitterDeviceAddress !== undefined) view.setBigUint64(8, data.TransmitterDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TransmitterDeviceAddress))), true);
  // 0x10: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(16, data.BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BSSID))), true);
  // 0x18: u8
  if (data?.DialogToken !== undefined) view.setUint8(24, Number(data.DialogToken));
  // 0x19: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(25, Number(data.uIEsOffset), true);
  // 0x1d: u32
  if (data?.uIEsLength !== undefined) view.setUint32(29, Number(data.uIEsLength), true);
  // 0x21: pad7
  return buf;
}

export class DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get TransmitterDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u8
  get DialogToken(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u32
  get uIEsOffset(): number {
    return this.view.getUint32(25, true);
  }

  // 0x1d: u32
  get uIEsLength(): number {
    return this.view.getUint32(29, true);
  }

  // 0x21: pad7

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set TransmitterDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u8
  set DialogToken(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(25, value, true);
  }

  // 0x1d: u32
  set uIEsLength(value: number) {
    this.view.setUint32(29, value, true);
  }

  // 0x21: pad7
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS (size: 40)
 */
export interface DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** array */
  ReceiverAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** i32 */
  Status: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS = 40;

export function allocDOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS(data?: Partial<DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(8, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x10: pointer
  if (data?.ReceiverAddress !== undefined) view.setBigUint64(16, data.ReceiverAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReceiverAddress))), true);
  // 0x18: u8
  if (data?.DialogToken !== undefined) view.setUint8(24, Number(data.DialogToken));
  // 0x19: i32
  if (data?.Status !== undefined) view.setInt32(25, Number(data.Status), true);
  // 0x1d: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(29, Number(data.uIEsOffset), true);
  // 0x21: u32
  if (data?.uIEsLength !== undefined) view.setUint32(33, Number(data.uIEsLength), true);
  // 0x25: pad3
  return buf;
}

export class DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ReceiverAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u8
  get DialogToken(): number {
    return this.view.getUint8(24);
  }

  // 0x19: i32
  get Status(): number {
    return this.view.getInt32(25, true);
  }

  // 0x1d: u32
  get uIEsOffset(): number {
    return this.view.getUint32(29, true);
  }

  // 0x21: u32
  get uIEsLength(): number {
    return this.view.getUint32(33, true);
  }

  // 0x25: pad3

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ReceiverAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u8
  set DialogToken(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: i32
  set Status(value: number) {
    this.view.setInt32(25, value, true);
  }

  // 0x1d: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(29, value, true);
  }

  // 0x21: u32
  set uIEsLength(value: number) {
    this.view.setUint32(33, value, true);
  }

  // 0x25: pad3
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS (size: 48)
 */
export interface DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  TransmitterDeviceAddress: Deno.PointerValue;
  /** array */
  BSSID: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** ptr */
  RequestContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS = 48;

export function allocDOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS(data?: Partial<DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.TransmitterDeviceAddress !== undefined) view.setBigUint64(8, data.TransmitterDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TransmitterDeviceAddress))), true);
  // 0x10: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(16, data.BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BSSID))), true);
  // 0x18: u8
  if (data?.DialogToken !== undefined) view.setUint8(24, Number(data.DialogToken));
  // 0x19: pad7
  // 0x20: pointer
  if (data?.RequestContext !== undefined) view.setBigUint64(32, data.RequestContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestContext))), true);
  // 0x28: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(40, Number(data.uIEsOffset), true);
  // 0x2c: u32
  if (data?.uIEsLength !== undefined) view.setUint32(44, Number(data.uIEsLength), true);
  return buf;
}

export class DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get TransmitterDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u8
  get DialogToken(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x20: pointer
  get RequestContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get uIEsOffset(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get uIEsLength(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set TransmitterDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u8
  set DialogToken(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7

  // 0x20: pointer
  set RequestContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set uIEsLength(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS (size: 32)
 */
export interface DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  ReceiverDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** i32 */
  Status: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS = 32;

export function allocDOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS(data?: Partial<DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.ReceiverDeviceAddress !== undefined) view.setBigUint64(8, data.ReceiverDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReceiverDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: i32
  if (data?.Status !== undefined) view.setInt32(17, Number(data.Status), true);
  // 0x15: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(21, Number(data.uIEsOffset), true);
  // 0x19: u32
  if (data?.uIEsLength !== undefined) view.setUint32(25, Number(data.uIEsLength), true);
  // 0x1d: pad3
  return buf;
}

export class DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ReceiverDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: i32
  get Status(): number {
    return this.view.getInt32(17, true);
  }

  // 0x15: u32
  get uIEsOffset(): number {
    return this.view.getUint32(21, true);
  }

  // 0x19: u32
  get uIEsLength(): number {
    return this.view.getUint32(25, true);
  }

  // 0x1d: pad3

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ReceiverDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: i32
  set Status(value: number) {
    this.view.setInt32(17, value, true);
  }

  // 0x15: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(21, value, true);
  }

  // 0x19: u32
  set uIEsLength(value: number) {
    this.view.setUint32(25, value, true);
  }

  // 0x1d: pad3
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS (size: 40)
 */
export interface DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  TransmitterDeviceAddress: Deno.PointerValue;
  /** array */
  BSSID: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS = 40;

export function allocDOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS(data?: Partial<DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.TransmitterDeviceAddress !== undefined) view.setBigUint64(8, data.TransmitterDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TransmitterDeviceAddress))), true);
  // 0x10: pointer
  if (data?.BSSID !== undefined) view.setBigUint64(16, data.BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BSSID))), true);
  // 0x18: u8
  if (data?.DialogToken !== undefined) view.setUint8(24, Number(data.DialogToken));
  // 0x19: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(25, Number(data.uIEsOffset), true);
  // 0x1d: u32
  if (data?.uIEsLength !== undefined) view.setUint32(29, Number(data.uIEsLength), true);
  // 0x21: pad7
  return buf;
}

export class DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get TransmitterDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u8
  get DialogToken(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u32
  get uIEsOffset(): number {
    return this.view.getUint32(25, true);
  }

  // 0x1d: u32
  get uIEsLength(): number {
    return this.view.getUint32(29, true);
  }

  // 0x21: pad7

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set TransmitterDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u8
  set DialogToken(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(25, value, true);
  }

  // 0x1d: u32
  set uIEsLength(value: number) {
    this.view.setUint32(29, value, true);
  }

  // 0x21: pad7
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ANQP_QUERY_COMPLETE_PARAMETERS (size: 32)
 */
export interface DOT11_ANQP_QUERY_COMPLETE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_ANQP_QUERY_RESULT */
  Status: DOT11_ANQP_QUERY_RESULT;
  /** Windows.Win32.Foundation.HANDLE */
  hContext: Uint8Array | Deno.PointerValue;
  /** u32 */
  uResponseLength: number;
}

export const sizeofDOT11_ANQP_QUERY_COMPLETE_PARAMETERS = 32;

export function allocDOT11_ANQP_QUERY_COMPLETE_PARAMETERS(data?: Partial<DOT11_ANQP_QUERY_COMPLETE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ANQP_QUERY_COMPLETE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: i32
  if (data?.Status !== undefined) view.setInt32(8, Number(data.Status), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hContext !== undefined) view.setBigUint64(16, data.hContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hContext))), true);
  // 0x18: u32
  if (data?.uResponseLength !== undefined) view.setUint32(24, Number(data.uResponseLength), true);
  // 0x1c: pad4
  return buf;
}

export class DOT11_ANQP_QUERY_COMPLETE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get Status(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uResponseLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set Status(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set uResponseLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_DEVICE_CAPABILITY_CONFIG (size: 64)
 */
export interface DOT11_WFD_DEVICE_CAPABILITY_CONFIG {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bServiceDiscoveryEnabled: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bClientDiscoverabilityEnabled: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bConcurrentOperationSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bInfrastructureManagementEnabled: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDeviceLimitReached: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bInvitationProcedureEnabled: Uint8Array | Deno.PointerValue;
  /** u32 */
  WPSVersionsEnabled: number;
}

export const sizeofDOT11_WFD_DEVICE_CAPABILITY_CONFIG = 64;

export function allocDOT11_WFD_DEVICE_CAPABILITY_CONFIG(data?: Partial<DOT11_WFD_DEVICE_CAPABILITY_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_DEVICE_CAPABILITY_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.bServiceDiscoveryEnabled !== undefined) view.setBigUint64(8, data.bServiceDiscoveryEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bServiceDiscoveryEnabled))), true);
  // 0x10: pointer
  if (data?.bClientDiscoverabilityEnabled !== undefined) view.setBigUint64(16, data.bClientDiscoverabilityEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bClientDiscoverabilityEnabled))), true);
  // 0x18: pointer
  if (data?.bConcurrentOperationSupported !== undefined) view.setBigUint64(24, data.bConcurrentOperationSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bConcurrentOperationSupported))), true);
  // 0x20: pointer
  if (data?.bInfrastructureManagementEnabled !== undefined) view.setBigUint64(32, data.bInfrastructureManagementEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bInfrastructureManagementEnabled))), true);
  // 0x28: pointer
  if (data?.bDeviceLimitReached !== undefined) view.setBigUint64(40, data.bDeviceLimitReached === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bDeviceLimitReached))), true);
  // 0x30: pointer
  if (data?.bInvitationProcedureEnabled !== undefined) view.setBigUint64(48, data.bInvitationProcedureEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bInvitationProcedureEnabled))), true);
  // 0x38: u32
  if (data?.WPSVersionsEnabled !== undefined) view.setUint32(56, Number(data.WPSVersionsEnabled), true);
  // 0x3c: pad4
  return buf;
}

export class DOT11_WFD_DEVICE_CAPABILITY_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bServiceDiscoveryEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bClientDiscoverabilityEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get bConcurrentOperationSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get bInfrastructureManagementEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get bDeviceLimitReached(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get bInvitationProcedureEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get WPSVersionsEnabled(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bServiceDiscoveryEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bClientDiscoverabilityEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set bConcurrentOperationSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set bInfrastructureManagementEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set bDeviceLimitReached(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set bInvitationProcedureEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set WPSVersionsEnabled(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG (size: 56)
 */
export interface DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bPersistentGroupEnabled: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bIntraBSSDistributionSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bCrossConnectionSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bPersistentReconnectSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bGroupFormationEnabled: Uint8Array | Deno.PointerValue;
  /** u32 */
  uMaximumGroupLimit: number;
}

export const sizeofDOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG = 56;

export function allocDOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG(data?: Partial<DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.bPersistentGroupEnabled !== undefined) view.setBigUint64(8, data.bPersistentGroupEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bPersistentGroupEnabled))), true);
  // 0x10: pointer
  if (data?.bIntraBSSDistributionSupported !== undefined) view.setBigUint64(16, data.bIntraBSSDistributionSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bIntraBSSDistributionSupported))), true);
  // 0x18: pointer
  if (data?.bCrossConnectionSupported !== undefined) view.setBigUint64(24, data.bCrossConnectionSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bCrossConnectionSupported))), true);
  // 0x20: pointer
  if (data?.bPersistentReconnectSupported !== undefined) view.setBigUint64(32, data.bPersistentReconnectSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bPersistentReconnectSupported))), true);
  // 0x28: pointer
  if (data?.bGroupFormationEnabled !== undefined) view.setBigUint64(40, data.bGroupFormationEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bGroupFormationEnabled))), true);
  // 0x30: u32
  if (data?.uMaximumGroupLimit !== undefined) view.setUint32(48, Number(data.uMaximumGroupLimit), true);
  // 0x34: pad4
  return buf;
}

export class DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bPersistentGroupEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bIntraBSSDistributionSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get bCrossConnectionSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get bPersistentReconnectSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get bGroupFormationEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get uMaximumGroupLimit(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bPersistentGroupEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bIntraBSSDistributionSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set bCrossConnectionSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set bPersistentReconnectSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set bGroupFormationEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set uMaximumGroupLimit(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2 (size: 64)
 */
export interface DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2 {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bPersistentGroupEnabled: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bIntraBSSDistributionSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bCrossConnectionSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bPersistentReconnectSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bGroupFormationEnabled: Uint8Array | Deno.PointerValue;
  /** u32 */
  uMaximumGroupLimit: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bEapolKeyIpAddressAllocationSupported: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2 = 64;

export function allocDOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2(data?: Partial<DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.bPersistentGroupEnabled !== undefined) view.setBigUint64(8, data.bPersistentGroupEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bPersistentGroupEnabled))), true);
  // 0x10: pointer
  if (data?.bIntraBSSDistributionSupported !== undefined) view.setBigUint64(16, data.bIntraBSSDistributionSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bIntraBSSDistributionSupported))), true);
  // 0x18: pointer
  if (data?.bCrossConnectionSupported !== undefined) view.setBigUint64(24, data.bCrossConnectionSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bCrossConnectionSupported))), true);
  // 0x20: pointer
  if (data?.bPersistentReconnectSupported !== undefined) view.setBigUint64(32, data.bPersistentReconnectSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bPersistentReconnectSupported))), true);
  // 0x28: pointer
  if (data?.bGroupFormationEnabled !== undefined) view.setBigUint64(40, data.bGroupFormationEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bGroupFormationEnabled))), true);
  // 0x30: u32
  if (data?.uMaximumGroupLimit !== undefined) view.setUint32(48, Number(data.uMaximumGroupLimit), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.bEapolKeyIpAddressAllocationSupported !== undefined) view.setBigUint64(56, data.bEapolKeyIpAddressAllocationSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bEapolKeyIpAddressAllocationSupported))), true);
  return buf;
}

export class DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bPersistentGroupEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get bIntraBSSDistributionSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get bCrossConnectionSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get bPersistentReconnectSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get bGroupFormationEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get uMaximumGroupLimit(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get bEapolKeyIpAddressAllocationSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bPersistentGroupEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set bIntraBSSDistributionSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set bCrossConnectionSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set bPersistentReconnectSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set bGroupFormationEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set uMaximumGroupLimit(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set bEapolKeyIpAddressAllocationSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_DEVICE_INFO (size: 40)
 */
export interface DOT11_WFD_DEVICE_INFO {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  DeviceAddress: Deno.PointerValue;
  /** u16 */
  ConfigMethods: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_DEVICE_TYPE */
  PrimaryDeviceType: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WPS_DEVICE_NAME */
  DeviceName: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_WFD_DEVICE_INFO = 40;

export function allocDOT11_WFD_DEVICE_INFO(data?: Partial<DOT11_WFD_DEVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_DEVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.DeviceAddress !== undefined) view.setBigUint64(8, data.DeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceAddress))), true);
  // 0x10: u16
  if (data?.ConfigMethods !== undefined) view.setUint16(16, Number(data.ConfigMethods), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.PrimaryDeviceType !== undefined) view.setBigUint64(24, data.PrimaryDeviceType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrimaryDeviceType))), true);
  // 0x20: pointer
  if (data?.DeviceName !== undefined) view.setBigUint64(32, data.DeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceName))), true);
  return buf;
}

export class DOT11_WFD_DEVICE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get ConfigMethods(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get PrimaryDeviceType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set ConfigMethods(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set PrimaryDeviceType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST (size: 24)
 */
export interface DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uNumOfEntries: number;
  /** u32 */
  uTotalNumOfEntries: number;
  /** array */
  SecondaryDeviceTypes: Deno.PointerValue;
}

export const sizeofDOT11_WFD_SECONDARY_DEVICE_TYPE_LIST = 24;

export function allocDOT11_WFD_SECONDARY_DEVICE_TYPE_LIST(data?: Partial<DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_SECONDARY_DEVICE_TYPE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(8, Number(data.uNumOfEntries), true);
  // 0x0c: u32
  if (data?.uTotalNumOfEntries !== undefined) view.setUint32(12, Number(data.uTotalNumOfEntries), true);
  // 0x10: pointer
  if (data?.SecondaryDeviceTypes !== undefined) view.setBigUint64(16, data.SecondaryDeviceTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SecondaryDeviceTypes))), true);
  return buf;
}

export class DOT11_WFD_SECONDARY_DEVICE_TYPE_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uTotalNumOfEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get SecondaryDeviceTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uTotalNumOfEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set SecondaryDeviceTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_DISCOVER_DEVICE_FILTER (size: 24)
 */
export interface DOT11_WFD_DISCOVER_DEVICE_FILTER {
  /** array */
  DeviceID: Deno.PointerValue;
  /** u8 */
  ucBitmask: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  GroupSSID: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_WFD_DISCOVER_DEVICE_FILTER = 24;

export function allocDOT11_WFD_DISCOVER_DEVICE_FILTER(data?: Partial<DOT11_WFD_DISCOVER_DEVICE_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_DISCOVER_DEVICE_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceID !== undefined) view.setBigUint64(0, data.DeviceID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceID))), true);
  // 0x08: u8
  if (data?.ucBitmask !== undefined) view.setUint8(8, Number(data.ucBitmask));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.GroupSSID !== undefined) view.setBigUint64(16, data.GroupSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GroupSSID))), true);
  return buf;
}

export class DOT11_WFD_DISCOVER_DEVICE_FILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get ucBitmask(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get GroupSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DeviceID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set ucBitmask(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set GroupSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_DISCOVER_REQUEST (size: 48)
 */
export interface DOT11_WFD_DISCOVER_REQUEST {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_DISCOVER_TYPE */
  DiscoverType: DOT11_WFD_DISCOVER_TYPE;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_SCAN_TYPE */
  ScanType: DOT11_WFD_SCAN_TYPE;
  /** u32 */
  uDiscoverTimeout: number;
  /** u32 */
  uDeviceFilterListOffset: number;
  /** u32 */
  uNumDeviceFilters: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bForceScanLegacyNetworks: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_WFD_DISCOVER_REQUEST = 48;

export function allocDOT11_WFD_DISCOVER_REQUEST(data?: Partial<DOT11_WFD_DISCOVER_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_DISCOVER_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: i32
  if (data?.DiscoverType !== undefined) view.setInt32(8, Number(data.DiscoverType), true);
  // 0x0c: i32
  if (data?.ScanType !== undefined) view.setInt32(12, Number(data.ScanType), true);
  // 0x10: u32
  if (data?.uDiscoverTimeout !== undefined) view.setUint32(16, Number(data.uDiscoverTimeout), true);
  // 0x14: u32
  if (data?.uDeviceFilterListOffset !== undefined) view.setUint32(20, Number(data.uDeviceFilterListOffset), true);
  // 0x18: u32
  if (data?.uNumDeviceFilters !== undefined) view.setUint32(24, Number(data.uNumDeviceFilters), true);
  // 0x1c: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(28, Number(data.uIEsOffset), true);
  // 0x20: u32
  if (data?.uIEsLength !== undefined) view.setUint32(32, Number(data.uIEsLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.bForceScanLegacyNetworks !== undefined) view.setBigUint64(40, data.bForceScanLegacyNetworks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bForceScanLegacyNetworks))), true);
  return buf;
}

export class DOT11_WFD_DISCOVER_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get DiscoverType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get ScanType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get uDiscoverTimeout(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uDeviceFilterListOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uNumDeviceFilters(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get uIEsOffset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get uIEsLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get bForceScanLegacyNetworks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set DiscoverType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set ScanType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set uDiscoverTimeout(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uDeviceFilterListOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uNumDeviceFilters(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set uIEsLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set bForceScanLegacyNetworks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_DEVICE_ENTRY (size: 104)
 */
export interface DOT11_WFD_DEVICE_ENTRY {
  /** u32 */
  uPhyId: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO */
  PhySpecificInfo: Uint8Array | Deno.PointerValue;
  /** array */
  dot11BSSID: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BSSType: DOT11_BSS_TYPE;
  /** array */
  TransmitterAddress: Deno.PointerValue;
  /** i32 */
  lRSSI: number;
  /** u32 */
  uLinkQuality: number;
  /** u16 */
  usBeaconPeriod: number;
  /** u64 */
  ullTimestamp: Deno.PointerValue;
  /** u64 */
  ullBeaconHostTimestamp: Deno.PointerValue;
  /** u64 */
  ullProbeResponseHostTimestamp: Deno.PointerValue;
  /** u16 */
  usCapabilityInformation: number;
  /** u32 */
  uBeaconIEsOffset: number;
  /** u32 */
  uBeaconIEsLength: number;
  /** u32 */
  uProbeResponseIEsOffset: number;
  /** u32 */
  uProbeResponseIEsLength: number;
}

export const sizeofDOT11_WFD_DEVICE_ENTRY = 104;

export function allocDOT11_WFD_DEVICE_ENTRY(data?: Partial<DOT11_WFD_DEVICE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_DEVICE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uPhyId !== undefined) view.setUint32(0, Number(data.uPhyId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PhySpecificInfo !== undefined) view.setBigUint64(8, data.PhySpecificInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhySpecificInfo))), true);
  // 0x10: pointer
  if (data?.dot11BSSID !== undefined) view.setBigUint64(16, data.dot11BSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11BSSID))), true);
  // 0x18: i32
  if (data?.dot11BSSType !== undefined) view.setInt32(24, Number(data.dot11BSSType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.TransmitterAddress !== undefined) view.setBigUint64(32, data.TransmitterAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TransmitterAddress))), true);
  // 0x28: i32
  if (data?.lRSSI !== undefined) view.setInt32(40, Number(data.lRSSI), true);
  // 0x2c: u32
  if (data?.uLinkQuality !== undefined) view.setUint32(44, Number(data.uLinkQuality), true);
  // 0x30: u16
  if (data?.usBeaconPeriod !== undefined) view.setUint16(48, Number(data.usBeaconPeriod), true);
  // 0x32: pad6
  // 0x38: u64
  if (data?.ullTimestamp !== undefined) view.setBigUint64(56, BigInt(data.ullTimestamp), true);
  // 0x40: u64
  if (data?.ullBeaconHostTimestamp !== undefined) view.setBigUint64(64, BigInt(data.ullBeaconHostTimestamp), true);
  // 0x48: u64
  if (data?.ullProbeResponseHostTimestamp !== undefined) view.setBigUint64(72, BigInt(data.ullProbeResponseHostTimestamp), true);
  // 0x50: u16
  if (data?.usCapabilityInformation !== undefined) view.setUint16(80, Number(data.usCapabilityInformation), true);
  // 0x52: u32
  if (data?.uBeaconIEsOffset !== undefined) view.setUint32(82, Number(data.uBeaconIEsOffset), true);
  // 0x56: u32
  if (data?.uBeaconIEsLength !== undefined) view.setUint32(86, Number(data.uBeaconIEsLength), true);
  // 0x5a: u32
  if (data?.uProbeResponseIEsOffset !== undefined) view.setUint32(90, Number(data.uProbeResponseIEsOffset), true);
  // 0x5e: u32
  if (data?.uProbeResponseIEsLength !== undefined) view.setUint32(94, Number(data.uProbeResponseIEsLength), true);
  // 0x62: pad6
  return buf;
}

export class DOT11_WFD_DEVICE_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uPhyId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PhySpecificInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get dot11BSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get dot11BSSType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get TransmitterAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get lRSSI(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get uLinkQuality(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u16
  get usBeaconPeriod(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: pad6

  // 0x38: u64
  get ullTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get ullBeaconHostTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get ullProbeResponseHostTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u16
  get usCapabilityInformation(): number {
    return this.view.getUint16(80, true);
  }

  // 0x52: u32
  get uBeaconIEsOffset(): number {
    return this.view.getUint32(82, true);
  }

  // 0x56: u32
  get uBeaconIEsLength(): number {
    return this.view.getUint32(86, true);
  }

  // 0x5a: u32
  get uProbeResponseIEsOffset(): number {
    return this.view.getUint32(90, true);
  }

  // 0x5e: u32
  get uProbeResponseIEsLength(): number {
    return this.view.getUint32(94, true);
  }

  // 0x62: pad6

  // 0x00: u32
  set uPhyId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PhySpecificInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set dot11BSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set dot11BSSType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set TransmitterAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set lRSSI(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set uLinkQuality(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u16
  set usBeaconPeriod(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: pad6

  // 0x38: u64
  set ullTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set ullBeaconHostTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set ullProbeResponseHostTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u16
  set usCapabilityInformation(value: number) {
    this.view.setUint16(80, value, true);
  }

  // 0x52: u32
  set uBeaconIEsOffset(value: number) {
    this.view.setUint32(82, value, true);
  }

  // 0x56: u32
  set uBeaconIEsLength(value: number) {
    this.view.setUint32(86, value, true);
  }

  // 0x5a: u32
  set uProbeResponseIEsOffset(value: number) {
    this.view.setUint32(90, value, true);
  }

  // 0x5e: u32
  set uProbeResponseIEsLength(value: number) {
    this.view.setUint32(94, value, true);
  }

  // 0x62: pad6
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_ADDITIONAL_IE (size: 32)
 */
export interface DOT11_WFD_ADDITIONAL_IE {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  uBeaconIEsOffset: number;
  /** u32 */
  uBeaconIEsLength: number;
  /** u32 */
  uProbeResponseIEsOffset: number;
  /** u32 */
  uProbeResponseIEsLength: number;
  /** u32 */
  uDefaultRequestIEsOffset: number;
  /** u32 */
  uDefaultRequestIEsLength: number;
}

export const sizeofDOT11_WFD_ADDITIONAL_IE = 32;

export function allocDOT11_WFD_ADDITIONAL_IE(data?: Partial<DOT11_WFD_ADDITIONAL_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_ADDITIONAL_IE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.uBeaconIEsOffset !== undefined) view.setUint32(8, Number(data.uBeaconIEsOffset), true);
  // 0x0c: u32
  if (data?.uBeaconIEsLength !== undefined) view.setUint32(12, Number(data.uBeaconIEsLength), true);
  // 0x10: u32
  if (data?.uProbeResponseIEsOffset !== undefined) view.setUint32(16, Number(data.uProbeResponseIEsOffset), true);
  // 0x14: u32
  if (data?.uProbeResponseIEsLength !== undefined) view.setUint32(20, Number(data.uProbeResponseIEsLength), true);
  // 0x18: u32
  if (data?.uDefaultRequestIEsOffset !== undefined) view.setUint32(24, Number(data.uDefaultRequestIEsOffset), true);
  // 0x1c: u32
  if (data?.uDefaultRequestIEsLength !== undefined) view.setUint32(28, Number(data.uDefaultRequestIEsLength), true);
  return buf;
}

export class DOT11_WFD_ADDITIONAL_IEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uBeaconIEsOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uBeaconIEsLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uProbeResponseIEsOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uProbeResponseIEsLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uDefaultRequestIEsOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get uDefaultRequestIEsLength(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uBeaconIEsOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uBeaconIEsLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uProbeResponseIEsOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uProbeResponseIEsLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uDefaultRequestIEsOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set uDefaultRequestIEsLength(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS (size: 64)
 */
export interface DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** u32 */
  uSendTimeout: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GO_INTENT */
  GroupOwnerIntent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_CONFIGURATION_TIMEOUT */
  MinimumConfigTimeout: Uint8Array | Deno.PointerValue;
  /** array */
  IntendedInterfaceAddress: Deno.PointerValue;
  /** u8 */
  GroupCapability: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS = 64;

export function allocDOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS(data?: Partial<DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(8, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: u32
  if (data?.uSendTimeout !== undefined) view.setUint32(17, Number(data.uSendTimeout), true);
  // 0x15: pad3
  // 0x18: pointer
  if (data?.GroupOwnerIntent !== undefined) view.setBigUint64(24, data.GroupOwnerIntent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GroupOwnerIntent))), true);
  // 0x20: pointer
  if (data?.MinimumConfigTimeout !== undefined) view.setBigUint64(32, data.MinimumConfigTimeout === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MinimumConfigTimeout))), true);
  // 0x28: pointer
  if (data?.IntendedInterfaceAddress !== undefined) view.setBigUint64(40, data.IntendedInterfaceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IntendedInterfaceAddress))), true);
  // 0x30: u8
  if (data?.GroupCapability !== undefined) view.setUint8(48, Number(data.GroupCapability));
  // 0x31: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(49, Number(data.uIEsOffset), true);
  // 0x35: u32
  if (data?.uIEsLength !== undefined) view.setUint32(53, Number(data.uIEsLength), true);
  // 0x39: pad7
  return buf;
}

export class DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u32
  get uSendTimeout(): number {
    return this.view.getUint32(17, true);
  }

  // 0x15: pad3

  // 0x18: pointer
  get GroupOwnerIntent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get MinimumConfigTimeout(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get IntendedInterfaceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u8
  get GroupCapability(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u32
  get uIEsOffset(): number {
    return this.view.getUint32(49, true);
  }

  // 0x35: u32
  get uIEsLength(): number {
    return this.view.getUint32(53, true);
  }

  // 0x39: pad7

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u32
  set uSendTimeout(value: number) {
    this.view.setUint32(17, value, true);
  }

  // 0x15: pad3

  // 0x18: pointer
  set GroupOwnerIntent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set MinimumConfigTimeout(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set IntendedInterfaceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u8
  set GroupCapability(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(49, value, true);
  }

  // 0x35: u32
  set uIEsLength(value: number) {
    this.view.setUint32(53, value, true);
  }

  // 0x39: pad7
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS (size: 96)
 */
export interface DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** ptr */
  RequestContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  uSendTimeout: number;
  /** u8 */
  Status: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GO_INTENT */
  GroupOwnerIntent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_CONFIGURATION_TIMEOUT */
  MinimumConfigTimeout: Uint8Array | Deno.PointerValue;
  /** array */
  IntendedInterfaceAddress: Deno.PointerValue;
  /** u8 */
  GroupCapability: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GROUP_ID */
  GroupID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUseGroupID: Uint8Array | Deno.PointerValue;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS = 96;

export function allocDOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS(data?: Partial<DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(8, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.RequestContext !== undefined) view.setBigUint64(24, data.RequestContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestContext))), true);
  // 0x20: u32
  if (data?.uSendTimeout !== undefined) view.setUint32(32, Number(data.uSendTimeout), true);
  // 0x24: u8
  if (data?.Status !== undefined) view.setUint8(36, Number(data.Status));
  // 0x25: pad3
  // 0x28: pointer
  if (data?.GroupOwnerIntent !== undefined) view.setBigUint64(40, data.GroupOwnerIntent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GroupOwnerIntent))), true);
  // 0x30: pointer
  if (data?.MinimumConfigTimeout !== undefined) view.setBigUint64(48, data.MinimumConfigTimeout === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MinimumConfigTimeout))), true);
  // 0x38: pointer
  if (data?.IntendedInterfaceAddress !== undefined) view.setBigUint64(56, data.IntendedInterfaceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IntendedInterfaceAddress))), true);
  // 0x40: u8
  if (data?.GroupCapability !== undefined) view.setUint8(64, Number(data.GroupCapability));
  // 0x41: pad7
  // 0x48: pointer
  if (data?.GroupID !== undefined) view.setBigUint64(72, data.GroupID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GroupID))), true);
  // 0x50: pointer
  if (data?.bUseGroupID !== undefined) view.setBigUint64(80, data.bUseGroupID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bUseGroupID))), true);
  // 0x58: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(88, Number(data.uIEsOffset), true);
  // 0x5c: u32
  if (data?.uIEsLength !== undefined) view.setUint32(92, Number(data.uIEsLength), true);
  return buf;
}

export class DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get RequestContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get uSendTimeout(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u8
  get Status(): number {
    return this.view.getUint8(36);
  }

  // 0x25: pad3

  // 0x28: pointer
  get GroupOwnerIntent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get MinimumConfigTimeout(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get IntendedInterfaceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u8
  get GroupCapability(): number {
    return this.view.getUint8(64);
  }

  // 0x41: pad7

  // 0x48: pointer
  get GroupID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get bUseGroupID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get uIEsOffset(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get uIEsLength(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set RequestContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set uSendTimeout(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u8
  set Status(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: pad3

  // 0x28: pointer
  set GroupOwnerIntent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set MinimumConfigTimeout(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set IntendedInterfaceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u8
  set GroupCapability(value: number) {
    this.view.setUint8(64, value);
  }

  // 0x41: pad7

  // 0x48: pointer
  set GroupID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set bUseGroupID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set uIEsLength(value: number) {
    this.view.setUint32(92, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS (size: 64)
 */
export interface DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** ptr */
  ResponseContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  uSendTimeout: number;
  /** u8 */
  Status: number;
  /** u8 */
  GroupCapability: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GROUP_ID */
  GroupID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUseGroupID: Uint8Array | Deno.PointerValue;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS = 64;

export function allocDOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS(data?: Partial<DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(8, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.ResponseContext !== undefined) view.setBigUint64(24, data.ResponseContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ResponseContext))), true);
  // 0x20: u32
  if (data?.uSendTimeout !== undefined) view.setUint32(32, Number(data.uSendTimeout), true);
  // 0x24: u8
  if (data?.Status !== undefined) view.setUint8(36, Number(data.Status));
  // 0x25: u8
  if (data?.GroupCapability !== undefined) view.setUint8(37, Number(data.GroupCapability));
  // 0x26: pad2
  // 0x28: pointer
  if (data?.GroupID !== undefined) view.setBigUint64(40, data.GroupID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GroupID))), true);
  // 0x30: pointer
  if (data?.bUseGroupID !== undefined) view.setBigUint64(48, data.bUseGroupID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bUseGroupID))), true);
  // 0x38: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(56, Number(data.uIEsOffset), true);
  // 0x3c: u32
  if (data?.uIEsLength !== undefined) view.setUint32(60, Number(data.uIEsLength), true);
  return buf;
}

export class DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get ResponseContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get uSendTimeout(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u8
  get Status(): number {
    return this.view.getUint8(36);
  }

  // 0x25: u8
  get GroupCapability(): number {
    return this.view.getUint8(37);
  }

  // 0x26: pad2

  // 0x28: pointer
  get GroupID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get bUseGroupID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get uIEsOffset(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get uIEsLength(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set ResponseContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set uSendTimeout(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u8
  set Status(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: u8
  set GroupCapability(value: number) {
    this.view.setUint8(37, value);
  }

  // 0x26: pad2

  // 0x28: pointer
  set GroupID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set bUseGroupID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set uIEsLength(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_INVITATION_FLAGS (size: 8)
 */
export interface DOT11_WFD_INVITATION_FLAGS {
  /** u8 */
  _bitfield: number;
}

export const sizeofDOT11_WFD_INVITATION_FLAGS = 8;

export function allocDOT11_WFD_INVITATION_FLAGS(data?: Partial<DOT11_WFD_INVITATION_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_INVITATION_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

export class DOT11_WFD_INVITATION_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get _bitfield(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set _bitfield(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SEND_INVITATION_REQUEST_PARAMETERS (size: 104)
 */
export interface DOT11_SEND_INVITATION_REQUEST_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** u32 */
  uSendTimeout: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_CONFIGURATION_TIMEOUT */
  MinimumConfigTimeout: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_INVITATION_FLAGS */
  InvitationFlags: Uint8Array | Deno.PointerValue;
  /** array */
  GroupBSSID: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUseGroupBSSID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_CHANNEL */
  OperatingChannel: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUseSpecifiedOperatingChannel: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GROUP_ID */
  GroupID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bLocalGO: Uint8Array | Deno.PointerValue;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_SEND_INVITATION_REQUEST_PARAMETERS = 104;

export function allocDOT11_SEND_INVITATION_REQUEST_PARAMETERS(data?: Partial<DOT11_SEND_INVITATION_REQUEST_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SEND_INVITATION_REQUEST_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u8
  if (data?.DialogToken !== undefined) view.setUint8(8, Number(data.DialogToken));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(16, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x18: u32
  if (data?.uSendTimeout !== undefined) view.setUint32(24, Number(data.uSendTimeout), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.MinimumConfigTimeout !== undefined) view.setBigUint64(32, data.MinimumConfigTimeout === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MinimumConfigTimeout))), true);
  // 0x28: pointer
  if (data?.InvitationFlags !== undefined) view.setBigUint64(40, data.InvitationFlags === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InvitationFlags))), true);
  // 0x30: pointer
  if (data?.GroupBSSID !== undefined) view.setBigUint64(48, data.GroupBSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GroupBSSID))), true);
  // 0x38: pointer
  if (data?.bUseGroupBSSID !== undefined) view.setBigUint64(56, data.bUseGroupBSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bUseGroupBSSID))), true);
  // 0x40: pointer
  if (data?.OperatingChannel !== undefined) view.setBigUint64(64, data.OperatingChannel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OperatingChannel))), true);
  // 0x48: pointer
  if (data?.bUseSpecifiedOperatingChannel !== undefined) view.setBigUint64(72, data.bUseSpecifiedOperatingChannel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bUseSpecifiedOperatingChannel))), true);
  // 0x50: pointer
  if (data?.GroupID !== undefined) view.setBigUint64(80, data.GroupID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GroupID))), true);
  // 0x58: pointer
  if (data?.bLocalGO !== undefined) view.setBigUint64(88, data.bLocalGO === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bLocalGO))), true);
  // 0x60: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(96, Number(data.uIEsOffset), true);
  // 0x64: u32
  if (data?.uIEsLength !== undefined) view.setUint32(100, Number(data.uIEsLength), true);
  return buf;
}

export class DOT11_SEND_INVITATION_REQUEST_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get DialogToken(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uSendTimeout(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get MinimumConfigTimeout(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get InvitationFlags(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get GroupBSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get bUseGroupBSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get OperatingChannel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get bUseSpecifiedOperatingChannel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get GroupID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get bLocalGO(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get uIEsOffset(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get uIEsLength(): number {
    return this.view.getUint32(100, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set DialogToken(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set uSendTimeout(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set MinimumConfigTimeout(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set InvitationFlags(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set GroupBSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set bUseGroupBSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set OperatingChannel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set bUseSpecifiedOperatingChannel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set GroupID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set bLocalGO(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set uIEsLength(value: number) {
    this.view.setUint32(100, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SEND_INVITATION_RESPONSE_PARAMETERS (size: 88)
 */
export interface DOT11_SEND_INVITATION_RESPONSE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  ReceiverDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** ptr */
  RequestContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  uSendTimeout: number;
  /** u8 */
  Status: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_CONFIGURATION_TIMEOUT */
  MinimumConfigTimeout: Uint8Array | Deno.PointerValue;
  /** array */
  GroupBSSID: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUseGroupBSSID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_CHANNEL */
  OperatingChannel: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUseSpecifiedOperatingChannel: Uint8Array | Deno.PointerValue;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_SEND_INVITATION_RESPONSE_PARAMETERS = 88;

export function allocDOT11_SEND_INVITATION_RESPONSE_PARAMETERS(data?: Partial<DOT11_SEND_INVITATION_RESPONSE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SEND_INVITATION_RESPONSE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.ReceiverDeviceAddress !== undefined) view.setBigUint64(8, data.ReceiverDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReceiverDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.RequestContext !== undefined) view.setBigUint64(24, data.RequestContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestContext))), true);
  // 0x20: u32
  if (data?.uSendTimeout !== undefined) view.setUint32(32, Number(data.uSendTimeout), true);
  // 0x24: u8
  if (data?.Status !== undefined) view.setUint8(36, Number(data.Status));
  // 0x25: pad3
  // 0x28: pointer
  if (data?.MinimumConfigTimeout !== undefined) view.setBigUint64(40, data.MinimumConfigTimeout === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MinimumConfigTimeout))), true);
  // 0x30: pointer
  if (data?.GroupBSSID !== undefined) view.setBigUint64(48, data.GroupBSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GroupBSSID))), true);
  // 0x38: pointer
  if (data?.bUseGroupBSSID !== undefined) view.setBigUint64(56, data.bUseGroupBSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bUseGroupBSSID))), true);
  // 0x40: pointer
  if (data?.OperatingChannel !== undefined) view.setBigUint64(64, data.OperatingChannel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OperatingChannel))), true);
  // 0x48: pointer
  if (data?.bUseSpecifiedOperatingChannel !== undefined) view.setBigUint64(72, data.bUseSpecifiedOperatingChannel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bUseSpecifiedOperatingChannel))), true);
  // 0x50: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(80, Number(data.uIEsOffset), true);
  // 0x54: u32
  if (data?.uIEsLength !== undefined) view.setUint32(84, Number(data.uIEsLength), true);
  return buf;
}

export class DOT11_SEND_INVITATION_RESPONSE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ReceiverDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get RequestContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get uSendTimeout(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u8
  get Status(): number {
    return this.view.getUint8(36);
  }

  // 0x25: pad3

  // 0x28: pointer
  get MinimumConfigTimeout(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get GroupBSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get bUseGroupBSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get OperatingChannel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get bUseSpecifiedOperatingChannel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get uIEsOffset(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get uIEsLength(): number {
    return this.view.getUint32(84, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ReceiverDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set RequestContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set uSendTimeout(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u8
  set Status(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: pad3

  // 0x28: pointer
  set MinimumConfigTimeout(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set GroupBSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set bUseGroupBSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set OperatingChannel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set bUseSpecifiedOperatingChannel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set uIEsLength(value: number) {
    this.view.setUint32(84, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS (size: 56)
 */
export interface DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** array */
  PeerDeviceAddress: Deno.PointerValue;
  /** u32 */
  uSendTimeout: number;
  /** u8 */
  GroupCapability: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GROUP_ID */
  GroupID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUseGroupID: Uint8Array | Deno.PointerValue;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS = 56;

export function allocDOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS(data?: Partial<DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u8
  if (data?.DialogToken !== undefined) view.setUint8(8, Number(data.DialogToken));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.PeerDeviceAddress !== undefined) view.setBigUint64(16, data.PeerDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerDeviceAddress))), true);
  // 0x18: u32
  if (data?.uSendTimeout !== undefined) view.setUint32(24, Number(data.uSendTimeout), true);
  // 0x1c: u8
  if (data?.GroupCapability !== undefined) view.setUint8(28, Number(data.GroupCapability));
  // 0x1d: pad3
  // 0x20: pointer
  if (data?.GroupID !== undefined) view.setBigUint64(32, data.GroupID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GroupID))), true);
  // 0x28: pointer
  if (data?.bUseGroupID !== undefined) view.setBigUint64(40, data.bUseGroupID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bUseGroupID))), true);
  // 0x30: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(48, Number(data.uIEsOffset), true);
  // 0x34: u32
  if (data?.uIEsLength !== undefined) view.setUint32(52, Number(data.uIEsLength), true);
  return buf;
}

export class DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get DialogToken(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get PeerDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uSendTimeout(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u8
  get GroupCapability(): number {
    return this.view.getUint8(28);
  }

  // 0x1d: pad3

  // 0x20: pointer
  get GroupID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get bUseGroupID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get uIEsOffset(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get uIEsLength(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set DialogToken(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set PeerDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set uSendTimeout(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u8
  set GroupCapability(value: number) {
    this.view.setUint8(28, value);
  }

  // 0x1d: pad3

  // 0x20: pointer
  set GroupID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set bUseGroupID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set uIEsLength(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS (size: 48)
 */
export interface DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** array */
  ReceiverDeviceAddress: Deno.PointerValue;
  /** u8 */
  DialogToken: number;
  /** ptr */
  RequestContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  uSendTimeout: number;
  /** u32 */
  uIEsOffset: number;
  /** u32 */
  uIEsLength: number;
}

export const sizeofDOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS = 48;

export function allocDOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS(data?: Partial<DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.ReceiverDeviceAddress !== undefined) view.setBigUint64(8, data.ReceiverDeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReceiverDeviceAddress))), true);
  // 0x10: u8
  if (data?.DialogToken !== undefined) view.setUint8(16, Number(data.DialogToken));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.RequestContext !== undefined) view.setBigUint64(24, data.RequestContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestContext))), true);
  // 0x20: u32
  if (data?.uSendTimeout !== undefined) view.setUint32(32, Number(data.uSendTimeout), true);
  // 0x24: u32
  if (data?.uIEsOffset !== undefined) view.setUint32(36, Number(data.uIEsOffset), true);
  // 0x28: u32
  if (data?.uIEsLength !== undefined) view.setUint32(40, Number(data.uIEsLength), true);
  // 0x2c: pad4
  return buf;
}

export class DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ReceiverDeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get DialogToken(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get RequestContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get uSendTimeout(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get uIEsOffset(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get uIEsLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ReceiverDeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set DialogToken(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set RequestContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set uSendTimeout(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set uIEsOffset(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set uIEsLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_DEVICE_LISTEN_CHANNEL (size: 16)
 */
export interface DOT11_WFD_DEVICE_LISTEN_CHANNEL {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u8 */
  ChannelNumber: number;
}

export const sizeofDOT11_WFD_DEVICE_LISTEN_CHANNEL = 16;

export function allocDOT11_WFD_DEVICE_LISTEN_CHANNEL(data?: Partial<DOT11_WFD_DEVICE_LISTEN_CHANNEL>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_DEVICE_LISTEN_CHANNEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u8
  if (data?.ChannelNumber !== undefined) view.setUint8(8, Number(data.ChannelNumber));
  // 0x09: pad7
  return buf;
}

export class DOT11_WFD_DEVICE_LISTEN_CHANNELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get ChannelNumber(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set ChannelNumber(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GROUP_START_PARAMETERS (size: 16)
 */
export interface DOT11_WFD_GROUP_START_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_CHANNEL */
  AdvertisedOperatingChannel: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_WFD_GROUP_START_PARAMETERS = 16;

export function allocDOT11_WFD_GROUP_START_PARAMETERS(data?: Partial<DOT11_WFD_GROUP_START_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_GROUP_START_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.AdvertisedOperatingChannel !== undefined) view.setBigUint64(8, data.AdvertisedOperatingChannel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdvertisedOperatingChannel))), true);
  return buf;
}

export class DOT11_WFD_GROUP_START_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get AdvertisedOperatingChannel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set AdvertisedOperatingChannel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_GROUP_JOIN_PARAMETERS (size: 40)
 */
export interface DOT11_WFD_GROUP_JOIN_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_WFD_CHANNEL */
  GOOperatingChannel: Uint8Array | Deno.PointerValue;
  /** u32 */
  GOConfigTime: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bInGroupFormation: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bWaitForWPSReady: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_WFD_GROUP_JOIN_PARAMETERS = 40;

export function allocDOT11_WFD_GROUP_JOIN_PARAMETERS(data?: Partial<DOT11_WFD_GROUP_JOIN_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_WFD_GROUP_JOIN_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.GOOperatingChannel !== undefined) view.setBigUint64(8, data.GOOperatingChannel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GOOperatingChannel))), true);
  // 0x10: u32
  if (data?.GOConfigTime !== undefined) view.setUint32(16, Number(data.GOConfigTime), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.bInGroupFormation !== undefined) view.setBigUint64(24, data.bInGroupFormation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bInGroupFormation))), true);
  // 0x20: pointer
  if (data?.bWaitForWPSReady !== undefined) view.setBigUint64(32, data.bWaitForWPSReady === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bWaitForWPSReady))), true);
  return buf;
}

export class DOT11_WFD_GROUP_JOIN_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get GOOperatingChannel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get GOConfigTime(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get bInGroupFormation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get bWaitForWPSReady(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set GOOperatingChannel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set GOConfigTime(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set bInGroupFormation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set bWaitForWPSReady(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO (size: 16)
 */
export interface DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bEnabled: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO = 16;

export function allocDOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO(data?: Partial<DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.bEnabled !== undefined) view.setBigUint64(8, data.bEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bEnabled))), true);
  return buf;
}

export class DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_POWER_MGMT_MODE_STATUS_INFO (size: 24)
 */
export interface DOT11_POWER_MGMT_MODE_STATUS_INFO {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_POWER_MODE */
  PowerSaveMode: DOT11_POWER_MODE;
  /** u32 */
  uPowerSaveLevel: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_POWER_MODE_REASON */
  Reason: DOT11_POWER_MODE_REASON;
}

export const sizeofDOT11_POWER_MGMT_MODE_STATUS_INFO = 24;

export function allocDOT11_POWER_MGMT_MODE_STATUS_INFO(data?: Partial<DOT11_POWER_MGMT_MODE_STATUS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_POWER_MGMT_MODE_STATUS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: i32
  if (data?.PowerSaveMode !== undefined) view.setInt32(8, Number(data.PowerSaveMode), true);
  // 0x0c: u32
  if (data?.uPowerSaveLevel !== undefined) view.setUint32(12, Number(data.uPowerSaveLevel), true);
  // 0x10: i32
  if (data?.Reason !== undefined) view.setInt32(16, Number(data.Reason), true);
  // 0x14: pad4
  return buf;
}

export class DOT11_POWER_MGMT_MODE_STATUS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get PowerSaveMode(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get uPowerSaveLevel(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get Reason(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set PowerSaveMode(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set uPowerSaveLevel(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set Reason(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_CHANNEL_HINT (size: 8)
 */
export interface DOT11_CHANNEL_HINT {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_TYPE */
  Dot11PhyType: DOT11_PHY_TYPE;
  /** u32 */
  uChannelNumber: number;
}

export const sizeofDOT11_CHANNEL_HINT = 8;

export function allocDOT11_CHANNEL_HINT(data?: Partial<DOT11_CHANNEL_HINT>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_CHANNEL_HINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Dot11PhyType !== undefined) view.setInt32(0, Number(data.Dot11PhyType), true);
  // 0x04: u32
  if (data?.uChannelNumber !== undefined) view.setUint32(4, Number(data.uChannelNumber), true);
  return buf;
}

export class DOT11_CHANNEL_HINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Dot11PhyType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get uChannelNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Dot11PhyType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set uChannelNumber(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_OFFLOAD_NETWORK (size: 24)
 */
export interface DOT11_OFFLOAD_NETWORK {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  Ssid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  UnicastCipher: DOT11_CIPHER_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM */
  AuthAlgo: DOT11_AUTH_ALGORITHM;
  /** array */
  Dot11ChannelHints: Deno.PointerValue;
}

export const sizeofDOT11_OFFLOAD_NETWORK = 24;

export function allocDOT11_OFFLOAD_NETWORK(data?: Partial<DOT11_OFFLOAD_NETWORK>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_OFFLOAD_NETWORK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ssid !== undefined) view.setBigUint64(0, data.Ssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Ssid))), true);
  // 0x08: i32
  if (data?.UnicastCipher !== undefined) view.setInt32(8, Number(data.UnicastCipher), true);
  // 0x0c: i32
  if (data?.AuthAlgo !== undefined) view.setInt32(12, Number(data.AuthAlgo), true);
  // 0x10: pointer
  if (data?.Dot11ChannelHints !== undefined) view.setBigUint64(16, data.Dot11ChannelHints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ChannelHints))), true);
  return buf;
}

export class DOT11_OFFLOAD_NETWORKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Ssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get UnicastCipher(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get AuthAlgo(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get Dot11ChannelHints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Ssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set UnicastCipher(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set AuthAlgo(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set Dot11ChannelHints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_OFFLOAD_NETWORK_LIST_INFO (size: 40)
 */
export interface DOT11_OFFLOAD_NETWORK_LIST_INFO {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulFlags: number;
  /** u32 */
  FastScanPeriod: number;
  /** u32 */
  FastScanIterations: number;
  /** u32 */
  SlowScanPeriod: number;
  /** u32 */
  uNumOfEntries: number;
  /** array */
  offloadNetworkList: Deno.PointerValue;
}

export const sizeofDOT11_OFFLOAD_NETWORK_LIST_INFO = 40;

export function allocDOT11_OFFLOAD_NETWORK_LIST_INFO(data?: Partial<DOT11_OFFLOAD_NETWORK_LIST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_OFFLOAD_NETWORK_LIST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: u32
  if (data?.ulFlags !== undefined) view.setUint32(8, Number(data.ulFlags), true);
  // 0x0c: u32
  if (data?.FastScanPeriod !== undefined) view.setUint32(12, Number(data.FastScanPeriod), true);
  // 0x10: u32
  if (data?.FastScanIterations !== undefined) view.setUint32(16, Number(data.FastScanIterations), true);
  // 0x14: u32
  if (data?.SlowScanPeriod !== undefined) view.setUint32(20, Number(data.SlowScanPeriod), true);
  // 0x18: u32
  if (data?.uNumOfEntries !== undefined) view.setUint32(24, Number(data.uNumOfEntries), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.offloadNetworkList !== undefined) view.setBigUint64(32, data.offloadNetworkList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.offloadNetworkList))), true);
  return buf;
}

export class DOT11_OFFLOAD_NETWORK_LIST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FastScanPeriod(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get FastScanIterations(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SlowScanPeriod(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uNumOfEntries(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get offloadNetworkList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FastScanPeriod(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set FastScanIterations(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SlowScanPeriod(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uNumOfEntries(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set offloadNetworkList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS (size: 16)
 */
export interface DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** i32 */
  Status: number;
}

export const sizeofDOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS = 16;

export function allocDOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS(data?: Partial<DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: i32
  if (data?.Status !== undefined) view.setInt32(8, Number(data.Status), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get Status(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set Status(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_TEST (size: 16)
 */
export interface DOT11_MANUFACTURING_TEST {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_TEST_TYPE */
  dot11ManufacturingTestType: DOT11_MANUFACTURING_TEST_TYPE;
  /** u32 */
  uBufferLength: number;
  /** array */
  ucBuffer: Deno.PointerValue;
}

export const sizeofDOT11_MANUFACTURING_TEST = 16;

export function allocDOT11_MANUFACTURING_TEST(data?: Partial<DOT11_MANUFACTURING_TEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MANUFACTURING_TEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dot11ManufacturingTestType !== undefined) view.setInt32(0, Number(data.dot11ManufacturingTestType), true);
  // 0x04: u32
  if (data?.uBufferLength !== undefined) view.setUint32(4, Number(data.uBufferLength), true);
  // 0x08: pointer
  if (data?.ucBuffer !== undefined) view.setBigUint64(8, data.ucBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBuffer))), true);
  return buf;
}

export class DOT11_MANUFACTURING_TESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dot11ManufacturingTestType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get uBufferLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ucBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set dot11ManufacturingTestType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set uBufferLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ucBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS (size: 40)
 */
export interface DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_SELF_TEST_TYPE */
  SelfTestType: DOT11_MANUFACTURING_SELF_TEST_TYPE;
  /** u32 */
  uTestID: number;
  /** u32 */
  uPinBitMask: number;
  /** ptr */
  pvContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  uBufferLength: number;
  /** array */
  ucBufferIn: Deno.PointerValue;
}

export const sizeofDOT11_MANUFACTURING_SELF_TEST_SET_PARAMS = 40;

export function allocDOT11_MANUFACTURING_SELF_TEST_SET_PARAMS(data?: Partial<DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MANUFACTURING_SELF_TEST_SET_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SelfTestType !== undefined) view.setInt32(0, Number(data.SelfTestType), true);
  // 0x04: u32
  if (data?.uTestID !== undefined) view.setUint32(4, Number(data.uTestID), true);
  // 0x08: u32
  if (data?.uPinBitMask !== undefined) view.setUint32(8, Number(data.uPinBitMask), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pvContext !== undefined) view.setBigUint64(16, data.pvContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvContext))), true);
  // 0x18: u32
  if (data?.uBufferLength !== undefined) view.setUint32(24, Number(data.uBufferLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ucBufferIn !== undefined) view.setBigUint64(32, data.ucBufferIn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBufferIn))), true);
  return buf;
}

export class DOT11_MANUFACTURING_SELF_TEST_SET_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get SelfTestType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get uTestID(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uPinBitMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pvContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uBufferLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ucBufferIn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set SelfTestType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set uTestID(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uPinBitMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pvContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set uBufferLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ucBufferIn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS (size: 48)
 */
export interface DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_SELF_TEST_TYPE */
  SelfTestType: DOT11_MANUFACTURING_SELF_TEST_TYPE;
  /** u32 */
  uTestID: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bResult: Uint8Array | Deno.PointerValue;
  /** u32 */
  uPinFailedBitMask: number;
  /** ptr */
  pvContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  uBytesWrittenOut: number;
  /** array */
  ucBufferOut: Deno.PointerValue;
}

export const sizeofDOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS = 48;

export function allocDOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS(data?: Partial<DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SelfTestType !== undefined) view.setInt32(0, Number(data.SelfTestType), true);
  // 0x04: u32
  if (data?.uTestID !== undefined) view.setUint32(4, Number(data.uTestID), true);
  // 0x08: pointer
  if (data?.bResult !== undefined) view.setBigUint64(8, data.bResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bResult))), true);
  // 0x10: u32
  if (data?.uPinFailedBitMask !== undefined) view.setUint32(16, Number(data.uPinFailedBitMask), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pvContext !== undefined) view.setBigUint64(24, data.pvContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvContext))), true);
  // 0x20: u32
  if (data?.uBytesWrittenOut !== undefined) view.setUint32(32, Number(data.uBytesWrittenOut), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ucBufferOut !== undefined) view.setBigUint64(40, data.ucBufferOut === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBufferOut))), true);
  return buf;
}

export class DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get SelfTestType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get uTestID(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get bResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uPinFailedBitMask(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pvContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get uBytesWrittenOut(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ucBufferOut(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set SelfTestType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set uTestID(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set bResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uPinFailedBitMask(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pvContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set uBytesWrittenOut(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ucBufferOut(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX (size: 24)
 */
export interface DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX {
  /** Windows.Win32.Foundation.BOOLEAN */
  bEnabled: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BAND */
  Dot11Band: DOT11_BAND;
  /** u32 */
  uChannel: number;
  /** i32 */
  PowerLevel: number;
}

export const sizeofDOT11_MANUFACTURING_FUNCTIONAL_TEST_RX = 24;

export function allocDOT11_MANUFACTURING_FUNCTIONAL_TEST_RX(data?: Partial<DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MANUFACTURING_FUNCTIONAL_TEST_RX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bEnabled !== undefined) view.setBigUint64(0, data.bEnabled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bEnabled))), true);
  // 0x08: i32
  if (data?.Dot11Band !== undefined) view.setInt32(8, Number(data.Dot11Band), true);
  // 0x0c: u32
  if (data?.uChannel !== undefined) view.setUint32(12, Number(data.uChannel), true);
  // 0x10: i32
  if (data?.PowerLevel !== undefined) view.setInt32(16, Number(data.PowerLevel), true);
  // 0x14: pad4
  return buf;
}

export class DOT11_MANUFACTURING_FUNCTIONAL_TEST_RXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get bEnabled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get Dot11Band(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get uChannel(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get PowerLevel(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set bEnabled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set Dot11Band(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set uChannel(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set PowerLevel(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX (size: 32)
 */
export interface DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX {
  /** Windows.Win32.Foundation.BOOLEAN */
  bEnable: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  bOpenLoop: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BAND */
  Dot11Band: DOT11_BAND;
  /** u32 */
  uChannel: number;
  /** u32 */
  uSetPowerLevel: number;
  /** i32 */
  ADCPowerLevel: number;
}

export const sizeofDOT11_MANUFACTURING_FUNCTIONAL_TEST_TX = 32;

export function allocDOT11_MANUFACTURING_FUNCTIONAL_TEST_TX(data?: Partial<DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MANUFACTURING_FUNCTIONAL_TEST_TX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bEnable !== undefined) view.setBigUint64(0, data.bEnable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bEnable))), true);
  // 0x08: pointer
  if (data?.bOpenLoop !== undefined) view.setBigUint64(8, data.bOpenLoop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bOpenLoop))), true);
  // 0x10: i32
  if (data?.Dot11Band !== undefined) view.setInt32(16, Number(data.Dot11Band), true);
  // 0x14: u32
  if (data?.uChannel !== undefined) view.setUint32(20, Number(data.uChannel), true);
  // 0x18: u32
  if (data?.uSetPowerLevel !== undefined) view.setUint32(24, Number(data.uSetPowerLevel), true);
  // 0x1c: i32
  if (data?.ADCPowerLevel !== undefined) view.setInt32(28, Number(data.ADCPowerLevel), true);
  return buf;
}

export class DOT11_MANUFACTURING_FUNCTIONAL_TEST_TXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get bEnable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bOpenLoop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get Dot11Band(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get uChannel(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uSetPowerLevel(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get ADCPowerLevel(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: pointer
  set bEnable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bOpenLoop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set Dot11Band(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set uChannel(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uSetPowerLevel(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set ADCPowerLevel(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC (size: 16)
 */
export interface DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BAND */
  Dot11Band: DOT11_BAND;
  /** u32 */
  uChannel: number;
  /** i32 */
  ADCPowerLevel: number;
}

export const sizeofDOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC = 16;

export function allocDOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC(data?: Partial<DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Dot11Band !== undefined) view.setInt32(0, Number(data.Dot11Band), true);
  // 0x04: u32
  if (data?.uChannel !== undefined) view.setUint32(4, Number(data.uChannel), true);
  // 0x08: i32
  if (data?.ADCPowerLevel !== undefined) view.setInt32(8, Number(data.ADCPowerLevel), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Dot11Band(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get uChannel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get ADCPowerLevel(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set Dot11Band(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set uChannel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set ADCPowerLevel(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_TEST_SET_DATA (size: 24)
 */
export interface DOT11_MANUFACTURING_TEST_SET_DATA {
  /** u32 */
  uKey: number;
  /** u32 */
  uOffset: number;
  /** u32 */
  uBufferLength: number;
  /** array */
  ucBufferIn: Deno.PointerValue;
}

export const sizeofDOT11_MANUFACTURING_TEST_SET_DATA = 24;

export function allocDOT11_MANUFACTURING_TEST_SET_DATA(data?: Partial<DOT11_MANUFACTURING_TEST_SET_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MANUFACTURING_TEST_SET_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uKey !== undefined) view.setUint32(0, Number(data.uKey), true);
  // 0x04: u32
  if (data?.uOffset !== undefined) view.setUint32(4, Number(data.uOffset), true);
  // 0x08: u32
  if (data?.uBufferLength !== undefined) view.setUint32(8, Number(data.uBufferLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ucBufferIn !== undefined) view.setBigUint64(16, data.ucBufferIn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBufferIn))), true);
  return buf;
}

export class DOT11_MANUFACTURING_TEST_SET_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uKey(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uBufferLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ucBufferIn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uKey(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uBufferLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ucBufferIn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_TEST_QUERY_DATA (size: 24)
 */
export interface DOT11_MANUFACTURING_TEST_QUERY_DATA {
  /** u32 */
  uKey: number;
  /** u32 */
  uOffset: number;
  /** u32 */
  uBufferLength: number;
  /** u32 */
  uBytesRead: number;
  /** array */
  ucBufferOut: Deno.PointerValue;
}

export const sizeofDOT11_MANUFACTURING_TEST_QUERY_DATA = 24;

export function allocDOT11_MANUFACTURING_TEST_QUERY_DATA(data?: Partial<DOT11_MANUFACTURING_TEST_QUERY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MANUFACTURING_TEST_QUERY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uKey !== undefined) view.setUint32(0, Number(data.uKey), true);
  // 0x04: u32
  if (data?.uOffset !== undefined) view.setUint32(4, Number(data.uOffset), true);
  // 0x08: u32
  if (data?.uBufferLength !== undefined) view.setUint32(8, Number(data.uBufferLength), true);
  // 0x0c: u32
  if (data?.uBytesRead !== undefined) view.setUint32(12, Number(data.uBytesRead), true);
  // 0x10: pointer
  if (data?.ucBufferOut !== undefined) view.setBigUint64(16, data.ucBufferOut === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucBufferOut))), true);
  return buf;
}

export class DOT11_MANUFACTURING_TEST_QUERY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uKey(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uBufferLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uBytesRead(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ucBufferOut(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uKey(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uBufferLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uBytesRead(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ucBufferOut(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_TEST_SLEEP (size: 16)
 */
export interface DOT11_MANUFACTURING_TEST_SLEEP {
  /** u32 */
  uSleepTime: number;
  /** ptr */
  pvContext: Deno.PointerValue | Uint8Array;
}

export const sizeofDOT11_MANUFACTURING_TEST_SLEEP = 16;

export function allocDOT11_MANUFACTURING_TEST_SLEEP(data?: Partial<DOT11_MANUFACTURING_TEST_SLEEP>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MANUFACTURING_TEST_SLEEP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uSleepTime !== undefined) view.setUint32(0, Number(data.uSleepTime), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvContext !== undefined) view.setBigUint64(8, data.pvContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvContext))), true);
  return buf;
}

export class DOT11_MANUFACTURING_TEST_SLEEPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uSleepTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pvContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uSleepTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pvContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_CALLBACK_PARAMETERS (size: 24)
 */
export interface DOT11_MANUFACTURING_CALLBACK_PARAMETERS {
  /** Windows.Win32.NetworkManagement.Ndis.NDIS_OBJECT_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_MANUFACTURING_CALLBACK_TYPE */
  dot11ManufacturingCallbackType: DOT11_MANUFACTURING_CALLBACK_TYPE;
  /** u32 */
  uStatus: number;
  /** ptr */
  pvContext: Deno.PointerValue | Uint8Array;
}

export const sizeofDOT11_MANUFACTURING_CALLBACK_PARAMETERS = 24;

export function allocDOT11_MANUFACTURING_CALLBACK_PARAMETERS(data?: Partial<DOT11_MANUFACTURING_CALLBACK_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MANUFACTURING_CALLBACK_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: i32
  if (data?.dot11ManufacturingCallbackType !== undefined) view.setInt32(8, Number(data.dot11ManufacturingCallbackType), true);
  // 0x0c: u32
  if (data?.uStatus !== undefined) view.setUint32(12, Number(data.uStatus), true);
  // 0x10: pointer
  if (data?.pvContext !== undefined) view.setBigUint64(16, data.pvContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvContext))), true);
  return buf;
}

export class DOT11_MANUFACTURING_CALLBACK_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get dot11ManufacturingCallbackType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get uStatus(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pvContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set dot11ManufacturingCallbackType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set uStatus(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pvContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.L2_NOTIFICATION_DATA (size: 32)
 */
export interface L2_NOTIFICATION_DATA {
  /** u32 */
  NotificationSource: number;
  /** u32 */
  NotificationCode: number;
  /** System.Guid */
  InterfaceGuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwDataSize: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
}

export const sizeofL2_NOTIFICATION_DATA = 32;

export function allocL2_NOTIFICATION_DATA(data?: Partial<L2_NOTIFICATION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofL2_NOTIFICATION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NotificationSource !== undefined) view.setUint32(0, Number(data.NotificationSource), true);
  // 0x04: u32
  if (data?.NotificationCode !== undefined) view.setUint32(4, Number(data.NotificationCode), true);
  // 0x08: pointer
  if (data?.InterfaceGuid !== undefined) view.setBigUint64(8, data.InterfaceGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceGuid))), true);
  // 0x10: u32
  if (data?.dwDataSize !== undefined) view.setUint32(16, Number(data.dwDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pData !== undefined) view.setBigUint64(24, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  return buf;
}

export class L2_NOTIFICATION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NotificationSource(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NotificationCode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get InterfaceGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwDataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NotificationSource(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NotificationCode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set InterfaceGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwDataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_PROFILE_INFO (size: 16)
 */
export interface WLAN_PROFILE_INFO {
  /** array */
  strProfileName: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofWLAN_PROFILE_INFO = 16;

export function allocWLAN_PROFILE_INFO(data?: Partial<WLAN_PROFILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_PROFILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.strProfileName !== undefined) view.setBigUint64(0, data.strProfileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.strProfileName))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  return buf;
}

export class WLAN_PROFILE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get strProfileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set strProfileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_NETWORK (size: 16)
 */
export interface DOT11_NETWORK {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  dot11Ssid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BssType: DOT11_BSS_TYPE;
}

export const sizeofDOT11_NETWORK = 16;

export function allocDOT11_NETWORK(data?: Partial<DOT11_NETWORK>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_NETWORK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dot11Ssid !== undefined) view.setBigUint64(0, data.dot11Ssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11Ssid))), true);
  // 0x08: i32
  if (data?.dot11BssType !== undefined) view.setInt32(8, Number(data.dot11BssType), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11_NETWORKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dot11Ssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get dot11BssType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set dot11Ssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set dot11BssType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_RAW_DATA (size: 16)
 */
export interface WLAN_RAW_DATA {
  /** u32 */
  dwDataSize: number;
  /** array */
  DataBlob: Deno.PointerValue;
}

export const sizeofWLAN_RAW_DATA = 16;

export function allocWLAN_RAW_DATA(data?: Partial<WLAN_RAW_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_RAW_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDataSize !== undefined) view.setUint32(0, Number(data.dwDataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DataBlob !== undefined) view.setBigUint64(8, data.DataBlob === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataBlob))), true);
  return buf;
}

export class WLAN_RAW_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DataBlob(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwDataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DataBlob(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_RAW_DATA_LIST (size: 16)
 */
export interface WLAN_RAW_DATA_LIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNumberOfItems: number;
  /** array */
  DataList: Deno.PointerValue;
}

export const sizeofWLAN_RAW_DATA_LIST = 16;

export function allocWLAN_RAW_DATA_LIST(data?: Partial<WLAN_RAW_DATA_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_RAW_DATA_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNumberOfItems !== undefined) view.setUint32(4, Number(data.dwNumberOfItems), true);
  // 0x08: pointer
  if (data?.DataList !== undefined) view.setBigUint64(8, data.DataList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataList))), true);
  return buf;
}

export class WLAN_RAW_DATA_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTotalSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNumberOfItems(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DataList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwTotalSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNumberOfItems(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DataList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_RATE_SET (size: 16)
 */
export interface WLAN_RATE_SET {
  /** u32 */
  uRateSetLength: number;
  /** array */
  usRateSet: Deno.PointerValue;
}

export const sizeofWLAN_RATE_SET = 16;

export function allocWLAN_RATE_SET(data?: Partial<WLAN_RATE_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_RATE_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uRateSetLength !== undefined) view.setUint32(0, Number(data.uRateSetLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.usRateSet !== undefined) view.setBigUint64(8, data.usRateSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.usRateSet))), true);
  return buf;
}

export class WLAN_RATE_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uRateSetLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get usRateSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uRateSetLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set usRateSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_AVAILABLE_NETWORK (size: 80)
 */
export interface WLAN_AVAILABLE_NETWORK {
  /** array */
  strProfileName: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  dot11Ssid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BssType: DOT11_BSS_TYPE;
  /** u32 */
  uNumberOfBssids: number;
  /** Windows.Win32.Foundation.BOOL */
  bNetworkConnectable: boolean;
  /** u32 */
  wlanNotConnectableReason: number;
  /** u32 */
  uNumberOfPhyTypes: number;
  /** array */
  dot11PhyTypes: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  bMorePhyTypes: boolean;
  /** u32 */
  wlanSignalQuality: number;
  /** Windows.Win32.Foundation.BOOL */
  bSecurityEnabled: boolean;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM */
  dot11DefaultAuthAlgorithm: DOT11_AUTH_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  dot11DefaultCipherAlgorithm: DOT11_CIPHER_ALGORITHM;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofWLAN_AVAILABLE_NETWORK = 80;

export function allocWLAN_AVAILABLE_NETWORK(data?: Partial<WLAN_AVAILABLE_NETWORK>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_AVAILABLE_NETWORK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.strProfileName !== undefined) view.setBigUint64(0, data.strProfileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.strProfileName))), true);
  // 0x08: pointer
  if (data?.dot11Ssid !== undefined) view.setBigUint64(8, data.dot11Ssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11Ssid))), true);
  // 0x10: i32
  if (data?.dot11BssType !== undefined) view.setInt32(16, Number(data.dot11BssType), true);
  // 0x14: u32
  if (data?.uNumberOfBssids !== undefined) view.setUint32(20, Number(data.uNumberOfBssids), true);
  // 0x18: i32
  if (data?.bNetworkConnectable !== undefined) view.setInt32(24, Number(data.bNetworkConnectable), true);
  // 0x1c: u32
  if (data?.wlanNotConnectableReason !== undefined) view.setUint32(28, Number(data.wlanNotConnectableReason), true);
  // 0x20: u32
  if (data?.uNumberOfPhyTypes !== undefined) view.setUint32(32, Number(data.uNumberOfPhyTypes), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.dot11PhyTypes !== undefined) view.setBigUint64(40, data.dot11PhyTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11PhyTypes))), true);
  // 0x30: i32
  if (data?.bMorePhyTypes !== undefined) view.setInt32(48, Number(data.bMorePhyTypes), true);
  // 0x34: u32
  if (data?.wlanSignalQuality !== undefined) view.setUint32(52, Number(data.wlanSignalQuality), true);
  // 0x38: i32
  if (data?.bSecurityEnabled !== undefined) view.setInt32(56, Number(data.bSecurityEnabled), true);
  // 0x3c: i32
  if (data?.dot11DefaultAuthAlgorithm !== undefined) view.setInt32(60, Number(data.dot11DefaultAuthAlgorithm), true);
  // 0x40: i32
  if (data?.dot11DefaultCipherAlgorithm !== undefined) view.setInt32(64, Number(data.dot11DefaultCipherAlgorithm), true);
  // 0x44: u32
  if (data?.dwFlags !== undefined) view.setUint32(68, Number(data.dwFlags), true);
  // 0x48: u32
  if (data?.dwReserved !== undefined) view.setUint32(72, Number(data.dwReserved), true);
  // 0x4c: pad4
  return buf;
}

export class WLAN_AVAILABLE_NETWORKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get strProfileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get dot11Ssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get dot11BssType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get uNumberOfBssids(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get bNetworkConnectable(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get wlanNotConnectableReason(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get uNumberOfPhyTypes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get dot11PhyTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get bMorePhyTypes(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get wlanSignalQuality(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: i32
  get bSecurityEnabled(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get dot11DefaultAuthAlgorithm(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: i32
  get dot11DefaultCipherAlgorithm(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get dwFlags(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwReserved(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: pointer
  set strProfileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set dot11Ssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set dot11BssType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set uNumberOfBssids(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set bNetworkConnectable(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set wlanNotConnectableReason(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set uNumberOfPhyTypes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set dot11PhyTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set bMorePhyTypes(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set wlanSignalQuality(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: i32
  set bSecurityEnabled(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set dot11DefaultAuthAlgorithm(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: i32
  set dot11DefaultCipherAlgorithm(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set dwFlags(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwReserved(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_AVAILABLE_NETWORK_V2 (size: 104)
 */
export interface WLAN_AVAILABLE_NETWORK_V2 {
  /** array */
  strProfileName: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  dot11Ssid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BssType: DOT11_BSS_TYPE;
  /** u32 */
  uNumberOfBssids: number;
  /** Windows.Win32.Foundation.BOOL */
  bNetworkConnectable: boolean;
  /** u32 */
  wlanNotConnectableReason: number;
  /** u32 */
  uNumberOfPhyTypes: number;
  /** array */
  dot11PhyTypes: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  bMorePhyTypes: boolean;
  /** u32 */
  wlanSignalQuality: number;
  /** Windows.Win32.Foundation.BOOL */
  bSecurityEnabled: boolean;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM */
  dot11DefaultAuthAlgorithm: DOT11_AUTH_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  dot11DefaultCipherAlgorithm: DOT11_CIPHER_ALGORITHM;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_ACCESSNETWORKOPTIONS */
  AccessNetworkOptions: Uint8Array | Deno.PointerValue;
  /** array */
  dot11HESSID: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_VENUEINFO */
  VenueInfo: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwReserved: number;
}

export const sizeofWLAN_AVAILABLE_NETWORK_V2 = 104;

export function allocWLAN_AVAILABLE_NETWORK_V2(data?: Partial<WLAN_AVAILABLE_NETWORK_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_AVAILABLE_NETWORK_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.strProfileName !== undefined) view.setBigUint64(0, data.strProfileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.strProfileName))), true);
  // 0x08: pointer
  if (data?.dot11Ssid !== undefined) view.setBigUint64(8, data.dot11Ssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11Ssid))), true);
  // 0x10: i32
  if (data?.dot11BssType !== undefined) view.setInt32(16, Number(data.dot11BssType), true);
  // 0x14: u32
  if (data?.uNumberOfBssids !== undefined) view.setUint32(20, Number(data.uNumberOfBssids), true);
  // 0x18: i32
  if (data?.bNetworkConnectable !== undefined) view.setInt32(24, Number(data.bNetworkConnectable), true);
  // 0x1c: u32
  if (data?.wlanNotConnectableReason !== undefined) view.setUint32(28, Number(data.wlanNotConnectableReason), true);
  // 0x20: u32
  if (data?.uNumberOfPhyTypes !== undefined) view.setUint32(32, Number(data.uNumberOfPhyTypes), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.dot11PhyTypes !== undefined) view.setBigUint64(40, data.dot11PhyTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11PhyTypes))), true);
  // 0x30: i32
  if (data?.bMorePhyTypes !== undefined) view.setInt32(48, Number(data.bMorePhyTypes), true);
  // 0x34: u32
  if (data?.wlanSignalQuality !== undefined) view.setUint32(52, Number(data.wlanSignalQuality), true);
  // 0x38: i32
  if (data?.bSecurityEnabled !== undefined) view.setInt32(56, Number(data.bSecurityEnabled), true);
  // 0x3c: i32
  if (data?.dot11DefaultAuthAlgorithm !== undefined) view.setInt32(60, Number(data.dot11DefaultAuthAlgorithm), true);
  // 0x40: i32
  if (data?.dot11DefaultCipherAlgorithm !== undefined) view.setInt32(64, Number(data.dot11DefaultCipherAlgorithm), true);
  // 0x44: u32
  if (data?.dwFlags !== undefined) view.setUint32(68, Number(data.dwFlags), true);
  // 0x48: pointer
  if (data?.AccessNetworkOptions !== undefined) view.setBigUint64(72, data.AccessNetworkOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AccessNetworkOptions))), true);
  // 0x50: pointer
  if (data?.dot11HESSID !== undefined) view.setBigUint64(80, data.dot11HESSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11HESSID))), true);
  // 0x58: pointer
  if (data?.VenueInfo !== undefined) view.setBigUint64(88, data.VenueInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VenueInfo))), true);
  // 0x60: u32
  if (data?.dwReserved !== undefined) view.setUint32(96, Number(data.dwReserved), true);
  // 0x64: pad4
  return buf;
}

export class WLAN_AVAILABLE_NETWORK_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get strProfileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get dot11Ssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get dot11BssType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get uNumberOfBssids(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get bNetworkConnectable(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get wlanNotConnectableReason(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get uNumberOfPhyTypes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get dot11PhyTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get bMorePhyTypes(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get wlanSignalQuality(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: i32
  get bSecurityEnabled(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get dot11DefaultAuthAlgorithm(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: i32
  get dot11DefaultCipherAlgorithm(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get dwFlags(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: pointer
  get AccessNetworkOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get dot11HESSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get VenueInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get dwReserved(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x00: pointer
  set strProfileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set dot11Ssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set dot11BssType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set uNumberOfBssids(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set bNetworkConnectable(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set wlanNotConnectableReason(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set uNumberOfPhyTypes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set dot11PhyTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set bMorePhyTypes(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set wlanSignalQuality(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: i32
  set bSecurityEnabled(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set dot11DefaultAuthAlgorithm(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: i32
  set dot11DefaultCipherAlgorithm(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set dwFlags(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: pointer
  set AccessNetworkOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set dot11HESSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set VenueInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set dwReserved(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_BSS_ENTRY (size: 96)
 */
export interface WLAN_BSS_ENTRY {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  dot11Ssid: Uint8Array | Deno.PointerValue;
  /** u32 */
  uPhyId: number;
  /** array */
  dot11Bssid: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BssType: DOT11_BSS_TYPE;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_TYPE */
  dot11BssPhyType: DOT11_PHY_TYPE;
  /** i32 */
  lRssi: number;
  /** u32 */
  uLinkQuality: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  bInRegDomain: Uint8Array | Deno.PointerValue;
  /** u16 */
  usBeaconPeriod: number;
  /** u64 */
  ullTimestamp: Deno.PointerValue;
  /** u64 */
  ullHostTimestamp: Deno.PointerValue;
  /** u16 */
  usCapabilityInformation: number;
  /** u32 */
  ulChCenterFrequency: number;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_RATE_SET */
  wlanRateSet: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulIeOffset: number;
  /** u32 */
  ulIeSize: number;
}

export const sizeofWLAN_BSS_ENTRY = 96;

export function allocWLAN_BSS_ENTRY(data?: Partial<WLAN_BSS_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_BSS_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dot11Ssid !== undefined) view.setBigUint64(0, data.dot11Ssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11Ssid))), true);
  // 0x08: u32
  if (data?.uPhyId !== undefined) view.setUint32(8, Number(data.uPhyId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dot11Bssid !== undefined) view.setBigUint64(16, data.dot11Bssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11Bssid))), true);
  // 0x18: i32
  if (data?.dot11BssType !== undefined) view.setInt32(24, Number(data.dot11BssType), true);
  // 0x1c: i32
  if (data?.dot11BssPhyType !== undefined) view.setInt32(28, Number(data.dot11BssPhyType), true);
  // 0x20: i32
  if (data?.lRssi !== undefined) view.setInt32(32, Number(data.lRssi), true);
  // 0x24: u32
  if (data?.uLinkQuality !== undefined) view.setUint32(36, Number(data.uLinkQuality), true);
  // 0x28: pointer
  if (data?.bInRegDomain !== undefined) view.setBigUint64(40, data.bInRegDomain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bInRegDomain))), true);
  // 0x30: u16
  if (data?.usBeaconPeriod !== undefined) view.setUint16(48, Number(data.usBeaconPeriod), true);
  // 0x32: pad6
  // 0x38: u64
  if (data?.ullTimestamp !== undefined) view.setBigUint64(56, BigInt(data.ullTimestamp), true);
  // 0x40: u64
  if (data?.ullHostTimestamp !== undefined) view.setBigUint64(64, BigInt(data.ullHostTimestamp), true);
  // 0x48: u16
  if (data?.usCapabilityInformation !== undefined) view.setUint16(72, Number(data.usCapabilityInformation), true);
  // 0x4a: u32
  if (data?.ulChCenterFrequency !== undefined) view.setUint32(74, Number(data.ulChCenterFrequency), true);
  // 0x4e: pad2
  // 0x50: pointer
  if (data?.wlanRateSet !== undefined) view.setBigUint64(80, data.wlanRateSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wlanRateSet))), true);
  // 0x58: u32
  if (data?.ulIeOffset !== undefined) view.setUint32(88, Number(data.ulIeOffset), true);
  // 0x5c: u32
  if (data?.ulIeSize !== undefined) view.setUint32(92, Number(data.ulIeSize), true);
  return buf;
}

export class WLAN_BSS_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dot11Ssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uPhyId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get dot11Bssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get dot11BssType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get dot11BssPhyType(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get lRssi(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get uLinkQuality(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get bInRegDomain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u16
  get usBeaconPeriod(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: pad6

  // 0x38: u64
  get ullTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get ullHostTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u16
  get usCapabilityInformation(): number {
    return this.view.getUint16(72, true);
  }

  // 0x4a: u32
  get ulChCenterFrequency(): number {
    return this.view.getUint32(74, true);
  }

  // 0x4e: pad2

  // 0x50: pointer
  get wlanRateSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get ulIeOffset(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get ulIeSize(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: pointer
  set dot11Ssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uPhyId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set dot11Bssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set dot11BssType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set dot11BssPhyType(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set lRssi(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set uLinkQuality(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set bInRegDomain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u16
  set usBeaconPeriod(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: pad6

  // 0x38: u64
  set ullTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set ullHostTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u16
  set usCapabilityInformation(value: number) {
    this.view.setUint16(72, value, true);
  }

  // 0x4a: u32
  set ulChCenterFrequency(value: number) {
    this.view.setUint32(74, value, true);
  }

  // 0x4e: pad2

  // 0x50: pointer
  set wlanRateSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set ulIeOffset(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set ulIeSize(value: number) {
    this.view.setUint32(92, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_BSS_LIST (size: 16)
 */
export interface WLAN_BSS_LIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNumberOfItems: number;
  /** array */
  wlanBssEntries: Deno.PointerValue;
}

export const sizeofWLAN_BSS_LIST = 16;

export function allocWLAN_BSS_LIST(data?: Partial<WLAN_BSS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_BSS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNumberOfItems !== undefined) view.setUint32(4, Number(data.dwNumberOfItems), true);
  // 0x08: pointer
  if (data?.wlanBssEntries !== undefined) view.setBigUint64(8, data.wlanBssEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wlanBssEntries))), true);
  return buf;
}

export class WLAN_BSS_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTotalSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNumberOfItems(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get wlanBssEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwTotalSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNumberOfItems(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set wlanBssEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_INTERFACE_INFO (size: 24)
 */
export interface WLAN_INTERFACE_INFO {
  /** System.Guid */
  InterfaceGuid: Uint8Array | Deno.PointerValue;
  /** array */
  strInterfaceDescription: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_INTERFACE_STATE */
  isState: WLAN_INTERFACE_STATE;
}

export const sizeofWLAN_INTERFACE_INFO = 24;

export function allocWLAN_INTERFACE_INFO(data?: Partial<WLAN_INTERFACE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_INTERFACE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InterfaceGuid !== undefined) view.setBigUint64(0, data.InterfaceGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceGuid))), true);
  // 0x08: pointer
  if (data?.strInterfaceDescription !== undefined) view.setBigUint64(8, data.strInterfaceDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.strInterfaceDescription))), true);
  // 0x10: i32
  if (data?.isState !== undefined) view.setInt32(16, Number(data.isState), true);
  // 0x14: pad4
  return buf;
}

export class WLAN_INTERFACE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InterfaceGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get strInterfaceDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get isState(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set InterfaceGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set strInterfaceDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set isState(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_ASSOCIATION_ATTRIBUTES (size: 48)
 */
export interface WLAN_ASSOCIATION_ATTRIBUTES {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  dot11Ssid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BssType: DOT11_BSS_TYPE;
  /** array */
  dot11Bssid: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_TYPE */
  dot11PhyType: DOT11_PHY_TYPE;
  /** u32 */
  uDot11PhyIndex: number;
  /** u32 */
  wlanSignalQuality: number;
  /** u32 */
  ulRxRate: number;
  /** u32 */
  ulTxRate: number;
}

export const sizeofWLAN_ASSOCIATION_ATTRIBUTES = 48;

export function allocWLAN_ASSOCIATION_ATTRIBUTES(data?: Partial<WLAN_ASSOCIATION_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_ASSOCIATION_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dot11Ssid !== undefined) view.setBigUint64(0, data.dot11Ssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11Ssid))), true);
  // 0x08: i32
  if (data?.dot11BssType !== undefined) view.setInt32(8, Number(data.dot11BssType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dot11Bssid !== undefined) view.setBigUint64(16, data.dot11Bssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11Bssid))), true);
  // 0x18: i32
  if (data?.dot11PhyType !== undefined) view.setInt32(24, Number(data.dot11PhyType), true);
  // 0x1c: u32
  if (data?.uDot11PhyIndex !== undefined) view.setUint32(28, Number(data.uDot11PhyIndex), true);
  // 0x20: u32
  if (data?.wlanSignalQuality !== undefined) view.setUint32(32, Number(data.wlanSignalQuality), true);
  // 0x24: u32
  if (data?.ulRxRate !== undefined) view.setUint32(36, Number(data.ulRxRate), true);
  // 0x28: u32
  if (data?.ulTxRate !== undefined) view.setUint32(40, Number(data.ulTxRate), true);
  // 0x2c: pad4
  return buf;
}

export class WLAN_ASSOCIATION_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dot11Ssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get dot11BssType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get dot11Bssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get dot11PhyType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get uDot11PhyIndex(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get wlanSignalQuality(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ulRxRate(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ulTxRate(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set dot11Ssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set dot11BssType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set dot11Bssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set dot11PhyType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set uDot11PhyIndex(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set wlanSignalQuality(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ulRxRate(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ulTxRate(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_SECURITY_ATTRIBUTES (size: 16)
 */
export interface WLAN_SECURITY_ATTRIBUTES {
  /** Windows.Win32.Foundation.BOOL */
  bSecurityEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bOneXEnabled: boolean;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM */
  dot11AuthAlgorithm: DOT11_AUTH_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  dot11CipherAlgorithm: DOT11_CIPHER_ALGORITHM;
}

export const sizeofWLAN_SECURITY_ATTRIBUTES = 16;

export function allocWLAN_SECURITY_ATTRIBUTES(data?: Partial<WLAN_SECURITY_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_SECURITY_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bSecurityEnabled !== undefined) view.setInt32(0, Number(data.bSecurityEnabled), true);
  // 0x04: i32
  if (data?.bOneXEnabled !== undefined) view.setInt32(4, Number(data.bOneXEnabled), true);
  // 0x08: i32
  if (data?.dot11AuthAlgorithm !== undefined) view.setInt32(8, Number(data.dot11AuthAlgorithm), true);
  // 0x0c: i32
  if (data?.dot11CipherAlgorithm !== undefined) view.setInt32(12, Number(data.dot11CipherAlgorithm), true);
  return buf;
}

export class WLAN_SECURITY_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get bSecurityEnabled(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get bOneXEnabled(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get dot11AuthAlgorithm(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get dot11CipherAlgorithm(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set bSecurityEnabled(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set bOneXEnabled(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set dot11AuthAlgorithm(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set dot11CipherAlgorithm(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_CONNECTION_ATTRIBUTES (size: 32)
 */
export interface WLAN_CONNECTION_ATTRIBUTES {
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_INTERFACE_STATE */
  isState: WLAN_INTERFACE_STATE;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_CONNECTION_MODE */
  wlanConnectionMode: WLAN_CONNECTION_MODE;
  /** array */
  strProfileName: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_ASSOCIATION_ATTRIBUTES */
  wlanAssociationAttributes: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_SECURITY_ATTRIBUTES */
  wlanSecurityAttributes: Uint8Array | Deno.PointerValue;
}

export const sizeofWLAN_CONNECTION_ATTRIBUTES = 32;

export function allocWLAN_CONNECTION_ATTRIBUTES(data?: Partial<WLAN_CONNECTION_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_CONNECTION_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.isState !== undefined) view.setInt32(0, Number(data.isState), true);
  // 0x04: i32
  if (data?.wlanConnectionMode !== undefined) view.setInt32(4, Number(data.wlanConnectionMode), true);
  // 0x08: pointer
  if (data?.strProfileName !== undefined) view.setBigUint64(8, data.strProfileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.strProfileName))), true);
  // 0x10: pointer
  if (data?.wlanAssociationAttributes !== undefined) view.setBigUint64(16, data.wlanAssociationAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wlanAssociationAttributes))), true);
  // 0x18: pointer
  if (data?.wlanSecurityAttributes !== undefined) view.setBigUint64(24, data.wlanSecurityAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wlanSecurityAttributes))), true);
  return buf;
}

export class WLAN_CONNECTION_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get isState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get wlanConnectionMode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get strProfileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get wlanAssociationAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get wlanSecurityAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set isState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set wlanConnectionMode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set strProfileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set wlanAssociationAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set wlanSecurityAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_PHY_RADIO_STATE (size: 16)
 */
export interface WLAN_PHY_RADIO_STATE {
  /** u32 */
  dwPhyIndex: number;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_RADIO_STATE */
  dot11SoftwareRadioState: DOT11_RADIO_STATE;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_RADIO_STATE */
  dot11HardwareRadioState: DOT11_RADIO_STATE;
}

export const sizeofWLAN_PHY_RADIO_STATE = 16;

export function allocWLAN_PHY_RADIO_STATE(data?: Partial<WLAN_PHY_RADIO_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_PHY_RADIO_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPhyIndex !== undefined) view.setUint32(0, Number(data.dwPhyIndex), true);
  // 0x04: i32
  if (data?.dot11SoftwareRadioState !== undefined) view.setInt32(4, Number(data.dot11SoftwareRadioState), true);
  // 0x08: i32
  if (data?.dot11HardwareRadioState !== undefined) view.setInt32(8, Number(data.dot11HardwareRadioState), true);
  // 0x0c: pad4
  return buf;
}

export class WLAN_PHY_RADIO_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwPhyIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get dot11SoftwareRadioState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get dot11HardwareRadioState(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwPhyIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set dot11SoftwareRadioState(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set dot11HardwareRadioState(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_RADIO_STATE (size: 16)
 */
export interface WLAN_RADIO_STATE {
  /** u32 */
  dwNumberOfPhys: number;
  /** array */
  PhyRadioState: Deno.PointerValue;
}

export const sizeofWLAN_RADIO_STATE = 16;

export function allocWLAN_RADIO_STATE(data?: Partial<WLAN_RADIO_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_RADIO_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfPhys !== undefined) view.setUint32(0, Number(data.dwNumberOfPhys), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PhyRadioState !== undefined) view.setBigUint64(8, data.PhyRadioState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhyRadioState))), true);
  return buf;
}

export class WLAN_RADIO_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfPhys(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PhyRadioState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumberOfPhys(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PhyRadioState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_INTERFACE_CAPABILITY (size: 32)
 */
export interface WLAN_INTERFACE_CAPABILITY {
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_INTERFACE_TYPE */
  interfaceType: WLAN_INTERFACE_TYPE;
  /** Windows.Win32.Foundation.BOOL */
  bDot11DSupported: boolean;
  /** u32 */
  dwMaxDesiredSsidListSize: number;
  /** u32 */
  dwMaxDesiredBssidListSize: number;
  /** u32 */
  dwNumberOfSupportedPhys: number;
  /** array */
  dot11PhyTypes: Deno.PointerValue;
}

export const sizeofWLAN_INTERFACE_CAPABILITY = 32;

export function allocWLAN_INTERFACE_CAPABILITY(data?: Partial<WLAN_INTERFACE_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_INTERFACE_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.interfaceType !== undefined) view.setInt32(0, Number(data.interfaceType), true);
  // 0x04: i32
  if (data?.bDot11DSupported !== undefined) view.setInt32(4, Number(data.bDot11DSupported), true);
  // 0x08: u32
  if (data?.dwMaxDesiredSsidListSize !== undefined) view.setUint32(8, Number(data.dwMaxDesiredSsidListSize), true);
  // 0x0c: u32
  if (data?.dwMaxDesiredBssidListSize !== undefined) view.setUint32(12, Number(data.dwMaxDesiredBssidListSize), true);
  // 0x10: u32
  if (data?.dwNumberOfSupportedPhys !== undefined) view.setUint32(16, Number(data.dwNumberOfSupportedPhys), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dot11PhyTypes !== undefined) view.setBigUint64(24, data.dot11PhyTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11PhyTypes))), true);
  return buf;
}

export class WLAN_INTERFACE_CAPABILITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get interfaceType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get bDot11DSupported(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get dwMaxDesiredSsidListSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwMaxDesiredBssidListSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwNumberOfSupportedPhys(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dot11PhyTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set interfaceType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set bDot11DSupported(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set dwMaxDesiredSsidListSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwMaxDesiredBssidListSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwNumberOfSupportedPhys(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dot11PhyTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_AUTH_CIPHER_PAIR_LIST (size: 16)
 */
export interface WLAN_AUTH_CIPHER_PAIR_LIST {
  /** u32 */
  dwNumberOfItems: number;
  /** array */
  pAuthCipherPairList: Deno.PointerValue;
}

export const sizeofWLAN_AUTH_CIPHER_PAIR_LIST = 16;

export function allocWLAN_AUTH_CIPHER_PAIR_LIST(data?: Partial<WLAN_AUTH_CIPHER_PAIR_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_AUTH_CIPHER_PAIR_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfItems !== undefined) view.setUint32(0, Number(data.dwNumberOfItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pAuthCipherPairList !== undefined) view.setBigUint64(8, data.pAuthCipherPairList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pAuthCipherPairList))), true);
  return buf;
}

export class WLAN_AUTH_CIPHER_PAIR_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pAuthCipherPairList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumberOfItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pAuthCipherPairList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_COUNTRY_OR_REGION_STRING_LIST (size: 16)
 */
export interface WLAN_COUNTRY_OR_REGION_STRING_LIST {
  /** u32 */
  dwNumberOfItems: number;
  /** array */
  pCountryOrRegionStringList: Deno.PointerValue;
}

export const sizeofWLAN_COUNTRY_OR_REGION_STRING_LIST = 16;

export function allocWLAN_COUNTRY_OR_REGION_STRING_LIST(data?: Partial<WLAN_COUNTRY_OR_REGION_STRING_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_COUNTRY_OR_REGION_STRING_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfItems !== undefined) view.setUint32(0, Number(data.dwNumberOfItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCountryOrRegionStringList !== undefined) view.setBigUint64(8, data.pCountryOrRegionStringList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCountryOrRegionStringList))), true);
  return buf;
}

export class WLAN_COUNTRY_OR_REGION_STRING_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pCountryOrRegionStringList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumberOfItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pCountryOrRegionStringList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_PROFILE_INFO_LIST (size: 16)
 */
export interface WLAN_PROFILE_INFO_LIST {
  /** u32 */
  dwNumberOfItems: number;
  /** u32 */
  dwIndex: number;
  /** array */
  ProfileInfo: Deno.PointerValue;
}

export const sizeofWLAN_PROFILE_INFO_LIST = 16;

export function allocWLAN_PROFILE_INFO_LIST(data?: Partial<WLAN_PROFILE_INFO_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_PROFILE_INFO_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfItems !== undefined) view.setUint32(0, Number(data.dwNumberOfItems), true);
  // 0x04: u32
  if (data?.dwIndex !== undefined) view.setUint32(4, Number(data.dwIndex), true);
  // 0x08: pointer
  if (data?.ProfileInfo !== undefined) view.setBigUint64(8, data.ProfileInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProfileInfo))), true);
  return buf;
}

export class WLAN_PROFILE_INFO_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ProfileInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumberOfItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ProfileInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_AVAILABLE_NETWORK_LIST (size: 16)
 */
export interface WLAN_AVAILABLE_NETWORK_LIST {
  /** u32 */
  dwNumberOfItems: number;
  /** u32 */
  dwIndex: number;
  /** array */
  Network: Deno.PointerValue;
}

export const sizeofWLAN_AVAILABLE_NETWORK_LIST = 16;

export function allocWLAN_AVAILABLE_NETWORK_LIST(data?: Partial<WLAN_AVAILABLE_NETWORK_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_AVAILABLE_NETWORK_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfItems !== undefined) view.setUint32(0, Number(data.dwNumberOfItems), true);
  // 0x04: u32
  if (data?.dwIndex !== undefined) view.setUint32(4, Number(data.dwIndex), true);
  // 0x08: pointer
  if (data?.Network !== undefined) view.setBigUint64(8, data.Network === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Network))), true);
  return buf;
}

export class WLAN_AVAILABLE_NETWORK_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Network(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumberOfItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Network(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_AVAILABLE_NETWORK_LIST_V2 (size: 16)
 */
export interface WLAN_AVAILABLE_NETWORK_LIST_V2 {
  /** u32 */
  dwNumberOfItems: number;
  /** u32 */
  dwIndex: number;
  /** array */
  Network: Deno.PointerValue;
}

export const sizeofWLAN_AVAILABLE_NETWORK_LIST_V2 = 16;

export function allocWLAN_AVAILABLE_NETWORK_LIST_V2(data?: Partial<WLAN_AVAILABLE_NETWORK_LIST_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_AVAILABLE_NETWORK_LIST_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfItems !== undefined) view.setUint32(0, Number(data.dwNumberOfItems), true);
  // 0x04: u32
  if (data?.dwIndex !== undefined) view.setUint32(4, Number(data.dwIndex), true);
  // 0x08: pointer
  if (data?.Network !== undefined) view.setBigUint64(8, data.Network === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Network))), true);
  return buf;
}

export class WLAN_AVAILABLE_NETWORK_LIST_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Network(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumberOfItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Network(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_INTERFACE_INFO_LIST (size: 16)
 */
export interface WLAN_INTERFACE_INFO_LIST {
  /** u32 */
  dwNumberOfItems: number;
  /** u32 */
  dwIndex: number;
  /** array */
  InterfaceInfo: Deno.PointerValue;
}

export const sizeofWLAN_INTERFACE_INFO_LIST = 16;

export function allocWLAN_INTERFACE_INFO_LIST(data?: Partial<WLAN_INTERFACE_INFO_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_INTERFACE_INFO_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfItems !== undefined) view.setUint32(0, Number(data.dwNumberOfItems), true);
  // 0x04: u32
  if (data?.dwIndex !== undefined) view.setUint32(4, Number(data.dwIndex), true);
  // 0x08: pointer
  if (data?.InterfaceInfo !== undefined) view.setBigUint64(8, data.InterfaceInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceInfo))), true);
  return buf;
}

export class WLAN_INTERFACE_INFO_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get InterfaceInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumberOfItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set InterfaceInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_NETWORK_LIST (size: 16)
 */
export interface DOT11_NETWORK_LIST {
  /** u32 */
  dwNumberOfItems: number;
  /** u32 */
  dwIndex: number;
  /** array */
  Network: Deno.PointerValue;
}

export const sizeofDOT11_NETWORK_LIST = 16;

export function allocDOT11_NETWORK_LIST(data?: Partial<DOT11_NETWORK_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_NETWORK_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfItems !== undefined) view.setUint32(0, Number(data.dwNumberOfItems), true);
  // 0x04: u32
  if (data?.dwIndex !== undefined) view.setUint32(4, Number(data.dwIndex), true);
  // 0x08: pointer
  if (data?.Network !== undefined) view.setBigUint64(8, data.Network === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Network))), true);
  return buf;
}

export class DOT11_NETWORK_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Network(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumberOfItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Network(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_CONNECTION_PARAMETERS (size: 40)
 */
export interface WLAN_CONNECTION_PARAMETERS {
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_CONNECTION_MODE */
  wlanConnectionMode: WLAN_CONNECTION_MODE;
  /** Windows.Win32.Foundation.PWSTR */
  strProfile: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pDot11Ssid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pDesiredBssidList: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BssType: DOT11_BSS_TYPE;
  /** u32 */
  dwFlags: number;
}

export const sizeofWLAN_CONNECTION_PARAMETERS = 40;

export function allocWLAN_CONNECTION_PARAMETERS(data?: Partial<WLAN_CONNECTION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_CONNECTION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wlanConnectionMode !== undefined) view.setInt32(0, Number(data.wlanConnectionMode), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.strProfile !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.strProfile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.pDot11Ssid !== undefined) view.setBigUint64(16, data.pDot11Ssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDot11Ssid))), true);
  // 0x18: pointer
  if (data?.pDesiredBssidList !== undefined) view.setBigUint64(24, data.pDesiredBssidList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDesiredBssidList))), true);
  // 0x20: i32
  if (data?.dot11BssType !== undefined) view.setInt32(32, Number(data.dot11BssType), true);
  // 0x24: u32
  if (data?.dwFlags !== undefined) view.setUint32(36, Number(data.dwFlags), true);
  return buf;
}

export class WLAN_CONNECTION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get wlanConnectionMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get strProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pDot11Ssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pDesiredBssidList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get dot11BssType(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get dwFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: i32
  set wlanConnectionMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set strProfile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set pDot11Ssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pDesiredBssidList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set dot11BssType(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set dwFlags(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_CONNECTION_PARAMETERS_V2 (size: 56)
 */
export interface WLAN_CONNECTION_PARAMETERS_V2 {
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_CONNECTION_MODE */
  wlanConnectionMode: WLAN_CONNECTION_MODE;
  /** Windows.Win32.Foundation.PWSTR */
  strProfile: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pDot11Ssid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pDot11Hessid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pDesiredBssidList: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BssType: DOT11_BSS_TYPE;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pDot11AccessNetworkOptions: Deno.PointerValue | Uint8Array;
}

export const sizeofWLAN_CONNECTION_PARAMETERS_V2 = 56;

export function allocWLAN_CONNECTION_PARAMETERS_V2(data?: Partial<WLAN_CONNECTION_PARAMETERS_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_CONNECTION_PARAMETERS_V2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wlanConnectionMode !== undefined) view.setInt32(0, Number(data.wlanConnectionMode), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.strProfile !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.strProfile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.pDot11Ssid !== undefined) view.setBigUint64(16, data.pDot11Ssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDot11Ssid))), true);
  // 0x18: pointer
  if (data?.pDot11Hessid !== undefined) view.setBigUint64(24, data.pDot11Hessid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDot11Hessid))), true);
  // 0x20: pointer
  if (data?.pDesiredBssidList !== undefined) view.setBigUint64(32, data.pDesiredBssidList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDesiredBssidList))), true);
  // 0x28: i32
  if (data?.dot11BssType !== undefined) view.setInt32(40, Number(data.dot11BssType), true);
  // 0x2c: u32
  if (data?.dwFlags !== undefined) view.setUint32(44, Number(data.dwFlags), true);
  // 0x30: pointer
  if (data?.pDot11AccessNetworkOptions !== undefined) view.setBigUint64(48, data.pDot11AccessNetworkOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDot11AccessNetworkOptions))), true);
  return buf;
}

export class WLAN_CONNECTION_PARAMETERS_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get wlanConnectionMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get strProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pDot11Ssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pDot11Hessid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pDesiredBssidList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get dot11BssType(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get dwFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get pDot11AccessNetworkOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set wlanConnectionMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set strProfile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set pDot11Ssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pDot11Hessid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pDesiredBssidList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set dot11BssType(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set dwFlags(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set pDot11AccessNetworkOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_MSM_NOTIFICATION_DATA (size: 56)
 */
export interface WLAN_MSM_NOTIFICATION_DATA {
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_CONNECTION_MODE */
  wlanConnectionMode: WLAN_CONNECTION_MODE;
  /** array */
  strProfileName: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  dot11Ssid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BssType: DOT11_BSS_TYPE;
  /** array */
  dot11MacAddr: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  bSecurityEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bFirstPeer: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bLastPeer: boolean;
  /** u32 */
  wlanReasonCode: number;
}

export const sizeofWLAN_MSM_NOTIFICATION_DATA = 56;

export function allocWLAN_MSM_NOTIFICATION_DATA(data?: Partial<WLAN_MSM_NOTIFICATION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_MSM_NOTIFICATION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wlanConnectionMode !== undefined) view.setInt32(0, Number(data.wlanConnectionMode), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.strProfileName !== undefined) view.setBigUint64(8, data.strProfileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.strProfileName))), true);
  // 0x10: pointer
  if (data?.dot11Ssid !== undefined) view.setBigUint64(16, data.dot11Ssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11Ssid))), true);
  // 0x18: i32
  if (data?.dot11BssType !== undefined) view.setInt32(24, Number(data.dot11BssType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.dot11MacAddr !== undefined) view.setBigUint64(32, data.dot11MacAddr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11MacAddr))), true);
  // 0x28: i32
  if (data?.bSecurityEnabled !== undefined) view.setInt32(40, Number(data.bSecurityEnabled), true);
  // 0x2c: i32
  if (data?.bFirstPeer !== undefined) view.setInt32(44, Number(data.bFirstPeer), true);
  // 0x30: i32
  if (data?.bLastPeer !== undefined) view.setInt32(48, Number(data.bLastPeer), true);
  // 0x34: u32
  if (data?.wlanReasonCode !== undefined) view.setUint32(52, Number(data.wlanReasonCode), true);
  return buf;
}

export class WLAN_MSM_NOTIFICATION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get wlanConnectionMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get strProfileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get dot11Ssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get dot11BssType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get dot11MacAddr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get bSecurityEnabled(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get bFirstPeer(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get bLastPeer(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get wlanReasonCode(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: i32
  set wlanConnectionMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set strProfileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set dot11Ssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set dot11BssType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set dot11MacAddr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set bSecurityEnabled(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set bFirstPeer(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set bLastPeer(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set wlanReasonCode(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_CONNECTION_NOTIFICATION_DATA (size: 48)
 */
export interface WLAN_CONNECTION_NOTIFICATION_DATA {
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_CONNECTION_MODE */
  wlanConnectionMode: WLAN_CONNECTION_MODE;
  /** array */
  strProfileName: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  dot11Ssid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  dot11BssType: DOT11_BSS_TYPE;
  /** Windows.Win32.Foundation.BOOL */
  bSecurityEnabled: boolean;
  /** u32 */
  wlanReasonCode: number;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_CONNECTION_NOTIFICATION_FLAGS */
  dwFlags: WLAN_CONNECTION_NOTIFICATION_FLAGS;
  /** array */
  strProfileXml: Deno.PointerValue;
}

export const sizeofWLAN_CONNECTION_NOTIFICATION_DATA = 48;

export function allocWLAN_CONNECTION_NOTIFICATION_DATA(data?: Partial<WLAN_CONNECTION_NOTIFICATION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_CONNECTION_NOTIFICATION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wlanConnectionMode !== undefined) view.setInt32(0, Number(data.wlanConnectionMode), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.strProfileName !== undefined) view.setBigUint64(8, data.strProfileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.strProfileName))), true);
  // 0x10: pointer
  if (data?.dot11Ssid !== undefined) view.setBigUint64(16, data.dot11Ssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11Ssid))), true);
  // 0x18: i32
  if (data?.dot11BssType !== undefined) view.setInt32(24, Number(data.dot11BssType), true);
  // 0x1c: i32
  if (data?.bSecurityEnabled !== undefined) view.setInt32(28, Number(data.bSecurityEnabled), true);
  // 0x20: u32
  if (data?.wlanReasonCode !== undefined) view.setUint32(32, Number(data.wlanReasonCode), true);
  // 0x24: u32
  if (data?.dwFlags !== undefined) view.setUint32(36, Number(data.dwFlags), true);
  // 0x28: pointer
  if (data?.strProfileXml !== undefined) view.setBigUint64(40, data.strProfileXml === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.strProfileXml))), true);
  return buf;
}

export class WLAN_CONNECTION_NOTIFICATION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get wlanConnectionMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get strProfileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get dot11Ssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get dot11BssType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get bSecurityEnabled(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get wlanReasonCode(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get strProfileXml(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set wlanConnectionMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set strProfileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set dot11Ssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set dot11BssType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set bSecurityEnabled(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set wlanReasonCode(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set strProfileXml(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_DEVICE_SERVICE_NOTIFICATION_DATA (size: 24)
 */
export interface WLAN_DEVICE_SERVICE_NOTIFICATION_DATA {
  /** System.Guid */
  DeviceService: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwOpCode: number;
  /** u32 */
  dwDataSize: number;
  /** array */
  DataBlob: Deno.PointerValue;
}

export const sizeofWLAN_DEVICE_SERVICE_NOTIFICATION_DATA = 24;

export function allocWLAN_DEVICE_SERVICE_NOTIFICATION_DATA(data?: Partial<WLAN_DEVICE_SERVICE_NOTIFICATION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_DEVICE_SERVICE_NOTIFICATION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceService !== undefined) view.setBigUint64(0, data.DeviceService === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceService))), true);
  // 0x08: u32
  if (data?.dwOpCode !== undefined) view.setUint32(8, Number(data.dwOpCode), true);
  // 0x0c: u32
  if (data?.dwDataSize !== undefined) view.setUint32(12, Number(data.dwDataSize), true);
  // 0x10: pointer
  if (data?.DataBlob !== undefined) view.setBigUint64(16, data.DataBlob === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DataBlob))), true);
  return buf;
}

export class WLAN_DEVICE_SERVICE_NOTIFICATION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceService(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwOpCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwDataSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get DataBlob(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DeviceService(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwOpCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwDataSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set DataBlob(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_PHY_FRAME_STATISTICS (size: 144)
 */
export interface WLAN_PHY_FRAME_STATISTICS {
  /** u64 */
  ullTransmittedFrameCount: Deno.PointerValue;
  /** u64 */
  ullMulticastTransmittedFrameCount: Deno.PointerValue;
  /** u64 */
  ullFailedCount: Deno.PointerValue;
  /** u64 */
  ullRetryCount: Deno.PointerValue;
  /** u64 */
  ullMultipleRetryCount: Deno.PointerValue;
  /** u64 */
  ullMaxTXLifetimeExceededCount: Deno.PointerValue;
  /** u64 */
  ullTransmittedFragmentCount: Deno.PointerValue;
  /** u64 */
  ullRTSSuccessCount: Deno.PointerValue;
  /** u64 */
  ullRTSFailureCount: Deno.PointerValue;
  /** u64 */
  ullACKFailureCount: Deno.PointerValue;
  /** u64 */
  ullReceivedFrameCount: Deno.PointerValue;
  /** u64 */
  ullMulticastReceivedFrameCount: Deno.PointerValue;
  /** u64 */
  ullPromiscuousReceivedFrameCount: Deno.PointerValue;
  /** u64 */
  ullMaxRXLifetimeExceededCount: Deno.PointerValue;
  /** u64 */
  ullFrameDuplicateCount: Deno.PointerValue;
  /** u64 */
  ullReceivedFragmentCount: Deno.PointerValue;
  /** u64 */
  ullPromiscuousReceivedFragmentCount: Deno.PointerValue;
  /** u64 */
  ullFCSErrorCount: Deno.PointerValue;
}

export const sizeofWLAN_PHY_FRAME_STATISTICS = 144;

export function allocWLAN_PHY_FRAME_STATISTICS(data?: Partial<WLAN_PHY_FRAME_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_PHY_FRAME_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullTransmittedFrameCount !== undefined) view.setBigUint64(0, BigInt(data.ullTransmittedFrameCount), true);
  // 0x08: u64
  if (data?.ullMulticastTransmittedFrameCount !== undefined) view.setBigUint64(8, BigInt(data.ullMulticastTransmittedFrameCount), true);
  // 0x10: u64
  if (data?.ullFailedCount !== undefined) view.setBigUint64(16, BigInt(data.ullFailedCount), true);
  // 0x18: u64
  if (data?.ullRetryCount !== undefined) view.setBigUint64(24, BigInt(data.ullRetryCount), true);
  // 0x20: u64
  if (data?.ullMultipleRetryCount !== undefined) view.setBigUint64(32, BigInt(data.ullMultipleRetryCount), true);
  // 0x28: u64
  if (data?.ullMaxTXLifetimeExceededCount !== undefined) view.setBigUint64(40, BigInt(data.ullMaxTXLifetimeExceededCount), true);
  // 0x30: u64
  if (data?.ullTransmittedFragmentCount !== undefined) view.setBigUint64(48, BigInt(data.ullTransmittedFragmentCount), true);
  // 0x38: u64
  if (data?.ullRTSSuccessCount !== undefined) view.setBigUint64(56, BigInt(data.ullRTSSuccessCount), true);
  // 0x40: u64
  if (data?.ullRTSFailureCount !== undefined) view.setBigUint64(64, BigInt(data.ullRTSFailureCount), true);
  // 0x48: u64
  if (data?.ullACKFailureCount !== undefined) view.setBigUint64(72, BigInt(data.ullACKFailureCount), true);
  // 0x50: u64
  if (data?.ullReceivedFrameCount !== undefined) view.setBigUint64(80, BigInt(data.ullReceivedFrameCount), true);
  // 0x58: u64
  if (data?.ullMulticastReceivedFrameCount !== undefined) view.setBigUint64(88, BigInt(data.ullMulticastReceivedFrameCount), true);
  // 0x60: u64
  if (data?.ullPromiscuousReceivedFrameCount !== undefined) view.setBigUint64(96, BigInt(data.ullPromiscuousReceivedFrameCount), true);
  // 0x68: u64
  if (data?.ullMaxRXLifetimeExceededCount !== undefined) view.setBigUint64(104, BigInt(data.ullMaxRXLifetimeExceededCount), true);
  // 0x70: u64
  if (data?.ullFrameDuplicateCount !== undefined) view.setBigUint64(112, BigInt(data.ullFrameDuplicateCount), true);
  // 0x78: u64
  if (data?.ullReceivedFragmentCount !== undefined) view.setBigUint64(120, BigInt(data.ullReceivedFragmentCount), true);
  // 0x80: u64
  if (data?.ullPromiscuousReceivedFragmentCount !== undefined) view.setBigUint64(128, BigInt(data.ullPromiscuousReceivedFragmentCount), true);
  // 0x88: u64
  if (data?.ullFCSErrorCount !== undefined) view.setBigUint64(136, BigInt(data.ullFCSErrorCount), true);
  return buf;
}

export class WLAN_PHY_FRAME_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ullTransmittedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get ullMulticastTransmittedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get ullFailedCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ullRetryCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get ullMultipleRetryCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get ullMaxTXLifetimeExceededCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get ullTransmittedFragmentCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get ullRTSSuccessCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get ullRTSFailureCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get ullACKFailureCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get ullReceivedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: u64
  get ullMulticastReceivedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x60: u64
  get ullPromiscuousReceivedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(96, true));
  }

  // 0x68: u64
  get ullMaxRXLifetimeExceededCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(104, true));
  }

  // 0x70: u64
  get ullFrameDuplicateCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(112, true));
  }

  // 0x78: u64
  get ullReceivedFragmentCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x80: u64
  get ullPromiscuousReceivedFragmentCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(128, true));
  }

  // 0x88: u64
  get ullFCSErrorCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(136, true));
  }

  // 0x00: u64
  set ullTransmittedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set ullMulticastTransmittedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set ullFailedCount(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ullRetryCount(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set ullMultipleRetryCount(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set ullMaxTXLifetimeExceededCount(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set ullTransmittedFragmentCount(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set ullRTSSuccessCount(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set ullRTSFailureCount(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set ullACKFailureCount(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set ullReceivedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: u64
  set ullMulticastReceivedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(value), true);
  }

  // 0x60: u64
  set ullPromiscuousReceivedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(value), true);
  }

  // 0x68: u64
  set ullMaxRXLifetimeExceededCount(value: Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(value), true);
  }

  // 0x70: u64
  set ullFrameDuplicateCount(value: Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(value), true);
  }

  // 0x78: u64
  set ullReceivedFragmentCount(value: Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(value), true);
  }

  // 0x80: u64
  set ullPromiscuousReceivedFragmentCount(value: Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(value), true);
  }

  // 0x88: u64
  set ullFCSErrorCount(value: Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_MAC_FRAME_STATISTICS (size: 96)
 */
export interface WLAN_MAC_FRAME_STATISTICS {
  /** u64 */
  ullTransmittedFrameCount: Deno.PointerValue;
  /** u64 */
  ullReceivedFrameCount: Deno.PointerValue;
  /** u64 */
  ullWEPExcludedCount: Deno.PointerValue;
  /** u64 */
  ullTKIPLocalMICFailures: Deno.PointerValue;
  /** u64 */
  ullTKIPReplays: Deno.PointerValue;
  /** u64 */
  ullTKIPICVErrorCount: Deno.PointerValue;
  /** u64 */
  ullCCMPReplays: Deno.PointerValue;
  /** u64 */
  ullCCMPDecryptErrors: Deno.PointerValue;
  /** u64 */
  ullWEPUndecryptableCount: Deno.PointerValue;
  /** u64 */
  ullWEPICVErrorCount: Deno.PointerValue;
  /** u64 */
  ullDecryptSuccessCount: Deno.PointerValue;
  /** u64 */
  ullDecryptFailureCount: Deno.PointerValue;
}

export const sizeofWLAN_MAC_FRAME_STATISTICS = 96;

export function allocWLAN_MAC_FRAME_STATISTICS(data?: Partial<WLAN_MAC_FRAME_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_MAC_FRAME_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullTransmittedFrameCount !== undefined) view.setBigUint64(0, BigInt(data.ullTransmittedFrameCount), true);
  // 0x08: u64
  if (data?.ullReceivedFrameCount !== undefined) view.setBigUint64(8, BigInt(data.ullReceivedFrameCount), true);
  // 0x10: u64
  if (data?.ullWEPExcludedCount !== undefined) view.setBigUint64(16, BigInt(data.ullWEPExcludedCount), true);
  // 0x18: u64
  if (data?.ullTKIPLocalMICFailures !== undefined) view.setBigUint64(24, BigInt(data.ullTKIPLocalMICFailures), true);
  // 0x20: u64
  if (data?.ullTKIPReplays !== undefined) view.setBigUint64(32, BigInt(data.ullTKIPReplays), true);
  // 0x28: u64
  if (data?.ullTKIPICVErrorCount !== undefined) view.setBigUint64(40, BigInt(data.ullTKIPICVErrorCount), true);
  // 0x30: u64
  if (data?.ullCCMPReplays !== undefined) view.setBigUint64(48, BigInt(data.ullCCMPReplays), true);
  // 0x38: u64
  if (data?.ullCCMPDecryptErrors !== undefined) view.setBigUint64(56, BigInt(data.ullCCMPDecryptErrors), true);
  // 0x40: u64
  if (data?.ullWEPUndecryptableCount !== undefined) view.setBigUint64(64, BigInt(data.ullWEPUndecryptableCount), true);
  // 0x48: u64
  if (data?.ullWEPICVErrorCount !== undefined) view.setBigUint64(72, BigInt(data.ullWEPICVErrorCount), true);
  // 0x50: u64
  if (data?.ullDecryptSuccessCount !== undefined) view.setBigUint64(80, BigInt(data.ullDecryptSuccessCount), true);
  // 0x58: u64
  if (data?.ullDecryptFailureCount !== undefined) view.setBigUint64(88, BigInt(data.ullDecryptFailureCount), true);
  return buf;
}

export class WLAN_MAC_FRAME_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ullTransmittedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get ullReceivedFrameCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get ullWEPExcludedCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ullTKIPLocalMICFailures(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get ullTKIPReplays(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get ullTKIPICVErrorCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get ullCCMPReplays(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get ullCCMPDecryptErrors(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get ullWEPUndecryptableCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get ullWEPICVErrorCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get ullDecryptSuccessCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: u64
  get ullDecryptFailureCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x00: u64
  set ullTransmittedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set ullReceivedFrameCount(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set ullWEPExcludedCount(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ullTKIPLocalMICFailures(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set ullTKIPReplays(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set ullTKIPICVErrorCount(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set ullCCMPReplays(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set ullCCMPDecryptErrors(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set ullWEPUndecryptableCount(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set ullWEPICVErrorCount(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set ullDecryptSuccessCount(value: Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: u64
  set ullDecryptFailureCount(value: Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(value), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_STATISTICS (size: 56)
 */
export interface WLAN_STATISTICS {
  /** u64 */
  ullFourWayHandshakeFailures: Deno.PointerValue;
  /** u64 */
  ullTKIPCounterMeasuresInvoked: Deno.PointerValue;
  /** u64 */
  ullReserved: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_MAC_FRAME_STATISTICS */
  MacUcastCounters: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_MAC_FRAME_STATISTICS */
  MacMcastCounters: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwNumberOfPhys: number;
  /** array */
  PhyCounters: Deno.PointerValue;
}

export const sizeofWLAN_STATISTICS = 56;

export function allocWLAN_STATISTICS(data?: Partial<WLAN_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullFourWayHandshakeFailures !== undefined) view.setBigUint64(0, BigInt(data.ullFourWayHandshakeFailures), true);
  // 0x08: u64
  if (data?.ullTKIPCounterMeasuresInvoked !== undefined) view.setBigUint64(8, BigInt(data.ullTKIPCounterMeasuresInvoked), true);
  // 0x10: u64
  if (data?.ullReserved !== undefined) view.setBigUint64(16, BigInt(data.ullReserved), true);
  // 0x18: pointer
  if (data?.MacUcastCounters !== undefined) view.setBigUint64(24, data.MacUcastCounters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MacUcastCounters))), true);
  // 0x20: pointer
  if (data?.MacMcastCounters !== undefined) view.setBigUint64(32, data.MacMcastCounters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MacMcastCounters))), true);
  // 0x28: u32
  if (data?.dwNumberOfPhys !== undefined) view.setUint32(40, Number(data.dwNumberOfPhys), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.PhyCounters !== undefined) view.setBigUint64(48, data.PhyCounters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhyCounters))), true);
  return buf;
}

export class WLAN_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ullFourWayHandshakeFailures(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get ullTKIPCounterMeasuresInvoked(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get ullReserved(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get MacUcastCounters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get MacMcastCounters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwNumberOfPhys(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get PhyCounters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set ullFourWayHandshakeFailures(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set ullTKIPCounterMeasuresInvoked(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set ullReserved(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set MacUcastCounters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set MacMcastCounters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwNumberOfPhys(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set PhyCounters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_DEVICE_SERVICE_GUID_LIST (size: 16)
 */
export interface WLAN_DEVICE_SERVICE_GUID_LIST {
  /** u32 */
  dwNumberOfItems: number;
  /** u32 */
  dwIndex: number;
  /** array */
  DeviceService: Deno.PointerValue;
}

export const sizeofWLAN_DEVICE_SERVICE_GUID_LIST = 16;

export function allocWLAN_DEVICE_SERVICE_GUID_LIST(data?: Partial<WLAN_DEVICE_SERVICE_GUID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_DEVICE_SERVICE_GUID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfItems !== undefined) view.setUint32(0, Number(data.dwNumberOfItems), true);
  // 0x04: u32
  if (data?.dwIndex !== undefined) view.setUint32(4, Number(data.dwIndex), true);
  // 0x08: pointer
  if (data?.DeviceService !== undefined) view.setBigUint64(8, data.DeviceService === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceService))), true);
  return buf;
}

export class WLAN_DEVICE_SERVICE_GUID_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DeviceService(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNumberOfItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DeviceService(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WFD_GROUP_ID (size: 16)
 */
export interface WFD_GROUP_ID {
  /** array */
  DeviceAddress: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  GroupSSID: Uint8Array | Deno.PointerValue;
}

export const sizeofWFD_GROUP_ID = 16;

export function allocWFD_GROUP_ID(data?: Partial<WFD_GROUP_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofWFD_GROUP_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceAddress !== undefined) view.setBigUint64(0, data.DeviceAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceAddress))), true);
  // 0x08: pointer
  if (data?.GroupSSID !== undefined) view.setBigUint64(8, data.GroupSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GroupSSID))), true);
  return buf;
}

export class WFD_GROUP_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get GroupSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DeviceAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set GroupSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_PEER_STATE (size: 16)
 */
export interface WLAN_HOSTED_NETWORK_PEER_STATE {
  /** array */
  PeerMacAddress: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_PEER_AUTH_STATE */
  PeerAuthState: WLAN_HOSTED_NETWORK_PEER_AUTH_STATE;
}

export const sizeofWLAN_HOSTED_NETWORK_PEER_STATE = 16;

export function allocWLAN_HOSTED_NETWORK_PEER_STATE(data?: Partial<WLAN_HOSTED_NETWORK_PEER_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_HOSTED_NETWORK_PEER_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PeerMacAddress !== undefined) view.setBigUint64(0, data.PeerMacAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMacAddress))), true);
  // 0x08: i32
  if (data?.PeerAuthState !== undefined) view.setInt32(8, Number(data.PeerAuthState), true);
  // 0x0c: pad4
  return buf;
}

export class WLAN_HOSTED_NETWORK_PEER_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PeerMacAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get PeerAuthState(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set PeerMacAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set PeerAuthState(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_RADIO_STATE (size: 8)
 */
export interface WLAN_HOSTED_NETWORK_RADIO_STATE {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_RADIO_STATE */
  dot11SoftwareRadioState: DOT11_RADIO_STATE;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_RADIO_STATE */
  dot11HardwareRadioState: DOT11_RADIO_STATE;
}

export const sizeofWLAN_HOSTED_NETWORK_RADIO_STATE = 8;

export function allocWLAN_HOSTED_NETWORK_RADIO_STATE(data?: Partial<WLAN_HOSTED_NETWORK_RADIO_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_HOSTED_NETWORK_RADIO_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dot11SoftwareRadioState !== undefined) view.setInt32(0, Number(data.dot11SoftwareRadioState), true);
  // 0x04: i32
  if (data?.dot11HardwareRadioState !== undefined) view.setInt32(4, Number(data.dot11HardwareRadioState), true);
  return buf;
}

export class WLAN_HOSTED_NETWORK_RADIO_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dot11SoftwareRadioState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get dot11HardwareRadioState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set dot11SoftwareRadioState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set dot11HardwareRadioState(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_STATE_CHANGE (size: 16)
 */
export interface WLAN_HOSTED_NETWORK_STATE_CHANGE {
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_STATE */
  OldState: WLAN_HOSTED_NETWORK_STATE;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_STATE */
  NewState: WLAN_HOSTED_NETWORK_STATE;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_REASON */
  StateChangeReason: WLAN_HOSTED_NETWORK_REASON;
}

export const sizeofWLAN_HOSTED_NETWORK_STATE_CHANGE = 16;

export function allocWLAN_HOSTED_NETWORK_STATE_CHANGE(data?: Partial<WLAN_HOSTED_NETWORK_STATE_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_HOSTED_NETWORK_STATE_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OldState !== undefined) view.setInt32(0, Number(data.OldState), true);
  // 0x04: i32
  if (data?.NewState !== undefined) view.setInt32(4, Number(data.NewState), true);
  // 0x08: i32
  if (data?.StateChangeReason !== undefined) view.setInt32(8, Number(data.StateChangeReason), true);
  // 0x0c: pad4
  return buf;
}

export class WLAN_HOSTED_NETWORK_STATE_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get OldState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get NewState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get StateChangeReason(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set OldState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set NewState(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set StateChangeReason(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE (size: 24)
 */
export interface WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE {
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_PEER_STATE */
  OldState: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_PEER_STATE */
  NewState: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_REASON */
  PeerStateChangeReason: WLAN_HOSTED_NETWORK_REASON;
}

export const sizeofWLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE = 24;

export function allocWLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE(data?: Partial<WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OldState !== undefined) view.setBigUint64(0, data.OldState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OldState))), true);
  // 0x08: pointer
  if (data?.NewState !== undefined) view.setBigUint64(8, data.NewState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NewState))), true);
  // 0x10: i32
  if (data?.PeerStateChangeReason !== undefined) view.setInt32(16, Number(data.PeerStateChangeReason), true);
  // 0x14: pad4
  return buf;
}

export class WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get OldState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get NewState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get PeerStateChangeReason(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set OldState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set NewState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set PeerStateChangeReason(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS (size: 16)
 */
export interface WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  hostedNetworkSSID: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMaxNumberOfPeers: number;
}

export const sizeofWLAN_HOSTED_NETWORK_CONNECTION_SETTINGS = 16;

export function allocWLAN_HOSTED_NETWORK_CONNECTION_SETTINGS(data?: Partial<WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_HOSTED_NETWORK_CONNECTION_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hostedNetworkSSID !== undefined) view.setBigUint64(0, data.hostedNetworkSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hostedNetworkSSID))), true);
  // 0x08: u32
  if (data?.dwMaxNumberOfPeers !== undefined) view.setUint32(8, Number(data.dwMaxNumberOfPeers), true);
  // 0x0c: pad4
  return buf;
}

export class WLAN_HOSTED_NETWORK_CONNECTION_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hostedNetworkSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwMaxNumberOfPeers(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set hostedNetworkSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwMaxNumberOfPeers(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_SECURITY_SETTINGS (size: 8)
 */
export interface WLAN_HOSTED_NETWORK_SECURITY_SETTINGS {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM */
  dot11AuthAlgo: DOT11_AUTH_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  dot11CipherAlgo: DOT11_CIPHER_ALGORITHM;
}

export const sizeofWLAN_HOSTED_NETWORK_SECURITY_SETTINGS = 8;

export function allocWLAN_HOSTED_NETWORK_SECURITY_SETTINGS(data?: Partial<WLAN_HOSTED_NETWORK_SECURITY_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_HOSTED_NETWORK_SECURITY_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dot11AuthAlgo !== undefined) view.setInt32(0, Number(data.dot11AuthAlgo), true);
  // 0x04: i32
  if (data?.dot11CipherAlgo !== undefined) view.setInt32(4, Number(data.dot11CipherAlgo), true);
  return buf;
}

export class WLAN_HOSTED_NETWORK_SECURITY_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dot11AuthAlgo(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get dot11CipherAlgo(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set dot11AuthAlgo(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set dot11CipherAlgo(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_STATUS (size: 48)
 */
export interface WLAN_HOSTED_NETWORK_STATUS {
  /** Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_STATE */
  HostedNetworkState: WLAN_HOSTED_NETWORK_STATE;
  /** System.Guid */
  IPDeviceID: Uint8Array | Deno.PointerValue;
  /** array */
  wlanHostedNetworkBSSID: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_PHY_TYPE */
  dot11PhyType: DOT11_PHY_TYPE;
  /** u32 */
  ulChannelFrequency: number;
  /** u32 */
  dwNumberOfPeers: number;
  /** array */
  PeerList: Deno.PointerValue;
}

export const sizeofWLAN_HOSTED_NETWORK_STATUS = 48;

export function allocWLAN_HOSTED_NETWORK_STATUS(data?: Partial<WLAN_HOSTED_NETWORK_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofWLAN_HOSTED_NETWORK_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.HostedNetworkState !== undefined) view.setInt32(0, Number(data.HostedNetworkState), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IPDeviceID !== undefined) view.setBigUint64(8, data.IPDeviceID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IPDeviceID))), true);
  // 0x10: pointer
  if (data?.wlanHostedNetworkBSSID !== undefined) view.setBigUint64(16, data.wlanHostedNetworkBSSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wlanHostedNetworkBSSID))), true);
  // 0x18: i32
  if (data?.dot11PhyType !== undefined) view.setInt32(24, Number(data.dot11PhyType), true);
  // 0x1c: u32
  if (data?.ulChannelFrequency !== undefined) view.setUint32(28, Number(data.ulChannelFrequency), true);
  // 0x20: u32
  if (data?.dwNumberOfPeers !== undefined) view.setUint32(32, Number(data.dwNumberOfPeers), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.PeerList !== undefined) view.setBigUint64(40, data.PeerList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerList))), true);
  return buf;
}

export class WLAN_HOSTED_NETWORK_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get HostedNetworkState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get IPDeviceID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get wlanHostedNetworkBSSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get dot11PhyType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get ulChannelFrequency(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwNumberOfPeers(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get PeerList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set HostedNetworkState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set IPDeviceID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set wlanHostedNetworkBSSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set dot11PhyType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set ulChannelFrequency(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwNumberOfPeers(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set PeerList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB (size: 8)
 */
export interface ONEX_VARIABLE_BLOB {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwOffset: number;
}

export const sizeofONEX_VARIABLE_BLOB = 8;

export function allocONEX_VARIABLE_BLOB(data?: Partial<ONEX_VARIABLE_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofONEX_VARIABLE_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwOffset !== undefined) view.setUint32(4, Number(data.dwOffset), true);
  return buf;
}

export class ONEX_VARIABLE_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwOffset(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.ONEX_AUTH_PARAMS (size: 72)
 */
export interface ONEX_AUTH_PARAMS {
  /** Windows.Win32.Foundation.BOOL */
  fUpdatePending: boolean;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB */
  oneXConnProfile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_AUTH_IDENTITY */
  authIdentity: ONEX_AUTH_IDENTITY;
  /** u32 */
  dwQuarantineState: number;
  /** u32 */
  _bitfield: number;
  /** u32 */
  dwSessionId: number;
  /** Windows.Win32.Foundation.HANDLE */
  hUserToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB */
  OneXUserProfile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB */
  Identity: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB */
  Domain: Uint8Array | Deno.PointerValue;
}

export const sizeofONEX_AUTH_PARAMS = 72;

export function allocONEX_AUTH_PARAMS(data?: Partial<ONEX_AUTH_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofONEX_AUTH_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fUpdatePending !== undefined) view.setInt32(0, Number(data.fUpdatePending), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.oneXConnProfile !== undefined) view.setBigUint64(8, data.oneXConnProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.oneXConnProfile))), true);
  // 0x10: i32
  if (data?.authIdentity !== undefined) view.setInt32(16, Number(data.authIdentity), true);
  // 0x14: u32
  if (data?.dwQuarantineState !== undefined) view.setUint32(20, Number(data.dwQuarantineState), true);
  // 0x18: u32
  if (data?._bitfield !== undefined) view.setUint32(24, Number(data._bitfield), true);
  // 0x1c: u32
  if (data?.dwSessionId !== undefined) view.setUint32(28, Number(data.dwSessionId), true);
  // 0x20: pointer
  if (data?.hUserToken !== undefined) view.setBigUint64(32, data.hUserToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hUserToken))), true);
  // 0x28: pointer
  if (data?.OneXUserProfile !== undefined) view.setBigUint64(40, data.OneXUserProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OneXUserProfile))), true);
  // 0x30: pointer
  if (data?.Identity !== undefined) view.setBigUint64(48, data.Identity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Identity))), true);
  // 0x38: pointer
  if (data?.UserName !== undefined) view.setBigUint64(56, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x40: pointer
  if (data?.Domain !== undefined) view.setBigUint64(64, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  return buf;
}

export class ONEX_AUTH_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fUpdatePending(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get oneXConnProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get authIdentity(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get dwQuarantineState(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get _bitfield(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwSessionId(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get hUserToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OneXUserProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Identity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set fUpdatePending(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set oneXConnProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set authIdentity(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set dwQuarantineState(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set _bitfield(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwSessionId(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set hUserToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OneXUserProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Identity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_TYPE (size: 16)
 */
export interface EAP_TYPE {
  /** u8 */
  type: number;
  /** u32 */
  dwVendorId: number;
  /** u32 */
  dwVendorType: number;
}

export const sizeofEAP_TYPE = 16;

export function allocEAP_TYPE(data?: Partial<EAP_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.type !== undefined) view.setUint8(0, Number(data.type));
  // 0x01: u32
  if (data?.dwVendorId !== undefined) view.setUint32(1, Number(data.dwVendorId), true);
  // 0x05: u32
  if (data?.dwVendorType !== undefined) view.setUint32(5, Number(data.dwVendorType), true);
  // 0x09: pad7
  return buf;
}

export class EAP_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get type(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u32
  get dwVendorId(): number {
    return this.view.getUint32(1, true);
  }

  // 0x05: u32
  get dwVendorType(): number {
    return this.view.getUint32(5, true);
  }

  // 0x09: pad7

  // 0x00: u8
  set type(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u32
  set dwVendorId(value: number) {
    this.view.setUint32(1, value, true);
  }

  // 0x05: u32
  set dwVendorType(value: number) {
    this.view.setUint32(5, value, true);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE (size: 16)
 */
export interface EAP_METHOD_TYPE {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_TYPE */
  eapType: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwAuthorId: number;
}

export const sizeofEAP_METHOD_TYPE = 16;

export function allocEAP_METHOD_TYPE(data?: Partial<EAP_METHOD_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eapType !== undefined) view.setBigUint64(0, data.eapType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.eapType))), true);
  // 0x08: u32
  if (data?.dwAuthorId !== undefined) view.setUint32(8, Number(data.dwAuthorId), true);
  // 0x0c: pad4
  return buf;
}

export class EAP_METHOD_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get eapType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwAuthorId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set eapType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwAuthorId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.ONEX_EAP_ERROR (size: 72)
 */
export interface ONEX_EAP_ERROR {
  /** u32 */
  dwWinError: number;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */
  type: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwReasonCode: number;
  /** System.Guid */
  rootCauseGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  repairGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  helpLinkGuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  _bitfield: number;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB */
  RootCauseString: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB */
  RepairString: Uint8Array | Deno.PointerValue;
}

export const sizeofONEX_EAP_ERROR = 72;

export function allocONEX_EAP_ERROR(data?: Partial<ONEX_EAP_ERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofONEX_EAP_ERROR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwWinError !== undefined) view.setUint32(0, Number(data.dwWinError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.type !== undefined) view.setBigUint64(8, data.type === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.type))), true);
  // 0x10: u32
  if (data?.dwReasonCode !== undefined) view.setUint32(16, Number(data.dwReasonCode), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rootCauseGuid !== undefined) view.setBigUint64(24, data.rootCauseGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rootCauseGuid))), true);
  // 0x20: pointer
  if (data?.repairGuid !== undefined) view.setBigUint64(32, data.repairGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.repairGuid))), true);
  // 0x28: pointer
  if (data?.helpLinkGuid !== undefined) view.setBigUint64(40, data.helpLinkGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.helpLinkGuid))), true);
  // 0x30: u32
  if (data?._bitfield !== undefined) view.setUint32(48, Number(data._bitfield), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.RootCauseString !== undefined) view.setBigUint64(56, data.RootCauseString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RootCauseString))), true);
  // 0x40: pointer
  if (data?.RepairString !== undefined) view.setBigUint64(64, data.RepairString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RepairString))), true);
  return buf;
}

export class ONEX_EAP_ERRORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwWinError(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get type(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwReasonCode(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rootCauseGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get repairGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get helpLinkGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get _bitfield(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get RootCauseString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get RepairString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwWinError(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set type(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwReasonCode(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rootCauseGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set repairGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set helpLinkGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set _bitfield(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set RootCauseString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set RepairString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.ONEX_STATUS (size: 16)
 */
export interface ONEX_STATUS {
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_AUTH_STATUS */
  authStatus: ONEX_AUTH_STATUS;
  /** u32 */
  dwReason: number;
  /** u32 */
  dwError: number;
}

export const sizeofONEX_STATUS = 16;

export function allocONEX_STATUS(data?: Partial<ONEX_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofONEX_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.authStatus !== undefined) view.setInt32(0, Number(data.authStatus), true);
  // 0x04: u32
  if (data?.dwReason !== undefined) view.setUint32(4, Number(data.dwReason), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: pad4
  return buf;
}

export class ONEX_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get authStatus(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwReason(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwError(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set authStatus(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwReason(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwError(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.ONEX_RESULT_UPDATE_DATA (size: 40)
 */
export interface ONEX_RESULT_UPDATE_DATA {
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_STATUS */
  oneXStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_EAP_METHOD_BACKEND_SUPPORT */
  BackendSupport: ONEX_EAP_METHOD_BACKEND_SUPPORT;
  /** Windows.Win32.Foundation.BOOL */
  fBackendEngaged: boolean;
  /** u32 */
  _bitfield: number;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB */
  authParams: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB */
  eapError: Uint8Array | Deno.PointerValue;
}

export const sizeofONEX_RESULT_UPDATE_DATA = 40;

export function allocONEX_RESULT_UPDATE_DATA(data?: Partial<ONEX_RESULT_UPDATE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofONEX_RESULT_UPDATE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.oneXStatus !== undefined) view.setBigUint64(0, data.oneXStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.oneXStatus))), true);
  // 0x08: i32
  if (data?.BackendSupport !== undefined) view.setInt32(8, Number(data.BackendSupport), true);
  // 0x0c: i32
  if (data?.fBackendEngaged !== undefined) view.setInt32(12, Number(data.fBackendEngaged), true);
  // 0x10: u32
  if (data?._bitfield !== undefined) view.setUint32(16, Number(data._bitfield), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.authParams !== undefined) view.setBigUint64(24, data.authParams === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.authParams))), true);
  // 0x20: pointer
  if (data?.eapError !== undefined) view.setBigUint64(32, data.eapError === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.eapError))), true);
  return buf;
}

export class ONEX_RESULT_UPDATE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get oneXStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get BackendSupport(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get fBackendEngaged(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get _bitfield(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get authParams(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get eapError(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set oneXStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set BackendSupport(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set fBackendEngaged(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set _bitfield(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set authParams(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set eapError(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.ONEX_USER_INFO (size: 24)
 */
export interface ONEX_USER_INFO {
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_AUTH_IDENTITY */
  authIdentity: ONEX_AUTH_IDENTITY;
  /** u32 */
  _bitfield: number;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_VARIABLE_BLOB */
  DomainName: Uint8Array | Deno.PointerValue;
}

export const sizeofONEX_USER_INFO = 24;

export function allocONEX_USER_INFO(data?: Partial<ONEX_USER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofONEX_USER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.authIdentity !== undefined) view.setInt32(0, Number(data.authIdentity), true);
  // 0x04: u32
  if (data?._bitfield !== undefined) view.setUint32(4, Number(data._bitfield), true);
  // 0x08: pointer
  if (data?.UserName !== undefined) view.setBigUint64(8, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  return buf;
}

export class ONEX_USER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get authIdentity(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get _bitfield(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set authIdentity(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set _bitfield(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_ADAPTER (size: 24)
 */
export interface DOT11_ADAPTER {
  /** System.Guid */
  gAdapterId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszDescription: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CURRENT_OPERATION_MODE */
  Dot11CurrentOpMode: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11_ADAPTER = 24;

export function allocDOT11_ADAPTER(data?: Partial<DOT11_ADAPTER>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_ADAPTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.gAdapterId !== undefined) view.setBigUint64(0, data.gAdapterId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gAdapterId))), true);
  // 0x08: buffer
  if (data?.pszDescription !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDescription);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.Dot11CurrentOpMode !== undefined) view.setBigUint64(16, data.Dot11CurrentOpMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11CurrentOpMode))), true);
  return buf;
}

export class DOT11_ADAPTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get gAdapterId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Dot11CurrentOpMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set gAdapterId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set Dot11CurrentOpMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_LIST (size: 16)
 */
export interface DOT11_BSS_LIST {
  /** u32 */
  uNumOfBytes: number;
  /** ptr */
  pucBuffer: Deno.PointerValue | Uint8Array;
}

export const sizeofDOT11_BSS_LIST = 16;

export function allocDOT11_BSS_LIST(data?: Partial<DOT11_BSS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_BSS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNumOfBytes !== undefined) view.setUint32(0, Number(data.uNumOfBytes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pucBuffer !== undefined) view.setBigUint64(8, data.pucBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pucBuffer))), true);
  return buf;
}

export class DOT11_BSS_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNumOfBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pucBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNumOfBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pucBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_PORT_STATE (size: 24)
 */
export interface DOT11_PORT_STATE {
  /** array */
  PeerMacAddress: Deno.PointerValue;
  /** u32 */
  uSessionId: number;
  /** Windows.Win32.Foundation.BOOL */
  bPortControlled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bPortAuthorized: boolean;
}

export const sizeofDOT11_PORT_STATE = 24;

export function allocDOT11_PORT_STATE(data?: Partial<DOT11_PORT_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_PORT_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PeerMacAddress !== undefined) view.setBigUint64(0, data.PeerMacAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMacAddress))), true);
  // 0x08: u32
  if (data?.uSessionId !== undefined) view.setUint32(8, Number(data.uSessionId), true);
  // 0x0c: i32
  if (data?.bPortControlled !== undefined) view.setInt32(12, Number(data.bPortControlled), true);
  // 0x10: i32
  if (data?.bPortAuthorized !== undefined) view.setInt32(16, Number(data.bPortAuthorized), true);
  // 0x14: pad4
  return buf;
}

export class DOT11_PORT_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PeerMacAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uSessionId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get bPortControlled(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get bPortAuthorized(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set PeerMacAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uSessionId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set bPortControlled(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set bPortAuthorized(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_SECURITY_PACKET_HEADER (size: 24)
 */
export interface DOT11_SECURITY_PACKET_HEADER {
  /** array */
  PeerMac: Deno.PointerValue;
  /** u16 */
  usEtherType: number;
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofDOT11_SECURITY_PACKET_HEADER = 24;

export function allocDOT11_SECURITY_PACKET_HEADER(data?: Partial<DOT11_SECURITY_PACKET_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_SECURITY_PACKET_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PeerMac !== undefined) view.setBigUint64(0, data.PeerMac === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PeerMac))), true);
  // 0x08: u16
  if (data?.usEtherType !== undefined) view.setUint16(8, Number(data.usEtherType), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class DOT11_SECURITY_PACKET_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PeerMac(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get usEtherType(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set PeerMac(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set usEtherType(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MSSECURITY_SETTINGS (size: 40)
 */
export interface DOT11_MSSECURITY_SETTINGS {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM */
  dot11AuthAlgorithm: DOT11_AUTH_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  dot11CipherAlgorithm: DOT11_CIPHER_ALGORITHM;
  /** Windows.Win32.Foundation.BOOL */
  fOneXEnabled: boolean;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */
  eapMethodType: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwEapConnectionDataLen: number;
  /** ptr */
  pEapConnectionData: Deno.PointerValue | Uint8Array;
}

export const sizeofDOT11_MSSECURITY_SETTINGS = 40;

export function allocDOT11_MSSECURITY_SETTINGS(data?: Partial<DOT11_MSSECURITY_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MSSECURITY_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dot11AuthAlgorithm !== undefined) view.setInt32(0, Number(data.dot11AuthAlgorithm), true);
  // 0x04: i32
  if (data?.dot11CipherAlgorithm !== undefined) view.setInt32(4, Number(data.dot11CipherAlgorithm), true);
  // 0x08: i32
  if (data?.fOneXEnabled !== undefined) view.setInt32(8, Number(data.fOneXEnabled), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.eapMethodType !== undefined) view.setBigUint64(16, data.eapMethodType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.eapMethodType))), true);
  // 0x18: u32
  if (data?.dwEapConnectionDataLen !== undefined) view.setUint32(24, Number(data.dwEapConnectionDataLen), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pEapConnectionData !== undefined) view.setBigUint64(32, data.pEapConnectionData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEapConnectionData))), true);
  return buf;
}

export class DOT11_MSSECURITY_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dot11AuthAlgorithm(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get dot11CipherAlgorithm(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get fOneXEnabled(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get eapMethodType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwEapConnectionDataLen(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pEapConnectionData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set dot11AuthAlgorithm(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set dot11CipherAlgorithm(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set fOneXEnabled(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set eapMethodType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwEapConnectionDataLen(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pEapConnectionData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_SSID_LIST (size: 16)
 */
export interface DOT11EXT_IHV_SSID_LIST {
  /** u32 */
  ulCount: number;
  /** array */
  SSIDs: Deno.PointerValue;
}

export const sizeofDOT11EXT_IHV_SSID_LIST = 16;

export function allocDOT11EXT_IHV_SSID_LIST(data?: Partial<DOT11EXT_IHV_SSID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_IHV_SSID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCount !== undefined) view.setUint32(0, Number(data.ulCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SSIDs !== undefined) view.setBigUint64(8, data.SSIDs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SSIDs))), true);
  return buf;
}

export class DOT11EXT_IHV_SSID_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SSIDs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ulCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SSIDs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_PROFILE_PARAMS (size: 24)
 */
export interface DOT11EXT_IHV_PROFILE_PARAMS {
  /** ptr */
  pSsidList: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  BssType: DOT11_BSS_TYPE;
  /** ptr */
  pMSSecuritySettings: Deno.PointerValue | Uint8Array;
}

export const sizeofDOT11EXT_IHV_PROFILE_PARAMS = 24;

export function allocDOT11EXT_IHV_PROFILE_PARAMS(data?: Partial<DOT11EXT_IHV_PROFILE_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_IHV_PROFILE_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSsidList !== undefined) view.setBigUint64(0, data.pSsidList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSsidList))), true);
  // 0x08: i32
  if (data?.BssType !== undefined) view.setInt32(8, Number(data.BssType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pMSSecuritySettings !== undefined) view.setBigUint64(16, data.pMSSecuritySettings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMSSecuritySettings))), true);
  return buf;
}

export class DOT11EXT_IHV_PROFILE_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pSsidList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get BssType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pMSSecuritySettings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pSsidList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set BssType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pMSSecuritySettings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_PARAMS (size: 32)
 */
export interface DOT11EXT_IHV_PARAMS {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_PROFILE_PARAMS */
  dot11ExtIhvProfileParams: Uint8Array | Deno.PointerValue;
  /** array */
  wstrProfileName: Deno.PointerValue;
  /** u32 */
  dwProfileTypeFlags: number;
  /** System.Guid */
  interfaceGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11EXT_IHV_PARAMS = 32;

export function allocDOT11EXT_IHV_PARAMS(data?: Partial<DOT11EXT_IHV_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_IHV_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dot11ExtIhvProfileParams !== undefined) view.setBigUint64(0, data.dot11ExtIhvProfileParams === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11ExtIhvProfileParams))), true);
  // 0x08: pointer
  if (data?.wstrProfileName !== undefined) view.setBigUint64(8, data.wstrProfileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wstrProfileName))), true);
  // 0x10: u32
  if (data?.dwProfileTypeFlags !== undefined) view.setUint32(16, Number(data.dwProfileTypeFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.interfaceGuid !== undefined) view.setBigUint64(24, data.interfaceGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.interfaceGuid))), true);
  return buf;
}

export class DOT11EXT_IHV_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dot11ExtIhvProfileParams(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get wstrProfileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwProfileTypeFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get interfaceGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set dot11ExtIhvProfileParams(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set wstrProfileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwProfileTypeFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set interfaceGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_IHV_VERSION_INFO (size: 8)
 */
export interface DOT11_IHV_VERSION_INFO {
  /** u32 */
  dwVerMin: number;
  /** u32 */
  dwVerMax: number;
}

export const sizeofDOT11_IHV_VERSION_INFO = 8;

export function allocDOT11_IHV_VERSION_INFO(data?: Partial<DOT11_IHV_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_IHV_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVerMin !== undefined) view.setUint32(0, Number(data.dwVerMin), true);
  // 0x04: u32
  if (data?.dwVerMax !== undefined) view.setUint32(4, Number(data.dwVerMax), true);
  return buf;
}

export class DOT11_IHV_VERSION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVerMin(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVerMax(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwVerMin(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVerMax(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_UI_REQUEST (size: 40)
 */
export interface DOT11EXT_IHV_UI_REQUEST {
  /** u32 */
  dwSessionId: number;
  /** System.Guid */
  guidUIRequest: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  UIPageClsid: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwByteCount: number;
  /** ptr */
  pvUIRequest: Deno.PointerValue | Uint8Array;
}

export const sizeofDOT11EXT_IHV_UI_REQUEST = 40;

export function allocDOT11EXT_IHV_UI_REQUEST(data?: Partial<DOT11EXT_IHV_UI_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_IHV_UI_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSessionId !== undefined) view.setUint32(0, Number(data.dwSessionId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidUIRequest !== undefined) view.setBigUint64(8, data.guidUIRequest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidUIRequest))), true);
  // 0x10: pointer
  if (data?.UIPageClsid !== undefined) view.setBigUint64(16, data.UIPageClsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UIPageClsid))), true);
  // 0x18: u32
  if (data?.dwByteCount !== undefined) view.setUint32(24, Number(data.dwByteCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pvUIRequest !== undefined) view.setBigUint64(32, data.pvUIRequest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvUIRequest))), true);
  return buf;
}

export class DOT11EXT_IHV_UI_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSessionId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidUIRequest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UIPageClsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwByteCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pvUIRequest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSessionId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidUIRequest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UIPageClsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwByteCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pvUIRequest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_EAP_RESULT (size: 16)
 */
export interface DOT11_EAP_RESULT {
  /** u32 */
  dwFailureReasonCode: number;
  /** ptr */
  pAttribArray: Deno.PointerValue | Uint8Array;
}

export const sizeofDOT11_EAP_RESULT = 16;

export function allocDOT11_EAP_RESULT(data?: Partial<DOT11_EAP_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_EAP_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFailureReasonCode !== undefined) view.setUint32(0, Number(data.dwFailureReasonCode), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pAttribArray !== undefined) view.setBigUint64(8, data.pAttribArray === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pAttribArray))), true);
  return buf;
}

export class DOT11_EAP_RESULTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFailureReasonCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pAttribArray(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFailureReasonCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pAttribArray(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11_MSONEX_RESULT_PARAMS (size: 48)
 */
export interface DOT11_MSONEX_RESULT_PARAMS {
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_AUTH_STATUS */
  Dot11OnexAuthStatus: ONEX_AUTH_STATUS;
  /** Windows.Win32.NetworkManagement.WiFi.ONEX_REASON_CODE */
  Dot11OneXReasonCode: ONEX_REASON_CODE;
  /** ptr */
  pbMPPESendKey: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwMPPESendKeyLen: number;
  /** ptr */
  pbMPPERecvKey: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwMPPERecvKeyLen: number;
  /** ptr */
  pDot11EapResult: Deno.PointerValue | Uint8Array;
}

export const sizeofDOT11_MSONEX_RESULT_PARAMS = 48;

export function allocDOT11_MSONEX_RESULT_PARAMS(data?: Partial<DOT11_MSONEX_RESULT_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11_MSONEX_RESULT_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Dot11OnexAuthStatus !== undefined) view.setInt32(0, Number(data.Dot11OnexAuthStatus), true);
  // 0x04: i32
  if (data?.Dot11OneXReasonCode !== undefined) view.setInt32(4, Number(data.Dot11OneXReasonCode), true);
  // 0x08: pointer
  if (data?.pbMPPESendKey !== undefined) view.setBigUint64(8, data.pbMPPESendKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbMPPESendKey))), true);
  // 0x10: u32
  if (data?.dwMPPESendKeyLen !== undefined) view.setUint32(16, Number(data.dwMPPESendKeyLen), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbMPPERecvKey !== undefined) view.setBigUint64(24, data.pbMPPERecvKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbMPPERecvKey))), true);
  // 0x20: u32
  if (data?.dwMPPERecvKeyLen !== undefined) view.setUint32(32, Number(data.dwMPPERecvKeyLen), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pDot11EapResult !== undefined) view.setBigUint64(40, data.pDot11EapResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDot11EapResult))), true);
  return buf;
}

export class DOT11_MSONEX_RESULT_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Dot11OnexAuthStatus(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Dot11OneXReasonCode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pbMPPESendKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwMPPESendKeyLen(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pbMPPERecvKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwMPPERecvKeyLen(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pDot11EapResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Dot11OnexAuthStatus(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Dot11OneXReasonCode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pbMPPESendKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwMPPESendKeyLen(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pbMPPERecvKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwMPPERecvKeyLen(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pDot11EapResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_CONNECTIVITY_PROFILE (size: 8)
 */
export interface DOT11EXT_IHV_CONNECTIVITY_PROFILE {
  /** Windows.Win32.Foundation.PWSTR */
  pszXmlFragmentIhvConnectivity: string | null | Uint8Array | Uint16Array;
}

export const sizeofDOT11EXT_IHV_CONNECTIVITY_PROFILE = 8;

export function allocDOT11EXT_IHV_CONNECTIVITY_PROFILE(data?: Partial<DOT11EXT_IHV_CONNECTIVITY_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_IHV_CONNECTIVITY_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszXmlFragmentIhvConnectivity !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszXmlFragmentIhvConnectivity);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class DOT11EXT_IHV_CONNECTIVITY_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszXmlFragmentIhvConnectivity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszXmlFragmentIhvConnectivity(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_SECURITY_PROFILE (size: 16)
 */
export interface DOT11EXT_IHV_SECURITY_PROFILE {
  /** Windows.Win32.Foundation.PWSTR */
  pszXmlFragmentIhvSecurity: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  bUseMSOnex: boolean;
}

export const sizeofDOT11EXT_IHV_SECURITY_PROFILE = 16;

export function allocDOT11EXT_IHV_SECURITY_PROFILE(data?: Partial<DOT11EXT_IHV_SECURITY_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_IHV_SECURITY_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszXmlFragmentIhvSecurity !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszXmlFragmentIhvSecurity);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.bUseMSOnex !== undefined) view.setInt32(8, Number(data.bUseMSOnex), true);
  // 0x0c: pad4
  return buf;
}

export class DOT11EXT_IHV_SECURITY_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszXmlFragmentIhvSecurity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get bUseMSOnex(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set pszXmlFragmentIhvSecurity(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set bUseMSOnex(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_DISCOVERY_PROFILE (size: 16)
 */
export interface DOT11EXT_IHV_DISCOVERY_PROFILE {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_CONNECTIVITY_PROFILE */
  IhvConnectivityProfile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_SECURITY_PROFILE */
  IhvSecurityProfile: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11EXT_IHV_DISCOVERY_PROFILE = 16;

export function allocDOT11EXT_IHV_DISCOVERY_PROFILE(data?: Partial<DOT11EXT_IHV_DISCOVERY_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_IHV_DISCOVERY_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IhvConnectivityProfile !== undefined) view.setBigUint64(0, data.IhvConnectivityProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IhvConnectivityProfile))), true);
  // 0x08: pointer
  if (data?.IhvSecurityProfile !== undefined) view.setBigUint64(8, data.IhvSecurityProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IhvSecurityProfile))), true);
  return buf;
}

export class DOT11EXT_IHV_DISCOVERY_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IhvConnectivityProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get IhvSecurityProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set IhvConnectivityProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set IhvSecurityProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_DISCOVERY_PROFILE_LIST (size: 16)
 */
export interface DOT11EXT_IHV_DISCOVERY_PROFILE_LIST {
  /** u32 */
  dwCount: number;
  /** ptr */
  pIhvDiscoveryProfiles: Deno.PointerValue | Uint8Array;
}

export const sizeofDOT11EXT_IHV_DISCOVERY_PROFILE_LIST = 16;

export function allocDOT11EXT_IHV_DISCOVERY_PROFILE_LIST(data?: Partial<DOT11EXT_IHV_DISCOVERY_PROFILE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_IHV_DISCOVERY_PROFILE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCount !== undefined) view.setUint32(0, Number(data.dwCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pIhvDiscoveryProfiles !== undefined) view.setBigUint64(8, data.pIhvDiscoveryProfiles === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIhvDiscoveryProfiles))), true);
  return buf;
}

export class DOT11EXT_IHV_DISCOVERY_PROFILE_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pIhvDiscoveryProfiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pIhvDiscoveryProfiles(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_VIRTUAL_STATION_AP_PROPERTY (size: 32)
 */
export interface DOT11EXT_VIRTUAL_STATION_AP_PROPERTY {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  dot11SSID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_AUTH_ALGORITHM */
  dot11AuthAlgo: DOT11_AUTH_ALGORITHM;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_CIPHER_ALGORITHM */
  dot11CipherAlgo: DOT11_CIPHER_ALGORITHM;
  /** Windows.Win32.Foundation.BOOL */
  bIsPassPhrase: boolean;
  /** u32 */
  dwKeyLength: number;
  /** array */
  ucKeyData: Deno.PointerValue;
}

export const sizeofDOT11EXT_VIRTUAL_STATION_AP_PROPERTY = 32;

export function allocDOT11EXT_VIRTUAL_STATION_AP_PROPERTY(data?: Partial<DOT11EXT_VIRTUAL_STATION_AP_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_VIRTUAL_STATION_AP_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dot11SSID !== undefined) view.setBigUint64(0, data.dot11SSID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dot11SSID))), true);
  // 0x08: i32
  if (data?.dot11AuthAlgo !== undefined) view.setInt32(8, Number(data.dot11AuthAlgo), true);
  // 0x0c: i32
  if (data?.dot11CipherAlgo !== undefined) view.setInt32(12, Number(data.dot11CipherAlgo), true);
  // 0x10: i32
  if (data?.bIsPassPhrase !== undefined) view.setInt32(16, Number(data.bIsPassPhrase), true);
  // 0x14: u32
  if (data?.dwKeyLength !== undefined) view.setUint32(20, Number(data.dwKeyLength), true);
  // 0x18: pointer
  if (data?.ucKeyData !== undefined) view.setBigUint64(24, data.ucKeyData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ucKeyData))), true);
  return buf;
}

export class DOT11EXT_VIRTUAL_STATION_AP_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dot11SSID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get dot11AuthAlgo(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get dot11CipherAlgo(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get bIsPassPhrase(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get dwKeyLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get ucKeyData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set dot11SSID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set dot11AuthAlgo(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set dot11CipherAlgo(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set bIsPassPhrase(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set dwKeyLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set ucKeyData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.WDIAG_IHV_WLAN_ID (size: 32)
 */
export interface WDIAG_IHV_WLAN_ID {
  /** array */
  strProfileName: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_SSID */
  Ssid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */
  BssType: DOT11_BSS_TYPE;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwReasonCode: number;
}

export const sizeofWDIAG_IHV_WLAN_ID = 32;

export function allocWDIAG_IHV_WLAN_ID(data?: Partial<WDIAG_IHV_WLAN_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofWDIAG_IHV_WLAN_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.strProfileName !== undefined) view.setBigUint64(0, data.strProfileName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.strProfileName))), true);
  // 0x08: pointer
  if (data?.Ssid !== undefined) view.setBigUint64(8, data.Ssid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Ssid))), true);
  // 0x10: i32
  if (data?.BssType !== undefined) view.setInt32(16, Number(data.BssType), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  // 0x18: u32
  if (data?.dwReasonCode !== undefined) view.setUint32(24, Number(data.dwReasonCode), true);
  // 0x1c: pad4
  return buf;
}

export class WDIAG_IHV_WLAN_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get strProfileName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Ssid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get BssType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get dwFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwReasonCode(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set strProfileName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Ssid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set BssType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set dwFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwReasonCode(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_APIS (size: 176)
 */
export interface DOT11EXT_APIS {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_ALLOCATE_BUFFER */
  Dot11ExtAllocateBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_FREE_BUFFER */
  Dot11ExtFreeBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SET_PROFILE_CUSTOM_USER_DATA */
  Dot11ExtSetProfileCustomUserData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_GET_PROFILE_CUSTOM_USER_DATA */
  Dot11ExtGetProfileCustomUserData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SET_CURRENT_PROFILE */
  Dot11ExtSetCurrentProfile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SEND_UI_REQUEST */
  Dot11ExtSendUIRequest: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_PRE_ASSOCIATE_COMPLETION */
  Dot11ExtPreAssociateCompletion: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_POST_ASSOCIATE_COMPLETION */
  Dot11ExtPostAssociateCompletion: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SEND_NOTIFICATION */
  Dot11ExtSendNotification: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SEND_PACKET */
  Dot11ExtSendPacket: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SET_ETHERTYPE_HANDLING */
  Dot11ExtSetEtherTypeHandling: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SET_AUTH_ALGORITHM */
  Dot11ExtSetAuthAlgorithm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SET_UNICAST_CIPHER_ALGORITHM */
  Dot11ExtSetUnicastCipherAlgorithm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SET_MULTICAST_CIPHER_ALGORITHM */
  Dot11ExtSetMulticastCipherAlgorithm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SET_DEFAULT_KEY */
  Dot11ExtSetDefaultKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SET_KEY_MAPPING_KEY */
  Dot11ExtSetKeyMappingKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SET_DEFAULT_KEY_ID */
  Dot11ExtSetDefaultKeyId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_NIC_SPECIFIC_EXTENSION */
  Dot11ExtNicSpecificExtension: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SET_EXCLUDE_UNENCRYPTED */
  Dot11ExtSetExcludeUnencrypted: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_ONEX_START */
  Dot11ExtStartOneX: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_ONEX_STOP */
  Dot11ExtStopOneX: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_PROCESS_ONEX_PACKET */
  Dot11ExtProcessSecurityPacket: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11EXT_APIS = 176;

export function allocDOT11EXT_APIS(data?: Partial<DOT11EXT_APIS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_APIS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Dot11ExtAllocateBuffer !== undefined) view.setBigUint64(0, data.Dot11ExtAllocateBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtAllocateBuffer))), true);
  // 0x08: pointer
  if (data?.Dot11ExtFreeBuffer !== undefined) view.setBigUint64(8, data.Dot11ExtFreeBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtFreeBuffer))), true);
  // 0x10: pointer
  if (data?.Dot11ExtSetProfileCustomUserData !== undefined) view.setBigUint64(16, data.Dot11ExtSetProfileCustomUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSetProfileCustomUserData))), true);
  // 0x18: pointer
  if (data?.Dot11ExtGetProfileCustomUserData !== undefined) view.setBigUint64(24, data.Dot11ExtGetProfileCustomUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtGetProfileCustomUserData))), true);
  // 0x20: pointer
  if (data?.Dot11ExtSetCurrentProfile !== undefined) view.setBigUint64(32, data.Dot11ExtSetCurrentProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSetCurrentProfile))), true);
  // 0x28: pointer
  if (data?.Dot11ExtSendUIRequest !== undefined) view.setBigUint64(40, data.Dot11ExtSendUIRequest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSendUIRequest))), true);
  // 0x30: pointer
  if (data?.Dot11ExtPreAssociateCompletion !== undefined) view.setBigUint64(48, data.Dot11ExtPreAssociateCompletion === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtPreAssociateCompletion))), true);
  // 0x38: pointer
  if (data?.Dot11ExtPostAssociateCompletion !== undefined) view.setBigUint64(56, data.Dot11ExtPostAssociateCompletion === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtPostAssociateCompletion))), true);
  // 0x40: pointer
  if (data?.Dot11ExtSendNotification !== undefined) view.setBigUint64(64, data.Dot11ExtSendNotification === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSendNotification))), true);
  // 0x48: pointer
  if (data?.Dot11ExtSendPacket !== undefined) view.setBigUint64(72, data.Dot11ExtSendPacket === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSendPacket))), true);
  // 0x50: pointer
  if (data?.Dot11ExtSetEtherTypeHandling !== undefined) view.setBigUint64(80, data.Dot11ExtSetEtherTypeHandling === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSetEtherTypeHandling))), true);
  // 0x58: pointer
  if (data?.Dot11ExtSetAuthAlgorithm !== undefined) view.setBigUint64(88, data.Dot11ExtSetAuthAlgorithm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSetAuthAlgorithm))), true);
  // 0x60: pointer
  if (data?.Dot11ExtSetUnicastCipherAlgorithm !== undefined) view.setBigUint64(96, data.Dot11ExtSetUnicastCipherAlgorithm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSetUnicastCipherAlgorithm))), true);
  // 0x68: pointer
  if (data?.Dot11ExtSetMulticastCipherAlgorithm !== undefined) view.setBigUint64(104, data.Dot11ExtSetMulticastCipherAlgorithm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSetMulticastCipherAlgorithm))), true);
  // 0x70: pointer
  if (data?.Dot11ExtSetDefaultKey !== undefined) view.setBigUint64(112, data.Dot11ExtSetDefaultKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSetDefaultKey))), true);
  // 0x78: pointer
  if (data?.Dot11ExtSetKeyMappingKey !== undefined) view.setBigUint64(120, data.Dot11ExtSetKeyMappingKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSetKeyMappingKey))), true);
  // 0x80: pointer
  if (data?.Dot11ExtSetDefaultKeyId !== undefined) view.setBigUint64(128, data.Dot11ExtSetDefaultKeyId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSetDefaultKeyId))), true);
  // 0x88: pointer
  if (data?.Dot11ExtNicSpecificExtension !== undefined) view.setBigUint64(136, data.Dot11ExtNicSpecificExtension === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtNicSpecificExtension))), true);
  // 0x90: pointer
  if (data?.Dot11ExtSetExcludeUnencrypted !== undefined) view.setBigUint64(144, data.Dot11ExtSetExcludeUnencrypted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSetExcludeUnencrypted))), true);
  // 0x98: pointer
  if (data?.Dot11ExtStartOneX !== undefined) view.setBigUint64(152, data.Dot11ExtStartOneX === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtStartOneX))), true);
  // 0xa0: pointer
  if (data?.Dot11ExtStopOneX !== undefined) view.setBigUint64(160, data.Dot11ExtStopOneX === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtStopOneX))), true);
  // 0xa8: pointer
  if (data?.Dot11ExtProcessSecurityPacket !== undefined) view.setBigUint64(168, data.Dot11ExtProcessSecurityPacket === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtProcessSecurityPacket))), true);
  return buf;
}

export class DOT11EXT_APISView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Dot11ExtAllocateBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Dot11ExtFreeBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Dot11ExtSetProfileCustomUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Dot11ExtGetProfileCustomUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Dot11ExtSetCurrentProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Dot11ExtSendUIRequest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Dot11ExtPreAssociateCompletion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Dot11ExtPostAssociateCompletion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Dot11ExtSendNotification(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Dot11ExtSendPacket(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get Dot11ExtSetEtherTypeHandling(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get Dot11ExtSetAuthAlgorithm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get Dot11ExtSetUnicastCipherAlgorithm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get Dot11ExtSetMulticastCipherAlgorithm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get Dot11ExtSetDefaultKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get Dot11ExtSetKeyMappingKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get Dot11ExtSetDefaultKeyId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get Dot11ExtNicSpecificExtension(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get Dot11ExtSetExcludeUnencrypted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get Dot11ExtStartOneX(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get Dot11ExtStopOneX(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get Dot11ExtProcessSecurityPacket(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Dot11ExtAllocateBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Dot11ExtFreeBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Dot11ExtSetProfileCustomUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Dot11ExtGetProfileCustomUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Dot11ExtSetCurrentProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Dot11ExtSendUIRequest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Dot11ExtPreAssociateCompletion(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Dot11ExtPostAssociateCompletion(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Dot11ExtSendNotification(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Dot11ExtSendPacket(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set Dot11ExtSetEtherTypeHandling(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set Dot11ExtSetAuthAlgorithm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set Dot11ExtSetUnicastCipherAlgorithm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set Dot11ExtSetMulticastCipherAlgorithm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set Dot11ExtSetDefaultKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set Dot11ExtSetKeyMappingKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set Dot11ExtSetDefaultKeyId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set Dot11ExtNicSpecificExtension(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set Dot11ExtSetExcludeUnencrypted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set Dot11ExtStartOneX(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set Dot11ExtStopOneX(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set Dot11ExtProcessSecurityPacket(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_IHV_HANDLERS (size: 152)
 */
export interface DOT11EXT_IHV_HANDLERS {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_DEINIT_SERVICE */
  Dot11ExtIhvDeinitService: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_INIT_ADAPTER */
  Dot11ExtIhvInitAdapter: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_DEINIT_ADAPTER */
  Dot11ExtIhvDeinitAdapter: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_PERFORM_PRE_ASSOCIATE */
  Dot11ExtIhvPerformPreAssociate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_ADAPTER_RESET */
  Dot11ExtIhvAdapterReset: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_PERFORM_POST_ASSOCIATE */
  Dot11ExtIhvPerformPostAssociate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_STOP_POST_ASSOCIATE */
  Dot11ExtIhvStopPostAssociate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_VALIDATE_PROFILE */
  Dot11ExtIhvValidateProfile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_PERFORM_CAPABILITY_MATCH */
  Dot11ExtIhvPerformCapabilityMatch: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_CREATE_DISCOVERY_PROFILES */
  Dot11ExtIhvCreateDiscoveryProfiles: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_PROCESS_SESSION_CHANGE */
  Dot11ExtIhvProcessSessionChange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_RECEIVE_INDICATION */
  Dot11ExtIhvReceiveIndication: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_RECEIVE_PACKET */
  Dot11ExtIhvReceivePacket: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_SEND_PACKET_COMPLETION */
  Dot11ExtIhvSendPacketCompletion: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_IS_UI_REQUEST_PENDING */
  Dot11ExtIhvIsUIRequestPending: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_PROCESS_UI_RESPONSE */
  Dot11ExtIhvProcessUIResponse: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_QUERY_UI_REQUEST */
  Dot11ExtIhvQueryUIRequest: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_ONEX_INDICATE_RESULT */
  Dot11ExtIhvOnexIndicateResult: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXTIHV_CONTROL */
  Dot11ExtIhvControl: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11EXT_IHV_HANDLERS = 152;

export function allocDOT11EXT_IHV_HANDLERS(data?: Partial<DOT11EXT_IHV_HANDLERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_IHV_HANDLERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Dot11ExtIhvDeinitService !== undefined) view.setBigUint64(0, data.Dot11ExtIhvDeinitService === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvDeinitService))), true);
  // 0x08: pointer
  if (data?.Dot11ExtIhvInitAdapter !== undefined) view.setBigUint64(8, data.Dot11ExtIhvInitAdapter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvInitAdapter))), true);
  // 0x10: pointer
  if (data?.Dot11ExtIhvDeinitAdapter !== undefined) view.setBigUint64(16, data.Dot11ExtIhvDeinitAdapter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvDeinitAdapter))), true);
  // 0x18: pointer
  if (data?.Dot11ExtIhvPerformPreAssociate !== undefined) view.setBigUint64(24, data.Dot11ExtIhvPerformPreAssociate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvPerformPreAssociate))), true);
  // 0x20: pointer
  if (data?.Dot11ExtIhvAdapterReset !== undefined) view.setBigUint64(32, data.Dot11ExtIhvAdapterReset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvAdapterReset))), true);
  // 0x28: pointer
  if (data?.Dot11ExtIhvPerformPostAssociate !== undefined) view.setBigUint64(40, data.Dot11ExtIhvPerformPostAssociate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvPerformPostAssociate))), true);
  // 0x30: pointer
  if (data?.Dot11ExtIhvStopPostAssociate !== undefined) view.setBigUint64(48, data.Dot11ExtIhvStopPostAssociate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvStopPostAssociate))), true);
  // 0x38: pointer
  if (data?.Dot11ExtIhvValidateProfile !== undefined) view.setBigUint64(56, data.Dot11ExtIhvValidateProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvValidateProfile))), true);
  // 0x40: pointer
  if (data?.Dot11ExtIhvPerformCapabilityMatch !== undefined) view.setBigUint64(64, data.Dot11ExtIhvPerformCapabilityMatch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvPerformCapabilityMatch))), true);
  // 0x48: pointer
  if (data?.Dot11ExtIhvCreateDiscoveryProfiles !== undefined) view.setBigUint64(72, data.Dot11ExtIhvCreateDiscoveryProfiles === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvCreateDiscoveryProfiles))), true);
  // 0x50: pointer
  if (data?.Dot11ExtIhvProcessSessionChange !== undefined) view.setBigUint64(80, data.Dot11ExtIhvProcessSessionChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvProcessSessionChange))), true);
  // 0x58: pointer
  if (data?.Dot11ExtIhvReceiveIndication !== undefined) view.setBigUint64(88, data.Dot11ExtIhvReceiveIndication === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvReceiveIndication))), true);
  // 0x60: pointer
  if (data?.Dot11ExtIhvReceivePacket !== undefined) view.setBigUint64(96, data.Dot11ExtIhvReceivePacket === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvReceivePacket))), true);
  // 0x68: pointer
  if (data?.Dot11ExtIhvSendPacketCompletion !== undefined) view.setBigUint64(104, data.Dot11ExtIhvSendPacketCompletion === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvSendPacketCompletion))), true);
  // 0x70: pointer
  if (data?.Dot11ExtIhvIsUIRequestPending !== undefined) view.setBigUint64(112, data.Dot11ExtIhvIsUIRequestPending === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvIsUIRequestPending))), true);
  // 0x78: pointer
  if (data?.Dot11ExtIhvProcessUIResponse !== undefined) view.setBigUint64(120, data.Dot11ExtIhvProcessUIResponse === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvProcessUIResponse))), true);
  // 0x80: pointer
  if (data?.Dot11ExtIhvQueryUIRequest !== undefined) view.setBigUint64(128, data.Dot11ExtIhvQueryUIRequest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvQueryUIRequest))), true);
  // 0x88: pointer
  if (data?.Dot11ExtIhvOnexIndicateResult !== undefined) view.setBigUint64(136, data.Dot11ExtIhvOnexIndicateResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvOnexIndicateResult))), true);
  // 0x90: pointer
  if (data?.Dot11ExtIhvControl !== undefined) view.setBigUint64(144, data.Dot11ExtIhvControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtIhvControl))), true);
  return buf;
}

export class DOT11EXT_IHV_HANDLERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Dot11ExtIhvDeinitService(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Dot11ExtIhvInitAdapter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Dot11ExtIhvDeinitAdapter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Dot11ExtIhvPerformPreAssociate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Dot11ExtIhvAdapterReset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Dot11ExtIhvPerformPostAssociate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Dot11ExtIhvStopPostAssociate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Dot11ExtIhvValidateProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Dot11ExtIhvPerformCapabilityMatch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Dot11ExtIhvCreateDiscoveryProfiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get Dot11ExtIhvProcessSessionChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get Dot11ExtIhvReceiveIndication(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get Dot11ExtIhvReceivePacket(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get Dot11ExtIhvSendPacketCompletion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get Dot11ExtIhvIsUIRequestPending(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get Dot11ExtIhvProcessUIResponse(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get Dot11ExtIhvQueryUIRequest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get Dot11ExtIhvOnexIndicateResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get Dot11ExtIhvControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Dot11ExtIhvDeinitService(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Dot11ExtIhvInitAdapter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Dot11ExtIhvDeinitAdapter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Dot11ExtIhvPerformPreAssociate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Dot11ExtIhvAdapterReset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Dot11ExtIhvPerformPostAssociate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Dot11ExtIhvStopPostAssociate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Dot11ExtIhvValidateProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Dot11ExtIhvPerformCapabilityMatch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Dot11ExtIhvCreateDiscoveryProfiles(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set Dot11ExtIhvProcessSessionChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set Dot11ExtIhvReceiveIndication(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set Dot11ExtIhvReceivePacket(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set Dot11ExtIhvSendPacketCompletion(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set Dot11ExtIhvIsUIRequestPending(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set Dot11ExtIhvProcessUIResponse(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set Dot11ExtIhvQueryUIRequest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set Dot11ExtIhvOnexIndicateResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set Dot11ExtIhvControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.NetworkManagement.WiFi.DOT11EXT_VIRTUAL_STATION_APIS (size: 32)
 */
export interface DOT11EXT_VIRTUAL_STATION_APIS {
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_REQUEST_VIRTUAL_STATION */
  Dot11ExtRequestVirtualStation: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_RELEASE_VIRTUAL_STATION */
  Dot11ExtReleaseVirtualStation: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_QUERY_VIRTUAL_STATION_PROPERTIES */
  Dot11ExtQueryVirtualStationProperties: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WiFi.DOT11EXT_SET_VIRTUAL_STATION_AP_PROPERTIES */
  Dot11ExtSetVirtualStationAPProperties: Uint8Array | Deno.PointerValue;
}

export const sizeofDOT11EXT_VIRTUAL_STATION_APIS = 32;

export function allocDOT11EXT_VIRTUAL_STATION_APIS(data?: Partial<DOT11EXT_VIRTUAL_STATION_APIS>): Uint8Array {
  const buf = new Uint8Array(sizeofDOT11EXT_VIRTUAL_STATION_APIS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Dot11ExtRequestVirtualStation !== undefined) view.setBigUint64(0, data.Dot11ExtRequestVirtualStation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtRequestVirtualStation))), true);
  // 0x08: pointer
  if (data?.Dot11ExtReleaseVirtualStation !== undefined) view.setBigUint64(8, data.Dot11ExtReleaseVirtualStation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtReleaseVirtualStation))), true);
  // 0x10: pointer
  if (data?.Dot11ExtQueryVirtualStationProperties !== undefined) view.setBigUint64(16, data.Dot11ExtQueryVirtualStationProperties === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtQueryVirtualStationProperties))), true);
  // 0x18: pointer
  if (data?.Dot11ExtSetVirtualStationAPProperties !== undefined) view.setBigUint64(24, data.Dot11ExtSetVirtualStationAPProperties === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Dot11ExtSetVirtualStationAPProperties))), true);
  return buf;
}

export class DOT11EXT_VIRTUAL_STATION_APISView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Dot11ExtRequestVirtualStation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Dot11ExtReleaseVirtualStation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Dot11ExtQueryVirtualStationProperties(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Dot11ExtSetVirtualStationAPProperties(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Dot11ExtRequestVirtualStation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Dot11ExtReleaseVirtualStation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Dot11ExtQueryVirtualStationProperties(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Dot11ExtSetVirtualStationAPProperties(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HWND = Deno.PointerValue;

// Native Libraries

try {
  var libwlanapi_dll = Deno.dlopen("wlanapi.dll", {
    WlanOpenHandle: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanCloseHandle: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    WlanEnumInterfaces: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanSetAutoConfigParameter: {
      parameters: ["pointer", "i32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WlanQueryAutoConfigParameter: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanGetInterfaceCapability: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanSetInterface: {
      parameters: ["pointer", "pointer", "i32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WlanQueryInterface: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanIhvControl: {
      parameters: ["pointer", "pointer", "i32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WlanScan: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanGetAvailableNetworkList: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WlanGetAvailableNetworkList2: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WlanGetNetworkBssList: {
      parameters: ["pointer", "pointer", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "u32",
    },
    WlanConnect: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanConnect2: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanDisconnect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanRegisterNotification: {
      parameters: ["pointer", "u32", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanGetProfile: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanSetProfileEapUserData: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WlanSetProfileEapXmlUserData: {
      parameters: ["pointer", "pointer", "buffer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    WlanSetProfile: {
      parameters: ["pointer", "pointer", "u32", "buffer", "buffer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    WlanDeleteProfile: {
      parameters: ["pointer", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    WlanRenameProfile: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    WlanGetProfileList: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanSetProfileList: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WlanSetProfilePosition: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    WlanSetProfileCustomUserData: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WlanGetProfileCustomUserData: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanSetFilterList: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    WlanGetFilterList: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    WlanSetPsdIEDataList: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    WlanSaveTemporaryProfile: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32", "i32", "pointer"],
      result: "u32",
    },
    WlanDeviceServiceCommand: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WlanGetSupportedDeviceServices: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanRegisterDeviceServiceNotification: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    WlanExtractPsdIEDataList: {
      parameters: ["pointer", "u32", "pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    WlanReasonCodeToString: {
      parameters: ["u32", "u32", "buffer", "pointer"],
      result: "u32",
    },
    WlanAllocateMemory: {
      parameters: ["u32"],
      result: "pointer",
    },
    WlanFreeMemory: {
      parameters: ["pointer"],
      result: "void",
    },
    WlanSetSecuritySettings: {
      parameters: ["pointer", "i32", "buffer"],
      result: "u32",
    },
    WlanGetSecuritySettings: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanHostedNetworkStartUsing: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanHostedNetworkStopUsing: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanHostedNetworkForceStart: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanHostedNetworkForceStop: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanHostedNetworkQueryProperty: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanHostedNetworkSetProperty: {
      parameters: ["pointer", "i32", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanHostedNetworkInitSettings: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanHostedNetworkRefreshSecuritySettings: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanHostedNetworkQueryStatus: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanHostedNetworkSetSecondaryKey: {
      parameters: ["pointer", "u32", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "u32",
    },
    WlanHostedNetworkQuerySecondaryKey: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WlanRegisterVirtualStationNotification: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    WFDOpenHandle: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    WFDCloseHandle: {
      parameters: ["pointer"],
      result: "u32",
    },
    WFDStartOpenSession: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WFDCancelOpenSession: {
      parameters: ["pointer"],
      result: "u32",
    },
    WFDOpenLegacySession: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WFDCloseSession: {
      parameters: ["pointer"],
      result: "u32",
    },
    WFDUpdateDeviceVisibility: {
      parameters: ["pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libwlanui_dll = Deno.dlopen("wlanui.dll", {
    WlanUIEditProfile: {
      parameters: ["u32", "buffer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WlanOpenHandle(
  dwClientVersion: number /* u32 */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  pdwNegotiatedVersion: Deno.PointerValue | Uint8Array /* ptr */,
  phClientHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanOpenHandle(dwClientVersion, util.toPointer(pReserved), util.toPointer(pdwNegotiatedVersion), util.toPointer(phClientHandle));
}

export function WlanCloseHandle(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanCloseHandle(util.toPointer(hClientHandle), util.toPointer(pReserved));
}

export function WlanEnumInterfaces(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  ppInterfaceList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanEnumInterfaces(util.toPointer(hClientHandle), util.toPointer(pReserved), util.toPointer(ppInterfaceList));
}

export function WlanSetAutoConfigParameter(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  OpCode: WLAN_AUTOCONF_OPCODE /* Windows.Win32.NetworkManagement.WiFi.WLAN_AUTOCONF_OPCODE */,
  dwDataSize: number /* u32 */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSetAutoConfigParameter(util.toPointer(hClientHandle), OpCode, dwDataSize, util.toPointer(pData), util.toPointer(pReserved));
}

export function WlanQueryAutoConfigParameter(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  OpCode: WLAN_AUTOCONF_OPCODE /* Windows.Win32.NetworkManagement.WiFi.WLAN_AUTOCONF_OPCODE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  pdwDataSize: Deno.PointerValue | Uint8Array /* ptr */,
  ppData: Deno.PointerValue | Uint8Array /* ptr */,
  pWlanOpcodeValueType: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanQueryAutoConfigParameter(util.toPointer(hClientHandle), OpCode, util.toPointer(pReserved), util.toPointer(pdwDataSize), util.toPointer(ppData), util.toPointer(pWlanOpcodeValueType));
}

export function WlanGetInterfaceCapability(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  ppCapability: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanGetInterfaceCapability(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.toPointer(pReserved), util.toPointer(ppCapability));
}

export function WlanSetInterface(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  OpCode: WLAN_INTF_OPCODE /* Windows.Win32.NetworkManagement.WiFi.WLAN_INTF_OPCODE */,
  dwDataSize: number /* u32 */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSetInterface(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), OpCode, dwDataSize, util.toPointer(pData), util.toPointer(pReserved));
}

export function WlanQueryInterface(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  OpCode: WLAN_INTF_OPCODE /* Windows.Win32.NetworkManagement.WiFi.WLAN_INTF_OPCODE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  pdwDataSize: Deno.PointerValue | Uint8Array /* ptr */,
  ppData: Deno.PointerValue | Uint8Array /* ptr */,
  pWlanOpcodeValueType: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanQueryInterface(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), OpCode, util.toPointer(pReserved), util.toPointer(pdwDataSize), util.toPointer(ppData), util.toPointer(pWlanOpcodeValueType));
}

export function WlanIhvControl(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  Type: WLAN_IHV_CONTROL_TYPE /* Windows.Win32.NetworkManagement.WiFi.WLAN_IHV_CONTROL_TYPE */,
  dwInBufferSize: number /* u32 */,
  pInBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwOutBufferSize: number /* u32 */,
  pOutBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwBytesReturned: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanIhvControl(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), Type, dwInBufferSize, util.toPointer(pInBuffer), dwOutBufferSize, util.toPointer(pOutBuffer), util.toPointer(pdwBytesReturned));
}

export function WlanScan(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  pDot11Ssid: Deno.PointerValue | Uint8Array /* ptr */,
  pIeData: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanScan(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.toPointer(pDot11Ssid), util.toPointer(pIeData), util.toPointer(pReserved));
}

export function WlanGetAvailableNetworkList(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  ppAvailableNetworkList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanGetAvailableNetworkList(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), dwFlags, util.toPointer(pReserved), util.toPointer(ppAvailableNetworkList));
}

export function WlanGetAvailableNetworkList2(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  ppAvailableNetworkList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanGetAvailableNetworkList2(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), dwFlags, util.toPointer(pReserved), util.toPointer(ppAvailableNetworkList));
}

export function WlanGetNetworkBssList(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  pDot11Ssid: Deno.PointerValue | Uint8Array /* ptr */,
  dot11BssType: DOT11_BSS_TYPE /* Windows.Win32.NetworkManagement.WiFi.DOT11_BSS_TYPE */,
  bSecurityEnabled: boolean /* Windows.Win32.Foundation.BOOL */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  ppWlanBssList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanGetNetworkBssList(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.toPointer(pDot11Ssid), dot11BssType, util.boolToFfi(bSecurityEnabled), util.toPointer(pReserved), util.toPointer(ppWlanBssList));
}

export function WlanConnect(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  pConnectionParameters: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanConnect(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.toPointer(pConnectionParameters), util.toPointer(pReserved));
}

export function WlanConnect2(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  pConnectionParameters: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanConnect2(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.toPointer(pConnectionParameters), util.toPointer(pReserved));
}

export function WlanDisconnect(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanDisconnect(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.toPointer(pReserved));
}

export function WlanRegisterNotification(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwNotifSource: number /* u32 */,
  bIgnoreDuplicate: boolean /* Windows.Win32.Foundation.BOOL */,
  funcCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.WiFi.WLAN_NOTIFICATION_CALLBACK */,
  pCallbackContext: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  pdwPrevNotifSource: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanRegisterNotification(util.toPointer(hClientHandle), dwNotifSource, util.boolToFfi(bIgnoreDuplicate), util.toPointer(funcCallback), util.toPointer(pCallbackContext), util.toPointer(pReserved), util.toPointer(pdwPrevNotifSource));
}

export function WlanGetProfile(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  strProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  pstrProfileXml: Deno.PointerValue | Uint8Array /* ptr */,
  pdwFlags: Deno.PointerValue | Uint8Array /* ptr */,
  pdwGrantedAccess: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanGetProfile(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.pwstrToFfi(strProfileName), util.toPointer(pReserved), util.toPointer(pstrProfileXml), util.toPointer(pdwFlags), util.toPointer(pdwGrantedAccess));
}

export function WlanSetProfileEapUserData(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  strProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  eapType: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */,
  dwFlags: WLAN_SET_EAPHOST_FLAGS /* Windows.Win32.NetworkManagement.WiFi.WLAN_SET_EAPHOST_FLAGS */,
  dwEapUserDataSize: number /* u32 */,
  pbEapUserData: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSetProfileEapUserData(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.pwstrToFfi(strProfileName), util.toPointer(eapType), dwFlags, dwEapUserDataSize, util.toPointer(pbEapUserData), util.toPointer(pReserved));
}

export function WlanSetProfileEapXmlUserData(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  strProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: WLAN_SET_EAPHOST_FLAGS /* Windows.Win32.NetworkManagement.WiFi.WLAN_SET_EAPHOST_FLAGS */,
  strEapXmlUserData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSetProfileEapXmlUserData(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.pwstrToFfi(strProfileName), dwFlags, util.pwstrToFfi(strEapXmlUserData), util.toPointer(pReserved));
}

export function WlanSetProfile(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
  strProfileXml: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  strAllUserProfileSecurity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bOverwrite: boolean /* Windows.Win32.Foundation.BOOL */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  pdwReasonCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSetProfile(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), dwFlags, util.pwstrToFfi(strProfileXml), util.pwstrToFfi(strAllUserProfileSecurity), util.boolToFfi(bOverwrite), util.toPointer(pReserved), util.toPointer(pdwReasonCode));
}

export function WlanDeleteProfile(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  strProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanDeleteProfile(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.pwstrToFfi(strProfileName), util.toPointer(pReserved));
}

export function WlanRenameProfile(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  strOldProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  strNewProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanRenameProfile(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.pwstrToFfi(strOldProfileName), util.pwstrToFfi(strNewProfileName), util.toPointer(pReserved));
}

export function WlanGetProfileList(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  ppProfileList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanGetProfileList(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.toPointer(pReserved), util.toPointer(ppProfileList));
}

export function WlanSetProfileList(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  dwItems: number /* u32 */,
  strProfileNames: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSetProfileList(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), dwItems, util.toPointer(strProfileNames), util.toPointer(pReserved));
}

export function WlanSetProfilePosition(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  strProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwPosition: number /* u32 */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSetProfilePosition(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.pwstrToFfi(strProfileName), dwPosition, util.toPointer(pReserved));
}

export function WlanSetProfileCustomUserData(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  strProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwDataSize: number /* u32 */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSetProfileCustomUserData(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.pwstrToFfi(strProfileName), dwDataSize, util.toPointer(pData), util.toPointer(pReserved));
}

export function WlanGetProfileCustomUserData(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  strProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  pdwDataSize: Deno.PointerValue | Uint8Array /* ptr */,
  ppData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanGetProfileCustomUserData(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.pwstrToFfi(strProfileName), util.toPointer(pReserved), util.toPointer(pdwDataSize), util.toPointer(ppData));
}

export function WlanSetFilterList(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  wlanFilterListType: WLAN_FILTER_LIST_TYPE /* Windows.Win32.NetworkManagement.WiFi.WLAN_FILTER_LIST_TYPE */,
  pNetworkList: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSetFilterList(util.toPointer(hClientHandle), wlanFilterListType, util.toPointer(pNetworkList), util.toPointer(pReserved));
}

export function WlanGetFilterList(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  wlanFilterListType: WLAN_FILTER_LIST_TYPE /* Windows.Win32.NetworkManagement.WiFi.WLAN_FILTER_LIST_TYPE */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  ppNetworkList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanGetFilterList(util.toPointer(hClientHandle), wlanFilterListType, util.toPointer(pReserved), util.toPointer(ppNetworkList));
}

export function WlanSetPsdIEDataList(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  strFormat: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPsdIEDataList: Deno.PointerValue | Uint8Array /* ptr */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSetPsdIEDataList(util.toPointer(hClientHandle), util.pwstrToFfi(strFormat), util.toPointer(pPsdIEDataList), util.toPointer(pReserved));
}

export function WlanSaveTemporaryProfile(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  strProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  strAllUserProfileSecurity: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  bOverWrite: boolean /* Windows.Win32.Foundation.BOOL */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSaveTemporaryProfile(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.pwstrToFfi(strProfileName), util.pwstrToFfi(strAllUserProfileSecurity), dwFlags, util.boolToFfi(bOverWrite), util.toPointer(pReserved));
}

export function WlanDeviceServiceCommand(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  pDeviceServiceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  dwOpCode: number /* u32 */,
  dwInBufferSize: number /* u32 */,
  pInBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwOutBufferSize: number /* u32 */,
  pOutBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwBytesReturned: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanDeviceServiceCommand(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.toPointer(pDeviceServiceGuid), dwOpCode, dwInBufferSize, util.toPointer(pInBuffer), dwOutBufferSize, util.toPointer(pOutBuffer), util.toPointer(pdwBytesReturned));
}

export function WlanGetSupportedDeviceServices(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ppDevSvcGuidList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanGetSupportedDeviceServices(util.toPointer(hClientHandle), util.toPointer(pInterfaceGuid), util.toPointer(ppDevSvcGuidList));
}

export function WlanRegisterDeviceServiceNotification(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDevSvcGuidList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanRegisterDeviceServiceNotification(util.toPointer(hClientHandle), util.toPointer(pDevSvcGuidList));
}

export function WlanExtractPsdIEDataList(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwIeDataSize: number /* u32 */,
  pRawIeData: Deno.PointerValue | Uint8Array /* ptr */,
  strFormat: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  ppPsdIEDataList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanExtractPsdIEDataList(util.toPointer(hClientHandle), dwIeDataSize, util.toPointer(pRawIeData), util.pwstrToFfi(strFormat), util.toPointer(pReserved), util.toPointer(ppPsdIEDataList));
}

export function WlanReasonCodeToString(
  dwReasonCode: number /* u32 */,
  dwBufferSize: number /* u32 */,
  pStringBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanReasonCodeToString(dwReasonCode, dwBufferSize, util.pwstrToFfi(pStringBuffer), util.toPointer(pReserved));
}

export function WlanAllocateMemory(
  dwMemorySize: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libwlanapi_dll.WlanAllocateMemory(dwMemorySize);
}

export function WlanFreeMemory(
  pMemory: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libwlanapi_dll.WlanFreeMemory(util.toPointer(pMemory));
}

export function WlanSetSecuritySettings(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SecurableObject: WLAN_SECURABLE_OBJECT /* Windows.Win32.NetworkManagement.WiFi.WLAN_SECURABLE_OBJECT */,
  strModifiedSDDL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libwlanapi_dll.WlanSetSecuritySettings(util.toPointer(hClientHandle), SecurableObject, util.pwstrToFfi(strModifiedSDDL));
}

export function WlanGetSecuritySettings(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SecurableObject: WLAN_SECURABLE_OBJECT /* Windows.Win32.NetworkManagement.WiFi.WLAN_SECURABLE_OBJECT */,
  pValueType: Deno.PointerValue | Uint8Array /* ptr */,
  pstrCurrentSDDL: Deno.PointerValue | Uint8Array /* ptr */,
  pdwGrantedAccess: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanGetSecuritySettings(util.toPointer(hClientHandle), SecurableObject, util.toPointer(pValueType), util.toPointer(pstrCurrentSDDL), util.toPointer(pdwGrantedAccess));
}

export function WlanUIEditProfile(
  dwClientVersion: number /* u32 */,
  wstrProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pInterfaceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  wlStartPage: WL_DISPLAY_PAGES /* Windows.Win32.NetworkManagement.WiFi.WL_DISPLAY_PAGES */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
  pWlanReasonCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanui_dll.WlanUIEditProfile(dwClientVersion, util.pwstrToFfi(wstrProfileName), util.toPointer(pInterfaceGuid), (hWnd), wlStartPage, util.toPointer(pReserved), util.toPointer(pWlanReasonCode));
}

export function WlanHostedNetworkStartUsing(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFailReason: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanHostedNetworkStartUsing(util.toPointer(hClientHandle), util.toPointer(pFailReason), util.toPointer(pvReserved));
}

export function WlanHostedNetworkStopUsing(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFailReason: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanHostedNetworkStopUsing(util.toPointer(hClientHandle), util.toPointer(pFailReason), util.toPointer(pvReserved));
}

export function WlanHostedNetworkForceStart(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFailReason: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanHostedNetworkForceStart(util.toPointer(hClientHandle), util.toPointer(pFailReason), util.toPointer(pvReserved));
}

export function WlanHostedNetworkForceStop(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFailReason: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanHostedNetworkForceStop(util.toPointer(hClientHandle), util.toPointer(pFailReason), util.toPointer(pvReserved));
}

export function WlanHostedNetworkQueryProperty(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  OpCode: WLAN_HOSTED_NETWORK_OPCODE /* Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_OPCODE */,
  pdwDataSize: Deno.PointerValue | Uint8Array /* ptr */,
  ppvData: Deno.PointerValue | Uint8Array /* ptr */,
  pWlanOpcodeValueType: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanHostedNetworkQueryProperty(util.toPointer(hClientHandle), OpCode, util.toPointer(pdwDataSize), util.toPointer(ppvData), util.toPointer(pWlanOpcodeValueType), util.toPointer(pvReserved));
}

export function WlanHostedNetworkSetProperty(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  OpCode: WLAN_HOSTED_NETWORK_OPCODE /* Windows.Win32.NetworkManagement.WiFi.WLAN_HOSTED_NETWORK_OPCODE */,
  dwDataSize: number /* u32 */,
  pvData: Deno.PointerValue | Uint8Array /* ptr */,
  pFailReason: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanHostedNetworkSetProperty(util.toPointer(hClientHandle), OpCode, dwDataSize, util.toPointer(pvData), util.toPointer(pFailReason), util.toPointer(pvReserved));
}

export function WlanHostedNetworkInitSettings(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFailReason: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanHostedNetworkInitSettings(util.toPointer(hClientHandle), util.toPointer(pFailReason), util.toPointer(pvReserved));
}

export function WlanHostedNetworkRefreshSecuritySettings(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFailReason: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanHostedNetworkRefreshSecuritySettings(util.toPointer(hClientHandle), util.toPointer(pFailReason), util.toPointer(pvReserved));
}

export function WlanHostedNetworkQueryStatus(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ppWlanHostedNetworkStatus: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanHostedNetworkQueryStatus(util.toPointer(hClientHandle), util.toPointer(ppWlanHostedNetworkStatus), util.toPointer(pvReserved));
}

export function WlanHostedNetworkSetSecondaryKey(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwKeyLength: number /* u32 */,
  pucKeyData: Deno.PointerValue | Uint8Array /* ptr */,
  bIsPassPhrase: boolean /* Windows.Win32.Foundation.BOOL */,
  bPersistent: boolean /* Windows.Win32.Foundation.BOOL */,
  pFailReason: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanHostedNetworkSetSecondaryKey(util.toPointer(hClientHandle), dwKeyLength, util.toPointer(pucKeyData), util.boolToFfi(bIsPassPhrase), util.boolToFfi(bPersistent), util.toPointer(pFailReason), util.toPointer(pvReserved));
}

export function WlanHostedNetworkQuerySecondaryKey(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pdwKeyLength: Deno.PointerValue | Uint8Array /* ptr */,
  ppucKeyData: Deno.PointerValue | Uint8Array /* ptr */,
  pbIsPassPhrase: Deno.PointerValue | Uint8Array /* ptr */,
  pbPersistent: Deno.PointerValue | Uint8Array /* ptr */,
  pFailReason: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanHostedNetworkQuerySecondaryKey(util.toPointer(hClientHandle), util.toPointer(pdwKeyLength), util.toPointer(ppucKeyData), util.toPointer(pbIsPassPhrase), util.toPointer(pbPersistent), util.toPointer(pFailReason), util.toPointer(pvReserved));
}

export function WlanRegisterVirtualStationNotification(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  bRegister: boolean /* Windows.Win32.Foundation.BOOL */,
  pReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WlanRegisterVirtualStationNotification(util.toPointer(hClientHandle), util.boolToFfi(bRegister), util.toPointer(pReserved));
}

export function WFDOpenHandle(
  dwClientVersion: number /* u32 */,
  pdwNegotiatedVersion: Deno.PointerValue | Uint8Array /* ptr */,
  phClientHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WFDOpenHandle(dwClientVersion, util.toPointer(pdwNegotiatedVersion), util.toPointer(phClientHandle));
}

export function WFDCloseHandle(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libwlanapi_dll.WFDCloseHandle(util.toPointer(hClientHandle));
}

export function WFDStartOpenSession(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDeviceAddress: Deno.PointerValue | Uint8Array /* ptr */,
  pvContext: Deno.PointerValue | Uint8Array /* ptr */,
  pfnCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.NetworkManagement.WiFi.WFD_OPEN_SESSION_COMPLETE_CALLBACK */,
  phSessionHandle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WFDStartOpenSession(util.toPointer(hClientHandle), util.toPointer(pDeviceAddress), util.toPointer(pvContext), util.toPointer(pfnCallback), util.toPointer(phSessionHandle));
}

export function WFDCancelOpenSession(
  hSessionHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libwlanapi_dll.WFDCancelOpenSession(util.toPointer(hSessionHandle));
}

export function WFDOpenLegacySession(
  hClientHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pLegacyMacAddress: Deno.PointerValue | Uint8Array /* ptr */,
  phSessionHandle: Deno.PointerValue | Uint8Array /* ptr */,
  pGuidSessionInterface: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WFDOpenLegacySession(util.toPointer(hClientHandle), util.toPointer(pLegacyMacAddress), util.toPointer(phSessionHandle), util.toPointer(pGuidSessionInterface));
}

export function WFDCloseSession(
  hSessionHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libwlanapi_dll.WFDCloseSession(util.toPointer(hSessionHandle));
}

export function WFDUpdateDeviceVisibility(
  pDeviceAddress: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwlanapi_dll.WFDUpdateDeviceVisibility(util.toPointer(pDeviceAddress));
}

