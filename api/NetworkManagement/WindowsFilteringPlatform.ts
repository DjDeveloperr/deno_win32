/// Auto-generated by Deno Win32: Windows.Win32.NetworkManagement.WindowsFilteringPlatform.Apis

import * as util from "../../util.ts";

// Enums
export type IPSEC_SA_BUNDLE_FLAGS = number;
export type IPSEC_POLICY_FLAG = number;
export type IKEEXT_CERT_AUTH = number;
export type IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS = number;
export type IKEEXT_POLICY_FLAG = number;
export type FWPM_SUBSCRIPTION_FLAGS = number;
export type IKEEXT_CERT_FLAGS = number;
export type IPSEC_DOSP_FLAGS = number;
export type IKEEXT_KERBEROS_AUTHENTICATION_FLAGS = number;
export type IKEEXT_RESERVED_AUTHENTICATION_FLAGS = number;
export type IKEEXT_EAP_AUTHENTICATION_FLAGS = number;
export type FWPM_FILTER_FLAGS = number;
export type FWP_DIRECTION = number;
export type FWP_IP_VERSION = number;
export type FWP_AF = number;
export type FWP_ETHER_ENCAP_METHOD = number;
export type FWP_DATA_TYPE = number;
export type FWP_MATCH_TYPE = number;
export type FWP_CLASSIFY_OPTION_TYPE = number;
export type FWP_VSWITCH_NETWORK_TYPE = number;
export type FWP_FILTER_ENUM_TYPE = number;
export type IKEEXT_KEY_MODULE_TYPE = number;
export type IKEEXT_AUTHENTICATION_METHOD_TYPE = number;
export type IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE = number;
export type IKEEXT_CERT_CONFIG_TYPE = number;
export type IKEEXT_CERT_CRITERIA_NAME_TYPE = number;
export type IKEEXT_CIPHER_TYPE = number;
export type IKEEXT_INTEGRITY_TYPE = number;
export type IKEEXT_DH_GROUP = number;
export type IKEEXT_MM_SA_STATE = number;
export type IKEEXT_QM_SA_STATE = number;
export type IKEEXT_EM_SA_STATE = number;
export type IKEEXT_SA_ROLE = number;
export type IPSEC_TRANSFORM_TYPE = number;
export type IPSEC_AUTH_TYPE = number;
export type IPSEC_CIPHER_TYPE = number;
export type IPSEC_PFS_GROUP = number;
export type IPSEC_TOKEN_TYPE = number;
export type IPSEC_TOKEN_PRINCIPAL = number;
export type IPSEC_TOKEN_MODE = number;
export type IPSEC_TRAFFIC_TYPE = number;
export type IPSEC_SA_CONTEXT_EVENT_TYPE0 = number;
export type IPSEC_FAILURE_POINT = number;
export type DL_ADDRESS_TYPE = number;
export type FWPM_CHANGE_TYPE = number;
export type FWPM_SERVICE_STATE = number;
export type FWPM_ENGINE_OPTION = number;
export type FWPM_PROVIDER_CONTEXT_TYPE = number;
export type FWPM_FIELD_TYPE = number;
export type FWPM_NET_EVENT_TYPE = number;
export type FWPM_APPC_NETWORK_CAPABILITY_TYPE = number;
export type FWPM_SYSTEM_PORT_TYPE = number;
export type FWPM_CONNECTION_EVENT_TYPE = number;
export type FWPM_VSWITCH_EVENT_TYPE = number;
export type IPV4_OPTION_TYPE = number;
export type IP_OPTION_TIMESTAMP_FLAGS = number;
export type ICMP4_UNREACH_CODE = number;
export type ICMP4_TIME_EXCEED_CODE = number;
export type ARP_OPCODE = number;
export type ARP_HARDWARE_TYPE = number;
export type IGMP_MAX_RESP_CODE_TYPE = number;
export type RIP_INFO_TYPE = number;
export type IPV6_OPTION_TYPE = number;
export type ND_OPTION_TYPE = number;
export type MLD_MAX_RESP_CODE_TYPE = number;
export type COMPARTMENT_ID = number;
export type TUNNEL_SUB_TYPE = number;
export type NPI_MODULEID_TYPE = number;
export type FALLBACK_INDEX = number;

// Constants
export const IPSEC_SA_BUNDLE_FLAG_ND_SECURE = 1;
export const IPSEC_SA_BUNDLE_FLAG_ND_BOUNDARY = 2;
export const IPSEC_SA_BUNDLE_FLAG_ND_PEER_NAT_BOUNDARY = 4;
export const IPSEC_SA_BUNDLE_FLAG_GUARANTEE_ENCRYPTION = 8;
export const IPSEC_SA_BUNDLE_FLAG_ALLOW_NULL_TARGET_NAME_MATCH = 512;
export const IPSEC_SA_BUNDLE_FLAG_CLEAR_DF_ON_TUNNEL = 1024;
export const IPSEC_SA_BUNDLE_FLAG_ASSUME_UDP_CONTEXT_OUTBOUND = 2048;
export const IPSEC_SA_BUNDLE_FLAG_ND_PEER_BOUNDARY = 4096;
export const IPSEC_SA_BUNDLE_FLAG_SUPPRESS_DUPLICATE_DELETION = 8192;
export const IPSEC_SA_BUNDLE_FLAG_PEER_SUPPORTS_GUARANTEE_ENCRYPTION = 16384;
export const IPSEC_POLICY_FLAG_ND_SECURE = 2;
export const IPSEC_POLICY_FLAG_ND_BOUNDARY = 4;
export const IPSEC_POLICY_FLAG_NAT_ENCAP_ALLOW_PEER_BEHIND_NAT = 16;
export const IPSEC_POLICY_FLAG_NAT_ENCAP_ALLOW_GENERAL_NAT_TRAVERSAL = 32;
export const IPSEC_POLICY_FLAG_DONT_NEGOTIATE_SECOND_LIFETIME = 64;
export const IPSEC_POLICY_FLAG_DONT_NEGOTIATE_BYTE_LIFETIME = 128;
export const IPSEC_POLICY_FLAG_CLEAR_DF_ON_TUNNEL = 8;
export const IPSEC_POLICY_FLAG_ENABLE_V6_IN_V4_TUNNELING = 256;
export const IPSEC_POLICY_FLAG_ENABLE_SERVER_ADDR_ASSIGNMENT = 512;
export const IPSEC_POLICY_FLAG_TUNNEL_ALLOW_OUTBOUND_CLEAR_CONNECTION = 1024;
export const IPSEC_POLICY_FLAG_TUNNEL_BYPASS_ALREADY_SECURE_CONNECTION = 2048;
export const IPSEC_POLICY_FLAG_TUNNEL_BYPASS_ICMPV6 = 4096;
export const IPSEC_POLICY_FLAG_KEY_MANAGER_ALLOW_DICTATE_KEY = 8192;
export const IKEEXT_CERT_AUTH_FLAG_SSL_ONE_WAY = 1;
export const IKEEXT_CERT_AUTH_ENABLE_CRL_CHECK_STRONG = 4;
export const IKEEXT_CERT_AUTH_DISABLE_SSL_CERT_VALIDATION = 8;
export const IKEEXT_CERT_AUTH_ALLOW_HTTP_CERT_LOOKUP = 16;
export const IKEEXT_CERT_AUTH_URL_CONTAINS_BUNDLE = 32;
export const IKEEXT_PSK_FLAG_LOCAL_AUTH_ONLY = 1;
export const IKEEXT_PSK_FLAG_REMOTE_AUTH_ONLY = 2;
export const IKEEXT_POLICY_FLAG_DISABLE_DIAGNOSTICS = 1;
export const IKEEXT_POLICY_FLAG_NO_MACHINE_LUID_VERIFY = 2;
export const IKEEXT_POLICY_FLAG_NO_IMPERSONATION_LUID_VERIFY = 4;
export const IKEEXT_POLICY_FLAG_ENABLE_OPTIONAL_DH = 8;
export const FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_ADD = 1;
export const FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_DELETE = 2;
export const IKEEXT_CERT_FLAG_ENABLE_ACCOUNT_MAPPING = 1;
export const IKEEXT_CERT_FLAG_DISABLE_REQUEST_PAYLOAD = 2;
export const IKEEXT_CERT_FLAG_USE_NAP_CERTIFICATE = 4;
export const IKEEXT_CERT_FLAG_INTERMEDIATE_CA = 8;
export const IKEEXT_CERT_FLAG_IGNORE_INIT_CERT_MAP_FAILURE = 16;
export const IKEEXT_CERT_FLAG_PREFER_NAP_CERTIFICATE_OUTBOUND = 32;
export const IKEEXT_CERT_FLAG_SELECT_NAP_CERTIFICATE = 64;
export const IKEEXT_CERT_FLAG_VERIFY_NAP_CERTIFICATE = 128;
export const IKEEXT_CERT_FLAG_FOLLOW_RENEWAL_CERTIFICATE = 256;
export const IPSEC_DOSP_FLAG_ENABLE_IKEV1 = 1;
export const IPSEC_DOSP_FLAG_ENABLE_IKEV2 = 2;
export const IPSEC_DOSP_FLAG_DISABLE_AUTHIP = 4;
export const IPSEC_DOSP_FLAG_DISABLE_DEFAULT_BLOCK = 8;
export const IPSEC_DOSP_FLAG_FILTER_BLOCK = 16;
export const IPSEC_DOSP_FLAG_FILTER_EXEMPT = 32;
export const IKEEXT_KERB_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION = 1;
export const IKEEXT_KERB_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS = 2;
export const IKEEXT_RESERVED_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION = 1;
export const IKEEXT_EAP_FLAG_LOCAL_AUTH_ONLY = 1;
export const IKEEXT_EAP_FLAG_REMOTE_AUTH_ONLY = 2;
export const FWPM_FILTER_FLAG_NONE = 0;
export const FWPM_FILTER_FLAG_PERSISTENT = 1;
export const FWPM_FILTER_FLAG_BOOTTIME = 2;
export const FWPM_FILTER_FLAG_HAS_PROVIDER_CONTEXT = 4;
export const FWPM_FILTER_FLAG_CLEAR_ACTION_RIGHT = 8;
export const FWPM_FILTER_FLAG_PERMIT_IF_CALLOUT_UNREGISTERED = 16;
export const FWPM_FILTER_FLAG_DISABLED = 32;
export const FWPM_FILTER_FLAG_INDEXED = 64;
export const FWPM_NET_EVENT_KEYWORD_INBOUND_MCAST = 1;
export const FWPM_NET_EVENT_KEYWORD_INBOUND_BCAST = 2;
export const FWPM_NET_EVENT_KEYWORD_CAPABILITY_DROP = 4;
export const FWPM_NET_EVENT_KEYWORD_CAPABILITY_ALLOW = 8;
export const FWPM_NET_EVENT_KEYWORD_CLASSIFY_ALLOW = 16;
export const FWPM_NET_EVENT_KEYWORD_PORT_SCANNING_DROP = 32;
export const FWPM_ENGINE_OPTION_PACKET_QUEUE_NONE = 0;
export const FWPM_ENGINE_OPTION_PACKET_QUEUE_INBOUND = 1;
export const FWPM_ENGINE_OPTION_PACKET_QUEUE_FORWARD = 2;
export const FWPM_ENGINE_OPTION_PACKET_BATCH_INBOUND = 4;
export const FWPM_SESSION_FLAG_DYNAMIC = 1;
export const FWPM_SESSION_FLAG_RESERVED = 268435456;
export const FWPM_PROVIDER_FLAG_PERSISTENT = 1;
export const FWPM_PROVIDER_FLAG_DISABLED = 16;
export const FWPM_PROVIDER_CONTEXT_FLAG_PERSISTENT = 1;
export const FWPM_PROVIDER_CONTEXT_FLAG_DOWNLEVEL = 2;
export const FWPM_SUBLAYER_FLAG_PERSISTENT = 1;
export const FWPM_LAYER_FLAG_KERNEL = 1;
export const FWPM_LAYER_FLAG_BUILTIN = 2;
export const FWPM_LAYER_FLAG_CLASSIFY_MOSTLY = 4;
export const FWPM_LAYER_FLAG_BUFFERED = 8;
export const FWPM_CALLOUT_FLAG_PERSISTENT = 65536;
export const FWPM_CALLOUT_FLAG_USES_PROVIDER_CONTEXT = 131072;
export const FWPM_CALLOUT_FLAG_REGISTERED = 262144;
export const FWPM_FILTER_FLAG_HAS_SECURITY_REALM_PROVIDER_CONTEXT = 128;
export const FWPM_FILTER_FLAG_SYSTEMOS_ONLY = 256;
export const FWPM_FILTER_FLAG_GAMEOS_ONLY = 512;
export const FWPM_FILTER_FLAG_SILENT_MODE = 1024;
export const FWPM_FILTER_FLAG_IPSEC_NO_ACQUIRE_INITIATE = 2048;
export const FWPM_FILTER_FLAG_RESERVED0 = 4096;
export const FWPM_FILTER_FLAG_RESERVED1 = 8192;
export const FWPM_NET_EVENT_FLAG_IP_PROTOCOL_SET = 1;
export const FWPM_NET_EVENT_FLAG_LOCAL_ADDR_SET = 2;
export const FWPM_NET_EVENT_FLAG_REMOTE_ADDR_SET = 4;
export const FWPM_NET_EVENT_FLAG_LOCAL_PORT_SET = 8;
export const FWPM_NET_EVENT_FLAG_REMOTE_PORT_SET = 16;
export const FWPM_NET_EVENT_FLAG_APP_ID_SET = 32;
export const FWPM_NET_EVENT_FLAG_USER_ID_SET = 64;
export const FWPM_NET_EVENT_FLAG_SCOPE_ID_SET = 128;
export const FWPM_NET_EVENT_FLAG_IP_VERSION_SET = 256;
export const FWPM_NET_EVENT_FLAG_REAUTH_REASON_SET = 512;
export const FWPM_NET_EVENT_FLAG_PACKAGE_ID_SET = 1024;
export const FWPM_NET_EVENT_FLAG_ENTERPRISE_ID_SET = 2048;
export const FWPM_NET_EVENT_FLAG_POLICY_FLAGS_SET = 4096;
export const FWPM_NET_EVENT_FLAG_EFFECTIVE_NAME_SET = 8192;
export const IKEEXT_CERT_HASH_LEN = 20;
export const FWPM_NET_EVENT_IKEEXT_MM_FAILURE_FLAG_BENIGN = 1;
export const FWPM_NET_EVENT_IKEEXT_MM_FAILURE_FLAG_MULTIPLE = 2;
export const FWPM_NET_EVENT_IKEEXT_EM_FAILURE_FLAG_MULTIPLE = 1;
export const FWPM_NET_EVENT_IKEEXT_EM_FAILURE_FLAG_BENIGN = 2;
export const FWPM_CONNECTION_ENUM_FLAG_QUERY_BYTES_TRANSFERRED = 1;
export const FWPS_FILTER_FLAG_CLEAR_ACTION_RIGHT = 1;
export const FWPS_FILTER_FLAG_PERMIT_IF_CALLOUT_UNREGISTERED = 2;
export const FWPS_FILTER_FLAG_OR_CONDITIONS = 4;
export const FWPS_FILTER_FLAG_HAS_SECURITY_REALM_PROVIDER_CONTEXT = 8;
export const FWPS_FILTER_FLAG_SILENT_MODE = 16;
export const FWPS_FILTER_FLAG_IPSEC_NO_ACQUIRE_INITIATE = 32;
export const FWPS_FILTER_FLAG_RESERVED0 = 64;
export const FWPS_FILTER_FLAG_RESERVED1 = 128;
export const FWPS_INCOMING_FLAG_CACHE_SAFE = 1;
export const FWPS_INCOMING_FLAG_ENFORCE_QUERY = 2;
export const FWPS_INCOMING_FLAG_ABSORB = 4;
export const FWPS_INCOMING_FLAG_CONNECTION_FAILING_INDICATION = 8;
export const FWPS_INCOMING_FLAG_MID_STREAM_INSPECTION = 16;
export const FWPS_INCOMING_FLAG_RECLASSIFY = 32;
export const FWPS_INCOMING_FLAG_IS_LOOSE_SOURCE_FLOW = 64;
export const FWPS_INCOMING_FLAG_IS_LOCAL_ONLY_FLOW = 128;
export const FWPS_L2_INCOMING_FLAG_IS_RAW_IPV4_FRAMING = 1;
export const FWPS_L2_INCOMING_FLAG_IS_RAW_IPV6_FRAMING = 2;
export const FWPS_L2_INCOMING_FLAG_RECLASSIFY_MULTI_DESTINATION = 8;
export const FWPS_INCOMING_FLAG_RESERVED0 = 256;
export const FWPS_RIGHT_ACTION_WRITE = 1;
export const FWPS_CLASSIFY_OUT_FLAG_ABSORB = 1;
export const FWPS_CLASSIFY_OUT_FLAG_BUFFER_LIMIT_REACHED = 2;
export const FWPS_CLASSIFY_OUT_FLAG_NO_MORE_DATA = 4;
export const FWPS_CLASSIFY_OUT_FLAG_ALE_FAST_CACHE_CHECK = 8;
export const FWPS_CLASSIFY_OUT_FLAG_ALE_FAST_CACHE_POSSIBLE = 16;
export const FWPS_ALE_ENDPOINT_FLAG_IPSEC_SECURED = 1;
export const FWP_BYTEMAP_ARRAY64_SIZE = 8;
export const FWP_BYTE_ARRAY6_SIZE = 6;
export const FWP_V6_ADDR_SIZE = 16;
export const FWP_ACTRL_MATCH_FILTER = 1;
export const FWP_OPTION_VALUE_ALLOW_MULTICAST_STATE = 0;
export const FWP_OPTION_VALUE_DENY_MULTICAST_STATE = 1;
export const FWP_OPTION_VALUE_ALLOW_GLOBAL_MULTICAST_STATE = 2;
export const FWP_OPTION_VALUE_DISABLE_LOOSE_SOURCE = 0;
export const FWP_OPTION_VALUE_ENABLE_LOOSE_SOURCE = 1;
export const FWP_OPTION_VALUE_DISABLE_LOCAL_ONLY_MAPPING = 0;
export const FWP_OPTION_VALUE_ENABLE_LOCAL_ONLY_MAPPING = 1;
export const FWP_ACTION_FLAG_TERMINATING = 4096;
export const FWP_ACTION_FLAG_NON_TERMINATING = 8192;
export const FWP_ACTION_FLAG_CALLOUT = 16384;
export const FWP_ACTION_NONE = 7;
export const FWP_ACTION_NONE_NO_MATCH = 8;
export const FWP_CONDITION_FLAG_IS_LOOPBACK = 1;
export const FWP_CONDITION_FLAG_IS_IPSEC_SECURED = 2;
export const FWP_CONDITION_FLAG_IS_REAUTHORIZE = 4;
export const FWP_CONDITION_FLAG_IS_WILDCARD_BIND = 8;
export const FWP_CONDITION_FLAG_IS_RAW_ENDPOINT = 16;
export const FWP_CONDITION_FLAG_IS_FRAGMENT = 32;
export const FWP_CONDITION_FLAG_IS_FRAGMENT_GROUP = 64;
export const FWP_CONDITION_FLAG_IS_IPSEC_NATT_RECLASSIFY = 128;
export const FWP_CONDITION_FLAG_REQUIRES_ALE_CLASSIFY = 256;
export const FWP_CONDITION_FLAG_IS_IMPLICIT_BIND = 512;
export const FWP_CONDITION_FLAG_IS_REASSEMBLED = 1024;
export const FWP_CONDITION_FLAG_IS_NAME_APP_SPECIFIED = 16384;
export const FWP_CONDITION_FLAG_IS_PROMISCUOUS = 32768;
export const FWP_CONDITION_FLAG_IS_AUTH_FW = 65536;
export const FWP_CONDITION_FLAG_IS_RECLASSIFY = 131072;
export const FWP_CONDITION_FLAG_IS_OUTBOUND_PASS_THRU = 262144;
export const FWP_CONDITION_FLAG_IS_INBOUND_PASS_THRU = 524288;
export const FWP_CONDITION_FLAG_IS_CONNECTION_REDIRECTED = 1048576;
export const FWP_CONDITION_FLAG_IS_PROXY_CONNECTION = 2097152;
export const FWP_CONDITION_FLAG_IS_APPCONTAINER_LOOPBACK = 4194304;
export const FWP_CONDITION_FLAG_IS_NON_APPCONTAINER_LOOPBACK = 8388608;
export const FWP_CONDITION_FLAG_IS_RESERVED = 16777216;
export const FWP_CONDITION_FLAG_IS_HONORING_POLICY_AUTHORIZE = 33554432;
export const FWP_CONDITION_REAUTHORIZE_REASON_POLICY_CHANGE = 1;
export const FWP_CONDITION_REAUTHORIZE_REASON_NEW_ARRIVAL_INTERFACE = 2;
export const FWP_CONDITION_REAUTHORIZE_REASON_NEW_NEXTHOP_INTERFACE = 4;
export const FWP_CONDITION_REAUTHORIZE_REASON_PROFILE_CROSSING = 8;
export const FWP_CONDITION_REAUTHORIZE_REASON_CLASSIFY_COMPLETION = 16;
export const FWP_CONDITION_REAUTHORIZE_REASON_IPSEC_PROPERTIES_CHANGED = 32;
export const FWP_CONDITION_REAUTHORIZE_REASON_MID_STREAM_INSPECTION = 64;
export const FWP_CONDITION_REAUTHORIZE_REASON_SOCKET_PROPERTY_CHANGED = 128;
export const FWP_CONDITION_REAUTHORIZE_REASON_NEW_INBOUND_MCAST_BCAST_PACKET = 256;
export const FWP_CONDITION_REAUTHORIZE_REASON_EDP_POLICY_CHANGED = 512;
export const FWP_CONDITION_REAUTHORIZE_REASON_PROXY_HANDLE_CHANGED = 16384;
export const FWP_CONDITION_REAUTHORIZE_REASON_CHECK_OFFLOAD = 65536;
export const FWP_CONDITION_SOCKET_PROPERTY_FLAG_IS_SYSTEM_PORT_RPC = 1;
export const FWP_CONDITION_SOCKET_PROPERTY_FLAG_ALLOW_EDGE_TRAFFIC = 2;
export const FWP_CONDITION_SOCKET_PROPERTY_FLAG_DENY_EDGE_TRAFFIC = 4;
export const FWP_CONDITION_L2_IS_NATIVE_ETHERNET = 1;
export const FWP_CONDITION_L2_IS_WIFI = 2;
export const FWP_CONDITION_L2_IS_MOBILE_BROADBAND = 4;
export const FWP_CONDITION_L2_IS_WIFI_DIRECT_DATA = 8;
export const FWP_CONDITION_L2_IS_VM2VM = 16;
export const FWP_CONDITION_L2_IS_MALFORMED_PACKET = 32;
export const FWP_CONDITION_L2_IS_IP_FRAGMENT_GROUP = 64;
export const FWP_CONDITION_L2_IF_CONNECTOR_PRESENT = 128;
export const FWP_FILTER_ENUM_FLAG_BEST_TERMINATING_MATCH = 1;
export const FWP_FILTER_ENUM_FLAG_SORTED = 2;
export const FWP_FILTER_ENUM_FLAG_BOOTTIME_ONLY = 4;
export const FWP_FILTER_ENUM_FLAG_INCLUDE_BOOTTIME = 8;
export const FWP_FILTER_ENUM_FLAG_INCLUDE_DISABLED = 16;
export const FWP_FILTER_ENUM_FLAG_RESERVED1 = 32;
export const FWP_CALLOUT_FLAG_CONDITIONAL_ON_FLOW = 1;
export const FWP_CALLOUT_FLAG_ALLOW_OFFLOAD = 2;
export const FWP_CALLOUT_FLAG_ENABLE_COMMIT_ADD_NOTIFY = 4;
export const FWP_CALLOUT_FLAG_ALLOW_MID_STREAM_INSPECTION = 8;
export const FWP_CALLOUT_FLAG_ALLOW_RECLASSIFY = 16;
export const FWP_CALLOUT_FLAG_RESERVED1 = 32;
export const FWP_CALLOUT_FLAG_ALLOW_RSC = 64;
export const FWP_CALLOUT_FLAG_ALLOW_L2_BATCH_CLASSIFY = 128;
export const FWP_CALLOUT_FLAG_ALLOW_USO = 256;
export const FWP_CALLOUT_FLAG_ALLOW_URO = 512;
export const FWP_CALLOUT_FLAG_RESERVED2 = 1024;
export const IKEEXT_CERT_AUTH_FLAG_DISABLE_CRL_CHECK = 2;
export const IKEEXT_CERT_AUTH_FLAG_DISABLE_REQUEST_PAYLOAD = 64;
export const IKEEXT_KERB_AUTH_FORCE_PROXY_ON_INITIATOR = 4;
export const IKEEXT_NTLM_V2_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS = 1;
export const IKEEXT_POLICY_FLAG_MOBIKE_NOT_SUPPORTED = 16;
export const IKEEXT_POLICY_FLAG_SITE_TO_SITE = 32;
export const IKEEXT_POLICY_FLAG_IMS_VPN = 64;
export const IKEEXT_POLICY_ENABLE_IKEV2_FRAGMENTATION = 128;
export const IKEEXT_POLICY_SUPPORT_LOW_POWER_MODE = 256;
export const IKEEXT_CERT_CREDENTIAL_FLAG_NAP_CERT = 1;
export const IPSEC_AUTH_CONFIG_HMAC_MD5_96 = 0;
export const IPSEC_AUTH_CONFIG_HMAC_SHA_1_96 = 1;
export const IPSEC_AUTH_CONFIG_HMAC_SHA_256_128 = 2;
export const IPSEC_AUTH_CONFIG_GCM_AES_128 = 3;
export const IPSEC_AUTH_CONFIG_GCM_AES_192 = 4;
export const IPSEC_AUTH_CONFIG_GCM_AES_256 = 5;
export const IPSEC_AUTH_CONFIG_MAX = 6;
export const IPSEC_CIPHER_CONFIG_CBC_DES = 1;
export const IPSEC_CIPHER_CONFIG_CBC_3DES = 2;
export const IPSEC_CIPHER_CONFIG_CBC_AES_128 = 3;
export const IPSEC_CIPHER_CONFIG_CBC_AES_192 = 4;
export const IPSEC_CIPHER_CONFIG_CBC_AES_256 = 5;
export const IPSEC_CIPHER_CONFIG_GCM_AES_128 = 6;
export const IPSEC_CIPHER_CONFIG_GCM_AES_192 = 7;
export const IPSEC_CIPHER_CONFIG_GCM_AES_256 = 8;
export const IPSEC_CIPHER_CONFIG_MAX = 9;
export const IPSEC_POLICY_FLAG_KEY_MANAGER_ALLOW_NOTIFY_KEY = 16384;
export const IPSEC_POLICY_FLAG_RESERVED1 = 32768;
export const IPSEC_POLICY_FLAG_SITE_TO_SITE_TUNNEL = 65536;
export const IPSEC_KEYING_POLICY_FLAG_TERMINATING_MATCH = 1;
export const IPSEC_SA_BUNDLE_FLAG_NLB = 16;
export const IPSEC_SA_BUNDLE_FLAG_NO_MACHINE_LUID_VERIFY = 32;
export const IPSEC_SA_BUNDLE_FLAG_NO_IMPERSONATION_LUID_VERIFY = 64;
export const IPSEC_SA_BUNDLE_FLAG_NO_EXPLICIT_CRED_MATCH = 128;
export const IPSEC_SA_BUNDLE_FLAG_FORCE_INBOUND_CONNECTIONS = 32768;
export const IPSEC_SA_BUNDLE_FLAG_FORCE_OUTBOUND_CONNECTIONS = 65536;
export const IPSEC_SA_BUNDLE_FLAG_FORWARD_PATH_INITIATOR = 131072;
export const IPSEC_SA_BUNDLE_FLAG_ENABLE_OPTIONAL_ASYMMETRIC_IDLE = 262144;
export const IPSEC_SA_BUNDLE_FLAG_USING_DICTATED_KEYS = 524288;
export const IPSEC_SA_BUNDLE_FLAG_LOCALLY_DICTATED_KEYS = 1048576;
export const IPSEC_SA_BUNDLE_FLAG_SA_OFFLOADED = 2097152;
export const IPSEC_SA_BUNDLE_FLAG_IP_IN_IP_PKT = 4194304;
export const IPSEC_SA_BUNDLE_FLAG_LOW_POWER_MODE_SUPPORT = 8388608;
export const IPSEC_DOSP_DSCP_DISABLE_VALUE = 255;
export const IPSEC_DOSP_RATE_LIMIT_DISABLE_VALUE = 0;
export const IPSEC_KEY_MANAGER_FLAG_DICTATE_KEY = 1;
export const _LITTLE_ENDIAN = 1234;
export const _BIG_ENDIAN = 4321;
export const _PDP_ENDIAN = 3412;
export const BYTE_ORDER = 1234;
export const DL_ADDRESS_LENGTH_MAXIMUM = 32;
export const DL_HEADER_LENGTH_MAXIMUM = 64;
export const SNAP_DSAP = 170;
export const SNAP_SSAP = 170;
export const SNAP_CONTROL = 3;
export const SNAP_OUI = 0;
export const ETH_LENGTH_OF_HEADER = 14;
export const ETH_LENGTH_OF_VLAN_HEADER = 4;
export const ETH_LENGTH_OF_SNAP_HEADER = 8;
export const ETHERNET_TYPE_MINIMUM = 1536;
export const ETHERNET_TYPE_IPV4 = 2048;
export const ETHERNET_TYPE_ARP = 2054;
export const ETHERNET_TYPE_IPV6 = 34525;
export const ETHERNET_TYPE_802_1Q = 33024;
export const ETHERNET_TYPE_802_1AD = 34984;
export const IP_VER_MASK = 240;
export const IPV4_VERSION = 4;
export const MAX_IPV4_PACKET = 65535;
export const MAX_IPV4_HLEN = 60;
export const IPV4_MINIMUM_MTU = 576;
export const IPV4_MIN_MINIMUM_MTU = 352;
export const IPV4_MAX_MINIMUM_MTU = 576;
export const SIZEOF_IP_OPT_ROUTING_HEADER = 3;
export const SIZEOF_IP_OPT_TIMESTAMP_HEADER = 4;
export const SIZEOF_IP_OPT_SECURITY = 11;
export const SIZEOF_IP_OPT_STREAMIDENTIFIER = 4;
export const SIZEOF_IP_OPT_ROUTERALERT = 4;
export const IP4_OFF_MASK = 65311;
export const ICMPV4_INVALID_PREFERENCE_LEVEL = 2147483648;
export const IGMP_QUERY_TYPE = 17;
export const IGMP_VERSION1_REPORT_TYPE = 18;
export const IGMP_VERSION2_REPORT_TYPE = 22;
export const IGMP_LEAVE_GROUP_TYPE = 23;
export const IGMP_VERSION3_REPORT_TYPE = 34;
export const IPV6_VERSION = 96;
export const IPV6_TRAFFIC_CLASS_MASK = 49167;
export const IPV6_FULL_TRAFFIC_CLASS_MASK = 61455;
export const IPV6_ECN_MASK = 12288;
export const IPV6_FLOW_LABEL_MASK = 4294905600;
export const MAX_IPV6_PAYLOAD = 65535;
export const IPV6_ECN_SHIFT = 12;
export const IPV6_MINIMUM_MTU = 1280;
export const IP6F_OFF_MASK = 63743;
export const IP6F_RESERVED_MASK = 1536;
export const IP6F_MORE_FRAG = 256;
export const EXT_LEN_UNIT = 8;
export const IP6OPT_TYPE_SKIP = 0;
export const IP6OPT_TYPE_DISCARD = 64;
export const IP6OPT_TYPE_FORCEICMP = 128;
export const IP6OPT_TYPE_ICMP = 192;
export const IP6OPT_MUTABLE = 32;
export const ICMP6_DST_UNREACH_NOROUTE = 0;
export const ICMP6_DST_UNREACH_ADMIN = 1;
export const ICMP6_DST_UNREACH_BEYONDSCOPE = 2;
export const ICMP6_DST_UNREACH_ADDR = 3;
export const ICMP6_DST_UNREACH_NOPORT = 4;
export const ICMP6_TIME_EXCEED_TRANSIT = 0;
export const ICMP6_TIME_EXCEED_REASSEMBLY = 1;
export const ICMP6_PARAMPROB_HEADER = 0;
export const ICMP6_PARAMPROB_NEXTHEADER = 1;
export const ICMP6_PARAMPROB_OPTION = 2;
export const ICMPV6_ECHO_REQUEST_FLAG_REVERSE = 1;
export const ND_RA_FLAG_MANAGED = 128;
export const ND_RA_FLAG_OTHER = 64;
export const ND_RA_FLAG_HOME_AGENT = 32;
export const ND_RA_FLAG_PREFERENCE = 24;
export const ND_NA_FLAG_ROUTER = 2147483648;
export const ND_NA_FLAG_SOLICITED = 1073741824;
export const ND_NA_FLAG_OVERRIDE = 536870912;
export const ND_OPT_PI_FLAG_ONLINK = 128;
export const ND_OPT_PI_FLAG_AUTO = 64;
export const ND_OPT_PI_FLAG_ROUTER_ADDR = 32;
export const ND_OPT_PI_FLAG_SITE_PREFIX = 16;
export const ND_OPT_PI_FLAG_ROUTE = 1;
export const ND_OPT_RI_FLAG_PREFERENCE = 24;
export const ND_OPT_RDNSS_MIN_LEN = 24;
export const ND_OPT_DNSSL_MIN_LEN = 16;
export const IN6_EMBEDDEDV4_UOCTET_POSITION = 8;
export const IN6_EMBEDDEDV4_BITS_IN_BYTE = 8;
export const TH_FIN = 1;
export const TH_SYN = 2;
export const TH_RST = 4;
export const TH_PSH = 8;
export const TH_ACK = 16;
export const TH_URG = 32;
export const TH_ECE = 64;
export const TH_CWR = 128;
export const TH_OPT_EOL = 0;
export const TH_OPT_NOP = 1;
export const TH_OPT_MSS = 2;
export const TH_OPT_WS = 3;
export const TH_OPT_SACK_PERMITTED = 4;
export const TH_OPT_SACK = 5;
export const TH_OPT_TS = 8;
export const TH_OPT_FASTOPEN = 34;
export const FWPM_AUTO_WEIGHT_BITS = 60;
export const FWPM_WEIGHT_RANGE_IPSEC = 0;
export const FWPM_WEIGHT_RANGE_IKE_EXEMPTIONS = 12;
export const FWPM_ACTRL_ADD = 1;
export const FWPM_ACTRL_ADD_LINK = 2;
export const FWPM_ACTRL_BEGIN_READ_TXN = 4;
export const FWPM_ACTRL_BEGIN_WRITE_TXN = 8;
export const FWPM_ACTRL_CLASSIFY = 16;
export const FWPM_ACTRL_ENUM = 32;
export const FWPM_ACTRL_OPEN = 64;
export const FWPM_ACTRL_READ = 128;
export const FWPM_ACTRL_READ_STATS = 256;
export const FWPM_ACTRL_SUBSCRIBE = 512;
export const FWPM_ACTRL_WRITE = 1024;
export const FWPM_TXN_READ_ONLY = 1;
export const FWPM_TUNNEL_FLAG_POINT_TO_POINT = 1;
export const FWPM_TUNNEL_FLAG_ENABLE_VIRTUAL_IF_TUNNELING = 2;
export const FWPM_TUNNEL_FLAG_RESERVED0 = 4;
export const FWPS_METADATA_FIELD_DISCARD_REASON = 1;
export const FWPS_METADATA_FIELD_FLOW_HANDLE = 2;
export const FWPS_METADATA_FIELD_IP_HEADER_SIZE = 4;
export const FWPS_METADATA_FIELD_PROCESS_PATH = 8;
export const FWPS_METADATA_FIELD_TOKEN = 16;
export const FWPS_METADATA_FIELD_PROCESS_ID = 32;
export const FWPS_METADATA_FIELD_SYSTEM_FLAGS = 64;
export const FWPS_METADATA_FIELD_RESERVED = 128;
export const FWPS_METADATA_FIELD_SOURCE_INTERFACE_INDEX = 256;
export const FWPS_METADATA_FIELD_DESTINATION_INTERFACE_INDEX = 512;
export const FWPS_METADATA_FIELD_TRANSPORT_HEADER_SIZE = 1024;
export const FWPS_METADATA_FIELD_COMPARTMENT_ID = 2048;
export const FWPS_METADATA_FIELD_FRAGMENT_DATA = 4096;
export const FWPS_METADATA_FIELD_PATH_MTU = 8192;
export const FWPS_METADATA_FIELD_COMPLETION_HANDLE = 16384;
export const FWPS_METADATA_FIELD_TRANSPORT_ENDPOINT_HANDLE = 32768;
export const FWPS_METADATA_FIELD_TRANSPORT_CONTROL_DATA = 65536;
export const FWPS_METADATA_FIELD_REMOTE_SCOPE_ID = 131072;
export const FWPS_METADATA_FIELD_PACKET_DIRECTION = 262144;
export const FWPS_METADATA_FIELD_PACKET_SYSTEM_CRITICAL = 524288;
export const FWPS_METADATA_FIELD_FORWARD_LAYER_OUTBOUND_PASS_THRU = 1048576;
export const FWPS_METADATA_FIELD_FORWARD_LAYER_INBOUND_PASS_THRU = 2097152;
export const FWPS_METADATA_FIELD_ALE_CLASSIFY_REQUIRED = 4194304;
export const FWPS_METADATA_FIELD_TRANSPORT_HEADER_INCLUDE_HEADER = 8388608;
export const FWPS_METADATA_FIELD_DESTINATION_PREFIX = 16777216;
export const FWPS_METADATA_FIELD_ETHER_FRAME_LENGTH = 33554432;
export const FWPS_METADATA_FIELD_PARENT_ENDPOINT_HANDLE = 67108864;
export const FWPS_METADATA_FIELD_ICMP_ID_AND_SEQUENCE = 134217728;
export const FWPS_METADATA_FIELD_LOCAL_REDIRECT_TARGET_PID = 268435456;
export const FWPS_METADATA_FIELD_ORIGINAL_DESTINATION = 536870912;
export const FWPS_METADATA_FIELD_REDIRECT_RECORD_HANDLE = 1073741824;
export const FWPS_METADATA_FIELD_SUB_PROCESS_TAG = 2147483648;
export const FWPS_L2_METADATA_FIELD_ETHERNET_MAC_HEADER_SIZE = 1;
export const FWPS_L2_METADATA_FIELD_WIFI_OPERATION_MODE = 2;
export const FWPS_L2_METADATA_FIELD_VSWITCH_SOURCE_PORT_ID = 4;
export const FWPS_L2_METADATA_FIELD_VSWITCH_SOURCE_NIC_INDEX = 8;
export const FWPS_L2_METADATA_FIELD_VSWITCH_PACKET_CONTEXT = 16;
export const FWPS_L2_METADATA_FIELD_VSWITCH_DESTINATION_PORT_ID = 32;
export const FWPS_L2_METADATA_FIELD_RESERVED = 2147483648;
export const FWP_DIRECTION_OUTBOUND = 0;
export const FWP_DIRECTION_INBOUND = 1;
export const FWP_DIRECTION_MAX = 2;
export const FWP_IP_VERSION_V4 = 0;
export const FWP_IP_VERSION_V6 = 1;
export const FWP_IP_VERSION_NONE = 2;
export const FWP_IP_VERSION_MAX = 3;
export const FWP_AF_INET = 0;
export const FWP_AF_INET6 = 1;
export const FWP_AF_ETHER = 2;
export const FWP_AF_NONE = 3;
export const FWP_ETHER_ENCAP_METHOD_ETHER_V2 = 0;
export const FWP_ETHER_ENCAP_METHOD_SNAP = 1;
export const FWP_ETHER_ENCAP_METHOD_SNAP_W_OUI_ZERO = 3;
export const FWP_EMPTY = 0;
export const FWP_UINT8 = 1;
export const FWP_UINT16 = 2;
export const FWP_UINT32 = 3;
export const FWP_UINT64 = 4;
export const FWP_INT8 = 5;
export const FWP_INT16 = 6;
export const FWP_INT32 = 7;
export const FWP_INT64 = 8;
export const FWP_FLOAT = 9;
export const FWP_DOUBLE = 10;
export const FWP_BYTE_ARRAY16_TYPE = 11;
export const FWP_BYTE_BLOB_TYPE = 12;
export const FWP_SID = 13;
export const FWP_SECURITY_DESCRIPTOR_TYPE = 14;
export const FWP_TOKEN_INFORMATION_TYPE = 15;
export const FWP_TOKEN_ACCESS_INFORMATION_TYPE = 16;
export const FWP_UNICODE_STRING_TYPE = 17;
export const FWP_BYTE_ARRAY6_TYPE = 18;
export const FWP_SINGLE_DATA_TYPE_MAX = 255;
export const FWP_V4_ADDR_MASK = 256;
export const FWP_V6_ADDR_MASK = 257;
export const FWP_RANGE_TYPE = 258;
export const FWP_DATA_TYPE_MAX = 259;
export const FWP_MATCH_EQUAL = 0;
export const FWP_MATCH_GREATER = 1;
export const FWP_MATCH_LESS = 2;
export const FWP_MATCH_GREATER_OR_EQUAL = 3;
export const FWP_MATCH_LESS_OR_EQUAL = 4;
export const FWP_MATCH_RANGE = 5;
export const FWP_MATCH_FLAGS_ALL_SET = 6;
export const FWP_MATCH_FLAGS_ANY_SET = 7;
export const FWP_MATCH_FLAGS_NONE_SET = 8;
export const FWP_MATCH_EQUAL_CASE_INSENSITIVE = 9;
export const FWP_MATCH_NOT_EQUAL = 10;
export const FWP_MATCH_PREFIX = 11;
export const FWP_MATCH_NOT_PREFIX = 12;
export const FWP_MATCH_TYPE_MAX = 13;
export const FWP_CLASSIFY_OPTION_MULTICAST_STATE = 0;
export const FWP_CLASSIFY_OPTION_LOOSE_SOURCE_MAPPING = 1;
export const FWP_CLASSIFY_OPTION_UNICAST_LIFETIME = 2;
export const FWP_CLASSIFY_OPTION_MCAST_BCAST_LIFETIME = 3;
export const FWP_CLASSIFY_OPTION_SECURE_SOCKET_SECURITY_FLAGS = 4;
export const FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_MM_POLICY_KEY = 5;
export const FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_QM_POLICY_KEY = 6;
export const FWP_CLASSIFY_OPTION_LOCAL_ONLY_MAPPING = 7;
export const FWP_CLASSIFY_OPTION_MAX = 8;
export const FWP_VSWITCH_NETWORK_TYPE_UNKNOWN = 0;
export const FWP_VSWITCH_NETWORK_TYPE_PRIVATE = 1;
export const FWP_VSWITCH_NETWORK_TYPE_INTERNAL = 2;
export const FWP_VSWITCH_NETWORK_TYPE_EXTERNAL = 3;
export const FWP_FILTER_ENUM_FULLY_CONTAINED = 0;
export const FWP_FILTER_ENUM_OVERLAPPING = 1;
export const FWP_FILTER_ENUM_TYPE_MAX = 2;
export const IKEEXT_KEY_MODULE_IKE = 0;
export const IKEEXT_KEY_MODULE_AUTHIP = 1;
export const IKEEXT_KEY_MODULE_IKEV2 = 2;
export const IKEEXT_KEY_MODULE_MAX = 3;
export const IKEEXT_PRESHARED_KEY = 0;
export const IKEEXT_CERTIFICATE = 1;
export const IKEEXT_KERBEROS = 2;
export const IKEEXT_ANONYMOUS = 3;
export const IKEEXT_SSL = 4;
export const IKEEXT_NTLM_V2 = 5;
export const IKEEXT_IPV6_CGA = 6;
export const IKEEXT_CERTIFICATE_ECDSA_P256 = 7;
export const IKEEXT_CERTIFICATE_ECDSA_P384 = 8;
export const IKEEXT_SSL_ECDSA_P256 = 9;
export const IKEEXT_SSL_ECDSA_P384 = 10;
export const IKEEXT_EAP = 11;
export const IKEEXT_RESERVED = 12;
export const IKEEXT_AUTHENTICATION_METHOD_TYPE_MAX = 13;
export const IKEEXT_IMPERSONATION_NONE = 0;
export const IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL = 1;
export const IKEEXT_IMPERSONATION_MAX = 2;
export const IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST = 0;
export const IKEEXT_CERT_CONFIG_ENTERPRISE_STORE = 1;
export const IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE = 2;
export const IKEEXT_CERT_CONFIG_UNSPECIFIED = 3;
export const IKEEXT_CERT_CONFIG_TYPE_MAX = 4;
export const IKEEXT_CERT_CRITERIA_DNS = 0;
export const IKEEXT_CERT_CRITERIA_UPN = 1;
export const IKEEXT_CERT_CRITERIA_RFC822 = 2;
export const IKEEXT_CERT_CRITERIA_CN = 3;
export const IKEEXT_CERT_CRITERIA_OU = 4;
export const IKEEXT_CERT_CRITERIA_O = 5;
export const IKEEXT_CERT_CRITERIA_DC = 6;
export const IKEEXT_CERT_CRITERIA_NAME_TYPE_MAX = 7;
export const IKEEXT_CIPHER_DES = 0;
export const IKEEXT_CIPHER_3DES = 1;
export const IKEEXT_CIPHER_AES_128 = 2;
export const IKEEXT_CIPHER_AES_192 = 3;
export const IKEEXT_CIPHER_AES_256 = 4;
export const IKEEXT_CIPHER_AES_GCM_128_16ICV = 5;
export const IKEEXT_CIPHER_AES_GCM_256_16ICV = 6;
export const IKEEXT_CIPHER_TYPE_MAX = 7;
export const IKEEXT_INTEGRITY_MD5 = 0;
export const IKEEXT_INTEGRITY_SHA1 = 1;
export const IKEEXT_INTEGRITY_SHA_256 = 2;
export const IKEEXT_INTEGRITY_SHA_384 = 3;
export const IKEEXT_INTEGRITY_TYPE_MAX = 4;
export const IKEEXT_DH_GROUP_NONE = 0;
export const IKEEXT_DH_GROUP_1 = 1;
export const IKEEXT_DH_GROUP_2 = 2;
export const IKEEXT_DH_GROUP_14 = 3;
export const IKEEXT_DH_GROUP_2048 = 3;
export const IKEEXT_DH_ECP_256 = 4;
export const IKEEXT_DH_ECP_384 = 5;
export const IKEEXT_DH_GROUP_24 = 6;
export const IKEEXT_DH_GROUP_MAX = 7;
export const IKEEXT_MM_SA_STATE_NONE = 0;
export const IKEEXT_MM_SA_STATE_SA_SENT = 1;
export const IKEEXT_MM_SA_STATE_SSPI_SENT = 2;
export const IKEEXT_MM_SA_STATE_FINAL = 3;
export const IKEEXT_MM_SA_STATE_FINAL_SENT = 4;
export const IKEEXT_MM_SA_STATE_COMPLETE = 5;
export const IKEEXT_MM_SA_STATE_MAX = 6;
export const IKEEXT_QM_SA_STATE_NONE = 0;
export const IKEEXT_QM_SA_STATE_INITIAL = 1;
export const IKEEXT_QM_SA_STATE_FINAL = 2;
export const IKEEXT_QM_SA_STATE_COMPLETE = 3;
export const IKEEXT_QM_SA_STATE_MAX = 4;
export const IKEEXT_EM_SA_STATE_NONE = 0;
export const IKEEXT_EM_SA_STATE_SENT_ATTS = 1;
export const IKEEXT_EM_SA_STATE_SSPI_SENT = 2;
export const IKEEXT_EM_SA_STATE_AUTH_COMPLETE = 3;
export const IKEEXT_EM_SA_STATE_FINAL = 4;
export const IKEEXT_EM_SA_STATE_COMPLETE = 5;
export const IKEEXT_EM_SA_STATE_MAX = 6;
export const IKEEXT_SA_ROLE_INITIATOR = 0;
export const IKEEXT_SA_ROLE_RESPONDER = 1;
export const IKEEXT_SA_ROLE_MAX = 2;
export const IPSEC_TRANSFORM_AH = 1;
export const IPSEC_TRANSFORM_ESP_AUTH = 2;
export const IPSEC_TRANSFORM_ESP_CIPHER = 3;
export const IPSEC_TRANSFORM_ESP_AUTH_AND_CIPHER = 4;
export const IPSEC_TRANSFORM_ESP_AUTH_FW = 5;
export const IPSEC_TRANSFORM_TYPE_MAX = 6;
export const IPSEC_AUTH_MD5 = 0;
export const IPSEC_AUTH_SHA_1 = 1;
export const IPSEC_AUTH_SHA_256 = 2;
export const IPSEC_AUTH_AES_128 = 3;
export const IPSEC_AUTH_AES_192 = 4;
export const IPSEC_AUTH_AES_256 = 5;
export const IPSEC_AUTH_MAX = 6;
export const IPSEC_CIPHER_TYPE_DES = 1;
export const IPSEC_CIPHER_TYPE_3DES = 2;
export const IPSEC_CIPHER_TYPE_AES_128 = 3;
export const IPSEC_CIPHER_TYPE_AES_192 = 4;
export const IPSEC_CIPHER_TYPE_AES_256 = 5;
export const IPSEC_CIPHER_TYPE_MAX = 6;
export const IPSEC_PFS_NONE = 0;
export const IPSEC_PFS_1 = 1;
export const IPSEC_PFS_2 = 2;
export const IPSEC_PFS_2048 = 3;
export const IPSEC_PFS_14 = 3;
export const IPSEC_PFS_ECP_256 = 4;
export const IPSEC_PFS_ECP_384 = 5;
export const IPSEC_PFS_MM = 6;
export const IPSEC_PFS_24 = 7;
export const IPSEC_PFS_MAX = 8;
export const IPSEC_TOKEN_TYPE_MACHINE = 0;
export const IPSEC_TOKEN_TYPE_IMPERSONATION = 1;
export const IPSEC_TOKEN_TYPE_MAX = 2;
export const IPSEC_TOKEN_PRINCIPAL_LOCAL = 0;
export const IPSEC_TOKEN_PRINCIPAL_PEER = 1;
export const IPSEC_TOKEN_PRINCIPAL_MAX = 2;
export const IPSEC_TOKEN_MODE_MAIN = 0;
export const IPSEC_TOKEN_MODE_EXTENDED = 1;
export const IPSEC_TOKEN_MODE_MAX = 2;
export const IPSEC_TRAFFIC_TYPE_TRANSPORT = 0;
export const IPSEC_TRAFFIC_TYPE_TUNNEL = 1;
export const IPSEC_TRAFFIC_TYPE_MAX = 2;
export const IPSEC_SA_CONTEXT_EVENT_ADD = 1;
export const IPSEC_SA_CONTEXT_EVENT_DELETE = 2;
export const IPSEC_SA_CONTEXT_EVENT_MAX = 3;
export const IPSEC_FAILURE_NONE = 0;
export const IPSEC_FAILURE_ME = 1;
export const IPSEC_FAILURE_PEER = 2;
export const IPSEC_FAILURE_POINT_MAX = 3;
export const DlUnicast = 0;
export const DlMulticast = 1;
export const DlBroadcast = 2;
export const FWPM_CHANGE_ADD = 1;
export const FWPM_CHANGE_DELETE = 2;
export const FWPM_CHANGE_TYPE_MAX = 3;
export const FWPM_SERVICE_STOPPED = 0;
export const FWPM_SERVICE_START_PENDING = 1;
export const FWPM_SERVICE_STOP_PENDING = 2;
export const FWPM_SERVICE_RUNNING = 3;
export const FWPM_SERVICE_STATE_MAX = 4;
export const FWPM_ENGINE_COLLECT_NET_EVENTS = 0;
export const FWPM_ENGINE_NET_EVENT_MATCH_ANY_KEYWORDS = 1;
export const FWPM_ENGINE_NAME_CACHE = 2;
export const FWPM_ENGINE_MONITOR_IPSEC_CONNECTIONS = 3;
export const FWPM_ENGINE_PACKET_QUEUING = 4;
export const FWPM_ENGINE_TXN_WATCHDOG_TIMEOUT_IN_MSEC = 5;
export const FWPM_ENGINE_OPTION_MAX = 6;
export const FWPM_IPSEC_KEYING_CONTEXT = 0;
export const FWPM_IPSEC_IKE_QM_TRANSPORT_CONTEXT = 1;
export const FWPM_IPSEC_IKE_QM_TUNNEL_CONTEXT = 2;
export const FWPM_IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT = 3;
export const FWPM_IPSEC_AUTHIP_QM_TUNNEL_CONTEXT = 4;
export const FWPM_IPSEC_IKE_MM_CONTEXT = 5;
export const FWPM_IPSEC_AUTHIP_MM_CONTEXT = 6;
export const FWPM_CLASSIFY_OPTIONS_CONTEXT = 7;
export const FWPM_GENERAL_CONTEXT = 8;
export const FWPM_IPSEC_IKEV2_QM_TUNNEL_CONTEXT = 9;
export const FWPM_IPSEC_IKEV2_MM_CONTEXT = 10;
export const FWPM_IPSEC_DOSP_CONTEXT = 11;
export const FWPM_IPSEC_IKEV2_QM_TRANSPORT_CONTEXT = 12;
export const FWPM_PROVIDER_CONTEXT_TYPE_MAX = 13;
export const FWPM_FIELD_RAW_DATA = 0;
export const FWPM_FIELD_IP_ADDRESS = 1;
export const FWPM_FIELD_FLAGS = 2;
export const FWPM_FIELD_TYPE_MAX = 3;
export const FWPM_NET_EVENT_TYPE_IKEEXT_MM_FAILURE = 0;
export const FWPM_NET_EVENT_TYPE_IKEEXT_QM_FAILURE = 1;
export const FWPM_NET_EVENT_TYPE_IKEEXT_EM_FAILURE = 2;
export const FWPM_NET_EVENT_TYPE_CLASSIFY_DROP = 3;
export const FWPM_NET_EVENT_TYPE_IPSEC_KERNEL_DROP = 4;
export const FWPM_NET_EVENT_TYPE_IPSEC_DOSP_DROP = 5;
export const FWPM_NET_EVENT_TYPE_CLASSIFY_ALLOW = 6;
export const FWPM_NET_EVENT_TYPE_CAPABILITY_DROP = 7;
export const FWPM_NET_EVENT_TYPE_CAPABILITY_ALLOW = 8;
export const FWPM_NET_EVENT_TYPE_CLASSIFY_DROP_MAC = 9;
export const FWPM_NET_EVENT_TYPE_LPM_PACKET_ARRIVAL = 10;
export const FWPM_NET_EVENT_TYPE_MAX = 11;
export const FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT = 0;
export const FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT_SERVER = 1;
export const FWPM_APPC_NETWORK_CAPABILITY_INTERNET_PRIVATE_NETWORK = 2;
export const FWPM_SYSTEM_PORT_RPC_EPMAP = 0;
export const FWPM_SYSTEM_PORT_TEREDO = 1;
export const FWPM_SYSTEM_PORT_IPHTTPS_IN = 2;
export const FWPM_SYSTEM_PORT_IPHTTPS_OUT = 3;
export const FWPM_SYSTEM_PORT_TYPE_MAX = 4;
export const FWPM_CONNECTION_EVENT_ADD = 0;
export const FWPM_CONNECTION_EVENT_DELETE = 1;
export const FWPM_CONNECTION_EVENT_MAX = 2;
export const FWPM_VSWITCH_EVENT_FILTER_ADD_TO_INCOMPLETE_LAYER = 0;
export const FWPM_VSWITCH_EVENT_FILTER_ENGINE_NOT_IN_REQUIRED_POSITION = 1;
export const FWPM_VSWITCH_EVENT_ENABLED_FOR_INSPECTION = 2;
export const FWPM_VSWITCH_EVENT_DISABLED_FOR_INSPECTION = 3;
export const FWPM_VSWITCH_EVENT_FILTER_ENGINE_REORDER = 4;
export const FWPM_VSWITCH_EVENT_MAX = 5;
export const IP_OPT_EOL = 0;
export const IP_OPT_NOP = 1;
export const IP_OPT_SECURITY = 130;
export const IP_OPT_LSRR = 131;
export const IP_OPT_TS = 68;
export const IP_OPT_RR = 7;
export const IP_OPT_SSRR = 137;
export const IP_OPT_SID = 136;
export const IP_OPT_ROUTER_ALERT = 148;
export const IP_OPT_MULTIDEST = 149;
export const IP_OPTION_TIMESTAMP_ONLY = 0;
export const IP_OPTION_TIMESTAMP_ADDRESS = 1;
export const IP_OPTION_TIMESTAMP_SPECIFIC_ADDRESS = 3;
export const ICMP4_UNREACH_NET = 0;
export const ICMP4_UNREACH_HOST = 1;
export const ICMP4_UNREACH_PROTOCOL = 2;
export const ICMP4_UNREACH_PORT = 3;
export const ICMP4_UNREACH_FRAG_NEEDED = 4;
export const ICMP4_UNREACH_SOURCEROUTE_FAILED = 5;
export const ICMP4_UNREACH_NET_UNKNOWN = 6;
export const ICMP4_UNREACH_HOST_UNKNOWN = 7;
export const ICMP4_UNREACH_ISOLATED = 8;
export const ICMP4_UNREACH_NET_ADMIN = 9;
export const ICMP4_UNREACH_HOST_ADMIN = 10;
export const ICMP4_UNREACH_NET_TOS = 11;
export const ICMP4_UNREACH_HOST_TOS = 12;
export const ICMP4_UNREACH_ADMIN = 13;
export const ICMP4_TIME_EXCEED_TRANSIT = 0;
export const ICMP4_TIME_EXCEED_REASSEMBLY = 1;
export const ARP_REQUEST = 1;
export const ARP_RESPONSE = 2;
export const ARP_HW_ENET = 1;
export const ARP_HW_802 = 6;
export const IGMP_MAX_RESP_CODE_TYPE_NORMAL = 0;
export const IGMP_MAX_RESP_CODE_TYPE_FLOAT = 1;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const IP6OPT_PAD1 = 0;
export const IP6OPT_PADN = 1;
export const IP6OPT_TUNNEL_LIMIT = 4;
export const IP6OPT_ROUTER_ALERT = 5;
export const IP6OPT_JUMBO = 194;
export const IP6OPT_NSAP_ADDR = 195;
export const ND_OPT_SOURCE_LINKADDR = 1;
export const ND_OPT_TARGET_LINKADDR = 2;
export const ND_OPT_PREFIX_INFORMATION = 3;
export const ND_OPT_REDIRECTED_HEADER = 4;
export const ND_OPT_MTU = 5;
export const ND_OPT_NBMA_SHORTCUT_LIMIT = 6;
export const ND_OPT_ADVERTISEMENT_INTERVAL = 7;
export const ND_OPT_HOME_AGENT_INFORMATION = 8;
export const ND_OPT_SOURCE_ADDR_LIST = 9;
export const ND_OPT_TARGET_ADDR_LIST = 10;
export const ND_OPT_ROUTE_INFO = 24;
export const ND_OPT_RDNSS = 25;
export const ND_OPT_DNSSL = 31;
export const MLD_MAX_RESP_CODE_TYPE_NORMAL = 0;
export const MLD_MAX_RESP_CODE_TYPE_FLOAT = 1;
export const UNSPECIFIED_COMPARTMENT_ID = 0;
export const DEFAULT_COMPARTMENT_ID = 1;
export const TUNNEL_SUB_TYPE_NONE = 0;
export const TUNNEL_SUB_TYPE_CP = 1;
export const TUNNEL_SUB_TYPE_IPTLS = 2;
export const TUNNEL_SUB_TYPE_HA = 3;
export const MIT_GUID = 1;
export const MIT_IF_LUID = 2;
export const FallbackIndexTcpFastopen = 0;
export const FallbackIndexMax = 1;

// Structs

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY6 (size: 8)
 */
export interface FWP_BYTE_ARRAY6 {
  /** array */
  byteArray6: Deno.PointerValue | null;
}

export const sizeofFWP_BYTE_ARRAY6 = 8;

export function allocFWP_BYTE_ARRAY6(data?: Partial<FWP_BYTE_ARRAY6>): Uint8Array {
  const buf = new Uint8Array(sizeofFWP_BYTE_ARRAY6);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.byteArray6 !== undefined) view.setBigUint64(0, data.byteArray6 === null ? 0n : BigInt(util.toPointer(data.byteArray6)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16 (size: 8)
 */
export interface FWP_BYTE_ARRAY16 {
  /** array */
  byteArray16: Deno.PointerValue | null;
}

export const sizeofFWP_BYTE_ARRAY16 = 8;

export function allocFWP_BYTE_ARRAY16(data?: Partial<FWP_BYTE_ARRAY16>): Uint8Array {
  const buf = new Uint8Array(sizeofFWP_BYTE_ARRAY16);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.byteArray16 !== undefined) view.setBigUint64(0, data.byteArray16 === null ? 0n : BigInt(util.toPointer(data.byteArray16)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB (size: 16)
 */
export interface FWP_BYTE_BLOB {
  /** u32 */
  size: number;
  /** ptr */
  data: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWP_BYTE_BLOB = 16;

export function allocFWP_BYTE_BLOB(data?: Partial<FWP_BYTE_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofFWP_BYTE_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.size !== undefined) view.setUint32(0, Number(data.size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_TOKEN_INFORMATION (size: 32)
 */
export interface FWP_TOKEN_INFORMATION {
  /** u32 */
  sidCount: number;
  /** ptr */
  sids: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  restrictedSidCount: number;
  /** ptr */
  restrictedSids: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWP_TOKEN_INFORMATION = 32;

export function allocFWP_TOKEN_INFORMATION(data?: Partial<FWP_TOKEN_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFWP_TOKEN_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sidCount !== undefined) view.setUint32(0, Number(data.sidCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sids !== undefined) view.setBigUint64(8, data.sids === null ? 0n : BigInt(util.toPointer(data.sids)), true);
  // 0x10: u32
  if (data?.restrictedSidCount !== undefined) view.setUint32(16, Number(data.restrictedSidCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.restrictedSids !== undefined) view.setBigUint64(24, data.restrictedSids === null ? 0n : BigInt(util.toPointer(data.restrictedSids)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0 (size: 16)
 */
export interface FWP_VALUE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_DATA_TYPE */
  type: FWP_DATA_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWP_VALUE0 = 16;

export function allocFWP_VALUE0(data?: Partial<FWP_VALUE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWP_VALUE0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_V4_ADDR_AND_MASK (size: 8)
 */
export interface FWP_V4_ADDR_AND_MASK {
  /** u32 */
  addr: number;
  /** u32 */
  mask: number;
}

export const sizeofFWP_V4_ADDR_AND_MASK = 8;

export function allocFWP_V4_ADDR_AND_MASK(data?: Partial<FWP_V4_ADDR_AND_MASK>): Uint8Array {
  const buf = new Uint8Array(sizeofFWP_V4_ADDR_AND_MASK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.addr !== undefined) view.setUint32(0, Number(data.addr), true);
  // 0x04: u32
  if (data?.mask !== undefined) view.setUint32(4, Number(data.mask), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_V6_ADDR_AND_MASK (size: 16)
 */
export interface FWP_V6_ADDR_AND_MASK {
  /** array */
  addr: Deno.PointerValue | null;
  /** u8 */
  prefixLength: number;
}

export const sizeofFWP_V6_ADDR_AND_MASK = 16;

export function allocFWP_V6_ADDR_AND_MASK(data?: Partial<FWP_V6_ADDR_AND_MASK>): Uint8Array {
  const buf = new Uint8Array(sizeofFWP_V6_ADDR_AND_MASK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.addr !== undefined) view.setBigUint64(0, data.addr === null ? 0n : BigInt(util.toPointer(data.addr)), true);
  // 0x08: u8
  if (data?.prefixLength !== undefined) view.setUint8(8, Number(data.prefixLength));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_RANGE0 (size: 16)
 */
export interface FWP_RANGE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0 */
  valueLow: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0 */
  valueHigh: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWP_RANGE0 = 16;

export function allocFWP_RANGE0(data?: Partial<FWP_RANGE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWP_RANGE0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.valueLow !== undefined) view.setBigUint64(0, data.valueLow === null ? 0n : BigInt(util.toPointer(data.valueLow)), true);
  // 0x08: pointer
  if (data?.valueHigh !== undefined) view.setBigUint64(8, data.valueHigh === null ? 0n : BigInt(util.toPointer(data.valueHigh)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0 (size: 16)
 */
export interface FWP_CONDITION_VALUE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_DATA_TYPE */
  type: FWP_DATA_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWP_CONDITION_VALUE0 = 16;

export function allocFWP_CONDITION_VALUE0(data?: Partial<FWP_CONDITION_VALUE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWP_CONDITION_VALUE0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 (size: 16)
 */
export interface FWPM_DISPLAY_DATA0 {
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  description: string | null;
}

export const sizeofFWPM_DISPLAY_DATA0 = 16;

export function allocFWPM_DISPLAY_DATA0(data?: Partial<FWPM_DISPLAY_DATA0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_DISPLAY_DATA0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.description !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.description);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_VIRTUAL_IF_TUNNEL_INFO0 (size: 16)
 */
export interface IPSEC_VIRTUAL_IF_TUNNEL_INFO0 {
  /** u64 */
  virtualIfTunnelId: Deno.PointerValue;
  /** u64 */
  trafficSelectorId: Deno.PointerValue;
}

export const sizeofIPSEC_VIRTUAL_IF_TUNNEL_INFO0 = 16;

export function allocIPSEC_VIRTUAL_IF_TUNNEL_INFO0(data?: Partial<IPSEC_VIRTUAL_IF_TUNNEL_INFO0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_VIRTUAL_IF_TUNNEL_INFO0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.virtualIfTunnelId !== undefined) view.setBigUint64(0, BigInt(data.virtualIfTunnelId), true);
  // 0x08: u64
  if (data?.trafficSelectorId !== undefined) view.setBigUint64(8, BigInt(data.trafficSelectorId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION0 (size: 8)
 */
export interface IKEEXT_PRESHARED_KEY_AUTHENTICATION0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  presharedKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_PRESHARED_KEY_AUTHENTICATION0 = 8;

export function allocIKEEXT_PRESHARED_KEY_AUTHENTICATION0(data?: Partial<IKEEXT_PRESHARED_KEY_AUTHENTICATION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_PRESHARED_KEY_AUTHENTICATION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.presharedKey !== undefined) view.setBigUint64(0, data.presharedKey === null ? 0n : BigInt(util.toPointer(data.presharedKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION1 (size: 16)
 */
export interface IKEEXT_PRESHARED_KEY_AUTHENTICATION1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  presharedKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS */
  flags: IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS;
}

export const sizeofIKEEXT_PRESHARED_KEY_AUTHENTICATION1 = 16;

export function allocIKEEXT_PRESHARED_KEY_AUTHENTICATION1(data?: Partial<IKEEXT_PRESHARED_KEY_AUTHENTICATION1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_PRESHARED_KEY_AUTHENTICATION1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.presharedKey !== undefined) view.setBigUint64(0, data.presharedKey === null ? 0n : BigInt(util.toPointer(data.presharedKey)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_ROOT_CONFIG0 (size: 16)
 */
export interface IKEEXT_CERT_ROOT_CONFIG0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  certData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_FLAGS */
  flags: IKEEXT_CERT_FLAGS;
}

export const sizeofIKEEXT_CERT_ROOT_CONFIG0 = 16;

export function allocIKEEXT_CERT_ROOT_CONFIG0(data?: Partial<IKEEXT_CERT_ROOT_CONFIG0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CERT_ROOT_CONFIG0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.certData !== undefined) view.setBigUint64(0, data.certData === null ? 0n : BigInt(util.toPointer(data.certData)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION0 (size: 40)
 */
export interface IKEEXT_CERTIFICATE_AUTHENTICATION0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE */
  inboundConfigType: IKEEXT_CERT_CONFIG_TYPE;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE */
  outboundConfigType: IKEEXT_CERT_CONFIG_TYPE;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_AUTH */
  flags: IKEEXT_CERT_AUTH;
}

export const sizeofIKEEXT_CERTIFICATE_AUTHENTICATION0 = 40;

export function allocIKEEXT_CERTIFICATE_AUTHENTICATION0(data?: Partial<IKEEXT_CERTIFICATE_AUTHENTICATION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CERTIFICATE_AUTHENTICATION0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.inboundConfigType !== undefined) view.setInt32(0, Number(data.inboundConfigType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: i32
  if (data?.outboundConfigType !== undefined) view.setInt32(16, Number(data.outboundConfigType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: u32
  if (data?.flags !== undefined) view.setUint32(32, Number(data.flags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION1 (size: 48)
 */
export interface IKEEXT_CERTIFICATE_AUTHENTICATION1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE */
  inboundConfigType: IKEEXT_CERT_CONFIG_TYPE;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE */
  outboundConfigType: IKEEXT_CERT_CONFIG_TYPE;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_AUTH */
  flags: IKEEXT_CERT_AUTH;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  localCertLocationUrl: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_CERTIFICATE_AUTHENTICATION1 = 48;

export function allocIKEEXT_CERTIFICATE_AUTHENTICATION1(data?: Partial<IKEEXT_CERTIFICATE_AUTHENTICATION1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CERTIFICATE_AUTHENTICATION1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.inboundConfigType !== undefined) view.setInt32(0, Number(data.inboundConfigType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: i32
  if (data?.outboundConfigType !== undefined) view.setInt32(16, Number(data.outboundConfigType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: u32
  if (data?.flags !== undefined) view.setUint32(32, Number(data.flags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.localCertLocationUrl !== undefined) view.setBigUint64(40, data.localCertLocationUrl === null ? 0n : BigInt(util.toPointer(data.localCertLocationUrl)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_EKUS0 (size: 16)
 */
export interface IKEEXT_CERT_EKUS0 {
  /** u32 */
  numEku: number;
  /** ptr */
  eku: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIKEEXT_CERT_EKUS0 = 16;

export function allocIKEEXT_CERT_EKUS0(data?: Partial<IKEEXT_CERT_EKUS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CERT_EKUS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numEku !== undefined) view.setUint32(0, Number(data.numEku), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.eku !== undefined) view.setBigUint64(8, data.eku === null ? 0n : BigInt(util.toPointer(data.eku)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_NAME0 (size: 16)
 */
export interface IKEEXT_CERT_NAME0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CRITERIA_NAME_TYPE */
  nameType: IKEEXT_CERT_CRITERIA_NAME_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  certName: string | null;
}

export const sizeofIKEEXT_CERT_NAME0 = 16;

export function allocIKEEXT_CERT_NAME0(data?: Partial<IKEEXT_CERT_NAME0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CERT_NAME0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.nameType !== undefined) view.setInt32(0, Number(data.nameType), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.certName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.certName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CRITERIA0 (size: 40)
 */
export interface IKEEXT_CERTIFICATE_CRITERIA0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  certData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  certHash: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  eku: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  name: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  flags: number;
}

export const sizeofIKEEXT_CERTIFICATE_CRITERIA0 = 40;

export function allocIKEEXT_CERTIFICATE_CRITERIA0(data?: Partial<IKEEXT_CERTIFICATE_CRITERIA0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CERTIFICATE_CRITERIA0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.certData !== undefined) view.setBigUint64(0, data.certData === null ? 0n : BigInt(util.toPointer(data.certData)), true);
  // 0x08: pointer
  if (data?.certHash !== undefined) view.setBigUint64(8, data.certHash === null ? 0n : BigInt(util.toPointer(data.certHash)), true);
  // 0x10: pointer
  if (data?.eku !== undefined) view.setBigUint64(16, data.eku === null ? 0n : BigInt(util.toPointer(data.eku)), true);
  // 0x18: pointer
  if (data?.name !== undefined) view.setBigUint64(24, data.name === null ? 0n : BigInt(util.toPointer(data.name)), true);
  // 0x20: u32
  if (data?.flags !== undefined) view.setUint32(32, Number(data.flags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_AUTHENTICATION2 (size: 48)
 */
export interface IKEEXT_CERTIFICATE_AUTHENTICATION2 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE */
  inboundConfigType: IKEEXT_CERT_CONFIG_TYPE;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_CONFIG_TYPE */
  outboundConfigType: IKEEXT_CERT_CONFIG_TYPE;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERT_AUTH */
  flags: IKEEXT_CERT_AUTH;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  localCertLocationUrl: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_CERTIFICATE_AUTHENTICATION2 = 48;

export function allocIKEEXT_CERTIFICATE_AUTHENTICATION2(data?: Partial<IKEEXT_CERTIFICATE_AUTHENTICATION2>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CERTIFICATE_AUTHENTICATION2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.inboundConfigType !== undefined) view.setInt32(0, Number(data.inboundConfigType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: i32
  if (data?.outboundConfigType !== undefined) view.setInt32(16, Number(data.outboundConfigType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: u32
  if (data?.flags !== undefined) view.setUint32(32, Number(data.flags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.localCertLocationUrl !== undefined) view.setBigUint64(40, data.localCertLocationUrl === null ? 0n : BigInt(util.toPointer(data.localCertLocationUrl)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IPV6_CGA_AUTHENTICATION0 (size: 40)
 */
export interface IKEEXT_IPV6_CGA_AUTHENTICATION0 {
  /** Windows.Win32.Foundation.PWSTR */
  keyContainerName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  cspName: string | null;
  /** u32 */
  cspType: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY16 */
  cgaModifier: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  cgaCollisionCount: number;
}

export const sizeofIKEEXT_IPV6_CGA_AUTHENTICATION0 = 40;

export function allocIKEEXT_IPV6_CGA_AUTHENTICATION0(data?: Partial<IKEEXT_IPV6_CGA_AUTHENTICATION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_IPV6_CGA_AUTHENTICATION0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.keyContainerName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.keyContainerName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.cspName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.cspName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cspType !== undefined) view.setUint32(16, Number(data.cspType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.cgaModifier !== undefined) view.setBigUint64(24, data.cgaModifier === null ? 0n : BigInt(util.toPointer(data.cgaModifier)), true);
  // 0x20: u8
  if (data?.cgaCollisionCount !== undefined) view.setUint8(32, Number(data.cgaCollisionCount));
  // 0x21: pad7
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KERBEROS_AUTHENTICATION0 (size: 8)
 */
export interface IKEEXT_KERBEROS_AUTHENTICATION0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KERBEROS_AUTHENTICATION_FLAGS */
  flags: IKEEXT_KERBEROS_AUTHENTICATION_FLAGS;
}

export const sizeofIKEEXT_KERBEROS_AUTHENTICATION0 = 8;

export function allocIKEEXT_KERBEROS_AUTHENTICATION0(data?: Partial<IKEEXT_KERBEROS_AUTHENTICATION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_KERBEROS_AUTHENTICATION0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KERBEROS_AUTHENTICATION1 (size: 16)
 */
export interface IKEEXT_KERBEROS_AUTHENTICATION1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KERBEROS_AUTHENTICATION_FLAGS */
  flags: IKEEXT_KERBEROS_AUTHENTICATION_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  proxyServer: string | null;
}

export const sizeofIKEEXT_KERBEROS_AUTHENTICATION1 = 16;

export function allocIKEEXT_KERBEROS_AUTHENTICATION1(data?: Partial<IKEEXT_KERBEROS_AUTHENTICATION1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_KERBEROS_AUTHENTICATION1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.proxyServer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.proxyServer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_RESERVED_AUTHENTICATION0 (size: 8)
 */
export interface IKEEXT_RESERVED_AUTHENTICATION0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_RESERVED_AUTHENTICATION_FLAGS */
  flags: IKEEXT_RESERVED_AUTHENTICATION_FLAGS;
}

export const sizeofIKEEXT_RESERVED_AUTHENTICATION0 = 8;

export function allocIKEEXT_RESERVED_AUTHENTICATION0(data?: Partial<IKEEXT_RESERVED_AUTHENTICATION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_RESERVED_AUTHENTICATION0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_NTLM_V2_AUTHENTICATION0 (size: 8)
 */
export interface IKEEXT_NTLM_V2_AUTHENTICATION0 {
  /** u32 */
  flags: number;
}

export const sizeofIKEEXT_NTLM_V2_AUTHENTICATION0 = 8;

export function allocIKEEXT_NTLM_V2_AUTHENTICATION0(data?: Partial<IKEEXT_NTLM_V2_AUTHENTICATION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_NTLM_V2_AUTHENTICATION0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EAP_AUTHENTICATION0 (size: 8)
 */
export interface IKEEXT_EAP_AUTHENTICATION0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EAP_AUTHENTICATION_FLAGS */
  flags: IKEEXT_EAP_AUTHENTICATION_FLAGS;
}

export const sizeofIKEEXT_EAP_AUTHENTICATION0 = 8;

export function allocIKEEXT_EAP_AUTHENTICATION0(data?: Partial<IKEEXT_EAP_AUTHENTICATION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_EAP_AUTHENTICATION0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD0 (size: 16)
 */
export interface IKEEXT_AUTHENTICATION_METHOD0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE */
  authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_AUTHENTICATION_METHOD0 = 16;

export function allocIKEEXT_AUTHENTICATION_METHOD0(data?: Partial<IKEEXT_AUTHENTICATION_METHOD0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_AUTHENTICATION_METHOD0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.authenticationMethodType !== undefined) view.setInt32(0, Number(data.authenticationMethodType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD1 (size: 16)
 */
export interface IKEEXT_AUTHENTICATION_METHOD1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE */
  authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_AUTHENTICATION_METHOD1 = 16;

export function allocIKEEXT_AUTHENTICATION_METHOD1(data?: Partial<IKEEXT_AUTHENTICATION_METHOD1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_AUTHENTICATION_METHOD1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.authenticationMethodType !== undefined) view.setInt32(0, Number(data.authenticationMethodType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD2 (size: 16)
 */
export interface IKEEXT_AUTHENTICATION_METHOD2 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE */
  authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_AUTHENTICATION_METHOD2 = 16;

export function allocIKEEXT_AUTHENTICATION_METHOD2(data?: Partial<IKEEXT_AUTHENTICATION_METHOD2>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_AUTHENTICATION_METHOD2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.authenticationMethodType !== undefined) view.setInt32(0, Number(data.authenticationMethodType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CIPHER_ALGORITHM0 (size: 16)
 */
export interface IKEEXT_CIPHER_ALGORITHM0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CIPHER_TYPE */
  algoIdentifier: IKEEXT_CIPHER_TYPE;
  /** u32 */
  keyLen: number;
  /** u32 */
  rounds: number;
}

export const sizeofIKEEXT_CIPHER_ALGORITHM0 = 16;

export function allocIKEEXT_CIPHER_ALGORITHM0(data?: Partial<IKEEXT_CIPHER_ALGORITHM0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CIPHER_ALGORITHM0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.algoIdentifier !== undefined) view.setInt32(0, Number(data.algoIdentifier), true);
  // 0x04: u32
  if (data?.keyLen !== undefined) view.setUint32(4, Number(data.keyLen), true);
  // 0x08: u32
  if (data?.rounds !== undefined) view.setUint32(8, Number(data.rounds), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_INTEGRITY_ALGORITHM0 (size: 8)
 */
export interface IKEEXT_INTEGRITY_ALGORITHM0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_INTEGRITY_TYPE */
  algoIdentifier: IKEEXT_INTEGRITY_TYPE;
}

export const sizeofIKEEXT_INTEGRITY_ALGORITHM0 = 8;

export function allocIKEEXT_INTEGRITY_ALGORITHM0(data?: Partial<IKEEXT_INTEGRITY_ALGORITHM0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_INTEGRITY_ALGORITHM0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.algoIdentifier !== undefined) view.setInt32(0, Number(data.algoIdentifier), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0 (size: 32)
 */
export interface IKEEXT_PROPOSAL0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CIPHER_ALGORITHM0 */
  cipherAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_INTEGRITY_ALGORITHM0 */
  integrityAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  maxLifetimeSeconds: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_DH_GROUP */
  dhGroup: IKEEXT_DH_GROUP;
  /** u32 */
  quickModeLimit: number;
}

export const sizeofIKEEXT_PROPOSAL0 = 32;

export function allocIKEEXT_PROPOSAL0(data?: Partial<IKEEXT_PROPOSAL0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_PROPOSAL0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cipherAlgorithm !== undefined) view.setBigUint64(0, data.cipherAlgorithm === null ? 0n : BigInt(util.toPointer(data.cipherAlgorithm)), true);
  // 0x08: pointer
  if (data?.integrityAlgorithm !== undefined) view.setBigUint64(8, data.integrityAlgorithm === null ? 0n : BigInt(util.toPointer(data.integrityAlgorithm)), true);
  // 0x10: u32
  if (data?.maxLifetimeSeconds !== undefined) view.setUint32(16, Number(data.maxLifetimeSeconds), true);
  // 0x14: i32
  if (data?.dhGroup !== undefined) view.setInt32(20, Number(data.dhGroup), true);
  // 0x18: u32
  if (data?.quickModeLimit !== undefined) view.setUint32(24, Number(data.quickModeLimit), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY0 (size: 40)
 */
export interface IKEEXT_POLICY0 {
  /** u32 */
  softExpirationTime: number;
  /** u32 */
  numAuthenticationMethods: number;
  /** ptr */
  authenticationMethods: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE */
  initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;
  /** u32 */
  numIkeProposals: number;
  /** ptr */
  ikeProposals: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY_FLAG */
  flags: IKEEXT_POLICY_FLAG;
  /** u32 */
  maxDynamicFilters: number;
}

export const sizeofIKEEXT_POLICY0 = 40;

export function allocIKEEXT_POLICY0(data?: Partial<IKEEXT_POLICY0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_POLICY0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.softExpirationTime !== undefined) view.setUint32(0, Number(data.softExpirationTime), true);
  // 0x04: u32
  if (data?.numAuthenticationMethods !== undefined) view.setUint32(4, Number(data.numAuthenticationMethods), true);
  // 0x08: pointer
  if (data?.authenticationMethods !== undefined) view.setBigUint64(8, data.authenticationMethods === null ? 0n : BigInt(util.toPointer(data.authenticationMethods)), true);
  // 0x10: i32
  if (data?.initiatorImpersonationType !== undefined) view.setInt32(16, Number(data.initiatorImpersonationType), true);
  // 0x14: u32
  if (data?.numIkeProposals !== undefined) view.setUint32(20, Number(data.numIkeProposals), true);
  // 0x18: pointer
  if (data?.ikeProposals !== undefined) view.setBigUint64(24, data.ikeProposals === null ? 0n : BigInt(util.toPointer(data.ikeProposals)), true);
  // 0x20: u32
  if (data?.flags !== undefined) view.setUint32(32, Number(data.flags), true);
  // 0x24: u32
  if (data?.maxDynamicFilters !== undefined) view.setUint32(36, Number(data.maxDynamicFilters), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY1 (size: 48)
 */
export interface IKEEXT_POLICY1 {
  /** u32 */
  softExpirationTime: number;
  /** u32 */
  numAuthenticationMethods: number;
  /** ptr */
  authenticationMethods: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE */
  initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;
  /** u32 */
  numIkeProposals: number;
  /** ptr */
  ikeProposals: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY_FLAG */
  flags: IKEEXT_POLICY_FLAG;
  /** u32 */
  maxDynamicFilters: number;
  /** u32 */
  retransmitDurationSecs: number;
}

export const sizeofIKEEXT_POLICY1 = 48;

export function allocIKEEXT_POLICY1(data?: Partial<IKEEXT_POLICY1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_POLICY1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.softExpirationTime !== undefined) view.setUint32(0, Number(data.softExpirationTime), true);
  // 0x04: u32
  if (data?.numAuthenticationMethods !== undefined) view.setUint32(4, Number(data.numAuthenticationMethods), true);
  // 0x08: pointer
  if (data?.authenticationMethods !== undefined) view.setBigUint64(8, data.authenticationMethods === null ? 0n : BigInt(util.toPointer(data.authenticationMethods)), true);
  // 0x10: i32
  if (data?.initiatorImpersonationType !== undefined) view.setInt32(16, Number(data.initiatorImpersonationType), true);
  // 0x14: u32
  if (data?.numIkeProposals !== undefined) view.setUint32(20, Number(data.numIkeProposals), true);
  // 0x18: pointer
  if (data?.ikeProposals !== undefined) view.setBigUint64(24, data.ikeProposals === null ? 0n : BigInt(util.toPointer(data.ikeProposals)), true);
  // 0x20: u32
  if (data?.flags !== undefined) view.setUint32(32, Number(data.flags), true);
  // 0x24: u32
  if (data?.maxDynamicFilters !== undefined) view.setUint32(36, Number(data.maxDynamicFilters), true);
  // 0x28: u32
  if (data?.retransmitDurationSecs !== undefined) view.setUint32(40, Number(data.retransmitDurationSecs), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY2 (size: 48)
 */
export interface IKEEXT_POLICY2 {
  /** u32 */
  softExpirationTime: number;
  /** u32 */
  numAuthenticationMethods: number;
  /** ptr */
  authenticationMethods: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE */
  initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;
  /** u32 */
  numIkeProposals: number;
  /** ptr */
  ikeProposals: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_POLICY_FLAG */
  flags: IKEEXT_POLICY_FLAG;
  /** u32 */
  maxDynamicFilters: number;
  /** u32 */
  retransmitDurationSecs: number;
}

export const sizeofIKEEXT_POLICY2 = 48;

export function allocIKEEXT_POLICY2(data?: Partial<IKEEXT_POLICY2>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_POLICY2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.softExpirationTime !== undefined) view.setUint32(0, Number(data.softExpirationTime), true);
  // 0x04: u32
  if (data?.numAuthenticationMethods !== undefined) view.setUint32(4, Number(data.numAuthenticationMethods), true);
  // 0x08: pointer
  if (data?.authenticationMethods !== undefined) view.setBigUint64(8, data.authenticationMethods === null ? 0n : BigInt(util.toPointer(data.authenticationMethods)), true);
  // 0x10: i32
  if (data?.initiatorImpersonationType !== undefined) view.setInt32(16, Number(data.initiatorImpersonationType), true);
  // 0x14: u32
  if (data?.numIkeProposals !== undefined) view.setUint32(20, Number(data.numIkeProposals), true);
  // 0x18: pointer
  if (data?.ikeProposals !== undefined) view.setBigUint64(24, data.ikeProposals === null ? 0n : BigInt(util.toPointer(data.ikeProposals)), true);
  // 0x20: u32
  if (data?.flags !== undefined) view.setUint32(32, Number(data.flags), true);
  // 0x24: u32
  if (data?.maxDynamicFilters !== undefined) view.setUint32(36, Number(data.maxDynamicFilters), true);
  // 0x28: u32
  if (data?.retransmitDurationSecs !== undefined) view.setUint32(40, Number(data.retransmitDurationSecs), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY0 (size: 24)
 */
export interface IKEEXT_EM_POLICY0 {
  /** u32 */
  numAuthenticationMethods: number;
  /** ptr */
  authenticationMethods: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE */
  initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;
}

export const sizeofIKEEXT_EM_POLICY0 = 24;

export function allocIKEEXT_EM_POLICY0(data?: Partial<IKEEXT_EM_POLICY0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_EM_POLICY0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numAuthenticationMethods !== undefined) view.setUint32(0, Number(data.numAuthenticationMethods), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.authenticationMethods !== undefined) view.setBigUint64(8, data.authenticationMethods === null ? 0n : BigInt(util.toPointer(data.authenticationMethods)), true);
  // 0x10: i32
  if (data?.initiatorImpersonationType !== undefined) view.setInt32(16, Number(data.initiatorImpersonationType), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY1 (size: 24)
 */
export interface IKEEXT_EM_POLICY1 {
  /** u32 */
  numAuthenticationMethods: number;
  /** ptr */
  authenticationMethods: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE */
  initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;
}

export const sizeofIKEEXT_EM_POLICY1 = 24;

export function allocIKEEXT_EM_POLICY1(data?: Partial<IKEEXT_EM_POLICY1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_EM_POLICY1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numAuthenticationMethods !== undefined) view.setUint32(0, Number(data.numAuthenticationMethods), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.authenticationMethods !== undefined) view.setBigUint64(8, data.authenticationMethods === null ? 0n : BigInt(util.toPointer(data.authenticationMethods)), true);
  // 0x10: i32
  if (data?.initiatorImpersonationType !== undefined) view.setInt32(16, Number(data.initiatorImpersonationType), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_POLICY2 (size: 24)
 */
export interface IKEEXT_EM_POLICY2 {
  /** u32 */
  numAuthenticationMethods: number;
  /** ptr */
  authenticationMethods: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE */
  initiatorImpersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;
}

export const sizeofIKEEXT_EM_POLICY2 = 24;

export function allocIKEEXT_EM_POLICY2(data?: Partial<IKEEXT_EM_POLICY2>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_EM_POLICY2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numAuthenticationMethods !== undefined) view.setUint32(0, Number(data.numAuthenticationMethods), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.authenticationMethods !== undefined) view.setBigUint64(8, data.authenticationMethods === null ? 0n : BigInt(util.toPointer(data.authenticationMethods)), true);
  // 0x10: i32
  if (data?.initiatorImpersonationType !== undefined) view.setInt32(16, Number(data.initiatorImpersonationType), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 (size: 72)
 */
export interface IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 {
  /** u32 */
  currentActiveMainModes: number;
  /** u32 */
  totalMainModesStarted: number;
  /** u32 */
  totalSuccessfulMainModes: number;
  /** u32 */
  totalFailedMainModes: number;
  /** u32 */
  totalResponderMainModes: number;
  /** u32 */
  currentNewResponderMainModes: number;
  /** u32 */
  currentActiveQuickModes: number;
  /** u32 */
  totalQuickModesStarted: number;
  /** u32 */
  totalSuccessfulQuickModes: number;
  /** u32 */
  totalFailedQuickModes: number;
  /** u32 */
  totalAcquires: number;
  /** u32 */
  totalReinitAcquires: number;
  /** u32 */
  currentActiveExtendedModes: number;
  /** u32 */
  totalExtendedModesStarted: number;
  /** u32 */
  totalSuccessfulExtendedModes: number;
  /** u32 */
  totalFailedExtendedModes: number;
  /** u32 */
  totalImpersonationExtendedModes: number;
  /** u32 */
  totalImpersonationMainModes: number;
}

export const sizeofIKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 = 72;

export function allocIKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0(data?: Partial<IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.currentActiveMainModes !== undefined) view.setUint32(0, Number(data.currentActiveMainModes), true);
  // 0x04: u32
  if (data?.totalMainModesStarted !== undefined) view.setUint32(4, Number(data.totalMainModesStarted), true);
  // 0x08: u32
  if (data?.totalSuccessfulMainModes !== undefined) view.setUint32(8, Number(data.totalSuccessfulMainModes), true);
  // 0x0c: u32
  if (data?.totalFailedMainModes !== undefined) view.setUint32(12, Number(data.totalFailedMainModes), true);
  // 0x10: u32
  if (data?.totalResponderMainModes !== undefined) view.setUint32(16, Number(data.totalResponderMainModes), true);
  // 0x14: u32
  if (data?.currentNewResponderMainModes !== undefined) view.setUint32(20, Number(data.currentNewResponderMainModes), true);
  // 0x18: u32
  if (data?.currentActiveQuickModes !== undefined) view.setUint32(24, Number(data.currentActiveQuickModes), true);
  // 0x1c: u32
  if (data?.totalQuickModesStarted !== undefined) view.setUint32(28, Number(data.totalQuickModesStarted), true);
  // 0x20: u32
  if (data?.totalSuccessfulQuickModes !== undefined) view.setUint32(32, Number(data.totalSuccessfulQuickModes), true);
  // 0x24: u32
  if (data?.totalFailedQuickModes !== undefined) view.setUint32(36, Number(data.totalFailedQuickModes), true);
  // 0x28: u32
  if (data?.totalAcquires !== undefined) view.setUint32(40, Number(data.totalAcquires), true);
  // 0x2c: u32
  if (data?.totalReinitAcquires !== undefined) view.setUint32(44, Number(data.totalReinitAcquires), true);
  // 0x30: u32
  if (data?.currentActiveExtendedModes !== undefined) view.setUint32(48, Number(data.currentActiveExtendedModes), true);
  // 0x34: u32
  if (data?.totalExtendedModesStarted !== undefined) view.setUint32(52, Number(data.totalExtendedModesStarted), true);
  // 0x38: u32
  if (data?.totalSuccessfulExtendedModes !== undefined) view.setUint32(56, Number(data.totalSuccessfulExtendedModes), true);
  // 0x3c: u32
  if (data?.totalFailedExtendedModes !== undefined) view.setUint32(60, Number(data.totalFailedExtendedModes), true);
  // 0x40: u32
  if (data?.totalImpersonationExtendedModes !== undefined) view.setUint32(64, Number(data.totalImpersonationExtendedModes), true);
  // 0x44: u32
  if (data?.totalImpersonationMainModes !== undefined) view.setUint32(68, Number(data.totalImpersonationMainModes), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 (size: 72)
 */
export interface IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 {
  /** u32 */
  currentActiveMainModes: number;
  /** u32 */
  totalMainModesStarted: number;
  /** u32 */
  totalSuccessfulMainModes: number;
  /** u32 */
  totalFailedMainModes: number;
  /** u32 */
  totalResponderMainModes: number;
  /** u32 */
  currentNewResponderMainModes: number;
  /** u32 */
  currentActiveQuickModes: number;
  /** u32 */
  totalQuickModesStarted: number;
  /** u32 */
  totalSuccessfulQuickModes: number;
  /** u32 */
  totalFailedQuickModes: number;
  /** u32 */
  totalAcquires: number;
  /** u32 */
  totalReinitAcquires: number;
  /** u32 */
  currentActiveExtendedModes: number;
  /** u32 */
  totalExtendedModesStarted: number;
  /** u32 */
  totalSuccessfulExtendedModes: number;
  /** u32 */
  totalFailedExtendedModes: number;
  /** u32 */
  totalImpersonationExtendedModes: number;
  /** u32 */
  totalImpersonationMainModes: number;
}

export const sizeofIKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 = 72;

export function allocIKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1(data?: Partial<IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.currentActiveMainModes !== undefined) view.setUint32(0, Number(data.currentActiveMainModes), true);
  // 0x04: u32
  if (data?.totalMainModesStarted !== undefined) view.setUint32(4, Number(data.totalMainModesStarted), true);
  // 0x08: u32
  if (data?.totalSuccessfulMainModes !== undefined) view.setUint32(8, Number(data.totalSuccessfulMainModes), true);
  // 0x0c: u32
  if (data?.totalFailedMainModes !== undefined) view.setUint32(12, Number(data.totalFailedMainModes), true);
  // 0x10: u32
  if (data?.totalResponderMainModes !== undefined) view.setUint32(16, Number(data.totalResponderMainModes), true);
  // 0x14: u32
  if (data?.currentNewResponderMainModes !== undefined) view.setUint32(20, Number(data.currentNewResponderMainModes), true);
  // 0x18: u32
  if (data?.currentActiveQuickModes !== undefined) view.setUint32(24, Number(data.currentActiveQuickModes), true);
  // 0x1c: u32
  if (data?.totalQuickModesStarted !== undefined) view.setUint32(28, Number(data.totalQuickModesStarted), true);
  // 0x20: u32
  if (data?.totalSuccessfulQuickModes !== undefined) view.setUint32(32, Number(data.totalSuccessfulQuickModes), true);
  // 0x24: u32
  if (data?.totalFailedQuickModes !== undefined) view.setUint32(36, Number(data.totalFailedQuickModes), true);
  // 0x28: u32
  if (data?.totalAcquires !== undefined) view.setUint32(40, Number(data.totalAcquires), true);
  // 0x2c: u32
  if (data?.totalReinitAcquires !== undefined) view.setUint32(44, Number(data.totalReinitAcquires), true);
  // 0x30: u32
  if (data?.currentActiveExtendedModes !== undefined) view.setUint32(48, Number(data.currentActiveExtendedModes), true);
  // 0x34: u32
  if (data?.totalExtendedModesStarted !== undefined) view.setUint32(52, Number(data.totalExtendedModesStarted), true);
  // 0x38: u32
  if (data?.totalSuccessfulExtendedModes !== undefined) view.setUint32(56, Number(data.totalSuccessfulExtendedModes), true);
  // 0x3c: u32
  if (data?.totalFailedExtendedModes !== undefined) view.setUint32(60, Number(data.totalFailedExtendedModes), true);
  // 0x40: u32
  if (data?.totalImpersonationExtendedModes !== undefined) view.setUint32(64, Number(data.totalImpersonationExtendedModes), true);
  // 0x44: u32
  if (data?.totalImpersonationMainModes !== undefined) view.setUint32(68, Number(data.totalImpersonationMainModes), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS0 (size: 40)
 */
export interface IKEEXT_KEYMODULE_STATISTICS0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 */
  v4Statistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 */
  v6Statistics: Uint8Array | Deno.PointerValue | null;
  /** array */
  errorFrequencyTable: Deno.PointerValue | null;
  /** u32 */
  mainModeNegotiationTime: number;
  /** u32 */
  quickModeNegotiationTime: number;
  /** u32 */
  extendedModeNegotiationTime: number;
}

export const sizeofIKEEXT_KEYMODULE_STATISTICS0 = 40;

export function allocIKEEXT_KEYMODULE_STATISTICS0(data?: Partial<IKEEXT_KEYMODULE_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_KEYMODULE_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.v4Statistics !== undefined) view.setBigUint64(0, data.v4Statistics === null ? 0n : BigInt(util.toPointer(data.v4Statistics)), true);
  // 0x08: pointer
  if (data?.v6Statistics !== undefined) view.setBigUint64(8, data.v6Statistics === null ? 0n : BigInt(util.toPointer(data.v6Statistics)), true);
  // 0x10: pointer
  if (data?.errorFrequencyTable !== undefined) view.setBigUint64(16, data.errorFrequencyTable === null ? 0n : BigInt(util.toPointer(data.errorFrequencyTable)), true);
  // 0x18: u32
  if (data?.mainModeNegotiationTime !== undefined) view.setUint32(24, Number(data.mainModeNegotiationTime), true);
  // 0x1c: u32
  if (data?.quickModeNegotiationTime !== undefined) view.setUint32(28, Number(data.quickModeNegotiationTime), true);
  // 0x20: u32
  if (data?.extendedModeNegotiationTime !== undefined) view.setUint32(32, Number(data.extendedModeNegotiationTime), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS1 (size: 40)
 */
export interface IKEEXT_KEYMODULE_STATISTICS1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 */
  v4Statistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 */
  v6Statistics: Uint8Array | Deno.PointerValue | null;
  /** array */
  errorFrequencyTable: Deno.PointerValue | null;
  /** u32 */
  mainModeNegotiationTime: number;
  /** u32 */
  quickModeNegotiationTime: number;
  /** u32 */
  extendedModeNegotiationTime: number;
}

export const sizeofIKEEXT_KEYMODULE_STATISTICS1 = 40;

export function allocIKEEXT_KEYMODULE_STATISTICS1(data?: Partial<IKEEXT_KEYMODULE_STATISTICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_KEYMODULE_STATISTICS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.v4Statistics !== undefined) view.setBigUint64(0, data.v4Statistics === null ? 0n : BigInt(util.toPointer(data.v4Statistics)), true);
  // 0x08: pointer
  if (data?.v6Statistics !== undefined) view.setBigUint64(8, data.v6Statistics === null ? 0n : BigInt(util.toPointer(data.v6Statistics)), true);
  // 0x10: pointer
  if (data?.errorFrequencyTable !== undefined) view.setBigUint64(16, data.errorFrequencyTable === null ? 0n : BigInt(util.toPointer(data.errorFrequencyTable)), true);
  // 0x18: u32
  if (data?.mainModeNegotiationTime !== undefined) view.setUint32(24, Number(data.mainModeNegotiationTime), true);
  // 0x1c: u32
  if (data?.quickModeNegotiationTime !== undefined) view.setUint32(28, Number(data.quickModeNegotiationTime), true);
  // 0x20: u32
  if (data?.extendedModeNegotiationTime !== undefined) view.setUint32(32, Number(data.extendedModeNegotiationTime), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 (size: 8)
 */
export interface IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 {
  /** u32 */
  totalSocketReceiveFailures: number;
  /** u32 */
  totalSocketSendFailures: number;
}

export const sizeofIKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 = 8;

export function allocIKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0(data?: Partial<IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.totalSocketReceiveFailures !== undefined) view.setUint32(0, Number(data.totalSocketReceiveFailures), true);
  // 0x04: u32
  if (data?.totalSocketSendFailures !== undefined) view.setUint32(4, Number(data.totalSocketSendFailures), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 (size: 8)
 */
export interface IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 {
  /** u32 */
  totalSocketReceiveFailures: number;
  /** u32 */
  totalSocketSendFailures: number;
}

export const sizeofIKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 = 8;

export function allocIKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1(data?: Partial<IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.totalSocketReceiveFailures !== undefined) view.setUint32(0, Number(data.totalSocketReceiveFailures), true);
  // 0x04: u32
  if (data?.totalSocketSendFailures !== undefined) view.setUint32(4, Number(data.totalSocketSendFailures), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COMMON_STATISTICS0 (size: 32)
 */
export interface IKEEXT_COMMON_STATISTICS0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 */
  v4Statistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 */
  v6Statistics: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  totalPacketsReceived: number;
  /** u32 */
  totalInvalidPacketsReceived: number;
  /** u32 */
  currentQueuedWorkitems: number;
}

export const sizeofIKEEXT_COMMON_STATISTICS0 = 32;

export function allocIKEEXT_COMMON_STATISTICS0(data?: Partial<IKEEXT_COMMON_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_COMMON_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.v4Statistics !== undefined) view.setBigUint64(0, data.v4Statistics === null ? 0n : BigInt(util.toPointer(data.v4Statistics)), true);
  // 0x08: pointer
  if (data?.v6Statistics !== undefined) view.setBigUint64(8, data.v6Statistics === null ? 0n : BigInt(util.toPointer(data.v6Statistics)), true);
  // 0x10: u32
  if (data?.totalPacketsReceived !== undefined) view.setUint32(16, Number(data.totalPacketsReceived), true);
  // 0x14: u32
  if (data?.totalInvalidPacketsReceived !== undefined) view.setUint32(20, Number(data.totalInvalidPacketsReceived), true);
  // 0x18: u32
  if (data?.currentQueuedWorkitems !== undefined) view.setUint32(24, Number(data.currentQueuedWorkitems), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COMMON_STATISTICS1 (size: 32)
 */
export interface IKEEXT_COMMON_STATISTICS1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 */
  v4Statistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 */
  v6Statistics: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  totalPacketsReceived: number;
  /** u32 */
  totalInvalidPacketsReceived: number;
  /** u32 */
  currentQueuedWorkitems: number;
}

export const sizeofIKEEXT_COMMON_STATISTICS1 = 32;

export function allocIKEEXT_COMMON_STATISTICS1(data?: Partial<IKEEXT_COMMON_STATISTICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_COMMON_STATISTICS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.v4Statistics !== undefined) view.setBigUint64(0, data.v4Statistics === null ? 0n : BigInt(util.toPointer(data.v4Statistics)), true);
  // 0x08: pointer
  if (data?.v6Statistics !== undefined) view.setBigUint64(8, data.v6Statistics === null ? 0n : BigInt(util.toPointer(data.v6Statistics)), true);
  // 0x10: u32
  if (data?.totalPacketsReceived !== undefined) view.setUint32(16, Number(data.totalPacketsReceived), true);
  // 0x14: u32
  if (data?.totalInvalidPacketsReceived !== undefined) view.setUint32(20, Number(data.totalInvalidPacketsReceived), true);
  // 0x18: u32
  if (data?.currentQueuedWorkitems !== undefined) view.setUint32(24, Number(data.currentQueuedWorkitems), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_STATISTICS0 (size: 24)
 */
export interface IKEEXT_STATISTICS0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS0 */
  ikeStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS0 */
  authipStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COMMON_STATISTICS0 */
  commonStatistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_STATISTICS0 = 24;

export function allocIKEEXT_STATISTICS0(data?: Partial<IKEEXT_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ikeStatistics !== undefined) view.setBigUint64(0, data.ikeStatistics === null ? 0n : BigInt(util.toPointer(data.ikeStatistics)), true);
  // 0x08: pointer
  if (data?.authipStatistics !== undefined) view.setBigUint64(8, data.authipStatistics === null ? 0n : BigInt(util.toPointer(data.authipStatistics)), true);
  // 0x10: pointer
  if (data?.commonStatistics !== undefined) view.setBigUint64(16, data.commonStatistics === null ? 0n : BigInt(util.toPointer(data.commonStatistics)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_STATISTICS1 (size: 32)
 */
export interface IKEEXT_STATISTICS1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS1 */
  ikeStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS1 */
  authipStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEYMODULE_STATISTICS1 */
  ikeV2Statistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COMMON_STATISTICS1 */
  commonStatistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_STATISTICS1 = 32;

export function allocIKEEXT_STATISTICS1(data?: Partial<IKEEXT_STATISTICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_STATISTICS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ikeStatistics !== undefined) view.setBigUint64(0, data.ikeStatistics === null ? 0n : BigInt(util.toPointer(data.ikeStatistics)), true);
  // 0x08: pointer
  if (data?.authipStatistics !== undefined) view.setBigUint64(8, data.authipStatistics === null ? 0n : BigInt(util.toPointer(data.authipStatistics)), true);
  // 0x10: pointer
  if (data?.ikeV2Statistics !== undefined) view.setBigUint64(16, data.ikeV2Statistics === null ? 0n : BigInt(util.toPointer(data.ikeV2Statistics)), true);
  // 0x18: pointer
  if (data?.commonStatistics !== undefined) view.setBigUint64(24, data.commonStatistics === null ? 0n : BigInt(util.toPointer(data.commonStatistics)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_TRAFFIC0 (size: 32)
 */
export interface IKEEXT_TRAFFIC0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  authIpFilterId: Deno.PointerValue;
}

export const sizeofIKEEXT_TRAFFIC0 = 32;

export function allocIKEEXT_TRAFFIC0(data?: Partial<IKEEXT_TRAFFIC0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_TRAFFIC0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ipVersion !== undefined) view.setInt32(0, Number(data.ipVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: u64
  if (data?.authIpFilterId !== undefined) view.setBigUint64(24, BigInt(data.authIpFilterId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COOKIE_PAIR0 (size: 16)
 */
export interface IKEEXT_COOKIE_PAIR0 {
  /** u64 */
  initiator: Deno.PointerValue;
  /** u64 */
  responder: Deno.PointerValue;
}

export const sizeofIKEEXT_COOKIE_PAIR0 = 16;

export function allocIKEEXT_COOKIE_PAIR0(data?: Partial<IKEEXT_COOKIE_PAIR0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_COOKIE_PAIR0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.initiator !== undefined) view.setBigUint64(0, BigInt(data.initiator), true);
  // 0x08: u64
  if (data?.responder !== undefined) view.setBigUint64(8, BigInt(data.responder), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CREDENTIAL0 (size: 24)
 */
export interface IKEEXT_CERTIFICATE_CREDENTIAL0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  subjectName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  certHash: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
}

export const sizeofIKEEXT_CERTIFICATE_CREDENTIAL0 = 24;

export function allocIKEEXT_CERTIFICATE_CREDENTIAL0(data?: Partial<IKEEXT_CERTIFICATE_CREDENTIAL0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CERTIFICATE_CREDENTIAL0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.subjectName !== undefined) view.setBigUint64(0, data.subjectName === null ? 0n : BigInt(util.toPointer(data.subjectName)), true);
  // 0x08: pointer
  if (data?.certHash !== undefined) view.setBigUint64(8, data.certHash === null ? 0n : BigInt(util.toPointer(data.certHash)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_NAME_CREDENTIAL0 (size: 8)
 */
export interface IKEEXT_NAME_CREDENTIAL0 {
  /** Windows.Win32.Foundation.PWSTR */
  principalName: string | null;
}

export const sizeofIKEEXT_NAME_CREDENTIAL0 = 8;

export function allocIKEEXT_NAME_CREDENTIAL0(data?: Partial<IKEEXT_NAME_CREDENTIAL0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_NAME_CREDENTIAL0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.principalName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.principalName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL0 (size: 16)
 */
export interface IKEEXT_CREDENTIAL0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE */
  authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE */
  impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_CREDENTIAL0 = 16;

export function allocIKEEXT_CREDENTIAL0(data?: Partial<IKEEXT_CREDENTIAL0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CREDENTIAL0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.authenticationMethodType !== undefined) view.setInt32(0, Number(data.authenticationMethodType), true);
  // 0x04: i32
  if (data?.impersonationType !== undefined) view.setInt32(4, Number(data.impersonationType), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL_PAIR0 (size: 16)
 */
export interface IKEEXT_CREDENTIAL_PAIR0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL0 */
  localCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL0 */
  peerCredentials: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_CREDENTIAL_PAIR0 = 16;

export function allocIKEEXT_CREDENTIAL_PAIR0(data?: Partial<IKEEXT_CREDENTIAL_PAIR0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CREDENTIAL_PAIR0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.localCredentials !== undefined) view.setBigUint64(0, data.localCredentials === null ? 0n : BigInt(util.toPointer(data.localCredentials)), true);
  // 0x08: pointer
  if (data?.peerCredentials !== undefined) view.setBigUint64(8, data.peerCredentials === null ? 0n : BigInt(util.toPointer(data.peerCredentials)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS0 (size: 16)
 */
export interface IKEEXT_CREDENTIALS0 {
  /** u32 */
  numCredentials: number;
  /** ptr */
  credentials: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIKEEXT_CREDENTIALS0 = 16;

export function allocIKEEXT_CREDENTIALS0(data?: Partial<IKEEXT_CREDENTIALS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CREDENTIALS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numCredentials !== undefined) view.setUint32(0, Number(data.numCredentials), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.credentials !== undefined) view.setBigUint64(8, data.credentials === null ? 0n : BigInt(util.toPointer(data.credentials)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS0 (size: 72)
 */
export interface IKEEXT_SA_DETAILS0 {
  /** u64 */
  saId: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE */
  keyModuleType: IKEEXT_KEY_MODULE_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_TRAFFIC0 */
  ikeTraffic: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0 */
  ikeProposal: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COOKIE_PAIR0 */
  cookiePair: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS0 */
  ikeCredentials: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ikePolicyKey: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  virtualIfTunnelId: Deno.PointerValue;
}

export const sizeofIKEEXT_SA_DETAILS0 = 72;

export function allocIKEEXT_SA_DETAILS0(data?: Partial<IKEEXT_SA_DETAILS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_SA_DETAILS0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.saId !== undefined) view.setBigUint64(0, BigInt(data.saId), true);
  // 0x08: i32
  if (data?.keyModuleType !== undefined) view.setInt32(8, Number(data.keyModuleType), true);
  // 0x0c: i32
  if (data?.ipVersion !== undefined) view.setInt32(12, Number(data.ipVersion), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.ikeTraffic !== undefined) view.setBigUint64(24, data.ikeTraffic === null ? 0n : BigInt(util.toPointer(data.ikeTraffic)), true);
  // 0x20: pointer
  if (data?.ikeProposal !== undefined) view.setBigUint64(32, data.ikeProposal === null ? 0n : BigInt(util.toPointer(data.ikeProposal)), true);
  // 0x28: pointer
  if (data?.cookiePair !== undefined) view.setBigUint64(40, data.cookiePair === null ? 0n : BigInt(util.toPointer(data.cookiePair)), true);
  // 0x30: pointer
  if (data?.ikeCredentials !== undefined) view.setBigUint64(48, data.ikeCredentials === null ? 0n : BigInt(util.toPointer(data.ikeCredentials)), true);
  // 0x38: pointer
  if (data?.ikePolicyKey !== undefined) view.setBigUint64(56, data.ikePolicyKey === null ? 0n : BigInt(util.toPointer(data.ikePolicyKey)), true);
  // 0x40: u64
  if (data?.virtualIfTunnelId !== undefined) view.setBigUint64(64, BigInt(data.virtualIfTunnelId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CERTIFICATE_CREDENTIAL1 (size: 32)
 */
export interface IKEEXT_CERTIFICATE_CREDENTIAL1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  subjectName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  certHash: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  certificate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_CERTIFICATE_CREDENTIAL1 = 32;

export function allocIKEEXT_CERTIFICATE_CREDENTIAL1(data?: Partial<IKEEXT_CERTIFICATE_CREDENTIAL1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CERTIFICATE_CREDENTIAL1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.subjectName !== undefined) view.setBigUint64(0, data.subjectName === null ? 0n : BigInt(util.toPointer(data.subjectName)), true);
  // 0x08: pointer
  if (data?.certHash !== undefined) view.setBigUint64(8, data.certHash === null ? 0n : BigInt(util.toPointer(data.certHash)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.certificate !== undefined) view.setBigUint64(24, data.certificate === null ? 0n : BigInt(util.toPointer(data.certificate)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL1 (size: 16)
 */
export interface IKEEXT_CREDENTIAL1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE */
  authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE */
  impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_CREDENTIAL1 = 16;

export function allocIKEEXT_CREDENTIAL1(data?: Partial<IKEEXT_CREDENTIAL1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CREDENTIAL1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.authenticationMethodType !== undefined) view.setInt32(0, Number(data.authenticationMethodType), true);
  // 0x04: i32
  if (data?.impersonationType !== undefined) view.setInt32(4, Number(data.impersonationType), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL_PAIR1 (size: 16)
 */
export interface IKEEXT_CREDENTIAL_PAIR1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL1 */
  localCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL1 */
  peerCredentials: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_CREDENTIAL_PAIR1 = 16;

export function allocIKEEXT_CREDENTIAL_PAIR1(data?: Partial<IKEEXT_CREDENTIAL_PAIR1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CREDENTIAL_PAIR1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.localCredentials !== undefined) view.setBigUint64(0, data.localCredentials === null ? 0n : BigInt(util.toPointer(data.localCredentials)), true);
  // 0x08: pointer
  if (data?.peerCredentials !== undefined) view.setBigUint64(8, data.peerCredentials === null ? 0n : BigInt(util.toPointer(data.peerCredentials)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS1 (size: 16)
 */
export interface IKEEXT_CREDENTIALS1 {
  /** u32 */
  numCredentials: number;
  /** ptr */
  credentials: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIKEEXT_CREDENTIALS1 = 16;

export function allocIKEEXT_CREDENTIALS1(data?: Partial<IKEEXT_CREDENTIALS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CREDENTIALS1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numCredentials !== undefined) view.setUint32(0, Number(data.numCredentials), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.credentials !== undefined) view.setBigUint64(8, data.credentials === null ? 0n : BigInt(util.toPointer(data.credentials)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS1 (size: 80)
 */
export interface IKEEXT_SA_DETAILS1 {
  /** u64 */
  saId: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE */
  keyModuleType: IKEEXT_KEY_MODULE_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_TRAFFIC0 */
  ikeTraffic: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0 */
  ikeProposal: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COOKIE_PAIR0 */
  cookiePair: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS1 */
  ikeCredentials: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ikePolicyKey: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  virtualIfTunnelId: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  correlationKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_SA_DETAILS1 = 80;

export function allocIKEEXT_SA_DETAILS1(data?: Partial<IKEEXT_SA_DETAILS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_SA_DETAILS1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.saId !== undefined) view.setBigUint64(0, BigInt(data.saId), true);
  // 0x08: i32
  if (data?.keyModuleType !== undefined) view.setInt32(8, Number(data.keyModuleType), true);
  // 0x0c: i32
  if (data?.ipVersion !== undefined) view.setInt32(12, Number(data.ipVersion), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.ikeTraffic !== undefined) view.setBigUint64(24, data.ikeTraffic === null ? 0n : BigInt(util.toPointer(data.ikeTraffic)), true);
  // 0x20: pointer
  if (data?.ikeProposal !== undefined) view.setBigUint64(32, data.ikeProposal === null ? 0n : BigInt(util.toPointer(data.ikeProposal)), true);
  // 0x28: pointer
  if (data?.cookiePair !== undefined) view.setBigUint64(40, data.cookiePair === null ? 0n : BigInt(util.toPointer(data.cookiePair)), true);
  // 0x30: pointer
  if (data?.ikeCredentials !== undefined) view.setBigUint64(48, data.ikeCredentials === null ? 0n : BigInt(util.toPointer(data.ikeCredentials)), true);
  // 0x38: pointer
  if (data?.ikePolicyKey !== undefined) view.setBigUint64(56, data.ikePolicyKey === null ? 0n : BigInt(util.toPointer(data.ikePolicyKey)), true);
  // 0x40: u64
  if (data?.virtualIfTunnelId !== undefined) view.setBigUint64(64, BigInt(data.virtualIfTunnelId), true);
  // 0x48: pointer
  if (data?.correlationKey !== undefined) view.setBigUint64(72, data.correlationKey === null ? 0n : BigInt(util.toPointer(data.correlationKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL2 (size: 16)
 */
export interface IKEEXT_CREDENTIAL2 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE */
  authenticationMethodType: IKEEXT_AUTHENTICATION_METHOD_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE */
  impersonationType: IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_CREDENTIAL2 = 16;

export function allocIKEEXT_CREDENTIAL2(data?: Partial<IKEEXT_CREDENTIAL2>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CREDENTIAL2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.authenticationMethodType !== undefined) view.setInt32(0, Number(data.authenticationMethodType), true);
  // 0x04: i32
  if (data?.impersonationType !== undefined) view.setInt32(4, Number(data.impersonationType), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL_PAIR2 (size: 16)
 */
export interface IKEEXT_CREDENTIAL_PAIR2 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL2 */
  localCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL2 */
  peerCredentials: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_CREDENTIAL_PAIR2 = 16;

export function allocIKEEXT_CREDENTIAL_PAIR2(data?: Partial<IKEEXT_CREDENTIAL_PAIR2>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CREDENTIAL_PAIR2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.localCredentials !== undefined) view.setBigUint64(0, data.localCredentials === null ? 0n : BigInt(util.toPointer(data.localCredentials)), true);
  // 0x08: pointer
  if (data?.peerCredentials !== undefined) view.setBigUint64(8, data.peerCredentials === null ? 0n : BigInt(util.toPointer(data.peerCredentials)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS2 (size: 16)
 */
export interface IKEEXT_CREDENTIALS2 {
  /** u32 */
  numCredentials: number;
  /** ptr */
  credentials: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIKEEXT_CREDENTIALS2 = 16;

export function allocIKEEXT_CREDENTIALS2(data?: Partial<IKEEXT_CREDENTIALS2>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_CREDENTIALS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numCredentials !== undefined) view.setUint32(0, Number(data.numCredentials), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.credentials !== undefined) view.setBigUint64(8, data.credentials === null ? 0n : BigInt(util.toPointer(data.credentials)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_DETAILS2 (size: 80)
 */
export interface IKEEXT_SA_DETAILS2 {
  /** u64 */
  saId: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE */
  keyModuleType: IKEEXT_KEY_MODULE_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_TRAFFIC0 */
  ikeTraffic: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0 */
  ikeProposal: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_COOKIE_PAIR0 */
  cookiePair: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIALS2 */
  ikeCredentials: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ikePolicyKey: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  virtualIfTunnelId: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  correlationKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_SA_DETAILS2 = 80;

export function allocIKEEXT_SA_DETAILS2(data?: Partial<IKEEXT_SA_DETAILS2>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_SA_DETAILS2);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.saId !== undefined) view.setBigUint64(0, BigInt(data.saId), true);
  // 0x08: i32
  if (data?.keyModuleType !== undefined) view.setInt32(8, Number(data.keyModuleType), true);
  // 0x0c: i32
  if (data?.ipVersion !== undefined) view.setInt32(12, Number(data.ipVersion), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.ikeTraffic !== undefined) view.setBigUint64(24, data.ikeTraffic === null ? 0n : BigInt(util.toPointer(data.ikeTraffic)), true);
  // 0x20: pointer
  if (data?.ikeProposal !== undefined) view.setBigUint64(32, data.ikeProposal === null ? 0n : BigInt(util.toPointer(data.ikeProposal)), true);
  // 0x28: pointer
  if (data?.cookiePair !== undefined) view.setBigUint64(40, data.cookiePair === null ? 0n : BigInt(util.toPointer(data.cookiePair)), true);
  // 0x30: pointer
  if (data?.ikeCredentials !== undefined) view.setBigUint64(48, data.ikeCredentials === null ? 0n : BigInt(util.toPointer(data.ikeCredentials)), true);
  // 0x38: pointer
  if (data?.ikePolicyKey !== undefined) view.setBigUint64(56, data.ikePolicyKey === null ? 0n : BigInt(util.toPointer(data.ikePolicyKey)), true);
  // 0x40: u64
  if (data?.virtualIfTunnelId !== undefined) view.setBigUint64(64, BigInt(data.virtualIfTunnelId), true);
  // 0x48: pointer
  if (data?.correlationKey !== undefined) view.setBigUint64(72, data.correlationKey === null ? 0n : BigInt(util.toPointer(data.correlationKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ENUM_TEMPLATE0 (size: 24)
 */
export interface IKEEXT_SA_ENUM_TEMPLATE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0 */
  localSubNet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0 */
  remoteSubNet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  localMainModeCertHash: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIKEEXT_SA_ENUM_TEMPLATE0 = 24;

export function allocIKEEXT_SA_ENUM_TEMPLATE0(data?: Partial<IKEEXT_SA_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofIKEEXT_SA_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.localSubNet !== undefined) view.setBigUint64(0, data.localSubNet === null ? 0n : BigInt(util.toPointer(data.localSubNet)), true);
  // 0x08: pointer
  if (data?.remoteSubNet !== undefined) view.setBigUint64(8, data.remoteSubNet === null ? 0n : BigInt(util.toPointer(data.remoteSubNet)), true);
  // 0x10: pointer
  if (data?.localMainModeCertHash !== undefined) view.setBigUint64(16, data.localMainModeCertHash === null ? 0n : BigInt(util.toPointer(data.localMainModeCertHash)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_LIFETIME0 (size: 16)
 */
export interface IPSEC_SA_LIFETIME0 {
  /** u32 */
  lifetimeSeconds: number;
  /** u32 */
  lifetimeKilobytes: number;
  /** u32 */
  lifetimePackets: number;
}

export const sizeofIPSEC_SA_LIFETIME0 = 16;

export function allocIPSEC_SA_LIFETIME0(data?: Partial<IPSEC_SA_LIFETIME0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_LIFETIME0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lifetimeSeconds !== undefined) view.setUint32(0, Number(data.lifetimeSeconds), true);
  // 0x04: u32
  if (data?.lifetimeKilobytes !== undefined) view.setUint32(4, Number(data.lifetimeKilobytes), true);
  // 0x08: u32
  if (data?.lifetimePackets !== undefined) view.setUint32(8, Number(data.lifetimePackets), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM_ID0 (size: 8)
 */
export interface IPSEC_AUTH_TRANSFORM_ID0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TYPE */
  authType: IPSEC_AUTH_TYPE;
  /** u8 */
  authConfig: number;
}

export const sizeofIPSEC_AUTH_TRANSFORM_ID0 = 8;

export function allocIPSEC_AUTH_TRANSFORM_ID0(data?: Partial<IPSEC_AUTH_TRANSFORM_ID0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_AUTH_TRANSFORM_ID0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.authType !== undefined) view.setInt32(0, Number(data.authType), true);
  // 0x04: u8
  if (data?.authConfig !== undefined) view.setUint8(4, Number(data.authConfig));
  // 0x05: pad3
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM0 (size: 16)
 */
export interface IPSEC_AUTH_TRANSFORM0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM_ID0 */
  authTransformId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  cryptoModuleId: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_AUTH_TRANSFORM0 = 16;

export function allocIPSEC_AUTH_TRANSFORM0(data?: Partial<IPSEC_AUTH_TRANSFORM0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_AUTH_TRANSFORM0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.authTransformId !== undefined) view.setBigUint64(0, data.authTransformId === null ? 0n : BigInt(util.toPointer(data.authTransformId)), true);
  // 0x08: pointer
  if (data?.cryptoModuleId !== undefined) view.setBigUint64(8, data.cryptoModuleId === null ? 0n : BigInt(util.toPointer(data.cryptoModuleId)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TRANSFORM_ID0 (size: 8)
 */
export interface IPSEC_CIPHER_TRANSFORM_ID0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TYPE */
  cipherType: IPSEC_CIPHER_TYPE;
  /** u8 */
  cipherConfig: number;
}

export const sizeofIPSEC_CIPHER_TRANSFORM_ID0 = 8;

export function allocIPSEC_CIPHER_TRANSFORM_ID0(data?: Partial<IPSEC_CIPHER_TRANSFORM_ID0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_CIPHER_TRANSFORM_ID0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cipherType !== undefined) view.setInt32(0, Number(data.cipherType), true);
  // 0x04: u8
  if (data?.cipherConfig !== undefined) view.setUint8(4, Number(data.cipherConfig));
  // 0x05: pad3
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TRANSFORM0 (size: 16)
 */
export interface IPSEC_CIPHER_TRANSFORM0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TRANSFORM_ID0 */
  cipherTransformId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  cryptoModuleId: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_CIPHER_TRANSFORM0 = 16;

export function allocIPSEC_CIPHER_TRANSFORM0(data?: Partial<IPSEC_CIPHER_TRANSFORM0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_CIPHER_TRANSFORM0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cipherTransformId !== undefined) view.setBigUint64(0, data.cipherTransformId === null ? 0n : BigInt(util.toPointer(data.cipherTransformId)), true);
  // 0x08: pointer
  if (data?.cryptoModuleId !== undefined) view.setBigUint64(8, data.cryptoModuleId === null ? 0n : BigInt(util.toPointer(data.cryptoModuleId)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_AND_CIPHER_TRANSFORM0 (size: 16)
 */
export interface IPSEC_AUTH_AND_CIPHER_TRANSFORM0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM0 */
  authTransform: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TRANSFORM0 */
  cipherTransform: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_AUTH_AND_CIPHER_TRANSFORM0 = 16;

export function allocIPSEC_AUTH_AND_CIPHER_TRANSFORM0(data?: Partial<IPSEC_AUTH_AND_CIPHER_TRANSFORM0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_AUTH_AND_CIPHER_TRANSFORM0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.authTransform !== undefined) view.setBigUint64(0, data.authTransform === null ? 0n : BigInt(util.toPointer(data.authTransform)), true);
  // 0x08: pointer
  if (data?.cipherTransform !== undefined) view.setBigUint64(8, data.cipherTransform === null ? 0n : BigInt(util.toPointer(data.cipherTransform)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_TRANSFORM0 (size: 16)
 */
export interface IPSEC_SA_TRANSFORM0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSFORM_TYPE */
  ipsecTransformType: IPSEC_TRANSFORM_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_SA_TRANSFORM0 = 16;

export function allocIPSEC_SA_TRANSFORM0(data?: Partial<IPSEC_SA_TRANSFORM0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_TRANSFORM0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ipsecTransformType !== undefined) view.setInt32(0, Number(data.ipsecTransformType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_PROPOSAL0 (size: 32)
 */
export interface IPSEC_PROPOSAL0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_LIFETIME0 */
  lifetime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  numSaTransforms: number;
  /** ptr */
  saTransforms: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_PFS_GROUP */
  pfsGroup: IPSEC_PFS_GROUP;
}

export const sizeofIPSEC_PROPOSAL0 = 32;

export function allocIPSEC_PROPOSAL0(data?: Partial<IPSEC_PROPOSAL0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_PROPOSAL0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lifetime !== undefined) view.setBigUint64(0, data.lifetime === null ? 0n : BigInt(util.toPointer(data.lifetime)), true);
  // 0x08: u32
  if (data?.numSaTransforms !== undefined) view.setUint32(8, Number(data.numSaTransforms), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.saTransforms !== undefined) view.setBigUint64(16, data.saTransforms === null ? 0n : BigInt(util.toPointer(data.saTransforms)), true);
  // 0x18: i32
  if (data?.pfsGroup !== undefined) view.setInt32(24, Number(data.pfsGroup), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0 (size: 8)
 */
export interface IPSEC_SA_IDLE_TIMEOUT0 {
  /** u32 */
  idleTimeoutSeconds: number;
  /** u32 */
  idleTimeoutSecondsFailOver: number;
}

export const sizeofIPSEC_SA_IDLE_TIMEOUT0 = 8;

export function allocIPSEC_SA_IDLE_TIMEOUT0(data?: Partial<IPSEC_SA_IDLE_TIMEOUT0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_IDLE_TIMEOUT0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.idleTimeoutSeconds !== undefined) view.setUint32(0, Number(data.idleTimeoutSeconds), true);
  // 0x04: u32
  if (data?.idleTimeoutSecondsFailOver !== undefined) view.setUint32(4, Number(data.idleTimeoutSecondsFailOver), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_SELECTOR0_ (size: 32)
 */
export interface IPSEC_TRAFFIC_SELECTOR0_ {
  /** u8 */
  protocolId: number;
  /** u16 */
  portStart: number;
  /** u16 */
  portEnd: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_TRAFFIC_SELECTOR0_ = 32;

export function allocIPSEC_TRAFFIC_SELECTOR0_(data?: Partial<IPSEC_TRAFFIC_SELECTOR0_>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TRAFFIC_SELECTOR0_);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.protocolId !== undefined) view.setUint8(0, Number(data.protocolId));
  // 0x01: u16
  if (data?.portStart !== undefined) view.setUint16(1, Number(data.portStart), true);
  // 0x03: u16
  if (data?.portEnd !== undefined) view.setUint16(3, Number(data.portEnd), true);
  // 0x05: i32
  if (data?.ipVersion !== undefined) view.setInt32(5, Number(data.ipVersion), true);
  // 0x09: pad7
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_SELECTOR_POLICY0_ (size: 32)
 */
export interface IPSEC_TRAFFIC_SELECTOR_POLICY0_ {
  /** u32 */
  flags: number;
  /** u32 */
  numLocalTrafficSelectors: number;
  /** ptr */
  localTrafficSelectors: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  numRemoteTrafficSelectors: number;
  /** ptr */
  remoteTrafficSelectors: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_TRAFFIC_SELECTOR_POLICY0_ = 32;

export function allocIPSEC_TRAFFIC_SELECTOR_POLICY0_(data?: Partial<IPSEC_TRAFFIC_SELECTOR_POLICY0_>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TRAFFIC_SELECTOR_POLICY0_);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.numLocalTrafficSelectors !== undefined) view.setUint32(4, Number(data.numLocalTrafficSelectors), true);
  // 0x08: pointer
  if (data?.localTrafficSelectors !== undefined) view.setBigUint64(8, data.localTrafficSelectors === null ? 0n : BigInt(util.toPointer(data.localTrafficSelectors)), true);
  // 0x10: u32
  if (data?.numRemoteTrafficSelectors !== undefined) view.setUint32(16, Number(data.numRemoteTrafficSelectors), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.remoteTrafficSelectors !== undefined) view.setBigUint64(24, data.remoteTrafficSelectors === null ? 0n : BigInt(util.toPointer(data.remoteTrafficSelectors)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY0 (size: 40)
 */
export interface IPSEC_TRANSPORT_POLICY0 {
  /** u32 */
  numIpsecProposals: number;
  /** ptr */
  ipsecProposals: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG */
  flags: IPSEC_POLICY_FLAG;
  /** u32 */
  ndAllowClearTimeoutSeconds: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0 */
  saIdleTimeout: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  emPolicy: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_TRANSPORT_POLICY0 = 40;

export function allocIPSEC_TRANSPORT_POLICY0(data?: Partial<IPSEC_TRANSPORT_POLICY0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TRANSPORT_POLICY0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numIpsecProposals !== undefined) view.setUint32(0, Number(data.numIpsecProposals), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ipsecProposals !== undefined) view.setBigUint64(8, data.ipsecProposals === null ? 0n : BigInt(util.toPointer(data.ipsecProposals)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: u32
  if (data?.ndAllowClearTimeoutSeconds !== undefined) view.setUint32(20, Number(data.ndAllowClearTimeoutSeconds), true);
  // 0x18: pointer
  if (data?.saIdleTimeout !== undefined) view.setBigUint64(24, data.saIdleTimeout === null ? 0n : BigInt(util.toPointer(data.saIdleTimeout)), true);
  // 0x20: pointer
  if (data?.emPolicy !== undefined) view.setBigUint64(32, data.emPolicy === null ? 0n : BigInt(util.toPointer(data.emPolicy)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY1 (size: 40)
 */
export interface IPSEC_TRANSPORT_POLICY1 {
  /** u32 */
  numIpsecProposals: number;
  /** ptr */
  ipsecProposals: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG */
  flags: IPSEC_POLICY_FLAG;
  /** u32 */
  ndAllowClearTimeoutSeconds: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0 */
  saIdleTimeout: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  emPolicy: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_TRANSPORT_POLICY1 = 40;

export function allocIPSEC_TRANSPORT_POLICY1(data?: Partial<IPSEC_TRANSPORT_POLICY1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TRANSPORT_POLICY1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numIpsecProposals !== undefined) view.setUint32(0, Number(data.numIpsecProposals), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ipsecProposals !== undefined) view.setBigUint64(8, data.ipsecProposals === null ? 0n : BigInt(util.toPointer(data.ipsecProposals)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: u32
  if (data?.ndAllowClearTimeoutSeconds !== undefined) view.setUint32(20, Number(data.ndAllowClearTimeoutSeconds), true);
  // 0x18: pointer
  if (data?.saIdleTimeout !== undefined) view.setBigUint64(24, data.saIdleTimeout === null ? 0n : BigInt(util.toPointer(data.saIdleTimeout)), true);
  // 0x20: pointer
  if (data?.emPolicy !== undefined) view.setBigUint64(32, data.emPolicy === null ? 0n : BigInt(util.toPointer(data.emPolicy)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSPORT_POLICY2 (size: 40)
 */
export interface IPSEC_TRANSPORT_POLICY2 {
  /** u32 */
  numIpsecProposals: number;
  /** ptr */
  ipsecProposals: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG */
  flags: IPSEC_POLICY_FLAG;
  /** u32 */
  ndAllowClearTimeoutSeconds: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0 */
  saIdleTimeout: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  emPolicy: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_TRANSPORT_POLICY2 = 40;

export function allocIPSEC_TRANSPORT_POLICY2(data?: Partial<IPSEC_TRANSPORT_POLICY2>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TRANSPORT_POLICY2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numIpsecProposals !== undefined) view.setUint32(0, Number(data.numIpsecProposals), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ipsecProposals !== undefined) view.setBigUint64(8, data.ipsecProposals === null ? 0n : BigInt(util.toPointer(data.ipsecProposals)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: u32
  if (data?.ndAllowClearTimeoutSeconds !== undefined) view.setUint32(20, Number(data.ndAllowClearTimeoutSeconds), true);
  // 0x18: pointer
  if (data?.saIdleTimeout !== undefined) view.setBigUint64(24, data.saIdleTimeout === null ? 0n : BigInt(util.toPointer(data.saIdleTimeout)), true);
  // 0x20: pointer
  if (data?.emPolicy !== undefined) view.setBigUint64(32, data.emPolicy === null ? 0n : BigInt(util.toPointer(data.emPolicy)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS0 (size: 24)
 */
export interface IPSEC_TUNNEL_ENDPOINTS0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_TUNNEL_ENDPOINTS0 = 24;

export function allocIPSEC_TUNNEL_ENDPOINTS0(data?: Partial<IPSEC_TUNNEL_ENDPOINTS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TUNNEL_ENDPOINTS0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ipVersion !== undefined) view.setInt32(0, Number(data.ipVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINT0 (size: 16)
 */
export interface IPSEC_TUNNEL_ENDPOINT0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_TUNNEL_ENDPOINT0 = 16;

export function allocIPSEC_TUNNEL_ENDPOINT0(data?: Partial<IPSEC_TUNNEL_ENDPOINT0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TUNNEL_ENDPOINT0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ipVersion !== undefined) view.setInt32(0, Number(data.ipVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS2 (size: 56)
 */
export interface IPSEC_TUNNEL_ENDPOINTS2 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  localIfLuid: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  remoteFqdn: string | null;
  /** u32 */
  numAddresses: number;
  /** ptr */
  remoteAddresses: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_TUNNEL_ENDPOINTS2 = 56;

export function allocIPSEC_TUNNEL_ENDPOINTS2(data?: Partial<IPSEC_TUNNEL_ENDPOINTS2>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TUNNEL_ENDPOINTS2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ipVersion !== undefined) view.setInt32(0, Number(data.ipVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: u64
  if (data?.localIfLuid !== undefined) view.setBigUint64(24, BigInt(data.localIfLuid), true);
  // 0x20: buffer
  if (data?.remoteFqdn !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.remoteFqdn);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.numAddresses !== undefined) view.setUint32(40, Number(data.numAddresses), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.remoteAddresses !== undefined) view.setBigUint64(48, data.remoteAddresses === null ? 0n : BigInt(util.toPointer(data.remoteAddresses)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS1 (size: 32)
 */
export interface IPSEC_TUNNEL_ENDPOINTS1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  localIfLuid: Deno.PointerValue;
}

export const sizeofIPSEC_TUNNEL_ENDPOINTS1 = 32;

export function allocIPSEC_TUNNEL_ENDPOINTS1(data?: Partial<IPSEC_TUNNEL_ENDPOINTS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TUNNEL_ENDPOINTS1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ipVersion !== undefined) view.setInt32(0, Number(data.ipVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: u64
  if (data?.localIfLuid !== undefined) view.setBigUint64(24, BigInt(data.localIfLuid), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY0 (size: 40)
 */
export interface IPSEC_TUNNEL_POLICY0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG */
  flags: IPSEC_POLICY_FLAG;
  /** u32 */
  numIpsecProposals: number;
  /** ptr */
  ipsecProposals: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS0 */
  tunnelEndpoints: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0 */
  saIdleTimeout: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  emPolicy: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_TUNNEL_POLICY0 = 40;

export function allocIPSEC_TUNNEL_POLICY0(data?: Partial<IPSEC_TUNNEL_POLICY0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TUNNEL_POLICY0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.numIpsecProposals !== undefined) view.setUint32(4, Number(data.numIpsecProposals), true);
  // 0x08: pointer
  if (data?.ipsecProposals !== undefined) view.setBigUint64(8, data.ipsecProposals === null ? 0n : BigInt(util.toPointer(data.ipsecProposals)), true);
  // 0x10: pointer
  if (data?.tunnelEndpoints !== undefined) view.setBigUint64(16, data.tunnelEndpoints === null ? 0n : BigInt(util.toPointer(data.tunnelEndpoints)), true);
  // 0x18: pointer
  if (data?.saIdleTimeout !== undefined) view.setBigUint64(24, data.saIdleTimeout === null ? 0n : BigInt(util.toPointer(data.saIdleTimeout)), true);
  // 0x20: pointer
  if (data?.emPolicy !== undefined) view.setBigUint64(32, data.emPolicy === null ? 0n : BigInt(util.toPointer(data.emPolicy)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY1 (size: 40)
 */
export interface IPSEC_TUNNEL_POLICY1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG */
  flags: IPSEC_POLICY_FLAG;
  /** u32 */
  numIpsecProposals: number;
  /** ptr */
  ipsecProposals: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS1 */
  tunnelEndpoints: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0 */
  saIdleTimeout: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  emPolicy: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_TUNNEL_POLICY1 = 40;

export function allocIPSEC_TUNNEL_POLICY1(data?: Partial<IPSEC_TUNNEL_POLICY1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TUNNEL_POLICY1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.numIpsecProposals !== undefined) view.setUint32(4, Number(data.numIpsecProposals), true);
  // 0x08: pointer
  if (data?.ipsecProposals !== undefined) view.setBigUint64(8, data.ipsecProposals === null ? 0n : BigInt(util.toPointer(data.ipsecProposals)), true);
  // 0x10: pointer
  if (data?.tunnelEndpoints !== undefined) view.setBigUint64(16, data.tunnelEndpoints === null ? 0n : BigInt(util.toPointer(data.tunnelEndpoints)), true);
  // 0x18: pointer
  if (data?.saIdleTimeout !== undefined) view.setBigUint64(24, data.saIdleTimeout === null ? 0n : BigInt(util.toPointer(data.saIdleTimeout)), true);
  // 0x20: pointer
  if (data?.emPolicy !== undefined) view.setBigUint64(32, data.emPolicy === null ? 0n : BigInt(util.toPointer(data.emPolicy)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY2 (size: 48)
 */
export interface IPSEC_TUNNEL_POLICY2 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_POLICY_FLAG */
  flags: IPSEC_POLICY_FLAG;
  /** u32 */
  numIpsecProposals: number;
  /** ptr */
  ipsecProposals: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS2 */
  tunnelEndpoints: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0 */
  saIdleTimeout: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  emPolicy: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fwdPathSaLifetime: number;
}

export const sizeofIPSEC_TUNNEL_POLICY2 = 48;

export function allocIPSEC_TUNNEL_POLICY2(data?: Partial<IPSEC_TUNNEL_POLICY2>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TUNNEL_POLICY2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.numIpsecProposals !== undefined) view.setUint32(4, Number(data.numIpsecProposals), true);
  // 0x08: pointer
  if (data?.ipsecProposals !== undefined) view.setBigUint64(8, data.ipsecProposals === null ? 0n : BigInt(util.toPointer(data.ipsecProposals)), true);
  // 0x10: pointer
  if (data?.tunnelEndpoints !== undefined) view.setBigUint64(16, data.tunnelEndpoints === null ? 0n : BigInt(util.toPointer(data.tunnelEndpoints)), true);
  // 0x18: pointer
  if (data?.saIdleTimeout !== undefined) view.setBigUint64(24, data.saIdleTimeout === null ? 0n : BigInt(util.toPointer(data.saIdleTimeout)), true);
  // 0x20: pointer
  if (data?.emPolicy !== undefined) view.setBigUint64(32, data.emPolicy === null ? 0n : BigInt(util.toPointer(data.emPolicy)), true);
  // 0x28: u32
  if (data?.fwdPathSaLifetime !== undefined) view.setUint32(40, Number(data.fwdPathSaLifetime), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_POLICY3_ (size: 64)
 */
export interface IPSEC_TUNNEL_POLICY3_ {
  /** u32 */
  flags: number;
  /** u32 */
  numIpsecProposals: number;
  /** ptr */
  ipsecProposals: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TUNNEL_ENDPOINTS2 */
  tunnelEndpoints: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_IDLE_TIMEOUT0 */
  saIdleTimeout: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  emPolicy: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fwdPathSaLifetime: number;
  /** u32 */
  compartmentId: number;
  /** u32 */
  numTrafficSelectorPolicy: number;
  /** ptr */
  trafficSelectorPolicies: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_TUNNEL_POLICY3_ = 64;

export function allocIPSEC_TUNNEL_POLICY3_(data?: Partial<IPSEC_TUNNEL_POLICY3_>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TUNNEL_POLICY3_);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.numIpsecProposals !== undefined) view.setUint32(4, Number(data.numIpsecProposals), true);
  // 0x08: pointer
  if (data?.ipsecProposals !== undefined) view.setBigUint64(8, data.ipsecProposals === null ? 0n : BigInt(util.toPointer(data.ipsecProposals)), true);
  // 0x10: pointer
  if (data?.tunnelEndpoints !== undefined) view.setBigUint64(16, data.tunnelEndpoints === null ? 0n : BigInt(util.toPointer(data.tunnelEndpoints)), true);
  // 0x18: pointer
  if (data?.saIdleTimeout !== undefined) view.setBigUint64(24, data.saIdleTimeout === null ? 0n : BigInt(util.toPointer(data.saIdleTimeout)), true);
  // 0x20: pointer
  if (data?.emPolicy !== undefined) view.setBigUint64(32, data.emPolicy === null ? 0n : BigInt(util.toPointer(data.emPolicy)), true);
  // 0x28: u32
  if (data?.fwdPathSaLifetime !== undefined) view.setUint32(40, Number(data.fwdPathSaLifetime), true);
  // 0x2c: u32
  if (data?.compartmentId !== undefined) view.setUint32(44, Number(data.compartmentId), true);
  // 0x30: u32
  if (data?.numTrafficSelectorPolicy !== undefined) view.setUint32(48, Number(data.numTrafficSelectorPolicy), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.trafficSelectorPolicies !== undefined) view.setBigUint64(56, data.trafficSelectorPolicies === null ? 0n : BigInt(util.toPointer(data.trafficSelectorPolicies)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYING_POLICY0 (size: 16)
 */
export interface IPSEC_KEYING_POLICY0 {
  /** u32 */
  numKeyMods: number;
  /** ptr */
  keyModKeys: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_KEYING_POLICY0 = 16;

export function allocIPSEC_KEYING_POLICY0(data?: Partial<IPSEC_KEYING_POLICY0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_KEYING_POLICY0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numKeyMods !== undefined) view.setUint32(0, Number(data.numKeyMods), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.keyModKeys !== undefined) view.setBigUint64(8, data.keyModKeys === null ? 0n : BigInt(util.toPointer(data.keyModKeys)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYING_POLICY1 (size: 24)
 */
export interface IPSEC_KEYING_POLICY1 {
  /** u32 */
  numKeyMods: number;
  /** ptr */
  keyModKeys: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  flags: number;
}

export const sizeofIPSEC_KEYING_POLICY1 = 24;

export function allocIPSEC_KEYING_POLICY1(data?: Partial<IPSEC_KEYING_POLICY1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_KEYING_POLICY1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numKeyMods !== undefined) view.setUint32(0, Number(data.numKeyMods), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.keyModKeys !== undefined) view.setBigUint64(8, data.keyModKeys === null ? 0n : BigInt(util.toPointer(data.keyModKeys)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_SA_STATISTICS0 (size: 32)
 */
export interface IPSEC_AGGREGATE_SA_STATISTICS0 {
  /** u32 */
  activeSas: number;
  /** u32 */
  pendingSaNegotiations: number;
  /** u32 */
  totalSasAdded: number;
  /** u32 */
  totalSasDeleted: number;
  /** u32 */
  successfulRekeys: number;
  /** u32 */
  activeTunnels: number;
  /** u32 */
  offloadedSas: number;
}

export const sizeofIPSEC_AGGREGATE_SA_STATISTICS0 = 32;

export function allocIPSEC_AGGREGATE_SA_STATISTICS0(data?: Partial<IPSEC_AGGREGATE_SA_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_AGGREGATE_SA_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.activeSas !== undefined) view.setUint32(0, Number(data.activeSas), true);
  // 0x04: u32
  if (data?.pendingSaNegotiations !== undefined) view.setUint32(4, Number(data.pendingSaNegotiations), true);
  // 0x08: u32
  if (data?.totalSasAdded !== undefined) view.setUint32(8, Number(data.totalSasAdded), true);
  // 0x0c: u32
  if (data?.totalSasDeleted !== undefined) view.setUint32(12, Number(data.totalSasDeleted), true);
  // 0x10: u32
  if (data?.successfulRekeys !== undefined) view.setUint32(16, Number(data.successfulRekeys), true);
  // 0x14: u32
  if (data?.activeTunnels !== undefined) view.setUint32(20, Number(data.activeTunnels), true);
  // 0x18: u32
  if (data?.offloadedSas !== undefined) view.setUint32(24, Number(data.offloadedSas), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_ESP_DROP_PACKET_STATISTICS0 (size: 24)
 */
export interface IPSEC_ESP_DROP_PACKET_STATISTICS0 {
  /** u32 */
  invalidSpisOnInbound: number;
  /** u32 */
  decryptionFailuresOnInbound: number;
  /** u32 */
  authenticationFailuresOnInbound: number;
  /** u32 */
  replayCheckFailuresOnInbound: number;
  /** u32 */
  saNotInitializedOnInbound: number;
}

export const sizeofIPSEC_ESP_DROP_PACKET_STATISTICS0 = 24;

export function allocIPSEC_ESP_DROP_PACKET_STATISTICS0(data?: Partial<IPSEC_ESP_DROP_PACKET_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_ESP_DROP_PACKET_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.invalidSpisOnInbound !== undefined) view.setUint32(0, Number(data.invalidSpisOnInbound), true);
  // 0x04: u32
  if (data?.decryptionFailuresOnInbound !== undefined) view.setUint32(4, Number(data.decryptionFailuresOnInbound), true);
  // 0x08: u32
  if (data?.authenticationFailuresOnInbound !== undefined) view.setUint32(8, Number(data.authenticationFailuresOnInbound), true);
  // 0x0c: u32
  if (data?.replayCheckFailuresOnInbound !== undefined) view.setUint32(12, Number(data.replayCheckFailuresOnInbound), true);
  // 0x10: u32
  if (data?.saNotInitializedOnInbound !== undefined) view.setUint32(16, Number(data.saNotInitializedOnInbound), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AH_DROP_PACKET_STATISTICS0 (size: 16)
 */
export interface IPSEC_AH_DROP_PACKET_STATISTICS0 {
  /** u32 */
  invalidSpisOnInbound: number;
  /** u32 */
  authenticationFailuresOnInbound: number;
  /** u32 */
  replayCheckFailuresOnInbound: number;
  /** u32 */
  saNotInitializedOnInbound: number;
}

export const sizeofIPSEC_AH_DROP_PACKET_STATISTICS0 = 16;

export function allocIPSEC_AH_DROP_PACKET_STATISTICS0(data?: Partial<IPSEC_AH_DROP_PACKET_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_AH_DROP_PACKET_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.invalidSpisOnInbound !== undefined) view.setUint32(0, Number(data.invalidSpisOnInbound), true);
  // 0x04: u32
  if (data?.authenticationFailuresOnInbound !== undefined) view.setUint32(4, Number(data.authenticationFailuresOnInbound), true);
  // 0x08: u32
  if (data?.replayCheckFailuresOnInbound !== undefined) view.setUint32(8, Number(data.replayCheckFailuresOnInbound), true);
  // 0x0c: u32
  if (data?.saNotInitializedOnInbound !== undefined) view.setUint32(12, Number(data.saNotInitializedOnInbound), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0 (size: 40)
 */
export interface IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0 {
  /** u32 */
  invalidSpisOnInbound: number;
  /** u32 */
  decryptionFailuresOnInbound: number;
  /** u32 */
  authenticationFailuresOnInbound: number;
  /** u32 */
  udpEspValidationFailuresOnInbound: number;
  /** u32 */
  replayCheckFailuresOnInbound: number;
  /** u32 */
  invalidClearTextInbound: number;
  /** u32 */
  saNotInitializedOnInbound: number;
  /** u32 */
  receiveOverIncorrectSaInbound: number;
  /** u32 */
  secureReceivesNotMatchingFilters: number;
}

export const sizeofIPSEC_AGGREGATE_DROP_PACKET_STATISTICS0 = 40;

export function allocIPSEC_AGGREGATE_DROP_PACKET_STATISTICS0(data?: Partial<IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_AGGREGATE_DROP_PACKET_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.invalidSpisOnInbound !== undefined) view.setUint32(0, Number(data.invalidSpisOnInbound), true);
  // 0x04: u32
  if (data?.decryptionFailuresOnInbound !== undefined) view.setUint32(4, Number(data.decryptionFailuresOnInbound), true);
  // 0x08: u32
  if (data?.authenticationFailuresOnInbound !== undefined) view.setUint32(8, Number(data.authenticationFailuresOnInbound), true);
  // 0x0c: u32
  if (data?.udpEspValidationFailuresOnInbound !== undefined) view.setUint32(12, Number(data.udpEspValidationFailuresOnInbound), true);
  // 0x10: u32
  if (data?.replayCheckFailuresOnInbound !== undefined) view.setUint32(16, Number(data.replayCheckFailuresOnInbound), true);
  // 0x14: u32
  if (data?.invalidClearTextInbound !== undefined) view.setUint32(20, Number(data.invalidClearTextInbound), true);
  // 0x18: u32
  if (data?.saNotInitializedOnInbound !== undefined) view.setUint32(24, Number(data.saNotInitializedOnInbound), true);
  // 0x1c: u32
  if (data?.receiveOverIncorrectSaInbound !== undefined) view.setUint32(28, Number(data.receiveOverIncorrectSaInbound), true);
  // 0x20: u32
  if (data?.secureReceivesNotMatchingFilters !== undefined) view.setUint32(32, Number(data.secureReceivesNotMatchingFilters), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1 (size: 40)
 */
export interface IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1 {
  /** u32 */
  invalidSpisOnInbound: number;
  /** u32 */
  decryptionFailuresOnInbound: number;
  /** u32 */
  authenticationFailuresOnInbound: number;
  /** u32 */
  udpEspValidationFailuresOnInbound: number;
  /** u32 */
  replayCheckFailuresOnInbound: number;
  /** u32 */
  invalidClearTextInbound: number;
  /** u32 */
  saNotInitializedOnInbound: number;
  /** u32 */
  receiveOverIncorrectSaInbound: number;
  /** u32 */
  secureReceivesNotMatchingFilters: number;
  /** u32 */
  totalDropPacketsInbound: number;
}

export const sizeofIPSEC_AGGREGATE_DROP_PACKET_STATISTICS1 = 40;

export function allocIPSEC_AGGREGATE_DROP_PACKET_STATISTICS1(data?: Partial<IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_AGGREGATE_DROP_PACKET_STATISTICS1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.invalidSpisOnInbound !== undefined) view.setUint32(0, Number(data.invalidSpisOnInbound), true);
  // 0x04: u32
  if (data?.decryptionFailuresOnInbound !== undefined) view.setUint32(4, Number(data.decryptionFailuresOnInbound), true);
  // 0x08: u32
  if (data?.authenticationFailuresOnInbound !== undefined) view.setUint32(8, Number(data.authenticationFailuresOnInbound), true);
  // 0x0c: u32
  if (data?.udpEspValidationFailuresOnInbound !== undefined) view.setUint32(12, Number(data.udpEspValidationFailuresOnInbound), true);
  // 0x10: u32
  if (data?.replayCheckFailuresOnInbound !== undefined) view.setUint32(16, Number(data.replayCheckFailuresOnInbound), true);
  // 0x14: u32
  if (data?.invalidClearTextInbound !== undefined) view.setUint32(20, Number(data.invalidClearTextInbound), true);
  // 0x18: u32
  if (data?.saNotInitializedOnInbound !== undefined) view.setUint32(24, Number(data.saNotInitializedOnInbound), true);
  // 0x1c: u32
  if (data?.receiveOverIncorrectSaInbound !== undefined) view.setUint32(28, Number(data.receiveOverIncorrectSaInbound), true);
  // 0x20: u32
  if (data?.secureReceivesNotMatchingFilters !== undefined) view.setUint32(32, Number(data.secureReceivesNotMatchingFilters), true);
  // 0x24: u32
  if (data?.totalDropPacketsInbound !== undefined) view.setUint32(36, Number(data.totalDropPacketsInbound), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS0 (size: 48)
 */
export interface IPSEC_TRAFFIC_STATISTICS0 {
  /** u64 */
  encryptedByteCount: Deno.PointerValue;
  /** u64 */
  authenticatedAHByteCount: Deno.PointerValue;
  /** u64 */
  authenticatedESPByteCount: Deno.PointerValue;
  /** u64 */
  transportByteCount: Deno.PointerValue;
  /** u64 */
  tunnelByteCount: Deno.PointerValue;
  /** u64 */
  offloadByteCount: Deno.PointerValue;
}

export const sizeofIPSEC_TRAFFIC_STATISTICS0 = 48;

export function allocIPSEC_TRAFFIC_STATISTICS0(data?: Partial<IPSEC_TRAFFIC_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TRAFFIC_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.encryptedByteCount !== undefined) view.setBigUint64(0, BigInt(data.encryptedByteCount), true);
  // 0x08: u64
  if (data?.authenticatedAHByteCount !== undefined) view.setBigUint64(8, BigInt(data.authenticatedAHByteCount), true);
  // 0x10: u64
  if (data?.authenticatedESPByteCount !== undefined) view.setBigUint64(16, BigInt(data.authenticatedESPByteCount), true);
  // 0x18: u64
  if (data?.transportByteCount !== undefined) view.setBigUint64(24, BigInt(data.transportByteCount), true);
  // 0x20: u64
  if (data?.tunnelByteCount !== undefined) view.setBigUint64(32, BigInt(data.tunnelByteCount), true);
  // 0x28: u64
  if (data?.offloadByteCount !== undefined) view.setBigUint64(40, BigInt(data.offloadByteCount), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS1 (size: 56)
 */
export interface IPSEC_TRAFFIC_STATISTICS1 {
  /** u64 */
  encryptedByteCount: Deno.PointerValue;
  /** u64 */
  authenticatedAHByteCount: Deno.PointerValue;
  /** u64 */
  authenticatedESPByteCount: Deno.PointerValue;
  /** u64 */
  transportByteCount: Deno.PointerValue;
  /** u64 */
  tunnelByteCount: Deno.PointerValue;
  /** u64 */
  offloadByteCount: Deno.PointerValue;
  /** u64 */
  totalSuccessfulPackets: Deno.PointerValue;
}

export const sizeofIPSEC_TRAFFIC_STATISTICS1 = 56;

export function allocIPSEC_TRAFFIC_STATISTICS1(data?: Partial<IPSEC_TRAFFIC_STATISTICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TRAFFIC_STATISTICS1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.encryptedByteCount !== undefined) view.setBigUint64(0, BigInt(data.encryptedByteCount), true);
  // 0x08: u64
  if (data?.authenticatedAHByteCount !== undefined) view.setBigUint64(8, BigInt(data.authenticatedAHByteCount), true);
  // 0x10: u64
  if (data?.authenticatedESPByteCount !== undefined) view.setBigUint64(16, BigInt(data.authenticatedESPByteCount), true);
  // 0x18: u64
  if (data?.transportByteCount !== undefined) view.setBigUint64(24, BigInt(data.transportByteCount), true);
  // 0x20: u64
  if (data?.tunnelByteCount !== undefined) view.setBigUint64(32, BigInt(data.tunnelByteCount), true);
  // 0x28: u64
  if (data?.offloadByteCount !== undefined) view.setBigUint64(40, BigInt(data.offloadByteCount), true);
  // 0x30: u64
  if (data?.totalSuccessfulPackets !== undefined) view.setBigUint64(48, BigInt(data.totalSuccessfulPackets), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_STATISTICS0 (size: 48)
 */
export interface IPSEC_STATISTICS0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_SA_STATISTICS0 */
  aggregateSaStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_ESP_DROP_PACKET_STATISTICS0 */
  espDropPacketStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AH_DROP_PACKET_STATISTICS0 */
  ahDropPacketStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0 */
  aggregateDropPacketStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS0 */
  inboundTrafficStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS0 */
  outboundTrafficStatistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_STATISTICS0 = 48;

export function allocIPSEC_STATISTICS0(data?: Partial<IPSEC_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.aggregateSaStatistics !== undefined) view.setBigUint64(0, data.aggregateSaStatistics === null ? 0n : BigInt(util.toPointer(data.aggregateSaStatistics)), true);
  // 0x08: pointer
  if (data?.espDropPacketStatistics !== undefined) view.setBigUint64(8, data.espDropPacketStatistics === null ? 0n : BigInt(util.toPointer(data.espDropPacketStatistics)), true);
  // 0x10: pointer
  if (data?.ahDropPacketStatistics !== undefined) view.setBigUint64(16, data.ahDropPacketStatistics === null ? 0n : BigInt(util.toPointer(data.ahDropPacketStatistics)), true);
  // 0x18: pointer
  if (data?.aggregateDropPacketStatistics !== undefined) view.setBigUint64(24, data.aggregateDropPacketStatistics === null ? 0n : BigInt(util.toPointer(data.aggregateDropPacketStatistics)), true);
  // 0x20: pointer
  if (data?.inboundTrafficStatistics !== undefined) view.setBigUint64(32, data.inboundTrafficStatistics === null ? 0n : BigInt(util.toPointer(data.inboundTrafficStatistics)), true);
  // 0x28: pointer
  if (data?.outboundTrafficStatistics !== undefined) view.setBigUint64(40, data.outboundTrafficStatistics === null ? 0n : BigInt(util.toPointer(data.outboundTrafficStatistics)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_STATISTICS1 (size: 48)
 */
export interface IPSEC_STATISTICS1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_SA_STATISTICS0 */
  aggregateSaStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_ESP_DROP_PACKET_STATISTICS0 */
  espDropPacketStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AH_DROP_PACKET_STATISTICS0 */
  ahDropPacketStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1 */
  aggregateDropPacketStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS1 */
  inboundTrafficStatistics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_STATISTICS1 */
  outboundTrafficStatistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_STATISTICS1 = 48;

export function allocIPSEC_STATISTICS1(data?: Partial<IPSEC_STATISTICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_STATISTICS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.aggregateSaStatistics !== undefined) view.setBigUint64(0, data.aggregateSaStatistics === null ? 0n : BigInt(util.toPointer(data.aggregateSaStatistics)), true);
  // 0x08: pointer
  if (data?.espDropPacketStatistics !== undefined) view.setBigUint64(8, data.espDropPacketStatistics === null ? 0n : BigInt(util.toPointer(data.espDropPacketStatistics)), true);
  // 0x10: pointer
  if (data?.ahDropPacketStatistics !== undefined) view.setBigUint64(16, data.ahDropPacketStatistics === null ? 0n : BigInt(util.toPointer(data.ahDropPacketStatistics)), true);
  // 0x18: pointer
  if (data?.aggregateDropPacketStatistics !== undefined) view.setBigUint64(24, data.aggregateDropPacketStatistics === null ? 0n : BigInt(util.toPointer(data.aggregateDropPacketStatistics)), true);
  // 0x20: pointer
  if (data?.inboundTrafficStatistics !== undefined) view.setBigUint64(32, data.inboundTrafficStatistics === null ? 0n : BigInt(util.toPointer(data.inboundTrafficStatistics)), true);
  // 0x28: pointer
  if (data?.outboundTrafficStatistics !== undefined) view.setBigUint64(40, data.outboundTrafficStatistics === null ? 0n : BigInt(util.toPointer(data.outboundTrafficStatistics)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_AUTH_INFORMATION0 (size: 16)
 */
export interface IPSEC_SA_AUTH_INFORMATION0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_AUTH_TRANSFORM0 */
  authTransform: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  authKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_SA_AUTH_INFORMATION0 = 16;

export function allocIPSEC_SA_AUTH_INFORMATION0(data?: Partial<IPSEC_SA_AUTH_INFORMATION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_AUTH_INFORMATION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.authTransform !== undefined) view.setBigUint64(0, data.authTransform === null ? 0n : BigInt(util.toPointer(data.authTransform)), true);
  // 0x08: pointer
  if (data?.authKey !== undefined) view.setBigUint64(8, data.authKey === null ? 0n : BigInt(util.toPointer(data.authKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CIPHER_INFORMATION0 (size: 16)
 */
export interface IPSEC_SA_CIPHER_INFORMATION0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_CIPHER_TRANSFORM0 */
  cipherTransform: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  cipherKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_SA_CIPHER_INFORMATION0 = 16;

export function allocIPSEC_SA_CIPHER_INFORMATION0(data?: Partial<IPSEC_SA_CIPHER_INFORMATION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_CIPHER_INFORMATION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cipherTransform !== undefined) view.setBigUint64(0, data.cipherTransform === null ? 0n : BigInt(util.toPointer(data.cipherTransform)), true);
  // 0x08: pointer
  if (data?.cipherKey !== undefined) view.setBigUint64(8, data.cipherKey === null ? 0n : BigInt(util.toPointer(data.cipherKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0 (size: 16)
 */
export interface IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CIPHER_INFORMATION0 */
  saCipherInformation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_AUTH_INFORMATION0 */
  saAuthInformation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_SA_AUTH_AND_CIPHER_INFORMATION0 = 16;

export function allocIPSEC_SA_AUTH_AND_CIPHER_INFORMATION0(data?: Partial<IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_AUTH_AND_CIPHER_INFORMATION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.saCipherInformation !== undefined) view.setBigUint64(0, data.saCipherInformation === null ? 0n : BigInt(util.toPointer(data.saCipherInformation)), true);
  // 0x08: pointer
  if (data?.saAuthInformation !== undefined) view.setBigUint64(8, data.saAuthInformation === null ? 0n : BigInt(util.toPointer(data.saAuthInformation)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA0 (size: 16)
 */
export interface IPSEC_SA0 {
  /** u32 */
  spi: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRANSFORM_TYPE */
  saTransformType: IPSEC_TRANSFORM_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_SA0 = 16;

export function allocIPSEC_SA0(data?: Partial<IPSEC_SA0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.spi !== undefined) view.setUint32(0, Number(data.spi), true);
  // 0x04: i32
  if (data?.saTransformType !== undefined) view.setInt32(4, Number(data.saTransformType), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEYMODULE_STATE0 (size: 16)
 */
export interface IPSEC_KEYMODULE_STATE0 {
  /** System.Guid */
  keyModuleKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  stateBlob: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_KEYMODULE_STATE0 = 16;

export function allocIPSEC_KEYMODULE_STATE0(data?: Partial<IPSEC_KEYMODULE_STATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_KEYMODULE_STATE0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.keyModuleKey !== undefined) view.setBigUint64(0, data.keyModuleKey === null ? 0n : BigInt(util.toPointer(data.keyModuleKey)), true);
  // 0x08: pointer
  if (data?.stateBlob !== undefined) view.setBigUint64(8, data.stateBlob === null ? 0n : BigInt(util.toPointer(data.stateBlob)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TOKEN0 (size: 24)
 */
export interface IPSEC_TOKEN0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TOKEN_TYPE */
  type: IPSEC_TOKEN_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TOKEN_PRINCIPAL */
  principal: IPSEC_TOKEN_PRINCIPAL;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TOKEN_MODE */
  mode: IPSEC_TOKEN_MODE;
  /** u64 */
  token: Deno.PointerValue;
}

export const sizeofIPSEC_TOKEN0 = 24;

export function allocIPSEC_TOKEN0(data?: Partial<IPSEC_TOKEN0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TOKEN0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: i32
  if (data?.principal !== undefined) view.setInt32(4, Number(data.principal), true);
  // 0x08: i32
  if (data?.mode !== undefined) view.setInt32(8, Number(data.mode), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.token !== undefined) view.setBigUint64(16, BigInt(data.token), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_ID0 (size: 48)
 */
export interface IPSEC_ID0 {
  /** Windows.Win32.Foundation.PWSTR */
  mmTargetName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  emTargetName: string | null;
  /** u32 */
  numTokens: number;
  /** ptr */
  tokens: Deno.PointerValue | Uint8Array | null;
  /** u64 */
  explicitCredentials: Deno.PointerValue;
  /** u64 */
  logonId: Deno.PointerValue;
}

export const sizeofIPSEC_ID0 = 48;

export function allocIPSEC_ID0(data?: Partial<IPSEC_ID0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_ID0);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.mmTargetName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.mmTargetName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.emTargetName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.emTargetName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.numTokens !== undefined) view.setUint32(16, Number(data.numTokens), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.tokens !== undefined) view.setBigUint64(24, data.tokens === null ? 0n : BigInt(util.toPointer(data.tokens)), true);
  // 0x20: u64
  if (data?.explicitCredentials !== undefined) view.setBigUint64(32, BigInt(data.explicitCredentials), true);
  // 0x28: u64
  if (data?.logonId !== undefined) view.setBigUint64(40, BigInt(data.logonId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE0 (size: 96)
 */
export interface IPSEC_SA_BUNDLE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE_FLAGS */
  flags: IPSEC_SA_BUNDLE_FLAGS;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_LIFETIME0 */
  lifetime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  idleTimeoutSeconds: number;
  /** u32 */
  ndAllowClearTimeoutSeconds: number;
  /** ptr */
  ipsecId: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  napContext: number;
  /** u32 */
  qmSaId: number;
  /** u32 */
  numSAs: number;
  /** ptr */
  saList: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  keyModuleState: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  mmSaId: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_PFS_GROUP */
  pfsGroup: IPSEC_PFS_GROUP;
}

export const sizeofIPSEC_SA_BUNDLE0 = 96;

export function allocIPSEC_SA_BUNDLE0(data?: Partial<IPSEC_SA_BUNDLE0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_BUNDLE0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lifetime !== undefined) view.setBigUint64(8, data.lifetime === null ? 0n : BigInt(util.toPointer(data.lifetime)), true);
  // 0x10: u32
  if (data?.idleTimeoutSeconds !== undefined) view.setUint32(16, Number(data.idleTimeoutSeconds), true);
  // 0x14: u32
  if (data?.ndAllowClearTimeoutSeconds !== undefined) view.setUint32(20, Number(data.ndAllowClearTimeoutSeconds), true);
  // 0x18: pointer
  if (data?.ipsecId !== undefined) view.setBigUint64(24, data.ipsecId === null ? 0n : BigInt(util.toPointer(data.ipsecId)), true);
  // 0x20: u32
  if (data?.napContext !== undefined) view.setUint32(32, Number(data.napContext), true);
  // 0x24: u32
  if (data?.qmSaId !== undefined) view.setUint32(36, Number(data.qmSaId), true);
  // 0x28: u32
  if (data?.numSAs !== undefined) view.setUint32(40, Number(data.numSAs), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.saList !== undefined) view.setBigUint64(48, data.saList === null ? 0n : BigInt(util.toPointer(data.saList)), true);
  // 0x38: pointer
  if (data?.keyModuleState !== undefined) view.setBigUint64(56, data.keyModuleState === null ? 0n : BigInt(util.toPointer(data.keyModuleState)), true);
  // 0x40: i32
  if (data?.ipVersion !== undefined) view.setInt32(64, Number(data.ipVersion), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(72, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x50: u64
  if (data?.mmSaId !== undefined) view.setBigUint64(80, BigInt(data.mmSaId), true);
  // 0x58: i32
  if (data?.pfsGroup !== undefined) view.setInt32(88, Number(data.pfsGroup), true);
  // 0x5c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE1 (size: 112)
 */
export interface IPSEC_SA_BUNDLE1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE_FLAGS */
  flags: IPSEC_SA_BUNDLE_FLAGS;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_LIFETIME0 */
  lifetime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  idleTimeoutSeconds: number;
  /** u32 */
  ndAllowClearTimeoutSeconds: number;
  /** ptr */
  ipsecId: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  napContext: number;
  /** u32 */
  qmSaId: number;
  /** u32 */
  numSAs: number;
  /** ptr */
  saList: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  keyModuleState: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  mmSaId: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_PFS_GROUP */
  pfsGroup: IPSEC_PFS_GROUP;
  /** System.Guid */
  saLookupContext: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  qmFilterId: Deno.PointerValue;
}

export const sizeofIPSEC_SA_BUNDLE1 = 112;

export function allocIPSEC_SA_BUNDLE1(data?: Partial<IPSEC_SA_BUNDLE1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_BUNDLE1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lifetime !== undefined) view.setBigUint64(8, data.lifetime === null ? 0n : BigInt(util.toPointer(data.lifetime)), true);
  // 0x10: u32
  if (data?.idleTimeoutSeconds !== undefined) view.setUint32(16, Number(data.idleTimeoutSeconds), true);
  // 0x14: u32
  if (data?.ndAllowClearTimeoutSeconds !== undefined) view.setUint32(20, Number(data.ndAllowClearTimeoutSeconds), true);
  // 0x18: pointer
  if (data?.ipsecId !== undefined) view.setBigUint64(24, data.ipsecId === null ? 0n : BigInt(util.toPointer(data.ipsecId)), true);
  // 0x20: u32
  if (data?.napContext !== undefined) view.setUint32(32, Number(data.napContext), true);
  // 0x24: u32
  if (data?.qmSaId !== undefined) view.setUint32(36, Number(data.qmSaId), true);
  // 0x28: u32
  if (data?.numSAs !== undefined) view.setUint32(40, Number(data.numSAs), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.saList !== undefined) view.setBigUint64(48, data.saList === null ? 0n : BigInt(util.toPointer(data.saList)), true);
  // 0x38: pointer
  if (data?.keyModuleState !== undefined) view.setBigUint64(56, data.keyModuleState === null ? 0n : BigInt(util.toPointer(data.keyModuleState)), true);
  // 0x40: i32
  if (data?.ipVersion !== undefined) view.setInt32(64, Number(data.ipVersion), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(72, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x50: u64
  if (data?.mmSaId !== undefined) view.setBigUint64(80, BigInt(data.mmSaId), true);
  // 0x58: i32
  if (data?.pfsGroup !== undefined) view.setInt32(88, Number(data.pfsGroup), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.saLookupContext !== undefined) view.setBigUint64(96, data.saLookupContext === null ? 0n : BigInt(util.toPointer(data.saLookupContext)), true);
  // 0x68: u64
  if (data?.qmFilterId !== undefined) view.setBigUint64(104, BigInt(data.qmFilterId), true);
  return buf;
}

/**
 * _Anonymous3_e__Union (size: 16)
 */
export interface _Anonymous3_e__Union {
  /** u32 */
  dwAlphaDestConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaDest: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous3_e__Union = 16;

export function alloc_Anonymous3_e__Union(data?: Partial<_Anonymous3_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous3_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaDestConst !== undefined) view.setUint32(0, Number(data.dwAlphaDestConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaDest !== undefined) view.setBigUint64(8, data.lpDDSAlphaDest === null ? 0n : BigInt(util.toPointer(data.lpDDSAlphaDest)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC0 (size: 48)
 */
export interface IPSEC_TRAFFIC0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE */
  trafficType: IPSEC_TRAFFIC_TYPE;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  remotePort: number;
}

export const sizeofIPSEC_TRAFFIC0 = 48;

export function allocIPSEC_TRAFFIC0(data?: Partial<IPSEC_TRAFFIC0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TRAFFIC0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ipVersion !== undefined) view.setInt32(0, Number(data.ipVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: i32
  if (data?.trafficType !== undefined) view.setInt32(24, Number(data.trafficType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(32, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x28: u16
  if (data?.remotePort !== undefined) view.setUint16(40, Number(data.remotePort), true);
  // 0x2a: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC1 (size: 64)
 */
export interface IPSEC_TRAFFIC1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE */
  trafficType: IPSEC_TRAFFIC_TYPE;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  remotePort: number;
  /** u16 */
  localPort: number;
  /** u8 */
  ipProtocol: number;
  /** u64 */
  localIfLuid: Deno.PointerValue;
  /** u32 */
  realIfProfileId: number;
}

export const sizeofIPSEC_TRAFFIC1 = 64;

export function allocIPSEC_TRAFFIC1(data?: Partial<IPSEC_TRAFFIC1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_TRAFFIC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ipVersion !== undefined) view.setInt32(0, Number(data.ipVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: i32
  if (data?.trafficType !== undefined) view.setInt32(24, Number(data.trafficType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(32, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x28: u16
  if (data?.remotePort !== undefined) view.setUint16(40, Number(data.remotePort), true);
  // 0x2a: u16
  if (data?.localPort !== undefined) view.setUint16(42, Number(data.localPort), true);
  // 0x2c: u8
  if (data?.ipProtocol !== undefined) view.setUint8(44, Number(data.ipProtocol));
  // 0x2d: pad3
  // 0x30: u64
  if (data?.localIfLuid !== undefined) view.setBigUint64(48, BigInt(data.localIfLuid), true);
  // 0x38: u32
  if (data?.realIfProfileId !== undefined) view.setUint32(56, Number(data.realIfProfileId), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_V4_UDP_ENCAPSULATION0 (size: 8)
 */
export interface IPSEC_V4_UDP_ENCAPSULATION0 {
  /** u16 */
  localUdpEncapPort: number;
  /** u16 */
  remoteUdpEncapPort: number;
}

export const sizeofIPSEC_V4_UDP_ENCAPSULATION0 = 8;

export function allocIPSEC_V4_UDP_ENCAPSULATION0(data?: Partial<IPSEC_V4_UDP_ENCAPSULATION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_V4_UDP_ENCAPSULATION0);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.localUdpEncapPort !== undefined) view.setUint16(0, Number(data.localUdpEncapPort), true);
  // 0x02: u16
  if (data?.remoteUdpEncapPort !== undefined) view.setUint16(2, Number(data.remoteUdpEncapPort), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_GETSPI0 (size: 32)
 */
export interface IPSEC_GETSPI0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC0 */
  inboundIpsecTraffic: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  rngCryptoModuleID: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_GETSPI0 = 32;

export function allocIPSEC_GETSPI0(data?: Partial<IPSEC_GETSPI0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_GETSPI0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.inboundIpsecTraffic !== undefined) view.setBigUint64(0, data.inboundIpsecTraffic === null ? 0n : BigInt(util.toPointer(data.inboundIpsecTraffic)), true);
  // 0x08: i32
  if (data?.ipVersion !== undefined) view.setInt32(8, Number(data.ipVersion), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.rngCryptoModuleID !== undefined) view.setBigUint64(24, data.rngCryptoModuleID === null ? 0n : BigInt(util.toPointer(data.rngCryptoModuleID)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_GETSPI1 (size: 32)
 */
export interface IPSEC_GETSPI1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC1 */
  inboundIpsecTraffic: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  rngCryptoModuleID: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_GETSPI1 = 32;

export function allocIPSEC_GETSPI1(data?: Partial<IPSEC_GETSPI1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_GETSPI1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.inboundIpsecTraffic !== undefined) view.setBigUint64(0, data.inboundIpsecTraffic === null ? 0n : BigInt(util.toPointer(data.inboundIpsecTraffic)), true);
  // 0x08: i32
  if (data?.ipVersion !== undefined) view.setInt32(8, Number(data.ipVersion), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.rngCryptoModuleID !== undefined) view.setBigUint64(24, data.rngCryptoModuleID === null ? 0n : BigInt(util.toPointer(data.rngCryptoModuleID)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS0 (size: 40)
 */
export interface IPSEC_SA_DETAILS0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_DIRECTION */
  saDirection: FWP_DIRECTION;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC0 */
  traffic: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE0 */
  saBundle: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  transportFilter: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_SA_DETAILS0 = 40;

export function allocIPSEC_SA_DETAILS0(data?: Partial<IPSEC_SA_DETAILS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_DETAILS0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ipVersion !== undefined) view.setInt32(0, Number(data.ipVersion), true);
  // 0x04: i32
  if (data?.saDirection !== undefined) view.setInt32(4, Number(data.saDirection), true);
  // 0x08: pointer
  if (data?.traffic !== undefined) view.setBigUint64(8, data.traffic === null ? 0n : BigInt(util.toPointer(data.traffic)), true);
  // 0x10: pointer
  if (data?.saBundle !== undefined) view.setBigUint64(16, data.saBundle === null ? 0n : BigInt(util.toPointer(data.saBundle)), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: pointer
  if (data?.transportFilter !== undefined) view.setBigUint64(32, data.transportFilter === null ? 0n : BigInt(util.toPointer(data.transportFilter)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_DETAILS1 (size: 48)
 */
export interface IPSEC_SA_DETAILS1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_DIRECTION */
  saDirection: FWP_DIRECTION;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC1 */
  traffic: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_BUNDLE1 */
  saBundle: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  transportFilter: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_VIRTUAL_IF_TUNNEL_INFO0 */
  virtualIfTunnelInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_SA_DETAILS1 = 48;

export function allocIPSEC_SA_DETAILS1(data?: Partial<IPSEC_SA_DETAILS1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_DETAILS1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ipVersion !== undefined) view.setInt32(0, Number(data.ipVersion), true);
  // 0x04: i32
  if (data?.saDirection !== undefined) view.setInt32(4, Number(data.saDirection), true);
  // 0x08: pointer
  if (data?.traffic !== undefined) view.setBigUint64(8, data.traffic === null ? 0n : BigInt(util.toPointer(data.traffic)), true);
  // 0x10: pointer
  if (data?.saBundle !== undefined) view.setBigUint64(16, data.saBundle === null ? 0n : BigInt(util.toPointer(data.saBundle)), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: pointer
  if (data?.transportFilter !== undefined) view.setBigUint64(32, data.transportFilter === null ? 0n : BigInt(util.toPointer(data.transportFilter)), true);
  // 0x28: pointer
  if (data?.virtualIfTunnelInfo !== undefined) view.setBigUint64(40, data.virtualIfTunnelInfo === null ? 0n : BigInt(util.toPointer(data.virtualIfTunnelInfo)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT0 (size: 24)
 */
export interface IPSEC_SA_CONTEXT0 {
  /** u64 */
  saContextId: Deno.PointerValue;
  /** ptr */
  inboundSa: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  outboundSa: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_SA_CONTEXT0 = 24;

export function allocIPSEC_SA_CONTEXT0(data?: Partial<IPSEC_SA_CONTEXT0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_CONTEXT0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.saContextId !== undefined) view.setBigUint64(0, BigInt(data.saContextId), true);
  // 0x08: pointer
  if (data?.inboundSa !== undefined) view.setBigUint64(8, data.inboundSa === null ? 0n : BigInt(util.toPointer(data.inboundSa)), true);
  // 0x10: pointer
  if (data?.outboundSa !== undefined) view.setBigUint64(16, data.outboundSa === null ? 0n : BigInt(util.toPointer(data.outboundSa)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT1 (size: 24)
 */
export interface IPSEC_SA_CONTEXT1 {
  /** u64 */
  saContextId: Deno.PointerValue;
  /** ptr */
  inboundSa: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  outboundSa: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_SA_CONTEXT1 = 24;

export function allocIPSEC_SA_CONTEXT1(data?: Partial<IPSEC_SA_CONTEXT1>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_CONTEXT1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.saContextId !== undefined) view.setBigUint64(0, BigInt(data.saContextId), true);
  // 0x08: pointer
  if (data?.inboundSa !== undefined) view.setBigUint64(8, data.inboundSa === null ? 0n : BigInt(util.toPointer(data.inboundSa)), true);
  // 0x10: pointer
  if (data?.outboundSa !== undefined) view.setBigUint64(16, data.outboundSa === null ? 0n : BigInt(util.toPointer(data.outboundSa)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_ENUM_TEMPLATE0 (size: 16)
 */
export interface IPSEC_SA_CONTEXT_ENUM_TEMPLATE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0 */
  localSubNet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0 */
  remoteSubNet: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_SA_CONTEXT_ENUM_TEMPLATE0 = 16;

export function allocIPSEC_SA_CONTEXT_ENUM_TEMPLATE0(data?: Partial<IPSEC_SA_CONTEXT_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_CONTEXT_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.localSubNet !== undefined) view.setBigUint64(0, data.localSubNet === null ? 0n : BigInt(util.toPointer(data.localSubNet)), true);
  // 0x08: pointer
  if (data?.remoteSubNet !== undefined) view.setBigUint64(8, data.remoteSubNet === null ? 0n : BigInt(util.toPointer(data.remoteSubNet)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_ENUM_TEMPLATE0 (size: 8)
 */
export interface IPSEC_SA_ENUM_TEMPLATE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_DIRECTION */
  saDirection: FWP_DIRECTION;
}

export const sizeofIPSEC_SA_ENUM_TEMPLATE0 = 8;

export function allocIPSEC_SA_ENUM_TEMPLATE0(data?: Partial<IPSEC_SA_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.saDirection !== undefined) view.setInt32(0, Number(data.saDirection), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_SUBSCRIPTION0 (size: 24)
 */
export interface IPSEC_SA_CONTEXT_SUBSCRIPTION0 {
  /** ptr */
  enumTemplate: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  flags: number;
  /** System.Guid */
  sessionKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_SA_CONTEXT_SUBSCRIPTION0 = 24;

export function allocIPSEC_SA_CONTEXT_SUBSCRIPTION0(data?: Partial<IPSEC_SA_CONTEXT_SUBSCRIPTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_CONTEXT_SUBSCRIPTION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.enumTemplate !== undefined) view.setBigUint64(0, data.enumTemplate === null ? 0n : BigInt(util.toPointer(data.enumTemplate)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.sessionKey !== undefined) view.setBigUint64(16, data.sessionKey === null ? 0n : BigInt(util.toPointer(data.sessionKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_CHANGE0 (size: 16)
 */
export interface IPSEC_SA_CONTEXT_CHANGE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_EVENT_TYPE0 */
  changeType: IPSEC_SA_CONTEXT_EVENT_TYPE0;
  /** u64 */
  saContextId: Deno.PointerValue;
}

export const sizeofIPSEC_SA_CONTEXT_CHANGE0 = 16;

export function allocIPSEC_SA_CONTEXT_CHANGE0(data?: Partial<IPSEC_SA_CONTEXT_CHANGE0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_SA_CONTEXT_CHANGE0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.changeType !== undefined) view.setInt32(0, Number(data.changeType), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.saContextId !== undefined) view.setBigUint64(8, BigInt(data.saContextId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_ADDRESS_INFO0 (size: 32)
 */
export interface IPSEC_ADDRESS_INFO0 {
  /** u32 */
  numV4Addresses: number;
  /** ptr */
  v4Addresses: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  numV6Addresses: number;
  /** ptr */
  v6Addresses: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIPSEC_ADDRESS_INFO0 = 32;

export function allocIPSEC_ADDRESS_INFO0(data?: Partial<IPSEC_ADDRESS_INFO0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_ADDRESS_INFO0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numV4Addresses !== undefined) view.setUint32(0, Number(data.numV4Addresses), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.v4Addresses !== undefined) view.setBigUint64(8, data.v4Addresses === null ? 0n : BigInt(util.toPointer(data.v4Addresses)), true);
  // 0x10: u32
  if (data?.numV6Addresses !== undefined) view.setUint32(16, Number(data.numV6Addresses), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.v6Addresses !== undefined) view.setBigUint64(24, data.v6Addresses === null ? 0n : BigInt(util.toPointer(data.v6Addresses)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_OPTIONS0 (size: 96)
 */
export interface IPSEC_DOSP_OPTIONS0 {
  /** u32 */
  stateIdleTimeoutSeconds: number;
  /** u32 */
  perIPRateLimitQueueIdleTimeoutSeconds: number;
  /** u8 */
  ipV6IPsecUnauthDscp: number;
  /** u32 */
  ipV6IPsecUnauthRateLimitBytesPerSec: number;
  /** u32 */
  ipV6IPsecUnauthPerIPRateLimitBytesPerSec: number;
  /** u8 */
  ipV6IPsecAuthDscp: number;
  /** u32 */
  ipV6IPsecAuthRateLimitBytesPerSec: number;
  /** u8 */
  icmpV6Dscp: number;
  /** u32 */
  icmpV6RateLimitBytesPerSec: number;
  /** u8 */
  ipV6FilterExemptDscp: number;
  /** u32 */
  ipV6FilterExemptRateLimitBytesPerSec: number;
  /** u8 */
  defBlockExemptDscp: number;
  /** u32 */
  defBlockExemptRateLimitBytesPerSec: number;
  /** u32 */
  maxStateEntries: number;
  /** u32 */
  maxPerIPRateLimitQueues: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_FLAGS */
  flags: IPSEC_DOSP_FLAGS;
  /** u32 */
  numPublicIFLuids: number;
  /** ptr */
  publicIFLuids: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  numInternalIFLuids: number;
  /** ptr */
  internalIFLuids: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_V6_ADDR_AND_MASK */
  publicV6AddrMask: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_V6_ADDR_AND_MASK */
  internalV6AddrMask: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_DOSP_OPTIONS0 = 96;

export function allocIPSEC_DOSP_OPTIONS0(data?: Partial<IPSEC_DOSP_OPTIONS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_DOSP_OPTIONS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.stateIdleTimeoutSeconds !== undefined) view.setUint32(0, Number(data.stateIdleTimeoutSeconds), true);
  // 0x04: u32
  if (data?.perIPRateLimitQueueIdleTimeoutSeconds !== undefined) view.setUint32(4, Number(data.perIPRateLimitQueueIdleTimeoutSeconds), true);
  // 0x08: u8
  if (data?.ipV6IPsecUnauthDscp !== undefined) view.setUint8(8, Number(data.ipV6IPsecUnauthDscp));
  // 0x09: u32
  if (data?.ipV6IPsecUnauthRateLimitBytesPerSec !== undefined) view.setUint32(9, Number(data.ipV6IPsecUnauthRateLimitBytesPerSec), true);
  // 0x0d: u32
  if (data?.ipV6IPsecUnauthPerIPRateLimitBytesPerSec !== undefined) view.setUint32(13, Number(data.ipV6IPsecUnauthPerIPRateLimitBytesPerSec), true);
  // 0x11: u8
  if (data?.ipV6IPsecAuthDscp !== undefined) view.setUint8(17, Number(data.ipV6IPsecAuthDscp));
  // 0x12: u32
  if (data?.ipV6IPsecAuthRateLimitBytesPerSec !== undefined) view.setUint32(18, Number(data.ipV6IPsecAuthRateLimitBytesPerSec), true);
  // 0x16: u8
  if (data?.icmpV6Dscp !== undefined) view.setUint8(22, Number(data.icmpV6Dscp));
  // 0x17: u32
  if (data?.icmpV6RateLimitBytesPerSec !== undefined) view.setUint32(23, Number(data.icmpV6RateLimitBytesPerSec), true);
  // 0x1b: u8
  if (data?.ipV6FilterExemptDscp !== undefined) view.setUint8(27, Number(data.ipV6FilterExemptDscp));
  // 0x1c: u32
  if (data?.ipV6FilterExemptRateLimitBytesPerSec !== undefined) view.setUint32(28, Number(data.ipV6FilterExemptRateLimitBytesPerSec), true);
  // 0x20: u8
  if (data?.defBlockExemptDscp !== undefined) view.setUint8(32, Number(data.defBlockExemptDscp));
  // 0x21: u32
  if (data?.defBlockExemptRateLimitBytesPerSec !== undefined) view.setUint32(33, Number(data.defBlockExemptRateLimitBytesPerSec), true);
  // 0x25: u32
  if (data?.maxStateEntries !== undefined) view.setUint32(37, Number(data.maxStateEntries), true);
  // 0x29: u32
  if (data?.maxPerIPRateLimitQueues !== undefined) view.setUint32(41, Number(data.maxPerIPRateLimitQueues), true);
  // 0x2d: u32
  if (data?.flags !== undefined) view.setUint32(45, Number(data.flags), true);
  // 0x31: u32
  if (data?.numPublicIFLuids !== undefined) view.setUint32(49, Number(data.numPublicIFLuids), true);
  // 0x35: pad3
  // 0x38: pointer
  if (data?.publicIFLuids !== undefined) view.setBigUint64(56, data.publicIFLuids === null ? 0n : BigInt(util.toPointer(data.publicIFLuids)), true);
  // 0x40: u32
  if (data?.numInternalIFLuids !== undefined) view.setUint32(64, Number(data.numInternalIFLuids), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.internalIFLuids !== undefined) view.setBigUint64(72, data.internalIFLuids === null ? 0n : BigInt(util.toPointer(data.internalIFLuids)), true);
  // 0x50: pointer
  if (data?.publicV6AddrMask !== undefined) view.setBigUint64(80, data.publicV6AddrMask === null ? 0n : BigInt(util.toPointer(data.publicV6AddrMask)), true);
  // 0x58: pointer
  if (data?.internalV6AddrMask !== undefined) view.setBigUint64(88, data.internalV6AddrMask === null ? 0n : BigInt(util.toPointer(data.internalV6AddrMask)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_STATISTICS0 (size: 144)
 */
export interface IPSEC_DOSP_STATISTICS0 {
  /** u64 */
  totalStateEntriesCreated: Deno.PointerValue;
  /** u64 */
  currentStateEntries: Deno.PointerValue;
  /** u64 */
  totalInboundAllowedIPv6IPsecUnauthPkts: Deno.PointerValue;
  /** u64 */
  totalInboundRatelimitDiscardedIPv6IPsecUnauthPkts: Deno.PointerValue;
  /** u64 */
  totalInboundPerIPRatelimitDiscardedIPv6IPsecUnauthPkts: Deno.PointerValue;
  /** u64 */
  totalInboundOtherDiscardedIPv6IPsecUnauthPkts: Deno.PointerValue;
  /** u64 */
  totalInboundAllowedIPv6IPsecAuthPkts: Deno.PointerValue;
  /** u64 */
  totalInboundRatelimitDiscardedIPv6IPsecAuthPkts: Deno.PointerValue;
  /** u64 */
  totalInboundOtherDiscardedIPv6IPsecAuthPkts: Deno.PointerValue;
  /** u64 */
  totalInboundAllowedICMPv6Pkts: Deno.PointerValue;
  /** u64 */
  totalInboundRatelimitDiscardedICMPv6Pkts: Deno.PointerValue;
  /** u64 */
  totalInboundAllowedIPv6FilterExemptPkts: Deno.PointerValue;
  /** u64 */
  totalInboundRatelimitDiscardedIPv6FilterExemptPkts: Deno.PointerValue;
  /** u64 */
  totalInboundDiscardedIPv6FilterBlockPkts: Deno.PointerValue;
  /** u64 */
  totalInboundAllowedDefBlockExemptPkts: Deno.PointerValue;
  /** u64 */
  totalInboundRatelimitDiscardedDefBlockExemptPkts: Deno.PointerValue;
  /** u64 */
  totalInboundDiscardedDefBlockPkts: Deno.PointerValue;
  /** u64 */
  currentInboundIPv6IPsecUnauthPerIPRateLimitQueues: Deno.PointerValue;
}

export const sizeofIPSEC_DOSP_STATISTICS0 = 144;

export function allocIPSEC_DOSP_STATISTICS0(data?: Partial<IPSEC_DOSP_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_DOSP_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.totalStateEntriesCreated !== undefined) view.setBigUint64(0, BigInt(data.totalStateEntriesCreated), true);
  // 0x08: u64
  if (data?.currentStateEntries !== undefined) view.setBigUint64(8, BigInt(data.currentStateEntries), true);
  // 0x10: u64
  if (data?.totalInboundAllowedIPv6IPsecUnauthPkts !== undefined) view.setBigUint64(16, BigInt(data.totalInboundAllowedIPv6IPsecUnauthPkts), true);
  // 0x18: u64
  if (data?.totalInboundRatelimitDiscardedIPv6IPsecUnauthPkts !== undefined) view.setBigUint64(24, BigInt(data.totalInboundRatelimitDiscardedIPv6IPsecUnauthPkts), true);
  // 0x20: u64
  if (data?.totalInboundPerIPRatelimitDiscardedIPv6IPsecUnauthPkts !== undefined) view.setBigUint64(32, BigInt(data.totalInboundPerIPRatelimitDiscardedIPv6IPsecUnauthPkts), true);
  // 0x28: u64
  if (data?.totalInboundOtherDiscardedIPv6IPsecUnauthPkts !== undefined) view.setBigUint64(40, BigInt(data.totalInboundOtherDiscardedIPv6IPsecUnauthPkts), true);
  // 0x30: u64
  if (data?.totalInboundAllowedIPv6IPsecAuthPkts !== undefined) view.setBigUint64(48, BigInt(data.totalInboundAllowedIPv6IPsecAuthPkts), true);
  // 0x38: u64
  if (data?.totalInboundRatelimitDiscardedIPv6IPsecAuthPkts !== undefined) view.setBigUint64(56, BigInt(data.totalInboundRatelimitDiscardedIPv6IPsecAuthPkts), true);
  // 0x40: u64
  if (data?.totalInboundOtherDiscardedIPv6IPsecAuthPkts !== undefined) view.setBigUint64(64, BigInt(data.totalInboundOtherDiscardedIPv6IPsecAuthPkts), true);
  // 0x48: u64
  if (data?.totalInboundAllowedICMPv6Pkts !== undefined) view.setBigUint64(72, BigInt(data.totalInboundAllowedICMPv6Pkts), true);
  // 0x50: u64
  if (data?.totalInboundRatelimitDiscardedICMPv6Pkts !== undefined) view.setBigUint64(80, BigInt(data.totalInboundRatelimitDiscardedICMPv6Pkts), true);
  // 0x58: u64
  if (data?.totalInboundAllowedIPv6FilterExemptPkts !== undefined) view.setBigUint64(88, BigInt(data.totalInboundAllowedIPv6FilterExemptPkts), true);
  // 0x60: u64
  if (data?.totalInboundRatelimitDiscardedIPv6FilterExemptPkts !== undefined) view.setBigUint64(96, BigInt(data.totalInboundRatelimitDiscardedIPv6FilterExemptPkts), true);
  // 0x68: u64
  if (data?.totalInboundDiscardedIPv6FilterBlockPkts !== undefined) view.setBigUint64(104, BigInt(data.totalInboundDiscardedIPv6FilterBlockPkts), true);
  // 0x70: u64
  if (data?.totalInboundAllowedDefBlockExemptPkts !== undefined) view.setBigUint64(112, BigInt(data.totalInboundAllowedDefBlockExemptPkts), true);
  // 0x78: u64
  if (data?.totalInboundRatelimitDiscardedDefBlockExemptPkts !== undefined) view.setBigUint64(120, BigInt(data.totalInboundRatelimitDiscardedDefBlockExemptPkts), true);
  // 0x80: u64
  if (data?.totalInboundDiscardedDefBlockPkts !== undefined) view.setBigUint64(128, BigInt(data.totalInboundDiscardedDefBlockPkts), true);
  // 0x88: u64
  if (data?.currentInboundIPv6IPsecUnauthPerIPRateLimitQueues !== undefined) view.setBigUint64(136, BigInt(data.currentInboundIPv6IPsecUnauthPerIPRateLimitQueues), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_STATE0 (size: 40)
 */
export interface IPSEC_DOSP_STATE0 {
  /** array */
  publicHostV6Addr: Deno.PointerValue | null;
  /** array */
  internalHostV6Addr: Deno.PointerValue | null;
  /** u64 */
  totalInboundIPv6IPsecAuthPackets: Deno.PointerValue;
  /** u64 */
  totalOutboundIPv6IPsecAuthPackets: Deno.PointerValue;
  /** u32 */
  durationSecs: number;
}

export const sizeofIPSEC_DOSP_STATE0 = 40;

export function allocIPSEC_DOSP_STATE0(data?: Partial<IPSEC_DOSP_STATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_DOSP_STATE0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.publicHostV6Addr !== undefined) view.setBigUint64(0, data.publicHostV6Addr === null ? 0n : BigInt(util.toPointer(data.publicHostV6Addr)), true);
  // 0x08: pointer
  if (data?.internalHostV6Addr !== undefined) view.setBigUint64(8, data.internalHostV6Addr === null ? 0n : BigInt(util.toPointer(data.internalHostV6Addr)), true);
  // 0x10: u64
  if (data?.totalInboundIPv6IPsecAuthPackets !== undefined) view.setBigUint64(16, BigInt(data.totalInboundIPv6IPsecAuthPackets), true);
  // 0x18: u64
  if (data?.totalOutboundIPv6IPsecAuthPackets !== undefined) view.setBigUint64(24, BigInt(data.totalOutboundIPv6IPsecAuthPackets), true);
  // 0x20: u32
  if (data?.durationSecs !== undefined) view.setUint32(32, Number(data.durationSecs), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_DOSP_STATE_ENUM_TEMPLATE0 (size: 16)
 */
export interface IPSEC_DOSP_STATE_ENUM_TEMPLATE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_V6_ADDR_AND_MASK */
  publicV6AddrMask: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_V6_ADDR_AND_MASK */
  internalV6AddrMask: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_DOSP_STATE_ENUM_TEMPLATE0 = 16;

export function allocIPSEC_DOSP_STATE_ENUM_TEMPLATE0(data?: Partial<IPSEC_DOSP_STATE_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_DOSP_STATE_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.publicV6AddrMask !== undefined) view.setBigUint64(0, data.publicV6AddrMask === null ? 0n : BigInt(util.toPointer(data.publicV6AddrMask)), true);
  // 0x08: pointer
  if (data?.internalV6AddrMask !== undefined) view.setBigUint64(8, data.internalV6AddrMask === null ? 0n : BigInt(util.toPointer(data.internalV6AddrMask)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER0 (size: 24)
 */
export interface IPSEC_KEY_MANAGER0 {
  /** System.Guid */
  keyManagerKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 */
  displayData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** u8 */
  keyDictationTimeoutHint: number;
}

export const sizeofIPSEC_KEY_MANAGER0 = 24;

export function allocIPSEC_KEY_MANAGER0(data?: Partial<IPSEC_KEY_MANAGER0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_KEY_MANAGER0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.keyManagerKey !== undefined) view.setBigUint64(0, data.keyManagerKey === null ? 0n : BigInt(util.toPointer(data.keyManagerKey)), true);
  // 0x08: pointer
  if (data?.displayData !== undefined) view.setBigUint64(8, data.displayData === null ? 0n : BigInt(util.toPointer(data.displayData)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: u8
  if (data?.keyDictationTimeoutHint !== undefined) view.setUint8(20, Number(data.keyDictationTimeoutHint));
  // 0x15: pad3
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SESSION0 (size: 56)
 */
export interface FWPM_SESSION0 {
  /** System.Guid */
  sessionKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 */
  displayData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** u32 */
  txnWaitTimeoutInMSec: number;
  /** u32 */
  processId: number;
  /** ptr */
  sid: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  username: string | null;
  /** Windows.Win32.Foundation.BOOL */
  kernelMode: boolean;
}

export const sizeofFWPM_SESSION0 = 56;

export function allocFWPM_SESSION0(data?: Partial<FWPM_SESSION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_SESSION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sessionKey !== undefined) view.setBigUint64(0, data.sessionKey === null ? 0n : BigInt(util.toPointer(data.sessionKey)), true);
  // 0x08: pointer
  if (data?.displayData !== undefined) view.setBigUint64(8, data.displayData === null ? 0n : BigInt(util.toPointer(data.displayData)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: u32
  if (data?.txnWaitTimeoutInMSec !== undefined) view.setUint32(20, Number(data.txnWaitTimeoutInMSec), true);
  // 0x18: u32
  if (data?.processId !== undefined) view.setUint32(24, Number(data.processId), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.sid !== undefined) view.setBigUint64(32, data.sid === null ? 0n : BigInt(util.toPointer(data.sid)), true);
  // 0x28: buffer
  if (data?.username !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.username);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: i32
  if (data?.kernelMode !== undefined) view.setInt32(48, Number(data.kernelMode), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SESSION_ENUM_TEMPLATE0 (size: 8)
 */
export interface FWPM_SESSION_ENUM_TEMPLATE0 {
  /** u64 */
  reserved: Deno.PointerValue;
}

export const sizeofFWPM_SESSION_ENUM_TEMPLATE0 = 8;

export function allocFWPM_SESSION_ENUM_TEMPLATE0(data?: Partial<FWPM_SESSION_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_SESSION_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved !== undefined) view.setBigUint64(0, BigInt(data.reserved), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER0 (size: 40)
 */
export interface FWPM_PROVIDER0 {
  /** System.Guid */
  providerKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 */
  displayData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  providerData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  serviceName: string | null;
}

export const sizeofFWPM_PROVIDER0 = 40;

export function allocFWPM_PROVIDER0(data?: Partial<FWPM_PROVIDER0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_PROVIDER0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(0, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x08: pointer
  if (data?.displayData !== undefined) view.setBigUint64(8, data.displayData === null ? 0n : BigInt(util.toPointer(data.displayData)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.providerData !== undefined) view.setBigUint64(24, data.providerData === null ? 0n : BigInt(util.toPointer(data.providerData)), true);
  // 0x20: buffer
  if (data?.serviceName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.serviceName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_ENUM_TEMPLATE0 (size: 8)
 */
export interface FWPM_PROVIDER_ENUM_TEMPLATE0 {
  /** u64 */
  reserved: Deno.PointerValue;
}

export const sizeofFWPM_PROVIDER_ENUM_TEMPLATE0 = 8;

export function allocFWPM_PROVIDER_ENUM_TEMPLATE0(data?: Partial<FWPM_PROVIDER_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_PROVIDER_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved !== undefined) view.setBigUint64(0, BigInt(data.reserved), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CHANGE0 (size: 16)
 */
export interface FWPM_PROVIDER_CHANGE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CHANGE_TYPE */
  changeType: FWPM_CHANGE_TYPE;
  /** System.Guid */
  providerKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_PROVIDER_CHANGE0 = 16;

export function allocFWPM_PROVIDER_CHANGE0(data?: Partial<FWPM_PROVIDER_CHANGE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_PROVIDER_CHANGE0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.changeType !== undefined) view.setInt32(0, Number(data.changeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(8, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_SUBSCRIPTION0 (size: 24)
 */
export interface FWPM_PROVIDER_SUBSCRIPTION0 {
  /** ptr */
  enumTemplate: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  flags: number;
  /** System.Guid */
  sessionKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_PROVIDER_SUBSCRIPTION0 = 24;

export function allocFWPM_PROVIDER_SUBSCRIPTION0(data?: Partial<FWPM_PROVIDER_SUBSCRIPTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_PROVIDER_SUBSCRIPTION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.enumTemplate !== undefined) view.setBigUint64(0, data.enumTemplate === null ? 0n : BigInt(util.toPointer(data.enumTemplate)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.sessionKey !== undefined) view.setBigUint64(16, data.sessionKey === null ? 0n : BigInt(util.toPointer(data.sessionKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CLASSIFY_OPTION0 (size: 16)
 */
export interface FWPM_CLASSIFY_OPTION0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_CLASSIFY_OPTION_TYPE */
  type: FWP_CLASSIFY_OPTION_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0 */
  value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_CLASSIFY_OPTION0 = 16;

export function allocFWPM_CLASSIFY_OPTION0(data?: Partial<FWPM_CLASSIFY_OPTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_CLASSIFY_OPTION0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CLASSIFY_OPTIONS0 (size: 16)
 */
export interface FWPM_CLASSIFY_OPTIONS0 {
  /** u32 */
  numOptions: number;
  /** ptr */
  options: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWPM_CLASSIFY_OPTIONS0 = 16;

export function allocFWPM_CLASSIFY_OPTIONS0(data?: Partial<FWPM_CLASSIFY_OPTIONS0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_CLASSIFY_OPTIONS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numOptions !== undefined) view.setUint32(0, Number(data.numOptions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.options !== undefined) view.setBigUint64(8, data.options === null ? 0n : BigInt(util.toPointer(data.options)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT0 (size: 64)
 */
export interface FWPM_PROVIDER_CONTEXT0 {
  /** System.Guid */
  providerContextKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 */
  displayData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  providerData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_TYPE */
  type: FWPM_PROVIDER_CONTEXT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  providerContextId: Deno.PointerValue;
}

export const sizeofFWPM_PROVIDER_CONTEXT0 = 64;

export function allocFWPM_PROVIDER_CONTEXT0(data?: Partial<FWPM_PROVIDER_CONTEXT0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_PROVIDER_CONTEXT0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.providerContextKey !== undefined) view.setBigUint64(0, data.providerContextKey === null ? 0n : BigInt(util.toPointer(data.providerContextKey)), true);
  // 0x08: pointer
  if (data?.displayData !== undefined) view.setBigUint64(8, data.displayData === null ? 0n : BigInt(util.toPointer(data.displayData)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(24, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x20: pointer
  if (data?.providerData !== undefined) view.setBigUint64(32, data.providerData === null ? 0n : BigInt(util.toPointer(data.providerData)), true);
  // 0x28: i32
  if (data?.type !== undefined) view.setInt32(40, Number(data.type), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x38: u64
  if (data?.providerContextId !== undefined) view.setBigUint64(56, BigInt(data.providerContextId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT1 (size: 64)
 */
export interface FWPM_PROVIDER_CONTEXT1 {
  /** System.Guid */
  providerContextKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 */
  displayData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  providerData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_TYPE */
  type: FWPM_PROVIDER_CONTEXT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  providerContextId: Deno.PointerValue;
}

export const sizeofFWPM_PROVIDER_CONTEXT1 = 64;

export function allocFWPM_PROVIDER_CONTEXT1(data?: Partial<FWPM_PROVIDER_CONTEXT1>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_PROVIDER_CONTEXT1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.providerContextKey !== undefined) view.setBigUint64(0, data.providerContextKey === null ? 0n : BigInt(util.toPointer(data.providerContextKey)), true);
  // 0x08: pointer
  if (data?.displayData !== undefined) view.setBigUint64(8, data.displayData === null ? 0n : BigInt(util.toPointer(data.displayData)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(24, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x20: pointer
  if (data?.providerData !== undefined) view.setBigUint64(32, data.providerData === null ? 0n : BigInt(util.toPointer(data.providerData)), true);
  // 0x28: i32
  if (data?.type !== undefined) view.setInt32(40, Number(data.type), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x38: u64
  if (data?.providerContextId !== undefined) view.setBigUint64(56, BigInt(data.providerContextId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT2 (size: 64)
 */
export interface FWPM_PROVIDER_CONTEXT2 {
  /** System.Guid */
  providerContextKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 */
  displayData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  providerData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_TYPE */
  type: FWPM_PROVIDER_CONTEXT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  providerContextId: Deno.PointerValue;
}

export const sizeofFWPM_PROVIDER_CONTEXT2 = 64;

export function allocFWPM_PROVIDER_CONTEXT2(data?: Partial<FWPM_PROVIDER_CONTEXT2>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_PROVIDER_CONTEXT2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.providerContextKey !== undefined) view.setBigUint64(0, data.providerContextKey === null ? 0n : BigInt(util.toPointer(data.providerContextKey)), true);
  // 0x08: pointer
  if (data?.displayData !== undefined) view.setBigUint64(8, data.displayData === null ? 0n : BigInt(util.toPointer(data.displayData)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(24, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x20: pointer
  if (data?.providerData !== undefined) view.setBigUint64(32, data.providerData === null ? 0n : BigInt(util.toPointer(data.providerData)), true);
  // 0x28: i32
  if (data?.type !== undefined) view.setInt32(40, Number(data.type), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x38: u64
  if (data?.providerContextId !== undefined) view.setBigUint64(56, BigInt(data.providerContextId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT3_ (size: 64)
 */
export interface FWPM_PROVIDER_CONTEXT3_ {
  /** System.Guid */
  providerContextKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 */
  displayData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  providerData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_TYPE */
  type: FWPM_PROVIDER_CONTEXT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  providerContextId: Deno.PointerValue;
}

export const sizeofFWPM_PROVIDER_CONTEXT3_ = 64;

export function allocFWPM_PROVIDER_CONTEXT3_(data?: Partial<FWPM_PROVIDER_CONTEXT3_>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_PROVIDER_CONTEXT3_);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.providerContextKey !== undefined) view.setBigUint64(0, data.providerContextKey === null ? 0n : BigInt(util.toPointer(data.providerContextKey)), true);
  // 0x08: pointer
  if (data?.displayData !== undefined) view.setBigUint64(8, data.displayData === null ? 0n : BigInt(util.toPointer(data.displayData)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(24, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x20: pointer
  if (data?.providerData !== undefined) view.setBigUint64(32, data.providerData === null ? 0n : BigInt(util.toPointer(data.providerData)), true);
  // 0x28: i32
  if (data?.type !== undefined) view.setInt32(40, Number(data.type), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x38: u64
  if (data?.providerContextId !== undefined) view.setBigUint64(56, BigInt(data.providerContextId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0 (size: 16)
 */
export interface FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0 {
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_TYPE */
  providerContextType: FWPM_PROVIDER_CONTEXT_TYPE;
}

export const sizeofFWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0 = 16;

export function allocFWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0(data?: Partial<FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(0, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x08: i32
  if (data?.providerContextType !== undefined) view.setInt32(8, Number(data.providerContextType), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_CHANGE0 (size: 24)
 */
export interface FWPM_PROVIDER_CONTEXT_CHANGE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CHANGE_TYPE */
  changeType: FWPM_CHANGE_TYPE;
  /** System.Guid */
  providerContextKey: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  providerContextId: Deno.PointerValue;
}

export const sizeofFWPM_PROVIDER_CONTEXT_CHANGE0 = 24;

export function allocFWPM_PROVIDER_CONTEXT_CHANGE0(data?: Partial<FWPM_PROVIDER_CONTEXT_CHANGE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_PROVIDER_CONTEXT_CHANGE0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.changeType !== undefined) view.setInt32(0, Number(data.changeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.providerContextKey !== undefined) view.setBigUint64(8, data.providerContextKey === null ? 0n : BigInt(util.toPointer(data.providerContextKey)), true);
  // 0x10: u64
  if (data?.providerContextId !== undefined) view.setBigUint64(16, BigInt(data.providerContextId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0 (size: 24)
 */
export interface FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0 {
  /** ptr */
  enumTemplate: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBSCRIPTION_FLAGS */
  flags: FWPM_SUBSCRIPTION_FLAGS;
  /** System.Guid */
  sessionKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_PROVIDER_CONTEXT_SUBSCRIPTION0 = 24;

export function allocFWPM_PROVIDER_CONTEXT_SUBSCRIPTION0(data?: Partial<FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_PROVIDER_CONTEXT_SUBSCRIPTION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.enumTemplate !== undefined) view.setBigUint64(0, data.enumTemplate === null ? 0n : BigInt(util.toPointer(data.enumTemplate)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.sessionKey !== undefined) view.setBigUint64(16, data.sessionKey === null ? 0n : BigInt(util.toPointer(data.sessionKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER0 (size: 48)
 */
export interface FWPM_SUBLAYER0 {
  /** System.Guid */
  subLayerKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 */
  displayData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  providerData: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  weight: number;
}

export const sizeofFWPM_SUBLAYER0 = 48;

export function allocFWPM_SUBLAYER0(data?: Partial<FWPM_SUBLAYER0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_SUBLAYER0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.subLayerKey !== undefined) view.setBigUint64(0, data.subLayerKey === null ? 0n : BigInt(util.toPointer(data.subLayerKey)), true);
  // 0x08: pointer
  if (data?.displayData !== undefined) view.setBigUint64(8, data.displayData === null ? 0n : BigInt(util.toPointer(data.displayData)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(24, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x20: pointer
  if (data?.providerData !== undefined) view.setBigUint64(32, data.providerData === null ? 0n : BigInt(util.toPointer(data.providerData)), true);
  // 0x28: u16
  if (data?.weight !== undefined) view.setUint16(40, Number(data.weight), true);
  // 0x2a: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_ENUM_TEMPLATE0 (size: 8)
 */
export interface FWPM_SUBLAYER_ENUM_TEMPLATE0 {
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWPM_SUBLAYER_ENUM_TEMPLATE0 = 8;

export function allocFWPM_SUBLAYER_ENUM_TEMPLATE0(data?: Partial<FWPM_SUBLAYER_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_SUBLAYER_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(0, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_CHANGE0 (size: 16)
 */
export interface FWPM_SUBLAYER_CHANGE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CHANGE_TYPE */
  changeType: FWPM_CHANGE_TYPE;
  /** System.Guid */
  subLayerKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_SUBLAYER_CHANGE0 = 16;

export function allocFWPM_SUBLAYER_CHANGE0(data?: Partial<FWPM_SUBLAYER_CHANGE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_SUBLAYER_CHANGE0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.changeType !== undefined) view.setInt32(0, Number(data.changeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.subLayerKey !== undefined) view.setBigUint64(8, data.subLayerKey === null ? 0n : BigInt(util.toPointer(data.subLayerKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_SUBSCRIPTION0 (size: 24)
 */
export interface FWPM_SUBLAYER_SUBSCRIPTION0 {
  /** ptr */
  enumTemplate: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBSCRIPTION_FLAGS */
  flags: FWPM_SUBSCRIPTION_FLAGS;
  /** System.Guid */
  sessionKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_SUBLAYER_SUBSCRIPTION0 = 24;

export function allocFWPM_SUBLAYER_SUBSCRIPTION0(data?: Partial<FWPM_SUBLAYER_SUBSCRIPTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_SUBLAYER_SUBSCRIPTION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.enumTemplate !== undefined) view.setBigUint64(0, data.enumTemplate === null ? 0n : BigInt(util.toPointer(data.enumTemplate)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.sessionKey !== undefined) view.setBigUint64(16, data.sessionKey === null ? 0n : BigInt(util.toPointer(data.sessionKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_FIELD0 (size: 16)
 */
export interface FWPM_FIELD0 {
  /** ptr */
  fieldKey: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_FIELD_TYPE */
  type: FWPM_FIELD_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_DATA_TYPE */
  dataType: FWP_DATA_TYPE;
}

export const sizeofFWPM_FIELD0 = 16;

export function allocFWPM_FIELD0(data?: Partial<FWPM_FIELD0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_FIELD0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fieldKey !== undefined) view.setBigUint64(0, data.fieldKey === null ? 0n : BigInt(util.toPointer(data.fieldKey)), true);
  // 0x08: i32
  if (data?.type !== undefined) view.setInt32(8, Number(data.type), true);
  // 0x0c: i32
  if (data?.dataType !== undefined) view.setInt32(12, Number(data.dataType), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_LAYER0 (size: 48)
 */
export interface FWPM_LAYER0 {
  /** System.Guid */
  layerKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 */
  displayData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** u32 */
  numFields: number;
  /** ptr */
  field: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  defaultSubLayerKey: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  layerId: number;
}

export const sizeofFWPM_LAYER0 = 48;

export function allocFWPM_LAYER0(data?: Partial<FWPM_LAYER0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_LAYER0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.layerKey !== undefined) view.setBigUint64(0, data.layerKey === null ? 0n : BigInt(util.toPointer(data.layerKey)), true);
  // 0x08: pointer
  if (data?.displayData !== undefined) view.setBigUint64(8, data.displayData === null ? 0n : BigInt(util.toPointer(data.displayData)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: u32
  if (data?.numFields !== undefined) view.setUint32(20, Number(data.numFields), true);
  // 0x18: pointer
  if (data?.field !== undefined) view.setBigUint64(24, data.field === null ? 0n : BigInt(util.toPointer(data.field)), true);
  // 0x20: pointer
  if (data?.defaultSubLayerKey !== undefined) view.setBigUint64(32, data.defaultSubLayerKey === null ? 0n : BigInt(util.toPointer(data.defaultSubLayerKey)), true);
  // 0x28: u16
  if (data?.layerId !== undefined) view.setUint16(40, Number(data.layerId), true);
  // 0x2a: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_LAYER_ENUM_TEMPLATE0 (size: 8)
 */
export interface FWPM_LAYER_ENUM_TEMPLATE0 {
  /** u64 */
  reserved: Deno.PointerValue;
}

export const sizeofFWPM_LAYER_ENUM_TEMPLATE0 = 8;

export function allocFWPM_LAYER_ENUM_TEMPLATE0(data?: Partial<FWPM_LAYER_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_LAYER_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.reserved !== undefined) view.setBigUint64(0, BigInt(data.reserved), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT0 (size: 56)
 */
export interface FWPM_CALLOUT0 {
  /** System.Guid */
  calloutKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 */
  displayData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  providerData: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  applicableLayer: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  calloutId: number;
}

export const sizeofFWPM_CALLOUT0 = 56;

export function allocFWPM_CALLOUT0(data?: Partial<FWPM_CALLOUT0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_CALLOUT0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.calloutKey !== undefined) view.setBigUint64(0, data.calloutKey === null ? 0n : BigInt(util.toPointer(data.calloutKey)), true);
  // 0x08: pointer
  if (data?.displayData !== undefined) view.setBigUint64(8, data.displayData === null ? 0n : BigInt(util.toPointer(data.displayData)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(24, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x20: pointer
  if (data?.providerData !== undefined) view.setBigUint64(32, data.providerData === null ? 0n : BigInt(util.toPointer(data.providerData)), true);
  // 0x28: pointer
  if (data?.applicableLayer !== undefined) view.setBigUint64(40, data.applicableLayer === null ? 0n : BigInt(util.toPointer(data.applicableLayer)), true);
  // 0x30: u32
  if (data?.calloutId !== undefined) view.setUint32(48, Number(data.calloutId), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_ENUM_TEMPLATE0 (size: 16)
 */
export interface FWPM_CALLOUT_ENUM_TEMPLATE0 {
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  layerKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_CALLOUT_ENUM_TEMPLATE0 = 16;

export function allocFWPM_CALLOUT_ENUM_TEMPLATE0(data?: Partial<FWPM_CALLOUT_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_CALLOUT_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(0, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x08: pointer
  if (data?.layerKey !== undefined) view.setBigUint64(8, data.layerKey === null ? 0n : BigInt(util.toPointer(data.layerKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_CHANGE0 (size: 24)
 */
export interface FWPM_CALLOUT_CHANGE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CHANGE_TYPE */
  changeType: FWPM_CHANGE_TYPE;
  /** System.Guid */
  calloutKey: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  calloutId: number;
}

export const sizeofFWPM_CALLOUT_CHANGE0 = 24;

export function allocFWPM_CALLOUT_CHANGE0(data?: Partial<FWPM_CALLOUT_CHANGE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_CALLOUT_CHANGE0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.changeType !== undefined) view.setInt32(0, Number(data.changeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.calloutKey !== undefined) view.setBigUint64(8, data.calloutKey === null ? 0n : BigInt(util.toPointer(data.calloutKey)), true);
  // 0x10: u32
  if (data?.calloutId !== undefined) view.setUint32(16, Number(data.calloutId), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_SUBSCRIPTION0 (size: 24)
 */
export interface FWPM_CALLOUT_SUBSCRIPTION0 {
  /** ptr */
  enumTemplate: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  flags: number;
  /** System.Guid */
  sessionKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_CALLOUT_SUBSCRIPTION0 = 24;

export function allocFWPM_CALLOUT_SUBSCRIPTION0(data?: Partial<FWPM_CALLOUT_SUBSCRIPTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_CALLOUT_SUBSCRIPTION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.enumTemplate !== undefined) view.setBigUint64(0, data.enumTemplate === null ? 0n : BigInt(util.toPointer(data.enumTemplate)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.sessionKey !== undefined) view.setBigUint64(16, data.sessionKey === null ? 0n : BigInt(util.toPointer(data.sessionKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_ACTION0 (size: 16)
 */
export interface FWPM_ACTION0 {
  /** u32 */
  type: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_ACTION0 = 16;

export function allocFWPM_ACTION0(data?: Partial<FWPM_ACTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_ACTION0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.type !== undefined) view.setUint32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CONDITION0 (size: 24)
 */
export interface FWPM_FILTER_CONDITION0 {
  /** System.Guid */
  fieldKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_MATCH_TYPE */
  matchType: FWP_MATCH_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_CONDITION_VALUE0 */
  conditionValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_FILTER_CONDITION0 = 24;

export function allocFWPM_FILTER_CONDITION0(data?: Partial<FWPM_FILTER_CONDITION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_FILTER_CONDITION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fieldKey !== undefined) view.setBigUint64(0, data.fieldKey === null ? 0n : BigInt(util.toPointer(data.fieldKey)), true);
  // 0x08: i32
  if (data?.matchType !== undefined) view.setInt32(8, Number(data.matchType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.conditionValue !== undefined) view.setBigUint64(16, data.conditionValue === null ? 0n : BigInt(util.toPointer(data.conditionValue)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER0 (size: 120)
 */
export interface FWPM_FILTER0 {
  /** System.Guid */
  filterKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DISPLAY_DATA0 */
  displayData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_FLAGS */
  flags: FWPM_FILTER_FLAGS;
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  providerData: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  layerKey: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  subLayerKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0 */
  weight: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  numFilterConditions: number;
  /** ptr */
  filterCondition: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_ACTION0 */
  action: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  reserved: Deno.PointerValue | Uint8Array | null;
  /** u64 */
  filterId: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_VALUE0 */
  effectiveWeight: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_FILTER0 = 120;

export function allocFWPM_FILTER0(data?: Partial<FWPM_FILTER0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_FILTER0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.filterKey !== undefined) view.setBigUint64(0, data.filterKey === null ? 0n : BigInt(util.toPointer(data.filterKey)), true);
  // 0x08: pointer
  if (data?.displayData !== undefined) view.setBigUint64(8, data.displayData === null ? 0n : BigInt(util.toPointer(data.displayData)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(24, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x20: pointer
  if (data?.providerData !== undefined) view.setBigUint64(32, data.providerData === null ? 0n : BigInt(util.toPointer(data.providerData)), true);
  // 0x28: pointer
  if (data?.layerKey !== undefined) view.setBigUint64(40, data.layerKey === null ? 0n : BigInt(util.toPointer(data.layerKey)), true);
  // 0x30: pointer
  if (data?.subLayerKey !== undefined) view.setBigUint64(48, data.subLayerKey === null ? 0n : BigInt(util.toPointer(data.subLayerKey)), true);
  // 0x38: pointer
  if (data?.weight !== undefined) view.setBigUint64(56, data.weight === null ? 0n : BigInt(util.toPointer(data.weight)), true);
  // 0x40: u32
  if (data?.numFilterConditions !== undefined) view.setUint32(64, Number(data.numFilterConditions), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.filterCondition !== undefined) view.setBigUint64(72, data.filterCondition === null ? 0n : BigInt(util.toPointer(data.filterCondition)), true);
  // 0x50: pointer
  if (data?.action !== undefined) view.setBigUint64(80, data.action === null ? 0n : BigInt(util.toPointer(data.action)), true);
  // 0x58: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(88, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x60: pointer
  if (data?.reserved !== undefined) view.setBigUint64(96, data.reserved === null ? 0n : BigInt(util.toPointer(data.reserved)), true);
  // 0x68: u64
  if (data?.filterId !== undefined) view.setBigUint64(104, BigInt(data.filterId), true);
  // 0x70: pointer
  if (data?.effectiveWeight !== undefined) view.setBigUint64(112, data.effectiveWeight === null ? 0n : BigInt(util.toPointer(data.effectiveWeight)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_ENUM_TEMPLATE0 (size: 64)
 */
export interface FWPM_FILTER_ENUM_TEMPLATE0 {
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  layerKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_FILTER_ENUM_TYPE */
  enumType: FWP_FILTER_ENUM_TYPE;
  /** u32 */
  flags: number;
  /** ptr */
  providerContextTemplate: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  numFilterConditions: number;
  /** ptr */
  filterCondition: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  actionMask: number;
  /** ptr */
  calloutKey: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWPM_FILTER_ENUM_TEMPLATE0 = 64;

export function allocFWPM_FILTER_ENUM_TEMPLATE0(data?: Partial<FWPM_FILTER_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_FILTER_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(0, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x08: pointer
  if (data?.layerKey !== undefined) view.setBigUint64(8, data.layerKey === null ? 0n : BigInt(util.toPointer(data.layerKey)), true);
  // 0x10: i32
  if (data?.enumType !== undefined) view.setInt32(16, Number(data.enumType), true);
  // 0x14: u32
  if (data?.flags !== undefined) view.setUint32(20, Number(data.flags), true);
  // 0x18: pointer
  if (data?.providerContextTemplate !== undefined) view.setBigUint64(24, data.providerContextTemplate === null ? 0n : BigInt(util.toPointer(data.providerContextTemplate)), true);
  // 0x20: u32
  if (data?.numFilterConditions !== undefined) view.setUint32(32, Number(data.numFilterConditions), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.filterCondition !== undefined) view.setBigUint64(40, data.filterCondition === null ? 0n : BigInt(util.toPointer(data.filterCondition)), true);
  // 0x30: u32
  if (data?.actionMask !== undefined) view.setUint32(48, Number(data.actionMask), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.calloutKey !== undefined) view.setBigUint64(56, data.calloutKey === null ? 0n : BigInt(util.toPointer(data.calloutKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CHANGE0 (size: 24)
 */
export interface FWPM_FILTER_CHANGE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CHANGE_TYPE */
  changeType: FWPM_CHANGE_TYPE;
  /** System.Guid */
  filterKey: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  filterId: Deno.PointerValue;
}

export const sizeofFWPM_FILTER_CHANGE0 = 24;

export function allocFWPM_FILTER_CHANGE0(data?: Partial<FWPM_FILTER_CHANGE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_FILTER_CHANGE0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.changeType !== undefined) view.setInt32(0, Number(data.changeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.filterKey !== undefined) view.setBigUint64(8, data.filterKey === null ? 0n : BigInt(util.toPointer(data.filterKey)), true);
  // 0x10: u64
  if (data?.filterId !== undefined) view.setBigUint64(16, BigInt(data.filterId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_SUBSCRIPTION0 (size: 24)
 */
export interface FWPM_FILTER_SUBSCRIPTION0 {
  /** ptr */
  enumTemplate: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  flags: number;
  /** System.Guid */
  sessionKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_FILTER_SUBSCRIPTION0 = 24;

export function allocFWPM_FILTER_SUBSCRIPTION0(data?: Partial<FWPM_FILTER_SUBSCRIPTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_FILTER_SUBSCRIPTION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.enumTemplate !== undefined) view.setBigUint64(0, data.enumTemplate === null ? 0n : BigInt(util.toPointer(data.enumTemplate)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.sessionKey !== undefined) view.setBigUint64(16, data.sessionKey === null ? 0n : BigInt(util.toPointer(data.sessionKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_LAYER_STATISTICS0 (size: 24)
 */
export interface FWPM_LAYER_STATISTICS0 {
  /** System.Guid */
  layerId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  classifyPermitCount: number;
  /** u32 */
  classifyBlockCount: number;
  /** u32 */
  classifyVetoCount: number;
  /** u32 */
  numCacheEntries: number;
}

export const sizeofFWPM_LAYER_STATISTICS0 = 24;

export function allocFWPM_LAYER_STATISTICS0(data?: Partial<FWPM_LAYER_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_LAYER_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.layerId !== undefined) view.setBigUint64(0, data.layerId === null ? 0n : BigInt(util.toPointer(data.layerId)), true);
  // 0x08: u32
  if (data?.classifyPermitCount !== undefined) view.setUint32(8, Number(data.classifyPermitCount), true);
  // 0x0c: u32
  if (data?.classifyBlockCount !== undefined) view.setUint32(12, Number(data.classifyBlockCount), true);
  // 0x10: u32
  if (data?.classifyVetoCount !== undefined) view.setUint32(16, Number(data.classifyVetoCount), true);
  // 0x14: u32
  if (data?.numCacheEntries !== undefined) view.setUint32(20, Number(data.numCacheEntries), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_STATISTICS0 (size: 240)
 */
export interface FWPM_STATISTICS0 {
  /** u32 */
  numLayerStatistics: number;
  /** ptr */
  layerStatistics: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  inboundAllowedConnectionsV4: number;
  /** u32 */
  inboundBlockedConnectionsV4: number;
  /** u32 */
  outboundAllowedConnectionsV4: number;
  /** u32 */
  outboundBlockedConnectionsV4: number;
  /** u32 */
  inboundAllowedConnectionsV6: number;
  /** u32 */
  inboundBlockedConnectionsV6: number;
  /** u32 */
  outboundAllowedConnectionsV6: number;
  /** u32 */
  outboundBlockedConnectionsV6: number;
  /** u32 */
  inboundActiveConnectionsV4: number;
  /** u32 */
  outboundActiveConnectionsV4: number;
  /** u32 */
  inboundActiveConnectionsV6: number;
  /** u32 */
  outboundActiveConnectionsV6: number;
  /** u64 */
  reauthDirInbound: Deno.PointerValue;
  /** u64 */
  reauthDirOutbound: Deno.PointerValue;
  /** u64 */
  reauthFamilyV4: Deno.PointerValue;
  /** u64 */
  reauthFamilyV6: Deno.PointerValue;
  /** u64 */
  reauthProtoOther: Deno.PointerValue;
  /** u64 */
  reauthProtoIPv4: Deno.PointerValue;
  /** u64 */
  reauthProtoIPv6: Deno.PointerValue;
  /** u64 */
  reauthProtoICMP: Deno.PointerValue;
  /** u64 */
  reauthProtoICMP6: Deno.PointerValue;
  /** u64 */
  reauthProtoUDP: Deno.PointerValue;
  /** u64 */
  reauthProtoTCP: Deno.PointerValue;
  /** u64 */
  reauthReasonPolicyChange: Deno.PointerValue;
  /** u64 */
  reauthReasonNewArrivalInterface: Deno.PointerValue;
  /** u64 */
  reauthReasonNewNextHopInterface: Deno.PointerValue;
  /** u64 */
  reauthReasonProfileCrossing: Deno.PointerValue;
  /** u64 */
  reauthReasonClassifyCompletion: Deno.PointerValue;
  /** u64 */
  reauthReasonIPSecPropertiesChanged: Deno.PointerValue;
  /** u64 */
  reauthReasonMidStreamInspection: Deno.PointerValue;
  /** u64 */
  reauthReasonSocketPropertyChanged: Deno.PointerValue;
  /** u64 */
  reauthReasonNewInboundMCastBCastPacket: Deno.PointerValue;
  /** u64 */
  reauthReasonEDPPolicyChanged: Deno.PointerValue;
  /** u64 */
  reauthReasonProxyHandleChanged: Deno.PointerValue;
}

export const sizeofFWPM_STATISTICS0 = 240;

export function allocFWPM_STATISTICS0(data?: Partial<FWPM_STATISTICS0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_STATISTICS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numLayerStatistics !== undefined) view.setUint32(0, Number(data.numLayerStatistics), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.layerStatistics !== undefined) view.setBigUint64(8, data.layerStatistics === null ? 0n : BigInt(util.toPointer(data.layerStatistics)), true);
  // 0x10: u32
  if (data?.inboundAllowedConnectionsV4 !== undefined) view.setUint32(16, Number(data.inboundAllowedConnectionsV4), true);
  // 0x14: u32
  if (data?.inboundBlockedConnectionsV4 !== undefined) view.setUint32(20, Number(data.inboundBlockedConnectionsV4), true);
  // 0x18: u32
  if (data?.outboundAllowedConnectionsV4 !== undefined) view.setUint32(24, Number(data.outboundAllowedConnectionsV4), true);
  // 0x1c: u32
  if (data?.outboundBlockedConnectionsV4 !== undefined) view.setUint32(28, Number(data.outboundBlockedConnectionsV4), true);
  // 0x20: u32
  if (data?.inboundAllowedConnectionsV6 !== undefined) view.setUint32(32, Number(data.inboundAllowedConnectionsV6), true);
  // 0x24: u32
  if (data?.inboundBlockedConnectionsV6 !== undefined) view.setUint32(36, Number(data.inboundBlockedConnectionsV6), true);
  // 0x28: u32
  if (data?.outboundAllowedConnectionsV6 !== undefined) view.setUint32(40, Number(data.outboundAllowedConnectionsV6), true);
  // 0x2c: u32
  if (data?.outboundBlockedConnectionsV6 !== undefined) view.setUint32(44, Number(data.outboundBlockedConnectionsV6), true);
  // 0x30: u32
  if (data?.inboundActiveConnectionsV4 !== undefined) view.setUint32(48, Number(data.inboundActiveConnectionsV4), true);
  // 0x34: u32
  if (data?.outboundActiveConnectionsV4 !== undefined) view.setUint32(52, Number(data.outboundActiveConnectionsV4), true);
  // 0x38: u32
  if (data?.inboundActiveConnectionsV6 !== undefined) view.setUint32(56, Number(data.inboundActiveConnectionsV6), true);
  // 0x3c: u32
  if (data?.outboundActiveConnectionsV6 !== undefined) view.setUint32(60, Number(data.outboundActiveConnectionsV6), true);
  // 0x40: u64
  if (data?.reauthDirInbound !== undefined) view.setBigUint64(64, BigInt(data.reauthDirInbound), true);
  // 0x48: u64
  if (data?.reauthDirOutbound !== undefined) view.setBigUint64(72, BigInt(data.reauthDirOutbound), true);
  // 0x50: u64
  if (data?.reauthFamilyV4 !== undefined) view.setBigUint64(80, BigInt(data.reauthFamilyV4), true);
  // 0x58: u64
  if (data?.reauthFamilyV6 !== undefined) view.setBigUint64(88, BigInt(data.reauthFamilyV6), true);
  // 0x60: u64
  if (data?.reauthProtoOther !== undefined) view.setBigUint64(96, BigInt(data.reauthProtoOther), true);
  // 0x68: u64
  if (data?.reauthProtoIPv4 !== undefined) view.setBigUint64(104, BigInt(data.reauthProtoIPv4), true);
  // 0x70: u64
  if (data?.reauthProtoIPv6 !== undefined) view.setBigUint64(112, BigInt(data.reauthProtoIPv6), true);
  // 0x78: u64
  if (data?.reauthProtoICMP !== undefined) view.setBigUint64(120, BigInt(data.reauthProtoICMP), true);
  // 0x80: u64
  if (data?.reauthProtoICMP6 !== undefined) view.setBigUint64(128, BigInt(data.reauthProtoICMP6), true);
  // 0x88: u64
  if (data?.reauthProtoUDP !== undefined) view.setBigUint64(136, BigInt(data.reauthProtoUDP), true);
  // 0x90: u64
  if (data?.reauthProtoTCP !== undefined) view.setBigUint64(144, BigInt(data.reauthProtoTCP), true);
  // 0x98: u64
  if (data?.reauthReasonPolicyChange !== undefined) view.setBigUint64(152, BigInt(data.reauthReasonPolicyChange), true);
  // 0xa0: u64
  if (data?.reauthReasonNewArrivalInterface !== undefined) view.setBigUint64(160, BigInt(data.reauthReasonNewArrivalInterface), true);
  // 0xa8: u64
  if (data?.reauthReasonNewNextHopInterface !== undefined) view.setBigUint64(168, BigInt(data.reauthReasonNewNextHopInterface), true);
  // 0xb0: u64
  if (data?.reauthReasonProfileCrossing !== undefined) view.setBigUint64(176, BigInt(data.reauthReasonProfileCrossing), true);
  // 0xb8: u64
  if (data?.reauthReasonClassifyCompletion !== undefined) view.setBigUint64(184, BigInt(data.reauthReasonClassifyCompletion), true);
  // 0xc0: u64
  if (data?.reauthReasonIPSecPropertiesChanged !== undefined) view.setBigUint64(192, BigInt(data.reauthReasonIPSecPropertiesChanged), true);
  // 0xc8: u64
  if (data?.reauthReasonMidStreamInspection !== undefined) view.setBigUint64(200, BigInt(data.reauthReasonMidStreamInspection), true);
  // 0xd0: u64
  if (data?.reauthReasonSocketPropertyChanged !== undefined) view.setBigUint64(208, BigInt(data.reauthReasonSocketPropertyChanged), true);
  // 0xd8: u64
  if (data?.reauthReasonNewInboundMCastBCastPacket !== undefined) view.setBigUint64(216, BigInt(data.reauthReasonNewInboundMCastBCastPacket), true);
  // 0xe0: u64
  if (data?.reauthReasonEDPPolicyChanged !== undefined) view.setBigUint64(224, BigInt(data.reauthReasonEDPPolicyChanged), true);
  // 0xe8: u64
  if (data?.reauthReasonProxyHandleChanged !== undefined) view.setBigUint64(232, BigInt(data.reauthReasonProxyHandleChanged), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER0 (size: 64)
 */
export interface FWPM_NET_EVENT_HEADER0 {
  /** Windows.Win32.Foundation.FILETIME */
  timeStamp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** u8 */
  ipProtocol: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  localPort: number;
  /** u16 */
  remotePort: number;
  /** u32 */
  scopeId: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  appId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  userId: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWPM_NET_EVENT_HEADER0 = 64;

export function allocFWPM_NET_EVENT_HEADER0(data?: Partial<FWPM_NET_EVENT_HEADER0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_HEADER0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.timeStamp !== undefined) view.setBigUint64(0, data.timeStamp === null ? 0n : BigInt(util.toPointer(data.timeStamp)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.ipVersion !== undefined) view.setInt32(12, Number(data.ipVersion), true);
  // 0x10: u8
  if (data?.ipProtocol !== undefined) view.setUint8(16, Number(data.ipProtocol));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x28: u16
  if (data?.localPort !== undefined) view.setUint16(40, Number(data.localPort), true);
  // 0x2a: u16
  if (data?.remotePort !== undefined) view.setUint16(42, Number(data.remotePort), true);
  // 0x2c: u32
  if (data?.scopeId !== undefined) view.setUint32(44, Number(data.scopeId), true);
  // 0x30: pointer
  if (data?.appId !== undefined) view.setBigUint64(48, data.appId === null ? 0n : BigInt(util.toPointer(data.appId)), true);
  // 0x38: pointer
  if (data?.userId !== undefined) view.setBigUint64(56, data.userId === null ? 0n : BigInt(util.toPointer(data.userId)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER1 (size: 72)
 */
export interface FWPM_NET_EVENT_HEADER1 {
  /** Windows.Win32.Foundation.FILETIME */
  timeStamp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** u8 */
  ipProtocol: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  localPort: number;
  /** u16 */
  remotePort: number;
  /** u32 */
  scopeId: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  appId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  userId: Deno.PointerValue | Uint8Array | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_NET_EVENT_HEADER1 = 72;

export function allocFWPM_NET_EVENT_HEADER1(data?: Partial<FWPM_NET_EVENT_HEADER1>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_HEADER1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.timeStamp !== undefined) view.setBigUint64(0, data.timeStamp === null ? 0n : BigInt(util.toPointer(data.timeStamp)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.ipVersion !== undefined) view.setInt32(12, Number(data.ipVersion), true);
  // 0x10: u8
  if (data?.ipProtocol !== undefined) view.setUint8(16, Number(data.ipProtocol));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x28: u16
  if (data?.localPort !== undefined) view.setUint16(40, Number(data.localPort), true);
  // 0x2a: u16
  if (data?.remotePort !== undefined) view.setUint16(42, Number(data.remotePort), true);
  // 0x2c: u32
  if (data?.scopeId !== undefined) view.setUint32(44, Number(data.scopeId), true);
  // 0x30: pointer
  if (data?.appId !== undefined) view.setBigUint64(48, data.appId === null ? 0n : BigInt(util.toPointer(data.appId)), true);
  // 0x38: pointer
  if (data?.userId !== undefined) view.setBigUint64(56, data.userId === null ? 0n : BigInt(util.toPointer(data.userId)), true);
  // 0x40: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(64, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER2 (size: 80)
 */
export interface FWPM_NET_EVENT_HEADER2 {
  /** Windows.Win32.Foundation.FILETIME */
  timeStamp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** u8 */
  ipProtocol: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  localPort: number;
  /** u16 */
  remotePort: number;
  /** u32 */
  scopeId: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  appId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  userId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_AF */
  addressFamily: FWP_AF;
  /** ptr */
  packageSid: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWPM_NET_EVENT_HEADER2 = 80;

export function allocFWPM_NET_EVENT_HEADER2(data?: Partial<FWPM_NET_EVENT_HEADER2>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_HEADER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.timeStamp !== undefined) view.setBigUint64(0, data.timeStamp === null ? 0n : BigInt(util.toPointer(data.timeStamp)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.ipVersion !== undefined) view.setInt32(12, Number(data.ipVersion), true);
  // 0x10: u8
  if (data?.ipProtocol !== undefined) view.setUint8(16, Number(data.ipProtocol));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x28: u16
  if (data?.localPort !== undefined) view.setUint16(40, Number(data.localPort), true);
  // 0x2a: u16
  if (data?.remotePort !== undefined) view.setUint16(42, Number(data.remotePort), true);
  // 0x2c: u32
  if (data?.scopeId !== undefined) view.setUint32(44, Number(data.scopeId), true);
  // 0x30: pointer
  if (data?.appId !== undefined) view.setBigUint64(48, data.appId === null ? 0n : BigInt(util.toPointer(data.appId)), true);
  // 0x38: pointer
  if (data?.userId !== undefined) view.setBigUint64(56, data.userId === null ? 0n : BigInt(util.toPointer(data.userId)), true);
  // 0x40: i32
  if (data?.addressFamily !== undefined) view.setInt32(64, Number(data.addressFamily), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.packageSid !== undefined) view.setBigUint64(72, data.packageSid === null ? 0n : BigInt(util.toPointer(data.packageSid)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER3 (size: 104)
 */
export interface FWPM_NET_EVENT_HEADER3 {
  /** Windows.Win32.Foundation.FILETIME */
  timeStamp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** u8 */
  ipProtocol: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  localPort: number;
  /** u16 */
  remotePort: number;
  /** u32 */
  scopeId: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  appId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  userId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_AF */
  addressFamily: FWP_AF;
  /** ptr */
  packageSid: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  enterpriseId: string | null;
  /** u64 */
  policyFlags: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  effectiveName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_NET_EVENT_HEADER3 = 104;

export function allocFWPM_NET_EVENT_HEADER3(data?: Partial<FWPM_NET_EVENT_HEADER3>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_HEADER3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.timeStamp !== undefined) view.setBigUint64(0, data.timeStamp === null ? 0n : BigInt(util.toPointer(data.timeStamp)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.ipVersion !== undefined) view.setInt32(12, Number(data.ipVersion), true);
  // 0x10: u8
  if (data?.ipProtocol !== undefined) view.setUint8(16, Number(data.ipProtocol));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x28: u16
  if (data?.localPort !== undefined) view.setUint16(40, Number(data.localPort), true);
  // 0x2a: u16
  if (data?.remotePort !== undefined) view.setUint16(42, Number(data.remotePort), true);
  // 0x2c: u32
  if (data?.scopeId !== undefined) view.setUint32(44, Number(data.scopeId), true);
  // 0x30: pointer
  if (data?.appId !== undefined) view.setBigUint64(48, data.appId === null ? 0n : BigInt(util.toPointer(data.appId)), true);
  // 0x38: pointer
  if (data?.userId !== undefined) view.setBigUint64(56, data.userId === null ? 0n : BigInt(util.toPointer(data.userId)), true);
  // 0x40: i32
  if (data?.addressFamily !== undefined) view.setInt32(64, Number(data.addressFamily), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.packageSid !== undefined) view.setBigUint64(72, data.packageSid === null ? 0n : BigInt(util.toPointer(data.packageSid)), true);
  // 0x50: buffer
  if (data?.enterpriseId !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.enterpriseId);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: u64
  if (data?.policyFlags !== undefined) view.setBigUint64(88, BigInt(data.policyFlags), true);
  // 0x60: pointer
  if (data?.effectiveName !== undefined) view.setBigUint64(96, data.effectiveName === null ? 0n : BigInt(util.toPointer(data.effectiveName)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE0 (size: 56)
 */
export interface FWPM_NET_EVENT_IKEEXT_MM_FAILURE0 {
  /** u32 */
  failureErrorCode: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT */
  failurePoint: IPSEC_FAILURE_POINT;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE */
  keyingModuleType: IKEEXT_KEY_MODULE_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_MM_SA_STATE */
  mmState: IKEEXT_MM_SA_STATE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE */
  saRole: IKEEXT_SA_ROLE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE */
  mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE;
  /** array */
  endCertHash: Deno.PointerValue | null;
  /** u64 */
  mmId: Deno.PointerValue;
  /** u64 */
  mmFilterId: Deno.PointerValue;
}

export const sizeofFWPM_NET_EVENT_IKEEXT_MM_FAILURE0 = 56;

export function allocFWPM_NET_EVENT_IKEEXT_MM_FAILURE0(data?: Partial<FWPM_NET_EVENT_IKEEXT_MM_FAILURE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_IKEEXT_MM_FAILURE0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.failureErrorCode !== undefined) view.setUint32(0, Number(data.failureErrorCode), true);
  // 0x04: i32
  if (data?.failurePoint !== undefined) view.setInt32(4, Number(data.failurePoint), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.keyingModuleType !== undefined) view.setInt32(12, Number(data.keyingModuleType), true);
  // 0x10: i32
  if (data?.mmState !== undefined) view.setInt32(16, Number(data.mmState), true);
  // 0x14: i32
  if (data?.saRole !== undefined) view.setInt32(20, Number(data.saRole), true);
  // 0x18: i32
  if (data?.mmAuthMethod !== undefined) view.setInt32(24, Number(data.mmAuthMethod), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.endCertHash !== undefined) view.setBigUint64(32, data.endCertHash === null ? 0n : BigInt(util.toPointer(data.endCertHash)), true);
  // 0x28: u64
  if (data?.mmId !== undefined) view.setBigUint64(40, BigInt(data.mmId), true);
  // 0x30: u64
  if (data?.mmFilterId !== undefined) view.setBigUint64(48, BigInt(data.mmFilterId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE1 (size: 104)
 */
export interface FWPM_NET_EVENT_IKEEXT_MM_FAILURE1 {
  /** u32 */
  failureErrorCode: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT */
  failurePoint: IPSEC_FAILURE_POINT;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE */
  keyingModuleType: IKEEXT_KEY_MODULE_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_MM_SA_STATE */
  mmState: IKEEXT_MM_SA_STATE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE */
  saRole: IKEEXT_SA_ROLE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE */
  mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE;
  /** array */
  endCertHash: Deno.PointerValue | null;
  /** u64 */
  mmId: Deno.PointerValue;
  /** u64 */
  mmFilterId: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  localPrincipalNameForAuth: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  remotePrincipalNameForAuth: string | null;
  /** u32 */
  numLocalPrincipalGroupSids: number;
  /** ptr */
  localPrincipalGroupSids: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  numRemotePrincipalGroupSids: number;
  /** ptr */
  remotePrincipalGroupSids: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWPM_NET_EVENT_IKEEXT_MM_FAILURE1 = 104;

export function allocFWPM_NET_EVENT_IKEEXT_MM_FAILURE1(data?: Partial<FWPM_NET_EVENT_IKEEXT_MM_FAILURE1>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_IKEEXT_MM_FAILURE1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.failureErrorCode !== undefined) view.setUint32(0, Number(data.failureErrorCode), true);
  // 0x04: i32
  if (data?.failurePoint !== undefined) view.setInt32(4, Number(data.failurePoint), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.keyingModuleType !== undefined) view.setInt32(12, Number(data.keyingModuleType), true);
  // 0x10: i32
  if (data?.mmState !== undefined) view.setInt32(16, Number(data.mmState), true);
  // 0x14: i32
  if (data?.saRole !== undefined) view.setInt32(20, Number(data.saRole), true);
  // 0x18: i32
  if (data?.mmAuthMethod !== undefined) view.setInt32(24, Number(data.mmAuthMethod), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.endCertHash !== undefined) view.setBigUint64(32, data.endCertHash === null ? 0n : BigInt(util.toPointer(data.endCertHash)), true);
  // 0x28: u64
  if (data?.mmId !== undefined) view.setBigUint64(40, BigInt(data.mmId), true);
  // 0x30: u64
  if (data?.mmFilterId !== undefined) view.setBigUint64(48, BigInt(data.mmFilterId), true);
  // 0x38: buffer
  if (data?.localPrincipalNameForAuth !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.localPrincipalNameForAuth);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.remotePrincipalNameForAuth !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.remotePrincipalNameForAuth);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.numLocalPrincipalGroupSids !== undefined) view.setUint32(72, Number(data.numLocalPrincipalGroupSids), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.localPrincipalGroupSids !== undefined) view.setBigUint64(80, data.localPrincipalGroupSids === null ? 0n : BigInt(util.toPointer(data.localPrincipalGroupSids)), true);
  // 0x58: u32
  if (data?.numRemotePrincipalGroupSids !== undefined) view.setUint32(88, Number(data.numRemotePrincipalGroupSids), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.remotePrincipalGroupSids !== undefined) view.setBigUint64(96, data.remotePrincipalGroupSids === null ? 0n : BigInt(util.toPointer(data.remotePrincipalGroupSids)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_ (size: 112)
 */
export interface FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_ {
  /** u32 */
  failureErrorCode: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT */
  failurePoint: IPSEC_FAILURE_POINT;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE */
  keyingModuleType: IKEEXT_KEY_MODULE_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_MM_SA_STATE */
  mmState: IKEEXT_MM_SA_STATE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE */
  saRole: IKEEXT_SA_ROLE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE */
  mmAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE;
  /** array */
  endCertHash: Deno.PointerValue | null;
  /** u64 */
  mmId: Deno.PointerValue;
  /** u64 */
  mmFilterId: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  localPrincipalNameForAuth: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  remotePrincipalNameForAuth: string | null;
  /** u32 */
  numLocalPrincipalGroupSids: number;
  /** ptr */
  localPrincipalGroupSids: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  numRemotePrincipalGroupSids: number;
  /** ptr */
  remotePrincipalGroupSids: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  providerContextKey: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWPM_NET_EVENT_IKEEXT_MM_FAILURE2_ = 112;

export function allocFWPM_NET_EVENT_IKEEXT_MM_FAILURE2_(data?: Partial<FWPM_NET_EVENT_IKEEXT_MM_FAILURE2_>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_IKEEXT_MM_FAILURE2_);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.failureErrorCode !== undefined) view.setUint32(0, Number(data.failureErrorCode), true);
  // 0x04: i32
  if (data?.failurePoint !== undefined) view.setInt32(4, Number(data.failurePoint), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.keyingModuleType !== undefined) view.setInt32(12, Number(data.keyingModuleType), true);
  // 0x10: i32
  if (data?.mmState !== undefined) view.setInt32(16, Number(data.mmState), true);
  // 0x14: i32
  if (data?.saRole !== undefined) view.setInt32(20, Number(data.saRole), true);
  // 0x18: i32
  if (data?.mmAuthMethod !== undefined) view.setInt32(24, Number(data.mmAuthMethod), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.endCertHash !== undefined) view.setBigUint64(32, data.endCertHash === null ? 0n : BigInt(util.toPointer(data.endCertHash)), true);
  // 0x28: u64
  if (data?.mmId !== undefined) view.setBigUint64(40, BigInt(data.mmId), true);
  // 0x30: u64
  if (data?.mmFilterId !== undefined) view.setBigUint64(48, BigInt(data.mmFilterId), true);
  // 0x38: buffer
  if (data?.localPrincipalNameForAuth !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.localPrincipalNameForAuth);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.remotePrincipalNameForAuth !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.remotePrincipalNameForAuth);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.numLocalPrincipalGroupSids !== undefined) view.setUint32(72, Number(data.numLocalPrincipalGroupSids), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.localPrincipalGroupSids !== undefined) view.setBigUint64(80, data.localPrincipalGroupSids === null ? 0n : BigInt(util.toPointer(data.localPrincipalGroupSids)), true);
  // 0x58: u32
  if (data?.numRemotePrincipalGroupSids !== undefined) view.setUint32(88, Number(data.numRemotePrincipalGroupSids), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.remotePrincipalGroupSids !== undefined) view.setBigUint64(96, data.remotePrincipalGroupSids === null ? 0n : BigInt(util.toPointer(data.remotePrincipalGroupSids)), true);
  // 0x68: pointer
  if (data?.providerContextKey !== undefined) view.setBigUint64(104, data.providerContextKey === null ? 0n : BigInt(util.toPointer(data.providerContextKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_QM_FAILURE0 (size: 48)
 */
export interface FWPM_NET_EVENT_IKEEXT_QM_FAILURE0 {
  /** u32 */
  failureErrorCode: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT */
  failurePoint: IPSEC_FAILURE_POINT;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE */
  keyingModuleType: IKEEXT_KEY_MODULE_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_QM_SA_STATE */
  qmState: IKEEXT_QM_SA_STATE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE */
  saRole: IKEEXT_SA_ROLE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE */
  saTrafficType: IPSEC_TRAFFIC_TYPE;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  qmFilterId: Deno.PointerValue;
}

export const sizeofFWPM_NET_EVENT_IKEEXT_QM_FAILURE0 = 48;

export function allocFWPM_NET_EVENT_IKEEXT_QM_FAILURE0(data?: Partial<FWPM_NET_EVENT_IKEEXT_QM_FAILURE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_IKEEXT_QM_FAILURE0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.failureErrorCode !== undefined) view.setUint32(0, Number(data.failureErrorCode), true);
  // 0x04: i32
  if (data?.failurePoint !== undefined) view.setInt32(4, Number(data.failurePoint), true);
  // 0x08: i32
  if (data?.keyingModuleType !== undefined) view.setInt32(8, Number(data.keyingModuleType), true);
  // 0x0c: i32
  if (data?.qmState !== undefined) view.setInt32(12, Number(data.qmState), true);
  // 0x10: i32
  if (data?.saRole !== undefined) view.setInt32(16, Number(data.saRole), true);
  // 0x14: i32
  if (data?.saTrafficType !== undefined) view.setInt32(20, Number(data.saTrafficType), true);
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x28: u64
  if (data?.qmFilterId !== undefined) view.setBigUint64(40, BigInt(data.qmFilterId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_ (size: 64)
 */
export interface FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_ {
  /** u32 */
  failureErrorCode: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT */
  failurePoint: IPSEC_FAILURE_POINT;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE */
  keyingModuleType: IKEEXT_KEY_MODULE_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_QM_SA_STATE */
  qmState: IKEEXT_QM_SA_STATE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE */
  saRole: IKEEXT_SA_ROLE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE */
  saTrafficType: IPSEC_TRAFFIC_TYPE;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  qmFilterId: Deno.PointerValue;
  /** u64 */
  mmSaLuid: Deno.PointerValue;
  /** System.Guid */
  mmProviderContextKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_NET_EVENT_IKEEXT_QM_FAILURE1_ = 64;

export function allocFWPM_NET_EVENT_IKEEXT_QM_FAILURE1_(data?: Partial<FWPM_NET_EVENT_IKEEXT_QM_FAILURE1_>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_IKEEXT_QM_FAILURE1_);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.failureErrorCode !== undefined) view.setUint32(0, Number(data.failureErrorCode), true);
  // 0x04: i32
  if (data?.failurePoint !== undefined) view.setInt32(4, Number(data.failurePoint), true);
  // 0x08: i32
  if (data?.keyingModuleType !== undefined) view.setInt32(8, Number(data.keyingModuleType), true);
  // 0x0c: i32
  if (data?.qmState !== undefined) view.setInt32(12, Number(data.qmState), true);
  // 0x10: i32
  if (data?.saRole !== undefined) view.setInt32(16, Number(data.saRole), true);
  // 0x14: i32
  if (data?.saTrafficType !== undefined) view.setInt32(20, Number(data.saTrafficType), true);
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x28: u64
  if (data?.qmFilterId !== undefined) view.setBigUint64(40, BigInt(data.qmFilterId), true);
  // 0x30: u64
  if (data?.mmSaLuid !== undefined) view.setBigUint64(48, BigInt(data.mmSaLuid), true);
  // 0x38: pointer
  if (data?.mmProviderContextKey !== undefined) view.setBigUint64(56, data.mmProviderContextKey === null ? 0n : BigInt(util.toPointer(data.mmProviderContextKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_EM_FAILURE0 (size: 48)
 */
export interface FWPM_NET_EVENT_IKEEXT_EM_FAILURE0 {
  /** u32 */
  failureErrorCode: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT */
  failurePoint: IPSEC_FAILURE_POINT;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_SA_STATE */
  emState: IKEEXT_EM_SA_STATE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE */
  saRole: IKEEXT_SA_ROLE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE */
  emAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE;
  /** array */
  endCertHash: Deno.PointerValue | null;
  /** u64 */
  mmId: Deno.PointerValue;
  /** u64 */
  qmFilterId: Deno.PointerValue;
}

export const sizeofFWPM_NET_EVENT_IKEEXT_EM_FAILURE0 = 48;

export function allocFWPM_NET_EVENT_IKEEXT_EM_FAILURE0(data?: Partial<FWPM_NET_EVENT_IKEEXT_EM_FAILURE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_IKEEXT_EM_FAILURE0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.failureErrorCode !== undefined) view.setUint32(0, Number(data.failureErrorCode), true);
  // 0x04: i32
  if (data?.failurePoint !== undefined) view.setInt32(4, Number(data.failurePoint), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.emState !== undefined) view.setInt32(12, Number(data.emState), true);
  // 0x10: i32
  if (data?.saRole !== undefined) view.setInt32(16, Number(data.saRole), true);
  // 0x14: i32
  if (data?.emAuthMethod !== undefined) view.setInt32(20, Number(data.emAuthMethod), true);
  // 0x18: pointer
  if (data?.endCertHash !== undefined) view.setBigUint64(24, data.endCertHash === null ? 0n : BigInt(util.toPointer(data.endCertHash)), true);
  // 0x20: u64
  if (data?.mmId !== undefined) view.setBigUint64(32, BigInt(data.mmId), true);
  // 0x28: u64
  if (data?.qmFilterId !== undefined) view.setBigUint64(40, BigInt(data.qmFilterId), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IKEEXT_EM_FAILURE1 (size: 104)
 */
export interface FWPM_NET_EVENT_IKEEXT_EM_FAILURE1 {
  /** u32 */
  failureErrorCode: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_FAILURE_POINT */
  failurePoint: IPSEC_FAILURE_POINT;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_EM_SA_STATE */
  emState: IKEEXT_EM_SA_STATE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_SA_ROLE */
  saRole: IKEEXT_SA_ROLE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_AUTHENTICATION_METHOD_TYPE */
  emAuthMethod: IKEEXT_AUTHENTICATION_METHOD_TYPE;
  /** array */
  endCertHash: Deno.PointerValue | null;
  /** u64 */
  mmId: Deno.PointerValue;
  /** u64 */
  qmFilterId: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  localPrincipalNameForAuth: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  remotePrincipalNameForAuth: string | null;
  /** u32 */
  numLocalPrincipalGroupSids: number;
  /** ptr */
  localPrincipalGroupSids: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  numRemotePrincipalGroupSids: number;
  /** ptr */
  remotePrincipalGroupSids: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE */
  saTrafficType: IPSEC_TRAFFIC_TYPE;
}

export const sizeofFWPM_NET_EVENT_IKEEXT_EM_FAILURE1 = 104;

export function allocFWPM_NET_EVENT_IKEEXT_EM_FAILURE1(data?: Partial<FWPM_NET_EVENT_IKEEXT_EM_FAILURE1>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_IKEEXT_EM_FAILURE1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.failureErrorCode !== undefined) view.setUint32(0, Number(data.failureErrorCode), true);
  // 0x04: i32
  if (data?.failurePoint !== undefined) view.setInt32(4, Number(data.failurePoint), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.emState !== undefined) view.setInt32(12, Number(data.emState), true);
  // 0x10: i32
  if (data?.saRole !== undefined) view.setInt32(16, Number(data.saRole), true);
  // 0x14: i32
  if (data?.emAuthMethod !== undefined) view.setInt32(20, Number(data.emAuthMethod), true);
  // 0x18: pointer
  if (data?.endCertHash !== undefined) view.setBigUint64(24, data.endCertHash === null ? 0n : BigInt(util.toPointer(data.endCertHash)), true);
  // 0x20: u64
  if (data?.mmId !== undefined) view.setBigUint64(32, BigInt(data.mmId), true);
  // 0x28: u64
  if (data?.qmFilterId !== undefined) view.setBigUint64(40, BigInt(data.qmFilterId), true);
  // 0x30: buffer
  if (data?.localPrincipalNameForAuth !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.localPrincipalNameForAuth);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.remotePrincipalNameForAuth !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.remotePrincipalNameForAuth);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.numLocalPrincipalGroupSids !== undefined) view.setUint32(64, Number(data.numLocalPrincipalGroupSids), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.localPrincipalGroupSids !== undefined) view.setBigUint64(72, data.localPrincipalGroupSids === null ? 0n : BigInt(util.toPointer(data.localPrincipalGroupSids)), true);
  // 0x50: u32
  if (data?.numRemotePrincipalGroupSids !== undefined) view.setUint32(80, Number(data.numRemotePrincipalGroupSids), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.remotePrincipalGroupSids !== undefined) view.setBigUint64(88, data.remotePrincipalGroupSids === null ? 0n : BigInt(util.toPointer(data.remotePrincipalGroupSids)), true);
  // 0x60: i32
  if (data?.saTrafficType !== undefined) view.setInt32(96, Number(data.saTrafficType), true);
  // 0x64: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP0 (size: 16)
 */
export interface FWPM_NET_EVENT_CLASSIFY_DROP0 {
  /** u64 */
  filterId: Deno.PointerValue;
  /** u16 */
  layerId: number;
}

export const sizeofFWPM_NET_EVENT_CLASSIFY_DROP0 = 16;

export function allocFWPM_NET_EVENT_CLASSIFY_DROP0(data?: Partial<FWPM_NET_EVENT_CLASSIFY_DROP0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_CLASSIFY_DROP0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.filterId !== undefined) view.setBigUint64(0, BigInt(data.filterId), true);
  // 0x08: u16
  if (data?.layerId !== undefined) view.setUint16(8, Number(data.layerId), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP1 (size: 32)
 */
export interface FWPM_NET_EVENT_CLASSIFY_DROP1 {
  /** u64 */
  filterId: Deno.PointerValue;
  /** u16 */
  layerId: number;
  /** u32 */
  reauthReason: number;
  /** u32 */
  originalProfile: number;
  /** u32 */
  currentProfile: number;
  /** u32 */
  msFwpDirection: number;
  /** Windows.Win32.Foundation.BOOL */
  isLoopback: boolean;
}

export const sizeofFWPM_NET_EVENT_CLASSIFY_DROP1 = 32;

export function allocFWPM_NET_EVENT_CLASSIFY_DROP1(data?: Partial<FWPM_NET_EVENT_CLASSIFY_DROP1>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_CLASSIFY_DROP1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.filterId !== undefined) view.setBigUint64(0, BigInt(data.filterId), true);
  // 0x08: u16
  if (data?.layerId !== undefined) view.setUint16(8, Number(data.layerId), true);
  // 0x0a: u32
  if (data?.reauthReason !== undefined) view.setUint32(10, Number(data.reauthReason), true);
  // 0x0e: u32
  if (data?.originalProfile !== undefined) view.setUint32(14, Number(data.originalProfile), true);
  // 0x12: u32
  if (data?.currentProfile !== undefined) view.setUint32(18, Number(data.currentProfile), true);
  // 0x16: u32
  if (data?.msFwpDirection !== undefined) view.setUint32(22, Number(data.msFwpDirection), true);
  // 0x1a: i32
  if (data?.isLoopback !== undefined) view.setInt32(26, Number(data.isLoopback), true);
  // 0x1e: pad2
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP2 (size: 48)
 */
export interface FWPM_NET_EVENT_CLASSIFY_DROP2 {
  /** u64 */
  filterId: Deno.PointerValue;
  /** u16 */
  layerId: number;
  /** u32 */
  reauthReason: number;
  /** u32 */
  originalProfile: number;
  /** u32 */
  currentProfile: number;
  /** u32 */
  msFwpDirection: number;
  /** Windows.Win32.Foundation.BOOL */
  isLoopback: boolean;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  vSwitchId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  vSwitchSourcePort: number;
  /** u32 */
  vSwitchDestinationPort: number;
}

export const sizeofFWPM_NET_EVENT_CLASSIFY_DROP2 = 48;

export function allocFWPM_NET_EVENT_CLASSIFY_DROP2(data?: Partial<FWPM_NET_EVENT_CLASSIFY_DROP2>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_CLASSIFY_DROP2);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.filterId !== undefined) view.setBigUint64(0, BigInt(data.filterId), true);
  // 0x08: u16
  if (data?.layerId !== undefined) view.setUint16(8, Number(data.layerId), true);
  // 0x0a: u32
  if (data?.reauthReason !== undefined) view.setUint32(10, Number(data.reauthReason), true);
  // 0x0e: u32
  if (data?.originalProfile !== undefined) view.setUint32(14, Number(data.originalProfile), true);
  // 0x12: u32
  if (data?.currentProfile !== undefined) view.setUint32(18, Number(data.currentProfile), true);
  // 0x16: u32
  if (data?.msFwpDirection !== undefined) view.setUint32(22, Number(data.msFwpDirection), true);
  // 0x1a: i32
  if (data?.isLoopback !== undefined) view.setInt32(26, Number(data.isLoopback), true);
  // 0x1e: pad2
  // 0x20: pointer
  if (data?.vSwitchId !== undefined) view.setBigUint64(32, data.vSwitchId === null ? 0n : BigInt(util.toPointer(data.vSwitchId)), true);
  // 0x28: u32
  if (data?.vSwitchSourcePort !== undefined) view.setUint32(40, Number(data.vSwitchSourcePort), true);
  // 0x2c: u32
  if (data?.vSwitchDestinationPort !== undefined) view.setUint32(44, Number(data.vSwitchDestinationPort), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_DROP_MAC0 (size: 96)
 */
export interface FWPM_NET_EVENT_CLASSIFY_DROP_MAC0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY6 */
  localMacAddr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_ARRAY6 */
  remoteMacAddr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  mediaType: number;
  /** u32 */
  ifType: number;
  /** u16 */
  etherType: number;
  /** u32 */
  ndisPortNumber: number;
  /** u32 */
  reserved: number;
  /** u16 */
  vlanTag: number;
  /** u64 */
  ifLuid: Deno.PointerValue;
  /** u64 */
  filterId: Deno.PointerValue;
  /** u16 */
  layerId: number;
  /** u32 */
  reauthReason: number;
  /** u32 */
  originalProfile: number;
  /** u32 */
  currentProfile: number;
  /** u32 */
  msFwpDirection: number;
  /** Windows.Win32.Foundation.BOOL */
  isLoopback: boolean;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_BYTE_BLOB */
  vSwitchId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  vSwitchSourcePort: number;
  /** u32 */
  vSwitchDestinationPort: number;
}

export const sizeofFWPM_NET_EVENT_CLASSIFY_DROP_MAC0 = 96;

export function allocFWPM_NET_EVENT_CLASSIFY_DROP_MAC0(data?: Partial<FWPM_NET_EVENT_CLASSIFY_DROP_MAC0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_CLASSIFY_DROP_MAC0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.localMacAddr !== undefined) view.setBigUint64(0, data.localMacAddr === null ? 0n : BigInt(util.toPointer(data.localMacAddr)), true);
  // 0x08: pointer
  if (data?.remoteMacAddr !== undefined) view.setBigUint64(8, data.remoteMacAddr === null ? 0n : BigInt(util.toPointer(data.remoteMacAddr)), true);
  // 0x10: u32
  if (data?.mediaType !== undefined) view.setUint32(16, Number(data.mediaType), true);
  // 0x14: u32
  if (data?.ifType !== undefined) view.setUint32(20, Number(data.ifType), true);
  // 0x18: u16
  if (data?.etherType !== undefined) view.setUint16(24, Number(data.etherType), true);
  // 0x1a: u32
  if (data?.ndisPortNumber !== undefined) view.setUint32(26, Number(data.ndisPortNumber), true);
  // 0x1e: u32
  if (data?.reserved !== undefined) view.setUint32(30, Number(data.reserved), true);
  // 0x22: u16
  if (data?.vlanTag !== undefined) view.setUint16(34, Number(data.vlanTag), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.ifLuid !== undefined) view.setBigUint64(40, BigInt(data.ifLuid), true);
  // 0x30: u64
  if (data?.filterId !== undefined) view.setBigUint64(48, BigInt(data.filterId), true);
  // 0x38: u16
  if (data?.layerId !== undefined) view.setUint16(56, Number(data.layerId), true);
  // 0x3a: u32
  if (data?.reauthReason !== undefined) view.setUint32(58, Number(data.reauthReason), true);
  // 0x3e: u32
  if (data?.originalProfile !== undefined) view.setUint32(62, Number(data.originalProfile), true);
  // 0x42: u32
  if (data?.currentProfile !== undefined) view.setUint32(66, Number(data.currentProfile), true);
  // 0x46: u32
  if (data?.msFwpDirection !== undefined) view.setUint32(70, Number(data.msFwpDirection), true);
  // 0x4a: i32
  if (data?.isLoopback !== undefined) view.setInt32(74, Number(data.isLoopback), true);
  // 0x4e: pad2
  // 0x50: pointer
  if (data?.vSwitchId !== undefined) view.setBigUint64(80, data.vSwitchId === null ? 0n : BigInt(util.toPointer(data.vSwitchId)), true);
  // 0x58: u32
  if (data?.vSwitchSourcePort !== undefined) view.setUint32(88, Number(data.vSwitchSourcePort), true);
  // 0x5c: u32
  if (data?.vSwitchDestinationPort !== undefined) view.setUint32(92, Number(data.vSwitchDestinationPort), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CLASSIFY_ALLOW0 (size: 32)
 */
export interface FWPM_NET_EVENT_CLASSIFY_ALLOW0 {
  /** u64 */
  filterId: Deno.PointerValue;
  /** u16 */
  layerId: number;
  /** u32 */
  reauthReason: number;
  /** u32 */
  originalProfile: number;
  /** u32 */
  currentProfile: number;
  /** u32 */
  msFwpDirection: number;
  /** Windows.Win32.Foundation.BOOL */
  isLoopback: boolean;
}

export const sizeofFWPM_NET_EVENT_CLASSIFY_ALLOW0 = 32;

export function allocFWPM_NET_EVENT_CLASSIFY_ALLOW0(data?: Partial<FWPM_NET_EVENT_CLASSIFY_ALLOW0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_CLASSIFY_ALLOW0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.filterId !== undefined) view.setBigUint64(0, BigInt(data.filterId), true);
  // 0x08: u16
  if (data?.layerId !== undefined) view.setUint16(8, Number(data.layerId), true);
  // 0x0a: u32
  if (data?.reauthReason !== undefined) view.setUint32(10, Number(data.reauthReason), true);
  // 0x0e: u32
  if (data?.originalProfile !== undefined) view.setUint32(14, Number(data.originalProfile), true);
  // 0x12: u32
  if (data?.currentProfile !== undefined) view.setUint32(18, Number(data.currentProfile), true);
  // 0x16: u32
  if (data?.msFwpDirection !== undefined) view.setUint32(22, Number(data.msFwpDirection), true);
  // 0x1a: i32
  if (data?.isLoopback !== undefined) view.setInt32(26, Number(data.isLoopback), true);
  // 0x1e: pad2
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_KERNEL_DROP0 (size: 32)
 */
export interface FWPM_NET_EVENT_IPSEC_KERNEL_DROP0 {
  /** i32 */
  failureStatus: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_DIRECTION */
  direction: FWP_DIRECTION;
  /** u32 */
  spi: number;
  /** u64 */
  filterId: Deno.PointerValue;
  /** u16 */
  layerId: number;
}

export const sizeofFWPM_NET_EVENT_IPSEC_KERNEL_DROP0 = 32;

export function allocFWPM_NET_EVENT_IPSEC_KERNEL_DROP0(data?: Partial<FWPM_NET_EVENT_IPSEC_KERNEL_DROP0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_IPSEC_KERNEL_DROP0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.failureStatus !== undefined) view.setInt32(0, Number(data.failureStatus), true);
  // 0x04: i32
  if (data?.direction !== undefined) view.setInt32(4, Number(data.direction), true);
  // 0x08: u32
  if (data?.spi !== undefined) view.setUint32(8, Number(data.spi), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.filterId !== undefined) view.setBigUint64(16, BigInt(data.filterId), true);
  // 0x18: u16
  if (data?.layerId !== undefined) view.setUint16(24, Number(data.layerId), true);
  // 0x1a: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_IPSEC_DOSP_DROP0 (size: 32)
 */
export interface FWPM_NET_EVENT_IPSEC_DOSP_DROP0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  failureStatus: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_DIRECTION */
  direction: FWP_DIRECTION;
}

export const sizeofFWPM_NET_EVENT_IPSEC_DOSP_DROP0 = 32;

export function allocFWPM_NET_EVENT_IPSEC_DOSP_DROP0(data?: Partial<FWPM_NET_EVENT_IPSEC_DOSP_DROP0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_IPSEC_DOSP_DROP0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ipVersion !== undefined) view.setInt32(0, Number(data.ipVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: i32
  if (data?.failureStatus !== undefined) view.setInt32(24, Number(data.failureStatus), true);
  // 0x1c: i32
  if (data?.direction !== undefined) view.setInt32(28, Number(data.direction), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_DROP0 (size: 24)
 */
export interface FWPM_NET_EVENT_CAPABILITY_DROP0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_APPC_NETWORK_CAPABILITY_TYPE */
  networkCapabilityId: FWPM_APPC_NETWORK_CAPABILITY_TYPE;
  /** u64 */
  filterId: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  isLoopback: boolean;
}

export const sizeofFWPM_NET_EVENT_CAPABILITY_DROP0 = 24;

export function allocFWPM_NET_EVENT_CAPABILITY_DROP0(data?: Partial<FWPM_NET_EVENT_CAPABILITY_DROP0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_CAPABILITY_DROP0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.networkCapabilityId !== undefined) view.setInt32(0, Number(data.networkCapabilityId), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.filterId !== undefined) view.setBigUint64(8, BigInt(data.filterId), true);
  // 0x10: i32
  if (data?.isLoopback !== undefined) view.setInt32(16, Number(data.isLoopback), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CAPABILITY_ALLOW0 (size: 24)
 */
export interface FWPM_NET_EVENT_CAPABILITY_ALLOW0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_APPC_NETWORK_CAPABILITY_TYPE */
  networkCapabilityId: FWPM_APPC_NETWORK_CAPABILITY_TYPE;
  /** u64 */
  filterId: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  isLoopback: boolean;
}

export const sizeofFWPM_NET_EVENT_CAPABILITY_ALLOW0 = 24;

export function allocFWPM_NET_EVENT_CAPABILITY_ALLOW0(data?: Partial<FWPM_NET_EVENT_CAPABILITY_ALLOW0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_CAPABILITY_ALLOW0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.networkCapabilityId !== undefined) view.setInt32(0, Number(data.networkCapabilityId), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.filterId !== undefined) view.setBigUint64(8, BigInt(data.filterId), true);
  // 0x10: i32
  if (data?.isLoopback !== undefined) view.setInt32(16, Number(data.isLoopback), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_ (size: 8)
 */
export interface FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_ {
  /** u32 */
  spi: number;
}

export const sizeofFWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_ = 8;

export function allocFWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_(data?: Partial<FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_LPM_PACKET_ARRIVAL0_);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.spi !== undefined) view.setUint32(0, Number(data.spi), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT0 (size: 24)
 */
export interface FWPM_NET_EVENT0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER0 */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE */
  type: FWPM_NET_EVENT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_NET_EVENT0 = 24;

export function allocFWPM_NET_EVENT0(data?: Partial<FWPM_NET_EVENT0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: i32
  if (data?.type !== undefined) view.setInt32(8, Number(data.type), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT1 (size: 24)
 */
export interface FWPM_NET_EVENT1 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER1 */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE */
  type: FWPM_NET_EVENT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_NET_EVENT1 = 24;

export function allocFWPM_NET_EVENT1(data?: Partial<FWPM_NET_EVENT1>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: i32
  if (data?.type !== undefined) view.setInt32(8, Number(data.type), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT2 (size: 24)
 */
export interface FWPM_NET_EVENT2 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER2 */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE */
  type: FWPM_NET_EVENT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_NET_EVENT2 = 24;

export function allocFWPM_NET_EVENT2(data?: Partial<FWPM_NET_EVENT2>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: i32
  if (data?.type !== undefined) view.setInt32(8, Number(data.type), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT3 (size: 24)
 */
export interface FWPM_NET_EVENT3 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER3 */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE */
  type: FWPM_NET_EVENT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_NET_EVENT3 = 24;

export function allocFWPM_NET_EVENT3(data?: Partial<FWPM_NET_EVENT3>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: i32
  if (data?.type !== undefined) view.setInt32(8, Number(data.type), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT4_ (size: 24)
 */
export interface FWPM_NET_EVENT4_ {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER3 */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE */
  type: FWPM_NET_EVENT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_NET_EVENT4_ = 24;

export function allocFWPM_NET_EVENT4_(data?: Partial<FWPM_NET_EVENT4_>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT4_);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: i32
  if (data?.type !== undefined) view.setInt32(8, Number(data.type), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT5_ (size: 24)
 */
export interface FWPM_NET_EVENT5_ {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_HEADER3 */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_TYPE */
  type: FWPM_NET_EVENT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_NET_EVENT5_ = 24;

export function allocFWPM_NET_EVENT5_(data?: Partial<FWPM_NET_EVENT5_>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT5_);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: i32
  if (data?.type !== undefined) view.setInt32(8, Number(data.type), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_ENUM_TEMPLATE0 (size: 32)
 */
export interface FWPM_NET_EVENT_ENUM_TEMPLATE0 {
  /** Windows.Win32.Foundation.FILETIME */
  startTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  endTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  numFilterConditions: number;
  /** ptr */
  filterCondition: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWPM_NET_EVENT_ENUM_TEMPLATE0 = 32;

export function allocFWPM_NET_EVENT_ENUM_TEMPLATE0(data?: Partial<FWPM_NET_EVENT_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.startTime !== undefined) view.setBigUint64(0, data.startTime === null ? 0n : BigInt(util.toPointer(data.startTime)), true);
  // 0x08: pointer
  if (data?.endTime !== undefined) view.setBigUint64(8, data.endTime === null ? 0n : BigInt(util.toPointer(data.endTime)), true);
  // 0x10: u32
  if (data?.numFilterConditions !== undefined) view.setUint32(16, Number(data.numFilterConditions), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.filterCondition !== undefined) view.setBigUint64(24, data.filterCondition === null ? 0n : BigInt(util.toPointer(data.filterCondition)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_SUBSCRIPTION0 (size: 24)
 */
export interface FWPM_NET_EVENT_SUBSCRIPTION0 {
  /** ptr */
  enumTemplate: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  flags: number;
  /** System.Guid */
  sessionKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_NET_EVENT_SUBSCRIPTION0 = 24;

export function allocFWPM_NET_EVENT_SUBSCRIPTION0(data?: Partial<FWPM_NET_EVENT_SUBSCRIPTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_NET_EVENT_SUBSCRIPTION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.enumTemplate !== undefined) view.setBigUint64(0, data.enumTemplate === null ? 0n : BigInt(util.toPointer(data.enumTemplate)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.sessionKey !== undefined) view.setBigUint64(16, data.sessionKey === null ? 0n : BigInt(util.toPointer(data.sessionKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SYSTEM_PORTS_BY_TYPE0 (size: 16)
 */
export interface FWPM_SYSTEM_PORTS_BY_TYPE0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SYSTEM_PORT_TYPE */
  type: FWPM_SYSTEM_PORT_TYPE;
  /** u32 */
  numPorts: number;
  /** ptr */
  ports: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWPM_SYSTEM_PORTS_BY_TYPE0 = 16;

export function allocFWPM_SYSTEM_PORTS_BY_TYPE0(data?: Partial<FWPM_SYSTEM_PORTS_BY_TYPE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_SYSTEM_PORTS_BY_TYPE0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: u32
  if (data?.numPorts !== undefined) view.setUint32(4, Number(data.numPorts), true);
  // 0x08: pointer
  if (data?.ports !== undefined) view.setBigUint64(8, data.ports === null ? 0n : BigInt(util.toPointer(data.ports)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SYSTEM_PORTS0 (size: 16)
 */
export interface FWPM_SYSTEM_PORTS0 {
  /** u32 */
  numTypes: number;
  /** ptr */
  types: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFWPM_SYSTEM_PORTS0 = 16;

export function allocFWPM_SYSTEM_PORTS0(data?: Partial<FWPM_SYSTEM_PORTS0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_SYSTEM_PORTS0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numTypes !== undefined) view.setUint32(0, Number(data.numTypes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.types !== undefined) view.setBigUint64(8, data.types === null ? 0n : BigInt(util.toPointer(data.types)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION0 (size: 104)
 */
export interface FWPM_CONNECTION0 {
  /** u64 */
  connectionId: Deno.PointerValue;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWP_IP_VERSION */
  ipVersion: FWP_IP_VERSION;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  providerKey: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_TRAFFIC_TYPE */
  ipsecTrafficModeType: IPSEC_TRAFFIC_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_KEY_MODULE_TYPE */
  keyModuleType: IKEEXT_KEY_MODULE_TYPE;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_PROPOSAL0 */
  mmCrypto: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL2 */
  mmPeer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IKEEXT_CREDENTIAL2 */
  emPeer: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  bytesTransferredIn: Deno.PointerValue;
  /** u64 */
  bytesTransferredOut: Deno.PointerValue;
  /** u64 */
  bytesTransferredTotal: Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  startSysTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_CONNECTION0 = 104;

export function allocFWPM_CONNECTION0(data?: Partial<FWPM_CONNECTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_CONNECTION0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.connectionId !== undefined) view.setBigUint64(0, BigInt(data.connectionId), true);
  // 0x08: i32
  if (data?.ipVersion !== undefined) view.setInt32(8, Number(data.ipVersion), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: pointer
  if (data?.providerKey !== undefined) view.setBigUint64(32, data.providerKey === null ? 0n : BigInt(util.toPointer(data.providerKey)), true);
  // 0x28: i32
  if (data?.ipsecTrafficModeType !== undefined) view.setInt32(40, Number(data.ipsecTrafficModeType), true);
  // 0x2c: i32
  if (data?.keyModuleType !== undefined) view.setInt32(44, Number(data.keyModuleType), true);
  // 0x30: pointer
  if (data?.mmCrypto !== undefined) view.setBigUint64(48, data.mmCrypto === null ? 0n : BigInt(util.toPointer(data.mmCrypto)), true);
  // 0x38: pointer
  if (data?.mmPeer !== undefined) view.setBigUint64(56, data.mmPeer === null ? 0n : BigInt(util.toPointer(data.mmPeer)), true);
  // 0x40: pointer
  if (data?.emPeer !== undefined) view.setBigUint64(64, data.emPeer === null ? 0n : BigInt(util.toPointer(data.emPeer)), true);
  // 0x48: u64
  if (data?.bytesTransferredIn !== undefined) view.setBigUint64(72, BigInt(data.bytesTransferredIn), true);
  // 0x50: u64
  if (data?.bytesTransferredOut !== undefined) view.setBigUint64(80, BigInt(data.bytesTransferredOut), true);
  // 0x58: u64
  if (data?.bytesTransferredTotal !== undefined) view.setBigUint64(88, BigInt(data.bytesTransferredTotal), true);
  // 0x60: pointer
  if (data?.startSysTime !== undefined) view.setBigUint64(96, data.startSysTime === null ? 0n : BigInt(util.toPointer(data.startSysTime)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION_ENUM_TEMPLATE0 (size: 16)
 */
export interface FWPM_CONNECTION_ENUM_TEMPLATE0 {
  /** u64 */
  connectionId: Deno.PointerValue;
  /** u32 */
  flags: number;
}

export const sizeofFWPM_CONNECTION_ENUM_TEMPLATE0 = 16;

export function allocFWPM_CONNECTION_ENUM_TEMPLATE0(data?: Partial<FWPM_CONNECTION_ENUM_TEMPLATE0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_CONNECTION_ENUM_TEMPLATE0);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.connectionId !== undefined) view.setBigUint64(0, BigInt(data.connectionId), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION_SUBSCRIPTION0 (size: 24)
 */
export interface FWPM_CONNECTION_SUBSCRIPTION0 {
  /** ptr */
  enumTemplate: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  flags: number;
  /** System.Guid */
  sessionKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_CONNECTION_SUBSCRIPTION0 = 24;

export function allocFWPM_CONNECTION_SUBSCRIPTION0(data?: Partial<FWPM_CONNECTION_SUBSCRIPTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_CONNECTION_SUBSCRIPTION0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.enumTemplate !== undefined) view.setBigUint64(0, data.enumTemplate === null ? 0n : BigInt(util.toPointer(data.enumTemplate)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.sessionKey !== undefined) view.setBigUint64(16, data.sessionKey === null ? 0n : BigInt(util.toPointer(data.sessionKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_VSWITCH_EVENT0 (size: 24)
 */
export interface FWPM_VSWITCH_EVENT0 {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_VSWITCH_EVENT_TYPE */
  eventType: FWPM_VSWITCH_EVENT_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  vSwitchId: string | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_VSWITCH_EVENT0 = 24;

export function allocFWPM_VSWITCH_EVENT0(data?: Partial<FWPM_VSWITCH_EVENT0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_VSWITCH_EVENT0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eventType !== undefined) view.setInt32(0, Number(data.eventType), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.vSwitchId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.vSwitchId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_VSWITCH_EVENT_SUBSCRIPTION0 (size: 16)
 */
export interface FWPM_VSWITCH_EVENT_SUBSCRIPTION0 {
  /** u32 */
  flags: number;
  /** System.Guid */
  sessionKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFWPM_VSWITCH_EVENT_SUBSCRIPTION0 = 16;

export function allocFWPM_VSWITCH_EVENT_SUBSCRIPTION0(data?: Partial<FWPM_VSWITCH_EVENT_SUBSCRIPTION0>): Uint8Array {
  const buf = new Uint8Array(sizeofFWPM_VSWITCH_EVENT_SUBSCRIPTION0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sessionKey !== undefined) view.setBigUint64(8, data.sessionKey === null ? 0n : BigInt(util.toPointer(data.sessionKey)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER_CALLBACKS0 (size: 40)
 */
export interface IPSEC_KEY_MANAGER_CALLBACKS0 {
  /** System.Guid */
  reserved: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0 */
  keyDictationCheck: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER_DICTATE_KEY0 */
  keyDictation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_KEY_MANAGER_NOTIFY_KEY0 */
  keyNotify: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPSEC_KEY_MANAGER_CALLBACKS0 = 40;

export function allocIPSEC_KEY_MANAGER_CALLBACKS0(data?: Partial<IPSEC_KEY_MANAGER_CALLBACKS0>): Uint8Array {
  const buf = new Uint8Array(sizeofIPSEC_KEY_MANAGER_CALLBACKS0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.reserved !== undefined) view.setBigUint64(0, data.reserved === null ? 0n : BigInt(util.toPointer(data.reserved)), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.keyDictationCheck !== undefined) view.setBigUint64(16, data.keyDictationCheck === null ? 0n : BigInt(util.toPointer(data.keyDictationCheck)), true);
  // 0x18: pointer
  if (data?.keyDictation !== undefined) view.setBigUint64(24, data.keyDictation === null ? 0n : BigInt(util.toPointer(data.keyDictation)), true);
  // 0x20: pointer
  if (data?.keyNotify !== undefined) view.setBigUint64(32, data.keyNotify === null ? 0n : BigInt(util.toPointer(data.keyNotify)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_OUI (size: 16)
 */
export interface DL_OUI {
  /** array */
  Byte: Deno.PointerValue | null;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDL_OUI = 16;

export function allocDL_OUI(data?: Partial<DL_OUI>): Uint8Array {
  const buf = new Uint8Array(sizeofDL_OUI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Byte !== undefined) view.setBigUint64(0, data.Byte === null ? 0n : BigInt(util.toPointer(data.Byte)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_EI48 (size: 8)
 */
export interface DL_EI48 {
  /** array */
  Byte: Deno.PointerValue | null;
}

export const sizeofDL_EI48 = 8;

export function allocDL_EI48(data?: Partial<DL_EI48>): Uint8Array {
  const buf = new Uint8Array(sizeofDL_EI48);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Byte !== undefined) view.setBigUint64(0, data.Byte === null ? 0n : BigInt(util.toPointer(data.Byte)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_EUI48 (size: 16)
 */
export interface DL_EUI48 {
  /** array */
  Byte: Deno.PointerValue | null;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDL_EUI48 = 16;

export function allocDL_EUI48(data?: Partial<DL_EUI48>): Uint8Array {
  const buf = new Uint8Array(sizeofDL_EUI48);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Byte !== undefined) view.setBigUint64(0, data.Byte === null ? 0n : BigInt(util.toPointer(data.Byte)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_EI64 (size: 8)
 */
export interface DL_EI64 {
  /** array */
  Byte: Deno.PointerValue | null;
}

export const sizeofDL_EI64 = 8;

export function allocDL_EI64(data?: Partial<DL_EI64>): Uint8Array {
  const buf = new Uint8Array(sizeofDL_EI64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Byte !== undefined) view.setBigUint64(0, data.Byte === null ? 0n : BigInt(util.toPointer(data.Byte)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_EUI64 (size: 24)
 */
export interface DL_EUI64 {
  /** array */
  Byte: Deno.PointerValue | null;
  /** u64 */
  Value: Deno.PointerValue;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDL_EUI64 = 24;

export function allocDL_EUI64(data?: Partial<DL_EUI64>): Uint8Array {
  const buf = new Uint8Array(sizeofDL_EUI64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Byte !== undefined) view.setBigUint64(0, data.Byte === null ? 0n : BigInt(util.toPointer(data.Byte)), true);
  // 0x08: u64
  if (data?.Value !== undefined) view.setBigUint64(8, BigInt(data.Value), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.SNAP_HEADER (size: 24)
 */
export interface SNAP_HEADER {
  /** u8 */
  Dsap: number;
  /** u8 */
  Ssap: number;
  /** u8 */
  Control: number;
  /** array */
  Oui: Deno.PointerValue | null;
  /** u16 */
  Type: number;
}

export const sizeofSNAP_HEADER = 24;

export function allocSNAP_HEADER(data?: Partial<SNAP_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSNAP_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Dsap !== undefined) view.setUint8(0, Number(data.Dsap));
  // 0x01: u8
  if (data?.Ssap !== undefined) view.setUint8(1, Number(data.Ssap));
  // 0x02: u8
  if (data?.Control !== undefined) view.setUint8(2, Number(data.Control));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.Oui !== undefined) view.setBigUint64(8, data.Oui === null ? 0n : BigInt(util.toPointer(data.Oui)), true);
  // 0x10: u16
  if (data?.Type !== undefined) view.setUint16(16, Number(data.Type), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ETHERNET_HEADER (size: 24)
 */
export interface ETHERNET_HEADER {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_EUI48 */
  Destination: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_EUI48 */
  Source: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofETHERNET_HEADER = 24;

export function allocETHERNET_HEADER(data?: Partial<ETHERNET_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofETHERNET_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Destination !== undefined) view.setBigUint64(0, data.Destination === null ? 0n : BigInt(util.toPointer(data.Destination)), true);
  // 0x08: pointer
  if (data?.Source !== undefined) view.setBigUint64(8, data.Source === null ? 0n : BigInt(util.toPointer(data.Source)), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.VLAN_TAG (size: 16)
 */
export interface VLAN_TAG {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Type: number;
}

export const sizeofVLAN_TAG = 16;

export function allocVLAN_TAG(data?: Partial<VLAN_TAG>): Uint8Array {
  const buf = new Uint8Array(sizeofVLAN_TAG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.Type !== undefined) view.setUint16(8, Number(data.Type), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_HEADER (size: 8)
 */
export interface ICMP_HEADER {
  /** u8 */
  Type: number;
  /** u8 */
  Code: number;
  /** u16 */
  Checksum: number;
}

export const sizeofICMP_HEADER = 8;

export function allocICMP_HEADER(data?: Partial<ICMP_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofICMP_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Type !== undefined) view.setUint8(0, Number(data.Type));
  // 0x01: u8
  if (data?.Code !== undefined) view.setUint8(1, Number(data.Code));
  // 0x02: u16
  if (data?.Checksum !== undefined) view.setUint16(2, Number(data.Checksum), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_MSC_DATA (size: 8)
 */
export interface RFCOMM_MSC_DATA {
  /** u8 */
  Signals: number;
  /** u8 */
  Break: number;
}

export const sizeofRFCOMM_MSC_DATA = 8;

export function allocRFCOMM_MSC_DATA(data?: Partial<RFCOMM_MSC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_MSC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Signals !== undefined) view.setUint8(0, Number(data.Signals));
  // 0x01: u8
  if (data?.Break !== undefined) view.setUint8(1, Number(data.Break));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_RLS_DATA (size: 8)
 */
export interface RFCOMM_RLS_DATA {
  /** u8 */
  LineStatus: number;
}

export const sizeofRFCOMM_RLS_DATA = 8;

export function allocRFCOMM_RLS_DATA(data?: Partial<RFCOMM_RLS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_RLS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.LineStatus !== undefined) view.setUint8(0, Number(data.LineStatus));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_RPN_DATA (size: 8)
 */
export interface RFCOMM_RPN_DATA {
  /** u8 */
  Baud: number;
  /** u8 */
  Data: number;
  /** u8 */
  FlowControl: number;
  /** u8 */
  XonChar: number;
  /** u8 */
  XoffChar: number;
  /** u8 */
  ParameterMask1: number;
  /** u8 */
  ParameterMask2: number;
}

export const sizeofRFCOMM_RPN_DATA = 8;

export function allocRFCOMM_RPN_DATA(data?: Partial<RFCOMM_RPN_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_RPN_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Baud !== undefined) view.setUint8(0, Number(data.Baud));
  // 0x01: u8
  if (data?.Data !== undefined) view.setUint8(1, Number(data.Data));
  // 0x02: u8
  if (data?.FlowControl !== undefined) view.setUint8(2, Number(data.FlowControl));
  // 0x03: u8
  if (data?.XonChar !== undefined) view.setUint8(3, Number(data.XonChar));
  // 0x04: u8
  if (data?.XoffChar !== undefined) view.setUint8(4, Number(data.XoffChar));
  // 0x05: u8
  if (data?.ParameterMask1 !== undefined) view.setUint8(5, Number(data.ParameterMask1));
  // 0x06: u8
  if (data?.ParameterMask2 !== undefined) view.setUint8(6, Number(data.ParameterMask2));
  // 0x07: pad1
  return buf;
}

/**
 * _Data_e__Union (size: 24)
 */
export interface _Data_e__Union {
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_MSC_DATA */
  MSC: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_RLS_DATA */
  RLS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_RPN_DATA */
  RPN: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Data_e__Union = 24;

export function alloc_Data_e__Union(data?: Partial<_Data_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Data_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MSC !== undefined) view.setBigUint64(0, data.MSC === null ? 0n : BigInt(util.toPointer(data.MSC)), true);
  // 0x08: pointer
  if (data?.RLS !== undefined) view.setBigUint64(8, data.RLS === null ? 0n : BigInt(util.toPointer(data.RLS)), true);
  // 0x10: pointer
  if (data?.RPN !== undefined) view.setBigUint64(16, data.RPN === null ? 0n : BigInt(util.toPointer(data.RPN)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE (size: 16)
 */
export interface ICMP_MESSAGE {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** _Data_e__Union */
  Data: Uint8Array | Deno.PointerValue | null;
}

export const sizeofICMP_MESSAGE = 16;

export function allocICMP_MESSAGE(data?: Partial<ICMP_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofICMP_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * _S_un_ports_e__Struct (size: 8)
 */
export interface _S_un_ports_e__Struct {
  /** u16 */
  s_srcport: number;
  /** u16 */
  s_dstport: number;
}

export const sizeof_S_un_ports_e__Struct = 8;

export function alloc_S_un_ports_e__Struct(data?: Partial<_S_un_ports_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_ports_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.s_srcport !== undefined) view.setUint16(0, Number(data.s_srcport), true);
  // 0x02: u16
  if (data?.s_dstport !== undefined) view.setUint16(2, Number(data.s_dstport), true);
  // 0x04: pad4
  return buf;
}

/**
 * _S_un_icmp_e__Struct (size: 8)
 */
export interface _S_un_icmp_e__Struct {
  /** u8 */
  s_type: number;
  /** u8 */
  s_code: number;
  /** u16 */
  filler: number;
}

export const sizeof_S_un_icmp_e__Struct = 8;

export function alloc_S_un_icmp_e__Struct(data?: Partial<_S_un_icmp_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_icmp_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.s_type !== undefined) view.setUint8(0, Number(data.s_type));
  // 0x01: u8
  if (data?.s_code !== undefined) view.setUint8(1, Number(data.s_code));
  // 0x02: u16
  if (data?.filler !== undefined) view.setUint16(2, Number(data.filler), true);
  // 0x04: pad4
  return buf;
}

/**
 * _S_un_e__Union (size: 24)
 */
export interface _S_un_e__Union {
  /** _S_un_ports_e__Struct */
  S_un_ports: Uint8Array | Deno.PointerValue | null;
  /** _S_un_icmp_e__Struct */
  S_un_icmp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  S_Spi: number;
}

export const sizeof_S_un_e__Union = 24;

export function alloc_S_un_e__Union(data?: Partial<_S_un_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un_ports !== undefined) view.setBigUint64(0, data.S_un_ports === null ? 0n : BigInt(util.toPointer(data.S_un_ports)), true);
  // 0x08: pointer
  if (data?.S_un_icmp !== undefined) view.setBigUint64(8, data.S_un_icmp === null ? 0n : BigInt(util.toPointer(data.S_un_icmp)), true);
  // 0x10: u32
  if (data?.S_Spi !== undefined) view.setUint32(16, Number(data.S_Spi), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN_ADDR (size: 8)
 */
export interface IN_ADDR {
  /** _S_un_e__Union */
  S_un: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIN_ADDR = 8;

export function allocIN_ADDR(data?: Partial<IN_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un !== undefined) view.setBigUint64(0, data.S_un === null ? 0n : BigInt(util.toPointer(data.S_un)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV4_HEADER (size: 56)
 */
export interface IPV4_HEADER {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  TotalLength: number;
  /** u16 */
  Identification: number;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  TimeToLive: number;
  /** u8 */
  Protocol: number;
  /** u16 */
  HeaderChecksum: number;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  SourceAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  DestinationAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPV4_HEADER = 56;

export function allocIPV4_HEADER(data?: Partial<IPV4_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV4_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x10: u16
  if (data?.TotalLength !== undefined) view.setUint16(16, Number(data.TotalLength), true);
  // 0x12: u16
  if (data?.Identification !== undefined) view.setUint16(18, Number(data.Identification), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(24, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x20: u8
  if (data?.TimeToLive !== undefined) view.setUint8(32, Number(data.TimeToLive));
  // 0x21: u8
  if (data?.Protocol !== undefined) view.setUint8(33, Number(data.Protocol));
  // 0x22: u16
  if (data?.HeaderChecksum !== undefined) view.setUint16(34, Number(data.HeaderChecksum), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.SourceAddress !== undefined) view.setBigUint64(40, data.SourceAddress === null ? 0n : BigInt(util.toPointer(data.SourceAddress)), true);
  // 0x30: pointer
  if (data?.DestinationAddress !== undefined) view.setBigUint64(48, data.DestinationAddress === null ? 0n : BigInt(util.toPointer(data.DestinationAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV4_OPTION_HEADER (size: 16)
 */
export interface IPV4_OPTION_HEADER {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  OptionLength: number;
}

export const sizeofIPV4_OPTION_HEADER = 16;

export function allocIPV4_OPTION_HEADER(data?: Partial<IPV4_OPTION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV4_OPTION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u8
  if (data?.OptionLength !== undefined) view.setUint8(8, Number(data.OptionLength));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV4_TIMESTAMP_OPTION (size: 24)
 */
export interface IPV4_TIMESTAMP_OPTION {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV4_OPTION_HEADER */
  OptionHeader: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Pointer: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPV4_TIMESTAMP_OPTION = 24;

export function allocIPV4_TIMESTAMP_OPTION(data?: Partial<IPV4_TIMESTAMP_OPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV4_TIMESTAMP_OPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OptionHeader !== undefined) view.setBigUint64(0, data.OptionHeader === null ? 0n : BigInt(util.toPointer(data.OptionHeader)), true);
  // 0x08: u8
  if (data?.Pointer !== undefined) view.setUint8(8, Number(data.Pointer));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV4_ROUTING_HEADER (size: 16)
 */
export interface IPV4_ROUTING_HEADER {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV4_OPTION_HEADER */
  OptionHeader: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Pointer: number;
}

export const sizeofIPV4_ROUTING_HEADER = 16;

export function allocIPV4_ROUTING_HEADER(data?: Partial<IPV4_ROUTING_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV4_ROUTING_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OptionHeader !== undefined) view.setBigUint64(0, data.OptionHeader === null ? 0n : BigInt(util.toPointer(data.OptionHeader)), true);
  // 0x08: u8
  if (data?.Pointer !== undefined) view.setUint8(8, Number(data.Pointer));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMPV4_ROUTER_SOLICIT (size: 8)
 */
export interface ICMPV4_ROUTER_SOLICIT {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE */
  RsHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofICMPV4_ROUTER_SOLICIT = 8;

export function allocICMPV4_ROUTER_SOLICIT(data?: Partial<ICMPV4_ROUTER_SOLICIT>): Uint8Array {
  const buf = new Uint8Array(sizeofICMPV4_ROUTER_SOLICIT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RsHeader !== undefined) view.setBigUint64(0, data.RsHeader === null ? 0n : BigInt(util.toPointer(data.RsHeader)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMPV4_ROUTER_ADVERT_HEADER (size: 8)
 */
export interface ICMPV4_ROUTER_ADVERT_HEADER {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE */
  RaHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofICMPV4_ROUTER_ADVERT_HEADER = 8;

export function allocICMPV4_ROUTER_ADVERT_HEADER(data?: Partial<ICMPV4_ROUTER_ADVERT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofICMPV4_ROUTER_ADVERT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RaHeader !== undefined) view.setBigUint64(0, data.RaHeader === null ? 0n : BigInt(util.toPointer(data.RaHeader)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMPV4_ROUTER_ADVERT_ENTRY (size: 16)
 */
export interface ICMPV4_ROUTER_ADVERT_ENTRY {
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  RouterAdvertAddr: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  PreferenceLevel: number;
}

export const sizeofICMPV4_ROUTER_ADVERT_ENTRY = 16;

export function allocICMPV4_ROUTER_ADVERT_ENTRY(data?: Partial<ICMPV4_ROUTER_ADVERT_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofICMPV4_ROUTER_ADVERT_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RouterAdvertAddr !== undefined) view.setBigUint64(0, data.RouterAdvertAddr === null ? 0n : BigInt(util.toPointer(data.RouterAdvertAddr)), true);
  // 0x08: i32
  if (data?.PreferenceLevel !== undefined) view.setInt32(8, Number(data.PreferenceLevel), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMPV4_TIMESTAMP_MESSAGE (size: 24)
 */
export interface ICMPV4_TIMESTAMP_MESSAGE {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OriginateTimestamp: number;
  /** u32 */
  ReceiveTimestamp: number;
  /** u32 */
  TransmitTimestamp: number;
}

export const sizeofICMPV4_TIMESTAMP_MESSAGE = 24;

export function allocICMPV4_TIMESTAMP_MESSAGE(data?: Partial<ICMPV4_TIMESTAMP_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofICMPV4_TIMESTAMP_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.OriginateTimestamp !== undefined) view.setUint32(8, Number(data.OriginateTimestamp), true);
  // 0x0c: u32
  if (data?.ReceiveTimestamp !== undefined) view.setUint32(12, Number(data.ReceiveTimestamp), true);
  // 0x10: u32
  if (data?.TransmitTimestamp !== undefined) view.setUint32(16, Number(data.TransmitTimestamp), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMPV4_ADDRESS_MASK_MESSAGE (size: 16)
 */
export interface ICMPV4_ADDRESS_MASK_MESSAGE {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AddressMask: number;
}

export const sizeofICMPV4_ADDRESS_MASK_MESSAGE = 16;

export function allocICMPV4_ADDRESS_MASK_MESSAGE(data?: Partial<ICMPV4_ADDRESS_MASK_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofICMPV4_ADDRESS_MASK_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.AddressMask !== undefined) view.setUint32(8, Number(data.AddressMask), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ARP_HEADER (size: 16)
 */
export interface ARP_HEADER {
  /** u16 */
  HardwareAddressSpace: number;
  /** u16 */
  ProtocolAddressSpace: number;
  /** u8 */
  HardwareAddressLength: number;
  /** u8 */
  ProtocolAddressLength: number;
  /** u16 */
  Opcode: number;
  /** array */
  SenderHardwareAddress: Deno.PointerValue | null;
}

export const sizeofARP_HEADER = 16;

export function allocARP_HEADER(data?: Partial<ARP_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofARP_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.HardwareAddressSpace !== undefined) view.setUint16(0, Number(data.HardwareAddressSpace), true);
  // 0x02: u16
  if (data?.ProtocolAddressSpace !== undefined) view.setUint16(2, Number(data.ProtocolAddressSpace), true);
  // 0x04: u8
  if (data?.HardwareAddressLength !== undefined) view.setUint8(4, Number(data.HardwareAddressLength));
  // 0x05: u8
  if (data?.ProtocolAddressLength !== undefined) view.setUint8(5, Number(data.ProtocolAddressLength));
  // 0x06: u16
  if (data?.Opcode !== undefined) view.setUint16(6, Number(data.Opcode), true);
  // 0x08: pointer
  if (data?.SenderHardwareAddress !== undefined) view.setBigUint64(8, data.SenderHardwareAddress === null ? 0n : BigInt(util.toPointer(data.SenderHardwareAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IGMP_HEADER (size: 32)
 */
export interface IGMP_HEADER {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Checksum: number;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  MulticastAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIGMP_HEADER = 32;

export function allocIGMP_HEADER(data?: Partial<IGMP_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIGMP_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x10: u16
  if (data?.Checksum !== undefined) view.setUint16(16, Number(data.Checksum), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.MulticastAddress !== undefined) view.setBigUint64(24, data.MulticastAddress === null ? 0n : BigInt(util.toPointer(data.MulticastAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IGMPV3_QUERY_HEADER (size: 56)
 */
export interface IGMPV3_QUERY_HEADER {
  /** u8 */
  Type: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Checksum: number;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  MulticastAddress: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  _bitfield: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  SourceCount: number;
}

export const sizeofIGMPV3_QUERY_HEADER = 56;

export function allocIGMPV3_QUERY_HEADER(data?: Partial<IGMPV3_QUERY_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIGMPV3_QUERY_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Type !== undefined) view.setUint8(0, Number(data.Type));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u16
  if (data?.Checksum !== undefined) view.setUint16(16, Number(data.Checksum), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.MulticastAddress !== undefined) view.setBigUint64(24, data.MulticastAddress === null ? 0n : BigInt(util.toPointer(data.MulticastAddress)), true);
  // 0x20: u8
  if (data?._bitfield !== undefined) view.setUint8(32, Number(data._bitfield));
  // 0x21: pad7
  // 0x28: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(40, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x30: u16
  if (data?.SourceCount !== undefined) view.setUint16(48, Number(data.SourceCount), true);
  // 0x32: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IGMPV3_REPORT_RECORD_HEADER (size: 16)
 */
export interface IGMPV3_REPORT_RECORD_HEADER {
  /** u8 */
  Type: number;
  /** u8 */
  AuxillaryDataLength: number;
  /** u16 */
  SourceCount: number;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  MulticastAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIGMPV3_REPORT_RECORD_HEADER = 16;

export function allocIGMPV3_REPORT_RECORD_HEADER(data?: Partial<IGMPV3_REPORT_RECORD_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIGMPV3_REPORT_RECORD_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Type !== undefined) view.setUint8(0, Number(data.Type));
  // 0x01: u8
  if (data?.AuxillaryDataLength !== undefined) view.setUint8(1, Number(data.AuxillaryDataLength));
  // 0x02: u16
  if (data?.SourceCount !== undefined) view.setUint16(2, Number(data.SourceCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MulticastAddress !== undefined) view.setBigUint64(8, data.MulticastAddress === null ? 0n : BigInt(util.toPointer(data.MulticastAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IGMPV3_REPORT_HEADER (size: 8)
 */
export interface IGMPV3_REPORT_HEADER {
  /** u8 */
  Type: number;
  /** u8 */
  Reserved: number;
  /** u16 */
  Checksum: number;
  /** u16 */
  Reserved2: number;
  /** u16 */
  RecordCount: number;
}

export const sizeofIGMPV3_REPORT_HEADER = 8;

export function allocIGMPV3_REPORT_HEADER(data?: Partial<IGMPV3_REPORT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIGMPV3_REPORT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Type !== undefined) view.setUint8(0, Number(data.Type));
  // 0x01: u8
  if (data?.Reserved !== undefined) view.setUint8(1, Number(data.Reserved));
  // 0x02: u16
  if (data?.Checksum !== undefined) view.setUint16(2, Number(data.Checksum), true);
  // 0x04: u16
  if (data?.Reserved2 !== undefined) view.setUint16(4, Number(data.Reserved2), true);
  // 0x06: u16
  if (data?.RecordCount !== undefined) view.setUint16(6, Number(data.RecordCount), true);
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN6_ADDR (size: 8)
 */
export interface IN6_ADDR {
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIN6_ADDR = 8;

export function allocIN6_ADDR(data?: Partial<IN6_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN6_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u !== undefined) view.setBigUint64(0, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV6_HEADER (size: 32)
 */
export interface IPV6_HEADER {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  PayloadLength: number;
  /** u8 */
  NextHeader: number;
  /** u8 */
  HopLimit: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  SourceAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  DestinationAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIPV6_HEADER = 32;

export function allocIPV6_HEADER(data?: Partial<IPV6_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV6_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.PayloadLength !== undefined) view.setUint16(8, Number(data.PayloadLength), true);
  // 0x0a: u8
  if (data?.NextHeader !== undefined) view.setUint8(10, Number(data.NextHeader));
  // 0x0b: u8
  if (data?.HopLimit !== undefined) view.setUint8(11, Number(data.HopLimit));
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SourceAddress !== undefined) view.setBigUint64(16, data.SourceAddress === null ? 0n : BigInt(util.toPointer(data.SourceAddress)), true);
  // 0x18: pointer
  if (data?.DestinationAddress !== undefined) view.setBigUint64(24, data.DestinationAddress === null ? 0n : BigInt(util.toPointer(data.DestinationAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV6_FRAGMENT_HEADER (size: 24)
 */
export interface IPV6_FRAGMENT_HEADER {
  /** u8 */
  NextHeader: number;
  /** u8 */
  Reserved: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Id: number;
}

export const sizeofIPV6_FRAGMENT_HEADER = 24;

export function allocIPV6_FRAGMENT_HEADER(data?: Partial<IPV6_FRAGMENT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV6_FRAGMENT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NextHeader !== undefined) view.setUint8(0, Number(data.NextHeader));
  // 0x01: u8
  if (data?.Reserved !== undefined) view.setUint8(1, Number(data.Reserved));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.Id !== undefined) view.setUint32(16, Number(data.Id), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV6_EXTENSION_HEADER (size: 8)
 */
export interface IPV6_EXTENSION_HEADER {
  /** u8 */
  NextHeader: number;
  /** u8 */
  Length: number;
}

export const sizeofIPV6_EXTENSION_HEADER = 8;

export function allocIPV6_EXTENSION_HEADER(data?: Partial<IPV6_EXTENSION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV6_EXTENSION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NextHeader !== undefined) view.setUint8(0, Number(data.NextHeader));
  // 0x01: u8
  if (data?.Length !== undefined) view.setUint8(1, Number(data.Length));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV6_OPTION_HEADER (size: 8)
 */
export interface IPV6_OPTION_HEADER {
  /** u8 */
  Type: number;
  /** u8 */
  DataLength: number;
}

export const sizeofIPV6_OPTION_HEADER = 8;

export function allocIPV6_OPTION_HEADER(data?: Partial<IPV6_OPTION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV6_OPTION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Type !== undefined) view.setUint8(0, Number(data.Type));
  // 0x01: u8
  if (data?.DataLength !== undefined) view.setUint8(1, Number(data.DataLength));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV6_OPTION_JUMBOGRAM (size: 16)
 */
export interface IPV6_OPTION_JUMBOGRAM {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV6_OPTION_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  JumbogramLength: Deno.PointerValue | null;
}

export const sizeofIPV6_OPTION_JUMBOGRAM = 16;

export function allocIPV6_OPTION_JUMBOGRAM(data?: Partial<IPV6_OPTION_JUMBOGRAM>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV6_OPTION_JUMBOGRAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.JumbogramLength !== undefined) view.setBigUint64(8, data.JumbogramLength === null ? 0n : BigInt(util.toPointer(data.JumbogramLength)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV6_OPTION_ROUTER_ALERT (size: 16)
 */
export interface IPV6_OPTION_ROUTER_ALERT {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV6_OPTION_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  Value: Deno.PointerValue | null;
}

export const sizeofIPV6_OPTION_ROUTER_ALERT = 16;

export function allocIPV6_OPTION_ROUTER_ALERT(data?: Partial<IPV6_OPTION_ROUTER_ALERT>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV6_OPTION_ROUTER_ALERT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV6_ROUTING_HEADER (size: 16)
 */
export interface IPV6_ROUTING_HEADER {
  /** u8 */
  NextHeader: number;
  /** u8 */
  Length: number;
  /** u8 */
  RoutingType: number;
  /** u8 */
  SegmentsLeft: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofIPV6_ROUTING_HEADER = 16;

export function allocIPV6_ROUTING_HEADER(data?: Partial<IPV6_ROUTING_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV6_ROUTING_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NextHeader !== undefined) view.setUint8(0, Number(data.NextHeader));
  // 0x01: u8
  if (data?.Length !== undefined) view.setUint8(1, Number(data.Length));
  // 0x02: u8
  if (data?.RoutingType !== undefined) view.setUint8(2, Number(data.RoutingType));
  // 0x03: u8
  if (data?.SegmentsLeft !== undefined) view.setUint8(3, Number(data.SegmentsLeft));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_router_solicit (size: 8)
 */
export interface nd_router_solicit {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE */
  nd_rs_hdr: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNd_router_solicit = 8;

export function allocNd_router_solicit(data?: Partial<nd_router_solicit>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_router_solicit);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nd_rs_hdr !== undefined) view.setBigUint64(0, data.nd_rs_hdr === null ? 0n : BigInt(util.toPointer(data.nd_rs_hdr)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_router_advert (size: 16)
 */
export interface nd_router_advert {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE */
  nd_ra_hdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nd_ra_reachable: number;
  /** u32 */
  nd_ra_retransmit: number;
}

export const sizeofNd_router_advert = 16;

export function allocNd_router_advert(data?: Partial<nd_router_advert>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_router_advert);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nd_ra_hdr !== undefined) view.setBigUint64(0, data.nd_ra_hdr === null ? 0n : BigInt(util.toPointer(data.nd_ra_hdr)), true);
  // 0x08: u32
  if (data?.nd_ra_reachable !== undefined) view.setUint32(8, Number(data.nd_ra_reachable), true);
  // 0x0c: u32
  if (data?.nd_ra_retransmit !== undefined) view.setUint32(12, Number(data.nd_ra_retransmit), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV6_ROUTER_ADVERTISEMENT_FLAGS (size: 16)
 */
export interface IPV6_ROUTER_ADVERTISEMENT_FLAGS {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Value: number;
}

export const sizeofIPV6_ROUTER_ADVERTISEMENT_FLAGS = 16;

export function allocIPV6_ROUTER_ADVERTISEMENT_FLAGS(data?: Partial<IPV6_ROUTER_ADVERTISEMENT_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV6_ROUTER_ADVERTISEMENT_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u8
  if (data?.Value !== undefined) view.setUint8(8, Number(data.Value));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_neighbor_solicit (size: 16)
 */
export interface nd_neighbor_solicit {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE */
  nd_ns_hdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  nd_ns_target: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNd_neighbor_solicit = 16;

export function allocNd_neighbor_solicit(data?: Partial<nd_neighbor_solicit>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_neighbor_solicit);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nd_ns_hdr !== undefined) view.setBigUint64(0, data.nd_ns_hdr === null ? 0n : BigInt(util.toPointer(data.nd_ns_hdr)), true);
  // 0x08: pointer
  if (data?.nd_ns_target !== undefined) view.setBigUint64(8, data.nd_ns_target === null ? 0n : BigInt(util.toPointer(data.nd_ns_target)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_neighbor_advert (size: 16)
 */
export interface nd_neighbor_advert {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE */
  nd_na_hdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  nd_na_target: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNd_neighbor_advert = 16;

export function allocNd_neighbor_advert(data?: Partial<nd_neighbor_advert>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_neighbor_advert);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nd_na_hdr !== undefined) view.setBigUint64(0, data.nd_na_hdr === null ? 0n : BigInt(util.toPointer(data.nd_na_hdr)), true);
  // 0x08: pointer
  if (data?.nd_na_target !== undefined) view.setBigUint64(8, data.nd_na_target === null ? 0n : BigInt(util.toPointer(data.nd_na_target)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS (size: 16)
 */
export interface IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Value: number;
}

export const sizeofIPV6_NEIGHBOR_ADVERTISEMENT_FLAGS = 16;

export function allocIPV6_NEIGHBOR_ADVERTISEMENT_FLAGS(data?: Partial<IPV6_NEIGHBOR_ADVERTISEMENT_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV6_NEIGHBOR_ADVERTISEMENT_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.Value !== undefined) view.setUint32(8, Number(data.Value), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_redirect (size: 24)
 */
export interface nd_redirect {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_MESSAGE */
  nd_rd_hdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  nd_rd_target: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  nd_rd_dst: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNd_redirect = 24;

export function allocNd_redirect(data?: Partial<nd_redirect>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_redirect);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nd_rd_hdr !== undefined) view.setBigUint64(0, data.nd_rd_hdr === null ? 0n : BigInt(util.toPointer(data.nd_rd_hdr)), true);
  // 0x08: pointer
  if (data?.nd_rd_target !== undefined) view.setBigUint64(8, data.nd_rd_target === null ? 0n : BigInt(util.toPointer(data.nd_rd_target)), true);
  // 0x10: pointer
  if (data?.nd_rd_dst !== undefined) view.setBigUint64(16, data.nd_rd_dst === null ? 0n : BigInt(util.toPointer(data.nd_rd_dst)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_opt_hdr (size: 8)
 */
export interface nd_opt_hdr {
  /** u8 */
  nd_opt_type: number;
  /** u8 */
  nd_opt_len: number;
}

export const sizeofNd_opt_hdr = 8;

export function allocNd_opt_hdr(data?: Partial<nd_opt_hdr>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_opt_hdr);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.nd_opt_type !== undefined) view.setUint8(0, Number(data.nd_opt_type));
  // 0x01: u8
  if (data?.nd_opt_len !== undefined) view.setUint8(1, Number(data.nd_opt_len));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_opt_prefix_info (size: 40)
 */
export interface nd_opt_prefix_info {
  /** u8 */
  nd_opt_pi_type: number;
  /** u8 */
  nd_opt_pi_len: number;
  /** u8 */
  nd_opt_pi_prefix_len: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nd_opt_pi_valid_time: number;
  /** u32 */
  nd_opt_pi_preferred_time: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  nd_opt_pi_prefix: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNd_opt_prefix_info = 40;

export function allocNd_opt_prefix_info(data?: Partial<nd_opt_prefix_info>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_opt_prefix_info);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.nd_opt_pi_type !== undefined) view.setUint8(0, Number(data.nd_opt_pi_type));
  // 0x01: u8
  if (data?.nd_opt_pi_len !== undefined) view.setUint8(1, Number(data.nd_opt_pi_len));
  // 0x02: u8
  if (data?.nd_opt_pi_prefix_len !== undefined) view.setUint8(2, Number(data.nd_opt_pi_prefix_len));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u32
  if (data?.nd_opt_pi_valid_time !== undefined) view.setUint32(16, Number(data.nd_opt_pi_valid_time), true);
  // 0x14: u32
  if (data?.nd_opt_pi_preferred_time !== undefined) view.setUint32(20, Number(data.nd_opt_pi_preferred_time), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: pointer
  if (data?.nd_opt_pi_prefix !== undefined) view.setBigUint64(32, data.nd_opt_pi_prefix === null ? 0n : BigInt(util.toPointer(data.nd_opt_pi_prefix)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_opt_rd_hdr (size: 8)
 */
export interface nd_opt_rd_hdr {
  /** u8 */
  nd_opt_rh_type: number;
  /** u8 */
  nd_opt_rh_len: number;
  /** u16 */
  nd_opt_rh_reserved1: number;
  /** u32 */
  nd_opt_rh_reserved2: number;
}

export const sizeofNd_opt_rd_hdr = 8;

export function allocNd_opt_rd_hdr(data?: Partial<nd_opt_rd_hdr>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_opt_rd_hdr);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.nd_opt_rh_type !== undefined) view.setUint8(0, Number(data.nd_opt_rh_type));
  // 0x01: u8
  if (data?.nd_opt_rh_len !== undefined) view.setUint8(1, Number(data.nd_opt_rh_len));
  // 0x02: u16
  if (data?.nd_opt_rh_reserved1 !== undefined) view.setUint16(2, Number(data.nd_opt_rh_reserved1), true);
  // 0x04: u32
  if (data?.nd_opt_rh_reserved2 !== undefined) view.setUint32(4, Number(data.nd_opt_rh_reserved2), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_opt_mtu (size: 8)
 */
export interface nd_opt_mtu {
  /** u8 */
  nd_opt_mtu_type: number;
  /** u8 */
  nd_opt_mtu_len: number;
  /** u16 */
  nd_opt_mtu_reserved: number;
  /** u32 */
  nd_opt_mtu_mtu: number;
}

export const sizeofNd_opt_mtu = 8;

export function allocNd_opt_mtu(data?: Partial<nd_opt_mtu>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_opt_mtu);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.nd_opt_mtu_type !== undefined) view.setUint8(0, Number(data.nd_opt_mtu_type));
  // 0x01: u8
  if (data?.nd_opt_mtu_len !== undefined) view.setUint8(1, Number(data.nd_opt_mtu_len));
  // 0x02: u16
  if (data?.nd_opt_mtu_reserved !== undefined) view.setUint16(2, Number(data.nd_opt_mtu_reserved), true);
  // 0x04: u32
  if (data?.nd_opt_mtu_mtu !== undefined) view.setUint32(4, Number(data.nd_opt_mtu_mtu), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_opt_route_info (size: 32)
 */
export interface nd_opt_route_info {
  /** u8 */
  nd_opt_ri_type: number;
  /** u8 */
  nd_opt_ri_len: number;
  /** u8 */
  nd_opt_ri_prefix_len: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nd_opt_ri_route_lifetime: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  nd_opt_ri_prefix: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNd_opt_route_info = 32;

export function allocNd_opt_route_info(data?: Partial<nd_opt_route_info>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_opt_route_info);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.nd_opt_ri_type !== undefined) view.setUint8(0, Number(data.nd_opt_ri_type));
  // 0x01: u8
  if (data?.nd_opt_ri_len !== undefined) view.setUint8(1, Number(data.nd_opt_ri_len));
  // 0x02: u8
  if (data?.nd_opt_ri_prefix_len !== undefined) view.setUint8(2, Number(data.nd_opt_ri_prefix_len));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.nd_opt_ri_route_lifetime !== undefined) view.setUint32(16, Number(data.nd_opt_ri_route_lifetime), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.nd_opt_ri_prefix !== undefined) view.setBigUint64(24, data.nd_opt_ri_prefix === null ? 0n : BigInt(util.toPointer(data.nd_opt_ri_prefix)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_opt_rdnss (size: 8)
 */
export interface nd_opt_rdnss {
  /** u8 */
  nd_opt_rdnss_type: number;
  /** u8 */
  nd_opt_rdnss_len: number;
  /** u16 */
  nd_opt_rdnss_reserved: number;
  /** u32 */
  nd_opt_rdnss_lifetime: number;
}

export const sizeofNd_opt_rdnss = 8;

export function allocNd_opt_rdnss(data?: Partial<nd_opt_rdnss>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_opt_rdnss);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.nd_opt_rdnss_type !== undefined) view.setUint8(0, Number(data.nd_opt_rdnss_type));
  // 0x01: u8
  if (data?.nd_opt_rdnss_len !== undefined) view.setUint8(1, Number(data.nd_opt_rdnss_len));
  // 0x02: u16
  if (data?.nd_opt_rdnss_reserved !== undefined) view.setUint16(2, Number(data.nd_opt_rdnss_reserved), true);
  // 0x04: u32
  if (data?.nd_opt_rdnss_lifetime !== undefined) view.setUint32(4, Number(data.nd_opt_rdnss_lifetime), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.nd_opt_dnssl (size: 8)
 */
export interface nd_opt_dnssl {
  /** u8 */
  nd_opt_dnssl_type: number;
  /** u8 */
  nd_opt_dnssl_len: number;
  /** u16 */
  nd_opt_dnssl_reserved: number;
  /** u32 */
  nd_opt_dnssl_lifetime: number;
}

export const sizeofNd_opt_dnssl = 8;

export function allocNd_opt_dnssl(data?: Partial<nd_opt_dnssl>): Uint8Array {
  const buf = new Uint8Array(sizeofNd_opt_dnssl);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.nd_opt_dnssl_type !== undefined) view.setUint8(0, Number(data.nd_opt_dnssl_type));
  // 0x01: u8
  if (data?.nd_opt_dnssl_len !== undefined) view.setUint8(1, Number(data.nd_opt_dnssl_len));
  // 0x02: u16
  if (data?.nd_opt_dnssl_reserved !== undefined) view.setUint16(2, Number(data.nd_opt_dnssl_reserved), true);
  // 0x04: u32
  if (data?.nd_opt_dnssl_lifetime !== undefined) view.setUint32(4, Number(data.nd_opt_dnssl_lifetime), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.MLD_HEADER (size: 24)
 */
export interface MLD_HEADER {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_HEADER */
  IcmpHeader: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  MaxRespTime: number;
  /** u16 */
  Reserved: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  MulticastAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMLD_HEADER = 24;

export function allocMLD_HEADER(data?: Partial<MLD_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMLD_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IcmpHeader !== undefined) view.setBigUint64(0, data.IcmpHeader === null ? 0n : BigInt(util.toPointer(data.IcmpHeader)), true);
  // 0x08: u16
  if (data?.MaxRespTime !== undefined) view.setUint16(8, Number(data.MaxRespTime), true);
  // 0x0a: u16
  if (data?.Reserved !== undefined) view.setUint16(10, Number(data.Reserved), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.MulticastAddress !== undefined) view.setBigUint64(16, data.MulticastAddress === null ? 0n : BigInt(util.toPointer(data.MulticastAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.MLDV2_QUERY_HEADER (size: 56)
 */
export interface MLDV2_QUERY_HEADER {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_HEADER */
  IcmpHeader: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Reserved: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  MulticastAddress: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  _bitfield: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  SourceCount: number;
}

export const sizeofMLDV2_QUERY_HEADER = 56;

export function allocMLDV2_QUERY_HEADER(data?: Partial<MLDV2_QUERY_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMLDV2_QUERY_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IcmpHeader !== undefined) view.setBigUint64(0, data.IcmpHeader === null ? 0n : BigInt(util.toPointer(data.IcmpHeader)), true);
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u16
  if (data?.Reserved !== undefined) view.setUint16(16, Number(data.Reserved), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.MulticastAddress !== undefined) view.setBigUint64(24, data.MulticastAddress === null ? 0n : BigInt(util.toPointer(data.MulticastAddress)), true);
  // 0x20: u8
  if (data?._bitfield !== undefined) view.setUint8(32, Number(data._bitfield));
  // 0x21: pad7
  // 0x28: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(40, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x30: u16
  if (data?.SourceCount !== undefined) view.setUint16(48, Number(data.SourceCount), true);
  // 0x32: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.MLDV2_REPORT_RECORD_HEADER (size: 16)
 */
export interface MLDV2_REPORT_RECORD_HEADER {
  /** u8 */
  Type: number;
  /** u8 */
  AuxillaryDataLength: number;
  /** u16 */
  SourceCount: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  MulticastAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMLDV2_REPORT_RECORD_HEADER = 16;

export function allocMLDV2_REPORT_RECORD_HEADER(data?: Partial<MLDV2_REPORT_RECORD_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMLDV2_REPORT_RECORD_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Type !== undefined) view.setUint8(0, Number(data.Type));
  // 0x01: u8
  if (data?.AuxillaryDataLength !== undefined) view.setUint8(1, Number(data.AuxillaryDataLength));
  // 0x02: u16
  if (data?.SourceCount !== undefined) view.setUint16(2, Number(data.SourceCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MulticastAddress !== undefined) view.setBigUint64(8, data.MulticastAddress === null ? 0n : BigInt(util.toPointer(data.MulticastAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.MLDV2_REPORT_HEADER (size: 16)
 */
export interface MLDV2_REPORT_HEADER {
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.ICMP_HEADER */
  IcmpHeader: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Reserved: number;
  /** u16 */
  RecordCount: number;
}

export const sizeofMLDV2_REPORT_HEADER = 16;

export function allocMLDV2_REPORT_HEADER(data?: Partial<MLDV2_REPORT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMLDV2_REPORT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IcmpHeader !== undefined) view.setBigUint64(0, data.IcmpHeader === null ? 0n : BigInt(util.toPointer(data.IcmpHeader)), true);
  // 0x08: u16
  if (data?.Reserved !== undefined) view.setUint16(8, Number(data.Reserved), true);
  // 0x0a: u16
  if (data?.RecordCount !== undefined) view.setUint16(10, Number(data.RecordCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.tcp_hdr (size: 24)
 */
export interface tcp_hdr {
  /** u16 */
  th_sport: number;
  /** u16 */
  th_dport: number;
  /** u32 */
  th_seq: number;
  /** u32 */
  th_ack: number;
  /** u8 */
  _bitfield: number;
  /** u8 */
  th_flags: number;
  /** u16 */
  th_win: number;
  /** u16 */
  th_sum: number;
  /** u16 */
  th_urp: number;
}

export const sizeofTcp_hdr = 24;

export function allocTcp_hdr(data?: Partial<tcp_hdr>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_hdr);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.th_sport !== undefined) view.setUint16(0, Number(data.th_sport), true);
  // 0x02: u16
  if (data?.th_dport !== undefined) view.setUint16(2, Number(data.th_dport), true);
  // 0x04: u32
  if (data?.th_seq !== undefined) view.setUint32(4, Number(data.th_seq), true);
  // 0x08: u32
  if (data?.th_ack !== undefined) view.setUint32(8, Number(data.th_ack), true);
  // 0x0c: u8
  if (data?._bitfield !== undefined) view.setUint8(12, Number(data._bitfield));
  // 0x0d: u8
  if (data?.th_flags !== undefined) view.setUint8(13, Number(data.th_flags));
  // 0x0e: u16
  if (data?.th_win !== undefined) view.setUint16(14, Number(data.th_win), true);
  // 0x10: u16
  if (data?.th_sum !== undefined) view.setUint16(16, Number(data.th_sum), true);
  // 0x12: u16
  if (data?.th_urp !== undefined) view.setUint16(18, Number(data.th_urp), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.tcp_opt_mss (size: 8)
 */
export interface tcp_opt_mss {
  /** u8 */
  Kind: number;
  /** u8 */
  Length: number;
  /** u16 */
  Mss: number;
}

export const sizeofTcp_opt_mss = 8;

export function allocTcp_opt_mss(data?: Partial<tcp_opt_mss>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_opt_mss);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Kind !== undefined) view.setUint8(0, Number(data.Kind));
  // 0x01: u8
  if (data?.Length !== undefined) view.setUint8(1, Number(data.Length));
  // 0x02: u16
  if (data?.Mss !== undefined) view.setUint16(2, Number(data.Mss), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.tcp_opt_ws (size: 8)
 */
export interface tcp_opt_ws {
  /** u8 */
  Kind: number;
  /** u8 */
  Length: number;
  /** u8 */
  ShiftCnt: number;
}

export const sizeofTcp_opt_ws = 8;

export function allocTcp_opt_ws(data?: Partial<tcp_opt_ws>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_opt_ws);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Kind !== undefined) view.setUint8(0, Number(data.Kind));
  // 0x01: u8
  if (data?.Length !== undefined) view.setUint8(1, Number(data.Length));
  // 0x02: u8
  if (data?.ShiftCnt !== undefined) view.setUint8(2, Number(data.ShiftCnt));
  // 0x03: pad5
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.tcp_opt_sack_permitted (size: 8)
 */
export interface tcp_opt_sack_permitted {
  /** u8 */
  Kind: number;
  /** u8 */
  Length: number;
}

export const sizeofTcp_opt_sack_permitted = 8;

export function allocTcp_opt_sack_permitted(data?: Partial<tcp_opt_sack_permitted>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_opt_sack_permitted);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Kind !== undefined) view.setUint8(0, Number(data.Kind));
  // 0x01: u8
  if (data?.Length !== undefined) view.setUint8(1, Number(data.Length));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.tcp_opt_sack (size: 16)
 */
export interface tcp_opt_sack {
  /** u8 */
  Kind: number;
  /** u8 */
  Length: number;
  /** array */
  Block: Deno.PointerValue | null;
}

export const sizeofTcp_opt_sack = 16;

export function allocTcp_opt_sack(data?: Partial<tcp_opt_sack>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_opt_sack);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Kind !== undefined) view.setUint8(0, Number(data.Kind));
  // 0x01: u8
  if (data?.Length !== undefined) view.setUint8(1, Number(data.Length));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Block !== undefined) view.setBigUint64(8, data.Block === null ? 0n : BigInt(util.toPointer(data.Block)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.tcp_opt_ts (size: 16)
 */
export interface tcp_opt_ts {
  /** u8 */
  Kind: number;
  /** u8 */
  Length: number;
  /** u32 */
  Val: number;
  /** u32 */
  EcR: number;
}

export const sizeofTcp_opt_ts = 16;

export function allocTcp_opt_ts(data?: Partial<tcp_opt_ts>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_opt_ts);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Kind !== undefined) view.setUint8(0, Number(data.Kind));
  // 0x01: u8
  if (data?.Length !== undefined) view.setUint8(1, Number(data.Length));
  // 0x02: u32
  if (data?.Val !== undefined) view.setUint32(2, Number(data.Val), true);
  // 0x06: u32
  if (data?.EcR !== undefined) view.setUint32(6, Number(data.EcR), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.tcp_opt_unknown (size: 8)
 */
export interface tcp_opt_unknown {
  /** u8 */
  Kind: number;
  /** u8 */
  Length: number;
}

export const sizeofTcp_opt_unknown = 8;

export function allocTcp_opt_unknown(data?: Partial<tcp_opt_unknown>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_opt_unknown);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Kind !== undefined) view.setUint8(0, Number(data.Kind));
  // 0x01: u8
  if (data?.Length !== undefined) view.setUint8(1, Number(data.Length));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.tcp_opt_fastopen (size: 16)
 */
export interface tcp_opt_fastopen {
  /** u8 */
  Kind: number;
  /** u8 */
  Length: number;
  /** array */
  Cookie: Deno.PointerValue | null;
}

export const sizeofTcp_opt_fastopen = 16;

export function allocTcp_opt_fastopen(data?: Partial<tcp_opt_fastopen>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_opt_fastopen);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Kind !== undefined) view.setUint8(0, Number(data.Kind));
  // 0x01: u8
  if (data?.Length !== undefined) view.setUint8(1, Number(data.Length));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Cookie !== undefined) view.setBigUint64(8, data.Cookie === null ? 0n : BigInt(util.toPointer(data.Cookie)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SCOPE_ID (size: 8)
 */
export interface SCOPE_ID {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSCOPE_ID = 8;

export function allocSCOPE_ID(data?: Partial<SCOPE_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofSCOPE_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_TUNNEL_ADDRESS (size: 24)
 */
export interface DL_TUNNEL_ADDRESS {
  /** Windows.Win32.System.Kernel.COMPARTMENT_ID */
  CompartmentId: COMPARTMENT_ID;
  /** Windows.Win32.Networking.WinSock.SCOPE_ID */
  ScopeId: Uint8Array | Deno.PointerValue | null;
  /** array */
  IpAddress: Deno.PointerValue | null;
}

export const sizeofDL_TUNNEL_ADDRESS = 24;

export function allocDL_TUNNEL_ADDRESS(data?: Partial<DL_TUNNEL_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofDL_TUNNEL_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CompartmentId !== undefined) view.setInt32(0, Number(data.CompartmentId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ScopeId !== undefined) view.setBigUint64(8, data.ScopeId === null ? 0n : BigInt(util.toPointer(data.ScopeId)), true);
  // 0x10: pointer
  if (data?.IpAddress !== undefined) view.setBigUint64(16, data.IpAddress === null ? 0n : BigInt(util.toPointer(data.IpAddress)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_TEREDO_ADDRESS (size: 16)
 */
export interface DL_TEREDO_ADDRESS {
  /** array */
  Reserved: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDL_TEREDO_ADDRESS = 16;

export function allocDL_TEREDO_ADDRESS(data?: Partial<DL_TEREDO_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofDL_TEREDO_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(0, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.DL_TEREDO_ADDRESS_PRV (size: 16)
 */
export interface DL_TEREDO_ADDRESS_PRV {
  /** array */
  Reserved: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDL_TEREDO_ADDRESS_PRV = 16;

export function allocDL_TEREDO_ADDRESS_PRV(data?: Partial<DL_TEREDO_ADDRESS_PRV>): Uint8Array {
  const buf = new Uint8Array(sizeofDL_TEREDO_ADDRESS_PRV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(0, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPTLS_METADATA (size: 8)
 */
export interface IPTLS_METADATA {
  /** u64 */
  SequenceNumber: Deno.PointerValue;
}

export const sizeofIPTLS_METADATA = 8;

export function allocIPTLS_METADATA(data?: Partial<IPTLS_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofIPTLS_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SequenceNumber !== undefined) view.setBigUint64(0, BigInt(data.SequenceNumber), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.WindowsFilteringPlatform.NPI_MODULEID (size: 16)
 */
export interface NPI_MODULEID {
  /** u16 */
  Length: number;
  /** Windows.Win32.NetworkManagement.WindowsFilteringPlatform.NPI_MODULEID_TYPE */
  Type: NPI_MODULEID_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNPI_MODULEID = 16;

export function allocNPI_MODULEID(data?: Partial<NPI_MODULEID>): Uint8Array {
  const buf = new Uint8Array(sizeofNPI_MODULEID);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: i32
  if (data?.Type !== undefined) view.setInt32(2, Number(data.Type), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

// Native Libraries

try {
  var libfwpuclnt = Deno.dlopen("fwpuclnt", {
    FwpmFreeMemory0: {
      parameters: ["pointer"],
      result: "void",
    },
    FwpmEngineOpen0: {
      parameters: ["buffer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmEngineClose0: {
      parameters: ["pointer"],
      result: "u32",
    },
    FwpmEngineGetOption0: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    FwpmEngineSetOption0: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    FwpmEngineGetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmEngineSetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSessionCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSessionEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSessionDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmTransactionBegin0: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    FwpmTransactionCommit0: {
      parameters: ["pointer"],
      result: "u32",
    },
    FwpmTransactionAbort0: {
      parameters: ["pointer"],
      result: "u32",
    },
    FwpmProviderAdd0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderDeleteByKey0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderGetByKey0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderGetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderSetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderSubscribeChanges0: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderUnsubscribeChanges0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderSubscriptionsGet0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextAdd0: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextAdd1: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextAdd2: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextAdd3: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextDeleteById0: {
      parameters: ["pointer", "u64"],
      result: "u32",
    },
    FwpmProviderContextDeleteByKey0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextGetById0: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    FwpmProviderContextGetById1: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    FwpmProviderContextGetById2: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    FwpmProviderContextGetById3: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    FwpmProviderContextGetByKey0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextGetByKey1: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextGetByKey2: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextGetByKey3: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextEnum1: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextEnum2: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextEnum3: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextGetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextSetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextSubscribeChanges0: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextUnsubscribeChanges0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmProviderContextSubscriptionsGet0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSubLayerAdd0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSubLayerDeleteByKey0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmSubLayerGetByKey0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSubLayerCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSubLayerEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSubLayerDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmSubLayerGetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSubLayerSetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSubLayerSubscribeChanges0: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSubLayerUnsubscribeChanges0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmSubLayerSubscriptionsGet0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmLayerGetById0: {
      parameters: ["pointer", "u16", "pointer"],
      result: "u32",
    },
    FwpmLayerGetByKey0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmLayerCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmLayerEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmLayerDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmLayerGetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmLayerSetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmCalloutAdd0: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmCalloutDeleteById0: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    FwpmCalloutDeleteByKey0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmCalloutGetById0: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    FwpmCalloutGetByKey0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmCalloutCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmCalloutEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmCalloutDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmCalloutGetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmCalloutSetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmCalloutSubscribeChanges0: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmCalloutUnsubscribeChanges0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmCalloutSubscriptionsGet0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmFilterAdd0: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmFilterDeleteById0: {
      parameters: ["pointer", "u64"],
      result: "u32",
    },
    FwpmFilterDeleteByKey0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmFilterGetById0: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    FwpmFilterGetByKey0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmFilterCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmFilterEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmFilterDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmFilterGetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmFilterSetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmFilterSubscribeChanges0: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmFilterUnsubscribeChanges0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmFilterSubscriptionsGet0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmGetAppIdFromFileName0: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    FwpmIPsecTunnelAdd0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmIPsecTunnelAdd1: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmIPsecTunnelAdd2: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmIPsecTunnelAdd3: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmIPsecTunnelDeleteByKey0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IPsecGetStatistics0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IPsecGetStatistics1: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IPsecSaContextCreate0: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaContextCreate1: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaContextDeleteById0: {
      parameters: ["pointer", "u64"],
      result: "u32",
    },
    IPsecSaContextGetById0: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    IPsecSaContextGetById1: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    IPsecSaContextGetSpi0: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaContextGetSpi1: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaContextSetSpi0: {
      parameters: ["pointer", "u64", "pointer", "u32"],
      result: "u32",
    },
    IPsecSaContextAddInbound0: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    IPsecSaContextAddOutbound0: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    IPsecSaContextAddInbound1: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    IPsecSaContextAddOutbound1: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    IPsecSaContextExpire0: {
      parameters: ["pointer", "u64"],
      result: "u32",
    },
    IPsecSaContextUpdate0: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    IPsecSaContextCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaContextEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaContextEnum1: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaContextDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IPsecSaContextSubscribe0: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaContextUnsubscribe0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IPsecSaContextSubscriptionsGet0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaEnum1: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IPsecSaDbGetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecSaDbSetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecDospGetStatistics0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IPsecDospStateCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecDospStateEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    IPsecDospStateDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IPsecDospGetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecDospSetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecKeyManagerAddAndRegister0: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecKeyManagerUnregisterAndDelete0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IPsecKeyManagersGet0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecKeyManagerGetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    IPsecKeyManagerSetSecurityInfoByKey0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    IkeextGetStatistics0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IkeextGetStatistics1: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IkeextSaDeleteById0: {
      parameters: ["pointer", "u64"],
      result: "u32",
    },
    IkeextSaGetById0: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    IkeextSaGetById1: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "u32",
    },
    IkeextSaGetById2: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "u32",
    },
    IkeextSaCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    IkeextSaEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    IkeextSaEnum1: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    IkeextSaEnum2: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    IkeextSaDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    IkeextSaDbGetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    IkeextSaDbSetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventEnum1: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventEnum2: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventEnum3: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventEnum4: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventEnum5: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventsGetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventsSetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventSubscribe0: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventUnsubscribe0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventSubscriptionsGet0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventSubscribe1: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventSubscribe2: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventSubscribe3: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmNetEventSubscribe4: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmDynamicKeywordSubscribe0: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmDynamicKeywordUnsubscribe0: {
      parameters: ["pointer"],
      result: "u32",
    },
    FwpmSystemPortsGet0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmSystemPortsSubscribe0: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmSystemPortsUnsubscribe0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmConnectionGetById0: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    FwpmConnectionEnum0: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FwpmConnectionCreateEnumHandle0: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmConnectionDestroyEnumHandle0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmConnectionGetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmConnectionSetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmConnectionSubscribe0: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmConnectionUnsubscribe0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmvSwitchEventSubscribe0: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmvSwitchEventUnsubscribe0: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FwpmvSwitchEventsGetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    FwpmvSwitchEventsSetSecurityInfo0: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function FwpmFreeMemory0(
  p: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libfwpuclnt.FwpmFreeMemory0(util.toPointer(p));
}

export function FwpmEngineOpen0(
  serverName: string | null /* Windows.Win32.Foundation.PWSTR */,
  authnService: number /* u32 */,
  authIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  session: Deno.PointerValue | Uint8Array | null /* ptr */,
  engineHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmEngineOpen0(util.pwstrToFfi(serverName), authnService, util.toPointer(authIdentity), util.toPointer(session), util.toPointer(engineHandle));
}

export function FwpmEngineClose0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmEngineClose0(util.toPointer(engineHandle));
}

export function FwpmEngineGetOption0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  option: FWPM_ENGINE_OPTION /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_ENGINE_OPTION */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmEngineGetOption0(util.toPointer(engineHandle), option, util.toPointer(value));
}

export function FwpmEngineSetOption0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  option: FWPM_ENGINE_OPTION /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_ENGINE_OPTION */,
  newValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmEngineSetOption0(util.toPointer(engineHandle), option, util.toPointer(newValue));
}

export function FwpmEngineGetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmEngineGetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function FwpmEngineSetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmEngineSetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function FwpmSessionCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSessionCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function FwpmSessionEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSessionEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmSessionDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSessionDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function FwpmTransactionBegin0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libfwpuclnt.FwpmTransactionBegin0(util.toPointer(engineHandle), flags);
}

export function FwpmTransactionCommit0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmTransactionCommit0(util.toPointer(engineHandle));
}

export function FwpmTransactionAbort0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmTransactionAbort0(util.toPointer(engineHandle));
}

export function FwpmProviderAdd0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  provider: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderAdd0(util.toPointer(engineHandle), util.toPointer(provider), util.toPointer(sd));
}

export function FwpmProviderDeleteByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderDeleteByKey0(util.toPointer(engineHandle), util.toPointer(key));
}

export function FwpmProviderGetByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  provider: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderGetByKey0(util.toPointer(engineHandle), util.toPointer(key), util.toPointer(provider));
}

export function FwpmProviderCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function FwpmProviderEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmProviderDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function FwpmProviderGetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderGetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function FwpmProviderSetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderSetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function FwpmProviderSubscribeChanges0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CHANGE_CALLBACK0 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  changeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderSubscribeChanges0(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(changeHandle));
}

export function FwpmProviderUnsubscribeChanges0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  changeHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderUnsubscribeChanges0(util.toPointer(engineHandle), util.toPointer(changeHandle));
}

export function FwpmProviderSubscriptionsGet0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderSubscriptionsGet0(util.toPointer(engineHandle), util.toPointer(entries), util.toPointer(numEntries));
}

export function FwpmProviderContextAdd0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextAdd0(util.toPointer(engineHandle), util.toPointer(providerContext), util.toPointer(sd), util.toPointer(id));
}

export function FwpmProviderContextAdd1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextAdd1(util.toPointer(engineHandle), util.toPointer(providerContext), util.toPointer(sd), util.toPointer(id));
}

export function FwpmProviderContextAdd2(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextAdd2(util.toPointer(engineHandle), util.toPointer(providerContext), util.toPointer(sd), util.toPointer(id));
}

export function FwpmProviderContextAdd3(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextAdd3(util.toPointer(engineHandle), util.toPointer(providerContext), util.toPointer(sd), util.toPointer(id));
}

export function FwpmProviderContextDeleteById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextDeleteById0(util.toPointer(engineHandle), id);
}

export function FwpmProviderContextDeleteByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextDeleteByKey0(util.toPointer(engineHandle), util.toPointer(key));
}

export function FwpmProviderContextGetById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextGetById0(util.toPointer(engineHandle), id, util.toPointer(providerContext));
}

export function FwpmProviderContextGetById1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextGetById1(util.toPointer(engineHandle), id, util.toPointer(providerContext));
}

export function FwpmProviderContextGetById2(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextGetById2(util.toPointer(engineHandle), id, util.toPointer(providerContext));
}

export function FwpmProviderContextGetById3(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextGetById3(util.toPointer(engineHandle), id, util.toPointer(providerContext));
}

export function FwpmProviderContextGetByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextGetByKey0(util.toPointer(engineHandle), util.toPointer(key), util.toPointer(providerContext));
}

export function FwpmProviderContextGetByKey1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextGetByKey1(util.toPointer(engineHandle), util.toPointer(key), util.toPointer(providerContext));
}

export function FwpmProviderContextGetByKey2(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextGetByKey2(util.toPointer(engineHandle), util.toPointer(key), util.toPointer(providerContext));
}

export function FwpmProviderContextGetByKey3(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  providerContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextGetByKey3(util.toPointer(engineHandle), util.toPointer(key), util.toPointer(providerContext));
}

export function FwpmProviderContextCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function FwpmProviderContextEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmProviderContextEnum1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextEnum1(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmProviderContextEnum2(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextEnum2(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmProviderContextEnum3(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextEnum3(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmProviderContextDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function FwpmProviderContextGetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextGetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function FwpmProviderContextSetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextSetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function FwpmProviderContextSubscribeChanges0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  changeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextSubscribeChanges0(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(changeHandle));
}

export function FwpmProviderContextUnsubscribeChanges0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  changeHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextUnsubscribeChanges0(util.toPointer(engineHandle), util.toPointer(changeHandle));
}

export function FwpmProviderContextSubscriptionsGet0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmProviderContextSubscriptionsGet0(util.toPointer(engineHandle), util.toPointer(entries), util.toPointer(numEntries));
}

export function FwpmSubLayerAdd0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subLayer: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSubLayerAdd0(util.toPointer(engineHandle), util.toPointer(subLayer), util.toPointer(sd));
}

export function FwpmSubLayerDeleteByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSubLayerDeleteByKey0(util.toPointer(engineHandle), util.toPointer(key));
}

export function FwpmSubLayerGetByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  subLayer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSubLayerGetByKey0(util.toPointer(engineHandle), util.toPointer(key), util.toPointer(subLayer));
}

export function FwpmSubLayerCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSubLayerCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function FwpmSubLayerEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSubLayerEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmSubLayerDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSubLayerDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function FwpmSubLayerGetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSubLayerGetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function FwpmSubLayerSetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSubLayerSetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function FwpmSubLayerSubscribeChanges0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SUBLAYER_CHANGE_CALLBACK0 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  changeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSubLayerSubscribeChanges0(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(changeHandle));
}

export function FwpmSubLayerUnsubscribeChanges0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  changeHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSubLayerUnsubscribeChanges0(util.toPointer(engineHandle), util.toPointer(changeHandle));
}

export function FwpmSubLayerSubscriptionsGet0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSubLayerSubscriptionsGet0(util.toPointer(engineHandle), util.toPointer(entries), util.toPointer(numEntries));
}

export function FwpmLayerGetById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: number /* u16 */,
  layer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmLayerGetById0(util.toPointer(engineHandle), id, util.toPointer(layer));
}

export function FwpmLayerGetByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  layer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmLayerGetByKey0(util.toPointer(engineHandle), util.toPointer(key), util.toPointer(layer));
}

export function FwpmLayerCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmLayerCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function FwpmLayerEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmLayerEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmLayerDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmLayerDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function FwpmLayerGetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmLayerGetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function FwpmLayerSetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmLayerSetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function FwpmCalloutAdd0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  callout: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutAdd0(util.toPointer(engineHandle), util.toPointer(callout), util.toPointer(sd), util.toPointer(id));
}

export function FwpmCalloutDeleteById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: number /* u32 */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutDeleteById0(util.toPointer(engineHandle), id);
}

export function FwpmCalloutDeleteByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutDeleteByKey0(util.toPointer(engineHandle), util.toPointer(key));
}

export function FwpmCalloutGetById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: number /* u32 */,
  callout: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutGetById0(util.toPointer(engineHandle), id, util.toPointer(callout));
}

export function FwpmCalloutGetByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  callout: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutGetByKey0(util.toPointer(engineHandle), util.toPointer(key), util.toPointer(callout));
}

export function FwpmCalloutCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function FwpmCalloutEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmCalloutDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function FwpmCalloutGetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutGetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function FwpmCalloutSetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutSetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function FwpmCalloutSubscribeChanges0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CALLOUT_CHANGE_CALLBACK0 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  changeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutSubscribeChanges0(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(changeHandle));
}

export function FwpmCalloutUnsubscribeChanges0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  changeHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutUnsubscribeChanges0(util.toPointer(engineHandle), util.toPointer(changeHandle));
}

export function FwpmCalloutSubscriptionsGet0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmCalloutSubscriptionsGet0(util.toPointer(engineHandle), util.toPointer(entries), util.toPointer(numEntries));
}

export function FwpmFilterAdd0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  filter: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterAdd0(util.toPointer(engineHandle), util.toPointer(filter), util.toPointer(sd), util.toPointer(id));
}

export function FwpmFilterDeleteById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterDeleteById0(util.toPointer(engineHandle), id);
}

export function FwpmFilterDeleteByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterDeleteByKey0(util.toPointer(engineHandle), util.toPointer(key));
}

export function FwpmFilterGetById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  filter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterGetById0(util.toPointer(engineHandle), id, util.toPointer(filter));
}

export function FwpmFilterGetByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  filter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterGetByKey0(util.toPointer(engineHandle), util.toPointer(key), util.toPointer(filter));
}

export function FwpmFilterCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function FwpmFilterEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmFilterDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function FwpmFilterGetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterGetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function FwpmFilterSetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterSetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(key), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function FwpmFilterSubscribeChanges0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_FILTER_CHANGE_CALLBACK0 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  changeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterSubscribeChanges0(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(changeHandle));
}

export function FwpmFilterUnsubscribeChanges0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  changeHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterUnsubscribeChanges0(util.toPointer(engineHandle), util.toPointer(changeHandle));
}

export function FwpmFilterSubscriptionsGet0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmFilterSubscriptionsGet0(util.toPointer(engineHandle), util.toPointer(entries), util.toPointer(numEntries));
}

export function FwpmGetAppIdFromFileName0(
  fileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  appId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmGetAppIdFromFileName0(util.pwstrToFfi(fileName), util.toPointer(appId));
}

export function FwpmIPsecTunnelAdd0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  flags: number /* u32 */,
  mainModePolicy: Deno.PointerValue | Uint8Array | null /* ptr */,
  tunnelPolicy: Deno.PointerValue | Uint8Array | null /* ptr */,
  numFilterConditions: number /* u32 */,
  filterConditions: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmIPsecTunnelAdd0(util.toPointer(engineHandle), flags, util.toPointer(mainModePolicy), util.toPointer(tunnelPolicy), numFilterConditions, util.toPointer(filterConditions), util.toPointer(sd));
}

export function FwpmIPsecTunnelAdd1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  flags: number /* u32 */,
  mainModePolicy: Deno.PointerValue | Uint8Array | null /* ptr */,
  tunnelPolicy: Deno.PointerValue | Uint8Array | null /* ptr */,
  numFilterConditions: number /* u32 */,
  filterConditions: Deno.PointerValue | Uint8Array | null /* ptr */,
  keyModKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmIPsecTunnelAdd1(util.toPointer(engineHandle), flags, util.toPointer(mainModePolicy), util.toPointer(tunnelPolicy), numFilterConditions, util.toPointer(filterConditions), util.toPointer(keyModKey), util.toPointer(sd));
}

export function FwpmIPsecTunnelAdd2(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  flags: number /* u32 */,
  mainModePolicy: Deno.PointerValue | Uint8Array | null /* ptr */,
  tunnelPolicy: Deno.PointerValue | Uint8Array | null /* ptr */,
  numFilterConditions: number /* u32 */,
  filterConditions: Deno.PointerValue | Uint8Array | null /* ptr */,
  keyModKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmIPsecTunnelAdd2(util.toPointer(engineHandle), flags, util.toPointer(mainModePolicy), util.toPointer(tunnelPolicy), numFilterConditions, util.toPointer(filterConditions), util.toPointer(keyModKey), util.toPointer(sd));
}

export function FwpmIPsecTunnelAdd3(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  flags: number /* u32 */,
  mainModePolicy: Deno.PointerValue | Uint8Array | null /* ptr */,
  tunnelPolicy: Deno.PointerValue | Uint8Array | null /* ptr */,
  numFilterConditions: number /* u32 */,
  filterConditions: Deno.PointerValue | Uint8Array | null /* ptr */,
  keyModKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  sd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmIPsecTunnelAdd3(util.toPointer(engineHandle), flags, util.toPointer(mainModePolicy), util.toPointer(tunnelPolicy), numFilterConditions, util.toPointer(filterConditions), util.toPointer(keyModKey), util.toPointer(sd));
}

export function FwpmIPsecTunnelDeleteByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  key: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmIPsecTunnelDeleteByKey0(util.toPointer(engineHandle), util.toPointer(key));
}

export function IPsecGetStatistics0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ipsecStatistics: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecGetStatistics0(util.toPointer(engineHandle), util.toPointer(ipsecStatistics));
}

export function IPsecGetStatistics1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ipsecStatistics: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecGetStatistics1(util.toPointer(engineHandle), util.toPointer(ipsecStatistics));
}

export function IPsecSaContextCreate0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  outboundTraffic: Deno.PointerValue | Uint8Array | null /* ptr */,
  inboundFilterId: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextCreate0(util.toPointer(engineHandle), util.toPointer(outboundTraffic), util.toPointer(inboundFilterId), util.toPointer(id));
}

export function IPsecSaContextCreate1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  outboundTraffic: Deno.PointerValue | Uint8Array | null /* ptr */,
  virtualIfTunnelInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  inboundFilterId: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextCreate1(util.toPointer(engineHandle), util.toPointer(outboundTraffic), util.toPointer(virtualIfTunnelInfo), util.toPointer(inboundFilterId), util.toPointer(id));
}

export function IPsecSaContextDeleteById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextDeleteById0(util.toPointer(engineHandle), id);
}

export function IPsecSaContextGetById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  saContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextGetById0(util.toPointer(engineHandle), id, util.toPointer(saContext));
}

export function IPsecSaContextGetById1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  saContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextGetById1(util.toPointer(engineHandle), id, util.toPointer(saContext));
}

export function IPsecSaContextGetSpi0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  getSpi: Deno.PointerValue | Uint8Array | null /* ptr */,
  inboundSpi: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextGetSpi0(util.toPointer(engineHandle), id, util.toPointer(getSpi), util.toPointer(inboundSpi));
}

export function IPsecSaContextGetSpi1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  getSpi: Deno.PointerValue | Uint8Array | null /* ptr */,
  inboundSpi: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextGetSpi1(util.toPointer(engineHandle), id, util.toPointer(getSpi), util.toPointer(inboundSpi));
}

export function IPsecSaContextSetSpi0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  getSpi: Deno.PointerValue | Uint8Array | null /* ptr */,
  inboundSpi: number /* u32 */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextSetSpi0(util.toPointer(engineHandle), id, util.toPointer(getSpi), inboundSpi);
}

export function IPsecSaContextAddInbound0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  inboundBundle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextAddInbound0(util.toPointer(engineHandle), id, util.toPointer(inboundBundle));
}

export function IPsecSaContextAddOutbound0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  outboundBundle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextAddOutbound0(util.toPointer(engineHandle), id, util.toPointer(outboundBundle));
}

export function IPsecSaContextAddInbound1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  inboundBundle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextAddInbound1(util.toPointer(engineHandle), id, util.toPointer(inboundBundle));
}

export function IPsecSaContextAddOutbound1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  outboundBundle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextAddOutbound1(util.toPointer(engineHandle), id, util.toPointer(outboundBundle));
}

export function IPsecSaContextExpire0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextExpire0(util.toPointer(engineHandle), id);
}

export function IPsecSaContextUpdate0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  flags: Deno.PointerValue /* u64 */,
  newValues: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextUpdate0(util.toPointer(engineHandle), flags, util.toPointer(newValues));
}

export function IPsecSaContextCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function IPsecSaContextEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function IPsecSaContextEnum1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextEnum1(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function IPsecSaContextDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function IPsecSaContextSubscribe0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.IPSEC_SA_CONTEXT_CALLBACK0 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  eventsHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextSubscribe0(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(eventsHandle));
}

export function IPsecSaContextUnsubscribe0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  eventsHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextUnsubscribe0(util.toPointer(engineHandle), util.toPointer(eventsHandle));
}

export function IPsecSaContextSubscriptionsGet0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaContextSubscriptionsGet0(util.toPointer(engineHandle), util.toPointer(entries), util.toPointer(numEntries));
}

export function IPsecSaCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function IPsecSaEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function IPsecSaEnum1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaEnum1(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function IPsecSaDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function IPsecSaDbGetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaDbGetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function IPsecSaDbSetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecSaDbSetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function IPsecDospGetStatistics0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  idpStatistics: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecDospGetStatistics0(util.toPointer(engineHandle), util.toPointer(idpStatistics));
}

export function IPsecDospStateCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecDospStateCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function IPsecDospStateEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecDospStateEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntries));
}

export function IPsecDospStateDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.IPsecDospStateDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function IPsecDospGetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecDospGetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function IPsecDospSetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecDospSetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function IPsecKeyManagerAddAndRegister0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  keyManager: Deno.PointerValue | Uint8Array | null /* ptr */,
  keyManagerCallbacks: Deno.PointerValue | Uint8Array | null /* ptr */,
  keyMgmtHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecKeyManagerAddAndRegister0(util.toPointer(engineHandle), util.toPointer(keyManager), util.toPointer(keyManagerCallbacks), util.toPointer(keyMgmtHandle));
}

export function IPsecKeyManagerUnregisterAndDelete0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  keyMgmtHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.IPsecKeyManagerUnregisterAndDelete0(util.toPointer(engineHandle), util.toPointer(keyMgmtHandle));
}

export function IPsecKeyManagersGet0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecKeyManagersGet0(util.toPointer(engineHandle), util.toPointer(entries), util.toPointer(numEntries));
}

export function IPsecKeyManagerGetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecKeyManagerGetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(reserved), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function IPsecKeyManagerSetSecurityInfoByKey0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IPsecKeyManagerSetSecurityInfoByKey0(util.toPointer(engineHandle), util.toPointer(reserved), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function IkeextGetStatistics0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ikeextStatistics: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IkeextGetStatistics0(util.toPointer(engineHandle), util.toPointer(ikeextStatistics));
}

export function IkeextGetStatistics1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ikeextStatistics: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IkeextGetStatistics1(util.toPointer(engineHandle), util.toPointer(ikeextStatistics));
}

export function IkeextSaDeleteById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libfwpuclnt.IkeextSaDeleteById0(util.toPointer(engineHandle), id);
}

export function IkeextSaGetById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  sa: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IkeextSaGetById0(util.toPointer(engineHandle), id, util.toPointer(sa));
}

export function IkeextSaGetById1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  saLookupContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  sa: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IkeextSaGetById1(util.toPointer(engineHandle), id, util.toPointer(saLookupContext), util.toPointer(sa));
}

export function IkeextSaGetById2(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  saLookupContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  sa: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IkeextSaGetById2(util.toPointer(engineHandle), id, util.toPointer(saLookupContext), util.toPointer(sa));
}

export function IkeextSaCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IkeextSaCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function IkeextSaEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IkeextSaEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function IkeextSaEnum1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IkeextSaEnum1(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function IkeextSaEnum2(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IkeextSaEnum2(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function IkeextSaDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.IkeextSaDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function IkeextSaDbGetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IkeextSaDbGetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function IkeextSaDbSetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.IkeextSaDbSetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function FwpmNetEventCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function FwpmNetEventEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmNetEventEnum1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventEnum1(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmNetEventEnum2(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventEnum2(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmNetEventEnum3(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventEnum3(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmNetEventEnum4(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventEnum4(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmNetEventEnum5(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventEnum5(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmNetEventDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function FwpmNetEventsGetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventsGetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function FwpmNetEventsSetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventsSetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function FwpmNetEventSubscribe0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CALLBACK0 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  eventsHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventSubscribe0(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(eventsHandle));
}

export function FwpmNetEventUnsubscribe0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  eventsHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventUnsubscribe0(util.toPointer(engineHandle), util.toPointer(eventsHandle));
}

export function FwpmNetEventSubscriptionsGet0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventSubscriptionsGet0(util.toPointer(engineHandle), util.toPointer(entries), util.toPointer(numEntries));
}

export function FwpmNetEventSubscribe1(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CALLBACK1 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  eventsHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventSubscribe1(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(eventsHandle));
}

export function FwpmNetEventSubscribe2(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CALLBACK2 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  eventsHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventSubscribe2(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(eventsHandle));
}

export function FwpmNetEventSubscribe3(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CALLBACK3 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  eventsHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventSubscribe3(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(eventsHandle));
}

export function FwpmNetEventSubscribe4(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_NET_EVENT_CALLBACK4 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  eventsHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmNetEventSubscribe4(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(eventsHandle));
}

export function FwpmDynamicKeywordSubscribe0(
  flags: number /* u32 */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_DYNAMIC_KEYWORD_CALLBACK0 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  subscriptionHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmDynamicKeywordSubscribe0(flags, util.toPointer(callback), util.toPointer(context), util.toPointer(subscriptionHandle));
}

export function FwpmDynamicKeywordUnsubscribe0(
  subscriptionHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmDynamicKeywordUnsubscribe0(util.toPointer(subscriptionHandle));
}

export function FwpmSystemPortsGet0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  sysPorts: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSystemPortsGet0(util.toPointer(engineHandle), util.toPointer(sysPorts));
}

export function FwpmSystemPortsSubscribe0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_SYSTEM_PORTS_CALLBACK0 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  sysPortsHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSystemPortsSubscribe0(util.toPointer(engineHandle), util.toPointer(reserved), util.toPointer(callback), util.toPointer(context), util.toPointer(sysPortsHandle));
}

export function FwpmSystemPortsUnsubscribe0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  sysPortsHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmSystemPortsUnsubscribe0(util.toPointer(engineHandle), util.toPointer(sysPortsHandle));
}

export function FwpmConnectionGetById0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  id: Deno.PointerValue /* u64 */,
  connection: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmConnectionGetById0(util.toPointer(engineHandle), id, util.toPointer(connection));
}

export function FwpmConnectionEnum0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  numEntriesRequested: number /* u32 */,
  entries: Deno.PointerValue | Uint8Array | null /* ptr */,
  numEntriesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmConnectionEnum0(util.toPointer(engineHandle), util.toPointer(enumHandle), numEntriesRequested, util.toPointer(entries), util.toPointer(numEntriesReturned));
}

export function FwpmConnectionCreateEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmConnectionCreateEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumTemplate), util.toPointer(enumHandle));
}

export function FwpmConnectionDestroyEnumHandle0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  enumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmConnectionDestroyEnumHandle0(util.toPointer(engineHandle), util.toPointer(enumHandle));
}

export function FwpmConnectionGetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmConnectionGetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function FwpmConnectionSetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmConnectionSetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

export function FwpmConnectionSubscribe0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_CONNECTION_CALLBACK0 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  eventsHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmConnectionSubscribe0(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(eventsHandle));
}

export function FwpmConnectionUnsubscribe0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  eventsHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmConnectionUnsubscribe0(util.toPointer(engineHandle), util.toPointer(eventsHandle));
}

export function FwpmvSwitchEventSubscribe0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscription: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.NetworkManagement.WindowsFilteringPlatform.FWPM_VSWITCH_EVENT_CALLBACK0 */,
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  subscriptionHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmvSwitchEventSubscribe0(util.toPointer(engineHandle), util.toPointer(subscription), util.toPointer(callback), util.toPointer(context), util.toPointer(subscriptionHandle));
}

export function FwpmvSwitchEventUnsubscribe0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  subscriptionHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libfwpuclnt.FwpmvSwitchEventUnsubscribe0(util.toPointer(engineHandle), util.toPointer(subscriptionHandle));
}

export function FwpmvSwitchEventsGetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  securityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmvSwitchEventsGetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl), util.toPointer(securityDescriptor));
}

export function FwpmvSwitchEventsSetSecurityInfo0(
  engineHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  securityInfo: number /* u32 */,
  sidOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  sidGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sacl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libfwpuclnt.FwpmvSwitchEventsSetSecurityInfo0(util.toPointer(engineHandle), securityInfo, util.toPointer(sidOwner), util.toPointer(sidGroup), util.toPointer(dacl), util.toPointer(sacl));
}

